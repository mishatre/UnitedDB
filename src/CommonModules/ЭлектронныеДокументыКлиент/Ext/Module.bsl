////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Процедура открывает форму администрирования обмена электронными документами.
//
// Параметры:
//  ПараметрКоманды - ссылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьФормуОбменаЭлектроннымиДокументами(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИмяФормы = "ОбменЭлектроннымиДокументами";
	
	ПараметрыФормы = Новый Структура("ТекущийРаздел", ИмяФормы);
	
	#Если ВебКлиент Тогда
	ОкноОткрытияПанели = ПараметрыВыполненияКоманды.Окно;
	#Иначе
	ОкноОткрытияПанели = ПараметрыВыполненияКоманды.Источник;
	#КонецЕсли

	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияЭД.Форма.ОбменЭлектроннымиДокументами",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ОкноОткрытияПанели);
	
КонецПроцедуры

// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть.
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЭД = Неопределено;
	ОткрытьФормуСоглашения = Ложь;
	ПроверятьДляСоглашения = (ПараметрыОткрытия = Неопределено);
	Если ЭлектронныеДокументыСлужебныйВызовСервера.МожноОткрытьВФормеДереваЭД(СсылкаНаОбъект,
		ПроверятьДляСоглашения, ОткрытьФормуСоглашения, ПараметрыЭД) Тогда
		
		ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия, Ложь);
	ИначеЕсли ОткрытьФормуСоглашения Тогда
		ПараметрыФормы = Новый Структура;
		ЗначенияЗаполнения = Новый Структура;
		
		Если ПараметрыЭД.Свойство("НастройкаЭДО") Тогда
			ПараметрыФормы.Вставить("Ключ", ПараметрыЭД.НастройкаЭДО);
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("Контрагент", ПараметрыЭД.Контрагент);
		ЗначенияЗаполнения.Вставить("Организация", ПараметрыЭД.Организация);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы,
			ПараметрыОткрытия.Источник, ПараметрыОткрытия.Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет документ ИБ на основании актуального ЭД
//
// Параметры:
//  ПараметрКоманды - ссылка на объект
//  Источник - управляемая форма
//
Процедура ПерезаполнитьДокумент(ПараметрКоманды, Источник = Неопределено, СопоставлениеУжеВыполнено = Ложь, ЭД = Неопределено) Экспорт
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		ЭлектронныеДокументыСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивПроведенныхДокументов(МассивСсылок);
	Шаблон = НСтр("ru = 'Обработка документа %1.
						|Операция возможна только для непроведенных документов!'");
	Для Каждого Документ ИЗ МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = Ложь;
	ЭлектронныеДокументыКлиентПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента(
												СопоставлятьНоменклатуруПередЗаполнениемДокумента);
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		СоответствиеВладельцевИЭД = Новый Соответствие;
		СоответствиеВладельцевИЭД.Вставить(ПараметрКоманды, ЭД);
	Иначе
		СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(
																									МассивСсылок);
	КонецЕсли;
	
	Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru = 'Электронный документ для %1 не найден'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхВладельцев = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда
			СсылкаНаЭД = ТекущаяСтрока.Значение;
			ОбъектМетаданных = "";
			ДокументЗагружен = Ложь;
			Если СопоставлятьНоменклатуруПередЗаполнениемДокумента И Не СопоставлениеУжеВыполнено Тогда
				СтруктураПараметров = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
					СсылкаНаЭД);
				Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров.СопоставлятьНоменклатуру Тогда
					ОткрытьФорму(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы, Источник);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ПерезаполнитьДокументыИБПоЭД(
																	ТекущаяСтрока.Ключ,
																	СсылкаНаЭД,
																	ОбъектМетаданных,
																	ДокументЗагружен);
			
			Если ДокументЗагружен Тогда
				МассивИзмененныхВладельцев.Добавить(ТекущаяСтрока.Ключ);
				
				Оповестить("ОбновитьСостояниеЭД");
				Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивИзмененныхВладельцев);
			КонецЕсли;
			
			Если ДокументЗагружен И НЕ СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
				СтруктураПараметров = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
					СсылкаНаЭД);
				Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров.СопоставлятьНоменклатуру Тогда
					ЗначениеВозврата = ОткрытьФормуМодально(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы);
				КонецЕсли;
				
				ФормаДокумента = ПолучитьФорму(ОбъектМетаданных + ".ФормаОбъекта", Новый Структура("Ключ", ТекущаяСтрока.Ключ));
				
				Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
					ДанныеФормы = ФормаДокумента.Объект;
				Иначе
					ДанныеФормы = ФормаДокумента.ДокументОбъект;
				КонецЕсли;
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
				
				Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
					КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
				Иначе
					ФормаДокумента.ДокументОбъект = ДанныеФормы;
				КонецЕсли;
				
				ФормаДокумента.Открыть();
				ФормаДокумента.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИзмененныхВладельцев.Количество() > 0 Тогда
		
		ТекстСостоянияВывод = НСтр("ru = 'Документ перезаполнен.'");
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
		
	КонецЕсли;

КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ
//
// Параметры:
//  ПараметрКоманды - ссылка на документ ИБ;
//  Источник - управляемая форма;
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
				
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД,
																		  ПараметрыОткрытия,
																		  ПараметрыОткрытия.Источник);
			Иначе
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД, , Источник);
			КонецЕсли;
			
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Актуальный электронный документ не найден!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ТекЭл);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму с деревом электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра дерева электронных документов.
//  ПроверятьСоглашение - Булево - используется для исключения лишнего серверного вызова,
//    при вызове данной процедуры из процедуры ОткрытьСписокЭД(...), т.к. данная проверка там уже выполнялась.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ПроверятьСоглашение = Истина) Экспорт
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЭД = Неопределено;
	Если ПроверятьСоглашение
		И Не ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД) Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияЗаполнения = Новый Структура;
		
		Если ПараметрыЭД.Свойство("НастройкаЭДО") Тогда
			ПараметрыФормы.Вставить("Ключ", ПараметрыЭД.НастройкаЭДО);
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("Контрагент", ПараметрыЭД.Контрагент);
		ЗначенияЗаполнения.Вставить("Организация", ПараметрыЭД.Организация);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
		
	Иначе
		
		ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ДеревоЭД", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
				Если ПараметрыОткрытия.Свойство("ИсходныйДокумент") Тогда
					ПараметрыФормы.Вставить("ИсходныйДокумент", ПараметрыОткрытия.ИсходныйДокумент)
				КонецЕсли;
			КонецЕсли;
			
			ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ДеревоЭД", ПараметрыФормы,
				ПараметрыОткрытия.Источник, ПараметрыОткрытия.Уникальность, Окно);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает, подписывает и отправляет электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить", , ЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура СформироватьНовыйЭД(ПараметрКоманды, Показывать = Истина) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Показывать Тогда
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПоказать");
	Иначе
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Сформировать");
	КонецЕсли;
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к прямому обмену с контрагентами.
//
Процедура ПомощникПодключенияКПрямомуОбмену() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к сервису 1С-Такском.
//
Процедура ПомощникПодключенияКСервису1СТакском() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к сервису 1С-ЭДО.
//
Процедура ПомощникПодключенияКСервису1СЭДО() Экспорт
	
	ПараметрыАутентификации = ЭлектронныеДокументыСлужебныйКлиент.АутентификацияНаСайте(Истина);
	Если ПараметрыАутентификации <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		СпособыОЭД = Новый Массив;
		СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
		ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
		ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Запускает обработку "Текущие дела по ЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО() Экспорт
	
	ОткрытьФорму("Обработка.ТекущиеДелаПоЭДО.Форма");
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ФормаПросмотраЭД = ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	
КонецПроцедуры

// Процедура создает новый электронный каталог.
//
Процедура БыстрыйОбменСформироватьНовыйЭДКаталог() Экспорт
	
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	Организация = ОткрытьФормуМодально("Справочник." + НазваниеСправочникаОрганизации + ".ФормаВыбора");
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
		АдресВоВременномХранилище, Новый УникальныйИдентификатор());
	
	Если АдресВоВременномХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКаталога = Новый Структура;
	СтруктураКаталога.Вставить("Организация", Организация);
	СтруктураКаталога.Вставить("ТоварыКаталога", АдресВоВременномХранилище);
	
	Параметры = Новый Структура("СтруктураКаталога", СтруктураКаталога);
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ОтправитьПовторно", , ЭД);
	
КонецПроцедуры

// Проверяет на модифицированность объект.
//
// Параметры:
//  Объект - объекта, модифицированность которого надо проверить;
//  Форма - форма объекта, модифицированность которого надо проверить.
//
// Возвращаемое значение:
//  Результат - Булево - результат проверки модифицированности формы объекта.
//
Функция ОбъектМодифицирован(Объект, Форма) Экспорт
	
	Результат = Ложь;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПроверки = Неопределено;
		ЭлектронныеДокументыКлиентПереопределяемый.ОбъектМодифицирован(Объект, Форма, РезультатПроверки);
		Если РезультатПроверки = Неопределено Тогда
			Результат = Истина;
			Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
				СтрПроведен = ?(Проведен, "записать и провести.
				|Записать и провести?", "записать.
				|Записать?");
				
				ШаблонСообщения = НСтр("ru = 'Документ изменен. Для формирования электронного документа его необходимо %1'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПроведен);
				
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена, Нстр("ru = 'Документ изменен.'"));
				Если Ответ = КодВозвратаДиалога.ОК Тогда
					Если Проведен Тогда
						Попытка
							Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
						Исключение
							Предупреждение(Нстр("ru = 'Операция не выполнена!'"));
							Отказ = Истина;
						КонецПопытки;
					Иначе
						Отказ = Не Форма.ЗаписатьВФорме();
					КонецЕсли;
					
					Если Не Отказ Тогда
						Результат = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Результат = Ложь;
			КонецЕсли;
		Иначе
			Результат = РезультатПроверки;
		КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Отправка и получение электронных документов одной командой.
//
//
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

// Загружает файл электронного документа в документ ИБ.
//
// Параметры:
//  СсылкаНаДокумент - Ссылка на объект ИБ, данные которого необходимо перезаполнить.
//
Процедура БыстрыйОбменЗагрузитьЭД(СсылкаНаДокумент = Неопределено) Экспорт
	
	Файл = Неопределено;
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	Если ПоместитьФайл(АдресВХранилище, , Файл, Истина, УникальныйИдентификатор) Тогда
		
		Расширение = Прав(Файл, 3);
		
		Если Не (ВРег(Расширение) = Врег("zip") Или Врег(Расширение) = Врег("xml")) Тогда
			ТекстСообщения = НСтр("ru = 'Не корректный формат файла.
								  |Выберите файл с расширением ""zip"" или ""xml"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		СтруктураОбмена = Новый Структура("НаправлениеЭД, УникальныйИдентификатор, АдресХранилища, СсылкаНаДокумент, ИмяФайла, ФайлАрхива",
			ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"), УникальныйИдентификатор, АдресВХранилище,
			СсылкаНаДокумент, Файл, ВРег(Расширение) = Врег("zip"));
			
		Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаЗагрузкиПросмотраЭД", Параметры, ,
			СтруктураОбмена.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Загружает файл электронного документа в данные ИБ, используется для вывода команды в интерфейсы.
//
Процедура БыстрыйОбменЗагрузитьЭДИзФайла() Экспорт
	
	БыстрыйОбменЗагрузитьЭД();
	
КонецПроцедуры

// Процедура принудительно закрывает электронный документооборот для массива ссылок на документы.
//
// Параметры:
//   МассивВладельцевЭД - Массив - содержит ссылки на документы ИБ, для которых требуется закрыть
//      электронный документооборот.
//
Процедура ЗакрытьПринудительноЭДО(МассивВладельцевЭД) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(МассивВладельцевЭД);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаЗакрытия = "";
	УточнениеВведено = ВвестиСтроку(ПричинаЗакрытия, НСтр("ru = 'Укажите причину закрытия документооборота'"), , Истина);
	
	Если УточнениеВведено И ЗначениеЗаполнено(ПричинаЗакрытия) Тогда
		КоличествоОбработанныхЭД = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(МассивСсылок, ПричинаЗакрытия, КоличествоОбработанныхЭД);
		
		ТекстОповещения = НСтр("ru = 'Изменено состояние ЭД документов на ""Закрыт принудительно"": (%1)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", КоличествоОбработанныхЭД);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка документов'"), , ТекстОповещения);
		Если КоличествоОбработанныхЭД > 0 Тогда
			Оповестить("ОбновитьСостояниеЭД");
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Открывается форма списка только с закладкой Настройки ЭДО с контрагентами.
//
Процедура ОткрытьФормуНастроекЭДОСКонтрагентами() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиЭДОСКонтрагентами", Истина);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор электронных документов для передачи в ФНС

// Получает документы информационной базы по заданным критериям отбора.
// Процедура предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - структура, параметры отбора для формы выбора документов ИБ;
//
Процедура ПолучитьСвойстваДокументовИБДляПередачиФНС(СтруктураОтбора = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияВызова", 3);
	
	Если СтруктураОтбора <> Неопределено Тогда
		Если СтруктураОтбора.Свойство("ВидДокумента") Тогда
			ПараметрыФормы.Вставить("ВидДокумента", СтруктураОтбора.ВидДокумента);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Организация") Тогда
			ПараметрыФормы.Вставить("Организация", СтруктураОтбора.Организация);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Контрагент") Тогда
			ПараметрыФормы.Вставить("Контрагент", СтруктураОтбора.Контрагент);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыбораЭДДляПередачиФНС", ПараметрыФормы);
	
КонецПроцедуры

// Получает документы информационной базы по заданным критериям отбора.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - структура, параметры отбора для формы выбора документов ИБ;
//  МножественныйВыбор - булево, свойство формы выбора.
//
Функция ПолучитьДокументыИБДляПередачиФНС(СтруктураОтбора, МножественныйВыбор) Экспорт
	
	МассивДокументовИБ = Новый Массив;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияВызова", 2);
	ПараметрыФормы.Вставить("МножественныйВыбор", МножественныйВыбор);
	
	Если СтруктураОтбора.Свойство("ВидДокумента") Тогда
		ПараметрыФормы.Вставить("ВидДокумента", СтруктураОтбора.ВидДокумента);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Организация") Тогда
		ПараметрыФормы.Вставить("Организация", СтруктураОтбора.Организация);
	КонецЕсли;
	
	Если СтруктураОтбора.Свойство("Контрагент") Тогда
		ПараметрыФормы.Вставить("Контрагент", СтруктураОтбора.Контрагент);
	КонецЕсли;
	МассивДокументовИБ = ОткрытьФормуМодально("Обработка.ЭлектронныеДокументы.Форма.ФормаВыбораЭДДляПередачиФНС", ПараметрыФормы);
	
	Возврат МассивДокументовИБ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Команды работы с файлами

// Сохраняет текущую версию файла в выбранный каталог на жестком или сетевом диске.
Процедура СохранитьКак(ДанныеФайла) Экспорт
	
	ЭлектронныеДокументыСлужебныйКлиент.СохранитьКак(ДанныеФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Отправляет запрос выписки в банк, а после получения выписки вызывает оповещение о выборе
// для формы или элемента формы, указанного в параметре Владелец
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД, текущее соглашение;
//  ДатаНачала - дата, начало периода запроса
//  ДатаОкончания - дата, окончание периода запроса
//  Владелец - Форма или элемент формы - получатель оповещения о выборе элемента - выписки банка
//  НомерСчета - Строка, номер банковского счета организации. Если не указан, то запрос по всем счетам;
//
Процедура ПолучитьВыпискуБанка(СоглашениеЭД, ДатаНачала, ДатаОкончания, Владелец, НомерСчета = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("СоглашениеЭД",  СоглашениеЭД);
	Параметры.Вставить("НомерСчета",    НомерСчета);
	Параметры.Вставить("ДатаНачала",    ДатаНачала);
	Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	ПараметрыАвторизации = Новый Структура;
	РеквизитыСоглашения = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСоглашенияЭД(СоглашениеЭД);
	Если Не РеквизитыСоглашения.ИспользуетсяКриптография Тогда
		Если ЭлектронныеДокументыСлужебныйКлиент.ПолученыДанныеАвторизации(СоглашениеЭД, ПараметрыАвторизации) Тогда
			Параметры.Вставить("Пользователь", ПараметрыАвторизации.Пользователь);
			Параметры.Вставить("Пароль", ПараметрыАвторизации.Пароль);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВыписки", Параметры, Владелец);
	
КонецПроцедуры

