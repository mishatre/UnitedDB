Перем мПериод          Экспорт; // Период движений
Перем мТаблицаДвижений Экспорт; // Таблица движений

// Выполняет приход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьПриход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Приход);

КонецПроцедуры // ВыполнитьПриход()

// Выполняет расход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьРасход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Расход);

КонецПроцедуры // ВыполнитьРасход()

// Выполняет движения по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьДвижения() Экспорт

	Загрузить(мТаблицаДвижений);

КонецПроцедуры // ВыполнитьДвижения()

// Процедура контролирует остаток по данному регистру по переданному документу
// и его табличной части. В случае недостатка товаров выставляется флаг отказа и 
// выдается сообщение.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа, 
//  Параметры      - структура, содержащая значения параметров, необходимых для контроля остатков
//  Отказ          - флаг отказа в проведении,
//  Заголовок      - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольОстатков(ДокументОбъект, Параметры, Отказ, Заголовок) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	ИмяТабличнойЧасти   = Параметры["ИмяТабЧасти"];
	ИмяТаблицы          = ИмяДокумента + "." + СокрЛП(ИмяТабличнойЧасти);
	ЕстьХарактеристика  = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЕдИзм           = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти);
	ИмяРеквизитаЗаказ   = Параметры["ИмяРеквизитаЗаказ"];
	ПутьКЗаказу         = ?(Параметры["ЗаказВШапке"], "Ссылка.", "") + ИмяРеквизитаЗаказ;
	
	// Определение необязательных параметров
	ЕстьКачество        = Ложь;
	ТолькоОтрицательные = Ложь; // Из документа выбирать только строки с отрицательным количеством,
								// соответственно контроль остатков выполняется только для них.
								// Имеет смысл, например, для документа КорректировкаВнутреннегоЗаказа.
	КолЗнак             = "";   // Означает что знак "+", т.е. знак количества не меняем
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("КачествоТолькоНовый") Тогда
			ЕстьКачество = Параметры.Свойство("КачествоТолькоНовый") И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ИмяТабличнойЧасти);
		КонецЕсли;
		Если Параметры.Свойство("ТолькоОтрицательноеКоличество") Тогда
			ТолькоОтрицательные = Параметры["ТолькоОтрицательноеКоличество"];
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЕдИзм Тогда
		ТекстКоличество = "Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
	Иначе
		ТекстКоличество = "Док.Количество";
	КонецЕсли;
	
	Если ТолькоОтрицательные Тогда
		КолЗнак = "-";
	КонецЕсли;
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ
	|	Документ." + ИмяТаблицы +"
	|ГДЕ Ссылка = &ДокументСсылка";

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр( "ДокументСсылка",  ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("СтатусПартии", ?( ИмяТабличнойЧасти = "ВозвратнаяТара",
		Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,
		Перечисления.СтатусыПартийТоваров.Купленный));
	Запрос.УстановитьПараметр( "ПустВнутрЗаказ",  Документы.ВнутреннийЗаказ.ПустаяСсылка());
	Запрос.УстановитьПараметр( "КачествоНовый",   Справочники.Качество.Новый);

	ТекстЗапроса = "
	|ВЫБРАТЬ // Запрос, контролирующий остатки на складах
	|	Док.Номенклатура                             КАК Номенклатура,
	|	Док.Номенклатура.Представление               КАК НоменклатураПредставление,
	|	Док.ЕдИзм				                     КАК ЕдиницаИзмерения,
	|	СУММА(Док.Количество)                        КАК ДокКоличество,
	|	Док.Заказ									 КАК Заказ,
	|	Док.ЕдИзм.Представление        				 КАК ЕдиницаХраненияОстатковПредставление,"
	+ ?(ЕстьХарактеристика, "
	|	Док.ХарактеристикаНоменклатуры				 КАК ХарактеристикаНоменклатуры,"
	,"") + "
	|	СУММА(Док.ДокументКоличество)             	 КАК ДокументКоличество, 
	|	ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0) КАК ОстатокКоличество
	|ИЗ ( ВЫБРАТЬ Ссылка,Номенклатура, "+
	?(ЕстьХарактеристика, "
	|	ХарактеристикаНоменклатуры,","")+"
	|	"+ПутьКЗаказу+" КАК Заказ,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзм,
	|	Сумма( %КолЗнак% Количество) КАК Количество,
	|	СУММА( %КолЗнак% " + ТекстКоличество + " )    КАК ДокументКоличество
	|	ИЗ
	|		Документ." + ИмяТаблицы + " КАК Док
	|	ГДЕ
	|		Док.Ссылка = &ДокументСсылка "
			+ ?(ЕстьКачество,        " И Док.Качество = &КачествоНовый ", "")
			+ ?(ТолькоОтрицательные, " И Док.Количество < 0 ", "") + "
	|	СГРУППИРОВАТЬ ПО Ссылка, Номенклатура, "+ПутьКЗаказу+?(ЕстьХарактеристика, ",ХарактеристикаНоменклатуры","")+"
	|   ) КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(,
	|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|   И СтатусПартии    = &СтатусПартии) КАК Остатки
	|ПО 
	|	Док.Номенклатура  = Остатки.Номенклатура
	|	И Док.Заказ = Остатки.ВнутреннийЗаказ "
	+ ?(ЕстьХарактеристика, "
	| И Док.ХарактеристикаНоменклатуры  = Остатки.ХарактеристикаНоменклатуры"
	,"")
	+ "
	|
	|ГДЕ
	|	Док.Ссылка  =  &ДокументСсылка
	| И Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ
	| И Док.Заказ <> &ПустВнутрЗаказ 
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	Док.Номенклатура,
	|   Док.ЕдИзм,
	|	Док.Заказ"
	+ ?(ЕстьХарактеристика, "
	|	, Док.ХарактеристикаНоменклатуры "
	,"") + "
	|	
	|ИМЕЮЩИЕ ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0) < СУММА(Док.ДокументКоличество)
	|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.ВнутренниеЗаказы.Остатки // Блокирующие чтение таблицы остатков регистра для разрешения коллизий многопользовательской работы	
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%КолЗнак%", КолЗнак);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл			

		СтрокаСообщения = "Остатка " + 
		УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление,
								  ?(ЕстьХарактеристика, Выборка.ХарактеристикаНоменклатуры, "")) +
		", заказанного по документу " + (Выборка.Заказ) + " недостаточно.";

		УправлениеЗапасами.ОшибкаНетОстатка(СтрокаСообщения, Выборка.ОстатокКоличество, Выборка.ДокументКоличество,
		Выборка.ЕдиницаХраненияОстатковПредставление, Отказ, Заголовок);		
	КонецЦикла;


КонецПроцедуры // КонтрольОстатков()

