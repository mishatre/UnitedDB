//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ

// Данная процедура пополняет состав одной таблицы значений данными из другой.
//
// Аргументы:
//	ТаблицаПриемник		- пополняемая таблица
//	ТаблицаИсточник 	- таблица-источник данных. Если не указана - создается новая. 
//						Если не содержит колонок - создаются колонки как в источнике.
//	СПозиции 			- номер строки пополняемой таблицы, с которой производится добавление
//	НомерСтрокиИсточника - если указан номер строки таблимцы-источника
//						- добавляется данные только из нее
//
//
Процедура ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник, СПозиции = -1, НомерСтрокиИсточника = -1) Экспорт

	Если ТипЗнч(ТаблицаПриемник) <> Тип("ТаблицаЗначений") И ТипЗнч(ТаблицаПриемник) <> Тип("КоллекцияСтрокДереваЗначений") Тогда
		
		ТаблицаПриемник = Новый ТаблицаЗначений;
		
	КонецЕсли;
		
	Если ТипЗнч(ТаблицаПриемник) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаПриемник.Колонки.Количество() = 0 Тогда
			
			Если НомерСтрокиИсточника < 0 Тогда
				
				ТаблицаПриемник = ТаблицаИсточник.Скопировать();
				Возврат;
				
			Иначе
				
				Для каждого Колонка из ТаблицаИсточник.Колонки Цикл
					
					ТаблицаПриемник.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если НомерСтрокиИсточника < 0 Тогда
		
		Для каждого СтрокаИсточник из ТаблицаИсточник Цикл
			
			// добавить (вставить) строку
			Если СПозиции < 0 Тогда
				
				НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();
				
			Иначе
				
				НоваяСтрокаПриемник = ТаблицаПриемник.Вставить(СПозиции + ТаблицаИсточник.Индекс(СтрокаИсточник));
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, СтрокаИсточник);
			
		КонецЦикла;
			
	Иначе
		
		// добавить (вставить) строку
		Если СПозиции < 0 Тогда
			
			НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();
			
		Иначе
			
			НоваяСтрокаПриемник = ТаблицаПриемник.Вставить(СПозиции);
			
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, ТаблицаИсточник[НомерСтрокиИсточника]);
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьТаблицу()

// Данная функция определяет, возможна ли предполагаемая корректировка
// плановых данны исходня из того, попадает ли корректировка в закрытые даты
//
// Аргументы:
//  ВидПланирования - 
//  Подразделение (необязательный) - Значение по умолчанию - пустое подразделение.
//  Проект (необязательный) - Значение по умолчанию - пустой проект.
//  Сценарий (необязательный) - Значение по умолчанию - пустой сценарий.
//  ДатаЛимита (необязательный) - Значение по умолчанию - пустая дата ('00010101000000').
//
//
// Возвращаемое значение:
//  Дата, являющаяся границей фиксации периодов
//
Функция ПолучитьГраницуФиксацииПериодов(ВидПланирования, Знач Подразделение = Неопределено,	Проект = Неопределено, Знач Сценарий = Неопределено, Знач ДатаЛимита = '00010101000000') Экспорт

	Если Подразделение = Неопределено Тогда

		Подразделение = Справочники.Подразделения.ПустаяСсылка();

	КонецЕсли; 

	Если Проект = Неопределено Тогда

		Проект = Справочники.Проекты.ПустаяСсылка();

	КонецЕсли; 

	Если Сценарий = Неопределено Тогда

		Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();

	КонецЕсли; 

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГраницыПериодовПланирования.ВидПланирования,
	|	ГраницыПериодовПланирования.ГраницаФиксации,
	|	ГраницыПериодовПланирования.Подразделение,
	|	ГраницыПериодовПланирования.Проект,
	|	ГраницыПериодовПланирования.Сценарий
	|ИЗ
	|	РегистрСведений.ГраницыПериодовПланирования КАК ГраницыПериодовПланирования
	|
	|ГДЕ
	|	ГраницыПериодовПланирования.ВидПланирования = &ВидПланирования И
	|	(ГраницыПериодовПланирования.Подразделение В (&Подразделение, &ПустоеПодразделение)) И
	|	(ГраницыПериодовПланирования.Проект В (&Проект, &ПустойПроект)) И
	|	(ГраницыПериодовПланирования.Сценарий В (&Сценарий, &ПустойСценарий)) И
	|	(ГраницыПериодовПланирования.ГраницаФиксации > &ДатаПланирования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГраницаФиксации УБЫВ");

	Запрос.УстановитьПараметр("ВидПланирования", ВидПланирования);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПустойСценарий", Справочники.СценарииПланирования.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаПланирования", ДатаЛимита);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда

		Возврат ДатаЛимита; // нет ограничений

	Иначе

		Выборка = Результат.Выбрать();
		Выборка.Следующий();

		Возврат Выборка.ГраницаФиксации;

	КонецЕсли; 

КонецФункции // ПолучитьГраницуФиксацииПериодов()


//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ПЕРИОДАМИ

// Выравнивает дату по началу периода.
//
// Параметры:
//  ДатаПланирования  - выравниваемая дата
//  Периодичность     - тип интервала для выравнивания
//  НазваниеДаты 	  - наименование вида даты для вывода сообщения
//  ВыводитьСообщение - признак необходимости вывода сообщения о выравнивании
//
Процедура ВыровнятьДатуПоНачалуПериода(ДатаПланирования, Периодичность, НазваниеДаты = Неопределено, ВыводитьСообщение = Ложь) Экспорт

	ДатаИзменена = Ложь;
	ДатаНачПериода = ДатаПланирования;
	ВыровнятьПериод(ДатаНачПериода,, Периодичность);
	
	Если ДатаПланирования <> ДатаНачПериода Тогда
		
		ДатаПланирования = ДатаНачПериода;
		ДатаИзменена = Истина;
		
	КонецЕсли;
	
	Если ВыводитьСообщение И ДатаИзменена Тогда
		
		Если НазваниеДаты = Неопределено Тогда
			
			НазваниеДаты = НСтр("ru='Дата начала периода '");
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьОбОшибке(НазваниеДаты + НСтр("ru='изменена в соответствии с установленной периодичностью.'"));
		
	КонецЕсли;

КонецПроцедуры // ВыровнятьДатуПоНачалуПериода()

// Выравнивает дату по окончанию периода.
//
// Параметры:
//  ДатаПланирования  - выравниваемая дата
//  Периодичность     - тип интервала для выравнивания
//  НазваниеДаты 	  - наименование вида даты для вывода сообщения
//  ВыводитьСообщение - признак необходимости вывода сообщения о выравнивании
//
Процедура ВыровнятьДатуПоКонцуПериода(ДатаПланирования, Периодичность, НазваниеДаты = Неопределено, ВыводитьСообщение = Ложь) Экспорт
	
	ДатаИзменена = Ложь;
	ДатаКонПериода = ДатаПланирования;
	ВыровнятьПериод(, ДатаКонПериода, Периодичность);
	
	Если ДатаПланирования <> ДатаКонПериода Тогда
		
		ДатаПланирования = ДатаКонПериода;
		ДатаИзменена = Истина;
		
	КонецЕсли;
	
	Если ВыводитьСообщение и ДатаИзменена Тогда
		
		Если НазваниеДаты = Неопределено Тогда
			
			НазваниеДаты = НСтр("ru='Дата окончания периода '");
			
		КонецЕсли;
			
		ОбщегоНазначения.СообщитьОбОшибке(НазваниеДаты + НСтр("ru='изменена в соответствии с установленной периодичностью.'"));
		
	КонецЕсли;

КонецПроцедуры // ВыровнятьДатуПоКонцуПериода()

// Процедура выравнивает начальнаю и конечную даты по границам указанной периодичности
// 		ДатаНачПериода - дата, которую нужно выровнять по началу указанной периодичностью
// 		ДатаКонПериода - дата, которую нужно выровнять по окончанию указанной периодичностью
// 		Периодичность - периодичность, определяющая границы выравнивания
// 
Процедура ВыровнятьПериод(ДатаНачПериода = Неопределено, ДатаКонПериода = Неопределено, Периодичность = Неопределено) Экспорт
	
	Если ТипЗнч(Периодичность) <> Тип("ПеречислениеСсылка.Периодичность") ИЛИ Периодичность = Перечисления.Периодичность.ПустаяСсылка() Тогда
		
		ТекущаяПериодичность = Перечисления.Периодичность.День;
		
	Иначе
		
		ТекущаяПериодичность = Периодичность;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&ДатаНач, " + Строка(ТекущаяПериодичность) + ") КАК ДатаНач,
	|	КОНЕЦПЕРИОДА(&ДатаКон, " + Строка(ТекущаяПериодичность) + ") КАК ДатаКон");
	
	Запрос.УстановитьПараметр("ДатаНач", ?(ТипЗнч(ДатаНачПериода) <> Тип("Дата"), Дата('00010101'), ДатаНачПериода));
	Запрос.УстановитьПараметр("ДатаКон", ?(ТипЗнч(ДатаКонПериода) <> Тип("Дата"), Дата('00010101'), ДатаКонПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДатаНачПериода = Выборка.ДатаНач;
	ДатаКонПериода = Выборка.ДатаКон;
	
КонецПроцедуры // ВыровнятьПериод()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЦЕЛЫМИ ЧИСЛАМИ

Функция ПолучитьНаибольшийОбщийДелитель(Знач a, Знач b) Экспорт
	
	Если a = 0 ИЛИ b = 0 Тогда
		
		Возврат 1;
		
	КонецЕсли;

	Пока b <> 0 Цикл
		
		c = a % b;
		a = b;
		b = c;        
		
	КонецЦикла;
	
	Возврат a;

КонецФункции // ПолучитьНаибольшийОбщийДелитель()
