////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПрочитатьТаблицуСвойствИЗначений()
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НазначениеСвойств",       ?(НазначениеСвойств = Неопределено, ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ОбъектОтбораЗначений), НазначениеСвойств));
	Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    ОбъектОтбораЗначений);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СвойстваОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство,
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение            КАК Значение,
	|	СвойстваОбъектов.Наименование
	|
	|ИЗ
	|// Отбираются свойства, предназначенные для заданного типа объектов.
	|	(
	|	ВЫБРАТЬ 
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка          КАК Ссылка,
	|		ПланВидовХарактеристик.СвойстваОбъектов.Наименование    КАК Наименование,
	|		ПланВидовХарактеристик.СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В ( &НазначениеСвойств )
	|
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются значения свойств, назначенные для заданного объекта.
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются группы, которым назначено свойство, для отбора свойств.
	|// Если свойству назначено значение, оно отбирается в любом случае.
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|
	|ГДЕ
	|// Если значение свойства не задано, свойство должно быть назанчено
	|// или всем объектам, или одной из групп - родителей объекта.
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|	ИЛИ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект В ( &СписокНазначенийСвойств )
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектов.Наименование
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура заполняет табличную часть обработки свойствами и значениями свойств объекта.
// При заполнении используются значения реквизитов обработки: 
// ОбъектОтбораЗначений - объект, значения свойств которого отбираются.
// НазначениеСвойств - значение реквизита, по которому отбораются свойства.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения() Экспорт

	СвойстваИЗначения.Загрузить(ПрочитатьТаблицуСвойствИЗначений());

КонецПроцедуры

// Процедура открывает форму нового свойства.
// Предназначена для вызова из обработчиков форм СвойстваИЗначенияПередНачаломДобавления.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуНовогоСвойства(ФормаВладелец, Элемент = Неопределено, Копирование = Ложь) Экспорт

	ФормаНовогоСвойства = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуНовогоЭлемента(, ФормаВладелец, );
	
	Если Копирование И ЗначениеЗаполнено(Элемент.ТекущиеДанные) И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Свойство) Тогда
		
		ФормаНовогоСвойства.НазначениеСвойства = Элемент.ТекущиеДанные.Свойство.НазначениеСвойства;
		ФормаНовогоСвойства.Наименование = Элемент.ТекущиеДанные.Свойство.Наименование;
		ФормаНовогоСвойства.ТипЗначения  = Элемент.ТекущиеДанные.Свойство.ТипЗначения;
	Иначе
		
		НазначениеСвойств = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ОбъектОтбораЗначений);
		Если НазначениеСвойств.Количество() > 1  Тогда
			ВыбранныйЭлемент = НазначениеСвойств.ВыбратьЭлемент("Выбор назначения свойства");

			Если ВыбранныйЭлемент <> Неопределено Тогда
				ФормаНовогоСвойства.НазначениеСвойства = ВыбранныйЭлемент.Значение;
			КонецЕсли;

		ИначеЕсли НазначениеСвойств.Количество() = 1  Тогда
			 
			ФормаНовогоСвойства.НазначениеСвойства = НазначениеСвойств[0].Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	

	ФормаНовогоСвойства.Открыть();

КонецПроцедуры

// Процедура проверяет, должно ли новое свойство попасть в табличную часть обработки, 
// если да - добавляет свойство и активизирует соответствующую строку в табличном поле.
// Предназначена для вызова из обработчиков форм ОбработкаЗаписиНовогоОбъекта.
//
// Параметры:
//  Свойство - добавляемое свойство.
//  ТабличноеПоле - ТабличноеПоле, в котором надо активизировать строку.
//
Процедура ПроверитьДобавитьНовоеСвойство(Свойство, ТабличноеПоле) Экспорт

	// Запросом проверяется, должно ли новое свойство быть отобрано в табличную часть.

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("Свойство",                Свойство);
	Запрос.УстановитьПараметр("НазначениеСвойств",       НазначениеСвойств);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", СписокНазначенийСвойств());

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство
	|
	|ИЗ
	|// Отбирается свойство.
	|	(
	|	ВЫБРАТЬ 
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка          КАК Ссылка
	|
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В ( &НазначениеСвойств )
	|		И
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка             = &Свойство
	|
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются группы, которым назначено свойство, для отбора свойств.
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = &Свойство
	|
	|ГДЕ
	|// Свойство должно быть назанчено или всем объектам,
	|// или одной из групп - родителей объекта.
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|	ИЛИ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект В ( &СписокНазначенийСвойств )
	|";

	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;

	// Определение позиции свойства в табличной части.

	Для Индекс = 0 По СвойстваИЗначения.Количество() - 1 Цикл
		Если Свойство.Наименование < СвойстваИЗначения[Индекс].Свойство.Наименование Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Вставка свойства с соответствующую позицию.

	НоваяСтрока = СвойстваИЗначения.Вставить(Индекс);

	НоваяСтрока.ПометкаУдаления = Свойство.ПометкаУдаления;
	НоваяСтрока.Свойство        = Свойство;

	// Позиционирование курсора.

	ТабличноеПоле.ТекущаяСтрока  = НоваяСтрока;

КонецПроцедуры

// Процедура снимает и устанавливает пометку удаления свойства.
// Предназначена для вызова из обработчиков форм СвойстваИЗначенияПередУдалением.
//
// Параметры:
//  ТекущаяСтрока - текущая строка табличной части.
//
Процедура ИнвертироватьПометкуУдаленияСвойства(ТекущаяСтрока) Экспорт

	ОбъектСвойство = ТекущаяСтрока.Свойство.ПолучитьОбъект();

	Если ОбъектСвойство.Предопределенный Тогда
		Сообщить("Не допускается удаление предопределенных элементов!",СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Попытка
		ОбъектСвойство.УстановитьПометкуУдаления(НЕ ТекущаяСтрока.ПометкаУдаления, Истина);
	Исключение
		#Если Клиент Тогда
			Предупреждение("Не удалось изменить пометку удаления свойства:" + Символы.ПС + ОписаниеОшибки());
		#КонецЕсли
	КонецПопытки;

	ТекущаяСтрока.ПометкаУдаления = ОбъектСвойство.ПометкаУдаления;

	//Если ТекущаяСтрока.ПометкаУдаления Тогда
	//	ТекущаяСтрока.Значение = ТекущаяСтрока.Свойство.ТипЗначения.ПривестиЗначение(Неопределено);
	//КонецЕсли;

КонецПроцедуры

// Процедура приводит тип значения значения свойства к требуемому типу.
// Предназначена для вызова из обработчиков форм 
// СвойстваИЗначенияПриНачалеРедактирования, СвойстваИЗначенияЗначениеОчистка.
//
// Параметры:
//  Нет.
//
Процедура ПривестиТипЗначенияСвойства(ТекущаяСтрока, ЭлементУправления) Экспорт
	
	ТипЗначенияСвойства = ТекущаяСтрока.Свойство.ТипЗначения;
	ЭлементУправления.ОграничениеТипа = ТипЗначенияСвойства;
	ТекущаяСтрока.Значение = ТипЗначенияСвойства.ПривестиЗначение(ТекущаяСтрока.Значение);
	
КонецПроцедуры

// Процедура вызывается при выводе строки табличного поля "Свойства и значения"
// отображает пометку удаления и требуемый формат
//
Процедура ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
		
		Если ТипЗНЧ(ДанныеСтроки.Значение) = Тип("Дата") Тогда
			
			Если ДанныеСтроки.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
				ОформлениеСтроки.Ячейки.Значение.Текст = Формат(ДанныеСтроки.Значение, "ДФ=dd.MM.yyyy") 
			ИначеЕсли ДанныеСтроки.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				ОформлениеСтроки.Ячейки.Значение.Текст = Формат(ДанныеСтроки.Значение, "ДФ=ЧЧ:мм:сс") 
			КонецЕсли;
			
		ИначеЕсли ТипЗНЧ(ДанныеСтроки.Значение) = Тип("Число") Тогда
			
			ОформлениеСтроки.Ячейки.Значение.Текст = Формат(ДанныеСтроки.Значение, "ЧДЦ=" + ДанныеСтроки.Свойство.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти) 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // () 

// Функция записывает значения свойств в информационную базу.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Истина - если значения свойств были записаны, или их не требуется записывать
//  Ложь   - если значения свойств не удалось записать.
//
Функция ЗаписатьЗначенияСвойств() Экспорт
	
	НаборЗаписейЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	
	Для каждого Строка Из СвойстваИЗначения Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			Запись = НаборЗаписейЗначенияСвойств.Добавить();
			
			Запись.Объект   = ОбъектОтбораЗначений;
			Запись.Свойство = Строка.Свойство;
			Запись.Значение = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейЗначенияСвойств.Отбор.Объект.Установить(ОбъектОтбораЗначений);
	
	Попытка
		НаборЗаписейЗначенияСвойств.Записать();
	Исключение
		#Если Клиент Тогда
			Предупреждение("Не удалось записать значения свойств:" + Символы.ПС + ОписаниеОшибки());
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

// Функция формирует список значений, содержащий объект отбора назначений свойств 
// и всех его родителей. Список используется в качестве параметра запросов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Cписок значений, содержащий объект отбора назначений и всех его родителей.
//
Функция СписокНазначенийСвойств()

	СписокНазначенийСвойств = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ОбъектОтбораНазначений) Тогда
		ЭтоСправочник = Метаданные.Справочники.Содержит(ОбъектОтбораНазначений.Метаданные());
	КонецЕсли;
	
	Назначение = ОбъектОтбораНазначений;
	
	Пока ЗначениеЗаполнено(Назначение) Цикл
		
		СписокНазначенийСвойств.Добавить(Назначение);
		
		Если ЭтоСправочник Тогда
			Назначение = Назначение.Родитель;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокНазначенийСвойств;
	
КонецФункции

Функция ЗначенияСвойствМодифицированы() Экспорт

	ТаблицаСвойств = СвойстваИЗначения.Выгрузить();
	ТаблицаСвойств.Колонки.Удалить("НомерСтроки");
	
	ТаблицаЗапроса = ПрочитатьТаблицуСвойствИЗначений();
	// Приведем типы Неопределено к Null
	Для каждого СтрокаТЗ Из ТаблицаЗапроса Цикл
		Для каждого КолонкаТЗ Из ТаблицаЗапроса.Колонки Цикл
			Если СтрокаТЗ[КолонкаТЗ.Имя] = Null Тогда
				СтрокаТЗ[КолонкаТЗ.Имя] = Неопределено;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
	
	Возврат НЕ НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаЗапроса, ТаблицаСвойств);

КонецФункции // ЗначенияСвойствМодифицированы()
