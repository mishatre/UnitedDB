Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Добавляет в табличную часть Заказы строки с заказами поставщикам, по которым существуют
// остатки в регистре ЗаказыПоставщикам.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьЗаказыПоОстаткам() Экспорт

	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|ГДЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПоставщику = Выборка.ЗаказПоставщику;
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьЗаказыПоОстаткам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоЗаказамПоставщиков(СписокЗаказов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ДоговорКонтрагента,
	|    ЗаказПоставщику,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    СтатусПартии,
	|    Цена,
	|    СтавкаНДС,
	|    ЕдиницаИзмерения,
	|    КоличествоОстаток          КАК Количество,
	|    СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|    СуммаУпрОстаток            КАК СуммаУпр
	|ИЗ
	|    РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментДокумента, ЗаказПоставщику В (&СписокЗаказов))
	|Упорядочить по
	|    ДоговорКонтрагента,
	|    ЗаказПоставщику,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    СтатусПартии,
	|    Цена,
	|    СтавкаНДС,
	|    ЕдиницаИзмерения
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПодготовитьТаблицуПоЗаказамПоставщиков()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоТоварам, ВыборкаПоШапкеДокумента, 
	                                              Отказ, Заголовок)
	// Проверим даты Заказов, они не должны быть больше даты документа
	Для Каждого СтрокаТЧ Из Заказы Цикл
		Если СтрокаТЧ.ЗаказПоставщику.Дата > Дата Тогда
			СтрокаСообщения = "Дата и время Заказа в строке " + СокрЛП(СтрокаТЧ.НомерСтроки) + " больше даты и времени документа!";			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПоставщику");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заказы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗаказы()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПоставщикам, ТаблицаПоРазмещениюЗаказовПокупателей, 
								ТаблицаПоРасчетам, Отказ, Заголовок);

								
	Если ТаблицаПоЗаказамПоставщикам.Количество() > 0 Тогда

		НаборДвижений = Движения.ЗаказыПоставщикам;

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоЗаказамПоставщикам);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
    КонецЕсли;
	Если ТаблицаПоРасчетам.Количество() > 0 Тогда

		НаборДвижений = Движения.РасчетыСКонтрагентами;

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоРасчетам", ТаблицаПоРасчетам);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	КонецЕсли;
	
	//Движения по причинам закрытия
	ТаблицаПричинЗакрытия = УправлениеЗаказами.ПодготовитьТаблицуПричинЗакрытияЗаказов(Заголовок, Ссылка, "ЗаказПоставщику","ЗакрытиеЗаказовПоставщикам",ТаблицаПоЗаказамПоставщикам);

	Если ТаблицаПричинЗакрытия.Количество() > 0 Тогда
		НаборДвижений   = Движения.ПричиныЗакрытияЗаказов;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоПричинамЗакрытия", ТаблицаПричинЗакрытия);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
	КонецЕсли;

	Если ТаблицаПоРазмещениюЗаказовПокупателей.Количество() > 0 Тогда

		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоРазмещениюЗаказовПокупателей);
					
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		// Заполнение шапки
		Ответственный = Основание.Ответственный;
		Подразделение = Основание.Подразделение;
		
		// Заполнение строки
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПоставщику = Основание.Ссылка;

	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",        "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПоставщику");

	// Подготовим таблицу 
	ТаблицаПоЗаказамПоставщикам = ПодготовитьТаблицуПоЗаказамПоставщиков(СписокЗаказов);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоЗаказамПоставщикам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		// Подготовим таблицу 
		ТаблицаПоРазмещениюЗаказовПокупателей = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРазмещения(Ссылка,МоментВремени(),СписокЗаказов,истина,ложь);
	
		ТаблицаПоРасчетам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРасчетов(МоментВремени(),СписокЗаказов);
		
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗаказамПоставщикам, ТаблицаПоРазмещениюЗаказовПокупателей,
			ТаблицаПоРасчетам, Отказ, Заголовок);
		
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

