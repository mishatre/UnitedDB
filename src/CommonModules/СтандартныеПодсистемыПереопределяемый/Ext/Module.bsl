////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Переопределяемые процедуры и функции для интеграции между собой подсистем библиотеки БСП.
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	// СтандартныеПодсистемы.ОбменДанными
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиВключен",                           "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// Пользователи
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	// Конец Пользователи

	Возврат Обработчики;
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки.
//
// Здесь в алфавитном порядке размещаются только процедуры-обработчики обновления 
// библиотечных подсистем, которые используются в данной конфигурации. 
// Процедуры-обработчики обновления самой конфигурации следует размещать в функции 
// ОбработчикиОбновления общего модуля ОбновлениеИнформационнойБазыПереопределяемый.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
//
Функция ОбработчикиОбновленияСтандартныхПодсистем() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
		
	Возврат Обработчики;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	Возврат Массив;
	
КонецФункции

// Возвращает признак доступности подсистемы ПолучениеФайловИзИнтернета.
//
// Параметры:
//  ПолучениеДоступно - Булево - (возвращаемое значение) - признак доступности подсистемы ПолучениеФайловИзИнтернета.
//
Процедура ДоступноПолучениеФайловИзИнтернета(ПолучениеДоступно) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ПолучениеДоступно = Истина;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//   ВозвращаемоеЗначение - (выходной параметр)
//     Структура, со свойствами
//       Статус - Булево - ключ присутствует в структуре всегда, значения
//                         Истина - вызов функции успешно завершен
//                         Ложь   - вызов функции завершен неудачно
//       Путь   - Строка - путь к файлу на сервере, ключ используется только
//                         если статус Истина
//       СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Процедура СкачатьФайлНаСервере(Знач Адрес, Знач ПараметрыПолучения, ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	// СтандартныеПодсистемы.АнализЖурналаРегистрации
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.0.1",
		"Подсистема.СтандартныеПодсистемы.Подсистема.КонтрольЖурналаРегистрации",
		"Подсистема.СтандартныеПодсистемы.Подсистема.АнализЖурналаРегистрации",
		Библиотека);
	// Конец СтандартныеПодсистемы.АнализЖурналаРегистрации
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.0.1.2",
		"Роль.ДобавлениеИзменениеОбщихПоставляемыхДанных",
		"Роль.ДобавлениеИзменениеОбщейБазовойНСИ",
		Библиотека);
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.0.2", "Роль.ЧтениеВариантовОтчетов", "Роль.ИспользованиеВариантовОтчетов", Библиотека);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.2.5", "Роль.ВыполнениеОбменовДанными", "Роль.ВыполнениеСинхронизацииДанных", Библиотека);
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.2.5", "Роль.ДобавлениеИзменениеОбменовДанными", "Роль.НастройкаСинхронизацииДанных", Библиотека);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
КонецПроцедуры

// Блокирует текущую область, начиная транзакцию и накладывая исключительную блокировку
// на все разделяемые объекты метаданных области.
//
// Параметры:
// ПроверитьОтсутствиеДругихСеансов - Булево - проверить отсутствие других
// пользовательских сеансов со значением разделителя равным текущему.
// В случае обнаружения других сеансов будет выдано исключение.
//
Процедура ЗаблокироватьТекущуюОбластьДанных(Знач ПроверитьОтсутствиеДругихСеансов = Истина) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	НачатьТранзакцию();
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Снимает блокировки с текущей области, фиксируя (или, в случае ошибки, откатывая) транзакцию.
//
Процедура РазблокироватьТекущуюОбластьДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	// Если ИнформацияОбОшибке().Описание заполнено - код выполняется
	// из Исключение ...
	Если ПустаяСтрока(ИнформацияОбОшибке().Описание) Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
		
КонецПроцедуры

// Вызывается при создании первого администратора.
Процедура ОбновитьПараметрыРаботыПрограммы() Экспорт
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ОбновитьПараметрыРаботыПользователей();
	// Конец СтандартныеПодсистемы.Пользователи
		
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Если НЕ СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
		
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ФайловыеФункции
	ФайловыеФункцииСлужебный.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при завершении работы конфигурации, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении(Параметры) Экспорт
		
КонецПроцедуры

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

/////////////////////////////////////////////////////////////////////////////////
// Обновление версии ИБ

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
		
КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// Подробнее см. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ, 
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ


// СтандартныеПодсистемы.ОбновлениеКонфигурации

/////////////////////////////////////////////////////////////////////////////////
// Обновление конфигурации

// Вызывается при выполнении скрипта обновления из процедуры ОбновлениеКонфигурации.ЗавершитьОбновление().
Процедура ПослеЗавершенияОбновления() Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации

// СтандартныеПодсистемы.Пользователи


// СтандартныеПодсистемы.ФайловыеФункции

/////////////////////////////////////////////////////////////////////////////////
// Файловые функции

// Дополняет структуру, содержащую общие и персональные настройки по работе с файлами.
Процедура ДобавитьНастройкиРаботыСФайлами(ОбщиеНастройки, ПерсональныеНастройки) Экспорт
		
КонецПроцедуры

// Добавляет файл на том при "Разместить файлы начального образа"
//
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Удаляет регистрацию изменений после "Разместить файлы начального образа"
//
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
			
КонецПроцедуры

// Возвращает структуру с двоичными данными файла и подписи.
Функция ПолучитьДвоичныеДанныеФайлаИПодписи(ДанныеСтроки) Экспорт
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ДанныеСтроки.Объект) Тогда
		
		Возврат ПрисоединенныеФайлыСлужебный.ПолучитьДвоичныеДанныеФайлаИПодписи(
			ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст запроса для извлечения текста
//
Процедура ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
КонецПроцедуры

// Возвращает число файлов с неизвлеченным текстом
//
Процедура ПолучитьКоличествоВерсийСНеизвлеченнымТекстом(ЧислоВерсий) Экспорт
	
	ЧислоВерсий = 0;
	
КонецПроцедуры

// Вычисляет объём файлов тома в байтах, результат возвращается в параметр РазмерФайлов.
Процедура ПодсчитатьРазмерФайловНаТоме(СсылкаТома, РазмерФайлов) Экспорт
	
	РазмерФайлов = 0;
			
КонецПроцедуры

// Получает полный путь к файлу на диске
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка) Экспорт
			
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлСсылка) Тогда
		Возврат ПрисоединенныеФайлыСлужебный.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецФункции

// Записывает извлеченный текст
Процедура ЗаписатьИзвлеченныйТекст(ФайлОбъект) Экспорт
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлОбъект) Тогда
		ПрисоединенныеФайлыСлужебный.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает навигационную ссылку на файл (на реквизит или во временное хранилище)
Функция ПолучитьНавигационнуюСсылкуФайла(ФайлСсылка, УникальныйИдентификатор) Экспорт
			
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлСсылка) Тогда
		Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлСсылка, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецФункции

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
Процедура ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы) Экспорт
		
		
КонецПроцедуры

// Читает кодировку версии файла
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
//
// Возвращаемое значение:
//   Строка кодировки
Процедура ПолучитьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
		
КонецПроцедуры

// Выполняет дополнительные преобразования параметров подключения.
//
// Параметры:
// СтруктураПараметровПодключения - Структура:
//	- URL - Строка - Адрес опубликованного приложения.
//	- UserName - Строка - Имя пользователя сервиса.
//	- Password - Строка - Пароль пользователя сервиса.
// ИмяИнтерфейса - Строка.
//
// Пример реализации:
// 	// Перед подключением к сервису надо декодировать пароль из base64-представления:
//	Если СтруктураПараметровПодключения.Свойство("Password")
//		И ЗначениеЗаполнено(СтруктураПараметровПодключения.Password) Тогда
//
// 		СтруктураПараметровПодключения.password = Base64ВСтроку(СтруктураПараметровПодключения.password);
//
//  КонецЕсли;
//
Процедура ПреобразоватьПараметрыПодключенияКСервису(Знач СтруктураПараметровПодключения, Знач ИмяИнтерфейса = Неопределено) Экспорт
	
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	//// СтандартныеПодсистемы.РаботаСФайлами
	//РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами
	//
	//// СтандартныеПодсистемы.ПрисоединенныеФайлы
	//ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	//// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	//
	//// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	//ДополнительныеОтчетыИОбработки.ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	//// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	//
	//// СтандартныеПодсистемы.Пользователи
	//ПользователиСлужебный.ПриПолученииПользователя(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	//// Конец СтандартныеПодсистемы.Пользователи
	//
	//// СтандартныеПодсистемы.УправлениеДоступом
	//УправлениеДоступомСлужебный.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	//// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	//// СтандартныеПодсистемы.ОбменДанными
	//// Вставка кода от подсистемы обмена данными должна быть первой.
	ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.ОбменДанными
	//
	//// СтандартныеПодсистемы.РаботаСФайлами
	//РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами
	//
	//// СтандартныеПодсистемы.ПрисоединенныеФайлы
	//ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	//
	//// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	//ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	//// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	//
	//// СтандартныеПодсистемы.Пользователи
	//ПользователиСлужебный.ПриОтправкеПользователя(ЭлементДанных, ОтправкаЭлемента);
	//// Конец СтандартныеПодсистемы.Пользователи
	//
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	//// Вставка кода от подсистемы обмена данными в модели сервиса должна быть последней.
	//ОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПолучитьПоддерживаемыеВерсииПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДанными", МассивВерсий);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	//МассивВерсий = Новый Массив;
	//МассивВерсий.Добавить("2.0.1.6");
	//МассивВерсий.Добавить("2.1.1.7");
	//СтруктураПоддерживаемыхВерсий.Вставить("ОбменДаннымиВМоделиСервиса", МассивВерсий);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	//
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	//МассивВерсий = Новый Массив;
	//МассивВерсий.Добавить("2.0.1.6");
	//МассивВерсий.Добавить("2.1.1.7");
	//СтруктураПоддерживаемыхВерсий.Вставить("ОбменСообщениями", МассивВерсий);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	//
	//// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	//МассивВерсий = Новый Массив;
	//МассивВерсий.Добавить("1.0.1.1");	
	//СтруктураПоддерживаемыхВерсий.Вставить("РезервноеКопированиеОбластейДанных", МассивВерсий);
	//// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ФайловыеФункции

