////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки электронных документов.
// 
/////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает номер версии библиотеки ЭлектронныеДокументы.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.1.18.6";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение сведений о библиотеке (или конфигурации).

// См. описание этой же процедуры в модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БиблиотекаЭлектронныхДокументов";
	Описание.Версия = ВерсияБиблиотеки();
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	
	// Обработчики обновления новых версий
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.0";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ОбновитьВидыДокументов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.0";
	Обработчик.Процедура = "РегистрыСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ОбновитьВерсиюРегламентаЭДО";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ЗаполнитьКонтекстРаботыСКриптографией";
	Обработчик.ОбщиеДанные  = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.7";
	Обработчик.Процедура = "РегистрыСведений.ЖурналСобытийЭД.ОбновитьСтатусыЭД";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ОбработатьКорректировочныеСчетаФактуры";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.6.3";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ЗаполнитьВерсииФорматов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.7.1";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ПеренестиСертификатАвторизацииВТЧ";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.7.4";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ЗаполнитьВерсииФорматовИсходящихЭДИПакета";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.9.1";
	Обработчик.Процедура = "Справочники.СертификатыЭЦП.ЗаполнитьСрокДействия";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.13.2";
	Обработчик.Процедура = "РегистрыСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ЗаменитьС1На2ВерсиюРегламентаЭДО";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.13.4";
	Обработчик.Процедура = "Справочники.ЭДПрисоединенныеФайлы.ЗаполнитьНаименованиеФайла";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.13.6";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ОбновитьВерсииФорматовИсходящихЭДИПакета";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.14.2";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ЗаполнитьИспользованиеКриптографии";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.14.2";
	Обработчик.Процедура = "Документы.ПроизвольныйЭД.ЗаполнитьТипДокумента";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.15.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ЗаполнитьДанныеОПрофиляхНастроекЭДО";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.15.4";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ОбновитьВерсиюФорматаИсходящихЭД207_208";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.18.3";
	Обработчик.Процедура = "Справочники.СоглашенияОбИспользованииЭД.ОбновитьВерсиюФорматаИсходящихЭД501_502";
	Обработчик.НачальноеЗаполнение = Ложь;

	
КонецПроцедуры

// См. описание этой же процедуры в модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. описание этой же процедуры в модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. описание этой же процедуры в модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	

КонецПроцедуры

// Неинтерактивное обновление данных ИБ при смене версии библиотеки.
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"БиблиотекаЭлектронныхДокументов", ВерсияБиблиотеки(), ОбработчикиОбновления());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает список процедур-обработчиков обновления библиотеки для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//    Обработчик.Опциональный = Истина;
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ОбработчикиОбновления()
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Возврат Обработчики;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнения пустой ИБ

// Обработчик заполнения пустой ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление новых версий ИБ

// Обработчик обновления видов ЭД актуальными.
// Используется при необходимости добавить новый вид ЭД в спрвочники БЭД
//
// Параметры:
//  ВидЭД - ЗначениеПеречисления - значение перечисления ВидыЭД.
//
Процедура ОбновитьНастройкиЭДО(ВидЭД) Экспорт
	
	НачатьТранзакцию();
	
	// Обновим элементы справочника Профили настроек ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомыйПрофильНастройек = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		СтрокаВидЭД = ИскомыйПрофильНастройек.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
		Если СтрокаВидЭД = Неопределено Тогда
			
			НоваяСтрока = ИскомыйПрофильНастройек.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент         = ВидЭД;
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеЦифровыеПодписи") Тогда
				НоваяСтрока.ИспользоватьЭЦП = Истина;
			КонецЕсли;
			
			ВерсияФормата = "CML 2.08";
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				ВерсияФормата = "";
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ВерсияФормата = Нстр("ru = 'ФНС 5.01'");
			КонецЕсли;
			НоваяСтрока.ВерсияФормата = ВерсияФормата;
			
			ЗаписатьОбъект = Истина;
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ИскомыйПрофильНастройек.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим элементы справочника Настройки ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомаяНастройка = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
		
		Если СтрокаВидЭД = Неопределено Тогда
			НоваяСтрока = ИскомаяНастройка.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент         = ВидЭД;
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеЦифровыеПодписи") Тогда
				НоваяСтрока.ИспользоватьЭЦП = Истина;
			КонецЕсли;
			
			ВерсияФормата = "CML 2.08";
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				ВерсияФормата = "";
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ВерсияФормата = Нстр("ru = 'ФНС 5.01'");
			КонецЕсли;
			НоваяСтрока.ВерсияФормата = ВерсияФормата;
			
			Если ИскомаяНастройка.РасширенныйРежимНастройкиСоглашения Тогда
				НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ИсходящиеДокументы[0].ПрофильНастроекЭДО;
				НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.ИсходящиеДокументы[0].СпособОбменаЭД;
				НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторОрганизации;
				НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторКонтрагента;
			Иначе
				НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ПрофильНастроекЭДО;
				НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.СпособОбменаЭД;
				НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИдентификаторОрганизации;
				НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИдентификаторКонтрагента;
			КонецЕсли;
			
			ЗаписатьОбъект = Истина;
			
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ИскомаяНастройка.Записать();
		КонецЕсли;
		
	КонецЦикла;

	// Обновим элементы справочника Сертификаты ЭП.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО (СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка)
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.ПометкаУдаления
	|	И НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.Отозван
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомыйСертификат = Результат.Сертификат.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		СтрокаВидЭД = ИскомыйСертификат.ВидыДокументов.Найти(ВидЭД, "ВидДокумента");
		Если СтрокаВидЭД = Неопределено Тогда
			
			НоваяСтрока = ИскомыйСертификат.ВидыДокументов.Добавить();
			НоваяСтрока.ВидДокумента = ВидЭД;
			НоваяСтрока.ИспользоватьДляПодписи = Истина;
			
			ЗаписатьОбъект = Истина;
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ИскомыйСертификат.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Обработчик заполнения контекста работы с криптографией.
//
Процедура ЗаполнитьКонтекстРаботыСКриптографией() Экспорт
	
	Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	
КонецПроцедуры

// Добавился новый вид ЭД - корректировочный счет фактура
Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.Наименование ПОДОБНО ""ON_KORSFAKT%""
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Объект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СертификатыЭЦПВидыДокументов.Ссылка
	               |ПОМЕСТИТЬ СертификатыИсключения
	               |ИЗ
	               |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭЦПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	               |	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СертификатыЭЦПВидыДокументов.Ссылка
	               |ИЗ
	               |	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	               |ГДЕ
	               |	СертификатыЭЦПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	               |	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	               |	И НЕ СертификатыЭЦПВидыДокументов.Ссылка В
	               |				(ВЫБРАТЬ
	               |					СертификатыИсключения.Ссылка
	               |				ИЗ
	               |					СертификатыИсключения)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сертификат = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаКорСчФ = Сертификат.ВидыДокументов.Найти(Перечисления.ВидыЭД.КорректировочныйСчетФактура, "ВидДокумента");
		Если СтрокаКорСчФ = Неопределено Тогда
			СтрокаКорСчФ = Сертификат.ВидыДокументов.Добавить();
			СтрокаКорСчФ.ВидДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
		СтрокаКорСчФ.ИспользоватьДляПодписи = Истина;
		Сертификат.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Появился новый справочник ПрофилиНастроекЭДО.
Процедура ЗаполнитьДанныеОПрофиляхНастроекЭДО() Экспорт
	
	НачатьТранзакцию();
	
	// Пометим на удаление не действующие настройки ЭДО
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаЭДО.ОбменДанными.Загрузка = Истина;
		НастройкаЭДО.УстановитьПометкуУдаления(Истина);
		НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
		НастройкаЭДО.Записать();
	КонецЦикла;
	
	// Создаем элементы справочника ПрофилиНастроекЭДО.
	// Проверим не было ли обновления
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ИспользуютсяЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеЦифровыеПодписи");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭД.Организация,
		|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|			ТОГДА СоглашенияОбИспользованииЭД.Ссылка
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Ссылка,
		|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
		|	СоглашенияОбИспользованииЭД.АдресСервера,
		|	СоглашенияОбИспользованииЭД.Пользователь,
		|	СоглашенияОбИспользованииЭД.Пароль,
		|	СоглашенияОбИспользованииЭД.УдалитьПортFTP КАК Порт,
		|	СоглашенияОбИспользованииЭД.УдалитьПассивноеСоединениеFTP КАК ПассивноеСоединение
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
		|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
		|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйПрофильНастроек = Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
			
			ШаблонНаименование = НСтр("ru = '%1, %2'");
			НовыйПрофильНастроек.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
			Выборка.Организация, Выборка.СпособОбменаЭД);
			
			НовыйПрофильНастроек.Организация              = Выборка.Организация;
			НовыйПрофильНастроек.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
			НовыйПрофильНастроек.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
			
			АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
			Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
				Если ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.УведомлениеОбУточнении
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.Ошибка
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ИзвещениеОПолучении
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПлатежноеПоручение
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ЗапросВыписки
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВыпискаБанка Тогда
					
					НоваяСтрока = НовыйПрофильНастроек.ИсходящиеДокументы.Добавить();
					НоваяСтрока.Формировать = Истина;
					НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
					
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
						"ИспользоватьЭлектронныеЦифровыеПодписи") Тогда
						НоваяСтрока.ИспользоватьЭЦП = Истина;
					КонецЕсли;
					
					Если (ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
						И Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
						
						НоваяСтрока.Формировать = Ложь;
						НоваяСтрока.ИспользоватьЭЦП = Ложь;
						
					КонецЕсли;
					// Проставим в новые соглашения прямого обмена версию формата обмена.
					ВерсияФормата = "CML 4.02";
					Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						ВерсияФормата = "";
					ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктЗаказчик
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.АктИсполнитель
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Покупатель
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Продавец
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
						ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
						ВерсияФормата = Нстр("ru = 'ФНС 5.01'");
					ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
						ВерсияФормата = "CML 2.08";
					КонецЕсли;
					НоваяСтрока.ВерсияФормата = ВерсияФормата;
				КонецЕсли;
			КонецЦикла;
			
			НовыйПрофильНастроек.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
			
			Если Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				И ИспользуютсяЭП Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СертификатыЭЦП.Ссылка
				|ИЗ
				|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
				|ГДЕ
				|	НЕ СертификатыЭЦП.ПометкаУдаления
				|	И НЕ СертификатыЭЦП.Отозван
				|	И СертификатыЭЦП.Организация = &Организация";
				Запрос.УстановитьПараметр("Организация", Выборка.Организация);
				ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
				Пока ВыборкаСертификатов.Следующий() Цикл
					НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
					НоваяСтрока.Сертификат = ВыборкаСертификатов.Ссылка;
				КонецЦикла;
			КонецЕсли;
			
			// Настройки обмена ЭД
			Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				ПутьКаталога = Выборка.РесурсВходящихДокументов;
				СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
				
				Если СтрокиПути.Количество() >= 1 Тогда
					НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
				КонецЕсли;
				ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
				НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				НовыйПрофильНастроек.РесурсВходящихДокументов = Выборка.РесурсВходящихДокументов;
				
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				НовыйПрофильНастроек.АдресСервера             = Выборка.АдресСервера;
				НовыйПрофильНастроек.Порт                     = Выборка.Порт;
				НовыйПрофильНастроек.ПассивноеСоединение      = Выборка.ПассивноеСоединение;
				НовыйПрофильНастроек.Логин                    = Выборка.Пользователь;
				НовыйПрофильНастроек.Пароль                   = Выборка.Пароль;
				
				ПутьКаталога = Выборка.РесурсВходящихДокументов;
				СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
				
				Если СтрокиПути.Количество() >= 1 Тогда
					НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
				КонецЕсли;
				ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
				НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				// Настройки сертификатов - переносим в профиль.
				Для каждого Строка Из Выборка.Ссылка.СертификатыПодписейОрганизации Цикл
					НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
					НоваяСтрока.Сертификат = Строка.Сертификат;
				КонецЦикла;
			КонецЕсли;
			
			НовыйПрофильНастроек.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
	// Обновляем р/с СостоянияОбменовЭДЧерезОператоровЭДО
	НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
		|	И ПрофилиНастроекЭДО.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",    Запись.УдалитьСоглашениеОбИспользованииЭД.Организация);
		Запрос.УстановитьПараметр("СпособОбменаЭД", Запись.УдалитьСоглашениеОбИспользованииЭД.СпособОбменаЭД);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запись.ПрофильНастроекЭДО = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// Обновляем соглашения прямого обмена.
	// Проверим на уникальность настроек прямого обмена.
	// Лишние настройки пометим на удаление.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) КАК Ссылка,
	|	СоглашенияОбИспользованииЭД.Контрагент
	|ПОМЕСТИТЬ КонтрагентыДубли
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	(СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СоглашенияОбИспользованииЭД.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка,
	|	СоглашенияОбИспользованииЭД.Контрагент КАК Контрагент
	|ИЗ
	|	КонтрагентыДубли КАК КонтрагентыДубли
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО КонтрагентыДубли.Контрагент = СоглашенияОбИспользованииЭД.Контрагент
	|ГДЕ
	|	(СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	Выборка = Запрос.Выполнить().Выбрать();
	ИскомыйКонтрагент = "";
	Пока Выборка.Следующий() Цикл
		
		Если ИскомыйКонтрагент = Выборка.Контрагент Тогда
			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаЭДО.УстановитьПометкуУдаления(Истина);
			НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
			НастройкаЭДО.Записать();
		Иначе
			ИскомыйКонтрагент = Выборка.Контрагент;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним недостающую информацию в настройках ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭД.Ссылка,
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(100)) КАК ИдентификаторКонтрагента,
	|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
	|	СоглашенияОбИспользованииЭД.Контрагент,
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
	|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
	|	СоглашенияОбИспользованииЭД.РесурсИсходящихДокументов
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|		ПО СоглашенияОбИспользованииЭД.СпособОбменаЭД = ПрофилиНастроекЭДО.СпособОбменаЭД
	|			И СоглашенияОбИспользованииЭД.Организация = ПрофилиНастроекЭДО.Организация
	|ГДЕ
	|	(СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаЭДО.ОбменДанными.Загрузка = Истина;
		
		НастройкаЭДО.Наименование       = Строка(Выборка.Контрагент);
		НастройкаЭДО.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;

		ИсходнаяТаблицаЭД = НастройкаЭДО.ИсходящиеДокументы.Выгрузить();
		
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ПрофильНастроекЭДО,       "ПрофильНастроекЭДО");
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.СпособОбменаЭД,           "СпособОбменаЭД");
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторОрганизации, "ИдентификаторОрганизации");
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторКонтрагента, "ИдентификаторКонтрагента");
		
		НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
		
		// Добавим недостающие документы в ТЧ исходящие документы для прямого обмена.
		Отбор = Новый Структура;
		Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
		НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
			Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.СчетФактура;
			Строка.Формировать              = Ложь;
			Строка.ИспользоватьЭЦП          = Ложь;
			Строка.ВерсияФормата            = Нстр("ru = 'ФНС 5.01'");
			Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
			Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
			Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
			Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
		КонецЕсли;
		Отбор = Новый Структура;
		Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
			Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
			Строка.Формировать              = Ложь;
			Строка.ИспользоватьЭЦП          = Ложь;
			Строка.ВерсияФормата            = Нстр("ru = 'ФНС 5.01'");
			Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
			Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
			Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
			Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
		КонецЕсли;
		
		НастройкаЭДО.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
		
		НастройкаЭДО.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
		НастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
		
		Если ЗначениеЗаполнено(НастройкаЭДО.СертификатОрганизацииДляРасшифровки) Тогда
			ШифроватьДанныеПакетаЭД = Истина;
		КонецЕсли;
		Если НастройкаЭДО.СертификатыПодписейКонтрагента.Количество() > 0 Тогда
			ПроверятьСертификатыПодписей = Истина;
		КонецЕсли;
		
		// Настройки обмена ЭД
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
			ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
			СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
			СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
			
			Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество() - 1];
			КонецЕсли;
			Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество() - 1];
			КонецЕсли;
			НастройкаЭДО.КаталогВходящихДокументов = НовоеИмяВходящегоКаталога;
			НастройкаЭДО.КаталогИсходящихДокументов = НовоеИмяИсходящегоКаталога;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			НастройкаЭДО.ЭлектроннаяПочтаКонтрагента = Выборка.РесурсИсходящихДокументов;
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
			ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
			СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
			СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
			
			Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество()-1];
				
			ИначеЕсли СтрокиПутиВходящегоКаталога.Количество() = 1 Тогда
				НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[0];
			КонецЕсли;
			Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество()-1];
				
			ИначеЕсли СтрокиПутиИсходящегоКаталога.Количество() = 1 Тогда
				НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[0];
			КонецЕсли;
			НастройкаЭДО.КаталогВходящихДокументовFTP = НовоеИмяВходящегоКаталога;
			НастройкаЭДО.КаталогИсходящихДокументовFTP = НовоеИмяИсходящегоКаталога;
		КонецЕсли;
		
		НастройкаЭДО.Записать();
		
	КонецЦикла;
	
	// Обновляем соглашения обмена через оператора.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ДатаИзмененияСтатуса,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Статус,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ФорматФайловОбменаЭД,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ОписаниеОшибки,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.ПометкаУдаления";
	
	ВыборкаУчастников = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУчастников.Следующий() Цикл
		
		Если Не ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПометкаУдаления Тогда
			НастройкаЭДО = ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПолучитьОбъект();
			НастройкаЭДО.УстановитьПометкуУдаления(Истина);
			НастройкаЭДО.Наименование = НСтр("ru = 'Не использовать'") + " - " + НастройкаЭДО.Наименование;
			НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
			НастройкаЭДО.Записать();
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = Значение(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|	И ПрофилиНастроекЭДО.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
		ВыборкаПрофилейНастроекЭДО = Запрос.Выполнить().Выбрать();
		ВыборкаПрофилейНастроекЭДО.Следующий();
		ПрофильНастроекЭДО = ВыборкаПрофилейНастроекЭДО.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО,
		|	СоглашенияОбИспользованииЭД.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД КАК СпособОбменаЭД,
		|	СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК Идентификатор,
		|	СоглашенияОбИспользованииЭД.СтатусПодключения
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
		|	И СоглашенияОбИспользованииЭД.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Контрагент",  ВыборкаУчастников.Участник);
		Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
		ВыборкаНастроек = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаНастроек.Следующий() Тогда
			НастройкаЭДО = ВыборкаНастроек.НастройкаЭДО.ПолучитьОбъект();
			НастройкаЭДО.ОбменДанными.Загрузка = Истина;
			
			Если Не ВыборкаНастроек.РасширенныйРежимНастройки
				И ВыборкаНастроек.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
				
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
					"ИдентификаторОрганизации, СпособОбменаЭД");
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
				НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
				Для каждого Строка Из НайденныеСтроки Цикл
					Строка.Формировать              = Истина;
					Строка.ИспользоватьЭЦП          = Истина;
					Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
					Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
					Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
					Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
				КонецЦикла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
				НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
				Для каждого Строка Из НайденныеСтроки Цикл
					Строка.Формировать              = Истина;
					Строка.ИспользоватьЭЦП          = Истина;
					Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
					Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
					Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
					Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
				КонецЦикла;
			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
				НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
				Для каждого Строка Из НайденныеСтроки Цикл
					Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
				КонецЦикла;
			КонецЕсли;
		Иначе
			НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
			НастройкаЭДО.Контрагент = ВыборкаУчастников.Участник;
			НастройкаЭДО.Наименование = Строка(ВыборкаУчастников.Участник);
			
			НастройкаЭДО.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
			ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
			
			НастройкаЭДО.Организация                 = ПараметрыПрофиляНастроек.Организация;
			НастройкаЭДО.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
			НастройкаЭДО.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
			
			// Загружаем ТЧ из профиля настроек ЭДО.
			ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
			ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
			ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
			ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
			ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");
			
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПрофильНастроекЭДО,                                "ПрофильНастроекЭДО");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД,           "СпособОбменаЭД");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ВыборкаУчастников.Идентификатор,                   "ИдентификаторКонтрагента");
			
			НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
			
			Для Каждого ЗначениеПеречисления Из Перечисления.ФорматыФайловОбменаЭД Цикл
				Если ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат Тогда
					Продолжить;
				КонецЕсли;
				МассивСтрок = НастройкаЭДО.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("ФорматФайла", ЗначениеПеречисления));
				Если МассивСтрок.Количество() = 0 Тогда
					НоваяСтрока = НастройкаЭДО.ФорматыФайловОбмена.Добавить();
					НоваяСтрока.ФорматФайла  = ЗначениеПеречисления;
					// Значение по умолчанию для новых
					Если ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.XML И НастройкаЭДО.Ссылка.Пустая() Тогда
						НоваяСтрока.Использовать = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		НастройкаЭДО.ИдентификаторКонтрагента    = ВыборкаУчастников.Идентификатор;
		НастройкаЭДО.СтатусПодключения           = ВыборкаУчастников.Статус;
		
		СостояниеСоглашения                      = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
		Если ВыборкаУчастников.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
		ИначеЕсли ВыборкаУчастников.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
		КонецЕсли;
		НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
		
		НастройкаЭДО.ОписаниеОшибки = ВыборкаУчастников.ОписаниеОшибки;
		НастройкаЭДО.Записать();
		
	КонецЦикла;
	
	// Определим и заполним в электронных документах реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент,
	|	ЭДПрисоединенныеФайлы.Контрагент,
	|	ЭДПрисоединенныеФайлы.Организация,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|		ПО ЭДПрисоединенныеФайлы.Контрагент = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент
	|			И ЭДПрисоединенныеФайлы.Организация = СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО.Организация
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И ЭДПрисоединенныеФайлы.СоглашениеЭД <> ЗНАЧЕНИЕ(Справочник.СоглашенияОбИспользованииЭД.ПустаяСсылка)
	|	И (ЭДПрисоединенныеФайлы.ВидЭД <> ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
	|			ИЛИ ЭДПрисоединенныеФайлы.ВидЭД <> ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
	|			ИЛИ ЭДПрисоединенныеФайлы.ВидЭД <> ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросНочнойВыписки)
	|			ИЛИ ЭДПрисоединенныеФайлы.ВидЭД <> ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ВыпискаБанка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО,
	|	ЭДПрисоединенныеФайлы.Контрагент,
	|	ЭДПрисоединенныеФайлы.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент.Получитьобъект();
		ЭлектронныйДокумент.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
		ЭлектронныйДокумент.СоглашениеЭД       = Выборка.НастройкаЭДО;
		ЭлектронныйДокумент.Записать();
	КонецЦикла;
	
	// Определим и заполним в незавершенных пакетахЭД реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК ПакетЭД,
	|	ПакетЭД.Отправитель,
	|	ПакетЭД.Получатель,
	|	ПакетЭД.ПрофильНастроекЭДО,
	|	ПакетЭД.Направление
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	(ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)
	|			ИЛИ ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке))
	|	И НЕ ПакетЭД.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Отправитель) И ЗначениеЗаполнено(Выборка.Получатель)
			И Не ЗначениеЗаполнено(Выборка.ПрофильНастроекЭДО) Тогда
			Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
				
				ПараметрыНастройкиЭДО = ЭлектронныеДокументыСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Получатель, Выборка.Отправитель);
			ИначеЕсли Выборка.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
				
				ПараметрыНастройкиЭДО = ЭлектронныеДокументыСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Отправитель, Выборка.Получатель);
			КонецЕсли;
			Если ПараметрыНастройкиЭДО <> Неопределено Тогда
				ПакетЭД = Выборка.ПакетЭД.Получитьобъект();
				ПакетЭД.ПрофильНастроекЭДО = ПараметрыНастройкиЭДО.ПрофильНастроекЭДО;
				ПакетЭД.НастройкаЭДО       = ПараметрыНастройкиЭДО.НастройкаЭДО;
				ПакетЭД.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


