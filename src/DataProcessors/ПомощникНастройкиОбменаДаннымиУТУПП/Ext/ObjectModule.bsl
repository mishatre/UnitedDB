
Перем мТаблицаВозможныхОбменов Экспорт;
Перем мСтруктураИнформацииОТекущейИнформационнойБазе Экспорт;

Перем мРегламентноеЗадание Экспорт;
Перем мРегламентноеЗаданиеФоновыйОбмен Экспорт;

Перем мКоличествоОбъектовДляСопоставления Экспорт;

Перем мСтруктураНастроек Экспорт;
Перем ПодключениеКПриемнику Экспорт;

Перем мФормаХодаВыполненияОбмена;

Функция НужныОграниченияПоОрганизации() Экспорт
	
	Возврат ТипИнформационнойБазыДляОбмена = "ОбменУправлениеПредприятиемУправлениеТорговлей";
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////

Функция ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена) Экспорт 
	
	Если ДействиеВыбранноеПользователем = 1
		И ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
		
		ИмяМакета = "ПравилаОбмена_ПустыеПравила";
		
	Иначе
		
		ИмяМакета = "ПравилаОбмена_" + мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации + "_" + мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяКонфигурации;
		
	КонецЕсли;
	
	ТекстПравилОбмена = ПолучитьТекстПравилОбменаПоназваниюМакета(ИмяМакета);
	
	Возврат ТекстПравилОбмена;
	
КонецФункции

Функция ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена) Экспорт
	
	Если ДействиеВыбранноеПользователем = 0
		И ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
		
		ИмяМакета = "ПравилаОбмена_ПустыеПравила";
		
	Иначе
		
		ИмяМакета = "ПравилаОбмена_" + мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяКонфигурации + "_" + мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации;
		
	КонецЕсли;
	
	ТекстПравилОбмена = ПолучитьТекстПравилОбменаПоназваниюМакета(ИмяМакета);
	
	Возврат ТекстПравилОбмена;
	
КонецФункции

Процедура ЗаполнитьСписокТиповИнформационныхБазДляОбмена(СписокВыбора, ТаблицаВозможныхОбменов) Экспорт
	
	СписокВыбора.Очистить();
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаВозможныхОбменов Цикл
	
		СписокВыбора.Добавить(НомерСтроки, СтрокаТаблицы.ПредставлениеКонфигурации);	
		НомерСтроки = НомерСтроки + 1;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИмяФоновогоПланаОбмена(ИмяОсновногоПланаОбмена) Экспорт
	
	Возврат ИмяОсновногоПланаОбмена + "Фоновый";
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////

Функция ПолучитьТекстПравилОбменаПоназваниюМакета(НазваниеМакета) Экспорт
		
	Макет = ПолучитьОбщийМакет(НазваниеМакета);
	
	ТекстПравилОбмена = Макет.ПолучитьТекст();
	
	Возврат ТекстПравилОбмена;	
	
КонецФункции

Функция ПолучитьИмяОбъектаПодлежащегоРегистрацииПриПервомЗнакомствеПоМетаданным(МетаданныеОбъекта, 
	ПодключениеКПриемнику = Неопределено, ЭтоРегистр = Неопределено, ЭтоДокумент = Неопределено) Экспорт
	
	ДаннеДляОпределения = ?(ПодключениеКПриемнику = Неопределено, Метаданные, ПодключениеКПриемнику.Метаданные());
	ЭтоРегистр = Ложь;
	ЭтоДокумент = Ложь;
	
	ИмяТаблицыДляПоискаЗарегистрированных = "";
	
	Если ДаннеДляОпределения.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Справочник." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Документ." + МетаданныеОбъекта.Имя;
		ЭтоДокумент = Истина;
		
	ИначеЕсли ДаннеДляОпределения.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовХарактеристик." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "ПланСчетов." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовРасчета." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "БизнесПроцесс." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Задача." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "РегистрСведений." + МетаданныеОбъекта.Имя;
		ЭтоРегистр = Истина;
					   
	Иначе
		
		Возврат "";
				
	КонецЕсли;
	
	Возврат ИмяТаблицыДляПоискаЗарегистрированных;	
	
КонецФункции


#Если Клиент Тогда
	
Процедура ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка) Экспорт
	
	ПроцедурыОбменаДаннымиКлиент.ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении каталога
Процедура ОбработчикПриИзмененииКаталога(Элемент) Экспорт
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции


#КонецЕсли

Функция СчитатьДанныеВСтуктуру(ЧтениеXML) Экспорт
	
	Структура = Новый Структура;
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда		
		ВызватьИсключение "Ошибка чтения XML";		
	КонецЕсли;
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		ИмяУзла = ЧтениеXML.Имя;
		Структура.Вставить(ИмяУзла, ПрочитатьXML(ЧтениеXML));
	КонецЦикла;
	ЧтениеXML.Прочитать();
	
	Возврат Структура;
	
КонецФункции

Функция СчитатьДанныеВМассив(ЧтениеXML) Экспорт
	
	МассивДанных = Новый Массив;
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда		
		ВызватьИсключение "Ошибка чтения XML";		
	КонецЕсли;
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		МассивДанных.Добавить(ПрочитатьXML(ЧтениеXML));
	КонецЦикла;
	ЧтениеXML.Прочитать();
	
	Возврат МассивДанных;
	
КонецФункции

Функция ЗагрузитьНастройкиИзФайла(ИмяФайла, СтрокаДляЗагрузки = "") Экспорт
	
	Попытка
		
		мРегламентноеЗадание = Неопределено;
		мРегламентноеЗаданиеФоновыйОбмен = Неопределено;		
		
		ЧтениеXML = Новый ЧтениеXML;
		Если ПустаяСтрока(СтрокаДляЗагрузки) Тогда
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
		Иначе
			ЧтениеXML.УстановитьСтроку(СтрокаДляЗагрузки);
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		ЧтениеXML.Прочитать();
		
		мСтруктураНастроек = СчитатьДанныеВСтуктуру(ЧтениеXML);
		
		ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(ЭтотОбъект);
		
		// заполняем текущий объект настройками
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, мСтруктураНастроек);
		
	Исключение
		
		#Если Клиент Тогда
		СтрокаОшибки = ОписаниеОшибки();
		Сообщить("Ошибка при чтении настроек обмена данными: " + СтрокаОшибки, СтатусСообщения.Важное);		
		#КонецЕсли
		Возврат Ложь;
		
	КонецПопытки;
	
	#Если Клиент Тогда
	Сообщить("Настройки обмена данными первой информационной базы успешно загружены.");
	#КонецЕсли

	Возврат Истина;
	
КонецФункции

Процедура ПроверитьСобственныйКодУзлаУПриемника(ПодключениеКПриемнику, ИмяПланаОбмена, КодЭлемента) Экспорт
	
	СобственныйУзел = ПодключениеКПриемнику.ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
						
	Если СобственныйУзел.Код = КодЭлемента Тогда
		Возврат;
	КонецЕсли;
		
	ОбъектУзла = СобственныйУзел.ПолучитьОбъект();
	ОбъектУзла.Код = КодЭлемента;
	
	Если ПустаяСтрока(ОбъектУзла.Наименование) Тогда
		
		ОбъектУзла.Наименование	= "Эта информационная база";
		
	КонецЕсли;
	
	ОбъектУзла.Записать();	
	
КонецПроцедуры

Процедура УстановитьНулевойНомерПринятогоСообщенияУУзлаОбмена(УзелПланаОбмена) Экспорт
		
	Если УзелПланаОбмена.НомерПринятого <> 0 Тогда
		
		УзелПланаОбмена.НомерПринятого = 0;
		УзелПланаОбмена.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ВыполнитьПодключениеКИБПриемнику() Экспорт
	
	// подключаемся к ИБ приемнику...
	ОбработкаОбмена = Обработки.ОбменДаннымиXML.Создать();

	ПроцедурыОбменаДанными.УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбмена, ЭтотОбъект);

	ПодключениеКПриемнику = ОбработкаОбмена.ВернутьПодключениеКПриемнику();

	Возврат ПодключениеКПриемнику;
	
КонецФункции

Процедура ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ТекстПравилОбмена, ПодключениеКПриемнику = Неопределено) Экспорт
	
	Если ПодключениеКПриемнику = Неопределено Тогда
		МетаданныеПланаОбмена = Метаданные.ПланыОбмена[ТипИнформационнойБазыДляОбмена];
	Иначе
		МетаданныеПланаОбмена = ПодключениеКПриемнику.Метаданные().ПланыОбмена[ТипИнформационнойБазыДляОбмена];
	КонецЕсли;
	
	// регистрация происходит только для тех объектов для которых есть правила выгрузки данных
	Если ПодключениеКПриемнику = Неопределено Тогда
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
	Иначе
		ОбработкаОбменаДаннымиXML = ПодключениеКПриемнику.Обработки.ОбменДаннымиXML.Создать();
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравилОбмена, "Строка");
	
	ДеревоИнформацииОВыгрузке = ОбработкаОбменаДаннымиXML.ТаблицаПравилВыгрузки;
	
	Для Каждого ЭлементСостава из МетаданныеПланаОбмена.Состав Цикл
		
		МетаданныеДляОбмена = ЭлементСостава.Метаданные;
		
		ЭтоРегистр = Ложь;
		ИмяСсылочногоТипа = ПолучитьИмяОбъектаПодлежащегоРегистрацииПриПервомЗнакомствеПоМетаданным(МетаданныеДляОбмена, ПодключениеКПриемнику, ЭтоРегистр);
	
		Если ПустаяСтрока(ИмяСсылочногоТипа) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭтоРегистр Тогда
			СтрокаДерева = ДеревоИнформацииОВыгрузке.Строки.Найти(ИмяСсылочногоТипа, "ИмяОбъектаДляЗапроса", Истина);
		Иначе
			СтрокаДерева = ДеревоИнформацииОВыгрузке.Строки.Найти(ИмяСсылочногоТипа, "ИмяОбъектаДляЗапросаРегистра", Истина);
		КонецЕсли;
		
		ЕстьПравилоВыгрузкиДанных = СтрокаДерева <> Неопределено;
		
		Если НЕ ЕстьПравилоВыгрузкиДанных Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Включить <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрироватьВсе = (ЭлементСостава.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить);
		
		ВыполнитьРегистрациюИзмененийПоУзлуИМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, ПодключениеКПриемнику, РегистрироватьВсе);
								
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");	
	#КонецЕсли
		
КонецПроцедуры

Процедура ВыполнитьРегистрациюИзмененийПоУзлуИМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, 
	ПодключениеКПриемнику = Неопределено, РегистрироватьВсеИзменения = Ложь) Экспорт
	
	ЭтоРегистр = Ложь;
	ЭтоДокумент = Ложь;
	ИмяСсылочногоТипа = ПолучитьИмяОбъектаПодлежащегоРегистрацииПриПервомЗнакомствеПоМетаданным(МетаданныеДляОбмена, 
		ПодключениеКПриемнику, ЭтоРегистр, ЭтоДокумент);
	
	Если ПустаяСтрока(ИмяСсылочногоТипа) Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
	Состояние("Регистрация изменений для объектов: " + ИмяСсылочногоТипа);
	#КонецЕсли
	
	НужноЗарегистрироватьИзмененияДляВсехОбъектов = Истина;	
	
	ВозможныОрганиченияПоОрганизации = НужныОграниченияПоОрганизации()
		И Организации.Количество() > 0;
		
	ВозможныОрганиченияПоДате = ЭтоДокумент И ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов);	
		
	// если есть дополнительные отборы, то нужно провести регистрацию согласно отборам данных
	Если (НЕ РегистрироватьВсеИзменения)
		И ПодключениеКПриемнику = Неопределено
		И (ВозможныОрганиченияПоОрганизации ИЛИ ВозможныОрганиченияПоДате) Тогда
		
		Если НЕ ЭтоРегистр Тогда
			НаличиеОрганизации = (МетаданныеДляОбмена.Реквизиты.Найти("Организация") <> Неопределено);
		Иначе
			НаличиеОрганизации = (МетаданныеДляОбмена.Измерения.Найти("Организация") <> Неопределено);
		КонецЕсли;
		
		НаличиеОрганизации = ВозможныОрганиченияПоОрганизации И НаличиеОрганизации; 
		
		Если НаличиеОрганизации
			ИЛИ ВозможныОрганиченияПоДате Тогда
			
			ОграничениеВыборки = "";
			
			НужноЗарегистрироватьИзмененияДляВсехОбъектов = Ложь;
			
			Если ПодключениеКПриемнику = Неопределено Тогда
				Запрос = Новый Запрос();
			Иначе
				Запрос = ПодключениеКПриемнику.NewObject("Запрос");
			КонецЕсли;
			
			// нужно ограничить выборку по организации и зарегистрировать только эти изменения
			Если НаличиеОрганизации Тогда
				ОграничениеВыборки = "ГДЕ РегистрацияИзменений.Организация В (&МассивОрганизаций)";
			КонецЕсли;
			
			Если ВозможныОрганиченияПоДате Тогда
				
				Если ПустаяСтрока(ОграничениеВыборки) Тогда
					ОграничениеВыборки = "ГДЕ РегистрацияИзменений.Дата >= &ДатаОграничений";
				Иначе
					ОграничениеВыборки = ОграничениеВыборки + "
					|И РегистрацияИзменений.Дата >= &ДатаОграничений";
				КонецЕсли;
								
			КонецЕсли;
			
			Запрос.УстановитьПараметр("МассивОрганизаций", Организации.Выгрузить().ВыгрузитьКолонку("Организация"));
			Запрос.УстановитьПараметр("ДатаОграничений", ДатаНачалаВыгрузкиДокументов);
			
			Если НЕ ЭтоРегистр Тогда
			
				Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
				   |ИЗ
				   |	" + ИмяСсылочногоТипа + " КАК РегистрацияИзменений
				   |" + ОграничениеВыборки;
				   
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, Выборка.ссылка, ПодключениеКПриемнику);	
					
				КонецЦикла;
				
			Иначе
				
				// нужно найти список полей по которым ведется регистрация изменений
				МассивПолейВыбора = Новый Массив();				
				
				Если МетаданныеДляОбмена.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
					
					МассивПолейВыбора.Добавить("Регистратор");
					
				Иначе
					
					Если МетаданныеДляОбмена.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.НеПериодический Тогда
						
						МассивПолейВыбора.Добавить("Период");
						
					Конецесли;
					
					Для Каждого ИзмерениеРегистра Из МетаданныеДляОбмена.Измерения Цикл
						
						Если ИзмерениеРегистра.ОсновнойОтбор Тогда
							
							МассивПолейВыбора.Добавить(ИзмерениеРегистра.Имя);	
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				СтрокаПолейДляВыбора = "";
				Для Каждого ЭлементПолей Из МассивПолейВыбора Цикл
					СтрокаПолейДляВыбора = СтрокаПолейДляВыбора + "," + ЭлементПолей;
				КонецЦикла;
				
				СтрокаПолейДляВыбора = Сред(СтрокаПолейДляВыбора, 2);
				
				Запрос.Текст = "ВЫБРАТЬ Различные
				   | " + СтрокаПолейДляВыбора + "
				   |ИЗ
				   |	" + ИмяСсылочногоТипа + " КАК РегистрацияИзменений
				   |" + ОграничениеВыборки;
				   
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					НаборЗаписейРегистра = РегистрыСведений[МетаданныеДляОбмена.Имя].СоздатьНаборЗаписей();
					Для Каждого ЭлементПолей Из МассивПолейВыбора Цикл
						НаборЗаписейРегистра.Отбор[ЭлементПолей].Установить(Выборка[ЭлементПолей]);
					КонецЦикла;
					
					ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, НаборЗаписейРегистра, ПодключениеКПриемнику);	
					
				КонецЦикла;	
				
			КонецЕсли;				
			
		Конецесли;
		
	КонецЕсли;
	
	Если НужноЗарегистрироватьИзмененияДляВсехОбъектов Тогда
		
		ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, ПодключениеКПриемнику);	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, ПодключениеКПриемнику) Экспорт
	
	Попытка
		
		Если ПодключениеКПриемнику = Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелДляРегистрацииИзменений, МетаданныеДляОбмена);
		Иначе
			ПодключениеКПриемнику.ПланыОбмена.ЗарегистрироватьИзменения(УзелДляРегистрацииИзменений, МетаданныеДляОбмена);
		КонецЕсли;	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры


Процедура ПроверитьУстановленностьКодаУСобственногоУзла(ИмяПланаОбмена, ЭтоОсновнойПланОбмена = Истина) Экспорт
	
	СобственныйУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
	Если ДействиеВыбранноеПользователем = 0 Тогда
		
		Если ЗначениеЗаполнено(СобственныйУзел.Код) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если ЭтоОсновнойПланОбмена Тогда
			НужныйКод = мСтруктураНастроек.КодУзлаОбмена;
		Иначе
			НужныйКод = мСтруктураНастроек.КодУзлаОбменаФон
		КонецЕсли;			
		
		Если СобственныйУзел.Код = НужныйКод Тогда
			Возврат;
		КонецЕсли;			
			
	КонецЕсли;
		
	ОбъектУзла = СобственныйУзел.ПолучитьОбъект();
	
	Если ДействиеВыбранноеПользователем = 0 Тогда
		ОбъектУзла.УстановитьНовыйКод();
	Иначе
		ОбъектУзла.Код = НужныйКод;
	КонецЕсли;
	
	Если ПустаяСтрока(ОбъектУзла.Наименование) Тогда
		
		ОбъектУзла.Наименование	= "Эта информационная база";
				
	КонецЕсли;
	
	ОбъектУзла.Записать();		
		
КонецПроцедуры


//ФОРМА ХОДА ОБРАБОТКИ

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	мФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	мФормаХодаВыполненияОбмена.Значение = мФормаХодаВыполненияОбмена.Значение + ПроцентПрибавления;		
		
КонецПроцедуры

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0)
	
	Если мФормаХодаВыполненияОбмена = Неопределено Тогда
		
		мФормаХодаВыполненияОбмена = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
			
	КонецЕсли;
	
	мФормаХодаВыполненияОбмена.НаименованиеОбработкиДанных = "Сохранение настроек для обмена данными ...";
	мФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	мФормаХодаВыполненияОбмена.Значение = ПроцентПрибавления;
	мФормаХодаВыполненияОбмена.МаксимальноеЗначение = 100;
	
	Если Не мФормаХодаВыполненияОбмена.Открыта() Тогда
		мФормаХодаВыполненияОбмена.Открыть();
	КонецЕсли;		
		
КонецПроцедуры

//Процедура закрывает форму хода обработки данных
Процедура ЗакрытьФормуОбработкиДанных()
	
	Если мФормаХодаВыполненияОбмена <> Неопределено Тогда
			
		Если мФормаХодаВыполненияОбмена.Открыта() Тогда
			мФормаХодаВыполненияОбмена.Закрыть();
		КонецЕсли;		
				
	КонецЕсли;	
		
КонецПроцедуры




Функция ВсеНастройкиЗаданыХотиимИхПрименить(НастройкаОбмена, ИнформацияОТипеОбмена, НужноРегистрироватьИзмененияДляОбмена = Истина) Экспорт
	
	НужноВнестиИзмененияВИнформационнуюБазуПриемника = (ДействиеВыбранноеПользователем = 0
		И ПодключениеКПриемнику <> Неопределено);
			
	// диалог выбора файла настроек для второго этапа
	Если ДействиеВыбранноеПользователем = 0
		И ПодключениеКПриемнику = Неопределено Тогда
		
		ИмяФайлаНастроекОбменаПервойИнформационнойБазы = "";
				
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
			И Не ПустаяСтрока(КаталогОбменаИнформацией) Тогда
			
			КаталогНаДиске = Новый Файл(КаталогОбменаИнформацией);
			Если КаталогНаДиске.Существует()
				И КаталогНаДиске.ЭтоКаталог() Тогда
				
				ИмяКаталогаДляФайлаНастроек = КаталогОбменаИнформацией;
				Если Сред(ИмяКаталогаДляФайлаНастроек, СтрДлина(ИмяКаталогаДляФайлаНастроек), 1) <> "\" Тогда
					ИмяКаталогаДляФайлаНастроек = ИмяКаталогаДляФайлаНастроек + "\";
				КонецЕсли;
				
				ИмяФайлаНастроекОбменаПервойИнформационнойБазы = ИмяКаталогаДляФайлаНастроек + "НастройкиДляВторойИнформационнойБазы.xml";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяФайлаНастроекОбменаПервойИнформационнойБазы) Тогда
		
			ИмяФайлаНастроекОбменаПервойИнформационнойБазы = КаталогВременныхФайлов() + "НастройкиДляВторойИнформационнойБазы.xml";		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		ИнициализироватьФормуХодаОбработки("Подготовка данных для сохранения", 0);
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Подключение к информационной базе приемнику", 10);
			
			Если ПодключениеКПриемнику = Неопределено Тогда
			
				ПодключениеКПриемнику = ВыполнитьПодключениеКИБПриемнику();
		
				Если ПодключениеКПриемнику = Неопределено Тогда
					
					// подключиться не смогли
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			ПодключениеКПриемнику.НачатьТранзакцию();
		КонецЕсли;
			
		// 1. создаем узел обмена
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки("Создание объектов для регистрации изменений", 10);
		
		// надо еще проверить что бы код у собственного узла был установлен
		ПроверитьУстановленностьКодаУСобственногоУзла(ТипИнформационнойБазыДляОбмена, Истина);
		
		Если ДействиеВыбранноеПользователем = 1 Тогда
				
			Узел = ПланыОбмена[ТипИнформационнойБазыДляОбмена].НайтиПоКоду(мСтруктураНастроек.КодСобственногоУзла);
			НужноСоздаватьНовыйУзел = НЕ ЗначениеЗаполнено(Узел);
			
		Иначе
			
			НужноСоздаватьНовыйУзел = Истина;
			
		КонецЕсли;
		
		
		Если НужноСоздаватьНовыйУзел Тогда
			
			УзелПланаОбмена = ПланыОбмена[ТипИнформационнойБазыДляОбмена].СоздатьУзел();
			УзелПланаОбмена.Наименование = НаименованиеИнформационнойБазыДляОбмена;
			
			Если ДействиеВыбранноеПользователем = 0 Тогда
				
				УзелПланаОбмена.УстановитьНовыйКод();
				
				Если НужныОграниченияПоОрганизации() Тогда
					
					УзелПланаОбмена.Организации.Загрузить(Организации.Выгрузить());
										
				КонецЕсли;
				
			Иначе
				УзелПланаОбмена.Код = мСтруктураНастроек.КодСобственногоУзла;
			КонецЕсли;
			
			УзелПланаОбмена.ПрефиксДляЗагружаемыхДокументов = ПрефиксДляДокументовВТекущейИБ;
			УзелПланаОбмена.ДатаНачалаВыгрузкиДокументов = ДатаНачалаВыгрузкиДокументов;
			
			УзелПланаОбмена.ИспользоватьИнформациюОМестеСозданияОбъектовПриВыгрузкеИЗагрузкеДанных = НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции;
			УзелПланаОбмена.Записать();
			
		Иначе
			
			УзелПланаОбмена = Узел.ПолучитьОбъект();
			УстановитьНулевойНомерПринятогоСообщенияУУзлаОбмена(УзелПланаОбмена);
		
		КонецЕсли;
		
		УзелБазыПриемникаФоновыйОбмен = Неопределено;
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			
			// в приемнике собственный код плана обмена должен быть такой же как у УзелПланаОбмена
			// а узел для обмена данными иметь код собственного узла текущей ИБ
			ПроверитьСобственныйКодУзлаУПриемника(ПодключениеКПриемнику, ТипИнформационнойБазыДляОбмена, УзелПланаОбмена.Код);
			
			УзелБазыПриемникаФоновыйОбмен = СоздатьЭлементПланаОбменаВИнформационнойбазеПодключения(ПодключениеКПриемнику, ТипИнформационнойБазыДляОбмена, 
				ПланыОбмена[ТипИнформационнойБазыДляОбмена].ЭтотУзел().Код, мСтруктураИнформацииОТекущейИнформационнойБазе.ПредставлениеКонфигурации);

		КонецЕсли;
		
		// 2. Создаем фоновый узел если нужно
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки("Подготовка к первоначальному обмену данными", 10);
		
		// надо еще проверить что бы код у собственного узла был установлен
		
		УзелДляРегистрацииИзменений = Неопределено;
		УзелФоновогоПланаОбмена = Неопределено;
		Если ТипЗнакомстваИнформационныхБаз = 0 Тогда
			
			ИмяФоновогоПлана = ПолучитьИмяФоновогоПланаОбмена(ТипИнформационнойБазыДляОбмена);
			
			ПроверитьУстановленностьКодаУСобственногоУзла(ИмяФоновогоПлана, Ложь);
			
			Если ДействиеВыбранноеПользователем = 1 Тогда
				
				УзелДляРегистрацииИзменений = ПланыОбмена[ИмяФоновогоПлана].НайтиПоКоду(мСтруктураНастроек.КодСобственногоУзлаФон);
				НужноСоздаватьНовыйУзел = НЕ ЗначениеЗаполнено(УзелДляРегистрацииИзменений);
				
			Иначе
				
				НужноСоздаватьНовыйУзел = Истина;
				
			КонецЕсли;
			
			Если НужноСоздаватьНовыйУзел Тогда
				
				УзелФоновогоПланаОбмена = ПланыОбмена[ИмяФоновогоПлана].СоздатьУзел();
				УзелФоновогоПланаОбмена.Наименование = НаименованиеИнформационнойБазыДляОбмена + "_Фоновый";
				
				Если ДействиеВыбранноеПользователем = 0 Тогда
					УзелФоновогоПланаОбмена.УстановитьНовыйКод();
				Иначе
					УзелФоновогоПланаОбмена.Код = мСтруктураНастроек.КодСобственногоУзлаФон;
				КонецЕсли;			
				
				УзелФоновогоПланаОбмена.Записать();
				
				УзелДляРегистрацииИзменений = УзелФоновогоПланаОбмена.Ссылка;
				
			Иначе
				
				УзелФоновогоПланаОбмена = УзелДляРегистрацииИзменений.ПолучитьОбъект();
				УстановитьНулевойНомерПринятогоСообщенияУУзлаОбмена(УзелФоновогоПланаОбмена);
				
			КонецЕсли;
			
			Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			
				// в приемнике собственный код плана обмена должен быть такой же как у УзелПланаОбмена
				// а узел для обмена данными иметь код собственного узла текущей ИБ
				ПроверитьСобственныйКодУзлаУПриемника(ПодключениеКПриемнику, ИмяФоновогоПлана, УзелФоновогоПланаОбмена.Код);
				
				Попытка
					
					УзелБазыПриемникаФоновыйОбмен = СоздатьЭлементПланаОбменаВИнформационнойбазеПодключения(ПодключениеКПриемнику, ИмяФоновогоПлана, 
						ПланыОбмена[ИмяФоновогоПлана].ЭтотУзел().Код, мСтруктураИнформацииОТекущейИнформационнойБазе.ПредставлениеКонфигурации + "_Фоновый");
						
				Исключение
						
					УзелБазыПриемникаФоновыйОбмен = Неопределено;
					
				КонецПопытки;	

			КонецЕсли;
			
		Иначе
			
			УзелДляРегистрацииИзменений = УзелПланаОбмена.Ссылка;
			
		КонецЕсли;
		
		// 3. регистрируем необходимые изменения
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки("Подготовка объектов к первому обмену данными", 40);
		
		ОсновныеПравилаОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена);
		
		Если ТипЗнакомстваИнформационныхБаз <> 2 Тогда
		
			Если НужноРегистрироватьИзмененияДляОбмена Тогда 
				// нужно определить какими правилами обмена нужно пользоваться для выгрузки данных
				ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ОсновныеПравилаОбмена);
			КонецЕсли;
			
			Если УзелБазыПриемникаФоновыйОбмен <> Неопределено Тогда
				
				// регистрируем изменения для нужного узла	
				ПравилаОбменаИзПриемникаВИсточник = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
				
				Если НужноРегистрироватьИзмененияДляОбмена Тогда
					ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелБазыПриемникаФоновыйОбмен, ПравилаОбменаИзПриемникаВИсточник, ПодключениеКПриемнику);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// 4. Создаем настройку обмена данными
		ОтобразитьНовоеСообщениеВФормеХодаОбработки("Сохранение настроек для обмена данными", 40);
		
		НастройкаОбмена = Справочники.НастройкиОбменаДанными.СоздатьЭлемент();
		НастройкаОбмена.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Истина;
		НастройкаОбмена.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 5;
		
		ЗаполнитьЗначенияСвойств(НастройкаОбмена, ЭтотОбъект);
		
		НастройкаОбмена.Наименование = "Обмен с """ + НаименованиеИнформационнойБазыДляОбмена + """";
		НастройкаОбмена.OnLineОбмен = Истина;
		НастройкаОбмена.УзелИнформационнойБазы = УзелПланаОбмена.Ссылка;
		
		Если ТипЗнакомстваИнформационныхБаз = 0 Тогда
			
			НастройкаОбмена.УзелФоновогоОбмена = УзелФоновогоПланаОбмена.Ссылка;
			
			Если НастройкаОбмена.ДобавлениеОбъектовИзФоновогоОбмена = 0 Тогда
				НастройкаОбмена.ДобавлениеОбъектовИзФоновогоОбмена = 1;
			КонецЕсли;
			
		Иначе
			
			НастройкаОбмена.ДобавлениеОбъектовИзФоновогоОбмена = 0;
			
		КонецЕсли;
		
		//загружаем правила обмена
		//правила обмена хранятся в общих макетах
		//имя определяется: ПравилаОбмена_Откуда_Куда
		НастройкаОбмена.ПравилаОбмена = Новый ХранилищеЗначения(ОсновныеПравилаОбмена);			
						
		Если ПодключениеКПриемнику <> Неопределено Тогда
			
			ТекстПравилОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
			НастройкаОбмена.ПравилаОбменаДляПриемника = Новый ХранилищеЗначения(ТекстПравилОбмена);			
			
		КонецЕсли;
		
		// устанавливаем параметры пользователя для синхронизации
		НастройкаОбмена.НастройкаВариантовПоискаОбъектов.Очистить();
		Для Каждого СтрокаНастроекПользователя Из НастройкаВариантовПоискаОбъектов Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастроекПользователя.ИмяНастройкиДляАлгоритма) Тогда
				
				СтрокаНастройки = НастройкаОбмена.НастройкаВариантовПоискаОбъектов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкаОбмена.НастройкаВыгрузкиДанных.Очистить();
		Для Каждого СтрокаНастроекПользователя Из НастройкаВыгрузкиДанных Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастроекПользователя.КодПравилаВыгрузки) Тогда
				
				СтрокаНастройки = НастройкаОбмена.НастройкаВыгрузкиДанных.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкаОбмена.Записать();
		
		Если НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
			
			СтароеЗначениеКонстанты = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
			Если СтароеЗначениеКонстанты <> Истина Тогда
				Константы.СохранятьИнформациюОМестеСозданияОбъектов.Установить(Истина);
			КонецЕсли;
			
			Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				
				СтароеЗначениеКонстанты = ПодключениеКПриемнику.Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
				Если СтароеЗначениеКонстанты <> Истина Тогда
					ПодключениеКПриемнику.Константы.СохранятьИнформациюОМестеСозданияОбъектов.Установить(Истина);
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДействиеВыбранноеПользователем = 0
			И НЕ НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			
			// настройку сохраняем в файл обмена, для последующего чтения из него
			СохранитьПараметрыНастройкиВФайл(НастройкаОбмена, ИмяФоновогоПлана);				
						
		КонецЕсли;		
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			ПодключениеКПриемнику.ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();		
		
		ЗакрытьФормуОбработкиДанных();
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		Сообщить("Ошибка при сохранении настроек обмена данными: " + СтрокаОшибки, СтатусСообщения.Важное);		
		
		ЗакрытьФормуОбработкиДанных();
		
		Возврат Ложь;
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьТипИБПоПараметрам() Экспорт
	
	Для Номер = 0 По мТаблицаВозможныхОбменов.Количество() - 1 Цикл
		
		СтрокаТаблицы = мТаблицаВозможныхОбменов[Номер];
		
		Если СтрокаТаблицы.ИмяПланаОбмена = ТипИнформационнойБазыДляОбмена
			И СтрокаТаблицы.ПредставлениеКонфигурации = НаименованиеИнформационнойБазыДляОбмена Тогда
			
			Возврат Номер;
			
		КонецЕсли;				
		
	КонецЦикла;	
	
	Возврат 0;
	
Конецфункции

Функция СоздатьЭлементПланаОбменаВИнформационнойбазеПодключения(ПодключениеКПриемнику, ИмяПланаОбмена, КодЭлемента, Наименование) Экспорт
	
	УзелПланаОбмена = ПодключениеКПриемнику.ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодЭлемента);
		
	Если УзелПланаОбмена <> Неопределено
		И НЕ УзелПланаОбмена.Пустая() Тогда
		
		Если УзелПланаОбмена.НомерПринятого <> 0 Тогда
		
			ЭлементПланаОбмена = УзелПланаОбмена.ПолучитьОбъект();
			ЭлементПланаОбмена.НомерПринятого = 0;
			ЭлементПланаОбмена.Записать();
			
		КонецЕсли;
		
		Возврат УзелПланаОбмена.Ссылка;
		
	КонецЕсли;
	
	УзелПланаОбмена = ПодключениеКПриемнику.ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();
	УзелПланаОбмена.Наименование = Наименование;
	УзелПланаОбмена.Код = КодЭлемента;
	
	УзелПланаОбмена.ПрефиксДляЗагружаемыхДокументов = ПрефиксДляЗагружаемыхДокументов;
	УзелПланаОбмена.ДатаНачалаВыгрузкиДокументов = ДатаНачалаВыгрузкиДокументов;
	
	УзелПланаОбмена.ИспользоватьИнформациюОМестеСозданияОбъектовПриВыгрузкеИЗагрузкеДанных = НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции;
	
	УзелПланаОбмена.Записать();	
	
	Возврат УзелПланаОбмена.Ссылка;
	
КонецФункции

Процедура ЗаписатьБазовуюИнформациюОРассписании(ЧтениеXML, РасписаниеРегламентногоЗадания) Экспорт
	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ВремяЗавершения, "ВремяЗавершения", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ВремяКонца, "ВремяКонца", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ВремяНачала, "ВремяНачала", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДатаКонца, "ДатаКонца", НазначениеТипаXML.Явное);	
	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДатаНачала, "ДатаНачала", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДеньВМесяце, "ДеньВМесяце", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДеньНеделиВМесяце, "ДеньНеделиВМесяце", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ИнтервалЗавершения, "ИнтервалЗавершения", НазначениеТипаXML.Явное);	
	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПаузаПовтора, "ПаузаПовтора", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПериодНедель, "ПериодНедель", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня, "ПериодПовтораВТечениеДня", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПериодПовтораДней, "ПериодПовтораДней", НазначениеТипаXML.Явное);
			
КонецПроцедуры

Процедура ЗаписатьРасписанияРегламентногоЗаданияВXML(ЗаписьXML, РасписаниеРегламентногоЗадания) Экспорт
	
	ЗаписатьБазовуюИнформациюОРассписании(ЗаписьXML, РасписаниеРегламентногоЗадания);
	
	//ДниНедели
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДниНедели");
	
	Для Каждого ДеньНастройки Из РасписаниеРегламентногоЗадания.ДниНедели Цикл
		
		ЗаписатьXML(ЗаписьXML, ДеньНастройки, "День", НазначениеТипаXML.Явное);	
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//Месяцы
    ЗаписьXML.ЗаписатьНачалоЭлемента("Месяцы");
	
	Для Каждого Месяц Из РасписаниеРегламентногоЗадания.Месяцы Цикл
		
		ЗаписатьXML(ЗаписьXML, Месяц, "Месяц", НазначениеТипаXML.Явное);	
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДетальныеРасписанияДня");
	
	Для Каждого ЭлементДетельногоРасписания Из РасписаниеРегламентногоЗадания.ДетальныеРасписанияДня Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасписаниеДня");
		
		ЗаписатьБазовуюИнформациюОРассписании(ЗаписьXML, ЭлементДетельногоРасписания);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
					
КонецПроцедуры

Функция СохранитьПараметрыНастройкиВФайл(НастройкаОбмена, ИмяФоновогоПлана, СохранитьПравилаВФайл = Истина) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	
	Если СохранитьПравилаВФайл Тогда
		ЗаписьXML.ОткрытьФайл(ИмяФайлаНастроекОбменаПервойИнформационнойБазы, "UTF-8");
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыНастройки");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОсновныеПараметрыОбмена");
	
	ЗаписатьXML(ЗаписьXML, ТипИнформационнойБазыДляОбмена, "ТипИнформационнойБазыДляОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, мСтруктураИнформацииОТекущейИнформационнойБазе.ПредставлениеКонфигурации, "НаименованиеИнформационнойБазыДляОбмена", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, НастройкаОбмена.УзелИнформационнойБазы.Код, "КодУзлаОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПланыОбмена[ТипИнформационнойБазыДляОбмена].ЭтотУзел().Код, "КодСобственногоУзла", НазначениеТипаXML.Явное);
		
	ЗаписатьXML(ЗаписьXML, ТипНастройки, "ТипНастройки", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ВыполнятьАвтоматически, "ВыполнятьАвтоматически", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, "КоличествоЭлементовВТранзакцииНаВыгрузкуДанных", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, КоличествоЭлементовВТранзакцииНаЗагрузкуДанных, "КоличествоЭлементовВТранзакцииНаЗагрузкуДанных", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ВыполнятьАрхивациюФайловОбмена, "ВыполнятьАрхивациюФайловОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПарольНаПрием, "ПарольНаОтправку", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПарольНаОтправку, "ПарольНаПрием", НазначениеТипаXML.Явное);
	//ЗаписатьXML(ЗаписьXML, ВестиЛог, "ВестиЛог", НазначениеТипаXML.Явное);
			
	ЗаписатьXML(ЗаписьXML, КаталогОбменаИнформацией, "КаталогОбменаИнформацией", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, FTPАдресОбмена, "FTPАдресОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПортFTPСоединения, "ПортFTPСоединения", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПользовательFTPСоединения, "ПользовательFTPСоединения", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПарольFTPСоединения, "ПарольFTPСоединения", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Комментарий, "Комментарий", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ВариантНастройкиПериодическогоОбмена, "ВариантНастройкиПериодическогоОбмена", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ИспользоватьРегламентныеЗадания, "ИспользоватьРегламентныеЗадания", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP, "МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПассивноеFTPСоединение, "ПассивноеFTPСоединение", НазначениеТипаXML.Явное);
	
	Если ЗначениеЗаполнено(НастройкаОбмена.УзелФоновогоОбмена) Тогда
		
		КодУзлаОбменаФон = НастройкаОбмена.УзелФоновогоОбмена.Код;
		КодСобственногоУзлаОбменаФон = ПланыОбмена[ИмяФоновогоПлана].ЭтотУзел().Код
		
	Иначе
		
		КодУзлаОбменаФон = 0;
		КодСобственногоУзлаОбменаФон = 0;
		
	КонецЕсли;
	
	ЗаписатьXML(ЗаписьXML, ИмяФоновогоПлана, "ИмяФонОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, КодУзлаОбменаФон, "КодУзлаОбменаФон", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, КодСобственногоУзлаОбменаФон, "КодСобственногоУзлаФон", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ДобавлениеОбъектовИзФоновогоОбмена, "ДобавлениеОбъектовИзФоновогоОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, КоличествоОбъектовДляФоновогоОбмена, "КоличествоОбъектовДляФоновогоОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, OnLineОбмен, "OnLineОбмен", НазначениеТипаXML.Явное);
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаПротоколаОбменаOnLineОбмен) Тогда
		ИмяПротоколаДляЗагрузки = "";	
	Иначе
		ИмяПротоколаДляЗагрузки = ПроцедурыОбменаДанными.ПолучитьИмяПротоколаЗагрузки(ИмяФайлаПротоколаОбменаOnLineОбмен);
	КонецЕсли;
	
	ЗаписатьXML(ЗаписьXML, ИмяПротоколаДляЗагрузки, "ИмяФайлаПротоколаОбменаOnLineОбмен", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ТипЗнакомстваИнформационныхБаз, "ТипЗнакомстваИнформационныхБаз", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ИспользоватьРегламентныеЗаданияДляФоновогоОбмена, "ИспользоватьРегламентныеЗаданияДляФоновогоОбмена", НазначениеТипаXML.Явное);		
	
	ЗаписатьXML(ЗаписьXML, ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции, "ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ДатаНачалаВыгрузкиДокументов, "ДатаНачалаВыгрузкиДокументов", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ПрефиксДляЗагружаемыхДокументов, "ПрефиксДляДокументовВТекущейИБ", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПрефиксДляДокументовВТекущейИБ, "ПрефиксДляЗагружаемыхДокументов", НазначениеТипаXML.Явное);
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если мРегламентноеЗадание <> Неопределено Тогда 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасписаниеОсновногоРегламентного");
		ЗаписатьРасписанияРегламентногоЗаданияВXML(ЗаписьXML, мРегламентноеЗадание.Расписание);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Если мРегламентноеЗаданиеФоновыйОбмен <> Неопределено Тогда 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасписаниеФоновогоРегламентного");
		ЗаписатьРасписанияРегламентногоЗаданияВXML(ЗаписьXML, мРегламентноеЗаданиеФоновыйОбмен.Расписание);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
			
	СтрокаЗаписи = ЗаписьXML.Закрыть();
	Возврат СтрокаЗаписи;
	
КонецФункции

Процедура СоздатьНастройкуОбменаПоДанным(СтрокаДанных) Экспорт
	
	ЗагрузитьНастройкиИзФайла("", СтрокаДанных);
	ДействиеВыбранноеПользователем = 1;
	
	// надо только сохранить настройку и все
	
	ИнформацияОТипах = ОпределитьТипИБПоПараметрам();
	
	ВсеНастройкиЗаданыХотиимИхПрименить(Неопределено, ИнформацияОТипах, Ложь);
	
КонецПроцедуры

мТаблицаВозможныхОбменов = ПараметрыОбменаДанными.ПолучитьТаблицуВозможныхОбменовУТУПП();
мСтруктураИнформацииОТекущейИнформационнойБазе = ПараметрыОбменаДанными.ПолучитьИнформациюОТекущейИнформационнойБазеУТУПП();

мРегламентноеЗадание = Неопределено;
мРегламентноеЗаданиеФоновыйОбмен = Неопределено;

мКоличествоОбъектовДляСопоставления = Неопределено;
ВозможностьПодключенияКоВторойИнформационнойБазе = Истина;
ТипЗнакомстваИнформационныхБаз = 1;
ВерсияПлатформыИнформационнойБазыДляПодключения = "V81";


ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции = Ложь;
ДатаНачалаВыгрузкиДокументов = НачалоГода(ТекущаяДата());

ИспользоватьРегламентныеЗадания = Ложь;
ИспользоватьРегламентныеЗаданияДляФоновогоОбмена = Ложь;
