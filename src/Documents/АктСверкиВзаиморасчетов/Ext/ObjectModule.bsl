Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда
	
// Настройка периода
Перем НП Экспорт;

// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ПечатьАктаСверки()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_АктСверки";
	Макет  = ПолучитьМакет("АктСверки");

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
	ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
	ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
	ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
	ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	НаименованиеКонтрагента = Контрагент.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
		НаименованиеКонтрагента = Контрагент;
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
	ИмяПредставителяОрганизации = ПредставительОрганизации;
	ИмяПредсатвителяКонтрагента = ПредставительКонтрагента;
	
	Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
		|		&КонДата,
		|		СтруктурнаяЕдиница = &Организация
		|			И ФизическоеЛицо = &ФизическоеЛицо) КАК ОтветственныеЛицаОрганизацииСрезПоследних";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ФизическоеЛицо",ПредставительОрганизации);
		Запрос.УстановитьПараметр("КонДата",Дата);
		
		Рез = Запрос.Выполнить();
		Если Рез.Пустой() тогда
			ДолжностьПредставителяОрганизации = "";
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			ДолжностьПредставителяОрганизации = СокрЛП(Выборка.Должность);
		КонецЕсли;
	Иначе
		ДолжностьПредставителяОрганизации = "";
	КонецЕсли;
	ДолжностьПредставителяКонтрагента = ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"",СокрЛП(представительКонтрагента.Должность));
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Если ПоДаннымОрганизации.Количество()>0 Тогда
			ДатаНачалаПериода = ПоДаннымОрганизации[0].Дата;
		Иначе
			ДатаНачалаПериода = ДатаНачала;
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = ДатаНачала;
	КонецЕсли;		

	Если ЗначениеЗаполнено(Контракт) Тогда
		ТекстЗаголовка = "взаимных расчетов по контракту " + Контракт.НомерГосконтракта
		+ Символы.ПС
					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;	
	Иначе
		ТекстЗаголовка = "взаимных расчетов за период с " + Формат(ДатаНачалаПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ "между " + НазваниеОрганизации + Символы.ПС + "и " + НаименованиеКонтрагента;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	    ТекстЗаголовка = ТекстЗаголовка + Символы.ПС + "по договору " + СокрЛП(ДоговорКонтрагента);
	КонецЕсли;
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	//ДанныеПредставителяОрганизации = ДанныеФизЛица(Организация, ПредставительОрганизации, ДатаОкончания);
	//ФИОПредставителя = ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Фамилия),"",ДанныеПредставителяОрганизации.Фамилия
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Имя),""," "+ДанныеПредставителяОрганизации.Имя)
	//				+ ?(НЕ ЗначениеЗаполнено(ДанныеПредставителяОрганизации.Отчество),""," "+ДанныеПредставителяОрганизации.Отчество));
	ФИОПредставителя = "" + ПредставительОрганизации;	
	СтрЗаголовокТаблица = "Мы, нижеподписавшиеся, "
				+ ?(ДолжностьПредставителяОрганизации<>"",ДолжностьПредставителяОрганизации,"_______________________")+" "
				+ НазваниеОрганизации 
				+ " " + ?(ФИОПредставителя<>"",ФИОПредставителя,"__________________________________________") + ", с одной стороны, "
				+ "и " + ?(ДолжностьПредставителяКонтрагента<>"",ДолжностьПредставителяКонтрагента,"___________________________") 
				+ " " + НаименованиеКонтрагента + " " 
				+ ?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_____________________________________________",ПредставительКонтрагента) + ", с другой стороны, "
				+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
	
	ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
	ОбластьЗаголовок.Параметры.ВалютаДокумента = ВалютаДокумента;
	
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ИтСуммаОборотДт      = 0;
	ИтСуммаОборотКт      = 0;
	ИтСуммаОборотДтКонтр = 0;
	ИтСуммаОборотКтКонтр = 0;
	
	НачОстДебет  = ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
	НачОстКредит = ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	
	ОстатокНаКонец = ОстатокНаНачало + ПоДаннымОрганизации.Итог("Дебет") -  ПоДаннымОрганизации.Итог("Кредит");
	
	КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	ОстатокНаКонецК = -ОстатокНаНачало + ПоДаннымКонтрагента.Итог("Дебет") -  ПоДаннымКонтрагента.Итог("Кредит");
	
	КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
	ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
	ТабДок.Вывести(ОбластьНачОстатки);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	МаксИндекс = Макс(ПоДаннымОрганизации.Количество(), ПоДаннымКонтрагента.Количество()) - 1;
	Для Инд = 0 По МаксИндекс Цикл
		Если Инд < ПоДаннымОрганизации.Количество() Тогда
			СтрокаОрганизации = ПоДаннымОрганизации[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
			ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
			ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.ДокументРегистратор;
			ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДт = "";
			ОбластьОбороты.Параметры.СуммаОборотКт = "";
			ОбластьОбороты.Параметры.РегистраторПредставление = "";
			ОбластьОбороты.Параметры.Регистратор = "";
			ОбластьОбороты.Параметры.ДатаДокумента = "";
		КонецЕсли;
		Если Инд < ПоДаннымКонтрагента.Количество() Тогда
			СтрокаОрганизации = ПоДаннымКонтрагента[Инд];
			Регистратор = 	СтрокаОрганизации.Представление;
			СуммаОборотДт = СтрокаОрганизации.Дебет;
			СуммаОборотКт = СтрокаОрганизации.Кредит;
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
			ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
			ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
		Иначе
			ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
			ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
			ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
			ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
		КонецЕсли;
		ТабДок.Вывести(ОбластьОбороты);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
	ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
	Если СверкаСогласована тогда
		ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
		ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
	КонецЕсли;
	ТабДок.Вывести(ОбластьОборотыИтог);
	
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
	ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
	
	Если СверкаСогласована тогда
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьКонОстатки);
	
	// Результаты сверки
	
   	Если ПоДаннымОрганизации.Количество() = 0 и ОстатокНаНачало = 0 Тогда
   	    РезультатыСверки = "<сверка не проведена>";
  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
   	    РезультатыСверки = "<не указана дата сверки>";
   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
   	    РезультатыСверки = "<не указан контрагент>";
   	Иначе
		РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
	   	Если ОстатокНаКонец > 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	ИначеЕсли ОстатокНаКонец < 0 Тогда
			РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
	
	   	Иначе
	   		РезультатыСверки = РезультатыСверки + "отсутствует.";
	   	КонецЕсли;
	КонецЕсли;
	ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
	
	Если СверкаСогласована тогда
		ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
		
	   	Если ПоДаннымКонтрагента.Количество() = 0 и ОстатокНаНачало = 0 Тогда
	   	    РезультатыСверки = "<сверка не проведена>";
	  	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
	   	    РезультатыСверки = "<не указана дата сверки>";
	   	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
	   	    РезультатыСверки = "<не указан контрагент>";
	   	Иначе
			РезультатыСверки = "на " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
		   	Если ОстатокНаКонецК < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	ИначеЕсли ОстатокНаКонецК > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ВалютаДокумента);
		
		   	Иначе
		   		РезультатыСверки = РезультатыСверки + "отсутствует.";
		   	КонецЕсли;
	   	КонецЕсли;
		
		ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
		
		Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
			 ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ВалютаДокумента);
			 ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
		КонецЕсли; 
	КонецЕсли;
	
	ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
	ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
	
	ОбластьПодвал.Параметры.Должность = "________________";
	ОбластьПодвал.Параметры.ДолжностьК ="________________";
	
	ОбластьПодвал.Параметры.ФИОПредставителя  = "("+ ФИОПредставителя +")";
	ОбластьПодвал.Параметры.ФИОПредставителяК = "("+?(НЕ ЗначениеЗаполнено(ПредставительКонтрагента),"_______________________",ПредставительКонтрагента)+")";
	
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(ЭтотОбъект.Проведен) Тогда
	
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		КонецЕсли;

		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяМакета = "АктСверки" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьАктаСверки();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;                
		
	
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("АктСверки","Акт сверки");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьПредставлениеДокументов(ТаблицаЗначений)
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРегистратор) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы.ДокументРегистратор);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипТекущегоДокумента) Тогда
			
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			
			МассивТипа.Добавить(СтрокаТаблицы.ДокументРегистратор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений.Индексы.Добавить("ДокументРегистратор");
	
	ТаблицаЗначений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяМетаданных  = МетаданныеТипа.Имя;
		ЕстьНомерВходящегоДокумента = МетаданныеТипа.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено;
		ЕстьДатаВходящегоДокумента  = МетаданныеТипа.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено;

		Запрос.Текст = Запрос.Текст
		+ ?(Запрос.Текст = "", "",
		" 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|")
		+ "
		|ВЫБРАТЬ
		|	""" + МетаданныеТипа.Синоним + """ КАК ПредставлениеТипа,
		|	Док.Ссылка  КАК Ссылка,
		|	" + ?(ЕстьНомерВходящегоДокумента, "Док.НомерВходящегоДокумента", "НЕОПРЕДЕЛЕНО") + " КАК Номер,
		|	" + ?(ЕстьДатаВходящегоДокумента, "Док.ДатаВходящегоДокумента", "Док.Дата") + " КАК Дата
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ Док.Ссылка В (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерДокумента  = ?(Выборка.Номер = Неопределено, ОбщегоНазначения.ПолучитьНомерНаПечать(Выборка.Ссылка), Выборка.Номер);
		ДатаДокумента = Формат(Выборка.Дата, "ДФ='дд ММ гггг'");
		СтрокаДокумента = ТаблицаЗначений.Найти(Выборка.Ссылка, "ДокументРегистратор");
		СтрокаДокумента.Представление =  Выборка.ПредставлениеТипа + " № " + НомерДокумента + " от " + ДатаДокумента;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымУправленческогоУчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",         ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("Контракт",           Контракт);
	Запрос.УстановитьПараметр("Валюта",             ВалютаДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",             Сделка);
	
	ТекстФильтра = "
	|		Организация = &Организация И Контрагент = &Контрагент ";
	Если Не ЗначениеЗаполнено(Контракт) Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента = &ДоговорКонтрагента ";
		Иначе
			ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта ";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сделка) Тогда
			ТекстФильтра = ТекстФильтра + " И Сделка = &Сделка ";
		КонецЕсли;
		
		// Остатки
		
		Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовНачальныйОстаток, 0) КАК ОстатокНаНачало,
		|	ЕСТЬNULL(Взаиморасчеты.СуммаВзаиморасчетовКонечныйОстаток, 0)  КАК ОстатокНаКонец
		|ИЗ 
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , ,"	+ ТекстФильтра + ") КАК Взаиморасчеты";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
		
			ОстатокНаНачало = 0;
			ОстатокНаКонец  = 0;
		
		Иначе
		
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ОстатокНаНачало = Выборка.ОстатокНаНачало;
			ОстатокНаКонец  = Выборка.ОстатокНаКонец;
		
		КонецЕсли;
		
		// Обороты
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Взаиморасчеты.Период КАК Дата,
		|	Взаиморасчеты.Регистратор КАК ДокументРегистратор,
		|	ВЫБОР
		|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход > 0
		|			ТОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Дебет,
		|	ВЫБОР
		|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход < 0
		|			ТОГДА -(Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Кредит
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор," + ТекстФильтра + ") КАК Взаиморасчеты
		|ГДЕ
		|	Взаиморасчеты.СуммаВзаиморасчетовПриход <> Взаиморасчеты.СуммаВзаиморасчетовРасход
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Результат = Запрос.Выполнить();
		ТаблицаРезультата = Результат.Выгрузить();
	
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Взаиморасчеты.Период КАК Дата,
		|	Взаиморасчеты.Регистратор КАК ДокументРегистратор,
		|	ВЫБОР
		|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход > 0
		|			ТОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Дебет,
		|	ВЫБОР
		|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход < 0
		|			ТОГДА -(Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Кредит,
		|	ВЫБОР
		|		КОГДА НЕ Взаиморасчеты.Регистратор.Сделка.Контракт ЕСТЬ NULL 
		|			ТОГДА Взаиморасчеты.Регистратор.Сделка.Контракт
		|		КОГДА НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт ЕСТЬ NULL 
		|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт
		|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Сделка.Контракт
		|	КОНЕЦ КАК Контракт
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Регистратор,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент) КАК Взаиморасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		|		ПО Взаиморасчеты.Регистратор.Ссылка = ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка
		|ГДЕ
		|	Взаиморасчеты.СуммаВзаиморасчетовПриход <> Взаиморасчеты.СуммаВзаиморасчетовРасход
		|	И НЕ ВЫБОР
		|				КОГДА НЕ Взаиморасчеты.Регистратор.Сделка.Контракт ЕСТЬ NULL 
		|					ТОГДА Взаиморасчеты.Регистратор.Сделка.Контракт
		|				КОГДА НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт ЕСТЬ NULL 
		|					ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт
		|				ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Сделка.Контракт
		|			КОНЕЦ ЕСТЬ NULL 
		|	И (ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА НЕ Взаиморасчеты.Регистратор.Сделка.Контракт ЕСТЬ NULL 
		|					ТОГДА Взаиморасчеты.Регистратор.Сделка.Контракт
		|				КОГДА НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт ЕСТЬ NULL 
		|					ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт
		|				ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Сделка.Контракт
		|			КОНЕЦ КАК Документ.Контракт)) = &Контракт
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаиморасчеты.Регистратор,
		|	Взаиморасчеты.Период,
		|	ВЫБОР
		|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход > 0
		|			ТОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход < 0
		|			ТОГДА -(Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ Взаиморасчеты.Регистратор.Сделка.Контракт ЕСТЬ NULL 
		|			ТОГДА Взаиморасчеты.Регистратор.Сделка.Контракт
		|		КОГДА НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт ЕСТЬ NULL 
		|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Контракт
		|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка.Сделка.Контракт
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Результат = Запрос.Выполнить();
		ТаблицаРезультата = Результат.Выгрузить();
	КонецЕсли;

	
	ЗаполнитьПредставлениеДокументов(ТаблицаРезультата);
	
	ПоДаннымОрганизации.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымОрганизации() Экспорт
	
	ТабЗнач = ПоДаннымОрганизации.Выгрузить();
	
	ТабЗнач.Колонки.Дебет.Имя  = "КредитК";
	ТабЗнач.Колонки.Кредит.Имя = "Дебет";
	ТабЗнач.Колонки.КредитК.Имя= "Кредит";
	
	Для каждого СтрокаДвижений Из ТабЗнач Цикл
		
		Представление = СокрЛП(СтрокаДвижений.Представление);
		
		Если Лев(Представление, 9) = "Передано " Тогда
			Представление = "Принято " + Сред(Представление, 10);
			
		ИначеЕсли Лев(Представление, 8) = "Принято " Тогда
			Представление = "Передано " + Сред(Представление, 9);

		ИначеЕсли Лев(Представление, 8) = "Продажа " Тогда
			Представление = "Приход " + Сред(Представление, 9);

		ИначеЕсли Лев(Представление, 7) = "Приход " Тогда
			Представление = "Продажа " + Сред(Представление, 8);
			
		ИначеЕсли Лев(Представление, 11) = "Реализация " Тогда
			Представление = "Поступление " + Сред(Представление, 12);
			
		ИначеЕсли Лев(Представление, 12) = "Поступление " Тогда
			Представление = "Реализация " + Сред(Представление, 13);
			
		КонецЕсли;
		
		Поз = Найти(Представление, "от покупателя");
		Если Поз > 0 Тогда
			Представление = Лев(Представление, Поз - 1) + "поставщику" + Сред(Представление, Поз + 13);
			
		Иначе 
			Поз = Найти(Представление, "поставщику");
			Если Поз > 0 Тогда
				Представление = Лев(Представление, Поз - 1) + "от покупателя" + Сред(Представление, Поз + 10);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДвижений.Представление = Представление;
		
	КонецЦикла;
	
	ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
