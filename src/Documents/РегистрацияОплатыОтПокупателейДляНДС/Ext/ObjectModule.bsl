Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ АВТОЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА

// Вызавается из процедуры ЗаполнитьСтрокиРаспределенияОплат
//
Функция ПолучитьРасшифровкуПлатежа(Документ, РасшифровкаПлатежаПоДокументам)
	Если РасшифровкаПлатежаПоДокументам[Документ] = Неопределено Тогда
		СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ);
		МетаданныеДокумента = Документ.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			Расшифровка = Документ.РасшифровкаПлатежа.Выгрузить();
			Расшифровка.Индексы.Добавить("ДоговорКонтрагента");
		ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Найти("ОплатаПоставщикам") <> Неопределено Тогда
			Расшифровка = Документ.ОплатаПоставщикам.Выгрузить();
			Расшифровка.Индексы.Добавить("ДоговорКонтрагента");
		Иначе
			Расшифровка = Ложь; 
		КонецЕсли;

		РасшифровкаПлатежаПоДокументам.Вставить(Документ, Расшифровка);
	КонецЕсли; 
	
	Возврат РасшифровкаПлатежаПоДокументам[Документ];

КонецФункции // ПолучитьРасшифровкуПлатежа(СтрокаРасчетов.Документ)()

// Вызавается из процедуры ЗаполнитьСтрокиРаспределенияОплат
//
Функция ПолучитьДокументыРасчетовСКонтрагентом(Документ, ДокументыРасчетовСКонтрагентомПоДокументам)
	Если ДокументыРасчетовСКонтрагентомПоДокументам[Документ] = Неопределено Тогда
		МетаданныеДокумента = Документ.Метаданные();
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено Тогда
			Расшифровка = Документ.ДокументыРасчетовСКонтрагентом.Выгрузить();
		Иначе
			Расшифровка = Ложь; 
		КонецЕсли;

		ДокументыРасчетовСКонтрагентомПоДокументам.Вставить(Документ, Расшифровка);
	КонецЕсли; 
	
	Возврат ДокументыРасчетовСКонтрагентомПоДокументам[Документ];

КонецФункции // ПолучитьРасшифровкуПлатежа(СтрокаРасчетов.Документ)()


// Процедура вызывается по кнопке "Заполнить" в форме диалога документа.
// В процедуре реализуется алгоритм автоматического заполнения строк табличной части документа.
//
Процедура ЗаполнитьСтрокиРаспределенияОплат() Экспорт 
	
	ТаблицаРезультатов = Состав.ВыгрузитьКолонки();

	НераспределенныеРасчеты = ПолучитьИнформациюПоНепогашеннойЗадолженностиИНераспределеннымОплатам();
	
	Если НераспределенныеРасчеты.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружены нераспределенные расчеты.
		Состав.Очистить();
		Возврат;
	КонецЕсли;
	
	НепогашеннаяЗадолженность = новый ТаблицаЗначений();
	НепогашеннаяЗадолженность.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	НепогашеннаяЗадолженность.Колонки.Добавить("Документ", 		Документы.ТипВсеСсылки());
	НепогашеннаяЗадолженность.Колонки.Добавить("Сделка", 		Документы.ТипВсеСсылки());
	НепогашеннаяЗадолженность.Колонки.Добавить("Сумма",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	НепогашеннаяЗадолженность.Колонки.Добавить("Валюта",		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	НепогашеннаяЗадолженность.Колонки.Добавить("ВалютнаяСумма",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	НепогашеннаяЗадолженность.Индексы.Добавить("Документ");
	
	НераспределенныеОплаты  = НепогашеннаяЗадолженность.Скопировать();
	
	// Временное хранение расшифровок платежа по документа оплаты (при ведении расчетов по документам)
	РасшифровкаПлатежаПоДокументам = новый Соответствие;
	ДокументыРасчетовСКонтрагентомПоДокументам = новый Соответствие;
	
	Для каждого РасчетыПоДоговору Из НераспределенныеРасчеты.Строки Цикл
		РасчетыВВалютеРегУчета = (НЕ ЗначениеЗаполнено(РасчетыПоДоговору.ВалютаВзаиморасчетов) или РасчетыПоДоговору.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета);
		КолонкаЗачета = ?(РасчетыВВалютеРегУчета,"Сумма","ВалютнаяСумма");
		КолонкаРаспределения = ?(РасчетыВВалютеРегУчета,"ВалютнаяСумма","Сумма");
		
		Если РасчетыПоДоговору[КолонкаЗачета] = 0 или РасчетыПоДоговору["Оплата"+КолонкаЗачета] = 0 Тогда
			// Не обнаружена непогашенная задолженность или нераспределенная оплата
			Продолжить;
		КонецЕсли; 
		НепогашеннаяЗадолженность.Очистить();
		НераспределенныеОплаты.Очистить();
		
		ПроводитьОтборПоСделке = РасчетыПоДоговору.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		ПроводитьОтборПоСделкеРасшифровки = РасчетыПоДоговору.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
		ПроводитьОтборПоДокументуРасчетов = РасчетыПоДоговору.ВестиПоДокументамРасчетовСКонтрагентом;
		
		Для каждого СтрокаРасчетов  Из РасчетыПоДоговору.Строки Цикл
			Если СтрокаРасчетов.ЭтоОплата Тогда
				Если не НепогашеннаяЗадолженность.Итог(КолонкаЗачета) = 0 Тогда
					
					РасшифровкаПлатежа = Ложь;
					Если ПроводитьОтборПоДокументуРасчетов Тогда
						РасшифровкаПлатежа = ПолучитьРасшифровкуПлатежа(СтрокаРасчетов.Документ, РасшифровкаПлатежаПоДокументам);
					КонецЕсли;
					Если не РасшифровкаПлатежа = Ложь Тогда
						СтруктураОтбораРасшифровки = Новый Структура("ДоговорКонтрагента",СтрокаРасчетов.ДоговорКонтрагента);
						Если ПроводитьОтборПоСделкеРасшифровки Тогда
							СтруктураОтбораРасшифровки.Вставить("Сделка", СтрокаРасчетов.Сделка); 
						КонецЕсли;
						
						СтрокиПоДоговору = РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбораРасшифровки);
						Для каждого СтрокаПоДоговору Из СтрокиПоДоговору Цикл
							Если СтрокаПоДоговору.СуммаВзаиморасчетов = 0  Тогда
								Продолжить;
							ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПоДоговору.ДокументРасчетовСКонтрагентом) Тогда
								Продолжить;
							КонецЕсли; 
							
							СтруктураОтбораЗадолженности = новый структура("Документ",СтрокаПоДоговору.ДокументРасчетовСКонтрагентом);
							Если ПроводитьОтборПоСделке Тогда
								СтруктураОтбораЗадолженности.Вставить("Сделка", СтрокаРасчетов.Сделка); 
							КонецЕсли;
							
							СтрокиЗадолженностиПоОтбору = НепогашеннаяЗадолженность.НайтиСтроки(СтруктураОтбораЗадолженности);
							Для каждого СтрокаЗадолженности Из СтрокиЗадолженностиПоОтбору Цикл
								СуммаЗачета = Макс(0,мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаЗадолженности.ВалютнаяСумма,СтрокаРасчетов.ОплатаВалютнаяСумма));
								
								Если СуммаЗачета = 0 Тогда
								    Продолжить;
								КонецЕсли; 
								
								СтрокаРаспределения = ТаблицаРезультатов.Добавить();
								СтрокаРаспределения.Покупатель			= СтрокаРасчетов.Покупатель;
								СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
								СтрокаРаспределения.СчетФактура			= СтрокаЗадолженности.Документ;
								СтрокаРаспределения.ЗачетАванса			= Ложь;
								СтрокаРаспределения.ДатаОплаты			= СтрокаРасчетов.ДатаДокумента;
								СтрокаРаспределения.ДокументОплаты		= СтрокаРасчетов.Документ;
								СтрокаРаспределения.ВалютаРасчетов		= СтрокаРасчетов.Валюта;
								СтрокаРаспределения.Сделка				= СтрокаРасчетов.Сделка;
								
								СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
								СтрокаРаспределения[КолонкаРаспределения]=  Окр(СтрокаЗадолженности[КолонкаРаспределения]*СуммаЗачета/СтрокаЗадолженности[КолонкаЗачета],2);
								
								СтрокаРасчетов["Оплата"+КолонкаРаспределения]	= СтрокаРасчетов["Оплата"+КолонкаРаспределения] - Окр(СтрокаРасчетов["Оплата"+КолонкаРаспределения]*СуммаЗачета/СтрокаРасчетов["Оплата"+КолонкаЗачета],2);
								СтрокаЗадолженности[КолонкаРаспределения]= СтрокаЗадолженности[КолонкаРаспределения] - СтрокаРаспределения[КолонкаРаспределения];
								СтрокаРасчетов["Оплата"+КолонкаЗачета]	= СтрокаРасчетов["Оплата"+КолонкаЗачета] - СуммаЗачета;
								СтрокаЗадолженности[КолонкаЗачета]		= СтрокаЗадолженности[КолонкаЗачета] - СуммаЗачета;
								
								СтрокаПоДоговору.СуммаВзаиморасчетов = СтрокаПоДоговору.СуммаВзаиморасчетов - СуммаЗачета;
								
							КонецЦикла; 
						
						КонецЦикла; 
						
					Иначе
						Для каждого СтрокаЗадолженности Из НепогашеннаяЗадолженность Цикл
							Если СтрокаЗадолженности[КолонкаЗачета] = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если ПроводитьОтборПоСделке 
								И Не СтрокаЗадолженности.Сделка = СтрокаРасчетов.Сделка тогда
								Продолжить;
							КонецЕсли;
							
							СуммаЗачета = Макс(0,мин(СтрокаЗадолженности[КолонкаЗачета], СтрокаРасчетов["Оплата"+КолонкаЗачета]));
							Если СуммаЗачета = 0 Тогда
							    Продолжить;
							КонецЕсли; 
							
							СтрокаРаспределения = ТаблицаРезультатов.Добавить();
							СтрокаРаспределения.Покупатель			= СтрокаРасчетов.Покупатель;
							СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
							СтрокаРаспределения.СчетФактура			= СтрокаЗадолженности.Документ;
							СтрокаРаспределения.ЗачетАванса			= Ложь;
							СтрокаРаспределения.ДатаОплаты			= СтрокаРасчетов.ДатаДокумента;
							СтрокаРаспределения.ДокументОплаты		= СтрокаРасчетов.Документ;
							СтрокаРаспределения.ВалютаРасчетов		= СтрокаРасчетов.Валюта;
							СтрокаРаспределения.Сделка				= СтрокаРасчетов.Сделка;
							
							СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
							СтрокаРаспределения[КолонкаРаспределения]=  Окр(СтрокаЗадолженности[КолонкаРаспределения]*СуммаЗачета/СтрокаЗадолженности[КолонкаЗачета],2);
							
							
							СтрокаРасчетов["Оплата"+КолонкаРаспределения]	= СтрокаРасчетов["Оплата"+КолонкаРаспределения] - Окр(СтрокаРасчетов["Оплата"+КолонкаРаспределения]*СуммаЗачета/СтрокаРасчетов["Оплата"+КолонкаЗачета],2);
							СтрокаЗадолженности[КолонкаРаспределения]= СтрокаЗадолженности[КолонкаРаспределения] - СтрокаРаспределения[КолонкаРаспределения];
							СтрокаРасчетов["Оплата"+КолонкаЗачета]	= СтрокаРасчетов["Оплата"+КолонкаЗачета] - СуммаЗачета;
							СтрокаЗадолженности[КолонкаЗачета]		= СтрокаЗадолженности[КолонкаЗачета] - СуммаЗачета;
						
						КонецЦикла; 
						
					КонецЕсли;
		
					
				КонецЕсли; 
				Если не СтрокаРасчетов["Оплата"+КолонкаЗачета] = 0 Тогда
					НераспределеннаяСтрока = НераспределенныеОплаты.Добавить();
					НераспределеннаяСтрока.ДатаДокумента	= СтрокаРасчетов.ДатаДокумента;
					НераспределеннаяСтрока.Документ			= СтрокаРасчетов.Документ;
					НераспределеннаяСтрока.Сумма			= СтрокаРасчетов.ОплатаСумма;
					НераспределеннаяСтрока.Валюта			= СтрокаРасчетов.Валюта;
					НераспределеннаяСтрока.ВалютнаяСумма	= СтрокаРасчетов.ОплатаВалютнаяСумма;
					НераспределеннаяСтрока.Сделка			= СтрокаРасчетов.Сделка;
				КонецЕсли; 
				
			Иначе	
				Если не НераспределенныеОплаты.Итог(КолонкаЗачета)=0 
					//и не (ПроводитьОтборПоСделке и НЕ ЗначениеЗаполнено(СтрокаРасчетов.Сделка))
					Тогда
					
					РасшифровкаПлатежа = Ложь;
					Если ПроводитьОтборПоДокументуРасчетов Тогда
						РасшифровкаПлатежа = ПолучитьДокументыРасчетовСКонтрагентом(СтрокаРасчетов.Документ, ДокументыРасчетовСКонтрагентомПоДокументам);
					КонецЕсли;
					Если не РасшифровкаПлатежа = Ложь Тогда

						Если ПроводитьОтборПоСделкеРасшифровки Тогда
							СтрокиПоДоговору = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Сделка", СтрокаРасчетов.Сделка));
						Иначе
							СтрокиПоДоговору = РасшифровкаПлатежа;	
						КонецЕсли;

						Для каждого СтрокаПоДоговору Из СтрокиПоДоговору Цикл
							Если СтрокаПоДоговору.СуммаВзаиморасчетов = 0  Тогда
								Продолжить;
							КонецЕсли; 
							
							СтруктураОтбораОплат = новый структура("Документ",СтрокаПоДоговору.ДокументРасчетовСКонтрагентом);
							
							Если ПроводитьОтборПоСделке Тогда
								СтруктураОтбораОплат.Вставить("Сделка", СтрокаРасчетов.Сделка); 
							КонецЕсли;
							
							СтрокиОплатПоОтбору = НераспределенныеОплаты.НайтиСтроки(СтруктураОтбораОплат);
							Для каждого СтрокаОплаты Из СтрокиОплатПоОтбору Цикл
								Если СтрокаОплаты[КолонкаЗачета] = 0 Тогда
									Продолжить;
								КонецЕсли; 

								СуммаЗачета = Макс(0,мин(СтрокаПоДоговору.СуммаВзаиморасчетов, СтрокаОплаты.ВалютнаяСумма,СтрокаРасчетов.ВалютнаяСумма));
								
								Если СуммаЗачета = 0 Тогда
								    Продолжить;
								КонецЕсли; 
								
								СтрокаРаспределения = ТаблицаРезультатов.Добавить();
								СтрокаРаспределения.Покупатель			= СтрокаРасчетов.Покупатель;
								СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
								СтрокаРаспределения.СчетФактура			= СтрокаРасчетов.Документ;
								СтрокаРаспределения.ЗачетАванса			= Истина;
								СтрокаРаспределения.ДатаОплаты			= СтрокаОплаты.ДатаДокумента;
								СтрокаРаспределения.ДокументОплаты		= СтрокаОплаты.Документ;
								СтрокаРаспределения.ВалютаРасчетов		= СтрокаРасчетов.Валюта;
								СтрокаРаспределения.Сделка				= СтрокаРасчетов.Сделка;
								
								СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
								СтрокаРаспределения[КолонкаРаспределения]=  Окр(СтрокаРасчетов[КолонкаРаспределения]*СуммаЗачета/СтрокаРасчетов[КолонкаЗачета],2);
								
								
								СтрокаРасчетов[КолонкаРаспределения]	= СтрокаРасчетов[КолонкаРаспределения] - СтрокаРаспределения[КолонкаРаспределения];
								СтрокаОплаты[КолонкаРаспределения]		= СтрокаОплаты[КолонкаРаспределения] - Окр(СтрокаОплаты[КолонкаРаспределения]*СуммаЗачета/СтрокаОплаты[КолонкаЗачета],2);
								СтрокаРасчетов[КолонкаЗачета]			= СтрокаРасчетов[КолонкаЗачета] - СуммаЗачета;
								СтрокаОплаты[КолонкаЗачета]				= СтрокаОплаты[КолонкаЗачета] - СуммаЗачета;
								
								СтрокаПоДоговору.СуммаВзаиморасчетов = СтрокаПоДоговору.СуммаВзаиморасчетов - СуммаЗачета;
								
							КонецЦикла;
						КонецЦикла;
					Иначе
						Для каждого СтрокаОплаты Из НераспределенныеОплаты Цикл
							Если СтрокаОплаты[КолонкаЗачета] = 0 Тогда
								Продолжить;
							ИначеЕсли ПроводитьОтборПоСделке и не СтрокаРасчетов.Сделка = СтрокаОплаты.Сделка Тогда
								Продолжить;
							КонецЕсли; 
							
							СуммаЗачета = Макс(0,мин(СтрокаОплаты[КолонкаЗачета], СтрокаРасчетов[КолонкаЗачета]));
							Если СуммаЗачета = 0 Тогда
							    Продолжить;
							КонецЕсли; 
							
							СтрокаРаспределения = ТаблицаРезультатов.Добавить();
							СтрокаРаспределения.Покупатель			= СтрокаРасчетов.Покупатель;
							СтрокаРаспределения.ДоговорКонтрагента	= СтрокаРасчетов.ДоговорКонтрагента;
							СтрокаРаспределения.СчетФактура			= СтрокаРасчетов.Документ;
							СтрокаРаспределения.ЗачетАванса			= Истина;
							СтрокаРаспределения.ДатаОплаты			= СтрокаОплаты.ДатаДокумента;
							СтрокаРаспределения.ДокументОплаты		= СтрокаОплаты.Документ;
							СтрокаРаспределения.ВалютаРасчетов		= СтрокаРасчетов.Валюта;
							СтрокаРаспределения.Сделка				= СтрокаРасчетов.Сделка;
							
							СтрокаРаспределения[КолонкаЗачета] 		= СуммаЗачета;
							СтрокаРаспределения[КолонкаРаспределения]=  Окр(СтрокаРасчетов[КолонкаРаспределения]*СуммаЗачета/СтрокаРасчетов[КолонкаЗачета],2);
							
							
							СтрокаРасчетов[КолонкаРаспределения]	= СтрокаРасчетов[КолонкаРаспределения] - СтрокаРаспределения[КолонкаРаспределения];
							СтрокаОплаты[КолонкаРаспределения]		= СтрокаОплаты[КолонкаРаспределения] - Окр(СтрокаОплаты[КолонкаРаспределения]*СуммаЗачета/СтрокаОплаты[КолонкаЗачета],2);
							СтрокаРасчетов[КолонкаЗачета]			= СтрокаРасчетов[КолонкаЗачета] - СуммаЗачета;
							СтрокаОплаты[КолонкаЗачета]				= СтрокаОплаты[КолонкаЗачета] - СуммаЗачета;
						КонецЦикла; 
 					КонецЕсли;
					
					
				КонецЕсли; 
				
				Если не СтрокаРасчетов[КолонкаЗачета] = 0 Тогда
					НераспределеннаяСтрока = НепогашеннаяЗадолженность.Добавить();
					НераспределеннаяСтрока.ДатаДокумента	= СтрокаРасчетов.ДатаДокумента;
					НераспределеннаяСтрока.Документ			= СтрокаРасчетов.Документ;
					НераспределеннаяСтрока.Сумма			= СтрокаРасчетов.Сумма;
					НераспределеннаяСтрока.Валюта			= СтрокаРасчетов.Валюта;
					НераспределеннаяСтрока.ВалютнаяСумма	= СтрокаРасчетов.ВалютнаяСумма;
					НераспределеннаяСтрока.Сделка			= СтрокаРасчетов.Сделка;
				КонецЕсли; 
			
			КонецЕсли; 
			
			
		КонецЦикла; 
	КонецЦикла; 	
	
	Состав.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьСтрокиРаспределенияОплат()

// Функция вызывается из процедуры "ЗаполнитьСтрокиРаспределенияОплат".
// Формирует таблицу непогашенной задолженности по органнизации по данным регистра "НДСРасчетыСПоставщиками".
// Возвращаемое значение:
//   ДеревоЗначений - Дерево непогашенной задолженности и нераспределенной оплаты в разрезе договоров
//
Функция ПолучитьИнформациюПоНепогашеннойЗадолженностиИНераспределеннымОплатам()
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	НДСРасчетыСПокупателямиОстатки.Покупатель КАК Покупатель,
		|	ЕСТЬNULL(НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
		|	НДСРасчетыСПокупателямиОстатки.Документ КАК Документ,
		|	ВЫБОР
		|		КОГДА НДСРасчетыСПокупателямиОстатки.ЭтоОплата
		|			ТОГДА ВЫБОР
		|					КОГДА НДСРасчетыСПокупателямиОстатки.ДатаОплаты = НЕОПРЕДЕЛЕНО
		|						ТОГДА НДСРасчетыСПокупателямиОстатки.ДатаДокумента
		|					ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ДатаОплаты
		|				КОНЕЦ
		|		ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ДатаДокумента
		|	КОНЕЦ КАК ДатаДокумента,
		|	НДСРасчетыСПокупателямиОстатки.Валюта КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.ЭтоОплата
		|				ТОГДА 0
		|			ИНАЧЕ НДСРасчетыСПокупателямиОстатки.Сумма
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.ЭтоОплата
		|				ТОГДА 0
		|			ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ВалютнаяСумма
		|		КОНЕЦ) КАК ВалютнаяСумма,
		|	СУММА(ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.ЭтоОплата
		|				ТОГДА НДСРасчетыСПокупателямиОстатки.Сумма * -1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОплатаСумма,
		|	СУММА(ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.ЭтоОплата
		|				ТОГДА НДСРасчетыСПокупателямиОстатки.ВалютнаяСумма * -1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОплатаВалютнаяСумма,
		|	НДСРасчетыСПокупателямиОстатки.ЭтоОплата,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	НДСРасчетыСПокупателямиОстатки.Сделка,
		|	ЕСТЬNULL(НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом, ЛОЖЬ) КАК ВестиПоДокументамРасчетовСКонтрагентом
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСРасчетыСПокупателямиОстатки.Покупатель КАК Покупатель,
		|		НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		НДСРасчетыСПокупателямиОстатки.Документ КАК Документ,
		|		НДСРасчетыСПокупателямиОстатки.Документ.Дата КАК ДатаДокумента,
		|		НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов КАК Валюта,
		|		НДСРасчетыСПокупателямиОстатки.СуммаОстаток КАК Сумма,
		|		НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСумма,
		|		ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток < 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЭтоОплата,
		|		ВЫБОР
		|			КОГДА НДСРасчетыСПокупателямиОстатки.Документ.ДатаОплаты ЕСТЬ NULL 
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НАЧАЛОПЕРИОДА(НДСРасчетыСПокупателямиОстатки.Документ.ДатаОплаты, ДЕНЬ) = НАЧАЛОПЕРИОДА(НДСРасчетыСПокупателямиОстатки.Документ.Дата, ДЕНЬ)
		|							И &ИспользоватьВремяДокумента
		|						ТОГДА НДСРасчетыСПокупателямиОстатки.Документ.Дата
		|					ИНАЧЕ КОНЕЦПЕРИОДА(НДСРасчетыСПокупателямиОстатки.Документ.ДатаОплаты, ДЕНЬ)
		|				КОНЕЦ
		|		КОНЕЦ КАК ДатаОплаты,
		|		ЕСТЬNULL(НДСРасчетыСПокупателямиОстатки.Сделка, НЕОПРЕДЕЛЕНО) КАК Сделка
		|	ИЗ
		|		РегистрНакопления.НДСРасчетыСПокупателями.Остатки(&КонецПериода, Организация = &Организация) КАК НДСРасчетыСПокупателямиОстатки
		|	) КАК НДСРасчетыСПокупателямиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРасчетыСПокупателямиОстатки.Валюта,
		|	НДСРасчетыСПокупателямиОстатки.Документ,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ВедениеВзаиморасчетов,
		|	НДСРасчетыСПокупателямиОстатки.Покупатель,
		|	НДСРасчетыСПокупателямиОстатки.ЭтоОплата,
		|	ЕСТЬNULL(НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ),
		|	ВЫБОР
		|		КОГДА НДСРасчетыСПокупателямиОстатки.ЭтоОплата
		|			ТОГДА ВЫБОР
		|					КОГДА НДСРасчетыСПокупателямиОстатки.ДатаОплаты = НЕОПРЕДЕЛЕНО
		|						ТОГДА НДСРасчетыСПокупателямиОстатки.ДатаДокумента
		|					ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ДатаОплаты
		|				КОНЕЦ
		|		ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ДатаДокумента
		|	КОНЕЦ,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	НДСРасчетыСПокупателямиОстатки.Сделка,
		|	ЕСТЬNULL(НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом, ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента,
		|	Документ
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(ВалютнаяСумма),
		|	СУММА(ОплатаСумма),
		|	СУММА(ОплатаВалютнаяСумма)
		|ПО
		|	ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	ПриСовпаденииДатыИДатыОплатыИспользоватьВремяДокумента = ложь;
	
	//Обработка настройки учетной политики орагнизации "Способ отражения платежей погашаемых в течение дня"
	ОшибкаПолученияУчетнойПолитики = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецДня(Дата), ОшибкаПолученияУчетнойПолитики, Организация, "Упр");
	Если не ОшибкаПолученияУчетнойПолитики Тогда
		ПриСовпаденииДатыИДатыОплатыИспользоватьВремяДокумента = (УчетнаяПолитика.ОпределениеВремениПроведенияПлатежногоДокумента = перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ИспользоватьВремяДокумента",  ПриСовпаденииДатыИДатыОплатыИспользоватьВремяДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции // ПолучитьИнформациюПоНепогашеннойЗадолженности()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоОплатам(РезультатЗапросаПоОплатам)

	ТаблицаОплат = РезультатЗапросаПоОплатам.Выгрузить();
	
	Возврат ТаблицаОплат;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоОплатам(ТаблицаПоОплатам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаРасчетов, СчетФактура, ДокументОплаты");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОплатам, Отказ, Заголовок);
	
	Если ТаблицаПоОплатам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями.ВыгрузитьКолонки();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.ВыгрузитьКолонки();
	
	ТаблицаЗадолженности = ПолучитьТаблицуЗадолженностиВалютныеДоговора(СтруктураШапкиДокумента, ТаблицаПоОплатам);
	Если ТаблицаЗадолженности <> Неопределено Тогда
		ТаблицаЗадолженности.Индексы.Добавить("Покупатель, ДоговорКонтрагента, ДокументОплаты, ВалютаРасчетов");
	КонецЕсли;
	СтруктураОтбора = Новый Структура("Покупатель, ДоговорКонтрагента, ДокументОплаты, ВалютаРасчетов");
	
	Для Каждого ТекСтрокаОплат Из ТаблицаПоОплатам Цикл
		
		// Погашение задолженности
		Движение = ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
		Движение.Период = ?(ТекСтрокаОплат.ЗачетАванса,ТекСтрокаОплат.СчетФактураДата,
							?(НЕ ЗначениеЗаполнено(ТекСтрокаОплат.ДатаОплаты), ТекСтрокаОплат.ДокументОплатыДата, ТекСтрокаОплат.ДатаОплаты));
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.Покупатель			= ТекСтрокаОплат.Покупатель;
		Движение.ДоговорКонтрагента	= ТекСтрокаОплат.ДоговорКонтрагента;
		Движение.Документ			= ТекСтрокаОплат.СчетФактура;
		Движение.ВалютаРасчетов		= ТекСтрокаОплат.ВалютаРасчетов;
		Движение.Сделка				= ТекСтрокаОплат.Сделка;
		Движение.ВалютнаяСумма		= ТекСтрокаОплат.ВалютнаяСумма;
		Движение.Сумма 				= ТекСтрокаОплат.Сумма;
		
		//Движение.ДокументОплаты = ТекСтрокаОплат.ДокументОплаты;
		Движение.ДатаСобытия		= СтруктураШапкиДокумента.Дата;
		Движение.ВидДвижения		= ВидДвиженияНакопления.Расход;
		
		// Погашение нераспределенной оплаты
		Движение = ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
		Движение.Период = ?(ТекСтрокаОплат.ЗачетАванса,ТекСтрокаОплат.СчетФактураДата,
							?(НЕ ЗначениеЗаполнено(ТекСтрокаОплат.ДатаОплаты), ТекСтрокаОплат.ДокументОплатыДата, ТекСтрокаОплат.ДатаОплаты));
		Движение.Организация		= СтруктураШапкиДокумента.Организация;
		Движение.Покупатель			= ТекСтрокаОплат.Покупатель;
		Движение.ДоговорКонтрагента = ТекСтрокаОплат.ДоговорКонтрагента;
		Движение.ВалютаРасчетов		= ТекСтрокаОплат.ВалютаРасчетов;
		Движение.Сделка				= ТекСтрокаОплат.Сделка;
		
		Движение.Документ			= ТекСтрокаОплат.ДокументОплаты;
		Движение.ДатаСобытия		= СтруктураШапкиДокумента.Дата;
		СуммаДвижения = ТекСтрокаОплат.Сумма;
		// Если договор контрагента валютный, то требуется определить сумму списания, которая может быть не равна
		// регистрируемой сумме из-за курсовых разниц
		Если // Не ТекСтрокаОплат.РасчетыВУсловныхЕдиницах И
			Не ТекСтрокаОплат.ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета И
			ТаблицаЗадолженности <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтрокаОплат);
			СтрокиЗадолженности = ТаблицаЗадолженности.НайтиСтроки(СтруктураОтбора);
			Если СтрокиЗадолженности.Количество() > 0 
				И НЕ СтрокиЗадолженности[0].ВалютнаяСумма = 0 
				Тогда
				СуммаДвижения = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекСтрокаОплат.ВалютнаяСумма,
													ТекСтрокаОплат.ВалютаРасчетов,
													СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
													СтрокиЗадолженности[0].Сумма/СтрокиЗадолженности[0].ВалютнаяСумма, 1);
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрокаОплат.ЗачетАванса Тогда
			Движение.ВалютнаяСумма	= ТекСтрокаОплат.ВалютнаяСумма;
			Движение.Сумма 			= СуммаДвижения;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		Иначе
			Движение.ВалютнаяСумма 	= (-1)*ТекСтрокаОплат.ВалютнаяСумма;
			Движение.Сумма 			= (-1)*СуммаДвижения;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
		КонецЕсли;	
		
		// Отражение распределенной суммы
		Движение = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
		Движение.Период = ?(ТекСтрокаОплат.ЗачетАванса,ТекСтрокаОплат.СчетФактураДата,
							?(НЕ ЗначениеЗаполнено(ТекСтрокаОплат.ДатаОплаты), ТекСтрокаОплат.ДокументОплатыДата, ТекСтрокаОплат.ДатаОплаты));
		Движение.Организация = 	СтруктураШапкиДокумента.Организация;
		Движение.СчетФактура		= ТекСтрокаОплат.СчетФактура;
		Движение.ДокументОплаты		= ТекСтрокаОплат.ДокументОплаты;
		
		Движение.РаспределеннаяСумма= ТекСтрокаОплат.Сумма;
		Движение.КурсоваяРазница	= СуммаДвижения - ТекСтрокаОплат.Сумма;
		
		Движение.ДатаСобытия		= СтруктураШапкиДокумента.Дата;
		Движение.ВидДвижения		= ВидДвиженияНакопления.Приход;
		
	КонецЦикла;
	
	Движения.НДСРасчетыСПокупателями.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
	Движения.НДСРасчетыСПокупателями.ДобавитьДвижение(Ложь);
	
	Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
	Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
	
	ДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоОплатам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоОплатам, Отказ, Заголовок)
	
	ТаблицаРаспределения = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаПоОплатам Цикл
		
		Если СтрокаТаблицы.ЗачетАванса Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("СчетФактура", СтрокаТаблицы.СчетФактура);
			Запрос.УстановитьПараметр("ДокументОплаты", СтрокаТаблицы.ДокументОплаты);
			Запрос.УстановитьПараметр("СостояниеОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	НДСРеализация0Обороты.Организация,
			               |	НДСРеализация0Обороты.ВидЦенности,
			               |	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
			               |	&ДокументОплаты КАК СчетФактура,
			               |	НДСРеализация0Обороты.Состояние,
			               |	0 КАК СуммаБезНДС,
			               |	0 КАК НДС,
			               |	СУММА(ВЫБОР
			               |			КОГДА НДСРеализация0Обороты.Состояние = &СостояниеОжидание
			               |				ТОГДА НДСРеализация0Обороты.СуммаБезНДСОборот + НДСРеализация0Обороты.НДСОборот
			               |			ИНАЧЕ НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход
			               |		КОНЕЦ) КАК СуммаСНДС,
			               |	НДСсАвансовОстатки.СтавкаНДС КАК СтавкаНДС
			               |ИЗ
			               |	РегистрНакопления.НДСРеализация0.Обороты(, &Дата, , СчетФактура = &СчетФактура) КАК НДСРеализация0Обороты
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСсАвансов.Остатки(&Дата, СчетФактура = &ДокументОплаты) КАК НДСсАвансовОстатки
			               |		ПО НДСРеализация0Обороты.Организация = НДСсАвансовОстатки.Организация
			               |			И НДСРеализация0Обороты.Покупатель = НДСсАвансовОстатки.Покупатель
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	НДСРеализация0Обороты.Организация,
			               |	НДСРеализация0Обороты.ВидЦенности,
			               |	НДСРеализация0Обороты.Состояние,
			               |	НДСРеализация0Обороты.СчетФактура,
			               |	НДСсАвансовОстатки.СтавкаНДС";
							
			ТаблицаРаспределенияСФ = Запрос.Выполнить().Выгрузить();
		
			Если ТаблицаРаспределенияСФ.Количество() > 0 Тогда
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.Сумма, ТаблицаРаспределенияСФ.ВыгрузитьКолонку("СуммаСНДС"));
				Если МассивСумм <> Неопределено Тогда
					ТаблицаРаспределенияСФ.ЗагрузитьКолонку(МассивСумм, "СуммаБезНДС");
					ТаблицаРаспределенияСФ.Колонки.Удалить("СуммаСНДС");
					Для Каждого СтрокаРаспределения Из ТаблицаРаспределенияСФ Цикл
						СтрокаРаспределения.НДС = УчетНДС.РассчитатьСуммуНДС(СтрокаРаспределения.СуммаБезНДС, Истина, Истина,
																		УчетНДС.ПолучитьСтавкуНДС(СтрокаРаспределения.СтавкаНДС));
						СтрокаРаспределения.СуммаБезНДС = СтрокаРаспределения.СуммаБезНДС - СтрокаРаспределения.НДС;
					КонецЦикла;
				
					Если ТаблицаРаспределения = Неопределено Тогда
						ТаблицаРаспределения = ТаблицаРаспределенияСФ;
					Иначе
						ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенияСФ, ТаблицаРаспределения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (Не Отказ) И (ТаблицаРаспределения <> Неопределено) Тогда
		
		ТаблицаРаспределения.Колонки.Добавить("Событие");
		
	    Счетчик = ТаблицаРаспределения.Количество();
		Пока Счетчик <> 0 Цикл 
			Счетчик = Счетчик - 1;
			Если ТаблицаРаспределения[Счетчик].СуммаБезНДС = 0 И ТаблицаРаспределения[Счетчик].НДС = 0 Тогда
				ТаблицаРаспределения.Удалить(ТаблицаРаспределения[Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДвижения Из ТаблицаРаспределения Цикл
			Если СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
		КонецЦикла;
		
	    ТаблицаРаспределения.ЗаполнитьЗначения(перечисления.ВидыЦенностей.АвансыПолученные,"ВидЦенности");
		
		Движения.НДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаРаспределения;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуЗадолженностиВалютныеДоговора(СтруктураШапкиДокумента, ТаблицаПоОплатам)
	
	МассивСФ = Новый Массив;
	МассивПокупателей = Новый Массив;
	МассивДоговоров = Новый Массив;
	МассивДокументовОплаты = Новый Массив;
	МассивВалют = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоОплатам Цикл
		Если //Не СтрокаТаблицы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И
			Не СтрокаТаблицы.ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			МассивДокументовОплаты.Добавить(СтрокаТаблицы.ДокументОплаты);
			МассивПокупателей.Добавить(СтрокаТаблицы.Покупатель);
			МассивДоговоров.Добавить(СтрокаТаблицы.ДоговорКонтрагента);
			МассивВалют.Добавить(СтрокаТаблицы.ВалютаРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументовОплаты.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НДСРасчетыСПокупателямиОстатки.Покупатель,
		               |	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
		               |	НДСРасчетыСПокупателямиОстатки.Документ КАК ДокументОплаты,
		               |	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
		               |	СУММА(НДСРасчетыСПокупателямиОстатки.СуммаОстаток) КАК Сумма,
		               |	СУММА(НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСумма
		               |ИЗ
		               |	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(
		               |		&Дата,
		               |		Организация = &Организация
		               |		    И Покупатель В (&СписокПокупателей)
		               |		    И ДоговорКонтрагента В (&СписокДоговоров)
		               |		    И Документ В (&СписокДокументовОплаты)
		               |		    И ВалютаРасчетов В (&СписокВалют)) КАК НДСРасчетыСПокупателямиОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НДСРасчетыСПокупателямиОстатки.Организация,
		               |	НДСРасчетыСПокупателямиОстатки.Документ,
		               |	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
		               |	НДСРасчетыСПокупателямиОстатки.Покупатель,
		               |	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов";
		Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата)));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СписокПокупателей", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПокупателей));
		Запрос.УстановитьПараметр("СписокДоговоров", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров));
		Запрос.УстановитьПараметр("СписокДокументовОплаты", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДокументовОплаты));
		Запрос.УстановитьПараметр("СписокВалют", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивВалют));
		
		Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	
КонецФункции // ПолучитьТаблицуЗадолженностиВалютныеДоговора
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполенения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Покупатель",		"Покупатель");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	//СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах","ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("СчетФактураДата",	"СчетФактура.Дата");
	СтруктураПолей.Вставить("ЗачетАванса",		"ЗачетАванса");
	СтруктураПолей.Вставить("ДатаСобытия",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОплаты");
	СтруктураПолей.Вставить("ДокументОплатыДата","ДокументОплаты.Дата");
	СтруктураПолей.Вставить("Сделка",			"Сделка");
	
	СтруктураПолей.Вставить("ВалютаРасчетов",	"ВалютаРасчетов");
	СтруктураПолей.Вставить("Сумма",	"Сумма");
	СтруктураПолей.Вставить("ВалютнаяСумма",	"ВалютнаяСумма");
	
	РезультатЗапросаПоОплатам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаПоОплатам = 			ПодготовитьТаблицуПоОплатам(РезультатЗапросаПоОплатам);
	
	ПроверитьЗаполнениеТабличнойЧастиПоОплатам(ТаблицаПоОплатам, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОплатам, Отказ, Заголовок);
	КонецЕсли;
 
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
