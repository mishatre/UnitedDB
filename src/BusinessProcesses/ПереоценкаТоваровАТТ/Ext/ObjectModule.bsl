
////////////////////////////////////////////////////////////////////////////////
//ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет принудительное завершение бизнес-процесса.
//
Процедура ВыполнитьЗавершениеБизнесПроцесса(ЗавершатьВедущуюЗадачу = Истина) Экспорт

	// Пометим все задачи как выполненные.
	ЗапросЗадачи       = Новый Запрос;
	ЗапросЗадачи.УстановитьПараметр("БизнесПроцесс", Ссылка);
	ЗапросЗадачи.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка КАК ЗадачаПользователя
	|ИЗ
	|	Задача.ЗадачиПользователя КАК Задачи
	|ГДЕ
	|	Задачи.БизнесПроцесс = &БизнесПроцесс
	|	И Задачи.Выполнена = ЛОЖЬ";

	Выборка        = ЗапросЗадачи.Выполнить().Выбрать();
	РазмерВыборки  = Выборка.Количество();
	СчетчикВыборки = 0;

	НачатьТранзакцию();

	Пока Выборка.Следующий() Цикл

		#Если Клиент Тогда
		Состояние("Обработка:" + СчетчикВыборки + " из " + РазмерВыборки);
		#КонецЕсли

		СчетчикВыборки = СчетчикВыборки + 1;
		Попытка
	
			ЗадачаОбъект = Выборка.ЗадачаПользователя.ПолучитьОбъект();
			ЗадачаОбъект.Выполнена       = Истина;
			ЗадачаОбъект.Записать();

		Исключение

			ВызватьИсключение "Ошибка при выполнении задачи:" + Строка(Выборка.ЗадачаПользователя)
								+ Символы.ПС + "По причине: " + ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;

	ДатаЗавершения        = ТекущаяДата();
	Завершен              = Истина;
	ЗавершенПринудительно = Истина;

	Попытка

		Записать();

	Исключение

		ВызватьИсключение "Ошибка при записи бизнес-процесса:" + Строка(Ссылка)
							+ Символы.ПС + "По причине: " + ОписаниеОшибки();
	КонецПопытки;

	Если ЗначениеЗаполнено(ВедущаяЗадача) И ЗавершатьВедущуюЗадачу Тогда
		Попытка

			ЗадачаОбъект = ВедущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.ВыполнитьЗадачу();

		Исключение
			
			ВызватьИсключение "Ошибка при выполнении задачи:" + Строка(ВедущаяЗадача)
								+ Символы.ПС + "По причине: " + ОписаниеОшибки();
		КонецПопытки;

	КонецЕсли;

	ЗафиксироватьТранзакцию();

КонецПроцедуры // ВыполнитьЗавершениеБизнесПроцесса()

////////////////////////////////////////////////////////////////////////////////
//СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура вызывается перед стартом бизнес-процесса для выполнения проверок и
//заполнения реквизитов.
//
Процедура ПередСтартомБизнесПроцесса(Отказ)

	Заголовок = "Старт Бизнес-процесса: " + Ссылка;
	ПроверитьВозможностьСтарта(Отказ, Заголовок);

	Если Не Отказ Тогда
		ОбработатьСтартБизнесПроцесса()
	КонецЕсли;

КонецПроцедуры // ПередСтартомБизнесПроцесса()

// Процедура вызывается перед стартом бизнес-процесса для заполнения реквизитов.
//
Процедура ОбработатьСтартБизнесПроцесса()

	Если Инициатор.Пустая() Тогда
		Инициатор = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;

	ДатаСтарта = ТекущаяДата();

КонецПроцедуры // ОбработатьСтартБизнесПроцесса()

// Процедура устанавливает реквизиты бизнес-процесса перед завершением.
//
Процедура ОбработатьЗавершениеБизнесПроцесса()

	ДатаЗавершения = ТекущаяДата();

КонецПроцедуры // ОбработатьЗавершениеБизнесПроцесса()

// Функция возвращает пользователя, соответствующего ответственному лицу склада.
//
// Параметры:
//  Склад – справочник склады.
//
// Возвращаемое значение:
//   Справочник.Пользователи – пользователь.
//
Функция ПолучитьПользователяОтветственногоЗаСклад(Склад)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА Пользователи.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакСортировки
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(, СтруктурнаяЕдиница = &Склад) КАК ОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ОтветственныеЛица.ФизическоеЛицо = Пользователи.ФизЛицо
	|ГДЕ
	|	(НЕ Пользователи.Ссылка ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПризнакСортировки";

	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Исполнитель;
	Иначе
		Результат = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПользователяОТветственногоЗаСклад()

// Процедура проверяет заполнение обязательных реквизитов объекта.
//
Процедура ПроверитьВозможностьСтарта(Отказ, Заголовок)

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("УстановкаЦенНоменклатуры");
	СтруктураПолей.Вставить("Склад");
	СтруктураПолей.Вставить("Настройка");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,
			СтруктураПолей,
			Отказ,
			Заголовок);

КонецПроцедуры // ПроверитьВозможностьСтарта()

// Процедура формирует массив задач для точки маршрута.
//
//Параметры:
//  ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцесса.
//  ФормируемыеЗадачи           - пустой массив для задач.
//
Процедура СформироватьЗадачиТочкиМаршрута(ТочкаМаршрутаБизнесПроцесса,
											ФормируемыеЗадачи, 
											СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Исполнитель = ПолучитьПользователяОтветственногоЗаСклад(Склад);
	Если Исполнитель.Пустая() Тогда
		Исполнитель = Инициатор;
	КонецЕсли;
	
	ВыборкаПараметры = РаботаСБизнесПроцессами.ПолучитьПараметрыТочкиМаршрута(
						Настройка, 
						ТочкаМаршрутаБизнесПроцесса);

	Если Не ВыборкаПараметры.Следующий() Тогда
		Возврат;
	КонецЕсли;

	Если Не ВыборкаПараметры.Выполнять Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗадач = РаботаСБизнесПроцессами.СформироватьПараметрыШапкиЗадач(ВыборкаПараметры);
	ПараметрыЗадач.Вставить("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	ПараметрыЗадач.Вставить("Исполнитель",   Исполнитель);
	ПараметрыЗадач.Вставить("БизнесПроцесс", Ссылка);

	ФормируемыеЗадачи.Добавить(РаботаСБизнесПроцессами.УстановитьПараметрыЗадачи(ПараметрыЗадач));

КонецПроцедуры // СформироватьЗадачиТочкиМаршрута()

////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ТОЧЕК МАРШРУТА
//

// Процедура - обработчик события ПриЗавершении точки маршрута "ПереоценкаНаСкладе".
//
Процедура ПереоценкаНаСкладеЗавершенаПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)

	ОбработатьЗавершениеБизнесПроцесса();

КонецПроцедуры // ПереоценкаНаСкладеЗавершенаПриЗавершении()

// Процедура - обработчик события "ПередСозданиемЗадач" точки маршрута "ПровестиИнвентаризацию".
//
Процедура ПровестиИнвентаризациюПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса,
													ФормируемыеЗадачи,
													СтандартнаяОбработка)

	СформироватьЗадачиТочкиМаршрута(ТочкаМаршрутаБизнесПроцесса,
									ФормируемыеЗадачи,
									СтандартнаяОбработка);

КонецПроцедуры // ПровестиИнвентаризациюПередСозданиемЗадач()

// Процедура - обработчик события "ПередСозданиемЗадач" точки маршрута "НапечататьЭтикеткиЦенники".
//
Процедура НапечататьЭтикеткиЦенникиПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса,
														ФормируемыеЗадачи,
														СтандартнаяОбработка)

	СформироватьЗадачиТочкиМаршрута(ТочкаМаршрутаБизнесПроцесса,
									ФормируемыеЗадачи,
									СтандартнаяОбработка);

КонецПроцедуры // НапечататьЭтикеткиЦенникиПередСозданиемЗадач()

// Процедура - обработчик события "ПередСозданиемЗадач" точки маршрута "УстановитьНовыеЦены".
//
Процедура УстановитьНовыеЦеныПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса,
												 ФормируемыеЗадачи,
												 СтандартнаяОбработка)

	СформироватьЗадачиТочкиМаршрута(ТочкаМаршрутаБизнесПроцесса,
									ФормируемыеЗадачи,
									СтандартнаяОбработка);

КонецПроцедуры // УстановитьНовыеЦеныПередСозданиемЗадач()

// Процедура - обработчик события "ПередСтартом" точки маршрута "НачатьПереоценкуНаСкладе".
//
Процедура НачатьПереоценкуНаСкладеПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)

	ПередСтартомБизнесПроцесса(Отказ);

КонецПроцедуры // НачатьПереоценкуНаСкладеПередСтартом()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА
//

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)

	Инициатор      = Справочники.Пользователи.ПустаяСсылка();
	ДатаЗавершения = Дата(1,1,1);
	ДатаСтарта     = Дата(1,1,1);
	ЗавершенПринудительно = Ложь;

КонецПроцедуры // ПриКопировании()


