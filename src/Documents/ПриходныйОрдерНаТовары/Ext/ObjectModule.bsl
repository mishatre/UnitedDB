Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьПриходныйОрдерНаТовары и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиПриходногоОрдераНаТовары() Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Артикул");
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов",  "Код");
		ТекстКодАртикул = "Код";
	Иначе
		ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "");
		ТекстКодАртикул = "Код";
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ВыводитьКоличествоМест", Товары.Итог("КоличествоМест") > 0); 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Контрагент,
	|	Организация,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Приходный ордер на товары"));
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ПредставлениеКонтрагента);
	ПараметрыПечати.Вставить("Поставщик", Шапка.Контрагент);

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ПредставлениеОрганизации);
	ПараметрыПечати.Вставить("Получатель", Шапка.Организация);
	
	Позиции = Новый Массив;
	
	Ном           = 0;

	// Товар
	Пока ВыборкаСтрокТовары.Следующий() Цикл		
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		

		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);
		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));
		ПараметрыПозиции.Вставить("КоличествоМест", ВыборкаСтрокТовары.КоличествоМест);
		ПараметрыПозиции.Вставить("ЕдиницаИзмеренияМест", ВыборкаСтрокТовары.ЕдиницаИзмеренияМест);
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТовары.КодАртикул);
		КонецЕсли;
		
		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);
	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТара.Номенклатура);		
		
		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);
		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТара.Товар + " (возвратная тара)");
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТара.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТара.ЕдиницаИзмерения);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТара.КодАртикул);
		КонецЕсли;
		
		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли
		
		Позиции.Добавить(ПараметрыПозиции);
	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ВыборкаСтрокТовары.Количество());
	
	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли
	
	Возврат ПараметрыПечати;
	
КонецФункции //ПолучитьДанныеДляПечатиПриходногоОрдераНаТовары()

#Если Клиент Тогда

// Функция осуществляет запись в RFID метки.
//
// Параметры
//  Нет
//
Процедура ЗаписатьВRFIDМетки()

	ЗаполнениеДокументов.ЗаписатьRFIDМеткиИзДокумента(Ссылка);

КонецПроцедуры // ЗаписатьВRFIDМетки()

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);

КонецПроцедуры // ПечататьЭтикетки()

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПриходныйОрдерНаТовары()

	ПараметрыПечати = ПолучитьДанныеДляПечатиПриходногоОрдераНаТовары();

	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если ПараметрыПечати.ВыводитьКоличествоМест Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = ПараметрыПечати.ИмяКолонкиКодов;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	// Товар
	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл	

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);	
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПриходныйОрдерНаТовары()

// Функция формирует табличный документ унифицированной формы ТОРГ-4
// "Акт о приемке товара, поступившего без счета поставщика"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ТОРГ-4
//
Функция ПечатьТОРГ4()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	Организация                         КАК ЮрФизЛицо,
	|	Организация                         КАК Руководители,
	|	Контрагент,
	|	Контрагент                          КАК Поставщик,
	|	Контрагент                          КАК Грузоотправитель,
	|	Подразделение.Представление         КАК ПредставлениеПодразделения,
	|	Подразделение,
	|	Склад                               КАК МестоПриемки,
	|	Товары.(
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|		Номенклатура,
	|		КоличествоМест,
	|		Количество КАК КоличествоШтук,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Коэффициент / Коэффициент КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|		Номенклатура,
	|		0          КАК КоличествоМест,
	|		Количество КАК КоличествоШтук,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	Макет = ПолучитьОбщийМакет("ТОРГ4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_ТОРГ4";

	// Выводим шапку накладной

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,  Шапка.ДатаДокумента);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);

	Если Шапка.Контрагент <> NULL Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПоставщикПоОКПО               = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакета.Параметры.ОписаниеПоставщика            = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КонецЕсли;

	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО    = СведенияОПокупателе.КодПоОКПО;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя      = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 20;
	СтрокПодвала    = 7;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество() + ВыборкаСтрокТара.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМестПоСтранице        = 0;
	ИтогоШтукПоСтранице        = 0;
	ИтогоМассаБруттоПоСтранице = 0;
	ИтогоМассаНеттоПоСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест        = 0;
	ИтогоШтук        = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ВыборкаСтрокТовары       = Шапка.Товары.Выбрать();
	ОбластьМакета            = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице  = Макет.ПолучитьОбласть("ИтогиПоСтранице");

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМестПоСтранице        = 0;
			ИтогоШтукПоСтранице        = 0;
			ИтогоМассаБруттоПоСтранице = 0;
			ИтогоМассаНеттоПоСтранице  = 0;
			ИтогоСтоимостьПоСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогоМестПоСтранице        = ИтогоМестПоСтранице        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
		ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + 0;

		// Обновим итогов по документу
		ИтогоМест        = ИтогоМест        + ВыборкаСтрокТовары.КоличествоМест;
		ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТовары.КоличествоШтук;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;

	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоМестПоСтранице        = 0;
			ИтогоШтукПоСтранице        = 0;
			ИтогоМассаБруттоПоСтранице = 0;
			ИтогоМассаНеттоПоСтранице  = 0;
			ИтогоСтоимостьПоСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогоМестПоСтранице        = ИтогоМестПоСтранице        + ВыборкаСтрокТара.КоличествоМест;
		ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТара.КоличествоШтук;
		ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
		ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + 0;

		// Обновим итогов по документу
		ИтогоМест        = ИтогоМест        + ВыборкаСтрокТара.КоличествоМест;
		ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТара.КоличествоШтук;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в общем
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогоШтук        = ИтогоШтук;
	ОбластьМакета.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто  = ИтогоМассаНетто;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" Тогда

		ТабДокумент = ПечатьПриходныйОрдерНаТовары();
	ИначеЕсли ИмяМакета = "ТОРГ4" тогда

		// Унифицированная форма ТОРГ-4
		ТабДокумент = ПечатьТОРГ4();
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ИмяМакета = "Этикетки" Тогда
		ПечататьЭтикетки();
		Возврат;
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Истина);
	ИначеЕсли ИмяМакета = "ЗаписьВRFIDМетки" Тогда
		ЗаписатьВRFIDМетки();
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Накладная", "Приходный ордер на товары");
	СтруктураМакетов.Вставить("ТОРГ4", "ТОРГ-4 (Акт о приемке товара без счета поставщика)");
	СтруктураМакетов.Вставить("Бланк", "Бланк товарного наполнения");
	СтруктураМакетов.Вставить("Ценники", "Ценники на товары");
	СтруктураМакетов.Вставить("Этикетки", "Этикетки");
	СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");
	СтруктураМакетов.Вставить("ЗаписьВRFIDМетки", "Запись в RFID метки");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		ИмяТаблицы = "ЗаказПоставщику.Товары";
		Запрос.УстановитьПараметр("СтатусТара", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.Цена,
		|	ЗаказыПоставщикамОстатки.СтавкаНДС,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток * ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЗаказыПоставщикамОстатки.ЕдиницаИзмерения.Коэффициент КАК Количество,
		|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения,
		|	ЗаказыПоставщикамОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
		|		ЗаказПоставщику = &ДокументОснование
		|		    И СтатусПартии <>&СтатусТара) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
		|	И ЗаказыПоставщикамОстатки.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);

			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		ИмяТаблицы = "СчетНаОплатуПоставщика.Товары";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕдиницаИзмерения,
		|	ЕдиницаИзмеренияМест,
		|	Количество,
		|	КоличествоМест,
		|	Коэффициент,
		|	Номенклатура, 
		|	ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
			СтрокаТабличнойЧасти.КоличествоМест             = Выборка.КоличествоМест;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		ИмяТаблицы = "РеализацияТоваровУслуг.Товары";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕдиницаИзмерения,
		|	ЕдиницаИзмеренияМест,
		|	КоличествоМест,
		|	Количество,
		|	Коэффициент,
		|	Номенклатура,
		|	СерияНоменклатуры,
		|	ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.КоличествоМест             = Выборка.КоличествоМест;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;

		КонецЦикла;

	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
		Запрос.УстановитьПараметр("Склад",        Склад);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура                                     КАК Номенклатура,
		|	Остатки.Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
		|	Остатки.СерияНоменклатуры                                КАК СерияНоменклатуры,
		|	Остатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
		|	Остатки.Качество                                         КАК Качество,
		|	Остатки.ДокументРезерва                                  КАК ДокументРезерва,
		|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
		|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
		|	Остатки.КоличествоОстаток                                КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
		|                                                        И СтатусПартии = &СтатусПартии
		|                                                        И Склад = &Склад) КАК Остатки
		|";
		
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			Количество = Выборка.КоличествоОстаток;
			Если Количество = 0 ИЛИ Количество = NULL Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество                 = - Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;
			СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		КонецЦикла; // Выборка.Следующий()

	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("Склад",        Склад);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ДокументРезерва,
		|	Остатки.КоличествоОстаток             КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
		|                                                       И Склад = &Склад
		|                                                       И СтатусПартии = &СтатусПартии) КАК Остатки
		|";

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Количество = Выборка.КоличествоОстаток;

			Если Количество = 0 ИЛИ Количество = NULL Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = - Количество;
			СтрокаТабличнойЧасти.ДокументРезерва = Выборка.ДокументРезерва;
		КонецЦикла; // Выборка.Следующий()
	Иначе

		ИмяТаблицы = СокрЛП(ДокументОснование.Метаданные().Имя) + ".ВозвратнаяТара";

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Количество,
		|	Номенклатура
		|ИЗ
		|	Документ." + ИмяТаблицы + "
		|
		|ГДЕ
		|	Ссылка = &ДокументОснование
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

			СтрокаТабличнойЧасти.Номенклатура= Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество  = Выборка.Количество;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  ЭтоНеТара       - булево, признак, определяющий делается ли движение в данный момент по таре. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаТЧ, ТаблицаДвижений, ЭтоНеТара)

	ТаблицаТЧ.Индексы.Добавить("НомерСтроки");
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаДвижений.Склад                 = Склад;
		СтрокаДвижений.ДокументОприходования = Ссылка;
		СтрокаДвижений.СтатусПартии          = Перечисления.СтатусыПартийТоваров.ПоОрдеру;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		СтрокаДвижений.Заказ = Неопределено; // Заказ неизвестен

		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если ЭтоНеТара
		   И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Склад, Организация");

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда
		СтруктураОбязательныхПолей.Вставить("ФизЛицо");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		СтруктураОбязательныхПолей.Вставить("ДокументПеремещения");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть оформлен на НТТ!", Отказ, Заголовок);
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		Если СтруктураШапкиДокумента.Склад <> СтруктураШапкиДокумента.СкладПолучатель Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Склад документа должен соответствовать складу-получателю документа перемещения!", Отказ, Заголовок);
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Качество");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Вызовем общую процедуру для проверки проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре,
	Отказ, Заголовок);


	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	НаборДвижений = ?(СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный, Движения.ТоварыВРознице, Движения.ТоварыНаСкладах);

	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
	
		// ТОВАРЫ
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);

		// Проверка наличия продажных цен на приходуемый товар.
		УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Отказ, Заголовок);
		
	КонецЕсли;

	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
		Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;	   
	Если НЕ Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
			
		ДокПеремещения = ?(ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение,   ДокументПеремещения, Ссылка);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПолучения", ДокПеремещения);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",             Склад);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",          Справочники.Качество.Новый,                       "ТаблицаПоТаре");
		Если БезПраваПродажи Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
		
	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
		Если НЕ Отказ Тогда
			//если в перемещении внутренний заказ указан в шапке - этот заказ уже считается выполненным, под него не надо резервировать
			Если Не ЗначениеЗаполнено(ДокументПеремещения.ВнутреннийЗаказ) Тогда
				ТаблицаПоТоварамРезерв = ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах(ТаблицаПоТоварам);
				ТаблицаПоТареРезерв    = ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах(ТаблицаПоТаре);
				
				Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);

					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
		
		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			// Для резервов по ордеру надо сделать приход по регистру "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам(ТаблицаПоТаре);
				
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
					
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        Склад);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
					
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	Если (ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.Перемещение
	 Или СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов)
	   И СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);

		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
				
		ЗначСклад = ?(СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов, Склад, Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       ЗначСклад);
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;

	// Если товары можно продавать приходуем партии в управленческом учете со статусом "По ордеру"
	Если НЕ БезПраваПродажи Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя Тогда
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ПартииТоваровНаСкладах, СтруктТаблицДокумента);
							
				// Недостающие поля.
				ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаПоТоварам, ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Истина);
				ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаПоТаре,    ТаблицыДанныхДокумента["ТаблицаПоТаре"], Ложь);
					
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
							
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Если это приход без права продажи, то надо сначала зарезервировать товар
	Если БезПраваПродажи Тогда
	
		Если НЕ Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
							
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
		
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		
		// Если партии были оприходованы с правом перепродажи, то нужно списывать партии
		Если НЕ БезПраваПродажи Тогда
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
			ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);
			
			УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
			
			Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
				
			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// Выполняет необходимые действия при изменении реквизита ДокументПеремещения
//
Процедура ПриИзмененииДокументаПеремещения() Экспорт

	Если ЗначениеЗаполнено(ДокументПеремещения) Тогда
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = ДокументПеремещения.Организация;
			ПриИзмененииОрганизации();
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = ДокументПеремещения.СкладПолучатель;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииДокументаПеремещения()

// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого
//
Процедура ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт

	#Если Клиент Или ВнешнееСоединение Тогда
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Покупка", ПараметрОбъектКопирования, ПараметрОснование);
	#КонецЕсли

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
	КонецЕсли;

КонецПроцедуры // ИнициализироватьНовыйДокумент()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика;

		// Заполним табличную часть "Товары" по заказу или счету поставщика, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя;

		// Заполним табличную часть "Товары" по реализации, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
	
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации         = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение;
		Склад               = Основание.СкладПолучатель;
		ДокументПеремещения = Основание.Ссылка;

		// Заполним табличную часть "Товары" по реализации, скопировав состав.
		ЗаполнитьТоварыПоОснованию(Основание);
		ЗаполнитьВозвратнуюТаруПоОснованию(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	Иначе
		ДокументПеремещения = Неопределено;
		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары, Истина);
	КонецЕсли;
	
	Для каждого СтрокаТоваров ИЗ Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.ДокументРезерва) 
		   И СтрокаТоваров.ДокументРезерва <> Неопределено Тогда
		   СтрокаТоваров.ДокументРезерва = Неопределено;
	  	КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТары ИЗ ВозвратнаяТара Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТары.ДокументРезерва) 
		   И СтрокаТары.ДокументРезерва <> Неопределено Тогда
		   СтрокаТары.ДокументРезерва = Неопределено;
	  	КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",           "ВалютаУправленческогоУчета",                 "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",               "ВидСклада",                                  "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",         "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПеремещения", "СкладПолучатель",                            "СкладПолучатель");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПеремещения" , "СкладОтправитель",                          "СкладОтправитель");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",     "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",     "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"               , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                 , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры" , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"          , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям", "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Качество"                   , "Качество");
	СтруктураПолей.Вставить("Услуга"                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                      , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                   , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"      , "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ДокументРезерва"            , "ДокументРезерва");
	СтруктураПолей.Вставить("Склад"                      , "Ссылка.Склад");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     , "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения)
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Удалим строки с документами резерва по ордерам
	ТаблицаПоТоварамКопия = ТаблицаПоТоварам.Скопировать();
	Инд=0;
	Пока Инд<ТаблицаПоТоварамКопия.Количество() Цикл
		Если ТаблицаПоТоварамКопия[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварамКопия.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамКопия, ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОтправитель,"Склад");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ОсновнойДокумент");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
	
	// Приходный ордер отражается в тех, учетах, в которых ДокументПеремещения, или только в управленческом
	УпрУчет = Ложь;
	БухУчет = Ложь;
	НалУчет = Ложь;
	
	Если Не ЗначениеЗаполнено(ДокументПеремещения) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
		УпрУчет = Истина;
	Иначе
		
		МД = Метаданные.НайтиПоТипу(ТипЗнч(ДокументПеремещения));
		ТекстПризнакиУчета = "";
		Если МД.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВУправленческомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВУправленческомУчете";
		КонецЕсли;
		Если МД.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВБухгалтерскомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВБухгалтерскомУчете";
		КонецЕсли;
		Если МД.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВНалоговомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВНалоговомУчете";
		КонецЕсли;
		
		Запрос = Новый Запрос("Выбрать "+Сред(ТекстПризнакиУчета, 2)+" ИЗ Документ."+МД.Имя+" ГДЕ Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДокументПеремещения);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Выборка.ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(Выборка.ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(Выборка.ОтражатьВБухгалтерскомУчете,"ОтражатьВНалоговомУчете");
			УпрУчет = Выборка.ОтражатьВУправленческомУчете;
			БухУчет = Выборка.ОтражатьВБухгалтерскомУчете;
			НалУчет = Выборка.ОтражатьВНалоговомУчете;
		КонецЕсли;
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОтправитель,"Склад");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДокументПеремещения,"ОсновнойДокумент");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ТаблицаДвижений.ЗаполнитьЗначения(УпрУчет,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(БухУчет,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(НалУчет,"ОтражатьВНалоговомУчете");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
	Если ТаблицаПоТоварамКопия.Количество() + ТаблицаПоТаре.Количество() > 0 тогда
		
		// Зарегистрируем в последовательности УУ
		Если УпрУчет тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = Дата;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары

// Функция удаляет из исходной таблицы строки не требующие резерва по ордеру
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамКПолучению.Колонки.ДокументРезерва.Имя = "ДокументПолучения";
	
	Возврат ТаблицаПоТоварамКПолучению;

КонецФункции // ПодготовитьТаблицуДляТоварамВРезервеПоОрдерам()

// Функция удаляет из исходной таблицы строки не требующие резерва на складах
// Возвращается КОПИЯ исходной таблицы
//
Функция ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
			 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
			   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // ПодготовитьТаблицуДляДвиженийПоТоварамВРезервеНаСкладах()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
