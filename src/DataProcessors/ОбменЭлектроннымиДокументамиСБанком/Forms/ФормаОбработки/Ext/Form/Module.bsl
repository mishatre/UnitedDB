
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяОбменЭДСБанками = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																				"ИспользоватьОбменЭДСБанками");
	Если НЕ ИспользуетсяОбменЭДСБанками Тогда
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																				"РаботаСБанками");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Элементы.СтраницыВидыБанковскихСистем.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Не ПустаяСтрока(Параметры.ОткрытьСтраницу) Тогда
		Элементы.СтраницыОтправкаПолучение.ТекущаяСтраница = Элементы[Параметры.ОткрытьСтраницу];
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПараметры();
	ЗаполнитьТабличныеЧасти();
	ПереключитьСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Элементы.Выписки.Обновить();
	Если Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаСбербанк Тогда
		Элементы.ПлатежныеПорученияВОбработке.Обновить();
		ОбновитьЭлектронныеДокументыНаОтправку(Объект.СоглашениеЭД, ПлатежныеПорученияКОтправке);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеЭДПриИзменении(Элемент)
	
	ЗаполнитьПараметры();
	Модифицированность = Ложь;
	ПереключитьСтраницы();
	ЗаполнитьТабличныеЧасти()
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Модифицированность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗапроситьВыписку(Команда)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		СообщениеТекст = Нстр("ru = 'Необходимо выбрать период запроса'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "Период");
		Возврат;
	КонецЕсли;
	
	ДатаОкончания = Период.ДатаОкончания;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Период.ДатаНачала > ТекущаяДатаСеанса ИЛИ ДатаОкончания > КонецДня(ТекущаяДатаСеанса) Тогда
		СообщениеТекст = Нстр("ru = 'Период запроса указан неверно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "Период");
		Возврат;
	КонецЕсли;
	
	Если ДатаОкончания = КонецДня(ТекущаяДатаСеанса) Тогда
		ДатаОкончания = ТекущаяДатаСеанса;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиент.ПолучитьВыпискуБанка(
		Объект.СоглашениеЭД, Период.ДатаНачала, ДатаОкончания, Элементы.Выписки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязи(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ПроверитьНаличиеСвязиСБанком(Объект.СоглашениеЭД, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыделенные(Команда)
		
	МассивСтрок = Элементы.ПлатежныеПорученияКОтправке.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ПлатежныеПорученияКОтправке.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выгружать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсехСтрок(Команда)
	
	Для Каждого ТекДокумент Из ПлатежныеПорученияКОтправке Цикл
		Если ТекДокумент.Выгружать Тогда
			ТекДокумент.Выгружать = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтмеченные(Команда)

	МассивОтправки = Новый Массив();
	Для каждого строка из ПлатежныеПорученияКОтправке Цикл
		Если Строка.Выгружать Тогда
			МассивОтправки.Добавить(Строка.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	КолОтправленных = 0;
	Если МассивОтправки.Количество() > 0 Тогда
		ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПлатежныеПорученияСбербанк(МассивОтправки,
																				КолОтправленных,
																				Объект.СоглашениеЭД);
	КонецЕсли;
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	
	Если КолОтправленных > 0 Тогда
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															НСтр("ru = 'Отправлено документов: (%1)'"),
															КолОтправленных);
		ПлатежноеПоручение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение");
		ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(Объект.СоглашениеЭД, ПлатежноеПоручение);
		
	Иначе
		ТекстОповещения = НСтр("ru = 'Отправленных пакетов нет'");
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ОбновитьЭлектронныеДокументыНаОтправку(Объект.СоглашениеЭД, ПлатежныеПорученияКОтправке);
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьЭлектронныеДокументыНаОтправку(Объект.СоглашениеЭД, ПлатежныеПорученияКОтправке);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыписку(Команда)
	
	КаналСоздан = ложь;
	ЭлектронныеДокументыСлужебныйКлиент.УстановитьВиртуальныйКанал(Объект.СоглашениеЭД, КаналСоздан);
	Если НЕ КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьЗапросНаНочныеВыписки(Объект.СоглашениеЭД);
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки"));
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка"));
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки"));
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьЗапросНаПолучениеГотовыхВыписок(Объект.СоглашениеЭД);
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(
												Объект.СоглашениеЭД,
												ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка"));
	Элементы.ВыпискаБанкаСбербанк.Обновить();
	
	ПоследнийЭД = ПоследнийЭД(Объект.СоглашениеЭД);
	
	Если ЗначениеЗаполнено(ПоследнийЭД) ТОгда
		Элементы.ВыпискаБанкаСбербанк.ТекущаяСтрока = ПоследнийЭД;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСтатусы(Команда)
	
	КаналСоздан = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.УстановитьВиртуальныйКанал(Объект.СоглашениеЭД, КаналСоздан);
	Если НЕ КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ПлатежноеПоручение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение");
	
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьРезультатыОбработкиЗапросов(Объект.СоглашениеЭД,    ПлатежноеПоручение);
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьСостоянияЭлектронныхДокументов(Объект.СоглашениеЭД, ПлатежноеПоручение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьВыпискуСбербанк(Команда)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		СообщениеТекст = НСтр("ru = 'Необходимо выбрать период запроса'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "Период");
		Возврат;
	КонецЕсли;
		
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода должна быть меньше даты окончания'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "Период");
		Возврат;
	КонецЕсли;
	
	ЭД = Неопределено;
	
	ЭлектронныеДокументыСлужебныйКлиент.ЗапроситьВыпискуСбербанк(
												Объект.СоглашениеЭД,
												Объект.Организация,
												Период.ДатаНачала,
												Период.ДатаОкончания,
												,
												ЭД);
	
	Элементы.ВыпискаБанкаСбербанк.Обновить();
	
	Если ЗначениеЗаполнено(ЭД) ТОгда
		Элементы.ВыпискаБанкаСбербанк.ТекущаяСтрока = ЭД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ВыборСтандартногоПериода(ПериодОтбора);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ВыпискаБанкаСбербанк.Отбор, "ДатаСоздания");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ВыпискаБанкаСбербанк.Отбор,
			"ДатаСоздания",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			ПериодОтбора.ДатаНачала,
			,
			ЗначениеЗаполнено(ПериодОтбора.ДатаНачала));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ВыпискаБанкаСбербанк.Отбор,
			"ДатаСоздания",
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
			КонецДня(ПериодОтбора.ДатаОкончания),
			,
			ЗначениеЗаполнено(ПериодОтбора.ДатаОкончания));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ВЫПИСКИ>

&НаКлиенте
Процедура ВыпискиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Элементы.Выписки.ТекущаяСтрока = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыборСтандартногоПериода(Период)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	Если Диалог.Редактировать() Тогда
		Период = Диалог.Период;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСтраницы()
	
	Если ЗначениеЗаполнено(Объект.СоглашениеЭД) Тогда
		ПрограммаБанка =  ПрограммаБанка(Объект.СоглашениеЭД);
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаСбербанк;
			
			#Если НЕ (ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение) Тогда
				
				Элементы.СтраницыОтправкаПолучение.ТекущаяСтраница    = Элементы.Ошибка;
				Элементы.Ошибка.Видимость                             = Истина;
				Элементы.СтраницыОтправкаПолучение.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
				
			#КонецЕсли
			
		Иначе
			Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаТиповой;
		КонецЕсли;
	Иначе
		Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаТиповой;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметры()
	
	Если ЗначениеЗаполнено(Объект.СоглашениеЭД) Тогда
		РеквизитыСоглашения = РеквизитыСоглашения(Объект.СоглашениеЭД);
		Объект.Банк         = РеквизитыСоглашения.Контрагент;
		Объект.Организация  = РеквизитыСоглашения.Организация;
		ПрограммаБанка      = РеквизитыСоглашения.ПрограммаБанка;
	Иначе
		Объект.Банк        = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ПрограммаБанка     = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ПустаяСсылка");
	КонецЕсли;
	
	ВыпискиБанка.Параметры.УстановитьЗначениеПараметра("СоглашениеЭД", Объект.СоглашениеЭД);
	ВыпискаБанкаСбербанк.Параметры.УстановитьЗначениеПараметра("СоглашениеЭД", Объект.СоглашениеЭД);
	ПлатежныеПорученияВОбработке.Параметры.УстановитьЗначениеПараметра("СоглашениеЭД", Объект.СоглашениеЭД);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрограммаБанка(СоглашениеЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПрограммаБанка");
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыСоглашения(СоглашениеЭД)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеЭД, "Организация, Контрагент, ПрограммаБанка");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьЭлектронныеДокументыНаОтправку(Знач СоглашениеЭД, ПлатежныеПорученияКОтправке)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияЭД.СсылкаНаОбъект.Контрагент КАК Получатель,
	               |	СостоянияЭД.СсылкаНаОбъект.Номер КАК Номер,
	               |	СостоянияЭД.СсылкаНаОбъект.Дата КАК Дата,
	               |	СостоянияЭД.СсылкаНаОбъект.СуммаДокумента КАК СуммаДокумента,
	               |	СостоянияЭД.СсылкаНаОбъект.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	СостоянияЭД.СсылкаНаОбъект.СчетКонтрагента КАК СчетПолучателя,
	               |	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	СостоянияЭД.СсылкаНаОбъект.СчетОрганизации КАК СчетОрганизации
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |ГДЕ
	               |	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	               |	И СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД = &СоглашениеЭД
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	ПлатежныеПорученияКОтправке.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеЧасти()
	
	Если Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаСбербанк Тогда
		ОбновитьЭлектронныеДокументыНаОтправку(Объект.СоглашениеЭД, ПлатежныеПорученияКОтправке);
	КонецЕсли;
	УстановитьДоступностьЭлементов();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()

	Элементы.СтраницыВидыБанковскихСистем.Доступность = ЗначениеЗаполнено(Объект.СоглашениеЭД);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследнийЭД(СоглашениеЭД)
	
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
	|	И (ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
	|			ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ВыпискаБанка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭлектронныйДокумент;
	КонецЕсли
	
КонецФункции

