
Функция ЕстьДоступныеПраваДляЗапускаКонфигурации() Экспорт

	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Пользователь");
	
КонецФункции

Процедура УстановитьПараметрыСеанса() Экспорт

	УстановитьПараметрыМеханизмаОграниченияПравДоступа();	
	
	// Определим типы для поиска данных в документе регистрации
	// типы определим по регистру сведений ОбъектыДоступаДокументов
	МассивТиповИзмерения = Метаданные.РегистрыСведений.ОбъектыДоступаДокументов.Измерения.ОбъектДоступа.Тип.Типы();
	СоответствиеОбъектов = Новый Соответствие;
	СоответствиеОбъектов.Вставить("ТипыОбъектовДоступа", МассивТиповИзмерения);
	ПараметрыСеанса.МетаданныеДокументовРегистрацииОбъектовДоступа = Новый ХранилищеЗначения(СоответствиеОбъектов);
	
КонецПроцедуры

Процедура УстановитьПараметрыМеханизмаОграниченияПравДоступа() Экспорт
	
	ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей = Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Получить();
		
КонецПроцедуры

Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт
	
    Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
    	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
        
    	Возврат;
    КонецЕсли;
    
    ТекстЗапросаПоОрганизациям = "
    |ВЫБРАТЬ
    |       Значение(Справочник.Организации.ПустаяСсылка) как Организация
    |   ОБЪЕДИНИТЬ
    |   ВЫБРАТЬ
    |       Организации.Ссылка
    |   ИЗ 
    |       Справочник.Организации КАК Организации ";
	
    ТекстЗапросаПоОбщейДатеЗапретаРедактирования = "ВЫБРАТЬ
                                                   |    ЕстьNull(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений, ДатаВремя(1,1,1)) КАК ОбщаяДата
                                                   |ИЗ
                                                   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
                                                   |ГДЕ
                                                   |    ГраницыЗапретаИзмененияДанных.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
                                                   |    И ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО";
    ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
                                       |    Границы.Организация КАК Организация,
                                       |    Границы.Пользователь КАК Пользователь,
                                       |    ВЫБОР
                                       |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |            ТОГДА 3
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
                                       |                И ГруппыПользователей.Пользователь = &Пользователь
                                       |            ТОГДА 2
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
                                       |                И Границы.Пользователь = &Пользователь
                                       |            ТОГДА 1
                                       |    КОНЕЦ КАК Приоритет,
                                       |    Границы.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений
                                       |ИЗ
                                       |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                                       |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователей
                                       |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
                   |    Организации.Организация как Организация,
                   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ОбщаяДатаЗапрета.ОбщаяДата)) КАК ГраницаЗапретаИзменений,                   
                   |    ОбщаяДатаЗапрета.ОбщаяДата как ОбщаяДата
                   |ИЗ
                   | (" + ТекстЗапросаПоОрганизациям+") Как Организации  
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |            Границы.Организация КАК Организация,
                   |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
                   |        ИЗ
                   |            РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
                   |                ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
                   |                ПО Границы.Организация = Приоритеты.Организация
                   |                    И Границы.Пользователь = Приоритеты.Пользователь
                   |        
                   |        СГРУППИРОВАТЬ ПО
                   |            Границы.Организация) КАК ТаблицаПриоритетов
                   |        ПО ТаблицаПриоритетов.Организация = Организации.Организация
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
                   |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
                   |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет,
                   | (" + ТекстЗапросаПоОбщейДатеЗапретаРедактирования + ") Как ОбщаяДатаЗапрета
                   |СГРУППИРОВАТЬ ПО
                   |    Организации.Организация, ОбщаяДата";
	
	Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
    
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
        ОбщаяДатаЗапрета = Неопределено;
		Пока Выборка.Следующий() Цикл
			Соответствие[Выборка.Организация] = ?(ЗначениеЗаполнено(Выборка.ГраницаЗапретаИзменений), КонецДня(Выборка.ГраницаЗапретаИзменений), Выборка.ГраницаЗапретаИзменений);
            Если ОбщаяДатаЗапрета = Неопределено Тогда
                ОбщаяДатаЗапрета = ?(ЗначениеЗаполнено(Выборка.ОбщаяДата), КонецДня(Выборка.ОбщаяДата), Выборка.ОбщаяДата);
            КонецЕсли;            
        КонецЦикла;
        
        Если НЕ ОбщаяДатаЗапрета = Неопределено Тогда
            Соответствие["ОбщаяДатаЗапретаРедактирования"] = ОбщаяДатаЗапрета;
        КонецЕсли;
        
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));
	
КонецПроцедуры

Функция ВыполнитьУстановкуПериодаИтогов(СписокРегистровКРасчету, ПредпочтительнаяДатаРасчетаИтогов) Экспорт
	
	СписокРассчитанных = Новый Массив;
	Для Каждого РегистрИзСписка Из СписокРегистровКРасчету Цикл
		ПозицияТочки = Найти(РегистрИзСписка, ".");
		ТипРегистра = Лев(РегистрИзСписка, ПозицияТочки - 1);
		ИмяРегистра = Сред(РегистрИзСписка, ПозицияТочки + 1);
		Если ТипРегистра = "РегистрНакопления" Тогда
			РегистрМенеджер = РегистрыНакопления[ИмяРегистра];
			МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
			ТипРегистраСтрокой = " накопления ";
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			РегистрМенеджер = РегистрыБухгалтерии[ИмяРегистра];
			МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			ТипРегистраСтрокой = " бухгалтерии "
		КонецЕсли;
						
		// повторная проверка прав нужна, так как процедура экспортная
		Если Не ПравоДоступа("УправлениеИтогами", МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;			
		
		РегистрМенеджер.УстановитьПериодРассчитанныхИтогов(ПредпочтительнаяДатаРасчетаИтогов);
		СписокРассчитанных.Добавить(ТипРегистраСтрокой + """" + МетаданныеРегистра.Синоним + """");
		
	КонецЦикла;
	
	Возврат СписокРассчитанных;

	
КонецФункции

Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Процедура ЗаписатьНаборЗаписейНаСервере(ПолноеИмяРегистра, Регистратор, ТаблицаДвижений = Неопределено) Экспорт	
	
	// Определим тип регистра
	ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
	ТипРегистра = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
	ИмяРегистра = СокрП(Сред(ПолноеИмяРегистра, ПозицияТочки + 1));
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
		Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();  			
	КонецЕсли;

	Набор.Отбор.Регистратор.Установить(Регистратор);
	Если ТаблицаДвижений <> Неопределено Тогда
		Набор.мТаблицаДвижений = ТаблицаДвижений;
		ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Набор);
	КонецЕсли;
	Набор.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПРИ ЗАПИСИ НОМЕНКЛАТУРЫ

// Функция проверяет, существуют ли ссылки на единицу измерения в движениях регистров накопления.
// Если есть - нельзя менять коэффицент
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция Номенклатура_СуществуютСсылки(Ссылка, СуществуютСсылки) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано
	КонецЕсли;
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ТекущийВладелец", Ссылка);

	ТипНоменклатура = Тип("СправочникСсылка.Номенклатура");

	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипНоменклатура) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	1 КАК Результат
				|ИЗ
				|	РегистрНакопления." + РегистрНакопления.Имя + " КАК Рег
				|ГДЕ
				|	Рег." + РеквизитРегистра.Имя + " = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции //  СуществуютСсылки()

// Функция проверяет, существуют ли ссылки на серию  в движениях регистров накопления.
//
// Параметры:
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция Номенклатура_СуществуютСсылкиНаСерииВРегистрахНакопления(Ссылка) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);

	ТипСерия = Тип("СправочникСсылка.СерииНоменклатуры");
	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипСерия) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	1 КАК Результат
				|ИЗ
				|	РегистрНакопления." + РегистрНакопления.Имя + " КАК Рег
				|ГДЕ
				|	Рег." +РеквизитРегистра.Имя + " <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	И Рег." + РеквизитРегистра.Имя + ".Владелец = &Номенклатура
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции //СуществуютСсылкиНаСерииВРегистрахНакопления()

// Функция проверяет, существуют ли ссылки на вид номенклатуры в справочнике "Номенклатура".
// Если есть - нельзя менять коэффицент
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция ВидыНоменклатуры_СуществуютСсылкиВНоменклатуре(Ссылка, СуществуютСсылки) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры = &ТекущийЭлемент
	|";
	
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции //  СуществуютСсылки()

Функция СвойстваОбъектов_СуществуютСсылки(Свойство) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = &Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство КАК Свойство
	|ИЗ
	|	РегистрСведений.НазначенияСвойствОбъектов
	|
	|ГДЕ
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = &Свойство
	|";

	Запрос.УстановитьПараметр("Свойство", Свойство);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция Кассы_СуществуютСсылки(Касса) Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РегистрНакопления.ДенежныеСредства.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства
	|ГДЕ
	|	РегистрНакопления.ДенежныеСредства.БанковскийСчетКасса = &Касса";

	Запрос.УстановитьПараметр("Касса", Касса);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Процедура ОбработатьУстановкуВозможногоПрефиксаИнформационнойБазы(Значение) Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1 1
	               |	
	               |ИЗ
	               |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз
				   |ГДЕ
				   |	ПрефиксыИнформационныхБаз.Префикс = &Префикс";
				   
	Запрос.УстановитьПараметр("Префикс", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейРегистра = РегистрыСведений.ПрефиксыИнформационныхБаз.СоздатьНаборЗаписей();
	
	НаборЗаписейРегистра.Отбор.Префикс.Установить(Значение);
	
	СтрокаРегистра = НаборЗаписейРегистра.Добавить();
	
	СтрокаРегистра.Префикс = Значение;
		
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

// Процедура обрабатывает результат запроса узлов обмена по Организациям, Складам, Подразделениям
// Параметры:
// Итератор       - "Число"            - шаг итерации обхода результатов запросов.
// ВыборкаЗапроса - "РезультатЗапроса" - результат запроса с выбранными узлами по Организациям, Складам, Подразделениям
// Соответствие   - "Соответствие"     - Соответствие где сохраняются узлы по Организациям, Складам, Подразделениям
Процедура ПолучитьУзлыПоЗначению(Итератор, ВыборкаЗапроса, Соответствие)
	Если Итератор <= ВыборкаЗапроса.Количество() - 1 Тогда
		МассивЗанчений = Новый Массив();
		ВыборкаЗапроса.Следующий();
		Если ВыборкаЗапроса.Ссылка <> NULL Тогда
			// Ссылка равна NULL только в случае, если нет ограниченных узлов
			// по Организации, Складу, Подразделению
			// и в этом случае в значение соответствия добавляется пустой массив
			ВыборкаЗначений = ВыборкаЗапроса.Выбрать();
			Пока ВыборкаЗначений.Следующий() Цикл
				МассивЗанчений.Добавить(ВыборкаЗначений.Ссылка);
			КонецЦикла;
		КонецЕсли;
		Соответствие.Вставить(ВыборкаЗапроса.Значение, МассивЗанчений);
	КонецЕсли;
КонецПроцедуры // ПолучитьУзлыПоЗначению()

// Процедура получает узлы ограниченные на выгрузку по Организациям, Складам, Подразделениям
// Параметры:
// Все параметры исходящие, на входе равны Неопределено, на выходе инициализируются.
//
// СоответствиеУзловИОрганизаций                - Соответствие - Соответствие которое содержит список всех узлов в разрезе Организаций.
//                                                ключом является Организация, значением является массив узлов ограниченных по организации
//
// СоответствиеУзловИСкладов                    - Соответствие - Соответствие которое содержит список всех узлов в разрезе Складов.
//                                                ключом является Склад, значением является массив узлов ограниченных по складу
//
// СоответствиеУзловИПодразделений              - Соответствие - Соответствие которое содержит список всех узлов в разрезе Подразделений.
//                                                ключом является Подразделение, значением является массив узлов ограниченных по подразделению
//
// МассивУзловБезФильтраПоБухУчету              - Массив - Содержит узлы без отбора по признаку участия в бух учете.
//
// МассивУзловДлярегистрацииИзмененийДокументов - Массив - Содержит узлы для которых нужно регистрировать изменения документов
//                                                при движении по регистру "Партии товаров на складах"
Процедура ПолучитьСоответствиеУзлов(СоответствиеУзловИОрганизаций, СоответствиеУзловИСкладов, СоответствиеУзловИПодразделений, МассивУзловБезФильтраПоБухУчету, МассивУзловДлярегистрацииИзмененийДокументов, ИмяОбменаБП = "")
	Запрос = Новый Запрос();
	Запрос.Текст = "
	// Временная таблица Организации
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	// 0
	|ПОМЕСТИТЬ ВременнаяВсеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	// Временная таблица Подразделения
	|ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Ссылка
	// 1
	|ПОМЕСТИТЬ ВременнаяВсеПодразделения
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) КАК Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	// Временная таблица Склады
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	// 2
	|ПОМЕСТИТЬ ВременнаяВсеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	// Узлы по ОРГАНИЗАЦИЯМ
	// 3
	|ВЫБРАТЬ
	|	ВременнаяВсеОрганизации.Ссылка КАК Значение,
	|	УзлыПоОрганизации.Ссылка КАК Ссылка
	|ИЗ
	|	ВременнаяВсеОрганизации КАК ВременнаяВсеОрганизации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписокОрганизаций.Организация КАК Значение,
	|		СписокОрганизаций.Ссылка
	|	ИЗ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + ".Организации КАК СписокОрганизаций
	|	ГДЕ
	|		СписокОрганизаций.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВременнаяВсеОрганизации.Ссылка КАК Значение,
	|		ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	|	ИЗ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + " КАК ОбменУправлениеТорговлейБухгалтерия
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВременнаяВсеОрганизации КАК ВременнаяВсеОрганизации
	|	ПО
	|		ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + ".Организации КАК СписокОрганизаций
	|	ПО
	|		СписокОрганизаций.Ссылка = ОбменУправлениеТорговлейБухгалтерия.Ссылка
	|	ГДЕ
	|		ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|		И СписокОрганизаций.Ссылка ЕСТЬ NULL
	|) КАК УзлыПоОрганизации
	|ПО
	|	УзлыПоОрганизации.Значение = ВременнаяВсеОрганизации.Ссылка
	|ИТОГИ МАКСИМУМ(Ссылка) КАК Ссылка
	|	ПО Значение
	|;
	// Узлы по ПОДРАЗДЕЛЕНИЯМ
	// 4
	|ВЫБРАТЬ
	|	ВременнаяВсеПодразделения.Ссылка КАК Значение,
	|	УзлыПоПодразделениям.Ссылка КАК Ссылка
	|ИЗ
	|	ВременнаяВсеПодразделения КАК ВременнаяВсеПодразделения
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписокПодразделений.Подразделение КАК Значение,
	|		СписокПодразделений.Ссылка
	|	ИЗ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + ".Подразделения КАК СписокПодразделений
	|	ГДЕ
	|		СписокПодразделений.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВременнаяВсеПодразделения.Ссылка КАК Значение,
	|		ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	|	ИЗ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + " КАК ОбменУправлениеТорговлейБухгалтерия
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВременнаяВсеПодразделения КАК ВременнаяВсеПодразделения
	|	ПО
	|		ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + ".Подразделения КАК СписокПодразделений
	|	ПО
	|		СписокПодразделений.Ссылка = ОбменУправлениеТорговлейБухгалтерия.Ссылка
	|	ГДЕ
	|		ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|		И СписокПодразделений.Ссылка ЕСТЬ NULL
	|) КАК УзлыПоПодразделениям
	|ПО
	|	УзлыПоПодразделениям.Значение = ВременнаяВсеПодразделения.Ссылка
	|ИТОГИ МАКСИМУМ(Ссылка) КАК Ссылка
	|	ПО Значение
	|;
	// Узлы по СКЛАДАМ
	// 5
	|ВЫБРАТЬ
	|	ВременнаяВсеСклады.Ссылка КАК Значение,
	|	УзлыПоСкладам.Ссылка КАК Ссылка
	|ИЗ
	|	ВременнаяВсеСклады КАК ВременнаяВсеСклады
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СписокСкладов.Склад КАК Значение,
	|		СписокСкладов.Ссылка
	|	ИЗ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + ".Склады КАК СписокСкладов
	|	ГДЕ
	|		СписокСкладов.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВременнаяВсеСклады.Ссылка КАК Значение,
	|		ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	|	ИЗ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + " КАК ОбменУправлениеТорговлейБухгалтерия
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВременнаяВсеСклады КАК ВременнаяВсеСклады
	|	ПО
	|		ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + ".Склады КАК СписокСкладов
	|	ПО
	|		СписокСкладов.Ссылка = ОбменУправлениеТорговлейБухгалтерия.Ссылка
	|	ГДЕ
	|		ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|		И СписокСкладов.Ссылка ЕСТЬ NULL
	|) КАК УзлыПоСкладам
	|ПО
	|	УзлыПоСкладам.Значение = ВременнаяВсеСклады.Ссылка
	|ИТОГИ МАКСИМУМ(Ссылка) КАК Ссылка
	|	ПО Значение
	|;
	// определим массив узлов без отбора по признаку участия в бух учете
	// 6
	|ВЫБРАТЬ
	|	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + " КАК ОбменУправлениеТорговлейБухгалтерия
	|ГДЕ
	|	ОбменУправлениеТорговлейБухгалтерия.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Ложь
	|	И ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|;
	// определим массив узлов для которых нужно регистрировать изменения документов
	// при движении по регистру "Партии товаров на складах"
	// 7
	|ВЫБРАТЬ
	|	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия" + ИмяОбменаБП + " КАК ОбменУправлениеТорговлейБухгалтерия
	|ГДЕ
	|	ОбменУправлениеТорговлейБухгалтерия.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Значение(Перечисление.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить)
	|	И ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизации" + ИмяОбменаБП + "
	|;
	|";
	// порядковые номера результатов запроса.
	// 3 - узлы по Организациям
	// 4 - узлы по подразделениям
	// 5 - узлы по складам
	// 6 - узлы по признаку без участия в бух. учете
	// 7 - узлы для которых нужно регистрировать изменения документов при движении по регистру "Партии товаров на складах"
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизации", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизацииКОРП", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ЭтотУзел());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаПоОрганизациям = МассивРезультатов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоПодразделениям = МассивРезультатов[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоСкладам = МассивРезультатов[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	МассивУзловБезФильтраПоБухУчету = МассивРезультатов[6].Выгрузить().ВыгрузитьКолонку("Ссылка");
	МассивУзловДлярегистрацииИзмененийДокументов = МассивРезультатов[7].Выгрузить().ВыгрузитьКолонку("Ссылка");

	КоличествоМаксимальнаяВыборка = Макс(ВыборкаПоОрганизациям.Количество(), ВыборкаПоПодразделениям.Количество(), ВыборкаПоСкладам.Количество());
	Для Итератор = 0 По КоличествоМаксимальнаяВыборка - 1 Цикл
		ПолучитьУзлыПоЗначению(Итератор, ВыборкаПоОрганизациям, СоответствиеУзловИОрганизаций);
		ПолучитьУзлыПоЗначению(Итератор, ВыборкаПоПодразделениям, СоответствиеУзловИПодразделений);
		ПолучитьУзлыПоЗначению(Итератор, ВыборкаПоСкладам, СоответствиеУзловИСкладов);
	КонецЦикла;
КонецПроцедуры // ПолучитьСоответствиеУзлов()

Процедура ОпределитьПараметрыСеансаДляОбменаДанными() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Полный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.Полный КАК Полный
	|ГДЕ
	|	Полный.Ссылка <> &ЭтотУзелПолный
	|;
	|ВЫБРАТЬ
	|	ОбменУправлениеТорговлейБухгалтерия.Ссылка                       КАК Ссылка,
	|	ОбменУправлениеТорговлейБухгалтерия.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия КАК ОбменУправлениеТорговлейБухгалтерия
	|ГДЕ
	|	ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизации
	|;
	|ВЫБРАТЬ
	|	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка,
	|	ОбменУправлениеТорговлейБухгалтерия.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП КАК ОбменУправлениеТорговлейБухгалтерия
	|ГДЕ
	|	ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзелПоОрганизацииКОРП
	|;
	|";

	Запрос.УстановитьПараметр("ЭтотУзелПолный", ПланыОбмена.Полный.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизации", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелПоОрганизацииКОРП", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ЭтотУзел());

	МассивРезультатЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапросаИспользованиеРИБ = МассивРезультатЗапроса[0];
	РезультатЗапроса = МассивРезультатЗапроса[1];
	РезультатЗапросаКОРП = МассивРезультатЗапроса[2];

	ПараметрыСеанса.ИспользованиеРИБ = НЕ РезультатЗапросаИспользованиеРИБ.Пустой();
	ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия = НЕ РезультатЗапроса.Пустой();
	ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерияКОРП = НЕ РезультатЗапросаКОРП.Пустой();

	Если ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия
		ИЛИ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерияКОРП Тогда

		ТаблицаОбменовУТБП = РезультатЗапроса.Выгрузить();
		ТаблицаОбменовУТБП.Индексы.Добавить("Ссылка");

		ТаблицаОбменовУТБПКОРП = РезультатЗапросаКОРП.Выгрузить();
		ТаблицаОбменовУТБПКОРП.Индексы.Добавить("Ссылка");

		МассивВсехУзлов = ТаблицаОбменовУТБП.ВыгрузитьКолонку("Ссылка");
		МассивВсехУзловКОРП = ТаблицаОбменовУТБПКОРП.ВыгрузитьКолонку("Ссылка");

		Если ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
			СоответствиеУзловИОрганизаций = Новый Соответствие();
			СоответствиеУзловИСкладов = Новый Соответствие();
			СоответствиеУзловИПодразделений = Новый Соответствие();
			МассивУзловБезФильтраПоБухУчету = Новый Массив();
			МассивУзловДлярегистрацииИзмененийДокументов = Новый Массив();

			ПараметрыСеанса.СоответствиеУзловИДатДляОбменаБухгалтерияТорговля = Новый ХранилищеЗначения(ТаблицаОбменовУТБП);
			ПараметрыСеанса.ВсеУзлыОбменаТорговляБухгалтерия = Новый ФиксированныйМассив(МассивВсехУзлов);
			ПолучитьСоответствиеУзлов(СоответствиеУзловИОрганизаций, СоответствиеУзловИСкладов, СоответствиеУзловИПодразделений, МассивУзловБезФильтраПоБухУчету, МассивУзловДлярегистрацииИзмененийДокументов, "");

			ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаТорговляБухгалтерия = Новый ХранилищеЗначения(СоответствиеУзловИОрганизаций);
			ПараметрыСеанса.СоответствиеСкладовИУзловОбменаТорговляБухгалтерия = Новый ХранилищеЗначения(СоответствиеУзловИСкладов);
			ПараметрыСеанса.СоответствиеПодразделенийИУзловОбменаТорговляБухгалтерия = Новый ХранилищеЗначения(СоответствиеУзловИПодразделений);
			ПараметрыСеанса.УзлыДляОбменаТорговляБухгалтерияБезОтбораПоОтражениюВБухУчете = Новый ФиксированныйМассив(МассивУзловБезФильтраПоБухУчету);
			ПараметрыСеанса.УзлыДляОбменаТорговляБухгалтерияРегистрацияДокументовПриДвиженииПартий = Новый ФиксированныйМассив(МассивУзловДлярегистрацииИзмененийДокументов);
		КонецЕсли;
		Если ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерияКОРП Тогда
			СоответствиеУзловИОрганизаций = Новый Соответствие();
			СоответствиеУзловИСкладов = Новый Соответствие();
			СоответствиеУзловИПодразделений = Новый Соответствие();
			МассивУзловБезФильтраПоБухУчету = Новый Массив();
			МассивУзловДлярегистрацииИзмененийДокументов = Новый Массив();

			ПараметрыСеанса.СоответствиеУзловИДатДляОбменаБухгалтерияКОРПТорговля = Новый ХранилищеЗначения(ТаблицаОбменовУТБПКОРП);
			ПараметрыСеанса.ВсеУзлыОбменаТорговляБухгалтерияКОРП = Новый ФиксированныйМассив(МассивВсехУзловКОРП);
			ПолучитьСоответствиеУзлов(СоответствиеУзловИОрганизаций, СоответствиеУзловИСкладов, СоответствиеУзловИПодразделений, МассивУзловБезФильтраПоБухУчету, МассивУзловДлярегистрацииИзмененийДокументов, "КОРП");

			ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаТорговляБухгалтерияКОРП = Новый ХранилищеЗначения(СоответствиеУзловИОрганизаций);
			ПараметрыСеанса.СоответствиеСкладовИУзловОбменаТорговляБухгалтерияКОРП = Новый ХранилищеЗначения(СоответствиеУзловИСкладов);
			ПараметрыСеанса.СоответствиеПодразделенийИУзловОбменаТорговляБухгалтерияКОРП = Новый ХранилищеЗначения(СоответствиеУзловИПодразделений);
			ПараметрыСеанса.УзлыДляОбменаТорговляБухгалтерияБезОтбораПоОтражениюВБухУчетеКОРП = Новый ФиксированныйМассив(МассивУзловБезФильтраПоБухУчету);
			ПараметрыСеанса.УзлыДляОбменаТорговляБухгалтерияРегистрацияДокументовПриДвиженииПартийКОРП = Новый ФиксированныйМассив(МассивУзловДлярегистрацииИзмененийДокументов);
		КонецЕсли;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменУправлениеПредприятиемУправлениеТорговлей.Ссылка,
	               |	ОбменУправлениеПредприятиемУправлениеТорговлей.ДатаНачалаВыгрузкиДокументов КАК ДатаНачалаВыгрузкиДокументов
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеПредприятиемУправлениеТорговлей КАК ОбменУправлениеПредприятиемУправлениеТорговлей
	               |ГДЕ
	               |	ОбменУправлениеПредприятиемУправлениеТорговлей.Ссылка <> &ОбменУправлениеПредприятиемУправлениеТорговлей";
				   
	Запрос.УстановитьПараметр("ОбменУправлениеПредприятиемУправлениеТорговлей", ПланыОбмена.ОбменУправлениеПредприятиемУправлениеТорговлей.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьУзлыОбменаУТУПП = НЕ РезультатЗапроса.Пустой();
	
	ПараметрыСеанса.НаличиеОбменаУТУПП = ЕстьУзлыОбменаУТУПП;
	
	Если ЕстьУзлыОбменаУТУПП Тогда
		
		ТаблицаОбменовУТУПП = РезультатЗапроса.Выгрузить();
		ТаблицаОбменовУТУПП.Индексы.Добавить("Ссылка");
		
		ПараметрыСеанса.СоответствиеУзловИДатДляОбменаУТУПП = Новый ХранилищеЗначения(ТаблицаОбменовУТУПП);
		
		МассивВсехУзлов = ПроцедурыОбменаУТУПП.ПолучитьМассивВсехУзлов();
		ПараметрыСеанса.ВсеУзлыОбменаУТУПП = Новый ФиксированныйМассив(МассивВсехУзлов);	
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Организации.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Организации КАК Организации";
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");			   
		МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
				
		СоответствиеУзловИОрганизаций = Новый Соответствие;			   
					   
		Для Каждого Организация ИЗ МассивОрганизаций Цикл
			
			МассивУзлов = ПроцедурыОбменаУТУПП.ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
			СоответствиеУзловИОрганизаций.Вставить(Организация, МассивУзлов);
						
		КонецЦикла;		
				
		ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаУТУПП = Новый ХранилищеЗначения(СоответствиеУзловИОрганизаций);		
		
	КонецЕсли;	
	
	ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();	
	
	
	// обмен с сайтом
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменССайтомТоварами.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменССайтомТоварами КАК ОбменССайтомТоварами
	               |ГДЕ
	               |	(ОбменССайтомТоварами.Ссылка <> &ЭтотУзел)	
				   |";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтомТоварами.ЭтотУзел());
	МассивУзловДляОбменаССайтомТоварами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПараметрыСеанса.ВсеУзлыДляОбменаССайтомТоварами = Новый ФиксированныйМассив(МассивУзловДляОбменаССайтомТоварами);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбменССайтомЗаказами.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменССайтомЗаказами КАК ОбменССайтомЗаказами
	               |ГДЕ
	               |	(ОбменССайтомЗаказами.Ссылка <> &ЭтотУзел)	
				   |";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтомЗаказами.ЭтотУзел());
	МассивУзловДляОбменаССайтомЗаказами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПараметрыСеанса.ВсеУзлыДляОбменаССайтомЗаказами = Новый ФиксированныйМассив(МассивУзловДляОбменаССайтомЗаказами);	
	
	ПараметрыСеанса.НаличиеОбменаССайтом = (МассивУзловДляОбменаССайтомТоварами.Количество() + МассивУзловДляОбменаССайтомЗаказами.Количество() > 0);
	
	//обмен с розничной торговлей
	УстановитьПараметрыСеансаДляОбменаСРозничнойТорговлей();
	
	ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();	
	
КонецПроцедуры
	
Процедура УстановитьПараметрыСеансаДляОбменаСРозничнойТорговлей()
	
	ЗапросПоУзламОбмена = Новый Запрос;
	ЗапросПоУзламОбмена.Текст = 
	"ВЫБРАТЬ
	|	ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка,
	|	ОбменУправлениеТорговлейРозничнаяТорговля.ДатаНачалаВыгрузкиДокументов,
	|	ОбменУправлениеТорговлейРозничнаяТорговля.ВыгружатьСебестоимость,
	|	ОбменУправлениеТорговлейРозничнаяТорговля.ДатаСвертки
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейРозничнаяТорговля КАК ОбменУправлениеТорговлейРозничнаяТорговля
	|ГДЕ
	|	ОбменУправлениеТорговлейРозничнаяТорговля.Ссылка <> &ЭтотУзел";
	
	ЗапросПоУзламОбмена.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ЭтотУзел());
	
	РезультатЗапроса = ЗапросПоУзламОбмена.Выполнить();
	
	ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей = НЕ РезультатЗапроса.Пустой();;
	
	МассивВсехУзлов                                  = ПроцедурыОбменаСРозничнойТорговлей.ПолучитьМассивВсехУзлов();
	ПараметрыСеанса.ВсеУзлыОбменаСРозничнойТорговлей = Новый ФиксированныйМассив(МассивВсехУзлов);
	
	Если ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей Тогда
		
		ТаблицаОбменовУТРТ = РезультатЗапроса.Выгрузить();
		ТаблицаОбменовУТРТ.Индексы.Добавить("Ссылка");
		
		ПараметрыСеанса.СоответствиеУзловИДатДляОбменаУправлениеТорговлейРозничнаяТорговля = Новый ХранилищеЗначения(ТаблицаОбменовУТРТ);
		
		//установим соответствие реквизитов и узлов
		СоответствиеРеквизитовИУзлов = Новый Соответствие;
		
		//по складам
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеРеквизитовИУзлов.Вставить(Выборка.Склад, 
			                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоСкладу(Выборка.Склад));
			
		КонецЦикла;
		
		//вставим пустой склад
		СоответствиеРеквизитовИУзлов.Вставить(Справочники.Склады.ПустаяСсылка(), 
		                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоСкладу(Справочники.Склады.ПустаяСсылка()));
		
		//теперь по кассам
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кассы.Ссылка КАК Касса
		|ИЗ
		|	Справочник.Кассы КАК Кассы";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеРеквизитовИУзлов.Вставить(Выборка.Касса, 
			                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоКассе(Выборка.Касса));
			
		КонецЦикла;
		
		//вставим пустую кассу
		СоответствиеРеквизитовИУзлов.Вставить(Справочники.Кассы.ПустаяСсылка(), 
		                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоКассе(Справочники.Кассы.ПустаяСсылка()));
		
		//и еще по кассам ККМ
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.Ссылка КАК КассаККМ
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеРеквизитовИУзлов.Вставить(Выборка.КассаККМ, 
			                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоКассеККМ(Выборка.КассаККМ));
			
		КонецЦикла;
		
		//вставим пустую кассу ККМ
		СоответствиеРеквизитовИУзлов.Вставить(Справочники.КассыККМ.ПустаяСсылка(), 
		                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоКассеККМ(Справочники.КассыККМ.ПустаяСсылка()));
		
		//и еще по типам цен номенклатуры
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦеныНоменклатуры
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеРеквизитовИУзлов.Вставить(Выборка.ТипЦеныНоменклатуры, 
			                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоТипуЦен(Выборка.ТипЦеныНоменклатуры));
			
		КонецЦикла;
		
		//вставим пустую кассу ККМ
		СоответствиеРеквизитовИУзлов.Вставить(Справочники.ТипыЦенНоменклатуры.ПустаяСсылка(), 
		                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоКассеККМ(Справочники.ТипыЦенНоменклатуры.ПустаяСсылка()));
											  
		//организации
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеРеквизитовИУзлов.Вставить(Выборка.Организация, 
			                                      ПроцедурыОбменаСРозничнойТорговлей.ПолучитьЗапросомМассивУзловПоОрганизации(Выборка.Организация));
			
		КонецЦикла;
			
        		
		//запишем соответствие в хранилище и установим параметр сеанса
		ПараметрыСеанса.СоответствиеРеквизитовИУзловОбменаСРозничнойТорговлей = Новый ХранилищеЗначения(СоответствиеРеквизитовИУзлов);
		
	КонецЕсли;
	
КонецПроцедуры	

// функция по пользователю ИБ определяет есть ли у него Windows авторизация
Функция НаличиеУПользователяWindowsАвторизации(Знач ИмяПользователяИБ) Экспорт
	
	Если ПустаяСтрока(ИмяПользователяИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// находим пользователя ИБ
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияОС;
	
КонецФункции

Процедура ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ = Ложь) Экспорт

	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНового)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНового.ПолучитьОбъект() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектДоступа.Установить(СсылкаНового);
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписей, СсылкаНового, Родитель);
	
	ЗаписатьНаборПрав(НаборЗаписей, Отказ, "Не удалось записать права доступа к объекту!")
	
КонецПроцедуры

Процедура ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки, Интерактивно = Ложь, ОткликИнтерактивнойЗаписи = "")
	
	Попытка
		НаборПрав.мИнтерактивнаяЗапись = Интерактивно;
		НаборПрав.мОткликИнтерактивнойЗаписи = ОткликИнтерактивнойЗаписи;
		НаборПрав.Записать();
		ОткликИнтерактивнойЗаписи = НаборПрав.мОткликИнтерактивнойЗаписи;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Функция ОбновитьПраваДоступаПользователейПоВладельцуДоступа(Ссылка) Экспорт
	
	ПраваДоступаПользователей = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа      .Установить(Ссылка);
	ПраваДоступаПользователей.Отбор.ВладелецПравДоступа.Установить(Ссылка);
	
	ПраваДоступаПользователей.Прочитать();
	
	ПраваДоступаПользователей.Отбор.ОбъектДоступа.Использование = Ложь;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(ПраваДоступаПользователей);
		
	Попытка
		ПраваДоступаПользователей.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // () 

Процедура РегистрацияОбъектовДоступаДокумента(ДокументСсылка, ОбъектыДоступа, Замещать = Истина) Экспорт

	Набор = РегистрыСведений.ОбъектыДоступаДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Для Каждого ЭлементМассива ИЗ ОбъектыДоступа Цикл
		Набор.ДобавитьОбъектыДоступа(ЭлементМассива);
	КонецЦикла;
	Набор.ДвижениеПоРегистру();
	Набор.Записать(Замещать);

КонецПроцедуры

Процедура ЗаписатьПраваДоступаПользователей(ТаблицаНабораПрав, СтруктураОтбора, Отказ = Ложь, ШапкаОшибки = "", Интерактивно = Ложь, ОткликИнтерактивнойЗаписи = "") Экспорт
	
	НаборПрав   = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		Если Не ЭлементСтруктуры.Ключ = "ВладелецПравДоступа" Тогда
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			НаборПрав  .Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим набор на корректность установленных отборов
	Если НаборПрав.Отбор.ОбъектДоступа.Использование Тогда
		ОтборПоОбъектуДоступа = Истина;
		ОбъектДоступа = НаборПрав.Отбор.ОбъектДоступа.Значение;
		НаборПрав.Отбор.ВладелецПравДоступа.Установить(ОбъектДоступа);
		НаборПрав.Отбор.ОбъектДоступа.Использование = Ложь;
	ИначеЕсли НаборПрав.Отбор.Пользователь.Использование Тогда
		Если Не ЗначениеЗаполнено(НаборПрав.Отбор.Пользователь.Значение) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
			Возврат;
		КонецЕсли;
		
	Иначе
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаРазличияСтрок   = НаборПрав.Выгрузить();
	ТаблицаРазличияЗаписей = НаборПрав.Выгрузить();
	
	НаборПрав.Прочитать();
	
	ТаблицаСтарогоНабора = НаборПрав.Выгрузить();
	
	ТаблицаНовогоНабора  = НастройкаПравДоступа.ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(ТаблицаНабораПрав);
	
	НаборПрав.Загрузить(ТаблицаНовогоНабора);
	
	// с полными правами можно все делать
	Если Не РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа!",, ШапкаОшибки);
		Возврат;
	КонецЕсли;
	
	НастройкаПравДоступа.ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав);
		
	ЗаписатьНаборПрав(НаборПрав, Отказ, ШапкаОшибки, Интерактивно, ОткликИнтерактивнойЗаписи);
	
КонецПроцедуры // () 

Функция ПроверитьНаличиеСсылокНаДоговорКонтрагента(ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.РасчетыСКонтрагентами.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаказыПокупателей.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаказыПоставщикам.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПартииТоваровПереданные.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыПереданные.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыПолученные.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.Продажи.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.ДоговорКонтрагента
	|ГДЕ
	|	ДоговорКонтрагента = &ДоговорКонтрагента
	|";

	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПроверитьНаличиеСсылокНаДоговорКонтрагентаВЗаказахПокупателей(ДоговорКонтрагента) Экспорт
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 
	|1
	|ИЗ РегистрНакопления.ЗаказыПокупателей
	|ГДЕ ДоговорКонтрагента = &ДоговорКонтрагента";
	Запрос.УстановитьПараметр("ДоговорКонтрагента",ДоговорКонтрагента);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция ПолучитьСписокДокументовПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерияОтбора) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	ТипЗначениеКритерияОтбора = ТипЗнч(ЗначениеКритерияОтбора);
			
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
		
		Если НЕ ЭлементСостава.Тип.СодержитТип(ТипЗначениеКритерияОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерияОтбора);
	Возврат Запрос.Выполнить().Выгрузить(); 		
		
	
	
КонецФункции

// ПАРТИОННЫЙ УЧЕТ

//////////////////////////////////////////////////////////////////////////
// Возвращает текущий максимальный номер строки в наборе записей регистра
//
Функция МаксНомерСтрокиВНабореЗаписей(ИмяРегистра, Регистратор, ВидРегистра = "РегистрНакопления", УчитыватьДвиженияПартионногоУчета = Ложь) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(Рег.НомерСтроки) КАК МаксНомерСтроки
	                      |ИЗ
	                      |"+ВидРегистра+"." +ИмяРегистра+ " КАК Рег
	                      |
	                      |ГДЕ
	                      |	Рег.Регистратор = &Регистратор");
						  
	Если УчитыватьДвиженияПартионногоУчета тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ","ГДЕ Рег.СписаниеПартий = Ложь И");
	КонецЕсли;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МаксНомерСтроки = Выборка.МаксНомерСтроки;
	Иначе
		МаксНомерСтроки = 0;
	КонецЕсли;
	
	Возврат МаксНомерСтроки;

КонецФункции //МаксНомерСтрокиВНабореЗаписей

Функция ПолучитьПараметрыДокументовОприходования(МассивДокументов, Период)  Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пост.ДоговорКонтрагента КАК ДоговорПоставки,
		|	Пост.Сделка,
		|	Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность,
		|	Пост.Ссылка,
		|	Пост.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Пост
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
		|		ПО Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта

		|ГДЕ
		|	Пост.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пост.ДоговорКонтрагента,
		|	Пост.Сделка,
		|	Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность,
		|	Пост.Ссылка,
		|	Пост.ДоговорКонтрагента.ВедениеВзаиморасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслугВНТТ КАК Пост
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
		|		ПО Пост.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	Пост.Ссылка В(&Ссылка)");
		
	Запрос.УстановитьПараметр("Ссылка" , МассивДокументов);
	Запрос.УстановитьПараметр("ДатаКурса" , Период);
		
	Возврат Запрос.Выполнить().Выбрать();		
		
КонецФункции



Процедура УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ) Экспорт

	НаборЗаписей = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРегистратор.Использование = Истина;
	НаборЗаписей.Отбор.ОбъектРегистратор.Значение      = Ссылка;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли; 

КонецПроцедуры

// Функция определяет наличие хотя бы одной записи в регистре сведений
//
// Параметры
//  ИмяРегистра - строка
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьЗаписиВРегистреСведений(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегСв.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегСв";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции // ЕстьЗаписиВРегистреСведений()

Функция ПолучитьВыборкуПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерия) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ЗначениеКритерия)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначения.РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
