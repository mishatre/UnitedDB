
Перем мРедактируемаяЗапись Экспорт;

Перем мФормаВладелец;

Перем мВозвратСтруктуры Экспорт;

# Если Клиент Тогда

// Функция обрабатывает событие закрытия формы редактирования записи.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Булево - Закрывать или не закрывать форму
//
Функция ЗакрыватьФормуРедактирования() Экспорт

	ОтветНаВопрос = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Возврат Истина;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Возврат НЕ Записать();
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

// Функция определяет имя формы в зависимости от типа КИ.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка - Имя формы
//
Функция ПолучитьИмяФормы()

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат "ФормаЗаписиАдреса";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат "ФормаЗаписиАдресаЭП";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат "ФормаЗаписиВебСтраницы";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат "ФормаЗаписиТелефона";
	Иначе
		Возврат "ФормаЗаписи";
	КонецЕсли;

КонецФункции

// Процедура инициирует редактирование записи.
//
// Параметры:
//  СтруктураЗаписи - Структура, НаборЗаписейРегистраСведений, МенеджерЗаписи, ЗаписьНабораЗаписей
//                    Данные для редактирования
//  Записывать      - Булево, Записывать данные в ИД при окончании редактирования
//  ФормаВладелец   - Форма, откуда вызывается редактирование
//  СтруктураПредустановленныхЗначений - Структура, данные для заполнения форма по умолчанию,
//                    могут отличаться от редактируемых, например при копировании
//
Процедура РедактироватьЗапись(СтруктураЗаписи = Неопределено, Записывать = Ложь, ФормаВладелец = Неопределено, СтруктураПредустановленныхЗначений = Неопределено) Экспорт

	ЗаписыватьВРегистр = Записывать;
	мФормаВладелец = ФормаВладелец;
	
	Если ТипЗнч(СтруктураЗаписи) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(СтруктураЗаписи) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		мРедактируемаяЗапись = СтруктураЗаписи;
		ЛокальнаяСтруктураЗаписи = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруЗаписиРегистра(СтруктураЗаписи);
	ИначеЕсли ТипЗнч(СтруктураЗаписи) = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		// Значит вводим нового
		Если СтруктураЗаписи.Отбор.Объект.Использование = Истина И СтруктураЗаписи.Отбор.Объект.Значение <> Неопределено Тогда
			ЛокальнаяСтруктураЗаписи = Новый Структура("Объект", СтруктураЗаписи.Отбор.Объект.Значение);
			мРедактируемаяЗапись = СтруктураЗаписи;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(СтруктураЗаписи) = Тип("Структура") Тогда
		ЛокальнаяСтруктураЗаписи = СтруктураЗаписи;
	КонецЕсли;
	
	Если СтруктураПредустановленныхЗначений <> Неопределено Тогда
		ЛокальнаяСтруктураЗаписи = СтруктураПредустановленныхЗначений;
	КонецЕсли; 
	
	Если ТипЗнч(ЛокальнаяСтруктураЗаписи) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из ЛокальнаяСтруктураЗаписи Цикл
			ЭтотОбъект[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Тип) Тогда
	
		Меню = Новый СписокЗначений();

		Для а = 0 По (Перечисления.ТипыКонтактнойИнформации.Количество()-1) Цикл
			Меню.Добавить(Перечисления.ТипыКонтактнойИнформации[а], Перечисления.ТипыКонтактнойИнформации[а]);
		КонецЦикла; 

		ВыбранныйПункт = Меню.ВыбратьЭлемент("Выберите тип контактной информации");

		Если ВыбранныйПункт = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Тип = ВыбранныйПункт.Значение;
	
	КонецЕсли;
	
	ПолучитьФорму(ПолучитьИмяФормы()).Открыть();

КонецПроцедуры

// Процедура заполняет запись данными из реквизитов обработки.
//
// Параметры:
//  Запись - Менеджер записи или запись из набора
//
Процедура ЗаполнитьЗапись(Запись)

	Запись.Объект        = Объект;
	Запись.Тип           = Тип;
	Запись.Вид           = Вид;
	Запись.Представление = Представление;
	Запись.Комментарий   = Комментарий;
	Для а = 1 По 10 Цикл
		Запись["Поле" + Строка(а)] = ЭтотОбъект["Поле" + Строка(а)];
	КонецЦикла;

	Запись.ТипДома     = ТипДома;
	Запись.ТипКорпуса  = ТипКорпуса;
	Запись.ТипКвартиры = ТипКвартиры;

КонецПроцедуры

// Функция производит запись данных в ИБ или просто в запись набора или менеджер записи.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Булево - Удачно произведена запись или нет.
//
Функция Записать() Экспорт

	Если ТипЗнч(мРедактируемаяЗапись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(мРедактируемаяЗапись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		ЗаполнитьЗапись(мРедактируемаяЗапись);
		СтруктураОповещения = Новый Структура("Объект,Тип,Вид", мРедактируемаяЗапись.Объект, мРедактируемаяЗапись.Тип, мРедактируемаяЗапись.Вид);
	ИначеЕсли ТипЗнч(мРедактируемаяЗапись) = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		// Поищем существующую, если найдем - перепишем ее, если нет - введем новую
		НайденнаяЗаписьНабора = Неопределено;
		Для каждого ЗаписьНабора Из мРедактируемаяЗапись Цикл
			Если ЗаписьНабора.Объект = Объект
			   И ЗаписьНабора.Тип = Тип
			   И ЗаписьНабора.Вид = Вид Тогда
				НайденнаяЗаписьНабора = ЗаписьНабора;
			КонецЕсли; 
		КонецЦикла;
		Если НайденнаяЗаписьНабора = Неопределено Тогда
			НайденнаяЗаписьНабора = мРедактируемаяЗапись.Добавить();
		КонецЕсли; 
		ЗаполнитьЗапись(НайденнаяЗаписьНабора);
		СтруктураОповещения = Новый Структура("Объект,Тип,Вид", НайденнаяЗаписьНабора.Объект, НайденнаяЗаписьНабора.Тип, НайденнаяЗаписьНабора.Вид);
	КонецЕсли;
	
	Если ЗаписыватьВРегистр
	   И ТипЗнч(мРедактируемаяЗапись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		Попытка
			мРедактируемаяЗапись.Записать(Ложь);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать данные о контактной информации.");
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли; 
	
	Если ТипЗнч(мФормаВладелец) = Тип("Форма") И ТипЗнч(СтруктураОповещения) = Тип("Структура") Тогда
		Оповестить("ЗаписанаКИ", СтруктураОповещения);
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции // Записать()

// Процедура модального редактирования адреса
Процедура РедактироватьМодальноЭлементАдресаРазделенногоЗапятыми(Элемент, ЭтаФорма = Неопределено, КлючФормы = Неопределено) Экспорт
	
	ФормаРедактированияАдреса = ПолучитьФорму("ФормаЗаписиАдреса", ЭтаФорма, КлючФормы);
	
	СтрАдрес = Элемент.Значение;
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СтрАдрес);
	УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(ЭтотОбъект, СтруктураАдреса);
		
	// установим размеры формы для редактирования
	ФормаРедактированияАдреса.ЭлементыФормы.ПанельНастроекАдреса.Свертка = РежимСверткиЭлементаУправления.Верх;
	ФормаРедактированияАдреса.ЭлементыФормы.ПанельКомментарий.Свертка = РежимСверткиЭлементаУправления.Низ;
	ФормаРедактированияАдреса.Высота = 310;
	
	РезультатРедактирования = ФормаРедактированияАдреса.ОткрытьМодально();
	
	Если РезультатРедактирования <> Неопределено Тогда
		СтрАдрес = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ЭтотОбъект);
		Элемент.Значение = СтрАдрес;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

ДоступностьОбъекта = Истина;