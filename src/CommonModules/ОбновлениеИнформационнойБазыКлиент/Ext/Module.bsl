////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Клиентские процедуры и функции для интерактивного обновления информационной базы.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверить, есть ли необходимость выполнять обновление информационной базы, и
// если необходимо - выполняется обновление.
// Если обновление не удалось выполнить, то процедура предлагает завершить работу системы.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы(Отказ = Ложь) Экспорт
	
	ОбновитьИнформационнуюБазу(Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// См. описание параметра ПриЗапускеКлиентскогоПриложения в модуле ОбновлениеИнформационнойБазы
// в описании функции ВыполнитьОбновлениеИнформационнойБазы.
//
Процедура ОбновитьИнформационнуюБазу(Отказ = Ложь, ПриЗапускеКлиентскогоПриложения = Ложь) Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыРаботыКлиента.НеобходимоОбновлениеИнформационнойБазы Тогда
		Возврат;
	КонецЕсли;
	
	НачальноеЗаполнениеДанных = ПараметрыРаботыКлиента.НачальноеЗаполнениеДанных;
	
	ТекстСостояния = НСтр("ru = 'Пожалуйста, подождите, выполняется обновление информационной базы...'");
	Состояние(ТекстСостояния);
	ДокументОписаниеОбновлений = Неопределено;
	ИнформацияОбОшибке = Неопределено;
	
	ВремяНачалаОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Попытка
		ПризнакВыполненияОбработчиков = ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(
			Ложь, ПриЗапускеКлиентскогоПриложения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Пока ПризнакВыполненияОбработчиков = "ОшибкаУстановкиМонопольногоРежима" Цикл
			// Открытие формы для отключения активных сеансов
			ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Отказ);
			Если Не Отказ Тогда
				Состояние(ТекстСостояния);
				
				Попытка
					ПризнакВыполненияОбработчиков = ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(
						Ложь, ПриЗапускеКлиентскогоПриложения);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Прервать;
				КонецПопытки;
				
				ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
				Если ПризнакВыполненияОбработчиков <> "ОшибкаУстановкиМонопольногоРежима" Тогда
					ОбновлениеИнформационнойБазыВызовСервера.СнятьБлокировкуФайловойБазы();
				КонецЕсли;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обновлении версии программы возникла ошибка:
			           |
			           |%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстСообщенияОбОшибке", ТекстСообщенияОбОшибке);
		ПараметрыФормы.Вставить("ВремяНачалаОбновления", ВремяНачалаОбновления);
		ПараметрыФормы.Вставить("ВремяОкончанияОбновления", ВремяОкончанияОбновления);
		
		ЗавершитьРаботу = ОткрытьФормуМодально("ОбщаяФорма.СообщениеОНеудачномОбновлении", ПараметрыФормы);
		Если ЗавершитьРаботу = Неопределено
			Или ЗавершитьРаботу Тогда
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ЗавершитьРаботуСистемы(Ложь, Ложь);
			#Иначе
				Отказ = Истина;
				Возврат;
			#КонецЕсли
		Иначе
			ЗавершитьРаботуСистемы(Ложь, Истина);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Обновление информационной базы выполнено успешно.'"));
		
	Если ПризнакВыполненияОбработчиков = "Успешно" Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	ВывестиОписаниеИзмененийДляАдминистратора =
		(ПризнакВыполненияОбработчиков = "Успешно" И Не НачальноеЗаполнениеДанных);
	
	Если ВывестиОписаниеИзмененийДляАдминистратора Тогда
		Если ТипЗнч(ПараметрыРаботыКлиентаПриОбновлении) <> Тип("Структура") Тогда
			ПараметрыРаботыКлиентаПриОбновлении = Новый Структура;
		КонецЕсли;
		ПараметрыРаботыКлиентаПриОбновлении.Вставить("ВремяНачалаОбновления", ВремяНачалаОбновления);
		ПараметрыРаботыКлиентаПриОбновлении.Вставить("ВремяОкончанияОбновления", ВремяОкончанияОбновления);
	КонецЕсли;
	
КонецПроцедуры

// Если есть непоказанные описания изменения и у пользователя не отключен
// показ - открыть форму ОписаниеИзмененийСистемы.
//
Процедура ПоказатьОписаниеИзмененийСистемы()
	
	// Пока описание БСП показывать не надо
	Возврат;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Вызывается при интерактивном начале работы пользователя с областью данных.
// Соответствует событию ПриНачалеРаботыСистемы модулей приложения.
//
// Параметры:
//  ОбработкаПараметровЗапуска - Булево.
//    Истина - обработчик вызван при обычном входе пользователя
//             в систему и обработка параметров запуска будет выполнена.
//    Ложь   - обработчик вызван при входе неразделенного пользователя
//             в область данных и обработка параметров запуска будет пропущена.
//
Процедура ПриНачалеРаботыСистемы(ОбработкаПараметровЗапуска) Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеИзмененийСистемы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Вызывается при неудачной попытке установить монопольный режим в файловой базе.
// 
// Параметры:
//  Отказ - булево - если Истина - завершает работу программы
//
Процедура ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Отказ) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("СоединенияИБКлиент");
		Модуль.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Отказ);
	КонецЕсли;
	
КонецПроцедуры



