////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Серверные процедуры и функции обновления информационной базы
// при смене версии конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазы(НоваяВерсия = Неопределено) Экспорт
	
	Если НоваяВерсия = Неопределено Тогда
		НоваяВерсия = Метаданные.Версия;
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбновление(НоваяВерсия, ВерсияИБ(Метаданные.Имя)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Найти(НРег(ПараметрЗапускаКлиента), НРег("ЗапуститьОбновлениеИнформационнойБазы")) > 0
	   И ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И Константы.ЗапуститьОбновлениеИнформационнойБазы.Получить() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если выполняется обновление ИБ
Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции

// Возвращает пустую таблицу обработчиков обновления и первоначального заполнения ИБ.
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица с колонками:
//                       Версия        - номер версии конфигурации, при переходе на которую должна
//                                       быть выполнена процедура-обработчик обновления
//                       Процедура     - полное имя процедуры-обработчика обновления. 
//                                       Должна быть обязательно экспортной. 
//                       Опциональный  - если Истина, то обработчик не должен срабатывать
//                                       при первом запуске на "пустой" базе.
//                       Приоритет     - Число. Для внутреннего использования.
//                       ОбщиеДанные   - если Истина, то обработчик должен срабатывать до
//                                       выполнения любых обработчиков, использующих разделенные
//                                       данные.
//                       УправлениеОбработчиками - Булево. Если Истина обработчик должен иметь
//                                       параметр типа структура в котором есть свойство 
//                                       РазделенныеОбработчики - таблица значений со структурой возвращаемой
//                                       этой функцией. Используются только колонки Процедура,
//                                       Приоритет и МонопольныйРежим.
//                                       В случае необходимости выполнения разделенного обработчика,
//                                       в данную таблицу необходимо добавить строку с описанием 
//                                       процедуры обработчика.
//                                       Имеет смысл только для обязательных (Версия = *)
//                                       обработчиков обновления с установленным флагом ОбщиеДанные
//                       ВыполнятьВГруппеОбязательных - Булево. Следует указывать если обработчик требуется
//                                       выполнять в одной группе с обработчиками на версии "*".
//                                       При этом, возможно менять порядок выполнения обработчика 
//                                       относительно других путем изменения приоритета.
//                       МонопольныйРежим - Неопределено, Булево. 
//                                       Неопределено - обработчик должен безусловно выполняться в 
//                                       монопольном режиме.
//                                       Для обязательных обработчиков обновления (Версия = "*")
//                                        Ложь - обработчик не требует монопольного режима
//                                        Истина - обработчик может требовать монопольного режима
//                                         для выполнения.
//                                         В такие обработчики передается параметр типа структура 
//                                         со свойством МонопольныйРежим (типа булево). 
//                                         При запуске обработчика в монопольном режиме передается
//                                          значение Истина. В этом случае обработчик должен выполнить
//                                          требуемые действия по обновлению. Изменение параметра
//                                          в теле обработчика игнорируется.
//                                         При запуске обработчика в немонопольном режиме передается
//                                          значение Ложь. В этом случае обработчик не должен вносить
//                                          никакие изменения в ИБ.
//                                          Если в результате анализа выясняется что обработчику требуется
//                                          изменить данные ИБ следует установить значение параметра в
//                                          Истина и прекратить выполнение обработчика.
//                                          В этом случае оперативное (немонопольное обновление ИБ) будет
//                                          отменено и выдана ошибка с требованием выполнить обновление
//                                          в монопольном режиме.
//                                       Для обработчиков перехода на конкретную версию (версия <> *)
//                                        Ложь - обработчик не требует монопольного режима для выполнения
//                                        Истина - обработчик требует монопольного режима для выполнения
//
Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("НачальноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	Обработчики.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("МонопольныйРежим");
	
	Возврат Обработчики;
	
КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для библиотеки ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//  ВерсияМетаданныхИБ       – Строка – версия метаданных, до которой необходимо
//                                      выполнить обновление.
//  ОбработчикиОбновления    – Соответствие – список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   – выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления, Знач ОперативноеОбновление = Ложь) Экспорт
	
	ТекущаяВерсияИБ = ВерсияИБ(ИдентификаторБиблиотеки);
	Если ПустаяСтрока(ТекущаяВерсияИБ) Тогда
		ТекущаяВерсияИБ = "0.0.0.0";
	КонецЕсли;
	НоваяВерсияИБ = ТекущаяВерсияИБ;
	ВерсияМетаданных = ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	
	Если ТекущаяВерсияИБ <> "0.0.0.0"
		И ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		// Получение списка обработчиков сформированного на этапе выполнения неразделенных обработчиков
		ВыполняемыеОбработчики = ПолучитьПланОбновления(ИдентификаторБиблиотеки, ТекущаяВерсияИБ, ВерсияМетаданных);
		Если ВыполняемыеОбработчики = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Не найден план обновления библиотеки %1 с версии %2 на версию %3'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИдентификаторБиблиотеки,
				ТекущаяВерсияИБ, ВерсияМетаданных);
			ЗаписатьИнформацию(Сообщение);
			
			ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);
		КонецЕсли;
	Иначе
		ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);
	КонецЕсли;
	
	ОтключитьОбработчикиОбновления(ИдентификаторБиблиотеки, ВыполняемыеОбработчики, ВерсияМетаданных);
	
	ОбязательныеРазделенныеОбработчики = НоваяТаблицаОбработчиковОбновления();
	
	ИсходнаяВерсияИБ = ТекущаяВерсияИБ;
	
	ЗаписыватьВЖурнал = Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();
	
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполняются обязательные процедуры обновления информационной базы.'");
		Иначе
			НоваяВерсияИБ = Версия.Версия;
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			                 ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
		КонецЕсли;
		
		ЗаписатьИнформацию(Сообщение);
		
		Для Каждого Обработчик Из Версия.Строки Цикл
			
			ПараметрыОбработчика = Неопределено;
			Если Обработчик.ВерсияРегистрации = "*" Тогда
				
				Если Обработчик.УправлениеОбработчиками Тогда
					ПараметрыОбработчика = Новый Структура;
					ПараметрыОбработчика.Вставить("РазделенныеОбработчики", ОбязательныеРазделенныеОбработчики);
				КонецЕсли;
				
				Если Обработчик.МонопольныйРежим = Истина Тогда
					Если ОперативноеОбновление Тогда
						// Проверки выполняются в ВозможноОперативноеОбновление, а само обновление для таких
						// обработчиков выполняется только при неоперативном обновление
						Продолжить;
					КонецЕсли;
					
					Если ПараметрыОбработчика = Неопределено Тогда
						ПараметрыОбработчика = Новый Структура;
					КонецЕсли;
					ПараметрыОбработчика.Вставить("МонопольныйРежим", Истина);
				КонецЕсли;
			КонецЕсли;
			
			ВыполнитьОбработчикОбновления(ЗаписыватьВЖурнал, ИдентификаторБиблиотеки, Обработчик, ПараметрыОбработчика)
		КонецЦикла;
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполнены обязательные процедуры обновления информационной базы.'");
		Иначе
			// Установка номера версии информационной базы
			УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ);
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			  ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
			ТекущаяВерсияИБ = НоваяВерсияИБ;
			
		КонецЕсли;
		ЗаписатьИнформацию(Сообщение);
		
	КонецЦикла;
	
	// Установка номера версии информационной базы
	Если ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ);
	КонецЕсли;
	
	Если ТекущаяВерсияИБ <> "0.0.0.0" Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
			
			Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
			Модуль.СформироватьПланОбновленияОбластиДанных(ИдентификаторБиблиотеки, ОбработчикиОбновления,
				ОбязательныеРазделенныеОбработчики, ИсходнаяВерсияИБ, ВерсияМетаданныхИБ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

// Записывает изменения в переданном объекте.
//
// Параметры:
//  Данные - объект, который необходимо записать.
//  РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Объявляет события подсистемы ОбновлениеВерсииИБ:
//
// Серверные события:
//   ПриДобавленииОбработчиковОбновления,
//   ПередОбновлениемИнформационнойБазы,
//   ПослеОбновленияИнформационнойБазы.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
	//
	// Параметры:
	//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
	//                                  общего модуля ОбновлениеИнформационнойБазы.
	//
	// Синтаксис:
	// Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	//
	// (Аналог функции ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления).
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления");
	
	// Вызывается перед обработчиками обновления данных ИБ.
	//
	// Синтаксис:
	// Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	//
	// (То же, что ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы");
	
	// Вызывается после завершения монопольного обновления версии ИБ
	// 
	// Параметры:
	//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
	//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
	//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
	//                                             подсистемы, сгруппированных по номеру версии.
	//                            Процедура обхода выполненных обработчиков:
	//
	//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
	//		
	//		Если Версия.Версия = "*" Тогда
	//			// Обработчик, который может выполнятся при каждой смене версии.
	//		Иначе
	//			// Обработчик, который выполняется для определенной версии.
	//		КонецЕсли;
	//		
	//		Для Каждого Обработчик Из Версия.Строки Цикл
	//			...
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//
	//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
	//                                тогда выводить форму с описанием обновлений.
	//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
	//                                Истина - обновление выполнялось в монопольном режиме.
	//
	// Синтаксис:
	// Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	// 		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	//
	// (То же, что ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы).
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы"].Добавить(
		"ОбновлениеИнформационнойБазыКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"ОбновлениеИнформационнойБазы");
	
КонецПроцедуры

// Проверить необходимость обновления неразделенных данных информационной базы
// при смене версии конфигурации.
//
Функция НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ВерсияМетаданных = Метаданные.Версия;
		Если ПустаяСтрока(ВерсияМетаданных) Тогда
			ВерсияМетаданных = "0.0.0.0";
		КонецЕсли;
		
		ВерсияОбщихДанных = ВерсияИБ(Метаданные.Имя, Истина);
		
		Если НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияОбщихДанных) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Найти(НРег(ПараметрЗапускаКлиента), НРег("ЗапуститьОбновлениеИнформационнойБазы")) > 0
			   И ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
				
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает текст причины блокировки, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав, иначе возвращает пустую строку.
//
// Параметры:
//  УчитыватьПривилегированныйРежим - Булево. Начальное значение Истина. Если указать Ложь,
//                                    то при проверке полноправности текущего пользователя
//                                    наличие привилегированного режиме не будет учитываться.
//  
//  ПриЗапускеКлиентскогоПриложения - Булево. Начальное значение Ложь. Если указать Истина,
//                                    тогда в случае, если выполнен запуск с пустым списком
//                                    пользователей, то возвращается пустая строка, вместо
//                                    сообщения о недостатке прав (когда есть недостаток), 
//                                    т.к. проверка на запуск с пустым списком пользователей
//                                    при недостатке прав проверяется позднее и отдельно,
//                                    в результате чего происходит добавление пользователя ИБ
//                                    администратор с ролями АдминистраторСистемы и ПолныеПрава.
// 
// Возвращаемое значение:
//  Строка. Если база не заблокирована, тогда пустая строка, иначе сообщение о причине блокировки.
// 
Функция ИнформационнаяБазаЗаблокированаДляОбновления(УчитыватьПривилегированныйРежим = Истина, Знач ПриЗапускеКлиентскогоПриложения = Ложь) Экспорт
	
	Сообщение = "";
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;
	
	СообщениеАдминистраторуСистемы =
		НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
		           |Для завершения обновления конфигурации требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").'");
	
	УстановитьПривилегированныйРежим(Истина);
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		
		СообщениеАдминистраторуОбластиДанных =
			НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
			           |Обратитесь к администратору сервиса за подробностями.'");
		
		Если ДоступноИспользованиеРазделенныхДанных Тогда
			Сообщение = СообщениеАдминистраторуОбластиДанных;
			
		ИначеЕсли НЕ ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим, Ложь) Тогда
			
			Если ЕстьПравоАдминистрирование Тогда
				Сообщение = СообщениеАдминистраторуСистемы;
			Иначе
				Сообщение = СообщениеАдминистраторуОбластиДанных;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли НЕ РазделениеВключено
	      ИЛИ ДоступноИспользованиеРазделенныхДанных Тогда
		
		Если НеобходимоОбновлениеИнформационнойБазы()
		   И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим, Истина) Тогда
			
			ЭтоЗапускСПустымСпискомПользователей = ЭтоЗапускСПустымСпискомПользователей();
			
			Если ПривилегированныйРежим()
			   И НЕ УчитыватьПривилегированныйРежим
			   И ЭтоЗапускСПустымСпискомПользователей Тогда
				Возврат ""; // Возможно, использован параметр запуска UsePrivilegedMode.
			КонецЕсли;
			
			Если ЭтоЗапускСПустымСпискомПользователей Тогда
				Если ПриЗапускеКлиентскогоПриложения Тогда
					// Проверка выполняется в подсистеме пользователи (с предложением добавить администратора).
					Возврат "";
				КонецЕсли;
				// Сообщение администратору системы при пустом списке пользователей.
				Сообщение =
					НСтр("ru = 'Для завершения обновления версии конфигурации требуются административные права.
					           |Необходимо добавить в список пользователей информационной базы учетную запись
					           |администратора с двумя ролями ""Администратор системы"" и ""Полные права"",
					           |и повторить запуск программы от его имени.
					           |
					           |Для перехода к списку пользователей информационной базы необходимо открыть Конфигуратор и
					           |воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
			Иначе
				Если ЕстьПравоАдминистрирование Тогда
					Сообщение = СообщениеАдминистраторуСистемы;
				Иначе
					Если РазделениеВключено Тогда
						// Сообщение пользователю сервиса.
						Сообщение =
							НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
							           |Обратитесь к администратору за подробностями.'");
					Иначе
						// Сообщение пользователю локального режима.
						Сообщение =
							НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
							           |Обратитесь к администратору за подробностями.'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

// Выполнить неинтерактивное обновление данных ИБ.
//
// Параметры:
// 
//  ИсключениеПриНевозможностиБлокировкиИБ - Булево - если Ложь, тогда при неудачной
//                 попытке установки монопольного режима исключение не вызывается,
//                 а возвращается строка "ОшибкаУстановкиМонопольногоРежима".
// 
//  ПриЗапускеКлиентскогоПриложения - Булево - Начальное значение Ложь. Если указать Истина,
//                 тогда параметры работы программы не будут обновляться, т.к. при клиентском
//                 запуске они обновляются в самом начале (до авторизации пользователи и обновления ИБ).
//                 Параметр требуется для оптимизации клиентского режима запуска, чтобы не выполнять
//                 обновление параметров работы программы дважды.
//                 При внешнем вызове, например, в сеансе внешнего соединения, параметры работы
//                 программы должны быть обновлены до продолжения обновления ИБ.
// 
// Возвращаемое значение:
//  Строка -  признак выполнения обработчиков обновления:
//           "Успешно", "НеУспешно", "ОшибкаУстановкиМонопольногоРежима".
//
Функция ВыполнитьОбновлениеИнформационнойБазы(ИсключениеПриНевозможностиБлокировкиИБ = Истина,
                                              Знач ПриЗапускеКлиентскогоПриложения = Ложь) Экспорт
	
	Если НЕ ПриЗапускеКлиентскогоПриложения Тогда
		Попытка
			СтандартныеПодсистемыСервер.ЗагрузитьОбновитьПараметрыРаботыПрограммы();
		Исключение
			ЗаписатьОшибку(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ВерсияМетаданных = Метаданные.Версия;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	ВерсияДанных = ВерсияИБ(Метаданные.Имя);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВерсияОбщихДанных = ВерсияИБ(Метаданные.Имя, Истина);
		Если НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияОбщихДанных) Тогда
			Сообщение =
				НСтр("ru = 'Не выполнена общая часть обновления информационной базы.
				           |Обратитесь к системному администратору.'");
			ЗаписатьОшибку(Сообщение);
			ВызватьИсключение Сообщение;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат "НеУспешно";
	КонецЕсли;
	
	ОписанияПодсистем  = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Модуль.ПередОбновлениемИнформационнойБазы();
	КонецЦикла;
	ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы();
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Изменился номер версии конфигурации: с ""%1"" на ""%2"".
		           |Будет выполнено обновление информационной базы.'"),
		ВерсияДанных, ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		Сообщение = НСтр("ru = 'Недостаточно прав для выполнения обновления.
		                       |Обратитесь к системному администратору.'");
		ЗаписатьОшибку(Сообщение);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	КлючЗаписи = Неопределено;
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
			Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
			КлючЗаписи = Модуль.КлючЗаписиВерсийПодсистем();
		КонецЕсли;
		
	КонецЕсли;
	
	Если КлючЗаписи <> Неопределено Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации() + ". " + НСтр("ru = 'Обновление области данных'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение(НСтр("ru = 'Ошибка обновления области данных. Запись версий области данных заблокирована.'"));
		КонецПопытки;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		РежимОтладки = Ложь;
	Иначе
		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ОбновлениеВерсииИБ", "РежимОтладки");
		РежимОтладки = ЗначениеНастройки = Истина;
	КонецЕсли;
	
	ИтерацииОбновления = ИтерацииОбновления();
	
	ОперативноеОбновление = Ложь;
	
	// Установка монопольного режима для обновления информационной базы.
	Если НЕ РежимОтладки Тогда
		Попытка
			ОбщегоНазначения.ЗаблокироватьИБ();
		Исключение
			
			Если ВозможноОперативноеОбновление(ИтерацииОбновления) Тогда
				ОперативноеОбновление = Истина;
			Иначе
				
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно выполнить обновление информационной базы:
						|- Невозможно установить монопольный режим
						|- Версия конфигурации не предусматривает обновление без установки монопольного режима
						|
						|Подробности ошибки:
						|%1'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписатьОшибку(Сообщение);
				
				Если КлючЗаписи <> Неопределено Тогда
					РазблокироватьДанныеДляРедактирования(КлючЗаписи);
				КонецЕсли;
				
				ИспользуетсяЗавершениеРаботыПользователей = Ложь;
				ПриОпределенииИспользованияПодсистемыЗавершениеРаботыПользователей(
					ИспользуетсяЗавершениеРаботыПользователей);
				
				БазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
				
				Если БазаФайловая
					И Не ИсключениеПриНевозможностиБлокировкиИБ
					И ИспользуетсяЗавершениеРаботыПользователей Тогда
					
					Возврат "ОшибкаУстановкиМонопольногоРежима";
				Иначе
					ВызватьИсключение Сообщение;
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		// Выполняем все обработчики обновления для подсистем конфигурации.
		Для каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
			ИтерацияОбновления.ВыполненныеОбработчики = ВыполнитьИтерациюОбновления(
				ИтерацияОбновления.Подсистема,
				ИтерацияОбновления.Версия,
				ИтерацияОбновления.Обработчики,
				ОперативноеОбновление);
		КонецЦикла;
		
	Исключение
		// Отключение монопольного режима.
		Если НЕ РежимОтладки Тогда
			
			Если МонопольныйРежим() Тогда
				Пока ТранзакцияАктивна() Цикл
					ОтменитьТранзакцию();
				КонецЦикла;
			КонецЕсли;
				
			ОбщегоНазначения.РазблокироватьИБ();
			
			Если КлючЗаписи <> Неопределено Тогда
				РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			КонецЕсли;
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	#Если ВнешнееСоединение Тогда
	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();
	#КонецЕсли

	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
	 ИЛИ НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ОбновитьРазделыОписанияИзменений();
	КонецЕсли;
	
	// Отключение монопольного режима.
	Если НЕ РежимОтладки Тогда
		ОбщегоНазначения.РазблокироватьИБ();
		Если КлючЗаписи <> Неопределено Тогда
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновление информационной базы на версию ""%1"" выполнено успешно.'"), ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	ВыводитьОписаниеОбновлений = ВерсияДанных <> "0.0.0.0";
	
	Для каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		ИтерацияОбновления.ОсновнойСерверныйМодуль.ПослеОбновленияИнформационнойБазы(
			ИтерацияОбновления.ПредыдущаяВерсия,
			ИтерацияОбновления.Версия,
			ИтерацияОбновления.ВыполненныеОбработчики,
			ВыводитьОписаниеОбновлений,
			НЕ ОперативноеОбновление);
	КонецЦикла;
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Только для локального режима (не используется в модели сервиса).
		
		Если Константы.ЗапуститьОбновлениеИнформационнойБазы.Получить() Тогда
			// Снятие признака необходимости обновления ИБ, если он использовался.
			
			Если НЕ ТребуетсяОбновлениеКонфигурацииУзлаРИБ() Тогда
				// Для подчиненного узла РИБ признак снимается только в случае,
				// когда запуск выполнен после обновления конфигурации базы данных.
				
				Константы.ЗапуститьОбновлениеИнформационнойБазы.Установить(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат "Успешно";
	
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   – версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки, Знач ПолучитьВерсиюОбщихДанных = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	Результат = "";
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
		Модуль.ПриОпределенииВерсииИБ(ИдентификаторБиблиотеки, ПолучитьВерсиюОбщихДанных,
			СтандартнаяОбработка, Результат);
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПодсистем.Версия
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
		
		Запрос.УстановитьПараметр("ИмяПодсистемы", ИдентификаторБиблиотеки);
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		Результат = "";
		Если ТаблицаЗначений.Количество() > 0 Тогда
			Результат = СокрЛП(ТаблицаЗначений[0].Версия);
		КонецЕсли;
		
		Если ПустаяСтрока(Результат) Тогда
			
			// Поддержка обновления с БСП 2.1.2 до БСП 2.1.3
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	УдалитьВерсииПодсистем.Версия
				|ИЗ
				|	РегистрСведений.УдалитьВерсииПодсистем КАК УдалитьВерсииПодсистем
				|ГДЕ
				|	УдалитьВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы
				|	И УдалитьВерсииПодсистем.ОбластьДанных = &ОбластьДанных";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ИмяПодсистемы", ИдентификаторБиблиотеки);
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				Запрос.УстановитьПараметр("ОбластьДанных", -1);
			Иначе
				Запрос.УстановитьПараметр("ОбластьДанных", 0);
			КонецЕсли;
			ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
			Если ТаблицаЗначений.Количество() > 0 Тогда
				Результат = СокрЛП(ТаблицаЗначений[0].Версия);
			ИначеЕсли ИдентификаторБиблиотеки = Метаданные.Имя Тогда
				Результат = Константы.НомерВерсииКонфигурации.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

// Возвращает Истина, если при входе будет выполнено начальное заполнение
// информационной базы (или области данных), а не обновление, иначе возвращает Ложь.
// 
// Допускается вызывать только до обновления информационной базы (иначе возвращает Ложь).
//
Функция НачальноеЗаполнениеДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
		Модуль.ПриОпределенииПервогоВходаВОбластьДанных(СтандартнаяОбработка, Результат);
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	РегистрСведений.УдалитьВерсииПодсистем КАК УдалитьВерсииПодсистем";
		Результат = Запрос.Выполнить().Пустой();
		Результат = Результат И (ВерсияИБ(Метаданные.Имя) = "0.0.0.0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина если запуск информационной базы 
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.ЭтоАвтономноеРабочееМесто.Получить();
		
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
КонецПроцедуры

// Проверяет наличие обработчиков в текущем плане обновления
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Булево – Истина - текущий план обновления пустой, Ложь - иначе.
//
Функция ТекущийПланОбновленияПустой(Знач ИдентификаторБиблиотеки) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяПодсистемы = ИдентификаторБиблиотеки;
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеПлана = МенеджерЗаписи.ПланОбновления.Получить();
	
	Если ОписаниеПлана = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОписаниеПлана.План.Строки.Количество() = 0;
	
КонецФункции

// Для внутреннего использования
Функция ОбработчикиОбновленияВИнтервале(Знач ИсходнаяТаблицаОбработчиков, Знач ВерсияОт, 
	Знач ВерсияДо, Знач ПолучатьРазделенные = Ложь, Знач ОперативноеОбновление = Ложь) Экспорт
	
	// Добавление номера в таблицу, для упорядочивания в порядке добавления
	ВсеОбработчики = ИсходнаяТаблицаОбработчиков.Скопировать();
	
	ВсеОбработчики.Колонки.Добавить("НомерПоПорядку", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Для Индекс = 0 По ВсеОбработчики.Количество() - 1 Цикл
		СтрокаОбработчика = ВсеОбработчики[Индекс];
		СтрокаОбработчика.НомерПоПорядку = Индекс + 1;
	КонецЦикла;
	
	// Подготовка параметров
	ВыбиратьРазделенныеОбработчики = Истина;
	ВыбиратьНеразделенныеОбработчики = Истина;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Если ПолучатьРазделенные Тогда
			ВыбиратьНеразделенныеОбработчики = Ложь;
		Иначе
			Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
				ВыбиратьНеразделенныеОбработчики = Ложь;
			Иначе
				ВыбиратьРазделенныеОбработчики = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Формирование дерева обработчиков
	Схема = ПолучитьОбщийМакет("ПолучениеДереваОбработчиковОбновления");
	Схема.Параметры.Найти("ВыбиратьРазделенныеОбработчики").Значение = ВыбиратьРазделенныеОбработчики;
	Схема.Параметры.Найти("ВыбиратьНеразделенныеОбработчики").Значение = ВыбиратьНеразделенныеОбработчики;
	Схема.Параметры.Найти("ВерсияОт").Значение = ВерсияОт;
	Схема.Параметры.Найти("ВерсияДо").Значение = ВерсияДо;
	Схема.Параметры.Найти("ВесВерсииОт").Значение = ВесВерсии(Схема.Параметры.Найти("ВерсияОт").Значение);
	Схема.Параметры.Найти("ВесВерсииДо").Значение = ВесВерсии(Схема.Параметры.Найти("ВерсияДо").Значение);
	Схема.Параметры.Найти("ОперативноеОбновление").Значение = ОперативноеОбновление;
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = Компоновщик.Выполнить(Схема, Схема.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, Новый Структура("Обработчики", ВсеОбработчики), , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ДеревоЗначений);
	
	ВыполняемыеОбработчики = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ВыполняемыеОбработчики.Колонки.Версия.Имя = "ВерсияРегистрации";
	ВыполняемыеОбработчики.Колонки.ГруппаВерсии.Имя = "Версия";
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/обновления/получения параметров работы программы (кэшей).

// Возвращает параметры работы программы для использования (фиксированные данные),
// которые являются, например, кэшем.
//
Функция ПараметрыРаботыПрограммы(ИмяКонстанты) Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебныйПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
	
КонецФункции

// Возвращает изменения параметра работы программы с учетом текущей версии
// конфигурации и текущей версии ИБ.
//
// Параметры:
//  Параметры    - значение извлеченное из константы, имя которой передавалось
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
//  ИмяПараметра - Строка, которая передавалась, как параметр ИмяПараметра
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
// Возвращаемое значение:
//  Массив - содержит значения изменений. Может быть несколько, например,
//           когда область данных давно не обновлялась.
//
Функция ИзмененияПараметраРаботыПрограммы(Параметры, ИмяПараметра) Экспорт
	
	ПоследниеИзменения = Параметры["ИзмененияПараметра" + ИмяПараметра].Получить();
	
	Версия = Метаданные.Версия;
	СледующаяВерсия = СледующаяВерсия(Версия);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		// План обновления областей строится только для областей,
		// которые имеют версию не ниже версии неразделенных данных.
		// Для остальных областей запускаются все обработчики обновления.
		
		ВерсияИБ = ВерсияИБ(Метаданные.Имя, Истина); // Версия неразделенных (общих) данных.
	Иначе
		ВерсияИБ = ВерсияИБ(Метаданные.Имя);
	КонецЕсли;
	
	ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, Версия) = 0;
	
	// Изменения к более старшим версиям не нужны,
	// кроме случая когда обновление выполняется вне обновления ИБ,
	// т.е. версия ИБ равна версии конфигурации.
	// В этом случае дополнительно выбираются изменения к следующей версии.
	
	Индекс = ПоследниеИзменения.Количество()-1;
	Пока Индекс >=0 Цикл
		ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, ВерсияИзменения) >= 0
		   И НЕ (  ОбновлениеВнеОбновленияИБ
		         И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СледующаяВерсия, ВерсияИзменения) = 0) Тогда
			
			ПоследниеИзменения.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ПоследниеИзменения.ВыгрузитьКолонку("Изменения");
	
КонецФункции

// Устанавливает вспомогательные данные для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты      - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра      - Строка - имя параметра, который нужно установить (без приставки ИзмененияПараметра).
//  ЗначениеПараметра - фиксированные данные, которые устанавливаются в качестве значения параметра.
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Параметры = Константы[ИмяКонстанты].Получить().Получить();
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		
		Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		Константы[ИмяКонстанты].Установить(Новый ХранилищеЗначения(Параметры));
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Добавить изменения вспомогательных данных для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты       - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра       - Строка - имя параметра, который нужно установить.
//  ИзмененияПараметра - фиксированные данные, которые регистрируются в качестве изменений параметра.
//                       Изменения не добавляются, если значение ИзменениеПараметра не заполнено.
//
Процедура ДобавитьИзмененияПараметраРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ИзмененияПараметра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
	
		ОбновитьСоставИзменений = Ложь;
		Параметры = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
		
		ИмяПараметраХраненияИзменений = "ИзмененияПараметра" + ИмяПараметра;
		
		Если Параметры.Свойство(ИмяПараметраХраненияИзменений) Тогда
			ПоследниеИзменения = Параметры[ИмяПараметраХраненияИзменений].Получить();
			
			Если ТипЗнч(ПоследниеИзменения)              <> Тип("ТаблицаЗначений")
			 ИЛИ ПоследниеИзменения.Колонки.Количество() <> 2
			 ИЛИ ПоследниеИзменения.Колонки[0].Имя       <> "ВерсияКонфигурации"
			 ИЛИ ПоследниеИзменения.Колонки[1].Имя       <> "Изменения" Тогда
				
				ПоследниеИзменения = Неопределено;
			КонецЕсли;
		Иначе
			ПоследниеИзменения = Неопределено;
		КонецЕсли;
		
		Если ПоследниеИзменения = Неопределено Тогда
			ОбновитьСоставИзменений = Истина;
			ПоследниеИзменения = Новый ТаблицаЗначений;
			ПоследниеИзменения.Колонки.Добавить("ВерсияКонфигурации");
			ПоследниеИзменения.Колонки.Добавить("Изменения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИзмененияПараметра) Тогда
			
			// Если производится обновление вне обновления ИБ,
			// тогда требуется добавить изменения к следующей версии,
			// чтобы при переходе на очередную версию изменения
			// выполненные вне обновления ИБ были учтены.
			Версия = Метаданные.Версия;
			
			ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ВерсияИБ(Метаданные.Имя) , Версия) = 0;
			
			Если ОбновлениеВнеОбновленияИБ Тогда
				Версия = СледующаяВерсия(Версия);
			КонецЕсли;
			
			ОбновитьСоставИзменений = Истина;
			Строка = ПоследниеИзменения.Добавить();
			Строка.Изменения          = ИзмененияПараметра;
			Строка.ВерсияКонфигурации = Версия;
		КонецЕсли;
		
		МинимальнаяВерсияИБ = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.МинимальнаяВерсияИБ();
		
		// Удаление изменений для версий ИБ, которые меньше минимальной
		// вместо версий меньше или равных минимальной, чтобы обеспечить
		// возможность обновления вне обновления ИБ.
		Индекс = ПоследниеИзменения.Количество()-1;
		Пока Индекс >=0 Цикл
			ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(МинимальнаяВерсияИБ, ВерсияИзменения) > 0 Тогда
				ПоследниеИзменения.Удалить(Индекс);
				ОбновитьСоставИзменений = Истина;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Если ОбновитьСоставИзменений Тогда
			УстановитьПараметрРаботыПрограммы(
				ИмяКонстанты,
				ИмяПараметраХраненияИзменений,
				Новый ХранилищеЗначения(ПоследниеИзменения));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Общего назначения

// Для внутреннего использования.
//
Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) Экспорт
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных < ВерсияМетаданных;
КонецФункции

// Возвращает числовой вес версии для сравнения версий между собой
//
// Параметры:
//  Версия - Строка - Версия в строковом формате
//
// Возвращаемое значение:
//  Число - вес версии
//
Функция ВесВерсии(Знач Версия) Экспорт
	
	Возврат ВесВерсииИзМассиваСтрок(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, "."));
	
КонецФункции

// Для внутреннего использования.
//
Функция ИтерацииОбновления() Экспорт
	
	ИмяОсновнойПодсистемы = Метаданные.Имя;
	ИтерацияОбновлениеОсновнойПодсистемы = Неопределено;
	
	ИтерацииОбновления = Новый Массив;
	ОписанияПодсистем  = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	Для каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		
		ИтерацияОбновления = Новый Структура;
		ИтерацияОбновления.Вставить("Подсистема",  ОписаниеПодсистемы.Имя);
		ИтерацияОбновления.Вставить("Версия",      ОписаниеПодсистемы.Версия);
		ИтерацияОбновления.Вставить("Обработчики", НоваяТаблицаОбработчиковОбновления());
		ИтерацияОбновления.Вставить("ВыполненныеОбработчики", Неопределено);
		ИтерацияОбновления.Вставить("ОсновнойСерверныйМодуль", Модуль);
		ИтерацияОбновления.Вставить("ПредыдущаяВерсия", ВерсияИБ(ОписаниеПодсистемы.Имя));
		ИтерацииОбновления.Добавить(ИтерацияОбновления);
		
		Модуль.ПриДобавленииОбработчиковОбновления(ИтерацияОбновления.Обработчики);
		
		Если ОписаниеПодсистемы.Имя = ИмяОсновнойПодсистемы Тогда
			ИтерацияОбновлениеОсновнойПодсистемы = ИтерацияОбновления;
		КонецЕсли;
	КонецЦикла;
	
	// Для обратной совместимости.
	Если ИтерацияОбновлениеОсновнойПодсистемы = Неопределено Тогда
		
		ИтерацияОбновления = Новый Структура;
		ИтерацияОбновления.Вставить("Подсистема",  ИмяОсновнойПодсистемы);
		ИтерацияОбновления.Вставить("Версия",      Метаданные.Версия);
		ИтерацияОбновления.Вставить("Обработчики", ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления());
		ИтерацияОбновления.Вставить("ВыполненныеОбработчики", Неопределено);
		ИтерацияОбновления.Вставить("ОсновнойСерверныйМодуль", ОбновлениеИнформационнойБазыПереопределяемый);
		ИтерацияОбновления.Вставить("ПредыдущаяВерсия", ВерсияИБ(ИмяОсновнойПодсистемы));
		ИтерацииОбновления.Добавить(ИтерацияОбновления);
		
	КонецЕсли;
	
	Возврат ИтерацииОбновления;
	
КонецФункции

// Проверить права текущего пользователя на выполнение обновления информационной базы.
Функция ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим = Истина, РазделенныеДанные = Неопределено) Экспорт
	
	ПроверятьПраваАдминистрированияСистемы = Истина;
	
	Если РазделенныеДанные = Неопределено Тогда
		РазделенныеДанные = НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
			ИЛИ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И РазделенныеДанные Тогда
		
		Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Возврат Ложь;
		КонецЕсли;
		ПроверятьПраваАдминистрированияСистемы = Ложь;
	КонецЕсли;
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(
		, ПроверятьПраваАдминистрированияСистемы, УчитыватьПривилегированныйРежим);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновления

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает строковую константу для формирования сообщений журнала регистрации
// протоколирования хода выполнения обработчиков обновления.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрацииПротокол() Экспорт
	
	Возврат СобытиеЖурналаРегистрации() + ". " + НСтр("ru = 'Протокол выполнения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Описание обновлений

// Формирует табличный документ с описанием изменений в версиях,
// которые соответствуют переданному списку версий Разделы.
//
Функция ДокументОписаниеОбновлений(Знач Разделы) Экспорт
	
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент();
	Если Разделы.Количество() = 0 Тогда
		Возврат ДокументОписаниеОбновлений;
	КонецЕсли;
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		МакетОписаниеОбновлений = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
	Иначе
		Возврат Новый ТабличныйДокумент();
	КонецЕсли;
	
	Для Каждого Версия Из Разделы Цикл
		
		ВывестиОписаниеИзменений(Версия, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
	КонецЦикла;
	
	Возврат ДокументОписаниеОбновлений;
	
КонецФункции

// Возвращает массив версий больше последней отображавшейся версии,
// для которых есть описания изменений системы.
//
// Возвращаемое значение:
//  Массив - содержит строки с версиями
//
Функция НеотображавшиесяРазделыОписанияИзменений() Экспорт
	
	Разделы = РазделыОписанияИзменений();
	
	ПоследняяВерсия = ПоследняяВерсияОтображенияИзмененийСистемы();
	
	Если ПоследняяВерсия = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ПолучитьВерсииБольшеЗаданной(Разделы, ПоследняяВерсия);
	
КонецФункции

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийПоТекущуюВерсию(Знач ИмяПользователя = Неопределено) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы", Метаданные.Версия, , ИмяПользователя);
	
КонецПроцедуры

// Устанавливает флаг отображения описаний изменений версий по
// текущую версию включительно, если для пользователя флаг не 
// был установлен ранее.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя, для которого
//   необходимо установить флаг.
//
Процедура УстановитьФлагОтображенияОписанийДляНовогоПользователя(Знач ИмяПользователя = Неопределено) Экспорт
	
	Если ПоследняяВерсияОтображенияИзмененийСистемы(ИмяПользователя) = Неопределено Тогда
		УстановитьФлагОтображенияОписанийПоТекущуюВерсию(ИмяПользователя);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики при запуске системы для подсистемы обмена данными в модели сервиса
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	
	Параметры.Вставить("НачальноеЗаполнениеДанных", НачальноеЗаполнениеДанных());
	Параметры.Вставить("ПоказатьОписаниеИзмененийСистемы", ПоказатьОписаниеИзмененийСистемы());
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазы.ПеренестиВерсииПодсистемВНеразделенныеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Определяет используется ли в конфигурации подсистема
// "Завершение работы пользователей"
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияПодсистемыЗавершениеРаботыПользователей(Используется)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Снимает блокировку информационной файловой базы.
//
Процедура ПриСнятииБлокировкиФайловойБазы() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("СоединенияИБ");
		Модуль.ПриСнятииБлокировкиФайловойБазы();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Переносит данные из регистра сведений УдалитьВерсииПодсистем в регистр
//  сведений ВерсииПодсистем
Процедура ПеренестиВерсииПодсистемВНеразделенныеДанные() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ОбластьДляОбщихДанных = -1;
		Иначе
			ОбластьДляОбщихДанных = 0;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УдалитьВерсииПодсистем.ИмяПодсистемы,
		|	УдалитьВерсииПодсистем.Версия,
		|	УдалитьВерсииПодсистем.ПланОбновления
		|ИЗ
		|	РегистрСведений.УдалитьВерсииПодсистем КАК УдалитьВерсииПодсистем
		|ГДЕ
		|	УдалитьВерсииПодсистем.ОбластьДанных = &ОбластьДанных";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДляОбщихДанных);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Менеджер = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
			Менеджер.ИмяПодсистемы = Выборка.ИмяПодсистемы;
			Менеджер.Версия = Выборка.Версия;
			Менеджер.ПланОбновления = Выборка.ПланОбновления;
			Менеджер.Записать();
			
		КонецЦикла;
		
		Набор = РегистрыСведений.УдалитьВерсииПодсистем.СоздатьНаборЗаписей();
		Набор.Отбор.ОбластьДанных.Установить(ОбластьДляОбщихДанных);
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Общего назначения

Функция ВозможноОперативноеОбновление(ИтерацииОбновления)
	
	ФильтрыРазделенностиОбработчиков = Новый Массив;
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ФильтрыРазделенностиОбработчиков.Добавить(Ложь);
	КонецЕсли;
	ФильтрыРазделенностиОбработчиков.Добавить(Истина);
	
	ОбязательныеРазделенныеОбработчики = НоваяТаблицаОбработчиковОбновления(); // В режиме проверки параметр не используется
	
	ЗаписыватьВЖурнал = Константы.ДетализироватьОбновлениеИБВЖурналеРегистрации.Получить();
	
	// Проверяем обработчики обновления с флагом МонопольныйРежим для подсистем конфигурации.
	Для каждого ИтерацияОбновления Из ИтерацииОбновления Цикл
		
		Для каждого ФлагРазделенности Из ФильтрыРазделенностиОбработчиков Цикл
		
			ДеревоОбработчиков = ОбработчикиОбновленияВИнтервале(ИтерацияОбновления.Обработчики,
				ИтерацияОбновления.ПредыдущаяВерсия,
				ИтерацияОбновления.Версия,
				ФлагРазделенности,
				Истина);
				
			Если ДеревоОбработчиков.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
				
			Если ДеревоОбработчиков.Строки.Количество() > 1 
				ИЛИ ДеревоОбработчиков.Строки[0].Версия <> "*" Тогда
				
				Возврат Ложь; // Есть монопольные обработчики обновления на версию
			КонецЕсли;
			
			Если ФлагРазделенности 
				И ОбщегоНазначенияПовтИсп.РазделениеВключено() 
				И НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
				
				// При обновлении неразделенной версии ИБ, для разделенных обязательных
				// обработчиков обновления монопольным режимом управляет неразделенный обработчик
				Продолжить;
			КонецЕсли;
			
			Если ДеревоОбработчиков.Строки[0].Строки.НайтиСтроки(
					Новый Структура("МонопольныйРежим", Неопределено)).Количество() > 0 Тогда
					
				Возврат Ложь; // Есть обязательные обработчики с безусловным монопольным режимом
			КонецЕсли;
			
			// Вызов обязательных обработчиков обновления в режиме проверки
			Для каждого Обработчик Из ДеревоОбработчиков.Строки[0].Строки Цикл
				Если Обработчик.ВерсияРегистрации <> "*" Тогда
					Возврат Ложь; // Есть монопольные обработчики обновления на версию
				КонецЕсли;
				
				ПараметрыОбработчика = Новый Структура;
				Если Обработчик.УправлениеОбработчиками Тогда
					ПараметрыОбработчика.Вставить("РазделенныеОбработчики", ОбязательныеРазделенныеОбработчики);
				КонецЕсли;
				ПараметрыОбработчика.Вставить("МонопольныйРежим", Ложь);
				
				ВыполнитьОбработчикОбновления(ЗаписыватьВЖурнал, ИтерацияОбновления.Подсистема, Обработчик, ПараметрыОбработчика);
				
				Если ПараметрыОбработчика.МонопольныйРежим = Истина Тогда
					Возврат Ложь; // Требуется обновление в монопольном режиме
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоЗапускСПустымСпискомПользователей()
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтандартныеПодсистемыПовтИсп.ИмяТекущегоПриложения() <> "BackgroundJob" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
		Модуль.ПриУстановкеВерсииИБ(ИдентификаторБиблиотеки, НомерВерсии, СтандартнаяОбработка);
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИдентификаторБиблиотеки);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.ИмяПодсистемы = ИдентификаторБиблиотеки;
		НоваяЗапись.Версия = НомерВерсии;
		
		НаборЗаписей.Записать();
		
		Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда
			Константы.НомерВерсииКонфигурации.Установить(НомерВерсии);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьСтрокиВДерево(Знач СтрокиПриемника, Знач СтрокиИсточника, Знач СтруктураКолонок)
	
	Для каждого СтрокаИсточника Из СтрокиИсточника Цикл
		ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаИсточника);
		НайденныеСтроки = СтрокиПриемника.НайтиСтроки(СтруктураКолонок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		Иначе
			СтрокаПриемника = НайденныеСтроки[0];
		КонецЕсли;
		
		СкопироватьСтрокиВДерево(СтрокаПриемника.Строки, СтрокаИсточника.Строки, СтруктураКолонок);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПланОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияС, Знач ВерсияНа)
	
	МенеджерЗаписи = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяПодсистемы = ИдентификаторБиблиотеки;
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПлана = МенеджерЗаписи.ПланОбновления.Получить();
	Если ОписаниеПлана = Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Если ОписаниеПлана.ВерсияС <> ВерсияС
			ИЛИ ОписаниеПлана.ВерсияНа <> ВерсияНа Тогда
			
			// План устарел и не соответствует текущей версии
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ОписаниеПлана.План;
		
	КонецЕсли;
	
КонецФункции

// Отключает обработчики обновления, заполненные в процедуре
// ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьОтключаемыеОбработчикиОбновления.
//
// Параметры:
//  ИдентификаторБиблиотеки - Строка - имя конфигурации или идентификатор библиотеки.
//  ВыполняемыеОбработчики  - ДеревоЗначений - обработчики обновления ИБ.
//  ВерсияМетаданныхИБ      – Строка – версия метаданных. Отключаются только те обработчики
//                                     у которых версия совпадает с версией метаданных.
//
Процедура ОтключитьОбработчикиОбновления(ИдентификаторБиблиотеки, ВыполняемыеОбработчики, ВерсияМетаданных)
	
	ОтключаемыеОбработчики = Новый ТаблицаЗначений;
	ОтключаемыеОбработчики.Колонки.Добавить("ИдентификаторБиблиотеки");
	ОтключаемыеОбработчики.Колонки.Добавить("Процедура");
	ОтключаемыеОбработчики.Колонки.Добавить("Версия");
	
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьОтключаемыеОбработчикиОбновления(ОтключаемыеОбработчики);
	// Поиск строки дерева, содержащей обработчики обновления с версией "*"
	ОбработчикиБиблиотеки = ВыполняемыеОбработчики.Строки.Найти("*", "Версия", Ложь);
	
	Для Каждого ОтключаемыйОбработчик Из ОтключаемыеОбработчики Цикл
		
		// Проверка того, что отключаемый обработчик принадлежит переданной библиотеке
		Если ИдентификаторБиблиотеки <> ОтключаемыйОбработчик.ИдентификаторБиблиотеки Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка, находится ли обработчик в списке исключения
		ВыполняемыйОбработчик = ВыполняемыеОбработчики.Строки.Найти(ОтключаемыйОбработчик.Процедура, "Процедура", Истина);
		Если ВыполняемыйОбработчик <> Неопределено И ВыполняемыйОбработчик.Версия = "*"
			И ОтключаемыйОбработчик.Версия = ВерсияМетаданных Тогда
			ОбработчикиБиблиотеки.Строки.Удалить(ВыполняемыйОбработчик);
		ИначеЕсли ВыполняемыйОбработчик <> Неопределено И ВыполняемыйОбработчик.Версия <> "*"
			И ОтключаемыйОбработчик.Версия = ВерсияМетаданных Тогда
			ТекстИсключения = НСтр("ru='Обработчик обновления %1 не может быть отключен, 
										|так как он выполняется только при переходе на версию %2'");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения,
				ВыполняемыйОбработчик.Процедура, ВыполняемыйОбработчик.Версия);
			
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли ВыполняемыйОбработчик = Неопределено Тогда
			ТекстИсключения = НСтр("ru='Отключаемый обработчик обновления %1 не существует'");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения,
				ОтключаемыйОбработчик.Процедура);
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СледующаяВерсия(Версия)
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Возврат ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
		Версия) + "." + Формат(Число(Массив[3]) + 1, "ЧГ=");
	
	КонецФункции

Процедура ВыполнитьОбработчикОбновления(ЗаписыватьВЖурнал, ИдентификаторБиблиотеки, Обработчик, Параметры = Неопределено)
	
	Если ЗаписыватьВЖурнал Тогда
		ЗначениеНаНачало = Вычислить("ТекущаяУниверсальнаяДатаВМиллисекундах()"); // для возможности запуска на 8.2.16
	КонецЕсли;
	
	Если Параметры <> Неопределено Тогда
		ПараметрыОбработчика = Новый Массив;
		ПараметрыОбработчика.Добавить(Параметры);
	Иначе
		ПараметрыОбработчика = Неопределено;
	КонецЕсли;
	
	ТранзакцияАктивнаНаНачалоВыполнения = ТранзакцияАктивна();
	
	Попытка
		ОбщегоНазначения.ВыполнитьБезопасно(Обработчик.Процедура, ПараметрыОбработчика);
	Исключение
		ИмяОбработчика = Обработчик.Процедура + "(" + ?(ПараметрыОбработчика = Неопределено, "", "Параметры") + ")";
		ЗаписатьОшибку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При вызове обработчика обновления:
			           |""%1""
			           |произошла ошибка:
			           |""%2"".'"),
			ИмяОбработчика,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТранзакцияАктивнаНаНачалоВыполнения Тогда
		Если ТранзакцияАктивна() Тогда
			// Проверка поглощенных исключений в обработчиках
			Попытка
				Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
			Исключение
				ШаблонКомментария = НСтр("ru = 'При выполнении обработчика обновления %1
					|было поглощено исключение в транзакции.'");
				Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, Обработчик.Процедура);
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации() + ". " + НСтр("ru = 'Выполнение обработчиков'"),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
				ВызватьИсключение(Комментарий);
			КонецПопытки;
		Иначе
			ШаблонКомментария = НСтр("ru = 'При выполнении обработчика обновления %1
				|была завершена внешняя транзакция.'");
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, Обработчик.Процедура);
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации() + ". " + НСтр("ru = 'Выполнение обработчиков'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				Комментарий);
			ВызватьИсключение(Комментарий);
		КонецЕсли;
	Иначе
		Если ТранзакцияАктивна() Тогда
			ШаблонКомментария = НСтр("ru = 'При выполнении обработчика обновления %1
				|открытая внутри транзакция не была завершена.'");
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, Обработчик.Процедура);
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации() + ". " + НСтр("ru = 'Выполнение обработчиков'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				Комментарий);
			ВызватьИсключение(Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗаписыватьВЖурнал Тогда
		Возврат;
	КонецЕсли;
	
	Длительность = Вычислить("ТекущаяУниверсальнаяДатаВМиллисекундах()") - ЗначениеНаНачало;    // для возможности запуска на 8.2.16
	
	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("Библиотека", ИдентификаторБиблиотеки);
	ОписаниеОбработчика.Вставить("Версия", Обработчик.Версия);
	ОписаниеОбработчика.Вставить("ВерсияРегистрации", Обработчик.ВерсияРегистрации);
	ОписаниеОбработчика.Вставить("Процедура", Обработчик.Процедура);
	ОписаниеОбработчика.Вставить("Длительность", Длительность / 1000); // В секундах
	ОписаниеОбработчика.Вставить("Параметры", Параметры);
	
	Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация()
		И ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		
		ОписаниеОбработчика.Вставить("ОбластьДанныхЗначение", ОбщегоНазначения.ЗначениеРазделителяСеанса());
		ОписаниеОбработчика.Вставить("ОбластьДанныхИспользование", Истина);
		
	Иначе
		
		ОписаниеОбработчика.Вставить("ОбластьДанныхЗначение", -1);
		ОписаниеОбработчика.Вставить("ОбластьДанныхИспользование", Ложь);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииПротокол(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеОбработчика));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновления

Процедура ЗаписатьИнформацию(Знач Текст)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Описание обновлений

// Вывести описания изменений в указанной версии
//
// Параметры
//  НомерВерсии  – Строка - номер версии, для которого выводится описание из макета
//                          табличного документа МакетОписаниеОбновлений в табличный документ 
//                          ДокументОписаниеОбновлений.
//
Процедура ВывестиОписаниеИзменений(Знач НомерВерсии, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	Номер = СтрЗаменить(НомерВерсии, ".", "_");
	
	Если МакетОписаниеОбновлений.Области.Найти("Шапка" + Номер) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + Номер));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + Номер);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + Номер));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры

// Возвращает Истина, если у пользователя не отключен показ описания изменений
// системы после обновления и есть непоказанные изменения.
//
Функция ПоказатьОписаниеИзмененийСистемы()
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		// Анонимным пользователям новое в версии не показываем
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоследняяВерсия = ПоследняяВерсияОтображенияИзмененийСистемы();
	Если ПоследняяВерсия = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Разделы = РазделыОписанияИзменений();
	
	Если Разделы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоследняяВерсия = Неопределено Тогда
		Возврат Разделы.Количество() > 0;
	Иначе
		Возврат ПолучитьВерсииБольшеЗаданной(Разделы, ПоследняяВерсия).Количество() > 0;
	КонецЕсли;
		
КонецФункции

Функция ПоследняяВерсияОтображенияИзмененийСистемы(Знач ИмяПользователя = Неопределено)
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	ПоследняяВерсия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ",
		"ПоследняяВерсияОтображенияИзмененийСистемы", , , ИмяПользователя);
	
	Возврат ПоследняяВерсия;
	
КонецФункции

// Получает список версий из общего макета ОписаниеИзмененийСистемы и сохраняет его
// в константе РазделыОписанияИзмененийСистемы.
//
Процедура ОбновитьРазделыОписанияИзменений()
	
	Разделы = Новый СписокЗначений;
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		ПредикатВерсии = "Версия";
		ПредикатШапки = "Шапка";
		Макет = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
		
		Для каждого Область Из Макет.Области Цикл
			Если Найти(Область.Имя, ПредикатВерсии) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВерсияВФорматеОписания = Сред(Область.Имя, СтрДлина(ПредикатВерсии) + 1);
			
			Если Макет.Области.Найти(ПредикатШапки + ВерсияВФорматеОписания) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РазрядыВерсииСтроками = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсияВФорматеОписания, "_");
			Если РазрядыВерсииСтроками.Количество() <> 4 Тогда
				Продолжить;
			КонецЕсли;
			
			ВесВерсии = ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками);
			
			Версия = ""
				+ Число(РазрядыВерсииСтроками[0]) + "."
				+ Число(РазрядыВерсииСтроками[1]) + "."
				+ Число(РазрядыВерсииСтроками[2]) + "."
				+ Число(РазрядыВерсииСтроками[3]);
				
			Разделы.Добавить(ВесВерсии, Версия);
		КонецЦикла;
		
		Разделы.СортироватьПоЗначению();
	КонецЕсли;
	
	Константы.РазделыОписанияИзмененийСистемы.Установить(Новый ХранилищеЗначения(Разделы));
	
КонецПроцедуры

// Возвращает список разделов описания изменений системы.
//
// Возвращаемое значение:
//  СписокЗначение - Значение - вес версии (число), 
//    Представление - строка версии
//
Функция РазделыОписанияИзменений()
	
	Возврат Константы.РазделыОписанияИзмененийСистемы.Получить().Получить();
	
КонецФункции

Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции

Функция ПолучитьВерсииБольшеЗаданной(Разделы, Версия)
	
	Результат = Новый Массив;
	
	ВесВерсии = ВесВерсии(Версия);
	Для каждого ЭлементСписка Из Разделы Цикл
		Если ЭлементСписка.Значение <= ВесВерсии Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина при необходимости обновления конфигурации информационной базы подчиненного узла РИБ.
// В главном узле всегда - Ложь.
//
Функция ТребуетсяОбновлениеКонфигурацииУзлаРИБ() Экспорт
	
	Возврат КонфигурацияИзменена() И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	
КонецФункции

// Обновление ИБ будет выполнено вне зависимости от изменения версии конфигурации.
//
// Если версия конфигурации не изменилась, будут выполнены только обязательные
// обработчики обновления (у которых версия = "*").
// 
// Необходимость снимается автоматически после обновления ИБ.
//
// Не используется в модели сервиса.
//
Процедура УстановитьНеобходимостьОбновленияИнформационнойБазы() Экспорт
	
	Константы.ЗапуститьОбновлениеИнформационнойБазы.Установить(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента);
	
КонецПроцедуры

// Используется для получения объектов метаданных обязательных для плана обмена.
// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбязательныхОбъектовПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые не следует включать в состав плана обмена.
// Если подсистема имеет объекты метаданных, которые не следует включать в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые не следует включать в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов-исключений плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбъектовИсключенийПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		Объекты.Добавить(Метаданные.Константы.ЗапуститьОбновлениеИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.РегистрыСведений.ВерсииПодсистем);
	
КонецПроцедуры

// Возвращает Истина, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав.
//
Функция ПроверитьНевозможностьОбновленияИнформационнойБазы(УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Сообщение = "";
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если УчитыватьПривилегированныйРежим Тогда
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	Иначе
		ЕстьПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ);
	КонецЕсли;
	
	СообщениеАдминистраторуСистемы =
		НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
		           |Для завершения обновления конфигурации требуются административные права
		           |(роли ""Администратор системы"" и ""Полные права"").'");
	
	Если НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		
		СообщениеАдминистраторуОбластиДанных =
			НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
			           |Обратитесь к администратору сервиса за подробностями.'");
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Сообщение = СообщениеАдминистраторуОбластиДанных;
			
		ИначеЕсли НЕ ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим, Ложь) Тогда
			
			Если ЕстьПравоАдминистрирование Тогда
				Сообщение = СообщениеАдминистраторуСистемы;
			Иначе
				Сообщение = СообщениеАдминистраторуОбластиДанных;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
	      ИЛИ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Если НеобходимоОбновлениеИнформационнойБазы()
		   И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы(УчитыватьПривилегированныйРежим, Истина) Тогда
			
			ЭтоЗапускСПустымСпискомПользователей = ЭтоЗапускСПустымСпискомПользователей();
			
			Если ПривилегированныйРежим()
			   И НЕ УчитыватьПривилегированныйРежим
			   И ЭтоЗапускСПустымСпискомПользователей Тогда
				Возврат ""; // Возможно, использован параметр запуска UsePrivilegedMode.
			КонецЕсли;
			
			Если ЭтоЗапускСПустымСпискомПользователей Тогда
				// Сообщение администратору системы при пустом списке пользователей.
				Сообщение =
					НСтр("ru = 'Для завершения обновления версии конфигурации требуются административные права.
					           |Необходимо добавить в список пользователей информационной базы учетную запись
					           |администратора с двумя ролями ""Администратор системы"" и ""Полные права"",
					           |и повторить запуск программы от его имени.
					           |
					           |Для перехода к списку пользователей информационной базы необходимо открыть Конфигуратор и
					           |воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
			Иначе
				Если ЕстьПравоАдминистрирование Тогда
					Сообщение = СообщениеАдминистраторуСистемы;
				Иначе
					Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
						// Сообщение пользователю сервиса.
						Сообщение =
							НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
							           |Обратитесь к администратору за подробностями.'");
					Иначе
						// Сообщение пользователю локального режима.
						Сообщение =
							НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации.
							           |Обратитесь к администратору за подробностями.'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить, то
// - предлагает завершить работу системы (в режиме клиента);
// - выбрасывает исключение с описанием ошибки (в режиме внешнего соединения).
//
// Вызывается в режиме клиента или внешнего соединения.
//
// Параметры:
//  Нет.
//
Функция ОбновитьИнформационнуюБазу() Экспорт
	Перем ВыполненноСОшибками;
	ВыполненноСОшибками = Ложь;

	// Проверка необходимости обновления информационной базы.
	НомерВерсии = Константы.НомерВерсииКонфигурации.Получить();
	ПервыйЗапуск = (НомерВерсии = "");

	Если НЕ (НЕ ПустаяСтрока(Метаданные.Версия)
		И НомерВерсии <> Метаданные.Версия) Тогда
		Возврат ВыполненноСОшибками;
	КонецЕсли;
	
	#Если Клиент Тогда
	// Проверка легальности получения обновления.
	Если НЕ ПроверкаЛегальностиПолученияОбновленияКлиент.ПроверитьЛегальностьПолученияОбновленияПриЗапуске() Тогда
		ВыполненноСОшибками = Истина;
		Возврат ВыполненноСОшибками;
	КонецЕсли;
	#КонецЕсли

	БазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);

	// Установка монопольного режима для обновления информационной базы.
	Если НЕ БазоваяПоставка Тогда
		// Проверка наличия прав для обновления информационной базы.
		Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
		 ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
		 ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.ОбновлениеИнформационнойБазы) Тогда
			ВыполненноСОшибками = Истина;
			ТекстСообщения = "Недостаточно прав для выполнения обновления. Работа системы будет завершена.";
			#Если Клиент Тогда
			Предупреждение(ТекстСообщения);
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
			#Иначе
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
			#КонецЕсли
			Возврат ВыполненноСОшибками;
		КонецЕсли;

		// Установка монопольного режима для обновления информационной базы.
		Попытка
			УстановитьМонопольныйРежим(Истина);
		Исключение
			ВыполненноСОшибками = Истина;
			#Если Клиент Тогда
			Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
			#Иначе
			ТекстСообщения = "Не удалось установить монопольный режим. Работа системы завершена.";
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			ВызватьИсключение;
			#КонецЕсли
			Возврат ВыполненноСОшибками;
		КонецПопытки;

	КонецЕсли;

	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	// Откючение монопольного режима.
	Если НЕ БазоваяПоставка Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
		#Если Клиент Тогда
		Действие = ?(ПервыйЗапуск, "начальное заполнение", "обновление");
		
		Сообщить("Не выполнено " + Действие + " информационной базы .", СтатусСообщения.Важное);

		Текст = "Не выполнено " + Действие + " информационной базы! Завершить работу системы?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
			ЗавершитьРаботуСистемы();
			ВыполненноСОшибками = Истина;
		КонецЕсли;
		#Иначе
		ТекстСообщения = "Не выполнено обновление информационной базы. Работа системы завершена.";
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		#КонецЕсли
	Иначе
		ТекстСообщения = "Обновление информационной базы выполнено успешно.";
		#Если Клиент Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		#Иначе
		ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		#КонецЕсли
	КонецЕсли;
	возврат ВыполненноСОшибками;

КонецФункции

// Возвращает Истина если вход в программу (область данных)
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйВходВОбластьДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса") Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса");
		Модуль.ПриОпределенииПервогоВходаВОбластьДанных(СтандартнаяОбработка, Результат);
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	1
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";
		Результат = Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
