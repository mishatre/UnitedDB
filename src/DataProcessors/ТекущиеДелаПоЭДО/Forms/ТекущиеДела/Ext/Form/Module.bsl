
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

	ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	ИнициализироватьДерево();
	
	Если НЕ ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаПодписать.Заголовок = Нстр("ru = 'Подписать'");
		Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить и подписать'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить, подписать и подготовить к отправке
																	|выделенные электронные документы'");
		Если НЕ ИспользоватьЭП Тогда
			Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить и подготовить к отправке
																		|выделенные электронные документы'");
		КонецЕсли;
	ИначеЕсли НЕ ИспользоватьЭП Тогда
		Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить и отправить'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить и отправить
																	|выделенные электронные документы'");
	КонецЕсли;

	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	СформироватьТаблицуБыстрогоОтбора();
	
	Элементы.СтраницаПодписать.Видимость = ИспользоватьЭП;
		
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Отборы.Количество() > 0 Тогда
		УстановитьОтборыДинамическихСписков(ЭтаФорма, Отборы);
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь) Тогда
		Элементы.ОтправитьПакеты.Видимость                              = Ложь;
		Элементы.КомандаПодписать.Видимость                             = Ложь;
		Элементы.КомандаУтвердитьЭД.Видимость                           = Ложь;
		Элементы.ОтправитьИПолучитьЭД.Видимость                         = Ложь;
		Элементы.ТаблицаСформироватьЭД.Видимость                        = Ложь;
		Элементы.РаспаковатьВыделенныеПакеты.Видимость                  = Ложь;
		Элементы.СформироватьПодписатьИОтправить.Видимость              = Ложь;
		Элементы.СформироватьЗакрытьПринудительно.Видимость             = Ложь;
		Элементы.ПодписатьУстановитьОтветственного.Видимость            = Ложь;
		Элементы.УтвердитьУстановитьОтветственного.Видимость            = Ложь;
		Элементы.ОбработатьУстановитьОтветственного.Видимость           = Ложь;
		Элементы.НаКонтролеУстановитьОтветственного.Видимость           = Ложь;
		Элементы.НаУточненииУстановитьОтветственного.Видимость          = Ложь;
		Элементы.НаИсправленииУстановитьОтветственного.Видимость        = Ложь;
		Элементы.КомандаСформироватьПодписатьИОтправить.Видимость       = Ложь;
		Элементы.НеизвестныеПакетыУстановитьСтатусОтменен.Видимость     = Ложь;
		Элементы.НеотправленныеПакетыУстановитьСтатусОтменен.Видимость  = Ложь;
		Элементы.НераспакованныеПакетыУстановитьСтатусОтменен.Видимость = Ложь;
	КонецЕсли;
	
	ИмяПлатежногоПоручения = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																		"ПлатежноеПоручениеВМетаданных");
	
	МассивТиповДокументов = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.СсылкаНаОбъект.Тип.Типы();
	МассивДоступныхДокументов = Новый Массив;
	Для Каждого Элемент Из МассивТиповДокументов Цикл
		ДокументСсылка = Новый(Элемент);
		Имя = ДокументСсылка.Метаданные().Имя;
		Если Имя = "ПроизвольныйЭД" ИЛИ Имя = "ПакетЭД" ИЛИ Имя = "СоглашенияОбИспользованииЭД"
			ИЛИ Врег(Имя) = Врег(ИмяПлатежногоПоручения) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравоДоступа("Просмотр", Метаданные.Документы[Имя]) Тогда
			МассивДоступныхДокументов.Добавить(Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДоступныхДокументов.Количество() > 0 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияЭД.СсылкаНаОбъект КАК Документ,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПРАВОЕ СОЕДИНЕНИЕ (&Подзапрос) КАК ВложенныйЗапрос
		|		ПО СостоянияЭД.СсылкаНаОбъект = ВложенныйЗапрос.Ссылка
		|ГДЕ
		|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)";
		
		ТекстПодзапроса = "";
		ПервыйЭлемент = Истина;
		Для Каждого ТипДокумента Из МассивДоступныхДокументов Цикл
			
			ШаблонТекстПодзапроса =
			"ВЫБРАТЬ
			|	ТипДокумента.Ссылка КАК Ссылка,
			|	ТипДокумента.Организация КАК Организация,
			|	ТипДокумента.Контрагент КАК Контрагент,
			|	ТипДокумента.СуммаДокумента КАК СуммаДокумента,
			|	ТипДокумента.Дата КАК Дата
			|ИЗ
			|	Документ.ТипДокумента КАК ТипДокумента
			|ГДЕ
			|	НЕ ТипДокумента.ПометкаУдаления";
			
			Если Не ПервыйЭлемент Тогда
				ТекстПодзапроса = ТекстПодзапроса + "
				| ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			ПервыйЭлемент = Ложь;
			
			ПрикладноеПредставлениеОрганизация = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				ТипДокумента + "." + "Организация");
			Если ЗначениеЗаполнено(ПрикладноеПредставлениеОрганизация) Тогда
				ШаблонТекстПодзапроса = СтрЗаменить(
					ШаблонТекстПодзапроса, "ТипДокумента.Организация", ПрикладноеПредставлениеОрганизация);
			КонецЕсли;
			
			ПрикладноеПредставлениеКонтрагент = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				ТипДокумента + "." + "Контрагент");
			Если ЗначениеЗаполнено(ПрикладноеПредставлениеКонтрагент) Тогда
				ШаблонТекстПодзапроса = СтрЗаменить(
					ШаблонТекстПодзапроса, "ТипДокумента.Контрагент", ПрикладноеПредставлениеКонтрагент);
			КонецЕсли;
				
			ПрикладноеПредставлениеСуммаДокумента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				ТипДокумента + "." + "СуммаДокумента");
			Если ЗначениеЗаполнено(ПрикладноеПредставлениеСуммаДокумента) Тогда
				ШаблонТекстПодзапроса = СтрЗаменить(
					ШаблонТекстПодзапроса, "ТипДокумента.СуммаДокумента", ПрикладноеПредставлениеСуммаДокумента);
			КонецЕсли;
			
			ТекстПодзапроса = ТекстПодзапроса + СтрЗаменить(ШаблонТекстПодзапроса, "ТипДокумента", ТипДокумента);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подзапрос", ТекстПодзапроса);
		Сформировать.ТекстЗапроса = ТекстЗапроса;
	
	КонецЕсли;
	
	Для Каждого Страница ИЗ Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		НазваниеСписка = СтрЗаменить(Страница.Имя, "Страница", "");
		Запросы.Добавить(НазваниеСписка, ЭтаФорма[НазваниеСписка].ТекстЗапроса);
		
	КонецЦикла;
	
	ОбновитьДанныеДерева(Запросы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	ПриИзмененииОтбора();
	
	ЭлектронныеДокументыСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьОтборы(ИмяФормы, "Отборы", БыстрыеОтборы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	УстановитьОтборы();
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		ДанныеВыбора = СписокАктуальныхВидовЭД();
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + Элемент.ТекущиеДанные.Значение];
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ОбновитьДинамическиеСписки();
	ТекущийЭлемент = Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")];
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьОтборы();
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Утвердить

&НаКлиенте
Процедура УтвердитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Исправить

&НаКлиенте
Процедура ИсправитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Подписать

&НаКлиенте
Процедура ПодписатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Обработать

&НаКлиенте
Процедура ОбработатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Сформировать

&НаКлиенте
Процедура СформироватьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НаКонтроле

&НаКлиенте
Процедура НаКонтролеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Приглашения

&НаКлиенте
Процедура ПриглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТребуетсяПригласить

&НаКлиенте
Процедура ТребуетсяПригласитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЖдемСогласие

&НаКлиенте
Процедура ЖдемСогласияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТребуетсяСогласие

&НаКлиенте
Процедура ТребуетсяСогласиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	Действие = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	Элементы[Действие].Обновить();
	ОбновитьДанныеДереваНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокумент(Команда)
	
	Если Элементы.Сформировать.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(Элементы.Сформировать.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеотправленныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Отправить.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНераспакованныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Распаковать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеизвестныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Разобрать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.РаспаковатьМассивПакетовЭД(Элементы.Распаковать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.Сформировать.ВыделенныеСтроки);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьУтвердитьПодписатьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.Сформировать.ВыделенныеСтроки);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьПоказать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	МассивСсылок = МассивСсылокНаВладельцевЭД(Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")].ВыделенныеСтроки);
	ЭлектронныеДокументыКлиент.ЗакрытьПринудительноЭДО(МассивСсылок);
	
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(Элементы.Утвердить.ВыделенныеСтроки, "УтвердитьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	ПодписатьИОтправить(Элементы.Подписать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)
	
	ПодписатьИОтправить(Элементы.Обработать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакеты(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронныеДокументыСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																										"РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СоотвСоглашенийИСтруктурСертификатов = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации();
	
	КоличествоОтправленных = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(
													Элементы.Отправить.ВыделенныеСтроки,
													СоотвСоглашенийИСтруктурСертификатов);

	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Отправка электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ТребуетсяПригласить.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейНастроекЭДОМаркерам = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(
		МассивПрофилейНастроекЭДО);
	Если ЗначениеЗаполнено(СоответствиеПрофилейНастроекЭДОМаркерам) Тогда
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений получателям'");
		
		ОтправленоПриглашений = 0;
		ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам);
		
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОтправленоПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru = 'При отправке приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ТребуетсяСогласие.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейНастроекЭДОМаркерам = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(
		МассивПрофилейНастроекЭДО);
	Если ЗначениеЗаполнено(СоответствиеПрофилейНастроекЭДОМаркерам) Тогда
		ТекстЗаголовка = НСтр("ru = 'Принимаются приглашения'");
		
		КоличествоПринятыхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, Истина);
		
		ШаблонСообщения = НСтр("ru = 'Принято приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПринятыхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru = 'При принятии приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ТребуетсяСогласие.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейНастроекЭДОМаркерам = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(
		МассивПрофилейНастроекЭДО);
	Если ЗначениеЗаполнено(СоответствиеПрофилейНастроекЭДОМаркерам) Тогда
		ТекстЗаголовка = НСтр("ru = 'Отклоняются приглашения'");
		
		КоличествоОтклоненныхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоОтклоненныхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, Ложь);
		
		ШаблонСообщения = НСтр("ru = 'Отклонено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоОтклоненныхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru = 'При отклонении приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭДО(Команда)
	ЭлектронныеДокументыКлиент.ОткрытьФормуНастроекЭДОСКонтрагентами();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивЭДО(Команда)
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.АрхивЭлектронныхДокументов");
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ОбработатьПредложениеОбАннулировании(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОбработатьПредложениеОбАннулировании(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьИнструкциюПо1СБухфон();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	МассивСсылок = Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")].ВыделенныеСтроки;
	Для Каждого ЭД Из МассивСсылок Цикл
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(ЭД, ОтклонитьАннулирование);
	КонецЦикла;
	Если МассивСсылок.Количество() > 0 Тогда
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСсылокНаВладельцевЭД(Знач МассивВыделенныхСтрок)
	
	МассивСсылок = Новый Массив;
	Для Каждого Запись Из МассивВыделенныхСтрок Цикл
		Если ТипЗнч(Запись) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			МассивСсылок.Добавить(Запись.ВладелецФайла);
		Иначе
			МассивСсылок.Добавить(Запись.СсылкаНаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;

КонецФункции

&НаСервереБезКонтекста
Функция МассивДокументов(Знач МассивКлючей)
	
	МассивВозврата = Новый Массив;
	Для Каждого Запись Из МассивКлючей Цикл
		МассивВозврата.Добавить(Запись.СсылкаНаОбъект);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСумме(Форма, Значение, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Сформировать.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.НаКонтроле.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Утвердить.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Обработать.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Подписать.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Исправить.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Аннулировать.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДате(Форма, ЗначениеОтбора, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Подписать.Отбор, "Дата", ВидСравнения, ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Исправить.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Обработать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Утвердить.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Разобрать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.НаКонтроле.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Отправить.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Распаковать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Сформировать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Аннулировать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Отправить.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Аннулировать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоКонтрагенту(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Сформировать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Отправить.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Аннулировать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОрганизации(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Сформировать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Отправить.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Аннулировать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоВидуЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Аннулировать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоНаправлениюЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Аннулировать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДополнительнойИнформацииВСписке(Отбор, ЗначениеОтбора)
	
	ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы, "Доп. информация", ТипГруппы);
	
	ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Содержит;
	ПравоеЗначение             = ЗначениеОтбора;
	
	ИмяПоля                    = "ДополнительнаяИнформация";
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, ИмяПоля, ВидСравненияЭлементаОтбора, ПравоеЗначение);
	ИмяПоля                    = "ПричинаОтклонения";
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, ИмяПоля, ВидСравненияЭлементаОтбора, ПравоеЗначение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДополнительнойИнформации(Форма, ЗначениеОтбора)

	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Утвердить.Отбор, ЗначениеОтбора);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Исправить.Отбор, ЗначениеОтбора);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Подписать.Отбор, ЗначениеОтбора);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Обработать.Отбор, ЗначениеОтбора);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.НаКонтроле.Отбор, ЗначениеОтбора);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Аннулировать.Отбор, ЗначениеОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСписки()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСформировать Тогда
		Элементы.Сформировать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУтвердить Тогда
		Элементы.Утвердить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодписать Тогда
		Элементы.Подписать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработать Тогда
		Элементы.Обработать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИсправить Тогда
		Элементы.Исправить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАннулировать Тогда
		Элементы.Аннулировать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаКонтроле Тогда
		Элементы.НаКонтроле.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтправить Тогда
		Элементы.Отправить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспаковать Тогда
		Элементы.Распаковать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриглашения Тогда
		Элементы.Приглашения.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТребуетсяПригласить Тогда
		Элементы.ТребуетсяПригласить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЖдемСогласия Тогда
		Элементы.ЖдемСогласия.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТребуетсяСогласие Тогда
		Элементы.ТребуетсяСогласие.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДереваДействий(Знач ДеревоДействий, Запросы)
	
	Дерево = ДанныеФормыВЗначение(ДеревоДействий, Тип("ДеревоЗначений"));
	
	ДанныеОКоличествах = ДанныеОКоличествах(Запросы);
	
	ПредставлениеСтроки = НСтр("ru = 'Сформировать'");
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Сформировать", ПредставлениеСтроки, ДанныеОКоличествах[0]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Обработать", НСтр("ru = 'Обработать'"), ДанныеОКоличествах[1]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Утвердить", НСтр("ru = 'Утвердить'"), ДанныеОКоличествах[2]);

	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Подписать", НСтр("ru = 'Подписать'"), ДанныеОКоличествах[3]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Исправить", НСтр("ru = 'Исправить'"), ДанныеОКоличествах[4]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Аннулировать", НСтр("ru = 'Аннулировать'"), ДанныеОКоличествах[5]);

	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "НаКонтроле", НСтр("ru = 'На контроле'"), ДанныеОКоличествах[6]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Отправить", НСтр("ru = 'Отправить'"), ДанныеОКоличествах[7]);

	ПредставлениеСтроки = НСтр("ru = 'Распаковать'");
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Распаковать", ПредставлениеСтроки, ДанныеОКоличествах[8]);

	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Разобрать", НСтр("ru = 'Разобрать'"), ДанныеОКоличествах[9]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Приглашения", НСтр("ru = 'Приглашения'"), ДанныеОКоличествах[10]);
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "ТребуетсяПригласить", НСтр("ru = 'Требуется пригласить'"), ДанныеОКоличествах[11]);
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "ЖдемСогласия", НСтр("ru = 'Ждем согласия'"), ДанныеОКоличествах[12]);
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "ТребуетсяСогласие", НСтр("ru = 'Требуется согласие'"), ДанныеОКоличествах[13]);
	
	Возврат Дерево;

КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		Попытка
			Пакет = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОперации  = НСтр("ru = 'изменение статуса пакетов ЭД'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстОперации,
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Сформировать";
	СтрокаОбработать = Дерево.Строки.Добавить();
	СтрокаОбработать.Значение = "Обработать";
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Утвердить";
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаОбработать.Строки.Добавить();
		НовЗапись.Значение = "Подписать";
	КонецЕсли;
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Исправить";
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Аннулировать";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Отправить";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Распаковать";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Разобрать";
	СтрокаПриглашения = Дерево.Строки.Добавить();
	СтрокаПриглашения.Значение = "Приглашения";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяПригласить";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ЖдемСогласия";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяСогласие";
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, Значение, Представление, Количество)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПредставлениеСтрокДереваРекурсивно(Строка, Значение, Представление, Количество);
		КонецЕсли;
		
		Если Строка.Значение = Значение Тогда
			Строка.Представление = Представление + ?(Количество > 0, " (" + Количество + ")", "");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Организация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Организации");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Ответственный:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = Пользователи.АвторизованныйПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	УдалитьОтборыПоСумме();
	УдалитьОтборыПоДате();
	
	УстановитьОтборыДинамическихСписков(ЭтаФорма, БыстрыеОтборы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическихСписков(Форма, Отборы)
	
	Для Каждого СтрокаОтбора ИЗ Отборы Цикл
		Если СтрокаОтбора.Параметр = "Ответственный" Тогда
			УстановитьОтборПоОтветственному(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Контрагент" Тогда
			УстановитьОтборПоКонтрагенту(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Организация" Тогда
			УстановитьОтборПоОрганизации(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "НаправлениеЭД" Тогда
			УстановитьОтборПоНаправлениюЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "ВидЭД" Тогда
			УстановитьОтборПоВидуЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_С"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_По"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_С" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, НачалоДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_По" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, КонецДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "ДополнительнаяИнформация" Тогда
			УстановитьОтборПоДополнительнойИнформации(Форма, СтрокаОтбора.Значение);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоСумме()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Сформировать.Отбор, "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Обработать.Отбор,   "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(НаКонтроле.Отбор,   "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Подписать.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Утвердить.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Исправить.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Аннулировать.Отбор, "СуммаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоДате()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Сформировать.Отбор, "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Распаковать.Отбор,  "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Обработать.Отбор,   "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(НаКонтроле.Отбор,   "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Отправить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Разобрать.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Утвердить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Исправить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Подписать.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Аннулировать.Отбор, "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)
	
	Количество = 0;
	УстановитьСтатусПакетов(МассивЭД,
							ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен"),
							Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус пакетов на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(МассивЭД)
	
	ЭлектронныеДокументыСлужебныйКлиент.ИзменитьОтветственного(МассивЭД);
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАктуальныхВидовЭД()
	
	МассивАктуальныхЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	ИспользуетсяОбменСБанком = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДСБанками");
	Если НЕ ИспользуетсяОбменСБанком Тогда
		МассивИсключенияЭД = Новый Массив();
		МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ВыпискаБанка);
		МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ЗапросВыписки);
		МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ПлатежноеПоручение);
		МассивАктуальныхЭД = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивАктуальныхЭД, МассивИсключенияЭД);
	КонецЕсли;
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивАктуальныхЭД);
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для Каждого Строка ИЗ БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
			Прервать;
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеДерева(Знач Запросы)
	
	Дерево = ДанныеДереваДействий(ДеревоДействий, Запросы);
	
	Коллекция = ДеревоДействий.ПолучитьЭлементы();
	Коллекция.Очистить();
	
	Для Каждого Строка Из Дерево.Строки Цикл
		ЗаполнитьСтрокиРекурсивно(Коллекция, Строка);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиРекурсивно(Приемник, Знач Источник);
	
	НовСтрокаКоллекции = Приемник.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрокаКоллекции, Источник);
	Если Источник.Строки.Количество() > 0 Тогда
		Для Каждого Строка ИЗ Источник.Строки Цикл
			ЗаполнитьСтрокиРекурсивно(НовСтрокаКоллекции.ПолучитьЭлементы(), Строка);
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОКоличествах(Знач Запросы)
	
	ТекстЗапросаОбщий = "";
	
	Для Каждого ТекстЗапроса Из Запросы Цикл
		ТекстЗапросаОбщий = ТекстЗапросаОбщий + ТекстЗапроса + ";" + Символы.ПС;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбщий;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивРезультатов = Новый Массив;
	
	Для Каждого Выборка ИЗ РезультатЗапроса Цикл
		МассивРезультатов.Добавить(Выборка.Выбрать().Количество());
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеДереваНаКлиенте()
	
	ТекущаяСтрока = Элементы.ДеревоДействий.ТекущиеДанные.Значение;
	ОбновитьДанныеДерева(Запросы);
	ЭлементыДерева = ДеревоДействий.ПолучитьЭлементы();
	Для Каждого Элемент ИЗ ЭлементыДерева Цикл
		Если Элемент.Значение = ТекущаяСтрока Тогда
			Элементы.ДеревоДействий.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		Если Элемент.Значение = "Обработать" Тогда
			Элементы.ДеревоДействий.Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		ПодчиненныеЭлементыСтроки = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыСтроки.Количество() > 0 Тогда
			Для Каждого ПодчиненныйЭлемент ИЗ ПодчиненныеЭлементыСтроки Цикл
				Если ПодчиненныйЭлемент.Значение = ТекущаяСтрока Тогда
					Элементы.ДеревоДействий.ТекущаяСтрока = ПодчиненныйЭлемент.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоответствиеСоглашенийИСоответствийСертификатовИСтруктур(МассивЭД, МассивСтруктурСертификатов, СоответствиеСоглашенийМассиваЭД)

	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
	КонецЕсли;
	
	Соответствие = Новый Соответствие;
	Для Каждого ЭД Из МассивЭД Цикл
		Если Соответствие.Получить(ЭД.СоглашениеЭД) = Неопределено Тогда
			МассивЭДПоСоглашению = Новый Массив;
			МассивЭДПоСоглашению.Добавить(ЭД);
			СоответствиеСоглашенийМассиваЭД.Вставить(ЭД.СоглашениеЭД, МассивЭДПоСоглашению);
			Массив = ЭлектронныеДокументыСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ЭД.ПрофильНастроекЭДО);
			СоответствиеСертификатов = Новый Соответствие;
			Для Каждого СтруктураСертификата Из Массив Цикл
				Если ЭД.ЭлектронныеЦифровыеПодписи.Найти(СтруктураСертификата.Отпечаток, "Отпечаток") = Неопределено Тогда
					СоответствиеСертификатов.Вставить(СтруктураСертификата.Сертификат, СтруктураСертификата);
				КонецЕсли;
			КонецЦикла;
			Соответствие.Вставить(ЭД.СоглашениеЭД, СоответствиеСертификатов);
		Иначе
			МассивЭДПоСоглашению = СоответствиеСоглашенийМассиваЭД.Получить(ЭД.СоглашениеЭД);
			МассивЭДПоСоглашению.Добавить(ЭД);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтобратьПроизвольныеЭД(МассивСсылок, МассивЭД, СтруктураМассивовПроизвольныхЭД)
	
	СоответствиеПараметровЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, "ВидЭД");
	МассивЭДКОтправке = Новый Массив;
	МассивЭДНаПодпись = Новый Массив;
	Для Каждого КлючЗначение Из СоответствиеПараметровЭД Цикл
		Если КлючЗначение.Значение.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			МассивЭДНаПодпись.Добавить(КлючЗначение.Ключ);
		Иначе
			МассивЭД.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Если МассивЭДКОтправке.Количество() > 0 Тогда
		СтруктураМассивовПроизвольныхЭД.Вставить("МассивЭДКОтправке", МассивЭДКОтправке);
	КонецЕсли;
	Если МассивЭДНаПодпись.Количество() > 0 Тогда
		СтруктураМассивовПроизвольныхЭД.Вставить("МассивЭДНаПодпись", МассивЭДНаПодпись);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыбратьПодписанныеЭДДляОтправки(МассивЭДКотправке, МассивЭДКПодписи, СертификатПодписи)
	
	Для Сч = -МассивЭДКПодписи.Количество() + 1 По 0 Цикл
		ЭД = МассивЭДКПодписи[-Сч];
		Для Каждого ЭП Из ЭД.ЭлектронныеЦифровыеПодписи Цикл
			Если СертификатПодписи.Отпечаток = ЭП.Отпечаток Тогда
				МассивЭДКотправке.Добавить(ЭД);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПроизвольныеЭДГотовыеКОтправке(МассивЭД, МассивЭДКотправке)
	
	ЕстьКОтправке = Ложь;
	Для Каждого ЭД Из МассивЭД Цикл
		Объект = ЭД.ВладелецФайла;
		Если (Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Подписан)
			И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий ИЛИ Объект.ТребуетсяПодтверждение) Тогда
			МассивЭДКотправке.Добавить(ЭД);
			ЕстьКОтправке = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьКОтправке;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьОтправитьПроизвольныеДокументы(СтруктураМассивов)
	
	Если СтруктураМассивов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭДКотправке = Новый Массив;
	МассивЭДНаПодпись = Неопределено;
	Если СтруктураМассивов.Свойство("МассивЭДНаПодпись", МассивЭДНаПодпись) Тогда
		МассивСтруктурСертификатов = "";
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		КонецЕсли;
		
		СоответствиеСоглашенийМассиваЭД = Новый Соответствие;
		СоответствиеСоглашенийИСертификатов = СоответствиеСоглашенийИСоответствийСертификатовИСтруктур(МассивЭДНаПодпись,
			МассивСтруктурСертификатов, СоответствиеСоглашенийМассиваЭД);
		МассивСоглашений = Новый Массив;
		КолПодписанныхВсего = 0;
		
		Для Каждого КлючЗначение Из СоответствиеСоглашенийИСертификатов Цикл
			МассивЭД = СоответствиеСоглашенийМассиваЭД.Получить(КлючЗначение.Ключ);
			СоответствиеСертификатов = КлючЗначение.Значение;
			Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(СоответствиеСертификатов,
				НСтр("ru = 'Подписание электронных документов'"), МассивЭД) И СоответствиеСертификатов.Количество() > 0 Тогда
				Для Каждого СертификатПараметры Из СоответствиеСертификатов Цикл
					СертификатПодписи = СертификатПараметры.Ключ;
					СтруктураСертификата = СертификатПараметры.Значение;
					Прервать;
				КонецЦикла;
				КолПодписанных = ЭлектронныеДокументыСлужебныйКлиент.ПодписатьЭДОпределеннымСертификатом(МассивЭД,
					СертификатПодписи, СтруктураСертификата);
				КолПодписанныхВсего = КолПодписанныхВсего + КолПодписанных;
				МассивСоглашений.Добавить(КлючЗначение.Ключ);
				Если МассивЭД.Количество() <> КолПодписанных Тогда
					Если КолПодписанных > 0 Тогда
						ВыбратьПодписанныеЭДДляОтправки(МассивЭДКотправке, МассивЭД, СертификатПодписи);
					КонецЕсли;
				Иначе
					Для Каждого ЭД Из МассивЭД Цикл
						МассивЭДКотправке.Добавить(ЭД);
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли НЕ ЕстьПроизвольныеЭДГотовыеКОтправке(МассивЭД, МассивЭДКотправке) Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	МассивЭД = Неопределено;
	Если СтруктураМассивов.Свойство("МассивЭДКотправке", МассивЭД) Тогда
		Для Каждого ЭД Из МассивЭД Цикл
			МассивЭДКотправке.Добавить(ЭД);
		КонецЦикла;
	КонецЕсли;
	
	КолПодготовленных = 0;
	КолОтправленных = 0;
	Если МассивЭДКотправке.Количество() > 0 Тогда
		СтруктураРезультата = ЭлектронныеДокументыСлужебныйКлиент.ПодготовитьИОтправитьПЭД(МассивЭДКотправке, Ложь);
		Если СтруктураРезультата.КолОтправленных > 0 Тогда
			КолОтправленных = СтруктураРезультата.КолОтправленных;
		Иначе
			КолПодготовленных = СтруктураРезультата.КолПодготовленных;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСостояния = НСтр("ru = 'Произвольные ЭД:
								| подписано: (%1)'");
	Количество = 0;
	Если КолОтправленных > 0 Тогда
		ТекстСостояния = ТекстСостояния + Символы.ПС + НСтр("ru = ' отправлено: (%2)'");
		Количество = КолОтправленных;
	ИначеЕсли КолПодготовленных > 0 Тогда
		ТекстСостояния = НСтр("ru = ' подготовлено к отправке: (%2)'");
		Количество = КолПодготовленных;
	КонецЕсли;
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, КолПодписанныхВсего, Количество);
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(ПараметрКоманды)
	
	МассивЭД = Новый Массив;
	СтруктураМассивовПроизвольныхЭД = Новый Структура;
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ОтобратьПроизвольныеЭД(МассивСсылок, МассивЭД, СтруктураМассивовПроизвольныхЭД);
		
		ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(МассивЭД);
		ПодписатьОтправитьПроизвольныеДокументы(СтруктураМассивовПроизвольныхЭД);
		ОбновитьДанныеДереваНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам)
	
	// Готовим таблицу с реквизитами контрагентов
	ТаблицаПриглашений = Новый ТаблицаЗначений;
	ТаблицаПриглашений.Колонки.Добавить("ПрофильНастроекЭДО");
	ТаблицаПриглашений.Колонки.Добавить("НастроекаЭДО");
	ТаблицаПриглашений.Колонки.Добавить("Получатель");
	ТаблицаПриглашений.Колонки.Добавить("Наименование");
	ТаблицаПриглашений.Колонки.Добавить("НаименованиеДляСообщенияПользователю");
	ТаблицаПриглашений.Колонки.Добавить("ИНН");
	ТаблицаПриглашений.Колонки.Добавить("КПП");
	ТаблицаПриглашений.Колонки.Добавить("АдресЭП");
	ТаблицаПриглашений.Колонки.Добавить("ТекстПриглашения");
	ТаблицаПриглашений.Колонки.Добавить("ВнешнийКод");
	
	ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
	ИмяРеквизитаВнешнийКодКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ВнешнийКодКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагентаДляСообщенияПользователю");
	
	Для каждого НастройкаЭДО Из Элементы.ТребуетсяПригласить.ВыделенныеСтроки Цикл
		
		СтруктураПараметровНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО,
			"ЭлектроннаяПочтаДляПриглашения, Контрагент, ТекстПриглашения, ПрофильНастроекЭДО");
		
		Если Не ЗначениеЗаполнено(СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения) Тогда
			ШаблонСообщения = НСтр("ru = 'Для отправки приглашения к обмену ЭД для получателя %1
										|необходимо заполнить электронную почту.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметровКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СтруктураПараметровНастройкиЭДО.Контрагент,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагента + ", "
			+ ИмяРеквизитаВнешнийКодКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю);
	
		Если Не ЗначениеЗаполнено(СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента]) Тогда
			ШаблонСообщения = НСтр("ru = 'Для отправки приглашения к обмену ЭД для получателя %1
										|необходимо заполнить ИНН.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриглашений.Добавить();
		НоваяСтрока.ПрофильНастроекЭДО = СтруктураПараметровНастройкиЭДО.ПрофильНастроекЭДО;
		НоваяСтрока.НастройкаЭДО       = НастройкаЭДО;
		НоваяСтрока.Получатель         = СтруктураПараметровНастройкиЭДО.Контрагент;
		НоваяСтрока.ТекстПриглашения   = СтруктураПараметровНастройкиЭДО.ТекстПриглашения;
		НоваяСтрока.АдресЭП            = СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения;
		
		НоваяСтрока.Наименование       = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагента];
		НоваяСтрока.НаименованиеДляСообщенияПользователю = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю];
		НоваяСтрока.ИНН                = СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента];
		НоваяСтрока.КПП                = СтруктураПараметровКонтрагента[ИмяРеквизитаКППКонтрагента];
		НоваяСтрока.ВнешнийКод         = СтруктураПараметровКонтрагента[ИмяРеквизитаВнешнийКодКонтрагента];
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаПриглашений) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СоответствиеПрофилейНастроекЭДОМаркерам Цикл
		ПрофильНастроекЭДО = КлючИЗначение.Ключ;
		СтруктураСертификата = КлючИЗначение.Значение;
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПриглашений = Новый Структура;
		ОтборПриглашений.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
		
		ТаблицаПриглашенийДляОтправки = ТаблицаПриглашений.Скопировать(ОтборПриглашений);
		
		ДопПараметры = Новый Структура;
		ИмяФайла = ЭлектронныеДокументыВнутренний.ИсходящийЗапросПриглашенияОператораЭДО(ТаблицаПриглашенийДляОтправки, ДопПараметры);
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПутьДляПриглашений = ЭлектронныеДокументыСлужебный.РабочийКаталог("invite", Новый УникальныйИдентификатор);
		ИмяФайлаПриглашения = ПутьДляПриглашений + "SendContacts.xml";
		КопироватьФайл(ИмяФайла, ИмяФайлаПриглашения);
		РезультатОтправки = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(
			Маркер,
			ПутьДляПриглашений,
			"SendContacts",
			ПрофильНастроекЭДО);
			
		УдалитьФайлы(ПутьДляПриглашений);
		
		Если РезультатОтправки <> 0 Тогда
			
			Для каждого СтрокаТаблицы Из ТаблицаПриглашений Цикл
				ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
				ИскомаяНастройкаЭДО.ОписаниеОшибки = "";
				ИскомаяНастройкаЭДО.Записать();
			КонецЦикла;
			ОтправленоПриглашений = ТаблицаПриглашений.Количество();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, ПриглашениеПринято)
	
	Для каждого НастройкаЭДО Из Элементы.ТребуетсяСогласие.ВыделенныеСтроки Цикл
		
		СтруктураСертификата = СоответствиеПрофилейНастроекЭДОМаркерам.Получить(НастройкаЭДО.ПрофильНастроекЭДО);
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Ложь;
		
		ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
		Если ИскомаяНастройкаЭДО.НастройкаЭДОУникальна() Тогда
			Результат = ЭлектронныеДокументыВнутренний.ПринятьОтклонитьКонтактЧерезОператораЭДО(
				НастройкаЭДО.ИдентификаторКонтрагента, ПриглашениеПринято, Маркер, НастройкаЭДО.ПрофильНастроекЭДО);
		КонецЕсли;
		Если Результат Тогда
			Если ПриглашениеПринято Тогда
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
			Иначе
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			ИскомаяНастройкаЭДО.Записать();
			
			КоличествоПринятыхПриглашений = КоличествоПринятыхПриглашений + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрофилиНастроекЭДО(Знач МассивНастроекЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.Ссылка В(&МассивНастроекЭДО)";
	
	Запрос.УстановитьПараметр("МассивНастроекЭДО", МассивНастроекЭДО);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица.ВыгрузитьКолонку("ПрофильНастроекЭДО");
	
КонецФункции

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ТекущаяТаблица = Элементы[ЭтаФорма.ТекущийЭлемент.Имя];
	Если ТипЗнч(ТекущаяТаблица) = Тип("ТаблицаФормы")
		И ТекущаяТаблица.ВыделенныеСтроки.Количество() > 0 Тогда
		УстановитьОтветственного(ТекущаяТаблица.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры
