Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Если НЕ ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
		Сообщить("Не указан внутренний заказ");
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВнутреннийЗаказ.Организация) Тогда
		Сообщить("В документе основании не указана организация");
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("");

	ЕстьКонтрагент = Истина;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ВнутреннийЗаказ,
	|	ВнутреннийЗаказ.Представление КАК ПредставлениеЗаказа,
	|	ВнутреннийЗаказ.Исполнитель КАК Исполнитель,
	|	ВнутреннийЗаказ.ПодразделениеИсполнитель КАК ПодразделениеИсполнитель,
	|	ВнутреннийЗаказ.Заказчик      КАК Заказчик,";
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ВнутреннийЗаказ.Организация     КАК Организация,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул            КАК Артикул,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры      КАК Характеристика,
	|       null                            КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Артикул                 КАК Артикул,
	|		Номенклатура.Код                     КАК Код,
	|		Номенклатура.НаименованиеПолное      КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		null                                 КАК Характеристика,
	|       null                                 КАК Серия  
	|	)
	|ИЗ
	|	Документ.КорректировкаВнутреннегоЗаказа КАК КорректировкаВнутреннегоЗаказа
	|
	|ГДЕ
	|	КорректировкаВнутреннегоЗаказа.Ссылка = &ТекущийДокумент
	|";

	Запрос.Текст = ТекстЗапроса;
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаВнутреннегоЗаказа_КорректировкаЗаказа";

	Макет = ПолучитьМакет("КорректировкаЗаказа");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка      = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Корректировка внутреннего заказа");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказчик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеЗаказчика = Шапка.Заказчик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	НазваниеДокумента = Шапка.ВнутреннийЗаказ.Метаданные().Представление();
	ОбластьМакета.Параметры.ПредставлениеЗаказа = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.ВнутреннийЗаказ, НазваниеДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСтроки = Ложь;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	НомерПоПорядку = 0;
	Всего    = 0;
	ШиринаУжеУвеличина = Ложь;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество > 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);

				ОбластьКолонкаТовар = Макет.Область("Товар");
				Если Не ВыводитьКоды Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("КолонкаКодов").ШиринаКолонки;
				КонецЕсли;
				ШиринаУжеУвеличина = Истина;
				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерСтроки = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЕсли;
	КонецЦикла;

	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТара.Количество > 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВПлюс");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);

				ОбластьКолонкаТовар = Макет.Область("Товар");
				Если Не ВыводитьКоды Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
														Макет.Область("КолонкаКодов").ШиринаКолонки;
				КонецЕсли;
				ШиринаУжеУвеличина = Истина;
				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерСтроки = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар       = ВыборкаСтрокТара.Товар;
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтроки Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
	КонецЕсли;

	ДобавленоПозиций = НомерПоПорядку;
	
	НомерПоПорядку = 0;
	ЕстьСтроки  = Ложь;
	ВсегоВМинус = 0;
	
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТовары.Количество < 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);

				Если НЕ ШиринаУжеУвеличина Тогда
					ОбластьКолонкаТовар = Макет.Область("Товар");
					Если Не ВыводитьКоды Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("КолонкаКодов").ШиринаКолонки;
					КонецЕсли;
				КонецЕсли;

				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерСтроки = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар      = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Количество = ВыборкаСтрокТовары.Количество;
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЕсли;
	КонецЦикла;

	ВыборкаСтрокТара = Шапка.ВозвратнаяТара.Выбрать();
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Если ВыборкаСтрокТара.Количество < 0 Тогда

			Если НЕ ЕстьСтроки Тогда
				ОбластьСекции = Макет.ПолучитьОбласть("ЗаголовокВМинус");
				ТабДокумент.Вывести(ОбластьСекции);

				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьДанных);

				Если НЕ ШиринаУжеУвеличина Тогда
					ОбластьКолонкаТовар = Макет.Область("Товар");
					Если Не ВыводитьКоды Тогда
						ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
															Макет.Область("КолонкаКодов").ШиринаКолонки;
					КонецЕсли;
				КонецЕсли;

				ЕстьСтроки = Истина;

			КонецЕсли;

			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
			
			НомерПоПорядку = НомерПоПорядку + 1;
			ОбластьНомера.Параметры.НомерСтроки = НомерПоПорядку;
			ТабДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар      = ВыборкаСтрокТара.Товар;
			ОбластьДанных.Параметры.Количество = ВыборкаСтрокТара.Количество;
			ТабДокумент.Присоединить(ОбластьДанных);

		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтроки Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
	КонецЕсли;
	
	ОтмененоПозиций = НомерПоПорядку;

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ФИОИсполнитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.Исполнитель);
	ОбластьМакета.Параметры.Получил = Шапка.ПодразделениеИсполнитель.Наименование+?(ЗначениеЗаполнено(Шапка.ПодразделениеИсполнитель) И ЗначениеЗаполнено(ФИОИсполнитель),"; ","")+ФИОИсполнитель;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "КорректировкаЗаказа"  Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаЗаказа","Корректировка внутреннего заказа");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабЧасть) Экспорт

	ЭтоТовары    = ТабЧасть = Товары;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",        ВнутреннийЗаказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
		Запрос.УстановитьПараметр("Статус",    Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("Статус",    Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли; 

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Источник,
		|	РегВнутрЗаказы.Номенклатура КАК Номенклатура,
		|	РегВнутрЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РегВнутрЗаказы.ЕдиницаИзмерения,
		|	РегВнутрЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		|	NULL КАК Размещение,
		|	РегВнутрЗаказы.КоличествоОстаток * РегВнутрЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / РегВнутрЗаказы.ЕдиницаИзмерения.Коэффициент КАК КолЗаказано,
		|	0 КАК КолРезерв
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки(
		|		&ДатаОстатков,
		|		ВнутреннийЗаказ = &Заказ
		|		    И СтатусПартии = &Статус) КАК РегВнутрЗаказы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ПорядокРезерва,
		|	РегРезерв.Номенклатура,
		|	РегРезерв.ХарактеристикаНоменклатуры,
		|	РегРезерв.Номенклатура.ЕдиницаХраненияОстатков,
		|	РегРезерв.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	РегРезерв.Склад,
		|	0,
		|	РегРезерв.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &Заказ) КАК РегРезерв
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ПорядокРазмещения,
		|	РегРазмещение.Номенклатура,
		|	РегРазмещение.ХарактеристикаНоменклатуры,
		|	РегРазмещение.Номенклатура.ЕдиницаХраненияОстатков,
		|	РегРазмещение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	РегРазмещение.ЗаказПоставщику,
		|	0,
		|	РегРазмещение.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
		|		&ДатаОстатков,
		|		ЗаказПокупателя = &Заказ
		|		    И ТоварТара = &ТоварТара) КАК РегРазмещение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Источник
		|ИТОГИ
		|	СУММА(КолЗаказано),
		|	СУММА(КолРезерв)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	
	Запрос.Текст = ТекстЗапроса;
	
	СтратегияРезервирования = Константы.СтратегияАвторезервированияНоменклатурыПоЗаказам.Получить();
	
	ПорядокРезерва = 2;
	Если СтратегияРезервирования = Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаВЗаказахПоставщикамПотомНаСкладах Тогда
		Запрос.УстановитьПараметр("ПорядокРезерва",    3);
		Запрос.УстановитьПараметр("ПорядокРазмещения", 2);
		ПорядокРезерва = 3;
	Иначе
		Запрос.УстановитьПараметр("ПорядокРезерва",    2);
		Запрос.УстановитьПараметр("ПорядокРазмещения", 3);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОстатков    = Новый Массив;
	
	ОбходНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходНоменклатура.Следующий() Цикл
		ОбходХарактеристика = ОбходНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходХарактеристика.Следующий() Цикл
		
			МассивОстатков.Очистить();
			
			Обход = ОбходХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Обход.Следующий() Цикл
			
				// Детальные записи. В связи с упорядочиванием первыми должны располагаться записи
				// из регистра ВнутренниеЗаказы             (признак поле Источник == 1), далее
				// из регистра ТоварыВРезервеНаСкладах      (признак поле Источник == 2), далее
				// из регистра РазмещениеЗаказовПокупателей (признак поле Источник == 3), далее
				// Алгоритм обхода следующий:
				//		Вначале переносим в документ строки (по сути остатки) из регистра ВнутренниеЗаказы и запоминаем
				//		их (строки) в массиве. Далее при наличии строк с указанным размещением (резервом)
				//		пытаемся использовать строки из массива строк с размещением (резервом).
				//
				Если Обход.Источник = 1 Тогда // Это строка с остатком. Добавляем в документ
					
					НоваяСтрока = ТабЧасть.Добавить();
					НоваяСтрока.Номенклатура = Обход.Номенклатура;
					НоваяСтрока.Количество   = Обход.КолЗаказано;
					
					МассивОстатков.Добавить(НоваяСтрока);
					
					Если ЭтоТовары Тогда
						НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
						НоваяСтрока.ЕдиницаИзмерения   = Обход.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент  = Обход.Коэффициент;
					КонецЕсли;
				
				Иначе
				
					Если Обход.КолРезерв <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Текст = "";
					КолРезерв = Обход.КолРезерв;
					Пока КолРезерв > 0 И МассивОстатков.Количество() > 0 Цикл
					
						// Делаем дубль строки
						НоваяСтрока = ТабЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивОстатков[0]);
						
						Если ЭтоТовары Тогда
							//Пересчитаем количество резерв в единицы внутреннего заказа
							КолРезерв = КолРезерв * МассивОстатков[0].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / МассивОстатков[0].Коэффициент;
						КонецЕсли; 

						МожноРазместить = Мин(МассивОстатков[0].Количество, КолРезерв);
						
						НоваяСтрока.Количество = МожноРазместить;
						НоваяСтрока.Размещение = Обход.Размещение;
						
						КолРезерв = КолРезерв - МожноРазместить;
						
						Если МассивОстатков[0].Количество - МожноРазместить = 0 Тогда // Весь свободный остаток в данной строке закончился. Строку можно удалить
							ТабЧасть.Удалить(МассивОстатков[0]);          // Удаляем строку документа
							МассивОстатков.Удалить(0);                    // И сразу элемент массива, т.к. он ссылается на уже несуществующую строку.
						Иначе
							МассивОстатков[0].Количество = МассивОстатков[0].Количество - МожноРазместить;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Изменим знак количество в табличной части
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		СтрокаТЧ.Количество = - СтрокаТЧ.Количество;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутреннийЗаказТовары.ЕдиницаИзмерения,
	|	ВнутреннийЗаказТовары.ЕдиницаИзмеренияМест,
	|	ВнутреннийЗаказТовары.Количество,
	|	ВнутреннийЗаказТовары.Коэффициент,
	|	ВнутреннийЗаказТовары.Номенклатура,
	|	ВнутреннийЗаказТовары.Размещение,
	|	ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры
	|
	|ИЗ
	|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
	|
	|ГДЕ
	|	ВнутреннийЗаказТовары.Ссылка.Ссылка = &ВнутреннийЗаказ
	|УПОРЯДОЧИТЬ ПО
	|	ВнутреннийЗаказТовары.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.Количество                 = -Выборка.Количество;
		НоваяСтрока.Размещение                 = Выборка.Размещение;

	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутреннийЗаказВозвратнаяТара.Количество,
	|	ВнутреннийЗаказВозвратнаяТара.Номенклатура,
	|	ВнутреннийЗаказВозвратнаяТара.Размещение
	|ИЗ
	|	Документ.ВнутреннийЗаказ.ВозвратнаяТара КАК ВнутреннийЗаказВозвратнаяТара
	|
	|ГДЕ
	|	ВнутреннийЗаказВозвратнаяТара.Ссылка.Ссылка = &ВнутреннийЗаказ
	|УПОРЯДОЧИТЬ ПО
	|	ВнутреннийЗаказВозвратнаяТара.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = -Выборка.Количество;
		НоваяСтрока.Размещение   = Выборка.Размещение;
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

#Если Клиент Тогда

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Параметры - структура параметров на основании которых заполняется документ.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Параметры) Экспорт

	Если НЕ ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("Заказ",ВнутреннийЗаказ);
	Параметры.Вставить("РезервироватьПоСериям",ложь);
	УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара);

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	
	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	Возврат РезультатЗапросаПоТоварам.Выгрузить();

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВнутреннийЗаказ");
					
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если ЗначениеЗаполнено(ВнутреннийЗаказ) И НЕ ВнутреннийЗаказ.Проведен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя корректировать непроведенный документ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		Если ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады") Тогда
			Если СтрокаТЧ.Размещение.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Товары"" выбрана НТТ. " + Символы.ПС + "Нельзя выбирать НТТ.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		Если ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады")
			И ВнутреннийЗаказ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Если СтрокаТЧ.Размещение = ВнутреннийЗаказ.Заказчик Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Товары"" выбран склад, совпадающий со складом-заказчиком внутреннего заказа. " + Символы.ПС + "Нельзя зарезервировать товар на складе-заказчике.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
		Если ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады") Тогда
			Если СтрокаТЧ.Размещение.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Тара"" выбрана НТТ. " + Символы.ПС + "Нельзя выбирать НТТ.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
		Если ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады")
			И ВнутреннийЗаказ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Если СтрокаТЧ.Размещение = ВнутреннийЗаказ.Заказчик Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Тара"" выбран склад, совпадающий со складом-заказчиком внутреннего заказа. " + Символы.ПС + "Нельзя зарезервировать товар на складе-заказчике.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";

	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// Функция удаляет из исходной таблицы строки не требующие резервирования
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
		
	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
	
КонецФункции // СоздатьТаблицуРезервированияПодЗаказ()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
							ТаблицаПоТаре, Отказ, Заголовок);
							  
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	НаборДвижений = Движения.ВнутренниеЗаказы;
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
	
		Параметры = Новый Структура;
		Параметры.Вставить("ИмяТабЧасти",       "Товары");
		Параметры.Вставить("ИмяРеквизитаЗаказ", "ВнутреннийЗаказ");
		Параметры.Вставить("ЗаказВШапке",                   Истина);
		Параметры.Вставить("ТолькоОтрицательноеКоличество", Истина);
		
		// Контроль по таб.части ТОВАРЫ
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, Параметры, Отказ, Заголовок);
		
		// Контроль по таб.части ТАРА
		Параметры.Вставить("ИмяТабЧасти", "ВозвратнаяТара");
		
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, Параметры, Отказ, Заголовок);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
	
		// ТОВАР И ТАРА ПО РЕГИСТРУ ВнутренниеЗаказы.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ВнутреннийЗаказ", ВнутреннийЗаказ);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Заказчик",        ВнутреннийЗаказ.Заказчик);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",    ОпределитьСтатусПартии(),                         "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",    Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;
	
	// ТОВАР И ТАРА ПО РЕГИСТРУ РазмещениеЗаказовПокупателей.
	ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам);
	ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
		
	Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			
		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
			
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", ВнутреннийЗаказ);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
		
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
		
	КонецЕсли;
		
	ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам);
	ТаблицаПоТареРезервирование    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
		
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
			
		Если НЕ Отказ Тогда
				
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", ВнутреннийЗаказ);
						
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВнутреннийЗаказ = Основание;

		Если Основание.Проведен Тогда

			// Заполним табличные части по внутренненму заказу.
			ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
			ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
    Если ВнутреннийЗаказ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение И ВозвратнаяТара.Количество()>0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
							ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

