// Процедура формирует движения в регистры по прочим затратам по управленческому учету
//
//Параметры:
//		ДокСсылка - ссылка на документ
//		ТабЧасть  - таб. часть по которой формируются движения
//			В ней обязательно должны быть реквизиты "СтатьяЗатрат", "Сумма"
//			"Заказ", "Подразделение",
//			"НоменклатурнаяГруппа"
//		СтруктВал - структура с информацией о валюте
//		ВалютаРегламентированногоУчета - валюта регламентированного учета
//		ДопПараметры - структура с доп. параметрами. Возможные значения
//			"ЕстьНДС"         - признак наличия НДС в документе
//
Процедура ДвиженияПоПрочимЗатратамУпр( ДокОбъект, ТабЧасть, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ДопПараметры = Неопределено) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	НаборДвиженийЗатраты      = ДокОбъект.Движения.Затраты;
	ТаблицаДвиженийЗатраты    = НаборДвиженийЗатраты.ВыгрузитьКолонки();

	ЕстьВалютаДокумента = СтруктураШапкиДокумента.Свойство("ВалютаДокумента");
	ЕстьКурсДокумента = Ложь;
	ЕстьНДС = Ложь;
	
	// Определим доп. параметры
	ДокСтатьяЗатрат = Неопределено;
	ДокЗаказ        = Неопределено;
	ДокПодр         = Неопределено;
	ДокНоменклатура = Неопределено;
	ИмяРеквЗаказ    = "Заказ";
	ВидДвижения     = "Приход";
	Знак     		= 1;
	
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ЕстьНДС") Тогда
			ЕстьНДС = ДопПараметры["ЕстьНДС"];
		КонецЕсли; 
		Если ДопПараметры.Свойство("СтатьяЗатрат") Тогда
			ДокСтатьяЗатрат = ДопПараметры["СтатьяЗатрат"];
		КонецЕсли;
		Если ДопПараметры.Свойство("Заказ") Тогда
			ДокЗаказ = ДопПараметры["Заказ"];
			Если ДокЗаказ = Неопределено Тогда
				ДокЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если ДопПараметры.Свойство("Подразделение") Тогда
			ДокПодр = ДопПараметры["Подразделение"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ИмяРеквЗаказ") Тогда
			ИмяРеквЗаказ = ДопПараметры["ИмяРеквЗаказ"];
		КонецЕсли;
		Если ДопПараметры.Свойство("Номенклатура") Тогда
			ДокНоменклатура = ДопПараметры["Номенклатура"];
		КонецЕсли;
		Если ДопПараметры.Свойство("Номенклатура") Тогда
			ДокНоменклатура = ДопПараметры["Номенклатура"];
		КонецЕсли;
		Если ДопПараметры.Свойство("КурсДокумента") Тогда
			КурсДок = ДопПараметры["КурсДокумента"];
			ЕстьКурсДокумента = Истина;
		КонецЕсли;
		Если ДопПараметры.Свойство("КратностьДокумента") Тогда
			КратДок = ДопПараметры["КратностьДокумента"];
		КонецЕсли;
		Если ДопПараметры.Свойство("Знак") Тогда
			Знак = ДопПараметры["Знак"];
		КонецЕсли;
	КонецЕсли;

	Если ЕстьВалютаДокумента И НЕ ЕстьКурсДокумента Тогда
		КратДок = ЗаполнениеДокументов.КратностьДокумента(ДокОбъект, ВалютаРегламентированногоУчета);
		КурсДок = ЗаполнениеДокументов.КурсДокумента     (ДокОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Если ТипЗнч(ТабЧасть) <> Тип("ТаблицаЗначений") Тогда
		ТабличнаяЧасть = ТабЧасть.Выгрузить();
	Иначе
		ТабличнаяЧасть = ТабЧасть;
	КонецЕсли;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДокОбъект.Дата, Ложь);
	Если УчетнаяПолитика.Количество() <> 0 Тогда
		НеВключатьНДСВСтоимость = УчетнаяПолитика.НеВключатьНДСВЗатраты;
		Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") Тогда
			НеВключатьНДСВСтоимость = НеВключатьНДСВСтоимость И Не СтруктураШапкиДокумента.УчетАгентскогоНДС;
		КонецЕсли;
	Иначе
		НеВключатьНДСВСтоимость = Ложь;
	КонецЕсли;
	
	ЕстьСуммаУпр = Ложь;
	Если Не ТабличнаяЧасть.Колонки.Найти("СуммаУпр") = Неопределено Тогда
		ЕстьСуммаУпр = Истина;
	КонецЕсли;
	ЕстьНДСУпр = Ложь;
	Если Не ТабличнаяЧасть.Колонки.Найти("НДСУпр") = Неопределено Тогда
		ЕстьНДСУпр = Истина;
	КонецЕсли;
	
	// Обход таб. части
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		
		СтатьяЗатрат = ?(ДокСтатьяЗатрат = Неопределено, СтрокаТЧ.СтатьяЗатрат,  ДокСтатьяЗатрат);
		Заказ        = ?(ДокЗаказ        = Неопределено, СтрокаТЧ[ИмяРеквЗаказ], ДокЗаказ);
		Подр         = ?(ДокПодр         = Неопределено, СтрокаТЧ.Подразделение, ДокПодр);
		
		Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) 
		 ИЛИ СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.НеУчитываемыеВУправленческомУчете Тогда
			Продолжить;
		КонецЕсли;
				
		Если ЕстьСуммаУпр Тогда
			СуммаУпр = СтрокаТЧ.СуммаУпр;
			Если ЕстьНДСУпр И НеВключатьНДСВСтоимость Тогда
				СуммаУпр = СуммаУпр - СтрокаТЧ.НДСУпр;
			КонецЕсли;
			
		ИначеЕсли ЕстьВалютаДокумента Тогда
			Если НеВключатьНДСВСтоимость Тогда
				Стоимость = СтрокаТЧ.Сумма;
			Иначе
				Стоимость = СтрокаТЧ.Сумма + ?(ЕстьНДС, СтрокаТЧ.НДС, 0);
			КонецЕсли;
		
			СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
				 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,     КурсДок, 
				 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратДок, 
				 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Иначе
			СуммаУпр = СтрокаТЧ.Сумма + ?(ЕстьНДС, СтрокаТЧ.СуммаНДС, 0);
		КонецЕсли;

		Если СуммаУпр = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТаблицаДвиженийЗатраты.Добавить();
		НоваяСтрока.Подразделение        = Подр;
		НоваяСтрока.СтатьяЗатрат         = СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
		НоваяСтрока.Заказ                = Заказ;
		НоваяСтрока.Сумма                = СуммаУпр;

	КонецЦикла;

	// Записать движения
	НаборДвиженийЗатраты.мПериод             = ДокОбъект.Дата;
	НаборДвиженийЗатраты.мТаблицаДвижений    = ТаблицаДвиженийЗатраты;

	НаборДвиженийЗатраты .ВыполнитьДвижения();
	НаборДвиженийЗатраты .Записать(Ложь);

КонецПроцедуры // ДвиженияПоПрочимЗатратамУпр()

// Функция формирует структуру таблицы значений для отражения производственных затрат в регистрах.
//
Функция СформироватьТаблицуЗатрат() Экспорт

	ТаблицаЗатрат = Новый ТаблицаЗначений;
	ТаблицаЗатрат.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗатрат.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗатрат.Колонки.Добавить("СерияНоменклатуры",			Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	ТаблицаЗатрат.Колонки.Добавить("СтатьяЗатрат",				Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаЗатрат.Колонки.Добавить("НоменклатурнаяГруппа",		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаЗатрат.Колонки.Добавить("Подразделение",				Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ТаблицаЗатрат.Колонки.Добавить("СпособРаспределенияЗатратНаВыпуск");
	ТаблицаЗатрат.Колонки.Добавить("Заказ");
	ТаблицаЗатрат.Колонки.Добавить("Проект");

	ТаблицаЗатрат.Колонки.Добавить("Продукция",					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗатрат.Колонки.Добавить("ХарактеристикаПродукции", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗатрат.Колонки.Добавить("СерияПродукции",			Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	ТаблицаЗатрат.Колонки.Добавить("Количество",				ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 3));
	ТаблицаЗатрат.Колонки.Добавить("Сумма",						ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТаблицаЗатрат.Колонки.Добавить("СуммаРегл",					ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТаблицаЗатрат.Колонки.Добавить("СуммаНал",					ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТаблицаЗатрат.Колонки.Добавить("ПостояннаяРазница",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТаблицаЗатрат.Колонки.Добавить("ВременнаяРазница",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));

	Возврат ТаблицаЗатрат;

КонецФункции // СформироватьТаблицуЗатрат()

