////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументы: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует фамилию и инициалы по переданной строке.
//
// Параметры
//  ПолноеНаименование - строка с наименованием.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой.
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ЭлектронныеДокументыПереопределяемый.РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	Если НЕ ЗначениеЗаполнено(Фамилия) И НЕ ЗначениеЗаполнено(Имя) И НЕ ЗначениеЗаполнено(Отчество) Тогда
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПолноеНаименование), " ");
		
		КоличествоПодстрок = ФИО.Количество();
		Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
		Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
		Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	КонецЕсли;
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "."
		+ ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""), "");
	
КонецФункции

// Определяет, существует ли актуальный электронный документ Счет-фактура для переданного владельца
//
// Параметры
//  СсылкаНаВладельца - ДокументСсылка,- владелец электронного документа
//
// Возвращаемое значение:
//  Булево - Истина - существует актуальный электронный документ, в противном случае Ложь.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьРабочийЭСФ(СсылкаНаВладельца);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	ЗначениеВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(НаименованиеФО);
	Возврат ЗначениеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает представление (текст либо структура) состояний электронных документов по владельцам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
// ПомещатьВСтруктуру - булево, если истина, то представления состояний электронных документов
//                      (СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника),
//                      будут помещены в структуру, для возможности последующего разбора на клиенте.
//
// Возвращаемое значение:
// Соответствие - соответствие ссылок на документы ИБ состояниям ЭД. Ключ - ссылка на документ ИБ,
//                Значение - текст (состояние ЭД), либо структура - в зависимости от параметра ПомещатьВСтруктуру.
//
Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев, ПомещатьВСтруктуру = Ложь) Экспорт
		
	ТаблицаДанных = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		Если ПомещатьВСтруктуру Тогда
			СостояниеВерсииЭД = Новый Структура("СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника");
			ЗаполнитьЗначенияСвойств(СостояниеВерсииЭД, ТекСтрока);
		Иначе
			СостояниеВерсииЭД = Строка(ТекСтрока.СостояниеВерсииЭД);
		КонецЕсли;
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, СостояниеВерсииЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Получает дату выставления счет-фактуры в электронном виде.
//
// Параметры:
// СчетФактура - СсылкаНаДокумент - ссылка на счет-фактуру исходящую в прикладном решении.
//
// Возвращаемое значение:
//  ДатаВыставления - дата - дата выставления электронной счет-фактуры.
//
Функция ДатаВыставленияСчетФактуры(СчетФактура) Экспорт
	
	ДатаВыставления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СчетФактура);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПДПЭСФ)";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Результат.ЭлектронныйДокумент);
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ДатаВыставления = Результат.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Возврат ДатаВыставления
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Возвращает текст запроса для электронных документов на подписи.
// Варианты - для рабочего места документов на подпись,
// или для показателя на рабочем столе (УТ 11)
//
// Параметры:
//  ДляРабочегоСтола - Булево, признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11)
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
		|	ЭДПрисоединенныеФайлы.СуммаДокумента,
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя,
		|	ВЫБОР
		|		КОГДА ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|				ИЛИ ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|			ТОГДА """"""""
		|		КОГДА ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЭДПрисоединенныеФайлы.НомерВерсииЭД
		|		ИНАЧЕ ЭДПрисоединенныеФайлы.ДатаФормированияЭДОтправителем
		|	КОНЕЦ КАК Версия,
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ЭДПрисоединенныеФайлы.Изменил
		|ПОМЕСТИТЬ ЭДНаПодпись
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	0,
		|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя,
		|	"""",
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.Контрагент,
		|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
		|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ЭДПрисоединенныеФайлы.Изменил
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
		|	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.НеОтправлен)
		|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПодготовленКОтправке)
		|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Получен)
		|				И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПроизвольныйЭД).ТребуетсяПодтверждение)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СлужебныеЭД.Ссылка,
		|	СлужебныеЭД.СуммаДокумента,
		|	СлужебныеЭД.ДатаДокументаОтправителя,
		|	ВЫБОР
		|		КОГДА СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|				ИЛИ СлужебныеЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|			ТОГДА """"""""
		|		КОГДА СлужебныеЭД.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА СлужебныеЭД.НомерВерсииЭД
		|		ИНАЧЕ СлужебныеЭД.ДатаФормированияЭДОтправителем
		|	КОНЕЦ,
		|	СлужебныеЭД.ВидЭД,
		|	СлужебныеЭД.НаправлениеЭД,
		|	СлужебныеЭД.Организация,
		|	СлужебныеЭД.Контрагент,
		|	СлужебныеЭД.ПрофильНастроекЭДО,
		|	СлужебныеЭД.СоглашениеЭД,
		|	СлужебныеЭД.СтатусЭД,
		|	СлужебныеЭД.Изменил
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК СлужебныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = СлужебныеЭД.ЭлектронныйДокументВладелец
		|ГДЕ
		|	СлужебныеЭД.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
		|	И НЕ СлужебныеЭД.ПометкаУдаления
		|	И НЕ(СлужебныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
		|				ИЛИ СлужебныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДПрисоединенныеФайлы.ВидЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	ЭДНаПодпись КАК ЭДНаПодпись
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|			ПО СертификатыЭЦПВидыДокументов.Ссылка = СертификатыЭЦП.Ссылка
		|		ПО ЭДНаПодпись.ВидЭД = СертификатыЭЦПВидыДокументов.ВидДокумента
		|			И ЭДНаПодпись.Организация = СертификатыЭЦПВидыДокументов.Ссылка.Организация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|		ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияОбИспользованииЭД.Ссылка
		|			И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|					И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|				ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|					И СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
		|		ПО ЭДНаПодпись.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификаты.Ссылка
		|			И (ЭДНаПодпись.СоглашениеЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|		ПО ЭДНаПодпись.СоглашениеЭД = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка
		|ГДЕ
		|	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
		|	И ВЫБОР
		|			КОГДА СертификатыЭЦПВидыДокументов.Ссылка.ОграничитьДоступКСертификату
		|				ТОГДА СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = &ТекущийПользователь
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				ТОГДА СертификатыЭЦПВидыДокументов.Ссылка = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
		|			КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				ТОГДА СертификатыЭЦПВидыДокументов.Ссылка = ПрофилиНастроекЭДОСертификаты.Сертификат
		|		КОНЕЦ
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ЭД_ЭП.Отпечаток
		|				ИЗ
		|					Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭД_ЭП
		|				ГДЕ
		|					ЭД_ЭП.Ссылка = ЭДНаПодпись.ЭД)";
		
	Если ДляРабочегоСтола Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "*", "
			|	СертификатыЭЦП.Отпечаток КАК Отпечаток,
			|	СертификатыЭЦП.Представление КАК Сертификат,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыЭЦП.Ссылка) КАК ЗначениеПоказателя
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 И СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
			ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|СГРУППИРОВАТЬ ПО
			|	СертификатыЭЦП.Отпечаток,
			|	СертификатыЭЦП.Представление";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "*", "
			|	ЭДНаПодпись.ЭД КАК ЭлектронныйДокумент,
			|	ЭДНаПодпись.СуммаДокумента,
			|	ЭДНаПодпись.Версия,
			|	ЭДНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента,
			|	ЭДНаПодпись.ВидЭД КАК ВидЭД,
			|	СертификатыЭЦПВидыДокументов.Ссылка КАК Сертификат
			|");
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ДатаДокумента";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Передача электронных документов в ФНС

// Получает соответствие документам информационной базы и актуальных электронных документов.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//   ДокументыИБ - массив(ссылка), массив ссылок на документы информационной базы;
//   УникальныйИдентификатор - уникальныйИдентификатор, признак уникальности для формы выбора документов
//
// Возвращаемое значение:
//   Соответствие:
//     Ключ     - ДокументСсылка - ссылка на документ-Вдалелец ЭД.
//     Значение - Массив         - массив структур параметров ЭД, с ключами:
//                ТипФайла - Строка - возможные значения: ФайлВыгрузки, ЭЦП, ФайлПодтверждения, ЭЦППодтверждения.
//                КНД      - Строка - КНД выгружаемого ЭД, заполняется только для файла выгрузки и файла подтверждения.
//                ИмяФайла - Строка - Имя выгружаемого файла.
//                АдресВременногоХранилища - Строка.
//
Функция ПолучитьСоответствиеДокументамИБКомплектыЭлектронныхДокументов(ДокументыИБ, УникальныйИдентификатор) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
		|	СостоянияЭД.СсылкаНаОбъект КАК ДокументИБ,
		|	ЭДПрисоединенныеФайлы.ВидЭД,
		|	ЭДПрисоединенныеФайлы.УникальныйИД,
		|	ПодтвержденияЭД.Ссылка КАК ПодтверждениеСсылка,
		|	ПодтвержденияЭД.ВидЭД КАК ВидЭДПодтверждения,
		|	ПодтвержденияЭД.УникальныйИД КАК УникальныйИДПодтверждения
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодтвержденияЭД
		|			ПО ЭДПрисоединенныеФайлы.Ссылка = ПодтвержденияЭД.ЭлектронныйДокументВладелец
		|				И (ПодтвержденияЭД.ВидЭД В (&ВидыОтветныхТитулов))
		|		ПО СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			И (ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыПервичныхТитулов))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла В(&ВладелецФайла)
		|	И СостоянияЭД.СостояниеВерсииЭД В(&ОбменЗавершен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументИБ,
		|	ПрисоединенныйФайл";
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументыИБ);
	ОбменЗавершен = Новый Массив;
	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	Запрос.УстановитьПараметр("ОбменЗавершен", ОбменЗавершен);
	ВидыПервичныхТитулов = Новый Массив;
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СчетФактура);
	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыПервичныхТитулов", ВидыПервичныхТитулов);
	ВидыОтветныхТитулов = Новый Массив;
	ВидыОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	ВидыОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Запрос.УстановитьПараметр("ВидыОтветныхТитулов", ВидыОтветныхТитулов);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.СледующийПоЗначениюПоля("ДокументИБ") Цикл
		МассивФайловЭД = Новый Массив;
		Пока Результат.СледующийПоЗначениюПоля("ПрисоединенныйФайл") Цикл
			ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПрисоединенныйФайл,
				Результат.ВидЭД, Результат.УникальныйИД, "ФайлВыгрузки", УникальныйИдентификатор);
			Если ЗначениеЗаполнено(Результат.ПодтверждениеСсылка) Тогда
				ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПодтверждениеСсылка,
					Результат.ВидЭДПодтверждения, Результат.УникальныйИДПодтверждения, "ФайлПодтверждения", УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		Соответствие.Вставить(Результат.ДокументИБ, МассивФайловЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Формирует сведения об ЭД, которые будут отражаться в едином списке документов,
// представляемых по требованию ФНС. Электронные документы должны быть по завершенным обменам,
// не помечены на удаление и принадлежать следующим видам ЭД:
// СчетФактура
// КорректировочныйСчетФактура
// ТОРГ12Продавец
// АктИсполнитель
//
// Параметры:
//
//    СвойстваЭД - Соответствие:
//       Ключ     – СправочникСсылка.ЭДПрисоединенныеФайлы.
//       Значение – Структура, Поля структуры:
//          ЭД              - СправочникСсылка.ЭДПрисоединенныеФайлы
//          ВладелецЭД      - ДокументСсылка - ссылка на объект метаданных - владельца файла
//          ВидДокументаФНС - Строка, вид электронного документа следует преобразовать
//                       к строковому представлению определенного формата. Возможные значения:
//                       "АктПриемкиСдачиРабот"
//                       "СчетФактура"
//                       "КорректировочныйСчетФактура"
//                       "ТоварнаяНакладнаяТОРГ12"
//    МассивЭД - Массив, массив ссылок на электронные документы.
//             Если массив заполнен, требуется заполнить свойства ЭД из массива.
//             Если массив пустой, тогда требуется заполнить свойства для всех ЭД,
//             удовлетворяющих свойствам, указанным выше.
//
Процедура ОпределитьСвойстваЭДДляЖурналаДокументовПредставляемыхПоТребованиюФНС(СвойстваЭД, МассивЭД) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.Ссылка, ЭДПрисоединенныеФайлы.Ссылка) КАК ЭД,
	               |	ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВладелецФайла, ЭДПрисоединенныеФайлы.ВладелецФайла) КАК ВладелецЭД,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
	               |			ТОГДА ""АктПриемкиСдачиРабот""
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	               |			ТОГДА ""КорректировочныйСчетФактура""
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	               |			ТОГДА ""СчетФактура""
	               |		КОГДА ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
	               |			ТОГДА ""ТоварнаяНакладнаяТОРГ12""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК ВидДокументаФНС
	               |ИЗ
	               |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлыВладельцы
	               |			ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДПрисоединенныеФайлыВладельцы.Ссылка
	               |		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
	               |ГДЕ
	               |	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	               |	И (ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ВидЭД, ЭДПрисоединенныеФайлы.ВидЭД) В (&ВидыЭД))
	               |	И ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ПодписанЭП, ЭДПрисоединенныеФайлы.ПодписанЭП)
	               |	И НЕ ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.ПометкаУдаления, ЭДПрисоединенныеФайлы.ПометкаУдаления)";
	
	Если ЗначениеЗаполнено(МассивЭД) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			| И ЕСТЬNULL(ЭДПрисоединенныеФайлыВладельцы.Ссылка, ЭДПрисоединенныеФайлы.Ссылка) В (&МассивЭД)";
		Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	КонецЕсли;
	
	МассивВидовЭД = Новый Массив;
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыЭД", МассивВидовЭД);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураСвойств = Новый Структура;
		СтруктураСвойств.Вставить("ВидДокументаФНС", Выборка.ВидДокументаФНС);
		СтруктураСвойств.Вставить("ВладелецЭД", Выборка.ВладелецЭД);
		СтруктураСвойств.Вставить("ЭД", Выборка.ЭД);
		
		СвойстваЭД.Вставить(Выборка.ЭД, СтруктураСвойств);
	КонецЦикла;
	
КонецПроцедуры

// Определяет владельца электронного документа
//
// Параметры:
//   ЭД         - СправочникСсылка - ссылка на  электронный документ.
//   ВладелецЭД - ссылка на владельца электронного документа.
//
Процедура ОпределитьВладельцаЭлектронногоДокумента(ЭД, ВладелецЭД) Экспорт
	
	ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВладелецФайла");
	
КонецПроцедуры

// Заполняет вид документа ФНС для владельцев электронных документов,
// которые будут отражаться в едином списке документов, представляемых по требованию ФНС.
// Для владельца ЭД должны существовать электронные документы по завершенным обменам,
// не помеченные на удаление и принадлежащие следующим видам ЭД:
// СчетФактура
// КорректировочныйСчетФактура
// ТОРГ12Продавец
// ТОРГ12Покупатель
// АктИсполнитель
// АктЗаказчик
//
// Параметры:
//   СвойстваВладельцевЭД - Соответствие:
//      Ключ     – ДокументСсылка - ссылка на владельца электронного документа
//      Значение – Строка - вид электронного документа, который следует преобразовать
//                 к строковому представлению определенного формата. Возможные значения:
//                   "АктПриемкиСдачиРабот"
//                   "СчетФактура"
//                   "КорректировочныйСчетФактура"
//                   "ТоварнаяНакладнаяТОРГ12"
//   МассивВладельцевЭД - (необязательный) Массив, массив ссылок на владельцев электронные документы.
//      Если параметр указан, требуется заполнить свойства владельцев ЭД из массива.
//      Если параметр не указан или массив пустой, тогда требуется заполнить свойства для всех владельцев ЭД, удовлетворяющих свойствам, указанным выше.
//
Процедура ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, МассивВладельцевЭД = Неопределено) Экспорт
	
	Если ТипЗнч(МассивВладельцевЭД) = Тип("Массив") Тогда
		СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивВладельцевЭД);
		СвойстваВладельцевЭД = Новый Соответствие;
		Для Каждого ВладелецЭД Из МассивВладельцевЭД Цикл
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ВладелецЭД);
			ПредставлениеЭД = "";
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
					ПредставлениеЭД = "СчетФактура";
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					ПредставлениеЭД = "КорректировочныйСчетФактура";
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
					ПредставлениеЭД = "ТоварнаяНакладнаяТОРГ12";
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
					ПредставлениеЭД = "АктПриемкиСдачиРабот";
				КонецЕсли;
			КонецЕсли;
			СвойстваВладельцевЭД.Вставить(ВладелецЭД, ПредставлениеЭД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
		ПодробныйТекстОшибки, ТекстСообщения, КодСобытия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
// Параметры:
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположеной в первой строке таблицы-владельца. (подробнее см. схему ХДТО "АктТитулИсполнителя", список "ОписьРабот"
//    , вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выписку банка в текстовом формате, а также массив ссылок на банковские счета организаций в выписке
//
// Параметры
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - содержит файл выписки банка
//  СсылкаНаХранилище - Cтрока - содержит ссылку на хранилище тестовых данных
//  МассивСчетов - Массив - cодержит ссылки на банковские счета организации
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭД, СсылкаНаХранилище, МассивСчетов) Экспорт

	МассивСчетов = Новый Массив;
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "НаправлениеЭД, Организация");
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, РеквизитыЭД.НаправлениеЭД);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
			
		Текст = Новый ТекстовыйДокумент();

		Текст.ДобавитьСтроку("1CClientBankExchange");
		Текст.ДобавитьСтроку("ВерсияФормата=1.02");
		Текст.ДобавитьСтроку("Кодировка=Windows");
		ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Отправитель");
		Получатель = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"Получатель");
		Текст.ДобавитьСтроку("Получатель=" + Получатель);
		ДатаСоздания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаСоздания");
		Если ЗначениеЗаполнено(ДатаСоздания) Тогда
			Текст.ДобавитьСтроку("ДатаСоздания=" + Формат(ДатаСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ВремяСоздания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ВремяСоздания");
		Если ЗначениеЗаполнено(ВремяСоздания) Тогда
			Текст.ДобавитьСтроку("ВремяСоздания=" + Формат(ВремяСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
		БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
		ДатаНачала = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаНачала");
		ДатаКонца  = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаКонца");
																					
		Текст.ДобавитьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДФ=dd.MM.yyyy"));
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.РасчСчет");
			Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
		КонецЦикла;
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			Текст.ДобавитьСтроку("СекцияРасчСчет");
			Текст.ДобавитьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy"));
			Текст.ДобавитьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДФ=dd.MM.yyyy"));
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.РасчСчет");
			ДополнительныеРеквизиты = Новый Структура("Владелец", РеквизитыЭД.Организация);
			СчетОрганизации = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
						"БанковскиеСчетаОрганизаций", НомерСчета, ДополнительныеРеквизиты);
			МассивСчетов.Добавить(СчетОрганизации);
			Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
			
			НачальныйОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.НачальныйОстаток");
			Если ЗначениеЗаполнено(НачальныйОстаток) Тогда
				Текст.ДобавитьСтроку("НачальныйОстаток=" + Формат(НачальныйОстаток, "ЧРД=.; ЧГ="));
			КонецЕсли;
			ВсегоПоступило = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.ВсегоПоступило");
			Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
				Текст.ДобавитьСтроку("ВсегоПоступило=" + Формат(ВсегоПоступило, "ЧРД=.; ЧГ="));
			КонецЕсли;
			ВсегоСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.ВсегоСписано");
			Если ЗначениеЗаполнено(ВсегоСписано) Тогда
				Текст.ДобавитьСтроку("ВсегоСписано=" + Формат(ВсегоСписано, "ЧРД=.; ЧГ="));
			КонецЕсли;
			КонечныйОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.КонечныйОстаток");
			Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
				Текст.ДобавитьСтроку("КонечныйОстаток=" + Формат(КонечныйОстаток, "ЧРД=.; ЧГ="));
			КонецЕсли;
			
			Текст.ДобавитьСтроку("КонецРасчСчет");
			
		КонецЦикла;
			
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СекцияДокумент = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"СекцияДокумент");
			Текст.ДобавитьСтроку("СекцияДокумент=" + СекцияДокумент);
			Номер = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Номер");
			Текст.ДобавитьСтроку("Номер=" + Номер);
			Дата = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Дата");
			Текст.ДобавитьСтроку("Дата=" + Формат(Дата, "ДФ=dd.MM.yyyy"));
			Сумма = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Сумма");
			Текст.ДобавитьСтроку("Сумма=" + Формат(Сумма, "ЧРД=.; ЧГ="));
			КвитанцияДата = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"КвитанцияДата");
			Если ЗначениеЗаполнено(КвитанцияДата) Тогда
				Текст.ДобавитьСтроку("КвитанцияДата=" + Формат(КвитанцияДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			КвитанцияВремя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"КвитанцияВремя");
			Если ЗначениеЗаполнено(КвитанцияВремя) Тогда
				Текст.ДобавитьСтроку("КвитанцияВремя=" + Формат(КвитанцияВремя, "ДЛФ=T"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "КвитанцияСодержание");
			
			ПлательщикСчет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПлательщикСчет");
			Текст.ДобавитьСтроку("ПлательщикСчет=" + ПлательщикСчет);
			ДатаСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ДатаСписано");
			Если ЗначениеЗаполнено(ДатаСписано) Тогда
				Текст.ДобавитьСтроку("ДатаСписано=" + Формат(ДатаСписано, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик");
			ПлательщикИНН = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПлательщикИНН");
			Текст.ДобавитьСтроку("ПлательщикИНН=" + ПлательщикИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКорсчет");
			ПолучательСчет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПолучательСчет");
			Текст.ДобавитьСтроку("ПолучательСчет=" + ПолучательСчет);
			ДатаПоступило = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ДатаПоступило");
			Если ЗначениеЗаполнено(ДатаПоступило) Тогда
				Текст.ДобавитьСтроку("ДатаПоступило=" + Формат(ДатаПоступило, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель");
			ПолучательИНН = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПолучательИНН");
			Текст.ДобавитьСтроку("ПолучательИНН=" + ПолучательИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКорсчет");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидОплаты");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Код");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа5");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа6");
				
			ЭтоПлатежВБюджет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ЭтоПлатежВБюджет");
			Если ЭтоПлатежВБюджет = Истина Тогда
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "СтатусСоставителя");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательКБК");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ОКАТО");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательОснования");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательПериода");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательНомера");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательДаты");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательТипа");
			КонецЕсли;
				
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Очередность");
			СрокАкцепта = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"СрокАкцепта");
			Если ЗначениеЗаполнено(СрокАкцепта) Тогда
				Текст.ДобавитьСтроку("СрокАкцепта=" + Формат(СрокАкцепта,"ЧДЦ=0; ЧГ="));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидАккредитива");
			СрокПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"СрокПлатежа");
			Если ЗначениеЗаполнено(СрокПлатежа) Тогда
				Текст.ДобавитьСтроку("СрокПлатежа=" + Формат(СрокПлатежа, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			УсловиеОплаты1 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"УсловиеОплаты");
			Если ЗначениеЗаполнено(УсловиеОплаты1) Тогда
				Текст.ДобавитьСтроку("УсловиеОплаты1="+ УсловиеОплаты1);
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлатежПоПредст");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ДополнУсловия");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НомерСчетаПоставщика");
			ДатаОтсылкиДок = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ДатаОтсылкиДок");
			Если ЗначениеЗаполнено(ДатаОтсылкиДок) Тогда
				Текст.ДобавитьСтроку("ДатаОтсылкиДок="+ Формат(ДатаОтсылкиДок, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			Текст.ДобавитьСтроку("КонецДокумента");
		КонецЦикла;
	
		Текст.ДобавитьСтроку("КонецФайла");
		
		ТекстВыписки = Текст.ПолучитьТекст();
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.УстановитьТекст(ТекстВыписки);
		ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.ANSI);
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает выписку банка в виде дерева значений
//
// Параметры
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - содержит файл выписки банка
//  ДанныеВыписки - ДеревоЗначений - содержит дерево данных выписки
//
Процедура ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭД, ДанныеВыписки) Экспорт
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, ЭД.НаправлениеЭД);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыписки = СтруктураДанных.ДеревоРазбора;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает дерево разбора, содержащее данные выписки
//
// Параметры:
// ТекстДляРазбора - Строка - текст выписки.
//
// Возвращаемое значение:
//  ДеревоЗначений - данные выписки.
//
Функция ДеревоРазбораВыпискиБанка(ТекстДляРазбора) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ДеревоРазбораВыпискиБанка(ТекстДляРазбора);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

 // Процедура используется для формирования дерева доп.данных.
// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
//
// Параметры:
//  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
//  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
//    простым типом, массивы значений, вложенные структуры данных.
//  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
//  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
//    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
//  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
//  НомерСтроки - Строка - номер строки табличной части документа ИБ.
//
Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
					
					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Список", Элемент.Ключ, ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;

				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				
				ЮридическийДо = ЮридическиЗначимый;
				
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
					СтрокаДереваНпп.ТЧ = Истина;
					
					Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
						ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле(КолонкаТЗ.Имя, "", ДоступноСимволов);
					КонецЦикла;

					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Нпп", "", ДоступноСимволов);
					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
						ЮридическиЗначимый = Ложь;
					КонецЕсли;
					СтрокаДереваНпп.ЮридическиЗначимый = ЮридическиЗначимый;
					
					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
				КонецЦикла;
				
				Если Не ЮридическийДо = ЮридическиЗначимый Тогда
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
					ОбновитьСтрокиДерева(СтрокаДерева,ЮридическиЗначимый);
				КонецЕсли;
				
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗн = НоваяСтрока.Строки.Добавить();
						СтрокаЗн.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗн.ТЧ = ЭлементТЧ;
						СтрокаЗн.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗн.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗн, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗн.ЗначениеРеквизита = Значение;
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = Элемент.Значение;
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтрокиДерева(СтрокаДерева, ЮридическиЗначимый);
	
	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
		
		ТекСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
		Если ТекСтрока.Строки.Количество()> 0 Тогда
			ОбновитьСтрокиДерева(ТекСтрока, ЮридическиЗначимый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции

Процедура ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, ИмяПараметра)
	
	ЗначениеПараметра = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									ИмяПараметра);
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Текст.ДобавитьСтроку(ИмяПараметра + "=" + СтрЗаменить(ЗначениеПараметра, Символы.ПС, ""));
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеЭД(МассивФайловЭД, ЭД, ВидЭД, СтрокаУИД, ТипФайла, УникальныйИдентификатор)
	
	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД, УникальныйИдентификатор);
	
	СтруктураПараметровЭД = Новый Структура;
	СтруктураПараметровЭД.Вставить("ТипФайла", ТипФайла);
	СтруктураПараметровЭД.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
	СтруктураПараметровЭД.Вставить("КНД", ЭлектронныеДокументыПовтИсп.КНДпоВидуЭД(ВидЭД));
	СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	МассивФайловЭД.Добавить(СтруктураПараметровЭД);
	
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ЭД, УникальныйИдентификатор);
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
			ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
			Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
				ИмяФайлаПодписи = ДанныеФайла.Наименование + ".p7s";
			КонецЕсли;
			
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("ТипФайла", ?(ТипФайла = "ФайлВыгрузки", "ЭЦП", "ЭЦППодтверждения"));
			СтруктураПараметровЭД.Вставить("ИмяФайла", ИмяФайлаПодписи);
			СтруктураПараметровЭД.Вставить("КНД", "");
			СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", СтруктураПодписи.АдресПодписи);
			
			МассивФайловЭД.Добавить(СтруктураПараметровЭД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


#Если Клиент Тогда
	
Процедура ПоказатьФайлыКСсылкеНаОбъект(ЭтаФорма, Ссылка) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Документ не записан. Запишите документ и повторите операцию.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

#КонецЕсли

/////////////// ОБЩИЕ

Функция ПолучитьПараметрыЭлектронногоОбменаПоУчетнойЗаписиИКонтрагенту(УчетнаяЗаписьЭлектронногоОбмена, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные *
	|	
	|ИЗ
	|	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
	|ГДЕ
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена = &УчетнаяЗаписьЭлектронногоОбмена
	|	И ПараметрыЭлектронногоОбмена.Контрагент = &Контрагент
	|	И ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена.ПометкаУдаления = Ложь";

	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектронногоОбмена", УчетнаяЗаписьЭлектронногоОбмена);
	Запрос.УстановитьПараметр("Контрагент",Контрагент); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьМассивКонтрагентовПоОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные Различные
	|	ПараметрыЭлектронногоОбмена.Контрагент КАК Контрагент
	|	
	|ИЗ
	|	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
	|ГДЕ
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена.Владелец = &Организация
	|	И ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена.ПометкаУдаления = Ложь";

	Запрос.УстановитьПараметр("Организация", Организация);
		
	МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат МассивКонтрагентов;
	
КонецФункции

Функция ПолучитьМассивКонтрагентовПоУчетнойЗаписи(УчетнаяЗаписьЭлектронногоОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные Различные
	|	ПараметрыЭлектронногоОбмена.Контрагент КАК Контрагент
	|	
	|ИЗ
	|	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
	|ГДЕ
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена = &УчетнаяЗаписьЭлектронногоОбмена
	|	И ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена.ПометкаУдаления = Ложь";

	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектронногоОбмена", УчетнаяЗаписьЭлектронногоОбмена);
		
	МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат МассивКонтрагентов;
	
КонецФункции

Функция ПолучитьДоступныеУчетныеЗаписиЭлектронногоОбмена(Организация, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена
	|ИЗ
	|	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
	|ГДЕ
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена.Владелец = &Организация
	|	И ПараметрыЭлектронногоОбмена.Контрагент = &Контрагент
	|	И ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	
	МассивУчетныхЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗаписьЭлектронногоОбмена");
	
	Возврат МассивУчетныхЗаписей;
	
КонецФункции

Функция ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		
		Запрос.Текст = 
			"ВЫБРАТЬ Разрешенные
			|	УчетныеЗаписиЭлектронногоОбмена.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектронногоОбмена КАК УчетныеЗаписиЭлектронногоОбмена
			|ГДЕ
			|	УчетныеЗаписиЭлектронногоОбмена.Владелец = &Организация
			|	И УчетныеЗаписиЭлектронногоОбмена.ПометкаУдаления = Ложь";
			
		Запрос.УстановитьПараметр("Организация", Организация);
		
	Иначе
	
		Запрос.Текст = 
			"ВЫБРАТЬ Разрешенные
			|	УчетныеЗаписиЭлектронногоОбмена.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектронногоОбмена КАК УчетныеЗаписиЭлектронногоОбмена
			|ГДЕ УчетныеЗаписиЭлектронногоОбмена.ПометкаУдаления = Ложь";
		
	КонецЕсли;
			
	МассивУчетныхЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивУчетныхЗаписей;
	
КонецФункции

Функция ПолучитьВсеОрганизацииДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные Различные
		|	УчетныеЗаписиЭлектронногоОбмена.Владелец КАК Владелец
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектронногоОбмена КАК УчетныеЗаписиЭлектронногоОбмена
		|ГДЕ
		|	УчетныеЗаписиЭлектронногоОбмена.ПометкаУдаления = Ложь";		
			
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Владелец");
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ПолучитьВсехКонтрагентовДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные Различные
	|	ПараметрыЭлектронногоОбмена.Контрагент КАК Контрагент
	|	
	|ИЗ
	|	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
	|ГДЕ
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена.ПометкаУдаления = Ложь";
    			
	МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат МассивКонтрагентов;	
	
КонецФункции

Функция НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, ИмяДокументаПоиска) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Разрешенные Первые 1
	               |	ДокументПоиска.Ссылка
	               |ИЗ
	               |	Документ." + ИмяДокументаПоиска + " КАК ДокументПоиска
				   |ГДЕ
				   |	ДокументПоиска.ИсходныйДокумент = &СсылкаНаДокумент
				   |	И ДокументПоиска.ПометкаУдаления = Ложь";
				   
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Таблица = РезультатЗапроса.Выгрузить();
		Возврат Таблица[0].Ссылка;
	КонецЕсли;	
	
КонецФункции

Процедура ПередЗаписьюДокументаВведенногоНаОсновании(ЭтотОбъект, Отказ) Экспорт
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = "";
	ДокументСозданныйНаОсновании = Неопределено;
	ЭлектронныеДокументы.ПроверитьРеквизитИсходныйДокумент(ЭтотОбъект, Отказ, Сообщение, ДокументСозданныйНаОсновании);
	
	Если Отказ
		ИЛИ НЕ ПустаяСтрока(Сообщение) Тогда
		Сообщить("Электронный документ """ + ЭтотОбъект + """ не может быть записан: " + Сообщение, СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюИсходящегоЭлектронногоДокумента(ЭтотОбъект, Отказ, ПроверятьУчетныйДокумент = Ложь) Экспорт
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация, от имени которой отправляется документ", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан контрагент, которому адресуется документ", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.УчетнаяЗаписьЭлектронногоОбмена) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не указана учетная запись, по которой необходимо произвести обмен данными", Отказ);
		
	ИначеЕсли Не Отказ Тогда
		
		МассивУчетныхЗаписей = ПолучитьДоступныеУчетныеЗаписиЭлектронногоОбмена(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент);
		
		Если МассивУчетныхЗаписей.Найти(ЭтотОбъект.УчетнаяЗаписьЭлектронногоОбмена) = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Учетная запись обмена не соответствует указанным в документе обмена Организации и Контрагенту", Отказ);	
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Если НЕ ПроверятьУчетныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	УчетныйДокумент = ЭтотОбъект.УчетныйДокумент;
	
	ТипУчетногоДокумента = ТипЗнч(УчетныйДокумент);
	СтрокаТипаУчетногоДокумента = "";
	
	Если НЕ ЗначениеЗаполнено(УчетныйДокумент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан документ: """ + СтрокаТипаУчетногоДокумента + """ для отправки", Отказ);
	Иначе
		
		// надо проверить что контрагент и организация документа соответствует электронному документу
		Если ЗначениеЗаполнено(ЭтотОбъект.Организация)
			И ЗначениеЗаполнено(УчетныйДокумент.Организация)
			И УчетныйДокумент.Организация <> ЭтотОбъект.Организация Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Организация электронного документа не соответствует организации документа в учетной системе", Отказ);	
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент)
			И ЗначениеЗаполнено(УчетныйДокумент.Контрагент)
			И УчетныйДокумент.Контрагент <> ЭтотОбъект.Контрагент Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Контрагент электронного документа не соответствует контрагенту документа в учетной системе", Отказ);	
			
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры

#Если Клиент Тогда
	
Процедура ПередОткрытиемФормыДокументаВведенногоНаОсновании(Объект, Отказ, ЭтаФорма) Экспорт
	
	Сообщение = "";
	ДокументСозданныйНаОсновании = Неопределено;
	ЭлектронныеДокументы.ПроверитьРеквизитИсходныйДокумент(Объект, Отказ, Сообщение, ДокументСозданныйНаОсновании);
	
	Если ЗначениеЗаполнено(ДокументСозданныйНаОсновании) Тогда
		ДокументСозданныйНаОсновании.ПолучитьФорму(,ЭтаФорма.ВладелецФормы).Открыть();		
	КонецЕсли;		
	
КонецПроцедуры

Функция ПроверитьПередОтправкойЭлектронногоДокумента(Форма, ЗадаватьВопросОПовторнойОтправке = Истина, ЗадаватьВопросОЗаписиДокумента = Ложь) Экспорт
	
	Если ЗадаватьВопросОПовторнойОтправке
		И ЗначениеЗаполнено(Форма.ДатаОтправки) 
		и Вопрос("Документ уже отправлен! Отправить повторно?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Форма.ДокументОбъект.Модифицированность() Тогда
		
		Если ЗадаватьВопросОЗаписиДокумента
			И Вопрос("Перед отправкой документ должен быть записан. Записать документ?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			
			Если Не Форма.ЗаписатьВФорме() Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Предупреждение("Операция не выполнена.");
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецЕсли

Процедура ПроверитьРеквизитИсходныйДокумент(Объект, Отказ, Сообщение = "", ДокументСозданныйНаОсновании = Неопределено) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Объект.Метаданные();
	
	Если НЕ ЗначениеЗаполнено(Объект.ИсходныйДокумент) Тогда
		
		Сообщение = Сообщение + Символы.ПС + "- Документ """ + ОбъектМетаданных.Представление() + """ может вводится только на основании документа:";
		Для каждого МетаданноеОснования Из ОбъектМетаданных.ВводитсяНаОсновании Цикл
			Сообщение = Сообщение + " """ + МетаданноеОснования.Представление() + """;";
		КонецЦикла;
		Отказ = Истина;
		Возврат;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Первые 1
	|	ЭлектронныйДокумент.Ссылка КАК Ссылка
	|ИЗ
	|	" + ОбъектМетаданных.ПолноеИмя() + " КАК ЭлектронныйДокумент
	|ГДЕ
	|	ЭлектронныйДокумент.Ссылка <> &ЭтотДокумент
	|	И ЭлектронныйДокумент.ИсходныйДокумент = &ИсходныйДокумент
	|	И ЭлектронныйДокумент.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("ИсходныйДокумент", Объект.ИсходныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ИсходныйДокумент <> Объект.Ссылка.ИсходныйДокумент Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ТаблицаДокументов = РезультатЗапроса.Выгрузить();
	ДокументСозданныйНаОсновании = ТаблицаДокументов[0].Ссылка;
	
	Сообщение = Сообщение + Символы.ПС + "- Уже существуют документы, введенные на основании исходного документа (" + Строка(ДокументСозданныйНаОсновании) + ")";	
	
КонецПроцедуры

Процедура ЗаполнитьШапкуИсходящегоДокументаПоОснованию(ДокументОбъект, Основание) Экспорт
	
	ДокументОбъект.ИсходныйДокумент = Основание.Ссылка;
	
	ДокументОбъект.Контрагент       = Основание.Контрагент;
	ДокументОбъект.Организация      = Основание.Организация;
	
	ДокументОбъект.Дата             = ТекущаяДата();
			
	ДокументОбъект.Ответственный    = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");
	
	ДокументОбъект.УчетнаяЗаписьЭлектронногоОбмена = Основание.УчетнаяЗаписьЭлектронногоОбмена;
	
	ДокументОбъект.ДлительностьОжиданияОтвета      = Основание.УчетнаяЗаписьЭлектронногоОбмена.ВремяОжиданияОтвета;
		
КонецПроцедуры // () 

Функция ХМЛБулево(Значение)Экспорт
	
	Если Значение Тогда
		Возврат "true";
	Иначе
		Возврат "false";
	КонецЕсли;
	
КонецФункции // () 

Функция ХМЛЧисло(Значение)Экспорт
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции // () 

Функция ХМЛДата(Значение)Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
	
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
		
	Иначе
		
		Возврат "0001-01-01T00:00:00";
		
	КонецЕсли;
	
КонецФункции // () 

Функция ХМЛДлительность(Значение) Экспорт
	
	Возврат "PT" + Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=") + "M";
	
КонецФункции // () 

Функция ПолучитьОбъектПоИдентификатору(Значение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыЭлектронногоОбмена.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ИдентификаторыЭлектронногоОбмена КАК ИдентификаторыЭлектронногоОбмена
	|ГДЕ
	|	ИдентификаторыЭлектронногоОбмена.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Значение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Объект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // () 

Функция ПолучитьСтруктуруСвойствНоменклатурыЭлектронногоОбмена() Экспорт
	
	СтруктураСвойствЭлектронногоОбмена = Новый Структура;
	Выборка = Справочники.СвойстваНоменклатурыЭлектронногоОбмена.Выбрать();
	Пока Выборка.Следующий() Цикл		
		СтруктураСвойствЭлектронногоОбмена.Вставить(СокрЛП(Выборка.Код), Новый Структура("Представление, СвойствоНоменклатуры", Выборка.Наименование, Выборка.СвойствоНоменклатуры));
	КонецЦикла;
	
	Возврат СтруктураСвойствЭлектронногоОбмена;
	
КонецФункции // () 

Функция ПолучитьЕдиницуИзмеренияНоменклатурыПоКлассификатору(Номенклатура, ЕдиницаПоКлассификатору) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору" + ?(ТипЗнч(ЕдиницаПоКлассификатору) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"), "", ".Код")+ " = &ЕдиницаПоКлассификатору
	|	И ЕдиницыИзмерения.Владелец = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", ЕдиницаПоКлассификатору);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьВТабличнойЧастиНоменклатуру(СтрокаТовара, Значение, Характеристика = Неопределено)
	
	Если ТипЗНЧ(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтрокаТовара.Номенклатура     = Значение;
		СтрокаТовара.ХарактеристикаНоменклатуры = Характеристика;
		
	ИначеЕсли ТипЗНЧ(Значение) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		СтрокаТовара.ХарактеристикаНоменклатуры   = Значение;
		СтрокаТовара.Номенклатура   = Значение.Владелец;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруИХарактеристикуПоИдентификатору(СтрокаТовара, Идентификатор, Параметры = Неопределено) Экспорт
	
	// порядок поиска
	// 1. Внутренний идентификатор
	// 2. Штрихкод
	// 3. Код номенклатуры контрагента
	// 4. Артикул
	
	СтрокаТовара.Номенклатура = Неопределено;
	СтрокаТовара.ХарактеристикаНоменклатуры = Неопределено;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
	
		Значение = ПолучитьОбъектПоИдентификатору(Идентификатор);
		
	Иначе
		
		Значение = Идентификатор;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		
		УстановитьВТабличнойЧастиНоменклатуру(СтрокаТовара, Значение, Неопределено);		
		
	Иначе
		
		// не нашли по идентификатору
		
		// попробуем найти товар по штрихкоду
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Разрешенные Первые 1
		               |	Штрихкоды.Владелец КАК Владелец,
		               |	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		               |ИЗ
		               |	РегистрСведений.Штрихкоды КАК Штрихкоды
					   |ГДЕ
					   |	Штрихкоды.Штрихкод = &Штрихкод";
					   
		Запрос.УстановитьПараметр("Штрихкод", Идентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			СтрокаРезультата = РезультатЗапроса.Выгрузить()[0];
			УстановитьВТабличнойЧастиНоменклатуру(СтрокаТовара, СтрокаРезультата.Владелец, СтрокаРезультата.ХарактеристикаНоменклатуры);
			
		Иначе
			
			// не нашли по штрихкоду - ищем по коду номенклатуры контрагента
			Контрагент = Неопределено;
			
			Если Параметры <> Неопределено
				И Параметры.Свойство("Контрагент", Контрагент)
				И ЗначениеЗаполнено(Контрагент)
				И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ Разрешенные Первые 1
				               |	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
				               |	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
				               |ИЗ
				               |	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
							   |ГДЕ
							   |	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента = &КодНоменклатурыКонтрагента
							   |	И НоменклатураКонтрагентов.Контрагент = &Контрагент";
							   
				Запрос.УстановитьПараметр("КодНоменклатурыКонтрагента", Идентификатор);
				Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
				
					СтрокаРезультата = РезультатЗапроса.Выгрузить()[0];
					УстановитьВТабличнойЧастиНоменклатуру(СтрокаТовара, СтрокаРезультата.Номенклатура, СтрокаРезультата.ХарактеристикаНоменклатуры);
					
				Иначе
					
					// ищем по артикулу
					Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Идентификатор);
					Если ЗначениеЗаполнено(Номенклатура) Тогда
						
						СтрокаТовара.Номенклатура = Номенклатура;
												
					КонецЕсли;
										
				КонецЕсли;
				
			КонецЕсли;			
			
		КонецЕсли;
				
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура)
		И Параметры <> Неопределено Тогда
		
		СтруктураПараметровДляНоменклатуры = Параметры.ОшибкиНоменклатуры;
		СтруктураПараметровДляНоменклатуры.Вставить(Идентификатор, "Номенклатура по идентификатору не найдена: " + Идентификатор);	
		
	КонецЕсли;
	
КонецПроцедуры // () 

/////////////// ЧТЕНИЕ ДОКУМЕНТА ИЗ ХМЛ

Функция ПолучитьСсылкуНаДокументПоДаннымИзXML(ОбъектXML, СсылкаПоУмолчанию = Неопределено, Параметры = Неопределено) Экспорт
	
	Попытка
		НомерДокумента = ЭлектронныеДокументы.ПолучитьТекстЭлементаХМЛ(ОбъектXML);
		
		Если Не ПустаяСтрока(НомерДокумента)
			И Найти(НомерДокумента, "}") = 0 Тогда
			
			НомерДокумента = НомерДокумента + "}";
			
		КонецЕсли;
		
		Ссылка = ЗначениеИзСтрокиВнутр(НомерДокумента);
		
	Исключение
		
		Ссылка = СсылкаПоУмолчанию;
		
		Если Параметры <> Неопределено Тогда
			
			ДополинтьИнформациюДляСообщения(Параметры.ТекстОшибки, "Не найден документ по номеру: " + НомерДокумента);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Ссылка;
	
КонецФункции

Функция ПолучитьТекстЭлементаХМЛ(ОбъектXML) Экспорт

	Если ОбъектXML.Прочитать() И ОбъектXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Возврат ОбъектXML.Значение;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПолучитьЧислоЭлемента(ОбъектXML) Экспорт
	
	Если ОбъектXML.Прочитать() И ОбъектXML.ТипУзла = ТипУзлаXML.Текст Тогда
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
		Возврат ОписаниеТиповЧисло.ПривестиЗначение(ОбъектXML.Значение);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // () 

Функция ПолучитьБулевоЭлемента(ОбъектXML) Экспорт
	
	Если ОбъектXML.Прочитать() И ОбъектXML.ТипУзла = ТипУзлаXML.Текст и НРег(ОбъектXML.Значение) = "true" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // () 

Функция ПолучитьДлительностьЭлемента(ОбъектXML) Экспорт
	
	Если ОбъектXML.Прочитать() И ОбъектXML.ТипУзла = ТипУзлаXML.Текст Тогда
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
		Возврат ОписаниеТиповЧисло.ПривестиЗначение(Сред(ОбъектXML.Значение,3, СтрДлина(ОбъектXML.Значение) - 3));
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // () 

Функция ПолучитьДатуЭлемента(ОбъектXML) Экспорт 
	
	Если ОбъектXML.Прочитать() И ОбъектXML.ТипУзла = ТипУзлаXML.Текст Тогда
		
		Попытка
			Возврат XMLЗначение(Тип("Дата"), ОбъектXML.Значение);
		Исключение			
		КонецПопытки;	
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // () 

Функция ПолучитьСсылкуЭлемента(ОбъектXML)Экспорт 
	
	Текст = ПолучитьТекстЭлементаХМЛ(ОбъектXML);
	Значение = ПолучитьОбъектПоИдентификатору(Текст);
	
	Возврат ?(Значение = Неопределено, Текст, Значение);
	
КонецФункции

Функция ПолучитьКонтрагентаПоИдентификаторуЭлектронногоОбмена(Идентификатор, УчетнаяЗаписьЭлектронногоОбмена)
	
	// поиск по уникальному идентификатору
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыЭлектронногоОбмена.Контрагент
	|ИЗ
	|	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
	|ГДЕ
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена = &УчетнаяЗаписьЭлектронногоОбмена
	|	И ПараметрыЭлектронногоОбмена.Идентификатор = &ИдентификаторКонтрагента";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектронногоОбмена", УчетнаяЗаписьЭлектронногоОбмена);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;
	
	// поиск по GLN
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыЭлектронногоОбмена.Контрагент
	|ИЗ
	|	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
	|ГДЕ
	|	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена = &УчетнаяЗаписьЭлектронногоОбмена
	|	И ПараметрыЭлектронногоОбмена.GLN = &ИдентификаторКонтрагента";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектронногоОбмена", УчетнаяЗаписьЭлектронногоОбмена);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // () 

Функция НайтиСуществующийИлиСоздатьДокументПоПараметрам(ИмяДокументаПоиска, Организация, Контрагент, НомерВходящегоДок, ДатаВходящегоДок)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(НомерВходящегоДок)
		И ЗначениеЗаполнено(ДатаВходящегоДок) Тогда
		
		ДатаНачала = НачалоГода(ДатаВходящегоДок);
		ДатаКонца = КонецГода(ДатаВходящегоДок);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые 1
		               |	Документ.Ссылка
		               |ИЗ
		               |	Документ." + ИмяДокументаПоиска + " КАК Документ
					   |ГДЕ
					   |	Документ.Организация = &Организация
					   |	И Документ.Контрагент = &Контрагент
					   |	И Документ.НомерВходящегоДокумента = &НомерВходящегоДок
					   |	И Документ.Дата >= &ДатаНачала
					   |	И Документ.Дата <= &ДатаКонца";
					   
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("НомерВходящегоДок", НомерВходящегоДок);
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
					   
		Таблица = Запрос.Выполнить().Выгрузить();
		КоличествоСтрокВТаблице = Таблица.Количество();
		
	Иначе
		КоличествоСтрокВТаблице = 0;
		
	КонецЕсли;
	
	Если КоличествоСтрокВТаблице = 0 Тогда
		
		ЭлДок = Документы[ИмяДокументаПоиска].СоздатьДокумент();
		ЭлДок.Организация = Организация;
		ЭлДок.Контрагент = Контрагент;
		ЭлДок.НомерВходящегоДокумента = НомерВходящегоДок;
		ЭлДок.ДатаВходящегоДокумента = ДатаВходящегоДок;
		
		Если ТипЗнч(ЭлДок) = Тип("ДокументОбъект.ВходящееИзвещение") Тогда
			ЭлДок.Дата = ДатаВходящегоДок;			
		Иначе
			ЭлДок.Дата = ТекущаяДата();						
		КонецЕсли;		
				
	Иначе
		
		ЭлДок = Таблица[0].Ссылка.ПолучитьОбъект();		
		ЭлДок.ПометкаУдаления = Ложь;
		ЭлДок.Обработан = Ложь;
		
		// очищаем ТЧ
		МетаданныеДокумента = ЭлДок.Метаданные();
		Для Каждого МетаданныеТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
			ЭлДок[МетаданныеТЧ.Имя].Очистить();
		КонецЦикла;
		
		Если ТипЗнч(ЭлДок) = Тип("ДокументОбъект.ВходящееИзвещение") Тогда		
			ЭлДок.Дата = ДатаВходящегоДок;			
		Иначе
			ЭлДок.Дата = ТекущаяДата();			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ЭлДок;
	
КонецФункции

Функция ОпределитьПоИмениУзлаДокументаИмяДокументаМетаданных(ИмяУзла)
	
	Если ИмяУзла = "ЗапросКаталога" Тогда					
		Возврат "ВходящийЗапросКаталога";
	ИначеЕсли ИмяУзла = "КаталогТоваров" Тогда
		Возврат "ВходящийКаталогТоваров";
	ИначеЕсли ИмяУзла = "ТоварКРаботе" Тогда
		Возврат "ВходящийТоварКРаботе";
	ИначеЕсли ИмяУзла = "ЗапросПрайсЛист" Тогда
		Возврат "ВходящийЗапросПрайсЛиста";
	ИначеЕсли ИмяУзла = "ПрайсЛист" Тогда
		Возврат "ВходящийПрайсЛист";
	ИначеЕсли ИмяУзла = "Заказ" Тогда
		Возврат "ВходящийЗаказ";
	ИначеЕсли ИмяУзла = "РеджектЗаказа" Тогда
		Возврат "ВходящийРеджектЗаказа";
	ИначеЕсли ИмяУзла = "АкцептЗаказа" Тогда
		Возврат "ВходящийАкцептЗаказа";
	ИначеЕсли ИмяУзла = "ЭлектроннаяНакладная" Тогда
		Возврат "ВходящаяЭлектроннаяНакладная";
	ИначеЕсли ИмяУзла = "РеджектНакладной" Тогда
		Возврат "ВходящийРеджектНакладной";
	ИначеЕсли ИмяУзла = "АкцептНакладной" Тогда
		Возврат "ВходящийАкцептНакладной";
	ИначеЕсли ИмяУзла = "СчетФактура" Тогда
		Возврат "ВходящийСчетФактура";
	ИначеЕсли ИмяУзла = "АкцептСчетФактура" Тогда
		Возврат "ВходящийАкцептСчетаФактуры";
	ИначеЕсли ИмяУзла = "РеджектСчетФактура" Тогда
		Возврат "ВходящийРеджектСчетаФактуры";
	ИначеЕсли ИмяУзла = "Извещение" Тогда
		Возврат "ВходящееИзвещение";		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ДополинтьИнформациюДляСообщения(Информация, ТекущееСообщение, Отказ = Ложь) Экспорт
	
	ОбщегоНазначения.СообщитьОбОшибке(ТекущееСообщение, Отказ);
	
	Если ПустаяСтрока(Информация) Тогда
		Информация = ТекущееСообщение;
	Иначе
		Информация = Информация + Символы.ПС + ТекущееСообщение;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруПараметровДляЗагрузкиДокумента()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстОшибки", "");
	Параметры.Вставить("ОшибкиНоменклатуры", Новый Соответствие);
	
	ТаблицаПриложенныхФайлов = Новый ТаблицаЗначений();
	ТаблицаПриложенныхФайлов.Колонки.Добавить("ИмяФайла");
	ТаблицаПриложенныхФайлов.Колонки.Добавить("ДанныеФайла");
	ТаблицаПриложенныхФайлов.Колонки.Добавить("ЭтоИзображение");
	
	Параметры.Вставить("ТаблицаПриложенныхФайлов", ТаблицаПриложенныхФайлов);	
	
	Возврат Параметры;	
	
КонецФункции

Функция ОбработатьВходящийXML(ИмяФайлаДляЗагрузки, УчетнаяЗаписьЭлектронногоОбмена, ОтправлятьИсходящиеИзвещения = Ложь)
	
	ДанныеОбмена = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаДляЗагрузки));
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайлаДляЗагрузки);
		
	Параметры        = СоздатьСтруктуруПараметровДляЗагрузкиДокумента();
	ИмяКорневогоУзла = Неопределено;
	Прочитали = Ложь;
	
	ЭлДок = Неопределено;
	
	Организация = Неопределено;
	Контрагент = Неопределено;
	НомерВходящегоДок = Неопределено;
	ДатаВходящегоДок = Неопределено;
	
	СтрокаСообщенияДляИзвещения = "";
	ТекущаяСтрокаТаблицыФайлов = Неопределено;
		
	Пока ОбъектXML.Прочитать() Цикл
		
		ТипУзла = ОбъектXML.ТипУзла;
		ИмяУзла = ОбъектXML.ЛокальноеИмя;
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
			Если ИмяУзла = "ЗапросКаталога"
				ИЛИ ИмяУзла = "КаталогТоваров" 
				ИЛИ ИмяУзла = "ТоварКРаботе" 
				ИЛИ ИмяУзла = "ЗапросПрайсЛист" 
				ИЛИ ИмяУзла = "ПрайсЛист" 
				ИЛИ ИмяУзла = "Заказ" 
				ИЛИ ИмяУзла = "РеджектЗаказа" 
				ИЛИ ИмяУзла = "АкцептЗаказа" 
				ИЛИ ИмяУзла = "ЭлектроннаяНакладная" 
				ИЛИ ИмяУзла = "РеджектНакладной"
				ИЛИ ИмяУзла = "АкцептНакладной"
				ИЛИ ИмяУзла = "СчетФактура" 
				ИЛИ ИмяУзла = "АкцептСчетФактура"
				ИЛИ ИмяУзла = "РеджектСчетФактура"
				ИЛИ ИмяУзла = "Извещение" Тогда
				
				ИмяКорневогоУзла = ИмяУзла;
				СтрокаСообщенияДляИзвещения = "";
				Продолжить;
				
			КонецЕсли;
				
			Если ИмяКорневогоУзла <> Неопределено Тогда
					
				Если ИмяУзла = "ИдОтправителя" Тогда
						
					Значение = ПолучитьТекстЭлементаХМЛ(ОбъектXML);
					Контрагент = ПолучитьКонтрагентаПоИдентификаторуЭлектронногоОбмена(Значение, УчетнаяЗаписьЭлектронногоОбмена);
						
					Если Контрагент = Неопределено Тогда
						ДополинтьИнформациюДляСообщения(СтрокаСообщенияДляИзвещения, "Контрагент: """ + Значение + """ не найден в учетной записи: " + УчетнаяЗаписьЭлектронногоОбмена);
					КонецЕсли;
					
					Параметры.Вставить("Контрагент", Контрагент);
						
				ИначеЕсли ИмяУзла = "ИдПолучателя" Тогда
					
					Значение = ПолучитьТекстЭлементаХМЛ(ОбъектXML);
					Если НЕ (Значение = УчетнаяЗаписьЭлектронногоОбмена.Идентификатор
						ИЛИ Значение = УчетнаяЗаписьЭлектронногоОбмена.GLN) Тогда
						
						ДополинтьИнформациюДляСообщения(СтрокаСообщенияДляИзвещения, "Идентификатор получателя не соответствует идентификатору и GLN организации в учетной записи");
						
					КонецЕсли;
					Организация = УчетнаяЗаписьЭлектронногоОбмена.Владелец;
						
				ИначеЕсли ИмяУзла = "НомерДокумента" Тогда
					НомерВходящегоДок = ПолучитьТекстЭлементаХМЛ(ОбъектXML);
					
				ИначеЕсли ИмяУзла = "МоментСоздания" Тогда
					ДатаВходящегоДок = ПолучитьДатуЭлемента(ОбъектXML);
					
					ЭлДок = НайтиСуществующийИлиСоздатьДокументПоПараметрам(ОпределитьПоИмениУзлаДокументаИмяДокументаМетаданных(ИмяКорневогоУзла),
						Организация, Контрагент, НомерВходящегоДок, ДатаВходящегоДок);
						
					ЭлДок.ДанныеОбмена = ДанныеОбмена;					
					
				ИначеЕсли ИмяУзла = "Примечание" и Не Параметры.Свойство("СтрокаТовара") Тогда
					ЭлДок.Примечание = ПолучитьТекстЭлементаХМЛ(ОбъектXML);					
					
				ИначеЕсли ИмяУзла = "ДополнительныеФайлы" Тогда
					
					Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Параметры.Вставить("ДополнительныеФайлы", Истина);
					ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					    Параметры.Удалить("ДополнительныеФайлы");
					КонецЕсли;
					
				ИначеЕсли ИмяУзла = "Файл" и Параметры.Свойство("ДополнительныеФайлы") Тогда
					
					Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Параметры.Вставить("Файл", Истина);
					ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					    Параметры.Удалить("Файл");
					КонецЕсли;
					
				ИначеЕсли ИмяУзла = "ИмяФайла" и Параметры.Свойство("Файл") Тогда
					
					ТекущаяСтрокаТаблицыФайлов = Параметры.ТаблицаПриложенныхФайлов.Добавить();
					ТекущаяСтрокаТаблицыФайлов.ИмяФайла = ПолучитьТекстЭлементаХМЛ(ОбъектXML);
					
				ИначеЕсли ИмяУзла = "ДанныеФайла" и Параметры.Свойство("Файл") Тогда
					
					ТекущаяСтрокаТаблицыФайлов.ДанныеФайла = ПолучитьТекстЭлементаХМЛ(ОбъектXML);
					
				ИначеЕсли ИмяУзла = "ЭтоИзображение" и Параметры.Свойство("Файл") Тогда
					
					ТекущаяСтрокаТаблицыФайлов.ЭтоИзображение = ПолучитьБулевоЭлемента(ОбъектXML);												
					
				Иначе
					
				    // сам документ обрабатывает загрузку	
					УзелОбработан = ЭлДок.ЗагрузитьЭлементХМЛ(ОбъектXML, ИмяУзла, Параметры);
										
				КонецЕсли;
					
			КонецЕсли;
				
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента и ИмяКорневогоУзла = ИмяУзла Тогда
				
			Если ИмяКорневогоУзла <> Неопределено Тогда
				
				Прочитали = Истина;
				
				ЭлДок.УчетнаяЗаписьЭлектронногоОбмена = УчетнаяЗаписьЭлектронногоОбмена;
				
				Попытка
					
					ЭлДок.Записать();
					
					Для Каждого СтрокаФайлов Из Параметры.ТаблицаПриложенныхФайлов Цикл
						
						Попытка
						
							ЗапросФайла = Новый Запрос();
							ЗапросФайла.Текст = "ВЫБРАТЬ Первые 1
							                    |	ХранилищеДополнительнойИнформации.Ссылка
							                    |ИЗ
							                    |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
												|ГДЕ
												|	ХранилищеДополнительнойИнформации.Объект = &Объект
												|	И ХранилищеДополнительнойИнформации.Наименование = &Наименование
												|	И ХранилищеДополнительнойИнформации.ПометкаУдаления = Ложь";
												
							ЗапросФайла.УстановитьПараметр("Объект", ЭлДок.Ссылка);
							ЗапросФайла.УстановитьПараметр("Наименование", СтрокаФайлов.ИмяФайла);
							
							РезультатЗапроса = ЗапросФайла.Выполнить();
							
							Если РезультатЗапроса.Пустой() Тогда
								ОбъектХранилища = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
							Иначе
								Выборка = РезультатЗапроса.Выбрать();
								Выборка.Следующий();
								ОбъектХранилища = Выборка.Ссылка.ПолучитьОбъект();
							КонецЕсли;
							
							ОбъектХранилища.ИмяФайла = СтрокаФайлов.ИмяФайла;
							ОбъектХранилища.Наименование = СтрокаФайлов.ИмяФайла;
							ОбъектХранилища.ВидДанных = ?(СтрокаФайлов.ЭтоИзображение = Истина, Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение, Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл);
							ОбъектХранилища.Объект = ЭлДок.Ссылка;
							
							ДвоичныеДанныеФайла = XMLЗначение(Тип("ДвоичныеДанные"), СтрокаФайлов.ДанныеФайла);
							Если ДвоичныеДанныеФайла <> Неопределено
								И ОбъектХранилища.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение Тогда
								
								Попытка
									ДвоичныеДанныеФайла = Новый Картинка(ДвоичныеДанныеФайла);
								Исключение
								КонецПопытки;
								
							КонецЕсли;
							
							ОбъектХранилища.Хранилище = Новый ХранилищеЗначения(ДвоичныеДанныеФайла);
							ОбъектХранилища.Записать();
							
						Исключение
							
							// не удалось файл прикрепить
							ОбщегоНазначения.СообщитьОбОшибке("Ошибка добавления файла к документу: " + Строка(ЭлДок.Ссылка) + " " + ОписаниеОшибки());
							
						КонецПопытки;
						
					КонецЦикла;
					
					Если ОтправлятьИсходящиеИзвещения
						И ТипЗнч(ЭлДок) <> Тип("ДокументОбъект.ВходящееИзвещение") Тогда
						
						ДокИсходящееИзвещение = Документы.ИсходящееИзвещение.СоздатьДокумент();
						ДокИсходящееИзвещение.Дата = ТекущаяДата();
						ДокИсходящееИзвещение.УчетнаяЗаписьЭлектронногоОбмена = УчетнаяЗаписьЭлектронногоОбмена;
						ДокИсходящееИзвещение.Организация = Организация;
						ДокИсходящееИзвещение.Контрагент = Контрагент;
						ДокИсходящееИзвещение.ИсходныйДокумент = ЭлДок.Ссылка;
						
						ДополинтьИнформациюДляСообщения(СтрокаСообщенияДляИзвещения, Параметры.ТекстОшибки);
						
						Если ПустаяСтрока(СтрокаСообщенияДляИзвещения)
							И Параметры.ОшибкиНоменклатуры.Количество() = 0 Тогда
							
							ДокИсходящееИзвещение.Примечание = "Документ получен и интерпретерирован успешно, внесен в прикладную ИС адресата";					
							ДокИсходящееИзвещение.СтатусОбработки = "E_success";
							
						Иначе
							
							Если Параметры.ОшибкиНоменклатуры.Количество() > 0 Тогда
							
								Для Каждого СтрокаОшибокНоменклатуры Из Параметры.ОшибкиНоменклатуры Цикл
									
									СтрокаТЧИзвещения = ДокИсходящееИзвещение.Товары.Добавить();
									СтрокаТЧИзвещения.ИдТовара = СтрокаОшибокНоменклатуры.Ключ;
									СтрокаТЧИзвещения.Примечание = СтрокаОшибокНоменклатуры.Значение;
									
								КонецЦикла;
								
								СтрокаСообщенияДляИзвещения = СокрЛП(СтрокаСообщенияДляИзвещения + Символы.ПС + "Ошибки при загрузке товаров");								
																
							КонецЕсли;
							
							ДокИсходящееИзвещение.Примечание = СтрокаСообщенияДляИзвещения;					
							ДокИсходящееИзвещение.СтатусОбработки = "E_unsupportedDocument";
						КонецЕсли;
						
						ДокИсходящееИзвещение.Записать();
						
						ОтказОтправки     = Ложь;
						СообщениеОтправки = "";
						ЭлектронныеДокументы.ОтправитьИсходящийЭлектронныйДокумент(ДокИсходящееИзвещение, ОтказОтправки, СообщениеОтправки);
						
					КонецЕсли;
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
					
				КонецПопытки;
				
				Параметры        = СоздатьСтруктуруПараметровДляЗагрузкиДокумента();
				ИмяКорневогоУзла = Неопределено;
				
			КонецЕсли; 
				
		КонецЕсли;
			
	КонецЦикла;
		
	ОбъектXML.Закрыть();
	
	Возврат Прочитали;
	
КонецФункции

Процедура ПолучитьДокументыИзКаталога(УчетнаяЗаписьЭлектронногоОбмена)
	
	ИмяКаталога = УчетнаяЗаписьЭлектронногоОбмена.КаталогДляЗагрузки;
	СписокФайлов = НайтиФайлы(ИмяКаталога, "*.xml");
	
	Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
		
		ОбработанУспешно = ОбработатьВходящийXML(ФайлДляЗагрузки.ПолноеИмя, УчетнаяЗаписьЭлектронногоОбмена, Ложь);
		
		Если ОбработанУспешно Тогда
			УдалитьФайлы(ФайлДляЗагрузки.ПолноеИмя);
		КонецЕсли;
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЦикла;	
	
КонецПроцедуры // () 

Процедура ПолучитьДокументыССервера(УчетнаяЗаписьЭлектронногоОбмена)
	
	РесурсСервера = "";
	HTTP = Неопределено;	
	
	ЗаголовокHTTP = Новый Соответствие();
	ОперацияSoap = """http://www.w3.org/2005/08/ws-polling/GetMessage""";
	ЗаголовокHTTP.Вставить("SOAPAction", ОперацияSoap);
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");	
	
	ИдОрганизации = УчетнаяЗаписьЭлектронногоОбмена.Идентификатор;
	
	Если УчетнаяЗаписьЭлектронногоОбмена.ТипОчередиДляОбработкиСообщений = Перечисления.ТипОчередиДляОбработкиЭлектронныхСообщений.ОсновнаяОчередь Тогда
		ИмяОчереди = "default";
	ИначеЕсли УчетнаяЗаписьЭлектронногоОбмена.ТипОчередиДляОбработкиСообщений = Перечисления.ТипОчередиДляОбработкиЭлектронныхСообщений.ТестоваяОчередь Тогда
		ИмяОчереди = "test";
	Иначе
		ИмяОчереди = "*";
	КонецЕсли;
	
	ПрочитатьСледующий = Истина;
	Отказ = Ложь;
	Пока Не Отказ 
		и ПрочитатьСледующий Цикл
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			
		ОбъектXML = Новый ЗаписьXML;
		ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
		ОбъектXML.ЗаписатьОбъявлениеXML();
		ОбъектXML.ЗаписатьБезОбработки(
		"<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
		|	<soap:Header>
		|		<Security xmlns=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
		|			<UsernameToken>
		|				<Username>" + УчетнаяЗаписьЭлектронногоОбмена.ИмяПользователяНаСервере + "</Username>
		|				<Password>" + УчетнаяЗаписьЭлектронногоОбмена.ПарольПользователяНаСервере + "</Password>
		|			</UsernameToken>
		|		</Security>
		|		<StatusRequested xmlns=""http://www.w3.org/2005/08/ws-polling"">
		|           <To>
		|				<Address xmlns=""http://schemas.xmlsoap.org/ws/2004/08/addressing"">uuid:" + ИдОрганизации + "/" + ИмяОчереди + "</Address>
		|			</To>	
		|		</StatusRequested>
		|	</soap:Header>
		|	<soap:Body>
		|		<GetMessage xmlns=""http://www.w3.org/2005/08/ws-polling"">
		|			<To>
		|				<Address xmlns=""http://schemas.xmlsoap.org/ws/2004/08/addressing"">uuid:" + ИдОрганизации + "/" + ИмяОчереди + "</Address>
		|			</To>
		|		</GetMessage>
		|	</soap:Body>
		|</soap:Envelope>");
		
		ОбъектXML.Закрыть();
		
		Если HTTP = Неопределено Тогда 
			HTTP = УстановитьСоединениеHTTP(УчетнаяЗаписьЭлектронногоОбмена, РесурсСервера);			
		КонецЕсли;		
		
		Отказ = Ложь;
		ИмяПолученногоФайла = ПолучитьИмяВременногоФайла("xml");
		Попытка
			HTTP.ОтправитьДляОбработки(ИмяФайла, РесурсСервера, ИмяПолученногоФайла, ЗаголовокHTTP);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		
		Если Не Отказ Тогда
			ПрочитатьСледующий = ОбработатьВходящийXML(ИмяПолученногоФайла, УчетнаяЗаписьЭлектронногоОбмена, ИСТИНА);
		КонецЕсли;
		
		УдалитьФайлы(ИмяПолученногоФайла);
		УдалитьФайлы(ИмяФайла);
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры // () 

Процедура ПолучитьЭлектронныеДокументы(УчетнаяЗаписьЭлектронногоОбмена) Экспорт
	
	Если УчетнаяЗаписьЭлектронногоОбмена.СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ОтправлятьНаСервер Тогда
		ПолучитьДокументыССервера(УчетнаяЗаписьЭлектронногоОбмена);
	ИначеЕсли УчетнаяЗаписьЭлектронногоОбмена.СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ВыгружатьВФайл Тогда
		ПолучитьДокументыИзКаталога(УчетнаяЗаписьЭлектронногоОбмена);
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьВалютуДокумента(Документ, ОбъектXML, Параметры) Экспорт
	
	Перем ВалютаСтрок;
	
	Если ОбъектXML.КоличествоАтрибутов() > 0  Тогда
		
		Пока ОбъектXML.ПрочитатьАтрибут() Цикл
		
			Если ОбъектXML.ЛокальноеИмя = "Валюта" Тогда
			
				ВалютаСтроки = Справочники.Валюты.НайтиПоКоду(ОбъектXML.Значение);
				
				Если Не ЗначениеЗаполнено(ВалютаСтроки) Тогда
					ДополинтьИнформациюДляСообщения(Параметры.ТекстОшибки, "Валюта не найдена: " + ОбъектXML.Значение);
				КонецЕсли;
				
				Если Параметры.Свойство("ВалютаСтрок", ВалютаСтрок) Тогда
					
					Если ВалютаСтрок <> ВалютаСтроки Тогда
						
						ДополинтьИнформациюДляСообщения(Параметры.ТекстОшибки, "Торговая система не поддерживает документы с несколькими валютами в одном документе");
						Возврат Ложь;
						
					КонецЕсли;
					
				Иначе
					
					Документ.ВалютаДокумента = ВалютаСтроки;
					Параметры.Вставить("ВалютаСтрок", ВалютаСтроки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


/////////////// ЗАПИСЬ ДОКУМЕНТА В ХМЛ

Функция ОпределитьПоДокументуТекстВида(СсылкаНаДокумент, ЭтоАкцепт = Ложь, ВыдаватьВидПолностью = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат "";
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(СсылкаНаДокумент);
	ИмяВидаДокумента = "";
	
	Если ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептЗаказа") Тогда
		
		Если СсылкаНаДокумент.Отправлен Тогда
			
			ЭтоАкцепт = СсылкаНаДокумент.Акцептовать;
			
			Если ЭтоАкцепт Тогда
				
				ИмяВидаДокумента = "Исходящий акцепт заказа";
				
			Иначе
				
				ИмяВидаДокумента = "Исходящий реджект заказа";
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептНакладной") Тогда
		
		Если СсылкаНаДокумент.Отправлен Тогда
		
			ЭтоАкцепт = СсылкаНаДокумент.Акцептовать;
			
			Если ЭтоАкцепт Тогда
				
				ИмяВидаДокумента = "Исходящий акцепт накладной";
				
			Иначе
				
				ИмяВидаДокумента = "Исходящий реджект накладной";
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептСчетаФактуры") Тогда
		
		Если СсылкаНаДокумент.Отправлен Тогда
		
			ЭтоАкцепт = СсылкаНаДокумент.Акцептовать;
			
			Если ЭтоАкцепт Тогда
				
				ИмяВидаДокумента = "Исходящий акцепт счета-фактуры";
				
			Иначе
				
				ИмяВидаДокумента = "Исходящий реджект счета-фактуры";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ВыдаватьВидПолностью Тогда			
			
			ИмяВидаДокумента = СсылкаНаДокумент.Метаданные().Синоним;				
			
		Иначе
			ИмяВидаДокумента = "";
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ИмяВидаДокумента;
	
КонецФункции

Функция РазобратьАдрес(Знач АдресСайта)
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	HTTPСервер		 = ""; 
	HTTPПорт		 = 0;
	HTTPАдресСкрипта = "";
	
	Если ЗначениеЗаполнено(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		АдресСайта = СтрЗаменить(АдресСайта, "http://", "");
		ПозицияСлэша = Найти(АдресСайта, "/");
		Если ПозицияСлэша > 0 Тогда
			HTTPСервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);	
			HTTPАдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			HTTPСервер 		 = АдресСайта;	
			HTTPАдресСкрипта = "";
		КонецЕсли;	
		ПозицияДвоеточия = Найти(HTTPСервер, ":");
		Если ПозицияДвоеточия > 0 Тогда
			HTTPСерверСПортом = HTTPСервер;
			HTTPСервер		  = Лев(HTTPСерверСПортом, ПозицияДвоеточия - 1);
			HTTPПортСтрока 	  = Прав(HTTPСерверСПортом, СтрДлина(HTTPСерверСПортом) - ПозицияДвоеточия);
		Иначе
			HTTPПортСтрока = "0";
		КонецЕсли;
		
		Попытка
			HTTPПорт = Число(HTTPПортСтрока);
		Исключение
			HTTPПорт = 0;
		КонецПопытки;	
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("HTTPСервер"	  , HTTPСервер); 
	СтруктураРезультата.Вставить("HTTPПорт"		  , HTTPПорт);
	СтруктураРезультата.Вставить("HTTPАдресСкрипта", HTTPАдресСкрипта);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция УстановитьСоединениеHTTP(УчетнаяЗаписьЭлектронногоОбмена, РесурсСервера)
	
	СтруктураАдреса = РазобратьАдрес(УчетнаяЗаписьЭлектронногоОбмена.СоединениеССервером);
		
	ОбменПорт = СтруктураАдреса.HTTPПорт;
	ОбменСервер = СтруктураАдреса.HTTPСервер;
	РесурсСервера = "/" + СтруктураАдреса.HTTPАдресСкрипта;
	
	Если Не ЗначениеЗаполнено(ОбменПорт) Тогда
		ОбменПорт = УчетнаяЗаписьЭлектронногоОбмена.ПортСервера;
	КонецЕсли;
	
	ИнтернетПрокси = НеОпределено;
	
	Если УчетнаяЗаписьЭлектронногоОбмена.ПроксиИспользование Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Пользователь = УчетнаяЗаписьЭлектронногоОбмена.ПроксиИмяПользователя;
		ИнтернетПрокси.Пароль		= УчетнаяЗаписьЭлектронногоОбмена.ПроксиПароль;
		
		Если УчетнаяЗаписьЭлектронногоОбмена.ПроксиПорт = 0 Тогда
			ИнтернетПрокси.Установить("HTTP", УчетнаяЗаписьЭлектронногоОбмена.ПроксиСервер);
		Иначе	
			ИнтернетПрокси.Установить("HTTP", УчетнаяЗаписьЭлектронногоОбмена.ПроксиСервер, УчетнаяЗаписьЭлектронногоОбмена.ПроксиПорт);
		КонецЕсли;	
		
	КонецЕсли;
	
	HTTP = Новый HTTPСоединение(ОбменСервер, ОбменПорт, УчетнаяЗаписьЭлектронногоОбмена.ИмяПользователяНаСервере, УчетнаяЗаписьЭлектронногоОбмена.ПарольПользователяНаСервере, ИнтернетПрокси);
		
	Возврат HTTP;
	
КонецФункции

Функция ПользовательДляОтправкиЭлектронныхСообщений()
	
	#Если Сервер Тогда
		// Выполнение отправки писем фоновым заданием
		Возврат Справочники.Пользователи.ПустаяСсылка();
	#Иначе
		Возврат ПараметрыСеанса.ТекущийПользователь;
	#КонецЕсли
	
КонецФункции

Процедура ПодготовитьСообщениеДляПользователяПриОтправкеЭлектронногоДокумента(Сообщение, Отказ, СообщениеПользователю)
	
	Сообщение = Сообщение + Символы.ПС + СообщениеПользователю;
	Отказ = Истина;	
	
КонецПроцедуры

Процедура ОтправитьИсходящийЭлектронныйДокумент(Объект, Отказ = Ложь, Сообщение = "") Экспорт
	
	Если Объект.ПометкаУдаления Тогда
		ПодготовитьСообщениеДляПользователяПриОтправкеЭлектронногоДокумента(Сообщение, Отказ, "Недопустимо отправлять помеченный на удаление документ");
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьЭлектронногоОбмена = Объект.УчетнаяЗаписьЭлектронногоОбмена;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьЭлектронногоОбмена) Тогда
		ПодготовитьСообщениеДляПользователяПриОтправкеЭлектронногоДокумента(Сообщение, Отказ, "Не задана учетная запись электронного обмена");
		Возврат
	КонецЕсли;
	
	ПараметрыОбмена = ПолучитьПараметрыЭлектронногоОбменаПоУчетнойЗаписиИКонтрагенту(УчетнаяЗаписьЭлектронногоОбмена, Объект.Контрагент);
	Если ПараметрыОбмена = Неопределено Тогда
		ПодготовитьСообщениеДляПользователяПриОтправкеЭлектронногоДокумента(Сообщение, Отказ, "Контрагент не зарегистрирован в учетной записи электронного обмена");
		Возврат
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	ДополнятьИсходящееСообщениеПриложеннымиФайлами = Ложь;
	
	Если ТипОбъекта = Тип("ДокументОбъект.ИсходящийРеджектАкцептЗаказа") Тогда
		
		Отказ = Объект.Акцептовать 
			И Не Объект.ВозможноАкцептовать(Сообщение);
		ДополнятьИсходящееСообщениеПриложеннымиФайлами = УчетнаяЗаписьЭлектронногоОбмена.ДополнятьСообщениеФайламиДляОтветаНаЗаказ;
			
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ИсходящийРеджектАкцептНакладной") Тогда
			
		Отказ = Объект.Акцептовать 
			И Не Объект.ВозможноАкцептовать(Сообщение);
		ДополнятьИсходящееСообщениеПриложеннымиФайлами = УчетнаяЗаписьЭлектронногоОбмена.ДополнятьСообщениеФайламиДляОтветаНаНакладную;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ИсходящийРеджектАкцептСчетаФактуры") Тогда
			
		Отказ = Объект.Акцептовать 
			И Не Объект.ВозможноАкцептовать(Сообщение);
		ДополнятьИсходящееСообщениеПриложеннымиФайлами = УчетнаяЗаписьЭлектронногоОбмена.ДополнятьСообщениеФайламиДляОтветаНаНакладную;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ИсходящийЗаказ") Тогда
		
		Если НЕ Объект.УчетныйДокумент.Проведен Тогда
			
			ПодготовитьСообщениеДляПользователяПриОтправкеЭлектронногоДокумента(Сообщение, Отказ, "Недопустимо отправлять исходящий заказ, введенный на основании непроведенного документа ""Заказ поставщику""");
						
		КонецЕсли;
		ДополнятьИсходящееСообщениеПриложеннымиФайлами = УчетнаяЗаписьЭлектронногоОбмена.ДополнятьСообщениеФайламиДляЗаказа;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ИсходящаяЭлектроннаяНакладная") Тогда
		
		Если НЕ Объект.УчетныйДокумент.Проведен Тогда
			
			ПодготовитьСообщениеДляПользователяПриОтправкеЭлектронногоДокумента(Сообщение, Отказ, "Недопустимо отправлять иcходящую накладную, введенную на основании непроведенного документа ""Реализация товаров и услуг""");
						
		КонецЕсли;
		
		ДополнятьИсходящееСообщениеПриложеннымиФайлами = УчетнаяЗаписьЭлектронногоОбмена.ДополнятьСообщениеФайламиДляНакладной;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ИсходящийСчетФактура") Тогда
		
		Если НЕ Объект.УчетныйДокумент.Проведен Тогда
			
			ПодготовитьСообщениеДляПользователяПриОтправкеЭлектронногоДокумента(Сообщение, Отказ, "Недопустимо отправлять иcходящий счет-фактура, введенный на основании непроведенного документа ""Счет-фактура выданная""");
						
		КонецЕсли;
		
		ДополнятьИсходящееСообщениеПриложеннымиФайлами = УчетнаяЗаписьЭлектронногоОбмена.ДополнятьСообщениеФайламиДляНакладной;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("XML");
	
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	ОбъектXML.ЗаписатьОбъявлениеXML();
	
	Если УчетнаяЗаписьЭлектронногоОбмена.СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ОтправлятьНаСервер Тогда		
		
		ОбъектXML.ЗаписатьБезОбработки(
		"<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
		|	<soap:Header>
		|		<Security xmlns=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
		|			<UsernameToken>
		|				<Username>" + УчетнаяЗаписьЭлектронногоОбмена.ИмяПользователяНаСервере + "</Username>
		|				<Password>" + УчетнаяЗаписьЭлектронногоОбмена.ПарольПользователяНаСервере + "</Password>
		|			</UsernameToken>
		|		</Security>
		|	</soap:Header>
		|	<soap:Body>
		|");
		
	КонецЕсли;
	
	//само наполнение документа
	Объект.ЗаполнитьXML(ОбъектXML, Отказ, Сообщение, , ДополнятьИсходящееСообщениеПриложеннымиФайлами);
	
	Если УчетнаяЗаписьЭлектронногоОбмена.СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ОтправлятьНаСервер Тогда
		
		ОбъектXML.ЗаписатьБезОбработки("
		|	</soap:Body>
		|</soap:Envelope>");
		
	КонецЕсли;
	
	ОбъектXML.Закрыть();
	
	Если Отказ Тогда;
		Возврат;
	КонецЕсли;
	
	///////////////////
	//тут отправляем хмл
	///////////////////
	Если УчетнаяЗаписьЭлектронногоОбмена.СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ВыгружатьВФайл Тогда
		
		КопироватьФайл(ИмяФайла, УчетнаяЗаписьЭлектронногоОбмена.КаталогДляВыгрузки + "/" + РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(Строка(Объект)) + ".xml");
		
	ИначеЕсли УчетнаяЗаписьЭлектронногоОбмена.СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ОтправлятьНаСервер Тогда
		
		РесурсСервера = "";
		HTTP = УстановитьСоединениеHTTP(УчетнаяЗаписьЭлектронногоОбмена, РесурсСервера);
								
		ЗаголовокHTTP = Новый Соответствие();
		ОперацияSoap = """" + Объект.SOAPAction() + """";
		ЗаголовокHTTP.Вставить("SOAPAction", ОперацияSoap);
		ЗаголовокHTTP.Вставить("Content-Type", "text/xml; charset=utf-8");
		
		ИмяПолученногоФайла = ПолучитьИмяВременногоФайла("xml");
		Попытка
			HTTP.ОтправитьДляОбработки(ИмяФайла, РесурсСервера, ИмяПолученногоФайла, ЗаголовокHTTP);
		Исключение
			Сообщение = Сообщение + Символы.ПС + ОписаниеОшибки();
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		УдалитьФайлы(ИмяПолученногоФайла)

	КонецЕсли;
	
	Объект.ДанныеОбмена = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла));
	Объект.ДатаОтправки = ТекущаяДата();
	Объект.Отправлен = Истина;
	
	Попытка
		Объект.Записать();
	Исключение
		Сообщение = Сообщение + Символы.ПС + ОписаниеОшибки();
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайла);
	
	// для исходящих извещений не шлем уведомления
	Если ТипОбъекта = Тип("ДокументОбъект.ИсходящееИзвещение") Тогда
		
		Возврат;	
		
	КонецЕсли;
	
	// возможно настроена отправка уведомлений для контрагента
	Если ЗначениеЗаполнено(УчетнаяЗаписьЭлектронногоОбмена.УчетнаяЗаписьПочтыДляОправкиУведомлений)
		И ЗначениеЗаполнено(ПараметрыОбмена.АдресДляОтправкиУведомлений) Тогда
		
		// отправляем уведомление об отправке документа
		Попытка
		
			СтруктураНовогоПисьма = Новый Структура;
			
			// получатель
			СписокПолучателей = Новый СписокЗначений();
			СписокПолучателей.Добавить(ПараметрыОбмена.АдресДляОтправкиУведомлений, 
				ПараметрыОбмена.АдресДляОтправкиУведомлений);
			
			СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);
			СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗаписьЭлектронногоОбмена.УчетнаяЗаписьПочтыДляОправкиУведомлений);
			
			ИмяДокумента = ЭлектронныеДокументы.ОпределитьПоДокументуТекстВида(Объект.Ссылка, , Истина);
			ТемаПисьма = Строка(Объект.Организация) + " отправил вам документ " + ИмяДокумента + " через 1С:Сеть";
						
			СтруктураНовогоПисьма.Вставить("Тема", ТемаПисьма);
			СтруктураНовогоПисьма.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.Текст);
			
			ТелоПисьма = "Вам отправлен документ через 1С:Сеть
			|Вид документа: " + ИмяДокумента + "
			|Отправитель: " + Строка(Объект.Организация) + "
			|Номер документа: " + ЗначениеВСтрокуВнутр(Объект.Ссылка) + "
			|Дата документа: " + Строка(Объект.Дата) + "
			|Дата отправки: " + Строка(ТекущаяДата());		

			
			СтруктураНовогоПисьма.Вставить("Тело", ТелоПисьма);		
			
			СтруктураПисем = УправлениеЭлектроннойПочтой.НаписатьПисьмо(ПользовательДляОтправкиЭлектронныхСообщений(), СтруктураНовогоПисьма, Ложь, Ложь,
							   Ложь, Неопределено, Неопределено, Ложь, ЛОЖЬ);

			Если СтруктураПисем <> Неопределено Тогда				   
								   
				СоответствиеПисем = Новый Соответствие();
				
				СсылкаНаПисьмо = Неопределено;
				СтруктураПисем.Свойство("ПисьмоСсылка", СсылкаНаПисьмо);
				
				Если ЗначениеЗаполнено(СсылкаНаПисьмо) Тогда   
					
					СоответствиеПисем.Вставить(СсылкаНаПисьмо); 
					
				КонецЕсли;
										
				ТекстОшибок = "";
				УправлениеЭлектроннойПочтой.ОтправитьПисьма(СоответствиеПисем, Новый Соответствие, ПользовательДляОтправкиЭлектронныхСообщений(), Ложь, ТекстОшибок);
				
				Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не удалось отправить письмо - уведомление об отправке документа: " + ТекстОшибок);	
					
				КонецЕсли;
				
			КонецЕсли;			
					
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось отправить письмо - уведомление об отправке документа: " + Символы.ПС + ОписаниеОшибки())
				
		КонецПопытки;
		
	КонецЕсли;
		
	
КонецПроцедуры // () 

Функция СоздатьИдентификаторыЭлОбмена(Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	ИдентификаторыЭлектронногоОбмена.Идентификатор	
	               |ИЗ
	               |	РегистрСведений.ИдентификаторыЭлектронногоОбмена КАК ИдентификаторыЭлектронногоОбмена
				   |ГДЕ
				   |	ИдентификаторыЭлектронногоОбмена.Объект = &Объект";
				   
	Запрос.УстановитьПараметр("Объект", Объект);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		Возврат ТаблицаРезультата[0].Идентификатор; 
		
	КонецЕсли;
	
	// нет уникального идентификатора - записываем новую строку	
	КлючЗаписи = РегистрыСведений.ИдентификаторыЭлектронногоОбмена.СоздатьМенеджерЗаписи();
	КлючЗаписи.Объект = Объект;
	КлючЗаписи.Идентификатор = Строка(Новый УникальныйИдентификатор());
	КлючЗаписи.Записать();
	
	Возврат КлючЗаписи.Идентификатор;

КонецФункции

Процедура ЗаписатьТэгиВXMLДокумент(ОбъектXML, Строки, ПрефиксИмен = "") Экспорт
	
	Для каждого Строка Из Строки Цикл
		
		Тип = Строка.Тип;
		ТипСоставной = Найти(Тип, ":") <> 0;
		
		Если Не ТипСоставной 
			и Не ПустаяСтрока(ПрефиксИмен) Тогда
			Тип = ПрефиксИмен + ":" + Строка.Тип;
		КонецЕсли; 
		
		Имя = ПрефиксИмен + ?(ПустаяСтрока(ПрефиксИмен),"", ":")+ Строка.Имя;
		
		ОбъектXML.ЗаписатьНачалоЭлемента(Имя);
		
		Значение = ?(ТипЗнч(Значение) = Тип("Число"), Формат(Значение, "ЧРД=.; ЧН=0; ЧГ="), Строка(Строка.Значение));
		
		Если Тип <> Неопределено Тогда
			ОбъектXML.ЗаписатьАтрибут("xsi:type", Тип);
		КонецЕсли;
		
		Если ТипЗнч(Строка.Атрибуты) = Тип("Структура") Тогда
			
			Для каждого КлючИЗначение Из Строка.Атрибуты Цикл
				ОбъектXML.ЗаписатьАтрибут(КлючИЗначение.Ключ, Формат(КлючИЗначение.Значение,"ЧРД=.; ЧН=0; ЧГ="));
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Значение) Тогда
			ОбъектXML.ЗаписатьТекст(Значение);
		КонецЕсли;
		
		ЗаписатьТэгиВXMLДокумент(ОбъектXML, Строка.Строки, ПрефиксИмен);
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ИнициализироватьДеревоТэгов(ЭлДок, Отказ, Сообщение) Экспорт
	
	ДеревоТэгов = Новый ДеревоЗначений;
	ДеревоТэгов.Колонки.Добавить("Имя");
	ДеревоТэгов.Колонки.Добавить("Значение");
	ДеревоТэгов.Колонки.Добавить("Тип");
	ДеревоТэгов.Колонки.Добавить("Атрибуты");
	СтрокиДерева = ДеревоТэгов.Строки;
	
	Если ЗначениеЗаполнено(ЭлДок.УчетнаяЗаписьЭлектронногоОбмена.GLN) Тогда
		
		ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ИдОтправителя", ЭлДок.УчетнаяЗаписьЭлектронногоОбмена.GLN, "GLN");
		
	Иначе
	
		ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ИдОтправителя", ЭлДок.УчетнаяЗаписьЭлектронногоОбмена.Идентификатор, "КонтрагентИД");
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ первые 1
	               |	ПараметрыЭлектронногоОбмена.Идентификатор,
				   |	ПараметрыЭлектронногоОбмена.GLN
	               |ИЗ
	               |	РегистрСведений.ПараметрыЭлектронногоОбмена КАК ПараметрыЭлектронногоОбмена
				   |ГДЕ
				   |	ПараметрыЭлектронногоОбмена.УчетнаяЗаписьЭлектронногоОбмена = &УчетнаяЗаписьЭлектронногоОбмена
				   |	И ПараметрыЭлектронногоОбмена.Контрагент = &Контрагент
				   |	И (ПараметрыЭлектронногоОбмена.Идентификатор <> """"
				   |		ИЛИ ПараметрыЭлектронногоОбмена.GLN <> """" )";
				   
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектронногоОбмена", ЭлДок.УчетнаяЗаписьЭлектронногоОбмена);
	Запрос.УстановитьПараметр("Контрагент", ЭлДок.Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаДанныхКонтрагента = РезультатЗапроса.Выгрузить();
		Если ЗначениеЗаполнено(ТаблицаДанныхКонтрагента[0].GLN) Тогда
			ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ИдПолучателя",  ТаблицаДанныхКонтрагента[0].GLN, "GLN");
		Иначе
			ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ИдПолучателя",  ТаблицаДанныхКонтрагента[0].Идентификатор, "КонтрагентИД");
		КонецЕсли
	Иначе
		Отказ = Истина;
		Сообщение = Сообщение + Символы.ПС + " - Контрагент не зарегистрирован в учетной записи";
	КонецЕсли;
	
	ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "НомерДокумента", Сред(ЗначениеВСтрокуВнутр(ЭлДок.Ссылка), 1, 80), "ДокументИД");
	
	ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "МоментСоздания", ХМЛДата(ЭлДок.Дата));
	Если Не ПустаяСтрока(ЭлДок.Примечание) Тогда
		ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "Примечание", ЭлДок.Примечание);
	КонецЕсли;
	
	Возврат ДеревоТэгов;
	
КонецФункции // () 

Процедура ДобавитьДанныеСкладаВДеревоТегов(СтрокиДерева, Склад) Экспорт
	
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ИдСклада", ЭлектронныеДокументы.СоздатьИдентификаторыЭлОбмена(Склад), "КонтрагентИД");
	
КонецПроцедуры

Функция ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, Имя, Значение = Неопределено, Тип = Неопределено, Атрибуты = Неопределено) Экспорт
	
	СтрокаДерева = СтрокиДерева.Добавить();
	СтрокаДерева.Имя      = Имя;
	СтрокаДерева.Значение = Значение;
	СтрокаДерева.Тип = Тип;
	СтрокаДерева.Атрибуты = Атрибуты;
	
	Возврат СтрокаДерева;
	
КонецФункции

Функция ПолучитьИдентификаторТовараДляВыгрузки(СтрокаТаблицыТоваров, ДанныеОШтрихКодах, Сообщение, ИмяТипаДляЗаписи = "ТоварИД") Экспорт
	
	Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.ИдТовара) Тогда
		ИмяТипаДляЗаписи = "ТоварИД";
		Возврат СтрокаТаблицыТоваров.ИдТовара;		
	КонецЕсли;
	
	МассивСтрокШтрихКодов = ДанныеОШтрихКодах.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТаблицыТоваров.Номенклатура, СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры));
	
	Если МассивСтрокШтрихКодов.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(МассивСтрокШтрихКодов[0].ШтрихКод) Тогда
		Сообщение = Сообщение + Символы.ПС + "- не определен идентификатор товара и штрихкод";
	Иначе
		ИмяТипаДляЗаписи = "gtin";
		Возврат Строка(МассивСтрокШтрихКодов[0].ШтрихКод);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРезультатЗапросаФайловПриложенныхКДокументу(СсылкаНаДокумент)
	
	// получаем информацию о приложенных к документу файлах и выгружаем их при необходимости
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	ХранилищеДополнительнойИнформации.Ссылка,
	               |	ХранилищеДополнительнойИнформации.ИмяФайла,
				   |	ХранилищеДополнительнойИнформации.Наименование,
				   |	ХранилищеДополнительнойИнформации.ВидДанных,
	               |	ХранилищеДополнительнойИнформации.Хранилище
	               |ИЗ
	               |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
				   |ГДЕ
				   |	ХранилищеДополнительнойИнформации.Объект = &Объект
				   |	И ХранилищеДополнительнойИнформации.ПометкаУдаления = Ложь";
				   
	Запрос.УстановитьПараметр("Объект", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаписатьИнформациюОПриложенныхФайлахКДокументу(ДополнятьИсходящееСообщениеПриложеннымиФайлами, СтрокиДерева, СсылкаНаДокумент) Экспорт
	
	//нужно не всегда файлы выгружать
	Если Не ДополнятьИсходящееСообщениеПриложеннымиФайлами
		ИЛИ Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьРезультатЗапросаФайловПриложенныхКДокументу(СсылкаНаДокумент);
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Атрибуты = Новый Структура("xmlns", "files");
	ВложенноеДерево = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДополнительныеФайлы", , , Атрибуты);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеФайла = Выборка.Хранилище.Получить();
		Если ДанныеФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеФайла) = Тип("Картинка") Тогда
			ДанныеФайла = ДанныеФайла.ПолучитьДвоичныеДанные();
		КонецЕсли;
		
		ДеревоФайла = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ВложенноеДерево.Строки, "Файл", , , Атрибуты);
		
		ИмяДляВыгрузки = ?(ЗначениеЗаполнено(Выборка.Наименование), Выборка.Наименование,  Выборка.ИмяФайла);
		
		
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ДеревоФайла.Строки, "ИмяФайла", ИмяДляВыгрузки);
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ДеревоФайла.Строки, "ДанныеФайла", XMLСтрока(ДанныеФайла));
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ДеревоФайла.Строки, "ЭтоИзображение",  ХМЛБулево(Выборка.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение));
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПрикрепленныйФайлы(СсылкаИсходногоДокумента, СсылкаДокументаРезультата) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаИсходногоДокумента)
		ИЛИ Не ЗначениеЗаполнено(СсылкаДокументаРезультата) Тогда
		Возврат;
	КонецЕсли;
		
	// копируем все файлы от одного документа к другому
	РезультатЗапроса = ПолучитьРезультатЗапросаФайловПриложенныхКДокументу(СсылкаИсходногоДокумента);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ОбъектФайла = Выборка.Ссылка.Скопировать();
			ОбъектФайла.Объект = СсылкаДокументаРезультата;
			ОбъектФайла.Записать();
		Исключение
			
			// не удалось файл прикрепить
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка добавления файла к документу: " + Строка(СсылкаДокументаРезультата) + " " + ОписаниеОшибки());							
							
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьНоменклатуруЗаказаВДеревоТэгов(СтрокиДерева, ДанныеТаблицыТовары, ЭлДок, ДанныеОШтрихКодах, Отказ, Сообщение) Экспорт
	
	Для каждого СтрокаТаблицыТовары Из ДанныеТаблицыТовары Цикл
		
		СообщениеСтроки = "";
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыТовары.Количество) Тогда
			СообщениеСтроки = СообщениеСтроки + Символы.ПС + "- не заполнено количество";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.ИдТовара)
			И Не СтрокаТаблицыТовары.ЕдиницаИзмеренияСоответствуетНоменклатуреКонтрагента Тогда
			СообщениеСтроки = СообщениеСтроки + Символы.ПС + "- единица измерения не соответствует единице измерения номенклатуры контрагента: """ + СтрокаТаблицыТовары.ОКЕИ + """";
		КонецЕсли;
		
		СтрокиТовара = ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "Товар").Строки;
		ИмяТипаДляЗаписи = "";
		ИдентификаторТовара = ПолучитьИдентификаторТовараДляВыгрузки(СтрокаТаблицыТовары, ДанныеОШтрихКодах, СообщениеСтроки, ИмяТипаДляЗаписи);
		ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "ИдТовара",  ИдентификаторТовара, ИмяТипаДляЗаписи);
		
		ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "Количество", ХМЛЧисло(СтрокаТаблицыТовары.Количество));
		СтрокиСтоимости = ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "Стоимость").Строки;
		ДобавитьСтрокуВДеревоТэгов(СтрокиСтоимости, "Сумма", ХМЛЧисло(СтрокаТаблицыТовары.Сумма), , Новый Структура("Валюта", СтрокаТаблицыТовары.Валюта));
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.СуммаНДС) Тогда
			
			СтрокиНалога = ДобавитьСтрокуВДеревоТэгов(СтрокиСтоимости, "Налог").Строки;
			ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ТипНалога", "НДС");
			ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ВеличинаСтавкиНалога", ХМЛЧисло(УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыТовары.СтавкаНДС)));
			ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "Сумма", ХМЛЧисло(СтрокаТаблицыТовары.СуммаНДС));
			ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ВключеноВСтоимость", ХМЛБулево(СтрокаТаблицыТовары.СуммаВключаетНДС));
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Примечание) Тогда
			ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "Примечание", СтрокаТаблицыТовары.Примечание);
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеСтроки) Тогда
			Сообщение = Сообщение + Символы.ПС + "Строка: " + СтрокаТаблицыТовары.НомерСтроки + "; Номенклатура :""" + СтрокаТаблицыТовары.Номенклатура + """ содержит ошибки:" + СообщениеСтроки;
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ПолучитьИнформациюПоШтрихКодамНоменклатуры(УчетныйДокумент, ТолькоДанныеТоваров = Ложь)
	
	ПолноеИмяДокумента = УчетныйДокумент.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураДокумента.Номенклатура КАК Номенклатура,
	|	НоменклатураДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Штрихкоды.Штрихкод
	|	ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.Номенклатура КАК Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		" + ПолноеИмяДокумента + ".Товары КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Ссылка = &ДокСсылка
	|
	|");
	
	Если НЕ ТолькоДанныеТоваров Тогда 
		
		Запрос.Текст = Запрос.Текст + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказУслуги.Номенклатура,
		|		&ПустаяХарактеристикаНоменклатуры		
		|	ИЗ
		|		" + ПолноеИмяДокумента + ".Услуги КАК ЗаказУслуги
		|	ГДЕ
		|		ЗаказУслуги.Ссылка = &ДокСсылка";
	
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|	) КАК НоменклатураДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Штрихкоды.Владелец = НоменклатураДокумента.Номенклатура
	|			И Штрихкоды.ХарактеристикаНоменклатуры = НоменклатураДокумента.ХарактеристикаНоменклатуры
	|			И Штрихкоды.ТипШтрихкода = &ТипШтрихКода
	|";
	
	Запрос.УстановитьПараметр("ДокСсылка", УчетныйДокумент);
	Запрос.УстановитьПараметр("ТипШтрихКода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ДанныеОШтрихКодах = Запрос.Выполнить().Выгрузить();
	ДанныеОШтрихКодах.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры");	
	
	Возврат ДанныеОШтрихКодах;
	
КонецФункции

Функция ПолучитьИнформациюПоШтрихКодамНоменклатурыДляСчетаФактуры(УчетныйДокумент, ТолькоДанныеТоваров = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураДокумента.Номенклатура КАК Номенклатура,
	|	НоменклатураДокумента.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Штрихкоды.Штрихкод
	|	ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.Номенклатура КАК Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК Основания 
	|		Левое соединение Документ.РеализацияТоваровУслуг.Товары КАК	ЗаказТовары
	|		ПО (ЗаказТовары.Ссылка = Основания.ДокументОснование)
    |
	|	ГДЕ
	|		Основания.Ссылка = &ДокСсылка
	|
	|");
	
	Если НЕ ТолькоДанныеТоваров Тогда 
		
		Запрос.Текст = Запрос.Текст + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказУслуги.Номенклатура,
		|		&ПустаяХарактеристикаНоменклатуры		
		|	ИЗ
		|		Документ.СчетФактураВыданный.ДокументыОснования КАК Основания 
		|		Левое соединение Документ.РеализацияТоваровУслуг.Услуги КАК	ЗаказУслуги
		|		ПО (ЗаказУслуги.Ссылка = Основания.ДокументОснование)
		|	ГДЕ
		|		Основания.Ссылка = &ДокСсылка";
	
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|	) КАК НоменклатураДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Штрихкоды.Владелец = НоменклатураДокумента.Номенклатура
	|			И Штрихкоды.ХарактеристикаНоменклатуры = НоменклатураДокумента.ХарактеристикаНоменклатуры
	|			И Штрихкоды.ТипШтрихкода = &ТипШтрихКода
	|";
	
	Запрос.УстановитьПараметр("ДокСсылка", УчетныйДокумент);
	Запрос.УстановитьПараметр("ТипШтрихКода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ДанныеОШтрихКодах = Запрос.Выполнить().Выгрузить();
	ДанныеОШтрихКодах.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры");	
	
	Возврат ДанныеОШтрихКодах;
	
КонецФункции

Функция ПодготовитьНоменклатуруДокументаДляЭкспорта(УчетныйДокумент, ДанныеОШтрихКодах = Неопределено, ПолучатьСериюНоменклатуры = Ложь) Экспорт
	
	ПолноеИмяДокумента = УчетныйДокумент.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураДокумента.Номенклатура,
	|	НоменклатураДокумента.ХарактеристикаНоменклатуры,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК ИдТовара,
	|	НоменклатураКонтрагентов.ЕдиницаНоменклатурыКонтрагента КАК ОКЕИ,
	|	НоменклатураДокумента.Количество,
	|	НоменклатураДокумента.Сумма,
	|	НоменклатураДокумента.Ссылка.ВалютаДокумента.Код КАК Валюта,
	|	НоменклатураДокумента.СтавкаНДС КАК СтавкаНДС,
	|	НоменклатураДокумента.СуммаНДС КАК СуммаНДС,
	|	НоменклатураДокумента.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	НоменклатураДокумента.Содержание КАК Примечание, " + Символы.ПС + 
	?(ПолучатьСериюНоменклатуры, "НоменклатураДокумента.СерияНоменклатуры КАК СерияНоменклатуры,", "") + "
	|	НоменклатураДокумента.НомерУпорядочивания,
	|	НоменклатураДокумента.НомерСтроки,
	|		ВЫБОР
	|			КОГДА НоменклатураДокумента.ЕдиницаПоКлассификатору = НоменклатураКонтрагентов.ЕдиницаНоменклатурыКонтрагента
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕдиницаИзмеренияСоответствуетНоменклатуреКонтрагента
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.Ссылка КАК Ссылка,
	|		ЗаказТовары.Номенклатура КАК Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Сумма КАК Сумма,
	|		ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|		ЗаказТовары.СуммаНДС КАК СуммаНДС,
	|		0 КАК НомерУпорядочивания,
	|		"""" КАК Содержание,  " + Символы.ПС +
	?(ПолучатьСериюНоменклатуры, "ЗаказТовары.СерияНоменклатуры КАК СерияНоменклатуры,", "") + "
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки	
	|	ИЗ
	|		" + ПолноеИмяДокумента + ".Товары КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Ссылка = &ДокСсылка
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказУслуги.Ссылка,
	|		ЗаказУслуги.Номенклатура,
	|		&ПустаяХарактеристикаНоменклатуры,
	|		ЗаказУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|		ЗаказУслуги.Количество,
	|		ЗаказУслуги.Сумма,
	|		ЗаказУслуги.СтавкаНДС,
	|		ЗаказУслуги.СуммаНДС,
	|		1 КАК НомерУпорядочивания,
	|		ЗаказУслуги.Содержание, " + Символы.ПС +
	?(ПолучатьСериюНоменклатуры, "NULL КАК СерияНоменклатуры,", "") + "
	|		ЗаказУслуги.НомерСтроки		
	|	ИЗ
	|		" + ПолноеИмяДокумента + ".Услуги КАК ЗаказУслуги
	|	ГДЕ
	|		ЗаказУслуги.Ссылка = &ДокСсылка) 
	|
	|		КАК НоменклатураДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО НоменклатураДокумента.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И НоменклатураДокумента.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|			И НоменклатураДокумента.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент
	|
	|Упорядочить по НоменклатураДокумента.НомерУпорядочивания, НоменклатураДокумента.НомерСтроки");
	
	Запрос.УстановитьПараметр("ДокСсылка", УчетныйДокумент);
	Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ТаблицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	ДанныеОШтрихКодах = ПолучитьИнформациюПоШтрихКодамНоменклатуры(УчетныйДокумент);
	
	Возврат ТаблицаИсходныхДанных;
	
КонецФункции

Процедура УстановитьЗаголовокФормыЭлектронногоДокумента(ДокументОбъект, ФормаДокумента) Экспорт
	
	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Заголовок = МетаданныеДокумента.Синоним + ": ";
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Отправлен",МетаданныеДокумента) Тогда
		Заголовок = Заголовок + ?(ДокументОбъект.Отправлен, "Отправлен", "Не отправлен");
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Обработан",МетаданныеДокумента) Тогда
		Заголовок = Заголовок + ?(ДокументОбъект.Обработан, "Обработан", "Не обработан");
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;
	
КонецПроцедуры


#Если Клиент Тогда
	
Процедура ПоказатьПараметрыВходящегоДокумента(ДокументОбъект) Экспорт
	
	Форма = ПолучитьОбщуюФорму("ФормаПараметрыВходящегоДокументаОбмена");
	Форма.мДокументОбъект = ДокументОбъект;
	Форма.ОткрытьМодально();
		
КонецПроцедуры	

Процедура ПоказатьДлинныеСтроковыеДанные(ЭтаФорма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста", ЭтаФорма, Строка(Новый УникальныйИдентификатор));
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Элемент.Значение);
	РезультатРедактирования = ФормаРедактированияТекста.ОткрытьМодально();
		
	Если РезультатРедактирования = Истина Тогда
		
		Если ЭтаФорма.ТолькоПросмотр = Истина
			ИЛИ Элемент.ТолькоПросмотр = Истина Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Элемент.Значение = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьДанныеОбмена(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ДанныеОбмена = Неопределено Тогда
		Предупреждение("Данные обмена не сохранены");
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ДвоичныеДанные = ДокументОбъект.ДанныеОбмена.Получить();
	Если ДвоичныеДанные = Неопределено Тогда
		Предупреждение("Данные обмена не сохранены");
		Возврат;
	КонецЕсли;
	
	
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ЗапуститьПриложение("explorer " + ИмяВременногоФайла);
		
КонецПроцедуры	
	
Процедура ПослеЗаписиФормыДокумента(ДокументОбъект, ФормаДокумента) Экспорт
	
	УстановитьЗаголовокФормыЭлектронногоДокумента(ДокументОбъект, ФормаДокумента);
	
	Если ФормаДокумента <> Неопределено
		И ФормаДокумента.ВладелецФормы <> Неопределено Тогда
		
		Оповестить("ИзменениеДокумента1ССеть", , ФормаДокумента);
		
	КонецЕсли;
		
КонецПроцедуры	
		
Процедура НачалоВыбораУчетнойЗаписиВДокументе(Элемент, СтандартнаяОбработка, ЭтотОбъект, ФормаДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Организация)
		И ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
		
		МассивУчетныхЗаписей = ПолучитьДоступныеУчетныеЗаписиЭлектронногоОбмена(ЭтотОбъект.Организация, ЭтотОбъект.Контрагент);
				
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
		
		МассивУчетныхЗаписей = ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена(ЭтотОбъект.Организация);
		
	Иначе
		
		СтандартнаяОбработка = Истина;	
		Возврат;
		
	КонецЕсли;
	
	ФормаВыбора = Справочники.УчетныеЗаписиЭлектронногоОбмена.ПолучитьФормуВыбора(,Элемент,);
	
	ОтборПоСсылке = ФормаВыбора.СправочникСписок.Отбор.Ссылка;
	ОтборПоСсылке.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивУчетныхЗаписей);
	
	ОтборПоСсылке.Значение = СписокОрганичений;
	ОтборПоСсылке.Использование = Истина;	
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
	
	ФормаВыбора.Открыть();
		
КонецПроцедуры

Процедура НачалоВыбораЗаказаПоставщику(Элемент, СтандартнаяОбработка, ЭтотОбъект, ФормаДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ЗаказПоставщику.ПолучитьФормуВыбора(,Элемент,);
	
	МассивОрганизаций = ПолучитьВсеОрганизацииДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();	
		
	ОтборПоОрганизации = ФормаВыбора.ДокументСписок.Отбор.Организация;
	ОтборПоОрганизации.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивОрганизаций);
	
	ОтборПоОрганизации.Значение = СписокОрганичений;
	ОтборПоОрганизации.Использование = Истина;	
	
	
	МассивКонтрагентов = ПолучитьВсехКонтрагентовДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();
	
	ОтборПоКонтрагентам = ФормаВыбора.ДокументСписок.Отбор.Контрагент;
	ОтборПоКонтрагентам.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивКонтрагентов);
	
	ОтборПоКонтрагентам.Значение = СписокОрганичений;
	ОтборПоКонтрагентам.Использование = Истина;	
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ЭлементыФормы.ДокументСписок.ТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
		
КонецПроцедуры

Процедура НачалоВыбораСчетаФактурыВыданной(Элемент, СтандартнаяОбработка, ЭтотОбъект, ФормаДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.СчетФактураВыданный.ПолучитьФормуВыбора(,Элемент,);
	
	МассивОрганизаций = ПолучитьВсеОрганизацииДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();	
		
	ОтборПоОрганизации = ФормаВыбора.ДокументСписок.Отбор.Организация;
	ОтборПоОрганизации.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивОрганизаций);
	
	ОтборПоОрганизации.Значение = СписокОрганичений;
	ОтборПоОрганизации.Использование = Истина;	
	
	
	МассивКонтрагентов = ПолучитьВсехКонтрагентовДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();
	
	ОтборПоКонтрагентам = ФормаВыбора.ДокументСписок.Отбор.Контрагент;
	ОтборПоКонтрагентам.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивКонтрагентов);
	
	ОтборПоКонтрагентам.Значение = СписокОрганичений;
	ОтборПоКонтрагентам.Использование = Истина;	
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ЭлементыФормы.ДокументСписок.ТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
		
КонецПроцедуры

Процедура НачалоВыбораРеализацииТоваров(Элемент, СтандартнаяОбработка, ЭтотОбъект, ФормаДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(,Элемент,);
	
	МассивОрганизаций = ПолучитьВсеОрганизацииДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();	
		
	ОтборПоОрганизации = ФормаВыбора.ДокументСписок.Отбор.Организация;
	ОтборПоОрганизации.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивОрганизаций);
	
	ОтборПоОрганизации.Значение = СписокОрганичений;
	ОтборПоОрганизации.Использование = Истина;	
	
	
	МассивКонтрагентов = ПолучитьВсехКонтрагентовДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();
	
	ОтборПоКонтрагентам = ФормаВыбора.ДокументСписок.Отбор.Контрагент;
	ОтборПоКонтрагентам.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивКонтрагентов);
	
	ОтборПоКонтрагентам.Значение = СписокОрганичений;
	ОтборПоКонтрагентам.Использование = Истина;	
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ЭлементыФормы.ДокументСписок.ТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
		
КонецПроцедуры
	
Процедура НачалоВыбораКонтрагентаВДокументе(Элемент, СтандартнаяОбработка, ЭтотОбъект, ФормаДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.УчетнаяЗаписьЭлектронногоОбмена) Тогда
		
		МассивКонтрагентов = ПолучитьМассивКонтрагентовПоУчетнойЗаписи(ЭтотОбъект.УчетнаяЗаписьЭлектронногоОбмена);
		
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
		
		МассивКонтрагентов = ПолучитьМассивКонтрагентовПоОрганизации(ЭтотОбъект.Организация);
		
	Иначе
		
		СтандартнаяОбработка = Истина;	
		Возврат;
		
	КонецЕсли;
	
	ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора(,Элемент,);
	
	ОтборПоСсылке = ФормаВыбора.СправочникСписок.Отбор.Ссылка;
	ОтборПоСсылке.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивКонтрагентов);
	
	ОтборПоСсылке.Значение = СписокОрганичений;
	ОтборПоСсылке.Использование = Истина;	
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;

	ФормаВыбора.Открыть();
		
КонецПроцедуры
		
Процедура НачалоВыбораОрганизацииВДокументе(Элемент, СтандартнаяОбработка, ЭтотОбъект, ФормаДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Организации.ПолучитьФормуВыбора(,Элемент,);
	
	МассивОрганизаций = ПолучитьВсеОрганизацииДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();
	
	ОтборПоСсылке = ФормаВыбора.СправочникСписок.Отбор.Ссылка;
	ОтборПоСсылке.ВидСравнения = ВидСравнения.ВСписке;
	
	СписокОрганичений = Новый СписокЗначений();
	СписокОрганичений.ЗагрузитьЗначения(МассивОрганизаций);
	
	ОтборПоСсылке.Значение = СписокОрганичений;
	ОтборПоСсылке.Использование = Истина;	
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
	
	ФормаВыбора.Открыть();
		
КонецПроцедуры

Процедура ПриИзмененииКонтрагентаВДокументе(Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	МассивУчетныхЗаписей = ПолучитьДоступныеУчетныеЗаписиЭлектронногоОбмена(Документ.Организация, Документ.Контрагент);
	
	Если МассивУчетныхЗаписей.Найти(Документ.УчетнаяЗаписьЭлектронногоОбмена) <> Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если МассивУчетныхЗаписей.Количество() = 0 Тогда
		Документ.УчетнаяЗаписьЭлектронногоОбмена = Неопределено;
	ИначеЕсли МассивУчетныхЗаписей.Количество() = 1 Тогда
		Документ.УчетнаяЗаписьЭлектронногоОбмена = МассивУчетныхЗаписей[0];
		ПриИзмененииУчетнойЗаписиВДокументе(Документ);
	Иначе
		Документ.УчетнаяЗаписьЭлектронногоОбмена = Неопределено;	
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПриИзмененииУчетнойЗаписиВДокументе(Документ, ДопустимоИзменятьКонтрагентаНаНеПустого = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ.УчетнаяЗаписьЭлектронногоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Документ.ДлительностьОжиданияОтвета = Документ.УчетнаяЗаписьЭлектронногоОбмена.ВремяОжиданияОтвета;
	
	Документ.Организация = Документ.УчетнаяЗаписьЭлектронногоОбмена.Владелец;
	
	// попытаемся контрагента найти нужного
	МассивКонтрагентов = ПолучитьМассивКонтрагентовПоУчетнойЗаписи(Документ.УчетнаяЗаписьЭлектронногоОбмена);
	
	КоличествоКонтрагентовВНастройке = МассивКонтрагентов.Количество();
	
	Если КоличествоКонтрагентовВНастройке = 0 Тогда
		
		Документ.Контрагент = Неопределено;
		
	ИначеЕсли ДопустимоИзменятьКонтрагентаНаНеПустого
		И КоличествоКонтрагентовВНастройке = 1 Тогда
		
		Документ.Контрагент = МассивКонтрагентов[0];
				
	Иначе
		
		Если МассивКонтрагентов.Найти(Документ.Контрагент) = Неопределено Тогда	
			Документ.Контрагент = Неопределено;
		КонецЕсли;
		
	КонецЕсли;		
		
КонецПроцедуры

Процедура ПриИзмененииОрганизацииВДокументе(Документ, ДопустимоИзменятьКонтрагентаНаНеПустого = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ.Дата) Тогда
		Документ.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Организация) Тогда
		
		Документ.УчетнаяЗаписьЭлектронногоОбмена = Неопределено;
		Документ.Контрагент = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	// попробуем изменить учетную запись
	МассивДоступныхУчетныхЗаписей = ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена(Документ.Организация);
	КоличествоДоступныхУчетныхЗаписей = МассивДоступныхУчетныхЗаписей.Количество();
	
	Если КоличествоДоступныхУчетныхЗаписей = 1 Тогда
		
		Документ.УчетнаяЗаписьЭлектронногоОбмена = МассивДоступныхУчетныхЗаписей[0];
		ПриИзмененииУчетнойЗаписиВДокументе(Документ, ДопустимоИзменятьКонтрагентаНаНеПустого);
		
	ИначеЕсли МассивДоступныхУчетныхЗаписей.Найти(Документ.УчетнаяЗаписьЭлектронногоОбмена) = Неопределено Тогда
		
		Документ.УчетнаяЗаписьЭлектронногоОбмена = Неопределено;
		Документ.Контрагент = Неопределено;
		
	КонецЕсли;			
		
КонецПроцедуры

Процедура ПриИзмененииРеализацииВДокументе(Документ) Экспорт
	
	Реализация = Документ.УчетныйДокумент;
	
	Если Не ЗначениеЗаполнено(Реализация)
		ИЛИ Не ЗначениеЗаполнено(Реализация.Сделка)
		ИЛИ ТипЗнч(Реализация.Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// по заказу поставщику ищем его аксепт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	ИсходящийРеджектАкцептЗаказа.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ИсходящийРеджектАкцептЗаказа КАК ИсходящийРеджектАкцептЗаказа
				   |ГДЕ
				   |	ИсходящийРеджектАкцептЗаказа.УчетныйДокумент = &УчетныйДокумент
				   |	И ИсходящийРеджектАкцептЗаказа.Отправлен = Истина
				   |	И ИсходящийРеджектАкцептЗаказа.ПометкаУдаления = Ложь";
				   
	Запрос.УстановитьПараметр("УчетныйДокумент", Реализация.Сделка);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда 
		Документ.АкцептованныйЗаказ = Неопределено;
	Иначе
		Документ.АкцептованныйЗаказ = ТаблицаЗапроса[0].Ссылка;		
	КонецЕсли;
		
КонецПроцедуры
	
Процедура ЗаполнитьНовыйИсходящийДокумент(Документ, ПараметрОбъектКопирования = Неопределено) Экспорт
	
	Если Не Документ.ЭтоНовый()
		Или ПараметрОбъектКопирования <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Дата) Тогда
		Документ.Дата = ТекущаяДата();
	КонецЕсли;
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Документ.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	
	Если ЗначениеЗаполнено(Документ.УчетнаяЗаписьЭлектронногоОбмена) Тогда
	
		МассивДоступныхУчетныхЗаписей = Новый Массив;
		МассивДоступныхУчетныхЗаписей.Добавить(Документ.УчетнаяЗаписьЭлектронногоОбмена);
		
	Иначе
		МассивДоступныхУчетныхЗаписей = ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена(Документ.Организация);				
	КонецЕсли;	
	
	КоличествоДоступныхУчетныхЗаписей = МассивДоступныхУчетныхЗаписей.Количество();	
	
	Если КоличествоДоступныхУчетныхЗаписей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоДоступныхУчетныхЗаписей = 1 Тогда
		Документ.Организация = МассивДоступныхУчетныхЗаписей[0].Владелец;
		Документ.УчетнаяЗаписьЭлектронногоОбмена = МассивДоступныхУчетныхЗаписей[0];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.Организация) Тогда
		
		// получим организацию по умолчанию
		ОрганизацияПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
		
		МассивОрганизацийСНастройкойОбмена = ПолучитьВсеОрганизацииДляКоторыхЕстьНастройкиУчетныхЗаписейОбмена();
		
		Если МассивОрганизацийСНастройкойОбмена.Найти(ОрганизацияПоУмолчанию) <> Неопределено Тогда
			Документ.Организация = ОрганизацияПоУмолчанию;
		ИначеЕсли МассивОрганизацийСНастройкойОбмена.Количество() = 1 Тогда
			Документ.Организация = МассивОрганизацийСНастройкойОбмена[0];	
		Иначе
			Возврат;
		КонецЕсли;
		
		МассивДоступныхУчетныхЗаписей = ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена(Документ.Организация);
		
		Если КоличествоДоступныхУчетныхЗаписей = 1 Тогда
			Документ.УчетнаяЗаписьЭлектронногоОбмена = МассивДоступныхУчетныхЗаписей[0];
		КонецЕсли;
		
	КонецЕсли;
		
	// пытаемся заполнить контрагента по учетной записи
	Если ЗначениеЗаполнено(Документ.УчетнаяЗаписьЭлектронногоОбмена) Тогда
		
		// получаем список контрагентов с которыми возможен обмен по данной учетной записи
		ПриИзмененииУчетнойЗаписиВДокументе(Документ);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ДействияПослеОтправкиДокумента(СсылкаНаДокумент, Отказ, Сообщение, ЭтаФорма) Экспорт
	
	Если Отказ Тогда
		
		Сообщить("Документ не отправлен: " + СсылкаНаДокумент + Сообщение);
		Предупреждение("Операция не выполнена!", ,"Отправка электронного документа");
		
	Иначе
		
		//Предупреждение("Документ отправлен успешно.", ,"Отправка электронного документа");
		ЭтаФорма.ПослеЗаписи();
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытиемВходящегоДокументаВФорме(Отказ, СтандартнаяОбработка, ЭтотОбъект, ЭтаФорма) Экспорт
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Предупреждение("Входящие электронные документы запрещено вводить в интерактивном режиме!");
		Отказ = Истина;
	КонецЕсли;
	
	ЭлектронныеДокументы.УстановитьЗаголовокФормыЭлектронногоДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ПередОткрытиемДокументаПоКоторомуМожетБытьсозданОтвет(СтандартнаяОбработка, ЭтотОбъект, ЭтаФорма) Экспорт
	
	ОтветныйДокументНайден = ЭтотОбъект.СуществуетИсходящийДокумент();
	КнопкаИзменения = ЭтаФорма.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Обработать; 
	
	Если ОтветныйДокументНайден Тогда 
		КнопкаИзменения.Текст = "Показать исходящий";
		КнопкаИзменения.Подсказка = "Показать исходящий документ";
		КнопкаИзменения.Пояснение = "Показать исходящий документ";
	Иначе
		КнопкаИзменения.Текст = "Обработать";
		КнопкаИзменения.Подсказка = "Обработать документ";
		КнопкаИзменения.Пояснение = "Обработать документ";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьДокументЧерез1ССеть(ДокументОбъект, Форма) Экспорт
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Предупреждение("Документ не может быть отправлен. Не заполнена организация.");
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		
		Предупреждение("Документ не может быть отправлен. Не заполнен Контрагент.");
		Возврат;
		
	КонецЕсли;		
	
	МассивУчетныхЗаписейДляОбмена = ПолучитьДоступныеУчетныеЗаписиЭлектронногоОбмена(ДокументОбъект.Организация, ДокументОбъект.Контрагент);
	
	Если МассивУчетныхЗаписейДляОбмена.Количество() = 0 Тогда
		
		// нет ни одной учетной записи, что бы обмен выполнить
		ОтветПользователя =  Вопрос("Нет ни одной учетной записи для выполнения обмена данными с указанными в документе организацией и контрагентом. Создать учетную запись для обмена?", РежимДиалогаВопрос.ДаНет);
		Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
			
			МассивУчетныхЗаписейОрганизации = ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена(ДокументОбъект.Организация);		
			Если МассивУчетныхЗаписейОрганизации.Количество() = 0 Тогда
				
				НоваяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронногоОбмена.СоздатьЭлемент();
				НоваяУчетнаяЗапись.Владелец = ДокументОбъект.Организация;
				
			Иначе
				
				НоваяУчетнаяЗапись = МассивУчетныхЗаписейОрганизации[0].ПолучитьОбъект();
				
			КонецЕсли;
			
			ФормаУчетнойЗаписи = НоваяУчетнаяЗапись.ПолучитьФорму();
			ФормаУчетнойЗаписи.Открыть();
			
			СтрокаДобавления = ФормаУчетнойЗаписи.ПараметрыЭлектронногоОбмена.Добавить();
			СтрокаДобавления.Контрагент = ДокументОбъект.Контрагент;			
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДокументОбъект.Модифицированность() Тогда
		
		Попытка
			
			Если Не Форма.ЗаписатьВФорме() Тогда
				Возврат;
			КонецЕсли;
			
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Предупреждение("Операция не выполнена.");
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(ДокументОбъект);
	
	Если НЕ (ТипДокумента = Тип("ДокументОбъект.ЗаказПоставщику")
			ИЛИ ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")
			ИЛИ ТипДокумента = Тип("ДокументОбъект.СчетФактураВыданный")) Тогда
			
		Возврат;
		
	КонецЕсли;
	
	// перед созданием определим, если ли уже существующий документ, который создан для обмена
	// если документ уже есть, достаточно его просто показать и все
	
	ИмяДокументаПоиска = "";
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ИмяДокументаПоиска = "ИсходящийЗаказ";		
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ИмяДокументаПоиска = "ИсходящаяЭлектроннаяНакладная";	
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		ИмяДокументаПоиска = "ИсходящийСчетФактура";
		
	КонецЕсли;
	
	// не должно быть второго документа по одному и тому же заказу
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1 
				   |	Док.Ссылка
				   |ИЗ
				   |	Документ." + ИмяДокументаПоиска + " КАК Док
				   |ГДЕ
				   |	Док.УчетныйДокумент = &УчетныйДокумент
				   |	И Док.ПометкаУдаления = Ложь";
				   
	Запрос.УстановитьПараметр("УчетныйДокумент", ДокументОбъект.Ссылка);
		
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДокументов.Количество() > 0 Тогда
		
		ФормаДокумента = ТаблицаДокументов[0].Ссылка.ПолучитьФорму();
		ФормаДокумента.Открыть();
		Возврат;		
		
	КонецЕсли;
		
		
	ДокументОбмена = Неопределено;
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказПоставщику") Тогда	
		
		ДокументОбмена = Документы.ИсходящийЗаказ.СоздатьДокумент();
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ДокументОбмена = Документы.ИсходящаяЭлектроннаяНакладная.СоздатьДокумент();
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		ДокументОбмена = Документы.ИсходящийСчетФактура.СоздатьДокумент();
		
	КонецЕсли;
		
	ДокументОбмена.Заполнить(ДокументОбъект);
	
	ФормаДокумента = ДокументОбмена.ПолучитьФорму();
	ФормаДокумента.Открыть();	
	
КонецПроцедуры

#КонецЕсли

Функция ПолучитьМассивОбязательныхСвойствДляОбменаТоварами() Экспорт
	
	МассивОбязательныхСвойств = Новый Массив;
	МассивОбязательныхСвойств.Добавить(Справочники.СвойстваНоменклатурыЭлектронногоОбмена.ОКП);
	МассивОбязательныхСвойств.Добавить(Справочники.СвойстваНоменклатурыЭлектронногоОбмена.ОКВЭД);
	МассивОбязательныхСвойств.Добавить(Справочники.СвойстваНоменклатурыЭлектронногоОбмена.ТорговаяМарка);
	МассивОбязательныхСвойств.Добавить(Справочники.СвойстваНоменклатурыЭлектронногоОбмена.Производитель);
		
	Возврат МассивОбязательныхСвойств;
	
КонецФункции
