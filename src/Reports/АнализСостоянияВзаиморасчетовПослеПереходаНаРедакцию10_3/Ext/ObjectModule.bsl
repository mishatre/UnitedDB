#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ // РАЗРЕШЕННЫЕ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//УПОРЯДОЧИТЬ_СВОЙСТВА
	//	//УПОРЯДОЧИТЬ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗапросПоРегистрам.Организация КАК Организация,
	|	ЗапросПоРегистрам.Контрагент КАК Контрагент,
	|	ЗапросПоРегистрам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗапросПоРегистрам.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ЗапросПоРегистрам.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗапросПоРегистрам.Регистратор КАК Регистратор,
	|	ЗапросПоРегистрам.Период КАК Период,
	|	ЗапросПоРегистрам.ПериодДень КАК ПериодДень,
	|	ЗапросПоРегистрам.ПериодНеделя КАК ПериодНеделя,
	|	ЗапросПоРегистрам.ПериодДекада КАК ПериодДекада,
	|	ЗапросПоРегистрам.ПериодМесяц КАК ПериодМесяц,
	|	ЗапросПоРегистрам.ПериодКвартал КАК ПериодКвартал,
	|	ЗапросПоРегистрам.ПериодПолугодие КАК ПериодПолугодие,
	|	ЗапросПоРегистрам.ПериодГод КАК ПериодГод,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеНачальныйОстаток) КАК СуммаВзаиморасчетовПоСделкеНачальныйОстаток,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеКонечныйОстаток) КАК СуммаВзаиморасчетовПоСделкеКонечныйОстаток,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеПриход) КАК СуммаВзаиморасчетовПоСделкеПриход,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеРасход) КАК СуммаВзаиморасчетовПоСделкеРасход,
	|	СУММА(ЗапросПоРегистрам.СуммаПоДокументуНачальныйОстаток) КАК СуммаВзаиморасчетовПоДокументуНачальныйОстаток,
	|	СУММА(ЗапросПоРегистрам.СуммаПоДокументуКонечныйОстаток) КАК СуммаВзаиморасчетовПоДокументуКонечныйОстаток,
	|	СУММА(ЗапросПоРегистрам.СуммаПоДокументуПриход) КАК СуммаВзаиморасчетовПоДокументуПриход,
	|	СУММА(ЗапросПоРегистрам.СуммаПоДокументуРасход) КАК СуммаВзаиморасчетовПоДокументуРасход,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеНачальныйОстаток) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуНачальныйОстаток) КАК РасхождениеНачальныйОстаток,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеКонечныйОстаток) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуКонечныйОстаток) КАК РасхождениеКонечныйОстаток,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеПриход) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуПриход) КАК РасхождениеПриход,
	|	СУММА(ЗапросПоРегистрам.СуммаПоСделкеРасход) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуРасход) КАК РасхождениеРасход
	|{ВЫБРАТЬ
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	ДокументРасчетовСКонтрагентом.*,
	|	Регистратор.*,
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	СуммаВзаиморасчетовПоСделкеНачальныйОстаток,
	|	СуммаВзаиморасчетовПоСделкеКонечныйОстаток,
	|	СуммаВзаиморасчетовПоСделкеПриход,
	|	СуммаВзаиморасчетовПоСделкеРасход,
	|	СуммаВзаиморасчетовПоДокументуНачальныйОстаток,
	|	СуммаВзаиморасчетовПоДокументуКонечныйОстаток,
	|	СуммаВзаиморасчетовПоДокументуПриход,
	|	СуммаВзаиморасчетовПоДокументуРасход,
	|	РасхождениеНачальныйОстаток,
	|	РасхождениеКонечныйОстаток,
	|	РасхождениеПриход,
	|	РасхождениеРасход}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыПоСделкам.Организация КАК Организация,
	|		ВзаиморасчетыПоСделкам.Контрагент КАК Контрагент,
	|		ВзаиморасчетыПоСделкам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВзаиморасчетыПоСделкам.Сделка КАК ДокументРасчетовСКонтрагентом,
	|		ВзаиморасчетыПоСделкам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		ВзаиморасчетыПоСделкам.Регистратор КАК Регистратор,
	|		ВзаиморасчетыПоСделкам.Период КАК Период,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ДЕНЬ) КАК ПериодДень,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ДЕКАДА) КАК ПериодДекада,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, МЕСЯЦ) КАК ПериодМесяц,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, КВАРТАЛ) КАК ПериодКвартал,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ГОД) КАК ПериодГод,
	|		ВзаиморасчетыПоСделкам.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаПоСделкеНачальныйОстаток,
	|		ВзаиморасчетыПоСделкам.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаПоСделкеКонечныйОстаток,
	|		ВзаиморасчетыПоСделкам.СуммаВзаиморасчетовПриход КАК СуммаПоСделкеПриход,
	|		ВзаиморасчетыПоСделкам.СуммаВзаиморасчетовРасход КАК СуммаПоСделкеРасход,
	|		0 КАК СуммаПоДокументуНачальныйОстаток,
	|		0 КАК СуммаПоДокументуКонечныйОстаток,
	|		0 КАК СуммаПоДокументуПриход,
	|		0 КАК СуммаПоДокументуРасход
	|	{ВЫБРАТЬ
	|		Организация.*,
	|		Контрагент.*,
	|		ДоговорКонтрагента.*,
	|		ДокументРасчетовСКонтрагентом.*,
	|		Регистратор.*,
	|		Период,
	|		ПериодДень,
	|		ПериодНеделя,
	|		ПериодДекада,
	|		ПериодМесяц,
	|		ПериодКвартал,
	|		ПериодПолугодие,
	|		ПериодГод}
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор {(&Периодичность)}, , ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА {(ДоговорКонтрагента).*, (Сделка).* КАК ДокументРасчетовСКонтрагентом, (Контрагент).*, (Организация).*}) КАК ВзаиморасчетыПоСделкам
	|	{ГДЕ
	|		ВзаиморасчетыПоСделкам.Регистратор.* КАК Регистратор,
	|		ВзаиморасчетыПоСделкам.Период КАК Период,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ДЕНЬ)) КАК ПериодДень,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ДЕКАДА)) КАК ПериодДекада,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, МЕСЯЦ)) КАК ПериодМесяц,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, КВАРТАЛ)) КАК ПериодКвартал,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоСделкам.Период, ГОД)) КАК ПериодГод}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыПоДокументамРасчетов.Организация,
	|		ВзаиморасчетыПоДокументамРасчетов.Контрагент,
	|		ВзаиморасчетыПоДокументамРасчетов.ДоговорКонтрагента,
	|		ВзаиморасчетыПоДокументамРасчетов.ДокументРасчетовСКонтрагентом,
	|		ВзаиморасчетыПоДокументамРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|		ВзаиморасчетыПоДокументамРасчетов.Регистратор,
	|		ВзаиморасчетыПоДокументамРасчетов.Период,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ДЕНЬ),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, НЕДЕЛЯ),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ДЕКАДА),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, МЕСЯЦ),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, КВАРТАЛ),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ПОЛУГОДИЕ),
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ГОД),
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВзаиморасчетыПоДокументамРасчетов.СуммаВзаиморасчетовНачальныйОстаток,
	|		ВзаиморасчетыПоДокументамРасчетов.СуммаВзаиморасчетовКонечныйОстаток,
	|		ВзаиморасчетыПоДокументамРасчетов.СуммаВзаиморасчетовПриход,
	|		ВзаиморасчетыПоДокументамРасчетов.СуммаВзаиморасчетовРасход
	|	{ВЫБРАТЬ
	|		Организация.*,
	|		Контрагент.*,
	|		ДоговорКонтрагента.*,
	|		ДокументРасчетовСКонтрагентом.*,
	|		Регистратор.*,
	|		Период,
	|		ПериодДень,
	|		ПериодНеделя,
	|		ПериодДекада,
	|		ПериодМесяц,
	|		ПериодКвартал,
	|		ПериодПолугодие,
	|		ПериодГод}
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор {(&Периодичность)}, , {(ДоговорКонтрагента).*, (Контрагент).*, (Организация).*, (ДокументРасчетовСКонтрагентом).*}) КАК ВзаиморасчетыПоДокументамРасчетов
	|	{ГДЕ
	|		ВзаиморасчетыПоДокументамРасчетов.Регистратор.* КАК Регистратор,
	|		ВзаиморасчетыПоДокументамРасчетов.Период КАК Период,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ДЕНЬ)) КАК ПериодДень,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ДЕКАДА)) КАК ПериодДекада,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, МЕСЯЦ)) КАК ПериодМесяц,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, КВАРТАЛ)) КАК ПериодКвартал,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|		(НАЧАЛОПЕРИОДА(ВзаиморасчетыПоДокументамРасчетов.Период, ГОД)) КАК ПериодГод}) КАК ЗапросПоРегистрам
	|{ГДЕ
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеНачальныйОстаток)) КАК СуммаВзаиморасчетовПоСделкеНачальныйОстаток,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеКонечныйОстаток)) КАК СуммаВзаиморасчетовПоСделкеКонечныйОстаток,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеПриход)) КАК СуммаВзаиморасчетовПоСделкеПриход,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеРасход)) КАК СуммаВзаиморасчетовПоСделкеРасход,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоДокументуНачальныйОстаток)) КАК СуммаВзаиморасчетовПоДокументуНачальныйОстаток,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоДокументуКонечныйОстаток)) КАК СуммаВзаиморасчетовПоДокументуКонечныйОстаток,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоДокументуПриход)) КАК СуммаВзаиморасчетовПоДокументуПриход,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоДокументуРасход)) КАК СуммаВзаиморасчетовПоДокументуРасход,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеНачальныйОстаток) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуНачальныйОстаток)) КАК РасхождениеНачальныйОстаток,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеКонечныйОстаток) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуКонечныйОстаток)) КАК РасхождениеКонечныйОстаток,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеПриход) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуПриход)) КАК РасхождениеПриход,
	|	(СУММА(ЗапросПоРегистрам.СуммаПоСделкеРасход) - СУММА(ЗапросПоРегистрам.СуммаПоДокументуРасход)) КАК РасхождениеРасход}
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросПоРегистрам.Организация,
	|	ЗапросПоРегистрам.Контрагент,
	|	ЗапросПоРегистрам.ДоговорКонтрагента,
	|	ЗапросПоРегистрам.ДокументРасчетовСКонтрагентом,
	|	ЗапросПоРегистрам.ВалютаВзаиморасчетов,
	|	ЗапросПоРегистрам.Регистратор,
	|	ЗапросПоРегистрам.Период,
	|	ЗапросПоРегистрам.ПериодДень,
	|	ЗапросПоРегистрам.ПериодНеделя,
	|	ЗапросПоРегистрам.ПериодДекада,
	|	ЗапросПоРегистрам.ПериодМесяц,
	|	ЗапросПоРегистрам.ПериодКвартал,
	|	ЗапросПоРегистрам.ПериодПолугодие,
	|	ЗапросПоРегистрам.ПериодГод
	|{УПОРЯДОЧИТЬ ПО
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	ДокументРасчетовСКонтрагентом.*,
	|	Регистратор.*,
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	СуммаВзаиморасчетовПоСделкеНачальныйОстаток,
	|	СуммаВзаиморасчетовПоСделкеКонечныйОстаток,
	|	СуммаВзаиморасчетовПоСделкеПриход,
	|	СуммаВзаиморасчетовПоСделкеРасход,
	|	СуммаВзаиморасчетовПоДокументуНачальныйОстаток,
	|	СуммаВзаиморасчетовПоДокументуКонечныйОстаток,
	|	СуммаВзаиморасчетовПоДокументуПриход,
	|	СуммаВзаиморасчетовПоДокументуРасход,
	|	РасхождениеНачальныйОстаток,
	|	РасхождениеКонечныйОстаток,
	|	РасхождениеПриход,
	|	РасхождениеРасход}
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетовПоСделкеНачальныйОстаток),
	|	СУММА(СуммаВзаиморасчетовПоСделкеКонечныйОстаток),
	|	СУММА(СуммаВзаиморасчетовПоСделкеПриход),
	|	СУММА(СуммаВзаиморасчетовПоСделкеРасход),
	|	СУММА(СуммаВзаиморасчетовПоДокументуНачальныйОстаток),
	|	СУММА(СуммаВзаиморасчетовПоДокументуКонечныйОстаток),
	|	СУММА(СуммаВзаиморасчетовПоДокументуПриход),
	|	СУММА(СуммаВзаиморасчетовПоДокументуРасход),
	|	СУММА(СуммаВзаиморасчетовПоСделкеНачальныйОстаток) - СУММА(СуммаВзаиморасчетовПоДокументуНачальныйОстаток) КАК РасхождениеНачальныйОстаток,
	|	СУММА(СуммаВзаиморасчетовПоСделкеКонечныйОстаток) - СУММА(СуммаВзаиморасчетовПоДокументуКонечныйОстаток) КАК РасхождениеКонечныйОстаток,
	|	СУММА(СуммаВзаиморасчетовПоСделкеПриход) - СУММА(СуммаВзаиморасчетовПоДокументуПриход) КАК РасхождениеПриход,
	|	СУММА(СуммаВзаиморасчетовПоСделкеРасход) - СУММА(СуммаВзаиморасчетовПоДокументуРасход) КАК РасхождениеРасход
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	ДокументРасчетовСКонтрагентом.*,
	|	Регистратор.*,
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ЗапросПоРегистрам.Организация" , "Организация", "Организация", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ЗапросПоРегистрам.Контрагент" , "Контрагент", "Контрагент", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
        УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ЗапросПоРегистрам.ДоговорКонтрагента" , "ДоговорКонтрагента", "Договор контрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
        УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ЗапросПоРегистрам.ДокументРасчетовСКонтрагентом" , "ДокументРасчетовСКонтрагентом", "Документ расчетов с контрагентом", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
        // Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);

	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	ВалютаУпр = "(" + СокрЛП(глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование) + ")";
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента",                  "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументРасчетовСКонтрагентом",       "Документ расчетов с контрагентом");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоСделкеНачальныйОстаток", "По сделке начальный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоСделкеКонечныйОстаток",  "По сделке конечный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоСделкеПриход",           "По сделке приход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоСделкеРасход",           "По сделке расход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоДокументуНачальныйОстаток",            "По док.расч. начальный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоДокументуКонечныйОстаток",             "По док. расч. конечный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоДокументуПриход",                      "По док. расч. приход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовПоДокументуРасход",                      "По док. расч. расход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("РасхождениеНачальныйОстаток", "Расхождение начальный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("РасхождениеКонечныйОстаток",  "Расхождение конечный остаток");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("РасхождениеПриход",           "Расхождениее приход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("РасхождениеРасход",           "Расхождение расход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВалютаВзаиморасчетов",                "Валюта взаиморасчетов");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоСделкеНачальныйОстаток", "нач. остаток", Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоСделке", "Сумма взаиморасчетов по сделке");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоСделкеПриход",           "приход",       Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоСделке", "Сумма взаиморасчетов по сделке");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоСделкеРасход",           "расход",       Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоСделке", "Сумма взаиморасчетов по сделке");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоСделкеКонечныйОстаток",  "кон. остаток", Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоСделке", "Сумма взаиморасчетов по сделке");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоДокументуНачальныйОстаток",            "нач. остаток", Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоДокументу", "Сумма взаиморасчетов по документам расчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоДокументуПриход",                      "приход",       Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоДокументу", "Сумма взаиморасчетов по документам расчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоДокументуРасход",                      "расход",       Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоДокументу", "Сумма взаиморасчетов по документам расчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовПоДокументуКонечныйОстаток",             "кон. остаток", Истина, "ЧЦ=15; ЧДЦ=2", "СуммаВзаиморасчетовПоДокументу", "Сумма взаиморасчетов по документам расчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("РасхождениеНачальныйОстаток",            "нач. остаток", Истина, "ЧЦ=15; ЧДЦ=2", "Расхождение", "Расхождение");
	УниверсальныйОтчет.ДобавитьПоказатель("РасхождениеПриход",                      "приход",       Истина, "ЧЦ=15; ЧДЦ=2", "Расхождение", "Расхождение");
	УниверсальныйОтчет.ДобавитьПоказатель("РасхождениеРасход",                      "расход",       Истина, "ЧЦ=15; ЧДЦ=2", "Расхождение", "Расхождение");
	УниверсальныйОтчет.ДобавитьПоказатель("РасхождениеКонечныйОстаток",             "кон. остаток", Истина, "ЧЦ=15; ЧДЦ=2", "Расхождение", "Расхождение");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДокументРасчетовСКонтрагентом");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагента");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	УниверсальныйОтчет.УстановитьСвязьПолей("ВалютаВзаиморасчетов", "ДоговорКонтрагента");
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВалютаВзаиморасчетов");
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	//УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("НЕОПРЕДЕЛЕНО", неопределено);	
	
	УниверсальныйОтчет.мСтруктураПериодов.Вставить("ПериодГод", 12);
	УниверсальныйОтчет.мСтруктураПериодов.Вставить("ПериодПолугодие", 11);
	УниверсальныйОтчет.мСтруктураПериодов.Вставить("ПериодКвартал", 10);
	УниверсальныйОтчет.мСтруктураПериодов.Вставить("ПериодМесяц", 9);
	УниверсальныйОтчет.мСтруктураПериодов.Вставить("ПериодДекада", 8);
	УниверсальныйОтчет.мСтруктураПериодов.Вставить("ПериодНеделя", 7);
	УниверсальныйОтчет.мСтруктураПериодов.Вставить("ПериодДень", 6);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);

КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

//------------------------------------------------------------------
//---------Дополнительные действия--------------------------------

//получить таблицу с данными по документам, в которых используется договор с ведением учета по документам расчетов
//	Фл_ПоТЧПредоплата - признак, в зависимости от которого отбирается список документов:
//		1) по реквизиту договора. Используется при заполнении ТЧ ДокументыРасчетовСКонтрагентом в документах
//		2) по заполненной ТЧ ДокументыРасчетовСКонтрагентом. Используется при формировании движений по регистру ВзаиморасчетыСКонтрагентамиПоДокументамРАсчетов
Функция ТорговыеДокументы_ПолучитьТаблицуДокументовДокументамРасчетов(ДатаНачала, СсылкаНач, ДатаКонца, БылПоследнийДокумент, ИмяДокумента, СписокОтработанныхДокументов)
	Если СсылкаНач = Неопределено Тогда
		МоментНач = Новый МоментВремени(ДатаНачала);
	Иначе
		МоментНач = Новый МоментВремени(ДатаНачала, СсылкаНач);
	КонецЕсли;
	
	ТекстЗапроса = " ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ДокументРег.Ссылка КАК Регистратор,
		|	Минимум(ДокументРег.Дата) КАК Дата
		|ИЗ 
		|	Документ."+ИмяДокумента+" КАК ДокументРег
		|ГДЕ
		|	ДокументРег.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = истина
		//|	И ДокументРег.Сделка.Дата <> &ПустаяДата
		|	И ДокументРег.МоментВремени > &МоментНач
		|	И ДокументРег.Дата >= &ДатаПоследнего
		|	И ДокументРег.Дата <= &ДатаКон  "+
		?(СписокОтработанныхДокументов.Количество()>0,"	И ДокументРег.Ссылка не в (&СписокОтработанныхДокументов)","")+"
	    |Сгруппировать по ДокументРег.Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Если БылПоследнийДокумент тогда
		Запрос.УстановитьПараметр("ДатаПоследнего",   ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаПоследнего",   Дата('00010101'));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокОтработанныхДокументов", СписокОтработанныхДокументов);
	Запрос.УстановитьПараметр("МоментНач", 				МоментНач);
	Запрос.УстановитьПараметр("ДатаКон", 				ДатаКонца);
	Запрос.УстановитьПараметр("ПустаяДата", 			Дата('00010101'));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПлатежныеДокументы_ПолучитьТаблицуДокументовДокументамРасчетов(ДатаНачала, СсылкаНач, ДатаКонца, БылПоследнийДокумент, ИмяДокумента, СписокОтработанныхДокументов, ИмяТЧ)
	Если СсылкаНач = Неопределено Тогда
		МоментНач = Новый МоментВремени(ДатаНачала);
	Иначе
		МоментНач = Новый МоментВремени(ДатаНачала, СсылкаНач);
	КонецЕсли;
	
	ТекстЗапроса = " ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ДокументРег.Ссылка КАК Регистратор,
		|	Минимум(ДокументРег.Ссылка.Дата) КАК Дата
		|ИЗ 
		|	Документ."+ИмяДокумента+"."+ИмяТЧ+" КАК ДокументРег
		|ГДЕ
		|	ДокументРег.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = истина
		//|	И ДокументРег.Сделка.Дата <> &ПустаяДата
		|	И ДокументРег.Ссылка.МоментВремени > &МоментНач
		|	И ДокументРег.Ссылка.Дата >= &ДатаПоследнего
		|	И ДокументРег.Ссылка.Дата <= &ДатаКон  "+
		?(СписокОтработанныхДокументов.Количество()>0,"	И ДокументРег.Ссылка не в (&СписокОтработанныхДокументов)","")+"
	    |Сгруппировать по ДокументРег.Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Если БылПоследнийДокумент тогда
		Запрос.УстановитьПараметр("ДатаПоследнего",   ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаПоследнего",   Дата('00010101'));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокОтработанныхДокументов", СписокОтработанныхДокументов);
	Запрос.УстановитьПараметр("МоментНач", 				МоментНач);
	Запрос.УстановитьПараметр("ДатаКон", 				ДатаКонца);
	Запрос.УстановитьПараметр("ПустаяДата", 			Дата('00010101'));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ТорговыеДокументы_ОчиститьРеквизитСделка()
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("ВозвратТоваровОтПокупателя");
	СписокДокументов.Добавить("ВозвратТоваровПоставщику");
	СписокДокументов.Добавить("ВозвратТоваровПоставщикуИзНТТ");
	СписокДокументов.Добавить("ОтчетКомиссионераОПродажах");
	СписокДокументов.Добавить("ОтчетКомитентуОПродажах");
    СписокДокументов.Добавить("ПоступлениеДопРасходов");
	СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
	СписокДокументов.Добавить("ПоступлениеТоваровУслугВНТТ");
	СписокДокументов.Добавить("РеализацияТоваровУслуг");

	СписокОтработанныхДокументов = новый СписокЗначений;
	Для каждого ВидДокумента Из СписокДокументов цикл
		ИмяРеквизитаСделка = "Сделка";
		
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		БылПоследнийДокумент = Ложь;
		
		ДатаДокумента = Дата('00010101');
		ДатаКонца = Дата('29991231');
		
		Пока ЕстьДокументы Цикл

			ТаблицаДокументов = ТорговыеДокументы_ПолучитьТаблицуДокументовДокументамРасчетов(ДатаДокумента, ДокументСсылка, ДатаКонца, БылПоследнийДокумент, ВидДокумента.Значение, СписокОтработанныхДокументов);
			
			ЕстьДокументы = ТаблицаДокументов.Количество() > 0;
			БылПоследнийДокумент = ЕстьДокументы;
			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				
				ДокументСсылка = Строка.Регистратор;
				ДатаДокумента  = Строка.Дата;
				СписокОтработанныхДокументов.Добавить(ДокументСсылка);
				
				МетаданныеДокумента = ДокументСсылка.Метаданные();
				ВидОперацииСтр = "";
				Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
					ВидОперацииСтр = " (" + ДокументСсылка.ВидОперации + ")";
				КонецЕсли;
				Заголовок = "Обновляются реквизиты документа: " + СокрЛП(ДокументСсылка) + ВидОперацииСтр;
				Состояние(Заголовок);

				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				Если ДокументСсылка.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ
					ДокументСсылка.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					ДокументОбъект[ИмяРеквизитаСделка] = Документы.ЗаказПокупателя.ПустаяСсылка();
				Иначе
					ДокументОбъект[ИмяРеквизитаСделка] = Документы.ЗаказПоставщику.ПустаяСсылка();
				КонецЕсли;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПлатежныеДокументы_ОчиститьРеквизитСделка()
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("АвансовыйОтчет");   //имя ТЧ = ОплатаПоставщикам
	СписокДокументов.Добавить("АккредитивПереданный");
	СписокДокументов.Добавить("АккредитивПолученный");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПереданное");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПолученное");
	СписокДокументов.Добавить("ПлатежноеПоручениеВходящее");
	СписокДокументов.Добавить("ПлатежноеПоручениеИсходящее");
    СписокДокументов.Добавить("ПлатежноеТребованиеВыставленное");
    СписокДокументов.Добавить("ПлатежноеТребованиеПолученное");
	СписокДокументов.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств");
	СписокДокументов.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств");
	СписокДокументов.Добавить("ПриходныйКассовыйОрдер");
    СписокДокументов.Добавить("РасходныйКассовыйОрдер");
	СписокДокументов.Добавить("ПланируемоеПоступлениеДенежныхСредств");
    СписокДокументов.Добавить("ЗаявкаНаРасходованиеСредств");
	СписокДокументов.Добавить("КорректировкаДолга"); //имя ТЧ - СуммыДолга


	СписокОтработанныхДокументов = новый СписокЗначений;
	Для каждого ВидДокумента Из СписокДокументов цикл
		ИмяТЧ = "РасшифровкаПлатежа";
		Если ВидДокумента.Значение = "АвансовыйОтчет" Тогда
			ИмяТЧ = "ОплатаПоставщикам";
		ИначеЕсли ВидДокумента.Значение = "КорректировкаДолга" Тогда
            ИмяТЧ = "СуммыДолга";
		КонецЕсли;
		
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		БылПоследнийДокумент = Ложь;
		
		ДатаДокумента = Дата('00010101');
		ДатаКонца = Дата('29991231');
		
		Пока ЕстьДокументы Цикл

			ТаблицаДокументов = ПлатежныеДокументы_ПолучитьТаблицуДокументовДокументамРасчетов(ДатаДокумента, ДокументСсылка, ДатаКонца, БылПоследнийДокумент, ВидДокумента.Значение, СписокОтработанныхДокументов, ИмяТЧ);
			
			ЕстьДокументы = ТаблицаДокументов.Количество() > 0;
			БылПоследнийДокумент = ЕстьДокументы;
			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				
				ДокументСсылка = Строка.Регистратор;
				ДатаДокумента  = Строка.Дата;
				СписокОтработанныхДокументов.Добавить(ДокументСсылка);
				
				МетаданныеДокумента = ДокументСсылка.Метаданные();
				ВидОперацииСтр = "";
				Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
					ВидОперацииСтр = " (" + ДокументСсылка.ВидОперации + ")";
				КонецЕсли;
				Заголовок = "Обновляются реквизиты документа: " + СокрЛП(ДокументСсылка) + ВидОперацииСтр;
				Состояние(Заголовок);

				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				Для каждого СтрокаДокумента из ДокументОбъект[ИмяТЧ] Цикл
					Если СтрокаДокумента.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
						Если СтрокаДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ
							СтрокаДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
							СтрокаДокумента.Сделка = Документы.ЗаказПокупателя.ПустаяСсылка();
						Иначе
							СтрокаДокумента.Сделка = Документы.ЗаказПоставщику.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьРеквизитСделкаВДокументах() экспорт
	ТорговыеДокументы_ОчиститьРеквизитСделка();
	ПлатежныеДокументы_ОчиститьРеквизитСделка();
КонецПроцедуры

Процедура ТорговыеДокументы_ОчиститьИзмерениеСделкаВРегистре()
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("ВозвратТоваровОтПокупателя");
	СписокДокументов.Добавить("ВозвратТоваровПоставщику");
	СписокДокументов.Добавить("ВозвратТоваровПоставщикуИзНТТ");
	СписокДокументов.Добавить("ОтчетКомиссионераОПродажах");
	СписокДокументов.Добавить("ОтчетКомитентуОПродажах");
    СписокДокументов.Добавить("ПоступлениеДопРасходов");
	СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
	СписокДокументов.Добавить("ПоступлениеТоваровУслугВНТТ");
	СписокДокументов.Добавить("РеализацияТоваровУслуг");
	
	СписокОтработанныхДокументов = новый СписокЗначений;
	Для каждого ВидДокумента Из СписокДокументов цикл
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		БылПоследнийДокумент = Ложь;
		
		ДатаДокумента = Дата('00010101');
		ДатаКонца = Дата('29991231');
		
		Пока ЕстьДокументы Цикл

			ТаблицаДокументов = ТорговыеДокументы_ПолучитьТаблицуДокументовДокументамРасчетов(ДатаДокумента, ДокументСсылка, ДатаКонца, БылПоследнийДокумент, ВидДокумента.Значение, СписокОтработанныхДокументов);
			
			ЕстьДокументы = ТаблицаДокументов.Количество() > 0;
			БылПоследнийДокумент = ЕстьДокументы;
			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				
				ДокументСсылка = Строка.Регистратор;
				ДатаДокумента  = Строка.Дата;
				СписокОтработанныхДокументов.Добавить(ДокументСсылка);
				
				МетаданныеДокумента = ДокументСсылка.Метаданные();
				ВидОперацииСтр = "";
				Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
					ВидОперацииСтр = " (" + ДокументСсылка.ВидОперации + ")";
				КонецЕсли;
				Заголовок = "Обновляются движения документа: " + СокрЛП(ДокументСсылка) + ВидОперацииСтр;
				Состояние(Заголовок);

				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДвиженияДокумента = ДокументОбъект.Движения;

				НаборЗаписей = ДвиженияДокумента.ВзаиморасчетыСКонтрагентами;
				
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество()=0 Тогда Продолжить; КонецЕсли;
				Для каждого Запись из НаборЗаписей цикл
					Запись.Сделка = неопределено;
				КонецЦикла;
				
				НаборЗаписей.Записать();

			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПлатежныеДокументы_ОчиститьИзмерениеСделкаВРегистре()
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("АвансовыйОтчет");   //имя ТЧ = ОплатаПоставщикам
	СписокДокументов.Добавить("АккредитивПереданный");
	СписокДокументов.Добавить("АккредитивПолученный");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПереданное");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПолученное");
	СписокДокументов.Добавить("ПлатежноеПоручениеВходящее");
	СписокДокументов.Добавить("ПлатежноеПоручениеИсходящее");
    СписокДокументов.Добавить("ПлатежноеТребованиеВыставленное");
    СписокДокументов.Добавить("ПлатежноеТребованиеПолученное");
	СписокДокументов.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств");
	СписокДокументов.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств");
	СписокДокументов.Добавить("ПриходныйКассовыйОрдер");
    СписокДокументов.Добавить("РасходныйКассовыйОрдер");
	СписокДокументов.Добавить("КорректировкаДолга"); //имя ТЧ - СуммыДолга

	
	СписокОтработанныхДокументов = новый СписокЗначений;
	Для каждого ВидДокумента Из СписокДокументов цикл
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		БылПоследнийДокумент = Ложь;
		
		ИмяТЧ = "РасшифровкаПлатежа";
		Если ВидДокумента.Значение = "АвансовыйОтчет" Тогда
			ИмяТЧ = "ОплатаПоставщикам";
		ИначеЕсли ВидДокумента.Значение = "КорректировкаДолга" Тогда
            ИмяТЧ = "СуммыДолга";
		КонецЕсли;

		
		ДатаДокумента = Дата('00010101');
		ДатаКонца = Дата('29991231');
		
		Пока ЕстьДокументы Цикл

			ТаблицаДокументов = ПлатежныеДокументы_ПолучитьТаблицуДокументовДокументамРасчетов(ДатаДокумента, ДокументСсылка, ДатаКонца, БылПоследнийДокумент, ВидДокумента.Значение, СписокОтработанныхДокументов, ИмяТЧ);
			
			ЕстьДокументы = ТаблицаДокументов.Количество() > 0;
			БылПоследнийДокумент = ЕстьДокументы;
			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				
				ДокументСсылка = Строка.Регистратор;
				ДатаДокумента  = Строка.Дата;
				СписокОтработанныхДокументов.Добавить(ДокументСсылка);
				
				МетаданныеДокумента = ДокументСсылка.Метаданные();
				ВидОперацииСтр = "";
				Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
					ВидОперацииСтр = " (" + ДокументСсылка.ВидОперации + ")";
				КонецЕсли;
				Заголовок = "Обновляются движения документа: " + СокрЛП(ДокументСсылка) + ВидОперацииСтр;
				Состояние(Заголовок);

				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДвиженияДокумента = ДокументОбъект.Движения;

				НаборЗаписей = ДвиженияДокумента.ВзаиморасчетыСКонтрагентами;
				
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество()=0 Тогда Продолжить; КонецЕсли;
				Для каждого Запись из НаборЗаписей цикл
					Если Запись.ДоговорКОнтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
						Запись.Сделка = неопределено;
					КонецЕсли;	
				КонецЦикла;
				
				НаборЗаписей.Записать();

			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьИзмерениеСделкаВРегистрахРасчетыПоПриобретениюРеализации()
	масРегистры = новый Массив;
	масРегистры.Добавить("РасчетыСКонтрагентами");
	масРегистры.Добавить("ДвиженияДенежныхСредств");
	масРегистры.Добавить("ЗаявкиНаРасходованиеСредств");
	масРегистры.Добавить("ПланируемыеПоступленияДенежныхСредств");
	масРегистры.Добавить("РеализованныеТовары");
	масРегистры.Добавить("ТоварыПереданные");
    масРегистры.Добавить("ТоварыПолученные");
	масРегистры.Добавить("ДенежныеСредстваКомиссионера");
	масРегистры.Добавить("ДенежныеСредстваКомитента");


	Для каждого ИмяРегистра из масРегистры цикл
		ТипРегистра = "РегистрНакопления";
		
		ДатаДокумента = Дата('00010101');
		ДатаКонца = Дата('29991231');
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		БылПоследнийДокумент = Ложь;

		
		Пока ЕстьДокументы Цикл
			ТаблицаДокументов = ПолучитьТаблицуДокументовРасчетыПоПриобретениюРеализации(ДатаДокумента, ДокументСсылка, ДатаКонца, БылПоследнийДокумент, ТипРегистра, ИмяРегистра);
					
			ЕстьДокументы = ТаблицаДокументов.Количество() > 0;
			БылПоследнийДокумент = ЕстьДокументы;
					
			Для Каждого Строка Из ТаблицаДокументов Цикл
				ДокументСсылка = Строка.Регистратор;

				ДатаДокумента  = ДокументСсылка.Дата;

	            ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДвиженияДокумента = ДокументОбъект.Движения;
	            НаборЗаписей = ДвиженияДокумента[ИмяРегистра];
				НаборЗаписей.Прочитать();
				Для каждого Запись из НаборЗаписей цикл
					Если не Запись.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Запись.Сделка) Тогда
						Продолжить;
					КонецЕсли;
						
					Запись.Сделка = неопределено;
				КонецЦикла;

				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
Конецпроцедуры

Функция ПолучитьТаблицуДокументовРасчетыПоПриобретениюРеализации(ДатаНачала, СсылкаНач, ДатаКонца, БылПоследнийДокумент, ТипРегистра, ИмяРегистра) 
	Если СсылкаНач = Неопределено Тогда
		МоментНач = Новый МоментВремени(ДатаНачала);
	Иначе
		МоментНач = Новый МоментВремени(ДатаНачала, СсылкаНач);
	КонецЕсли;

	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500 Регистратор
	|ИЗ "+ТипРегистра+"."+ИмяРегистра+"
	|ГДЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = истина
	|И Сделка<>неопределено
	|	И Регистратор.МоментВремени > &МоментНач
	|	И Период >= &ДатаПоследнего
	|	И Период <= &ДатаКон ";
	
	Если БылПоследнийДокумент тогда
		Запрос.УстановитьПараметр("ДатаПоследнего",   ДатаНачала);
	Иначе
		Запрос.УстановитьПараметр("ДатаПоследнего",   Дата('00010101'));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МоментНач", 				МоментНач);
	Запрос.УстановитьПараметр("ДатаКон", 				ДатаКонца);
	Запрос.УстановитьПараметр("ПустаяДата", 	 Дата('00010101'));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


Процедура ОчиститьИзмерениеСделкаВРегистре() экспорт
	ТорговыеДокументы_ОчиститьИзмерениеСделкаВРегистре();
    ПлатежныеДокументы_ОчиститьИзмерениеСделкаВРегистре();
	ОчиститьИзмерениеСделкаВРегистрахРасчетыПоПриобретениюРеализации();
КонецПроцедуры


// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
