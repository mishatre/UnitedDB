Перем мСоответствиеРеквизитовИУзлов;

Перем мЭтоНовыйЭлемент;
Перем мНастройкиОбменаИзменены;
Перем мМонопольныйРежимПередЗаписью;


Перем мТипУдалениеДанных;
Перем мСтарыйТипОбъектаОтправки;
Перем мИнформацияОБазовыхТипах;
Перем мИмяСтарогоБазовогоТипа;

Перем мТипСправочникОбъектНоменклатура;
Перем мТипСправочникСсылкаНоменклатура;

Перем мТипСправочникОбъектЕдиницыИзмерения;
Перем мТипСправочникСсылкаЕдиницыИзмерения;

Перем мТипСправочникОбъектХарактеристикиНоменклатуры;
Перем мТипСправочникСсылкаХарактеристикиНоменклатуры;

Перем мТипСправочникОбъектХранилищеДополнительнойИнформации;
Перем мТипСправочникСсылкаХранилищеДополнительнойИнформации;

Перем мТипСправочникОбъектКонтрагенты;
Перем мТипСправочникСсылкаКонтрагенты;

Перем мТипСправочникОбъектВидыОплатЧекаККМ;
Перем мТипСправочникСсылкаВидыОплатЧекаККМ;

Перем мТипСправочникОбъектДоговорыЭквайринга;
Перем мТипСправочникСсылкаДоговорыЭквайринга;

Перем мТипСправочникОбъектИнформационныеКарты;
Перем мТипСправочникСсылкаИнформационныеКарты;

Перем мТипСправочникОбъектСклады;
Перем мТипСправочникСсылкаСклады;
Перем мТипСправочникОбъектКассы;
Перем мТипСправочникСсылкаКассы;

Перем мТипСправочникСсылкаЗначенияСвойствОбъектов;
Перем мТипСправочникОбъектЗначенияСвойствОбъектов;

Перем мТипСправочникСсылкаКатегорииОбъектов;
Перем мТипСправочникОбъектКатегорииОбъектов;

Перем мТипСправочникСсылкаОрганизации;
Перем мТипСправочникСсылкаФизическиеЛица;

Перем мТипСправочникСсылкаВидыКонтактнойИнформации;
Перем мТипСправочникОбъектВидыКонтактнойИнформации;

Перем мТипНаборЗаписейКатегорииОбъектов;
Перем мТипНаборЗаписейЗначенияСвойствОбъектов;
Перем мТипНаборЗаписейНазначенияСвойствОбъектов;

Перем мТипНаборЗаписейШтрихкоды;
Перем мТипНаборЗаписейКонтактнаяИнформация;

Перем мЕстьФильтрПоНоменклатуре Экспорт;
Перем мЕстьФильтрПоКонтрагентам Экспорт;
Перем мЕстьФильтрПоСкладам      Экспорт;
Перем мЕстьФильтрПоКассам       Экспорт;

Перем мТаблицаНоменклатуры;
Перем мТаблицаКонтрагентов;
Перем мТаблицаСкладов;
Перем мТаблицаКасс;

Перем мТипНаборЗаписейКомплектующиеНоменклатуры;

Перем мТипДокументОбъектУстановкаЦенНоменклатуры;
Перем мТипДокументОбъектУстановкаСкидокНоменклатуры;
Перем мТипДокументОбъектОтменаСкидокНоменклатуры;

Перем мТипПланВидовХарактеристикОбъектСвойстваОбъектов;

Перем мИзмененПризнакДляСверки;

Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта) Экспорт
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	Если МетаданныеТипа = Неопределено Тогда
		
		Возврат "";	
	
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
	
		Возврат "РегистрыСведений";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Документы";
		
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Справочники";	
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
		
		Возврат "ПланыВидовХарактеристик";	
		
	Иначе
	   
		Возврат "";
		
	КонецЕсли;
			
КонецФункции


Процедура ОпределитьТипОтправкиДанных(ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	ТипОбъекта = ТипЗнч(ЭлементДанных);
	
	Если ТипОбъекта = мТипУдалениеДанных Тогда
		// удаление объекта просто отсылаем как есть
		Возврат;
	КонецЕсли;
	
	Если мСоответствиеРеквизитовИУзлов = Неопределено Тогда
		
		мСоответствиеРеквизитовИУзлов = ПроцедурыОбменаСРозничнойТорговлей.ПолучитьСоответствиеРеквизитовИУзлов();
		
	КонецЕсли;
	
	Если мЕстьФильтрПоНоменклатуре И мТаблицаНоменклатуры = Неопределено Тогда
		
		мТаблицаНоменклатуры = ЗаполнитьТаблицу("Номенклатура", "Номенклатура", ОтборПоНоменклатуре);
		
		//если полученная таблица - Неопределено, значит фильтра вообще нет
		мЕстьФильтрПоНоменклатуре = мТаблицаНоменклатуры <> Неопределено;
		
	КонецЕсли;
	
	Если мЕстьФильтрПоКонтрагентам И мТаблицаКонтрагентов = Неопределено Тогда
		
		мТаблицаКонтрагентов = ЗаполнитьТаблицу("Контрагенты", "Контрагент", ОтборПоКонтрагентам);
		
		//если полученная таблица - Неопределено, значит фильтра вообще нет
		мЕстьФильтрПоКонтрагентам = мТаблицаКонтрагентов <> Неопределено;
		
	КонецЕсли;
	
	Если мЕстьФильтрПоСкладам И мТаблицаСкладов = Неопределено Тогда
		
		мТаблицаСкладов = ЗаполнитьТаблицу("Склады", "Склад", ОтборПоСкладам);
		
		//если полученная таблица - Неопределено, значит фильтра вообще нет
		мЕстьФильтрПоСкладам = мТаблицаСкладов <> Неопределено;
		
	КонецЕсли;
	
	Если мЕстьФильтрПоКассам И мТаблицаКасс = Неопределено Тогда
		
		мТаблицаКасс = ЗаполнитьТаблицу("Кассы", "Касса", ОтборПоКассам);
		
		//если полученная таблица - Неопределено, значит фильтра вообще нет
		мЕстьФильтрПоКассам = мТаблицаКасс <> Неопределено;
		
	КонецЕсли;
	
	Если мСтарыйТипОбъектаОтправки = ТипОбъекта Тогда
		
		ИмяБазовогоТипа = мИмяСтарогоБазовогоТипа;
		
	Иначе	
	
		ИмяБазовогоТипа = мИнформацияОБазовыхТипах.Получить(ТипОбъекта);
		
		Если ИмяБазовогоТипа = Неопределено Тогда
		
			ИмяБазовогоТипа = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта);
			мИнформацияОБазовыхТипах.Вставить(ТипОбъекта, ИмяБазовогоТипа);
		
		КонецЕсли;
		
		мИмяСтарогоБазовогоТипа = ИмяБазовогоТипа;
		мСтарыйТипОбъектаОтправки = ТипОбъекта;
	
	КонецЕсли;
	
	//Если ИмяБазовогоТипа = "Справочники" И ЭлементДанных.Предопределенный 
	//	 И НЕ (ТипОбъекта = мТипСправочникСсылкаКатегорииОбъектов Или ТипОбъекта = мТипСправочникОбъектКатегорииОбъектов)
	//	 И НЕ (ТипОбъекта = мТипСправочникСсылкаВидыКонтактнойИнформации Или ТипОбъекта = мТипСправочникОбъектВидыКонтактнойИнформации)Тогда
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
	Если ИмяБазовогоТипа = "Справочники"
	 Или ИмяБазовогоТипа = "Документы"
	 Или ИмяБазовогоТипа = "ПланыВидовХарактеристик" 
	 Или ИмяБазовогоТипа = "РегистрыСведений" Тогда
	 
		//если отсылаем номенклатуру
		Если ТипОбъекта = мТипСправочникОбъектНоменклатура
		 Или ТипОбъекта = мТипСправочникСсылкаНоменклатура Тогда
		
			Если (Не ЭлементДанных.ЭтоГруппа И ЭлементДанных.Набор)
			 Или Не ЭлементВходитВТаблицу(ЭлементДанных.Ссылка, "Номенклатура", "Номенклатура") Тогда
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			КонецЕсли;
			
		//если отсылаем единицу измерения или характеристику номенклатуры, определяем - нужно ли ее отсылать по владельцу
		ИначеЕсли ТипОбъекта = мТипСправочникОбъектЕдиницыИзмерения
		      Или ТипОбъекта = мТипСправочникСсылкаЕдиницыИзмерения
		      Или ТипОбъекта = мТипСправочникОбъектХарактеристикиНоменклатуры
		      Или ТипОбъекта = мТипСправочникСсылкаХарактеристикиНоменклатуры Тогда
		
			ЭлементДляПроверки = ЭлементДанных.Владелец;
			ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
			
			Если ЭлементДляПроверки <> Неопределено И ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
				//рекурсивный вызов
				ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
			КонецЕсли;
			
			ОтправкаЭлемента = ОтправкаЭлементаДляПроверки;
			
		//если отсылаем хранилище доп информации и реквизит Объект типа номенклатура, определяем - нужно ли ее отсылать по отбору
		ИначеЕсли ТипОбъекта = мТипСправочникОбъектХранилищеДополнительнойИнформации 
		      Или ТипОбъекта = мТипСправочникСсылкаХранилищеДополнительнойИнформации Тогда
			
			ЭлементДляПроверки = ЭлементДанных.Объект;
			ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
			
			Если ЭлементДляПроверки <> Неопределено И ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
				//рекурсивный вызов
				ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
			КонецЕсли;
			
			ОтправкаЭлемента = ОтправкаЭлементаДляПроверки;
			
		//если отсылаем контрагента
		ИначеЕсли ТипОбъекта = мТипСправочникОбъектКонтрагенты
		      Или ТипОбъекта = мТипСправочникСсылкаКонтрагенты Тогда
		
			Если ЭлементВходитВТаблицу(ЭлементДанных.Ссылка, "Контрагенты", "Контрагент") Тогда
				Возврат;
			Иначе
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = мТипСправочникОбъектВидыОплатЧекаККМ
		      Или ТипОбъекта = мТипСправочникСсылкаВидыОплатЧекаККМ Тогда
		
			Если ЭлементДанных.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит
			   И Не ЭлементВходитВТаблицу(ЭлементДанных.БанкКредитор, "Контрагенты", "Контрагент") Тогда
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			Иначе
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = мТипСправочникОбъектДоговорыЭквайринга
		      Или ТипОбъекта = мТипСправочникСсылкаДоговорыЭквайринга Тогда
		
			Если ЭлементВходитВТаблицу(ЭлементДанных.Эквайрер, "Контрагенты", "Контрагент") Тогда
				Возврат;
			Иначе
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = мТипСправочникОбъектИнформационныеКарты
		      Или ТипОбъекта = мТипСправочникСсылкаИнформационныеКарты Тогда
		
			  Если ЗначениеЗаполнено(ЭлементДанных.ВладелецКарты) И ТипЗнч(ЭлементДанных.ВладелецКарты) = мТипСправочникСсылкаКонтрагенты Тогда
				  Если ЭлементВходитВТаблицу(ЭлементДанных.ВладелецКарты, "Контрагенты", "Контрагент") Тогда
					  Возврат;
				  Иначе
					  ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
				  КонецЕсли;
			  Иначе	  
				  Возврат;	
			  КонецЕсли;
			
		ИначеЕсли ТипОбъекта = мТипСправочникСсылкаЗначенияСвойствОбъектов
		      Или ТипОбъекта = мТипСправочникОбъектЗначенияСвойствОбъектов Тогда
			  
			ЭлементДляПроверки = ЭлементДанных.Владелец;
			ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
			
			Если ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
				//рекурсивный вызов
				ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
			КонецЕсли;
			
			ОтправкаЭлемента = ОтправкаЭлементаДляПроверки;
			
		//фильтр по свойствам и категориям
		ИначеЕсли ТипОбъекта = мТипНаборЗаписейЗначенияСвойствОбъектов
		      Или ТипОбъекта = мТипНаборЗаписейКатегорииОбъектов
		      Или ТипОбъекта = мТипНаборЗаписейНазначенияСвойствОбъектов Тогда
			  
			ЭлементДляПроверки = ЭлементДанных.Отбор.Объект.Значение;
			
			//если объект - характеристика, определяем как ее отправлять по ее владельцу
			Если ТипЗнч(ЭлементДляПроверки) = мТипСправочникСсылкаХарактеристикиНоменклатуры Тогда
				ЭлементДляПроверки = ЭлементДляПроверки.Владелец;
			КонецЕсли;
			
			ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
			
			Если ЭлементДляПроверки <> Неопределено И ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
				//рекурсивный вызов
				ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
			КонецЕсли;
			
			ОтправкаЭлемента = ?(ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Удалить, ОтправкаЭлементаДанных.Игнорировать, ОтправкаЭлементаДляПроверки);
			
		ИначеЕсли ТипОбъекта = мТипПланВидовХарактеристикОбъектСвойстваОбъектов Тогда
			
			//если нет назначений - посылаем
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НазначенияСвойствОбъектов.Объект
			|ИЗ
			|	РегистрСведений.НазначенияСвойствОбъектов КАК НазначенияСвойствОбъектов
			|ГДЕ
			|	НазначенияСвойствОбъектов.Свойство = &Свойство");
			
			Запрос.УстановитьПараметр("Свойство", ЭлементДанных.Ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ЭлементДляПроверки          = Выборка.Объект;
					ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
					
					Если ЭлементДляПроверки <> Неопределено Тогда
						
						//рекурсивный вызов
						ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
						
						Если ОтправкаЭлементаДляПроверки <> ОтправкаЭлементаДанных.Удалить Тогда
							
							//значит переносить все-таки нужно
							ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
							Прервать;
							
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = мТипНаборЗаписейШтрихкоды Тогда
			
			ЭлементДляПроверки = ЭлементДанных.Отбор.Владелец.Значение;
			ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
			
			Если ЭлементДляПроверки <> Неопределено И ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
				//рекурсивный вызов
				ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
			КонецЕсли;
			
			ОтправкаЭлемента = ?(ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Удалить, ОтправкаЭлементаДанных.Игнорировать, ОтправкаЭлементаДляПроверки);
			
		ИначеЕсли ТипОбъекта = мТипНаборЗаписейКомплектующиеНоменклатуры Тогда
			
			ЭлементДляПроверки = ЭлементДанных.Отбор.Номенклатура.Значение;
			ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
			
			Если ЭлементДляПроверки <> Неопределено И ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
				//рекурсивный вызов
				ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
			КонецЕсли;
			
			Если ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто Тогда
				
				ЭлементДляПроверки = ЭлементДанных.Отбор.Комплектующая.Значение;
				
				Если ЭлементДляПроверки <> Неопределено И ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
					//рекурсивный вызов
					ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
				КонецЕсли;
				
				ОтправкаЭлемента = ?(ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Удалить, ОтправкаЭлементаДанных.Игнорировать, ОтправкаЭлементаДляПроверки);
				
			Иначе
				
				ОтправкаЭлемента = ?(ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Удалить, ОтправкаЭлементаДанных.Игнорировать, ОтправкаЭлементаДляПроверки);
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = мТипНаборЗаписейКонтактнаяИнформация Тогда
			
			ЭлементДляПроверки     = ЭлементДанных.Отбор.Объект.Значение;
			ТипЭлементаДляПроверки = ТипЗнч(ЭлементДляПроверки);
			
			Если ТипЭлементаДляПроверки = мТипСправочникСсылкаКонтрагенты Тогда
				
				Если Не ЭлементВходитВТаблицу(ЭлементДляПроверки, "Контрагенты", "Контрагент") Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Удалить Тогда
				
				//еще проверим - нужно ли отсылать по виду контактной информации
				ЭлементДляПроверки          = ЭлементДанных.Отбор.Вид.Значение;
				ОтправкаЭлементаДляПроверки = ОтправкаЭлементаДанных.Авто;
				
				Если ЗначениеЗаполнено(ЭлементДляПроверки) Тогда
					//рекурсивный вызов
					ОпределитьТипОтправкиДанных(ЭлементДляПроверки, ОтправкаЭлементаДляПроверки);
				КонецЕсли;
				
				ОтправкаЭлемента = ОтправкаЭлементаДляПроверки;
				
			КонецЕсли;
			
		Иначе
			
			// объекты типа справочник Склады могут не подлежать переносу из-за наложенного фильтра
			Если ТипОбъекта = мТипСправочникОбъектСклады
			 ИЛИ ТипОбъекта = мТипСправочникСсылкаСклады Тогда
			
				Если Не ЭлементВходитВТаблицу(ЭлементДанных.Ссылка, "Склады", "Склад") Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
					Возврат;
				КонецЕсли;
				
			// объекты типа справочник Кассы могут не подлежать переносу из-за наложенного фильтра
			ИначеЕсли ТипОбъекта = мТипСправочникОбъектКассы
			      ИЛИ ТипОбъекта = мТипСправочникСсылкаКассы Тогда
				
				Если Не ЭлементВходитВТаблицу(ЭлементДанных.Ссылка, "Кассы", "Касса") Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
					Возврат;
				КонецЕсли;
				
			//удалим ненужные строки по фильтру номенклатура
			ИначеЕсли ТипОбъекта = мТипДокументОбъектУстановкаЦенНоменклатуры Тогда
				
				Если мЕстьФильтрПоНоменклатуре Тогда 
					
					КоличествоСтрок = ЭлементДанных.Товары.Количество();
					Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
						
						Если Не ЭлементВходитВТаблицу(ЭлементДанных.Товары[КоличествоСтрок - ОбратныйИндекс].Номенклатура, "Номенклатура", "Номенклатура") Тогда
							
							ЭлементДанных.Товары.Удалить(КоличествоСтрок - ОбратныйИндекс);
							
						КонецЕсли;
						
					КонецЦикла;
					
					//если строк не осталось - посылаем удаление
					Если ЭлементДанных.Товары.Количество() = 0 Тогда
						ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипОбъекта = мТипДокументОбъектУстановкаСкидокНоменклатуры Тогда
				
				Если Не ЭлементДанных.ДляВсейНоменклатуры И мЕстьФильтрПоНоменклатуре Тогда 
					
					КоличествоСтрок = ЭлементДанных.Товары.Количество();
					Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
						
						Если Не ЭлементВходитВТаблицу(ЭлементДанных.Товары[КоличествоСтрок - ОбратныйИндекс].Номенклатура, "Номенклатура", "Номенклатура") Тогда
							
							ЭлементДанных.Товары.Удалить(КоличествоСтрок - ОбратныйИндекс);
							
						КонецЕсли;
						
					КонецЦикла;
					
					//если строк не осталось - посылаем удаление
					Если ЭлементДанных.Товары.Количество() = 0 Тогда
						ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЭлементДанных.ДляВсехПолучателей Тогда 
					
					Если ЭлементДанных.ВидСкидки = Перечисления.ВидыСкидок.Розничная Тогда
						
						//удалим строки, в которых ненужные складов
						КоличествоСтрок = ЭлементДанных.ПолучателиСкидки.Количество();
						Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
							
							Если СоответствияМагазиновИСкладов.Найти(ЭлементДанных.ПолучателиСкидки[КоличествоСтрок - ОбратныйИндекс].Получатель) = Неопределено Тогда
								
								ЭлементДанных.ПолучателиСкидки.Удалить(КоличествоСтрок - ОбратныйИндекс);
								
							КонецЕсли;
							
						КонецЦикла;
						
					//если получатели - контрагенты
					ИначеЕсли мЕстьФильтрПоКонтрагентам Тогда
						
						КоличествоСтрок = ЭлементДанных.ПолучателиСкидки.Количество();
						Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
							
							Если ЭлементВходитВТаблицу(ЭлементДанных.ПолучателиСкидки[КоличествоСтрок - ОбратныйИндекс].Получатель, "Контрагенты", "Контрагент") Тогда
								
								ЭлементДанных.ПолучателиСкидки.Удалить(КоличествоСтрок - ОбратныйИндекс);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					//если строк не осталось - посылаем удаление
					Если ЭлементДанных.ПолучателиСкидки.Количество() = 0 Тогда
						ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипОбъекта = мТипДокументОбъектОтменаСкидокНоменклатуры Тогда
				
				КоличествоСтрок = ЭлементДанных.Документы.Количество();
				Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
					
					Документ = ЭлементДанных.Документы[КоличествоСтрок - ОбратныйИндекс].УстановкаСкидокНоменклатуры;
					НужныйДокумент = Ложь;
					
					ДокументНуженПоНоменклатуре = Документ.ДляВсейНоменклатуры;
					ДокументНуженПоПолучателям  = Документ.ДляВсехПолучателей;
					
					Если Не ДокументНуженПоНоменклатуре Тогда
						
						Для Каждого СтрокаТовары Из Документ.Товары Цикл
							
							Если ЭлементВходитВТаблицу(СтрокаТовары.Номенклатура, "Номенклатура", "Номенклатура") Тогда
								ДокументНуженПоНоменклатуре = Истина;
								Прервать;
							КонецЕсли;
								
						КонецЦикла;
						
					КонецЕсли;
					
					Если ДокументНуженПоНоменклатуре И Не ДокументНуженПоПолучателям Тогда
						
						Для Каждого СтрокаПолучателей Из Документ.ПолучателиСкидки Цикл
							
							Если СоответствияМагазиновИСкладов.Найти(СтрокаПолучателей.Получатель) = Неопределено Тогда
								
								ДокументНуженПоПолучателям = Истина;
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					НужныйДокумент = ДокументНуженПоНоменклатуре И ДокументНуженПоПолучателям;
					
					Если Не НужныйДокумент Тогда
						
						ЭлементДанных.Документы.Удалить(КоличествоСтрок - ОбратныйИндекс);
						
					КонецЕсли;
					
				КонецЦикла;
				
				//если строк не осталось - посылаем удаление
				Если ЭлементДанных.Документы.Количество() = 0 Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			//если уже определили, что удаляем или игнорируем, дальше можно не смотреть
			Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Авто Тогда
				Возврат;
			КонецЕсли;
			
			//стандартная обработка 
			ВыгружатьДляВсехУзлов = Ложь;
			
			МассивУзловДляПереноса = ПроцедурыОбменаСРозничнойТорговлей.ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(ЭлементДанных, 
				ИмяБазовогоТипа, ТипОбъекта, , ВыгружатьДляВсехУзлов, Ложь, мСоответствиеРеквизитовИУзлов, Ложь);
				
			// если нужно для всех узлов выгружать - то ничего проверять не нужно
			Если ВыгружатьДляВсехУзлов Тогда
				// просто присваиваем фиктивный не пустой номер
				НомерВМассиве = 1;
			Иначе
				НомерВМассиве = МассивУзловДляПереноса.Найти(ЭтотОбъект.Ссылка);	
			КонецЕсли;
			
			Если НомерВМассиве = Неопределено Тогда
				
				// передаем информацию об удалении
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
				
			Иначе
				
				// объект должен ехать, нужно определить удовлетворяет ли он ограничениям по дате
				Если ИмяБазовогоТипа = "Документы"
					И ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов)
					И ЭлементДанных.Дата < ДатаНачалаВыгрузкиДокументов Тогда
					
					// просто не выгружаем этот документ и все - игнорируем при выгрузке
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;	
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ЗаполнитьТаблицу(ИмяСправочника, ПредставлениеЭлемента, ХранилищеСОтбором)
	
	ПостроительЗапроса      = Новый ПостроительЗапроса;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИмяСправочника.Ссылка   КАК ПредставлениеЭлемента,
	|	ИмяСправочника.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ИмяСправочника КАК ИмяСправочника";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника"       , ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПредставлениеЭлемента", ПредставлениеЭлемента);
	
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	СтруктураСОтбором = ХранилищеСОтбором.Получить();
	
	Если СтруктураСОтбором <> Неопределено Тогда
		
		ОтборУзла = СтруктураСОтбором.Отбор;
		
		Если ОтборУзла.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	
		Для Каждого ЭлементОтбора Из ОтборУзла Цикл
			
			Если ПустаяСтрока(ЭлементОтбора.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.ПутьКДанным);
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора, , "Значение");
			НовыйЭлементОтбора.Значение = ЭлементОтбора.Значение;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	ПостроительЗапроса.Выполнить();
	ТаблицаЭлементовИРодителей = ПостроительЗапроса.Результат.Выгрузить();
	ТаблицаЭлементовИРодителей.Индексы.Добавить(ПредставлениеЭлемента);
	
	ТаблицаЭлементов = ТаблицаЭлементовИРодителей.Скопировать(, ПредставлениеЭлемента);
	ТаблицаЭлементов.Индексы.Добавить(ПредставлениеЭлемента);
	
	//добавляем иерархию вверх
	Запрос                         = Новый Запрос;
	МенеджерВременныхТаблиц        = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЭлементовИРодителей.Родитель КАК Элемент
	|ПОМЕСТИТЬ ВременнаяТаблица0
	|ИЗ
	|	&ТаблицаЭлементовИРодителей КАК ТаблицаЭлементовИРодителей
	|ГДЕ
	|	(НЕ ТаблицаЭлементовИРодителей.Родитель = ЗНАЧЕНИЕ(Справочник.ИмяСправочника.ПустаяСсылка))
	|	И (НЕ ТаблицаЭлементовИРодителей.Родитель В (&ТаблицаЭлементов))";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника"       , ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПредставлениеЭлемента", ПредставлениеЭлемента);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаЭлементовИРодителей", ТаблицаЭлементовИРодителей);
	Запрос.УстановитьПараметр("ТаблицаЭлементов"          , ТаблицаЭлементов);
	//Запрос.УстановитьПараметр("МассивЭлементов" , ТаблицаЭлементов);
	
	РезультатЗапроса = Запрос.Выполнить();
	//Если Не РезультатЗапроса.Пустой() Тогда
		
		ДобавитьИерархиюВверх(ТаблицаЭлементов, МенеджерВременныхТаблиц, 0, ИмяСправочника, ПредставлениеЭлемента);
		
	//КонецЕсли;
	
	Возврат ТаблицаЭлементов;
	
КонецФункции

Функция ЭлементВходитВТаблицу(Элемент, ИмяСправочника, ПредставлениеЭлемента) Экспорт
	
	Если ИмяСправочника = "Номенклатура" Тогда
		ТаблицаДляПоиска = мТаблицаНоменклатуры;
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		ТаблицаДляПоиска = мТаблицаКонтрагентов;
	ИначеЕсли ИмяСправочника = "Склады" Тогда
		ТаблицаДляПоиска = мТаблицаСкладов;
	ИначеЕсли ИмяСправочника = "Кассы" Тогда
		ТаблицаДляПоиска = мТаблицаКасс;
	КонецЕсли;
	
	Если ТаблицаДляПоиска = Неопределено Тогда //отбор не был установлен
		Возврат Истина;
	КонецЕсли;
	
	НайденныйЭлемент = ТаблицаДляПоиска.Найти(Элемент, ПредставлениеЭлемента);
	
	Возврат НайденныйЭлемент <> Неопределено;
	
КонецФункции

Процедура ДобавитьИерархиюВверх(ТаблицаЭлементов, МенеджерВременныхТаблиц, УровеньВложенности, ИмяСправочника, ПредставлениеЭлемента)
	
	Запрос                         = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	//сразу дополним таблицу элементов
	Запрос.Текст =
	"ВЫБРАТЬ *
	|ИЗ
	|	ВременнаяТаблица" + Строка(УровеньВложенности) + " КАК ВременнаяТаблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		НоваяСтрока = ТаблицаЭлементов.Добавить();
		НоваяСтрока[ПредставлениеЭлемента] = ВыборкаЗапроса.Элемент;
		
	КонецЦикла;
	
	//получим новую порцию родителей
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблица.Элемент.Родитель КАК Элемент
	|ПОМЕСТИТЬ ВременнаяТаблица" + Строка(УровеньВложенности + 1) + "
	|ИЗ
	|	ВременнаяТаблица" + Строка(УровеньВложенности) + " КАК ВременнаяТаблица
	|	//ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ПростоСправочник 
	|	//	ПО ВременнаяТаблица.Элемент = ПростоСправочник.Ссылка
	|ГДЕ
	|	(НЕ ВременнаяТаблица.Элемент.Родитель = ЗНАЧЕНИЕ(Справочник.ИмяСправочника.ПустаяСсылка))
	|	И (НЕ ВременнаяТаблица.Элемент.Родитель В (&ТаблицаЭлементов))";
	
	////|;
	////|
	////|////////////////////////////////////////////////////////////////////////////////
	////|ВЫБРАТЬ
	////|	ВременнаяТаблица.Элемент
	////|ИЗ
	////|	ВременнаяТаблица" + Строка(УровеньВложенности + 1) + " КАК ВременнаяТаблица";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника"       , ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПредставлениеЭлемента", ПредставлениеЭлемента);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаЭлементов", ТаблицаЭлементов);
	
	РезультатЗапроса = Запрос.Выполнить();
	//Если Не РезультатЗапроса.Пустой() Тогда
		
		ДобавитьИерархиюВверх(ТаблицаЭлементов, МенеджерВременныхТаблиц, УровеньВложенности + 1, ИмяСправочника, ПредставлениеЭлемента);
		
	//КонецЕсли;
	
КонецПроцедуры

Функция СообщитьИнформациюПользователюПослеСозданияНовогоУзла() Экспорт
	
	НужноПерезапуститьВсеПодключенияКИБ = Ложь;
	
	Если мЭтоНовыйЭлемент 
		И НЕ ПараметрыСеанса.НаличиеОбменаСРозничнойТорговлей
		И НЕ мМонопольныйРежимПередЗаписью Тогда
		
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
		
	КонецЕсли;
	
	Если мНастройкиОбменаИзменены Тогда
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
	КонецЕсли;
	
	Если НужноПерезапуститьВсеПодключенияКИБ Тогда
		
		Если мМонопольныйРежимПередЗаписью Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными();
			Возврат "";
			
		Иначе	
			
			Возврат "Для корректной работы механизма обмена данными необходимо завершить работу всех пользователей и перезапустить текущий сеанс работы 1С:Предприятия.";	
			
		КонецЕсли;
		
	Иначе
		
		Если мЭтоНовыйЭлемент Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными();
			
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Процедура ПриЗаписи(Отказ)
	
	СтрокаСообщенияПользователю = СообщитьИнформациюПользователюПослеСозданияНовогоУзла();
	
	#Если Клиент Тогда
	Сообщить(СтрокаСообщенияПользователю);
	#КонецЕсли
			
	// если установлена дата свертки, сделаем запись в регистр
	Если ЗначениеЗаполнено(ДатаСвертки) Тогда
		
		МенеджерЗаписи              = РегистрыСведений.СверткаУзлаРозницы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УзелРозницы  = Ссылка;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.ДатаСвертки <> ДатаСвертки Или мИзмененПризнакДляСверки Тогда
			
			МенеджерЗаписи.ДатаСвертки = ДатаСвертки;
			МенеджерЗаписи.УзелРозницы = Ссылка;
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьИзменениеНастроекОбмена()
	
	Если Ссылка.ДатаНачалаВыгрузкиДокументов <> ДатаНачалаВыгрузкиДокументов Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтараяТаблица = Ссылка.СоответствияМагазиновИСкладов.Выгрузить();
	НоваяТаблица  = СоответствияМагазиновИСкладов.Выгрузить();
	
	Если СтараяТаблица.Количество() <> НоваяТаблица.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Инд = 0 По СтараяТаблица.Количество() - 1 Цикл
		
		СтараяСтрока = СтараяТаблица[Инд];
		НоваяСтрока  = НоваяТаблица[Инд];
		
		Для Каждого Колонка Из СтараяТаблица.Колонки Цикл
			
			Если СтараяСтрока[Колонка.Имя] <> НоваяСтрока[Колонка.Имя] Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	Если ВыгружатьСебестоимость Тогда
		
		Если Не ЗначениеЗаполнено(ПериодичностьПередачиСебестоимости) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать периодичность передачи себестоимости!", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	мЭтоНовыйЭлемент = ЭтоНовый();
	
	
	мМонопольныйРежимПередЗаписью = ОбщегоНазначения.ОпределитьТекущийРежимРаботыМонопольный();
	
	Если мЭтоНовыйЭлемент Тогда
		
		мНастройкиОбменаИзменены = Истина;
		
	Иначе
		
		мНастройкиОбменаИзменены = ОпределитьИзменениеНастроекОбмена();
		
	КонецЕсли;
	
	мИзмененПризнакДляСверки = Ссылка.ДляСверки <> ДляСверки;
	
КонецПроцедуры


мТипУдалениеДанных = Тип("УдалениеОбъекта");

мТипСправочникОбъектНоменклатура                      = Тип("СправочникОбъект.Номенклатура");
мТипСправочникСсылкаНоменклатура                      = Тип("СправочникСсылка.Номенклатура");
мТипСправочникОбъектЕдиницыИзмерения                  = Тип("СправочникОбъект.ЕдиницыИзмерения");
мТипСправочникСсылкаЕдиницыИзмерения                  = Тип("СправочникСсылка.ЕдиницыИзмерения");
мТипСправочникОбъектХарактеристикиНоменклатуры        = Тип("СправочникОбъект.ХарактеристикиНоменклатуры");
мТипСправочникСсылкаХарактеристикиНоменклатуры        = Тип("СправочникСсылка.ХарактеристикиНоменклатуры");
мТипСправочникОбъектХранилищеДополнительнойИнформации = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации");
мТипСправочникСсылкаХранилищеДополнительнойИнформации = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации");

мТипСправочникОбъектКонтрагенты  = Тип("СправочникОбъект.Контрагенты");
мТипСправочникСсылкаКонтрагенты  = Тип("СправочникСсылка.Контрагенты");

мТипСправочникОбъектСклады       = Тип("СправочникОбъект.Склады");
мТипСправочникСсылкаСклады       = Тип("СправочникСсылка.Склады");
мТипСправочникОбъектКассы        = Тип("СправочникОбъект.Кассы");
мТипСправочникСсылкаКассы        = Тип("СправочникСсылка.Кассы");

мТипСправочникОбъектВидыОплатЧекаККМ    = Тип("СправочникОбъект.ВидыОплатЧекаККМ");
мТипСправочникСсылкаВидыОплатЧекаККМ    = Тип("СправочникСсылка.ВидыОплатЧекаККМ");
мТипСправочникОбъектДоговорыЭквайринга  = Тип("СправочникОбъект.ДоговорыЭквайринга");
мТипСправочникСсылкаДоговорыЭквайринга  = Тип("СправочникСсылка.ДоговорыЭквайринга");
мТипСправочникОбъектИнформационныеКарты = Тип("СправочникОбъект.ИнформационныеКарты");
мТипСправочникСсылкаИнформационныеКарты = Тип("СправочникСсылка.ИнформационныеКарты");

мТипСправочникСсылкаОрганизации         = Тип("СправочникСсылка.Организации");
мТипСправочникСсылкаФизическиеЛица      = Тип("СправочникСсылка.ФизическиеЛица");

мТипСправочникСсылкаЗначенияСвойствОбъектов = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
мТипСправочникОбъектЗначенияСвойствОбъектов = Тип("СправочникОбъект.ЗначенияСвойствОбъектов");

мТипСправочникСсылкаКатегорииОбъектов = Тип("СправочникСсылка.КатегорииОбъектов");
мТипСправочникОбъектКатегорииОбъектов = Тип("СправочникОбъект.КатегорииОбъектов");

мТипСправочникСсылкаВидыКонтактнойИнформации = Тип("СправочникСсылка.ВидыКонтактнойИнформации");
мТипСправочникОбъектВидыКонтактнойИнформации = Тип("СправочникОбъект.ВидыКонтактнойИнформации");

мТипНаборЗаписейКатегорииОбъектов         = Тип("РегистрСведенийНаборЗаписей.КатегорииОбъектов");
мТипНаборЗаписейЗначенияСвойствОбъектов   = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов");
мТипНаборЗаписейНазначенияСвойствОбъектов = Тип("РегистрСведенийНаборЗаписей.НазначенияСвойствОбъектов");
мТипНаборЗаписейКонтактнаяИнформация      = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация");

мТипНаборЗаписейШтрихкоды = Тип("РегистрСведенийНаборЗаписей.Штрихкоды");

мТипНаборЗаписейКомплектующиеНоменклатуры = Тип("РегистрСведенийНаборЗаписей.КомплектующиеНоменклатуры");

мИнформацияОБазовыхТипах     = Новый Соответствие;
мСтарыйТипОбъектаОтправки    = Неопределено;
мСоответствиеРеквизитовИУзлов = Неопределено;

мЕстьФильтрПоНоменклатуре = Истина;
мЕстьФильтрПоКонтрагентам = Истина;
мЕстьФильтрПоСкладам      = Истина;
мЕстьФильтрПоКассам       = Истина;

мТаблицаНоменклатуры = Неопределено;
мТаблицаКонтрагентов = Неопределено;
мТаблицаСкладов      = Неопределено;
мТаблицаКасс         = Неопределено;

мТипДокументОбъектУстановкаЦенНоменклатуры    = Тип("ДокументОбъект.УстановкаЦенНоменклатуры");
мТипДокументОбъектУстановкаСкидокНоменклатуры = Тип("ДокументОбъект.УстановкаСкидокНоменклатуры");
мТипДокументОбъектОтменаСкидокНоменклатуры    = Тип("ДокументОбъект.ОтменаСкидокНоменклатуры");

мТипПланВидовХарактеристикОбъектСвойстваОбъектов = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов")