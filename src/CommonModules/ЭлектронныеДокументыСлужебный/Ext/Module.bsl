////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - объект - владелец присоединенного файла,
//  Отказ           - булево - признак отказа от записи,
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа,
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ЭлектронныеДокументыВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	// Пометим на удаление (снимем пометку) электронные документы, связанные с владельцем.
	Если Не Источник.ЭтоНовый() Тогда
		ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
		Если Источник.ПометкаУдаления <> ИсточникСсылкаПометкаУдаления Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Источник.Ссылка, Источник.ПометкаУдаления);
		КонецЕсли;
	Иначе
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене
	Если (Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И Не ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДействующееСоглашение(ПараметрыЭД) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - объект - владелец присоединенного файла,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ЭлектронныеДокументыВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ Не Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ Не Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		
		Возврат;
	КонецЕсли;
	
	// При изменении ключевых реквизитов объекта устанавливается новая версия электронного документа
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	ИначеЕсли Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда
		Если Источник.Ссылка.Ответственный <> Источник.Ответственный ИЛИ Источник.Ссылка.Описание <> Источник.Описание Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - объект - электронный документ,
//  Отказ    - булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
	 ИЛИ Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеВерсииЭД = Неопределено;
	
	Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
		СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
	КонецЕсли;
	
	ВерсияЭДОбновлена = Ложь;
	ПринудительнаяСменаСостоянияВерсии = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
	ВерсияФорматаПакета = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
	Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
		
		СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
		СтруктураТекВерсииЭД  = ПолучитьСтруктуруВерсииЭД(Источник.ВладелецФайла);
		Если СледСостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД Тогда
			ВерсияЭДОбновлена = Истина;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(Источник.Ссылка, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета);
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияЭДОбновлена = Ложь И Источник.ДополнительныеСвойства.Свойство("ОбновитьВерсиюЭД") Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(Источник.Ссылка, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору
//
// Параметры:
//  Параметры - Структура, Ключ - название реквизита отбора, Значение - значение отбора
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ 
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Выполняет регламентное задание по получению
// новых электронных документов.
//
// Параметры:
//  ОписаниеОшибки - строка, описание ошибки, в случае ее возникновения в ходе получения документов.
//
Процедура РегламентноеПолучениеНовыхЭД() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'");
	ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		СоотвСоглашений = Неопределено;
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоотвСоглашений) Тогда
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашений);
			НовыеДокументы = ПолучитьНовыеЭД(СоотвСоглашений);
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ДополнитьПакетамиКРаспаковке(НовыеДокументы.ПараметрыРаспаковки);
			
			КоличествоПакетов = НовыеДокументы.МассивВозврата.Количество();
			Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
				СтруктураШифрования = Неопределено;
				СтруктураРаспаковки.Свойство("СтруктураШифрования", СтруктураШифрования);
				Если СтруктураШифрования <> Неопределено Тогда
					Если СтруктураШифрования.ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
						
						СтруктураШифрования.Вставить("ПарольПользователя", СтруктураШифрования.ПараметрыСертификата.ПарольПользователя);
					КонецЕсли;
				КонецЕсли;
				ДанныеРаспаковки = Неопределено;
				СтруктураРаспаковки.Свойство("ДанныеРаспаковки", ДанныеРаспаковки);
				
				РаспаковатьПакетЭДНаСервере(СтруктураРаспаковки.ПакетЭД, СтруктураШифрования, ДанныеРаспаковки);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание. Получено пакетов: %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПакетов);
			ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 4, УровеньЖурналаРегистрации.Информация);
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Во время регламентного получения новых эл.документов произошла ошибка.
									|Дополнительное описание:
									|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке().Описание);
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 4, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке
// электронных документов.
//
Процедура РегламентнаяОтправкаОформленныхЭД() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'");
	ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
		
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеОшибки, 4, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

// Только для внутреннего использования
Процедура СохранитьВместеСПоследнейЭЦП(ПрисоединенныйФайл,
										ДанныеФайла,

										АдресКаталога,
										СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		КоличествоПодписей = МассивСтруктурПодписей.Количество();
		Для Сч = 1 По КоличествоПодписей - 1 Цикл
			МассивСтруктурПодписей.Удалить(0);
		КонецЦикла;
		СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				МассивСтруктурПодписей,
				АдресКаталога,
				СоответствиеФайлЭД,
				Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СохранитьВместеСЭЦП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет действительность подписи, без учета списка отозванных сертификатов.
// В случае ошибки генерирует исключение
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ДвоичныеДанныеФайла   - двоичные данные файла
//  ДвоичныеДанныеПодписи - двоичные данные подписи
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты электронных документов

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивСтруктурСертификатов - массив - массив структур сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  ПрофильНастроекЭДО - справочник-ссылка - ссылка на профиль настроек ЭДО, список сертификатов
//    которого требуется.
//
// Возвращаемое значение - таблица значений.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ПрофильНастроекЭДО = Неопределено) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;
	Если ЗначениеЗаполнено(ПрофильНастроекЭДО) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	ВЫБОР
		|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
		|			ТОГДА СертификатыЭЦП.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофильНастроекЭДОСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|		ПО ПрофильНастроекЭДОСертификаты.Сертификат = СертификатыЭЦП.Ссылка
		|ГДЕ
		|	ПрофильНастроекЭДОСертификаты.Ссылка = &ПрофильНастроекЭДО";
		ЗапросПоСертификатам.УстановитьПараметр("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыЭЦП.Ссылка,
		|	ВЫБОР
		|		КОГДА СертификатыЭЦП.ЗапомнитьПарольКСертификату
		|			ТОГДА СертификатыЭЦП.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату,
		|	СертификатыЭЦП.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	СертификатыЭЦП.Отпечаток
		|ИЗ
		|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|ГДЕ
		|	Истина";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|	И (СертификатыЭЦП.Пользователь = &ТекущийПользователь
		|			ИЛИ СертификатыЭЦП.Пользователь = &ПустойПользователь)
		|	И (СертификатыЭЦП.Отпечаток В (&МассивОтпечатков)
		|			ИЛИ СертификатыЭЦП.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн))
		|	И НЕ СертификатыЭЦП.Отозван
		|	И НЕ СертификатыЭЦП.ПометкаУдаления";
	
	ЗапросПоСертификатам.Текст = ТекстЗапроса;
		
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",    МассивОтпечатков);
	
	Возврат ЗапросПоСертификатам.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивСтруктурСертификатов - массив - массив структур сертификатов, установленных в хранилище на Клиенте/Сервере
//    (в зависимости от настроек работы с криптографией).
//  СоглашениеЭД - справочник-ссылка - ссылка на соглашение об обмене ЭД через оператора ЭДО, список сертификатов
//    которого требуется.
//
// Возвращаемое значение - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ПрофильНастроекЭДО = Неопределено) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивСтруктурСертификатов, ПрофильНастроекЭДО);
	Для Каждого ТекЭл Из МассивСтруктурСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл.Отпечаток, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекЭл.Вставить("Сертификат",                  СтрокаТаблицы.Ссылка);
		ТекЭл.Вставить("ПарольПолучен",               СтрокаТаблицы.ПарольПолучен);
		ТекЭл.Вставить("ПарольПользователя",          СтрокаТаблицы.ПарольПользователя);
		ТекЭл.Вставить("ЗапомнитьПарольКСертификату", СтрокаТаблицы.ЗапомнитьПарольКСертификату);
		ТекЭл.Вставить("Комментарий",                 "");
		МассивСтруктурДоступныхСертификатов.Добавить(ТекЭл);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Только для внутреннего использования
Функция ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	Шаблон = "
		|И ЭДПрисоединенныеФайлы.%1 %2 %3";
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			
			ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", Элемент.Ключ);

			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				
				ЗнакСравнения = "В";
				
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "("+"&" +Элемент.Ключ+ ")");
				
				
			Иначе
				
				ЗнакСравнения = "=";
				
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "&"+Элемент.Ключ);
				
			КонецЕсли;
			
			Текст = Текст + ШаблонИмяПараметра;
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Текст;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД,
	|	СостоянияЭД.Комментарий
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НомерВерсииЭД) КАК НомерВерсииЭД
	|ПОМЕСТИТЬ МаксВерсия
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И ЭДПрисоединенныеФайлы.НомерВерсииЭД В
	|			(ВЫБРАТЬ
	|				МаксВерсия.НомерВерсииЭД
	|			ИЗ
	|				МаксВерсия)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	КомментарийРС = "";
	ВыборкаПоРегистру = Результат[0].Выбрать();
	Если ВыборкаПоРегистру.Следующий() Тогда
		НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
		СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
		СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
		СтатусЭД          = ВыборкаПоРегистру.СтатусЭД;
		КомментарийРС     = ВыборкаПоРегистру.Комментарий;
	Иначе
		НомерВерсииЭД     = 0;
		СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		СтатусЭД          = Перечисления.СтатусыЭД.ПустаяСсылка();
	КонецЕсли;
	
	Если НомерВерсииЭД = 0 Тогда
		ВыборкаПоСправочнику = Результат[2].Выбрать();
		Если ВыборкаПоСправочнику.Количество() > 0 Тогда
			ВыборкаПоСправочнику.Следующий();
			НомерВерсииЭД    = ВыборкаПоСправочнику.НомерВерсииЭД;
			СсылкаНаДокумент = ВыборкаПоСправочнику.Ссылка;
			СтатусЭД         = ВыборкаПоСправочнику.СтатусЭД;
		КонецЕсли;
	КонецЕсли;
	СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
	СтруктураВерсииЭД.Вставить("СтатусЭД",          СтатусЭД);
	СтруктураВерсииЭД.Вставить("КомментарийРС",     КомментарийРС);
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца.Ссылка);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

// Только для внутреннего использования
Функция ПолучитьFTPСоединение(ПрофильНастроекЭДО, ЭтоТест = Ложь) Экспорт
	
	Если ЭтоТест Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка установки FTP соединения.
			|%1'");
	Иначе
		ШаблонСообщения = "%1";
	КонецЕсли;
		
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
			Прокси.Пароль = НастройкаПроксиСервера["Пароль"];
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"АдресСервера, Логин, Пароль, Порт, ПассивноеСоединение");
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыПрофиляНастроекЭДО.АдресСервера,
											ПараметрыПрофиляНастроекЭДО.Порт,
											ПараметрыПрофиляНастроекЭДО.Логин,
											ПараметрыПрофиляНастроекЭДО.Пароль,
											Прокси,
											ПараметрыПрофиляНастроекЭДО.ПассивноеСоединение);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
			|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("121");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭтоТест Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат FTPСоединение;
	
КонецФункции

// Только для внутреннего использования
Процедура ПодготовитьПутьFTP(Путь) Экспорт
	Путь = СтрЗаменить(Путь, "\", "/");
	Если ЗначениеЗаполнено(Путь) Тогда
		Если НЕ Лев(Путь, 1) = "/" Тогда
			Путь = "/" + Путь;
		КонецЕсли;
		Если НЕ Прав(Путь, 1) = "/" Тогда
			Путь = Путь + "/";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура используется для проведения тестирования настроек обмена через FTP
//
// Параметры:
//  ПрофильНастроекЭДО - СправочникСсылка.Соглашение - тестируемое соглашение;
//  КаталогВходящихДокументов - Строка - пусть к каталогу обмена входящими документами;
//  КаталогИсходящихДокументов - Строка - пусть к каталогу обмена исходящими документами.
//
Процедура ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов) Экспорт
	
	FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО, Истина);
	
	Если FTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка каталога исходящих документов.
							|%1'");
	
	ТекстОшибки = "";
	Попытка
		ПодготовитьПутьFTP(КаталогИсходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогИсходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогИсходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка записи и чтения файлов в каталоге исходящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка каталога входящих документов.
		|%1'");
	Попытка
		ПодготовитьПутьFTP(КаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогВходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка записи и чтения файлов в каталоге входящих документов.
									|%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СоздатьКаталогиFTP(FTPСоединение, ПолныйПуть, ЭтоТест = Ложь, ТекстОшибки = Неопределено) Экспорт
	
	ПолныйПуть = СтрЗаменить(ПолныйПуть, "\", "/");
	МассивКаталогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйПуть, "/", Истина);
	ТекущийПуть = "/";
	FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
	Для Каждого Элемент ИЗ МассивКаталогов Цикл
		
		мКаталог = Новый Массив;
		
		НайтиФайлыВКаталогеFTP(FTPСоединение, Элемент, Неопределено, Истина, ТекстОшибки, мКаталог);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если мКаталог.Количество() = 1 Тогда 
			Если мКаталог[0].ЭтоФайл() Тогда 
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("122");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			СоздаватьКаталог = Ложь;
		Иначе
			СоздаватьКаталог = Истина;
		КонецЕсли;

		Если СоздаватьКаталог Тогда
			Попытка
				FTPСоединение.СоздатьКаталог(Элемент);
			Исключение
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("123");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецПопытки
		КонецЕсли;
		
		ТекущийПуть = ТекущийПуть + Элемент + "/";
		
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
		Исключение
			ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("124");
			Если НЕ ЭтоТест Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаписатьФайлНаFTP(FTPСоединение,
							Источник,
							ИмяВыходногоФайла,
							ЭтоТест = Ложь,
							РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Записать(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("127");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Аунтификация на пользовательском сайте.

// Только для внутреннего использования
Функция БилетНаСайтПоддержки(Аутентификация) Экспорт
	
	Билет = "";
	Попытка
		ВебСервис = ОбщегоНазначения.WSПрокси(
			"https://login.1c.ru/api/public/ticket?wsdl",
			"http://api.cas.jasig.org/",
			"TicketApiImplService",
			"TicketApiImplPort",
			Аутентификация.Логин,
			Аутентификация.Пароль,
			5,
			Ложь);
		
		Билет = ВебСервис.getTicket(
			Аутентификация.Логин,
			Аутентификация.Пароль,
			"1C-EDO");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Если Найти(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), "IncorrectLoginOrPasswordApiException") > 0 Тогда
			КраткоеПредставлениеОшибки = НСтр("ru = 'Некорректный логин или пароль пользователя.'");
		КонецЕсли;
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключиться к пользовательскому сайту по причине:
			           |%1'"),
			КраткоеПредставлениеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		
		СохранитьПараметрыАутентификацииНаСайте(Неопределено);
	КонецПопытки;
	
	Возврат Билет;
	
КонецФункции

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//   Структура    - текущие значения:
//     * Логин     - Строка - логин пользователя Интернет-поддержки;
//     * Пароль    - Строка - пароль пользователя Интернет-поддержки.
//   Неопределено - если параметры еще не были введены.
//
Функция ПараметрыАутентификацииНаСайте() Экспорт
	
	Результат = Новый Структура("Логин,Пароль");
	Результат.Логин = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "КодПользователя", "");
	Результат.Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АутентификацияНаПользовательскомСайте", "Пароль", "");
	Возврат ?(Результат.Логин <> "", Результат, Неопределено);
	
КонецФункции

// Сохраняет параметры аутентификации пользователя (логин и пароль) на пользовательском сайте 1С.
//
// Параметры:
//     СохраняемыеПараметры - Структура - сохраняемые значения:
//         * Логин  - Строка - логин пользователя Интернет-поддержки;
//         * Пароль - Строка - пароль пользователя Интернет-поддержки.
// 
Процедура СохранитьПараметрыАутентификацииНаСайте(СохраняемыеПараметры) Экспорт
	
	Если СохраняемыеПараметры <> Неопределено Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("АутентификацияНаПользовательскомСайте", "КодПользователя", СохраняемыеПараметры.Логин);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("АутентификацияНаПользовательскомСайте", "Пароль", СохраняемыеПараметры.Пароль);
	Иначе	
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("АутентификацияНаПользовательскомСайте", "КодПользователя", ИмяПользователя());
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("АутентификацияНаПользовательскомСайте", "Пароль", ИмяПользователя());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пакетов электронных документов

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивЭД - Массив ссылок на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭЦП.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("СпособОбменаЭД");
	ТЗ_ПЭД.Колонки.Добавить("АдресРесурсаПолучателя");
	ТЗ_ПЭД.Колонки.Добавить("ТребуетсяШифрованиеНаКлиенте");
	ТЗ_ПЭД.Колонки.Добавить("ВерсияФорматаПакета");
	ТЗ_ПЭД.Колонки.Добавить("ПрограммаБанка");

	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, СоглашениеЭД, НаправлениеЭД, ОтправительЭД, ПолучательЭД, ВладелецФайла, ТипЭлементаВерсииЭД");
		РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.СоглашениеЭД, "СпособОбменаЭД, ПрограммаБанка");
		
		ДокументНеПодписан = РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
		Если (ПризнакПодписи И ДокументНеПодписан)
				ИЛИ НЕ УстановленныеПодписиВалидны(ЭД)
				ИЛИ (РеквизитыНастройкиЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
					И РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыНастройкиЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
			И РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
			СлужебныйЭДБанка = СлужебныйЭДБанка(ЭД);
			Если Не ЗначениеЗаполнено(СлужебныйЭДБанка) Тогда
				ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
				ТекстСообщения = НСтр("ru = 'Невозможно сформировать пакет банка'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения);
				ВидОперации = НСтр("ru = 'формирование пакета ЭД'");
				ТекстОшибки = НСтр("ru = 'Не найдены дополнительные данные для электронного документа'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
													ВидОперации, ТекстОшибки, ТекстСообщения, 1);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Для банков получаем настройки соглашения по владельцу.
		Если РеквизитыНастройкиЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			ПараметрыНастройкиЭДО = ОпределитьНастройкиОбменаЭДПоИсточнику(РеквизитыЭД.ВладелецФайла, , , ЭД);
			
		Иначе
			// Поиск настройки ЭДО для исходящего пакета ЭД.
			Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ПолучательЭД, РеквизитыЭД.ОтправительЭД);
			ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД);
			КонецЕсли;
		КонецЕсли;
			
		Попытка
			Если Не ЗначениеЗаполнено(ПараметрыНастройкиЭДО) Тогда
				ШаблонСообщения = НСтр("ru = 'В информационной базе не найдена настройка ЭДО с реквизитами:
				|идентификатор отправителя: %1;
				|идентификатор получателя:  %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
			// Дополним параметры настройки ЭДО реквизитами 
			ПараметрыНастройкиЭДО.Вставить("ТипЭлементаВерсииЭД", РеквизитыЭД.ТипЭлементаВерсииЭД);
			ПараметрыНастройкиЭДО.Вставить("НаправлениеЭД", РеквизитыЭД.НаправлениеЭД);
			
			ПЭД = НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыНастройкиЭДО);
			НоваяСтрока                     = ПЭД.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.ЭлектронныйДокумент = ЭД;
			НоваяСтрока.ОбъектВладелец      = РеквизитыЭД.ВладелецФайла;
			
			Если ЗначениеЗаполнено(СлужебныйЭДБанка) Тогда
				НоваяСтрока                     = ПЭД.ЭлектронныеДокументы.Добавить();
				НоваяСтрока.ЭлектронныйДокумент = СлужебныйЭДБанка;
				НоваяСтрока.ОбъектВладелец      = РеквизитыЭД.ВладелецФайла;
			КонецЕсли;
			
			ПЭД.Записать();
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирование пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",                    ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурсаПолучателя", ТекСтрока.АдресРесурсаПолучателя);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		Если ТекСтрока.ТребуетсяШифрованиеНаКлиенте = Истина Тогда
			СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте = Истина;
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Продолжить;
		КонецЕсли;
		
		Если (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО)
			ИЛИ (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
				ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP
				И ТекСтрока.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10) Тогда
			
			Если ЭлектронныеДокументыВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(ТекСтрока.ПЭД) Тогда
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				Для Каждого ЭД Из ТекСтрока.ПЭД.ЭлектронныеДокументы Цикл
					ЭДвМассиве = МассивПодготовленныхКОтправкеЭД.Найти(ЭД.ЭлектронныйДокумент);
					Если ЭДвМассиве <> Неопределено Тогда
						МассивПодготовленныхКОтправкеЭД.Удалить(ЭДвМассиве);
					КонецЕсли;
				КонецЦикла;
				ПЭД = ТекСтрока.ПЭД.ПолучитьОбъект();
				ПЭД.СтатусПакета    = Перечисления.СтатусыПакетовЭД.Отменен;
				ПЭД.ПометкаУдаления = Истина;
				ПЭД.Записать();
			КонецЕсли;
		ИначеЕсли ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			Если ТекСтрока.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
				СтруктураПЭД.Вставить("ОтправкаСКлиента");
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				СформироватьЭДПрисоединенныйФайлПакетаБанка(ТекСтрока.ПЭД);
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			КонецЕсли;
		Иначе
			СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		
		ПакетЭД.ПрофильНастроекЭДО      = СтруктураПараметров.ПрофильНастроекЭДО;
		ПакетЭД.НастройкаЭДО            = СтруктураПараметров.НастройкаЭДО;
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		Если СтруктураПараметров.СертификатОрганизацииДляРасшифровки <> Неопределено Тогда
			ПакетЭД.СертификатШифрования = СтруктураПараметров.СертификатОрганизацииДляРасшифровки;
		КонецЕсли;
		
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание нового ПакетаЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД;
	
КонецФункции

// Только для внутреннего использования
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресЗипКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресЗипКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресЗипКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
												Конверт,
												Файл.ИмяБезРасширения,
												СтрЗаменить(Файл.Расширение,".", ""),
												ТекущаяДатаСеанса(),
												ТекущаяДатаСеанса(),
												АдресВоВременномХранилище,
												Неопределено,
												,
												Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Документ %1 не был отправлен. Подробнее см. Журнал регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ШаблонОшибки = НСтр("ru = 'Не корректно заполнен документ %1.
			|Не заполнена табличная часть ""ЭлектронныеДокументы""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'Отправка пакета ЭД и обновление статусов ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		
		ЭД = ПакетЭД.ЭлектронныеДокументы[0];
		Если ТипЗнч(ЭД.ОбъектВладелец)=Тип("ДокументСсылка.ПроизвольныйЭД")
			И (НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен
			ИЛИ НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен) Тогда
			
			Объект = ЭД.ОбъектВладелец.ПолучитьОбъект();
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД.ЭлектронныйДокумент);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий
					И ЭД.ЭлектронныйДокумент.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД.ЭлектронныйДокумент);
				КонецЕсли;
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД.ЭлектронныйДокумент);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
		
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция НемедленнаяОтправкаЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НЕ Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Функция определяет настройки обмена ЭД
// по источнику - документу базы данных или по ЭД
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(
				Источник,
				ВыводитьСообщения = Истина,
				ПараметрыСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено,
				ФлагДействующиеСоглашения = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник, , ЭД.ВидЭД);
		
		Если ЗначениеЗаполнено(ЭД.СоглашениеЭД) Тогда
			ПараметрыЭД.СоглашениеЭД = ЭД.СоглашениеЭД;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
			ПараметрыЭД.Контрагент = ЭД.Контрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			ПараметрыЭД.Организация = ЭД.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			ПараметрыЭД.ВидЭД = ЭД.ВидЭД;
		КонецЕсли;
		
		Если ЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			ПараметрыЭД.Вставить("ВидЭДВладельца", ЭД.ЭлектронныйДокументВладелец.ВидЭД);
		КонецЕсли;
		
		ПараметрыЭД.Вставить("УстановленныеПодписи", ЭД.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток"));
	Иначе
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, ПараметрыСертификатов, ФлагДействующиеСоглашения);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры
//  ИДОтправителя – строка с уникальный идентификатор отправителя,
//  ИДПолучателя - строка с уникальный идентификатор получателя
//
// Возвращаемое значение:
//  Структуру параметров с настройками обмена
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ЭлектроннаяПочтаКонтрагента,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатОрганизацииДляРасшифровки,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатКонтрагентаДляШифрования,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ВерсияФорматаПакета
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",  Выборка.ПрофильНастроекЭД);
		СтруктураВозврата.Вставить("НастройкаЭДО",        Выборка.НастройкаЭДО);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("СертификатОрганизацииДляРасшифровки", Выборка.СертификатОрганизацииДляРасшифровки);
		СтруктураВозврата.Вставить("СертификатКонтрагентаДляШифрования",  Выборка.СертификатКонтрагентаДляШифрования);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		
		АдресОтправителя = Выборка.РесурсВходящихДокументов;
		АдресПолучателя  = Выборка.РесурсИсходящихДокументов;
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			АдресОтправителя = Выборка.ОбщийРесурсВходящихДокументов;
			АдресПолучателя  = Выборка.ЭлектроннаяПочтаКонтрагента;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументов);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументов);
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументовFTP);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументовFTP)
			
		КонецЕсли;
		СтруктураВозврата.Вставить("АдресОтправителя", АдресОтправителя);
		СтруктураВозврата.Вставить("АдресПолучателя",  АдресПолучателя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОбработатьПодтвержденияДокументов(ФайлыПакета, СоответствиеФайлПараметры, ПакетЭДОбъект) Экспорт
	
	МассивВозврата = Новый Массив;
	
	// Попытаемся получить настройки криптографии.
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Попытка
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии .ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			Возврат МассивВозврата;
		КонецПопытки;
	Иначе
		Возврат МассивВозврата;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			СсылкаНаФайл = ФайлыПакета.Получить(ЭлементСоответствие.Ключ);
			Если СсылкаНаФайл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
		
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлементСоответствие.Значение.УникальныйИД);
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД", НаправлениеИскомогоДокумента);
			ЭлектронныйДокумент = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи , ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
			
			СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
			Если СертификатыПодписи.Количество() <> 0 Тогда
				Сертификат = СертификатыПодписи[0];
				ДатаУстановкиПодписи = ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
				ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
				ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
				ПредставлениеПользователя = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
				ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
												ЭлектронныйДокумент,
												ДвоичныеДанныеПодписи,
												ОтпечатокBase64,
												ДатаУстановкиПодписи,
												"",
												ЭлементСоответствие.Ключ,
												ПредставлениеПользователя,
												Сертификат.Выгрузить());
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			
			Попытка
				НачатьТранзакцию();
				СтруктураПараметров = Новый Структура;
				ДопустимыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭлектронныйДокумент);
				СтруктураПараметров.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
					НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ЭлектронныйДокумент.ВладелецФайла;
			МассивВозврата.Добавить(ЭлектронныйДокумент.ВладелецФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Получает текстовое представление электронного документа.
//
// Параметры:
//  СсылкаНаЭД - Ссылка на электронный документ, текстовое представление которого необходимо получить.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Версия = СсылкаНаЭД.НомерВерсииЭД;
	Если СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И ЗначениеЗаполнено(СсылкаНаЭД.ДатаФормированияЭДОтправителем) Тогда
		Версия = СсылкаНаЭД.ДатаФормированияЭДОтправителем;
	ИначеЕсли СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И ЗначениеЗаполнено(СсылкаНаЭД.ДатаСоздания) Тогда
		Версия = СсылкаНаЭД.ДатаСоздания;
	КонецЕсли;
	ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
	ТекстДаты = ?(ЗначениеЗаполнено(СсылкаНаЭД.ДатаДокументаОтправителя),
		" от " + Формат(СсылкаНаЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
	
	Если СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		Представление = "" + СсылкаНаЭД.ВидЭД + ТекстДаты + ТекстВерсии;
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Представление = "" + СсылкаНаЭД.ТипЭлементаВерсииЭД + ТекстДаты;
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		  ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Представление = "" + СсылкаНаЭД.ВидЭД + " № " + СсылкаНаЭД.НомерДокументаОтправителя + ТекстДаты;
		
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		Представление = "" + СсылкаНаЭД.ВидЭД+" от " + Формат(СсылкаНаЭД.ДатаСоздания,"ДЛФ=D");
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Представление = "" + СсылкаНаЭД;
	Иначе
		Представление = "" + СсылкаНаЭД.ВидЭД + " № " + СсылкаНаЭД.НомерДокументаОтправителя + ТекстДаты + ТекстВерсии;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Определяет состояние версии электронного документа на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаЭД, ВерсияФорматаПакетаЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если СсылкаНаЭД = Неопределено Или СсылкаНаЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭД) И ЗначениеЗаполнено(СсылкаНаЭД.СоглашениеЭД) Тогда
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ВладелецФайла, ВидЭД");
		
		ТекущийСтатус = ПараметрыЭД.СтатусЭД;
		
		НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
		
		Если ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненБанком
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ЭЦПНеВерна
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаРеквизитов
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтказанАБС Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Картотека2
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.Приостановлен Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсполнение;
			
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
			ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
			
			Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
				ИЛИ НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
				
				Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				Иначе
					ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка;
				КонецЕсли;
			Иначе
				
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				
			КонецЕсли;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Аннулирован;
		ИначеЕсли НастройкиОбмена <> Неопределено Тогда
			
			Если ВерсияФорматаПакетаЭД = Неопределено Тогда
				ВерсияФорматаПакетаЭД = ВерсияПакетаЭД(СсылкаНаЭД);
			КонецЕсли;
			
			Если НЕ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
				И (ВерсияФорматаПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30
					ИЛИ Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(НастройкиОбмена.СпособОбмена)) Тогда
					
				// Если у документа владельца ЭД есть неотправленное подтверждение о получении
				// то меняем состояние версии ЭД.
				
				Если (ТекущийСтатус = Перечисления.СтатусыЭД.Отправлен
						ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ПереданОператору
						ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение)
					ИЛИ (ТекущийСтатус = Перечисления.СтатусыЭД.Подписан
						И ЭтоОтветныйТитул(СсылкаНаЭД)) Тогда
					
					Если ЕстьНеотправленноеПодтверждение(ПараметрыЭД.ВладелецФайла, ВозвращаемоеЗначение) Тогда
						Возврат ВозвращаемоеЗначение;
					КонецЕсли;
				КонецЕсли;
				
				Если (ТекущийСтатус = Перечисления.СтатусыЭД.Получен
					И ЭтоОтветныйТитул(СсылкаНаЭД)) 
					Или ТекущийСтатус = Перечисления.СтатусыЭД.Отправлен
					Или ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
					Если ЕстьНепринятоеПодтверждение(ПараметрыЭД.ВладелецФайла, ВозвращаемоеЗначение) Тогда
						Возврат ВозвращаемоеЗначение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
			Если МассивСтатусов.Количество() > 0 Тогда
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				Если ИндексТекущегоСтатуса = Неопределено Тогда
				ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
					Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПлатежИсполнен;
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
					КонецЕсли;
				Иначе
					СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
					Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
						И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(НастройкиОбмена.СпособОбмена) Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
							
						Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
								И НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяПодтверждение;
						Иначе
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
						КонецЕсли;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Исполнен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.Принят Тогда
							
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсполнение;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет, все ли установленные на ЭД подписи являются валидными
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция УстановленныеПодписиВалидны(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &Ссылка
	|	И НЕ ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна";
	Запрос.УстановитьПараметр("Ссылка", ЭД.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
		|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива
// Проверяется максимальная длина полного имени файла в 255 символов
// 
// Параметры:
//  ZipЧтение - ЧтениеZIPФайла - открытий zip архив
//  ПапкаРаспаковки - папка, в которую будут извлечены данные
//  ИмяСоздаваемогоФайла - имя файла, который не может быть извлечен
//
// Возвращаемое значение:
//  Булево 
//
Функция ВозможноИзвлечьФайлы(ZipЧтение, ПапкаРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(ПапкаРаспаковки);
	
	Для Каждого Элемент Из ZipЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Только для внутреннего использования
Функция ОтправкаСформированныхЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	Результат = 0;
	// Создадим и заполним документы ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты,
																				СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет получение новых электронных документов
// на основе заведенных соглашений об обмене.
//
Функция ПолучитьНовыеЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено, ПовторноеПолучение = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("ПараметрыРаспаковки, МассивВозврата, ВызватьОповещение",
		Новый Массив, Неопределено, Ложь);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить();
	
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);
	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов;
		НаборСообщений = Новый Массив();
		Попытка
			НаборСообщений = ЭлектроннаяПочта.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru = 'Ошибка при получении сообщения с сервера электронной почты.
			|%1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
			ТекстСообщения = НСтр("ru = 'Ошибка при получении новых эл.документов.
			|(подробности см. в Журнале регистрации).'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Получение новых эл.документов'"), ТекстОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, Лев(ЭлементВложенийПисьма.Ключ,
					СтрДлина(ЭлементВложенийПисьма.Ключ) -4), Прав(ЭлементВложенийПисьма.Ключ, 3), ТекущаяДатаСеанса(),
					ТекущаяДатаСеанса(), АдресВХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				
				МассивВозврата.Добавить(ПрисоединенныйФайл);
			КонецЦикла;
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, УчетнаяЗаписьЭП, Сообщение.Отправитель,
												Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			КонецЕсли;
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ПакетЭД.Ссылка);
			Если СтруктураПараметров.Зашифрован Тогда
				СтруктураШифрования = Новый Структура;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.СертификатОрганизацииДляРасшифровки) Тогда
					СтруктураШифрования.Вставить("Сертификат", СтруктураПараметров.СертификатОрганизацииДляРасшифровки);
					СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
						СтруктураПараметров.СертификатОрганизацииДляРасшифровки));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					Продолжить;
				КонецЕсли;
			
				СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			КонецЕсли;
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки",
				ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка));
				
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовКаталог.ОбщийРесурсВходящихДокументов, СтрокаРесурсовКаталог.КаталогВходящихДокументов);
			
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			Если Не НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",       Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",      Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка, Лев(ЭлементФайл.Имя,
				СтрДлина(ЭлементФайл.Имя) -4), Прав(ЭлементФайл.Имя, 3), ТекущаяДатаСеанса(), ТекущаяДатаСеанса(),
				АдресВХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя,
											  Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			КонецЕсли;
			
			УдалитьФайлы(ЭлементФайл.ПолноеИмя);
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ПакетЭД.Ссылка);
			Если СтруктураПараметров.Зашифрован Тогда
				СтруктураШифрования = Новый Структура;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.СертификатОрганизацииДляРасшифровки) Тогда
					СтруктураШифрования.Вставить("Сертификат", СтруктураПараметров.СертификатОрганизацииДляРасшифровки);
					СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
						СтруктураПараметров.СертификатОрганизацииДляРасшифровки));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					Продолжить;
				КонецЕсли;
			
				СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			КонецЕсли;
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки",
				ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка));
				
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;
	
	ОтборFTP = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезFTP);
	МассивРесурсовFTP = РесурсыДляПроверки.НайтиСтроки(ОтборFTP);
	Для Каждого СтрокаРесурсовFTP Из МассивРесурсовFTP Цикл
		ПрофильНастроекЭДО = СтрокаРесурсовFTP.ПрофильНастроекЭДО;
		FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
		Если FTPСоединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КаталогВхДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовFTP.ОбщийРесурсВходящихДокументов, СтрокаРесурсовFTP.КаталогВходящихДокументовFTP);
			
		МассивИменФайлов = Новый Массив;
		МассивФайловFTP = Новый Массив;
		ТекстОшибки = "";
		ПодготовитьПутьFTP(КаталогВхДокументов);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(КаталогВхДокументов);
		Исключение
			Продолжить;
		КонецПопытки;
		НайтиФайлыВКаталогеFTP(FTPСоединение, КаталогВхДокументов, "*", Ложь, ТекстОшибки, МассивФайловFTP);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлFTP Из МассивФайловFTP Цикл
			Если ФайлFTP.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ВремКаталог = РабочийКаталог("ext", Новый УникальныйИдентификатор);
			ПолноеИмяФайла = ВремКаталог + ФайлFTP.Имя;
			ПолучитьФайлСFTP(FTPСоединение, ФайлFTP.ПолноеИмя, ПолноеИмяФайла, , ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			ЭлементФайл = Новый Файл(ПолноеИмяФайла);
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			УдалитьФайлы(ВремКаталог);

			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД.Ссылка,
																  Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4),
																  Прав(ЭлементФайл.Имя, 3),
																  ТекущаяДатаСеанса(),
																  ТекущаяДатаСеанса(),
																  АдресВХранилище,
																  ,
																  ,
																  Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			МассивВозврата.Добавить(ПрисоединенныйФайл);
			
			Если СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД.Ссылка, СтрокаРесурсовFTP, СтруктураПараметров.АдресОтправителя,
											   Перечисления.СпособыОбменаЭД.ЧерезFTP);
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				
			КонецЕсли;
			
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ПакетЭД.Ссылка);
			Если СтруктураПараметров.Зашифрован Тогда
				СтруктураШифрования = Новый Структура;
				
				Если ЗначениеЗаполнено(СтруктураПараметров.СертификатОрганизацииДляРасшифровки) Тогда
					СтруктураШифрования.Вставить("Сертификат", СтруктураПараметров.СертификатОрганизацииДляРасшифровки);
					СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
						СтруктураПараметров.СертификатОрганизацииДляРасшифровки));
				Иначе
					ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					Продолжить;
				КонецЕсли;
			
				СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
			КонецЕсли;
			СтруктураРаспаковки.Вставить("ДанныеРаспаковки",
				ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД.Ссылка));
				
			СтруктураВозврата.ПараметрыРаспаковки.Добавить(СтруктураРаспаковки);
		КонецЦикла;
	КонецЦикла;

	СтруктураВозврата.МассивВозврата = МассивВозврата;
	
	ОтборСпецОператоров = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	МассивРесурсовСпецОператоров = РесурсыДляПроверки.НайтиСтроки(ОтборСпецОператоров);

	Если МассивРесурсовСпецОператоров.Количество() > 0 Тогда
		ЭлектронныеДокументыВнутренний.ПолучитьНовыеЭДОператораЭДО(
												СтруктураВозврата,
												СоотвСоглашенийИСтруктурСертификатов,
												,
												ПовторноеПолучение);
	КонецЕсли;
	
	ОтборСпецОператоров = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	МассивРесурсовСпецОператоров = РесурсыДляПроверки.НайтиСтроки(ОтборСпецОператоров);

	Если МассивРесурсовСпецОператоров.Количество() > 0 Тогда
		ЭлектронныеДокументыВнутренний.ПолучитьНовыеЭДОператораЭДО(
												СтруктураВозврата,
												СоотвСоглашенийИСтруктурСертификатов,
												,
												ПовторноеПолучение);
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//  настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//  Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ПроизвольныйЭД")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПроизвольныйЭД") Тогда
		
		ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Источник.Направление;
		ПараметрыЭД.Контрагент    = Источник.Контрагент;
		ПараметрыЭД.Организация   = Источник.Организация;
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		Если Источник.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.ЗапросВыписки;
		Иначе
			ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.КаталогТоваров;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД  = Источник.Ссылка;
		Если Не Источник.ЭтоИнтеркампани Тогда
			
			ПараметрыЭД.Контрагент  = Источник.Контрагент;
			ПараметрыЭД.Организация = Источник.Организация;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.Организации")
		Или ТипИсточника = Тип("СправочникОбъект.Организации") Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	Иначе
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		ЭлектронныеДокументыПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы,
//
// Параметры:
//  ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Если ПоверятьОбязательныеРеквизиты Тогда
		ТекстОшибки = "";
		СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД, СоглашениеЭД");
		Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			СтруктураОбязательныхПолей.Удалить("Контрагент");
		КонецЕсли;
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Значение = Неопределено;
			Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Текст = НСтр("ru = 'Значение параметра <%1> не заполнено!'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Не передан обязательный параметр <%1>!'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа!
			|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
	
	ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
	
	ПринудительнаяСменаСостоянияВерсии = Ложь;
	
	Если СтруктураЭД.Свойство("Автор") Тогда
		ФайлОбъект.Автор = СтруктураЭД.Автор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВерсияРегламентаЭДО") Тогда
		ФайлОбъект.ВерсияРегламентаЭДО = СтруктураЭД.ВерсияРегламентаЭДО;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВидЭД") Тогда
		ФайлОбъект.ВидЭД = СтруктураЭД.ВидЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаДокументаОтправителя") Тогда
		ФайлОбъект.ДатаДокументаОтправителя = СтруктураЭД.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
		ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
		ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
		ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
		ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
		ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
		Если ЗначениеЗаполнено(ФайлОбъект.ДополнительныеРеквизиты) Тогда
			ДополнительныеРеквизиты = ФайлОбъект.ДополнительныеРеквизиты.Получить();
			Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
				ДополнительныеРеквизиты = Новый Структура;
			КонецЕсли;
		Иначе
			ДополнительныеРеквизиты = СтруктураЭД.ДополнительныеРеквизиты;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из СтруктураЭД.ДополнительныеРеквизиты Цикл
			ДополнительныеРеквизиты.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ФайлОбъект.ДополнительныеРеквизиты = Новый ХранилищеЗначения(СтруктураЭД.ДополнительныеРеквизиты);
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Изменил") Тогда
		ФайлОбъект.Изменил = СтруктураЭД.Изменил;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Контрагент") Тогда
		ФайлОбъект.Контрагент = СтруктураЭД.Контрагент;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Наименование") Тогда
		ФайлОбъект.Наименование = СтруктураЭД.Наименование;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаименованиеФайла") Тогда
		ФайлОбъект.НаименованиеФайла = СтруктураЭД.НаименованиеФайла;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
		ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерВерсииЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = СтруктураЭД.НомерВерсииЭД;
	ИначеЕсли СтруктураЭД.Свойство("ВладелецЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = НомерВерсииЭДПоВладельцу(СтруктураЭД.ВладелецЭД);
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерДокументаОтправителя") Тогда
		ФайлОбъект.НомерДокументаОтправителя = СтруктураЭД.НомерДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерЭД") Тогда 
		ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Описание") Тогда
		ФайлОбъект.Описание = СокрЛП(СтруктураЭД.Описание);
	Иначе
		ФайлОбъект.Описание = "";
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Организация") Тогда
		ФайлОбъект.Организация = СтруктураЭД.Организация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Ответственный") Тогда
		ФайлОбъект.Ответственный = СтруктураЭД.Ответственный;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.Ответственный) Тогда
		ФайлОбъект.Ответственный = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
		ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
		ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
		ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
		ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ПричинаОтклонения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПрофильНастроекЭДО") Тогда
		ФайлОбъект.ПрофильНастроекЭДО = СтруктураЭД.ПрофильНастроекЭДО;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Расширение") Тогда
		ФайлОбъект.Расширение = СтруктураЭД.Расширение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
		ФайлОбъект.СоглашениеЭД = СтруктураЭД.СоглашениеЭД;
		ФайлОбъект.ДополнительныеСвойства.Вставить("СоглашениеЭД", СтруктураЭД.СоглашениеЭД);
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СтатусЭД") Тогда
		Если (СтруктураЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
				ИЛИ СтруктураЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании)
			И ФайлОбъект.СтатусЭД <> СтруктураЭД.СтатусЭД Тогда
			ПринудительнаяСменаСостоянияВерсии = Истина;
		КонецЕсли;
		ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СуммаДокумента") И ЗначениеЗаполнено(СтруктураЭД.СуммаДокумента) Тогда
		ФайлОбъект.СуммаДокумента = СтруктураЭД.СуммаДокумента;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ТекстУточнения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
		ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УдалитьЭП") Тогда
		ФайлОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИД") Тогда
		ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
		ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
		ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
		СтруктураЭД.Вставить(
				"СуммаДокумента",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.ЭлектронныйДокументВладелец, "СуммаДокумента"));
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаВыпискиБанка") Тогда
		ФайлОбъект.ДатаВыпискиБанка = СтруктураЭД.ДатаВыпискиБанка;
	КонецЕсли;
	
	ВерсияФорматаПакета = Неопределено;
	СтруктураЭД.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
	ФайлОбъект.ДополнительныеСвойства.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ОбновитьВерсиюЭД", Истина);

	ФайлОбъект.Записать();
	
	Если ФайлОбъект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ВладелецЭД = ФайлОбъект.ВладелецФайла.ПолучитьОбъект();
		ВладелецЭД.СтатусДокумента = ФайлОбъект.СтатусЭД;
		ВладелецЭД.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает структуру данных файла, полученную из одноименной функции общего модуля ПрисоединенныеФайлы.
// В полученной структуре данных меняет значение элемента с ключом Наименование на полное наименование,
// хранящееся в реквизите элемента справочника НаименованиеФайла, так же заново формирует значениеэлемента ИмяФайла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка, соответствует значению реквизита элемента справочника НаименованиеФайла.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭЦП                        - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВидЭД, УникальныйИД, НаименованиеФайла");
		Если ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФайла) Тогда
			ДанныеФайла.Наименование = СокрЛП(СтруктураПараметров.НаименованиеФайла);
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			НаименованиеСкорректированно = Истина;
		ИначеЕсли СтруктураПараметров.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			СтрокаУИД = СтруктураПараметров.УникальныйИД;
			Наименование = ДанныеФайла.Наименование;
			ПозицияУИД = Найти(Наименование, "_" + Лев(СтрокаУИД, 35));
			Если ПозицияУИД > 0 Тогда
				ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
				ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Только для внутреннего использования
Процедура СохранитьПриглашения(ТаблицаПриглашений) Экспорт
	
	Если ТаблицаПриглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	МАКСИМУМ(Приглашения.Изменен) КАК Изменен
	|ПОМЕСТИТЬ ПоследниеИзмененияЗаписей
	|ИЗ
	|	Приглашения КАК Приглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки,
	|	Приглашения.Состояние КАК СтатусУчастника
	|ИЗ
	|	ПоследниеИзмененияЗаписей КАК ПоследниеИзмененияЗаписей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
	|		ПО ПоследниеИзмененияЗаписей.ПрофильНастроекЭДО = Приглашения.ПрофильНастроекЭДО
	|			И ПоследниеИзмененияЗаписей.ИНН = Приглашения.ИНН
	|			И ПоследниеИзмененияЗаписей.Изменен = Приглашения.Изменен
	|			И ПоследниеИзмененияЗаписей.ВнешнийИД = Приглашения.ВнешнийИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Изменен";
	Запрос.УстановитьПараметр("Приглашения", ТаблицаПриглашений);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТЗПоследнихИзменений = Результат.Выгрузить();
		
		// В случае ошибки, содержащейся в запросе на присоединение контрагента,
		// Такском возвращает запись с указанием ошибки, но без КПП. В результате
		// запрос может вернуть 2 записи по одному контрагенту (ИНН и ВнешнийИД совпадают,
		// а КПП в одной записи пустой, а в другой заполнен). Чтобы не вводить в заблуждение
		// пользователей, одну запись (более раннюю) надо удалить.
		Для Сч = -ТЗПоследнихИзменений.Количество() + 1 По 0 Цикл
			СтрокаТЗ = ТЗПоследнихИзменений[-Сч];
			Отбор = Новый Структура("ИНН, ВнешнийИД", СтрокаТЗ.ИНН, СтрокаТЗ.ВнешнийИД);
			МассивСтрок = ТЗПоследнихИзменений.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() > 1 Тогда
				ПервыйЭлемент = МассивСтрок[0];
				ВторойЭлемент = МассивСтрок[1];
				Если НЕ ЗначениеЗаполнено(ПервыйЭлемент.КПП) ИЛИ НЕ ЗначениеЗаполнено(ВторойЭлемент.КПП) Тогда
					Если ПервыйЭлемент.Изменен > ВторойЭлемент.Изменен Тогда
						ТЗПоследнихИзменений.Удалить(ВторойЭлемент);
					Иначе
						ТЗПоследнихИзменений.Удалить(ПервыйЭлемент);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СдвигатьДату = Истина;
		ДатаИзмененияСтатуса = Неопределено;
		Для Каждого НовыеПриглашения Из ТЗПоследнихИзменений Цикл
			Контрагент = Неопределено;
			Ошибка = (НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Ошибка);
			Если ЗначениеЗаполнено(НовыеПриглашения.ИНН) Тогда
				ИмяРеквизитаИННКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
				ИмяРеквизитаКППКонтрагента = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
				
				Запрос = Новый Запрос;
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НастройкиЭДО.Контрагент
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
				|ГДЕ
				|	НЕ НастройкиЭДО.ПометкаУдаления
				|	И НастройкиЭДО.Контрагент." + ИмяРеквизитаИННКонтрагента + " = &ИНН";
				Запрос.УстановитьПараметр("ИНН", НовыеПриглашения.ИНН);
				Если ЗначениеЗаполнено(НовыеПриглашения.КПП) И ИмяРеквизитаКППКонтрагента <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + " И
					|	НастройкиЭДО.Контрагент." + ИмяРеквизитаКППКонтрагента + " = &КПП";
					Запрос.УстановитьПараметр("КПП", НовыеПриглашения.КПП);
				КонецЕсли;
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Контрагент = Выборка.Контрагент;
				Иначе
					Контрагент = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН,
						НовыеПриглашения.КПП);
				КонецЕсли;
			КонецЕсли;
			
			Если Контрагент = Неопределено Тогда
				СдвигатьДату = Ложь;
				Если Не Ошибка Тогда
					Текст = НСтр("ru = 'Обмен по профилю настроек ЭДО %1.
					|В базе не найден контрагент:
					|Наименование: %2
					|ИНН: %3
					|КПП: %4
					|Статус: %5.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП, НовыеПриглашения.СтатусУчастника);
				Иначе
					ОписаниеОшибки = ?(ЗначениеЗаполнено(НовыеПриглашения.ОписаниеОшибки),
						НовыеПриглашения.ОписаниеОшибки, НСтр("ru = 'Ошибка'"));
					Наименование = ?(ЗначениеЗаполнено(Контрагент), Контрагент.Наименование, "");
					Текст = НСтр("ru = 'Обмен по профилю настроек ЭДО %1.
					|%2 в приглашении для контрагента:
					|Наименование: %3
					|Адрес ЭП: %4
					|ИНН: %5
					|КПП: %6
					|Статус: %7.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						ОписаниеОшибки, Наименование, НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП,
						НовыеПриглашения.СтатусУчастника);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
			|ГДЕ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
			|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
			|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	НастройкаЭДОИсходящиеДокументы.Ссылка,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения";
			
			Запрос.УстановитьПараметр("Контрагент",  Контрагент);
			Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НовыеПриглашения.Идентификатор);
			Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
			
			Если Запрос.Выполнить().Пустой() Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
			|ГДЕ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
			|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента = """"
			|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	НастройкаЭДОИсходящиеДокументы.Ссылка,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения";
				
				Запрос.УстановитьПараметр("Контрагент",  Контрагент);
				Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
				
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Если Выборка.СтатусПодключения = НовыеПриглашения.СтатусУчастника Тогда
					Продолжить;
				КонецЕсли;
				
				НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
				
				Если Не Выборка.РасширенныйРежимНастройки
					И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
					
					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
					
					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
						"ИдентификаторОрганизации, СпособОбменаЭД");
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭЦП          = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
					
					Отбор = Новый Структура;
					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.Формировать              = Истина;
						Строка.ИспользоватьЭЦП          = Истина;
						Строка.ПрофильНастроекЭДО       = НовыеПриглашения.ПрофильНастроекЭДО;
						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				КонецЕсли;
			Иначе
				НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				// Пишем новые настройки ЭДО по входящим приглашениям всегда, даже если они не уникальны.
				НастройкаЭДО.ОбменДанными.Загрузка = Истина;
				
				НастройкаЭДО.Контрагент = Контрагент;
				НастройкаЭДО.Наименование = Строка(Контрагент);
				
				НастройкаЭДО.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
					"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
				
				НастройкаЭДО.Организация                 = ПараметрыПрофиляНастроек.Организация;
				НастройкаЭДО.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
				НастройкаЭДО.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
				
				// Загружаем ТЧ из профиля настроек ЭДО.
				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");

				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.ПрофильНастроекЭДО, "ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД, "СпособОбменаЭД");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.Идентификатор, "ИдентификаторКонтрагента");
				
				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
				
				Для Каждого ЗначениеПеречисления Из Перечисления.ФорматыФайловОбменаЭД Цикл
					Если ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат Тогда
						Продолжить;
					КонецЕсли;
					МассивСтрок = НастройкаЭДО.ФорматыФайловОбмена.НайтиСтроки(Новый Структура("ФорматФайла", ЗначениеПеречисления));
					Если МассивСтрок.Количество() = 0 Тогда
						НоваяСтрока = НастройкаЭДО.ФорматыФайловОбмена.Добавить();
						НоваяСтрока.ФорматФайла  = ЗначениеПеречисления;
						// Значение по умолчанию для новых Настроек ЭДО
						Если ЗначениеПеречисления = Перечисления.ФорматыФайловОбменаЭД.XML И НастройкаЭДО.Ссылка.Пустая() Тогда
							НоваяСтрока.Использовать = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			НастройкаЭДО.ИдентификаторКонтрагента    = НовыеПриглашения.Идентификатор;
			НастройкаЭДО.СтатусПодключения           = НовыеПриглашения.СтатусУчастника;
			Если ЗначениеЗаполнено(НовыеПриглашения.ТекстПриглашения) Тогда
				НастройкаЭДО.ТекстПриглашения        = НовыеПриглашения.ТекстПриглашения;
			КонецЕсли;
			
			СостояниеСоглашения                      = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
				
				// Проверка на существование уже присоедиенной настройки по данному контрагенту.
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
				|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка";
				
				Запрос.УстановитьПараметр("Контрагент",  Контрагент);
				Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НастройкаЭДО.ОбменДанными.Загрузка = Истина;
					НастройкаЭДО.СтатусПодключения     = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие;
					НастройкаЭДО.Комментарий           = НСтр("ru = '##Автоматически снят статус ""присоединен"". Уже существует настройка ЭДО по выбранному контрагенту.'");
				КонецЕсли;
				
			ИначеЕсли НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
			
			ТекстОписанияОшибки = "";
			Если Ошибка Тогда
				ШаблонОписанияОшибки = НСтр("ru = '%1. Повторите отправку.'");
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
					НовыеПриглашения.ОписаниеОшибки);
			КонецЕсли;
			НастройкаЭДО.ОписаниеОшибки = ТекстОписанияОшибки;
			НастройкаЭДО.Записать();
			
			Если СдвигатьДату Тогда
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				Запись.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				Запись.Прочитать();
				Запись.ДатаПоследнегоПолученияПриглашений = НовыеПриглашения.Изменен;
				Запись.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись событий в журнал регистрации. Обработка ошибок

// Данная процедура используется для стандартизации всех записей событий подсистемы ЭлектронноеВзаиможействие
// в журнал регистрации. В результате в журнал добавляется группировка записей с иерархией:
//  Электронное взаимодействие
//  |_ Ошибка
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//  |_ Информация
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//
// Параметры:
//   ОписаниеСобытия - Строка - описание содержания события, которое требуется записать в журнал регистрации.
//   КодСобытия - Число - код события, используется для стандартизации иерархии событий.
//               Может принимать значения: 0 - Общая подсистема, 1 - Обмен с банками, 2 - Обмен с контрагентами.
//                                         3 - Обмен с сайтами, 4 - Регламентные задания
//   УровеньВажности - УровеньЖурналаРегистрации - один из доступных уровней журнала регистрации (Ошибка, Информация, ...).
//   ОбъектМетаданных - ОбъектМетаданных - объект метаданных, к которому относится событие.
//   ДанныеСсылка - Произвольный - данные, с которыми связано событие. Рекомендуется указывать ссылки на объекты данных
//                  (элементы справочников, документы, к которым относится событие).
//   РежимТранзакции - РежимТранзакцииЗаписиЖурналаРегистрации - указывает отношение записи к текущей транзакции.
//
Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия,
														КодСобытия = 0,
														УровеньВажности = Неопределено,
														ОбъектМетаданных = Неопределено,
														ДанныеСсылка = Неопределено,
														РежимТранзакции = Неопределено) Экспорт
	
	Уровень = "Общая подсистема";
	Если КодСобытия = 1 Тогда
		Уровень = "Обмен с банками";
	ИначеЕсли КодСобытия = 2 Тогда
		Уровень = "Обмен с контрагентами";
	ИначеЕсли КодСобытия = 3 Тогда
		Уровень = "Обмен с сайтами";
	ИначеЕсли КодСобытия = 4 Тогда
		Уровень = "Регламентные задания";
	КонецЕсли;
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	Шаблон = НСтр("ru = 'Электронное взаимодействие.%1'");
	ИмяСобытия = СтрЗаменить(Шаблон, "%1", Уровень);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ПолучитьСтруктуруФайла(Строка) Экспорт
	
	ИмяФайла = КорректноеИмяФайла(Строка, Истина);
	Файл = Новый Файл(ИмяФайла);
	
	Возврат Новый Структура("ИмяБезРасширения, Расширение", Файл.ИмяБезРасширения, СтрЗаменить(Файл.Расширение, ".",""));
	
КонецФункции

// Только для внутреннего использования
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

// Только для внутреннего использования
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ЭлектронныеДокументыПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сообщения пользователю

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник) Экспорт
	
	Если НЕ ЭлектронныеДокументыПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = Нстр("ru = 'Обработка %1.
								 |Операция не выполнена!
								 |Необходимо создать ""Настройку ЭДО"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
	
	ЭтоПлатежноеПоручение = Ложь;
	Если ПараметрыЭД.Свойство("ВидЭД") И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ЭтоПлатежноеПоручение = Истина;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Если ЭтоПлатежноеПоручение И (ТекПараметр.Ключ = "ДоговорКонтрагента"
										ИЛИ ТекПараметр.Ключ = "НаправлениеЭД"
										ИЛИ ТекПараметр.Ключ = "НаправлениеЭД"
										ИЛИ ТекПараметр.Ключ = "ВидЭД") Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ДоговорКонтрагента") Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("НаправлениеЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 6;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = "Способ обмена";
					СтрокаПараметров.Значение = "через оператора ЭДО";
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				Если ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Банк";
				КонецЕсли;
			ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Только для внутреннего использования
Процедура ОтправитьПакетЧерезРесурсБанка(Настройки, Данные, Результат, ТекстОшибки) Экспорт

	Соединение = ПолучитьСоединение(Настройки);
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", "1C:Enterprise/8");
	Заголовки.Вставить("Content-Type", "application/xml");
	Если Настройки.Свойство("Хэш") Тогда
		Заголовки.Вставить("Authorization", "Basic " + Настройки.Хэш);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(Настройки.Ресурс, Заголовки);
	HTTPЗапрос.УстановитьИмяФайлаТела(Данные);
	
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаРезультата);
	HTTPЗапрос = Неопределено;
	УдалитьФайлы(Данные);
	ФайлРезультата = Новый ТекстовыйДокумент;
	ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
	УдалитьФайлы(ИмяФайлаРезультата);
	Результат = ФайлРезультата.ПолучитьТекст();
	
	ПакетОтправлен = Истина;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ПакетОтправлен = Ложь;
		Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)%2'");
		Если Ответ.КодСостояния = 401 Тогда
			Расшифровка = НСтр("ru = ': Доступ разрешен только для пользователей, прошедших аутентификацию.
				|Проверьте правильность указания логина и пароля.'");
		ИначеЕсли Ответ.КодСостояния = 500 Тогда
			Расшифровка = НСтр("ru = ': Внутренняя ошибка сервера'");
		Иначе
			Расшифровка = "";
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния, Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьСоединение(Настройки) Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	ОпределитьПараметрыСайта(Настройки.Адрес, ЗащищенноеСоединение, Адрес, Протокол);
	
	Прокси = СформироватьПрокси(Протокол);
	Соединение = Новый HTTPСоединение(Адрес, , , ,Прокси, ЗащищенноеСоединение);
	
	Возврат Соединение;

КонецФункции

// Только для внутреннего использования
Функция ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД) Экспорт
	
	СодержимоеФайла = Новый Соответствие;
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ОтветБанка);
		
	URI = "urn:x-obml:1.0";
	Попытка
		Message = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "CMSDETACHED"));
		СодержимоеФайла.Вставить("Данные", Message.data.__content);
		Подписи = Новый Массив;
		Для Каждого Подпись ИЗ Message.signature Цикл
			Подписи.Добавить(Подпись);
		КонецЦикла;
		СодержимоеФайла.Вставить("Подписи", Подписи);
	Исключение
		ВремФайл = ПолучитьИмяВременногоФайла();
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ОтветБанка);
		ТекстовыйДокумент.Записать(ВремФайл);
		ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
		СодержимоеФайла.Вставить("Данные", ДвоичныеДанные);
		УдалитьФайлы(ВремФайл);
	КонецПопытки;
		
	Возврат СодержимоеФайла;

КонецФункции

// Только для внутреннего использования
Процедура ОбработатьОтветБанка(ДанныеОтвета, ЭД, НовыйЭД = Неопределено, ЕстьОшибка = Неопределено) Экспорт
	
	ЕстьОшибка = Ложь;
	ФайлДанных = ПолучитьИмяВременногоФайла();
	Сообщение = ДанныеОтвета.Получить("Данные");
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, СоглашениеЭД, ВидЭД");
	ВидЭД = РеквизитыЭД.ВидЭД;
	Сообщение.Записать(ФайлДанных);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлДанных);
	Если ЧтениеXML.Прочитать() И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И (ЧтениеXML.ЛокальноеИмя = "success" ИЛИ ЧтениеXML.ЛокальноеИмя = "error") Тогда
		ЧтениеXML.ОткрытьФайл(ФайлДанных);
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "success" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("УникальныйИДВнешний", ЧтениеXML.Значение);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
				ДополнительныеРеквизиты = Новый Структура("ДатаПоступленияВБанк", ТекущаяДатаСеанса());
				СтруктураПараметров.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
				ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
				Прервать;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "error" Тогда
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				КодОшибки = ЧтениеXML.Значение;
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ЧтениеXML.Прочитать();
				ОписаниеОшибки = ЧтениеXML.Значение;
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке(КодОшибки, ОписаниеОшибки);
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
				ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
				Если ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				ЕстьОшибка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		АдресФайла = ПоместитьВоВременноеХранилище(Сообщение);
		НаименованиеЗапроса = ЭД.Наименование;
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								РеквизитыЭД.СоглашениеЭД,
								СтрЗаменить(НаименованиеЗапроса, "Запрос выписки", "Выписка банка за период "),
								"xml",
								ТекущаяДатаСеанса(),
								ТекущаяДатаСеанса(),
								АдресФайла,
								,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Подписи = ДанныеОтвета.Получить("Подписи");
			Попытка
				НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
				ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
				ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
				ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
				МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
				МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
				МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
				МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
				МенеджерКриптографииПодключен = Истина;
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Операция = НСтр("ru = 'Инициализация криптосредства на сервере'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																							ТекстОшибки,
																							ТекстСообщения,
																							1);
				МенеджерКриптографииПодключен = Ложь;
			КонецПопытки;

			Если МенеджерКриптографииПодключен Тогда
			
				Для Каждого Подпись ИЗ Подписи Цикл
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Подпись);
					Если СертификатыПодписи.Количество() > 0 Тогда
						Сертификат = СертификатыПодписи[0];
					Иначе
						Продолжить;
					КонецЕсли;
					ПредставлениеПользователя = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
																										Сертификат.Субъект);
					Отпечаток = Base64Строка(Сертификат.Отпечаток);
					ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
					ДатаУстановкиПодписи = ДатаУстановкиПодписи(Подпись);
					ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
					ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
												ДобавленныйФайл,
												Подпись,
												Отпечаток,
												ДатаУстановкиПодписи,
												"",
												,
												ПредставлениеПользователя,
												ДвоичныеДанныеСертификата);
				КонецЦикла;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ДобавленныйФайл, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД, "Контрагент");
		Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(Контрагент,
																						РеквизитыЭД.СоглашениеЭД);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Автор",                       Пользователи.АвторизованныйПользователь());
		СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
		СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ВыпискаБанка);
		СтруктураПараметров.Вставить("Ответственный",               Ответственный);
		СтруктураПараметров.Вставить("Организация",                 РеквизитыЭД.Организация);
		СтруктураПараметров.Вставить("СоглашениеЭД",                РеквизитыЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("Контрагент",                  Контрагент);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ТекущаяДатаСеанса());
		СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ЭД);
		СтруктураПараметров.Вставить("ВладелецЭД",                  РеквизитыЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("НаименованиеФайла",           СтрЗаменить(НаименованиеЗапроса, "Запрос выписки", "Выписка банка за период "));
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(ДобавленныйФайл);
		НовыйЭД = ДобавленныйФайл;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ФайлДанных);

КонецПроцедуры

// Собирает пакет с запросом выписки и отправляет в банк. В ответ получает выписку банка.
//
// Параметры:
//  СтруктураПараметров - структура, содержит 2 элемента
//      ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ с запросом выписки,
//      СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение
//  АдресХранилища - строка, содержит адрес хранилища, содержащий структуру из 2 элементов:
//      ЗапросОтправлен - Булево, признак, что запрос был отправлен
//      ВыпискаБанка - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ с выпиской банка
//  ЕстьОшибка - Булево - признак получения информации из банка об ошибке
//
Процедура ОтправитьЗапросВыпискиВБанк(СтруктураПараметров, АдресХранилища, ЕстьОшибка) Экспорт

	Перем ВыпискаБанка;
	СтруктураВозврата = Новый Структура;
	ЭД                = СтруктураПараметров.ЭД;
	СоглашениеЭД      = СтруктураПараметров.СоглашениеЭД;
	ЗапросОтправлен   = Ложь;
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеЭД,
		"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ПрограммаБанка");
	Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
	КолОтправленных = 0;
	
	Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0", "CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
	
	МассивПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ЭД, Новый УникальныйИдентификатор);
		
	Для Каждого СтрокаПодписи ИЗ МассивПодписей Цикл
		Message.signature.Добавить(ПолучитьИзВременногоХранилища(СтрокаПодписи.АдресПодписи));
	КонецЦикла;
	
	ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла();
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКФайлуОтправки);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись, Message, "signed", URI, , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсВходящихДокументов);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Пользователь) Тогда
		Настройки.Вставить("ХЭШ", ХэшАвторизации(СтруктураПараметров.Пользователь, СтруктураПараметров.Пароль));
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Отправка запроса выписки в банк'");
	
	Попытка
		ОтветБанка = "";
		ТекстОшибки = "";
		ОтправитьПакетЧерезРесурсБанка(Настройки, ПутьКФайлуОтправки, ОтветБанка, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстОшибки);
			ЕстьОшибка = Истина;
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			ЗапросОтправлен = Истина;
		
			УдалитьФайлы(ПутьКФайлуОтправки);
		
			ДанныеОтвета = ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД);
		
			Если НЕ ДанныеОтвета = Неопределено Тогда
				ВыпискаПолучена = Истина;
				ОбработатьОтветБанка(ДанныеОтвета, ЭД, ВыпискаБанка, ЕстьОшибка);
			КонецЕсли;
			СтруктураВозврата.Вставить("Подписи", ДанныеОтвета.Получить("Подписи"));
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При отправке запроса выписки произошла ошибка, подробности см. в Журнале регистрации.'");
		ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	УдалитьФайлы(ПутьКФайлуОтправки);
	СтруктураВозврата.Вставить("ЗапросОтправлен", ЗапросОтправлен);
	СтруктураВозврата.Вставить("ВыпискаБанка", ВыпискаБанка);
	СтруктураВозврата.Вставить("ЕстьОшибка", ЕстьОшибка);
	СтруктураВозврата.Вставить("ТекстОшибки", ТекстОшибки);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстСообщения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОшибкаПередачи);
	СтруктураПараметров.Вставить("ПричинаОтклонения", ТекстОшибки);
	ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									ВидОперации, ТекстОшибки, ТекстСообщения, 1);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через сервис 1CЭДО

// Только для внутреннего использования
Функция РегистрационныйПакетДляОператораЭДО(РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО) Экспорт
		
	// Сформируем пакет для 1СЭДО
	ИмяФайлаПакетаДля1СЭДО = РабочийКаталог() + "EDI_" + РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО + ".zip";
	
	АдресКаталогаРегистрации = РабочийКаталог("reg", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаПакетаДляОператораЭДО           = АдресКаталогаРегистрации + "packet.zip";
	ИмяВременногоФайлаАрхиваСоглашенияНаПодлючениеЭДО = АдресКаталогаРегистрации + "LicenseCard.zip";
	ИмяВременногоФайлаЭДКарточки                      = АдресКаталогаРегистрации + "card.xml";
	ИмяВременногоФайлаЭДТранспортнойИнформации        = АдресКаталогаРегистрации + "meta.xml";
	
	// Готовим данные для ОператораЭДО
	ИмяФайла = АдресКаталогаРегистрации + СгенерироватьUUID() + ".bin";
	ЗашифрованныеДвоичныеДанныеОператораЭДО.Записать(ИмяФайла);
	
	ИмяФайлаПодписи = АдресКаталогаРегистрации + СгенерироватьUUID() + ".bin";
	ПодписанныеДвоичныеДанныеДляОператораЭДО.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаОписанияПакетаДляОператораЭДО = АдресКаталогаРегистрации + "packageDescription.xml";
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО = ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи);
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО.Записать(ИмяФайлаОписанияПакетаДляОператораЭДО);
	
	МассивФайловПакетаНаПодлючениеЭДО = Новый Массив;
	МассивФайловПакетаНаПодлючениеЭДО.Добавить(ИмяФайлаОписанияПакетаДляОператораЭДО);
	МассивФайловПакетаНаПодлючениеЭДО.Добавить(ИмяФайла);
	МассивФайловПакетаНаПодлючениеЭДО.Добавить(ИмяФайлаПодписи);
	СформироватьЗипАрхивФайлов(ИмяВременногоФайлаПакетаДляОператораЭДО, МассивФайловПакетаНаПодлючениеЭДО);
	
	// Готовим соглашение для 1СЭДО
	ИмяФайлаСоглашенияНаПодлючениеЭДО       = АдресКаталогаРегистрации + "LicenseCard.xml";
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлаСоглашенияНаПодлючениеЭДО);
	
	ИмяФайлПодписиСоглашенияНаПодлючениеЭДО = АдресКаталогаРегистрации + "LicenseCard.p7s";
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлПодписиСоглашенияНаПодлючениеЭДО);
	
	МассивФайловАрхиваСоглашенияНаПодлючениеЭДО = Новый Массив;
	МассивФайловАрхиваСоглашенияНаПодлючениеЭДО.Добавить(ИмяФайлаСоглашенияНаПодлючениеЭДО);
	МассивФайловАрхиваСоглашенияНаПодлючениеЭДО.Добавить(ИмяФайлПодписиСоглашенияНаПодлючениеЭДО);
	СформироватьЗипАрхивФайлов(ИмяВременногоФайлаАрхиваСоглашенияНаПодлючениеЭДО, МассивФайловАрхиваСоглашенияНаПодлючениеЭДО);
	
	// Готовим описание пакета для 1СЭДО
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДКарточки", ИмяВременногоФайлаЭДКарточки);
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДТранспортнойИнформации", ИмяВременногоФайлаЭДТранспортнойИнформации);
	СоздатьФайлыОписанияПакета(РеквизитыПакета);
	
	МасисивФайловРегистрационногоПакета = Новый Массив;
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаПакетаДляОператораЭДО);
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаАрхиваСоглашенияНаПодлючениеЭДО);
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДКарточки);
	МасисивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДТранспортнойИнформации);
	СформироватьЗипАрхивФайлов(ИмяФайлаПакетаДля1СЭДО, МасисивФайловРегистрационногоПакета);
	
	УдалитьФайлы(АдресКаталогаРегистрации);
	
	Возврат ИмяФайлаПакетаДля1СЭДО;

КонецФункции

Функция ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи)
	
	ИмяВременногоФайлаОписаниеПакетаЭДО = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента = Новый ЗаписьXML;
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ОткрытьФайл(ИмяВременногоФайлаОписаниеПакетаЭДО, "windows-1251");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьОбъявлениеXML();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("ТрансИнф");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("ВерсПрог", ВРЕГ(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40)));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("версияФормата", "ФНС:1.0");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокументооборота", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокументооборота", "Участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типТранзакции", "УчастникНП");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("отправитель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "абонент");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // отправитель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("получатель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторСубъекта", РеквизитыПакета.ОператорЭДОИд);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // получатель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("документ");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокумента", СгенерироватьUUID());
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("зашифрован", XMLСтрока(Истина));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокумента", "участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСодержимого", "xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("содержимое");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла", ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // содержимое
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("подпись");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла", ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписи).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // подпись
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // документ
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // ТрансИнф
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.Закрыть();
	
	ДвоичныеДанныеОписаниеПакетаЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаОписаниеПакетаЭДО);
	УдалитьФайлы(ИмяВременногоФайлаОписаниеПакетаЭДО);
	
	Возврат ДвоичныеДанныеОписаниеПакетаЭДО;
	
КонецФункции

Процедура СоздатьФайлыОписанияПакета(РеквизитыПакета)
	
	// Card
	ЭДКарточки = Новый ЗаписьXML;
	ЭДКарточки.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДКарточки, "windows-1251");
	ЭДКарточки.ЗаписатьОбъявлениеXML();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("card");
	
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДКарточки.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/card");
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Identifiers");
	ЭДКарточки.ЗаписатьАтрибут("ExternalIdentifier", "packet.zip");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Type");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Registration");
	ЭДКарточки.ЗаписатьАтрибут("ResignRequired", XMLСтрока(Истина));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Description");
	ЭДКарточки.ЗаписатьАтрибут("Title", "Регистрация");
	ЭДКарточки.ЗаписатьАтрибут("Date", XMLСтрока(ТекущаяДатаСеанса()));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Sender");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Abonent");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьАтрибут("Inn", РеквизитыПакета.ИННОрганизации);
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.КППОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Kpp", РеквизитыПакета.КППОрганизации);
	КонецЕсли;
	
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.Отпечаток) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Imprint", РеквизитыПакета.Отпечаток);
	КонецЕсли;
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Receiver");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Organization");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.ОператорЭДО);
	ЭДКарточки.ЗаписатьАтрибут("Type", "SpecOperator");
	ЭДКарточки.ЗаписатьАтрибут("OperatorID", РеквизитыПакета.ОператорЭДОИд);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.Закрыть();
	
	// meta
	ЭДТранспортнойИнформации = Новый ЗаписьXML;
	ЭДТранспортнойИнформации.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДТранспортнойИнформации, "windows-1251");
	ЭДТранспортнойИнформации.ЗаписатьОбъявлениеXML();
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ContainerDescription");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/meta");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("DocFlow");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Id", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Documents");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "AccessionAgreement");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Documents
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // DocFlow
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ContainerDescription
	ЭДТранспортнойИнформации.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьРегистрационныйПакет1СЭДО(Знач Файл, ПараметрыАутентификации, ЕстьОшибки) Экспорт
	
	Билет = БилетНаСайтПоддержки(ПараметрыАутентификации);
	Если Не ЗначениеЗаполнено(Билет) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	АдресРесурса = "SendRequest?ticket=" + Билет;
	
	// возможно будет ответ от сервера
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("txt");
	Попытка
		Соединение.ОтправитьДляОбработки(Файл, АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ЕстьОшибки = Истина;
		ТекстСообщения = "При отправке заявления о регистрации на сервисе 1С-ЭДО возникла ошибка :" + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецПопытки;
	УдалитьФайлы(Файл);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьФайлОтветаОтСервераЭДО(АдресРесурса, ПараметрЗапросаОтветаОтСервера = Неопределено) Экспорт
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Если ПараметрЗапросаОтветаОтСервера <> Неопределено Тогда
		АдресРесурса = АдресРесурса + "/" + ПараметрЗапросаОтветаОтСервера;
	КонецЕсли;
	
	Попытка
		Соединение.Получить(АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = "При получении данных с сервиса 1С-ЭДО возникла ошибка:" + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки =  РабочийКаталог("proc", ЭД.УникальныйИдентификатор());
				
				Попытка
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
						ТекстОшибки, ТекстСообщения);
					ЗИПЧтение.Закрыть();
					УдалитьФайлы(ИмяФайла);
					УдалитьФайлы(ПапкаДляРаспаковки);
					Возврат Неопределено;
				КонецПопытки;

				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ФайлДанных = Новый Файл(ИмяФайла);
				
				ФайлыАрхива = Новый Массив;
				ФайлыАрхива.Добавить(ФайлДанных);
			Иначе
				УдалитьФайлы(ИмяФайла);
				Возврат Неопределено;
			КонецЕсли;
			УдалитьФайлы(ИмяФайла);
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
																								 ЭД.НаправлениеЭД,
																								 ЭД.УникальныйИдентификатор());
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
				СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
				ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				Прервать; // должен быть только один файл данных
			КонецЦикла;
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПереченьВременныхФайлов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Только для внутреннего использования
Функция СгенерироватьUUID() Экспорт
	
	Возврат нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

// Только для внутреннего использования
Функция НастройкиОбменаЭД(СсылкаНаЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			РеквизитыЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаЭД);
		Иначе
			РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД,
				"ВидЭД, НаправлениеЭД, СоглашениеЭД, ПрофильНастроекЭДО, ВерсияРегламентаЭДО, ПодписанЭЦП");
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			НастройкиОбмена = Новый Структура;
			
			СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД, "СпособОбменаЭД");
			Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.СоглашениеЭД,
				"СпособОбменаЭД, СертификатыПодписейОрганизации, ПрограммаБанка");
				НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыСоглашения.СпособОбменаЭД);
				НастройкиОбмена.Вставить("ПрограммаБанка",        РеквизитыСоглашения.ПрограммаБанка);
				ИспользуетсяНесколькоПодписей = Ложь;
				Если ЗначениеЗаполнено(РеквизитыСоглашения.СертификатыПодписейОрганизации) Тогда
					ИспользуетсяНесколькоПодписей = РеквизитыСоглашения.СертификатыПодписейОрганизации.Выгрузить().Количество() > 1;
				КонецЕсли;
				НастройкиОбмена.Вставить("ИспользуетсяНесколькоПодписей", ИспользуетсяНесколькоПодписей);
			Иначе
				
				РеквизитыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ПрофильНастроекЭДО,
					"СпособОбменаЭД");
				
				НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
			КонецЕсли;
			
			НастройкиОбмена.Вставить("Направление",           РеквизитыЭД.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД",                 РеквизитыЭД.ВидЭД);
			НастройкиОбмена.Вставить("ИспользоватьПодпись",   РеквизитыЭД.ПодписанЭЦП);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции", Ложь);
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",   РеквизитыЭД.ВерсияРегламентаЭДО);
			
			Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
				НастройкиОбмена.Вставить("ВерсияФорматаПакета", РеквизитыЭД.ВерсияФорматаПакета);
				
			Иначе
				ВерсияФорматаПакета = ВерсияПакетаЭД(СсылкаНаЭД);
				НастройкиОбмена.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
			КонецЕсли;
			
			ЗапросПоНастройкам = Новый Запрос;
			ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД",    РеквизитыЭД.СоглашениеЭД);
			ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД",   РеквизитыЭД.НаправлениеЭД);
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭД",           РеквизитыЭД.ВидЭД);
			ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеЦифровыеПодписи");
			ЭтоОбменСБанком = СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
			ЗапросПоНастройкам.УстановитьПараметр("ИспользуетсяЭЦП", ИспользоватьЭП ИЛИ ЭтоОбменСБанком);
			
			ВидыЭДФНС = Новый Массив;
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
			ВидыЭДФНС.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
			ЗапросПоНастройкам.УстановитьПараметр("ВидыЭДФНС", ВидыЭДФНС);
			
			ЗапросПоНастройкам.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЭЦП
			|			ТОГДА Соглашение.ИспользоватьПодпись
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьПодпись,
			|	Соглашение.ИспользоватьКвитанции
			|ИЗ
			|	(ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
			|		ВЫБОР
			|			КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета = ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ИспользоватьКвитанции,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ВЫБОР
			|					КОГДА &ВидЭД В (&ВидыЭДФНС)
			|							И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|				КОНЕЦ
			|		КОНЕЦ КАК НаправлениеЭД
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
			|ГДЕ
			|	Соглашение.НаправлениеЭД = &НаправлениеЭД";
			
			Результат = ЗапросПоНастройкам.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				ТЗ = Результат.Выгрузить();
				ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТЗ[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Только для внутреннего использования
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Только для внутреннего использования
Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, СтруктураФайловЭД) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
			
			// Необходимо предусмотреть заполнение подписей для дополнительного файла в дереве транспортной информации.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет представление электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//  СтруктураПараметров: НомерВладельца, ДатаВладельца, ВерсияЭД.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = "_" + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = "_" + Формат(ЗначениеСвойства, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И ВидЭД <> Перечисления.ВидыЭД.ПлатежноеПоручение И ВидЭД <> Перечисления.ВидыЭД.Квитанция
		И ВидЭД <> Перечисления.ВидыЭД.ЗапросВыписки И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства)
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = ' (версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ  ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ТекстВидЭД = НСтр("ru = 'СФ'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		ТекстВидЭД = НСтр("ru = 'ТОРГ-12'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		ТекстВидЭД = НСтр("ru = 'Акт'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ТекстВидЭД = НСтр("ru = 'Акт на передачу прав'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ТекстВидЭД = НСтр("ru = 'Счет'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		ТекстВидЭД = НСтр("ru = 'ЗаказТовара'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		ТекстВидЭД = НСтр("ru = 'ОтветНаЗаказ'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		ТекстВидЭД = НСтр("ru = 'ПрайсЛист'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ТекстВидЭД = НСтр("ru = 'КаталогТоваров'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		ТекстВидЭД = НСтр("ru = 'ОтчетОПродажахКомиссионногоТовара'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		ТекстВидЭД = НСтр("ru = 'ОтчетОСписанииКомиссионногоТовара'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = НСтр("ru = 'ПередачаИнт'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = НСтр("ru = 'ВозвратИнт'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ТекстВидЭД = НСтр("ru = 'Извещение о получении'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
		ТекстВидЭД = НСтр("ru = 'Подтверждение'");
		ТипЭД = "";
		Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД) Тогда
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			 ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " даты получения";
			Иначе
				ТекстВидЭД = ТекстВидЭД + " даты отправки";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ТекстВидЭД = НСтр("ru = 'Уведомление об уточнении'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ТекстВидЭД = НСтр("ru = 'Предложение об аннулировании'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		ТекстВидЭД = НСтр("ru = 'Платежное поручение'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
		ТекстВидЭД = НСтр("ru = 'Квитанция'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ДопДанные Тогда
		ТекстВидЭД = НСтр("ru = 'Схема данных'");
	КонецЕсли;
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	Результат = "";
	
	Соответствие = ЭлектронныеДокументыПовтИсп.СоответствиеКириллицыИЛатиницы();
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		СимволЛатиницей = Соответствие[НРег(Символ)]; // поиск соответствия без учета регистра
		Если СимволЛатиницей = Неопределено Тогда
			// другие символы остаются "как есть"
			СимволЛатиницей = Символ;
		Иначе
			Если Символ = ВРег(Символ) Тогда
				СимволЛатиницей = ТРег(СимволЛатиницей); // восстанавливаем регистр
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция предназначена для проверки имени файла на наличие некорректных символов
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции"
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла
//  ФлУдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки
// Возвращаемое значение:
//  Строка - имя файла
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Результат = Истина;
	
	Для Сч = 1 по СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если Найти(СтрИмяФайла, Символ) <> 0 Тогда
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Возвращает временный рабочий каталог для работы с файлами ЭДО.
// Каталог создается в каталоге временных файлов системы или ином предопределенном каталоге.
//
// Параметры:
//  Подкаталог - Строка - Вложенный каталог первого уровня
//  КлючУникальности - Строка - Вложенный каталог второго уровня
Функция РабочийКаталог(Знач Подкаталог = "", КлючУникальности = "") Экспорт
	
	ИмяКаталога = ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов() 
		+ ?(Не ПустаяСтрока(Подкаталог + КлючУникальности), "v8_", "")
		+ Подкаталог
		+ ?(Не ПустаяСтрока(Подкаталог), "_", "")
		+ КлючУникальности
		+ ?(Не ПустаяСтрока(Подкаталог + КлючУникальности), ОбщегоНазначенияКлиентСервер.РазделительПути(), "");
					
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	
	Если КаталогНаДиске.Существует() И Не ПустаяСтрока(КлючУникальности) Тогда
		// Если структура существует, очистим файлы
		УдалитьФайлы(КаталогНаДиске, "*");
	Иначе
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	Возврат ИмяКаталога;	
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД) Экспорт
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			ТекущийСтатус = СсылкаНаЭД.СтатусДокумента;
		Иначе
			ТекущийСтатус = СсылкаНаЭД.СтатусЭД;
		КонецЕсли;
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.Аннулирован
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
			ТекущийСтатус = НовыйСтатус;
		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			
			Если НастройкиОбмена <> Неопределено Тогда
			
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
		ТребоватьПодтверждения = Истина;
		Если ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
			Если Не НастройкиОбмена.Свойство("ТребоватьПодтверждения", ТребоватьПодтверждения) Тогда
				ТребоватьПодтверждения = Истина;
			КонецЕсли;
		Иначе
			Если НастройкиОбмена.Владелец().Колонки.Найти("ТребоватьПодтверждения") = Неопределено Тогда
				ТребоватьПодтверждения = Истина;
			Иначе
				ТребоватьПодтверждения = НастройкиОбмена.ТребоватьПодтверждения;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ТребоватьПодтверждения) <> Тип("Булево") Тогда
			ТребоватьПодтверждения = Истина;
		КонецЕсли;
		
		Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
				
			ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.НеОтправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					Если ТребоватьПодтверждения Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
					
					// Изменяется набор статусов ЭД в зависимости от использования версии регламента.
					Если НастройкиОбмена.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
						
						Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
							
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
					Иначе
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
				
					Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.КорректировочныйСчетФактура
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетНаОплату Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					Если НастройкиОбмена.ИспользоватьПодпись Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись Тогда
						Если НастройкиОбмена.ИспользуетсяНесколькоПодписей Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
						КонецЕсли;
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					КонецЕсли;
					Если НЕ НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					Если НастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Принят);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Исполнен);
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.НеОтправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					Если ТребоватьПодтверждения Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					КонецЕсли;
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					
					Если НастройкиОбмена.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
						
						// Не будем для ответных титулов добавлять статус Доставлен,
						// т.к. по ним не должны приходить Уведомления.
						Если Не (НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель 
							Или НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
							Или НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
							
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
							
							Если НастройкиОбмена.ИспользоватьПодпись
								И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						// Если формат исходящих документов 2,0.
						Если НастройкиОбмена.ИспользоватьКвитанции Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
						Если НастройкиОбмена.ИспользоватьПодпись
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
							
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
						КонецЕсли;
						
						
					КонецЕсли;
					
				КонецЕсли
			КонецЕсли;
			
		ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
			
			Если НЕ (НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.Подтверждение
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка) Тогда
					
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					
					Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						Если ТребоватьПодтверждения Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						КонецЕсли;
					Иначе
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.КорректировочныйСчетФактура
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетНаОплату Тогда
							
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						Если ТребоватьПодтверждения Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						КонецЕсли;
					Иначе
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						Если НастройкиОбмена.ИспользоватьПодпись
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
							И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
							И Не (НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
									И НастройкиОбмена.ВерсияФорматаПакета =
									Перечисления.ВерсииФорматаПакетаЭД.Версия30) Тогда
									
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
								МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
								
								Если НастройкиОбмена.ИспользоватьКвитанции
									И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
									МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
								КонецЕсли;
								
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

// Только для внутреннего использования
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока Найти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из клиентского модуля, удаляет папку,
// созданную на сервере и переданную на клиент в качестве параметра.
// 
// Параметры:
// Папка - строка, путь к временной папке на сервере.
//
Процедура УдалитьПапкуНаСервере(Папка) Экспорт
	
	Если ЗначениеЗаполнено(Папка) Тогда
		
		Файл = Новый Файл(Папка);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки обмена электронными документами по структуре параметров.
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, ПараметрыСертификатов = Неопределено,
	ФлагДействующиеСоглашения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		ФлагИспользованияЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеЦифровыеПодписи");
			
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
		Запрос.УстановитьПараметр("ВидЭД",         ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",    Контрагент);
		
		ДоговорКонтрагента = "";
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		ВидЭДВладельца = Неопределено;
		Если СтруктураПараметров.Свойство("ВидЭДВладельца", ВидЭДВладельца) Тогда
			Запрос.УстановитьПараметр("ЭтоОтклонение",   Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоОтклонение",   Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭДВладельца",  ВидЭДВладельца);
		Запрос.УстановитьПараметр("ДокументФНС",  ЭтоФНС(ВидЭДВладельца));
		
		Запрос.УстановитьПараметр("ТолькоДействующиеСоглашения",  ФлагДействующиеСоглашения);
		
		СоглашениеЭД = "";
		Организация = "";
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			
			ПолучитьТекстНастроекОбменаПоСоглашению(Запрос.Текст);
			
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				Партнер = "";
				СтруктураПараметров.Свойство("Партнер", Партнер);
				Запрос.УстановитьПараметр("Партнер", Партнер);
			КонецЕсли;
			
			ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(Запрос.Текст);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			Если РезультатЗапроса[2].Пустой() Тогда
				// Поищем настройку ЭДО без указания договора контрагента.
				ДоговорКонтрагента = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ТЗ = РезультатЗапроса[2].Выгрузить();
			ТЗСертификатовНеобходимыхПодписей = РезультатЗапроса[3].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если ФлагИспользованияЭЦП И ПараметрыСертификатов <> Неопределено Тогда
					МассивОтпечатковСертификатов = ВернутьМассивОтпечатковСтруктуры(ПараметрыСертификатов);
					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если СтрокаТЗ.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
								ИЛИ СтрокаТЗ.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
								НайденПодходящийСертификат = Ложь;
								ПараметрыОтбора = Новый Структура("Соглашение, Отпечаток", 
								СтрокаТЗ.СоглашениеЭД, 
								СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток);
								МассивСтрок = ТЗСертификатовНеобходимыхПодписей.НайтиСтроки(ПараметрыОтбора);
								Для Каждого Элемент ИЗ МассивСтрок Цикл
									Если (МассивОтпечатковСертификатов.Найти(Элемент.Отпечаток) <> Неопределено
										ИЛИ ТекущаяНастройка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн)
										И СтруктураПараметров.УстановленныеПодписи.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) = Неопределено Тогда 
										ТекущаяНастройка = СтрокаТЗ;
										НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
										НайденПодходящийСертификат = Истина;
										Прервать;
									КонецЕсли
								КонецЦикла;
								Если НайденПодходящийСертификат Тогда
									Прервать;
								КонецЕсли;
							ИначеЕсли ПараметрыСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если ФлагИспользованияЭЦП Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстНастроекОбменаПоСоглашению(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстНастроекОбменаПоСоглашению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭЦП КАК Подписывать,
		|	ВЫБОР
		|		КОГДА &ЭтоОтклонение
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования
		|	КОНЕЦ КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
		|	ТЧ_Соглашения.НайстройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьЭЦП,
		|		Истина,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НайстройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
		|		И ВЫБОР
		|				КОГДА &ЭтоОтклонение
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|						И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|							ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникСертификатов.Ссылка КАК Ссылка,
		|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
		|	СправочникСертификатов.Ссылка.Организация КАК Организация,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	ВЫБОР
		|		КОГДА СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату
		|			ТОГДА СправочникСертификатов.Ссылка.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
		|ГДЕ
		|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
		|	И НЕ СправочникСертификатов.Ссылка.Отозван
		|	И СправочникСертификатов.ИспользоватьДляПодписи
		|	И СправочникСертификатов.ВидДокумента = &ВидЭД
		|	И (СправочникСертификатов.Ссылка.Пользователь = &Пользователь
		|			ИЛИ СправочникСертификатов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА &НаправлениеЭД <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолученОргПолуч,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.ПрограммаБанка,
		|	ВТ_ТЧ_Соглашения.НайстройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И (ВТ_Сертификаты.Организация = ВТ_ТЧ_Соглашения.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток,
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	КонецЕсли;
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Параметры:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(ТекстЗапроса)
	
	ТекстЗапроса = ЭлектронныеДокументыПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭЦП КАК Подписывать,
		|	Истина КАК ОжидатьКвитанциюОДоставке,
		|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.Приоритет,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.Ссылка.ПрограммаБанка КАК ПрограммаБанка,
		|	ТЧ_Соглашения.НайстройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьЭЦП,
		|		Истина,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		0 КАК Приоритет,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НайстройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|						И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|							ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|						И ВЫБОР
		|							КОГДА &ЭтоОтклонение
		|								ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|							ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|						КОНЕЦ
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И &Партнер
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникСертификатов.Ссылка КАК Ссылка,
		|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
		|	СправочникСертификатов.Ссылка.Организация КАК Организация,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
		|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату КАК ПарольПолучен,
		|	ВЫБОР
		|		КОГДА СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату
		|			ТОГДА СправочникСертификатов.Ссылка.ПарольПользователя
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
		|ГДЕ
		|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
		|	И (СправочникСертификатов.Ссылка.Организация = &Организация
		|			ИЛИ ВЫБОР
		|				КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|					ТОГДА СправочникСертификатов.Ссылка.Организация = &Контрагент
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|	И НЕ СправочникСертификатов.Ссылка.Отозван
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СправочникСертификатов.ВидДокумента = &ВидЭД
		|		КОНЕЦ
		|	И СправочникСертификатов.ИспользоватьДляПодписи
		|	И (СправочникСертификатов.Ссылка.Пользователь = &Пользователь
		|			ИЛИ СправочникСертификатов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолученОргПолуч,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.ПрограммаБанка,
		|	ВТ_ТЧ_Соглашения.НайстройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
		|					И ВЫБОР
		|						КОГДА &ЭтоОтклонение
		|							ТОГДА ВЫБОР
		|									КОГДА &ДокументФНС
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭДВладельца
		|								КОНЕЦ
		|						ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
		|					КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение,
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)";
		
		ТекстЗапросаПартнеры = "ИСТИНА";
		Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			ТекстЗапросаПартнеры = "&Партнер <> НЕОПРЕДЕЛЕНО
			|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент.Партнер = &Партнер";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер", ТекстЗапросаПартнеры);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция СтруктураЗначенийРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	СтруктураДанных = "";
	ЭлектронныеДокументыПереопределяемый.ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция формирует электронные документы и помещает их в справочник присоединенных файлов
//
// Параметры:
//  МассивОбъектов - массив ссылок на объекты, к которым надо создать электронный документ;
//  СоответствиеПараметров - соответствие, содержащая настройки обмена ЭД для объектов.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена);
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													ВладелецЭД,
													Файл.ИмяБезРасширения,
													СтрЗаменить(Файл.Расширение, ".", ""),
													ВремяСозданияЭД,
													ВремяСозданияЭД,
													АдресФайла,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		Если (СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
			  ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки
			  ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки)
			И СтруктураОбмена.СтруктураЭД.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			
			Дайджест = ЭлектронныеДокументыСлужебныйВызовСервера.Дайджест(ПолноеИмяФайла,
			                                                              СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
			АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(Дайджест));
			ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецЭД,
			                                           "СхемаДанных",
			                                           ,
			                                           ,
			                                           ,
			                                           АдресХранилища,
			                                           ,
			                                           ,
			                                           Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
			ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
			ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
			ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Сформирован);
			ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
		КонецЕсли;
			
		УдалитьФайлы(Файл.Путь);
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			Если СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
				УдалитьФайлы(СтруктураОбмена.ПолноеИмяДопФайла);
			КонецЕсли;
			Продолжить;
		ИначеЕсли СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл);
			УдалитьФайлы(СтруктураОбмена.ПолноеИмяДопФайла);
			Если НЕ ДопФайлСоздан Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("МассивФайлов") И СтруктураОбмена.МассивФайлов.Количество() > 0 Тогда
			АдресАрхива = АрхивДополнительныхФайлов(СтруктураОбмена.МассивФайлов);
			Если Не АдресАрхива = Неопределено Тогда
				ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
								ВладелецЭД,
								Нстр("ru = 'Дополнительные файлы'"),
								"zip",
								ВремяСозданияЭД,
								ВремяСозданияЭД,
								АдресАрхива,
								Неопределено,
								,
								Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
				СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
				СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
				СтруктураПараметров.Вставить("Организация", СтруктураОбмена.СтруктураЭД.Организация);
				СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
				СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
				СтруктураПараметров.Вставить("ВладелецЭД", СтруктураОбмена.СтруктураЭД.ВладелецЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
				
		Если СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		 ИЛИ СтруктураОбмена.СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
		Иначе
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтатусЭД = Неопределено;
		Если НЕ (СтруктураОбмена.СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
			СтруктураОбмена.СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		КонецЕсли;
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		УстановитьСсылкуДляВладельцаВРегистреСостояний(ВладелецЭД, ДобавленныйФайл);
		МассивСформированныхФайлов.Добавить(ДобавленныйФайл);
		
	КонецЦикла;
	
	Возврат МассивСформированныхФайлов;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена) Экспорт
	
	// Формируем ЭД в формате xml, в случае если это:
	// - торг-12 в формате ФНС;
	// - Акт в формате ФНС;
	// - торг-12 в старом формате;
	// - обмен через оператора ЭДО счетом-фактурой.
	Если СтруктураОбмена.СтруктураЭД.Свойство("ПрофильНастроекЭДО") Тогда
		СпособОбменаЭД = СтруктураОбмена.СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД;
	Иначе
		// Осталось для обмена с банками.
		СпособОбменаЭД = СтруктураОбмена.СтруктураЭД.СоглашениеЭД.СпособОбменаЭД;
	КонецЕсли;
	
	Если (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		  ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение)
		ИЛИ (СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		И (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		   ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		   ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12)
		ИЛИ СтруктураОбмена.СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.ФорматФайла
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ФорматыФайловОбмена КАК СоглашенияОбИспользованииЭДФорматыФайловОбмена
		|ГДЕ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.Ссылка = &СоглашениеЭД
		|	И СоглашенияОбИспользованииЭДФорматыФайловОбмена.Использовать";
		Запрос.УстановитьПараметр("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
		
		ИспользуемыеФорматы = Запрос.Выполнить().Выгрузить();
		
		Если СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			И ИспользуемыеФорматы.Найти(Перечисления.ФорматыФайловОбменаЭД.PDF, "ФорматФайла") = Неопределено Тогда
			НоваяСтр = ИспользуемыеФорматы.Добавить();
			НоваяСтр.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.PDF;
		КонецЕсли;
		
		МассивФайловДляОтправки = Новый Массив;
		
		Для Каждого ИспользуемаяСтрока Из ИспользуемыеФорматы Цикл
			Если ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.XML
				ИЛИ ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат Тогда
				ИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
			Иначе
				ИмяФайла = СформироватьДопДокумент(СтруктураОбмена, ИспользуемаяСтрока.ФорматФайла);
				Если ИмяФайла = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Ошибка формирования табличного документа в формате %1.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИспользуемаяСтрока.ФорматФайла);
					ВидОперации = НСтр("ru = 'формирования табличного документа'");
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ТекстСообщения);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			МассивФайловДляОтправки.Добавить(ИмяФайла);
		КонецЦикла;
		ПолноеИмяФайла = СформироватьЗипАрхивФайлов(СтруктураОбмена.ПолноеИмяФайла, МассивФайловДляОтправки);
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
// 
// НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
// Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https", "ftp"
// 
Функция СформироватьПрокси(Протокол) Экспорт
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Только для внутреннего использования.
Процедура ПроверитьДлинуНомераСчета(НомерСчета, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ПространствоИменСхемы = ЭлектронныеДокументыПовтИсп.ПространствоИменCML();
	Длина = Число(ЭлектронныеДокументыВнутренний.ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "РасчетныйСчет", "НомерСчета", ВидФасетаXDTO.Длина));

	Если Длина <> СтрДлина(СокрЛП(НомерСчета)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		ЕстьОшибкиЗаполнения = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

Функция ЭДОЗакрытПринудительно(Знач ОбъектСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
		|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ОбъектСсылка);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Только для внутреннего использования
Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ЭтоПроизвольныйДокумент = ЭтоПакетПроизвольногоЭД(ПодготовленныеДокументы);
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	УдалитьФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПолучитьДанныеФайла(ДокументНаОтправку);
		
		// Шифрование ЭД
		Если Конверт.ДанныеЗашифрованы Тогда
			Если МассивСтруктурДанных <> Неопределено Тогда // шифрование произведено на клиенте
				Для Каждого ЭлементДанных ИЗ МассивСтруктурДанных Цикл
					Если ЭлементДанных.ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент Тогда
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ЭлементДанных.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					Конецесли;
				КонецЦикла;
			Иначе
				ПараметрыШифрования = ПолучитьМассивАдресовСертификатовШифрования(ДокументНаОтправку);
				Если ПараметрыШифрования <> Неопределено Тогда
					Попытка
						НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
						ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
						ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
						ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
						
						МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
						МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
						МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
						МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
					Исключение
						ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						УдалитьФайлы(АдресКаталога);
						Возврат ;
					КонецПопытки;
					
					МассивСертификатов = Новый Массив;
					Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
						
						ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
						Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку) Тогда
			СохранитьВместеСПоследнейЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭЦП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		УдалитьФайлы(АдресКаталога);
		Возврат ;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	ЗипКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ПолучитьСоответствиеФайловИПодписей(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									Конверт,
									СоответствиеВложений,
									СоответствиеФайлЭД,
									ЭтоПроизвольныйДокумент);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	УдалитьФайлы(ТекстОписанияУчастников);
	ЗипКонтейнер.Добавить(АдресКаталога + "packageDescription.xml");
	
	ЗипКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
	УдалитьФайлы(АдресКаталога);
	
КонецПроцедуры

// Только для внутреннего использования
Функция РаспаковатьПакетЭДНаСервере(ПакетЭД, СтруктураШифрования, ДанныеРаспаковки = Неопределено)
	
	МассивВозврата = Новый Массив;
	
	Попытка
		
		Если ДанныеРаспаковки = Неопределено Тогда
			ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД);
		КонецЕсли;
		
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МенеджерКриптографииПолучен = Ложь;
		ВыполнятьКриптооперацииНаСервере = Ложь;
		ВыполнятьАвторизациюНаСервере = Ложь;
		ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, ВыполнятьАвторизациюНаСервере);
		Если ВыполнятьКриптооперацииНаСервере ИЛИ ВыполнятьАвторизациюНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии();
				МенеджерКриптографииПолучен = Истина;
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		ФлагОшибки = Ложь;
		НачатьТранзакцию();
		
		ЕстьКриптосредствоНаКлиенте = Ложь;
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			СтруктураВозврата       = Новый Структура;
			СоответствиеЭДИПодписей = Новый Соответствие;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
			ПакетЭД,
			ДанныеРаспаковки,
			ЕстьКриптосредствоНаКлиенте,
			СоответствиеЭДИПодписей,
			СтруктураВозврата);
			МассивДобавленныхФайлов             = СтруктураВозврата.МассивДобавленныхФайлов;
			МассивДобавленныхФайловДляИзвещений = СтруктураВозврата.МассивДобавленныхФайловДляИзвещений;
			МассивВладельцев                    = СтруктураВозврата.МассивВладельцев;
			Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") И МассивДобавленныхФайлов.Количество() > 0
				И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
				И МенеджерКриптографииПолучен Тогда
				
				Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
					Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
						Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
							СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
							Если СертификатыПодписи.Количество() <> 0 Тогда
								Сертификат = СертификатыПодписи[0];
								ДатаУстановкиПодписи = ДатаУстановкиПодписи(ДанныеПодписи);
								ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
								ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
								ПредставлениеПользователя = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
									Сертификат.Субъект);
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
									Элемент.Ключ,
									ДанныеПодписи,
									ОтпечатокBase64,
									ДатаУстановкиПодписи,
									"",
									,
									ПредставлениеПользователя,
									Сертификат.Выгрузить());
							КонецЕсли;
						КонецЦикла;
					КонецЦикла
				КонецЕсли;
				
				Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
					ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭД);
				КонецЦикла;
			КонецЕсли;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
				ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, ВидЭД);
			КонецЕсли;
			
			Возврат КоличествоОбработанныхДокументов;
			
		Иначе
			
			
			МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
			МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
			
			Если МассивДвоичныхДанных.Количество() = 0 Тогда
				МассивЭДИДанныхПодписей = Новый Массив;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(
				ДанныеРаспаковки.СоответствиеФайлПараметры,
				ПакетЭД,
				ДанныеРаспаковки.ФайлыПакета,
				МассивЭДИДанныхПодписей);
				Если МассивЭДИДанныхПодписей.Количество() > 0 И МенеджерКриптографииПолучен Тогда
					Для Каждого Элемент ИЗ МассивЭДИДанныхПодписей Цикл
						СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Элемент.ДанныеПодписи);
						Если СертификатыПодписи.Количество() <> 0 Тогда
							Сертификат = СертификатыПодписи[0];
							ДатаУстановкиПодписи = ДатаУстановкиПодписи(Элемент.ДанныеПодписи);
							ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
							ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
							ПредставлениеПользователя = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
								Сертификат.Субъект);
								ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
								Элемент.ЭлектронныйДокумент,
								Элемент.ДанныеПодписи,
								ОтпечатокBase64,
								ДатаУстановкиПодписи,
								"",
								,
								ПредставлениеПользователя,
								Сертификат.Выгрузить());
						КонецЕсли;
					КонецЦикла
				КонецЕсли;
			КонецЕсли;
			
			Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
				Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
					
					// Обработать пришедшие извещения от оператора
					// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
					МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
					СтруктураДанных.ИмяФайла, ДанныеРаспаковки.ФайлыПакета, СтруктураДанных.ДвоичныеДанные,
					ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
					
					Если МассивСтруктурПодписей <> Неопределено Тогда
						ФлагОшибки = Ложь;
						Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
							Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
								Попытка
									ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла,
									СтруктураПодписи.ДвоичныеДанныеПодписи);
								Исключение
									ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("114");
									ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									НСтр("ru = 'проверка подписи'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
									
									ФлагОшибки = Истина;
									Прервать;
									
								КонецПопытки;
							КонецЕсли;
						КонецЦикла;
						
						Если ФлагОшибки Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(ПакетЭД,
						МассивСтруктурПодписей, СтруктураДанных, ДанныеРаспаковки.СоответствиеФайлПараметры,
						ДанныеРаспаковки.ФайлыПакета);
					
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ФлагОшибки Тогда
				
				ЕстьОшибкаРаспаковки = Ложь;
				
				Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
					Если СтруктураШифрования <> Неопределено Тогда
						Если СтруктураШифрования.Свойство("ПарольПользователя") Тогда
							Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
								РасшифрованныеДвоичныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифрованныеДанные(
								СтруктураДанных.ДвоичныеДанные, СтруктураШифрования.ПарольПользователя);
								Если РасшифрованныеДвоичныеДанные = Неопределено Тогда
									ФлагОшибки = Истина;
									Прервать;
								КонецЕсли;
							Иначе
								// Если контекст выполнения криптоопераций стоит "на клиенте", то не расшифровываем.
								ФлагОшибки = Истина;
								Прервать;
							КонецЕсли;
							СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
						Иначе
							ШаблонСообщения = НСтр("ru = '%1. Не указан пароль к сертификату расшифровки: %2.'");
							ПодробныйТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
								ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("113"), СтруктураШифрования.Сертификат);
							ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
								НСтр("ru = 'расшифровка пакета ЭД'"), ПодробныйТекстСообщения);
							
							ФлагОшибки = Истина;
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
					
					МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
					СтруктураДанных.ИмяФайла, ДанныеРаспаковки.ФайлыПакета, СтруктураДанных.ДвоичныеДанные,
					ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
					
					СоответствиеЭДИПодписей = Новый Соответствие;
					МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
						ПакетЭД,
						МассивСтруктурПодписей,
						СтруктураДанных,
						ДанныеРаспаковки.СоответствиеФайлПараметры,
						ДанныеРаспаковки.ФайлыПакета,
						ЕстьОшибкаРаспаковки,
						ЕстьКриптосредствоНаКлиенте,
						СоответствиеЭДИПодписей);
					
					Если Не МассивДобавленныхФайлов = Неопределено И МассивДобавленныхФайлов.Количество() > 0
						И МенеджерКриптографииПолучен
						И Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
							Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
								Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
									СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
									Если СертификатыПодписи.Количество() <> 0 Тогда
										Сертификат = СертификатыПодписи[0];
										ДатаУстановкиПодписи = ДатаУстановкиПодписи(ДанныеПодписи);
										ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
										ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
										ПредставлениеПользователя = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
											Сертификат.Субъект);
											ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
											Элемент.Ключ,
											ДанныеПодписи,
											ОтпечатокBase64,
											ДатаУстановкиПодписи,
											"",
											,
											ПредставлениеПользователя,
											Сертификат.Выгрузить());
									КонецЕсли;
								КонецЦикла;
							КонецЦикла
						КонецЕсли;
						Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
							ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭД);
						КонецЦикла;
					КонецЕсли;
					Если Не ЕстьОшибкаРаспаковки Тогда
						Если ЗначениеЗаполнено(ТипДанных)
							И ДанныеРаспаковки.СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД") = Неопределено
							И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(
							ЭлектронныеДокументыСлужебныйВызовСервера.СпособОбменаЭД(ПакетЭД)) Тогда
							
							ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
							ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайлов, ВидЭД);
						КонецЕсли;
						
						ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьОшибкаРаспаковки Тогда
					ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД,
					ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ФлагОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат МассивВозврата.Количество();
	
КонецФункции

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета
	|	И НЕ ПакетЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПакетПроизвольногоЭД(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		Если ТипЗнч(Документ.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД")
			И Документ.ВладелецФайла.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если Найти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сертификатами ЭЦП

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,

							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходногоФайла = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	
	Если НЕ БезИсходногоФайла Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭЦП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ФайлСсылка.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ФайлСсылка.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеФайловИПодписей(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД = Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, СтруктураПараметровЭД);
		Иначе
			СоответствиеФайлЭД.Вставить("ГлавныйФайл", ДанныеФайла.ИмяФайла);
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроизвольныйЭД = Истина Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭЦП.zip";
			ИмяАрхива     = ИмяФайла + "ЭЦП.zip";
		КонецЕсли;
		
		ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		ЗипКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		ЗипКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			УдалитьФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ИмяАрхива, СтруктураПараметровЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Добавление объектов в присоединенные файлы

Процедура СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	
	ВерсияСхемыCML2 = ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML2();
	ВерсияСхемыCML402 = ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML402();
	
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НЕ ДопПараметры.Свойство("БыстрыйОбмен") Тогда
			НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			Продолжить
		КонецЕсли;
		
		Если НастройкиОбменаЭД.ПрофильНастроекЭДО.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		КонецЕсли;

		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12 Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьНакладнуюПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьТорг12ПродавецФНС(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьКорДокументПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);

			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПрайсПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
			Иначе
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьПрайсПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
				
			КонецЕсли;

		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);

			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьЗаказПоставщикуПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки,
																											НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьЗаказКлиентаПоДокументу(ОбъектДляВыгрузки,
																												НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
			Иначе
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(ОбъектДляВыгрузки,
																									НастройкиОбменаЭД);
				
			КонецЕсли;
	
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(
																						ОбъектДляВыгрузки, НастройкиОбменаЭД);
			Иначе
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(
																						ОбъектДляВыгрузки, НастройкиОбменаЭД);
																						
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьКаталогНоменклатуры(НастройкиОбменаЭД, ДопПараметры);
			
			ИначеЕсли НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML402
					ИЛИ Не ЗначениеЗаполнено(НастройкиОбменаЭД.ВерсияФормата) Тогда
					
				ТоварыКаталога = "";
				ДопПараметры.Свойство("ТоварыКаталога", ТоварыКаталога);
				СписокТоваровКаталога = ПолучитьИзВременногоХранилища(ТоварыКаталога);
				СтруктураВозврата = ЭлектронныеДокументыВнутренний.УдалитьСформироватьКаталогНоменклатуры(ОбъектДляВыгрузки,
				СписокТоваровКаталога, НастройкиОбменаЭД);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАктВыполненныхРаботПоДокументу(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктИсполнитель Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАкт501ИсполнительФНС(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПередачуТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьВозвратТоваровМеждуОрганизациями(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура
			ИЛИ ТекЭлемент.Ключ = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьСчетФактуруФНС(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьПлатежноеПоручение(ОбъектДляВыгрузки, НастройкиОбменаЭД);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьАктНаПередачуПрав(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);
				
		ИначеЕсли Врег(ТекЭлемент.Ключ) = ВРег("РеквизитыОрганизации") Тогда
			СтруктураВозврата = ЭлектронныеДокументыВнутренний.СформироватьРеквизитыОрганизации(ОбъектДляВыгрузки,
				НастройкиОбменаЭД);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбменаЭД.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			СтруктураВозврата.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДопДокумент(СтруктураОбмена, ОписаниеФормата)  Экспорт
	
	ФайлИсходногоДокумента = Новый Файл(СтруктураОбмена.ПолноеИмяФайла);
	ИмяИсходногоДокумента = ФайлИсходногоДокумента.ИмяБезРасширения;
	
	ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(
		СтруктураОбмена.ПолноеИмяФайла, СтруктураОбмена.СтруктураЭД.НаправлениеЭД);
	Если ТабличныйДокумент <> Неопределено Тогда
		СтруктураОбработкиДопФайла = ОпределитьТипСохраненияПоПеречислению(ОписаниеФормата);
		
		ФайлСохранения = ФайлИсходногоДокумента.Путь + ИмяИсходногоДокумента +"."
			+ СтруктураОбработкиДопФайла.ПредставлениеРасширения;
		
		ТабличныйДокумент.Записать(ФайлСохранения,СтруктураОбработкиДопФайла.ПредставлениеТипаСохранения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать табличный документ (подробности см. в Журнале регистрации).'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ФайлСохранения = Неопределено;
	КонецЕсли;
	
	Возврат ФайлСохранения;
	
КонецФункции

Функция ОпределитьТипСохраненияПоПеречислению(ТипСохранения)
	
	СтруктураВозврата = Новый Структура("ПредставлениеРасширения, ПредставлениеТипаСохранения");
	Если ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.DOCX Тогда
		СтруктураВозврата.ПредставлениеРасширения = "docx";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.DOCX;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.HTML Тогда
		СтруктураВозврата.ПредставлениеРасширения = "html";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.HTML;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.XLS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "xls";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.MXL Тогда
		СтруктураВозврата.ПредставлениеРасширения = "mxl";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.ODS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "ods";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.ODS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.PDF Тогда
		СтруктураВозврата.ПредставлениеРасширения = "pdf";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.PDF;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка сообщений

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьХМЛ.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьХМЛ.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Текст произвольного документа
	Если ЭтоПроизвольныйДокумент Тогда 
		Текст = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент.ВладелецФайла.Текст;
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Текст");
		ЗаписьХМЛ.ЗаписатьТекст(Текст);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	// Шифрование по документам
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьТекст("Да");
		Иначе
			ЗаписьХМЛ.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьХМЛ.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьХМЛ.ЗаписатьТекст(НомерЭД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьХМЛ.ЗаписатьТекст(УникальныйИД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьХМЛ.ЗаписатьТекст(Подпись);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение почты

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
			КонецЕсли;
			Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		УдалитьФайлы(Сообщение.ПолноеИмя);
	Иначе
		Если Найти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
					КонецЕсли;
					Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
					КонецЕсли;
				КонецЦикла;
				ЧтениеХМЛ.Закрыть();
				УдалитьФайлы(ИмяФайла);
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
					И ДатаПолучения <> Дата('00010101') Тогда
					
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			СоответствиеВложений = Новый Соответствие;
			СоответствиеВложений.Вставить(ФайлХМЛ.Имя, Новый ДвоичныеДанные(ФайлХМЛ.ПолноеИмя));
			ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль", АдресОтправителя,
			"Подтверждение получения пакета электронных документов: " + ИмяПакетаЭД, , СоответствиеВложений, РесурсОтправителя.Пароль);
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьСообщение(РесурсОтправителя, ПараметрыОтправки);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты.
				|%1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
				
				ТекстСообщения = НСтр("ru = 'Ошибка при отправке эл.документов.
				|(подробности см. в Журнале регистрации).'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Отправка эл.документов'"),
				ТекстОшибки,
				ТекстСообщения);
			КонецПопытки;
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			ПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "ПрофильНастроекЭДО");
			FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
			Если FTPСоединение = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			КаталогИсхДокументов = АдресОтправителя;
			
			ПодготовитьПутьFTP(КаталогИсхДокументов);
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			
			ТекстОшибки = "";
			Попытка
				FTPСоединение.УстановитьТекущийКаталог(КаталогИсхДокументов);
			Исключение
				СоздатьКаталогиFTP(FTPСоединение, КаталогИсхДокументов, , ТекстОшибки);
			КонецПопытки;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьФайлНаFTP(FTPСоединение, ФайлХМЛ.ПолноеИмя, ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя + ?(Прав(АдресОтправителя, 1) <> "\", "\", "");
			КопироватьФайл(ФайлХМЛ.ПолноеИмя, АдресКаталога + ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	// Корневой элемент
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подтверждение");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьХМЛ.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
	
		Если Найти(Сообщение.Тема, "Подтверждение") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Найти(Сообщение.Тема, "Обмен эл.документами:") Тогда
			
			Для Каждого Вложение ИЗ Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
		
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя
	// и сохраним файл на диск
	ИмяВременногоФайлаЗИП = ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = РабочийКаталог("input", КлючУникальности);
	
	Попытка
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
			ТекстОшибки, ТекстСообщения);
		ЗипЧтение.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецПопытки;

	ЗипЧтение.Закрыть();
	УдалитьФайлы(ИмяВременногоФайлаЗИП);
	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации      = Неопределено;
	ФайлКарточки        = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если Найти(ТекФайл.Имя, "packageDescription") > 0 Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		ИначеЕсли Найти(ТекФайл.Имя, "card") > 0 Тогда
			ФайлКарточки = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Зашифрован = Ложь;
	
	Если НЕ ФайлИнформации = Неопределено Тогда
		// Определим в этом файле строку с отправителем и получателем
		// и признак шифрования и попытаемся найти соглашение
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДОтправителя = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Зашифрован ИЛИ Булево(ЧтениеХМЛ.Значение);
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДПолучателя = ЧтениеХМЛ.Значение;
			КонецЕсли;
				
		КонецЦикла;
		
		ЧтениеХМЛ.Закрыть();
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
		
		ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия10;
		
	КонецЕсли;
	
	Если НЕ ФайлКарточки = Неопределено Тогда
		
		ИДПолучателя  = Неопределено;
		ИДОтправителя = Неопределено;
		
		ОбъектXML = Новый ЧтениеXML;
		СтруктураЗначений = Новый Структура;
		
		Попытка
			ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
			ОбъектXML.Закрыть();
			ИДОтправителя = ЭД.Sender.Abonent.ID;
			ИДПолучателя  = ЭД.Receiver.Abonent.ID;
			Если ЭД.Description <> Неопределено
				И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
				И ЭД.Description.AdditionalData <> Неопределено
				И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
				И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					Если Свойство.Name = "Зашифрован" Тогда
						Зашифрован = Булево(Свойство.Value);
						Продолжить;
					КонецЕсли;
					Если Свойство.Name = "ВерсияФорматаПакета" Тогда
						ВерсияФорматаПакета = ВерсияФорматаИзСтроки(Свойство.Value);
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
			
		Исключение
			
			ОбъектXML.Закрыть();
			
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если (ФайлИнформации = Неопределено И ФайлКарточки = Неопределено)
		ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл с описанием или нет обмена
		
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверим, что такого транспортного пакета от этого отправителя еще не было
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПрисоединенныйФайл
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	|	И ЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление",  Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",   ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель",  ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	
	УдалитьФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкиСоглашения.НастройкаЭДО);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      НастройкиСоглашения.СпособОбменаЭД);
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", НастройкиСоглашения.СертификатОрганизацииДляРасшифровки);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован",          Зашифрован);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда
		ДокументПакет = Неопределено;
	КонецЕсли;
	
	Возврат ДокументПакет;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

// Обновляет статусы электронных документов.
//
// Параметры: 
//  МассивДокументов - массив ссылок на электронные документы, состояние которых надо обновить,
//  ПризнакПодписи - булево, признак того, что документы подписаны ЭЦП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
			Если ((ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				
			ИЛИ (ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение))
			
			И Не (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			 		И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НачатьТранзакцию();
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'подготовка к отправке ЭД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла, , , ПрисоединенныйФайл);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыСоглашения.СпособОбменаЭД) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
		
	Если СертификатКонтрагентаШифрования = Неопределено ИЛИ СертификатОрганизацииШифрования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьСрокДействияСертификата(СертификатОрганизацииШифрования);
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ФайлСертификата.Получить();
		
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция НайтиСоздатьПакетЭД(ТЗ_ПЭД, ПараметрыСоглашения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗашифрованы = Ложь;
	СертификатШифрования = Неопределено;
	ТребуетсяШифрованиеНаКлиенте = Ложь;
	ИспользоватьЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
	"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если ИспользоватьЭЦП Тогда
		Если ЗначениеЗаполнено(ПараметрыСоглашения.СертификатКонтрагентаДляШифрования)
			И ПараметрыСоглашения.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
			И ПараметрыСоглашения.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И ПараметрыСоглашения.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			Если ПараметрыСоглашения.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И ПараметрыСоглашения.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				
				СертификатШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования.Получить();
				Если ЗначениеЗаполнено(СертификатШифрования) Тогда
					ДанныеЗашифрованы = Истина;
					
					СертификатКриптографии = Новый СертификатКриптографии(СертификатШифрования);
					СертификатШифрования   = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
					СертификатКриптографии.Субъект);
					
					Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						ТребуетсяШифрованиеНаКлиенте = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПЭД                         = Документы.ПакетЭД.СоздатьДокумент();
	ПЭД.Дата                    = ТекущаяДатаСеанса();
	Если ПараметрыСоглашения.Свойство("Отправитель") Тогда
		ПЭД.Отправитель             = ПараметрыСоглашения.Отправитель;
	КонецЕсли;
	Если ПараметрыСоглашения.Свойство("Получатель") Тогда
		ПЭД.Получатель              = ПараметрыСоглашения.Получатель;
	КонецЕсли;
	ПЭД.Контрагент              = ПараметрыСоглашения.Контрагент;
	ПЭД.Организация             = ПараметрыСоглашения.Организация;
	
	ПЭД.СтатусПакета            = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПЭД.Направление             = Перечисления.НаправленияЭД.Исходящий;
	ПЭД.ДанныеЗашифрованы       = ДанныеЗашифрованы;
	ПЭД.СертификатШифрования    = СертификатШифрования;
	ПЭД.ВерсияФорматаПакета     = ПараметрыСоглашения.ВерсияФорматаПакета;
	
	Если ПараметрыСоглашения.Свойство("АдресОтправителя") Тогда
		ПЭД.АдресРесурсаОрганизации = ПараметрыСоглашения.АдресОтправителя;
	КонецЕсли;
	Если ПараметрыСоглашения.Свойство("АдресПолучателя") Тогда
		ПЭД.АдресРесурсаКонтрагента = ПараметрыСоглашения.АдресПолучателя;
	КонецЕсли;
	
	Если ПараметрыСоглашения.Свойство("СоглашениеЭД") 
		И ПараметрыСоглашения.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
		
		ПЭД.НастройкаЭДО            = ПараметрыСоглашения.СоглашениеЭД;
		СпособОбменаЭД              = ПараметрыСоглашения.СоглашениеЭД.СпособОбменаЭД;
		ПрограммаБанка              = ПараметрыСоглашения.СоглашениеЭД.ПрограммаБанка;
		АдресПолучателя             = "";
	Иначе
		
		ПЭД.НастройкаЭДО            = ПараметрыСоглашения.НастройкаЭДО;
		ПЭД.ПрофильНастроекЭДО      = ПараметрыСоглашения.ПрофильНастроекЭДО;
		СпособОбменаЭД              = ПараметрыСоглашения.СпособОбменаЭД;
		ПрограммаБанка              = "";
		АдресПолучателя             = ПараметрыСоглашения.АдресПолучателя;
	КонецЕсли;
	ПЭД.СпособОбменаЭД          = СпособОбменаЭД;
	
	ПЭД.Записать();
	
	НовСтрока                              = ТЗ_ПЭД.Добавить();
	НовСтрока.ПЭД                          = ПЭД.Ссылка;
	НовСтрока.СпособОбменаЭД               = СпособОбменаЭД;
	НовСтрока.АдресРесурсаПолучателя       = АдресПолучателя;
	НовСтрока.ТребуетсяШифрованиеНаКлиенте = ТребуетсяШифрованиеНаКлиенте;
	НовСтрока.ВерсияФорматаПакета          = ПараметрыСоглашения.ВерсияФорматаПакета;
	НовСтрока.ПрограммаБанка               = ПрограммаБанка;
	
	Возврат ПЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ВернутьМассивОтпечатковСтруктуры(СтруктураСертификатов) Экспорт
	
	МассивВозврата = Новый Массив;
	Для Каждого СтруктураКлиентскогоСертификата Из СтруктураСертификатов Цикл
		МассивВозврата.Добавить(СтруктураКлиентскогоСертификата.Отпечаток);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты получения ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВидЭД, СоглашениеЭД, ПрофильНастроекЭДО");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД)
				
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись даты отправки ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("ДоговорКонтрагента",   Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ПараметрыЭД.Вставить("Партнер",          Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Версии электронных документов

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функционал клиент банка

Процедура СформироватьЭДПрисоединенныйФайлПакетаБанка(Конверт)
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Конверт.НастройкаЭДО,
								"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов");
	Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
	
	ЭД = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент;
	
	Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	URI = "urn:x-obml:1.0";
	ТипMessage = ФабрикаXDTO.Тип("urn:x-obml:1.0","CMSDETACHED");
	Message = ФабрикаXDTO.Создать(ТипMessage);
	ТипData = ТипMessage.Свойства[0].Тип;
	Data = ФабрикаXDTO.Создать(ТипData);
	Data.ContentType = "application/xml";
	Data.__content = Данные;
	Message.data = Data;
		
	Для Каждого СтрокаПодписи ИЗ ЭД.ЭлектронныеЦифровыеПодписи Цикл
		Message.signature.Добавить(СтрокаПодписи.Подпись.Получить());
	КонецЦикла;
	
	ПутьКФайлуОтправки = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПутьКФайлуОтправки);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(Запись,Message,"signed",URI,,НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
				
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");

	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсИсходящихДокументов);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсВходящихДокументов);
	КонецЕсли;
		
	ПоместитьПакетЭДВКонверт(Конверт, ПутьКФайлуОтправки);
	
	УдалитьФайлы(ПутьКФайлуОтправки);
	
КонецПроцедуры

Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол)
	
	АдресСайта = СокрЛП(АдресСайта);
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта, 8);
		ЗащищенноеСоединение = ложь;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол = "https";
		Адрес = Сред(АдресСайта, 9);
		ЗащищенноеСоединение = истина;
	КонецЕсли;
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураПараметров.Свойство("ИдентификаторДопФайла", УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
													ВладелецЭД,
													Файл.ИмяБезРасширения,
													СтрЗаменить(Файл.Расширение, ".", ""),
													ВремяСозданияЭД,
													ВремяСозданияЭД,
													АдресФайла,
													Неопределено,
													,
													Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД));
		
		УдалитьФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
			ВспомогательнаяСтруктура.Вставить("Организация", СтруктураПараметров.СтруктураЭД.Организация);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", СтруктураПараметров.СтруктураЭД.СоглашениеЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД", СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		
		ДатаКаноническогоВида = Формат(Год(ИскомаяДата),"ЧГ=0") + Формат(Месяц(ИскомаяДата), "ЧЦ=2; ЧВН=")
			+ Формат(День(ИскомаяДата), "ЧЦ=2; ЧВН=") + Формат(Час(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=")
			+ Формат(Минута(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

Процедура ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТестоваяСтрока = "Тестовая строка 1С: Предприятие";
	ТекстовыйДокумент.УстановитьТекст(ТестоваяСтрока);
	ТекстовыйДокумент.Записать(ВремФайл);
	ФайлТест = Новый Файл(ВремФайл);
		
	ЗаписатьФайлНаFTP(FTPСоединение, ВремФайл, ФайлТест.Имя, Истина, ТекстОшибки);
	
	УдалитьФайлы(ВремФайл);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлПолучатель = ПолучитьИмяВременногоФайла();
	
	ПолучитьФайлСFTP(FTPСоединение, ФайлТест.Имя, ФайлПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПолучатель);
	СтрокаРезультата = ТекстовыйДокумент.ПолучитьТекст();
	УдалитьФайлы(ФайлПолучатель);
	Если НЕ СтрокаРезультата = ТестоваяСтрока Тогда
		ШаблонСообщения = НСтр("ru = '%1 %2.'");
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("126");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСообщения,
			FTPСоединение.ТекущийКаталог());
		Возврат;
	КонецЕсли;
	
	УдалитьФайлFTP(FTPСоединение, ФайлТест.Имя, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура ПолучитьФайлСFTP(FTPСоединение, Источник, ИмяВыходногоФайла, ЭтоТест = Ложь, РезультатТеста = Неопределено)
	
	Попытка
		FTPСоединение.Получить(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("128");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

	
КонецПроцедуры

Процедура НайтиФайлыВКаталогеFTP(FTPСоединение, Путь, Маска, ЭтоТест, РезультатТеста, МассивФайлов)
	
	Попытка
		Если Маска = Неопределено Тогда
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь);
		Иначе
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь, Маска);
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("125");
		
		Если НЕ ЭтоТест = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьФайлFTP(FTPСоединение, Путь, РезультатТеста = Неопределено, ЭтоТест = Ложь)
		
	Попытка
		FTPСоединение.Удалить(Путь);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("129");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

Процедура ПроверитьМодификациюОбъектаДляОбменаЭД(Источник, ПризнакИзменения = Ложь)
	
	Если ПризнакИзменения ИЛИ Источник.ЭтоНовый() Тогда
		ЗарегистрироватьОбъект = Истина;
	Иначе
		ЗарегистрироватьОбъект = НадоЗарегистрироватьОбъект(Источник, Источник.Метаданные());
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗарегистрироватьОбъект", ЗарегистрироватьОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с журналом регистрации

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
		ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
		НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
		
		МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
		МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
		МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
		МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
		МенеджерЗаписи.Дата               = ТекущаяДатаСеанса();
		МенеджерЗаписи.Пользователь       = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Ответственный      = СсылкаНаЭД.Ответственный;
		МенеджерЗаписи.Комментарий        = СсылкаНаЭД.Описание;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение модифицированности объекта, аналогичные подсистеме обмена данными

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

Функция НадоЗарегистрироватьОбъект(Источник, ОбъектМетаданных)
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();	
	ТаблицаРеквизитовРегистрации = ЭлектронныеДокументыПовтИсп.ПолучитьТаблицуКлючевыхРеквизитовОбъекта(ИмяОбъекта);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// Если перечень реквизитов не задан, то считаем, что объект модифицирован всегда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дошли до конца, то объект не изменился по реквизитам регистрации;
	// Регистрация не нужна
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1, Таблица2 - таблицы значений, реквизиты, которые надо проверить на совпадение,
//  РеквизитыОбъекта   - строка, содержит реквизиты, перечисленные через запятую,
//  ДопПараметры       - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Реквизиты шапки";
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРекв.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРекв.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = "Табличная часть <" + ИмяТабличнойЧасти + ">";
			НовСтрокаДереваРекв = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРекв.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры


// Получает фактическую дату установки электронной подписи и двоичных данных подписи
//
// Параметры:
//  ДвоичныеДанныеПодписи - ДвоичныеДанные - подпись
//
// Возвращаемое значение - Дата или Неопределено.
//
Функция ДатаУстановкиПодписи(ДвоичныеДанныеПодписи) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеПодписи.Записать(ИмяВременногоФайла);
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
	Символ = ЧтениеТекста.Прочитать(1);
	Пока Символ <> Неопределено Цикл
		Если КодСимвола(Символ) = 15 Тогда
			Символ = ЧтениеТекста.Прочитать(2);
			Если КодСимвола(Символ, 1) = 23 И КодСимвола(Символ, 2) = 13 Тогда
				ДатаПодписания = ЧтениеТекста.Прочитать(12);
				ДатаПодписиНайдена = Истина;
				ЧтениеТекста.Закрыть();
				УдалитьФайлы(ИмяВременногоФайла);
				Возврат МестноеВремя(Дата("20" + ДатаПодписания));
			КонецЕсли;
		КонецЕсли;
		Символ = ЧтениеТекста.Прочитать(1);
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат Неопределено;

КонецФункции

// Только для внутреннего использования
Функция СлужебныйЭДБанка(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭДПрисоединенныеФайлы.Ссылка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(перечисление.ВидыЭД.ДопДанные)";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭД);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли
	
КонецФункции

// Возвращает ссылку на временное хранилище двоичных данных архива с дополнительными файлами каталога.
//
// Параметры:
//  МассивФайлов - массив - содержить ссылки на временное хранилище дополнительного файла.
//
// Возвращаемое значение:
//  Строка - ссылка на временное хранилище
//
Функция АрхивДополнительныхФайлов(МассивФайлов) Экспорт
	
	ВремПапка = ЭлектронныеДокументыСлужебныйВызовСервера.ТекущийКаталогВременныхФайлов()
				+ Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремПапка);
	УдалитьФайлы(ВремПапка, "*");
	Для Каждого Элемент Из МассивФайлов Цикл
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.АдресВременногоХранилища);
		СоздатьКаталог(ВремПапка + Элемент.ИдТовара + "\");
		ДвоичныеДанныеФайла.Записать(ВремПапка + Элемент.ИдТовара + "\" + Элемент.ИмяФайла);
	КонецЦикла;
	Архив = ПолучитьИмяВременногоФайла();
	Zip = Новый ЗаписьZipФайла(Архив);
	Zip.Добавить(
			ВремПапка + "*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Попытка
		Zip.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		УдалитьФайлы(Архив);
		УдалитьФайлы(ВремПапка);
		Возврат Неопределено;
	КонецПопытки;
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(Архив);
	УдалитьФайлы(ВремПапка);
	УдалитьФайлы(Архив);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива);
	
КонецФункции

// Формирует хэш для авторизации на ресурсе банка
//
// Параметры
//  Логин  - Строка - логин
//  Пароль  - Строка - пароль
//
// Возвращаемое значение:
//   Строка   - хэш авторизации
//
Функция ХэшАвторизации(Логин, Пароль) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Логин + ":" + Пароль);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.ANSI);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	УдалитьФайлы(ВремФайл);
	Возврат Base64Строка(ДвоичныеДанные);
	
КонецФункции

Функция ВерсияПакетаЭД(ЭД) Экспорт
	
	Если ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ВерсияФормата = ФорматПакетаЭД(ЭД);
	Иначе
		Если ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			Или ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			Или ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВерсияФормата = ФорматПакетаЭД(ЭД.ЭлектронныйДокументВладелец);
			
		Иначе
			ВерсияФормата = ЭД.СоглашениеЭД.ВерсияФорматаПакета;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ФорматПакетаЭД(ЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВерсияФормата = Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ВерсияФормата = Выборка.ВерсияФорматаПакета;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ВерсияФорматаИзСтроки(Версия)
	Если Версия = "2" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия20;
	ИначеЕсли Версия = "3" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФНС(ВидЭД) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьНеотправленноеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ПодписанЭЦП,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ПодписанЭЦП, ЛОЖЬ) КАК ВладелецПодписанЭЦП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В(&СтатусыНеотправленногоЭД)";
	
	СтатусыНеотправленногоЭД = Новый Массив;
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Запрос.УстановитьПараметр("СтатусыНеотправленногоЭД", СтатусыНеотправленногоЭД);
	Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭД.ИзвещениеОПолучении);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
		
		Если Выборка.ВладелецПодписанЭЦП И Не Выборка.ПодписанЭЦП Тогда
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		Иначе
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		КонецЕсли;
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет есть ли подтверждение о доставке
// для документов ФНС
Функция ЕстьНепринятоеПодтверждение(ВладелецФайла, СостояниеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
		Возврат Истина;
	КонецЕсли;
	
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоОтветныйТитул(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

