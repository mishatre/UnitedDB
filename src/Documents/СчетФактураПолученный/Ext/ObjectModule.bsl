Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

Перем мДокументЗаполнен Экспорт;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("СтавкаНП");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

#Если Клиент Тогда

Процедура СобратьДанныеДляПечати(Ссылка, ДанныеДляПечати) Экспорт
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Корректировочный = Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;

	Если Корректировочный Тогда
		КорректируемыеСчетаФактуры = Новый ТаблицаЗначений;
		КорректируемыеСчетаФактуры.Колонки.Добавить("НомерСчетаФактуры");
		КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаСчетаФактуры");
		КорректируемыеСчетаФактуры.Колонки.Добавить("НомерИсправления");
		КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаИсправления");
	КонецЕсли;

	Для Каждого СтрДокОснования Из ДокументыОснования Цикл
		
		// Получить экземпляр документа на печать
		Если Не ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
			Продолжить;
		ИначеЕсли Не СтрДокОснования.ДокументОснование.Проведен Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярДанныхДляПечати = Неопределено;
		ТипОснования = ТипЗнч(СтрДокОснования.ДокументОснование);
		
		Если ТипОснования      = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоПоступлениюТоваров(СтрДокОснования.ДокументОснование);
		ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
			или ТипОснования      = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") 
			Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваров(СтрДокОснования.ДокументОснование);
		ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровОтПокупателя(СтрДокОснования.ДокументОснование);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
			ДанныеДляПечати    = СобратьДанныеПоПоступлениюТоваровУслугВНТТ(СтрДокОснования.ДокументОснование);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетОПродажахКомиссионера(СтрДокОснования.ДокументОснование);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеДопРасходам(СтрДокОснования.ДокументОснование);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениеПоступленияТоваровУслугНДС(СтрДокОснования.ДокументОснование)
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеПоАвансовыйОтчет(СтрДокОснования.ДокументОснование)
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			Если Корректировочный Тогда
				ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(СтрДокОснования.ДокументОснование, Ссылка);
			Иначе
				ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиИсправленияСчетаФактуры(СтрДокОснования.ДокументОснование, Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
			Если ДанныеДляПечати = Неопределено Тогда
				ДанныеДляПечати = ЭкземплярДанныхДляПечати;
			Иначе
				Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
					
					Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
						СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
						НоваяТабЧасть = СтрДанных.Значение;
						
						Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
							СтрокаТабЧасти = СтараяТабЧасть.Добавить();
							
							Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
								Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
									СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
						
					Иначе
						Если Не ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Корректировочный Тогда
			МассивСтрокОснований = Ссылка.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", СтрДокОснования.ДокументОснование));
			Для Каждого СтрокаМассива ИЗ МассивСтрокОснований Цикл
				НовоеОснование = КорректируемыеСчетаФактуры.Добавить();	
				// Номер и дата исходного счета-фактуры
				НовоеОснование.НомерСчетаФактуры 	= СокрЛП(СтрокаМассива.НомерИсходногоДокумента);
				НовоеОснование.ДатаСчетаФактуры 	= Формат(СтрокаМассива.ДатаИсходногоДокумента, "ДЛФ='ДД'");
				// Номер и дата исправления исходного счета-фактуры
				Если ЗначениеЗаполнено(СтрокаМассива.НомерИсправленияИсходногоДокумента) Тогда
					НовоеОснование.НомерИсправления = СокрЛП(СтрокаМассива.НомерИсправленияИсходногоДокумента);
					НовоеОснование.ДатаИсправления	= Формат(СтрокаМассива.ДатаИсправленияИсходногоДокумента, "ДЛФ='ДД'");
				Иначе
					НовоеОснование.НомерИсправления	= "--";
					НовоеОснование.ДатаИсправления	= "--";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
	Если Корректировочный И ДанныеДляПечати <> Неопределено Тогда
		
		КорректируемыеСчетаФактуры.Свернуть("НомерСчетаФактуры,ДатаСчетаФактуры,НомерИсправления,ДатаИсправления");
		ДанныеДляПечати.Вставить("КорректируемыеСчетаФактуры", КорректируемыеСчетаФактуры);
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		+"НаименованиеТовара,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
	КонецЕсли; 	

КонецПроцедуры

// Функция собирает данные по документу основанию ОтчетКомиссионераОПродажах и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетОПродажахКомиссионера(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  ДокОснование);
	Запрос.УстановитьПараметр("Курс",      ДокОснование.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Покупатель,
	|	ОтчетКомиссионераОПродажах.Подразделение КАК Подразделение,
	|	ОтчетКомиссионераОПродажах.Контрагент КАК Поставщик,
	|	ОтчетКомиссионераОПродажах.СуммаДокумента КАК Сумма,
	|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &Документ";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Если ВыборкаСтрокТовары.Сумма = NULL Тогда
			Продолжить;
		КонецЕсли;	
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 1;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.ЕдиницаИзмеренияКод = "";
		Строчка.СтавкаНДС           = Шапка.СтавкаНДС;
		Строчка.СуммаВключаетНДС	= Истина;
		СуммаНДС                    = УчетНДС.РассчитатьСуммуНДС(ВыборкаСтрокТовары.Сумма, Шапка.УчитыватьНДС, Шапка.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.СуммаНДС            = СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма - СуммаНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	
	Если Товары.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе	
        Возврат ДанныеДляПечати;
	КонецЕсли;	

КонецФункции // СобратьДанныеПоОтчетОПродажахКомиссионера()

// Функция собирает данные по документу основанию Поступление и 
// структуру с данными
// 
Функция СобратьДанныеПоПоступлениюТоваров(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Организация 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	Подразделение,
	|	Контрагент            КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс", ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ВложенныйЗапрос.НомерСтроки,
	                        |	ВложенныйЗапрос.Товар,
	                        |	ВложенныйЗапрос.Товар.НаименованиеПолное КАК ТоварНаименование,
	                        |	NULL КАК ОбъектСтроительства,
	                        |	NULL КАК ОбъектСтроительстваНаименование,
	                        |	ВложенныйЗапрос.СтранаПроисхождения,
	                        |	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	                        |	ВложенныйЗапрос.НомерГТД,
	                        |	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
	                        |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	                        |	ВложенныйЗапрос.Количество,
	                        |	ВложенныйЗапрос.Цена,
	                        |	ВложенныйЗапрос.Сумма,
	                        |	ВложенныйЗапрос.СуммаНДС,
	                        |	ВложенныйЗапрос.СтавкаНДС,
	                        |	ВложенныйЗапрос.Характеристика,
	                        |	ВложенныйЗапрос.Серия,
	                        |	1 КАК ID,
	                        |	ВложенныйЗапрос.СтранаПроисхожденияКод,
	                        |	ВложенныйЗапрос.ЕдиницаИзмеренияКод
	                        |ИЗ
	                        |	(ВЫБРАТЬ
	                        |		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	                        |		ТаблицаПоТоварам.Номенклатура КАК Товар,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                        |		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
	                        |		ТаблицаПоТоварам.Цена КАК Цена,
	                        |		ТаблицаПоТоварам.Сумма КАК Сумма,
	                        |		ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
	                        |		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
	                        |		ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод
	                        |	ИЗ
	                        |		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаПоТоварам
	                        |	ГДЕ
	                        |		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
	                        |	
	                        |	СГРУППИРОВАТЬ ПО
	                        |		ТаблицаПоТоварам.НомерСтроки,
	                        |		ТаблицаПоТоварам.Номенклатура,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения,
	                        |		ТаблицаПоТоварам.СтавкаНДС,
	                        |		ТаблицаПоТоварам.Цена,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	                        |		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры,
	                        |		ТаблицаПоТоварам.Сумма,
	                        |		ТаблицаПоТоварам.СуммаНДС,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код) КАК ВложенныйЗапрос
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ТаблицаПоУслугам.НомерСтроки,
	                        |	ТаблицаПоУслугам.Номенклатура,
	                        |	ТаблицаПоУслугам.Содержание,
	                        |	NULL,
	                        |	NULL,
	                        |	ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка),
	                        |	"""",
	                        |	"""",
	                        |	"""",
	                        |	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	                        |	ТаблицаПоУслугам.Количество,
	                        |	ТаблицаПоУслугам.Цена,
	                        |	ТаблицаПоУслугам.Сумма,
	                        |	ТаблицаПоУслугам.СуммаНДС,
	                        |	ТаблицаПоУслугам.СтавкаНДС,
	                        |	NULL,
	                        |	NULL,
	                        |	2,
	                        |	"""",
	                        |	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код
	                        |ИЗ
	                        |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаПоУслугам
	                        |ГДЕ
	                        |	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
							|
							|УПОРЯДОЧИТЬ ПО
	               			|	ID,
	               			|	НомерСтроки";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.ID = 1 
			ИЛИ ВыборкаСтрокТовары.ID = 3 
			ИЛИ ВыборкаСтрокТовары.ID = 4 Тогда
			ЕстьТовары = Истина;                            
		КонецЕсли;
		
		Строчка = Товары.Добавить();
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование  + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаСтрокТовары.ОбъектСтроительства) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.ОбъектСтроительства;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ОбъектСтроительстваНаименование;
		КонецЕсли;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена      = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС  = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма     = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;
	
	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ВозвратТоваровПоставщику и 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваров(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Организация 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	Подразделение,
	|	Контрагент            КАК Поставщик,
	|	""он же""             КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.ВозвратТоваровПоставщику","Документ.ВозвратТоваровПоставщикуИзНТТ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Грузоотправитель","НеИспользуется, 
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
		|			ТОГДА ""он же"" 
		|		ИНАЧЕ Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель");
	КонецЕсли; 
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс", ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Товар,
		|	ВложенныйЗапрос.Товар.НаименованиеПолное КАК ТоварНаименование,
		|	ВложенныйЗапрос.СтранаПроисхождения,
		|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
		|	ВложенныйЗапрос.НомерГТД,
		|	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Серия,
		|	ВложенныйЗапрос.ДокументПоступления,
		|	ВложенныйЗапрос.СтранаПроисхожденияКод,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияКод
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура КАК Товар,
		|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
		|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
		|		-ТаблицаПоТоварам.Цена КАК Цена,
		|		-ТаблицаПоТоварам.Сумма КАК Сумма,
		|		-ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
		|		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
		|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
		|		ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
		|		ТаблицаПоТоварам.ДокументПоступления КАК ДокументПоступления,
		|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПоТоварам
		|	ГДЕ
		|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПоТоварам.НомерСтроки,
		|		ТаблицаПоТоварам.Номенклатура,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения,
		|		ТаблицаПоТоварам.СтавкаНДС,
		|		ТаблицаПоТоварам.Цена,
		|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
		|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
		|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
		|		ТаблицаПоТоварам.СерияНоменклатуры,
		|		ТаблицаПоТоварам.Сумма,
		|		ТаблицаПоТоварам.СуммаНДС,
		|		ТаблицаПоТоварам.ДокументПоступления,
		|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код,
		|		ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст,"Документ.ВозвратТоваровПоставщику","Документ.ВозвратТоваровПоставщикуИзНТТ");
	КонецЕсли;
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ДокументПоступления) Тогда

			Строчка = Товары.Добавить();
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование  + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
			Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
			Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
			Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
			Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
			Строчка.Количество          = ВыборкаСтрокТовары.Количество;
			Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
			Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
			Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
			Строчка.Цена      = ВыборкаСтрокТовары.Цена;
			Строчка.СтавкаНДС = ВыборкаСтрокТовары.СтавкаНДС;
			Строчка.СуммаНДС  = ВыборкаСтрокТовары.СуммаНДС;
			Строчка.Сумма     = ВыборкаСтрокТовары.Сумма;
			
		КонецЕсли;

	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию ВозвратТоваровОтПокупателя и 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровОтПокупателя(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация КАК Грузополучатель,
	|	Подразделение,
	|	Контрагент            КАК Поставщик,
	|	""он же"" КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс", ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность", ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ВозвратТоваровОтПокупателяТовары.НомерСтроки КАК НомерСтроки,
	                        |	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Товар,
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СТРОКА(1000)) КАК ПредставлениеСтраны,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	                        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                        |	СУММА(ВозвратТоваровОтПокупателяТовары.Количество) КАК Количество,
	                        |	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
	                        |	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
	                        |	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры КАК Серия,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	                        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод
	                        |ИЗ
	                        |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	                        |ГДЕ
	                        |	ВозвратТоваровОтПокупателяТовары.Ссылка = &ТекущийДокумент
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	                        |	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	                        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
	                        |	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.Цена,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД,
	                        |	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры,
	                        |	ВозвратТоваровОтПокупателяТовары.Сумма,
	                        |	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.НомерГТД.Представление,
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	                        |	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СТРОКА(1000)),
	                        |	ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры.СтранаПроисхождения.Код,
	                        |	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.Товар.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(НЕ ЗначениеЗаполнено(СокрЛП(ВыборкаСтрокТовары.ПредставлениеСтраны)), ВыборкаСтрокТовары.СтранаПроисхождения, СокрЛП(ВыборкаСтрокТовары.ПредставлениеСтраны));
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = СокрЛП(ВыборкаСтрокТовары.ПредставлениеГТД);
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена      = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС  = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма     = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию Поступление товаров и услуг в НТТ 
// и возвращает структуру с данными
// 
Функция СобратьДанныеПоПоступлениюТоваровУслугВНТТ(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация           КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	Контрагент            КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ КАК ПоступлениеТоваровУслугВНТТ
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугВНТТ.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс",            ДокОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       ДокОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ДокОснование.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	                        |	ВложенныйЗапрос.Товар,
	                        |	ВложенныйЗапрос.Товар.НаименованиеПолное КАК ТоварНаименование,
	                        |	ВложенныйЗапрос.Характеристика,
	                        |	ВложенныйЗапрос.Серия,
	                        |	ВложенныйЗапрос.СтранаПроисхождения,
	                        |	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	                        |	ВложенныйЗапрос.НомерГТД,
	                        |	ВложенныйЗапрос.НомерГТД.Представление КАК ПредставлениеГТД,
	                        |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	                        |	ВложенныйЗапрос.Количество,
	                        |	ВложенныйЗапрос.Цена,
	                        |	ВложенныйЗапрос.Сумма,
	                        |	ВложенныйЗапрос.СуммаНДС,
	                        |	ВложенныйЗапрос.СтавкаНДС,
	                        |	ВложенныйЗапрос.СтранаПроисхожденияКод,
	                        |	ВложенныйЗапрос.ЕдиницаИзмеренияКод
	                        |ИЗ
	                        |	(ВЫБРАТЬ
	                        |		ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	                        |		ТаблицаПоТоварам.Номенклатура КАК Товар,
	                        |		ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                        |		СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
	                        |		ТаблицаПоТоварам.Цена КАК Цена,
	                        |		ТаблицаПоТоварам.Сумма КАК Сумма,
	                        |		ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
	                        |		ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод
	                        |	ИЗ
	                        |		Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ТаблицаПоТоварам
	                        |	ГДЕ
	                        |		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
	                        |	
	                        |	СГРУППИРОВАТЬ ПО
	                        |		ТаблицаПоТоварам.НомерСтроки,
	                        |		ТаблицаПоТоварам.Номенклатура,
	                        |		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения,
	                        |		ТаблицаПоТоварам.СтавкаНДС,
	                        |		ТаблицаПоТоварам.Цена,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	                        |		ТаблицаПоТоварам.Сумма,
	                        |		ТаблицаПоТоварам.СуммаНДС,
	                        |		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код,
	                        |		ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код) КАК ВложенныйЗапрос
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ
	                        |	ТаблицаПоУслугам.НомерСтроки,
	                        |	ТаблицаПоУслугам.Номенклатура,
	                        |	ТаблицаПоУслугам.Содержание,
	                        |	"""",
	                        |	"""",
	                        |	ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка),
	                        |	"""",
	                        |	"""",
	                        |	"""",
	                        |	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	                        |	ТаблицаПоУслугам.Количество,
	                        |	ТаблицаПоУслугам.Цена,
	                        |	ТаблицаПоУслугам.Сумма,
	                        |	ТаблицаПоУслугам.СуммаНДС,
	                        |	ТаблицаПоУслугам.СтавкаНДС,
	                        |	NULL,
	                        |	NULL
	                        |ИЗ
	                        |	Документ.ПоступлениеТоваровУслугВНТТ.Услуги КАК ТаблицаПоУслугам
	                        |ГДЕ
	                        |	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Товар) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		КонецЕсли;

		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваровУслугВНТТ()

// Функция собирает данные по документу основанию Поступление Доп. расходов и
// структуру с данными
// 
Функция СобратьДанныеДопРасходам(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст ="
	|	ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Покупатель,
	|	Подразделение,
	|	Контрагент  КАК Поставщик,
	|	Содержание            КАК СтатьяЗатрат,
	|	ВалютаДокумента       КАК Валюта,
	|	СуммаДокумента        КАК СуммаДокумента,
	|	(ВложенныйЗапрос.СуммаНДС + ПоступлениеДопРасходов.СуммаНДС) КАК СуммаНДС,
	|	СтавкаНДС,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	ВложенныйЗапрос.СуммаДенег
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ПоступлениеДопРасходовТовары.Сумма)    КАК СуммаДенег,
	|		СУММА(ПоступлениеДопРасходовТовары.СуммаНДС) КАК СуммаНДС
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ДокументОснование) КАК ВложенныйЗапрос,
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ДокументОснование
	|";

	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.СтатьяЗатрат;
	Строчка.ТоварНаименование   = Шапка.СтатьяЗатрат;
	Строчка.СтранаПроисхождения = "";
	Строчка.СтранаПроисхожденияКод = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	Строчка.ЕдиницаИзмеренияКод = "";
	Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
	СуммаДока         = Шапка.СуммаДокумента + 
	                    ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	Строчка.СтавкаНДС = Шапка.СтавкаНДС;
	Строчка.СуммаНДС  = Шапка.СуммаНДС;
	Строчка.Сумма     = Шапка.СуммаДокумента - ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	Строчка.Цена      = Строчка.Сумма;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеДопРасходам()

// Функция собирает данные по документу основанию ОтражениеПоступленияТоваровИУслугНДС и 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениеПоступленияТоваровУслугНДС(ДокОснование)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация           КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	Контрагент            КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	ИСТИНА		          КАК УчитыватьНДС,
	|	ЛОЖЬ			      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ОтражениеПоступленияТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеПоступленияТоваровИУслугНДС.Ссылка = &ДокументОснование";
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.ДокументОснование.Ссылка);
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ТаблицаПоТоварамИУслугам.НомерСтроки КАК НомерСтроки,
	                        |	ТаблицаПоТоварамИУслугам.Номенклатура КАК Товар,
	                        |	ТаблицаПоТоварамИУслугам.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	                        |	ТаблицаПоТоварамИУслугам.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                        |	0 КАК Количество,
	                        |	ТаблицаПоТоварамИУслугам.Сумма КАК Цена,
	                        |	ТаблицаПоТоварамИУслугам.Сумма КАК Сумма,
	                        |	ТаблицаПоТоварамИУслугам.СуммаНДС КАК СуммаНДС,
	                        |	ТаблицаПоТоварамИУслугам.СтавкаНДС КАК СтавкаНДС,
	                        |	ТаблицаПоТоварамИУслугам.СтранаПроисхождения,
	                        |	ТаблицаПоТоварамИУслугам.НомерГТД,
	                        |	ТаблицаПоТоварамИУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	                        |	ТаблицаПоТоварамИУслугам.СтранаПроисхождения.Код
	                        |ИЗ
	                        |	Документ.ОтражениеПоступленияТоваровИУслугНДС.ТоварыИУслуги КАК ТаблицаПоТоварамИУслугам
	                        |ГДЕ
	                        |	ТаблицаПоТоварамИУслугам.Ссылка = &ТекущийДокумент
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
	
КонецФункции

// Функция собирает данные по документу основанию АвансовыйОтчет и 
// структуру с данными
// 
Функция СобратьДанныеПоАвансовыйОтчет(ДокОснование)
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвансовыйОтчет.Организация,
	|	АвансовыйОтчет.Организация КАК Покупатель,
	|	АвансовыйОтчет.Организация КАК Грузополучатель,
	|	ВложенныйЗапрос.Контрагент КАК Поставщик,
	|	ВложенныйЗапрос.Контрагент КАК Грузоотправитель,
	|	АвансовыйОтчет.ВалютаДокумента КАК Валюта,
	|	АвансовыйОтчет.УчитыватьНДС КАК УчитыватьНДС,
	|	АвансовыйОтчет.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет,
	|	(ВЫБРАТЬ
	|		Товары.Поставщик КАК Контрагент
	|	ИЗ
	|		Документ.АвансовыйОтчет.Товары КАК Товары
	|	ГДЕ
	|		Товары.СчетФактура = &Ссылка
	|		И Товары.Ссылка = &ДокументОснование
	|		И Товары.ПредъявленСФ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Поставщик
	|	ИЗ
	|		Документ.АвансовыйОтчет.Прочее КАК Товары
	|	ГДЕ
	|		Товары.СчетФактура = &Ссылка
	|		И Товары.Ссылка = &ДокументОснование) КАК ВложенныйЗапрос
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ДокументОснование";
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ДокОснование);
	ЗапросПоТоварам.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ТаблицаПоТоварам.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.Количество,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	1 КАК ID,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|	И ТаблицаПоТоварам.СчетФактура = &Ссылка
	|	И ТаблицаПоТоварам.ПредъявленСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоПрочее.НомерСтроки,
	|	ТаблицаПоПрочее.Номенклатура,
	|	ТаблицаПоПрочее.Содержание,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка),
	|	""--"",
	|	""--"",
	|	""--"",
	|	""--"",
	|	0,
	|	0,
	|	ТаблицаПоПрочее.Сумма,
	|	ТаблицаПоПрочее.СуммаНДС,
	|	ТаблицаПоПрочее.СтавкаНДС,
	|	2,
	|	"""",
	|	""""
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК ТаблицаПоПрочее
	|ГДЕ
	|	ТаблицаПоПрочее.Ссылка = &ДокументОснование
	|	И ТаблицаПоПрочее.СчетФактура = &Ссылка
	|	И ТаблицаПоПрочее.ПредъявленСФ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();

		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);

	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
	
КонецФункции

// Функция собирает данные по документу-основанию КорректировкаПоступления и
// возвращает типизированную структуру с данными для печати исправленного счета-фактуры
// 
Функция СобратьДанныеДляПечатиИсправленияСчетаФактуры(ДокОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Организация,
	|	КорректировкаПоступления.Организация КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаПоступления.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаПоступления.Организация
	|		ИНАЧЕ КорректировкаПоступления.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаПоступления.Контрагент КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаПоступления.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаПоступления.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаПоступления.СуммаДокумента КАК Сумма,
	|	КорректировкаПоступления.ВалютаДокумента КАК Валюта,
	|	КорректировкаПоступления.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаПоступления.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ДокОснование);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТаблицаПоТоварам.Количество) КАК Количество,
	|	ТаблицаПоТоварам.Цена КАК Цена,
	|	ТаблицаПоТоварам.Сумма КАК Сумма,
	|	ТаблицаПоТоварам.СуммаНДС КАК СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоТоварам.НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.СерияНоменклатуры,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Товар,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Товар.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаТовары.СерияНоменклатуры КАК Серия,
	|	ТаблицаТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаТовары.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.СтавкаНДС,
	|	""Товары"" КАК ВидПоступления
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
	|	NULL,
	|	NULL,
	|	""Россия"",
	|	""Россия"",
	|	"""",
	|	"""",
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	""Услуги""
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК ТаблицаПоУслугам
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПоступления,
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    	
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Покупатель = Шапка.Покупатель;
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Ссылка, "Дата,Номер, НомерВходящегоДокумента,ДатаВходящегоДокумента");
    	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            РеквизитыСФ.НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             РеквизитыСФ.ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ЕстьТовары = ЕстьТовары ИЛИ ВыборкаСтрокТовары.ВидПоступления <> "Услуги";
		Строчка    = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	Если НЕ ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;
		
КонецФункции	

// Функция собирает данные по документу-основанию КорректировкаПоступления и
// возвращает типизированную структуру с данными для печати корректировочного 
// счета-фактуры
// 
Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДокОснование, Ссылка)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаПоступления.Организация,
	|	КорректировкаПоступления.Организация КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаПоступления.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаПоступления.Организация
	|		ИНАЧЕ КорректировкаПоступления.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаПоступления.Контрагент КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаПоступления.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаПоступления.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаПоступления.СуммаДокумента КАК Сумма,
	|	КорректировкаПоступления.ВалютаДокумента КАК Валюта,
	|	КорректировкаПоступления.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаПоступления.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	КорректировкаПоступления.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Грузополучатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.Грузоотправитель,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Покупатель = Шапка.Покупатель;
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"НомерВходящегоДокумента,ДатаВходящегоДокумента,
		|Исправление,НомерИсправления,ДатаИсправления,
		|НомерИсходногоДокумента,ДатаИсходногоДокумента");
    	
	ДанныеДляПечати.Вставить("Организация",       Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",             РеквизитыСФ.НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",              Формат(РеквизитыСФ.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'") + " г.");
	ДанныеДляПечати.Вставить("Поставщик",         Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Валюта",			  Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",        Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",  Шапка.СуммаВключаетНДС);
	
	ДанныеДляПечати.Вставить("НомерСчетаФактуры", РеквизитыСФ.НомерИсходногоДокумента);
	ДанныеДляПечати.Вставить("ДатаСчетаФактуры",  Формат(РеквизитыСФ.ДатаИсходногоДокумента, "ДФ='дд ММММ гггг'") + " г.");
	
	ДанныеДляПечати.Вставить("НомерИсправленияКорректировочного",
		?(РеквизитыСФ.НомерИсправления = 0 
		ИЛИ НЕ РеквизитыСФ.Исправление, 
			"показатель отсутствует", РеквизитыСФ.НомерИсправления));
	ДанныеДляПечати.Вставить("ДатаИсправленияКорректировочного",
		?(НЕ ЗначениеЗаполнено(РеквизитыСФ.ДатаИсправления) 
		ИЛИ НЕ РеквизитыСФ.Исправление, 
			"показатель отсутствует", Формат(РеквизитыСФ.ДатаИсправления, "ДФ='дд ММММ гггг'") + " г."));
	ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.Ссылка,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаПоступленияТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовара,
	|	КорректировкаПоступленияТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	КорректировкаПоступленияТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	КорректировкаПоступленияТовары.СуммаНДСДоИзменения,
	|	КорректировкаПоступленияТовары.Количество КАК КоличествоПослеИзменения,
	|	КорректировкаПоступленияТовары.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаНДС) / КорректировкаПоступленияТовары.Количество
	|				ИНАЧЕ КорректировкаПоступленияТовары.Сумма / КорректировкаПоступленияТовары.Количество
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаПослеИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.КоличествоДоИзменения = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.СуммаНДСДоИзменения) / КорректировкаПоступленияТовары.КоличествоДоИзменения
	|				ИНАЧЕ КорректировкаПоступленияТовары.СуммаДоИзменения / КорректировкаПоступленияТовары.КоличествоДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.Сумма
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС > 0
	|			ТОГДА КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС < 0
	|			ТОГДА (КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаНДС) > 0
	|						ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма > 0
	|					ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаНДС) < 0
	|						ТОГДА (КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма < 0
	|					ТОГДА (КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма > 0
	|						ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС) > 0
	|					ТОГДА КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма < 0
	|						ТОГДА (КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС) < 0
	|					ТОГДА (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения - (КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУвеличение
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &ДокументОснование
	|	И (КорректировкаПоступленияТовары.Количество <> КорректировкаПоступленияТовары.КоличествоДоИзменения
	|			ИЛИ КорректировкаПоступленияТовары.Сумма <> КорректировкаПоступленияТовары.СуммаДоИзменения
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДС <> КорректировкаПоступленияТовары.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаПоступленияТовары.Цена <> КорректировкаПоступленияТовары.ЦенаДоИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПоступленияУслуги.Ссылка,
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаПоступленияУслуги.Содержание КАК СТРОКА(1000)),
	|	КорректировкаПоступленияУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
	|	КорректировкаПоступленияУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	КорректировкаПоступленияУслуги.СтавкаНДС,
	|	КорректировкаПоступленияУслуги.СуммаНДС,
	|	КорректировкаПоступленияУслуги.СуммаНДСДоИзменения,
	|	КорректировкаПоступленияУслуги.Количество,
	|	КорректировкаПоступленияУслуги.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаНДС) / КорректировкаПоступленияУслуги.Количество
	|				ИНАЧЕ КорректировкаПоступленияУслуги.Сумма / КорректировкаПоступленияУслуги.Количество
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.КоличествоДоИзменения = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|					ТОГДА (КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения) / КорректировкаПоступленияУслуги.КоличествоДоИзменения
	|				ИНАЧЕ КорректировкаПоступленияУслуги.СуммаДоИзменения / КорректировкаПоступленияУслуги.КоличествоДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступленияУслуги.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаПоступленияУслуги.СуммаДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияУслуги.Сумма
	|		ИНАЧЕ КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.СуммаНДС > 0
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.СуммаНДС < 0
	|			ТОГДА (КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаНДС > 0
	|						ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаНДС
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма > 0
	|					ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаНДС < 0
	|						ТОГДА (КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма - КорректировкаПоступленияУслуги.СуммаНДС) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма < 0
	|					ТОГДА (КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма > 0
	|						ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС > 0
	|					ТОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма < 0
	|						ТОГДА (КорректировкаПоступленияУслуги.СуммаДоИзменения - КорректировкаПоступленияУслуги.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС < 0
	|					ТОГДА (КорректировкаПоступленияУслуги.СуммаДоИзменения + КорректировкаПоступленияУслуги.СуммаНДСДоИзменения - КорректировкаПоступленияУслуги.Сумма + КорректировкаПоступленияУслуги.СуммаНДС) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &ДокументОснование
	|	И (КорректировкаПоступленияУслуги.Количество <> КорректировкаПоступленияУслуги.КоличествоДоИзменения
	|			ИЛИ КорректировкаПоступленияУслуги.Сумма <> КорректировкаПоступленияУслуги.СуммаДоИзменения
	|			ИЛИ КорректировкаПоступленияУслуги.СуммаНДС <> КорректировкаПоступленияУслуги.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаПоступленияУслуги.Цена <> КорректировкаПоступленияУслуги.ЦенаДоИзменения)";
		
	Если РеквизитыСФ.Исправление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоИзменения", "ДоКорректировки");
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "ДоКорректировки", "ДоИзменения");
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;

КонецФункции	

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 13;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;
	
	Если Дата < '20040216' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура575";
		Макет = ПолучитьОбщийМакет("СчетФактура575");
	ИначеЕсли Дата < '20060530' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура84";
		Макет = ПолучитьОбщийМакет("СчетФактура84");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура283";
		Макет = ПолучитьОбщийМакет("СчетФактура283");
	КонецЕсли;

	Если ДанныеДляПечати.Покупатель = Null Тогда
		Сообщить("В документе основании не указано юр./физ. лицо у организации.");
		Возврат Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Поставщик = Неопределено Тогда
		Сообщить("В документе основании не указано юр./физ. лицо контрагента.");
		Возврат Неопределено;
	КонецЕсли;

	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.Номер = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	Если Дата < '20040216' Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                                 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННпоставщика                 = "Идентификационный номер продавца (ИНН): "   + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь); 
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "             + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "              + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу №  от: ";
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННПокупателя                 = "Идентификационный номер покупателя (ИНН): " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                  + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика                 = "ИНН/КПП продавца: "                       + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь) + КПП;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "           + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "            + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу №  от: ";
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                             + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                  + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя                 = "ИНН/КПП покупателя: "                     + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	КонецЕсли;
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Если (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.Россия Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны  = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД = "--";
		КонецЕсли;


		Количество  = Строчка.Количество;
		СуммаНДС    = Строчка.СуммаНДС;
		СуммаСНДС 	= Строчка.СуммаСНДС;
		СуммаБезНДС = Строчка.СуммаБезНДС;

		ОбластьМакета.Параметры.Количество = Количество;
		ОбластьМакета.Параметры.Цена       = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		ОбластьМакета.Параметры.Стоимость  = СуммаБезНДС;
		ОбластьМакета.Параметры.СуммаНДС   = СуммаНДС;
		ОбластьМакета.Параметры.Всего      = СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + СуммаСНДС;
		
		Если ОбластьМакета.Параметры.ЕдиницаИзмерения = "--" 
			Или НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.Количество = 0;
		КонецЕсли;
		
		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

Функция ПечатьКорректировочногоСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировочныйСчетФактура";
	Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура");
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"Номер,Дата,НомерИсходногоДокумента,ДатаИсходногоДокумента");
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, РеквизитыСФ.Дата);
	
	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	
	ОбластьМакета.Параметры.НомерСчетаФактуры = РеквизитыСФ.НомерИсходногоДокумента;
	ОбластьМакета.Параметры.ДатаСчетаФактуры  = Формат(РеквизитыСФ.ДатаИсходногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ЮридическийАдрес,");
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеДляПечати.ТабличнаяЧасть Цикл 
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;	
		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "Без налога (НДС)";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;	
		
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУменьшение");
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение    = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУвеличение");
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУменьшение");
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   	 = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУвеличение");
	ОбластьМакета.Параметры.РазницаНДСУменьшение    = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУменьшение");
	ОбластьМакета.Параметры.РазницаНДСУвеличение       = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУвеличение");
    	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции

Функция ПечатьСчетаФактуры1137(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 13;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	Макет = ПолучитьОбщийМакет("СчетФактура1137");
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОПодразделенииПоставщика = Неопределено;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Поставщик) Тогда
			РеквизитыПоставщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Поставщик, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПоставщика.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПоставщика.ГоловнойКонтрагент) Тогда
				СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПоставщика.ГоловнойКонтрагент, Дата);
				СведенияОПодразделенииПоставщика 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);	
				Если ДанныеДляПечати.Грузоотправитель = "он же" Тогда
					ДанныеДляПечати.Грузоотправитель = ДанныеДляПечати.Поставщик;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + Строка(НомерИсправления) 
			+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
 	Иначе 	
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		
	Если ЗначениеЗаполнено(КППКонтрагента) Тогда
		КПП = КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПоставщика <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПоставщика, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
		
	ТолькоУслуги = Истина;
	Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга) Тогда
			ТолькоУслуги = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТолькоУслуги Тогда
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
	Иначе
		СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
		СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
		
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
			+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
			"--", 
			?(ДанныеДляПечати.Грузоотправитель = "он же", 
				ДанныеДляПечати.Грузоотправитель, 
				ФормированиеПечатныхФорм.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
		
		Если ДанныеДляПечати.Свойство("АдресДоставки") 
			И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
			ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
				ДанныеДляПечати.АдресДоставки,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(
					СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
		Иначе
			ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
				"--",
				ФормированиеПечатныхФорм.ОписаниеОрганизации(
					СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
		КонецЕсли;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
	
	КонецЕсли;

	СтрокаПоДокументу = "К платежно-расчетному документу №    от";
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код "
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
 	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);

		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;
	    
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
		|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	// Выводим строки таблицы
	
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
		ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Акциз = "без акциза";
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмерения = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
			ОбластьМакета.Параметры.Цена = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	
	ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаБезНДС");
	Если СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ВыборкаСтрокТовары.Итог("СуммаСНДС");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
    	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике, "Свидетельство,");
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьКорректировочногоСчетаФактуры1137(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Если УчетНДС.ПрименяетсяПостановление952(Дата) Тогда
		Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура952");
	Иначе
		Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура1137");
	КонецЕсли;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировочныйСчетФактура1137";
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"Дата,НомерВходящегоДокумента,ДатаВходящегоДокумента,
		|Исправление,НомерИсправления,ДатаИсправления,
		|НомерИсходногоДокумента,ДатаИсходногоДокумента,
		|СчетФактураБезНДС, КППКонтрагента");
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
		ДанныеДляПечати.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
		ДанныеДляПечати.Поставщик, РеквизитыСФ.Дата);
		
	СведенияОПодразделенииПоставщика = Неопределено;
	Если ТипЗнч(ДанныеДляПечати.Поставщик) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Поставщик) Тогда
		РеквизитыПоставщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Поставщик, "ГоловнойКонтрагент, ОбособленноеПодразделение");
		Если РеквизитыПоставщика.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПоставщика.ГоловнойКонтрагент) Тогда
			СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПоставщика.ГоловнойКонтрагент, РеквизитыСФ.Дата);
			СведенияОПодразделенииПоставщика 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, РеквизитыСФ.Дата);	
		КонецЕсли;
	КонецЕсли;
	
	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ОбластьМакета.Параметры.Номер = РеквизитыСФ.НомерВходящегоДокумента;
	ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	
	Если РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = РеквизитыСФ.НомерИсправления;
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного  = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	Иначе
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = "--";
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного  = "--";
	КонецЕсли;
	
	РеквизитыОснований = "";
	Для каждого Основание Из ДанныеДляПечати.КорректируемыеСчетаФактуры Цикл
		РеквизитыОснований = ?(РеквизитыОснований = "", РеквизитыОснований, РеквизитыОснований + ", ") 
		+ "№ "+ Основание.НомерСчетаФактуры + " от " + Основание.ДатаСчетаФактуры 
		+ ", с учетом исправления № " + Основание.НомерИсправления + " от " + Основание.ДатаИсправления;	
	КонецЦикла;
	ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;

	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ЮридическийАдрес,");

	Если ЗначениеЗаполнено(РеквизитыСФ.КППКонтрагента) Тогда
		КПП = РеквизитыСФ.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПоставщика <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПоставщика, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		"Валюта: наименование, код " + ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"Валюта: наименование, код");		
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеДляПечати.ТабличнаяЧасть Цикл 
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;	
		       		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
		КонецЕсли;	
		          		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;	
		
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУменьшение");
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУвеличение");
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУменьшение");
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУвеличение");
	Если РеквизитыСФ.СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "без НДС";
	Иначе
		ОбластьМакета.Параметры.РазницаНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУменьшение");
		ОбластьМакета.Параметры.РазницаНДСУвеличение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУвеличение");
	КонецЕсли;
    	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;

КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	ИначеЕсли СформированПриВводеНачальныхОстатковНДС Тогда
		Предупреждение("Печать сформированных при вводе начальных остатков документов не поддерживается!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Корректировочный = Ссылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;

	Если Найти(ИмяМакета, "СчетФактура") <> 0 Тогда
		
		ДанныеДляПечати = Неопределено;
		
		СобратьДанныеДляПечати(Ссылка, ДанныеДляПечати);
		
		Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Возврат;
		ИначеЕсли ДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 Тогда			
			Если Корректировочный Тогда
				ТабДокумент = ПечатьКорректировочногоСчетаФактуры1137(ДанныеДляПечати);
			Иначе
				ТабДокумент = ПечатьСчетаФактуры1137(ДанныеДляПечати);
			КонецЕсли;
		Иначе
			Если Корректировочный Тогда
				ТабДокумент = ПечатьКорректировочногоСчетаФактуры(ДанныеДляПечати);
			Иначе
				ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати);
			КонецЕсли;			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	Если Дата < '20040216' Тогда
		СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура");
	ИначеЕсли Дата < '20060530' Тогда
		СтруктураМакетов.Вставить("СчетФактура84", "Счет-фактура");
	Иначе
		СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
	КонецЕсли;
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли


// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ЗаполнятьРеквизитыСчетаФактуры = Ложь) Экспорт
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументыОснования.Количество()=0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	РеквизитыОбновлены  = Ложь;
	
	Если Не ПараметрыСФ.Организация = Неопределено 
		И Не ПараметрыСФ.Организация = Организация Тогда
		Номер = "";
		Организация		  = ПараметрыСФ.Организация;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если Не ПараметрыСФ.Контрагент = Неопределено 
		И Не ПараметрыСФ.Контрагент = Контрагент Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
		КППКонтрагента 		= "";
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если Не ПараметрыСФ.Договор = Неопределено 
		И Не ПараметрыСФ.Договор = ДоговорКонтрагента Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если Не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если Не ПараметрыСФ.ВалютаДокумента = Неопределено 
		и Не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента Тогда
		ВалютаДокумента   = ПараметрыСФ.ВалютаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение Тогда
			СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение Тогда
			СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение Тогда
			СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение Тогда
			СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Дата >= '20150101'
		И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Если СуммаДокументаКомиссия <> ПараметрыСФ.СуммаДокументаКомиссия Тогда
			СуммаДокументаКомиссия = ПараметрыСФ.СуммаДокументаКомиссия;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
		Если СуммаНДСДокументаКомиссия <> ПараметрыСФ.СуммаНДСДокументаКомиссия Тогда
			СуммаНДСДокументаКомиссия = ПараметрыСФ.СуммаНДСДокументаКомиссия;
			РеквизитыОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ВерсияПостановления = 2 Тогда
		Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента Тогда
			СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 
		
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЭтоНовый() И ВерсияПостановления = 2 Тогда
		Если НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			УстановитьКодВидаОперации();
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументПоступления, "СчетФактураПолученный");
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЕсли;
	Если Не ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
		И ПараметрыСФ.РеквизитыОснований.Количество() > 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");	
			Если Основание.СуммаУвеличение <> СтрокаСРеквизитами.СуммаУвеличение Тогда
				Основание.СуммаУвеличение = СтрокаСРеквизитами.СуммаУвеличение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если Основание.СуммаУменьшение <> СтрокаСРеквизитами.СуммаУменьшение Тогда
				Основание.СуммаУменьшение = СтрокаСРеквизитами.СуммаУменьшение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если Основание.СуммаНДСУвеличение <> СтрокаСРеквизитами.СуммаНДСУвеличение Тогда
				Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если Основание.СуммаНДСУменьшение <> СтрокаСРеквизитами.СуммаНДСУменьшение Тогда
				Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
				РеквизитыОбновлены = Истина;
			КонецЕсли;
			Если ЗаполнятьРеквизитыСчетаФактуры Тогда
				Если Основание.НомерИсходногоДокумента <> СтрокаСРеквизитами.НомерИсходногоДокумента Тогда
					Основание.НомерИсходногоДокумента = СтрокаСРеквизитами.НомерИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.ДатаИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсходногоДокумента Тогда
					Основание.ДатаИсходногоДокумента = СтрокаСРеквизитами.ДатаИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.УчитыватьИсправлениеИсходногоДокумента <> СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента Тогда
					Основание.УчитыватьИсправлениеИсходногоДокумента = СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.НомерИсправленияИсходногоДокумента <> СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента Тогда
					Основание.НомерИсправленияИсходногоДокумента = СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.ДатаИсправленияИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента Тогда
					Основание.ДатаИсправленияИсходногоДокумента = СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыСФ.РеквизитыОснований.Количество() > 1 Тогда
			Если Не СводныйКорректировочный Тогда
				СводныйКорректировочный = Истина;
			КонецЕсли;
		Иначе
			Если СводныйКорректировочный Тогда
				СводныйКорректировочный = Ложь;
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;
	КонецЕсли;	

	Если ПустаяСтрока(КППКонтрагента) И ДокументыОснования.Количество() > 0 Тогда
		ОснованиеДокумент = ДокументыОснования[0].ДокументОснование;
		Если НЕ ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			КППКонтрагентаНовый = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ОснованиеДокумент, "Грузоотправитель");
			Если НЕ ПустаяСтрока(КППКонтрагентаНовый) Тогда
				КППКонтрагента = КППКонтрагентаНовый;
				РеквизитыОбновлены	= Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыОбновлены 
		И ДополнительныеСвойства.Свойство("СообщитьОбИзмененииРеквизитов")
		И ДополнительныеСвойства.СообщитьОбИзмененииРеквизитов Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Реквизиты документа """ + Ссылка + """ перезаполнены автоматически");
	КонецЕсли;
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

Процедура ЗаполнитьСчетФактуруНаАванс(ДокументЗаполнен = Ложь) Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗаполнен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСРасчетыСПоставщиками.Поставщик КАК Контрагент,
	               |	НДСРасчетыСПоставщиками.ДоговорКонтрагента,
	               |	НДСРасчетыСПоставщиками.ВалютаРасчетов,
	               |	СУММА(НДСРасчетыСПоставщиками.Сумма) КАК СуммаДокумента,
	               |	СУММА(НДСРасчетыСПоставщиками.ВалютнаяСумма) КАК ВалютнаяСумма
	               |ИЗ
	               |	РегистрНакопления.НДСРасчетыСПоставщиками КАК НДСРасчетыСПоставщиками
	               |ГДЕ
	               |	НДСРасчетыСПоставщиками.Регистратор = &ДокументОснование
	               |	И НДСРасчетыСПоставщиками.Документ = &ДокументОснование
	               |	И НДСРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |	И НДСРасчетыСПоставщиками.РасчетыСБюджетом = ЛОЖЬ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСРасчетыСПоставщиками.Поставщик,
	               |	НДСРасчетыСПоставщиками.ДоговорКонтрагента,
	               |	НДСРасчетыСПоставщиками.ВалютаРасчетов";
					   
	Результат = Запрос.Выполнить().Выгрузить();
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.НДС18_118);
	
	ОшибкаПриЗаполнении = Ложь;
	СтрокаСообщения = "";
	СуммаДокумента = 0;
	ДокументЗаполнен = Ложь;
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
			ТаблицаПоСтавкам = Новый ТаблицаЗначений();
			ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			
			Для Каждого СтрПлатежа Из ДокументыОснования[0].ДокументОснование.РасшифровкаПлатежа Цикл
				Если СтрПлатежа.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента Тогда
					ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
					Если ТекСтавкаНДС = Неопределено Тогда
						ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
					КонецЕсли; 
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
					СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаПоСтавкам.Свернуть("СтавкаНДС", "Сумма");
			
			//Распределение суммы рег учета
			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТаблицы.СуммаДокумента, ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
			Если Не МассивСумм = Неопределено Тогда
				ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
			Иначе
				МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
			КонецЕсли; 
			
			Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 
					Или СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				КонецЕсли;
				
				Контрагент = СтрокаТаблицы.Контрагент;
				ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
				СуммаДокумента		= СуммаДокумента + СтрокаПоСтавке.Сумма;
				НовыйАванс = Авансы.Добавить();
				НовыйАванс.Сумма = СтрокаПоСтавке.Сумма;
				НовыйАванс.СтавкаНДС	  = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);;
				НовыйАванс.СуммаНДС		  = УчетНДС.РассчитатьСуммуНДС(НовыйАванс.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(НовыйАванс.СтавкаНДС));
				ОшибкаПриЗаполнении = Ложь;
				ДокументЗаполнен = Истина;
			КонецЦикла;
			
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
				ДокументЗаполнен = Ложь;
			Иначе
				Прервать;
			КонецЕсли;

		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаТаблицы);
			СтрокаАванса = Авансы.Добавить();
			СтрокаАванса.Сумма = СтрокаТаблицы.СуммаДокумента;
			СтрокаАванса.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			СтрокаАванса.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаАванса.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаАванса.СтавкаНДС));
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			ДокументЗаполнен = Истина;
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Авансы.Очистить();
				СуммаДокумента = 0;
				ДокументЗаполнен = Ложь;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	
	Если Результат.Количество() = 0 Тогда 
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаНДСДокумента = 0;
	КонецЕсли;		
	
	Если ОшибкаПриЗаполнении Тогда
		ДокументЗаполнен = Ложь;
		ДокументОснование = Неопределено;
		ДоговорКонтрагента = Неопределено;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаДокумента = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаНДСДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиСФ(Отказ = Ложь, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	Если Исправление Тогда
		
		СтрокаСообщения = "";
		СтруктураОтбора = Новый Структура("ПометкаУдаления, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
			Ложь, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
		
		Если НЕ СуществующийСФ = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СуществующийСФ, "НомерИсправления, ИсправляемыйСчетФактура"); 
			Если Реквизиты.НомерИсправления = НомерИсправления
				И Реквизиты.ИсправляемыйСчетФактура = ИсправляемыйСчетФактура Тогда
							
				СтрокаСообщения = "На основании документа «" + ИсправляемыйСчетФактура + "» уже введен исправленный счет-фактура "
					+ Символы.ПС + "«" +Строка(СуществующийСФ) + "» с номером исправления «" + НомерИсправления + "»";
				
				Отказ = Истина;
				Возврат СтрокаСообщения;
				
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	
	Отказ = Ложь;
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ПометкаУдаления, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
		Ложь, ВидСчетаФактуры, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		//Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("СтавкиНДС"			, Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
		
		Если Не СуществующийСФ = Неопределено Тогда
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура на аванс 
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;
				Сумма = Авансы.Итог("Сумма");
				СуммаДокумента = Сумма;
			КонецЕсли;
			
			Отказ = Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
		КонецЕсли;
	Иначе
		Для Каждого ТекущееОснование Из ДокументыОснования Цикл
			Если ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
				ИЛИ ТипЗнч(ТекущееОснование.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 
				// Может быть много СФ, проверка затруднительна. СФ отрабатываются при записи документа АО.
				Продолжить;
			КонецЕсли;
			
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураПолученный", СтруктураОтбора, Ссылка);
			
			Если НЕ СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже зарегистрирован счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - " + ?(ДокументыОснования.Количество() > 1, " строка № " + ТекущееОснование.НомерСтроки 
				+ ": для «" + ТекущееОснование.ДокументОснование + "» зарегистрирован счет-фактура ","");
				#Если Клиент Тогда
					СтрокаСообщения = СтрокаСообщения + " «" + РаботаСДиалогами.ПолучитьТекстСчетаФактуры(СуществующийСФ) + "»";
				#Иначе
					СтрокаСообщения = СтрокаСообщения + " «" + Строка(СуществующийСФ) + "»";
				#КонецЕсли
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Регистрация еще одного счета-фактуры не допускается."
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	Иначе
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное"));
				
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
			СписокТипов = Новый ОписаниеТипов(
				ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);
			СписокТипов = СписокТипов.Типы();
		КонецЕсли;
		
		Если НЕ Исправление Тогда
			ИндексУдаляемогоЭлемента = СписокТипов.Найти(Тип("ДокументСсылка.КорректировкаПоступления"));
			Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
				СписокТипов.Удалить(ИндексУдаляемогоЭлемента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	
	Возврат СписокТипов;
	
КонецФункции

Процедура УстановитьКодВидаОперации(КодВидаОперацииОснования = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если Исправление ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда		
		Если КодВидаОперацииОснования <> Неопределено Тогда
			 КодВидаОперации = КодВидаОперацииОснования;
			 Возврат;
		КонецЕсли;
	КонецЕсли;
        			
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		
		Для Каждого СтрокаТабличнойЧасти ИЗ ДокументыОснования Цикл
			
			Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
			   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументОснование, "Дата") >= '20150101' Тогда
				КодВидаОперацииПоОснованию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументОснование, "КодВидаОперации");
				КодВидаОперации = ?(ЗначениеЗаполнено(КодВидаОперацииПоОснованию), КодВидаОперацииПоОснованию, "01");
			ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				КодВидаОперации = "03";
			Иначе
				КодВидаОперации = "01";
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		КодВидаОперации = "01";		
		
	КонецЕсли;
	
КонецПроцедуры

Функция СводныйКомиссионный()

	Возврат	Дата >= '20150101'
			И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный
			И СчетаФактурыВыданныеПокупателям.Количество() > 1;

КонецФункции

Процедура ЗаполнитьНаОснованииСчетаФактуры(Основание)
	
	Если Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер,Дата,Проведен,ПометкаУдаления");
	Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;	
	
	Исправление      = Истина;
	НомерИсправления = НомерИсправления + 1;
	
	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Основание;
	КонецЕсли;
			
КонецПроцедуры	

Процедура ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснования, Отказ)
	
	ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Основание.ДокументПоступления);
	
	ДанныеИсходногоДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ИсходныйДокумент, 
		Новый Структура("ВалютаДокумента, РасчетыВУсловныхЕдиницах", 
			"ВалютаДокумента", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах"));

	Если ЗначениеЗаполнено(ДанныеИсходногоДокумента.ВалютаДокумента) 
		И ДанныеИсходногоДокумента.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		И ДанныеИсходногоДокумента.РасчетыВУсловныхЕдиницах Тогда
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			УточнениеСообщения = НСтр("ru='корректировочных'"); 
		Иначе
			УточнениеСообщения = НСтр("ru='исправленных'");
		КонецЕсли;
		ТекстСообщения = "Для договоров в условных единицах, регистрация " + УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.
		|Документ-основание должен быть оформлен в рублях.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Основание.КорректироватьНДС Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для корректировки поступления с отражением корректировки ""Только в печатной форме"" счет-фактура не выставляется");
		Отказ = Истина;
		Возврат;
	КонецЕсли;	

	Если Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		ИЛИ ТипЗнч(Основание.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	Иначе
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	КонецЕсли;
	
	НомерИсправленияСФ = 0;
	
	Исправление = Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	
	Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
		Если Исправление Тогда
			НомерВходящегоДокумента = ИсходныйДокумент.НомерВходящегоДокумента;
			ДатаВходящегоДокумента  = ИсходныйДокумент.ДатаВходящегоДокумента;
		Иначе
			СтрокаОснования.НомерИсходногоДокумента = ИсходныйДокумент.НомерВходящегоДокумента;	
			СтрокаОснования.ДатаИсходногоДокумента 	= ИсходныйДокумент.ДатаВходящегоДокумента;	
			
			Если ИсходныйДокумент.Исправление Тогда
				СтрокаОснования.НомерИсправленияИсходногоДокумента 		= ИсходныйДокумент.НомерИсправления;	
				СтрокаОснования.ДатаИсправленияИсходногоДокумента 		= ИсходныйДокумент.ДатаИсправления;	
				СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента 	= ИсходныйДокумент.Исправление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ДокументПоступления, "СчетФактураПолученный");
	
	Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
	
		Запрос = Новый Запрос;		
		Запрос.УстановитьПараметр("ИсходныйДокумент", 		 Основание.ДокументПоступления);		
		Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", ИсправляемыйСчетФактура);		
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.КППКонтрагента КАК КППКонтрагента,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления КАК ДатаИсправления,
		|	СчетФактураПолученныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
		|	СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|	И СчетФактураПолученныйДокументыОснования.Ссылка = &ИсправляемыйСчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РеквизитыСФ = Выборка;
		Иначе
			РеквизитыСФ = Новый Структура("НомерВходящегоДокумента,ДатаВходящегоДокумента,
				|Исправление,НомерИсправления,ДатаИсправления,
				|НомерИсходногоДокумента,ДатаИсходногоДокумента,
				|УчитыватьИсправлениеИсходногоДокумента,НомерИсправленияИсходногоДокумента,ДатаИсправленияИсходногоДокумента,
				|КодВидаОперации, КППКонтрагента, Продавец");
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			Если Исправление Тогда
				
				НомерИсправленияСФ  = РеквизитыСФ.НомерИсправления;
				
				НомерВходящегоДокумента = РеквизитыСФ.НомерВходящегоДокумента;
				ДатаВходящегоДокумента  = РеквизитыСФ.ДатаВходящегоДокумента;
				
				СтрокаОснования.НомерИсходногоДокумента = РеквизитыСФ.НомерИсходногоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыСФ.ДатаИсходногоДокумента;
				
				СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = РеквизитыСФ.УчитыватьИсправлениеИсходногоДокумента;
				Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
					СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыСФ.НомерИсправленияИсходногоДокумента;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыСФ.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				
			Иначе
				
				СтрокаОснования.НомерИсходногоДокумента = РеквизитыСФ.НомерВходящегоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыСФ.ДатаВходящегоДокумента;
				
				СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = РеквизитыСФ.Исправление;
				Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
					СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыСФ.НомерИсправления;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыСФ.ДатаИсправления;
				КонецЕсли;
				
			КонецЕсли;
			
			
		Иначе
			
			КППКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИсправляемыйСчетФактура, "КППКонтрагента");
		
			НомерВходящегоДокумента = РеквизитыСФ.НомерВходящегоДокумента;
			ДатаВходящегоДокумента  = РеквизитыСФ.ДатаВходящегоДокумента;
			
			Если Исправление Тогда
				НомерИсправленияСФ  = РеквизитыСФ.НомерИсправления;
			КонецЕсли;

		КонецЕсли;
	
		УстановитьКодВидаОперации(РеквизитыСФ.КодВидаОперации);
		
	Иначе
	
		УстановитьКодВидаОперации();
		
	КонецЕсли;
	
	Если Исправление Тогда		
		НомерИсправления = НомерИсправленияСФ + 1;
		ДатаИсправления  = Дата;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КППКонтрагента) И ДокументыОснования.Количество() > 0 
		И НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузоотправитель")
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВидСчетаФактуры");
	
	// Реквизиты счета-фактуры образца 2012 года
	
	Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаВходящегоДокумента");
		СтруктураОбязательныхПолей.Вставить("НомерВходящегоДокумента");
		
		Если Дата >= '20111001' Тогда
			ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
			Если ВерсияПостановления = 2 Тогда
				Если НЕ БланкСтрогойОтчетности Тогда
					СтруктураОбязательныхПолей.Вставить("КодВидаОперации");
				КонецЕсли;
				Если Исправление Тогда
					СтруктураОбязательныхПолей.Вставить("НомерИсправления");
					СтруктураОбязательныхПолей.Вставить("ДатаИсправления");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДокументыОснования";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда 
			Если НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Счет-фактуру можно вводить только на основании проведенного документа (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
			КонецЕсли;
			Если СтрокаТЧ.ДокументОснование.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено
				И Не СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Счет-фактуру можно вводить только на основании документа, отражаемого в бухгалтерском учете (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
			КонецЕсли;	
		КонецЕсли;	
		Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				ОшибкиСтроки = "";
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсходногоДокумента) Тогда
					ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Номер счета-фактуры";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсходногоДокумента) Тогда
					ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Дата счета-фактуры";
				КонецЕсли;
				Если СтрокаТЧ.УчитыватьИсправлениеИсходногоДокумента Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсправленияИсходногоДокумента) Тогда
						ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Номер исправления счета-фактуры";
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсправленияИсходногоДокумента) Тогда
						ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Дата исправления счета-фактуры";
					КонецЕсли;
				КонецЕсли;
				Если Не ПустаяСтрока(ОшибкиСтроки) Тогда
					СтрокаСообщения = "В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Документы основания"" не заполнены поля: " + ОшибкиСтроки;
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если НЕ СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") Тогда
			СтруктураШапкиДокумента.Вставить("РасчетыВУсловныхЕдиницах"	, 
						ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах"));
		КонецЕсли;	
		Если НЕ СтруктураШапкиДокумента.Свойство("ВалютаРегламентированногоУчета") Тогда	
			СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
	КонецЕсли;	

	Если НЕ СтруктураШапкиДокумента.Свойство("ВидДоговора") Тогда
		СтруктураШапкиДокумента.Вставить("ВидДоговора", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "ВидДоговора"));
	КонецЕсли;	
	
	СтруктураШапкиДокумента.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.КППКонтрагента) Тогда
		СтруктураШапкиДокумента.Вставить("КППКонтрагента", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураШапкиДокумента.Контрагент, "КПП"));
	КонецЕсли;
	
	Если Дата >= '20150101'
		И БланкСтрогойОтчетности Тогда
		СтруктураШапкиДокумента.Вставить("КодВидаОперации", "23");
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      	, "ДокументОснование");
	СтруктураПолей.Вставить("ДокументОснованиеПроведен" , "ДокументОснование.Проведен");
	СтруктураПолей.Вставить("УчитыватьНДС"				, "ДокументОснование.УчитыватьНДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость"		, "ДокументОснование.НДСВключенВСтоимость");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	СтруктураПолей.Вставить("СуммаВключаетНДС"			, "ДокументОснование.СуммаВключаетНДС");
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		СтруктураПолей.Вставить("НомерИсходногоДокумента"			 	 , "НомерИсходногоДокумента");
		СтруктураПолей.Вставить("ДатаИсходногоДокумента"			 	 , "ДатаИсходногоДокумента");
		СтруктураПолей.Вставить("НомерИсправленияИсходногоДокумента" 	 , "НомерИсправленияИсходногоДокумента");
		СтруктураПолей.Вставить("ДатаИсправленияИсходногоДокумента"	 	 , "ДатаИсправленияИсходногоДокумента");
		СтруктураПолей.Вставить("СуммаУвеличение"			 		 	 , "СуммаУвеличение");
		СтруктураПолей.Вставить("СуммаУменьшение"					 	 , "СуммаУменьшение");
		СтруктураПолей.Вставить("СуммаНДСУвеличение"				 	 , "СуммаНДСУвеличение");
		СтруктураПолей.Вставить("СуммаНДСУменьшение"					 , "СуммаНДСУменьшение");
		СтруктураПолей.Вставить("УчитыватьИсправлениеИсходногоДокумента" , "УчитыватьИсправлениеИсходногоДокумента");
		
	КонецЕсли;

	РезультатЗапросаПоДокументамОснованиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		
		ТаблицаПоДокументамОснованиям.Колонки.Добавить("ТаблицаДанных");
		
		Для Каждого СтрокаОснования Из ТаблицаПоДокументамОснованиям Цикл
			
			СтрокаОснования.УчитыватьНДС = Истина;
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Сумма",		"Сумма");
			СтруктураПолей.Вставить("НДС",			"СуммаНДС");
			СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
			
			РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
			
			СтрокаОснования.ТаблицаДанных = РезультатЗапросаПоАвансам.Выгрузить();
			ТаблицаПоАвансам = СтрокаОснования.ТаблицаДанных; 
			
			ТаблицаПоАвансам.Колонки.Добавить("СчетФактура", ТаблицаПоДокументамОснованиям.Колонки.ДокументОснование.ТипЗначения);
			
			ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
			ТаблицаПоАвансам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Поставщик");
			ТаблицаПоАвансам.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
			ТаблицаПоАвансам.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПоАвансам.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "СуммаБезНДС");
			ТаблицаПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
			ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком, "Событие");
			ТаблицаПоАвансам.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
			Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
				ТаблицаПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.КодВидаОперации, "КодВидаОперации");
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
				
				СтрокаТаблицы.СчетФактура = СтрокаОснования.ДокументОснование;
				СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
			
			КонецЦикла;
			
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДокумента, Отказ, Заголовок)
    	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаДокумента);
		Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 Тогда
			УчетНДСФормированиеДвижений.ПровестиИсправленныйПолученныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.БланкСтрогойОтчетности Тогда
		ТаблицаЗаписейЖурнала = Новый ТаблицаЗначений;
		Для Каждого Элемент ИЗ СтруктураШапкиДокумента Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Элемент.Значение));
			ТаблицаЗаписейЖурнала.Колонки.Добавить(Элемент.Ключ, Новый ОписаниеТипов(МассивТипов));
		КонецЦикла;
		ТаблицаЗаписейЖурнала.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаЗаписейЖурнала.Колонки.Добавить("НомерИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Строка"));
		ТаблицаЗаписейЖурнала.Колонки.Добавить("ДатаИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Дата"));
		
		Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			
			СтруктураСтроки = Новый Структура;
			Для Каждого Элемент ИЗ СтруктураШапкиДокумента Цикл
				СтруктураСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
			Для Каждого СтрокаОснования ИЗ ТаблицаДокумента Цикл
				
				СтруктураСтроки.Вставить("ДокументОснование", 		СтрокаОснования.ДокументОснование);
				СтруктураСтроки.Вставить("НомерИсходногоДокумента", СтрокаОснования.НомерИсходногоДокумента);
				СтруктураСтроки.Вставить("ДатаИсходногоДокумента", 	СтрокаОснования.ДатаИсходногоДокумента);
				СтруктураСтроки.Вставить("СуммаУвеличение", 		СтрокаОснования.СуммаУвеличение);
				СтруктураСтроки.Вставить("СуммаУменьшение", 		СтрокаОснования.СуммаУменьшение);
				СтруктураСтроки.Вставить("СуммаНДСУвеличение", 		СтрокаОснования.СуммаНДСУвеличение);
				СтруктураСтроки.Вставить("СуммаНДСУменьшение", 		СтрокаОснования.СуммаНДСУменьшение);
				СтруктураСтроки.Вставить("ИндексСтроки", 			СтрокаОснования.НомерСтроки - 1);
				
				Если СтруктураШапкиДокумента.Исправление Тогда 
					СтруктураСтроки.Вставить("НомерИсправленияКорректировочногоСчетаФактуры", СтруктураШапкиДокумента.НомерИсправления);
					СтруктураСтроки.Вставить("ДатаИсправленияКорректировочногоСчетаФактуры",  СтруктураШапкиДокумента.ДатаИсправления);
				Иначе
					СтруктураСтроки.Вставить("НомерИсправленияКорректировочногоСчетаФактуры", Неопределено);
					СтруктураСтроки.Вставить("ДатаИсправленияКорректировочногоСчетаФактуры",  Неопределено);
				КонецЕсли;
				
				СтруктураСтроки.Вставить("Исправление", СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента);
				Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
					СтруктураСтроки.Вставить("НомерИсправления", СтрокаОснования.НомерИсправленияИсходногоДокумента);
					СтруктураСтроки.Вставить("ДатаИсправления",  СтрокаОснования.ДатаИсправленияИсходногоДокумента);
				Иначе
					СтруктураСтроки.Вставить("НомерИсправления", Неопределено);
					СтруктураСтроки.Вставить("ДатаИсправления",  Неопределено);
				КонецЕсли;
				
				ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураСтроки);
				
			КонецЦикла;	
			
		ИначеЕсли СтруктураШапкиДокумента.СводныйКомиссионный Тогда
			
			СтруктураСтроки = Новый Структура();
			Для Каждого Элемент Из СтруктураШапкиДокумента Цикл
				СтруктураСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			
			СтруктураСтроки.Вставить("ИндексСтроки");
			
			ТаблицаСводныхСчетовФактур = ПолучитьДанныеСводногоСчетаФактуры(СтруктураШапкиДокумента);
			
			Если ТаблицаСводныхСчетовФактур = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТаблицаЗаписейЖурнала.Колонки.Добавить("СуммаДокументаДляРегистрацииВЖурнале");
			ТаблицаЗаписейЖурнала.Колонки.Добавить("НДСДокументаДляРегистрацииВЖурнале");
			
			Для Каждого СтрокаСводныхСчетовФактур Из ТаблицаСводныхСчетовФактур Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтруктураШапкиДокумента);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаСводныхСчетовФактур);
				
				ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураСтроки);
				
				Если СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуре <> 0 Или СтрокаСводныхСчетовФактур.СуммаНДС <> 0 Тогда
					ЗаписьЖурнала.СуммаДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуре;
					ЗаписьЖурнала.НДСДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаНДС;
				ИначеЕсли СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуреКомиссия <> 0 Или СтрокаСводныхСчетовФактур.СуммаНДСКомиссия <> 0 Тогда
					ЗаписьЖурнала.СуммаДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуреКомиссия;
					ЗаписьЖурнала.НДСДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаНДСКомиссия;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			
			ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураШапкиДокумента);
			
		КонецЕсли;
		
		УчетНДСФормированиеДвижений.ЗарегистрироватьВЖурналеУчетаСчетовФактур(ТаблицаЗаписейЖурнала, СуммаДокумента, СуммаНДСДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеСводногоСчетаФактуры(СтруктураШапкиДокумента)

	СводныйКомиссияПоПродаже = СчетаФактурыВыданныеПокупателям.Количество() > 1;

	ТекстЗапросаРеквизиты =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Контрагент,
	|	ВЫБОР
	|		КОГДА Реквизиты.КППКонтрагента ПОДОБНО """"
	|			ТОГДА Реквизиты.Контрагент.КПП
	|		ИНАЧЕ Реквизиты.КППКонтрагента
	|	КОНЕЦ КАК КППКонтрагента,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Продавец,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДокументОснованиеДата,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ВидСчетаФактуры,
	|	Реквизиты.ДатаВходящегоДокумента,
	|	Реквизиты.НомерВходящегоДокумента,
	|	Реквизиты.Исправление,
	|	Реквизиты.НомерИсправления,
	|	Реквизиты.ДатаИсправления,
	|	Реквизиты.СформированПриВводеНачальныхОстатковНДС,
	|	Реквизиты.БланкСтрогойОтчетности,
	|	Реквизиты.КодСпособаПолучения,
	|	Реквизиты.КодВидаОперации,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.СуммаНДСДокумента,
	|	Реквизиты.СуммаУвеличение,
	|	Реквизиты.СуммаУменьшение,
	|	Реквизиты.СуммаНДСУвеличение,
	|	Реквизиты.СуммаНДСУменьшение,
	|	Реквизиты.СуммаДокументаКомиссия,
	|	Реквизиты.СуммаНДСДокументаКомиссия,
	|	Реквизиты.СуммаУвеличениеКомиссия,
	|	Реквизиты.СуммаУменьшениеКомиссия,
	|	Реквизиты.СуммаНДСУвеличениеКомиссия,
	|	Реквизиты.СуммаНДСУменьшениеКомиссия,
	|	Реквизиты.СчетФактураБезНДС,
	|	Реквизиты.Субкомиссионер,
	|	Реквизиты.СчетФактураВыданныйПокупателю,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РеализацияТоваровКомитента,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|				И Реквизиты.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СводныйСчетФактураКомитентаПо1279,
	|	ВЫБОР
	|		КОГДА Реквизиты.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|				И Реквизиты.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|				И Реквизиты.СводныйКомиссионный
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СводныйСчетФактураКомиссионераПо1279
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СчетФактураПолученный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	
	Если СводныйКомиссияПоПродаже Тогда
		
		Запрос.Текст = ТекстЗапросаРеквизиты + "
		|ВЫБРАТЬ
		|	СУММА(СчетаФактурыВыданныеПокупателям.Сумма) КАК Сумма,
		|	СУММА(СчетаФактурыВыданныеПокупателям.НДС) КАК НДС,
		|	МИНИМУМ(СчетаФактурыВыданныеПокупателям.НомерСтроки) КАК НомерСтроки,
		|	СчетаФактурыВыданныеПокупателям.Субкомиссионер,
		|	СчетаФактурыВыданныеПокупателям.СчетФактура
		|ПОМЕСТИТЬ СчетаФактурыВыданныеПокупателям
		|ИЗ
		|	Документ.СчетФактураПолученный.СчетаФактурыВыданныеПокупателям КАК СчетаФактурыВыданныеПокупателям
		|ГДЕ
		|	СчетаФактурыВыданныеПокупателям.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетаФактурыВыданныеПокупателям.Субкомиссионер,
		|	СчетаФактурыВыданныеПокупателям.СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Организация,
		|	Реквизиты.Контрагент,
		|	Реквизиты.КППКонтрагента,
		|	ВЫБОР
		|		КОГДА Реквизиты.Продавец = Реквизиты.Контрагент
		|				ИЛИ Реквизиты.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Реквизиты.Продавец
		|	КОНЕЦ КАК Продавец,
		|	Реквизиты.Ссылка КАК СчетФактура,
		|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
		|	Реквизиты.Дата КАК ДатаВыставленияПолучения,
		|	Реквизиты.КодСпособаПолучения КАК КодСпособаВыставленияПолучения,
		|	Реквизиты.КодВидаОперации КАК КодВидаОперации,
		|	Реквизиты.НомерВходящегоДокумента КАК НомерСчетаФактуры,
		|	Реквизиты.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
		|	НЕОПРЕДЕЛЕНО КАК НомерКорректировочногоСчетаФактуры,
		|	НЕОПРЕДЕЛЕНО КАК ДатаКорректировочногоСчетаФактуры,
		|	ВЫБОР
		|		КОГДА Реквизиты.Исправление
		|			ТОГДА Реквизиты.НомерИсправления
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК НомерИсправления,
		|	ВЫБОР
		|		КОГДА Реквизиты.Исправление
		|			ТОГДА Реквизиты.ДатаИсправления
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаИсправления,
		|	Реквизиты.ВалютаДокумента КАК Валюта,
		|	СчетаФактурыВыданныеПокупателям.Сумма КАК СуммаПоСчетуФактуре,
		|	СчетаФактурыВыданныеПокупателям.Сумма КАК СуммаПоСчетуФактуреКомиссия,
		|	СчетаФактурыВыданныеПокупателям.НДС КАК СуммаНДС,
		|	СчетаФактурыВыданныеПокупателям.НДС КАК СуммаНДСКомиссия,
		|	0 КАК СуммаПоСчетуФактуреРазницаУвеличение,
		|	0 КАК СуммаПоСчетуФактуреРазницаУменьшение,
		|	0 КАК СуммаНДСРазницаУвеличение,
		|	0 КАК СуммаНДСРазницаУменьшение,
		|	0 КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
		|	0 КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
		|	0 КАК СуммаНДСРазницаУвеличениеКомиссия,
		|	0 КАК СуммаНДСРазницаУменьшениеКомиссия,
		|	Реквизиты.СчетФактураБезНДС КАК ПоСтавкеБезНДС,
		|	НЕОПРЕДЕЛЕНО КАК СчетФактураНеВыставляется,
		|	Реквизиты.РасчетыВУсловныхЕдиницах,
		|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияКорректировочногоСчетаФактуры,
		|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияКорректировочногоСчетаФактуры,
		|	СчетаФактурыВыданныеПокупателям.НомерСтроки - 1 КАК ИндексСтроки,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	СчетаФактурыВыданныеПокупателям.Субкомиссионер КАК Субкомиссионер,
		|	СчетаФактурыВыданныеПокупателям.СчетФактура КАК СчетФактураВыданныйПокупателю,
		|	2 КАК КодВидаСделки,
		|	НЕОПРЕДЕЛЕНО КАК Посредник,
		|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактурыПродавца,
		|	НЕОПРЕДЕЛЕНО КАК КодВидаОперацииКомиссия
		|ИЗ
		|	Реквизиты КАК Реквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыВыданныеПокупателям КАК СчетаФактурыВыданныеПокупателям
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИндексСтроки";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ЗаполнитьНаОснованииСчетаФактуры(Основание);
		мДокументЗаполнен = Истина;
	ИначеЕсли ЗначениеЗаполнено(Основание) 
		И ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Дата = Основание.Дата;
		
		СтрДокОснования = ДокументыОснования.Добавить();
		СтрДокОснования.ДокументОснование = Основание.Ссылка;
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			// Ввод корректировочного/исправленного счета-фактуры на поступление, 
			// требуется проверить существование ранее введенного счета-фактуры
			СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураПолученный");
			Если СуществующийСчетФактура <> Неопределено Тогда
				ТекстСообщения = "На основании документа """ + СуществующийСчетФактура + """ уже был введен """ + СуществующийСчетФактура + """";					
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
				ДокументыОснования.Очистить();
				ДокументыОснования.Добавить();
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				Возврат;
			КонецЕсли;
			
			Отказ = Ложь;
			ЗаполнитьНаОснованииИсправления(Основание, СтрДокОснования, Отказ);
			Если Не Отказ Тогда
				ОпределениеПараметровСчетаФактуры();
				мДокументЗаполнен = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
					
			УстановитьКодВидаОперации();
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			СтрокаАвансов = Авансы.Добавить();
			ДокументОснование = Основание.Ссылка;
			мДокументЗаполнен = Истина;
						
		Иначе
			
			СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыПолученного.НаАванс);
			
			Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
				ЗаполнитьСчетФактуруНаАванс();
				УстановитьКодВидаОперации();
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				ОпределениеПараметровСчетаФактуры();
			КонецЕсли;
			мДокументЗаполнен = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	
	Если НЕ Отказ 
		И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка Или Не мОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный)
			И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
			ОпределениеПараметровСчетаФактуры();
		Иначе
			СводныйКорректировочный = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		И Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;

	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		// Счет-фактура полученный комиссионером от комитента-продавца
		
		Если ЗначениеЗаполнено(СчетФактураВыданныйПокупателю) И СчетаФактурыВыданныеПокупателям.Количество() = 0 Тогда
			НоваяСтрока = СчетаФактурыВыданныеПокупателям.Добавить();
			НоваяСтрока.СчетФактура = СчетФактураВыданныйПокупателю;
			НоваяСтрока.Субкомиссионер = Субкомиссионер;
			НоваяСтрока.НДС = СуммаНДСДокумента;
			НоваяСтрока.Сумма = СуммаДокумента;
		КонецЕсли;
		
		Если СчетаФактурыВыданныеПокупателям.Количество() > 0 И НЕ ЗначениеЗаполнено(СчетФактураВыданныйПокупателю) Тогда
			СчетФактураВыданныйПокупателю = СчетаФактурыВыданныеПокупателям[0].СчетФактура;
			Субкомиссионер = СчетаФактурыВыданныеПокупателям[0].Субкомиссионер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетФактураВыданныйПокупателю)
			И СчетаФактурыВыданныеПокупателям.Найти(СчетФактураВыданныйПокупателю,"СчетФактура") = Неопределено
			И СчетаФактурыВыданныеПокупателям.Количество() > 0 Тогда
				СчетФактураВыданныйПокупателю = СчетаФактурыВыданныеПокупателям[0].СчетФактура;
				Субкомиссионер = СчетаФактурыВыданныеПокупателям[0].Субкомиссионер;
		КонецЕсли;
		
		Если СчетаФактурыВыданныеПокупателям.Количество() > 1 И Дата < '20150101' Тогда
			СчетаФактурыВыданныеПокупателям.Очистить();
			НоваяСтрока = СчетаФактурыВыданныеПокупателям.Добавить();
			НоваяСтрока.СчетФактура = СчетФактураВыданныйПокупателю;
			НоваяСтрока.Субкомиссионер = Субкомиссионер;
			НоваяСтрока.НДС = СуммаНДСДокумента;
			НоваяСтрока.Сумма = СуммаДокумента;
		КонецЕсли;
		
		Продавец = Неопределено;
		
		// Реквизиты такого счета-фактуры вносятся вручную
		СчетФактураБезНДС = СуммаНДСДокумента = 0;
		
	КонецЕсли;
	
	СводныйКомиссионный = СводныйКомиссионный();

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
		
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		НепроверяемыеРеквизиты.Добавить("ДокументыОснования.ДокументОснование");
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС
		ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ СчетаФактурыВыданныеПокупателям.Количество() > 0 Тогда
		НепроверяемыеРеквизиты.Добавить("Авансы.Сумма");
		НепроверяемыеРеквизиты.Добавить("Авансы.СтавкаНДС");
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		НепроверяемыеРеквизиты.Добавить("НомерВходящегоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");				
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления = 1 Тогда
		
		НепроверяемыеРеквизиты.Добавить("КодСпособаПолучения");
		НепроверяемыеРеквизиты.Добавить("НомерИсправленияИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправленияИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("НомерИсправления");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправления");
		
	Иначе
		
		Если СформированПриВводеНачальныхОстатковНДС Тогда
			НепроверяемыеРеквизиты.Добавить("КодСпособаПолучения");
			НепроверяемыеРеквизиты.Добавить("КодВидаОперации");
		КонецЕсли;
		
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Исправление Тогда
			НепроверяемыеРеквизиты.Добавить("НомерИсправления");
			НепроверяемыеРеквизиты.Добавить("ДатаИсправления");			
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);	
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мОбновлятьРеквизитыПриЗаписи = ИСТИНА;
мДокументЗаполнен = Ложь;
мИспользоватьОбменЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
