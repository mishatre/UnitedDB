Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;

Перем мУчетнаяПолитика;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомиссионера()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаВознаграждения КАК Вознаграждение,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомиссионераОПродажах_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет комиссионера");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Получатель = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ФлагПечатиМест = (Товары.Итог("КоличествоМест") > 0);
	ОбластьМакета  = Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ФлагПечатиМест, "Мест", ""));
	ОбластьСтроки  = Макет.ПолучитьОбласть("Строка"       + ?(ФлагПечатиМест, "Мест", ""));

	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьСтроки);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомиссионера()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомиссионера();
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");		
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
//  ДокументОбъект – объект редактируемого документа,
//  ИмяТЧ          – имя табличной части объекта.
//
Функция ПолучитьНовыйКлючСтроки(ИмяТЧ = "Покупатели") Экспорт

	МаксКлюч = 0;
	Если ЭтотОбъект[ИмяТЧ].Количество() > 1 Тогда
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ЭтотОбъект[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная","Отчет комиссионера");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументПередачи - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыУпр(ДокументПередачи = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПередачи",   Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	Если ДокументПередачи = Неопределено Тогда
		Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.КоличествоОстаток,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(, ДоговорКонтрагента   = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи И Сделка = &Сделка
		|												) КАК Остатки
		|ГДЕ
		| 	Остатки.КоличествоОстаток > 0
		|";
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ДокТабличнаяЧасть.НомерСтроки)                     КАК НомерСтроки,
		|	ДокТабличнаяЧасть.СтавкаНДС                                КАК СтавкаНДС,
		|	ДокТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
		|	ДокТабличнаяЧасть.ХарактеристикаНоменклатуры               КАК ХарактеристикаНоменклатуры,
		|	ДокТабличнаяЧасть.СерияНоменклатуры                        КАК СерияНоменклатуры,
		|	ВЫБОР	КОГДА	ДоговорыКонтрагентов.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|			ТОГДА	Документ.Сделка
		|			ИНАЧЕ	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|							ТОГДА Неопределено
		|							ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
		|					КОНЕЦ
		|	КОНЕЦ                                                      КАК ЗаказПокупателя,
		|	СУММА(ДокТабличнаяЧасть.Количество)                        КАК Количество
		|ПОМЕСТИТЬ ТабличнаяЧастьДок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ДокТабличнаяЧасть
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг КАК Документ
		|ПО
		|	Документ.Ссылка = ДокТабличнаяЧасть.Ссылка
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ПО
		|	ДоговорыКонтрагентов.Ссылка = Документ.ДоговорКонтрагента
		|ГДЕ
		|	Документ.Ссылка = &ДокументПередачи
		|СГРУППИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					СтавкаНДС,
		|					ВЫБОР	КОГДА	ДоговорыКонтрагентов.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|							ТОГДА	Документ.Сделка
		|							ИНАЧЕ	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|											ТОГДА Неопределено
		|											ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
		|									КОНЕЦ
		|					КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					ЗаказПокупателя
		|";
		Запрос.Выполнить();
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	ТабличнаяЧастьДок КАК Док
		|УПОРЯДОЧИТЬ ПО ЗаказПокупателя
		|";

		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();

		ПараметрСделка = Неопределено;
		Если ТаблицаЗаказов.Количество() = 0 Тогда
			возврат;
		ИначеЕсли ТаблицаЗаказов.Количество() = 1 Тогда
			ПараметрСделка = ТаблицаЗаказов[0]["ЗаказПокупателя"];
		Иначе
			СписокСделок = Новый СписокЗначений();
			Для Каждого элементСделка Из ТаблицаЗаказов Цикл;
				СписокСделок.Добавить(элементСделка.ЗаказПокупателя, ?(ЗначениеЗаполнено(элементСделка.ЗаказПокупателя), элементСделка.ЗаказПокупателя, "Пустой заказ"));
			КонецЦикла;
			ФормаВыбораЗаказа = ПолучитьОбщуюФорму("ФормаВыбораЗаказа");
			ФормаВыбораЗаказа.НачальноеЗначениеВыбора = Новый Структура("СписокВыбора, ЗаполнитьСписокВыбора", СписокСделок, Ложь);
			ФормаВыбораЗаказа.ОткрытьМодально();
			Если НЕ ФормаВыбораЗаказа.ВыбраноЗначение Тогда
				возврат;
			КонецЕсли;
			ПараметрСделка = ?(ЗначениеЗаполнено(ФормаВыбораЗаказа.ВыбранноеЗначение), ФормаВыбораЗаказа.ВыбранноеЗначение, Неопределено);
		КонецЕсли;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧастьДок.Номенклатура                     КАК Номенклатура,
		|	ТабличнаяЧастьДок.ХарактеристикаНоменклатуры       КАК ХарактеристикаНоменклатуры,
		|	ТабличнаяЧастьДок.СтавкаНДС                        КАК СтавкаНДС,
		|	ТабличнаяЧастьДок.СерияНоменклатуры                КАК СерияНоменклатуры,
		|	ТабличнаяЧастьДок.ЗаказПокупателя                  КАК ЗаказПокупателя,
		|	ТабличнаяЧастьДок.НомерСтроки                      КАК НомерСтроки,
		|	ТабличнаяЧастьДок.Количество                       КАК КоличествоПоДокументу,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00)          КАК КоличествоОстатокПереданных,
		|	ЕСТЬNULL(Остатки.СуммаВзаиморасчетовОстаток, 0.00) КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		// Временная таблица документа
		|	ТабличнаяЧастьДок КАК ТабличнаяЧастьДок
		//
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|												ДоговорКонтрагента = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|												И Сделка = &ПараметрСделка
		|												И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ ТабличнаяЧастьДок)
		|											) КАК Остатки
		|ПО
		|	ТабличнаяЧастьДок.Номенклатура = Остатки.Номенклатура 
		|	И ТабличнаяЧастьДок.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|	И ТабличнаяЧастьДок.СерияНоменклатуры = Остатки.СерияНоменклатуры
		|	И ТабличнаяЧастьДок.ЗаказПокупателя = Остатки.Сделка
		|ГДЕ
		|	ТабличнаяЧастьДок.ЗаказПокупателя = &ПараметрСделка
		|	И ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00) > 0
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ МАКСИМУМ(КоличествоОстатокПереданных) ПО ТабличнаяЧастьДок.Номенклатура, ТабличнаяЧастьДок.ХарактеристикаНоменклатуры";
		Запрос.УстановитьПараметр("ПараметрСделка", ПараметрСделка);
		Сделка = ПараметрСделка;
	КонецЕсли;

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КолвоОстПереданных    = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			КолвоПереданных       = КолвоОстПереданных;
			Продолжить;
		КонецЕсли;

		// Определим покупателя
		СтруктураПоискаПокупателя = Новый Структура("Покупатель, ДатаСФ");
		СтруктураПоискаПокупателя.Покупатель = ?(ДокументПередачи = Неопределено, Контрагент, ДокументПередачи.Контрагент);
		СтруктураПоискаПокупателя.ДатаСФ = НачалоДня(?(ДокументПередачи = Неопределено, Дата, ДокументПередачи.Дата));
		
		РезультатПоиска = Покупатели.НайтиСтроки(СтруктураПоискаПокупателя);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			// Добавим новую строку в ТЧ "Покупатели"
			СтрокаПокупатели = Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПокупатели, СтруктураПоискаПокупателя);
			СтрокаПокупатели.КлючСтроки = ПолучитьНовыйКлючСтроки();
		Иначе
			СтрокаПокупатели = РезультатПоиска[0];
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КлючСтроки       = СтрокаПокупатели.КлючСтроки;
		Если ДокументПередачи = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.Количество = Мин(Выборка.КоличествоПоДокументу, КолвоОстПереданных);
			КолвоОстПереданных = КолвоОстПереданных - СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС         = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		Если ДокументПередачи = Неопределено Тогда
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / Выборка.КоличествоОстаток, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		Иначе
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		КонецЕсли;

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		УчитыватьНДС, СуммаВключаетНДС,
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыУпр()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (ИнвентаризацияТоваровОтданныхНаКомиссию).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента",    ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование" ,    ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество) КАК Количество,
	|	(МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество))
	|	* МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток)
	|	/ МАКСИМУМ(Остатки.КоличествоОстаток) КАК Стоимость
	|ИЗ
	|	Документ.ИнвентаризацияТоваровОтданныхНаКомиссию.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|	                                                      ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                     ) КАК Остатки
	|ПО
	|	  Док.Номенклатура               = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры
	|	И (Док.Ссылка.Сделка             = Остатки.Сделка
	|      ИЛИ (Док.Ссылка.Сделка = &ПустойЗаказПокупателя И Остатки.Сделка = Неопределено))
	|
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|	И Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим покупателя
		СтруктураПоискаПокупателя = Новый Структура("Покупатель, ДатаСФ", ДокументОснование.Контрагент, НачалоДня(ДокументОснование.Дата));
		РезультатПоиска = Покупатели.НайтиСтроки(СтруктураПоискаПокупателя);
		Если РезультатПоиска.Количество() = 0 Тогда
			// Добавим новую строку в ТЧ "Покупатели"
			СтрокаПокупатели = Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПокупатели, СтруктураПоискаПокупателя);
			СтрокаПокупатели.КлючСтроки = ПолучитьНовыйКлючСтроки();
		Иначе
			СтрокаПокупатели = РезультатПоиска[0];
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КлючСтроки       = СтрокаПокупатели.КлючСтроки;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Стоимость;
		СтрокаТабличнойЧасти.СуммаПередачи    = Выборка.Стоимость;

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                         * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
			                                              УчитыватьНДС, СуммаВключаетНДС,
			                                              УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр()

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)

	Если СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		                                       * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		      * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;

	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																	УчитыватьНДС, СуммаВключаетНДС,
																	УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(ДоговорКонтрагента, Организация, МассивНоменклатуры, Контрагент);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество");
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура", ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество", Справочники.Качество.Новый);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;
		
		ЗаполненКлючСвязи = Ложь;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента  >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, , "КлючСвязи");
			НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество        = СписанноеКоличество; 
			НоваяСтрока.СуммаПередачи     = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
			НоваяСтрока.КоличествоМест    = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
			
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, ,"КлючСвязи");
				НоваяСтрока.Количество      = КоличествоОсталосьПогасить;
				НоваяСтрока.СуммаПередачи   = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
				НоваяСтрока.КоличествоМест  = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			Иначе
				СтрокаСПустойСерией.Количество    = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				СтрокаСПустойСерией.СуммаПередачи = СтрокаСПустойСерией.ЦенаПередачи * СтрокаСПустойСерией.Количество;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(СтрокаСПустойСерией);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСериям()

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", НЕ Провести);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.Проведен = &ПризнакПроведения
	|	И (НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления)
	|	И СчетФактураВыданный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		Если Провести И НЕ ТекущийДокумент.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Провести Тогда
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли НЕ Провести И ТекущийДокумент.Проведен Тогда
			ТекущийДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометитьНаУдаление = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакУдаления", НЕ ПометитьНаУдаление);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления = &ПризнакУдаления
	|	И СчетФактураВыданный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		Если ПометитьНаУдаление И НЕ ТекущийДокумент.ПометкаУдаления  Тогда
			ТекущийДокумент.УстановитьПометкуУдаления(Истина);
			ТекущийДокумент.Записать();
		ИначеЕсли ТекущийДокумент.ПометкаУдаления И НЕ ПометитьНаУдаление Тогда
			ТекущийДокумент.УстановитьПометкуУдаления(Ложь);
			ТекущийДокумент.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ВознаграждениеСНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.ВознаграждениеСНДС = СтрокаТаблицы.СуммаВознаграждения + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСВознаграждения, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента)

	ШапкаДокумента = Новый ТаблицаЗначений;
	ШапкаДокумента.Колонки.Добавить("СтавкаНДС"               , Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ШапкаДокумента.Колонки.Добавить("СтатьяЗатрат"            , Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ШапкаДокумента.Колонки.Добавить("Подразделение"           , Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ШапкаДокумента.Колонки.Добавить("НоменклатурнаяГруппа"    , Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ШапкаДокумента.Колонки.Добавить("Сумма"                   , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ШапкаДокумента.Колонки.Добавить("НДС"                     , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));

	СтрокаШапкиДокумента = ШапкаДокумента.Добавить();
	СтрокаШапкиДокумента.СтавкаНДС                = СтруктураШапкиДокумента.СтавкаНДСВознаграждения;
	СтрокаШапкиДокумента.СтатьяЗатрат             = СтруктураШапкиДокумента.СтатьяЗатрат;
	СтрокаШапкиДокумента.Подразделение            = СтруктураШапкиДокумента.Подразделение;
	СтрокаШапкиДокумента.НоменклатурнаяГруппа     = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
	СтрокаШапкиДокумента.Сумма                    = СтруктураШапкиДокумента.СуммаВознаграждения - ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтруктураШапкиДокумента.СуммаНДСВознаграждения, 0.00);
	СтрокаШапкиДокумента.НДС                      = СтруктураШапкиДокумента.СуммаНДСВознаграждения;

	Возврат ШапкаДокумента;

КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"                     , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетовПередачи"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"                 , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПередачи"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаСНДСПередачи = СтрокаТаблицы.СуммаПередачи + 
	                                      ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСПередачи, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДС,
		                                    ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДС, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
											
		СтрокаТаблицы.НДСУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);											

		СтрокаТаблицы.СуммаВзаиморасчетовПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСПередачи,
		                                    ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаСНДС - СтрокаТаблицы.НДС;

		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента) 

	ТаблицаДенежныеСредства = РезультатЗапросаПоДенежнымСредствам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныеСредства, СтруктураШапкиДокумента);

	Возврат ТаблицаДенежныеСредства;

КонецФункции // ПодготовитьТаблицуДенежныхСредств()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
Процедура ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаДенежныхСредств Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуДенежныхСредствУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0), ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовПоТекущемуДокументу, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка");
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Сделка, "Сделка");
	КонецЕсли;
	
	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента,Контрагент, ДоговорКонтрагента, СпособРасчетаКомиссионногоВознаграждения, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС");
	
	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) +
		""" табличной части ""Товары"" обнаружено отрицательное значение в реквизитах: ";

		Выводить = Ложь;

		Если СтрокаТабличнойЧасти.Количество < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КоличествоМест < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество мест,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Сумма < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.СуммаВознаграждения < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма вознаграждения,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.СуммаНДС < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.СуммаНДСВознаграждения < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС вознаграждения,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.СуммаНДСПередачи < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС передачи,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.СуммаПередачи < 0 Тогда
			Отказ    = Истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма передачи,";
		КонецЕсли;
		Если Выводить Тогда
			СтрокаНачалаСообщенияОбОшибке = Лев(СтрокаНачалаСообщенияОбОшибке, СтрДлина(СтрокаНачалаСообщенияОбОшибке)-1);
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС +
				                   "Отрицательных значений здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;
		
	КонецЦикла;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "ДенежныеСредства".
//
// Параметры:
// Параметры: 
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата);
	// Укажем, что надо проверить:
	Если ВерсияПостановления = 1 Тогда
		СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Сумма, СтавкаНДС");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Покупатель, ДатаСобытия, Сумма, СтавкаНДС");
	КонецЕсли;
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства()

// Проверяет правильность заполнения строк табличной части "Покупатели".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПокупатели(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Покупатель");
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из Покупатели Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части ""Покупатели"": ";

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Покупатель) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Покупатель""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВыставленСФ И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Дата счет-фактуры""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПокупатели()

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если (СуммаВзаиморасчетов - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0)) < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом,
                                                    Отказ, Заголовок, СтруктураШапкиДокумента);

	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ТаблицаАвансов = Новый ТаблицаЗначений;
		
		ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаАвансов, Отказ);
        ДвиженияРегистровПодсистемыНДСРеализация(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		ДвиженияПоРегистрамНДСДенежныеСредства(СтруктураШапкиДокумента, ТаблицаПоДенежнымСредствам, Отказ, Заголовок);
		СформироватьДвиженияАвансыПоДоговорамКомиссии(СтруктураШапкиДокумента, ТаблицаПоДенежнымСредствам);
		
	КонецЕсли; 
	
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

	Если ОтражатьВУправленческомУчете Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период = Дата;
	КонецЕсли;

	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

		СписанныеТовары = Движения.СписанныеТовары.Выгрузить();
		УчетНДС.ДополнитьСписанныеТоварыДаннымиПоКомиссии(Ссылка, СписанныеТовары);
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СписанныеТовары);

	Иначе
		
		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по регистру ТоварыОрганизаций
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);
		
		Если СуммаДолга <> 0 Тогда

			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамРасчетовСКонтрагентом, ТаблицаДвижений);

				// Недостающие поля.
				ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
				ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
				ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
				ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

			Иначе

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
				СтрокаДвижений.Контрагент  		   = Контрагент;
				СтрокаДвижений.Организация  	   = Организация;

				СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
				СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
				                                       СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				                                       СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				                                       СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

				СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
				                                       СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				                                       СтруктураШапкиДокумента.КурсДокумента, 
				                                       СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				                                       СтруктураШапкиДокумента.КратностьДокумента, 
				                                       СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			КонецЕсли;

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	
		// Долг комиссионера за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение и СуммаВознаграждения<>0 Тогда

			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если (Не ЗначениеЗаполнено(Сделка) 
		 Или ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя")) и (СуммаДолга<>0) Тогда

			// По регистру РасчетыСКонтрагентами
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		     = Контрагент;
			СтрокаДвижений.Организация  	     = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

		// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если (Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение) и (СуммаВознаграждения<>0) Тогда

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если  СуммаВознаграждения<>0 Тогда
			// По регистру Закупки.
			НаборДвижений = Движения.Закупки;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент 		  = Контрагент;
			СтрокаДвижений.Организация 		  = Организация;
			СтрокаДвижений.ДокументЗакупки    = Ссылка;
			СтрокаДвижений.Проект             = Проект;
			СтрокаДвижений.Подразделение      = Подразделение;
			СтрокаДвижений.СтатусПартии       = Перечисления.СтатусыПартийТоваров.Купленный;
			СтрокаДвижений.Номенклатура       = Неопределено;
			СтрокаДвижений.ХарактеристикаНоменклатуры = Неопределено;
		
			СтрокаДвижений.Количество         = 1;

			СтрокаДвижений.Стоимость          = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			СтрокаДвижений.НДС                = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаНДСВознаграждения,
													СтруктураШапкиДокумента.ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод             = Дата;
			НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Закупки.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
		НаборДвижений = Движения.ТоварыПереданные;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок);
		КонецЕсли;

		Если НЕ Отказ Тогда

			ТаблицаПереданные = ТаблицаПоТоварам.Скопировать();
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетов.Имя = "СуммаВзаиморасчетовПродажи";
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетовПередачи.Имя = "СуммаВзаиморасчетов";

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПереданные);

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, , Истина));
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ Продажи

		НаборДвижений = Движения.Продажи;
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		ТаблицаПродажи.Колонки.СуммаУпр.Имя = "Стоимость";
		ТаблицаПродажи.Колонки.НДС.Имя      = "НДСВрем";
		ТаблицаПродажи.Колонки.НДСУпр.Имя   = "НДС";
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродажи,ТаблицаДвижений,Проект,Дата,"Продажи");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродажи, ТаблицаДвижений);
			
		КонецЕсли;
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,   "ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;

	//ДЕНЕЖНЫЕ СРЕДСТВА КОМИССИОНЕРА
	// По денежным средствам у комиссионера проводим только если в договоре выставлен флаг.
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда
		
		НаборДвижений = Движения.ДенежныеСредстваКомиссионера;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДенежныеСредства = ТаблицаПоДенежнымСредствам.Скопировать();
		
		Сч = 0;
		// Зачеты аванса в движения не включаем.
		Пока Сч < ТаблицаДенежныеСредства.Количество() Цикл
			СтрокаТаблицы = ТаблицаДенежныеСредства.Получить(Сч);
			Если СтрокаТаблицы.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда 
				 ТаблицаДенежныеСредства.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДенежныеСредства, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента), "Сделка");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДенежныеСредстваКомиссионера.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;

	// Движения по посредническим услугам.
	Если СуммаВознаграждения <> 0 Тогда

		ТабЗатрат = Новый ТаблицаЗначений;
		ТабЗатрат.Колонки.Добавить("СтатьяЗатрат",  Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
		ТабЗатрат.Колонки.Добавить("Сумма",         ОбщегоНазначения.ПолучитьОписаниеТиповЧисла( 15, 2));
		ТабЗатрат.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		ТабЗатрат.Колонки.Добавить("Подразделение",        Новый ОписаниеТипов("СправочникСсылка.Подразделения"));

		НоваяСтрока = ТабЗатрат.Добавить();
		НоваяСтрока.Подразделение        = Подразделение;
		НоваяСтрока.СтатьяЗатрат         = СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		НоваяСтрока.Сумма                = СуммаВознаграждения - ?(мУчетнаяПолитика.НеВключатьНДСВЗатраты, ТаблицаПоТоварам.Итог("СуммаНДСВознаграждения"), 0);

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Заказ",         Сделка);
		УправлениеЗатратами.ДвиженияПоПрочимЗатратамУпр(ЭтотОбъект, ТабЗатрат, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, ДопПараметры);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом
		И СуммаВознаграждения <> 0 Тогда
	   
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		
		ТаблицаВознаграждения = ТаблицаПоВзаиморасчетам.СкопироватьКолонки();
		
		НоваяСтрока = ТаблицаВознаграждения.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.Сделка                        = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВознаграждения;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаВознаграждения, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			КурсВзаиморасчетов, 1, 
			КратностьВзаиморасчетов, 1);
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВознаграждения, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	   
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////
// Движения по НДС

// Процедура вызывается из тела процедуры ДвиженияПоПриобретениюУслуг
// Формирует движения по регистру подсистемы учета НДС "НДСПокупки"
// для отражения поступления услуг от комиссионера
Процедура ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаАвансов, Отказ) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если ТаблицаДокумента.Количество()= 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаДокумента.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШапкиДокумента, ТаблицаДокумента, "ТаблицаПоУслугам", Движения, Отказ, , ТаблицаАвансов, УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
	
	Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
		
		ТаблицаДвижений_НДСРасчетыСПоставщиками  = Движения.НДСРасчетыСПоставщиками.Выгрузить();
		ТаблицаДвижений_НДСРасчетыСПоставщиками.Индексы.Добавить("РасчетыСБюджетом");
		СтрокиКУдалению = ТаблицаДвижений_НДСРасчетыСПоставщиками.НайтиСтроки(Новый Структура("РасчетыСБюджетом",Истина));
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСРасчетыСПоставщиками.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		
		Движения.НДСРасчетыСПоставщиками.мПериод			= СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений	= ТаблицаДвижений_НДСРасчетыСПоставщиками;
       	Движения.НДСРасчетыСПоставщиками.ВыполнитьРасход();
		
		
		ТаблицаРаспределеннойСуммы = ТаблицаДвижений_НДСРасчетыСПоставщиками.Скопировать();
					 
		ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
					 
		ТаблицаРаспределеннойСуммы.Колонки.Сумма.Имя = "РаспределеннаяСумма";
		ТаблицаРаспределеннойСуммы.Колонки.Документ.Имя = "СчетФактура";
		ТаблицаРаспределеннойСуммы.Колонки.Добавить("ДокументОплаты");
		ТаблицаРаспределеннойСуммы.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОплаты");
		
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределеннойСуммы,ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам);
		 
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод			= СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений	= ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
       	Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
		 
	КонецЕсли; 

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаДокумента, "ТаблицаПоУслугам", Движения, Отказ);
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			
			// На данный момент все наборы движений записаны.
			// Необходимо прочитать состояние набора "НДСПредъявленный"
			Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШапкиДокумента.Ссылка,РегистрыНакопления.НДСПредъявленный, Истина).Выгрузить();
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента, Движения_НДСПредъявленный, Движения);
		КонецЕсли;
		 
	КонецЕсли;


КонецПроцедуры // ДвиженияРегистровПодсистемыНДСПоступление()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
Процедура ДвиженияРегистровПодсистемыНДСРеализация(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШапкиДокумента, ТаблицаПоТоварам, Движения, Отказ, , , УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// Возвращает таблицу по еще незачтенным авансам полученным от комиссионера
//
Функция ПолучитьТаблицуАвансов(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРасчетыСПокупателямиОстатки.Организация,
	|	НДСРасчетыСПокупателямиОстатки.Покупатель,
	|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	|	НДСРасчетыСПокупателямиОстатки.Документ КАК ДокументОплаты,
	|	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	-НДСРасчетыСПокупателямиОстатки.СуммаОстаток КАК Сумма,
	|	-НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСумма,
	|	ЛОЖЬ КАК ТекущийДокумент
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|			И Покупатель = &Покупатель
	|			И ДоговорКонтрагента = &ДоговорКонтрагента
	|			И АвансПоРасчетамСКомиссионером) КАК НДСРасчетыСПокупателямиОстатки
	|ГДЕ
	|	НДСРасчетыСПокупателямиОстатки.СуммаОстаток < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	0,
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Сумма,
	|	ИСТИНА
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
	|ГДЕ
	|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка = &ЭтотДокумент";
	
	Запрос.УстановитьПараметр("ПустаяДата",		'00010101');
	Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Покупатель",		СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("КонецПериода",	СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ЭтотДокумент",	Ссылка);
	Запрос.УстановитьПараметр("ВалютаРасчетов", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ЭтоАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультатов = Результат.Выгрузить();
	
	КоличествоЭлементов = ТаблицаРезультатов.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаРезультата = ТаблицаРезультатов[КоличествоЭлементов - ОбратныйИндекс];
		
		Если ТипЗнч(СтрокаРезультата.ДокументОплаты) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			// Учитываются только авансы зарегистрированные документами "Отчет комиссионера о продажах"
			ТаблицаРезультатов.Удалить(СтрокаРезультата);
		ИначеЕсли СтрокаРезультата.ТекущийДокумент тогда
			Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				СуммаРасчетовРегл 				= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.ВалютнаяСумма,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
														СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
														СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			Иначе
				СуммаРасчетовРегл 				= СтрокаРезультата.ВалютнаяСумма;
			КонецЕсли;
			СтрокаРезультата.Сумма = СуммаРасчетовРегл;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции // ПолучитьТаблицуАвансов()

// Процедура формирует движения по регистру "НДС расчеты с покупатеями".
//
Процедура ДвиженияПоРегистрамНДСДенежныеСредства(СтруктураШапкиДокумента, ТаблицаПоДенежнымСредствам, Отказ, Заголовок) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата);

	ТаблицаАвансов = ПолучитьТаблицуАвансов(СтруктураШапкиДокумента);
	
	ДвиженияНДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями;
	ТаблицаДвиженийНДСРасчетыСПокупателями = ДвиженияНДСРасчетыСПокупателями.ВыгрузитьКолонки();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.ВыгрузитьКолонки();
	
	Для Каждого СтрокаДС Из ТаблицаПоДенежнымСредствам Цикл
				
		Если СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс
			И ВерсияПостановления = 2
			И ЗначениеЗаполнено(СтрокаДС.Покупатель) Тогда
			
			Продолжить;
		КонецЕсли;	
		
		СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
		СтрокаДвижения.Организация 			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Покупатель 			= СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижения.Документ 		= СтруктураШапкиДокумента.Ссылка;
		
		Если СтрокаДС.ВидОтчетаПоПлатежам 	= Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата
			ИЛИ СтрокаДС.ВидОтчетаПоПлатежам 	= Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда
			СтрокаДвижения.АвансПоРасчетамСКомиссионером = Ложь;
		Иначе
			СтрокаДвижения.АвансПоРасчетамСКомиссионером = Истина;
		КонецЕсли;
		СтрокаДвижения.ВалютаРасчетов 		= СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		
		СуммаРасчетов						= СтрокаДС.Сумма;
		Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СуммаРасчетовРегл 				= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаРасчетов,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
													СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
													СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
		Иначе
			СуммаРасчетовРегл 				= СуммаРасчетов;
		КонецЕсли;
		
		СтрокаДвижения.Сумма 				= СуммаРасчетовРегл;
		СтрокаДвижения.ВалютнаяСумма 		= СуммаРасчетов;
												
		СтрокаДвижения.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		СтрокаДвижения.ДатаСобытия 			= СтруктураШапкиДокумента.Дата;
			
		Если СтрокаДС.ВидОтчетаПоПлатежам 	= Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата Тогда
			СтрокаДвижения 					= ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			СтрокаДвижения.Организация 		= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетФактура 		= СтруктураШапкиДокумента.Ссылка;
			СтрокаДвижения.ДокументОплаты	= СтруктураШапкиДокумента.Ссылка;
			СтрокаДвижения.РаспределеннаяСумма = СуммаРасчетовРегл;
			СтрокаДвижения.ВидДвижения 		= ВидДвиженияНакопления.Приход;
			СтрокаДвижения.ДатаСобытия 		= СтруктураШапкиДокумента.Дата;
		КонецЕсли;
			
		Если СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда
			
			СуммаЗачета = СуммаРасчетов;
			СуммаЗачетаРегл = СуммаРасчетовРегл;
			Для Каждого СтрокаРаспределения Из ТаблицаАвансов Цикл
				
				Если (СуммаЗачета = 0) Или (СтрокаРаспределения.Сумма = 0) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВерсияПостановления = 2
					И ЗначениеЗаполнено(СтрокаДС.Покупатель) 
					И СтрокаРаспределения.ТекущийДокумент Тогда
					
					Продолжить;
					
				КонецЕсли;	
								
				СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
				СтрокаДвижения.Организация 			= СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.Покупатель 			= СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижения.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтрокаДвижения.ВалютаРасчетов 		= СтрокаРаспределения.ВалютаРасчетов;
				СтрокаДвижения.Документ				= СтрокаРаспределения.ДокументОплаты;
				СтрокаДвижения.АвансПоРасчетамСКомиссионером = Истина;
				
				СтрокаДвижения.ВалютнаяСумма		= ?(СуммаЗачета > СтрокаРаспределения.Сумма, СтрокаРаспределения.Сумма, СуммаЗачета);
				СтрокаДвижения.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				СуммаДвиженияРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижения.ВалютнаяСумма,
									СтрокаДвижения.ВалютаРасчетов,
									СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
									СтрокаРаспределения.Сумма/СтрокаРаспределения.ВалютнаяСумма, 1);

				
				СтрокаДвижения.Сумма= СуммаДвиженияРегл;
				
				СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма - СтрокаДвижения.Сумма;
				СтрокаРаспределения.ВалютнаяСумма = СтрокаРаспределения.ВалютнаяСумма - СтрокаДвижения.ВалютнаяСумма;
				
				ЗачтеннаяСуммаВал  = СтрокаДвижения.ВалютнаяСумма;
				ЗачтеннаяСуммаРегл = Окр(СуммаЗачетаРегл*ЗачтеннаяСуммаВал/СуммаЗачета,2);
				
				СуммаЗачета 	= СуммаЗачета 		- ЗачтеннаяСуммаВал;
				СуммаЗачетаРегл = СуммаЗачетаРегл	- ЗачтеннаяСуммаРегл;
				
				СтрокаДвижения 					= ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
				СтрокаДвижения.Организация 		= СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.СчетФактура 		= СтруктураШапкиДокумента.Ссылка;
				СтрокаДвижения.ДокументОплаты	= СтрокаРаспределения.ДокументОплаты;
				СтрокаДвижения.РаспределеннаяСумма = ЗачтеннаяСуммаРегл;
				СтрокаДвижения.КурсоваяРазница  = ЗачтеннаяСуммаРегл - СуммаДвиженияРегл;
				СтрокаДвижения.ВидДвижения 		= ВидДвиженияНакопления.Приход;
				СтрокаДвижения.ДатаСобытия 		= СтруктураШапкиДокумента.Дата;
				
				ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, СтрокаДвижения, Отказ, Заголовок)
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		
		ДвиженияНДСРасчетыСПокупателями.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПокупателями;
		ДвиженияНДСРасчетыСПокупателями.ДобавитьДвижение();
		
		Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество()>0 Тогда
			Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
			Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
			Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
		КонецЕсли; 
		
	КонецЕсли;
	
	
КонецПроцедуры // ДвиженияПоРегистрамНДСДенежныеСредства()

Процедура ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, СтрокаЗачетаАванса, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	ТаблицаРаспределения = Неопределено;
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("СчетФактура", СтрокаЗачетаАванса.СчетФактура);
	Запрос.УстановитьПараметр("ДокументОплаты", СтрокаЗачетаАванса.ДокументОплаты);
	Запрос.УстановитьПараметр("СостояниеОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.УстановитьПараметр("ЦенностьТовары", Перечисления.ВидыЦенностей.Товары);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСРеализация0Обороты.Организация,
	               |	НДСРеализация0Обороты.ВидЦенности,
	               |	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
	               |	&ДокументОплаты КАК СчетФактура,
	               |	НДСРеализация0Обороты.Состояние,
	               |	0 КАК СуммаБезНДС,
	               |	0 КАК НДС,
	               |	СУММА(ВЫБОР
	               |			КОГДА НДСРеализация0Обороты.Состояние = &СостояниеОжидание
	               |				ТОГДА НДСРеализация0Обороты.СуммаБезНДСОборот + НДСРеализация0Обороты.НДСОборот
	               |			ИНАЧЕ НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход
	               |		КОНЕЦ) КАК СуммаСНДС,
	               |	НДСсАвансовОстатки.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСРеализация0.Обороты(, &Дата, , Организация = &Организация И СчетФактура = &СчетФактура) КАК НДСРеализация0Обороты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСсАвансов.Остатки(&Дата, Организация = &Организация И СчетФактура = &ДокументОплаты) КАК НДСсАвансовОстатки
	               |		ПО НДСРеализация0Обороты.Организация = НДСсАвансовОстатки.Организация
	               |			И НДСРеализация0Обороты.Покупатель = НДСсАвансовОстатки.Покупатель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСРеализация0Обороты.Организация,
	               |	НДСРеализация0Обороты.ВидЦенности,
	               |	НДСРеализация0Обороты.Состояние,
	               |	НДСРеализация0Обороты.СчетФактура,
	               |	НДСсАвансовОстатки.СтавкаНДС
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтчетКомиссионераОПродажах.Организация,
	               |	&ЦенностьТовары,
	               |	&ЭтотДокумент,
	               |	&ЭтотДокумент,
	               |	&СостояниеОжидание,
	               |	0,
	               |	0,
	               |	ВЫБОР
	               |		КОГДА ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	               |			ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма
	               |		ИНАЧЕ ОтчетКомиссионераОПродажахТовары.Сумма + ОтчетКомиссионераОПродажахТовары.СуммаНДС
	               |	КОНЕЦ,
	               |	ОтчетКомиссионераОПродажахТовары.СтавкаНДС
	               |ИЗ
	               |	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	               |		ПО ОтчетКомиссионераОПродажахТовары.Ссылка = ОтчетКомиссионераОПродажах.Ссылка
	               |ГДЕ
	               |	ОтчетКомиссионераОПродажахТовары.Ссылка = &ЭтотДокумент";
					
	ТаблицаРаспределенияСФ = Запрос.Выполнить().Выгрузить();

	Если ТаблицаРаспределенияСФ.Количество() > 0 Тогда
		ТаблицаРаспределенияСФ.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаЗачетаАванса.РаспределеннаяСумма, ТаблицаРаспределенияСФ.ВыгрузитьКолонку("СуммаСНДС")), "СуммаБезНДС");
		ТаблицаРаспределенияСФ.Колонки.Удалить("СуммаСНДС");
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределенияСФ Цикл
			СтрокаРаспределения.НДС = УчетНДС.РассчитатьСуммуНДС(СтрокаРаспределения.СуммаБезНДС, Истина, Истина,
															УчетНДС.ПолучитьСтавкуНДС(СтрокаРаспределения.СтавкаНДС));
			СтрокаРаспределения.СуммаБезНДС = СтрокаРаспределения.СуммаБезНДС - СтрокаРаспределения.НДС;
		КонецЦикла;
	
		Если ТаблицаРаспределения = Неопределено Тогда
			ТаблицаРаспределения = ТаблицаРаспределенияСФ;
		Иначе
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенияСФ, ТаблицаРаспределения);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаРаспределения <> Неопределено Тогда
		
		ТаблицаРаспределения.Колонки.Добавить("Событие");
		ТаблицаРаспределения.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные,"ВидЦенности");
		
		Счетчик = ТаблицаРаспределения.Количество();
		Пока Счетчик <> 0 Цикл 
			Счетчик = Счетчик - 1;
			Если ТаблицаРаспределения[Счетчик].СуммаБезНДС = 0 И ТаблицаРаспределения[Счетчик].НДС = 0 Тогда
				ТаблицаРаспределения.Удалить(ТаблицаРаспределения[Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДвижения Из ТаблицаРаспределения Цикл
			Если СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
				СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
		КонецЦикла;
		
		Если (Не Отказ) И (ТаблицаРаспределения <> Неопределено) Тогда
			
			Движения.НДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
			Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаРаспределения;
			Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструНДСПредъявленныйРеализация0()

// Движения по НДС
////////////////////////////////////////////


// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
			
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
	КонецЦикла;
	
	// Учет по проектам
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,   "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Строка.СуммаНДС = СтрокаТЧ.НДС;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	
КонецПроцедуры 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок) Экспорт

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;

	КонецЦикла; 

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	
	// Заказ, на который списывается
	ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено),"ЗаказСписания");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"ДопустимыйСтатусПередачи");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр()

Процедура СформироватьДвиженияАвансыПоДоговорамКомиссии(СтруктураШапкиДокумента, ТаблицаПоДенежнымСредствам) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата);
	Если ВерсияПостановления = 1 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПоДенежнымСредствам", ТаблицаПоДенежнымСредствам);
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СтруктураШапкиДокумента.СуммаВключаетНДС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоДенежнымСредствам.ВидОтчетаПоПлатежам,
	|	ТаблицаПоДенежнымСредствам.Покупатель,
	|	ТаблицаПоДенежнымСредствам.ДатаСобытия,
	|	ТаблицаПоДенежнымСредствам.Сумма,
	|	ТаблицаПоДенежнымСредствам.СтавкаНДС,
	|	ТаблицаПоДенежнымСредствам.СуммаНДС
	|ПОМЕСТИТЬ ВТТаблицаПоДенежнымСредствам
	|ИЗ
	|	&ТаблицаПоДенежнымСредствам КАК ТаблицаПоДенежнымСредствам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоДС.Покупатель,
	|	ТаблицаПоДС.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаПоДС.Сумма - ТаблицаПоДС.СуммаНДС
	|		ИНАЧЕ ТаблицаПоДС.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ТаблицаПоДС.СтавкаНДС,
	|	ТаблицаПоДС.СуммаНДС КАК НДС
	|ИЗ
	|	ВТТаблицаПоДенежнымСредствам КАК ТаблицаПоДС
	|ГДЕ
	|	ТаблицаПоДС.ВидОтчетаПоПлатежам = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Аванс)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоДС.Покупатель,
	|	ТаблицаПоДС.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаПоДС.Сумма - ТаблицаПоДС.СуммаНДС
	|		ИНАЧЕ ТаблицаПоДС.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ТаблицаПоДС.СтавкаНДС,
	|	ТаблицаПоДС.СуммаНДС КАК НДС
	|ИЗ
	|	ВТТаблицаПоДенежнымСредствам КАК ТаблицаПоДС
	|ГДЕ
	|	ТаблицаПоДС.ВидОтчетаПоПлатежам = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса)";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаАвансы = Результат[1].Выгрузить();
	ТаблицаЗачетАвансов = Результат[2].Выгрузить();
		
	СформироватьДвиженияПолученАвансОтПокупателя(СтруктураШапкиДокумента, ТаблицаАвансы);
	
	Если ТаблицаЗачетАвансов.Количество() > 0 Тогда
		СформироватьДвиженияЗачетАвансаПокупателя(СтруктураШапкиДокумента, ТаблицаЗачетАвансов);
	КонецЕсли;	 
		
КонецПроцедуры	

Процедура СформироватьДвиженияЗачетАвансаПокупателя(СтруктураШапкиДокумента, ТаблицаЗачетАвансов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Новый Граница(СтруктураШапкиДокумента.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Комиссионер", СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("СписокПокупателей", ТаблицаЗачетАвансов.ВыгрузитьКолонку("Покупатель"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСАвансыПоДоговорамКомиссииОстатки.СчетФактура КАК СчетФактура,
	|	НДСАвансыПоДоговорамКомиссииОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСАвансыПоДоговорамКомиссииОстатки.Покупатель КАК Покупатель,
	|	НДСАвансыПоДоговорамКомиссииОстатки.ДатаСобытия КАК ДатаСобытия,
	|	НДСАвансыПоДоговорамКомиссииОстатки.СуммаБезНДСОстаток,
	|	НДСАвансыПоДоговорамКомиссииОстатки.НДСОстаток
	|ИЗ
	|	РегистрНакопления.НДСАвансыПоДоговорамКомиссии.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И Комиссионер = &Комиссионер
	|				И Покупатель В (&СписокПокупателей)) КАК НДСАвансыПоДоговорамКомиссииОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСАвансыПоДоговорамКомиссииОстатки.ДатаСобытия";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Покупатель, СтавкаНДС");
	
	ТаблицаЗачетАвансов.Свернуть("Покупатель, СтавкаНДС", "СуммаБезНДС, НДС");
	
	Для Каждого СтрокаЗачетаАванса Из ТаблицаЗачетАвансов Цикл
		
		СтруктураПоиска = Новый Структура("Покупатель, СтавкаНДС");
		СтруктураПоиска.Покупатель = СтрокаЗачетаАванса.Покупатель;
		СтруктураПоиска.СтавкаНДС = СтрокаЗачетаАванса.СтавкаНДС;
		
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		// Зачет аванса
		Для Каждого СтрокаОстатка Из НайденныеСтроки Цикл
			
			Списать = Мин(СтрокаОстатка.СуммаБезНДСОстаток, СтрокаЗачетаАванса.СуммаБезНДС);
			СписатьНДС = Мин(СтрокаОстатка.НДСОстаток, СтрокаЗачетаАванса.НДС);
			
			Если Списать > 0 Тогда
				
				// Зачет сумм в регистре "НДС авансы по договорам комиссии"
				Движение = Движения.НДСАвансыПоДоговорамКомиссии.ДобавитьРасход();
				
				Движение.ДатаСобытия = СтрокаОстатка.ДатаСобытия;
				Движение.Комиссионер = СтруктураШапкиДокумента.Контрагент;
				Движение.СчетФактура = СтрокаОстатка.СчетФактура;
				Движение.Организация = СтруктураШапкиДокумента.Организация;
				Движение.Покупатель  = СтрокаОстатка.Покупатель;
				Движение.СтавкаНДС   = СтрокаОстатка.СтавкаНДС;
				Движение.Период		 = СтруктураШапкиДокумента.Дата;
				Движение.СуммаБезНДС = Списать;
				Движение.НДС		 = СписатьНДС;
						
				СтрокаЗачетаАванса.СуммаБезНДС = СтрокаЗачетаАванса.СуммаБезНДС - Списать;
				СтрокаЗачетаАванса.НДС = СтрокаЗачетаАванса.НДС - СписатьНДС;
											               				
			КонецЕсли;	
			
		КонецЦикла;	
		      		
	КонецЦикла;
	
	Движения.НДСАвансыПоДоговорамКомиссии.Записывать = Истина;
			
КонецПроцедуры	

Процедура СформироватьДвиженияПолученАвансОтПокупателя(СтруктураШапкиДокумента, ТаблицаАвансы)
		
	Для каждого СтрокаАванса Из ТаблицаАвансы Цикл
		
		Движение = Движения.НДСАвансыПоДоговорамКомиссии.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаАванса);
		
		Движение.Комиссионер = СтруктураШапкиДокумента.Контрагент;
		Движение.Организация = СтруктураШапкиДокумента.Организация;
		Движение.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		Движение.Период = СтруктураШапкиДокумента.Дата;
				
	КонецЦикла;
	
	Движения.НДСАвансыПоДоговорамКомиссии.Записывать = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА
// (кроме таблицы по таре)

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("Комиссионер", Контрагент); // Для контроля по регистру "Остатки организаций"
	СтруктураШапкиДокумента.Вставить("Склад", Справочники.Склады.ПустаяССылка());
	СтруктураШапкиДокумента.Вставить("КомиссияПоПокупателям", НЕ(Покупатели.Количество() = 1 И Покупатели[0].Покупатель = Контрагент));

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "ВалютаУправленческогоУчета",                 "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",            "КурсВалютыУправленческогоУчета",             "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",                      "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах",                   "РасчетыВУсловныхЕдиницах");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС",                          "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов",                       "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                                "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьДенежныеСредстваКомитента",    "КонтролироватьДенежныеСредстваКомитента");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом",     "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации",                                "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураШапкиДокумента.Вставить("СуммаНДСВознаграждения", УчетНДС.РассчитатьСуммуНДС(
		СтруктураШапкиДокумента.СуммаВознаграждения,
		СтруктураШапкиДокумента.УчитыватьНДС,
		?(УчитыватьНДС И (Не СтруктураШапкиДокумента.СуммаВключаетНДС), Истина, СтруктураШапкиДокумента.СуммаВключаетНДС),
		УчетНДС.ПолучитьСтавкуНДС(СтруктураШапкиДокумента.СтавкаНДСВознаграждения)));
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам) Экспорт

	//Формируем отдельную таблицу для Комиссионного вознаграждения.
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                  , "Сумма");
	СтруктураПолей.Вставить("СуммаПередачи"             , "СуммаПередачи");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                    , "СуммаНДС");
	СтруктураПолей.Вставить("СуммаНДСПередачи"          , "СуммаНДСПередачи");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СуммаНДСВознаграждения" 	, "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");

	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);

	ТаблицаПоДенежнымСредствам = Новый ТаблицаЗначений();
	
	Если (СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента или СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда

		//Формируем отдельную таблицу по платежам.
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ВидОтчетаПоПлатежам", "ВидОтчетаПоПлатежам");
		СтруктураПолей.Вставить("Сумма", "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС", "СтавкаНДС");
		СтруктураПолей.Вставить("СуммаНДС", "СуммаНДС");
		СтруктураПолей.Вставить("СуммаСНДС", "Сумма" + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, "", "+ СуммаНДС"));
		СтруктураПолей.Вставить("Покупатель", "Покупатель");
		СтруктураПолей.Вставить("ДатаСобытия", "ДатаСобытия");
		
		РезультатЗапросаПоДенежнымСредствам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураПолей);

		// Подготовим таблицу денежных средств для проведения.
		ТаблицаПоДенежнымСредствам = ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента);

	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Основание = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		возврат;
	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат;
		КонецЕсли;

		// Сделку заполняем только если взаиморасчеты ведутся не по договору в целом
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			Сделка = Основание.Сделка;
		КонецЕсли;

		Если Основание.Проведен Тогда

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда

			Сделка = Основание;

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр();
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровОтданныхНаКомиссию") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заполним флаги учета налогов.
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;

		Сделка                  = Основание.Сделка;
		ВалютаДокумента         = Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

		ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(Основание);

	КонецЕсли;
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, ДенежныеСредства);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения")+ 
	                      ?(УчитыватьНДС И (Не СуммаВключаетНДС), Товары.Итог("СуммаНДСВознаграждения"), 0);
						  
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
	СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометкаУдаления);

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьПараметрыУчетнойПолитики(Отказ);

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам);
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
		СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
		СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
		СтруктураПолей.Вставить("СуммаРегл"                    , "СуммаРегл");
	
		РезультатЗапросаПоДокументамРасчетовСКонтрагентами = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
		ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
	КонецЕсли;

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если НЕ Отказ И (СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента или СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда

		// Проверить заполнение ТЧ "ДенежныеСредства"
		ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок);

	КонецЕсли;
	
	// Проверить заполнение ТЧ "Покупатели"
	ПроверитьЗаполнениеТабличнойЧастиПокупатели(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Для каждого СтрокаТЧ Из Покупатели Цикл
		СтрокаТЧ.ВыставленСФ = Ложь;
		СтрокаТЧ.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ) Экспорт

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);
