#Если Клиент Тогда

// СписокЗначений - список имен и представлений объектов анализа
Перем мСписокОбъектов Экспорт;

// Структура - соответствие имен полей и их представления для построителя отчетов
Перем мСтруктураСоответствияИмен Экспорт;

// Число - количество строк табличного документа, соответствующее заголовку отчета
Перем мКоличествоВыведенныхСтрокЗаголовка Экспорт;

// Число - индекс группировки, в которой содержится объект анализа
Перем мИндексГруппировкиОбъекта;

// Дата - дата начала периода анализа
Перем мДатаНачала;

// Таблица с данными для диаграммы
Перем ТаблицаДиаграммы Экспорт;

// Структура, ключи которой - имена отборов Построителя, значения - параметры Построителя
Перем мСтруктураДляОтбораПоКатегориям Экспорт;

// Флаг признака подчета цены продажи
Перем СчитатьЦенуПродажи;

// Процедура определяет и устанавливает значение для реквизита ОтборЗначениеКласс в зависимости от вида сравнения
// 
// Параметры
//  НЕТ
// 
// Возвращаемое значение
//  НЕТ
// 
Процедура ОпределитьТипЗначенияОтбораКлассаXYZ() Экспорт

	Если ОтборВидСравненияКласс = ВидСравнения.Равно ИЛИ ОтборВидСравненияКласс = ВидСравнения.НеРавно Тогда
		Если ОтборЗначениеКласс = Неопределено Тогда
			ОтборЗначениеКласс = Перечисления.XYZКлассификация.ПустаяСсылка();
		ИначеЕсли ТипЗнч(ОтборЗначениеКласс) = Тип("СписокЗначений") Тогда
			Если ОтборЗначениеКласс.Количество() > 0 Тогда
				ОтборЗначениеКласс = ОтборЗначениеКласс[0].Значение;
			Иначе
				ОтборЗначениеКласс = Перечисления.XYZКлассификация.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ОтборЗначениеКласс = Неопределено Тогда
			ОтборЗначениеКласс = Новый СписокЗначений;
		ИначеЕсли ТипЗнч(ОтборЗначениеКласс) = Тип("ПеречислениеСсылка.XYZКлассификация") Тогда
			НовыйСписок = Новый СписокЗначений;
			Если НЕ ОтборЗначениеКласс.Пустая() Тогда
				НовыйСписок.Добавить(ОтборЗначениеКласс);
			КонецЕсли; 
			ОтборЗначениеКласс = НовыйСписок;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет и устанавливает значение для реквизита ОтборЗначениеКласс в зависимости от вида сравнения
// 
// Параметры
//  НЕТ
// 
// Возвращаемое значение
//  НЕТ
// 
Процедура ОпределитьТипЗначенияОтбораКлассаABC() Экспорт

	Если ОтборВидСравненияКлассABC = ВидСравнения.Равно ИЛИ ОтборВидСравненияКлассABC = ВидСравнения.НеРавно Тогда
		Если ОтборЗначениеКлассABC = Неопределено Тогда
			ОтборЗначениеКлассABC = Перечисления.ABCКлассификация.ПустаяСсылка();
		ИначеЕсли ТипЗнч(ОтборЗначениеКлассABC) = Тип("СписокЗначений") Тогда
			Если ОтборЗначениеКлассABC.Количество() > 0 Тогда
				ОтборЗначениеКлассABC = ОтборЗначениеКлассABC[0].Значение;
			Иначе
				ОтборЗначениеКлассABC = Перечисления.ABCКлассификация.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ОтборЗначениеКлассABC = Неопределено Тогда
			ОтборЗначениеКлассABC = Новый СписокЗначений;
		ИначеЕсли ТипЗнч(ОтборЗначениеКлассABC) = Тип("ПеречислениеСсылка.ABCКлассификация") Тогда
			НовыйСписок = Новый СписокЗначений;
			Если НЕ ОтборЗначениеКлассABC.Пустая() Тогда
				НовыйСписок.Добавить(ОтборЗначениеКлассABC);
			КонецЕсли; 
			ОтборЗначениеКлассABC = НовыйСписок;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура меняет видимость заголовка поля табличного документа
// 
// Параметры
//  Таб - табличный документ
//
// Возвращаемые значения
//  НЕТ
Процедура ИзменитьВидимостьЗаголовка(Таб) Экспорт

	ОбластьВидимости = Таб.Область(1,,мКоличествоВыведенныхСтрокЗаголовка,);
	ОбластьВидимости.Видимость = ПоказыватьЗаголовок;

КонецПроцедуры

// Функция формирует строку представления периода отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьСтрокуПериода() Экспорт

	ОписаниеПериода = "";
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если мДатаНачала = '00010101000000' И ДатаОкончания = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если мДатаНачала = '00010101000000' ИЛИ ДатаОкончания = '00010101000000' Тогда

			ОписаниеПериода = "Период: " + Формат(мДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаОкончания, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если мДатаНачала <= ДатаОкончания Тогда
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(мДатаНачала), КонецДня(ДатаОкончания), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;
	
КонецФункции

// Функция формирует строку названия отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьСтрокуНазванияОтчета() Экспорт
	
	СтрокаНазванияОтчета = "";
	Для каждого СтрокаГруппы из Группы Цикл
		Если НЕ СтрокаГруппы.Использование Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНазванияОтчета = СтрокаНазванияОтчета + ?(СтрокаНазванияОтчета="","","/") + ВРег(СтрокаГруппы.Группировка);
	КонецЦикла;
	СтрокаНазванияОтчета = СтрокаНазванияОтчета + "-анализ продаж";
	
	Возврат СтрокаНазванияОтчета;
	
КонецФункции

// Функция определяет параметр ABC_Класса по самому классу
//
// Параметры
//  ABC_КлассСсылка - ПеречислениеСсылка, для которой необходимо
//  определить значение параметра
//
// Возвращаемое значение:
//   Число - значение параметра для класса
//
Функция ПолучитьЗначениеПараметраABC_Класса(ABC_КлассСсылка)

	Если ABC_КлассСсылка = Перечисления.ABCКлассификация.AКласс Тогда
		Возврат ПроцентAКласса;
	ИначеЕсли ABC_КлассСсылка = Перечисления.ABCКлассификация.BКласс Тогда
		Возврат ПроцентBКласса;
	ИначеЕсли ABC_КлассСсылка = Перечисления.ABCКлассификация.CКласс Тогда
		Возврат ПроцентCКласса;
	Иначе
		Возврат 0;
	КонецЕсли; 
	
КонецФункции // ПолучитьЗначениеПараметраABC_КлассКлиента()

// Процедура заполняет данными таблицу значений, распределяет объекты отчета по АВС-классам
// 
// Параметры
//  Выборка                - ВыборкаИзРезультатаЗапроса, по группировке объекта отчета
//  ТаблицаКлассовОбъектов - таблица значений, таблица с распределенными объектами отчета по классам
//
// Возвращаемые значения
//  НЕТ
//
Процедура ЗаполнитьТаблицуКлассовОбъектов(Выборка, ТаблицаКлассовОбъектов)

	ВыборкаОбъектов = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ОбъектАнализа);
	Пока ВыборкаОбъектов.Следующий() Цикл

		СуммаПараметровЗаВсеПериоды = 0;
		СтадияКонтрагента   = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
		КлассКонтрагента    = Перечисления.XYZКлассификация.ПустаяСсылка();

		Если ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами" Тогда
			СуммаПараметровЗаВсеПериоды = КонецДня(ДатаОкончания) - НачалоДня(мДатаНачала);
		Иначе
			СуммаПараметровЗаВсеПериоды = ВыборкаОбъектов[ПараметрАнализа];
		КонецЕсли; 
		
		Если ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами" Тогда
			КолПериодовДок = ?(ВыборкаОбъектов.ДокументПродажи <> NULL, ВыборкаОбъектов.ДокументПродажи, 0) + 1;
			СреднееЗначениеПараметра = СуммаПараметровЗаВсеПериоды/КолПериодовДок;
		Иначе
			СреднееЗначениеПараметра = ?(КоличествоПериодовАнализа = 0, 0, (СуммаПараметровЗаВсеПериоды/КоличествоПериодовАнализа));
		КонецЕсли; 

		СуммаПодкоренногоВыражения = 0;

		НомерПериода = 0;

		РаспределениеПоПериодам = Новый Соответствие;
		
		Если ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами" Тогда

			ВыборкаДокументов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументПродажи");

			ДатаПрошлогоДокумента = НачалоДня(мДатаНачала);
			
			Пока ВыборкаДокументов.Следующий() Цикл

				Если ВыборкаДокументов.ДокументПродажи = NULL Тогда
					Продолжить;
				КонецЕсли; 

				Если ВыборкаДокументов.ДокументПродажи <> Неопределено Тогда
					СуммаЗаПериод = ВыборкаДокументов.ДокументПродажи.Дата - ДатаПрошлогоДокумента;
					ДатаПрошлогоДокумента = ВыборкаДокументов.ДокументПродажи.Дата;
				Иначе
					СуммаЗаПериод = 0;
				КонецЕсли; 

				СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);

			КонецЦикла;

			СуммаЗаПериод = КонецДня(ДатаОкончания) - ДатаПрошлогоДокумента;
			СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);
	
		Иначе

			ВыборкаПериодов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериодов.Следующий() Цикл
				
				Если ВыборкаПериодов.Период = NULL Тогда
					Продолжить;
				Иначе
					Если ВыборкаПериодов[ПараметрАнализа] = NULL Тогда
						СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((0 - СреднееЗначениеПараметра), 2);
						РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,0);
					Иначе
						СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((ВыборкаПериодов[ПараметрАнализа] - СреднееЗначениеПараметра), 2);
						РаспределениеПоПериодам.Вставить(ВыборкаПериодов.Период,ВыборкаПериодов[ПараметрАнализа]);
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами" Тогда

			ЗначениеКорня = SQRT(?(КолПериодовДок = 0, 0, (СуммаПодкоренногоВыражения/КолПериодовДок)));
			
		Иначе

			ЗначениеКорня = SQRT(?(КоличествоПериодовАнализа = 0, 0, (СуммаПодкоренногоВыражения/КоличествоПериодовАнализа)));
		
		КонецЕсли; 

		КоэфОтносительнойВариации = ?(СреднееЗначениеПараметра = 0, 0, (ЗначениеКорня*100/СреднееЗначениеПараметра));
		КоэфОтносительнойВариации = ?(КоэфОтносительнойВариации<0,-КоэфОтносительнойВариации,КоэфОтносительнойВариации);

		НоваяСтрока = ТаблицаКлассовОбъектов.Добавить();
		НоваяСтрока.Объект                  = ВыборкаОбъектов[ОбъектАнализа];
		НоваяСтрока.КоэффициентВариации     = КоэфОтносительнойВариации;
		НоваяСтрока.СреднееЗначение         = СреднееЗначениеПараметра;
		НоваяСтрока.РаспределениеПоПериодам = РаспределениеПоПериодам;
		Для каждого Показатель Из Показатели Цикл
			Если Показатель.Использование ИЛИ (Показатель.Имя = ПараметрАнализа И ПараметрАнализа <> "ИнтервалыМеждуРасходнымиДокументами") Тогда
				НоваяСтрока[Показатель.Имя] = ВыборкаОбъектов[Показатель.Имя];
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла;
	
	ТаблицаКлассовОбъектов.Сортировать("КоэффициентВариации ВОЗР");

	Для каждого Строки Из ТаблицаКлассовОбъектов Цикл
		
		Если Строки.КоэффициентВариации > ПараметрXКлассаНач И Строки.КоэффициентВариации <= ПараметрXКлассаКон Тогда
			Строки.КлассXYZ = Перечисления.XYZКлассификация.XКласс;
		ИначеЕсли Строки.КоэффициентВариации > ПараметрYКлассаНач И Строки.КоэффициентВариации <= ПараметрYКлассаКон Тогда
			Строки.КлассXYZ = Перечисления.XYZКлассификация.YКласс;
		ИначеЕсли Строки.КоэффициентВариации > ПараметрZКлассаНач И Строки.КоэффициентВариации <= ПараметрZКлассаКон Тогда
			Строки.КлассXYZ = Перечисления.XYZКлассификация.ZКласс;
		Иначе
			Строки.КлассXYZ = Перечисления.XYZКлассификация.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКлассовОбъектов.Сортировать(ПараметрАнализа + " ВОЗР");

	ВсегоСумма = ТаблицаКлассовОбъектов.Итог(ПараметрАнализа);

	СуммаВысокая = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_Класса(Перечисления.ABCКлассификация.AКласс)/100),2);
	СуммаСредняя = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_Класса(Перечисления.ABCКлассификация.BКласс)/100),2);
	СуммаНизкая = ВсегоСумма - СуммаВысокая - СуммаСредняя;

	СуммаНакопления = 0;
	Для каждого Строки Из ТаблицаКлассовОбъектов Цикл
		
		СуммаНакопления = СуммаНакопления + Строки[ПараметрАнализа];
		
		Если СуммаНакопления <= СуммаНизкая Тогда
			ABCКлассификация = Перечисления.ABCКлассификация.CКласс;
		ИначеЕсли СуммаНакопления <= (СуммаНизкая + СуммаСредняя) Тогда
			ABCКлассификация = Перечисления.ABCКлассификация.BКласс;
		Иначе
			ABCКлассификация = Перечисления.ABCКлассификация.AКласс;
		КонецЕсли;
		
		Строки.КлассABC = ABCКлассификация;
		Строки.Доля     = ?(ВсегоСумма=0,0,Строки[ПараметрАнализа]/ВсегоСумма*100);
		
	КонецЦикла;
	
	СтрокаСортировки = "";
	
	Для каждого СтрокаГруппы из Группы Цикл
		Если СтрокаГруппы.Использование Тогда
			СтрокаСортировки = СтрокаСортировки + ?(СтрокаСортировки="","",", ") +"Класс" + СтрокаГруппы.Группировка;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКлассовОбъектов.Сортировать(СтрокаСортировки + ", "+ ПараметрАнализа + " УБЫВ");
	
КонецПроцедуры

// Функция определяет, соответствие выводимых значений в табличный документ
//  отбору по АВС-классиифкации
//
// Параметры
//  Класс - ПеречислениеСсылка.XYZКлассификация, для которой определяет принадлежность к отбору
//
// Возвращаемое значение:
//   Булево, удовлетворяет или нет условиям отбора
//
Функция ПроверитьКлассВОтборе(КлассXYZ,КлассABC)

	УдовлетворяетОтбору = Истина;
	
	Если ОтборФлагКласс Тогда
		Если ОтборВидСравненияКласс = ВидСравнения.Равно Тогда
			Если ОтборЗначениеКласс <> КлассXYZ Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		ИначеЕсли ОтборВидСравненияКласс = ВидСравнения.НеРавно Тогда
			Если ОтборЗначениеКласс = КлассXYZ Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		ИначеЕсли ОтборВидСравненияКласс = ВидСравнения.ВСписке Тогда
			Если ОтборЗначениеКласс.НайтиПоЗначению(КлассXYZ) = Неопределено Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		ИначеЕсли ОтборВидСравненияКласс = ВидСравнения.НеВСписке Тогда
			Если ОтборЗначениеКласс.НайтиПоЗначению(КлассXYZ) <> Неопределено Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОтборФлагКлассABC Тогда
		Если ОтборВидСравненияКлассABC = ВидСравнения.Равно Тогда
			Если ОтборЗначениеКлассABC <> КлассABC Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		ИначеЕсли ОтборВидСравненияКлассABC = ВидСравнения.НеРавно Тогда
			Если ОтборЗначениеКлассABC = КлассABC Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		ИначеЕсли ОтборВидСравненияКлассABC = ВидСравнения.ВСписке Тогда
			Если ОтборЗначениеКлассABC.НайтиПоЗначению(КлассABC) = Неопределено Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		ИначеЕсли ОтборВидСравненияКлассABC = ВидСравнения.НеВСписке Тогда
			Если ОтборЗначениеКлассABC.НайтиПоЗначению(КлассABC) <> Неопределено Тогда
				УдовлетворяетОтбору = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат УдовлетворяетОтбору;

КонецФункции // ПроверитьКлассВОтборе()


// Процедура передает построителю отчета запрос
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	Если ОбъектАнализа <> "Номенклатура" И ОбъектАнализа <> "Контрагент" И ОбъектАнализа = "МенеджерПокупателя" Тогда
		Возврат;
	КонецЕсли;
	
	Если Периодичность.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = "
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ
	|	Продажи." + ОбъектАнализа + "                    КАК " + ОбъектАнализа + ",
	|	СУММА(Продажи.СтоимостьОборот)                   КАК СуммаВыручки,
	|	СУММА(Продажи.СтоимостьОборот-Продажи.НДСОборот) КАК СуммаВыручкиБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ЦенаСебестоимости.ЦенаНоменклатуры ЕСТЬ NULL
	|			ТОГДА Продажи.СтоимостьОборот
	|			ИНАЧЕ Продажи.СтоимостьОборот - (ЦенаСебестоимости.ЦенаНоменклатуры * Продажи.КоличествоОборот)
	|			КОНЕЦ)                                   КАК СуммаВаловойПрибыли,
	|	СУММА(Продажи.КоличествоОборот)                  КАК КоличествоПроданныхТоваров,
	|	СУММА(Продажи.КоличествоПродаж)                  КАК КоличествоПродаж,
	|";
	
	Если ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами" Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	Продажи.ДокументПродажи КАК ДокументПродажи
		|";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|	Продажи.Период КАК Период
		|";
		
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	{ВЫБРАТЬ
	|		Продажи.Номенклатура.*,
	|		Продажи.ДокументПродажи.*,
	|		Продажи." + ОбъектАнализа + ".*
	|	//СВОЙСТВА
	|	}
	|
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		Продажи.ДокументПродажи               КАК ДокументПродажи,
	|		Продажи.Период                        КАК Период,
	|		Продажи.Номенклатура                  КАК Номенклатура,
	|		Продажи.Контрагент                    КАК Контрагент,
	|		Продажи.ДокументПродажи.Ответственный КАК МенеджерПокупателя,
	|		СУММА(Продажи.СтоимостьОборот)        КАК СтоимостьОборот,
	|		СУММА(Продажи.НДСОборот)              КАК НДСОборот,
	|		СУММА(Продажи.КоличествоОборот)       КАК КоличествоОборот,
	|		КОЛИЧЕСТВО(Продажи.ДокументПродажи)   КАК КоличествоПродаж
	|
	|	ИЗ
	|
	|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, " + ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ", Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)"+?(ОбъектАнализа = "Номенклатура",""," И ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)") + " {Номенклатура.* КАК Номенклатура, Контрагент.* КАК Контрагент, ДокументПродажи.Ответственный.* КАК МенеджерПокупателя}) КАК Продажи
	|
	|	СГРУППИРОВАТЬ ПО
	|
	|		Продажи.ДокументПродажи,
	|		Продажи.Период,
	|		Продажи.Номенклатура,
	|		Продажи.Контрагент,
	|		Продажи.ДокументПродажи.Ответственный
	|
	|	) КАК Продажи
	|//СОЕДИНЕНИЯ
	|
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		(
	|		ВЫБРАТЬ
	|			СуммаСебестоимости.Номенклатура КАК Номенклатура,
	|			СуммаСебестоимости.Период       КАК Период,
	|			ВЫБОР 
	|				КОГДА СуммаСебестоимости.КоличествоОборот = 0 
	|				ТОГДА 0
	|				ИНАЧЕ СуммаСебестоимости.СтоимостьОборот/СуммаСебестоимости.КоличествоОборот
	|				КОНЕЦ                       КАК ЦенаНоменклатуры
	|		
	|		ИЗ
	|			(
	|			ВЫБРАТЬ
	|				ПродажиСебестоимость.Номенклатура            КАК Номенклатура,
	|				ПродажиСебестоимость.Период                  КАК Период,
	|				СУММА(ПродажиСебестоимость.СтоимостьОборот)  КАК СтоимостьОборот,
	|				СУММА(ПродажиСебестоимость.КоличествоОборот) КАК КоличествоОборот
	|				
	|			ИЗ
	|				РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНачала, &ДатаОкончания, " + ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ", {Номенклатура.* КАК Номенклатура}) КАК ПродажиСебестоимость
	|				
	|			СГРУППИРОВАТЬ ПО
	|				ПродажиСебестоимость.Номенклатура,
	|				ПродажиСебестоимость.Период
	|			
	|			)КАК СуммаСебестоимости
	|			
	|		) КАК ЦенаСебестоимости
	|		
	|	ПО
	|		Продажи.Номенклатура = ЦенаСебестоимости.Номенклатура
	|		И Продажи.Период     = ЦенаСебестоимости.Период
	|
	|{ГДЕ
	// Для упрощения алгоритма формирования текста запроса, добавлено "холостое" условие "ГДЕ ИСТИНА"
	// Данное условие необходимо для установки условий на свойства и категории
	// При формировании отчета ПостроительОтчета из текста запроса удаляет эту конструкцию условия
	|	ИСТИНА
	//
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи." + ОбъектАнализа + ",
	|	" + ?(ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами", "Продажи.ДокументПродажи", "Продажи.Период") + "
	|
	|{УПОРЯДОЧИТЬ ПО
	|	Продажи.Номенклатура.* КАК Номенклатура,
	|	Продажи.Контрагент.* КАК Контрагент,
	|	Продажи.МенеджерПокупателя.* КАК МенеджерПокупателя
	|	//СВОЙСТВА
	|	}
	|
	|ИТОГИ ПО
	|	" + ?(ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами", "ДокументПродажи", "Период Периодами(" + ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ", &ДатаНачала, &ДатаОкончания)") + "
	|{ИТОГИ ПО
	|	Продажи.Номенклатура.* КАК Номенклатура,
	|	Продажи.Контрагент.* КАК Контрагент,
	|	Продажи.МенеджерПокупателя.* КАК МенеджерПокупателя,
	|	Продажи.ДокументПродажи.* КАК ДокументПродажи
	|	//СВОЙСТВА
	|	}
	|
	|";
	
	мСтруктураСоответствияИмен.Очистить();
	мСтруктураСоответствияИмен = Новый Структура("Номенклатура, Контрагент, МенеджерПокупателя, ДокументПродажи", "Номенклатура", "Контрагент", "Менеджер покупателя", "Расходный документ");
	
	мСоответствиеНазначений = Новый Соответствие;

	Если ИспользоватьСвойстваИКатегории Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Продажи.Контрагент";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "Продажи.Номенклатура";
		НоваяСтрока.Представление = "Номенклатура";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		// Добавим строки запроса, необходимые для использования свойств и категорий
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, мСтруктураСоответствияИмен, мСоответствиеНазначений, ПостроительОтчета.Параметры, , ТекстПоляКатегорий, ТекстПоляСвойств, , , , , , мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	Если ИспользоватьСвойстваИКатегории Тогда
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, мСтруктураСоответствияИмен);
	КонецЕсли;
	
	ПостроительОтчета.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(мСтруктураСоответствияИмен, ПостроительОтчета);
	
	Если Группы.Количество() <> 2 Тогда
		
		Группы.Очистить();
		
		НоваяСтрока = Группы.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Группировка = "ABC";
		
		НоваяСтрока = Группы.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Группировка = "XYZ";
		
	КонецЕсли;
	
	Если ПроцентAКласса = 0 Тогда
		
		ПроцентAКласса = 80;
		ПроцентBКласса = 15;
		ПроцентCКласса = 5;
		
	КонецЕсли;
	
	Если ПараметрXКлассаКон = 0 Тогда
		
		ПараметрXКлассаКон = 0;
		ПараметрXКлассаКон = 20;
		ПараметрYКлассаНач = 20;
		ПараметрYКлассаКон = 50;
		ПараметрZКлассаНач = 50;
		ПараметрZКлассаКон = 10000;
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура заполняет табличный документ данными
//
// Параметры
//  Таб - поле табличного документа
//
// Возвращаемое значение
//  НЕТ
//
Процедура СформироватьОтчет(Таб) Экспорт

	Если Периодичность = Перечисления.Периодичность.ПустаяСсылка() Тогда
		Предупреждение("Укажите периодичность.");
		Возврат;
	КонецЕсли; 
	
	ДатаОкончания = КонецДня(ДатаОкончания);
	мДатаНачала = ОбщегоНазначения.ПолучитьДатуНачалаПериодаПоДатеОкончанияКоличествуПериодов(ДатаОкончания, Периодичность, КоличествоПериодовАнализа);
	
	мИндексГруппировкиОбъекта = 0;
	
	Таб.Очистить();
	
	ПостроительОтчета.Параметры.Вставить("ДатаНачала", НачалоДня(мДатаНачала));
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания", ?(ДатаОкончания = '00010101000000', ДатаОкончания, КонецДня(ДатаОкончания)));
	
	Если ПараметрАнализа = "ИнтервалыМеждуРасходнымиДокументами" И ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		ПостроительОтчета.ВыбранныеПоля.Добавить("ДокументПродажи");
	КонецЕсли; 
	
	Если НЕ УправлениеОтчетами.ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, мСтруктураДляОтбораПоКатегориям) Тогда
		Предупреждение("По одной категории нельзя устанавливать несколько отборов");
		Возврат;
	КонецЕсли;

	УправлениеОтчетами.ПроверитьПорядокПостроителяОтчета(ПостроительОтчета);
	
	ПостроительОтчета.Выполнить();

	Макет = ПолучитьМакет("Макет");
	
	Таб.Очистить();
	
	Секция = Макет.ПолучитьОбласть("ШапкаВерх|КолонкаОсновная");
	Секция.Параметры.СтрокаНазванияОтчета = СформироватьСтрокуНазванияОтчета();
	Таб.Вывести(Секция);
	
	КоличествоПоказателей = 0;
	Для каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли; 
	КонецЦикла; 
	
	ПоследнийСтолбецОтчета = КоличествоПоказателей + 3;

	Секция = Макет.ПолучитьОбласть("ШапкаИнтервал|КолонкаОсновная");
	Секция.Параметры.СтрокаИнтервал = СформироватьСтрокуПериода();
	Таб.Вывести(Секция);
	Таб.Область(1, 2, 4, ПоследнийСтолбецОтчета).ПоВыделеннымКолонкам = Истина;
	мКоличествоВыведенныхСтрокЗаголовка = 4;
	
	Секция = Макет.ПолучитьОбласть("ШапкаПараметров|КолонкаОсновная");
	Секция.Параметры.СтрокаПараметров = "Анализируемый объект: "+мСписокОбъектов.НайтиПоЗначению(ОбъектАнализа).Представление+", параметр: "+Показатели.Найти(ПараметрАнализа).Представление;
	Таб.Вывести(Секция);
	Таб.Область(5, 2, 5, ПоследнийСтолбецОтчета).ПоВыделеннымКолонкам = Истина;
	мКоличествоВыведенныхСтрокЗаголовка = 5;
	
	ПоследняяСтрока = мКоличествоВыведенныхСтрокЗаголовка;
	СтрокаГруппировок = УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	Если НЕ ПустаяСтрока(СтрокаГруппировок) Тогда
		ПоследняяСтрока = ПоследняяСтрока + 1;
		СтрокаГруппировок = "Группировки строк: " + СтрокаГруппировок;
		Секция = Макет.ПолучитьОбласть("ШапкаГруппировки|КолонкаОсновная");
		Секция.Параметры.СтрокаГруппировок = СтрокаГруппировок;
		Таб.Вывести(Секция);
		Таб.Область(ПоследняяСтрока, 2, ПоследняяСтрока, ПоследнийСтолбецОтчета).ПоВыделеннымКолонкам = Истина;
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 

	СтрокаОтборов = "";
	Если ОтборФлагКласс Тогда
		Если ОтборВидСравненияКласс = ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + "XYZ-класс = "+ СокрЛП(ОтборЗначениеКласс);
		ИначеЕсли ОтборВидСравненияКласс = ВидСравнения.НеРавно Тогда
			СтрокаОтборов = СтрокаОтборов + "XYZ-класс <> "+ СокрЛП(ОтборЗначениеКласс);
		ИначеЕсли ОтборВидСравненияКласс = ВидСравнения.ВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ОтборЗначениеКласс Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Значение);
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + "XYZ-класс в списке "+ СтрокаСписка;
		ИначеЕсли ОтборВидСравненияКласс = ВидСравнения.НеВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ОтборЗначениеКласс Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Значение);
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + "XYZ-класс не в списке "+ СтрокаСписка;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаОтборов = СтрокаОтборов + ?(Не ПустаяСтрока(СтрокаОтборов), ", ", "");
	Если ОтборФлагКлассABC Тогда
		Если ОтборВидСравненияКлассABC = ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + "АВС-класс = "+ СокрЛП(ОтборЗначениеКлассABC);
		ИначеЕсли ОтборВидСравненияКласс = ВидСравнения.НеРавно Тогда
			СтрокаОтборов = СтрокаОтборов + "АВС-класс <> "+ СокрЛП(ОтборЗначениеКлассABC);
		ИначеЕсли ОтборВидСравненияКлассABC = ВидСравнения.ВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ОтборЗначениеКлассABC Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Значение);
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + "АВС-класс в списке "+ СтрокаСписка;
		ИначеЕсли ОтборВидСравненияКлассABC = ВидСравнения.НеВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ОтборЗначениеКлассABC Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Значение);
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + "АВС-класс не в списке "+ СтрокаСписка;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаОтборовПостроителя = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	СтрокаОтборов = СтрокаОтборов + ?(Не ПустаяСтрока(СтрокаОтборовПостроителя), ?(Не ПустаяСтрока(СтрокаОтборов), ", ", "") + СтрокаОтборовПостроителя,""); 

	Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
		ПоследняяСтрока = ПоследняяСтрока + 1;
		СтрокаОтборов = "Отбор: " + СтрокаОтборов;
		Секция = Макет.ПолучитьОбласть("ШапкаОтбор|КолонкаОсновная");
		Секция.Параметры.СтрокаОтборов = СтрокаОтборов;
		Таб.Вывести(Секция);
		Таб.Область(ПоследняяСтрока, 2, ПоследняяСтрока, ПоследнийСтолбецОтчета).ПоВыделеннымКолонкам = Истина;
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 
	
	СтрокаПорядка = УправлениеОтчетами.СформироватьСтрокуПорядка(ПостроительОтчета.Порядок);
	Если НЕ ПустаяСтрока(СтрокаПорядка) Тогда
		ПоследняяСтрока = ПоследняяСтрока + 1;
		СтрокаПорядка = "Сортировка: " + СтрокаПорядка;
		Секция = Макет.ПолучитьОбласть("ШапкаПорядок|КолонкаОсновная");
		Секция.Параметры.СтрокаПорядка = СтрокаПорядка;
		Таб.Вывести(Секция);
		Таб.Область(ПоследняяСтрока, 2, ПоследняяСтрока, ПоследнийСтолбецОтчета).ПоВыделеннымКолонкам = Истина;
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли;
	
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкаОбъекта = ПостроительОтчета.ИзмеренияСтроки.Найти(ОбъектАнализа);
	Если ГруппировкаОбъекта = Неопределено Тогда
		ФормаОтчета = ЭтотОбъект.ПолучитьФорму("Форма");
		ПредставлениеОбъектаАнализа = ФормаОтчета.ЭлементыФормы.ОбъектАнализа.СписокВыбора.НайтиПоЗначению(ОбъектАнализа).Представление;
		Предупреждение("Группировка по объекту анализа """ + ПредставлениеОбъектаАнализа + """, должна присутствовать обязательно!");
		Возврат;
	Иначе
		мИндексГруппировкиОбъекта = ПостроительОтчета.ИзмеренияСтроки.Индекс(ГруппировкаОбъекта);
	КонецЕсли; 

	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаОсновная");
	Таб.Вывести(Секция);
	
	Для каждого СтрокаГруппы из Группы Цикл
		Если НЕ СтрокаГруппы.Использование Тогда
			Продолжить;
		КонецЕсли;
		Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|" + СтрокаГруппы.Группировка);
		Таб.Присоединить(Секция);
	КонецЦикла;
	
	Для каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаПоказатель");
			Секция.Параметры.ИмяПоказателя = Показатель.Представление;
			Таб.Присоединить(Секция);
		КонецЕсли; 
	КонецЦикла; 
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	ТаблицаКлассовОбъектов = Новый ТаблицаЗначений;
	ТаблицаКлассовОбъектов.Колонки.Добавить("Объект");
	ТаблицаКлассовОбъектов.Колонки.Добавить("КлассXYZ", Новый ОписаниеТипов("ПеречислениеСсылка.XYZКлассификация"));
	ТаблицаКлассовОбъектов.Колонки.Добавить("КлассABC", Новый ОписаниеТипов("ПеречислениеСсылка.ABCКлассификация"));
	ТаблицаКлассовОбъектов.Колонки.Добавить("КоэффициентВариации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаКлассовОбъектов.Колонки.Добавить("СреднееЗначение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
    ТаблицаКлассовОбъектов.Колонки.Добавить("Доля", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5,2));
	ТаблицаКлассовОбъектов.Колонки.Добавить("РаспределениеПоПериодам");
	Для каждого Показатель Из Показатели Цикл
		ТаблицаКлассовОбъектов.Колонки.Добавить(Показатель.Имя, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЦикла;
	
	Таб.НачатьАвтогруппировкуСтрок();
	
	// Заполним данные для возможной диаграммы, дерево значений
	ТаблицаДиаграммы = Новый ТаблицаЗначений;
	Если ОбъектАнализа = "Контрагент" Тогда
		ТаблицаДиаграммы.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ИначеЕсли ОбъектАнализа = "Номенклатура" Тогда
		ТаблицаДиаграммы.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Иначе
		ТаблицаДиаграммы.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КонецЕсли; 
	ТаблицаДиаграммы.Колонки.Добавить("КлассXYZ", Новый ОписаниеТипов("ПеречислениеСсылка.XYZКлассификация"));
	ТаблицаДиаграммы.Колонки.Добавить("КлассABC", Новый ОписаниеТипов("ПеречислениеСсылка.ABCКлассификация"));
	ТаблицаДиаграммы.Колонки.Добавить("РаспределениеПоПериодам");
	ТаблицаДиаграммы.Колонки.Добавить("КоэффициентВариации", Новый ОписаниеТипов("Число"));
	Для каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			ТаблицаДиаграммы.Колонки.Добавить(Показатель.Имя, Новый ОписаниеТипов("Число"));
		КонецЕсли; 
	КонецЦикла; 
	Если ТаблицаДиаграммы.Колонки.Найти("СуммаВыручки") <> Неопределено И ТаблицаДиаграммы.Колонки.Найти("КоличествоПроданныхТоваров") <> Неопределено Тогда
		ТаблицаДиаграммы.Колонки.Добавить("ЦенаПродажи", Новый ОписаниеТипов("Число"));
		СчитатьЦенуПродажи = Истина;
	Иначе
		СчитатьЦенуПродажи = Ложь;
	КонецЕсли;
	
	ВывестиСтроки(Таб, Макет, РезультатЗапроса, 0, ТаблицаКлассовОбъектов, ТаблицаДиаграммы);
	
	Таб.ЗакончитьАвтогруппировкуСтрок();
	
	Таб.ФиксацияСверху = мКоличествоВыведенныхСтрокЗаголовка + 2;
	Таб.ФиксацияСлева = 2;

	ИзменитьВидимостьЗаголовка(Таб);
	
	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();
	
КонецПроцедуры

// Процедура подготавливает данные для вывода строк в ПолеТабличногоДокумента
// 
// Параметры
//  Таб                                 - ПолеТабличногоДокумента, в котором показывать данные отчета
//  Макет                               - макет отчета
//  ТекущаяВыборка                      - выборка запроса, из которой выводить строки
//  ИндексТекущейГруппировки            - число, индекс выводимой группировки
//  ТаблицаКлассовОбъектов              - ТаблицаЗначений, в которую записываются данные о распределенных объектах по классам
//  СтруктураЗначенийВерхнихГруппировок - Структура, в которой передаются параметры верхних, уже выведенных в табличный документ,
//                                        группировок, для ссуммирования показателей при установленном отборе по АВС-классам
// 
// Возвращаемое значение
//  НЕТ
// 
Процедура ВывестиСтроки(Таб, Макет, ТекущаяВыборка, ИндексТекущейГруппировки, ТаблицаКлассовОбъектов, ТаблицаДиаграммы, СтруктураЗначенийВерхнихГруппировок = Неопределено)

	Если ИндексТекущейГруппировки > ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеГруппировки = ПостроительОтчета.ИзмеренияСтроки[ИндексТекущейГруппировки].Имя;
	
	// Если добавить в группировки строк одинаковые значения, то в именах групировок
	// добавляется цифра 1,2,3..., а поля таблицы запроса естественно не добавляются с такими именами
	// поэтому из имени группировки удилим последние цифры в имени
	
	а = СтрДлина(НаименованиеГруппировки);
	Пока а > 0 Цикл
		Если КодСимвола(Сред(НаименованиеГруппировки, а, 1)) >= 49 И КодСимвола(Сред(НаименованиеГруппировки, а, 1)) <= 57 Тогда
			а = а - 1;
			Продолжить;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	НаименованиеГруппировки = Лев(НаименованиеГруппировки, а);

	Выборка = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, НаименованиеГруппировки);
	
	Если НаименованиеГруппировки = ОбъектАнализа Тогда
		
		ТаблицаКлассовОбъектов.Очистить();
		ЗаполнитьТаблицуКлассовОбъектов(ТекущаяВыборка, ТаблицаКлассовОбъектов);
		
		Для каждого СтрокаГруппы из Группы Цикл
			СтрокаГруппы.ПрошлыйКласс = Неопределено;
		КонецЦикла;
		
		Для каждого СтрокаТаблицыКлассов Из ТаблицаКлассовОбъектов Цикл
			
			Если НЕ ПроверитьКлассВОтборе(СтрокаТаблицыКлассов.КлассXYZ,СтрокаТаблицыКлассов.КлассABC) Тогда
				Продолжить;
			КонецЕсли; 
			
			ИзмененПервыйКласс = Ложь;
			
			СтруктураКлассов = Новый Структура;
			
			НомерГруппировкиПоПорядку = 0;
			
			Для каждого СтрокаГруппы из Группы Цикл
				
				Если Не СтрокаГруппы.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				НазваниеКолонкиКласса = "Класс"+СтрокаГруппы.Группировка;
				ПрошлыйКласс = СтрокаГруппы.ПрошлыйКласс;
				
				СтруктураКлассов.Вставить(НазваниеКолонкиКласса,СтрокаТаблицыКлассов[НазваниеКолонкиКласса]);
				
				Если СтрокаТаблицыКлассов[НазваниеКолонкиКласса] <> ПрошлыйКласс ИЛИ ИзмененПервыйКласс Тогда
					
					СтрокаГруппы.ПрошлыйКласс = СтрокаТаблицыКлассов[НазваниеКолонкиКласса];
					
					ИзмененПервыйКласс = (СтрокаГруппы.НомерСтроки = 1);
					
					СтруктураЗначений = Новый Структура;
					СтрокиКласса = ТаблицаКлассовОбъектов.НайтиСтроки(СтруктураКлассов);
					Для каждого СтрокаКласса Из СтрокиКласса Цикл
						Для каждого Показатель Из Показатели Цикл
							Если Показатель.Использование Тогда
								Если СтруктураЗначений.Свойство(Показатель.Имя) Тогда
									СтруктураЗначений[Показатель.Имя] = СтруктураЗначений[Показатель.Имя] + СтрокаКласса[Показатель.Имя];
								Иначе
									СтруктураЗначений.Вставить(Показатель.Имя, СтрокаКласса[Показатель.Имя]);
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
					КонецЦикла; 
					
					Если ТипЗнч(СтруктураЗначенийВерхнихГруппировок) = Тип("Структура") Тогда
						Для каждого ЭлементСтруктуры Из СтруктураЗначенийВерхнихГруппировок Цикл
							Если СтруктураЗначений.Свойство(ЭлементСтруктуры.Ключ) Тогда
								Если ТипЗнч(СтруктураЗначенийВерхнихГруппировок[ЭлементСтруктуры.Ключ]) = Тип("Число") Тогда
									Если ИзмененПервыйКласс Тогда
										СтруктураЗначенийВерхнихГруппировок[ЭлементСтруктуры.Ключ] = СтруктураЗначенийВерхнихГруппировок[ЭлементСтруктуры.Ключ] + СтруктураЗначений[ЭлементСтруктуры.Ключ];
									КонецЕсли;
								Иначе
									СтруктураЗначенийВерхнихГруппировок[ЭлементСтруктуры.Ключ] = СтруктураЗначений[ЭлементСтруктуры.Ключ];
								КонецЕсли;								
							КонецЕсли; 
						КонецЦикла; 
					КонецЕсли; 
					
					ВывестиСтрокуГруппировки(СтрокаТаблицыКлассов, НазваниеКолонкиКласса, Макет, ИндексТекущейГруппировки, Таб, СтруктураЗначений, , НомерГруппировкиПоПорядку);
					
				КонецЕсли;
				
				НомерГруппировкиПоПорядку = НомерГруппировкиПоПорядку + 1;
				
			КонецЦикла;
			
			Выборка.Сбросить();
			Если НЕ Выборка.НайтиСледующий(Новый Структура(НаименованиеГруппировки, СтрокаТаблицыКлассов.Объект)) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДиаграммы = ТаблицаДиаграммы.Добавить();
			СтрокаДиаграммы.Объект = Выборка[НаименованиеГруппировки];
			СтрокаДиаграммы.КлассXYZ  = СтрокаТаблицыКлассов.КлассXYZ;
			СтрокаДиаграммы.КлассABC  = СтрокаТаблицыКлассов.КлассABC;
			СтрокаДиаграммы.РаспределениеПоПериодам = СтрокаТаблицыКлассов.РаспределениеПоПериодам;
			
			ВывестиСтрокуГруппировки(Выборка, НаименованиеГруппировки, Макет, ИндексТекущейГруппировки, Таб, ТаблицаКлассовОбъектов.Скопировать(), СтрокаДиаграммы);
			ВывестиСтроки(Таб, Макет, Выборка, ИндексТекущейГруппировки+1, ТаблицаКлассовОбъектов, ТаблицаДиаграммы);
			
		КонецЦикла; 
		
	Иначе
		
		СтруктураНокопленияЗначений = Новый Структура;
		Для каждого Показатель Из Показатели Цикл
			Если Показатель.Использование Тогда
				СтруктураНокопленияЗначений.Вставить(Показатель.Имя, 0);
			КонецЕсли; 
		КонецЦикла; 
		
		Пока Выборка.Следующий() Цикл

			СтруктураЗначенийВерхнихГруппировок = Неопределено;
			ВывестиСтрокуГруппировки(Выборка, НаименованиеГруппировки, Макет, ИндексТекущейГруппировки, Таб, СтруктураЗначенийВерхнихГруппировок);
			
			СтараяСтруктураЗначенийВерхнихГруппировок = Новый Структура;
			Если ТипЗнч(СтруктураЗначенийВерхнихГруппировок) = Тип("Структура") Тогда
				Для каждого ЭлементСтруктуры Из СтруктураЗначенийВерхнихГруппировок Цикл
					СтараяСтруктураЗначенийВерхнихГруппировок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				КонецЦикла; 
			КонецЕсли; 
			
			ВывестиСтроки(Таб, Макет, Выборка, ИндексТекущейГруппировки+1, ТаблицаКлассовОбъектов, ТаблицаДиаграммы, СтруктураЗначенийВерхнихГруппировок);
			
			Если ТипЗнч(СтараяСтруктураЗначенийВерхнихГруппировок) = Тип("Структура") Тогда
				Для каждого ЭлементСтруктуры Из СтруктураЗначенийВерхнихГруппировок Цикл
					Если СтараяСтруктураЗначенийВерхнихГруппировок.Свойство(ЭлементСтруктуры.Ключ) Тогда
						СтараяСтруктураЗначенийВерхнихГруппировок[ЭлементСтруктуры.Ключ].Текст = Формат((Число(СтараяСтруктураЗначенийВерхнихГруппировок[ЭлементСтруктуры.Ключ].Текст) + ЭлементСтруктуры.Значение), "ЧЦ=20; ЧДЦ=2; ЧРД=,");
						СтруктураНокопленияЗначений[ЭлементСтруктуры.Ключ] = СтруктураНокопленияЗначений[ЭлементСтруктуры.Ключ] + ЭлементСтруктуры.Значение;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
		КонецЦикла; 
		
		СтруктураЗначенийВерхнихГруппировок = СтруктураНокопленияЗначений;
		
	КонецЕсли; 

КонецПроцедуры

// Процедура выводит строки в ПолеТабличногоДокумента
// 
// Параметры
//  Выборка                  - Выборка запроса, из которой выводить строки
//  НаименованиеГруппировки  - Строка, имя текущей группировки
//  Макет                    - макет отчета
//  ИндексТекущейГруппировки - число, индекс выводимой группировки
//  Таб                      - ПолеТабличногоДокумента, в котором показывать данные отчета
//  СтруктураЗначений        - Структура, в которую записыватся данные о выведенных строках в табличный документ
// 
// Возвращаемое значение
//  НЕТ
// 
Процедура ВывестиСтрокуГруппировки(Выборка, НаименованиеГруппировки, Макет, ИндексТекущейГруппировки, Таб, СтруктураЗначений = Неопределено, СтрокаДиаграммы = Неопределено, СмещениеИндексаГруппировки = 2)

	СтрокаВывода = СокрЛП(Выборка[НаименованиеГруппировки]);
	Если ПустаяСтрока(СтрокаВывода) Тогда
		СтрокаВывода = "<...>";
	КонецЕсли;
	
	Если ИндексТекущейГруппировки >= мИндексГруппировкиОбъекта Тогда
		РеальныйИндексТекущейГруппировки = ИндексТекущейГруппировки + СмещениеИндексаГруппировки;
	Иначе
		РеальныйИндексТекущейГруппировки = ИндексТекущейГруппировки;
	КонецЕсли; 

	ТекущийЦвет = Новый Цвет;
	Если РаскрашиватьГруппировки Тогда
		Если РеальныйИндексТекущейГруппировки <> ПостроительОтчета.ИзмеренияСтроки.Количество() Тогда
			ИндексЦвета = РеальныйИндексТекущейГруппировки;
			Если ИндексЦвета >= 10 Тогда
				ИндексЦвета = (РеальныйИндексТекущейГруппировки/10 - Цел(РеальныйИндексТекущейГруппировки/10))*10;
			КонецЕсли; 
			ТекущийЦвет = Макет.Области["Цвет"+СокрЛП(ИндексЦвета)].ЦветФона;
		Иначе
			ТекущийЦвет = Новый Цвет;
		КонецЕсли; 
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("СтрокаГруппировки|КолонкаОсновная");
	Секция.Параметры.ЗначениеГруппировки = СтрокаВывода;
	Секция.Области.ЗначениеГруппировки.ЦветФона = ТекущийЦвет;
	Секция.Области.ЗначениеГруппировки.Отступ = РеальныйИндексТекущейГруппировки;
	Секция.Области.ЗначениеГруппировки.Расшифровка = Выборка[НаименованиеГруппировки];
	Если Лев(НаименованиеГруппировки,5) = "Класс" Тогда
		Секция.Области.ЗначениеГруппировки.Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;
	
	Таб.Вывести(Секция, РеальныйИндексТекущейГруппировки);
	
	Для каждого СтрокаГруппы из Группы Цикл
		Если НЕ СтрокаГруппы.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("СтрокаГруппировки|"+СтрокаГруппы.Группировка);
		
		Если СтрокаГруппы.Группировка = "XYZ" Тогда
			
			Если ТипЗнч(СтруктураЗначений) = Тип("ТаблицаЗначений") Тогда
				СтрокаКонтрагента = СтруктураЗначений.Найти(Выборка[НаименованиеГруппировки], "Объект");
				Если СтрокаКонтрагента <> Неопределено Тогда
					Секция.Параметры.ЗначениеКоэффициентаВариации = Формат(СтрокаКонтрагента.КоэффициентВариации, "ЧЦ=20; ЧДЦ=3; ЧРД=,");
					Секция.Параметры.ЗначениеСреднего = Формат(СтрокаКонтрагента.СреднееЗначение, "ЧЦ=15; ЧДЦ=2; ЧРД=,");
					
					Если СтрокаДиаграммы <> Неопределено Тогда
						СтрокаДиаграммы.КоэффициентВариации = СтрокаКонтрагента.КоэффициентВариации;
					КонецЕсли;
					
				КонецЕсли; 
			КонецЕсли;
			
			Секция.Области.ЗначениеКоэффициентаВариации.ЦветФона = ТекущийЦвет;
			Секция.Области.ЗначениеСреднего.ЦветФона = ТекущийЦвет;
			
		Иначе
			
			Если ТипЗнч(СтруктураЗначений) = Тип("ТаблицаЗначений") Тогда
				СтрокаКонтрагента = СтруктураЗначений.Найти(Выборка[НаименованиеГруппировки], "Объект");
				Если СтрокаКонтрагента <> Неопределено Тогда
					Секция.Параметры.ЗначениеДолиПараметра = Формат(СтрокаКонтрагента.Доля, "ЧЦ=5; ЧДЦ=2; ЧРД=,");
				КонецЕсли; 
			КонецЕсли;
			
			Секция.Области.ЗначениеДолиПараметра.ЦветФона = ТекущийЦвет;
			
		КонецЕсли;
		
		Секция.ТекущаяОбласть.ЦветФона = ТекущийЦвет;
		ОбластьЯчеекТаблицы = Таб.Присоединить(Секция, РеальныйИндексТекущейГруппировки);
	КонецЦикла;
	
	СтруктураВозвратаЗначений = Новый Структура;
	Для каждого Показатель Из Показатели Цикл
		Если Показатель.Использование Тогда
			Секция = Макет.ПолучитьОбласть("СтрокаГруппировки|КолонкаПоказатель");
			Если ТипЗнч(СтруктураЗначений) = Тип("Структура") Тогда
				Секция.Параметры.ЗначениеПоказателя = Формат(СтруктураЗначений[Показатель.Имя], "ЧЦ=20; ЧДЦ=2; ЧРД=,");
				Если СтрокаДиаграммы <> Неопределено Тогда
					СтрокаДиаграммы[Показатель.Имя] = СтруктураЗначений[Показатель.Имя];
				КонецЕсли; 
			Иначе
				Секция.Параметры.ЗначениеПоказателя = Формат(Выборка[Показатель.Имя], "ЧЦ=20; ЧДЦ=2; ЧРД=,");
				Если СтрокаДиаграммы <> Неопределено Тогда
					СтрокаДиаграммы[Показатель.Имя] = Выборка[Показатель.Имя];
				КонецЕсли; 
			КонецЕсли;
			Секция.ТекущаяОбласть.ЦветФона = ТекущийЦвет;
			ОбластьЯчеекТаблицы = Таб.Присоединить(Секция, РеальныйИндексТекущейГруппировки);
			Если ИндексТекущейГруппировки < мИндексГруппировкиОбъекта Тогда
				ОбластьЯчеекТаблицы.Текст = "0";
				СтруктураВозвратаЗначений.Вставить(Показатель.Имя, ОбластьЯчеекТаблицы);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Если СтрокаДиаграммы <> Неопределено И СчитатьЦенуПродажи Тогда
		СтрокаДиаграммы.ЦенаПродажи = ?(СтрокаДиаграммы.КоличествоПроданныхТоваров=0,0,СтрокаДиаграммы.СуммаВыручки/СтрокаДиаграммы.КоличествоПроданныхТоваров);
	КонецЕсли;
	
	СтруктураЗначений = СтруктураВозвратаЗначений;

КонецПроцедуры

// Сформируем список объектов анализа отчета
мСписокОбъектов = Новый СписокЗначений;
мСписокОбъектов.Добавить("Контрагент", "Контрагент");
мСписокОбъектов.Добавить("Номенклатура", "Номенклатура");
мСписокОбъектов.Добавить("МенеджерПокупателя", "Менеджер покупателя");

мСтруктураСоответствияИмен = Новый Структура;

// Заполним таблицу возможных для отображения показателей отчета
НовыйПоказатель = Показатели.Добавить();
НовыйПоказатель.Имя = "СуммаВыручки";
НовыйПоказатель.Представление = "Сумма выручки в валюте упр.учета (" + глЗначениеПеременной("ВалютаУправленческогоУчета") + ")";

НовыйПоказатель = Показатели.Добавить();
НовыйПоказатель.Имя = "СуммаВаловойПрибыли";
НовыйПоказатель.Представление = "Сумма валовой прибыли в валюте упр.учета (" + глЗначениеПеременной("ВалютаУправленческогоУчета") + ")";

НовыйПоказатель = Показатели.Добавить();
НовыйПоказатель.Имя = "КоличествоПроданныхТоваров";
НовыйПоказатель.Представление = "Количество проданных товаров";      

НовыйПоказатель = Показатели.Добавить();
НовыйПоказатель.Имя = "КоличествоПродаж";
НовыйПоказатель.Представление = "Количество продаж";  

мКоличествоВыведенныхСтрокЗаголовка = 0;
мИндексГруппировкиОбъекта = 0;

мДатаНачала = '00010101000000';
#КонецЕсли
