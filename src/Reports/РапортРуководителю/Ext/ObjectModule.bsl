#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем мСтруктураСохраненныеНастройки Экспорт; // Структура предназначенная для сохранения/восстановления
											  // показателей и их параметров
Перем мНомерРелизаПараметровНастройки Экспорт; // Содержит номер релиза параметров настройки
											   // Если номер релиза сохраненных данных не соответствует
											   // значению переменной - параметры настройки инициализируются
											   // значениями по умолчанию

Перем мТабДокумент  Экспорт; // Результирующий табличный документ.
Перем мHTMLДокумент Экспорт; // Результирующий документ формата HTML.
Перем мМакет        Экспорт; // Макет отчета

Перем мСтруктТабДок; // Структура сформированных табличных документов
                     // которая впоследствии выводится в табличный документ формы
					 // в порядке определяемом деревом показателей
					 
Перем мСоответствиеПраваДоступа;      // Соответствие в котором хранятся права доступа пользователя к показателям
Перем мТекущаяДата           Экспорт; // Текущая дата формирования отчета

Перем мМассивВременныхФайлов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура расшифровки отчета
//
Процедура Расшифровка_ОстаткиОбороты(СтруктураРасшифровки)
	
	Отчет = Отчеты.ОтчетОстаткиИОбороты.Создать();
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяРегистра", СтруктураРасшифровки.ИмяРегистра);
	СтруктураПараметров.Вставить("ДатаНач", СтруктураРасшифровки.ДатаНач);
	СтруктураПараметров.Вставить("ДатаКон", СтруктураРасшифровки.ДатаКон);
	
	Если СтруктураРасшифровки.Свойство("Отбор") Тогда
		СтруктураПараметров.Вставить("Отбор", СтруктураРасшифровки.Отбор);
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("ГруппировкиСтрок") Тогда
		СтруктураПараметров.Вставить("ГруппировкиСтрок", СтруктураРасшифровки.ГруппировкиСтрок);
	Иначе
		СтруктураПараметров.Вставить("ЗаполнитьПоУмолчанию", Истина);
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("ВыбранныеПоля") Тогда
		СтруктураПараметров.Вставить("ВыбранныеПоля", СтруктураРасшифровки.ВыбранныеПоля);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РаскрашиватьИзмерения", Истина);
	
	Отчет.Настроить(СтруктураПараметров);
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Процедура расшифровки отчета
//
Процедура Расшифровка_КроссТаблица(СтруктураРасшифровки)
	
	Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяРегистра", СтруктураРасшифровки.ИмяРегистра);
	Если СтруктураРасшифровки.Свойство("ДатаНач") Тогда
		СтруктураПараметров.Вставить("ДатаНач", СтруктураРасшифровки.ДатаНач);
	КонецЕсли; 
	СтруктураПараметров.Вставить("ДатаКон", СтруктураРасшифровки.ДатаКон);
	
	Если СтруктураРасшифровки.Свойство("Отбор") Тогда
		СтруктураПараметров.Вставить("Отбор", СтруктураРасшифровки.Отбор);
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("ГруппировкиСтрок") Тогда
		СтруктураПараметров.Вставить("ГруппировкиСтрок", СтруктураРасшифровки.ГруппировкиСтрок);
	Иначе
		СтруктураПараметров.Вставить("ЗаполнитьПоУмолчанию", Истина);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РаскрашиватьИзмерения", Истина);
	
	Отчет.Настроить(СтруктураПараметров);
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Процедура инициализации переменных формы по умолчанию
//
Процедура ИнициализацияПоУмолчанию()
	
	ВидОтчета = "Таблица";
	ФормироватьВФайл = Ложь;
	КаталогФормирования = "";
	ФормироватьВПочту = Ложь;
	ИспользоватьАвтообновление = Ложь;
	ИнтервалАвтообновления = 0;
	ЧислоДнейДоТекущейДаты = 0;
	УчитыватьВыходные = Ложь;
	ФормироватьПриСтартеСистемы = Ложь;
	
	АдресаЭлПочты = Новый ТаблицаЗначений;
	АдресаЭлПочты.Колонки.Добавить("Адрес", СоздатьТип("Строка"));
	МассивТипов = Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения.Объект.Тип.Типы();
	МассивТипов.Добавить(Тип("Строка"));
	АдресаЭлПочты.Колонки.Добавить("Адресат", Новый ОписаниеТипов(МассивТипов));
	АдресаЭлПочты.Колонки.Добавить("ВидАдреса", Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения.Вид.Тип);
	
КонецПроцедуры // ИнициализацияПоУмолчанию()

// Выполняет настройку отчета по умолчанию для заданного регистра накопления.
//
// Параметры: 
//	ИмяРегистра   - строка, имя регистра накопления
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	мСтруктураСохраненныеНастройки = ВосстановитьЗначение( "ОбработкаРапортРуководителю_Настройки");
	СтруктПарам = Новый Структура;
	
	Если мСтруктураСохраненныеНастройки = Неопределено Тогда
		мСтруктураСохраненныеНастройки = Новый Структура;
		ИнициализацияПоУмолчанию();
	Иначе
		НомерРелиза = 0;
		мСтруктураСохраненныеНастройки.Свойство("_НомерРелизаОтчета", НомерРелиза);
		Если НомерРелиза = Неопределено 
		 Или Не НомерРелиза = мНомерРелизаПараметровНастройки Тогда
			мСтруктураСохраненныеНастройки = Новый Структура;
			ИнициализацияПоУмолчанию();
			СохранитьЗначение( "ОбработкаРапортРуководителю_Настройки", Неопределено);
			Сообщить("Параметры настройки инициализированы значениями по умолчанию.", СтатусСообщения.Информация);
		Иначе
			мСтруктураСохраненныеНастройки.Свойство( "_ДанныеФормы", СтруктПарам);
			Если СтруктПарам = Неопределено Тогда
				ИнициализацияПоУмолчанию();
			Иначе // Восстановим сохраненные значения
				СтруктПарам.Свойство("ВидОтчета", ВидОтчета);
				Если ВидОтчета = Неопределено Тогда
					ВидОтчета = "Таблица";
				КонецЕсли;
				
				СтруктПарам.Свойство("ФормироватьВФайл", ФормироватьВФайл);
				Если ФормироватьВФайл = Неопределено Тогда
					ФормироватьВФайл = Ложь;
				КонецЕсли;
				
				СтруктПарам.Свойство("КаталогФормирования", КаталогФормирования);
				Если КаталогФормирования = Неопределено Тогда
					КаталогФормирования = "";
				КонецЕсли;
				
				СтруктПарам.Свойство("ФормироватьВПочту", ФормироватьВПочту);
				Если ФормироватьВПочту = Неопределено Тогда
					ФормироватьВПочту = Ложь;
				КонецЕсли;
				
				Если НЕ СтруктПарам.Свойство("АдресЭлектроннойПочтыУчетнойЗаписи", АдресЭлектроннойПочтыУчетнойЗаписи) Тогда
					АдресЭлектроннойПочтыУчетнойЗаписи = "";
				КонецЕсли; 
				
				СтруктПарам.Свойство("АдресаЭлПочты", АдресаЭлПочты);
				Если АдресаЭлПочты = Неопределено
				Или Не ТипЗнч(АдресаЭлПочты) = Тип("ТаблицаЗначений") Тогда
					АдресаЭлПочты = Новый ТаблицаЗначений;
					АдресаЭлПочты.Колонки.Добавить("Адрес", СоздатьТип("Строка"));
					МассивТипов = Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения.Объект.Тип.Типы();
					МассивТипов.Добавить(Тип("Строка"));
					АдресаЭлПочты.Колонки.Добавить("Адресат", Новый ОписаниеТипов(МассивТипов));
					АдресаЭлПочты.Колонки.Добавить("ВидАдреса", Метаданные.РегистрыСведений.КонтактнаяИнформация.Измерения.Вид.Тип);
				КонецЕсли;
				
				СтруктПарам.Свойство("ИспользоватьАвтообновление", ИспользоватьАвтообновление);
				Если ИспользоватьАвтообновление = Неопределено Тогда
					ИспользоватьАвтообновление = Ложь;
				КонецЕсли;
				
				СтруктПарам.Свойство("ИнтервалАвтообновления", ИнтервалАвтообновления);
				Если ИнтервалАвтообновления = Неопределено Тогда
					ИнтервалАвтообновления = 0;
				КонецЕсли;
				
				СтруктПарам.Свойство("УчитыватьВыходные", УчитыватьВыходные);
				Если УчитыватьВыходные = Неопределено Тогда
					УчитыватьВыходные = Ложь;
				КонецЕсли;
				
				СтруктПарам.Свойство("ЧислоДнейДоТекущейДаты", ЧислоДнейДоТекущейДаты);
				Если ЧислоДнейДоТекущейДаты = Неопределено Тогда
					ЧислоДнейДоТекущейДаты = 0;
				КонецЕсли;
				
				СтруктПарам.Свойство("ФормироватьПриСтартеСистемы", ФормироватьПриСтартеСистемы);
				Если ФормироватьПриСтартеСистемы = Неопределено Тогда
					ФормироватьПриСтартеСистемы = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	 
	КонецЕсли;

	// Рассчитать дату формирования отчета
	мТекущаяДата = ТекущаяДата();
	ДатаКон = мТекущаяДата;
	Дней = ЧислоДнейДоТекущейДаты;
	Если УчитыватьВыходные Тогда
		Если ДеньНедели(ДатаКон) > 5 Тогда
			Дней = Дней + 1;
		КонецЕсли;
		Пока Дней > 0 Цикл
			ДатаКон = ДатаКон - 3600 * 24;
			Если ДеньНедели(ДатаКон) < 6 Тогда
				Дней = Дней - 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДатаКон = ДатаКон - 3600 * 24 * Дней;
	КонецЕсли;

	СтруктураПараметровПоказателей = Новый Структура;
	
	ДеревоПоказателей.Колонки.Очистить();
	ДеревоПоказателей.Строки .Очистить();
	
	ДеревоПоказателей.Колонки.Добавить( "ПредставлениеПоказателя",  СоздатьТип("Строка"));
	ДеревоПоказателей.Колонки.Добавить( "Показатель", СоздатьТип("Строка", 100));
	ДеревоПоказателей.Колонки.Добавить( "ФлагГруппы", СоздатьТип("Булево"));
	ДеревоПоказателей.Колонки.Добавить( "Пометка",    СоздатьТип("Число", 1, 0));
	ДеревоПоказателей.Колонки.Добавить( "Пояснение",  СоздатьТип("Строка"));
	
	ПолучитьПраваДоступаКПоказателям();
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура заполняет соответствие в котором хранятся права доступа к показателям
//
Процедура ПолучитьПраваДоступаКПоказателям() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рапорт",    ПланыВидовХарактеристик["ПраваПользователей"].РапортРуководителю);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПраваПользователей.Ссылка,
	               |	МАКСИМУМ(ЗначенияДополнительныхПравПользователя.Значение) КАК Доступ
	               |ИЗ
	               |	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ПраваПользователей КАК ПраваПользователей
	               |		ПО ЗначенияДополнительныхПравПользователя.Право = ПраваПользователей.Ссылка
	               |ГДЕ
	               |	ПраваПользователей.Ссылка В ИЕРАРХИИ(&Рапорт)
	               |	И ПраваПользователей.Предопределенный = ИСТИНА
	               |	И ЗначенияДополнительныхПравПользователя.Пользователь В
	               |			(ВЫБРАТЬ
	               |				&ТекущийПользователь
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				ПользователиГруппы.Ссылка
	               |			ИЗ
	               |				Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	               |			ГДЕ
	               |				ПользователиГруппы.Пользователь = &ТекущийПользователь
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПраваПользователей.Ссылка";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	мСоответствиеПраваДоступа = Новый Соответствие;
	Для Каждого Обход Из РезультатЗапроса Цикл
		мСоответствиеПраваДоступа.Вставить(Обход.Ссылка, Обход.Доступ);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьПраваДоступаКПоказателям()

// Процедура формирует даты аналогичного периода
//
Функция ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
	
	Если АналогПериод = "Неделя" Тогда
		НачалоАналогПериода = ДатаНачалаПериода - 3600 * 24 * 7;
	ИначеЕсли АналогПериод = "Месяц" Тогда
		НачалоАналогПериода = ДобавитьМесяц( ДатаНачалаПериода, -1);
	ИначеЕсли АналогПериод = "Квартал" Тогда
		НачалоАналогПериода = ДобавитьМесяц( ДатаНачалаПериода, -3);
	ИначеЕсли АналогПериод = "Год" Тогда
		НачалоАналогПериода = ДобавитьМесяц( ДатаНачалаПериода, -12);
	Иначе
		НачалоАналогПериода = НачалоДня( ДатаНачалаПериода);
	КонецЕсли;

	СмещениеАналогИнтервала = РассчитатьСмещениеИнтервалов(НачалоАналогПериода, АналогПериод);

	Если Периодичность = "День" Или Периодичность = "Неделя" Тогда
		
		ДеньАналог  = ДеньНедели( НачалоАналогПериода);
		ДеньТек     = ДеньНедели( ДатаНачалаПериода);
		
		НачалоАналогПериода = НачалоАналогПериода + 3600 * 24 * (ДеньТек - ДеньАналог);
		КонецАналогПериода  = НачалоАналогПериода + РассчитатьСмещениеИнтервалов(НачалоАналогПериода, ПериодАнализа) - 1;

		СмещениеАналогИнтервала = СмещениеАналогИнтервала - 3600 * 24 * (ДеньТек - ДеньАналог);
		
	Иначе
		
		Если ПериодАнализа = "Неделя" Тогда
			КонецАналогПериода = КонецНедели( НачалоАналогПериода);
		ИначеЕсли ПериодАнализа = "Месяц" Тогда
			КонецАналогПериода = КонецМесяца( НачалоАналогПериода);
		ИначеЕсли ПериодАнализа = "Квартал" Тогда
			КонецАналогПериода = КонецКвартала( НачалоАналогПериода);
		ИначеЕсли ПериодАнализа = "Год" Тогда
			КонецАналогПериода = КонецГода( НачалоАналогПериода);
		Иначе
			КонецАналогПериода = КонецДня( НачалоАналогПериода);
		КонецЕсли;
		
		КонецАналогПериода = Мин(КонецАналогПериода, НачалоАналогПериода + (ДатаКонцаПериода - ДатаНачалаПериода));
		
	КонецЕсли;

	Возврат СмещениеАналогИнтервала;
	
КонецФункции // ПолучитьДатыАналогПериода()

// Функция 
//
Функция ПрошлыйПериодПоНеделям(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, НачПредДата, КонПредДата)
	
	СмещениеПредИнтервала = РассчитатьСмещениеИнтервалов(ДатаНачалаПериода - 1, ПериодАнализа);
	НачПредДата = ДатаНачалаПериода - СмещениеПредИнтервала;

	// Выравняем начало периода по дню недели
	Если ПериодАнализа = "Месяц" И НЕ Периодичность = "Месяц" Тогда

		НачПредДата = НачалоДня ( ДобавитьМесяц( ДатаНачалаПериода, -1));
		ДеньПрошл   = ДеньНедели( НачПредДата);
		ДеньТек     = ДеньНедели( ДатаНачалаПериода);
		
		НачПредДата = НачПредДата + 3600 * 24 * (ДеньТек - ДеньПрошл);
		КонПредДата = НачПредДата + СмещениеПредИнтервала - 1;

		СмещениеПредИнтервала = СмещениеПредИнтервала - 3600 * 24 * (ДеньТек - ДеньПрошл);
		
	Иначе
		
		// Если в текущем месяце 31 день а в предыдущем 30
		КонПредДата = Мин(ДатаКонцаПериода - СмещениеПредИнтервала, ДатаНачалаПериода - 1);
		
	КонецЕсли;

	Возврат СмещениеПредИнтервала;
	
КонецФункции // ПрошлыйПериодПоНеделям()

// Функция РассчитатьСмещениеИнтервалов() - расчет разницы в секундах в зависимости от периодичности
//
Функция РассчитатьСмещениеИнтервалов(ДатаОтсчета, Периодичность)
	Перем Смещение;
	
	Если Периодичность = "День" Тогда
		
		Смещение = 3600 * 24; // Секунд в сутках
		
	ИначеЕсли Периодичность = "Неделя" Тогда
		
		Смещение = 3600 * 24 * 7;
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		
		Смещение = КонецМесяца  (ДатаОтсчета) - НачалоМесяца  (ДатаОтсчета) + 1;
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		
		Смещение = КонецКвартала(ДатаОтсчета) - НачалоКвартала(ДатаОтсчета) + 1;
		
	ИначеЕсли Периодичность = "Год" Тогда
		
		Смещение = КонецГода    (ДатаОтсчета) - НачалоГода    (ДатаОтсчета) + 1;
		
	Иначе
		
		Смещение = 0;
		
	КонецЕсли;

	Возврат Смещение;
	
КонецФункции // РассчитатьСмещениеИнтервалов()

// Функция возвращает настройки отчета, сохраненные в константе "РапортРуководителю"
//
Функция ПолучитьИзКонстанты() Экспорт
	
	ХранЗнач = Константы.РапортРуководителюВремяАвтопубликации.Получить();
	
	Список = ХранЗнач.Получить();
	Если Список = Неопределено Тогда
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции // ПолучитьИзКонстанты()

// Функция создает имя файла для сохранения отчета
//
Функция СоздатьИмяФайла(Расширение, ОтносительноеИмя = "") Экспорт
	
	Если КаталогФормирования = "<Не выбран каталог>"
	 Или ПустаяСтрока(КаталогФормирования) Тогда
	 
		ИмяФайла = КаталогВременныхФайлов();
		Если ФормироватьВФайл Тогда
			Сообщить("Рапорт сохранен в каталоге - " + ИмяФайла, СтатусСообщения.Информация);
		КонецЕсли;
		
	Иначе
		
	    Файл = Новый Файл(КаталогФормирования);
		Если Файл.Существует() Тогда
			ИмяФайла = КаталогФормирования;
		Иначе
			ИмяФайла = КаталогВременныхФайлов();
			Если ФормироватьВФайл Тогда
				Сообщить("Неверно указан каталог публикования рапорта!", СтатусСообщения.ОченьВажное);
				Сообщить("Рапорт сохранен в каталоге - " + ИмяФайла, СтатусСообщения.Информация);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Если Не Прав(ИмяФайла, 1) = "\" Тогда
			ИмяФайла = ИмяФайла + "\";
		КонецЕсли;
	КонецЕсли;

	ОтносительноеИмя = "Рапорт руководителю " + СтрЗаменить(Формат( ТекущаяДата(), "ДФ=дд.ММММ.гггг.чч-мм-сс"), ".", " ") + ?(ПустаяСтрока(Расширение), "", ".") + Расширение;
	ИмяФайла = ИмяФайла + ОтносительноеИмя;
	
	Возврат ИмяФайла;
				
КонецФункции // СоздатьИмяФайла()

// Функция формирует таблицу с адресами электронной почты
//
Функция СформироватьТаблицуЭлАдресов() Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление КАК Адрес,
		|	КонтактнаяИнформация.Объект        КАК Адресат,
		|	КонтактнаяИнформация.Вид           КАК ВидАдреса
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица) И
		|	КонтактнаяИнформация.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуЭлАдресов()

// Функция возвращает дату начала, в зависимости от выбранного периода анализа
//
Функция ПолучитьДатуНачалаПериода(КонДата, Периодичность)
	
	Если Периодичность = "День" Тогда
		Возврат НачалоДня(КонДата);
	ИначеЕсли Периодичность = "Неделя" Тогда
		Возврат НачалоНедели(КонДата);
	ИначеЕсли Периодичность = "Месяц" Тогда
		Возврат НачалоМесяца(КонДата);
	ИначеЕсли Периодичность = "Квартал" Тогда
		Возврат НачалоКвартала(КонДата);
	ИначеЕсли Периодичность = "Год" Тогда
		Возврат НачалоГода(КонДата);
	Иначе
		Возврат НачалоДня(КонДата);
	КонецЕсли;
	
КонецФункции // ПолучитьДатуНачалаПериода()

// Возвращает даты начала и конца прошлого периода
//
Процедура ПолучитьДатыПрошлогоПериода(Знач ДатаНачалаТекПериода, Знач Периодичность, НачДата, КонДата)
	
	Если Периодичность = "День" Тогда
		
		КонДата = КонецДня ( ДатаНачалаТекПериода - 1);
		НачДата = НачалоДня( КонДата);
		
	ИначеЕсли Периодичность = "Неделя" Тогда
		
		КонДата = КонецДня ( ДатаНачалаТекПериода - 1);
		НачДата = НачалоДня( НачалоНедели( КонДата));
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		
		КонДата = КонецДня ( ДатаНачалаТекПериода - 1);
		НачДата = НачалоДня( НачалоМесяца( КонДата));
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		
		КонДата = КонецДня ( ДатаНачалаТекПериода - 1);
		НачДата = НачалоДня( НачалоКвартала( КонДата));
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДатыПрошлогоПериода()

// Функция СоздатьТип()
//
Функция СоздатьТип( ИмяТипа, Длина = 0, Точность = 0) Экспорт
	Перем ОписаниеТипа;
	Перем Квалификатор;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип(ИмяТипа));

	Если ТипЗнч(ИмяТипа) = Тип("Строка") Тогда
		Если ИмяТипа = "Строка" Тогда
			Если Точность = 0 Тогда
				Квалификатор = Новый КвалификаторыСтроки(Длина);
			Иначе
				Квалификатор = Новый КвалификаторыСтроки(Длина, Точность);
			КонецЕсли;
			ОписаниеТипа = Новый ОписаниеТипов(Массив,, Квалификатор);
			
		ИначеЕсли ИмяТипа = "Число" Тогда
			Квалификатор = Новый КвалификаторыЧисла(Длина, Точность);
			ОписаниеТипа = Новый ОписаниеТипов(Массив, Квалификатор);
			
		Иначе
			ОписаниеТипа = Новый ОписаниеТипов(Массив);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИмяТипа) = Тип("ОписаниеТипов") Тогда
		
		ОписаниеТипа = ИмяТипа;
		
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции // СоздатьТип()

// Процедура обхода дерева показателей
//
Процедура ОбходДереваПоказателей(Дерево, ТабДок)
	
	Для Каждого Показатель Из Дерево.Строки Цикл
		
		Если Показатель.Пометка = 1 Тогда
			
			ТекТаб = Неопределено;
			мСтруктТабДок.Свойство(Показатель.Показатель, ТекТаб);
			
			Если НЕ ТекТаб = Неопределено тогда
				Если ВидОтчета = "Таблица" Тогда
					ТабДок.Вывести(ТекТаб);
				Иначе
					ТабДок = ТабДок + ТекТаб;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Рекурсия
		ОбходДереваПоказателей(Показатель, ТабДок);
		
	КонецЦикла;
	
КонецПроцедуры // ОбходДереваПоказателей()

// Функция возвращает значение параметра показателя
//
Функция ПолучитьПараметрПоказателя(Показатель, Параметр) Экспорт
	
	ТабПарам = СтруктураПараметровПоказателей[Показатель];
	Строка = ТабПарам.Найти(Параметр, "Имя");
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Строка.Значение;
	
КонецФункции // ПолучитьПараметрПоказателя()

// Функция возвращает признак необходимости отбработки показателя
//
Функция НадоОбработатьПоказатель(СтрДействий, Имя, Параметры)

	Если СтрДействий = "Инициализация" Тогда
		
		Возврат Истина;
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("Расшифровка") Тогда
			Если Параметры["Расшифровка"].Свойство("Имя") Тогда
				Возврат Параметры["Расшифровка"]["Имя"] = Имя;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Строка = ДеревоПоказателей.Строки.Найти(Имя, "Показатель", Истина);
		Если Строка = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Если Строка.Строки.Количество() > 0 Тогда // Это группа показателей
				Возврат Ложь;
			Иначе
				Возврат Строка.Пометка = 1;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецФункции // НадоОбработатьПоказатель()

// Процедура - определяет какие строки дерева надо удалить
// Номер удаляемых строк записываются в cnисок значений
//
Процедура УдалитьПустыеГруппы(Дерево, Список)
	Для Каждого Узел Из Дерево.Строки Цикл
		Если Узел.ФлагГруппы Тогда
			Если Узел.Строки.Количество() = 0 Тогда
				Список.Добавить( Дерево.Строки.Индекс(Узел));
			Иначе
				УдалитьПустыеГруппы(Узел, Список);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УдалитьПустыеГруппы

// Процедура - обработки показателей
//
Процедура СформироватьОтчет(СтрДействие, Параметры = 0) Экспорт
	
	мСтруктТабДок = Новый Структура;

	///////////////////////////////////////////////////////////////////////////////
	// Группа показателей "Оборотные средства"
	
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства", Параметры) Тогда
		ОборотныеСредства(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства_ДенежныеСредства", Параметры) Тогда
		ОборотныеСредства_ДенежныеСредства(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства_Подотчет", Параметры) Тогда
		ОборотныеСредства_Подотчет(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства_ДебиторскаяЗадолженность", Параметры) Тогда
		ОборотныеСредства_ДебиторскаяЗадолженность(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства_ОстаткиТоваров", Параметры) Тогда
		ОборотныеСредства_ОстаткиТоваров(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства_ОбщийИтог", Параметры) Тогда
		ОборотныеСредства_ОбщийИтог(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства_КредиторскаяЗадолженность", Параметры) Тогда
		ОборотныеСредства_КредиторскаяЗадолженность(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ОборотныеСредства_ИтогоКапитал", Параметры) Тогда
		ОборотныеСредства_ИтогоКапитал(СтрДействие, Параметры);
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////
	// Группа показателей "Поступления и платежи"
	
	Если НадоОбработатьПоказатель(СтрДействие, "ПоступленияИПлатежи", Параметры) Тогда
		ПоступленияИПлатежи(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ПоступленияИПлатежи_ДвижениеДенежныхСредств", Параметры) Тогда
		ПоступленияИПлатежи_ДвижениеДенежныхСредств(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи", Параметры) Тогда
		ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи(СтрДействие, Параметры);
	КонецЕсли;
	Если НадоОбработатьПоказатель(СтрДействие, "ПоступленияИПлатежи_ПлатежныйКалендарь", Параметры) Тогда
		ПоступленияИПлатежи_ПлатежныйКалендарь(СтрДействие, Параметры);
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////
	// Группа показателей "Денежные средства"

    // Показатель "Денежные средства"
	Если НадоОбработатьПоказатель(СтрДействие, "ДенежныеСредства", Параметры) Тогда
		ДенежныеСредства(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Остаток денежных средств в кассах компании"
	Если НадоОбработатьПоказатель(СтрДействие, "ДенежныеСредства_ОстатокСредствВКассах", Параметры) Тогда
		ДенежныеСредства_ОстатокСредствВКассах(СтрДействие, Параметры);
	КонецЕсли;

    // Показатель "Остаток денежных средств на банковских счетах"
	Если НадоОбработатьПоказатель(СтрДействие, "ДенежныеСредства_ОстатокСредствНаСчетах", Параметры) Тогда
		ДенежныеСредства_ОстатокСредствНаСчетах(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Расход денежных средств в разрезе статей движения денежных средств"
	Если НадоОбработатьПоказатель(СтрДействие, "ДенежныеСредства_РасходПоСтатьям", Параметры) Тогда
		ДенежныеСредства_РасходПоСтатьям(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Приход денежных средств в разрезе статей движения денежных средств"
	Если НадоОбработатьПоказатель(СтрДействие, "ДенежныеСредства_ПриходПоСтатьям", Параметры) Тогда
		ДенежныеСредства_ПриходПоСтатьям(СтрДействие, Параметры);
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////
	// Группа показателей "Взаиморасчеты"
	
    // Показатель "Взаиморасчеты"
	Если НадоОбработатьПоказатель(СтрДействие, "Взаиморасчеты", Параметры) Тогда
		Взаиморасчеты(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Дебиторская задолженность контрагентов"
	Если НадоОбработатьПоказатель(СтрДействие, "Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", Параметры) Тогда
		Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Дебиторская задолженность компании"
	Если НадоОбработатьПоказатель(СтрДействие, "Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", Параметры) Тогда
		Взаиморасчеты_ДебиторскаяЗадолженностьКомпании(СтрДействие, Параметры);
	КонецЕсли;

    // Показатель "Дебиторская задолженность подотчетников"
	Если НадоОбработатьПоказатель(СтрДействие, "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", Параметры) Тогда
		Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Просроченная задолженность подотчетников"
	Если НадоОбработатьПоказатель(СтрДействие, "Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", Параметры) Тогда
		Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников(СтрДействие, Параметры);
	КонецЕсли;

    // Показатель "Задолженность комиссионеров"
	Если НадоОбработатьПоказатель(СтрДействие, "Взаиморасчеты_ЗадолженностьКомиссионеров", Параметры) Тогда
		Взаиморасчеты_ЗадолженностьКомиссионеров(СтрДействие, Параметры);
	КонецЕсли;
	
	// Показатель "Просроченная дебиторская задолженность комиссионеров"
	Если НадоОбработатьПоказатель(СтрДействие, "Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", Параметры) Тогда
		Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров(СтрДействие, Параметры);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Группа показателей "Продажи"
	
	// Показатель "Продажи"
	Если НадоОбработатьПоказатель(СтрДействие, "Продажи", Параметры) Тогда
		Продажи(СтрДействие, Параметры);
	КонецЕсли;
	
	// Показатель "Объем продаж"
	Если НадоОбработатьПоказатель(СтрДействие, "Продажи_ОбъемПродаж", Параметры) Тогда
		Продажи_ОбъемПродаж(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Продажи и поступления"
	Если НадоОбработатьПоказатель(СтрДействие, "Продажи_ПродажиИПоступления", Параметры) Тогда
		Продажи_ПродажиИПоступления(СтрДействие, Параметры);
	КонецЕсли;

    // Показатель "Объем отгрузки (в суммовом выражении в ценах продажи)"
	Если НадоОбработатьПоказатель(СтрДействие, "Продажи_ОбъемОтгрузки", Параметры) Тогда
		Продажи_ОбъемОтгрузки(СтрДействие, Параметры);
	КонецЕсли;
    
    // Показатель "Валовая прибыль (по отгрузке в суммовом выражении)"
	Если НадоОбработатьПоказатель(СтрДействие, "Продажи_ВаловаяПрибыль", Параметры) Тогда
		Продажи_ВаловаяПрибыль(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Валовая прибыль (по отгрузке процентом)"
	Если НадоОбработатьПоказатель(СтрДействие, "Продажи_ВаловаяПрибыльПроцент", Параметры) Тогда
		Продажи_ВаловаяПрибыльПроцент(СтрДействие, Параметры);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Группа показателей "Заказы"
	
	// Показатель "Просроченные заказы"
	Если НадоОбработатьПоказатель(СтрДействие, "Заказы", Параметры) Тогда
		Заказы(СтрДействие, Параметры);
	КонецЕсли;
	
	// Показатель "Просроченные заказы"
	Если НадоОбработатьПоказатель(СтрДействие, "Заказы_ПросроченныеЗаказы", Параметры) Тогда
		Заказы_ПросроченныеЗаказы(СтрДействие, Параметры);
	КонецЕсли;
	
	// Показатель "Закрытые заказы"
	Если НадоОбработатьПоказатель(СтрДействие, "Заказы_ЗакрытыеЗаказы", Параметры) Тогда
		Заказы_ЗакрытыеЗаказы(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Количество неисполненных заказов покупателей"
	Если НадоОбработатьПоказатель(СтрДействие, "Заказы_НеисполненныеЗаказыПокупателей", Параметры) Тогда
		Заказы_НеисполненныеЗаказыПокупателей(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Количество неисполненных заказов поставщикам"
	Если НадоОбработатьПоказатель(СтрДействие, "Заказы_НеисполненныеЗаказыПоставщикам", Параметры) Тогда
		Заказы_НеисполненныеЗаказыПоставщикам(СтрДействие, Параметры);
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////
	// Показатели вне групп
	
    // Показатель "Себестоимость товарных запасов"
	Если НадоОбработатьПоказатель(СтрДействие, "СебестоимостьТоварныхЗапасов", Параметры) Тогда
		СебестоимостьТоварныхЗапасов(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Оценка ликвидности склада"
	Если НадоОбработатьПоказатель(СтрДействие, "ЛиквидностьСклада", Параметры) Тогда
		ЛиквидностьСклада(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Коэффициент удержания и привлечения покупателей"
	Если НадоОбработатьПоказатель(СтрДействие, "КоэфПривлеченияПокупателей", Параметры) Тогда
		КоэфПривлеченияПокупателей(СтрДействие, Параметры);
	КонецЕсли;
	
    // Показатель "Рейтинг лучших менеджеров"
	Если НадоОбработатьПоказатель(СтрДействие, "РейтингМенеджеров", Параметры) Тогда
		РейтингМенеджеров(СтрДействие, Параметры);
	КонецЕсли;
	
	// Показатель "Рейтинг источников информации"
	Если НадоОбработатьПоказатель(СтрДействие, "РейтингИсточниковИнформации", Параметры) Тогда
		РейтингИсточниковИнформации(СтрДействие, Параметры);
	КонецЕсли;

	// Новые показатели добавлять сюда
	// .............
	
	// В случае формирования показателей выведем результат в табличный/html документ
	Если СтрДействие = "Формирование" Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		Секция = мМакет.ПолучитьОбласть("ОбщЗаголовок");
		Секция.Область("ЗаголовокРапорта").Текст = "Рапорт руководителю на " + Формат( ДатаКон, "ДЛФ=DD");
		ТабДок.Вывести(Секция);
		
		ТабПоказателей = Неопределено;
		мСтруктураСохраненныеНастройки.Свойство("_ПорядокПоказателей", ТабПоказателей);
		Если ТабПоказателей = Неопределено Тогда
			ОбходДереваПоказателей(ДеревоПоказателей, ТабДок);
		Иначе
			Для Каждого Строка Из ТабПоказателей Цикл
				Секция = Неопределено;
				Если мСтруктТабДок.Свойство(Строка.Показатель, Секция) Тогда
					ТабДок.Вывести(Секция);
					мСтруктТабДок.Удалить(Строка.Показатель);
				КонецЕсли;
			КонецЦикла;
			// Если остались невыведенные показатели
			Для Каждого Секция Из мСтруктТабДок Цикл
				ТабДок.Вывести(Секция.Значение);
			КонецЦикла;
			мСтруктТабДок.Очистить();
		КонецЕсли;
		
			
		мТабДокумент.Очистить();
		мТабДокумент.Вывести(ТабДок);
			
		Если ВидОтчета = "HTML" Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ТабДок.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
			
			мHTMLДокумент.Перейти(ИмяФайла);
			
		КонецЕсли;
			
	ИначеЕсли СтрДействие = "Инициализация" Тогда
		
		Список = Новый СписокЗначений;
		Пока Истина Цикл // На случай нескольких уровней
			Список.Очистить();
			УдалитьПустыеГруппы(ДеревоПоказателей, Список);
			Если Список.Количество() = 0 Тогда
				Прервать;
			Иначе
				Список.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				Для Каждого Индекс Из Список Цикл
					ДеревоПоказателей.Строки.Удалить(ДеревоПоказателей.Строки.Получить(Индекс.Значение));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтчет()

// Процедура добавляет показатель в дерево показателей
//
Процедура ДобавитьВДеревоПоказателей(Имя, Представление, Пояснение, Корень = "", ФлагГруппы = Ложь)

	// Проверить права доступа
	Доступ = мСоответствиеПраваДоступа[ПланыВидовХарактеристик.ПраваПользователей["РапортРуководителю_" + Имя]];

	Если Доступ <> Истина И Не ФлагГруппы Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(Корень) Тогда
		НоваяСтрока = ДеревоПоказателей.Строки.Добавить();
	Иначе
		СтрокаРодитель = ДеревоПоказателей.Строки.Найти(Корень, "Показатель", Истина);
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
	КонецЕсли;
	
	НоваяСтрока.Показатель = Имя;
	НоваяСтрока.ПредставлениеПоказателя = Представление;
	НоваяСтрока.Пояснение  = Пояснение;
	НоваяСтрока.ФлагГруппы = ФлагГруппы;

	СтруктураПометки = Неопределено;
	мСтруктураСохраненныеНастройки.Свойство("_Пометки", СтруктураПометки);
	Если Не СтруктураПометки = Неопределено Тогда
		Пометка = Неопределено;
		СтруктураПометки.Свойство(Имя, Пометка);
		Если Не Пометка = Неопределено Тогда
			НоваяСтрока.Пометка = Пометка;
		Иначе
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
	Иначе // По умолчанию - доступ разрешен
		НоваяСтрока.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВДеревоПоказателей()

// Функция создает таблицу параметров показателей
//
Функция СоздатьТабПарам()
	
	ТабПарам = Новый ТаблицаЗначений;
	ТабПарам.Колонки.Добавить( "ПредставлениеПараметра", СоздатьТип("Строка", 100));
	ТабПарам.Колонки.Добавить( "Имя",         СоздатьТип("Строка", 100));
	ТабПарам.Индексы.Добавить("Имя");
	
	Массив = Новый Массив;
	Массив.Добавить(СоздатьТип("Строка", 100));
	Массив.Добавить(СоздатьТип("ОписаниеТипов"));
	
	//ТабПарам.Колонки.Добавить( "ТипЗначения", СоздатьТип("Строка", 100));
	ТабПарам.Колонки.Добавить( "ТипЗначения", Новый ОписаниеТипов(Массив));
	
	ТабПарам.Колонки.Добавить( "Список",      СоздатьТип("СписокЗначений"));
	ТабПарам.Колонки.Добавить( "Значение");
	ТабПарам.Колонки.Добавить( "Доступность", СоздатьТип("Структура"));
	
	Возврат ТабПарам;
	
КонецФункции // СоздатьТабПарам()

// Процедура восстановления сохраненных параметров
//
Процедура ПолучитьСохраненныеЗначения(Знач Имя, ТабПарам)
	
	Парам = Неопределено;
	мСтруктураСохраненныеНастройки.Свойство(Имя, Парам);
	
	Если ТипЗнч(Парам) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Строка Из ТабПарам Цикл
			Параметр = Парам.Найти(Строка.Имя, "Имя");
			Если Не Параметр = Неопределено
			   И Не Параметр.Значение = Неопределено Тогда
				Строка.Значение = Параметр.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСохраненныеЗначения

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ПОКАЗАТЕЛЕЙ

///////////////////////////////////////////////////////////////////////////////
// Процедуры обработки показателя "Объем продаж"

// Процедура инициализации показателя "Продажи_ОбъемПродаж"
//
Процедура Продажи_ОбъемПродажИнициализация()
	
	ДобавитьВДеревоПоказателей("Продажи_ОбъемПродаж", "Объем продаж",
		"Показатель служит для оценки объема продаж предприятия и для сравнения "
	  + "с планом и фактом прошлых периодов.",
	  	"Продажи");
		
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = "Месяц";

	// Параметр "ТипСравнения"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ТипСравнения";
	НоваяСтрока.ПредставлениеПараметра = "Показатель для сравнения";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");

	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("План продаж");
	НоваяСтрока.Список.Добавить("Продажи прошлого периода");
	НоваяСтрока.Список.Добавить("Продажи аналогичного периода прошлого года");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	ДостЗначение = НоваяСтрока.Значение;
	
	// Параметр "ПериодПланирования"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодПланирования";
	НоваяСтрока.ПредставлениеПараметра = "Период планирования";
	НоваяСтрока.ТипЗначения            = СоздатьТип("ПеречислениеСсылка.Периодичность");
	НоваяСтрока.Значение               = Перечисления.Периодичность.Месяц;

	НоваяСтрока.Доступность = Новый Структура;
	НоваяСтрока.Доступность.Вставить("ТипСравнения", ДостЗначение);
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Продажи_ОбъемПродаж", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Продажи_ОбъемПродаж", ТабПарам);
	
КонецПроцедуры // Продажи_ОбъемПродажИнициализация()

// Процедура формирование показателя "Продажи_ОбъемПродаж"
//
Процедура Продажи_ОбъемПродажФормирование()
	
	Периодичность = ПолучитьПараметрПоказателя( "Продажи_ОбъемПродаж", "ПериодАнализа");
	ТипСравнения  = ПолучитьПараметрПоказателя( "Продажи_ОбъемПродаж", "ТипСравнения");
	ПериодПланирования = ПолучитьПараметрПоказателя( "Продажи_ОбъемПродаж", "ПериодПланирования");
	
	Запрос = Новый Запрос;

	Если Периодичность = "День" Тогда
		
		ДатаНачалаПериода = НачалоДня(ДатаКон);
		ДатаКонцаПериода  = КонецДня(ДатаКон);
		
	ИначеЕсли Периодичность = "Неделя" Тогда
		
		ДатаНачалаПериода = НачалоНедели(ДатаКон);
		ДатаКонцаПериода  = КонецДня(ДатаКон);
		
	ИначеЕсли Периодичность = "Месяц" Тогда
		
		ДатаНачалаПериода = НачалоМесяца(ДатаКон);
		ДатаКонцаПериода  = КонецДня(ДатаКон);
		
	ИначеЕсли Периодичность = "Квартал" Тогда
		
		ДатаНачалаПериода = НачалоКвартала(ДатаКон);
		ДатаКонцаПериода  = КонецДня(ДатаКон);
		
	Иначе
		
		Сообщить("Не указан параметр <Периодичность> для показателя <Объем продаж>", СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;

	Запрос.УстановитьПараметр("НачДата", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонДата", Новый Граница(ДатаКонцаПериода,  ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПродажиКомпанииОбороты.СтоимостьОборот КАК Сумма,
		|	ПродажиКомпанииОбороты.Период
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачДата, &КонДата, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СуммаПродаж = 0;
	Для Каждого Обход Из РезультатЗапроса Цикл
		СуммаПродаж = СуммаПродаж + Обход.Сумма;
	КонецЦикла;

	// Получим данные для сравнения
	Если ТипСравнения = "План продаж" Тогда
		
		Если ПериодПланирования = Перечисления.Периодичность.День Тогда
			
			ДатаНачалаСравнения = ДатаНачалаПериода;
			ДатаКонцаСравнения  = ДатаКонцаПериода;
			ТекДатаСравнения    = ДатаКон;
			Интервал = 3600 * 24; // Секунд в сутках
			
		ИначеЕсли ПериодПланирования = Перечисления.Периодичность.Неделя Тогда
			
			ДатаНачалаСравнения = НачалоНедели( ДатаНачалаПериода);
			ДатаКонцаСравнения  = КонецНедели( ДатаКонцаПериода);
			ТекДатаСравнения    = ДатаКон;
			Интервал = 3600 * 24 * 7; // Секунд в неделю
			
		ИначеЕсли ПериодПланирования = Перечисления.Периодичность.Декада Тогда
			
			ДатаНачалаСравнения = ОбщегоНазначения.ПолучитьНачалоДекады(ДатаНачалаПериода);
			ДатаКонцаСравнения  = ОбщегоНазначения.ПолучитьКонецДекады(ДатаКонцаПериода);
			ТекДатаСравнения    = ДатаКон;
			Интервал = 3600 * 24 *
				Окр((ДатаКонцаСравнения - ДатаНачалаСравнения) / (3600 * 24), 0, 1); // Секунд в декаду
			
		ИначеЕсли ПериодПланирования = Перечисления.Периодичность.Месяц Тогда
			
			ДатаНачалаСравнения = НачалоМесяца( ДатаНачалаПериода);
			ДатаКонцаСравнения  = КонецМесяца( ДатаКонцаПериода);
			ТекДатаСравнения    = ДатаКон;
			Интервал = 3600 * 24 *
				Окр((ДатаКонцаСравнения - ДатаНачалаСравнения) / (3600 * 24), 0, 1); // Секунд в месяц
			
		ИначеЕсли ПериодПланирования = Перечисления.Периодичность.Квартал Тогда
			
			ДатаНачалаСравнения = НачалоКвартала( ДатаНачалаПериода);
			ДатаКонцаСравнения  = КонецКвартала( ДатаКонцаПериода);
			ТекДатаСравнения    = ДатаКон;
			Интервал = 3600 * 24 *
				Окр((ДатаКонцаСравнения - ДатаНачалаСравнения) / (3600 * 24), 0, 1); // Секунд в квартал
			
		ИначеЕсли ПериодПланирования = Перечисления.Периодичность.Полугодие Тогда
			
			ДатаНачалаСравнения = ОбщегоНазначения.ПолучитьНачалоПолугодия(ДатаНачалаПериода);
			ДатаКонцаСравнения  = ОбщегоНазначения.ПолучитьКонецПолугодия(ДатаКонцаПериода);
			ТекДатаСравнения    = ДатаКон;
			Интервал = 3600 * 24 *
				Окр((ДатаКонцаСравнения - ДатаНачалаСравнения) / (3600 * 24), 0, 1); // Секунд в полугодие
		ИначеЕсли ПериодПланирования = Перечисления.Периодичность.Год Тогда
			
			ДатаНачалаСравнения = НачалоГода( ДатаНачалаПериода);
			ДатаКонцаСравнения  = КонецГода( ДатаКонцаПериода);
			ТекДатаСравнения    = ДатаКон;
			Интервал = 3600 * 24 *
				Окр((ДатаКонцаСравнения - ДатаНачалаСравнения) / (3600 * 24), 0, 1); // Секунд в год
			

		Иначе
				
			Сообщить("Не указан параметр <Периодичность планирования> для показателя <Объем продаж>", СтатусСообщения.Внимание);
			Возврат;

		КонецЕсли;
		
	ИначеЕсли ТипСравнения = "Продажи прошлого периода" Тогда
		
		Если Периодичность = "День" Тогда
			
			ДатаКонцаСравнения  = КонецДня ( ДатаНачалаПериода - 1);
			ДатаНачалаСравнения = НачалоДня( ДатаКонцаСравнения);
			ТекДатаСравнения    = ДатаКон - 3600 * 24; // От текущей даты отнимаем 1 день
			
		ИначеЕсли Периодичность = "Неделя" Тогда
			
			ДатаКонцаСравнения  = КонецДня( ДатаНачалаПериода - 1);
			ДатаНачалаСравнения = НачалоДня( НачалоНедели( ДатаКонцаСравнения));
			ТекДатаСравнения    = ДатаКон - 3600 * 24 * 7; // От текущей даты отнимаем 7 дней
			
		ИначеЕсли Периодичность = "Месяц" Тогда
			
			ДатаКонцаСравнения  = КонецДня ( ДатаНачалаПериода - 1);
			ДатаНачалаСравнения = НачалоДня( НачалоМесяца( ДатаКонцаСравнения));
			ТекДатаСравнения    = ДобавитьМесяц( ДатаКон, -1);
			
		ИначеЕсли Периодичность = "Квартал" Тогда
			
			ДатаКонцаСравнения  = КонецДня ( ДатаНачалаПериода - 1);
			ДатаНачалаСравнения = НачалоДня( НачалоКвартала( ДатаКонцаСравнения));
			ТекДатаСравнения    = ДобавитьМесяц( ДатаКон, -3);
			
		КонецЕсли;
		
	ИначеЕсли ТипСравнения = "Продажи аналогичного периода прошлого года" Тогда
		
		ДатаНачалаСравнения = НачалоДня( ДобавитьМесяц( ДатаНачалаПериода, -12));
		ДатаКонцаСравнения  = КонецДня( ДобавитьМесяц( ДатаКонцаПериода,  -12));
		ТекДатаСравнения    = ДобавитьМесяц( ДатаКон, -12);
		
	Иначе
		Сообщить("Не указан  параметр <Показатель для сравнения> для показателя <Объем продаж>", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	ЗапросСравнения = Новый Запрос;
	ЗапросСравнения.УстановитьПараметр("НачДата", ДатаНачалаСравнения);
	ЗапросСравнения.УстановитьПараметр("КонДата", ДатаКонцаСравнения);
	ЗапросСравнения.УстановитьПараметр("ТекДата1", ТекДатаСравнения - 1);
	ЗапросСравнения.УстановитьПараметр("ТекДата2", ТекДатаСравнения);
	
	Если ТипСравнения = "Продажи прошлого периода"
	ИЛИ  ТипСравнения = "Продажи аналогичного периода прошлого года"Тогда
	
		ЗапросСравнения.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Продажи.Период,
			|	Продажи.СтоимостьОборот КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачДата, &ТекДата1, " + Периодичность + ", ) КАК Продажи
            |ОБЪЕДИНИТЬ
			|	ВЫБРАТЬ
			|		Продажи.Период,
			|		Продажи.СтоимостьОборот КАК Сумма
			|	ИЗ
			|		РегистрНакопления.Продажи.Обороты(&ТекДата2, &КонДата, " + Периодичность + ", ) КАК Продажи";

	ИначеЕсли ТипСравнения = "План продаж" Тогда

		ЗапросСравнения.УстановитьПараметр("ПериодПланирования", ПериодПланирования);
		ЗапросСравнения.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПланыПродажКомпанииОбороты.Сценарий.Периодичность,
			|	ПланыПродажКомпанииОбороты.СтоимостьОборот КАК Сумма,
			|	ПланыПродажКомпанииОбороты.Период
			|ИЗ
			|	РегистрНакопления.ПланыПродаж.Обороты(&НачДата, &КонДата, День, ) КАК ПланыПродажКомпанииОбороты
            |
			|ГДЕ
			|	ПланыПродажКомпанииОбороты.Сценарий.Периодичность = &ПериодПланирования";

	КонецЕсли;
	
	РезультатСравнения = ЗапросСравнения.Выполнить().Выгрузить();

	СуммаСравненияДоТекМомента = 0;
	СуммаСравненияДоКонПериода = 0;
	
	Для Каждого Обход Из РезультатСравнения Цикл
		Если ТипСравнения = "План продаж" Тогда
			
			Если ТекДатаСравнения < Обход.Период Тогда
				
				СуммаСравненияДоКонПериода = СуммаСравненияДоКонПериода + Обход.Сумма;
				
			ИначеЕсли ТекДатаСравнения > Обход.Период + Интервал Тогда
				
				СуммаСравненияДоТекМомента = СуммаСравненияДоТекМомента + Обход.Сумма;
				
			Иначе
				
				// Текущая дата лежит внутри интервала планирования
				СуммаДо = Окр(Обход.Сумма * (ТекДатаСравнения - ДатаНачалаСравнения) / (ДатаКонцаСравнения - ДатаНачалаСравнения), 2, 1);
				СуммаСравненияДоТекМомента = СуммаСравненияДоТекМомента + СуммаДо;
				СуммаСравненияДоКонПериода = СуммаСравненияДоКонПериода + (Обход.Сумма - СуммаДо);
				
			КонецЕсли;
		Иначе
			Если Обход.Период < ТекДатаСравнения Тогда
				СуммаСравненияДоТекМомента = СуммаСравненияДоТекМомента + Обход.Сумма;
			Иначе
				СуммаСравненияДоКонПериода = СуммаСравненияДоКонПериода + Обход.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Экстраполяция до конца периода
	Если СуммаСравненияДоТекМомента = 0 Тогда
		Экстраполяция = 0;
	Иначе
		Экстраполяция = Окр( СуммаПродаж * СуммаСравненияДоКонПериода / СуммаСравненияДоТекМомента, 2, 1);
	КонецЕсли;

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Продажи за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Продажи за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаСНакоплениемГоризонтальная");
	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемГоризонтальнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);

	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемГоризонтальнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаСНакоплениемГоризонтальная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "Продажи_ОбъемПродаж");
	ПарамРасшифровки.Вставить("ИмяРегистра", "Продажи");
	ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("ГруппировкиСтрок", Новый Структура("Номенклатура"));
	
	Секция.Рисунки.ДиаграммаГистограммаСНакоплениемГоризонтальная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "Сумма (руб.)";
	Диаграмма.Точки.Добавить(ТипСравнения);
	Диаграмма.Точки.Добавить("Продажи текущего периода");
	Диаграмма.Серии.Добавить("Продажи на текущий момент");
	Диаграмма.Серии.Добавить("Прогноз до конца периода");
	
	Диаграмма.УстановитьЗначение(1, 0, СуммаПродаж);
	Диаграмма.УстановитьЗначение(0, 0, СуммаСравненияДоТекМомента);
	Диаграмма.УстановитьЗначение(1, 1, Экстраполяция);
	Диаграмма.УстановитьЗначение(0, 1, СуммаСравненияДоКонПериода);
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Продажи_ОбъемПродаж", ТабДок);

КонецПроцедуры // Продажи_ОбъемПродажФормирование()

// Процедура - расшифровка показателя "Продажи_ОбъемПродаж"
//
Процедура Продажи_ОбъемПродажРасшифровка(Параметры)
	
	Расшифровка_КроссТаблица(Параметры.Расшифровка);
	
КонецПроцедуры // Продажи_ОбъемПродажРасшифровка()

// Процедура обработки показателя "Продажи_ОбъемПродаж"
//
Процедура Продажи_ОбъемПродаж(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		Продажи_ОбъемПродажИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		Продажи_ОбъемПродажФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		Продажи_ОбъемПродажРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // Продажи_ОбъемПродаж()

// Процедура обработки показателя "Продажи"
//
Процедура Продажи(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ДобавитьВДеревоПоказателей("Продажи", "Продажи", "",, Истина);
			
		ТабПарам = СоздатьТабПарам();

		// Добавить данные в структуру параметров показателей
		СтруктураПараметровПоказателей.Вставить("Продажи", ТабПарам);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // Продажи()

///////////////////////////////////////////////////////////////////////////////
// Процедуры обработки показателя "Оборотные средства"

// Процедура обработки показателя "Оборотные средства"
//
Процедура ОборотныеСредства(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ДобавитьВДеревоПоказателей("ОборотныеСредства", "Оборотные средства", "",, Истина);
			
		ТабПарам = СоздатьТабПарам();

		// Добавить данные в структуру параметров показателей
		СтруктураПараметровПоказателей.Вставить("ОборотныеСредства", ТабПарам);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // ОборотныеСредства()

// Процедура инициализации показателя "Оборотные средства - Денежные средства"
//
Процедура ОборотныеСредства_ДенежныеСредстваИнициализация()
	
	ДобавитьВДеревоПоказателей("ОборотныеСредства_ДенежныеСредства", "Денежные средства", "", "ОборотныеСредства");
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ОборотныеСредства_ДенежныеСредства", ТабПарам);
	
	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ОборотныеСредства_ДенежныеСредства", ТабПарам);
	
КонецПроцедуры // ОборотныеСредства_ДенежныеСредстваИнициализация()

// Процедура формирования показателя "Оборотные средства - Денежные средства"
//
Процедура ОборотныеСредства_ДенежныеСредстваФормирование()
	Перем ДатаНач;

	Периодичность = ПолучитьПараметрПоказателя( "ОборотныеСредства_ДенежныеСредства", "ПериодАнализа");
	
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон, Периодичность);

	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ОборотныеСредства");
	ОбластьДенежныеСредства = Макет.ПолучитьОбласть("ДенежныеСредства");
	
	//Если ВидОтчета = "Таблица" Тогда
		ОбластьЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
		ОбластьЗаголовокОбласти.Параметры.ЗаголовокОбласти = "Денежные средства";
		ТабДок.Вывести(ОбластьЗаголовокОбласти);
		ТабДок.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
	//КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР 
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Нал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток
	|			ИНАЧЕ 
	|				0
	|			КОНЕЦ) КАК НачОстНал,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Безнал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК НачОстБН,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Нал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК КонОстНал,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Безнал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК КонОстБН,
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.БанковскийСчетКасса КАК БанкКасса,
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств КАК ВидДенежныхСредств
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ДенежныеСредстваКомпанииОстаткиИОбороты
    |
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.БанковскийСчетКасса,
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств";

	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Нал", Перечисления.ВидыДенежныхСредств.Наличные);
	Запрос.УстановитьПараметр("Безнал", Перечисления.ВидыДенежныхСредств.Безналичные);

	Результат = Запрос.Выполнить().Выгрузить();

	//Выборка = Результат.Выбрать();

	ОбластьДенежныеСредства.Параметры.ДСНалТек	= 0;
	ОбластьДенежныеСредства.Параметры.ДСБНТек	= 0;
	ОбластьДенежныеСредства.Параметры.ДСНалНачД	= 0;
	ОбластьДенежныеСредства.Параметры.ДСБННачД	= 0;

	Для Каждого Выборка Из Результат Цикл

		ОбластьДенежныеСредства.Параметры.ДСНалТек	= ОбластьДенежныеСредства.Параметры.ДСНалТек  + ?( Выборка["КонОстНал"] = NULL, 0, Выборка["КонОстНал"]);
		ОбластьДенежныеСредства.Параметры.ДСБНТек	= ОбластьДенежныеСредства.Параметры.ДСБНТек   + ?( Выборка["КонОстБН"]  = NULL, 0, Выборка["КонОстБН"]);
		ОбластьДенежныеСредства.Параметры.ДСНалНачД	= ОбластьДенежныеСредства.Параметры.ДСНалНачД + ?( Выборка["НачОстНал"] = NULL, 0, Выборка["НачОстНал"]);
		ОбластьДенежныеСредства.Параметры.ДСБННачД	= ОбластьДенежныеСредства.Параметры.ДСБННачД  + ?( Выборка["НачОстБН"]  = NULL, 0, Выборка["НачОстБН"]);

	КонецЦикла;
	
	ОбластьДенежныеСредства.Параметры.ДСИтогоТек	= ОбластьДенежныеСредства.Параметры.ДСНалТек
													  + ОбластьДенежныеСредства.Параметры.ДСБНТек;
	ОбластьДенежныеСредства.Параметры.ДСИтогоНачД	= ОбластьДенежныеСредства.Параметры.ДСНалНачД
													   + ОбластьДенежныеСредства.Параметры.ДСБННачД;

	ОбластьДенежныеСредства.Параметры.ИзмДСНалД		= ОбластьДенежныеСредства.Параметры.ДСНалТек
													  - ОбластьДенежныеСредства.Параметры.ДСНалНачД;
	ОбластьДенежныеСредства.Параметры.ИзмДСБНД		= ОбластьДенежныеСредства.Параметры.ДСБНТек
													  - ОбластьДенежныеСредства.Параметры.ДСБННачД;
	ОбластьДенежныеСредства.Параметры.ИзмДСИтогоД	= ОбластьДенежныеСредства.Параметры.ДСИтогоТек
													  - ОбластьДенежныеСредства.Параметры.ДСИтогоНачД;

	ОбластьДенежныеСредства.Параметры.ИзмДСНалДП	= ?(ОбластьДенежныеСредства.Параметры.ДСНалНачД<>0,
														ОбластьДенежныеСредства.Параметры.ИзмДСНалД
														/ОбластьДенежныеСредства.Параметры.ДСНалНачД,0)*100;

	ОбластьДенежныеСредства.Параметры.ИзмДСБНДП		= ?(ОбластьДенежныеСредства.Параметры.ДСБННачД<>0,
														ОбластьДенежныеСредства.Параметры.ИзмДСБНД
														/ОбластьДенежныеСредства.Параметры.ДСБННачД,0)*100;

	ОбластьДенежныеСредства.Параметры.ИзмДСИтогоДП	= ?(ОбластьДенежныеСредства.Параметры.ДСИтогоНачД<>0,
														ОбластьДенежныеСредства.Параметры.ИзмДСИтогоД
														/ОбластьДенежныеСредства.Параметры.ДСИтогоНачД,0)*100;
	//КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР 
	|			КОГДА ДенежныеСредстваКомпанииОстатки.ВидДенежныхСредств = &Нал
	|			ТОГДА ДенежныеСредстваКомпанииОстатки.СуммаУпрОстаток
	|			ИНАЧЕ 
	|				0
	|			КОНЕЦ) КАК НачОстНал,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстатки.ВидДенежныхСредств = &Безнал
	|			ТОГДА ДенежныеСредстваКомпанииОстатки.СуммаУпрОстаток
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК НачОстБН
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаНач) КАК ДенежныеСредстваКомпанииОстатки";

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Нал", Перечисления.ВидыДенежныхСредств.Наличные);
	Запрос.УстановитьПараметр("Безнал", Перечисления.ВидыДенежныхСредств.Безналичные);
	
	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

		ОбластьДенежныеСредства.Параметры.ДСНалНачМ		=?(Выборка["НачОстНал"]=NULL,0,Выборка["НачОстНал"]);
		ОбластьДенежныеСредства.Параметры.ДСБННачМ		=?(Выборка["НачОстБН"]=NULL,0,Выборка["НачОстБН"]);
		
		ОбластьДенежныеСредства.Параметры.ДСИтогоНачМ	= ОбластьДенежныеСредства.Параметры.ДСНалНачМ
													 	  + ОбластьДенежныеСредства.Параметры.ДСБННачМ;

		ОбластьДенежныеСредства.Параметры.ИзмДСНалМ		= ОбластьДенежныеСредства.Параметры.ДСНалТек
														  - ОбластьДенежныеСредства.Параметры.ДСНалНачМ;
		ОбластьДенежныеСредства.Параметры.ИзмДСБНМ		= ОбластьДенежныеСредства.Параметры.ДСБНТек
														  - ОбластьДенежныеСредства.Параметры.ДСБННачМ;
		ОбластьДенежныеСредства.Параметры.ИзмДСИтогоМ	= ОбластьДенежныеСредства.Параметры.ДСИтогоТек
														  - ОбластьДенежныеСредства.Параметры.ДСИтогоНачМ;

		ОбластьДенежныеСредства.Параметры.ИзмДСНалМП	= ?(ОбластьДенежныеСредства.Параметры.ДСНалНачМ<>0,
															ОбластьДенежныеСредства.Параметры.ИзмДСНалМ
															/ОбластьДенежныеСредства.Параметры.ДСНалНачМ,0)*100;

        ОбластьДенежныеСредства.Параметры.ИзмДСБНМП		= ?(ОбластьДенежныеСредства.Параметры.ДСБННачМ<>0,
															ОбластьДенежныеСредства.Параметры.ИзмДСБНМ
															/ОбластьДенежныеСредства.Параметры.ДСБННачМ,0)*100;

		ОбластьДенежныеСредства.Параметры.ИзмДСИтогоМП	= ?(ОбластьДенежныеСредства.Параметры.ДСИтогоНачМ<>0,
															ОбластьДенежныеСредства.Параметры.ИзмДСИтогоМ
															/ОбластьДенежныеСредства.Параметры.ДСИтогоНачМ,0)*100;

	КонецЕсли;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ДенежныеСредства");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ОбластьДенежныеСредства.Параметры.ОборотныеСредства_ДенежныеСредстваРасшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ДенежныеСредства");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ОбластьДенежныеСредства.Параметры.ОборотныеСредства_ДенежныеСредстваРасшифровкаДень = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ДенежныеСредства");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные));
	ОбластьДенежныеСредства.Параметры.ОборотныеСредства_ДенежныеСредстваНал = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ДенежныеСредства");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные));
	ОбластьДенежныеСредства.Параметры.ОборотныеСредства_ДенежныеСредстваНалДень = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ДенежныеСредства");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные));
	ОбластьДенежныеСредства.Параметры.ОборотныеСредства_ДенежныеСредстваБезНал = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ДенежныеСредства");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные));
	ОбластьДенежныеСредства.Параметры.ОборотныеСредства_ДенежныеСредстваБезНалДень = ПарамРасшифровки;
	
	ТабДок.Вывести(ОбластьДенежныеСредства);
	мСтруктТабДок.Вставить("ОборотныеСредства_ДенежныеСредства", ТабДок);
	
КонецПроцедуры // ОборотныеСредства_ДенежныеСредстваФормирование()

// Процедура расшифровки показателя "Оборотные средства - Денежные средства"
//
Процедура ОборотныеСредства_ДенежныеСредстваРасшифровка(Параметры)
	
	Расшифровка_ОстаткиОбороты(Параметры.Расшифровка);
	
КонецПроцедуры // ОборотныеСредства_ДенежныеСредстваРасшифровка()

// Процедура обработки показателя "Оборотные средства - Денежные средства"
//
Процедура ОборотныеСредства_ДенежныеСредства(СтрДействие, Параметры = 0)
	Если СтрДействие = "Инициализация" Тогда
		
		ОборотныеСредства_ДенежныеСредстваИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ОборотныеСредства_ДенежныеСредстваФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ОборотныеСредства_ДенежныеСредстваРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
КонецПроцедуры // ОборотныеСредства_ДенежныеСредства()

// Процедура инициализации показателя "Оборотные средства - Подотчет"
//
Процедура ОборотныеСредства_ПодотчетИнициализация()
	
	ДобавитьВДеревоПоказателей("ОборотныеСредства_Подотчет", "Расчеты с подотчетными лицами", "", "ОборотныеСредства");
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;

	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ОборотныеСредства_Подотчет", ТабПарам);
	
	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ОборотныеСредства_Подотчет", ТабПарам);
	
КонецПроцедуры // ОборотныеСредства_ПодотчетИнициализация()

// Процедура формирования показателя "Оборотные средства - Подотчет"
//
Процедура ОборотныеСредства_ПодотчетФормирование()

	Макет = мМакет.ПолучитьОбласть("ОборотныеСредства");
	ОбластьПодотчет = Макет.ПолучитьОбласть("Подотчет");

	ТабДок = Новый ТабличныйДокумент;
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон,
		ПолучитьПараметрПоказателя("ОборотныеСредства_Подотчет", "ПериодАнализа"));
	
	ОбластьЗаголовокОбласти=Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ОбластьЗаголовокОбласти.Параметры.ЗаголовокОбласти="Расчеты с подотчетными лицами";
	ТабДок.Вывести(ОбластьЗаголовокОбласти);
	ТабДок.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток КАК СуммаНачальныйОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты";

	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));

	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда
        		
        ОбластьПодотчет.Параметры.ПОИтогоТек	= ?(Выборка["СуммаКонечныйОстаток"]=NULL,0,Выборка["СуммаКонечныйОстаток"]);
		ОбластьПодотчет.Параметры.ПОИтогоНачД	= ?(Выборка["СуммаНачальныйОстаток"]=NULL,0,Выборка["СуммаНачальныйОстаток"]);

		ОбластьПодотчет.Параметры.ИзмПОИтогоД	= ОбластьПодотчет.Параметры.ПОИтогоТек
														  - ОбластьПодотчет.Параметры.ПОИтогоНачД;

		ОбластьПодотчет.Параметры.ИзмПОИтогоДП	= ?(ОбластьПодотчет.Параметры.ПОИтогоНачД<>0,
															ОбластьПодотчет.Параметры.ИзмПОИтогоД
															/ОбластьПодотчет.Параметры.ПОИтогоНачД,0)*100;
		
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаНач) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстатки";

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));

	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

   		ОбластьПодотчет.Параметры.ПОИтогоНачМ	= ?(Выборка["СуммаОстаток"]=NULL,0,Выборка["СуммаОстаток"]);

		ОбластьПодотчет.Параметры.ИзмПОИтогоМ	= ОбластьПодотчет.Параметры.ПОИтогоТек
														  - ОбластьПодотчет.Параметры.ПОИтогоНачМ;

		ОбластьПодотчет.Параметры.ИзмПОИтогоМП	= ?(ОбластьПодотчет.Параметры.ПОИтогоНачМ<>0,
															ОбластьПодотчет.Параметры.ИзмПОИтогоМ
															/ОбластьПодотчет.Параметры.ПОИтогоНачМ,0)*100;
	КонецЕсли;


	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_Подотчет");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ВзаиморасчетыСПодотчетнымиЛицами");
	ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ОбластьПодотчет.Параметры.ПоступленияИПлатежи_ПодотчетРасшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_Подотчет");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ВзаиморасчетыСПодотчетнымиЛицами");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ОбластьПодотчет.Параметры.ПоступленияИПлатежи_ПодотчетРасшифровкаДень = ПарамРасшифровки;
	
	ТабДок.Вывести(ОбластьПодотчет);
	мСтруктТабДок.Вставить("ОборотныеСредства_Подотчет", ТабДок);
	
КонецПроцедуры // ОборотныеСредства_ПодотчетФормирование()

// Процедура расшифровки показателя "Оборотные средства - Подотчет"
//
Процедура ОборотныеСредства_ПодотчетРасшифровка(Параметры)
	
	Расшифровка_ОстаткиОбороты(Параметры.Расшифровка);
	
КонецПроцедуры // ОборотныеСредства_ПодотчетРасшифровка()

// Процедура обработки показателя "Оборотные средства - Подотчет"
//
Процедура ОборотныеСредства_Подотчет(СтрДействие, Параметры = 0)
	Если СтрДействие = "Инициализация" Тогда
		
		ОборотныеСредства_ПодотчетИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ОборотныеСредства_ПодотчетФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ОборотныеСредства_ПодотчетРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
КонецПроцедуры // ОборотныеСредства_Подотчет()

// Процедура инициализации показателя "Оборотные средства - Дебиторская задолженность"
//
Процедура ОборотныеСредства_ДебиторскаяЗадолженностьИнициализация()
	
	ДобавитьВДеревоПоказателей("ОборотныеСредства_ДебиторскаяЗадолженность", "Общая дебиторская задолженность", "", "ОборотныеСредства");
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;

	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ОборотныеСредства_ДебиторскаяЗадолженность", ТабПарам);
	
	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ОборотныеСредства_ДебиторскаяЗадолженность", ТабПарам);
	
КонецПроцедуры // ОборотныеСредства_ДебиторскаяЗадолженностьИнициализация()

// Процедура формирования показателя "Оборотные средства - Дебиторская задолженность"
//
Процедура ОборотныеСредства_ДебиторскаяЗадолженностьФормирование()

	Макет = мМакет.ПолучитьОбласть("ОборотныеСредства");
	ОбластьДебиторскаяЗадолженность = Макет.ПолучитьОбласть("ДебиторскаяЗадолженность");

	ТабДок  = Новый ТабличныйДокумент;
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон,
		ПолучитьПараметрПоказателя("ОборотныеСредства_ДебиторскаяЗадолженность", "ПериодАнализа"));
		
	ОбластьЗаголовокОбласти=Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ОбластьЗаголовокОбласти.Параметры.ЗаголовокОбласти="Общая дебиторская задолженность";
	ТабДок.Вывести(ОбластьЗаголовокОбласти);
	ТабДок.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));

    ЗапросОбщий = Новый Запрос; 	
	ЗапросОбщий.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаНач, ) КАК КонтрагентыВзаиморасчетыКомпанииОстатки
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток > 0
		|ИТОГИ
		|	СУММА(СуммаОстаток)
		|ПО
		|	ОБЩИЕ";

	ЗапросОбщий.УстановитьПараметр("ДатаНач", НачалоДня(ДатаКон));
	Результат = ЗапросОбщий.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаИтогов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		ВыборкаИтогов.Следующий();
		ДЗИтогоНачД   = ВыборкаИтогов.СуммаОстаток;
	Иначе
		ДЗИтогоНачД   = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос; 	
	Запрос.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДокументРасчетовСКонтрагентом,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК ДопустимоеЧислоДнейЗадолженности,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.СуммаВзаиморасчетовОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток * КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.СуммаУпрОстаток / КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.СуммаВзаиморасчетовОстаток
		|	КОНЕЦ КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаНач, ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности) КАК КонтрагентыВзаиморасчетыКомпанииОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				&ДатаНач,
		|				ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
		|					И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиСвод
		|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.ДоговорКонтрагента = КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента
		|			И КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.Сделка = КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток > 0";

	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаКон));
	ТаблицаЗадолженности=Запрос.Выполнить().Выгрузить();

	ДЗПрНачД=0;

	МассивПросроченныхНачД=Новый Массив;
	
	Для Каждого Строка из ТаблицаЗадолженности Цикл

		Если (Строка.ДокументРасчетовСКонтрагентом.Дата+(Строка.ДопустимоеЧислоДнейЗадолженности-1)*24*3600)<НачалоДня(ДатаКон) Тогда
			ДЗПрНачД=ДЗПрНачД+Строка.СуммаОстаток;
			МассивПросроченныхНачД.Добавить(Строка.Сделка);
		КонецЕсли;

	КонецЦикла;

	ЗапросОбщий.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = ЗапросОбщий.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаИтогов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		ВыборкаИтогов.Следующий();
		ДЗИтогоТек    = ВыборкаИтогов.СуммаОстаток;
	Иначе
		ДЗИтогоТек    = 0;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ТаблицаЗадолженности=Запрос.Выполнить().Выгрузить();

	ДЗПрТек=0;
	МассивПросроченныхТек=Новый Массив;

	Для Каждого Строка из ТаблицаЗадолженности Цикл

		Если (Строка.ДокументРасчетовСКонтрагентом.Дата+Строка.ДопустимоеЧислоДнейЗадолженности*24*3600)<ДатаКон Тогда
			ДЗПрТек=ДЗПрТек+Строка.СуммаОстаток;
			МассивПросроченныхТек.Добавить(Строка.Сделка);
		КонецЕсли;

	КонецЦикла;

    ЗапросОбщий.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Результат = ЗапросОбщий.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаИтогов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		ВыборкаИтогов.Следующий();
		ДЗИтогоНачМ   = ВыборкаИтогов.СуммаОстаток;
	Иначе
		ДЗИтогоНачМ   = 0;
	КонецЕсли;
	
    Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	ТаблицаЗадолженности=Запрос.Выполнить().Выгрузить();

	ДЗПрНачМ=0;

	МассивПросроченныхМес=Новый Массив;

	Для Каждого Строка из ТаблицаЗадолженности Цикл

		Если (Строка.ДокументРасчетовСКонтрагентом.Дата+Строка.ДопустимоеЧислоДнейЗадолженности*24*3600)<НачалоДня(ДатаНач) Тогда
			ДЗПрНачМ=ДЗПрНачМ+Строка.СуммаОстаток;
            МассивПросроченныхМес.Добавить(Строка.Сделка);
		КонецЕсли;

	КонецЦикла;

	ОбластьДебиторскаяЗадолженность.Параметры.ДЗИтогоТек	= ДЗИтогоТек;
	ОбластьДебиторскаяЗадолженность.Параметры.ДЗИтогоНачД	= ДЗИтогоНачД;
	ОбластьДебиторскаяЗадолженность.Параметры.ДЗПрТек		= ДЗПрТек;
    ОбластьДебиторскаяЗадолженность.Параметры.ДЗПрНачД		= ДЗПрНачД;

    ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗИтогоД	= ДЗИтогоТек-ДЗИтогоНачД;
	ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗИтогоДП	=?(ДЗИтогоНачД<>0,(ДЗИтогоТек-ДЗИтогоНачД)/ДЗИтогоНачД,0)*100;

    ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗПрД	= ДЗПрТек-ДЗПрНачД;
	ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗПрДП	=?(ДЗПрНачД<>0,(ДЗПрТек-ДЗПрНачД)/ДЗПрНачД,0)*100;
	
    ОбластьДебиторскаяЗадолженность.Параметры.ДЗИтогоНачМ	= ДЗИтогоНачМ;
    ОбластьДебиторскаяЗадолженность.Параметры.ДЗПрНачМ		= ДЗПрНачМ;

    ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗИтогоМ	= ДЗИтогоТек-ДЗИтогоНачМ;
	ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗИтогоМП	=?(ДЗИтогоНачМ<>0,(ДЗИтогоТек-ДЗИтогоНачМ)/ДЗИтогоНачМ,0)*100;

    ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗПрМ	= ДЗПрТек-ДЗПрНачМ;
	ОбластьДебиторскаяЗадолженность.Параметры.ИзмДЗПрМП	=?(ДЗПрНачМ<>0,(ДЗПрТек-ДЗПрНачМ)/ДЗПрНачМ,0)*100;
	
	ТабДок.Вывести(ОбластьДебиторскаяЗадолженность);
	мСтруктТабДок.Вставить("ОборотныеСредства_ДебиторскаяЗадолженность", ТабДок);
	
КонецПроцедуры // ОборотныеСредства_ДебиторскаяЗадолженностьФормирование()

// Процедура расшифровки показателя "Оборотные средства - Дебиторская задолженность"
//
Процедура ОборотныеСредства_ДебиторскаяЗадолженностьРасшифровка(Параметры)

	//Расшифровка_ОстаткиОбороты(Параметры.Расшифровка);

КонецПроцедуры // ОборотныеСредства_ДебиторскаяЗадолженностьРасшифровка()

// Процедура обработки показателя "Оборотные средства - Дебиторская задолженность"
//
Процедура ОборотныеСредства_ДебиторскаяЗадолженность(СтрДействие, Параметры = 0)
	Если СтрДействие = "Инициализация" Тогда
		
		ОборотныеСредства_ДебиторскаяЗадолженностьИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ОборотныеСредства_ДебиторскаяЗадолженностьФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ОборотныеСредства_ДебиторскаяЗадолженностьРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
КонецПроцедуры // ОборотныеСредства_ДебиторскаяЗадолженность()

// Процедура инициализации показателя "Оборотные средства - Кредиторская задолженность"
//
Процедура ОборотныеСредства_КредиторскаяЗадолженностьИнициализация()
	
	ДобавитьВДеревоПоказателей("ОборотныеСредства_КредиторскаяЗадолженность", "Общая кредиторская задолженность", "", "ОборотныеСредства");
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ОборотныеСредства_КредиторскаяЗадолженность", ТабПарам);
	
	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ОборотныеСредства_КредиторскаяЗадолженность", ТабПарам);
	
КонецПроцедуры // ОборотныеСредства_КредиторскаяЗадолженностьИнициализация()

// Процедура формирования показателя "Оборотные средства - Кредиторская задолженность"
//
Процедура ОборотныеСредства_КредиторскаяЗадолженностьФормирование()

	Макет = мМакет.ПолучитьОбласть("ОборотныеСредства");
	ОбластьКредиторскаяЗадолженность = Макет.ПолучитьОбласть("КредиторскаяЗадолженность");
	
	ТабДок  = Новый ТабличныйДокумент;
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон,
		ПолучитьПараметрПоказателя("ОборотныеСредства_КредиторскаяЗадолженность", "ПериодАнализа"));

	ОбластьЗаголовокОбласти=Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ОбластьЗаголовокОбласти.Параметры.ЗаголовокОбласти="Общая кредиторская задолженность";
	ТабДок.Вывести(ОбластьЗаголовокОбласти);
	ТабДок.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));

    ЗапросОбщий = Новый Запрос; 	
	ЗапросОбщий.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаНач, ) КАК КонтрагентыВзаиморасчетыКомпанииОстатки
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток < 0
		|ИТОГИ
		|	СУММА(СуммаОстаток)
		|ПО
		|	ОБЩИЕ";

	ЗапросОбщий.УстановитьПараметр("ДатаНач", НачалоДня(ДатаКон));
	Результат = ЗапросОбщий.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаИтогов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		ВыборкаИтогов.Следующий();
		КЗИтогоНачД   = ВыборкаИтогов.СуммаОстаток;
	Иначе
		КЗИтогоНачД   = 0;
	КонецЕсли;
	
    Запрос = Новый Запрос; 	

	Запрос.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДокументРасчетовСКонтрагентом,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК ДопустимоеЧислоДнейЗадолженности,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.СуммаВзаиморасчетовОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток * КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.СуммаУпрОстаток / КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.СуммаВзаиморасчетовОстаток
		|	КОНЕЦ КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаНач, ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности) КАК КонтрагентыВзаиморасчетыКомпанииОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				&ДатаНач,
		|				ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
		|					И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиСвод
		|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.ДоговорКонтрагента = КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента
		|			И КонтрагентыВзаиморасчетыКомпанииОстаткиСвод.Сделка = КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаВзаиморасчетовОстаток < 0";

	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаКон));
	ТаблицаЗадолженности=Запрос.Выполнить().Выгрузить();

	КЗПрНачД=0;

	МассивПросроченныхНачД=Новый Массив;
	
	Для Каждого Строка из ТаблицаЗадолженности Цикл

		Если (Строка.ДокументРасчетовСКонтрагентом.Дата+(Строка.ДопустимоеЧислоДнейЗадолженности-1)*24*3600)<ДатаКон Тогда
			КЗПрНачД=КЗПрНачД+Строка.СуммаОстаток;
			МассивПросроченныхНачД.Добавить(Строка.Сделка);
		КонецЕсли;

	КонецЦикла;

    ЗапросОбщий.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = ЗапросОбщий.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаИтогов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		ВыборкаИтогов.Следующий();
		КЗИтогоТек    = ВыборкаИтогов.СуммаОстаток;
	Иначе
		КЗИтогоТек    = 0;
	КонецЕсли;
	
    Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ТаблицаЗадолженности=Запрос.Выполнить().Выгрузить();

	КЗПрТек=0;
	МассивПросроченныхТек=Новый Массив;

	Для Каждого Строка из ТаблицаЗадолженности Цикл

		Если (Строка.ДокументРасчетовСКонтрагентом.Дата+Строка.ДопустимоеЧислоДнейЗадолженности*24*3600)<ДатаКон Тогда
			КЗПрТек=КЗПрТек+Строка.СуммаОстаток;
			МассивПросроченныхТек.Добавить(Строка.Сделка);
		КонецЕсли;

	КонецЦикла;

    ЗапросОбщий.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Результат = ЗапросОбщий.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаИтогов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		ВыборкаИтогов.Следующий();
		КЗИтогоНачМ   = ВыборкаИтогов.СуммаОстаток;
	Иначе
		КЗИтогоНачМ   = 0;
	КонецЕсли;
	
    Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	ТаблицаЗадолженности=Запрос.Выполнить().Выгрузить();

	КЗПрНачМ=0;
	МассивПросроченныхМес=Новый Массив;

	Для Каждого Строка из ТаблицаЗадолженности Цикл

		Если (Строка.ДокументРасчетовСКонтрагентом.Дата+Строка.ДопустимоеЧислоДнейЗадолженности*24*3600)<ДатаНач Тогда
			КЗПрНачМ=КЗПрНачМ+Строка.СуммаОстаток;
			МассивПросроченныхМес.Добавить(Строка.Сделка);
		КонецЕсли;

	КонецЦикла;

	ОбластьКредиторскаяЗадолженность.Параметры.КЗИтогоТек	= КЗИтогоТек;
	ОбластьКредиторскаяЗадолженность.Параметры.КЗИтогоНачД	= КЗИтогоНачД;
	ОбластьКредиторскаяЗадолженность.Параметры.КЗПрТек		= КЗПрТек;
    ОбластьКредиторскаяЗадолженность.Параметры.КЗПрНачД		= КЗПрНачД;

    ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗИтогоД	= КЗИтогоТек-КЗИтогоНачД;
	ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗИтогоДП	= ?(КЗИтогоНачД<>0,(КЗИтогоТек-КЗИтогоНачД)/КЗИтогоНачД,0)*100;

    ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗПрД		= КЗПрТек-КЗПрНачД;
	ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗПрДП	= ?(КЗПрНачД<>0,(КЗПрТек-КЗПрНачД)/КЗПрНачД,0)*100;
	
    ОбластьКредиторскаяЗадолженность.Параметры.КЗИтогоНачМ	= КЗИтогоНачМ;
    ОбластьКредиторскаяЗадолженность.Параметры.КЗПрНачМ		= КЗПрНачМ;

    ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗИтогоМ	= КЗИтогоТек-КЗИтогоНачМ;
	ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗИтогоМП	= ?(КЗИтогоНачМ<>0,(КЗИтогоТек-КЗИтогоНачМ)/КЗИтогоНачМ,0)*100;

    ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗПрМ		= КЗПрТек-КЗПрНачМ;
	ОбластьКредиторскаяЗадолженность.Параметры.ИзмКЗПрМП	= ?(КЗПрНачМ<>0,(КЗПрТек-КЗПрНачМ)/КЗПрНачМ,0)*100;

	ТабДок.Вывести(ОбластьКредиторскаяЗадолженность);
	мСтруктТабДок.Вставить("ОборотныеСредства_КредиторскаяЗадолженность", ТабДок);
	
КонецПроцедуры // ОборотныеСредства_КредиторскаяЗадолженностьФормирование()

// Процедура расшифровки показателя "Оборотные средства - Кредиторская задолженность"
//
Процедура ОборотныеСредства_КредиторскаяЗадолженностьРасшифровка(Параметры)

	//Расшифровка_ОстаткиОбороты(Параметры.Расшифровка);

КонецПроцедуры // ОборотныеСредства_КредиторскаяЗадолженностьРасшифровка()

// Процедура обработки показателя "Оборотные средства - Кредиторская задолженность"
//
Процедура ОборотныеСредства_КредиторскаяЗадолженность(СтрДействие, Параметры = 0)
	Если СтрДействие = "Инициализация" Тогда
		
		ОборотныеСредства_КредиторскаяЗадолженностьИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ОборотныеСредства_КредиторскаяЗадолженностьФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ОборотныеСредства_КредиторскаяЗадолженностьРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
КонецПроцедуры // ОборотныеСредства_КредиторскаяЗадолженность()

// Процедура инициализации показателя "Оборотные средства - Остатки товаров"
//
Процедура ОборотныеСредства_ОстаткиТоваровИнициализация()
	
	ДобавитьВДеревоПоказателей("ОборотныеСредства_ОстаткиТоваров", "Остатки товаров", "", "ОборотныеСредства");
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ОборотныеСредства_ОстаткиТоваров", ТабПарам);
	
	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ОборотныеСредства_ОстаткиТоваров", ТабПарам);
	
КонецПроцедуры // ОборотныеСредства_ОстаткиТоваровИнициализация()

// Процедура формирования показателя "Оборотные средства - Остатки товаров"
//
Процедура ОборотныеСредства_ОстаткиТоваровФормирование()
	
    Макет = мМакет.ПолучитьОбласть("ОборотныеСредства");
	ОбластьОстаткиТоваров = Макет.ПолучитьОбласть("ОстаткиТоваров");
	
	ТабДок  = Новый ТабличныйДокумент;
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон,
		ПолучитьПараметрПоказателя("ОборотныеСредства_ОстаткиТоваров", "ПериодАнализа"));

	ОбластьЗаголовокОбласти=Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ОбластьЗаголовокОбласти.Параметры.ЗаголовокОбласти="Остатки товаров";
	ТабДок.Вывести(ОбластьЗаголовокОбласти);
	ТабДок.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));

	Запрос = Новый Запрос;

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток
	|	   * ПартииОстаток.СтоимостьОстаток
	|	   / ПартииОстаток.КоличествоОстаток
	|	) КАК ТМЦОстаток,
	|	СУММА(ЕСТЬNULL(РезервыТоваров.КоличествоОстаток, 0)
	|	   * ПартииОстаток.СтоимостьОстаток
	|	   / ПартииОстаток.КоличествоОстаток
	|	) КАК ТМЦОстатокРезерв
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура КАК Номенклатура,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаНач)
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаНач)
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВНТТ.Остатки(&ДатаНач)
	|		)	КАК ОстаткиТоваровКомпанииОстатки
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры
	|	) КАК ОстаткиТоваровКомпанииОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаНач) КАК РезервыТоваров
	|ПО
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура = РезервыТоваров.Номенклатура
	|	И ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры = РезервыТоваров.ХарактеристикаНоменклатуры
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаНач) КАК ПартииОстаток
	|ПО
	|	ОстаткиТоваровКомпанииОстатки.Номенклатура = ПартииОстаток.Номенклатура
	|	И ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры = ПартииОстаток.ХарактеристикаНоменклатуры
	|	И ПартииОстаток.КоличествоОстаток <> 0
	|";

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));

    Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

         ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачД	=?(Выборка["ТМЦОстаток"]=NULL,0,Выборка["ТМЦОстаток"]);
		 ОбластьОстаткиТоваров.Параметры.ТМЦРезНачД		=?(Выборка["ТМЦОстатокРезерв"]=NULL,0,Выборка["ТМЦОстатокРезерв"]);
         ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачД	=ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачД-ОбластьОстаткиТоваров.Параметры.ТМЦРезНачД;

	КонецЕсли;
		 											
    Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));

    Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

		ОбластьОстаткиТоваров.Параметры.ТМЦСкладТек		=?(Выборка["ТМЦОстаток"]=NULL,0,Выборка["ТМЦОстаток"]);
		ОбластьОстаткиТоваров.Параметры.ТМЦРезТек		=?(Выборка["ТМЦОстатокРезерв"]=NULL,0,Выборка["ТМЦОстатокРезерв"]);
		ОбластьОстаткиТоваров.Параметры.ТМЦСвобТек		=ОбластьОстаткиТоваров.Параметры.ТМЦСкладТек - ОбластьОстаткиТоваров.Параметры.ТМЦРезТек;

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСкладД 	= ОбластьОстаткиТоваров.Параметры.ТМЦСкладТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачД;
        ОбластьОстаткиТоваров.Параметры.ИзмТМЦРезД 		= ОбластьОстаткиТоваров.Параметры.ТМЦРезТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦРезНачД;
		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСвобД 	= ОбластьОстаткиТоваров.Параметры.ТМЦСвобТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачД;
														  

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСкладДП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачД<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦСкладД
														    /ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачД,0)*100;

       	ОбластьОстаткиТоваров.Параметры.ИзмТМЦРезДП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦРезНачД<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦРезД
														    /ОбластьОстаткиТоваров.Параметры.ТМЦРезНачД,0)*100;

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСвобДП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачД<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦСвобД
														    /ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачД,0)*100;

	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));

    Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

		ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачМ	=?(Выборка["ТМЦОстаток"]=NULL,0,Выборка["ТМЦОстаток"]);
		ОбластьОстаткиТоваров.Параметры.ТМЦРезНачМ		=?(Выборка["ТМЦОстатокРезерв"]=NULL,0,Выборка["ТМЦОстатокРезерв"]);
		ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачМ		=ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачМ-ОбластьОстаткиТоваров.Параметры.ТМЦРезНачМ;

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСкладМ 	= ОбластьОстаткиТоваров.Параметры.ТМЦСкладТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачМ;
        ОбластьОстаткиТоваров.Параметры.ИзмТМЦРезМ 		= ОбластьОстаткиТоваров.Параметры.ТМЦРезТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦРезНачМ;
		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСвобМ 	= ОбластьОстаткиТоваров.Параметры.ТМЦСвобТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачМ;
														  

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСкладМП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачМ<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦСкладМ
														    /ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачМ,0)*100;

       	ОбластьОстаткиТоваров.Параметры.ИзмТМЦРезМП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦРезНачМ<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦРезМ
														    /ОбластьОстаткиТоваров.Параметры.ТМЦРезНачМ,0)*100;

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦСвобМП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачМ<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦСвобМ
														    /ОбластьОстаткиТоваров.Параметры.ТМЦСвобНачМ,0)*100;

	КонецЕсли;

    Запрос.Текст=

	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|СУММА(ОстаткиТоваровКомпанииОтданныеОстатки.КоличествоОстаток 
	|* ПартииОтданныеОстаток.СтоимостьОстаток 
	|/ ПартииОтданныеОстаток.КоличествоОстаток) КАК ТМЦОстаток
	|ИЗ
	|РегистрНакопления.ТоварыПереданные.Остатки(&ДатаНач) КАК ОстаткиТоваровКомпанииОтданныеОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|(ВЫБРАТЬ
	| Номенклатура КАК Номенклатура,
	| ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	| ДоговорКонтрагента КАК ДоговорКонтрагента,
	| КоличествоОстаток КАК КоличествоОстаток,
    | СтоимостьОстаток КАК СтоимостьОстаток
	| ИЗ РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаНач)
	|	ГДЕ КоличествоОстаток<>0) КАК ПартииОтданныеОстаток 
	|	ПО ОстаткиТоваровКомпанииОтданныеОстатки.Номенклатура = ПартииОтданныеОстаток.Номенклатура 
	|	И ОстаткиТоваровКомпанииОтданныеОстатки.ХарактеристикаНоменклатуры = ПартииОтданныеОстаток.ХарактеристикаНоменклатуры
	|	И ОстаткиТоваровКомпанииОтданныеОстатки.ДоговорКонтрагента = ПартииОтданныеОстаток.ДоговорКонтрагента";

    Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));

    Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

         ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачД	=?(Выборка["ТМЦОстаток"]=NULL,0,Выборка["ТМЦОстаток"]);
	
	КонецЕсли;
		 											
    Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));

    Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

		ОбластьОстаткиТоваров.Параметры.ТМЦРеализТек		=?(Выборка["ТМЦОстаток"]=NULL,0,Выборка["ТМЦОстаток"]);
		
		ОбластьОстаткиТоваров.Параметры.ИзмТМЦРеализД 	= ОбластьОстаткиТоваров.Параметры.ТМЦРеализТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачД;														  

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦРеализДП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачД<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦРеализД
														    /ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачД,0)*100;
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));

    Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();

	Если Выборка.Следующий() Тогда

		ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачМ	=?(Выборка["ТМЦОстаток"]=NULL,0,Выборка["ТМЦОстаток"]);
		
		ОбластьОстаткиТоваров.Параметры.ИзмТМЦРеализМ 	= ОбластьОстаткиТоваров.Параметры.ТМЦРеализТек
														  - ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачМ;
   														  

		ОбластьОстаткиТоваров.Параметры.ИзмТМЦРеализМП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачМ<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦРеализМ
														    /ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачМ,0)*100;														
	КонецЕсли;

    ОбластьОстаткиТоваров.Параметры.ТМЦИтогоТек		= ОбластьОстаткиТоваров.Параметры.ТМЦСкладТек
													+ ОбластьОстаткиТоваров.Параметры.ТМЦРеализТек;

	ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачД	= ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачД
													+ ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачД;

	ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачМ	= ОбластьОстаткиТоваров.Параметры.ТМЦСкладНачМ
													+ ОбластьОстаткиТоваров.Параметры.ТМЦРеализНачМ;

	ОбластьОстаткиТоваров.Параметры.ИзмТМЦИтогоД 	= ОбластьОстаткиТоваров.Параметры.ТМЦИтогоТек
													- ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачД;
        														  

	ОбластьОстаткиТоваров.Параметры.ИзмТМЦИтогоДП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачД<>0,
														    ОбластьОстаткиТоваров.Параметры.ИзмТМЦИтогоД
														    /ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачД,0)*100;

	ОбластьОстаткиТоваров.Параметры.ИзмТМЦИтогоМ 	= ОбластьОстаткиТоваров.Параметры.ТМЦИтогоТек
													- ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачМ;
													
	ОбластьОстаткиТоваров.Параметры.ИзмТМЦИтогоМП 	= ?(ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачМ<>0,
															ОбластьОстаткиТоваров.Параметры.ИзмТМЦИтогоМ
														    /ОбластьОстаткиТоваров.Параметры.ТМЦИтогоНачМ,0)*100;
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ОстаткиТоваров");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ПартииТоваровНаСкладах");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ГруппировкиСтрок"    , Новый Структура("Номенклатура"));	
    ОбластьОстаткиТоваров.Параметры.ОборотныеСредства_ОстаткиТоваровСкладРасшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ОборотныеСредства_ОстаткиТоваров");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ПартииТоваровПереданные");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ГруппировкиСтрок"    , Новый Структура("Номенклатура"));	
    ОбластьОстаткиТоваров.Параметры.ОборотныеСредства_ОстаткиТоваровКомиссияРасшифровка = ПарамРасшифровки;
												
	ТабДок.Вывести(ОбластьОстаткиТоваров);
	мСтруктТабДок.Вставить("ОборотныеСредства_ОстаткиТоваров", ТабДок);
	
КонецПроцедуры // ОборотныеСредства_ОстаткиТоваровФормирование()

// Процедура расшифровки показателя "Оборотные средства - Остатки товаров"
//
Процедура ОборотныеСредства_ОстаткиТоваровРасшифровка(Параметры)

	Расшифровка_ОстаткиОбороты(Параметры.Расшифровка);

КонецПроцедуры // ОборотныеСредства_ОстаткиТоваровРасшифровка()

// Процедура обработки показателя "Оборотные средства - Остатки товаров"
//
Процедура ОборотныеСредства_ОстаткиТоваров(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ОборотныеСредства_ОстаткиТоваровИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ОборотныеСредства_ОстаткиТоваровФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ОборотныеСредства_ОстаткиТоваровРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ОборотныеСредства_ОстаткиТоваров()

// Процедура инициализации показателя "Оборотные средства - Общий итог"
//
Процедура ОборотныеСредства_ОбщийИтогИнициализация()
	
	ДобавитьВДеревоПоказателей("ОборотныеСредства_ОбщийИтог", "Оборотные средства (итого)", "", "ОборотныеСредства");
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ОборотныеСредства_ОбщийИтог", ТабПарам);
	
	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ОборотныеСредства_ОбщийИтог", ТабПарам);
	
КонецПроцедуры // ОборотныеСредства_ОбщийИтогИнициализация()

// Процедура формирования показателя "Оборотные средства - Общий итог"
//
Процедура ОборотныеСредства_ОбщийИтогФормирование()
	
	
	ТабДок  = Новый ТабличныйДокумент;
	Периодичность = ПолучитьПараметрПоказателя("ОборотныеСредства_ОбщийИтог", "ПериодАнализа");
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон, Периодичность);

	Макет = мМакет.ПолучитьОбласть("ОборотныеСредства");
	ОбластьЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ОбластьЗаголовокОбласти.Параметры.ЗаголовокОбласти = "Итого оборотные средства";
	ТабДок.Вывести( ОбластьЗаголовокОбласти);
	ТабДок.Вывести( Макет.ПолучитьОбласть("ЗаголовокТаблицы"));

    КонДня = 0;
	НачДня = 0;
	НачПер = 0;
	///////////////////////////////////////////////////////////////////////////////
	// Рассчитаем стоимость товаров на складах
	Запрос = Новый Запрос; 	

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток 
	|		* ПартииОстаток.СтоимостьОстаток 
	|		/ ПартииОстаток.КоличествоОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаНач) КАК ОстаткиТоваровКомпанииОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	(	ВЫБРАТЬ
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СерияНоменклатуры КАК СерияНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток,
	|			СтоимостьОстаток КАК СтоимостьОстаток
	|		ИЗ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаНач)
	|		ГДЕ КоличествоОстаток<>0) КАК ПартииОстаток
	|			ПО ОстаткиТоваровКомпанииОстатки.Номенклатура = ПартииОстаток.Номенклатура 
	|			 И ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры = ПартииОстаток.ХарактеристикаНоменклатуры
	|			 И ОстаткиТоваровКомпанииОстатки.СерияНоменклатуры = ПартииОстаток.СерияНоменклатуры";

	// Стоимость товаров на складах
	// на начало дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	КонДня = КонДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на начало периода
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);
	
	///////////////////////////////////////////////////////////////////////////////
	// Рассчитаем стоимость товаров отданных

	Запрос = Новый Запрос;

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ОстаткиТоваровКомпанииОтданныеОстатки.КоличествоОстаток 
		|	* ПартииОтданныеОстаток.СтоимостьОстаток 
		|	/ ПартииОтданныеОстаток.КоличествоОстаток) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаНач) КАК ОстаткиТоваровКомпанииОтданныеОстатки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	(	ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			КоличествоОстаток КАК КоличествоОстаток,
		|			СтоимостьОстаток КАК СтоимостьОстаток
		|		ИЗ РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаНач)
		|			ГДЕ КоличествоОстаток<>0) КАК ПартииОтданныеОстаток 
		|	
		|	ПО ОстаткиТоваровКомпанииОтданныеОстатки.Номенклатура = ПартииОтданныеОстаток.Номенклатура 
		|	И ОстаткиТоваровКомпанииОтданныеОстатки.ХарактеристикаНоменклатуры = ПартииОтданныеОстаток.ХарактеристикаНоменклатуры
		|	И ОстаткиТоваровКомпанииОтданныеОстатки.ДоговорКонтрагента = ПартииОтданныеОстаток.ДоговорКонтрагента";

	// Стоимость товаров на складах + стоимость товаров отданных
	// на начало дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	КонДня = КонДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на начало периода
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);
	
    ////////////////////////////////////////////////////////////////////////////
	// Рассчитаем суммы дебиторской задолженности

	Запрос = Новый Запрос;

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаНач) КАК КонтрагентыВзаиморасчетыКомпанииОстатки
        |
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток > 0";

	// Сумма дебиторской задолженности
	// на начало дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	КонДня = КонДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на начало периода
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);

    ////////////////////////////////////////////////////////////////////////////
	// Рассчитаем остатки денежных средств

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| 	СУММА(ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток) КАК НачОст,
		| 	СУММА(ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток)  КАК КонОст
		|ИЗ
		| 	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ДенежныеСредстваКомпанииОстаткиИОбороты";

	// Сумма денежных средств
	// на начало дня и конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("НачОст"), 0, 1);
	КонДня = КонДня + Окр(Результат.Итог("КонОст"), 0, 1);

	// на начало периода
    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| 	ДенежныеСредстваКомпанииОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		| 	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаНач) КАК ДенежныеСредстваКомпанииОстатки";

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);
	
    ////////////////////////////////////////////////////////////////////////////
	// Рассчитаем дебиторскую задолженность подотчетников

	Запрос = Новый Запрос;

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток КАК НачОст,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток  КАК КонОст
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты";

	// Добавим сумму дебиторской задолженности подотчетников
	// на начало дня и конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("НачОст"), 0, 1);
	КонДня = КонДня + Окр(Результат.Итог("КонОст"), 0, 1);

	// на начало периода
    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаНач) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстатки";

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);

	ИзмПроцЗаДень   = ?( НачДня = 0, 0, (КонДня - НачДня) / НачДня * 100);
	ИзмПроцЗаПериод = ?( НачПер = 0, 0, (КонДня - НачПер) / НачПер * 100);

	Область = Макет.ПолучитьОбласть("ОбщийИтог");

	Область.Параметры.ЗОСИтогоТек  = КонДня;
	Область.Параметры.ЗОСИтогоНачД = НачДня;
	Область.Параметры.ЗОСИтогоНачМ = НачПер;
	Область.Параметры.ИзмЗОСИтогоД = КонДня - НачДня;
	Область.Параметры.ИзмЗОСИтогоМ = КонДня - НачПер;
	Область.Параметры.ИзмЗОСИтогоДП = ИзмПроцЗаДень;
	Область.Параметры.ИзмЗОСИтогоМП = ИзмПроцЗаПериод;
	
	ТабДок.Вывести(Область);
	мСтруктТабДок.Вставить("ОборотныеСредства_ОбщийИтог", ТабДок);
	
КонецПроцедуры // ОборотныеСредства_ОбщийИтогФормирование()

// Процедура расшифровки показателя "Оборотные средства - Общий итог"
//
Процедура ОборотныеСредства_ОбщийИтогРасшифровка(Параметры)
	
	
	
КонецПроцедуры // ОборотныеСредства_ОбщийИтогРасшифровка()

// Процедура обработки показателя "Оборотные средства - Общий итог"
//
Процедура ОборотныеСредства_ОбщийИтог(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ОборотныеСредства_ОбщийИтогИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ОборотныеСредства_ОбщийИтогФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ОборотныеСредства_ОбщийИтогРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ОборотныеСредства_ОбщийИтог()

// Процедура инициализации показателя "Оборотные средства - Итого капитал"
//
Процедура ОборотныеСредства_ИтогоКапиталИнициализация()
	
	ДобавитьВДеревоПоказателей("ОборотныеСредства_ИтогоКапитал", "Оборотный капитал (итого)", "", "ОборотныеСредства");
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ОборотныеСредства_ИтогоКапитал", ТабПарам);
	
	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ОборотныеСредства_ИтогоКапитал", ТабПарам);
	
КонецПроцедуры // ОборотныеСредства_ИтогоКапиталИнициализация()

// Процедура формирования показателя "Оборотные средства - Итого капитал"
//
Процедура ОборотныеСредства_ИтогоКапиталФормирование()
	
	
	ТабДок  = Новый ТабличныйДокумент;
	Периодичность = ПолучитьПараметрПоказателя("ОборотныеСредства_ИтогоКапитал", "ПериодАнализа");
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон, Периодичность);

	Макет = мМакет.ПолучитьОбласть("ОборотныеСредства");
	ОбластьЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ОбластьЗаголовокОбласти.Параметры.ЗаголовокОбласти = "Итого оборотный капитал";
	ТабДок.Вывести( ОбластьЗаголовокОбласти);
	ТабДок.Вывести( Макет.ПолучитьОбласть("ЗаголовокТаблицы"));

    КонДня = 0;
	НачДня = 0;
	НачПер = 0;
	
	///////////////////////////////////////////////////////////////////////////////
	// Рассчитаем стоимость товаров на складах
	Запрос = Новый Запрос; 	

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ОстаткиТоваровКомпанииОстатки.КоличествоОстаток 
	|		* ПартииОстаток.СтоимостьОстаток 
	|		/ ПартииОстаток.КоличествоОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаНач) КАК ОстаткиТоваровКомпанииОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	(	ВЫБРАТЬ
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СерияНоменклатуры КАК СерияНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток,
	|			СтоимостьОстаток КАК СтоимостьОстаток
	|		ИЗ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаНач)
	|		ГДЕ КоличествоОстаток<>0) КАК ПартииОстаток
	|			ПО ОстаткиТоваровКомпанииОстатки.Номенклатура = ПартииОстаток.Номенклатура 
	|			 И ОстаткиТоваровКомпанииОстатки.ХарактеристикаНоменклатуры = ПартииОстаток.ХарактеристикаНоменклатуры
	|			 И ОстаткиТоваровКомпанииОстатки.СерияНоменклатуры = ПартииОстаток.СерияНоменклатуры";

	// Стоимость товаров на складах
	// на начало дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	КонДня = КонДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на начало периода
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);
	
	///////////////////////////////////////////////////////////////////////////////
	// Рассчитаем стоимость товаров отданных

	Запрос = Новый Запрос;

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ОстаткиТоваровКомпанииОтданныеОстатки.КоличествоОстаток 
		|	* ПартииОтданныеОстаток.СтоимостьОстаток 
		|	/ ПартииОтданныеОстаток.КоличествоОстаток) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаНач) КАК ОстаткиТоваровКомпанииОтданныеОстатки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	(	ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			КоличествоОстаток КАК КоличествоОстаток,
		|			СтоимостьОстаток КАК СтоимостьОстаток
		|		ИЗ РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаНач)
		|			ГДЕ КоличествоОстаток<>0) КАК ПартииОтданныеОстаток 
		|	
		|	ПО ОстаткиТоваровКомпанииОтданныеОстатки.Номенклатура = ПартииОтданныеОстаток.Номенклатура 
		|	И ОстаткиТоваровКомпанииОтданныеОстатки.ХарактеристикаНоменклатуры = ПартииОтданныеОстаток.ХарактеристикаНоменклатуры
		|	И ОстаткиТоваровКомпанииОтданныеОстатки.ДоговорКонтрагента = ПартииОтданныеОстаток.ДоговорКонтрагента";

	// Стоимость товаров на складах + стоимость товаров отданных
	// на начало дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	КонДня = КонДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на начало периода
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);
	
    ////////////////////////////////////////////////////////////////////////////
	// Рассчитаем суммы дебиторской задолженности

	Запрос = Новый Запрос;

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаНач) КАК КонтрагентыВзаиморасчетыКомпанииОстатки
        |
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток > 0";

	// Сумма дебиторской задолженности
	// на начало дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	КонДня = КонДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на начало периода
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);

    ////////////////////////////////////////////////////////////////////////////
	// Рассчитаем остатки денежных средств

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| 	СУММА(ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток) КАК НачОст,
		| 	СУММА(ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток)  КАК КонОст
		|ИЗ
		| 	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ДенежныеСредстваКомпанииОстаткиИОбороты";

	// Сумма денежных средств
	// на начало дня и конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("НачОст"), 0, 1);
	КонДня = КонДня + Окр(Результат.Итог("КонОст"), 0, 1);

	// на начало периода
    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| 	ДенежныеСредстваКомпанииОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		| 	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаНач) КАК ДенежныеСредстваКомпанииОстатки";

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);
	
    ////////////////////////////////////////////////////////////////////////////
	// Рассчитаем дебиторскую задолженность подотчетников

	Запрос = Новый Запрос;

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток КАК НачОст,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток  КАК КонОст
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты";

	// Добавим сумму дебиторской задолженности подотчетников
	// на начало дня и конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("НачОст"), 0, 1);
	КонДня = КонДня + Окр(Результат.Итог("КонОст"), 0, 1);

	// на начало периода
    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаНач) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстатки";

	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);

    ////////////////////////////////////////////////////////////////////////////
	// Рассчитаем суммы кредиторской задолженности

	Запрос = Новый Запрос;

    Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.Сделка,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаНач) КАК КонтрагентыВзаиморасчетыКомпанииОстатки
        |
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстатки.СуммаУпрОстаток < 0";

	// Сумма кредиторской задолженности
	// на начало дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачДня = НачДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на конец дня
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	КонДня = КонДня + Окр(Результат.Итог("Сумма"), 0, 1);

	// на начало периода
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	Результат = Запрос.Выполнить().Выгрузить();
	НачПер = НачПер + Окр(Результат.Итог("Сумма"), 0, 1);

	ИзмПроцЗаДень   = ?( НачДня = 0, 0, (КонДня - НачДня) / НачДня * 100);
	ИзмПроцЗаПериод = ?( НачПер = 0, 0, (КонДня - НачПер) / НачПер * 100);

    ////////////////////////////////////////////////////////////////////////////
	// Формирование выходной таблицы

	Область = Макет.ПолучитьОбласть("КапиталИтого");

	Область.Параметры.ЗСОКИтогоТек  = КонДня;
	Область.Параметры.ЗСОКИтогоНачД = НачДня;
	Область.Параметры.ЗСОКИтогоНачМ = НачПер;
	Область.Параметры.ИзмЗСОКИтогоД = КонДня - НачДня;
	Область.Параметры.ИзмЗСОКИтогоМ = КонДня - НачПер;
	Область.Параметры.ИзмЗСОКИтогоДП = ИзмПроцЗаДень;
	Область.Параметры.ИзмЗСОКИтогоМП = ИзмПроцЗаПериод;
	
	ТабДок.Вывести(Область);
	мСтруктТабДок.Вставить("ОборотныеСредства_ИтогоКапитал", ТабДок);
	
КонецПроцедуры // ОборотныеСредства_ИтогоКапиталФормирование()

// Процедура расшифровки показателя "Оборотные средства - Итого капитал"
//
Процедура ОборотныеСредства_ИтогоКапиталРасшифровка(Параметры)
	
	
	
КонецПроцедуры // ОборотныеСредства_ИтогоКапиталРасшифровка()

// Процедура обработки показателя "Оборотные средства - Итого капитал"
//
Процедура ОборотныеСредства_ИтогоКапитал(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ОборотныеСредства_ИтогоКапиталИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ОборотныеСредства_ИтогоКапиталФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ОборотныеСредства_ИтогоКапиталРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ОборотныеСредства_ИтогоКапитал()

///////////////////////////////////////////////////////////////////////////////
// Процедуры обработки показателя "Поступления и платежи"

// Процедура обработки показателя "Поступления и платежи"
//
Процедура ПоступленияИПлатежи(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ДобавитьВДеревоПоказателей("ПоступленияИПлатежи", "Поступления и платежи", "",, Истина);
			
		ТабПарам = СоздатьТабПарам();

		// Считать сохранные значения
		ПолучитьСохраненныеЗначения("ПоступленияИПлатежи", ТабПарам);

		// Добавить данные в структуру параметров показателей
		СтруктураПараметровПоказателей.Вставить("ПоступленияИПлатежи", ТабПарам);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // ПоступленияИПлатежи()

// Процедура инициализации показателя "Поступления и платежи - Движение денежных средств"
//
Процедура ПоступленияИПлатежи_ДвижениеДенежныхСредствИнициализация()
	
	ДобавитьВДеревоПоказателей("ПоступленияИПлатежи_ДвижениеДенежныхСредств", "Движение денежных средств", "", "ПоступленияИПлатежи");
		
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ПоступленияИПлатежи_ДвижениеДенежныхСредств", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ПоступленияИПлатежи_ДвижениеДенежныхСредств", ТабПарам);
	
КонецПроцедуры // ПоступленияИПлатежи_ДвижениеДенежныхСредствИнициализация()

// Процедура формирование показателя "Поступления и платежи - Движение денежных средств"
//
Процедура ПоступленияИПлатежи_ДвижениеДенежныхСредствФормирование()

    Макет = мМакет.ПолучитьОбласть("ПоступленияИПлатежи");
	ОбластьДДС = Макет.ПолучитьОбласть("ДвижениеДенежныхСредств");

	ТабДок  = Новый ТабличныйДокумент;
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон,
		ПолучитьПараметрПоказателя("ПоступленияИПлатежи_ДвижениеДенежныхСредств", "ПериодАнализа"));

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР 
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Нал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток
	|			ИНАЧЕ 
	|				0
	|			КОНЕЦ) КАК НачОстНал,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Нал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК КонОстНал,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Нал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрПриход
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК ПриходНал,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Нал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрРасход
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК РасходНал,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Безнал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрНачальныйОстаток
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК НачОстБН,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Безнал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК КонОстБН,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Безнал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрПриход
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК ПриходБН,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств = &Безнал
	|			ТОГДА ДенежныеСредстваКомпанииОстаткиИОбороты.СуммаУпрРасход
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ) КАК РасходБН,
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.БанковскийСчетКасса КАК БанкКасса,
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств КАК ВидДенежныхСредств
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ДенежныеСредстваКомпанииОстаткиИОбороты
    |
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.БанковскийСчетКасса,
	|	ДенежныеСредстваКомпанииОстаткиИОбороты.ВидДенежныхСредств";

    Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаКон), ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("Нал", Перечисления.ВидыДенежныхСредств.Наличные);
	Запрос.УстановитьПараметр("Безнал", Перечисления.ВидыДенежныхСредств.Безналичные);

    Результат = Запрос.Выполнить().Выгрузить();

	ОбластьДДС.Параметры.ПРДСНалД	 = 0;
	ОбластьДДС.Параметры.ПРДСБНД	 = 0;
	ОбластьДДС.Параметры.РасДСНалД	 = 0;
	ОбластьДДС.Параметры.РасДСБНД	 = 0;
	ОбластьДДС.Параметры.ПРДСИтогоД	 = 0;
	ОбластьДДС.Параметры.РасДСИтогоД = 0;
	ОбластьДДС.Параметры.ЧДПД		 = 0;

	Для Каждого Выборка Из Результат Цикл

		ОбластьДДС.Параметры.ПРДСНалД	 = ОбластьДДС.Параметры.ПРДСНалД  + ?(Выборка["ПриходНал"] = NULL, 0, Выборка["ПриходНал"]);
		ОбластьДДС.Параметры.ПРДСБНД	 = ОбластьДДС.Параметры.ПРДСБНД   + ?(Выборка["ПриходБН"]  = NULL, 0, Выборка["ПриходБН"]);
        ОбластьДДС.Параметры.РасДСНалД	 = ОбластьДДС.Параметры.РасДСНалД + ?(Выборка["РасходНал"] = NULL, 0, Выборка["РасходНал"]);
		ОбластьДДС.Параметры.РасДСБНД	 = ОбластьДДС.Параметры.РасДСБНД  + ?(Выборка["РасходБН"]  = NULL, 0, Выборка["РасходБН"]);

	КонецЦикла;

	ОбластьДДС.Параметры.ПРДСИтогоД	 = ОбластьДДС.Параметры.ПРДСНалД   + ОбластьДДС.Параметры.ПРДСБНД;
	ОбластьДДС.Параметры.РасДСИтогоД = ОбластьДДС.Параметры.РасДСНалД  + ОбластьДДС.Параметры.РасДСБНД;
	ОбластьДДС.Параметры.ЧДПД		 = ОбластьДДС.Параметры.ПРДСИтогоД - ОбластьДДС.Параметры.РасДСИтогоД;
	
    Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокКасс = Новый СписокЗначений;
	СписокБанк = Новый СписокЗначений;

	ОбластьДДС.Параметры.ПРДСНалМ	 = 0;
	ОбластьДДС.Параметры.ПРДСБНМ	 = 0;
	ОбластьДДС.Параметры.РасДСНалМ	 = 0;
	ОбластьДДС.Параметры.РасДСБНМ	 = 0;
	ОбластьДДС.Параметры.ПРДСИтогоМ	 = 0;
	ОбластьДДС.Параметры.РасДСИтогоМ = 0;
	ОбластьДДС.Параметры.ЧДПМ		 = 0;
	
	Для Каждого Выборка Из Результат Цикл
			
		ОбластьДДС.Параметры.ПРДСНалМ	 = ОбластьДДС.Параметры.ПРДСНалМ   + ?(Выборка["ПриходНал"] = NULL, 0, Выборка["ПриходНал"]);
		ОбластьДДС.Параметры.ПРДСБНМ	 = ОбластьДДС.Параметры.ПРДСБНМ    + ?(Выборка["ПриходБН"]  = NULL, 0, Выборка["ПриходБН"]);
        ОбластьДДС.Параметры.РасДСНалМ	 = ОбластьДДС.Параметры.РасДСНалМ  + ?(Выборка["РасходНал"] = NULL, 0, Выборка["РасходНал"]);
		ОбластьДДС.Параметры.РасДСБНМ	 = ОбластьДДС.Параметры.РасДСБНМ   + ?(Выборка["РасходБН"]  = NULL, 0, Выборка["РасходБН"]);

		Если Выборка.ВидДенежныхСредств = Перечисления.ВидыДенежныхСредств.Безналичные Тогда
			Если СписокБанк.НайтиПоЗначению(Выборка.БанкКасса) = Неопределено Тогда
				СписокБанк.Добавить(Выборка.БанкКасса);
			КонецЕсли;
		ИначеЕсли Выборка.ВидДенежныхСредств = Перечисления.ВидыДенежныхСредств.Наличные Тогда
			Если СписокКасс.НайтиПоЗначению(Выборка.БанкКасса) = Неопределено Тогда
				СписокКасс.Добавить(Выборка.БанкКасса);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	ОбластьДДС.Параметры.ПРДСИтогоМ	 = ОбластьДДС.Параметры.ПРДСНалМ   + ОбластьДДС.Параметры.ПРДСБНМ;
	ОбластьДДС.Параметры.РасДСИтогоМ = ОбластьДДС.Параметры.РасДСНалМ  + ОбластьДДС.Параметры.РасДСБНМ;
	ОбластьДДС.Параметры.ЧДПМ		 = ОбластьДДС.Параметры.ПРДСИтогоМ - ОбластьДДС.Параметры.РасДСИтогоМ;
		
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ПоступленияИПлатежи_ДвижениеДенежныхСредств");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные));
	ОбластьДДС.Параметры.ПоступленияИПлатежи_ДвижениеДенежныхСредствНал = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ПоступленияИПлатежи_ДвижениеДенежныхСредств");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные));
	ОбластьДДС.Параметры.ПоступленияИПлатежи_ДвижениеДенежныхСредствНалДень = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ПоступленияИПлатежи_ДвижениеДенежныхСредств");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные));
	ОбластьДДС.Параметры.ПоступленияИПлатежи_ДвижениеДенежныхСредствБезНал = ПарамРасшифровки;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "ПоступленияИПлатежи_ДвижениеДенежныхСредств");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач"    , НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
	ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные));
	ОбластьДДС.Параметры.ПоступленияИПлатежи_ДвижениеДенежныхСредствБезНалДень = ПарамРасшифровки;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "ПоступленияИПлатежи_ДвижениеДенежныхСредств");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач", ДатаНач);
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКон);
	ОбластьДДС.Параметры.ПоступленияИПлатежи_ДвижениеДенежныхСредствРасшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "ПоступленияИПлатежи_ДвижениеДенежныхСредств");
	ПарамРасшифровки.Вставить("ИмяРегистра", "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаНач", НачалоДня(ДатаКон));
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКон);
	ОбластьДДС.Параметры.ПоступленияИПлатежи_ДвижениеДенежныхСредствРасшифровкаДень = ПарамРасшифровки;
	
	ТабДок.Вывести(ОбластьДДС); 
	мСтруктТабДок.Вставить("ПоступленияИПлатежи_ДвижениеДенежныхСредств", ТабДок);
	
КонецПроцедуры // ПоступленияИПлатежи_ДвижениеДенежныхСредствФормирование()

// Процедура расшифровки показателя "Поступления и платежи - Движение денежных средств"
//
Процедура ПоступленияИПлатежи_ДвижениеДенежныхСредствРасшифровка(Параметры)
	
	Расшифровка_ОстаткиОбороты(Параметры.Расшифровка);
	
КонецПроцедуры // ПоступленияИПлатежи_ДвижениеДенежныхСредствРасшифровка()

// Процедура обработки показателя "Поступления и платежи - Движение денежных средств"
//
Процедура ПоступленияИПлатежи_ДвижениеДенежныхСредств(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ПоступленияИПлатежи_ДвижениеДенежныхСредствИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ПоступленияИПлатежи_ДвижениеДенежныхСредствФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ПоступленияИПлатежи_ДвижениеДенежныхСредствРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // ПоступленияИПлатежи_ДвижениеДенежныхСредств()

// Процедура инициализации показателя "Поступления и платежи - Планируемые платежи"
//
Процедура ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиИнициализация()
	
	ДобавитьВДеревоПоказателей("ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи", "Планируемые поступления и платежи", "", "ПоступленияИПлатежи");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = "Месяц";

	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи", ТабПарам);
	
КонецПроцедуры // ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиИнициализация()

// Процедура формирование показателя "Поступления и платежи - Планируемые платежи"
//
Процедура ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиФормирование()

	Макет = мМакет.ПолучитьОбласть("ПоступленияИПлатежи");
	ОбластьПланПлатежи = Макет.ПолучитьОбласть("ПланируемыеПоступленияПлатежи");
	ТабДок = Новый ТабличныйДокумент;

	Запрос = Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|СУММА(ПланПостДСНалНачП) КАК ПланПостДСНалНачП,
	|СУММА(ПланПостДСБННачП) КАК ПланПостДСБННачП,
	|СУММА(ПланПостДСНалПериод) КАК ПланПостДСНалПериод,
	|СУММА(ПланПостДСБНПериод) КАК ПланПостДСБНПериод,
	|СУММА(ИспПостДСНал) КАК ИспПостДСНал,
	|СУММА(ИспПостДСБН) КАК ИспПостДСБН,
	|СУММА(ПланРасхДСНалНачП) КАК ПланРасхДСНалНачП,
	|СУММА(ПланРасхДСБННачП) КАК ПланРасхДСБННачП,
	|СУММА(ПланРасхДСНалПериод) КАК ПланРасхДСНалПериод,
	|СУММА(ПланРасхДСБНПериод) КАК ПланРасхДСБНПериод,
	|СУММА(ИспРасхДСНал) КАК ИспРасхДСНал,
	|СУММА(ИспРасхДСБН) КАК ИспРасхДСБН
	|ИЗ 
	|(ВЫБРАТЬ
	|ВЫБОР 
	|	КОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.ДокументПланирования.ФормаОплаты = &Наличные 
	|	ТОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.СуммаУпрНачальныйОстаток 
	|	ИНАЧЕ 0 КОНЕЦ КАК ПланПостДСНалНачП,
	|ВЫБОР 
	|	КОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.ДокументПланирования.ФормаОплаты = &Безналичные 
	|	ТОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.СуммаУпрНачальныйОстаток 
	|	ИНАЧЕ 0 КОНЕЦ КАК ПланПостДСБННачП,
	|ВЫБОР 
	|	КОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.ДокументПланирования.ФормаОплаты = &Наличные 
	|	ТОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.СуммаУпрПриход 
	|	ИНАЧЕ 0 КОНЕЦ КАК ПланПостДСНалПериод,
	|ВЫБОР 
	|	КОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.ДокументПланирования.ФормаОплаты = &Безналичные 
	|	ТОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.СуммаУпрПриход 
	|	ИНАЧЕ 0 КОНЕЦ КАК ПланПостДСБНПериод,
	|ВЫБОР 
	|	КОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.ДокументПланирования.ФормаОплаты = &Наличные 
	|	ТОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.СуммаУпрРасход 
	|	ИНАЧЕ 0 КОНЕЦ КАК ИспПостДСНал,
	|ВЫБОР 
	|	КОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.ДокументПланирования.ФормаОплаты = &Безналичные 
	|	ТОГДА ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты.СуммаУпрРасход 
	|	ИНАЧЕ 0 КОНЕЦ КАК ИспПостДСБН,
	|0  КАК ПланРасхДСНалНачП,
	|0  КАК ПланРасхДСБННачП,
	|0  КАК ПланРасхДСНалПериод,
	|0  КАК ПланРасхДСБНПериод,
	|0  КАК ИспРасхДСНал,
	|0  КАК ИспРасхДСБН
	|ИЗ
    |	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ПланируемыеПоступленияДенежныхСредствОстаткиИОбороты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|0  ,
	|0  ,
	|0  ,
	|0  ,
	|0  ,
	|0  ,
	|ВЫБОР 
	|	КОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.ЗаявкаНаРасходование.ФормаОплаты = &Наличные 
	|	ТОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.СуммаУпрНачальныйОстаток 
	|	ИНАЧЕ 0 КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.ЗаявкаНаРасходование.ФормаОплаты = &Безналичные 
	|	ТОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.СуммаУпрНачальныйОстаток 
	|	ИНАЧЕ 0 КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.ЗаявкаНаРасходование.ФормаОплаты = &Наличные 
	|	ТОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.СуммаУпрПриход 
	|	ИНАЧЕ 0 КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.ЗаявкаНаРасходование.ФормаОплаты = &Безналичные 
	|	ТОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.СуммаУпрПриход 
	|	ИНАЧЕ 0 КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.ЗаявкаНаРасходование.ФормаОплаты = &Наличные 
	|	ТОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.СуммаУпрРасход 
	|	ИНАЧЕ 0 КОНЕЦ,
	|ВЫБОР 
	|	КОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.ЗаявкаНаРасходование.ФормаОплаты = &Безналичные 
	|	ТОГДА ЗаявкиНаРасходованиеСредствОстаткиИОбороты.СуммаУпрРасход 
	|	ИНАЧЕ 0 КОНЕЦ
	|ИЗ
    |	РегистрНакопления.ЗаявкиНаРасходованиеСредств.ОстаткиИОбороты(&ДатаНач, &ДатаКон) КАК ЗаявкиНаРасходованиеСредствОстаткиИОбороты) КАК ПланПоступленияПлатежи";
	
	Периодичность = ПолучитьПараметрПоказателя( "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи", "ПериодАнализа");	
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон, Периодичность);

    Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня (ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("Наличные",Перечисления.ВидыДенежныхСредств.Наличные);
	Запрос.УстановитьПараметр("Безналичные",Перечисления.ВидыДенежныхСредств.Безналичные);
	
	Результат=Запрос.Выполнить().Выгрузить();

	Если Результат.Количество()>0 Тогда
		
		СтрокаРезультат=Результат[0];
		
		Для Индекс=0 По Результат.Колонки.Количество()-1 Цикл
			Если НЕ ТипЗнч(СтрокаРезультат[Индекс])=Тип("Число") Тогда
				 СтрокаРезультат[Индекс]=0;
			 КонецЕсли;
		КонецЦикла;
		
		ОбластьПланПлатежи.Параметры.Заполнить(СтрокаРезультат);
					
		ОбластьПланПлатежи.Параметры.ПланПостДСИтогоНачП = ОбластьПланПлатежи.Параметры.ПланПостДСБННачП
														 + ОбластьПланПлатежи.Параметры.ПланПостДСНалНачП;
														 
		ОбластьПланПлатежи.Параметры.ПланПостДСИтогоПериод = ОбластьПланПлатежи.Параметры.ПланПостДСБНПериод
														 + ОбластьПланПлатежи.Параметры.ПланПостДСНалПериод;
														 
		ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоНачП = ОбластьПланПлатежи.Параметры.ПланРасхДСБННачП
														 + ОбластьПланПлатежи.Параметры.ПланРасхДСНалНачП;
														 
		ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоПериод = ОбластьПланПлатежи.Параметры.ПланРасхДСБНПериод
														 + ОбластьПланПлатежи.Параметры.ПланРасхДСНалПериод;
														 
		ОбластьПланПлатежи.Параметры.ПланПостДСБН=ОбластьПланПлатежи.Параметры.ПланПостДСБННачП
												+ ОбластьПланПлатежи.Параметры.ПланПостДСБНПериод;
												
		ОбластьПланПлатежи.Параметры.ПланПостДСНал=ОбластьПланПлатежи.Параметры.ПланПостДСНалНачП
												+ ОбластьПланПлатежи.Параметры.ПланПостДСНалПериод;
												
		ОбластьПланПлатежи.Параметры.ПланРасхДСБН=ОбластьПланПлатежи.Параметры.ПланРасхДСБННачП
												+ ОбластьПланПлатежи.Параметры.ПланРасхДСБНПериод;
												
		ОбластьПланПлатежи.Параметры.ПланРасхДСНал=ОбластьПланПлатежи.Параметры.ПланРасхДСНалНачП
												+ ОбластьПланПлатежи.Параметры.ПланРасхДСНалПериод;
														 												 													 
		ОбластьПланПлатежи.Параметры.ПланПостДСИтого = ОбластьПланПлатежи.Параметры.ПланПостДСБН
														 + ОбластьПланПлатежи.Параметры.ПланПостДСНал;
														 
		ОбластьПланПлатежи.Параметры.ПланРасхДСИтого = ОбластьПланПлатежи.Параметры.ПланРасхДСБН
														 + ОбластьПланПлатежи.Параметры.ПланРасхДСНал;
														 
		ОбластьПланПлатежи.Параметры.ИспПостДСИтого = ОбластьПланПлатежи.Параметры.ИспПостДСБН
														 + ОбластьПланПлатежи.Параметры.ИспПостДСНал;
														 
		ОбластьПланПлатежи.Параметры.ИспРасхДСИтого = ОбластьПланПлатежи.Параметры.ИспРасхДСБН
														 + ОбластьПланПлатежи.Параметры.ИспРасхДСНал;

		ОбластьПланПлатежи.Параметры.ПланДПНачП = ОбластьПланПлатежи.Параметры.ПланПостДСИтогоНачП
														 - ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоНачП;
														 
		ОбластьПланПлатежи.Параметры.ПланДППериод = ОбластьПланПлатежи.Параметры.ПланПостДСИтогоПериод
														 - ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоПериод;
														 
		ОбластьПланПлатежи.Параметры.ПланДП = ОбластьПланПлатежи.Параметры.ПланПостДСИтого
														 - ОбластьПланПлатежи.Параметры.ПланРасхДСИтого;
														 
		ОбластьПланПлатежи.Параметры.ИспДП = ОбластьПланПлатежи.Параметры.ИспПостДСИтого
														 - ОбластьПланПлатежи.Параметры.ИспРасхДСИтого;
														 
		ОбластьПланПлатежи.Параметры.ПроцИспПостДСИтого=?(ОбластьПланПлатежи.Параметры.ПланПостДСИтого=0,0,ОбластьПланПлатежи.Параметры.ИспПостДСИтого
												/ОбластьПланПлатежи.Параметры.ПланПостДСИтого)*100;
												
		ОбластьПланПлатежи.Параметры.ПроцИспПостДСНал=?(ОбластьПланПлатежи.Параметры.ПланПостДСНал=0,0,ОбластьПланПлатежи.Параметры.ИспПостДСНал
												/ОбластьПланПлатежи.Параметры.ПланПостДСНал)*100;
												
		ОбластьПланПлатежи.Параметры.ПроцИспПостДСБН=?(ОбластьПланПлатежи.Параметры.ПланПостДСБН=0,0,ОбластьПланПлатежи.Параметры.ИспПостДСБН
												/ОбластьПланПлатежи.Параметры.ПланПостДСБН)*100;
												
		ОбластьПланПлатежи.Параметры.ПроцИспРасхДСИтого=?(ОбластьПланПлатежи.Параметры.ПланРасхДСИтого=0,0,ОбластьПланПлатежи.Параметры.ИспРасхДСИтого
												/ОбластьПланПлатежи.Параметры.ПланРасхДСИтого)*100;
												
		ОбластьПланПлатежи.Параметры.ПроцИспРасхДСНал=?(ОбластьПланПлатежи.Параметры.ПланРасхДСНал=0,0,ОбластьПланПлатежи.Параметры.ИспРасхДСНал
												/ОбластьПланПлатежи.Параметры.ПланРасхДСНал)*100;
												
		ОбластьПланПлатежи.Параметры.ПроцИспРасхДСБН=?(ОбластьПланПлатежи.Параметры.ПланРасхДСБН=0,0,ОбластьПланПлатежи.Параметры.ИспРасхДСБН
												/ОбластьПланПлатежи.Параметры.ПланРасхДСБН)*100;
												
		ОбластьПланПлатежи.Параметры.ПроцИспДП	=?(ОбластьПланПлатежи.Параметры.ПланДП=0,0,ОбластьПланПлатежи.Параметры.ИспДП
												/ОбластьПланПлатежи.Параметры.ПланДП)*100;
												
		ОбластьПланПлатежи.Параметры.ПланПостДСИтогоКонП = ОбластьПланПлатежи.Параметры.ПланПостДСИтого
														- ОбластьПланПлатежи.Параметры.ИспПостДСИтого;
														
		ОбластьПланПлатежи.Параметры.ПланПостДСНалКонП = ОбластьПланПлатежи.Параметры.ПланПостДСНал
														- ОбластьПланПлатежи.Параметры.ИспПостДСНал;
														
		ОбластьПланПлатежи.Параметры.ПланПостДСБНКонП = ОбластьПланПлатежи.Параметры.ПланПостДСБН
														- ОбластьПланПлатежи.Параметры.ИспПостДСБН;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоКонП = ОбластьПланПлатежи.Параметры.ПланРасхДСИтого
														- ОбластьПланПлатежи.Параметры.ИспРасхДСИтого;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСНалКонП = ОбластьПланПлатежи.Параметры.ПланРасхДСНал
														- ОбластьПланПлатежи.Параметры.ИспРасхДСНал;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСБНКонП = ОбластьПланПлатежи.Параметры.ПланРасхДСБН
														- ОбластьПланПлатежи.Параметры.ИспРасхДСБН;
														
		ОбластьПланПлатежи.Параметры.ПланДПКонП = ОбластьПланПлатежи.Параметры.ПланПостДСИтогоКонП
														 - ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоКонП;
														 
		ОбластьПланПлатежи.Параметры.ПланПостДСИтогоИзм = ОбластьПланПлатежи.Параметры.ПланПостДСИтогоКонП
														- ОбластьПланПлатежи.Параметры.ПланПостДСИтогоНачП;
														
		ОбластьПланПлатежи.Параметры.ПланПостДСНалИзм = ОбластьПланПлатежи.Параметры.ПланПостДСНалКонП
														- ОбластьПланПлатежи.Параметры.ПланПостДСНалНачП;
														
		ОбластьПланПлатежи.Параметры.ПланПостДСБНИзм = ОбластьПланПлатежи.Параметры.ПланПостДСБНКонП
														- ОбластьПланПлатежи.Параметры.ПланПостДСБННачП;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоИзм = ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоКонП
														- ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоНачП;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСНалИзм = ОбластьПланПлатежи.Параметры.ПланРасхДСНалКонП
														- ОбластьПланПлатежи.Параметры.ПланРасхДСНалНачП;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСБНИзм = ОбластьПланПлатежи.Параметры.ПланРасхДСБНКонП
														- ОбластьПланПлатежи.Параметры.ПланРасхДСБННачП;
														
		ОбластьПланПлатежи.Параметры.ПланДПИзм = ОбластьПланПлатежи.Параметры.ПланДПКонП
														 - ОбластьПланПлатежи.Параметры.ПланДПНачП;
														 
		ОбластьПланПлатежи.Параметры.ПланПостДСИтогоИзмП=?(ОбластьПланПлатежи.Параметры.ПланПостДСИтогоНачП=0,0,ОбластьПланПлатежи.Параметры.ПланПостДСИтогоИзм
														/ ОбластьПланПлатежи.Параметры.ПланПостДСИтогоНачП)*100;
														
		ОбластьПланПлатежи.Параметры.ПланПостДСНалИзмП=?(ОбластьПланПлатежи.Параметры.ПланПостДСНалНачП=0,0,ОбластьПланПлатежи.Параметры.ПланПостДСНалИзм
														/ ОбластьПланПлатежи.Параметры.ПланПостДСНалНачП)*100;
														
		ОбластьПланПлатежи.Параметры.ПланПостДСБНИзмП=?(ОбластьПланПлатежи.Параметры.ПланПостДСБННачП=0,0,ОбластьПланПлатежи.Параметры.ПланПостДСБНИзм
														/ ОбластьПланПлатежи.Параметры.ПланПостДСБННачП)*100;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоИзмП=?(ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоНачП=0,0,ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоИзм
														/ ОбластьПланПлатежи.Параметры.ПланРасхДСИтогоНачП)*100;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСНалИзмП=?(ОбластьПланПлатежи.Параметры.ПланРасхДСНалНачП=0,0,ОбластьПланПлатежи.Параметры.ПланРасхДСНалИзм
														/ ОбластьПланПлатежи.Параметры.ПланРасхДСНалНачП)*100;
														
		ОбластьПланПлатежи.Параметры.ПланРасхДСБНИзмП=?(ОбластьПланПлатежи.Параметры.ПланРасхДСБННачП=0,0,ОбластьПланПлатежи.Параметры.ПланРасхДСБНИзм
														/ ОбластьПланПлатежи.Параметры.ПланРасхДСБННачП)*100;
														
		ОбластьПланПлатежи.Параметры.ПланДПИзмП = ?(ОбластьПланПлатежи.Параметры.ПланДПНачП=0,0,ОбластьПланПлатежи.Параметры.ПланДПИзм
														/ ОбластьПланПлатежи.Параметры.ПланДПНачП)*100;
		
	КонецЕсли;
			
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",         "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи");
	ПарамРасшифровки.Вставить("ДатаНач",     НачалоДня(ДатаНач));
	ПарамРасшифровки.Вставить("ДатаКон",     КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ВидДвижения", "Поступления");
	ПарамРасшифровки.Вставить("ФормаОплаты", Перечисления.ВидыДенежныхСредств.Наличные);
	
	ОбластьПланПлатежи.Параметры.ПланируемыеДвиженияДС_ПоступленияНал_Расшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",         "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи");
	ПарамРасшифровки.Вставить("ДатаНач",     НачалоДня(ДатаНач));
	ПарамРасшифровки.Вставить("ДатаКон",     КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ВидДвижения", "Поступления");
	ПарамРасшифровки.Вставить("ФормаОплаты", Перечисления.ВидыДенежныхСредств.Безналичные);
	
	ОбластьПланПлатежи.Параметры.ПланируемыеДвиженияДС_ПоступленияБН_Расшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",         "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи");
	ПарамРасшифровки.Вставить("ДатаНач",     НачалоДня(ДатаНач));
	ПарамРасшифровки.Вставить("ДатаКон",     КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ВидДвижения", "Поступления");
	
	ОбластьПланПлатежи.Параметры.ПланируемыеДвиженияДС_ПоступленияИтого_Расшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",         "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи");
	ПарамРасшифровки.Вставить("ДатаНач",     НачалоДня(ДатаНач));
	ПарамРасшифровки.Вставить("ДатаКон",     КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ВидДвижения", "Платежи");
	ПарамРасшифровки.Вставить("ФормаОплаты", Перечисления.ВидыДенежныхСредств.Наличные);
	
	ОбластьПланПлатежи.Параметры.ПланируемыеДвиженияДС_ПлатежиНал_Расшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",         "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи");
	ПарамРасшифровки.Вставить("ДатаНач",     НачалоДня(ДатаНач));
	ПарамРасшифровки.Вставить("ДатаКон",     КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ВидДвижения", "Платежи");
	ПарамРасшифровки.Вставить("ФормаОплаты", Перечисления.ВидыДенежныхСредств.Безналичные);
	
	ОбластьПланПлатежи.Параметры.ПланируемыеДвиженияДС_ПлатежиБН_Расшифровка = ПарамРасшифровки;
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",         "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи");
	ПарамРасшифровки.Вставить("ДатаНач",     НачалоДня(ДатаНач));
	ПарамРасшифровки.Вставить("ДатаКон",     КонецДня(ДатаКон));
	ПарамРасшифровки.Вставить("ВидДвижения", "Платежи");
	
	ОбластьПланПлатежи.Параметры.ПланируемыеДвиженияДС_ПлатежиИтого_Расшифровка = ПарамРасшифровки;
		
	ТабДок.Вывести(ОбластьПланПлатежи);
	мСтруктТабДок.Вставить("ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи", ТабДок);

КонецПроцедуры // ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиФормирование()

// Процедура расшифровки показателя "Поступления и платежи - Планируемые платежи"
//
Процедура ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];

	Если Расшифровка["ВидДвижения"] = "Поступления" Тогда
		ИмяРегистра = "ПланируемыеПоступленияДенежныхСредств";
		ИмяОтчета   = "Планируемые поступления денежных средств";
		ДокументПланирования="ДокументПланирования";
	Иначе
		ИмяРегистра = "ЗаявкиНаРасходованиеСредств";
		ИмяОтчета   = "Заявки на расходование средств";
		ДокументПланирования="ЗаявкаНаРасходование";
	КонецЕсли;

	Отчет = Отчеты.ОтчетОстаткиИОбороты.Создать();
	Форма = Отчет.ПолучитьФорму(, Параметры["ЭтаФорма"], "ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиРасшифровка");
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Отчет.ИмяРегистра = ИмяРегистра;
	Отчет.ЗаполнитьНачальныеНастройки();

	Отчет.мВыбиратьИмяРегистра = Ложь;
	Отчет.мНазваниеОтчета = ИмяОтчета;
	Отчет.ДатаНач = Расшифровка["ДатаНач"];
	Отчет.ДатаКон = Расшифровка["ДатаКон"];
	
	Отчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();	
	Отчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	Отчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("ДоговорКонтрагента.Владелец","Контрагент");
	Отчет.ПостроительОтчета.ИзмеренияСтроки.Добавить(ДокументПланирования,"ДокументПланирования");
	
	Если Расшифровка.Свойство("ФормаОплаты") Тогда
		
		Отбор=Отчет.ПостроительОтчета.Отбор.Добавить(ДокументПланирования+".ФормаОплаты","ФормаОплаты","Форма оплаты");
		Отбор.Значение=Расшифровка["ФормаОплаты"];
		Отбор.ВидСравнения=ВидСравнения.Равно;
		Отбор.Использование=Истина;
		
	КонецЕсли;
			
	Отчет.РаскрашиватьИзмерения      = Истина;
	Отчет.ВыводитьИтогиПоВсемУровням = Истина;
	Отчет.ВыводитьПоказателиВСтроку  = Истина;
	Отчет.ПоказыватьЗаголовок = Истина;

	Форма.ОбновитьОтчет();

	Форма.Открыть();

КонецПроцедуры // ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиРасшифровка()

// Процедура обработки показателя "Поступления и платежи - Планируемые платежи"
//
Процедура ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ПоступленияИПлатежи_ПланируемыеПоступленияПлатежиРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // ПоступленияИПлатежи_ПланируемыеПоступленияПлатежи()

// Процедура инициализации показателя "Поступления и платежи - Платежные поручения"
//
Процедура ПоступленияИПлатежи_ПлатежныйКалендарьИнициализация()
	
	ДобавитьВДеревоПоказателей("ПоступленияИПлатежи_ПлатежныйКалендарь", "Платежный календарь", "", "ПоступленияИПлатежи");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "Горизонт отчета"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Горизонт";
	НоваяСтрока.ПредставлениеПараметра = "Количество дней для вывода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 2, 0);
	НоваяСтрока.Значение=3;

	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ПоступленияИПлатежи_ПлатежныйКалендарь", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ПоступленияИПлатежи_ПлатежныйКалендарь", ТабПарам);
	
КонецПроцедуры // ПоступленияИПлатежи_ПлатежныйКалендарьИнициализация()

// Процедура формирование показателя "Поступления и платежи - Платежные поручения"
//
Процедура ПоступленияИПлатежи_ПлатежныйКалендарьФормирование()
	
	Макет = мМакет.ПолучитьОбласть("ПоступленияИПлатежи");
	ОбластьПлатежныйКалендарь = Макет.ПолучитьОбласть("ПлатежныйКалендарь");
	ОбластьПлатежныйКалендарьЗаголовок = Макет.ПолучитьОбласть("ПлатежныйКалендарьЗаголовок");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабОтчет=Новый ТабличныйДокумент;

	Отчет=Отчеты.ПлатежныйКалендарь.Создать();
	Отчет.ДетализацияПоПериодам=Перечисления.Периодичность.День;
	Отчет.ЗаполнитьНачальныеНастройки();
	
	Для Каждого Строка ИЗ Отчет.ОсновныеГруппировки Цикл
		
		Если Строка.Имя="ВидДенежныхСредств" или Строка.Имя="ВалютаДенежныхСредств" Тогда
			
			Строка.Использование=Истина;
			
		Иначе
			
			Строка.Использование=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ Отчет.ДополнительныеГруппировки Цикл	
	
	     Строка.Использование=Ложь;
		 
	КонецЦикла;
	
	Горизонт= ПолучитьПараметрПоказателя( "ПоступленияИПлатежи_ПлатежныйКалендарь", "Горизонт");
	
	НачКалендаря=НачалоДня(ДатаКон);
	КонКалендаря=КонецДня(НачКалендаря+Горизонт*24*3600);
	
	Отчет.ДатаНач=НачКалендаря;
	Отчет.ДатаКон=КонКалендаря;
		
	Отчет.СформироватьОтчет(ТабОтчет, Ложь, 0, Ложь, Истина);
	
	ОбластьОтчет=ТабОтчет.Область(1,1,ТабОтчет.ВысотаТаблицы,ТабОтчет.ШиринаТаблицы);
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",         "ПоступленияИПлатежи_ПлатежныйКалендарь");
	ПарамРасшифровки.Вставить("ДатаНач",     НачКалендаря);
	ПарамРасшифровки.Вставить("ДатаКон",     КонКалендаря);
	ПарамРасшифровки.Вставить("Отчет",     	Отчет);
	
	ТабДок.Вывести(ОбластьПлатежныйКалендарьЗаголовок);
	
	Для Индекс=1 По ТабОтчет.ВысотаТаблицы Цикл
		ТабДок.Вывести(ОбластьПлатежныйКалендарь);
	КонецЦикла;
	
	ОбластьПриемник=ТабДок.Область(2,1,ТабОтчет.ВысотаТаблицы+1,ТабОтчет.ШиринаТаблицы);
	
	ТабДок.ВставитьОбласть(ОбластьОтчет,ОбластьПриемник,,Истина);
	
	Для Индекс=1 По ТабДок.ВысотаТаблицы-1 Цикл
		
		ТекРасшифровка=ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ПарамРасшифровки);
		ТекРасшифровка.Вставить("НомерСтроки",Индекс);
		ТабДок.Область(Индекс+1,1).Расшифровка=ТекРасшифровка;
		
	КонецЦикла;
			
	мСтруктТабДок.Вставить("ПоступленияИПлатежи_ПлатежныйКалендарь", ТабДок);	
		
КонецПроцедуры // ПоступленияИПлатежи_ПлатежныйКалендарьФормирование()

// Процедура расшифровки показателя "Поступления и платежи - Платежные поручения"
//
Процедура ПоступленияИПлатежи_ПлатежныйКалендарьРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];
	
	Отчет = Расшифровка.Отчет;
	Отчет.ОбработкаРасшифровкиСводныхЗначений(Расшифровка);
	
КонецПроцедуры // ПоступленияИПлатежи_ПлатежныйКалендарьРасшифровка()

// Процедура обработки показателя "Поступления и платежи - ПлатежныйКалендарь"
//
Процедура ПоступленияИПлатежи_ПлатежныйКалендарь(СтрДействие, Параметры = 0)

	Если СтрДействие = "Инициализация" Тогда
		
		ПоступленияИПлатежи_ПлатежныйКалендарьИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		ПоступленияИПлатежи_ПлатежныйКалендарьФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		ПоступленияИПлатежи_ПлатежныйКалендарьРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // ПоступленияИПлатежи_ПлатежныйКалендарь()

// Процедура инициализации показателя "Закрытые заказы"
//
Процедура Заказы_ЗакрытыеЗаказыИнициализация()
	
	ДобавитьВДеревоПоказателей("Заказы_ЗакрытыеЗаказы", "Закрытые заказы", "", "Заказы");
		
	ТабПарам = СоздатьТабПарам();

	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;

	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Заказы_ЗакрытыеЗаказы", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Заказы_ЗакрытыеЗаказы", ТабПарам);
	
КонецПроцедуры // Заказы_ЗакрытыеЗаказыИнициализация()

// Процедура расшифровки показателя "Закрытые заказы"
//
Процедура Заказы_ЗакрытыеЗаказыРасшифровка(Параметры)
	Расшифровка = Параметры["Расшифровка"];
	ОтчетЗакрытыеЗаказы = Отчеты.АнализПричинЗакрытияЗаказов.Создать();
	
	ОтчетЗакрытыеЗаказы.УстановитьНачальныеНастройки();
		
	Пока ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
			
		ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
			
	КонецЦикла;
		
	Пока ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
			
		ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
			
	КонецЦикла;
		
	Пока ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
			
		ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
			
	КонецЦикла;
		
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПричинаЗакрытияЗаказа");
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Заказ");
	
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДобавитьИзмерениеКолонки("ВидЗаказа");
	
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпрУчета",        "Сумма упр. учета",     Истина, "ЧЦ=15; ЧДЦ=2", "СуммаЗакрытияЗаказа", "Сумма закрытия заказа");
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетов",  "Сумма взаиморасчетов", Истина, "ЧЦ=15; ЧДЦ=2", "СуммаЗакрытияЗаказа", "Сумма закрытия заказа");
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",          "Сумма заказа",         Истина, "ЧЦ=15; ЧДЦ=2");

	Если Расшифровка["Тип"] = "Покупатели" Тогда
		ОтчетЗакрытыеЗаказы.ЗаказыПокупателей = истина;
		ОтчетЗакрытыеЗаказы.ЗаказыПоставщикам = ложь;
	ИначеЕсли Расшифровка["Тип"] = "Поставщики" Тогда
		ОтчетЗакрытыеЗаказы.ЗаказыПоставщикам = истина;
		ОтчетЗакрытыеЗаказы.ЗаказыПокупателей = ложь;
	КонецЕсли;

	Если ТипЗнч(Расшифровка["Отбор"]) = Тип("Структура") Тогда
		ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДобавитьОтбор("ПричинаЗакрытияЗаказа");
		ЭлементОтбора = ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ПостроительОтчета.Отбор["ПричинаЗакрытияЗаказа"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ЭлементОтбора.Значение = Расшифровка["Отбор"]["ПричинаЗакрытияЗаказа"];

	КонецЕсли;
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДатаНач = Расшифровка["ДатаНач"];
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.ДатаКон = Расшифровка["ДатаКон"];
	ОтчетЗакрытыеЗаказы.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		
	ФормаОтчета = ОтчетЗакрытыеЗаказы.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();


КонецПроцедуры // Заказы_ЗакрытыеЗаказыРасшифровка()

// Процедура формирование показателя "Закрытые заказы"
//
Процедура Заказы_ЗакрытыеЗаказыФормирование()

	Макет  = мМакет.ПолучитьОбласть("Заказы_ЗакрытыеЗаказы");

	ТабДок = Новый ТабличныйДокумент;

	Запрос = Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР КОГДА ПричиныЗакрытияЗаказов.Заказ ССЫЛКА Документ.ЗаказПокупателя ТОГДА
	|			ПричиныЗакрытияЗаказов.СуммаУпрУчета
	|		  ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаУпрУчетаЗаказПокупателя,
	|
	|	СУММА(ВЫБОР КОГДА ПричиныЗакрытияЗаказов.Заказ ССЫЛКА Документ.ЗаказПоставщику ТОГДА
	|			-1*ПричиныЗакрытияЗаказов.СуммаУпрУчета
	|		  ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаУпрУчетаЗаказПоставщику,
	|
	|	ПричиныЗакрытияЗаказов.ПричинаЗакрытияЗаказа КАК ПричинаЗакрытияЗаказа
	|
	|ИЗ
	|	РегистрСведений.ПричиныЗакрытияЗаказов КАК ПричиныЗакрытияЗаказов
	|
	|ГДЕ
	|	((&КонДата = &ПустаяДата И &ДатаНач = &ПустаяДата)
	|	ИЛИ
	|	((&КонДата = &ПустаяДата И &ДатаНач <> &ПустаяДата) И ПричиныЗакрытияЗаказов.Регистратор.Дата >= &ДатаНач)
	|	ИЛИ
	|	((&КонДата <> &ПустаяДата И &ДатаНач = &ПустаяДата) И ПричиныЗакрытияЗаказов.Регистратор.Дата <= &КонДата)
	|	ИЛИ
	|	((&КонДата <> &ПустаяДата И &ДатаНач <> &ПустаяДата) И (ПричиныЗакрытияЗаказов.Регистратор.Дата <= &КонДата И ПричиныЗакрытияЗаказов.Регистратор.Дата >= &ДатаНач)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПричиныЗакрытияЗаказов.ПричинаЗакрытияЗаказа
	|
	|ИТОГИ 
	|	СУММА(СуммаУпрУчетаЗаказПокупателя),
	|	СУММА(СуммаУпрУчетаЗаказПоставщику)
	|ПО
	|	ОБЩИЕ
	|
	|";

	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон,
		ПолучитьПараметрПоказателя("Заказы_ЗакрытыеЗаказы", "ПериодАнализа"));

    Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');

	Заголовок = "Закрытые заказы за период: " + Формат(ДатаНач, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаКон,  "ДФ=dd.MM.yyyy");
	ОбластьЗакрытые = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗакрытые.Параметры.Заголовок = Заголовок;
	ТабДок.Вывести(ОбластьЗакрытые);

	Выборка = Запрос.Выполнить().Выбрать();

	ФорматПоказателя = "ЧЦ = 12 ; ЧДЦ = 0 ; ЧН = ""0""";
	ФорматПроцентов = "ЧЦ = 3 ; ЧДЦ = 0 ; ЧН = ""0""";
	
	СтоПроцентов = 1;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда	
			Если НЕ Выборка.СуммаУпрУчетаЗаказПокупателя = 0 Тогда
				ОбластьЗакрытые = Макет.ПолучитьОбласть("Группа");
				ОбластьЗакрытые.Параметры.ГруппаЗаказов = "Заказы покупателей";
				ОбластьЗакрытые.Параметры.ЗакрЗакГр = Формат(Выборка.СуммаУпрУчетаЗаказПокупателя, ФорматПоказателя);
				ОбластьЗакрытые.Параметры.ПроцЗакрЗакГр = Формат(100, ФорматПроцентов);
				
				ПарамРасшифровки = Новый Структура;
				ПарамРасшифровки.Вставить("Имя"        , "Заказы_ЗакрытыеЗаказы");
				ПарамРасшифровки.Вставить("Тип"        , "Покупатели");
				ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
				ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
				ПарамРасшифровки.Вставить("Отбор"      , "");
				ОбластьЗакрытые.Параметры.ЗакрытыеЗаказы_Расшифровка = ПарамРасшифровки;
				
				ТабДок.Вывести(ОбластьЗакрытые);
			
				СтоПроцентов = Выборка.СуммаУпрУчетаЗаказПокупателя;
			КонецЕсли;	
		Иначе
			Если НЕ Выборка.СуммаУпрУчетаЗаказПокупателя = 0 Тогда
				ОбластьЗакрытые = Макет.ПолучитьОбласть("Строка");
				ОбластьЗакрытые.Параметры.ПричинаЗакрытия = Выборка.ПричинаЗакрытияЗаказа;
				ОбластьЗакрытые.Параметры.ЗакрЗак = Формат(Выборка.СуммаУпрУчетаЗаказПокупателя, ФорматПоказателя);
				ОбластьЗакрытые.Параметры.ПроцЗакрЗак = Формат(?(СтоПроцентов=0,0,Выборка.СуммаУпрУчетаЗаказПокупателя/СтоПроцентов*100), ФорматПроцентов);
				
				ПарамРасшифровки = Новый Структура;
				ПарамРасшифровки.Вставить("Имя"        , "Заказы_ЗакрытыеЗаказы");
				ПарамРасшифровки.Вставить("Тип"        , "Покупатели");
				ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
				ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
				ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ПричинаЗакрытияЗаказа", Выборка.ПричинаЗакрытияЗаказа));
				ОбластьЗакрытые.Параметры.ПричиныЗакрытияЗаказов_Расшифровка = ПарамРасшифровки;
				
				ТабДок.Вывести(ОбластьЗакрытые);				
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Выборка.Сбросить();
	
	СтоПроцентов = 1;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда	
			Если НЕ Выборка.СуммаУпрУчетаЗаказПоставщику = 0 Тогда
				ОбластьЗакрытые = Макет.ПолучитьОбласть("Группа");
				ОбластьЗакрытые.Параметры.ГруппаЗаказов = "Заказы поставщикам";
				ОбластьЗакрытые.Параметры.ЗакрЗакГр = Формат(Выборка.СуммаУпрУчетаЗаказПоставщику, ФорматПоказателя);
				ОбластьЗакрытые.Параметры.ПроцЗакрЗакГр = Формат(100, ФорматПроцентов);
				
				ПарамРасшифровки = Новый Структура;
				ПарамРасшифровки.Вставить("Имя"        , "Заказы_ЗакрытыеЗаказы");
				ПарамРасшифровки.Вставить("Тип"        , "Поставщики");
				ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
				ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
				ПарамРасшифровки.Вставить("Отбор"      , "");
				ОбластьЗакрытые.Параметры.ЗакрытыеЗаказы_Расшифровка = ПарамРасшифровки;
				
				ТабДок.Вывести(ОбластьЗакрытые);
			
				СтоПроцентов = Выборка.СуммаУпрУчетаЗаказПоставщику;
			КонецЕсли;
		Иначе
			Если НЕ Выборка.СуммаУпрУчетаЗаказПоставщику = 0 Тогда
				ОбластьЗакрытые = Макет.ПолучитьОбласть("Строка");
				ОбластьЗакрытые.Параметры.ПричинаЗакрытия = Выборка.ПричинаЗакрытияЗаказа;
				ОбластьЗакрытые.Параметры.ЗакрЗак = Формат(Выборка.СуммаУпрУчетаЗаказПоставщику, ФорматПоказателя);
				ОбластьЗакрытые.Параметры.ПроцЗакрЗак = Формат(?(СтоПроцентов=0,0,Выборка.СуммаУпрУчетаЗаказПоставщику/СтоПроцентов*100), ФорматПроцентов);
				
				ПарамРасшифровки = Новый Структура;
				ПарамРасшифровки.Вставить("Имя"        , "Заказы_ЗакрытыеЗаказы");
				ПарамРасшифровки.Вставить("Тип"        , "Поставщики");
				ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНач);
				ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКон);
				ПарамРасшифровки.Вставить("Отбор"      , Новый Структура("ПричинаЗакрытияЗаказа", Выборка.ПричинаЗакрытияЗаказа));
				ОбластьЗакрытые.Параметры.ПричиныЗакрытияЗаказов_Расшифровка = ПарамРасшифровки;
				
				ТабДок.Вывести(ОбластьЗакрытые);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
		
	ОбластьЗакрытые = Макет.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(ОбластьЗакрытые);
	мСтруктТабДок.Вставить("Заказы_ЗакрытыеЗаказы", ТабДок);

	
КонецПроцедуры // Заказы_ЗакрытыеЗаказыФормирование()

// Процедура обработки показателя "Закрытые заказы"
//
Процедура Заказы_ЗакрытыеЗаказы(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Заказы_ЗакрытыеЗаказыИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Заказы_ЗакрытыеЗаказыФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Заказы_ЗакрытыеЗаказыРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Заказы_ЗакрытыеЗаказы()

// Процедура инициализации показателя "Просроченные заказы"
//
Процедура Заказы_ПросроченныеЗаказыИнициализация()
	
	ДобавитьВДеревоПоказателей("Заказы_ПросроченныеЗаказы", "Просроченные заказы", "", "Заказы");
		
	ТабПарам = СоздатьТабПарам();

	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Заказы_ПросроченныеЗаказы", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Заказы_ПросроченныеЗаказы", ТабПарам);
	
КонецПроцедуры // Заказы_ПросроченныеЗаказыИнициализация()

// Процедура формирование показателя "Просроченные заказы"
//
Процедура Заказы_ПросроченныеЗаказыФормирование()

	Макет = мМакет.ПолучитьОбласть("Заказы_ПросроченныеЗаказы");
	ОбластьПросроченные = Макет.ПолучитьОбласть("Заказы_ПросроченныеЗаказы");

	ТабДок = Новый ТабличныйДокумент;

	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПокупателейОстатки.ЗаказПокупателя) КАК КоличествоОтгрузок,
	             |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток)
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаНач, 
				 |					ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя 
				 |					И ЗаказПокупателя.Ссылка.ДатаОтгрузки < &КонтрольнаяДата) 
				 |					КАК ЗаказыПокупателейОстатки";
	
    Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонтрольнаяДата", ДатаКон);

	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();
	Если (Выборка.Следующий()) И (Выборка["КоличествоОтгрузок"]>0) Тогда
		ОбластьПросроченные.Параметры.ПросроченныеОтгрузки=Выборка["КоличествоОтгрузок"];
	Иначе
		ОбластьПросроченные.Параметры.ПросроченныеОтгрузки="Нет";
	КонецЕсли;

	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказыПоставщикамОстатки.ЗаказПоставщику) КАК КоличествоПоставок,
	             |	СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток)
	             |ИЗ
	             |	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаНач, 
				 |					ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику 
				 |					И ЗаказПоставщику.Ссылка.ДатаПоступления < &КонтрольнаяДата)
				 |					КАК ЗаказыПоставщикамОстатки";

    Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонтрольнаяДата",ДатаКон);

	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();
	Если (Выборка.Следующий()) И (Выборка["КоличествоПоставок"]>0) Тогда
		ОбластьПросроченные.Параметры.ПросроченныеПоставки=Выборка["КоличествоПоставок"];
	Иначе
		ОбластьПросроченные.Параметры.ПросроченныеПоставки="Нет";
	КонецЕсли;

	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(- ОжидаемыеИсходящиеПлатежиКомпанииОстатки.СуммаВзаиморасчетовОстаток),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОжидаемыеИсходящиеПлатежиКомпанииОстатки.Сделка) КАК КоличествоПлатежей
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ДатаНач, 
	|								Сделка ССЫЛКА Документ.ЗаказПоставщику 
	|								И Сделка.ДатаОплаты < &ТекущаяДата) 
	|								КАК ОжидаемыеИсходящиеПлатежиКомпанииОстатки";

	Запрос.УстановитьПараметр("ТекущаяДата", ДатаКон);
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));

	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();
	Если (Выборка.Следующий()) И (Выборка["КоличествоПлатежей"]>0) Тогда
		ОбластьПросроченные.Параметры.ПросроченныеПлатежиОтНас=Выборка["КоличествоПлатежей"];
	Иначе
		ОбластьПросроченные.Параметры.ПросроченныеПлатежиОтНас="Нет";
	КонецЕсли;

    Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОжидаемыеВходящиеПлатежиКомпанииОстатки.Сделка) КАК КоличествоПлатежей,
	|	СУММА(ОжидаемыеВходящиеПлатежиКомпанииОстатки.СуммаВзаиморасчетовОстаток)
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ДатаНач, 
	|								Сделка ССЫЛКА Документ.ЗаказПокупателя 
	|								И Сделка.ДатаОплаты < &ТекущаяДата) 
	|								КАК ОжидаемыеВходящиеПлатежиКомпанииОстатки";

	Запрос.УстановитьПараметр("ТекущаяДата", ДатаКон);
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));

	Результат=Запрос.Выполнить();

	Выборка=Результат.Выбрать();
	Если (Выборка.Следующий()) И (Выборка["КоличествоПлатежей"]>0) Тогда
		ОбластьПросроченные.Параметры.ПросроченныеПлатежиНам=Выборка["КоличествоПлатежей"];
	Иначе
		ОбластьПросроченные.Параметры.ПросроченныеПлатежиНам="Нет";
	КонецЕсли;
	ТабДок.Вывести(ОбластьПросроченные);
	мСтруктТабДок.Вставить("Заказы_ПросроченныеЗаказы", ТабДок);
	
КонецПроцедуры // Заказы_ПросроченныеЗаказыФормирование()

// Процедура расшифровки показателя "Просроченные заказы"
//
Процедура Заказы_ПросроченныеЗаказыРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];

	Если Расшифровка["Тип"] = "Оплата" Тогда
		ИмяОтчета   = "ОтчетСписокКроссТаблица";
		ИмяФормы    = "ФормаСуммыЗаказов";
		ИмяРегистра = "СуммыЗаказов";
		Заголовок   = "Оплата заказов";
	ИначеЕсли Расшифровка["Тип"] = "ОтгрузкаПокупателям" Тогда
		ИмяОтчета   = "ОтчетОстаткиИОбороты";
		ИмяФормы    = "ФормаЗаказыПокупателей";
		ИмяРегистра = "ЗаказыПокупателей";
		Заголовок   = "Ведомость по заказам покупателей";
	ИначеЕсли Расшифровка["Тип"] = "ОтгрузкаПоставщикам" Тогда
		ИмяОтчета   = "ОтчетОстаткиИОбороты";
		ИмяФормы    = "ФормаЗаказыПоставщикам";
		ИмяРегистра = "ЗаказыПоставщикам";
		Заголовок   = "Ведомость по заказам поставщикам";
	КонецЕсли;
			
	Отчет = Отчеты[ИмяОтчета].Создать();
	Форма = Отчет.ПолучитьФорму(ИмяФормы, Параметры["ЭтаФорма"], "Заказы_ПросроченныеЗаказыРасшифровка");
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Отчет.ИмяРегистра = ИмяРегистра;
	
	Отчет.ЗаполнитьНачальныеНастройки();

	Отчет.мВыбиратьИмяРегистра = Ложь;
	Отчет.мНазваниеОтчета = Заголовок;
	Отчет.ДатаНач = Расшифровка["ДатаНач"];
	Отчет.ДатаКон = Расшифровка["ДатаКон"];
	
	Отчет.РаскрашиватьИзмерения      = Истина;
	Отчет.ВыводитьИтогиПоВсемУровням = Истина;
	Отчет.ВыводитьПоказателиВСтроку  = Истина;
	Отчет.ПоказыватьЗаголовок = Ложь;
	
	Форма.ОбновитьОтчет();

	Форма.Открыть();

КонецПроцедуры // ПросроченныеЗаказыРасшифровка()

// Процедура обработки показателя "Просроченные заказы"
//
Процедура Заказы_ПросроченныеЗаказы(СтрДействие, Параметры = 0)

	Если СтрДействие = "Инициализация" Тогда
		
		Заказы_ПросроченныеЗаказыИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		Заказы_ПросроченныеЗаказыФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		Заказы_ПросроченныеЗаказыРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // Заказы_ПросроченныеЗаказы()

// Процедура обработки показателя "Заказы"
//
Процедура Заказы(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ДобавитьВДеревоПоказателей("Заказы", "Заказы", "",, Истина);
			
		ТабПарам = СоздатьТабПарам();

		// Добавить данные в структуру параметров показателей
		СтруктураПараметровПоказателей.Вставить("Заказы", ТабПарам);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // Заказы()

// Процедура инициализации показателя "Продажи и поступления"
//
Процедура Продажи_ПродажиИПоступленияИнициализация()
	
	ДобавитьВДеревоПоказателей("Продажи_ПродажиИПоступления", "Продажи и поступления", "", "Продажи");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;

	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Продажи_ПродажиИПоступления", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Продажи_ПродажиИПоступления", ТабПарам);
	
КонецПроцедуры // Продажи_ПродажиИПоступленияИнициализация()

// Процедура формирование показателя "Продажи и поступления"
//
Процедура Продажи_ПродажиИПоступленияФормирование()

	ТабДок = Новый ТабличныйДокумент;
	ДатаНач = ПолучитьДатуНачалаПериода(ДатаКон,
		ПолучитьПараметрПоказателя("Продажи_ПродажиИПоступления", "ПериодАнализа"));

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПродажиПоступления.Период КАК Период,
		|	СУММА(ПродажиПоступления.СуммаПродажи) КАК СуммаПродажи,
		|	СУММА(ПродажиПоступления.СуммаПоступления) КАК СуммаПоступления
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПродажиКомпанииОбороты.Период КАК Период,
		|		ПродажиКомпанииОбороты.СтоимостьОборот КАК СуммаПродажи,
		|		0 КАК СуммаПоступления
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, День) КАК ПродажиКомпанииОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДенежныеСредстваКомпанииОбороты.Период,
		|		0,
		|		ДенежныеСредстваКомпанииОбороты.СуммаУпрПриход
		|	ИЗ
		|		РегистрНакопления.ДенежныеСредства.Обороты(&ДатаНач, &ДатаКон, День) КАК ДенежныеСредстваКомпанииОбороты) КАК ПродажиПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиПоступления.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период" ;
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая));

	ТабРезультат=Запрос.Выполнить().Выгрузить();

	ТабДиаграмма=Новый ТаблицаЗначений;
	ТабДиаграмма.Колонки.Добавить("Период", ,"Период");
	ТабДиаграмма.Колонки.Добавить("СуммаПродажи", ,"Сумма продажи");
	ТабДиаграмма.Колонки.Добавить("СуммаПоступлений", ,"Сумма поступлений");

	ПродажиМесяц=0;
	ПоступленияМесяц=0;

		Макет  = мМакет.ПолучитьОбласть("ПродажиИПоступления");
		Секция = Макет.ПолучитьОбласть("ПродажиИПоступления");
		
		Диаграмма = Секция.Рисунки.ГрафикМесяц.Объект;
		Диаграмма.Очистить();
		Диаграмма.Серии.Добавить("Сумма продажи");
		Диаграмма.Серии.Добавить("Сумма поступлений");
		
		НомерТочки = 0;

	Для Каждого Строка из ТабРезультат Цикл

	    ПродажиМесяц=ПродажиМесяц+Строка.СуммаПродажи;
		ПоступленияМесяц=ПоступленияМесяц+Строка.СуммаПоступления;

		Диаграмма.Точки.Добавить( Формат( Строка.Период, "ДФ=dd.MM.yy"));
		Диаграмма.УстановитьЗначение(НомерТочки, 0, ПродажиМесяц);
		Диаграмма.УстановитьЗначение(НомерТочки, 1, ПоступленияМесяц);

		НомерТочки = НомерТочки + 1;
	КонецЦикла;	
	
		ТабДок.Вывести(Секция);
		мСтруктТабДок.Вставить("Продажи_ПродажиИПоступления", ТабДок);
	
КонецПроцедуры // Продажи_ПродажиИПоступленияФормирование()

// Процедура расшифровки показателя "Продажи и поступления"
//
Процедура Продажи_ПродажиИПоступленияРасшифровка(Параметры)
КонецПроцедуры // ПродажиИПоступленияРасшифровка()

// Процедура обработки показателя "Продажи и поступления"
//
Процедура Продажи_ПродажиИПоступления(СтрДействие, Параметры = 0)

	Если СтрДействие = "Инициализация" Тогда
		
		Продажи_ПродажиИПоступленияИнициализация();
		
	ИначеЕсли СтрДействие = "Формирование" Тогда
		
		Продажи_ПродажиИПоступленияФормирование();
		
	ИначеЕсли СтрДействие = "Расшифровка" Тогда
		
		Продажи_ПродажиИПоступленияРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // Продажи_ПродажиИПоступления()

// Процедура инициализации показателя "Остаток денежных средств в кассах компании"
//
Процедура ДенежныеСредства_ОстатокСредствВКассахИнициализация()
	
	ДобавитьВДеревоПоказателей("ДенежныеСредства_ОстатокСредствВКассах", "Остаток денежных средств в кассах компании", "", "ДенежныеСредства");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ДенежныеСредства_ОстатокСредствВКассах", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ДенежныеСредства_ОстатокСредствВКассах", ТабПарам);
	
КонецПроцедуры // ДенежныеСредства_ОстатокСредствВКассахИнициализация()

// Процедура формирование показателя "Остаток денежных средств в кассах компании"
//
Процедура ДенежныеСредства_ОстатокСредствВКассахФормирование()
	
	Периодичность = ПолучитьПараметрПоказателя( "ДенежныеСредства_ОстатокСредствВКассах", "ПериодАнализа");
	ПрошлыйПериод = ПолучитьПараметрПоказателя( "ДенежныеСредства_ОстатокСредствВКассах", "ПредПериод");
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, Периодичность);

	Запрос = Новый Запрос;

    Запрос.УстановитьПараметр("КонДата", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса КАК Касса,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.Представление КАК КассаПредставление,
		|	СУММА(ДенежныеСредстваКомпанииОстатки.СуммаОстаток) КАК Сумма,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств.Представление КАК ВалютаПредставление,
		|	0 КАК Период
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(&КонДата, ВидДенежныхСредств = &Нал) КАК ДенежныеСредстваКомпанииОстатки
        |
		|СГРУППИРОВАТЬ ПО
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса";

	Если ПрошлыйПериод = "Да" Тогда
			
	    Запрос.УстановитьПараметр("ПредДата", Новый Граница(ДатаНачалаПериода - 1, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса КАК Касса,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.Представление КАК КассаПредставление,
		|	СУММА(ДенежныеСредстваКомпанииОстатки.СуммаОстаток) КАК Сумма,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств.Представление КАК ВалютаПредставление,
		|	1 КАК Период
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(&ПредДата, ВидДенежныхСредств = &Нал) КАК ДенежныеСредстваКомпанииОстатки
        |
		|СГРУППИРОВАТЬ ПО
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса";
		
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Валюта,
		|	Касса";

	Запрос.УстановитьПараметр("Нал", Перечисления.ВидыДенежныхСредств.Наличные);
	РезультатЗапроса = Запрос.Выполнить();

	СписокКасс   = Новый СписокЗначений;
	СписокВалют  = Новый СписокЗначений;

	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		// Создадим список касс
		Элем = СписокКасс.НайтиПоЗначению(Обход.КассаПредставление);
		Если Элем = Неопределено Тогда
			СписокКасс.Добавить(Обход.КассаПредставление);
		КонецЕсли;
		
		// Создадим список валют
		Элем = СписокВалют.НайтиПоЗначению(Обход.ВалютаПредставление);
		Если Элем = Неопределено Тогда
			СписокВалют.Добавить(Обход.ВалютаПредставление);
		КонецЕсли;
		
	КонецЦикла;

	СтрПериод = "Остаток денежных средств в кассах на " + Формат( ДатаКонцаПериода, "ДЛФ=DD");

	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяЗаголовок");
	
	Секция.Параметры.Заголовок = СтрПериод;
	ТабДок.Вывести(Секция);

	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяДиаграмма");
	
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Объект;
	Диаграмма.ОбластьЗаголовка.Текст = "";

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"         ,"ДенежныеСредства_ОстатокСредствВКассах");
	ПарамРасшифровки.Вставить("ИмяРегистра" ,"ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаКон"     , ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("Отбор"       , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные));
	Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Расшифровка = ПарамРасшифровки;
	
	Диаграмма.Очистить();

	Для Каждого Касса Из СписокКасс Цикл
			Диаграмма.Серии.Добавить(Касса.Значение);
		КонецЦикла;

	Для Каждого Валюта Из СписокВалют Цикл
			Если ПрошлыйПериод = "Да" Тогда
				Диаграмма.Точки.Добавить("Прошлый период " + Валюта.Значение);
				Диаграмма.Точки.Добавить("Текущий период " + Валюта.Значение);
			Иначе
				Диаграмма.Точки.Добавить(Валюта.Значение);
			КонецЕсли;
		КонецЦикла;
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
			НомСерии = СписокКасс .Индекс(СписокКасс .НайтиПоЗначению(Обход.КассаПредставление ));
			НомТочки = СписокВалют.Индекс(СписокВалют.НайтиПоЗначению(Обход.ВалютаПредставление));
			Если ПрошлыйПериод = "Да" Тогда
				НомТочки = НомТочки * 2 + Обход.Период;
			КонецЕсли;
			Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Обход.Сумма);
		КонецЦикла;

	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("ДенежныеСредства_ОстатокСредствВКассах", ТабДок);
	
КонецПроцедуры // ДенежныеСредства_ОстатокСредствВКассахФормирование()

// Процедура расшифровки показателя "Остаток денежных средств в кассах компании"
//
Процедура ДенежныеСредства_ОстатокСредствВКассахРасшифровка(Параметры)

	Расшифровка_КроссТаблица(Параметры.Расшифровка);

КонецПроцедуры // ДенежныеСредства_ОстатокСредствВКассахРасшифровка()

// Процедура обработки показателя "Остаток денежных средств в кассах компании"
//
Процедура ДенежныеСредства_ОстатокСредствВКассах(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		ДенежныеСредства_ОстатокСредствВКассахИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		ДенежныеСредства_ОстатокСредствВКассахФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		ДенежныеСредства_ОстатокСредствВКассахРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ДенежныеСредства_ОстатокСредствВКассах()

// Процедура инициализации показателя "Остаток денежных средств на банковских счетах"
//
Процедура ДенежныеСредства_ОстатокСредствНаСчетахИнициализация()
	
	ДобавитьВДеревоПоказателей("ДенежныеСредства_ОстатокСредствНаСчетах", "Остаток денежных средств на банковских счетах", "", "ДенежныеСредства");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ДенежныеСредства_ОстатокСредствНаСчетах", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ДенежныеСредства_ОстатокСредствНаСчетах", ТабПарам);
	
КонецПроцедуры // ДенежныеСредства_ОстатокСредствНаСчетахИнициализация()

// Процедура формирование показателя "Остаток денежных средств на банковских счетах"
//
Процедура ДенежныеСредства_ОстатокСредствНаСчетахФормирование()
	
	Периодичность = ПолучитьПараметрПоказателя( "ДенежныеСредства_ОстатокСредствНаСчетах", "ПериодАнализа");
	ПрошлыйПериод = ПолучитьПараметрПоказателя( "ДенежныеСредства_ОстатокСредствНаСчетах", "ПредПериод");
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, Периодичность);

	Запрос = Новый Запрос;

    Запрос.УстановитьПараметр("КонДата", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса КАК Счет,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.Представление КАК СчетПредставление,	
		|	СУММА(ДенежныеСредстваКомпанииОстатки.СуммаОстаток) КАК Сумма,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств.Представление КАК ВалютаПредставление,
		|	0 КАК Период
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(&КонДата, ВидДенежныхСредств = &Безнал) КАК ДенежныеСредстваКомпанииОстатки
        |
		|СГРУППИРОВАТЬ ПО
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса";

	Если ПрошлыйПериод = "Да" Тогда
			
	    Запрос.УстановитьПараметр("ПредДата", Новый Граница(ДатаНачалаПериода - 1, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса КАК Счет,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.Представление КАК СчетПредставление,
		|	СУММА(ДенежныеСредстваКомпанииОстатки.СуммаОстаток) КАК Сумма,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств.Представление КАК ВалютаПредставление,
		|	1 КАК Период
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(&ПредДата, ВидДенежныхСредств = &Безнал) КАК ДенежныеСредстваКомпанииОстатки
        |
		|СГРУППИРОВАТЬ ПО
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств,
		|	ДенежныеСредстваКомпанииОстатки.БанковскийСчетКасса";
		
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Валюта,
		|	Счет";


	Запрос.УстановитьПараметр("Безнал", Перечисления.ВидыДенежныхСредств.Безналичные);
	РезультатЗапроса = Запрос.Выполнить();

	СписокСчетов = Новый СписокЗначений;
	СписокВалют  = Новый СписокЗначений;

	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		// Создадим список счетов
		Элем = СписокСчетов.НайтиПоЗначению(Обход.СчетПредставление);
		Если Элем = Неопределено Тогда
			СписокСчетов.Добавить(Обход.СчетПредставление);
		КонецЕсли;
		
		// Создадим список валют
		Элем = СписокВалют.НайтиПоЗначению(Обход.ВалютаПредставление);
		Если Элем = Неопределено Тогда
			СписокВалют.Добавить(Обход.ВалютаПредставление);
		КонецЕсли;
		
	КонецЦикла;

	СтрПериод = "Остаток денежных средств на банковских счетах " + Формат( ДатаКонцаПериода, "ДЛФ=DD");

	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяЗаголовок");
	
	Секция.Параметры.Заголовок = СтрПериод;
	ТабДок.Вывести(Секция);

	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяДиаграмма");
	
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"         , "ДенежныеСредства_ОстатокСредствНаСчетах");
	ПарамРасшифровки.Вставить("ИмяРегистра" , "ДенежныеСредства");
	ПарамРасшифровки.Вставить("ДатаКон"     , ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("Отбор"       , Новый Структура("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные));
	
	Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();

	Для Каждого Счет Из СписокСчетов Цикл
			Диаграмма.Серии.Добавить(Счет.Значение);
		КонецЦикла;

	Для Каждого Валюта Из СписокВалют Цикл
			Если ПрошлыйПериод = "Да" Тогда
				Диаграмма.Точки.Добавить("Прошлый период " + Валюта.Значение);
				Диаграмма.Точки.Добавить("Текущий период " + Валюта.Значение);
			Иначе
				Диаграмма.Точки.Добавить(Валюта.Значение);
			КонецЕсли;
		КонецЦикла;
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
			НомСерии = СписокСчетов.Индекс(СписокСчетов.НайтиПоЗначению(Обход.СчетПредставление  ));
			НомТочки = СписокВалют .Индекс(СписокВалют .НайтиПоЗначению(Обход.ВалютаПредставление));
			Если ПрошлыйПериод = "Да" Тогда
				НомТочки = НомТочки * 2 + Обход.Период;
			КонецЕсли;
			Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Обход.Сумма);
		КонецЦикла;

	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("ДенежныеСредства_ОстатокСредствНаСчетах", ТабДок);
	
КонецПроцедуры // ДенежныеСредства_ОстатокСредствНаСчетахФормирование()

// Процедура расшифровки показателя "Остаток денежных средств на банковских счетах"
//
Процедура ДенежныеСредства_ОстатокСредствНаСчетахРасшифровка(Параметры)

	Расшифровка_КроссТаблица(Параметры.Расшифровка);

КонецПроцедуры // ДенежныеСредства_ОстатокСредствНаСчетахРасшифровка()

// Процедура обработки показателя "Остаток денежных средств на банковских счетах"
//
Процедура ДенежныеСредства_ОстатокСредствНаСчетах(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		ДенежныеСредства_ОстатокСредствНаСчетахИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		ДенежныеСредства_ОстатокСредствНаСчетахФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		ДенежныеСредства_ОстатокСредствНаСчетахРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ДенежныеСредства_ОстатокСредствНаСчетах()

// Процедура инициализации показателя "Расход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_РасходПоСтатьямИнициализация()
	
	ДобавитьВДеревоПоказателей("ДенежныеСредства_РасходПоСтатьям", "Расход денежных средств в разрезе статей движения денежных средств", "", "ДенежныеСредства");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ДенежныеСредства_РасходПоСтатьям", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ДенежныеСредства_РасходПоСтатьям", ТабПарам);
	
КонецПроцедуры // ДенежныеСредства_РасходПоСтатьямИнициализация()

// Процедура формирование показателя "Расход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_РасходПоСтатьямФормирование()
	
	Периодичность = ПолучитьПараметрПоказателя( "ДенежныеСредства_РасходПоСтатьям", "ПериодАнализа");
	ПрошлыйПериод = ПолучитьПараметрПоказателя( "ДенежныеСредства_РасходПоСтатьям", "ПредПериод");
	ДатаКонцаПериода  = КонецДня(ДатаКон);
	ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, Периодичность);

	ДатаНачалаПрошлогоПериода = ДатаНачалаПериода;
	ДатаКонцаПрошлогоПериода  = ДатаКонцаПериода;
	ПолучитьДатыПрошлогоПериода(ДатаНачалаПериода, Периодичность, ДатаНачалаПрошлогоПериода, ДатаКонцаПрошлогоПериода);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("КонДата", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТекДата", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("Приход", 	Перечисления.ВидыДвиженийПриходРасход.Расход);
	
	Если ПрошлыйПериод = "Да" Тогда
		
		Запрос.УстановитьПараметр("НачДата", Новый Граница(ДатаНачалаПрошлогоПериода, ВидГраницы.Включая));
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК Статья,
			|	ВЫБОР КОГДА ДвиженияДенежныхСредств.Период >= &ТекДата ТОГДА
			|		ДвиженияДенежныхСредств.СуммаУпрОборот
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК СуммаТек,
			|	ВЫБОР КОГДА ДвиженияДенежныхСредств.Период < &ТекДата ТОГДА
			|		ДвиженияДенежныхСредств.СуммаУпрОборот
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК СуммаПрошл
			|
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&НачДата, &КонДата, " + Периодичность + ",ПриходРасход=&Приход ) КАК ДвиженияДенежныхСредств";

	Иначе
		
		Запрос.УстановитьПараметр("НачДата", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК Статья,
			|	ДвиженияДенежныхСредств.СуммаУпрОборот КАК СуммаТек
			|
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&НачДата, &КонДата, " + Периодичность + ",ПриходРасход=&Приход ) КАК ДвиженияДенежныхСредств";
	
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Расход денежных средств в разрезе статей движения денежных средств за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Расход денежных средств в разрезе статей движения денежных средств за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;

	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("Круговая");
	
	Секция = Макет.ПолучитьОбласть("КруговаяЗаголовок");
	
	Секция.Параметры.Заголовок = СтрПериод;
	ТабДок.Вывести(Секция);

	Секция = Макет.ПолучитьОбласть("КруговаяДиаграмма");
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "ДенежныеСредства_РасходПоСтатьям");
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	
	Диаграмма = Секция.Рисунки.ДиаграммаКруговая.Объект;

	Секция.Рисунки.ДиаграммаКруговая.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();

	Диаграмма.Точки.Добавить("Сумма расхода");
	
	Обход = РезультатЗапроса.Выбрать();
	НомСерии = 0;
	Пока Обход.Следующий() Цикл
			
            Если НЕ ЗначениеЗаполнено(Обход.Статья) Тогда
				Диаграмма.Серии.Добавить("<Статья не указана>");
			Иначе
				Диаграмма.Серии.Добавить("" + Обход.Статья.Наименование);
			КонецЕсли;
			
			Диаграмма.УстановитьЗначение(0, НомСерии, Обход.СуммаТек);
			НомСерии = НомСерии + 1;
			
		КонецЦикла;

	ТабДок.Вывести(Секция);

	Если ПрошлыйПериод = "Да" Тогда
		
		Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
			СтрПериод = "Расход денежных средств в разрезе статей движения денежных средств за " + ПредставлениеПериода(ДатаНачалаПрошлогоПериода, ДатаКонцаПрошлогоПериода);
		Иначе
			СтрПериод = "Расход денежных средств в разрезе статей движения денежных средств за период: " + ПредставлениеПериода(ДатаНачалаПрошлогоПериода, ДатаКонцаПрошлогоПериода);
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("КруговаяЗаголовок");
		
		Секция.Параметры.Заголовок = СтрПериод;
		ТабДок.Вывести(Секция);
		
		Секция = Макет.ПолучитьОбласть("КруговаяДиаграмма");
		
		ПарамРасшифровки = Новый Структура;
		ПарамРасшифровки.Вставить("Имя",     "ДенежныеСредства_РасходПоСтатьям");
		ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПрошлогоПериода);
		ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПрошлогоПериода);
		
		Диаграмма = Секция.Рисунки.ДиаграммаКруговая.Объект;

		Секция.Рисунки.ДиаграммаКруговая.Расшифровка = ПарамРасшифровки;
		Диаграмма.Очистить();

		Диаграмма.Точки.Добавить("Сумма расхода");
		
		Обход = РезультатЗапроса.Выбрать();
		НомСерии = 0;
		Пока Обход.Следующий() Цикл
				
	            Если НЕ ЗначениеЗаполнено(Обход.Статья) Тогда
					Диаграмма.Серии.Добавить("<Статья не указана>");
				Иначе
					Диаграмма.Серии.Добавить("" + Обход.Статья.Наименование);
				КонецЕсли;
				
				Диаграмма.УстановитьЗначение(0, НомСерии, Обход.СуммаПрошл);
				НомСерии = НомСерии + 1;
				
			КонецЦикла;

		ТабДок.Вывести(Секция);
		
	КонецЕсли;
	
	мСтруктТабДок.Вставить("ДенежныеСредства_РасходПоСтатьям", ТабДок);
	
КонецПроцедуры // ДенежныеСредства_РасходПоСтатьямФормирование()

// Процедура расшифровки показателя "Расход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_РасходПоСтатьямРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];

	Отчет = Отчеты.ДвиженияДенежныхСредств.Создать();
	
	Отчет.УстановитьНачальныеНастройки();
		
	Пока Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
			
		Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
			
	КонецЦикла;
		
	Пока Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
			
		Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
			
	КонецЦикла;
		
	Пока Отчет.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
			
		Отчет.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Отчет.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
			
	КонецЦикла;
		
	Отчет.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СтатьяДвиженияДенежныхСредств");
		
	ЭлементОтбора = Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор["ПриходРасход"];
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
	ЭлементОтбора.Значение = Перечисления.ВидыДвиженийПриходРасход.Расход;
		
	Отчет.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();


КонецПроцедуры // ДенежныеСредства_РасходПоСтатьямРасшифровка()

// Процедура обработки показателя "Расход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_РасходПоСтатьям(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		ДенежныеСредства_РасходПоСтатьямИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		ДенежныеСредства_РасходПоСтатьямФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		ДенежныеСредства_РасходПоСтатьямРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ДенежныеСредства_РасходПоСтатьям()

// Процедура инициализации показателя "Приход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_ПриходПоСтатьямИнициализация()
	
	ДобавитьВДеревоПоказателей("ДенежныеСредства_ПриходПоСтатьям", "Приход денежных средств в разрезе статей движения денежных средств", "", "ДенежныеСредства");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Квартал");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ДенежныеСредства_ПриходПоСтатьям", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ДенежныеСредства_ПриходПоСтатьям", ТабПарам);
	
КонецПроцедуры // ДенежныеСредства_ПриходПоСтатьямИнициализация()

// Процедура формирование показателя "Приход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_ПриходПоСтатьямФормирование()
	
	Периодичность = ПолучитьПараметрПоказателя( "ДенежныеСредства_ПриходПоСтатьям", "ПериодАнализа");
	ПрошлыйПериод = ПолучитьПараметрПоказателя( "ДенежныеСредства_ПриходПоСтатьям", "ПредПериод");
	ДатаКонцаПериода  = КонецДня(ДатаКон);
	ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, Периодичность);

	ДатаНачалаПрошлогоПериода = ДатаНачалаПериода;
	ДатаКонцаПрошлогоПериода  = ДатаКонцаПериода;
	ПолучитьДатыПрошлогоПериода(ДатаНачалаПериода, Периодичность, ДатаНачалаПрошлогоПериода, ДатаКонцаПрошлогоПериода);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("КонДата", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТекДата", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("Приход", 	Перечисления.ВидыДвиженийПриходРасход.Приход);
	
	Если ПрошлыйПериод = "Да" Тогда
		
		Запрос.УстановитьПараметр("НачДата", Новый Граница(ДатаНачалаПрошлогоПериода, ВидГраницы.Включая));
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК Статья,
			|	ВЫБОР КОГДА ДвиженияДенежныхСредств.Период >= &ТекДата ТОГДА
			|		ДвиженияДенежныхСредств.СуммаУпрОборот
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК СуммаТек,
			|	ВЫБОР КОГДА ДвиженияДенежныхСредств.Период < &ТекДата ТОГДА
			|		ДвиженияДенежныхСредств.СуммаУпрОборот
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК СуммаПрошл
			|
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&НачДата, &КонДата, " + Периодичность + ",ПриходРасход=&Приход ) КАК ДвиженияДенежныхСредств";

	Иначе
		
		Запрос.УстановитьПараметр("НачДата", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК Статья,
			|	ДвиженияДенежныхСредств.СуммаУпрОборот КАК СуммаТек
			|
			|ИЗ
			|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&НачДата, &КонДата, " + Периодичность + ",ПриходРасход=&Приход ) КАК ДвиженияДенежныхСредств";
	
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Приход денежных средств в разрезе статей движения денежных средств за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Приход денежных средств в разрезе статей движения денежных средств за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("Круговая");
	
	Секция = Макет.ПолучитьОбласть("КруговаяЗаголовок");
	
	Секция.Параметры.Заголовок = СтрПериод;
	ТабДок.Вывести(Секция);

	Секция = Макет.ПолучитьОбласть("КруговаяДиаграмма");
	
	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "ДенежныеСредства_ПриходПоСтатьям");
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	
	Диаграмма = Секция.Рисунки.ДиаграммаКруговая.Объект;

	Секция.Рисунки.ДиаграммаКруговая.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();

	Диаграмма.Точки.Добавить("Сумма прихода");
	
	Обход = РезультатЗапроса.Выбрать();
	НомСерии = 0;
	Пока Обход.Следующий() Цикл
			
            Если НЕ ЗначениеЗаполнено(Обход.Статья) Тогда
				Диаграмма.Серии.Добавить("<Статья не указана>");
			Иначе
				Диаграмма.Серии.Добавить("" + Обход.Статья.Наименование);
			КонецЕсли;
			
			Диаграмма.УстановитьЗначение(0, НомСерии, Обход.СуммаТек);
			НомСерии = НомСерии + 1;
			
		КонецЦикла;

	ТабДок.Вывести(Секция);

	Если ПрошлыйПериод = "Да" Тогда
		
		Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
			СтрПериод = "Приход денежных средств в разрезе статей движения денежных средств за " + ПредставлениеПериода(ДатаНачалаПрошлогоПериода, ДатаКонцаПрошлогоПериода);
		Иначе
			СтрПериод = "Приход денежных средств в разрезе статей движения денежных средств за период: " + ПредставлениеПериода(ДатаНачалаПрошлогоПериода, ДатаКонцаПрошлогоПериода);
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("КруговаяЗаголовок");
		
		Секция.Параметры.Заголовок = СтрПериод;
		ТабДок.Вывести(Секция);
		
		Секция = Макет.ПолучитьОбласть("КруговаяДиаграмма");
		
		ПарамРасшифровки = Новый Структура;
		ПарамРасшифровки.Вставить("Имя",     "ДенежныеСредства_ПриходПоСтатьям");
		ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПрошлогоПериода);
		ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПрошлогоПериода);
		
		Диаграмма = Секция.Рисунки.ДиаграммаКруговая.Объект;

		Секция.Рисунки.ДиаграммаКруговая.Расшифровка = ПарамРасшифровки;
		Диаграмма.Очистить();

		Диаграмма.Точки.Добавить("Сумма прихода");
		
		Обход = РезультатЗапроса.Выбрать();
		НомСерии = 0;
		Пока Обход.Следующий() Цикл
				
	            Если НЕ ЗначениеЗаполнено(Обход.Статья) Тогда
					Диаграмма.Серии.Добавить("<Статья не указана>");
				Иначе
					Диаграмма.Серии.Добавить("" + Обход.Статья.Наименование);
				КонецЕсли;
				
				Диаграмма.УстановитьЗначение(0, НомСерии, Обход.СуммаПрошл);
				НомСерии = НомСерии + 1;
				
			КонецЦикла;

		ТабДок.Вывести(Секция);
		
	КонецЕсли;
	
	мСтруктТабДок.Вставить("ДенежныеСредства_ПриходПоСтатьям", ТабДок);
	
КонецПроцедуры // ДенежныеСредства_ПриходПоСтатьямФормирование()

// Процедура расшифровки показателя "Приход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_ПриходПоСтатьямРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];

	Отчет = Отчеты.ДвиженияДенежныхСредств.Создать();

	Отчет.УстановитьНачальныеНастройки();
		
	Пока Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
			
		Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
			
	КонецЦикла;
		
	Пока Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
			
		Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(Отчет.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
			
	КонецЦикла;
		
	Пока Отчет.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
			
		Отчет.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Отчет.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
			
	КонецЦикла;
		
	Отчет.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СтатьяДвиженияДенежныхСредств");
		
	ЭлементОтбора = Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор["ПриходРасход"];
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
	ЭлементОтбора.Значение = Перечисления.ВидыДвиженийПриходРасход.Приход;
		
	Отчет.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры // ДенежныеСредства_ПриходПоСтатьямРасшифровка()

// Процедура обработки показателя "Приход денежных средств в разрезе статей движения денежных средств"
//
Процедура ДенежныеСредства_ПриходПоСтатьям(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		ДенежныеСредства_ПриходПоСтатьямИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		ДенежныеСредства_ПриходПоСтатьямФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		ДенежныеСредства_ПриходПоСтатьямРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ДенежныеСредства_ПриходПоСтатьям()

// Процедура инициализации показателя "Объем отгрузки (в суммовом выражении в ценах продажи)"
//
Процедура Продажи_ОбъемОтгрузкиИнициализация()
	
	ДобавитьВДеревоПоказателей("Продажи_ОбъемОтгрузки", "Объем отгрузки (в суммовом выражении в ценах продажи)", "", "Продажи");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;

	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийОбъемОтгрузки"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийОбъем";
	НоваяСтрока.ПредставлениеПараметра = "Средний объем отгрузки";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 15, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Продажи_ОбъемОтгрузки", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Продажи_ОбъемОтгрузки", ТабПарам);
	
КонецПроцедуры // Продажи_ОбъемОтгрузкиИнициализация()

// Процедура формирование показателя "Объем отгрузки (в суммовом выражении в ценах продажи)"
//
Процедура Продажи_ОбъемОтгрузкиФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Продажи_ОбъемОтгрузки", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Продажи_ОбъемОтгрузки", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Продажи_ОбъемОтгрузки", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Продажи_ОбъемОтгрузки") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Продажи_ОбъемОтгрузки"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Объем отгрузки"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Продажи_ОбъемОтгрузки", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Продажи_ОбъемОтгрузки", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПродажиКомпанииОбороты.СтоимостьОборот КАК Сумма,
		|	0 КАК ТипПериода,
		|	ПродажиКомпанииОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	ПродажиКомпанииОбороты.СтоимостьОборот,
			|	1 КАК ТипПериода,
			|	ПродажиКомпанииОбороты.Период
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	ПродажиКомпанииОбороты.СтоимостьОборот,
			|	2 КАК ТипПериода,
			|	ПродажиКомпанииОбороты.Период
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = Обход.Сумма;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = Обход.Сумма;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = Обход.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Отгрузка за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Отгрузка за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя"        , "Продажи_ОбъемОтгрузки");
	ПарамРасшифровки.Вставить("ИмяРегистра", "Продажи");
	ПарамРасшифровки.Вставить("ДатаНач"    , ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон"    , ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("ГруппировкиСтрок", Новый Структура("Номенклатура"));
	
	Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Продажи_ОбъемОтгрузки", "СреднийОбъем");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Продажи_ОбъемОтгрузки", ТабДок);

КонецПроцедуры // Продажи_ОбъемОтгрузкиФормирование()

// Процедура расшифровки показателя "Объем отгрузки (в суммовом выражении в ценах продажи)"
//
Процедура Продажи_ОбъемОтгрузкиРасшифровка(Параметры)
	
	Расшифровка_КроссТаблица(Параметры.Расшифровка);
	
КонецПроцедуры // Продажи_ОбъемОтгрузкиРасшифровка()

// Процедура обработки показателя "Объем отгрузки (в суммовом выражении в ценах продажи)"
//
Процедура Продажи_ОбъемОтгрузки(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Продажи_ОбъемОтгрузкиИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Продажи_ОбъемОтгрузкиФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Продажи_ОбъемОтгрузкиРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Продажи_ОбъемОтгрузки()

// Процедура инициализации показателя "Валовая прибыль (по отгрузке в суммовом выражении)"
//
Процедура Продажи_ВаловаяПрибыльИнициализация()
	
	ДобавитьВДеревоПоказателей("Продажи_ВаловаяПрибыль", "Валовая прибыль (по отгрузке в суммовом выражении)", "", "Продажи");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СредняяПрибыль"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СредняяПрибыль";
	НоваяСтрока.ПредставлениеПараметра = "Средняя прибыль";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 15, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Продажи_ВаловаяПрибыль", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Продажи_ВаловаяПрибыль", ТабПарам);
	
КонецПроцедуры // Продажи_ВаловаяПрибыльИнициализация()

// Процедура формирование показателя "Валовая прибыль (по отгрузке в суммовом выражении)"
//
Процедура Продажи_ВаловаяПрибыльФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыль", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыль", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыль", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Продажи_ВаловаяПрибыль") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Продажи_ВаловаяПрибыль"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Валовая прибыль"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыль", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыль", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПродажиКомпанииОбороты.СтоимостьОборот - СебестоимостьПродажОбороты.СтоимостьОборот КАК Сумма,
		|	0 КАК ТипПериода,
		|	ПродажиКомпанииОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачПериода, &КонПериода, " + Периодичность + ", ) КАК СебестоимостьПродажОбороты
		|	ПО ПродажиКомпанииОбороты.Номенклатура = СебестоимостьПродажОбороты.Номенклатура
		|	И ПродажиКомпанииОбороты.ХарактеристикаНоменклатуры = СебестоимостьПродажОбороты.ХарактеристикаНоменклатуры
		|	И ПродажиКомпанииОбороты.ЗаказПокупателя = СебестоимостьПродажОбороты.ЗаказПокупателя
		|	И ПродажиКомпанииОбороты.Период = СебестоимостьПродажОбороты.Период";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	ПродажиКомпанииОбороты.СтоимостьОборот - СебестоимостьПродажОбороты.СтоимостьОборот,
			|	1 КАК ТипПериода,
			|	ПродажиКомпанииОбороты.Период
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", ) КАК СебестоимостьПродажОбороты
			|	ПО ПродажиКомпанииОбороты.Номенклатура = СебестоимостьПродажОбороты.Номенклатура
			|	И ПродажиКомпанииОбороты.ХарактеристикаНоменклатуры = СебестоимостьПродажОбороты.ХарактеристикаНоменклатуры
			|	И ПродажиКомпанииОбороты.ЗаказПокупателя = СебестоимостьПродажОбороты.ЗаказПокупателя
			|	И ПродажиКомпанииОбороты.Период = СебестоимостьПродажОбороты.Период";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	ПродажиКомпанииОбороты.СтоимостьОборот - СебестоимостьПродажОбороты.СтоимостьОборот,
			|	2 КАК ТипПериода,
			|	ПродажиКомпанииОбороты.Период
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", ) КАК СебестоимостьПродажОбороты
			|	ПО ПродажиКомпанииОбороты.Номенклатура = СебестоимостьПродажОбороты.Номенклатура
			|	И ПродажиКомпанииОбороты.ХарактеристикаНоменклатуры = СебестоимостьПродажОбороты.ХарактеристикаНоменклатуры
			|	И ПродажиКомпанииОбороты.ЗаказПокупателя = СебестоимостьПродажОбороты.ЗаказПокупателя
			|	И ПродажиКомпанииОбороты.Период = СебестоимостьПродажОбороты.Период";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = Обход.Сумма;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = Обход.Сумма;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = Обход.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Валовая прибыль за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Валовая прибыль за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",     "Продажи_ВаловаяПрибыль");
	//ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	//
	//Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Продажи_ВаловаяПрибыль", "СредняяПрибыль");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомТочки  = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомТочки, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомТочки = НомТочки + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомТочки, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомТочки = НомТочки + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомТочки, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Продажи_ВаловаяПрибыль", ТабДок);

КонецПроцедуры // Продажи_ВаловаяПрибыльФормирование()

// Процедура расшифровки показателя "Валовая прибыль (по отгрузке в суммовом выражении)"
//
Процедура Продажи_ВаловаяПрибыльРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];
	
	Форма = Отчеты.ОтчетСписокКроссТаблица.ПолучитьФорму("ФормаПродажи", Параметры["ЭтаФорма"], "Продажи_ВаловаяПрибыльРасшифровка");
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Форма.ЭлементыФормы.ИмяРегистра.Значение = "ПродажиКомпании";
	Форма.ДатаНач = Расшифровка["ДатаНач"];
	Форма.ДатаКон = Расшифровка["ДатаКон"];
	Форма.ЗаполнитьНачальныеНастройки();
	Форма.РаскрашиватьИзмерения      = Истина;
	Форма.ВыводитьИтогиПоВсемУровням = Истина;
	Форма.ВыводитьПоказателиВСтроку  = Истина;
	Форма.ПоказыватьЗаголовок = Ложь;
	Форма.ОбновитьОтчет();

	Форма.Открыть();
	
КонецПроцедуры // Продажи_ВаловаяПрибыльРасшифровка()

// Процедура обработки показателя "Валовая прибыль (по отгрузке в суммовом выражении)"
//
Процедура Продажи_ВаловаяПрибыль(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Продажи_ВаловаяПрибыльИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Продажи_ВаловаяПрибыльФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Продажи_ВаловаяПрибыльРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Продажи_ВаловаяПрибыль()

// Процедура инициализации показателя "Валовая прибыль (по отгрузке процентом)"
//
Процедура Продажи_ВаловаяПрибыльПроцентИнициализация()
	
	ДобавитьВДеревоПоказателей("Продажи_ВаловаяПрибыльПроцент", "Валовая прибыль (по отгрузке процентом)", "", "Продажи");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийПроцентПрибыли"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийПроцентПрибыли";
	НоваяСтрока.ПредставлениеПараметра = "Средний % прибыли";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 7, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Продажи_ВаловаяПрибыльПроцент", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Продажи_ВаловаяПрибыльПроцент", ТабПарам);
	
КонецПроцедуры // Продажи_ВаловаяПрибыльПроцентИнициализация()

// Процедура формирование показателя "Валовая прибыль (по отгрузке процентом)"
//
Процедура Продажи_ВаловаяПрибыльПроцентФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыльПроцент", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыльПроцент", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыльПроцент", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Продажи_ВаловаяПрибыльПроцент") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Продажи_ВаловаяПрибыльПроцент"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Валовая прибыль процентом"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыльПроцент", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Продажи_ВаловаяПрибыльПроцент", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР КОГДА ПродажиКомпанииОбороты.СтоимостьОборот <> 0 ТОГДА
		|		(ПродажиКомпанииОбороты.СтоимостьОборот - СебестоимостьПродажОбороты.СтоимостьОборот) / ПродажиКомпанииОбороты.СтоимостьОборот * 100
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК Процент,
		|	0 КАК ТипПериода,
		|	ПродажиКомпанииОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачПериода, &КонПериода, " + Периодичность + ", ) КАК СебестоимостьПродажОбороты
		|	ПО ПродажиКомпанииОбороты.Номенклатура = СебестоимостьПродажОбороты.Номенклатура
		|	И ПродажиКомпанииОбороты.ХарактеристикаНоменклатуры = СебестоимостьПродажОбороты.ХарактеристикаНоменклатуры
		|	И ПродажиКомпанииОбороты.ЗаказПокупателя = СебестоимостьПродажОбороты.ЗаказПокупателя
		|	И ПродажиКомпанииОбороты.Период = СебестоимостьПродажОбороты.Период
		|";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ПродажиКомпанииОбороты.СтоимостьОборот <> 0 ТОГДА
			|		(ПродажиКомпанииОбороты.СтоимостьОборот - СебестоимостьПродажОбороты.СтоимостьОборот) / ПродажиКомпанииОбороты.СтоимостьОборот * 100
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Процент,
			|	0 КАК ТипПериода,
			|	ПродажиКомпанииОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", ) КАК СебестоимостьПродажОбороты
			|	ПО ПродажиКомпанииОбороты.Номенклатура = СебестоимостьПродажОбороты.Номенклатура
			|	И ПродажиКомпанииОбороты.ХарактеристикаНоменклатуры = СебестоимостьПродажОбороты.ХарактеристикаНоменклатуры
			|	И ПродажиКомпанииОбороты.ЗаказПокупателя = СебестоимостьПродажОбороты.ЗаказПокупателя
			|	И ПродажиКомпанииОбороты.Период = СебестоимостьПродажОбороты.Период
			|";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ПродажиКомпанииОбороты.СтоимостьОборот <> 0 ТОГДА
			|		(ПродажиКомпанииОбороты.СтоимостьОборот - СебестоимостьПродажОбороты.СтоимостьОборот) / ПродажиКомпанииОбороты.СтоимостьОборот * 100
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Процент,
			|	2 КАК ТипПериода,
			|	ПродажиКомпанииОбороты.Период
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", ) КАК ПродажиКомпанииОбороты
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", ) КАК СебестоимостьПродажОбороты
			|	ПО ПродажиКомпанииОбороты.Номенклатура = СебестоимостьПродажОбороты.Номенклатура
			|	И ПродажиКомпанииОбороты.ХарактеристикаНоменклатуры = СебестоимостьПродажОбороты.ХарактеристикаНоменклатуры
			|	И ПродажиКомпанииОбороты.ЗаказПокупателя = СебестоимостьПродажОбороты.ЗаказПокупателя
			|	И ПродажиКомпанииОбороты.Период = СебестоимостьПродажОбороты.Период";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = Обход.Процент;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = Обход.Процент;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = Обход.Процент;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Валовая прибыль в процентах за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Валовая прибыль в процентах за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",     "Продажи_ВаловаяПрибыльПроцент");
	//ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	//
	//Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Продажи_ВаловаяПрибыльПроцент", "СреднийПроцентПрибыли");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Продажи_ВаловаяПрибыльПроцент", ТабДок);

КонецПроцедуры // Продажи_ВаловаяПрибыльПроцентФормирование()

// Процедура расшифровки показателя "Валовая прибыль (по отгрузке процентом)"
//
Процедура Продажи_ВаловаяПрибыльПроцентРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];
	
	Форма = Отчеты.ОтчетСписокКроссТаблица.ПолучитьФорму("ФормаОсновная", Параметры["ЭтаФорма"], "Продажи_ВаловаяПрибыльПроцентРасшифровка");
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Форма.ЭлементыФормы.ИмяРегистра.Значение = "ПродажиКомпании";
	Форма.ДатаНач = Расшифровка["ДатаНач"];
	Форма.ДатаКон = Расшифровка["ДатаКон"];
	Форма.ЗаполнитьНачальныеНастройки();
	Форма.РаскрашиватьИзмерения      = Истина;
	Форма.ВыводитьИтогиПоВсемУровням = Истина;
	Форма.ВыводитьПоказателиВСтроку  = Истина;
	Форма.ПоказыватьЗаголовок = Ложь;
	Форма.ОбновитьОтчет();

	Форма.Открыть();
	
КонецПроцедуры // Продажи_ВаловаяПрибыльПроцентРасшифровка()

// Процедура обработки показателя "Валовая прибыль (по отгрузке процентом)"
//
Процедура Продажи_ВаловаяПрибыльПроцент(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Продажи_ВаловаяПрибыльПроцентИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Продажи_ВаловаяПрибыльПроцентФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Продажи_ВаловаяПрибыльПроцентРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Продажи_ВаловаяПрибыльПроцент()

// Процедура инициализации показателя "Дебиторская задолженность контрагентов"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовИнициализация()
	
	ДобавитьВДеревоПоказателей("Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", "Дебиторская задолженность контрагентов", "", "Взаиморасчеты");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийРазмерДолга"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийРазмерДолга";
	НоваяСтрока.ПредставлениеПараметра = "Средний размер долга";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 7, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", ТабПарам);
	
КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовИнициализация()

// Процедура формирование показателя "Дебиторская задолженность контрагентов"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Дебиторская задолженность контрагентов"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТипПериода,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период,
		|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
        |
		|СГРУППИРОВАТЬ ПО
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период
        |
		|ИМЕЮЩИЕ
		|	(СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0)";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	1 КАК ТипПериода,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период,
			|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|СГРУППИРОВАТЬ ПО
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период
	        |
			|ИМЕЮЩИЕ
			|	(СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0)";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	2 КАК ТипПериода,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период,
			|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|СГРУППИРОВАТЬ ПО
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период
	        |
			|ИМЕЮЩИЕ
			|	(СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0)";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	СписокКонтрагентов = Новый СписокЗначений;

	Пока Обход.Следующий() Цикл

		Если СписокКонтрагентов.НайтиПоЗначению(Обход.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(Обход.Контрагент);
		КонецЕсли;
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = Обход.Долг;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Дебиторская задолженность контрагентов за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Дебиторская задолженность контрагентов за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",         "Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов");
	//ПарамРасшифровки.Вставить("ДатаНач",     ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон",     ДатаКонцаПериода);
	//ПарамРасшифровки.Вставить("Контрагенты", СписокКонтрагентов);
	//
	//Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", "СреднийРазмерДолга");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов", ТабДок);

КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовФормирование()

// Процедура расшифровки показателя "Дебиторская задолженность контрагентов"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовРасшифровка(Параметры)
	
КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовРасшифровка()

// Процедура обработки показателя "Дебиторская задолженность контрагентов"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентовРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьКонтрагентов()

// Процедура инициализации показателя "Дебиторская задолженность компании"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииИнициализация()
	
	ДобавитьВДеревоПоказателей("Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", "Дебиторская задолженность компании", "", "Взаиморасчеты");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийРазмерДолга"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийРазмерДолга";
	НоваяСтрока.ПредставлениеПараметра = "Средний размер долга";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 7, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", ТабПарам);
	
КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииИнициализация()

// Процедура формирование показателя "Дебиторская задолженность компании"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Взаиморасчеты_ДебиторскаяЗадолженностьКомпании") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Взаиморасчеты_ДебиторскаяЗадолженностьКомпании"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Дебиторская задолженность компании"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТипПериода,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период,
		|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
        |
		|СГРУППИРОВАТЬ ПО
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период
        |
		|ИМЕЮЩИЕ
		|	(СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) < 0)";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	1 КАК ТипПериода,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период,
			|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|СГРУППИРОВАТЬ ПО
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период
	        |
			|ИМЕЮЩИЕ
			|	(СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) < 0)";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	2 КАК ТипПериода,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период,
			|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|СГРУППИРОВАТЬ ПО
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.Владелец,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период
	        |
			|ИМЕЮЩИЕ
			|	(СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) < 0)";
	КонецЕсли;
//попоравлено
	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	СписокКонтрагентов = Новый СписокЗначений;

	Пока Обход.Следующий() Цикл

		Если СписокКонтрагентов.НайтиПоЗначению(Обход.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(Обход.Контрагент);
		КонецЕсли;
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = -Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = -Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = -Обход.Долг;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Дебиторская задолженность компании за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Дебиторская задолженность компании за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",         "Взаиморасчеты_ДебиторскаяЗадолженностьКомпании");
	//ПарамРасшифровки.Вставить("ДатаНач",     ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон",     ДатаКонцаПериода);
	//ПарамРасшифровки.Вставить("Контрагенты", СписокКонтрагентов);
	//
	//Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", "СреднийРазмерДолга");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Взаиморасчеты_ДебиторскаяЗадолженностьКомпании", ТабДок);

КонецПроцедуры // ДебиторскаяЗадолженностьКомпанииФормирование()

// Процедура расшифровки показателя "Дебиторская задолженность компании"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииРасшифровка(Параметры)
	
КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииРасшифровка()

// Процедура обработки показателя "Дебиторская задолженность компании"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьКомпании(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьКомпанииРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ДебиторскаяЗадолженностьКомпании()

//////////////////////////////////////////////////////////////////////
// Процедуры формирования показателей связанных с заказами

// Процедура формирует данные по заказам за указанный период
//
Процедура ЗаполнитьДанныеПоЗаказам(ТабДанных, ТекстЗапроса, НачалоПериода, КонецПериода, Смещение, ИмяКолонки);
	
	Запрос = Новый Запрос;

    Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачПериода", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбходПоПериодам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоПериодам.Следующий() Цикл

		Обход = ОбходПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Обход.Следующий() Цикл
			Если Обход.КонОст <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ПриведеннаяДата = НачалоДня( Обход.Период + Смещение);
			
			ТекСтрока = ТабДанных.Найти(ПриведеннаяДата, "Дата");
			Если ТекСтрока = Неопределено Тогда
				ТекСтрока = ТабДанных.Добавить();
				ТекСтрока.Дата = ПриведеннаяДата;
			КонецЕсли;
			ТекСтрока["Был" + ИмяКолонки] = Истина;
			
			Список = ТекСтрока[ИмяКолонки];
			Если Список.НайтиПоЗначению(Обход.Заказ) = Неопределено Тогда
				Список.Добавить(Обход.Заказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДанныеПоЗаказам()

// Функция формирует список всех заказов попавших в выборку по различным периодам
//
Функция СформироватьСписокЗаказов(Таблица)
	
	ТабЗаказов = Новый ТаблицаЗначений;
	ТабЗаказов.Колонки.Добавить("Заказ");

	Для Каждого Строка Из Таблица Цикл
		Для Каждого Заказ Из Строка.ТекПериод Цикл
			НоваяСтрока = ТабЗаказов.Добавить();
			НоваяСтрока.Заказ = Заказ.Значение;
		КонецЦикла;
		Для Каждого Заказ Из Строка.ПредПериод Цикл
			НоваяСтрока = ТабЗаказов.Добавить();
			НоваяСтрока.Заказ = Заказ.Значение;
		КонецЦикла;
		Для Каждого Заказ Из Строка.АналогПериод Цикл
			НоваяСтрока = ТабЗаказов.Добавить();
			НоваяСтрока.Заказ = Заказ.Значение;
		КонецЦикла;
	КонецЦикла;

	ТабЗаказов.Свернуть("Заказ");
    Массив = ТабЗаказов.ВыгрузитьКолонку("Заказ");
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);

	ТабЗаказов = 0;
	Массив     = 0;

	Возврат Список;
	
КонецФункции // СформироватьСписокЗаказов()

// Процедура инициализации показателя "Количество неисполненных заказов покупателей"
//
Процедура Заказы_НеисполненныеЗаказыПокупателейИнициализация()
	
	ДобавитьВДеревоПоказателей("Заказы_НеисполненныеЗаказыПокупателей", "Количество неисполненных заказов покупателей", "", "Заказы");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднееКолвоЗаказов"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднееКолвоЗаказов";
	НоваяСтрока.ПредставлениеПараметра = "Среднее кол-во неисполненных заказов";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 6, 0);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Заказы_НеисполненныеЗаказыПокупателей", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Заказы_НеисполненныеЗаказыПокупателей", ТабПарам);
	
КонецПроцедуры // Заказы_НеисполненныеЗаказыПокупателейИнициализация()

// Процедура формирование показателя "Количество неисполненных заказов покупателей"
//
Процедура Заказы_НеисполненныеЗаказыПокупателейФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПокупателей", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПокупателей", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПокупателей", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Заказы_НеисполненныеЗаказыПокупателей") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Заказы_НеисполненныеЗаказыПокупателей"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Количество неисполненных заказов покупателей"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПокупателей", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПокупателей", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателейОстаткиИОбороты.Период КАК Период,
		|	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя КАК Заказ,
		|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонОст
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК ЗаказыПокупателейОстаткиИОбороты
        |
		|ГДЕ
		|	НЕ ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = НЕОПРЕДЕЛЕНО
        |
		|ИТОГИ СУММА(КоличествоКонечныйОстаток) ПО
		|	ЗаказыПокупателейОстаткиИОбороты.Период,
		|	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя";
//Ничего не изменилось
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("СписокЗначений"));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("СписокЗначений"));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("СписокЗначений"));
	ТабДанных.Колонки.Добавить("БылТекПериод",    СоздатьТип("Булево"));
	ТабДанных.Колонки.Добавить("БылПредПериод",   СоздатьТип("Булево"));
	ТабДанных.Колонки.Добавить("БылАналогПериод", СоздатьТип("Булево"));
	ТабДанных.Индексы.Добавить("Дата");
	
    ЗаполнитьДанныеПоЗаказам(ТабДанных, ТекстЗапроса, ДатаНачалаПериода, ДатаКонцаПериода, 0, "ТекПериод");
	
	Если ФлагПредПериод Тогда
		ЗаполнитьДанныеПоЗаказам(ТабДанных, ТекстЗапроса, НачалоПредПериода, КонецПредПериода, СмещениеПредИнтервала, "ПредПериод");
	КонецЕсли;
	
	Если ФлагАналогПериод Тогда
		ЗаполнитьДанныеПоЗаказам(ТабДанных, ТекстЗапроса, НачалоАналогПериода, КонецАналогПериода, СмещениеАналогИнтервала, "АналогПериод");
	КонецЕсли;
	
	ТабДанных.Колонки.Добавить("КолвоТекПериод",    СоздатьТип("Число", 10, 0));
	ТабДанных.Колонки.Добавить("КолвоПредПериод",   СоздатьТип("Число", 10, 0));
	ТабДанных.Колонки.Добавить("КолвоАналогПериод", СоздатьТип("Число", 10, 0));
	Для Каждого Строка Из ТабДанных Цикл
		Строка.КолвоТекПериод    = Строка.ТекПериод   .Количество();
		Строка.КолвоПредПериод   = Строка.ПредПериод  .Количество();
		Строка.КолвоАналогПериод = Строка.АналогПериод.Количество();
	КонецЦикла;

	СписокЗаказов = СформироватьСписокЗаказов(ТабДанных);
	
	ТабДанных.Сортировать("Дата");
	ПредСтрока = Неопределено;
	Для Каждого Строка Из ТабДанных Цикл
		Если ПредСтрока = Неопределено Тогда
			ПредСтрока = Строка;
			Продолжить;
		КонецЕсли;
		Если Не Строка.БылТекПериод Тогда
			Строка.КолвоТекПериод = ПредСтрока.КолвоТекПериод;
		КонецЕсли;
		Если Не Строка.БылПредПериод Тогда
			Строка.КолвоПредПериод = ПредСтрока.КолвоПредПериод;
		КонецЕсли;
		Если Не Строка.БылАналогПериод Тогда
			Строка.КолвоАналогПериод = ПредСтрока.КолвоАналогПериод;
		КонецЕсли;
		ПредСтрока = Строка;
	КонецЦикла;

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Количество неисполненных заказов покупателей за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Количество неисполненных заказов покупателей за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "Заказы_НеисполненныеЗаказыПокупателей");
	ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("Заказы",  СписокЗаказов);
	
	Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Заказы_НеисполненныеЗаказыПокупателей", "СреднееКолвоЗаказов");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.КолвоТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.КолвоПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.КолвоАналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Заказы_НеисполненныеЗаказыПокупателей", ТабДок);

КонецПроцедуры // Заказы_НеисполненныеЗаказыПокупателейФормирование()

// Процедура расшифровки показателя "Количество неисполненных заказов покупателей"
//
Процедура Заказы_НеисполненныеЗаказыПокупателейРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];
	
	ОтчетРасшифровка = Отчеты.АнализЗаказовПокупателей.Создать();
	
	ОтчетРасшифровка.УстановитьНачальныеНастройки();
	
	ОтчетРасшифровка.СостояниеОтгрузкиПоЗаказу  = Истина;
	ОтчетРасшифровка.ОтгруженоЧастично          = Истина;
	ОтчетРасшифровка.НеОтгружено                = Истина;
	
	Построитель = ОтчетРасшифровка.УниверсальныйОтчет.ПостроительОтчета;
	
	// Удалить группировки отчета по умолчанию
	ОтчетРасшифровка.УниверсальныйОтчет.ОчиститьНастройкиПостроителя();
	
	ОтчетРасшифровка.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПокупателя");
	ОтчетРасшифровка.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	Если ТипЗнч(Расшифровка["Заказы"]) = Тип("СписокЗначений") Тогда
		ОтчетРасшифровка.УниверсальныйОтчет.ДобавитьОтбор("ЗаказПокупателя", Истина, ВидСравнения.ВСписке, Расшифровка["Заказы"]);
	Иначе
		ОтчетРасшифровка.УниверсальныйОтчет.ДобавитьОтбор("ЗаказПокупателя", Истина, ВидСравнения.Равно, Расшифровка["Заказы"]);
	КонецЕсли;
		
	ОтчетРасшифровка.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	Форма = ОтчетРасшифровка.ПолучитьФорму();
	Форма.ОбновитьОтчет();
	Форма.Открыть();
	
КонецПроцедуры // Заказы_НеисполненныеЗаказыПокупателейРасшифровка()

// Процедура обработки показателя "Количество неисполненных заказов покупателей"
//
Процедура Заказы_НеисполненныеЗаказыПокупателей(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Заказы_НеисполненныеЗаказыПокупателейИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Заказы_НеисполненныеЗаказыПокупателейФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Заказы_НеисполненныеЗаказыПокупателейРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Заказы_НеисполненныеЗаказыПокупателей()

// Процедура инициализации показателя "Количество неисполненных заказов поставщикам"
//
Процедура Заказы_НеисполненныеЗаказыПоставщикамИнициализация()
	
	ДобавитьВДеревоПоказателей("Заказы_НеисполненныеЗаказыПоставщикам", "Количество неисполненных заказов поставщикам", "", "Заказы");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднееКолвоЗаказов"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднееКолвоЗаказов";
	НоваяСтрока.ПредставлениеПараметра = "Среднее кол-во неисполненных заказов";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 6, 0);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Заказы_НеисполненныеЗаказыПоставщикам", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Заказы_НеисполненныеЗаказыПоставщикам", ТабПарам);
	
КонецПроцедуры // Заказы_НеисполненныеЗаказыПоставщикамИнициализация()

// Процедура формирование показателя "Количество неисполненных заказов поставщикам"
//
Процедура Заказы_НеисполненныеЗаказыПоставщикамФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПоставщикам", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПоставщикам", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПоставщикам", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Заказы_НеисполненныеЗаказыПоставщикам") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Заказы_НеисполненныеЗаказыПоставщикам"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Количество неисполненных заказов поставщикам"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПоставщикам", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Заказы_НеисполненныеЗаказыПоставщикам", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПоставщикамОстаткиИОбороты.Период КАК Период,
		|	ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику КАК Заказ,
		|	ЗаказыПоставщикамОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонОст
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК ЗаказыПоставщикамОстаткиИОбороты
        |
		|ГДЕ
		|	НЕ ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику = НЕОПРЕДЕЛЕНО
        |
		|ИТОГИ СУММА(КоличествоКонечныйОстаток) ПО
		|	ЗаказыПоставщикамОстаткиИОбороты.Период,
		|	ЗаказыПоставщикамОстаткиИОбороты.ЗаказПоставщику";
//Ничего не изменилось
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("СписокЗначений"));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("СписокЗначений"));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("СписокЗначений"));
	ТабДанных.Колонки.Добавить("БылТекПериод",    СоздатьТип("Булево"));
	ТабДанных.Колонки.Добавить("БылПредПериод",   СоздатьТип("Булево"));
	ТабДанных.Колонки.Добавить("БылАналогПериод", СоздатьТип("Булево"));
	ТабДанных.Индексы.Добавить("Дата");
	
    ЗаполнитьДанныеПоЗаказам(ТабДанных, ТекстЗапроса, ДатаНачалаПериода, ДатаКонцаПериода, 0, "ТекПериод");
	
	Если ФлагПредПериод Тогда
		
	    ЗаполнитьДанныеПоЗаказам(ТабДанных, ТекстЗапроса, НачалоПредПериода, КонецПредПериода, СмещениеПредИнтервала, "ПредПериод");
		
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		
	    ЗаполнитьДанныеПоЗаказам(ТабДанных, ТекстЗапроса, НачалоАналогПериода, КонецАналогПериода, СмещениеАналогИнтервала, "АналогПериод");
		
	КонецЕсли;
	
	ТабДанных.Колонки.Добавить("КолвоТекПериод",    СоздатьТип("Число", 10, 0));
	ТабДанных.Колонки.Добавить("КолвоПредПериод",   СоздатьТип("Число", 10, 0));
	ТабДанных.Колонки.Добавить("КолвоАналогПериод", СоздатьТип("Число", 10, 0));
	Для Каждого Строка Из ТабДанных Цикл
		Строка.КолвоТекПериод    = Строка.ТекПериод   .Количество();
		Строка.КолвоПредПериод   = Строка.ПредПериод  .Количество();
		Строка.КолвоАналогПериод = Строка.АналогПериод.Количество();
	КонецЦикла;
	
	ТабДанных.Сортировать("Дата");
	ПредСтрока = Неопределено;
	Для Каждого Строка Из ТабДанных Цикл
		Если ПредСтрока = Неопределено Тогда
			ПредСтрока = Строка;
			Продолжить;
		КонецЕсли;
		Если Не Строка.БылТекПериод Тогда
			Строка.КолвоТекПериод = ПредСтрока.КолвоТекПериод;
		КонецЕсли;
		Если Не Строка.БылПредПериод Тогда
			Строка.КолвоПредПериод = ПредСтрока.КолвоПредПериод;
		КонецЕсли;
		Если Не Строка.БылАналогПериод Тогда
			Строка.КолвоАналогПериод = ПредСтрока.КолвоАналогПериод;
		КонецЕсли;
		ПредСтрока = Строка;
	КонецЦикла;

	СписокЗаказов = СформироватьСписокЗаказов(ТабДанных);
	
	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Количество неисполненных заказов поставщикам за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Количество неисполненных заказов поставщикам за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "Заказы_НеисполненныеЗаказыПоставщикам");
	ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("Заказы",  СписокЗаказов);
	
	Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Заказы_НеисполненныеЗаказыПоставщикам", "СреднееКолвоЗаказов");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.КолвоТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.КолвоПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.КолвоАналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Заказы_НеисполненныеЗаказыПоставщикам", ТабДок);

КонецПроцедуры // Заказы_НеисполненныеЗаказыПоставщикамФормирование()

// Процедура расшифровки показателя "Количество неисполненных заказов поставщикам"
//
Процедура Заказы_НеисполненныеЗаказыПоставщикамРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];

	ОтчетРасшифровка = Отчеты.УниверсальныйОтчет.Создать();
	
	ОтчетРасшифровка.мВыбиратьИмяРегистра = Ложь;
	ОтчетРасшифровка.ИмяРегистра = "ЗаказыПоставщикам";
	
	ОтчетРасшифровка.УстановитьНачальныеНастройки(Истина);
	
	Построитель = ОтчетРасшифровка.ПостроительОтчета;
	
	// Удалить группировки отчета по умолчанию
	ОтчетРасшифровка.ДобавитьИзмерениеСтроки("ЗаказПоставщику");
	ОтчетРасшифровка.ДобавитьИзмерениеСтроки("Номенклатура");
	
	ОтчетРасшифровка.ДобавитьПоказатель("КоличествоОборот"        ,, Ложь,, "Количество");
	
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаУпрНачальныйОстаток",, Ложь,, "СуммаУпр");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаУпрПриход"          ,, Ложь,, "СуммаУпр");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаУпрРасход"          ,, Ложь,, "СуммаУпр");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаУпрКонечныйОстаток" ,, Ложь,, "СуммаУпр");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаУпрОборот"          ,, Ложь,, "СуммаУпр");
	
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаВзаиморасчетовНачальныйОстаток",, Ложь,, "СуммаВзаиморасчетов");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаВзаиморасчетовПриход"          ,, Ложь,, "СуммаВзаиморасчетов");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаВзаиморасчетовРасход"          ,, Ложь,, "СуммаВзаиморасчетов");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаВзаиморасчетовКонечныйОстаток" ,, Ложь,, "СуммаВзаиморасчетов");
	ОтчетРасшифровка.ДобавитьПоказатель("СуммаВзаиморасчетовОборот"          ,, Ложь,, "СуммаВзаиморасчетов");
	
	ОтчетРасшифровка.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	Форма = ОтчетРасшифровка.ПолучитьФорму();
	Форма.ОбновитьОтчет();
	Форма.Открыть();
	
КонецПроцедуры // Заказы_НеисполненныеЗаказыПоставщикамРасшифровка()

// Процедура обработки показателя "Количество неисполненных заказов поставщикам"
//
Процедура Заказы_НеисполненныеЗаказыПоставщикам(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Заказы_НеисполненныеЗаказыПоставщикамИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Заказы_НеисполненныеЗаказыПоставщикамФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Заказы_НеисполненныеЗаказыПоставщикамРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // НеисполненныеЗаказыПоставщикам()

// Процедура инициализации показателя "Дебиторская задолженность подотчетников"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетниковИнициализация()
	
	ДобавитьВДеревоПоказателей("Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", "Дебиторская задолженность подотчетников", "", "Взаиморасчеты");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийРазмерДолга"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийРазмерДолга";
	НоваяСтрока.ПредставлениеПараметра = "Средний размер долга";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 7, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", ТабПарам);
	
КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетниковИнициализация()

// Процедура формирование показателя "Дебиторская задолженность подотчетников"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетниковФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Дебиторская задолженность подотчетников"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТипПериода,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо КАК ФизЛицо,
		|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты
        |
		|СГРУППИРОВАТЬ ПО
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период
		|	
		|ИМЕЮЩИЕ
		|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	1 КАК ТипПериода,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо КАК ФизЛицо,
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", , ) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|СГРУППИРОВАТЬ ПО
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период
			|	
			|ИМЕЮЩИЕ
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	2 КАК ТипПериода,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо КАК ФизЛицо,
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", , ) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|СГРУППИРОВАТЬ ПО
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период
			|	
			|ИМЕЮЩИЕ
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	СписокФизЛиц = Новый СписокЗначений;

	Пока Обход.Следующий() Цикл

		Если СписокФизЛиц.НайтиПоЗначению(Обход.ФизЛицо) = Неопределено Тогда
			СписокФизЛиц.Добавить(Обход.ФизЛицо);
		КонецЕсли;
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = Обход.Долг;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Дебиторская задолженность подотчетников за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Дебиторская задолженность подотчетников за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",     "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников");
	//ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	//ПарамРасшифровки.Вставить("ФизЛица", СписокФизЛиц);
	//
	//Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", "СреднийРазмерДолга");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников", ТабДок);

КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетниковФормирование()

// Процедура обработки показателя "Дебиторская задолженность подотчетников"
//
Процедура Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетниковИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетниковФормирование();
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников()

// Процедура инициализации показателя "Просроченная задолженность подотчетников"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковИнициализация()
	
	ДобавитьВДеревоПоказателей("Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", "Просроченная дебиторская задолженность подотчетников", "", "Взаиморасчеты");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийРазмерДолга"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийРазмерДолга";
	НоваяСтрока.ПредставлениеПараметра = "Средний размер долга";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 7, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", ТабПарам);
	
КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковИнициализация()

// Процедура формирование показателя "Просроченная задолженность подотчетников"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Просроченная дебиторская задолженность подотчетников"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода",  Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода",  ДатаКонцаПериода);
	Запрос.УстановитьПараметр("КонГраница",  Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата0",       Дата("00010101000000"));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТипПериода,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо КАК ФизЛицо,
		|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&НачПериода, &КонГраница, " + Периодичность + ", , ) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты
        |
		|ГДЕ
		| 	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.РасчетныйДокумент.ДатаПогашенияАванса < &КонПериода
		|		И НЕ ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.РасчетныйДокумент ССЫЛКА Документ.АвансовыйОтчет
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо,
		|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период
		|	
		|ИМЕЮЩИЕ
		|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", КонецПредПериода);
		Запрос.УстановитьПараметр("КонПредГраница", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	1 КАК ТипПериода,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо КАК ФизЛицо,
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&НачПредПериода, &КонПредГраница, " + Периодичность + ", , ) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|ГДЕ
			| 	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.РасчетныйДокумент.ДатаПогашенияАванса < &КонПредПериода
			|		И НЕ ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.РасчетныйДокумент ССЫЛКА Документ.АвансовыйОтчет
	        |
			|СГРУППИРОВАТЬ ПО
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период
			|	
			|ИМЕЮЩИЕ
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", КонецАналогПериода);
		Запрос.УстановитьПараметр("КонАналогГраница", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	2 КАК ТипПериода,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо КАК ФизЛицо,
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) КАК Долг,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&НачАналогПериода, &КонАналогГраница, " + Периодичность + ", , ) КАК ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты
	        |
			|ГДЕ
			| 	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.РасчетныйДокумент.ДатаПогашенияАванса < &КонАналогПериода
			|		И НЕ ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.РасчетныйДокумент ССЫЛКА Документ.АвансовыйОтчет
	        |
			|СГРУППИРОВАТЬ ПО
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.ФизЛицо,
			|	ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.Период
			|	
			|ИМЕЮЩИЕ
			|	СУММА(ПодотчетныеЛицаВзаиморасчетыКомпанииОстаткиИОбороты.СуммаУпрКонечныйОстаток) > 0";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	СписокФизЛиц = Новый СписокЗначений;

	Пока Обход.Следующий() Цикл

		Если СписокФизЛиц.НайтиПоЗначению(Обход.ФизЛицо) = Неопределено Тогда
			СписокФизЛиц.Добавить(Обход.ФизЛицо);
		КонецЕсли;
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = Обход.Долг;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = Обход.Долг;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Просроченная дебиторская задолженность подотчетников за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Просроченная дебиторская задолженность подотчетников за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",     "Взаиморасчеты_ДебиторскаяЗадолженностьПодотчетников");
	//ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	//ПарамРасшифровки.Вставить("ФизЛица", СписокФизЛиц);
	//
	//Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", "СреднийРазмерДолга");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников", ТабДок);

КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковФормирование()

// Процедура расшифровки показателя "Просроченная задолженность подотчетников"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковРасшифровка(Параметры)

	
КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковРасшифровка()

// Процедура обработки показателя "Просроченная задолженность подотчетников"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетниковРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьПодотчетников()

// Процедура инициализации показателя "Себестоимость товарных запасов"
//
Процедура СебестоимостьТоварныхЗапасовИнициализация()
	
	ДобавитьВДеревоПоказателей("СебестоимостьТоварныхЗапасов", "Себестоимость товарных запасов", "");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийОбъемОтгрузки"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СредняяСтоимость";
	НоваяСтрока.ПредставлениеПараметра = "Средняя стоимость запасов";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 15, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("СебестоимостьТоварныхЗапасов", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("СебестоимостьТоварныхЗапасов", ТабПарам);
	
КонецПроцедуры // СебестоимостьТоварныхЗапасовИнициализация()

// Процедура формирование показателя "Себестоимость товарных запасов"
//
Процедура СебестоимостьТоварныхЗапасовФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "СебестоимостьТоварныхЗапасов", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "СебестоимостьТоварныхЗапасов", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "СебестоимостьТоварныхЗапасов", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("СебестоимостьТоварныхЗапасов") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["СебестоимостьТоварныхЗапасов"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Себестоимость товарных запасов"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "СебестоимостьТоварныхЗапасов", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "СебестоимостьТоварныхЗапасов", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТипПериода,
		|	ПартииТоваровКомпанииОстаткиИОбороты.СтоимостьКонечныйОстаток КАК ОстСтоимость,
		|	ПартииТоваровКомпанииОстаткиИОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", ) КАК ПартииТоваровКомпанииОстаткиИОбороты";
	
	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	1 КАК ТипПериода,
			|	ПартииТоваровКомпанииОстаткиИОбороты.СтоимостьКонечныйОстаток КАК ОстСтоимость,
			|	ПартииТоваровКомпанииОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", ) КАК ПартииТоваровКомпанииОстаткиИОбороты";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	2 КАК ТипПериода,
			|	ПартииТоваровКомпанииОстаткиИОбороты.СтоимостьКонечныйОстаток КАК ОстСтоимость,
			|	ПартииТоваровКомпанииОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", ) КАК ПартииТоваровКомпанииОстаткиИОбороты";
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("Дата",         СоздатьТип("Дата"));
	ТабДанных.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанных.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));

	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ТабДанных.Добавить();
		Если Обход.ТипПериода = 0 Тогда // Текущий период
			
			НоваяСтрока.Дата      = Обход.Период;
			НоваяСтрока.ТекПериод = Обход.ОстСтоимость;
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда // Предыдущий период
			
			НоваяСтрока.Дата       = НачалоДня( Обход.Период + СмещениеПредИнтервала);
			НоваяСтрока.ПредПериод = Обход.ОстСтоимость;
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда // Аналогичной период
			
			НоваяСтрока.Дата         = НачалоДня( Обход.Период + СмещениеАналогИнтервала);
			НоваяСтрока.АналогПериод = Обход.ОстСтоимость;
			
		КонецЕсли;
		
	КонецЦикла;

	ТабДанных.Свернуть("Дата", "ТекПериод,ПредПериод,АналогПериод");
	ТабДанных.Сортировать("Дата");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Себестоимость товарных запасов за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Себестоимость товарных запасов за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",     "СебестоимостьТоварныхЗапасов");
	ПарамРасшифровки.Вставить("ИмяРегистра",     "ПартииТоваровНаСкладах");
	ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("ГруппировкиСтрок", Новый Структура("Номенклатура"));
	
	Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("СебестоимостьТоварныхЗапасов", "СредняяСтоимость");
	
	Диаграмма.Серии.Добавить("Текущий период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Предыдущий период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналогичный период");
	КонецЕсли;

	НомСтроки = 0;
	Для Каждого Строка Из ТабДанных Цикл
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ТекПериод);
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомСтроки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("СебестоимостьТоварныхЗапасов", ТабДок);

КонецПроцедуры // СебестоимостьТоварныхЗапасовФормирование()

// Процедура расшифровки показателя "Себестоимость товарных запасов"
//
Процедура СебестоимостьТоварныхЗапасовРасшифровка(Параметры)
	
	Расшифровка_ОстаткиОбороты(Параметры.Расшифровка);
	
КонецПроцедуры // СебестоимостьТоварныхЗапасовРасшифровка()

// Процедура обработки показателя "Себестоимость товарных запасов"
//
Процедура СебестоимостьТоварныхЗапасов(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		СебестоимостьТоварныхЗапасовИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		СебестоимостьТоварныхЗапасовФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		СебестоимостьТоварныхЗапасовРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // СебестоимостьТоварныхЗапасов()

// Процедура инициализации показателя "Оценка ликвидности склада"
//
Процедура ЛиквидностьСкладаИнициализация()
	
	ДобавитьВДеревоПоказателей("ЛиквидностьСклада", "Оценка ликвидности склада", "");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийОбъемОтгрузки"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийЗапас";
	НоваяСтрока.ПредставлениеПараметра = "Средняя стоимость запасов";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 15, 2);
	НоваяСтрока.Значение               = 0;
	
	// Параметр "ТипЦен"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ТипЦен";
	НоваяСтрока.ПредставлениеПараметра = "Тип цен оценки стоимости";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СправочникСсылка.ТипыЦенНоменклатуры");
	НоваяСтрока.Значение               = Справочники["ТипыЦенНоменклатуры"].ПустаяСсылка();
	
	// Параметр "ОриентацияПодписей"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ОриентацияПодписей";
	НоваяСтрока.ПредставлениеПараметра = "Ориентация подписей";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Горизонтальная");
	НоваяСтрока.Список.Добавить("Вертикальная");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;	
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("ЛиквидностьСклада", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("ЛиквидностьСклада", ТабПарам);
	
КонецПроцедуры // ЛиквидностьСкладаИнициализация()

// Функция возвращает предыдущее значение из диаграммы. Требуется для того чтобы вывести точку/серию
// диаграммы в случае когда не было движений/остатков для текущей точки.
//
Функция ПолучитьПредыдущееЗначениеДиаграммы(Диаграмма, Знач НомТочки, Знач НомСерии, Знач Шаг)

	Пока НомТочки - Шаг >= 0 Цикл
		НомТочки = НомТочки - Шаг;
		ЗначДиаграммы = Диаграмма.ПОлучитьЗначение(НомТочки, НомСерии).Значение;
		Если НЕ (ЗначДиаграммы = NULL ИЛИ ЗначДиаграммы = Неопределено) Тогда
			Возврат ЗначДиаграммы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0; // Не нашли числового значения.
	
КонецФункции // ПолучитьПредыдущееЗначениеДиаграммы()

// Процедура формирование показателя "Оценка ликвидности склада"
//
Процедура ЛиквидностьСкладаФормирование()

	Периодичность      = ПолучитьПараметрПоказателя( "ЛиквидностьСклада", "Периодичность");
	ПериодАнализа      = ПолучитьПараметрПоказателя( "ЛиквидностьСклада", "ПериодАнализа");
	АналогПериод       = ПолучитьПараметрПоказателя( "ЛиквидностьСклада", "АналогПериод");
	ТипЦен             = ПолучитьПараметрПоказателя( "ЛиквидностьСклада", "ТипЦен");
	ОриентацияПодписей = ПолучитьПараметрПоказателя( "ЛиквидностьСклада", "ОриентацияПодписей");	

	// Проверим корректность значений параметров показателей
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить("Показатель ""Оценка ликвидности склада"" не указан тип цен для оценки стоимости товарных запасов", СтатусСообщения.БезСтатуса);
		Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Если СтруктураПараметровПоказателей.Свойство("ЛиквидностьСклада") Тогда

		ТабПарам = СтруктураПараметровПоказателей["ЛиквидностьСклада"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Оценка ликвидности склада"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
	ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "ЛиквидностьСклада", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
		НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "ЛиквидностьСклада", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",           ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонПериода",           ДатаКонцаПериода);
	Запрос.УстановитьПараметр("КонПериодаГраница",    Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТипЦен",               ТипЦен);
	Запрос.УстановитьПараметр("ТипЦенРассчитывается", ТипЦен.Рассчитывается);
	Запрос.УстановитьПараметр("БазовыйТипЦен",        ТипЦен.БазовыйТипЦен);
	Запрос.УстановитьПараметр("ПроцентСкидкиНаценки", ТипЦен.ПроцентСкидкиНаценки);	

	ВалютаОтчета=Константы.ВалютаУправленческогоУчета.Получить();
	СтруктураКурса=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОтчета, КонецДня(ДатаКонцаПериода));
	Запрос.УстановитьПараметр("КурсВалютыОтчета", СтруктураКурса.Курс);
	Запрос.УстановитьПараметр("КратностьВалютыОтчета", СтруктураКурса.Кратность);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК ТипПериода,
	|	ОстаткиТоваровОстаткиИОбороты.Период КАК Период,
	|	ОстаткиТоваровОстаткиИОбороты.Склад КАК Склад,
	|	СУММА(ОстаткиТоваровОстаткиИОбороты.КоличествоКонечныйОстаток * ЦеныСрезПоследних.Цена * (ЦеныСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЦеныСрезПоследних.ЕдиницаИзмерения.Коэффициент) * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (&КурсВалютыОтчета / &КратностьвалютыОтчета)) КАК Стоимость
	|ИЗ
	|(ВЫБРАТЬ
	|			РегТовары.Период КАК Период,
	|			РегТовары.Склад КАК Склад,
	|			РегТовары.Номенклатура КАК Номенклатура,
	|			РегТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СУММА(РегТовары.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
	|				ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
	|				ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|				ТоварыНаСкладахОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|				ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачПериода, &КонПериодаГраница, " + Периодичность + ", , ) КАК ТоварыНаСкладахОстаткиИОбороты
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ТоварыВРозницеОстаткиИОбороты.Период КАК Период,
	|				ТоварыВРозницеОстаткиИОбороты.Склад КАК Склад,
	|				ТоварыВРозницеОстаткиИОбороты.Номенклатура,
	|				ТоварыВРозницеОстаткиИОбороты.ХарактеристикаНоменклатуры,
	|				ТоварыВРозницеОстаткиИОбороты.КоличествоКонечныйОстаток
	|			ИЗ
	|				РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&НачПериода, &КонПериодаГраница, " + Периодичность + ", , ) КАК ТоварыВРозницеОстаткиИОбороты) КАК РегТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегТовары.Период,
	|			РегТовары.Склад,
	|			РегТовары.Номенклатура,
	|			РегТовары.ХарактеристикаНоменклатуры) КАК ОстаткиТоваровОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Товары.Номенклатура КАК Номенклатура,
	|			Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ВЫБОР
	|				КОГДА &ТипЦенРассчитывается
	|					ТОГДА ВЫБОР
	|							КОГДА ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL 
	|								ТОГДА БазовыеЦеныСрезПоследних.Цена * (100 + &ПроцентСкидкиНаценки) / 100
	|							ИНАЧЕ БазовыеЦеныСрезПоследних.Цена * (100 + ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки) / 100
	|						КОНЕЦ
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
	|			КОНЕЦ КАК Цена,
	|			ВЫБОР
	|				КОГДА &ТипЦенРассчитывается
	|					ТОГДА БазовыеЦеныСрезПоследних.Валюта
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Валюта
	|			КОНЕЦ КАК Валюта,
	|			ВЫБОР
	|				КОГДА &ТипЦенРассчитывается
	|					ТОГДА БазовыеЦеныСрезПоследних.ЕдиницаИзмерения
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|			КОНЕЦ КАК ЕдиницаИзмерения
	|		ИЗ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РегТовары.Номенклатура КАК Номенклатура,
	|				РегТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|				СУММА(РегТовары.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
	|			ИЗ
	|				(ВЫБРАТЬ
	|					ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|					ТоварыНаСкладахОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|					ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
	|				ИЗ
	|					РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачПериода, &КонПериодаГраница, " + Периодичность + ", , ) КАК ТоварыНаСкладахОстаткиИОбороты
	|				
	|				ОБЪЕДИНИТЬ
	|					
	|				ВЫБРАТЬ
	|					ТоварыВРозницеОстаткиИОбороты.Номенклатура,
	|					ТоварыВРозницеОстаткиИОбороты.ХарактеристикаНоменклатуры,
	|					ТоварыВРозницеОстаткиИОбороты.КоличествоКонечныйОстаток
	|				ИЗ
	|					РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&НачПериода, &КонПериодаГраница, " + Периодичность + ", , ) КАК ТоварыВРозницеОстаткиИОбороты) КАК РегТовары
	|			
	|				СГРУППИРОВАТЬ ПО
	|					РегТовары.Номенклатура,
	|					РегТовары.ХарактеристикаНоменклатуры) КАК Товары
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонПериодаГраница, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|				ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|					И Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонПериодаГраница, ТипЦен = &БазовыйТипЦен) КАК БазовыеЦеныСрезПоследних
	|				ПО Товары.Номенклатура = БазовыеЦеныСрезПоследних.Номенклатура
	|					И Товары.ХарактеристикаНоменклатуры = БазовыеЦеныСрезПоследних.ХарактеристикаНоменклатуры) КАК ЦеныСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонПериодаГраница, ) КАК КурсыВалютСрезПоследних
	|			ПО ЦеныСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ПО ОстаткиТоваровОстаткиИОбороты.Номенклатура = ЦеныСрезПоследних.Номенклатура
	|			И ОстаткиТоваровОстаткиИОбороты.ХарактеристикаНоменклатуры = ЦеныСрезПоследних.ХарактеристикаНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваровОстаткиИОбороты.Период,
	|	ОстаткиТоваровОстаткиИОбороты.Склад";

	Если ФлагПредПериод Тогда

		Запрос.УстановитьПараметр("НачПредПериода",        НачалоПредПериода);
		Запрос.УстановитьПараметр("КонПредПериода",        КонецПредПериода);
		Запрос.УстановитьПараметр("КонПредПериодаГраница", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СмещениеПредПериода",   (ДатаНачалаПериода - НачалоПредПериода));
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1 КАК ТипПериода,
		|	ДОБАВИТЬКДАТЕ(ОстаткиТоваровОстаткиИОбороты.Период, Секунда, &СмещениеПредПериода) КАК Период,
		|	ОстаткиТоваровОстаткиИОбороты.Склад КАК Склад,
		|	СУММА(ОстаткиТоваровОстаткиИОбороты.КоличествоКонечныйОстаток * ЦеныСрезПоследних.Цена * (ЦеныСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЦеныСрезПоследних.ЕдиницаИзмерения.Коэффициент) * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (&КурсВалютыОтчета / &КратностьвалютыОтчета)) КАК Стоимость
		|ИЗ
		|(ВЫБРАТЬ
		|			РегТовары.Период КАК Период,
		|			РегТовары.Склад КАК Склад,
		|			РегТовары.Номенклатура КАК Номенклатура,
		|			РегТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			СУММА(РегТовары.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
		|				ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
		|				ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|				ТоварыНаСкладахОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
		|			ИЗ
		|				РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачПредПериода, &КонПредПериодаГраница, " + Периодичность + ", , ) КАК ТоварыНаСкладахОстаткиИОбороты
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ТоварыВРозницеОстаткиИОбороты.Период КАК Период,
		|				ТоварыВРозницеОстаткиИОбороты.Склад КАК Склад,
		|				ТоварыВРозницеОстаткиИОбороты.Номенклатура,
		|				ТоварыВРозницеОстаткиИОбороты.ХарактеристикаНоменклатуры,
		|				ТоварыВРозницеОстаткиИОбороты.КоличествоКонечныйОстаток
		|			ИЗ
		|				РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&НачПредПериода, &КонПредПериодаГраница, " + Периодичность + ", , ) КАК ТоварыВРозницеОстаткиИОбороты) КАК РегТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегТовары.Период,
		|			РегТовары.Склад,
		|			РегТовары.Номенклатура,
		|			РегТовары.ХарактеристикаНоменклатуры) КАК ОстаткиТоваровОстаткиИОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Товары.Номенклатура КАК Номенклатура,
		|			Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ВЫБОР
		|				КОГДА &ТипЦенРассчитывается
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL 
		|								ТОГДА БазовыеЦеныСрезПоследних.Цена * (100 + &ПроцентСкидкиНаценки) / 100
		|							ИНАЧЕ БазовыеЦеныСрезПоследних.Цена * (100 + ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки) / 100
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
		|			КОНЕЦ КАК Цена,
		|			ВЫБОР
		|				КОГДА &ТипЦенРассчитывается
		|					ТОГДА БазовыеЦеныСрезПоследних.Валюта
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Валюта
		|			КОНЕЦ КАК Валюта,
		|			ВЫБОР
		|				КОГДА &ТипЦенРассчитывается
		|					ТОГДА БазовыеЦеныСрезПоследних.ЕдиницаИзмерения
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|			КОНЕЦ КАК ЕдиницаИзмерения
		|		ИЗ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РегТовары.Номенклатура КАК Номенклатура,
		|				РегТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				СУММА(РегТовары.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|					ТоварыНаСкладахОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
		|				ИЗ
		|					РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачПредПериода, &КонПредПериодаГраница, " + Периодичность + ", , ) КАК ТоварыНаСкладахОстаткиИОбороты
		|				
		|				ОБЪЕДИНИТЬ
		|					
		|				ВЫБРАТЬ
		|					ТоварыВРозницеОстаткиИОбороты.Номенклатура,
		|					ТоварыВРозницеОстаткиИОбороты.ХарактеристикаНоменклатуры,
		|					ТоварыВРозницеОстаткиИОбороты.КоличествоКонечныйОстаток
		|				ИЗ
		|					РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&НачПредПериода, &КонПредПериодаГраница, " + Периодичность + ", , ) КАК ТоварыВРозницеОстаткиИОбороты) КАК РегТовары
		|			
		|				СГРУППИРОВАТЬ ПО
		|					РегТовары.Номенклатура,
		|					РегТовары.ХарактеристикаНоменклатуры) КАК Товары
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонПредПериодаГраница, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|				ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|					И Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонПредПериодаГраница, ТипЦен = &БазовыйТипЦен) КАК БазовыеЦеныСрезПоследних
		|				ПО Товары.Номенклатура = БазовыеЦеныСрезПоследних.Номенклатура
		|					И Товары.ХарактеристикаНоменклатуры = БазовыеЦеныСрезПоследних.ХарактеристикаНоменклатуры) КАК ЦеныСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонПредПериодаГраница, ) КАК КурсыВалютСрезПоследних
		|			ПО ЦеныСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
		|		ПО ОстаткиТоваровОстаткиИОбороты.Номенклатура = ЦеныСрезПоследних.Номенклатура
		|			И ОстаткиТоваровОстаткиИОбороты.ХарактеристикаНоменклатуры = ЦеныСрезПоследних.ХарактеристикаНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваровОстаткиИОбороты.Период,
		|	ОстаткиТоваровОстаткиИОбороты.Склад";
		
	КонецЕсли;

	Если ФлагАналогПериод Тогда

		Запрос.УстановитьПараметр("НачАналогПериода",        НачалоАналогПериода);
		Запрос.УстановитьПараметр("КонАналогПериода",        КонецАналогПериода);
		Запрос.УстановитьПараметр("КонАналогПериодаГраница", Новый Граница( КонецАналогПериода,  ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СмещениеАналогПериода",   (ДатаНачалаПериода - НачалоАналогПериода));
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2 КАК ТипПериода,
		|	ДОБАВИТЬКДАТЕ(ОстаткиТоваровОстаткиИОбороты.Период, Секунда, &СмещениеАналогПериода) КАК Период,
		|	ОстаткиТоваровОстаткиИОбороты.Склад КАК Склад,
		|	СУММА(ОстаткиТоваровОстаткиИОбороты.КоличествоКонечныйОстаток * ЦеныСрезПоследних.Цена * (ЦеныСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЦеныСрезПоследних.ЕдиницаИзмерения.Коэффициент) * (КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность) / (&КурсВалютыОтчета / &КратностьвалютыОтчета)) КАК Стоимость
		|ИЗ
		|(ВЫБРАТЬ
		|			РегТовары.Период КАК Период,
		|			РегТовары.Склад КАК Склад,
		|			РегТовары.Номенклатура КАК Номенклатура,
		|			РегТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			СУММА(РегТовары.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
		|				ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
		|				ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|				ТоварыНаСкладахОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
		|			ИЗ
		|				РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериодаГраница, " + Периодичность + ", , ) КАК ТоварыНаСкладахОстаткиИОбороты
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ТоварыВРозницеОстаткиИОбороты.Период КАК Период,
		|				ТоварыВРозницеОстаткиИОбороты.Склад КАК Склад,
		|				ТоварыВРозницеОстаткиИОбороты.Номенклатура,
		|				ТоварыВРозницеОстаткиИОбороты.ХарактеристикаНоменклатуры,
		|				ТоварыВРозницеОстаткиИОбороты.КоличествоКонечныйОстаток
		|			ИЗ
		|				РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериодаГраница, " + Периодичность + ", , ) КАК ТоварыВРозницеОстаткиИОбороты) КАК РегТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегТовары.Период,
		|			РегТовары.Склад,
		|			РегТовары.Номенклатура,
		|			РегТовары.ХарактеристикаНоменклатуры) КАК ОстаткиТоваровОстаткиИОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Товары.Номенклатура КАК Номенклатура,
		|			Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ВЫБОР
		|				КОГДА &ТипЦенРассчитывается
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL 
		|								ТОГДА БазовыеЦеныСрезПоследних.Цена * (100 + &ПроцентСкидкиНаценки) / 100
		|							ИНАЧЕ БазовыеЦеныСрезПоследних.Цена * (100 + ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки) / 100
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
		|			КОНЕЦ КАК Цена,
		|			ВЫБОР
		|				КОГДА &ТипЦенРассчитывается
		|					ТОГДА БазовыеЦеныСрезПоследних.Валюта
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Валюта
		|			КОНЕЦ КАК Валюта,
		|			ВЫБОР
		|				КОГДА &ТипЦенРассчитывается
		|					ТОГДА БазовыеЦеныСрезПоследних.ЕдиницаИзмерения
		|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|			КОНЕЦ КАК ЕдиницаИзмерения
		|		ИЗ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РегТовары.Номенклатура КАК Номенклатура,
		|				РегТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				СУММА(РегТовары.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|					ТоварыНаСкладахОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
		|				ИЗ
		|					РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериодаГраница, " + Периодичность + ", , ) КАК ТоварыНаСкладахОстаткиИОбороты
		|				
		|				ОБЪЕДИНИТЬ
		|					
		|				ВЫБРАТЬ
		|					ТоварыВРозницеОстаткиИОбороты.Номенклатура,
		|					ТоварыВРозницеОстаткиИОбороты.ХарактеристикаНоменклатуры,
		|					ТоварыВРозницеОстаткиИОбороты.КоличествоКонечныйОстаток
		|				ИЗ
		|					РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериодаГраница, " + Периодичность + ", , ) КАК ТоварыВРозницеОстаткиИОбороты) КАК РегТовары
		|			
		|				СГРУППИРОВАТЬ ПО
		|					РегТовары.Номенклатура,
		|					РегТовары.ХарактеристикаНоменклатуры) КАК Товары
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонАналогПериодаГраница, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		|				ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|					И Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонАналогПериодаГраница, ТипЦен = &БазовыйТипЦен) КАК БазовыеЦеныСрезПоследних
		|				ПО Товары.Номенклатура = БазовыеЦеныСрезПоследних.Номенклатура
		|					И Товары.ХарактеристикаНоменклатуры = БазовыеЦеныСрезПоследних.ХарактеристикаНоменклатуры) КАК ЦеныСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонАналогПериодаГраница, ) КАК КурсыВалютСрезПоследних
		|			ПО ЦеныСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
		|		ПО ОстаткиТоваровОстаткиИОбороты.Номенклатура = ЦеныСрезПоследних.Номенклатура
		|			И ОстаткиТоваровОстаткиИОбороты.ХарактеристикаНоменклатуры = ЦеныСрезПоследних.ХарактеристикаНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваровОстаткиИОбороты.Период,
		|	ОстаткиТоваровОстаткиИОбороты.Склад";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст +"
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	ТипПериода,
		|	Склад
		|ИТОГИ
		|	СУММА(Стоимость)
		|ПО
		|	Период ПЕРИОДАМИ( " + Периодичность + ", &НачПериода, &КонПериода),
		|	ТипПериода,
		|	Склад";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Оценка ликвидности склада за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Оценка ликвидности склада за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;

	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемная");

	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;

	ТабДок.Вывести(Секция);

	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Объект;
	
	ПарамРасшифровки = Новый Структура();
	ПарамРасшифровки.Вставить("Имя"                , "ЛиквидностьСклада");
	ПарамРасшифровки.Вставить("ДатаНач"            , ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон"            , ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("ТипЦен"             , ТипЦен);

	Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Расшифровка = ПарамРасшифровки;

	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";

	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("ЛиквидностьСклада", "СреднийЗапас");
	
	ФлагДобавилиСерии = Ложь;
	НомТочки = -1;
	
	ШагТочекПоТипуПериода = 0;
	ОбходТипПериода = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипПериода", "ВСЕ");
	Пока ОбходТипПериода.Следующий() Цикл
		ШагТочекПоТипуПериода = ШагТочекПоТипуПериода + 1;
	КонецЦикла;

	ОбходПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	Пока ОбходПериод.Следующий() Цикл
	
		ОбходТипПериода = ОбходПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипПериода", "ВСЕ");
		Пока ОбходТипПериода.Следующий() Цикл
			
			НомТочки = НомТочки + 1;
			Если ОбходТипПериода.ТипПериода = 0 Тогда
				Диаграмма.Точки.Добавить(Формат(ОбходПериод.Период, "ДФ=дд.МММ"));
			ИначеЕсли ОбходТипПериода.ТипПериода = 1 Тогда
				Диаграмма.Точки.Добавить("Пред. период");
			ИначеЕсли ОбходТипПериода.ТипПериода = 2 Тогда
				Диаграмма.Точки.Добавить("Аналог. период");
			КонецЕсли;
			
			НомСерии = -1;
			ОбходСклад = ОбходТипПериода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад", "ВСЕ");
			Пока ОбходСклад.Следующий() Цикл
			
				НомСерии = НомСерии + 1;
				Если НЕ ФлагДобавилиСерии Тогда
					Диаграмма.Серии.Добавить(ОбходСклад.Склад.Наименование);
				КонецЕсли;
				
				Если ОбходСклад.Стоимость = NULL ИЛИ ОбходСклад.Стоимость = Неопределено Тогда
					ЗначениеВДиаграмму = ПолучитьПредыдущееЗначениеДиаграммы(Диаграмма, НомТочки, НомСерии, ШагТочекПоТипуПериода);
				Иначе
					ЗначениеВДиаграмму = ОбходСклад.Стоимость;
				КонецЕсли;
				
				Диаграмма.УстановитьЗначение(НомТочки, НомСерии, ЗначениеВДиаграмму);
				
			КонецЦикла;
			
			ФлагДобавилиСерии = ФлагДобавилиСерии ИЛИ НомСерии > 0;
			
		КонецЦикла;
		
	КонецЦикла;

	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("ЛиквидностьСклада", ТабДок);	

КонецПроцедуры // ЛиквидностьСкладаФормирование()

// Процедура расшифровки показателя "Оценка ликвидности склада"
//
Процедура ЛиквидностьСкладаРасшифровка(Параметры)

	Расшифровка = Параметры["Расшифровка"];

	Отчет = Отчеты.СтоимостнаяОценкаСкладаВЦенахНоменклатуры.Создать();
	Форма = Отчет.ПолучитьФорму("Форма", Параметры["ЭтаФорма"], "ЛиквидностьСкладаРасшифровка");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	Отчет.Режим = 0;
	Отчет.ТипЦен = Расшифровка["ТипЦен"];
	Отчет.УниверсальныйОтчет.ДатаНач = Расшифровка["ДатаНач"];
	Отчет.УниверсальныйОтчет.ДатаКон = Расшифровка["ДатаКон"];
	Отчет.УниверсальныйОтчет.ПоказыватьЗаголовок = Ложь;
	Отчет.УстановитьНачальныеНастройки();

	Форма.ОбновитьОтчет();
	Форма.Открыть();
	
КонецПроцедуры // ЛиквидностьСкладаРасшифровка()

// Процедура обработки показателя "Оценка ликвидности склада"
//
Процедура ЛиквидностьСклада(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		ЛиквидностьСкладаИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		ЛиквидностьСкладаФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		ЛиквидностьСкладаРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // ЛиквидностьСклада()

// Процедура инициализации показателя "Задолженность комиссионеров"
//
Процедура Взаиморасчеты_ЗадолженностьКомиссионеровИнициализация()
	
	ДобавитьВДеревоПоказателей("Взаиморасчеты_ЗадолженностьКомиссионеров", "Задолженность комиссионеров", "", "Взаиморасчеты");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийРазмерДолга"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийДолг";
	НоваяСтрока.ПредставлениеПараметра = "Средний размер долга";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 15, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Взаиморасчеты_ЗадолженностьКомиссионеров", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Взаиморасчеты_ЗадолженностьКомиссионеров", ТабПарам);
	
КонецПроцедуры // Взаиморасчеты_ЗадолженностьКомиссионеровИнициализация()

// Процедура формирование показателя "Задолженность комиссионеров"
//
Процедура Взаиморасчеты_ЗадолженностьКомиссионеровФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Взаиморасчеты_ЗадолженностьКомиссионеров", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Взаиморасчеты_ЗадолженностьКомиссионеров", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Взаиморасчеты_ЗадолженностьКомиссионеров", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Взаиморасчеты_ЗадолженностьКомиссионеров") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Взаиморасчеты_ЗадолженностьКомиссионеров"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Задолженность комиссионеров"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Взаиморасчеты_ЗадолженностьКомиссионеров", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Взаиморасчеты_ЗадолженностьКомиссионеров", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК ТипПериода,
		|	ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК Долг,
		|	ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты";
	
	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	1 КАК ТипПериода,
			|	ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК Долг,
			|	ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ТоварыПереданные.ОстаткиИОбороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", , ) КАК ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|	2 КАК ТипПериода,
			|	ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК Долг,
			|	ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ТоварыПереданные.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", , ) КАК ОстаткиТоваровКомпанииОтданныеОстаткиИОбороты";
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Период";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("Дата",          СоздатьТип("Дата"));
	ТабДанные.Колонки.Добавить("ТекПериод",     СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("ПредПериод",    СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("АналогПериод",  СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("ФлагТекПериод",     СоздатьТип("Булево"));
	ТабДанные.Колонки.Добавить("ФлагПредПериод",    СоздатьТип("Булево"));
	ТабДанные.Колонки.Добавить("ФлагАналогПериод",  СоздатьТип("Булево"));
	ТабДанные.Индексы.Добавить("Дата");

	Для Каждого Обход Из РезультатЗапроса Цикл
		
		Если Обход.ТипПериода = 0 Тогда
			
			ПриведеннаяДата = Обход.Период;
			ИмяКолонки = "ТекПериод";
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда
			
			ПриведеннаяДата = Обход.Период + СмещениеПредИнтервала;
			ИмяКолонки = "ПредПериод";
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда
			
			ПриведеннаяДата = Обход.Период + СмещениеАналогИнтервала;
			ИмяКолонки = "АналогПериод";
			
		КонецЕсли;

		ТекСтрока = ТабДанные.Найти(ПриведеннаяДата, "Дата");
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = ТабДанные.Добавить();
		КонецЕсли;
		ТекСтрока.Дата = ПриведеннаяДата;
		ТекСтрока[ИмяКолонки] = Обход.Долг;
		ТекСтрока["Флаг" + ИмяКолонки] = Истина;
		
	КонецЦикла;
	
	ТабДанные.Сортировать("Дата");

	// Обработаем полученные данные
	ПредСтрока = Неопределено;
	Для Каждого ТекСтрока Из ТабДанные Цикл
		Если ПредСтрока = Неопределено Тогда
			ПредСтрока = ТекСтрока;
			Продолжить;
		КонецЕсли;

		Если Не ТекСтрока.ФлагТекПериод Тогда
			ТекСтрока.ТекПериод = ТекСтрока.ТекПериод + ПредСтрока.ТекПериод;
		КонецЕсли;
		Если Не ТекСтрока.ФлагПредПериод Тогда
			ТекСтрока.ПредПериод = ТекСтрока.ПредПериод + ПредСтрока.ПредПериод;
		КонецЕсли;
		Если Не ТекСтрока.ФлагАналогПериод Тогда
			ТекСтрока.АналогПериод = ТекСтрока.АналогПериод + ПредСтрока.АналогПериод;
		КонецЕсли;

		ПредСтрока = ТекСтрока;
		
	КонецЦикла;
	
	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Задолженность комиссионеров за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Задолженность комиссионеров за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаСНакоплениемОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",     "Взаиморасчеты_ЗадолженностьКомиссионеров");
	//ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	//
	//Секция.Рисунки.ДиаграммаГистограммаСНакоплениемОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Взаиморасчеты_ЗадолженностьКомиссионеров", "СреднийДолг");
	
	Диаграмма.Серии.Добавить("Тек.период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Прош.период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналог.период");
	КонецЕсли;

	НомТочки = 0;
	Для Каждого Строка Из ТабДанные Цикл
			
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
			НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.ТекПериод);
			
			Если ФлагПредПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомТочки = НомТочки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Взаиморасчеты_ЗадолженностьКомиссионеров", ТабДок);

КонецПроцедуры // Взаиморасчеты_ЗадолженностьКомиссионеровФормирование()

// Процедура расшифровки показателя "Задолженность комиссионеров"
//
Процедура Взаиморасчеты_ЗадолженностьКомиссионеровРасшифровка(Параметры)
	
КонецПроцедуры // Взаиморасчеты_ЗадолженностьКомиссионеровРасшифровка()

// Процедура обработки показателя "Задолженность комиссионеров"
//
Процедура Взаиморасчеты_ЗадолженностьКомиссионеров(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Взаиморасчеты_ЗадолженностьКомиссионеровИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Взаиморасчеты_ЗадолженностьКомиссионеровФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Взаиморасчеты_ЗадолженностьКомиссионеровРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Взаиморасчеты_ЗадолженностьКомиссионеров()

// Процедура инициализации показателя "Просроченная задолженность комиссионеров"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровИнициализация()
	
	ДобавитьВДеревоПоказателей("Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", "Просроченная задолженность комиссионеров", "", "Взаиморасчеты");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "Периодичность"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "Периодичность";
	НоваяСтрока.ПредставлениеПараметра = "Периодичность";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "СреднийРазмерДолга"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "СреднийДолг";
	НоваяСтрока.ПредставлениеПараметра = "Средний размер долга";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 15, 2);
	НоваяСтрока.Значение               = 0;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", ТабПарам);
	
КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровИнициализация()

// Процедура формирование показателя "Просроченная задолженность комиссионеров"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровФормирование()

	Периодичность = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", "Периодичность");
	ПериодАнализа = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", "АналогПериод");

	// Проверим корректность значений параметров показателей
	Если СтруктураПараметровПоказателей.Свойство("Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров") Тогда
		
		ТабПарам = СтруктураПараметровПоказателей["Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров"];
		Строка   = ТабПарам.Найти("Периодичность", "Имя");
		Список1  = Строка.Список;
		Строка   = ТабПарам.Найти("ПериодАнализа", "Имя");
		Список2  = Строка.Список;
		Поз1 = Список1.Индекс( Список1.НайтиПоЗначению( Периодичность));
		Поз2 = Список2.Индекс( Список2.НайтиПоЗначению( ПериодАнализа));

		Если Поз1 > Поз2 Тогда
			Сообщить("Показатель ""Просроченная задолженность комиссионеров"" значение периодичности не может превышать период анализа", СтатусСообщения.БезСтатуса);
			Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			Периодичность,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, Периодичность, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|
		|	0 КАК ТипПериода,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента КАК Договор,
		|	ВЫБОР КОГДА СУММА(КонтрагентыВзаиморасчетыУпр.СуммаВзаиморасчетовКонечныйОстаток) = 0 ТОГДА 0
		|	ИНАЧЕ СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток)*
		|		СУММА(КонтрагентыВзаиморасчетыУпр.СуммаУпрКонечныйОстаток)/
		|		СУММА(КонтрагентыВзаиморасчетыУпр.СуммаВзаиморасчетовКонечныйОстаток)
		|	КОНЕЦ КАК Долг,
		|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток) КАК ДолгВзаиморасчеты,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата КАК ДатаДок,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом КАК Док
		|	
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Обороты КАК ОстаткиТоваровКомпанииОтданныеОбороты
		|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента = ОстаткиТоваровКомпанииОтданныеОбороты.ДоговорКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ  РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачПериода, &КонПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыУпр
		|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента = КонтрагентыВзаиморасчетыУпр.ДоговорКонтрагента
		|		И  КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период = КонтрагентыВзаиморасчетыУпр.Период
        |
		|ГДЕ
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности = ИСТИНА И
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
        |
		|СГРУППИРОВАТЬ ПО
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента,
		|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период";
	
	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|
			|	1 КАК ТипПериода,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента КАК Договор,
			|	ВЫБОР КОГДА СУММА(КонтрагентыВзаиморасчетыУпр.СуммаВзаиморасчетовКонечныйОстаток) = 0 ТОГДА 0
			|	ИНАЧЕ СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток)*
			|		СУММА(КонтрагентыВзаиморасчетыУпр.СуммаУпрКонечныйОстаток)/
			|		СУММА(КонтрагентыВзаиморасчетыУпр.СуммаВзаиморасчетовКонечныйОстаток)
			|	КОНЕЦ КАК Долг,
			|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток) КАК ДолгВзаиморасчеты,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата КАК ДатаДок,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом КАК Док
			|	
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Обороты КАК ОстаткиТоваровКомпанииОтданныеОбороты
			|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента = ОстаткиТоваровКомпанииОтданныеОбороты.ДоговорКонтрагента
			|		ЛЕВОЕ СОЕДИНЕНИЕ  РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачПредПериода, &КонПредПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыУпр
			|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента = КонтрагентыВзаиморасчетыУпр.ДоговорКонтрагента
			|		И  КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период = КонтрагентыВзаиморасчетыУпр.Период

	        |
			|ГДЕ
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности = ИСТИНА И
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	        |
			|СГРУППИРОВАТЬ ПО
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
            |
			|ВЫБРАТЬ
			|
			|	2 КАК ТипПериода,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента КАК Договор,
			|	ВЫБОР КОГДА СУММА(КонтрагентыВзаиморасчетыУпр.СуммаВзаиморасчетовКонечныйОстаток) = 0 ТОГДА 0
			|	ИНАЧЕ СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток)*
			|		СУММА(КонтрагентыВзаиморасчетыУпр.СуммаУпрКонечныйОстаток)/
			|		СУММА(КонтрагентыВзаиморасчетыУпр.СуммаВзаиморасчетовКонечныйОстаток)
			|	КОНЕЦ КАК Долг,
			|	СУММА(КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток) КАК ДолгВзаиморасчеты,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период КАК Период,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата КАК ДатаДок,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом КАК Док
			|	
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Обороты КАК ОстаткиТоваровКомпанииОтданныеОбороты
			|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента = ОстаткиТоваровКомпанииОтданныеОбороты.ДоговорКонтрагента
			|		ЛЕВОЕ СОЕДИНЕНИЕ  РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачАналогПериода, &КонАналогПериода, " + Периодичность + ", , ) КАК КонтрагентыВзаиморасчетыУпр
			|		ПО КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента = КонтрагентыВзаиморасчетыУпр.ДоговорКонтрагента
			|		И  КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период = КонтрагентыВзаиморасчетыУпр.Период
	        |
			|ГДЕ
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности = ИСТИНА И
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	        |
			|СГРУППИРОВАТЬ ПО
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДокументРасчетовСКонтрагентом,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.ДоговорКонтрагента,
			|	КонтрагентыВзаиморасчетыКомпанииОстаткиИОбороты.Период";
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Период";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//РезультатЗапроса.Колонки.Добавить("ДатаОплаты", СоздатьТип("Дата"));

    СписокДоговоров    = Новый СписокЗначений;
    СписокКонтрагентов = Новый СписокЗначений;
	
	НенужныеСтроки = Новый Массив;
	Для Каждого Обход Из РезультатЗапроса Цикл
		ДатаОплаты = Обход.ДатаДок + Обход.Договор.ДопустимоеЧислоДнейЗадолженности * 3600 * 24;
		Если Обход.Период > ДатаОплаты Тогда
			Если СписокДоговоров.НайтиПоЗначению(Обход.Договор) = Неопределено Тогда
				СписокДоговоров.Добавить(Обход.Договор);
			КонецЕсли;
			Если СписокКонтрагентов.НайтиПоЗначению(Обход.Договор.Владелец) = Неопределено Тогда
				СписокКонтрагентов.Добавить(Обход.Договор.Владелец);
			КонецЕсли;
		Иначе
			НенужныеСтроки.Добавить(Обход);
		КонецЕсли;
	КонецЦикла;
	Для К = 0 По НенужныеСтроки.Количество() - 1 Цикл
		РезультатЗапроса.Удалить( НенужныеСтроки[К]);
	КонецЦикла;
	НенужныеСтроки = 0;

	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("Дата",          СоздатьТип("Дата"));
	ТабДанные.Колонки.Добавить("ТекПериод",     СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("ПредПериод",    СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("АналогПериод",  СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("ФлагТекПериод",     СоздатьТип("Булево"));
	ТабДанные.Колонки.Добавить("ФлагПредПериод",    СоздатьТип("Булево"));
	ТабДанные.Колонки.Добавить("ФлагАналогПериод",  СоздатьТип("Булево"));
	ТабДанные.Индексы.Добавить("Дата");

	Для Каждого Обход Из РезультатЗапроса Цикл
		
		Если Обход.ТипПериода = 0 Тогда
			
			ПриведеннаяДата = Обход.Период;
			ИмяКолонки = "ТекПериод";
			
		ИначеЕсли Обход.ТипПериода = 1 Тогда
			
			ПриведеннаяДата = Обход.Период + СмещениеПредИнтервала;
			ИмяКолонки = "ПредПериод";
			
		ИначеЕсли Обход.ТипПериода = 2 Тогда
			
			ПриведеннаяДата = Обход.Период + СмещениеАналогИнтервала;
			ИмяКолонки = "АналогПериод";
			
		КонецЕсли;

		ТекСтрока = ТабДанные.Найти(ПриведеннаяДата, "Дата");
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = ТабДанные.Добавить();
		КонецЕсли;
		ТекСтрока.Дата = ПриведеннаяДата;
		ТекСтрока[ИмяКолонки] = Обход.Долг;
		ТекСтрока["Флаг" + ИмяКолонки] = Истина;
		
	КонецЦикла;
	
	ТабДанные.Сортировать("Дата");

	// Обработаем полученные данные
	ПредСтрока = Неопределено;
	Для Каждого ТекСтрока Из ТабДанные Цикл
		Если ПредСтрока = Неопределено Тогда
			ПредСтрока = ТекСтрока;
			Продолжить;
		КонецЕсли;

		Если Не ТекСтрока.ФлагТекПериод Тогда
			ТекСтрока.ТекПериод = ТекСтрока.ТекПериод + ПредСтрока.ТекПериод;
		КонецЕсли;
		Если Не ТекСтрока.ФлагПредПериод Тогда
			ТекСтрока.ПредПериод = ТекСтрока.ПредПериод + ПредСтрока.ПредПериод;
		КонецЕсли;
		Если Не ТекСтрока.ФлагАналогПериод Тогда
			ТекСтрока.АналогПериод = ТекСтрока.АналогПериод + ПредСтрока.АналогПериод;
		КонецЕсли;

		ПредСтрока = ТекСтрока;
		
	КонецЦикла;
	
	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Просроченная задолженность комиссионеров за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Просроченная задолженность комиссионеров за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

	//ПарамРасшифровки = Новый Структура;
	//ПарамРасшифровки.Вставить("Имя",     "Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров");
	//ПарамРасшифровки.Вставить("ДатаНач", ДатаНачалаПериода);
	//ПарамРасшифровки.Вставить("ДатаКон", ДатаКонцаПериода);
	//ПарамРасшифровки.Вставить("Договора",    СписокДоговоров);
	//ПарамРасшифровки.Вставить("Контрагенты", СписокКонтрагентов);
	//
	//Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.БазовоеЗначение = ПолучитьПараметрПоказателя("Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", "СреднийДолг");
	
	Диаграмма.Серии.Добавить("Тек.период");
	Если ФлагПредПериод Тогда
		Диаграмма.Серии.Добавить("Прош.период");
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Серии.Добавить("Аналог.период");
	КонецЕсли;

	НомТочки = 0;
	Для Каждого Строка Из ТабДанные Цикл
			
			Диаграмма.Точки.Добавить(Формат(Строка.Дата, "ДФ=дд.МММ"));
			
            НомСерии = 0;
			Диаграмма.УстановитьЗначение(НомТочки, 0, Строка.ТекПериод);
			
			Если ФлагПредПериод Тогда
	            НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.ПредПериод);
			КонецЕсли;
			
			Если ФлагАналогПериод Тогда
				НомСерии = НомСерии + 1;
				Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.АналогПериод);
			КонецЕсли;

			НомТочки = НомТочки + 1;
			
		КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров", ТабДок);

КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровФормирование()

// Процедура расшифровки показателя "Просроченная задолженность комиссионеров"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровРасшифровка(Параметры)

КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровРасшифровка()

// Процедура обработки показателя "Просроченная задолженность комиссионеров"
//
Процедура Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеровРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // Взаиморасчеты_ПросроченнаяЗадолженностьКомиссионеров()

// Процедура обработки показателя "Взаиморасчеты"
//
Процедура Взаиморасчеты(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ДобавитьВДеревоПоказателей("Взаиморасчеты", "Взаиморасчеты", "",, Истина);
			
		ТабПарам = СоздатьТабПарам();

		// Добавить данные в структуру параметров показателей
		СтруктураПараметровПоказателей.Вставить("Взаиморасчеты", ТабПарам);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // Взаиморасчеты()

// Процедура обработки показателя "Денежные средства"
//
Процедура ДенежныеСредства(СтрДействие, Параметры = 0)
	
	Если СтрДействие = "Инициализация" Тогда
		
		ДобавитьВДеревоПоказателей("ДенежныеСредства", "Денежные средства", "",, Истина);
			
		ТабПарам = СоздатьТабПарам();

		// Добавить данные в структуру параметров показателей
		СтруктураПараметровПоказателей.Вставить("ДенежныеСредства", ТабПарам);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;

КонецПроцедуры // ДенежныеСредства()

// Процедура инициализации показателя "Коэффициент удержания и привлечения покупателей"
//
Процедура КоэфПривлеченияПокупателейИнициализация()
	
	ДобавитьВДеревоПоказателей("КоэфПривлеченияПокупателей", "Коэффициент удержания и привлечения покупателей", "");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("КоэфПривлеченияПокупателей", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("КоэфПривлеченияПокупателей", ТабПарам);
	
КонецПроцедуры // КоэфПривлеченияПокупателейИнициализация()

// Процедура формирование показателя "Коэффициент удержания и привлечения покупателей"
//
Процедура КоэфПривлеченияПокупателейФормирование()

	ПериодАнализа = ПолучитьПараметрПоказателя("КоэфПривлеченияПокупателей", "ПериодАнализа");
	АналогПериод  = ПолучитьПараметрПоказателя("КоэфПривлеченияПокупателей", "АналогПериод");

	ДатаКонцаПериода  = КонецДня(ДатаКон);
	ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя("КоэфПривлеченияПокупателей", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
		НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			ПериодАнализа,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "КоэфПривлеченияПокупателей", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, ПериодАнализа, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", Новый Граница(ДатаНачалаПериода - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонПериода", Новый Граница(ДатаКонцаПериода, ВидГраницы.Включая));
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0                             КАК ТипПериода,
		|	СтадииКонтрагентов.НачСтадия  КАК НачСтадия,
		|	СтадииКонтрагентов.КонСтадия  КАК КонСтадия,
		|	СтадииКонтрагентов.Контрагент КАК Контрагент,
		|	ВЫБОР 
		|		КОГДА ПродажиКомпанииОбороты.КоличествоОборот > 0 
		|		ТОГДА Истина
		|		ИНАЧЕ Ложь
		|		КОНЕЦ                           КАК БылиПродажи
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		МАКСИМУМ(НачКонСтадииКонтрагентов.НачСтадия) КАК НачСтадия,
		|		МАКСИМУМ(НачКонСтадииКонтрагентов.КонСтадия) КАК КонСтадия,
		|		НачКонСтадииКонтрагентов.Контрагент          КАК Контрагент
		|	ИЗ
		|		(
		|		ВЫБРАТЬ
		|			НачальнаяСтадия.Стадия     КАК НачСтадия,
		|			NULL                       КАК КонСтадия,
		|			НачальнаяСтадия.Контрагент КАК Контрагент
		|		ИЗ
		|			РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&НачПериода, ) КАК НачальнаяСтадия
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			NULL,
		|			КонечнаяСтадия.Стадия,
		|			КонечнаяСтадия.Контрагент
		|		ИЗ
		|			РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&КонПериода, ) КАК КонечнаяСтадия
		|		) КАК НачКонСтадииКонтрагентов
		|	СГРУППИРОВАТЬ ПО
		|		НачКонСтадииКонтрагентов.Контрагент
		|	) КАК СтадииКонтрагентов
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода) КАК ПродажиКомпанииОбороты
		|ПО
		|	СтадииКонтрагентов.Контрагент = ПродажиКомпанииОбороты.Контрагент
		|";

	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", Новый Граница(НачалоПредПериода - 1, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПредПериода", Новый Граница(КонецПредПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	1                             КАК ТипПериода,
			|	СтадииКонтрагентов.НачСтадия  КАК НачСтадия,
			|	СтадииКонтрагентов.КонСтадия  КАК КонСтадия,
			|	СтадииКонтрагентов.Контрагент КАК Контрагент,
			|	ВЫБОР 
			|		КОГДА ПродажиКомпанииОбороты.КоличествоОборот > 0 
			|		ТОГДА Истина
			|		ИНАЧЕ Ложь
			|		КОНЕЦ                           КАК БылиПродажи
			|ИЗ
			|	(
			|	ВЫБРАТЬ
			|		МАКСИМУМ(НачКонСтадииКонтрагентов.НачСтадия) КАК НачСтадия,
			|		МАКСИМУМ(НачКонСтадииКонтрагентов.КонСтадия) КАК КонСтадия,
			|		НачКонСтадииКонтрагентов.Контрагент          КАК Контрагент
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НачальнаяСтадия.Стадия     КАК НачСтадия,
			|			NULL                       КАК КонСтадия,
			|			НачальнаяСтадия.Контрагент КАК Контрагент
			|		ИЗ
			|			РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&НачПредПериода, ) КАК НачальнаяСтадия
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			NULL,
			|			КонечнаяСтадия.Стадия,
			|			КонечнаяСтадия.Контрагент
			|		ИЗ
			|			РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&КонПредПериода, ) КАК КонечнаяСтадия
			|		) КАК НачКонСтадииКонтрагентов
			|	СГРУППИРОВАТЬ ПО
			|		НачКонСтадииКонтрагентов.Контрагент
			|	) КАК СтадииКонтрагентов
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.Продажи.Обороты(&НачПредПериода, &КонПредПериода) КАК ПродажиКомпанииОбороты
			|ПО
			|	СтадииКонтрагентов.Контрагент = ПродажиКомпанииОбороты.Контрагент
			|";
		
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", Новый Граница(НачалоАналогПериода - 1, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонАналогПериода", Новый Граница(КонецАналогПериода, ВидГраницы.Включая));
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	2 КАК ТипПериода,
			|	СтадииКонтрагентов.НачСтадия  КАК НачСтадия,
			|	СтадииКонтрагентов.КонСтадия  КАК КонСтадия,
			|	СтадииКонтрагентов.Контрагент КАК Контрагент,
			|	ВЫБОР 
			|		КОГДА ПродажиКомпанииОбороты.КоличествоОборот > 0 
			|		ТОГДА Истина
			|		ИНАЧЕ Ложь
			|		КОНЕЦ                           КАК БылиПродажи
			|ИЗ
			|	(
			|	ВЫБРАТЬ
			|		МАКСИМУМ(НачКонСтадииКонтрагентов.НачСтадия) КАК НачСтадия,
			|		МАКСИМУМ(НачКонСтадииКонтрагентов.КонСтадия) КАК КонСтадия,
			|		НачКонСтадииКонтрагентов.Контрагент          КАК Контрагент
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НачальнаяСтадия.Стадия     КАК НачСтадия,
			|			NULL                       КАК КонСтадия,
			|			НачальнаяСтадия.Контрагент КАК Контрагент
			|		ИЗ
			|			РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&НачАналогПериода, ) КАК НачальнаяСтадия
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			NULL,
			|			КонечнаяСтадия.Стадия,
			|			КонечнаяСтадия.Контрагент
			|		ИЗ
			|			РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&КонАналогПериода, ) КАК КонечнаяСтадия
			|		) КАК НачКонСтадииКонтрагентов
			|	СГРУППИРОВАТЬ ПО
			|		НачКонСтадииКонтрагентов.Контрагент
			|	) КАК СтадииКонтрагентов
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.Продажи.Обороты(&НачАналогПериода, &КонАналогПериода) КАК ПродажиКомпанииОбороты
			|ПО
			|	СтадииКонтрагентов.Контрагент = ПродажиКомпанииОбороты.Контрагент
			|";
			
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	НачПокупат = Новый Массив(3);
	КонПотерян = Новый Массив(3);
	КонРазовый = Новый Массив(3);

	НачПокупат[0] = 0; НачПокупат[1] = 0; НачПокупат[2] = 0;
	КонПотерян[0] = 0; КонПотерян[1] = 0; КонПотерян[2] = 0;
	КонРазовый[0] = 0; КонРазовый[1] = 0; КонРазовый[2] = 0;
	
	СписокМенеджеров = Новый СписокЗначений;
	Для Каждого Обход Из РезультатЗапроса Цикл

		Если Обход.НачСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель
			ИЛИ Обход.НачСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
				НачПокупат[Обход.ТипПериода] = НачПокупат[Обход.ТипПериода] + 1;
		КонецЕсли;
			
		Если Обход.КонСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель
			И НЕ Обход.НачСтадия = NULL
			И НЕ Обход.КонСтадия = Обход.НачСтадия Тогда
				КонПотерян[Обход.ТипПериода] = КонПотерян[Обход.ТипПериода] + 1;
		КонецЕсли;
			
		Если (Обход.КонСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель
			И НЕ Обход.НачСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель)
			ИЛИ (Обход.КонСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель
			И НЕ Обход.НачСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель) Тогда
				КонРазовый[Обход.ТипПериода] = КонРазовый[Обход.ТипПериода] + 1;
		КонецЕсли;

		Если Не Обход.Контрагент.ОсновнойМенеджерПокупателя = Справочники["Пользователи"].ПустаяСсылка()
			И СписокМенеджеров.НайтиПоЗначению(Обход.Контрагент.ОсновнойМенеджерПокупателя) = Неопределено Тогда
				СписокМенеджеров.Добавить(Обход.Контрагент.ОсновнойМенеджерПокупателя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Коэффициент удержания и привлечения покупателей за " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Коэффициент удержания и привлечения покупателей за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
		ТабДок = Новый ТабличныйДокумент;
		Макет  = мМакет.ПолучитьОбласть("ГистограммаОбъемная");
		
		Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяЗаголовок");
		Секция.Параметры.Заголовок = СтрПериод;
		
		ТабДок.Вывести(Секция);
		
		Секция = Макет.ПолучитьОбласть("ГистограммаОбъемнаяДиаграмма");
		Диаграмма = Секция.Рисунки.ДиаграммаГистограммаОбъемная.Объект;

		ПарамРасшифровки = Новый Структура;
		ПарамРасшифровки.Вставить("Имя",       "КоэфПривлеченияПокупателей");
		ПарамРасшифровки.Вставить("ДатаНач",   ДатаНачалаПериода);
		ПарамРасшифровки.Вставить("ДатаКон",   ДатаКонцаПериода);
		ПарамРасшифровки.Вставить("Менеджеры", СписокМенеджеров);
		
		Секция.Рисунки.ДиаграммаГистограммаОбъемная.Расшифровка = ПарамРасшифровки;
		
		Диаграмма.Очистить();
		Диаграмма.ОбластьЗаголовка.Текст = "";
		Диаграмма.Серии.Добавить("Коэф. привлечения");
		Диаграмма.Серии.Добавить("Коэф. удержания");
		Диаграмма.Серии.Добавить("Коэф. привлечения и удержания");
		Диаграмма.Точки.Добавить("Текущий период");
		Если ФлагПредПериод Тогда
			Диаграмма.Точки.Добавить("Предыдущий период");
		КонецЕсли;
		Если ФлагАналогПериод Тогда
			Диаграмма.Точки.Добавить("Аналогичный период");
		КонецЕсли;

		Для ТипПериода = 0 По 2 Цикл
			НомТочки = 0;
			
			// Коэф. привлечения
			ПокупателейНаНачало = ?(НачПокупат[0] = 0, 1, НачПокупат[0]);
			КоэфПривлечения = Окр(КонРазовый[0] / ПокупателейНаНачало * 100, 2, 1);
			Диаграмма.УстановитьЗначение(НомТочки, 0, КоэфПривлечения);
			// Коэф. удержания
			КоэфУдержания = Окр(КонПотерян[0] / ПокупателейНаНачало * 100, 2, 1);
			Диаграмма.УстановитьЗначение(НомТочки, 1, КоэфУдержания);
			// Коэф. общий
			КоэфОбщий = КоэфПривлечения - КоэфУдержания;
			Диаграмма.УстановитьЗначение(НомТочки, 2, КоэфОбщий);
			
			НомТочки = НомТочки + 1;

			// Предыдущий период
			Если ФлагПредПериод Тогда
				
				// Коэф. привлечения
				ПокупателейНаНачало = ?(НачПокупат[1] = 0, 1, НачПокупат[1]);
				КоэфПривлечения = Окр(КонРазовый [1] / ПокупателейНаНачало * 100, 2, 1);
				Диаграмма.УстановитьЗначение(НомТочки, 0, КоэфПривлечения);
				// Коэф. удержания
				КоэфУдержания = Окр(КонПотерян[1] / ПокупателейНаНачало * 100, 2, 1);
				Диаграмма.УстановитьЗначение(НомТочки, 1, КоэфУдержания);
				// Коэф. общий
				КоэфОбщий = КоэфПривлечения - КоэфУдержания;
				Диаграмма.УстановитьЗначение(НомТочки, 2, КоэфОбщий);
				
				НомТочки = НомТочки + 1;
				
			КонецЕсли;

			// Аналогичный период
			Если ФлагАналогПериод Тогда
				
				// Коэф. привлечения
				ПокупателейНаНачало = ?(НачПокупат[2] = 0, 1, НачПокупат[2]);
				КоэфПривлечения = Окр(КонРазовый [2] / ПокупателейНаНачало * 100, 2, 1);
				Диаграмма.УстановитьЗначение(НомТочки, 0, КоэфПривлечения);
				// Коэф. удержания
				КоэфУдержания = Окр(КонПотерян[2] / ПокупателейНаНачало * 100, 2, 1);
				Диаграмма.УстановитьЗначение(НомТочки, 1, КоэфУдержания);
				// Коэф. общий
				КоэфОбщий = КоэфПривлечения - КоэфУдержания;
				Диаграмма.УстановитьЗначение(НомТочки, 2, КоэфОбщий);
				
				НомТочки = НомТочки + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.Вывести(Секция);
		мСтруктТабДок.Вставить("КоэфПривлеченияПокупателей", ТабДок);

КонецПроцедуры // КоэфПривлеченияПокупателейФормирование()

// Процедура расшифровки показателя "Коэффициент удержания и привлечения покупателей"
//
Процедура КоэфПривлеченияПокупателейРасшифровка(Параметры)
	
	Расшифровка = Параметры["Расшифровка"];

	Отчет = Отчеты.ПоказателиРаботыМенеджеров.Создать();
	Форма = Отчет.ПолучитьФорму("Форма", Параметры["ЭтаФорма"], "КоэфПривлеченияПокупателейРасшифровка");
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	
	Отчет.ДатаНачала = Расшифровка["ДатаНач"];
	Отчет.ДатаКонца = Расшифровка["ДатаКон"];
	
	Для Каждого Показатель Из Отчет.ПоказателиОтчета Цикл
		
		Если Показатель.ИмяПоказателя = "ЧислоСделок"
			ИЛИ Показатель.ИмяПоказателя = "ЧислоПервыхСделок"
			ИЛИ Показатель.ИмяПоказателя = "СреднееЧислоСделок" Тогда
			Показатель.ИспользованиеПоказателя = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Отчет.СформироватьОтчет(Форма.ЭлементыФормы.ПолеТабличногоДокумента);
	
	Форма.Открыть();
	
КонецПроцедуры // КоэфПривлеченияПокупателейРасшифровка()

// Процедура обработки показателя "Коэффициент удержания и привлечения покупателей"
//
Процедура КоэфПривлеченияПокупателей(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		КоэфПривлеченияПокупателейИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		КоэфПривлеченияПокупателейФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		КоэфПривлеченияПокупателейРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // КоэфПривлеченияПокупателей()

// Процедура инициализации показателя "Рейтинг лучших менеджеров"
//
Процедура РейтингМенеджеровИнициализация()
	
	ДобавитьВДеревоПоказателей("РейтингМенеджеров", "Рейтинг лучших менеджеров", "");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "МаксМенеджеров"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "МаксМенеджеров";
	НоваяСтрока.ПредставлениеПараметра = "Макс. количество менеджеров";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 5, 0);
	НоваяСтрока.Значение               = 10;
	
	// Параметр "КритерийОценки"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "КритерийОценки";
	НоваяСтрока.ПредставлениеПараметра = "Критерий оценки";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Сумма выручки");
	НоваяСтрока.Список.Добавить("Сумма прибыли");
	//НоваяСтрока.Список.Добавить("Сумма оплаты");
	НоваяСтрока.Список.Добавить("Количество продаж");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("РейтингМенеджеров", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("РейтингМенеджеров", ТабПарам);
	
КонецПроцедуры // РейтингМенеджеровИнициализация()

// Процедура формирование показателя "Рейтинг лучших менеджеров"
//
Процедура РейтингМенеджеровФормирование()
	
	ПериодАнализа  = ПолучитьПараметрПоказателя( "РейтингМенеджеров", "ПериодАнализа");
	АналогПериод   = ПолучитьПараметрПоказателя( "РейтингМенеджеров", "АналогПериод");
	КритерийОценки = ПолучитьПараметрПоказателя( "РейтингМенеджеров", "КритерийОценки");
	МаксМенеджеров = ПолучитьПараметрПоказателя( "РейтингМенеджеров", "МаксМенеджеров");

	МаксМенеджеров = Окр(МаксМенеджеров, 0, 1);
	Если МаксМенеджеров = 0 Тогда
		МаксМенеджеров = "";
	Иначе
		МаксМенеджеров = "ПЕРВЫЕ " + Формат(МаксМенеджеров, "ЧЦ=");
	КонецЕсли;

	// Проверим корректность значений параметров показателей
	Если НЕ ЗначениеЗаполнено(КритерийОценки) Тогда
		Сообщить("Показатель ""Рейтинг лучших менеджеров"" не указан критерий оценки эффективности деятельности менеджеров", СтатусСообщения.БезСтатуса);
		Сообщить("Показатель не сформирован!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ДатаКонцаПериода  = КонецДня(ДатаКон);
	ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "РейтингМенеджеров", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
		НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			ПериодАнализа,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "РейтингМенеджеров", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, ПериодАнализа, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода",   ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонПериода",   ДатаКонцаПериода);
	Запрос.УстановитьПараметр("ПустМенеджер", Справочники["Пользователи"].ПустаяСсылка());
	
	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", НачалоПредПериода);
		Запрос.УстановитьПараметр("КонПредПериода", КонецПредПериода);
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", НачалоАналогПериода);
		Запрос.УстановитьПараметр("КонАналогПериода", КонецАналогПериода);
	КонецЕсли;

	// Формируем текст запроса в зависимости от критерия оценки
	Если КритерийОценки = "Сумма выручки" Тогда
		
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + МаксМенеджеров + "
			|	0 КАК ТипПериода,
			|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
			|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
			|	СУММА(ПродажиОбороты.СтоимостьОборот) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, , Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				И Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ПродажиОбороты
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя";
			
		Если ФлагПредПериод Тогда
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|	1 КАК ТипПериода,
				|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
				|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
				|	СУММА(ПродажиОбороты.СтоимостьОборот) КАК Сумма
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&НачПредПериода, &КонПредПериода, , Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				И Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ПродажиОбороты
				|СГРУППИРОВАТЬ ПО
				|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя";
		КонецЕсли;
		Если ФлагАналогПериод Тогда
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|	2 КАК ТипПериода,
				|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
				|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
				|	СУММА(ПродажиОбороты.СтоимостьОборот) КАК Сумма
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&НачАналогПериода, &КонАналогПериода, , Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				И Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ПродажиОбороты
				|СГРУППИРОВАТЬ ПО
				|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя";
		КонецЕсли;
			
	ИначеЕсли КритерийОценки = "Сумма прибыли" Тогда
		
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + МаксМенеджеров + "
			|	0 КАК ТипПериода,
			|	Продажи.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
			|	Продажи.Контрагент.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
			|	СУММА(Продажи.СтоимостьОборот) -
			|	СУММА(ЦеныСебестоимости.Себестоимость) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, , Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				И Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Продажи
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(
			|	ВЫБРАТЬ
			|		СебестоимостьПродаж.Номенклатура               КАК Номенклатура,
			|		СебестоимостьПродаж.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|		СебестоимостьПродаж.ЗаказПокупателя            КАК ЗаказПокупателя,
			|		ВЫБОР
			|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
			|			ТОГДА СебестоимостьПродаж.ДокументДвижения
			|			ИНАЧЕ СебестоимостьПродаж.Регистратор
			|			КОНЕЦ                                      КАК ДокументПродажи,
			|		СУММА(СебестоимостьПродаж.Стоимость)           КАК Себестоимость
			|	ИЗ
			|		РегистрНакопления.ПродажиСебестоимость КАК СебестоимостьПродаж
			|	ГДЕ
			|		СебестоимостьПродаж.Период МЕЖДУ &НачПериода И &КонПериода
			|	СГРУППИРОВАТЬ ПО
			|		СебестоимостьПродаж.Номенклатура,
			|		СебестоимостьПродаж.ХарактеристикаНоменклатуры,
			|		СебестоимостьПродаж.ЗаказПокупателя,
			|		ВЫБОР
			|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
			|			ТОГДА СебестоимостьПродаж.ДокументДвижения
			|			ИНАЧЕ СебестоимостьПродаж.Регистратор
			|			КОНЕЦ
			|	)
			|	КАК ЦеныСебестоимости
			|ПО ЦеныСебестоимости.Номенклатура = Продажи.Номенклатура
			|	И ЦеныСебестоимости.ХарактеристикаНоменклатуры = Продажи.ХарактеристикаНоменклатуры
			|	И ЦеныСебестоимости.ЗаказПокупателя = Продажи.ЗаказПокупателя
			|	И ЦеныСебестоимости.ДокументПродажи = Продажи.ДокументПродажи
			|СГРУППИРОВАТЬ ПО
			|	Продажи.Контрагент.ОсновнойМенеджерПокупателя";
			
		Если ФлагПредПериод Тогда
				
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|	1 КАК ТипПериода,
				|	Продажи.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
				|	Продажи.Контрагент.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
				|	СУММА(Продажи.СтоимостьОборот) -
				|	СУММА(ЦеныСебестоимости.Себестоимость) КАК Сумма
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&НачПредПериода, &КонПредПериода, , Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				И Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Продажи
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|	(
				|	ВЫБРАТЬ
				|		СебестоимостьПродаж.Номенклатура               КАК Номенклатура,
				|		СебестоимостьПродаж.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|		СебестоимостьПродаж.ЗаказПокупателя            КАК ЗаказПокупателя,
				|		ВЫБОР
				|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
				|			ТОГДА СебестоимостьПродаж.ДокументДвижения
				|			ИНАЧЕ СебестоимостьПродаж.Регистратор
				|			КОНЕЦ                                      КАК ДокументПродажи,
				|		СУММА(СебестоимостьПродаж.Стоимость)           КАК Себестоимость
				|	ИЗ
				|		РегистрНакопления.ПродажиСебестоимость КАК СебестоимостьПродаж
				|	ГДЕ
				|		СебестоимостьПродаж.Период МЕЖДУ &НачПредПериода И &КонПредПериода
				|	СГРУППИРОВАТЬ ПО
				|		СебестоимостьПродаж.Номенклатура,
				|		СебестоимостьПродаж.ХарактеристикаНоменклатуры,
				|		СебестоимостьПродаж.ЗаказПокупателя,
				|		ВЫБОР
				|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
				|			ТОГДА СебестоимостьПродаж.ДокументДвижения
				|			ИНАЧЕ СебестоимостьПродаж.Регистратор
				|			КОНЕЦ
				|	)
				|	КАК ЦеныСебестоимости
				|ПО ЦеныСебестоимости.Номенклатура = Продажи.Номенклатура
				|	И ЦеныСебестоимости.ХарактеристикаНоменклатуры = Продажи.ХарактеристикаНоменклатуры
				|	И ЦеныСебестоимости.ЗаказПокупателя = Продажи.ЗаказПокупателя
				|	И ЦеныСебестоимости.ДокументПродажи = Продажи.ДокументПродажи
				|СГРУППИРОВАТЬ ПО
				|	Продажи.Контрагент.ОсновнойМенеджерПокупателя";
				
		КонецЕсли;
			
		Если ФлагАналогПериод Тогда
			
			Запрос.Текст = Запрос.Текст + "
			
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|	2 КАК ТипПериода,
				|	Продажи.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
				|	Продажи.Контрагент.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
				|	СУММА(Продажи.СтоимостьОборот) -
				|	СУММА(ЦеныСебестоимости.Себестоимость) КАК Сумма
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&НачАналогПериода, &КонАналогПериода, , Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				И Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Продажи
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|	(
				|	ВЫБРАТЬ
				|		СебестоимостьПродаж.Номенклатура               КАК Номенклатура,
				|		СебестоимостьПродаж.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|		СебестоимостьПродаж.ЗаказПокупателя            КАК ЗаказПокупателя,
				|		ВЫБОР
				|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
				|			ТОГДА СебестоимостьПродаж.ДокументДвижения
				|			ИНАЧЕ СебестоимостьПродаж.Регистратор
				|			КОНЕЦ                                      КАК ДокументПродажи,
				|		СУММА(СебестоимостьПродаж.Стоимость)           КАК Себестоимость
				|	ИЗ
				|		РегистрНакопления.ПродажиСебестоимость КАК СебестоимостьПродаж
				|	ГДЕ
				|		СебестоимостьПродаж.Период МЕЖДУ &НачАналогПериода И &КонАналогПериода
				|	СГРУППИРОВАТЬ ПО
				|		СебестоимостьПродаж.Номенклатура,
				|		СебестоимостьПродаж.ХарактеристикаНоменклатуры,
				|		СебестоимостьПродаж.ЗаказПокупателя,
				|		ВЫБОР
				|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
				|			ТОГДА СебестоимостьПродаж.ДокументДвижения
				|			ИНАЧЕ СебестоимостьПродаж.Регистратор
				|			КОНЕЦ
				|	)
				|	КАК ЦеныСебестоимости
				|ПО ЦеныСебестоимости.Номенклатура = Продажи.Номенклатура
				|	И ЦеныСебестоимости.ХарактеристикаНоменклатуры = Продажи.ХарактеристикаНоменклатуры
				|	И ЦеныСебестоимости.ЗаказПокупателя = Продажи.ЗаказПокупателя
				|	И ЦеныСебестоимости.ДокументПродажи = Продажи.ДокументПродажи
				|СГРУППИРОВАТЬ ПО
				|	Продажи.Контрагент.ОсновнойМенеджерПокупателя";
				
		КонецЕсли;
			
	ИначеЕсли КритерийОценки = "Сумма оплаты" Тогда
		
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + МаксМенеджеров + "
			|
			|	0 КАК ТипПериода,
			|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя КАК Менеджер,
			|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
			|	СУММА(КонтрагентыВзаиморасчетыОбороты.СуммаУпрОборот) КАК Сумма
			|ИЗ
			|	РегистрНакопления.КонтрагентыВзаиморасчеты.Обороты(&НачПериода, &КонПериода) КАК КонтрагентыВзаиморасчетыОбороты
			|
			|ГДЕ
			|	НЕ (КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя ЕСТЬ NULL) И
			|	НЕ КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя = &ПустМенеджер
			|
			|СГРУППИРОВАТЬ ПО
			|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя";
		
		Если ФлагПредПериод Тогда

			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|
				|	1 КАК ТипПериода,
				|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя КАК Менеджер,
				|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
				|	СУММА(КонтрагентыВзаиморасчетыОбороты.СуммаУпрОборот) КАК Сумма
				|ИЗ
				|	РегистрНакопления.КонтрагентыВзаиморасчеты.Обороты(&НачПредПериода, &КонПредПериода) КАК КонтрагентыВзаиморасчетыОбороты
				|
				|ГДЕ
				|	НЕ (КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя ЕСТЬ NULL) И
				|	НЕ КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя = &ПустМенеджер
				|
				|СГРУППИРОВАТЬ ПО
				|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя";

		КонецЕсли;
			
		Если ФлагАналогПериод Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|
				|	2 КАК ТипПериода,
				|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя КАК Менеджер,
				|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя.Представление КАК МенеджерПредставление,
				|	СУММА(КонтрагентыВзаиморасчетыОбороты.СуммаУпрОборот) КАК Сумма
				|ИЗ
				|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&НачАналогПериода, &КонАналогПериода) КАК КонтрагентыВзаиморасчетыОбороты
				|
				|ГДЕ
				|	НЕ (КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя ЕСТЬ NULL) И
				|	НЕ КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя = &ПустМенеджер
				|
				|СГРУППИРОВАТЬ ПО
				|	КонтрагентыВзаиморасчетыОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя";
		КонецЕсли;
			
	ИначеЕсли КритерийОценки = "Количество продаж" Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + МаксМенеджеров + "
			|
			|	0 КАК ТипПериода,
			|	ПродажиОбороты.ДокументПродажи.Ответственный КАК Менеджер,
			|	ПродажиОбороты.ДокументПродажи.Ответственный КАК МенеджерПредставление,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиОбороты.ДокументПродажи) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода) КАК ПродажиОбороты
			|
			|ГДЕ
			|	НЕ (ПродажиОбороты.ДокументПродажи.Ответственный ЕСТЬ NULL ) И
			|	НЕ ПродажиОбороты.ДокументПродажи.Ответственный = &ПустМенеджер
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.ДокументПродажи.Ответственный";
			
		Если ФлагПредПериод Тогда
				
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|
				|	1 КАК ТипПериода,
				|	ПродажиОбороты.ДокументПродажи.Ответственный КАК Менеджер,
				|	ПродажиОбороты.ДокументПродажи.Ответственный.Представление КАК МенеджерПредставление,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиОбороты.ДокументПродажи) КАК Сумма
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&НачПредПериода, &КонПредПериода) КАК ПродажиОбороты
				|
				|ГДЕ
				|	НЕ (ПродажиОбороты.ДокументПродажи.Ответственный ЕСТЬ NULL ) И
				|	НЕ ПродажиОбороты.ДокументПродажи.Ответственный = &ПустМенеджер
				|
				|СГРУППИРОВАТЬ ПО
				|	ПродажиОбороты.ДокументПродажи.Ответственный";
		КонецЕсли;
			
		Если ФлагАналогПериод Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ " + МаксМенеджеров + "
				|
				|	2 КАК ТипПериода,
				|	ПродажиОбороты.ДокументПродажи.Ответственный КАК Менеджер,
				|	ПродажиОбороты.ДокументПродажи.Ответственный.Представление КАК МенеджерПредставление,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиОбороты.ДокументПродажи) КАК Сумма
				|ИЗ
				|	РегистрНакопления.Продажи.Обороты(&НачАналогПериода, &КонАналогПериода) КАК ПродажиОбороты
				|
				|ГДЕ
				|	НЕ (ПродажиОбороты.ДокументПродажи.Ответственный ЕСТЬ NULL ) И
				|	НЕ ПродажиОбороты.ДокументПродажи.Ответственный = &ПустМенеджер
				|
				|СГРУППИРОВАТЬ ПО
				|	ПродажиОбороты.ДокументПродажи.Ответственный";

		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Сумма Убыв,
		|	ТипПериода";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Создать список менеджеров
	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("МенеджерПредставление",  СоздатьТип("Строка"));
	ТабДанные.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));
	ТабДанные.Индексы.Добавить("МенеджерПредставление");
	
	СписокМенеджеров = Новый СписокЗначений;
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		Если Строка.ТипПериода = 0 Тогда
			ИмяКолонки = "ТекПериод";
		ИначеЕсли Строка.ТипПериода = 1 Тогда
			ИмяКолонки = "ПредПериод";
		ИначеЕсли Строка.ТипПериода = 1 Тогда
			ИмяКолонки = "АналогПериод";
		КонецЕсли;
		
		ТекСтрока = ТабДанные.Найти(Строка.МенеджерПредставление, "МенеджерПредставление");
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = ТабДанные.Добавить();
			ТекСтрока.МенеджерПредставление = Строка.МенеджерПредставление;
		КонецЕсли;

		ТекСтрока[ИмяКолонки] = Строка.Сумма;

		Если СписокМенеджеров.НайтиПоЗначению(Строка.Менеджер) = Неопределено Тогда
			СписокМенеджеров.Добавить(Строка.Менеджер);
		КонецЕсли;
		
	КонецЦикла;

	ТабДанные.Сортировать("ТекПериод Убыв");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Рейтинг лучших менеджеров за" + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Рейтинг лучших менеджеров за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	СтрПериод = СтрПериод + Символы.ПС + "Критерий оценки: " + КритерийОценки;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаГоризонтальная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаГоризонтальнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаГоризонтальнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаГоризонтальная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",           "РейтингМенеджеров");
	ПарамРасшифровки.Вставить("ДатаНач",        ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон",        ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("Менеджеры",      СписокМенеджеров);
	ПарамРасшифровки.Вставить("КритерийОценки", КритерийОценки);
	Секция.Рисунки.ДиаграммаГистограммаГоризонтальная.Расшифровка = ПарамРасшифровки;
	
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.Точки.Добавить(ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода));
	Если ФлагПредПериод Тогда
		Диаграмма.Точки.Добавить(ПредставлениеПериода(НачалоПредПериода, КонецПредПериода));
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Точки.Добавить(ПредставлениеПериода(НачалоАналогПериода, КонецАналогПериода));
	КонецЕсли;
	
	НомСерии = 0;
	Для Каждого Строка Из ТабДанные Цикл
		Диаграмма.Серии.Добавить("" + Строка.МенеджерПредставление);
		
		НомТочки = 0;
		Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.ТекПериод);
		Если ФлагПредПериод Тогда
			НомТочки = НомТочки + 1;
			Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.ПредПериод);
		КонецЕсли;
		Если ФлагАналогПериод Тогда
			НомТочки = НомТочки + 1;
			Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.АналогПериод);
		КонецЕсли;

		НомСерии = НомСерии + 1;
	КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("РейтингМенеджеров", ТабДок);

КонецПроцедуры // РейтингМенеджеровФормирование()

// Процедура расшифровки показателя "Рейтинг лучших менеджеров"
//
Процедура РейтингМенеджеровРасшифровка(Параметры)
	
	Расшифровка = Параметры["Расшифровка"];

	Отчет = Отчеты.ПоказателиРаботыМенеджеров.Создать();
	Форма = Отчет.ПолучитьФорму("Форма", Параметры["ЭтаФорма"], "РейтингМенеджеровРасшифровка");
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	
	Отчет.ДатаНачала = Расшифровка["ДатаНач"];
	Отчет.ДатаКонца  = Расшифровка["ДатаКон"];
	Отчет.ОтборМенеджер.Менеджер.ВидСравнения  = ВидСравнения.ВСписке;
	Отчет.ОтборМенеджер.Менеджер.Значение      = Расшифровка["Менеджеры"];
	Отчет.ОтборМенеджер.Менеджер.Использование = Истина;
	
	Отчет.РаскрашиватьГруппировки = Истина;
	Отчет.ПоказыватьЗаголовок = Ложь;
	Для Каждого Показатель Из Отчет.ПоказателиОтчета Цикл
		Если (Расшифровка["КритерийОценки"] = "Сумма выручки"
			И Показатель.ИмяПоказателя = "СуммаВыручки")
			ИЛИ (Расшифровка["КритерийОценки"] = "Сумма прибыли"
			И Показатель.ИмяПоказателя = "СуммаПрибыли") 
			ИЛИ (Расшифровка["КритерийОценки"] = "Количество продаж"
			И Показатель.ИмяПоказателя = "ЧислоСделок") Тогда
			Показатель.ИспользованиеПоказателя = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Отчет.СформироватьОтчет(Форма.ЭлементыФормы.ПолеТабличногоДокумента);
	Форма.ИспользоватьСтандартныеНастройки = Истина;
	Форма.Открыть();
	
КонецПроцедуры // РейтингМенеджеровРасшифровка()

// Процедура обработки показателя "Рейтинг лучших менеджеров"
//
Процедура РейтингМенеджеров(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		РейтингМенеджеровИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		РейтингМенеджеровФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		РейтингМенеджеровРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // РейтингМенеджеров()

// Процедура инициализации показателя "Рейтинг лучших источников информации"
//
Процедура РейтингИсточниковИнформацииИнициализация()
	
	ДобавитьВДеревоПоказателей("РейтингИсточниковИнформации", "Рейтинг лучших источников информации", "");
		
	ТабПарам = СоздатьТабПарам();
	
	// Параметр "ПериодАнализа"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПериодАнализа";
	НоваяСтрока.ПредставлениеПараметра = "Период анализа";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("День");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");

	НоваяСтрока.Значение = НоваяСтрока.Список[2].Значение;
	
	// Параметр "ПредПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "ПредПериод";
	НоваяСтрока.ПредставлениеПараметра = "Выводить данные предыдущего периода";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Да");
	НоваяСтрока.Список.Добавить("Нет");
	
	НоваяСтрока.Значение = НоваяСтрока.Список[1].Значение;
	
	// Параметр "АналогПериод"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "АналогПериод";
	НоваяСтрока.ПредставлениеПараметра = "Аналогичный период";
	НоваяСтрока.ТипЗначения            = СоздатьТип("СписокЗначений");
	
	НоваяСтрока.Список = Новый СписокЗначений;
	НоваяСтрока.Список.Добавить("Не выводить");
	НоваяСтрока.Список.Добавить("Неделя");
	НоваяСтрока.Список.Добавить("Месяц");
	НоваяСтрока.Список.Добавить("Год");

	НоваяСтрока.Значение = НоваяСтрока.Список[0].Значение;
	
	// Параметр "МаксИсточников"
	НоваяСтрока = ТабПарам.Добавить();
	НоваяСтрока.Имя                    = "МаксИсточников";
	НоваяСтрока.ПредставлениеПараметра = "Макс. кол-во источников информации";
	НоваяСтрока.ТипЗначения            = СоздатьТип("Число", 5, 0);
	НоваяСтрока.Значение               = 10;
	
	// Считать сохранные значения
	ПолучитьСохраненныеЗначения("РейтингИсточниковИнформации", ТабПарам);

	// Добавить данные в структуру параметров показателей
	СтруктураПараметровПоказателей.Вставить("РейтингИсточниковИнформации", ТабПарам);
	
КонецПроцедуры // РейтингИсточниковИнформацииИнициализация()

// Процедура формирование показателя "Рейтинг лучших источников информации"
//
Процедура РейтингИсточниковИнформацииФормирование()
	
	ПериодАнализа  = ПолучитьПараметрПоказателя( "РейтингИсточниковИнформации", "ПериодАнализа");
	АналогПериод   = ПолучитьПараметрПоказателя( "РейтингИсточниковИнформации", "АналогПериод");
	МаксИсточников = ПолучитьПараметрПоказателя( "РейтингИсточниковИнформации", "МаксИсточников");

    МаксИсточников = Окр(МаксИсточников, 0, 1);
	Если МаксИсточников = 0 Тогда
		МаксИсточников = "";
	Иначе
		МаксИсточников = "ПЕРВЫЕ " + Формат(МаксИсточников, "ЧЦ=");
	КонецЕсли;

	ДатаКонцаПериода  = КонецДня(ДатаКон);
    ДатаНачалаПериода = ПолучитьДатуНачалаПериода(ДатаКонцаПериода, ПериодАнализа);

	// Расчет дат предыдущего периода
	ФлагПредПериод = ПолучитьПараметрПоказателя( "РейтингИсточниковИнформации", "ПредПериод") = "Да";
	Если ФлагПредПериод Тогда
        НачалоПредПериода = 0;
		КонецПредПериода  = 0;
		СмещениеПредИнтервала = ПрошлыйПериодПоНеделям(
			ДатаНачалаПериода,
			ДатаКонцаПериода,
			ПериодАнализа,
			ПериодАнализа,
			НачалоПредПериода,
			КонецПредПериода);
	КонецЕсли;

	// Расчет дат аналогичного периода
	ФлагАналогПериод = Не ПолучитьПараметрПоказателя( "РейтингИсточниковИнформации", "АналогПериод") = "Не выводить";
	Если ФлагАналогПериод Тогда
		
		НачалоАналогПериода = Неопределено;
		КонецАналогПериода  = Неопределено;
		
		СмещениеАналогИнтервала = ПолучитьДатыАналогПериода(ДатаНачалаПериода, ДатаКонцаПериода, ПериодАнализа, ПериодАнализа, АналогПериод, НачалоАналогПериода, КонецАналогПериода);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПустИсточник",    Справочники ["ИсточникиИнформацииПриОбращенииПокупателей"].ПустаяСсылка());
	Запрос.УстановитьПараметр("ВходящийКонтакт", Перечисления.ВходящееИсходящееСобытие.Входящее);
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонПериода", ДатаКонцаПериода);
	
	Если ФлагПредПериод Тогда
		Запрос.УстановитьПараметр("НачПредПериода", НачалоПредПериода);
		Запрос.УстановитьПараметр("КонПредПериода", КонецПредПериода);
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.УстановитьПараметр("НачАналогПериода", НачалоАналогПериода);
		Запрос.УстановитьПараметр("КонАналогПериода", КонецАналогПериода);
	КонецЕсли;
	
    // Формируем текст запроса в зависимости от критерия оценки
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + МаксИсточников + "
		|
		|	0 КАК ТипПериода,
		|	Событие.ИсточникИнформацииПриОбращении КАК Источник,
		|	Событие.ИсточникИнформацииПриОбращении.Представление КАК ИсточникПредставление,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Событие.Ссылка) КАК Колво
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.ТипСобытия = &ВходящийКонтакт И
		|	НЕ Событие.ИсточникИнформацииПриОбращении = &ПустИсточник И
		|	Событие.Дата <= &КонПериода И
		|	Событие.Дата >= &НачПериода
		|	
		|СГРУППИРОВАТЬ ПО
		|	Событие.ИсточникИнформацииПриОбращении";
	
	Если ФлагПредПериод Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ " + МаксИсточников + "
			|
			|	1 КАК ТипПериода,
			|	Событие.ИсточникИнформацииПриОбращении КАК Источник,
			|	Событие.ИсточникИнформацииПриОбращении.Представление КАК ИсточникПредставление,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Событие.Ссылка) КАК Колво
			|ИЗ
			|	Документ.Событие КАК Событие
			|ГДЕ
			|	Событие.ТипСобытия = &ВходящийКонтакт И
			|	НЕ Событие.ИсточникИнформацииПриОбращении = &ПустИсточник И
			|	Событие.Дата <= &КонПредПериода И
			|	Событие.Дата >= &НачПредПериода
			|	
			|СГРУППИРОВАТЬ ПО
			|	Событие.ИсточникИнформацииПриОбращении";
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ " + МаксИсточников + "
			|
			|	2 КАК ТипПериода,
			|	Событие.ИсточникИнформацииПриОбращении КАК Источник,
			|	Событие.ИсточникИнформацииПриОбращении.Представление КАК ИсточникПредставление,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Событие.Ссылка) КАК Колво
			|ИЗ
			|	Документ.Событие КАК Событие
			|ГДЕ
			|	Событие.ТипСобытия = &ВходящийКонтакт И
			|	НЕ Событие.ИсточникИнформацииПриОбращении = &ПустИсточник И
			|	Событие.Дата <= &КонАналогПериода И
			|	Событие.Дата >= &НачАналогПериода
			|	
			|СГРУППИРОВАТЬ ПО
			|	Событие.ИсточникИнформацииПриОбращении";
	КонецЕсли;
			
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Колво Убыв,
		|	ТипПериода";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Создать список источников
	ТабДанные = Новый ТаблицаЗначений;
	ТабДанные.Колонки.Добавить("ИсточникПредставление",     СоздатьТип("Строка"));
	ТабДанные.Колонки.Добавить("ТекПериод",    СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("ПредПериод",   СоздатьТип("Число", 15, 2));
	ТабДанные.Колонки.Добавить("АналогПериод", СоздатьТип("Число", 15, 2));
	ТабДанные.Индексы.Добавить("ИсточникПредставление");
	
    СписокИсточников = Новый СписокЗначений;
	Для Каждого Строка Из РезультатЗапроса Цикл
		Если Строка.ТипПериода = 0 Тогда
			ИмяКолонки = "ТекПериод";
		ИначеЕсли Строка.ТипПериода = 1 Тогда
			ИмяКолонки = "ПредПериод";
		ИначеЕсли Строка.ТипПериода = 2 Тогда
			ИмяКолонки = "АналогПериод";
		КонецЕсли;
		
		ТекСтрока = ТабДанные.Найти(Строка.ИсточникПредставление, "ИсточникПредставление");
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = ТабДанные.Добавить();
			ТекСтрока.ИсточникПредставление = Строка.ИсточникПредставление;
		КонецЕсли;

		ТекСтрока[ИмяКолонки] = Строка.Колво;

		Если СписокИсточников.НайтиПоЗначению(ТекСтрока.ИсточникПредставление) = Неопределено Тогда
			СписокИсточников.Добавить(ТекСтрока.ИсточникПредставление, "" + ТекСтрока.ИсточникПредставление);
		КонецЕсли;
		
	КонецЦикла;

	ТабДанные.Сортировать("ТекПериод Убыв");

	Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаКонцаПериода) Тогда
		СтрПериод = "Рейтинг лучших источников информации за" + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	Иначе
		СтрПериод = "Рейтинг лучших источников информации за период: " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = мМакет.ПолучитьОбласть("ГистограммаГоризонтальная");
	
	Секция = Макет.ПолучитьОбласть("ГистограммаГоризонтальнаяЗаголовок");
	Секция.Параметры.Заголовок = СтрПериод;
	
	ТабДок.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ГистограммаГоризонтальнаяДиаграмма");
	Диаграмма = Секция.Рисунки.ДиаграммаГистограммаГоризонтальная.Объект;

	ПарамРасшифровки = Новый Структура;
	ПарамРасшифровки.Вставить("Имя",       "РейтингИсточниковИнформации");
	ПарамРасшифровки.Вставить("ДатаНач",   ДатаНачалаПериода);
	ПарамРасшифровки.Вставить("ДатаКон",   ДатаКонцаПериода);
	ПарамРасшифровки.Вставить("Источники", СписокИсточников);
	
	Секция.Рисунки.ДиаграммаГистограммаГоризонтальная.Расшифровка = ПарамРасшифровки;
	
	Диаграмма.Очистить();
	Диаграмма.ОбластьЗаголовка.Текст = "";
	
	Диаграмма.Точки.Добавить(ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода));
	Если ФлагПредПериод Тогда
		Диаграмма.Точки.Добавить(ПредставлениеПериода(НачалоПредПериода, КонецПредПериода));
	КонецЕсли;
	Если ФлагАналогПериод Тогда
		Диаграмма.Точки.Добавить(ПредставлениеПериода(НачалоАналогПериода, КонецАналогПериода));
	КонецЕсли;
	
	НомСерии = 0;
	Для Каждого Строка Из ТабДанные Цикл
		Диаграмма.Серии.Добавить("" + Строка.ИсточникПредставление);
		
		НомТочки = 0;
		Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.ТекПериод);
		Если ФлагПредПериод Тогда
			НомТочки = НомТочки + 1;
			Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.ПредПериод);
		КонецЕсли;
		Если ФлагАналогПериод Тогда
			НомТочки = НомТочки + 1;
			Диаграмма.УстановитьЗначение(НомТочки, НомСерии, Строка.АналогПериод);
		КонецЕсли;

		НомСерии = НомСерии + 1;
	КонецЦикла;
	
	ТабДок.Вывести(Секция);
	мСтруктТабДок.Вставить("РейтингИсточниковИнформации", ТабДок);
	
КонецПроцедуры // РейтингИсточниковИнформацииФормирование()

// Процедура расшифровки показателя "Рейтинг лучших источников информации"
//
Процедура РейтингИсточниковИнформацииРасшифровка(Параметры)
	
	Расшифровка = Параметры["Расшифровка"];

	Отчет = Отчеты.АнализСобытийИИсточниковИнформацииПокупателей.Создать();
	Форма = Отчет.ПолучитьФорму("Форма", Параметры["ЭтаФорма"], "РейтингИсточниковИнформацииРасшифровка");
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая форма расшифровки не была завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Отчет.ЗаполнитьНачальныеНастройки();
	
	Отчет.ДатаНачала    = Расшифровка["ДатаНач"];
	Отчет.ДатаОкончания = Расшифровка["ДатаКон"];

	// Добавить группировку
	Отчет.ПостроительОтчета.Отбор.ИсточникИнформацииПриОбращении.Использование = Истина;;
	Отчет.ПостроительОтчета.Отбор.ИсточникИнформацииПриОбращении.ВидСравнения = ВидСравнения.ВСписке;
	Отчет.ПостроительОтчета.Отбор.ИсточникИнформацииПриОбращении.Значение = Расшифровка.Источники;
	
	Отчет.РаскрашиватьГруппировки = Истина;
	Отчет.ПоказыватьЗаголовок = Ложь;
	Для Каждого Показатель Из Отчет.ПоказателиОтчета Цикл
		Показатель.ИспользованиеПоказателя = Истина;
	КонецЦикла;

	Отчет.СформироватьОтчет(Форма.ЭлементыФормы.ПолеТабличногоДокумента);
	Форма.НеЗаполнятьНастройкиПриОткрытии = Истина;
	Форма.Открыть();
	
КонецПроцедуры // РейтингИсточниковИнформацииРасшифровка()

// Процедура обработки показателя "Рейтинг лучших источников информации"
//
Процедура РейтингИсточниковИнформации(СтрДействий, Параметры = 0)

	Если СтрДействий = "Инициализация" Тогда
		
		РейтингИсточниковИнформацииИнициализация();
		
	ИначеЕсли СтрДействий = "Формирование" Тогда
		
		РейтингИсточниковИнформацииФормирование();
		
	ИначеЕсли СтрДействий = "Расшифровка" Тогда
		
		РейтингИсточниковИнформацииРасшифровка(Параметры);
		
	Иначе // Данное действие не обрабатывается
	КонецЕсли;
	
КонецПроцедуры // РейтингИсточниковИнформации()

// Необходимо изменить данное значение в случае изменения структуры настройки отчета
мНомерРелизаПараметровНастройки = 2;

мМассивВременныхФайлов = Новый Массив;
#КонецЕсли

