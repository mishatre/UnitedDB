//	ФУНКЦИИ ДЛЯ ВЕБ-ПРИЛОЖЕНИЯ "УПРАВЛЕНИЕ ЗАКАЗАМИ"

//	Общие функции

// Функция возвращает список договоров для контрагента
//
Функция ПолучитьСписокДоговоров(Контрагент) Экспорт
	
	ДополнительныеРеквизиты = Новый Массив();
	ДополнительныеРеквизиты.Добавить("Ссылка");
	ДополнительныеРеквизиты.Добавить("Номер");
	ДополнительныеРеквизиты.Добавить("Дата");
	ДополнительныеРеквизиты.Добавить("Наименование");
	ДополнительныеРеквизиты.Добавить("ВалютаВзаиморасчетов.Представление");
	
	Возврат ЗаполнениеДокументов.ПолучитьДоступныеДоговорыКонтрагента(Контрагент, ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя(), Ложь, , ДополнительныеРеквизиты);
	
КонецФункции

// Функция возвращает список валют, доступных для выбора
//
Функция ПолучитьСписокВалют(ДоговорКонтрагента) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
		| Выбрать Различные
		| Валюты.Ссылка, Валюты.Код, Валюты.Наименование, Валюты.НаименованиеПолное 
		| Из Справочник.Валюты Как Валюты, Справочник.ДоговорыКонтрагентов Как Договоры
		| Где (Валюты.Ссылка = Договоры.ВалютаВзаиморасчетов
		| И Договоры.Ссылка = &ДоговорКонтрагента)
		| Или Валюты.Ссылка = &ВалютаРегламентированногоУчета";
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Возврат Запрос.Выполнить();
КонецФункции

// Возвращает валюту взаиморасчетов по договору с контрагентом
//
Функция ПолучитьВалютуПоДоговору(ДоговорКонтрагента) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		| ВЫБРАТЬ
		| ВалютаВзаиморасчетов КАК Валюта, 
		| ВалютаВзаиморасчетов.Представление КАК ВалютаПредставление 
		| ИЗ Справочник.ДоговорыКонтрагентов 
		| Где Ссылка = &ДоговорКонтрагента";
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьВалютуПоДоговору()

// Возвращает информацию об интернет-пользователе по его логину
//
Функция ПолучитьИнформациюОбИнтернетПользователе(Логин) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		| ВЫБРАТЬ 
		| Контрагенты.Ссылка, 
		| Контрагенты.НаименованиеПолное, 
		| ОсновнойДоговорКонтрагента КАК Договор, 
		| ОсновнойДоговорКонтрагента.Наименование КАК ДоговорПредставление, 
		| ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта, 
		| ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Представление КАК ВалютаПредставление 
		| ИЗ Справочник.Контрагенты КАК Контрагенты, 
		| РегистрСведений.УчетныеЗаписиИнтернетПользователей КАК ИнтернетПользователи 
		| ГДЕ Контрагенты.Ссылка = ИнтернетПользователи.Контрагент 
		| И ИнтернетПользователи.Логин = &ЛогинПользователя";	
	Запрос.УстановитьПараметр("ЛогинПользователя", Логин);
	Возврат Запрос.Выполнить();			

КонецФункции // ПолучитьИнформациюОбИнтернетПользователе()

// Выполняет авторизацию интернет-пользователя
//
Функция АвторизацияИнтернетПользователя(Логин, Пароль) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		| ВЫБРАТЬ 
		| ИнтернетПользователи.Пароль 
		| ИЗ РегистрСведений.УчетныеЗаписиИнтернетПользователей КАК ИнтернетПользователи 
		| ГДЕ ИнтернетПользователи.Логин = &ЛогинПользователя";	
	Запрос.УстановитьПараметр("ЛогинПользователя", Логин);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда	
		Возврат -1;                     		
	Иначе		                        		
		Если РезультатЗапроса.Выгрузить()[0]["Пароль"] <> Пароль Тогда			
			Возврат -2;                                               			
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли; 	

КонецФункции // АвторизацияИнтернетПользователя()
 

//	Функции для работы каталога товаров и корзины покупателя

Функция ПолучитьСтруктуруДополнительныхРеквизитов(ДополнительныеРеквизиты)
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭтоГруппа");
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ДополнительныеРеквизиты, ";");
	Для Каждого Строка из Массивстрок Цикл
		Если ЗначениеЗаполнено(Строка) Тогда
			МассивСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Строка, ",");
			СтруктураРеквизитов.Вставить(МассивСтроки[0], МассивСтроки[1] = "Истина");
		КонецЕсли;
	КонецЦикла;	
	Возврат СтруктураРеквизитов; 
КонецФункции

Функция ПолучитьСписокТоваровПоГруппе(Группа, Валюта, Контрагент, ДоговорКонтрагента, ДополнительныеРеквизиты) Экспорт
	Возврат СписокНоменклатуры(ПолучитьСтруктуруДополнительныхРеквизитов(ДополнительныеРеквизиты), Группа, "", Неопределено,  Неопределено, Валюта, Контрагент, ДоговорКонтрагента);
КонецФункции

Функция ПолучитьСписокТоваровПоНаименованию(СтрокаПоиска, Валюта, Контрагент, ДоговорКонтрагента, ДополнительныеРеквизиты) Экспорт
	Возврат СписокНоменклатуры(ПолучитьСтруктуруДополнительныхРеквизитов(ДополнительныеРеквизиты), Неопределено, СтрокаПоиска, Неопределено,  Неопределено, Валюта, Контрагент, ДоговорКонтрагента);
КонецФункции

Функция ПолучитьДетальнуюИнформациюПоТовару(Номенклатура, ХарактеристикаНоменклатуры, Валюта, Контрагент, ДоговорКонтрагента) Экспорт
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭтоГруппа");
	СтруктураРеквизитов.Вставить("Артикул");
	СтруктураРеквизитов.Вставить("СтранаПроисхождения", Истина);
	СтруктураРеквизитов.Вставить("ОсновноеИзображение");
	Возврат СписокНоменклатуры(СтруктураРеквизитов, Неопределено, "", Номенклатура, ХарактеристикаНоменклатуры, Валюта, Контрагент, ДоговорКонтрагента);
КонецФункции

Функция ПолучитьИнформациюПоТоваруДляКорзины(Номенклатура, ХарактеристикаНоменклатуры, Валюта, Контрагент, ДоговорКонтрагента) Экспорт
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭтоГруппа");
	СтруктураРеквизитов.Вставить("Артикул");
	СтруктураРеквизитов.Вставить("СтранаПроисхождения", Истина);
	Возврат СписокНоменклатуры(СтруктураРеквизитов, Неопределено, "", Номенклатура, ХарактеристикаНоменклатуры, Валюта, Контрагент, ДоговорКонтрагента);
КонецФункции

Функция ПолучитьСписокГрупп() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Ссылка,
	    |	Наименование,
	    |	Родитель
	    |ИЗ
	    |	Справочник.Номенклатура
	    |ГДЕ
	    |	ЭтоГруппа = ИСТИНА
		|	И НЕ Ссылка В ИЕРАРХИИ
		|		(ВЫБРАТЬ
		|			Номенклатура
		|		ИЗ
		|			РегистрСведений.НоменклатураНеиспользуемаяВВебУправленииЗаказами)
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	Наименование ИЕРАРХИЯ";
	Возврат Запрос.Выполнить();
КонецФункции

Функция СписокНоменклатуры(СтруктураРеквизитов, ОтборПоГруппе, ОтборПоНаименованию, Номенклатура, ХарактеристикаНоменклатуры, Валюта, Контрагент, ДоговорКонтрагента)

	ТекстОтбораПоНоменклатуре = "";
	ТекстОтбораПоНоменклатуреДляВТ = "ИСТИНА";
	Если ЗначениеЗаполнено(ОтборПоНаименованию) Тогда
		ТекстОтбораПоНоменклатуре = ТекстОтбораПоНоменклатуре + "
		|	И СписокНоменклатуры.Номенклатура.Наименование ПОДОБНО &НаименованиеОтбор
		|";

		ТекстОтбораПоНоменклатуреДляВТ = ТекстОтбораПоНоменклатуреДляВТ + "
		|	И Номенклатура.Наименование ПОДОБНО &НаименованиеОтбор
		|";
	КонецЕсли;
	Если ОтборПоГруппе <> Неопределено Тогда
		ТекстОтбораПоНоменклатуре = ТекстОтбораПоНоменклатуре + "
		|	И СписокНоменклатуры.Номенклатура.Родитель = &ГруппаОтбор
		|";

		ТекстОтбораПоНоменклатуреДляВТ = ТекстОтбораПоНоменклатуреДляВТ + "
		|	И Номенклатура.Родитель = &ГруппаОтбор
		|";
	КонецЕсли;
	Если Номенклатура <> Неопределено Тогда
		ТекстОтбораПоНоменклатуре = ТекстОтбораПоНоменклатуре + "
		|	И СписокНоменклатуры.Номенклатура = &Номенклатура
		|";

		ТекстОтбораПоНоменклатуреДляВТ = ТекстОтбораПоНоменклатуреДляВТ + "
		|	И Номенклатура = &Номенклатура
		|";

		Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
			ТекстОтбораПоНоменклатуре = ТекстОтбораПоНоменклатуре + "
			|	И СписокНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			|";

			ТекстОтбораПоНоменклатуреДляВТ = ТекстОтбораПоНоменклатуреДляВТ + "
			|	И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			|";
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаОтбор", ОтборПоГруппе);
	Запрос.УстановитьПараметр("НаименованиеОтбор", "%" + СокрЛП(ОтборПоНаименованию) + "%");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ВалютаОтчета", Валюта);
	Запрос.УстановитьПараметр("ВалютаПредставление", СокрЛП(Валюта));
	Запрос.УстановитьПараметр("ТипЦен", ДоговорКонтрагента.ТипЦен);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дата", ОбщегоНазначения.ПолучитьРабочуюДату());

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗапросПрайс.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЗапросПрайс.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЗапросПрайс.Номенклатура,
	|	ЗапросПрайс.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ЗапросПрайс.ХарактеристикаНоменклатуры,
	|	ЗапросПрайс.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Остатки.Остаток, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВНаличии,
	|	ЗапросПрайс.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапросПрайс.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	|	&ВалютаОтчета КАК Валюта,
	|	&ВалютаПредставление КАК ВалютаПредставление,
	|	ВЫБОР
	|		КОГДА ЗапросПрайс.Валюта = &ВалютаОтчета
	|				ИЛИ ЗапросПрайс.Цена = 0
	|			ТОГДА ЗапросПрайс.Цена
	|		ИНАЧЕ ЗапросПрайс.Цена * ВЫБОР
	|				КОГДА КурсыВалютСрезПоследних.Курс = 0
	|					ТОГДА 1
	|				ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|			КОНЕЦ * ВЫБОР
	|				КОГДА КурсыВалютСрезПоследних.Кратность = 0
	|					ТОГДА 1
	|				ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|			КОНЕЦ / ВЫБОР
	|				КОГДА КурсыВалютСрезПоследнихОтчет.Курс = 0
	|					ТОГДА 1
	|				ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Курс
	|			КОНЕЦ / ВЫБОР
	|				КОГДА КурсыВалютСрезПоследнихОтчет.Кратность = 0
	|					ТОГДА 1
	|				ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Кратность
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена
	|";

	Для Каждого Реквизит Из СтруктураРеквизитов Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	ЗапросПрайс.Номенклатура." + СокрЛП(Реквизит.Ключ) + " КАК " + СокрЛП(Реквизит.Ключ);

		Если Реквизит.Значение = Истина Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ПРЕДСТАВЛЕНИЕ(ЗапросПрайс.Номенклатура." + СокрЛП(Реквизит.Ключ) + ") КАК " + СокрЛП(Реквизит.Ключ) + "Представление";
		КонецЕсли;
	КонецЦикла;

	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныБазовые.ТипЦен КАК ТипЦен,
	|		ЦеныБазовые.Номенклатура КАК Номенклатура,
	|		ЦеныБазовые.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		МИНИМУМ(ЕСТЬNULL(ВЫБОР
	|					КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL 
	|						ТОГДА ВЫБОР
	|								КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
	|									ТОГДА ЦеныРасчетные.ЕдиницаИзмерения
	|								ИНАЧЕ ЦеныБазовые.ЕдиницаИзмерения
	|							КОНЕЦ
	|					ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
	|				КОНЕЦ, ЦеныБазовые.Номенклатура.ЕдиницаХраненияОстатков)) КАК ЕдиницаИзмерения,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
	|								ТОГДА ВЫБОР
	|										КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL 
	|											ТОГДА ЦеныБазовые.Валюта
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЦеныБазовые.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
	|													ТОГДА ЦеныРасчетные.Валюта
	|												ИНАЧЕ ЦеныБазовые.ВалютаДиапазона
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ ЦеныБазовые.Валюта
	|						КОНЕЦ
	|				ИНАЧЕ УсловияПоставок.ВалютаЦены
	|			КОНЕЦ) КАК Валюта,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА УсловияПоставок.Номенклатура ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
	|								ТОГДА ВЫБОР
	|										КОГДА ЦеныБазовые.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
	|											ТОГДА ВЫБОР
	|													КОГДА ЦеныРасчетные.Цена ЕСТЬ NULL 
	|														ТОГДА 0
	|													ИНАЧЕ ЦеныРасчетные.Цена * (1 + ЦеныБазовые.ПроцентСкидкиНаценки / 100)
	|												КОНЕЦ
	|										ИНАЧЕ ЦеныБазовые.ЦенаДиапазона
	|									КОНЕЦ
	|							ИНАЧЕ ЦеныБазовые.Цена
	|						КОНЕЦ
	|				ИНАЧЕ УсловияПоставок.Цена
	|			КОНЕЦ) КАК Цена
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|			СписокНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СпрТипЦен.ТипЦен КАК ТипЦен,
	|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
	|					ТОГДА СпрТипЦен.ТипЦенПроцентСкидкиНаценки
	|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ПроцентСкидкиНаценки, ЦеныНоменклатуры.ТипЦен.ПроцентСкидкиНаценки)
	|			КОНЕЦ КАК ПроцентСкидкиНаценки,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
	|					ТОГДА СпрТипЦен.ТипЦенСпособРасчетаЦены
	|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.СпособРасчетаЦены, ЦеныНоменклатуры.ТипЦен.СпособРасчетаЦены)
	|			КОНЕЦ КАК СпособРасчетаЦены,
	|			ЕСТЬNULL(ШкалыДиапазонов.Цена, 0) КАК ЦенаДиапазона,
	|			ЕСТЬNULL(ШкалыДиапазонов.ВерхняяГраница, 0) КАК ВерхняяГраница,
	|			ЕСТЬNULL(ЦеныНоменклатуры.Валюта, СпрТипЦен.ТипЦенВалюта) КАК Валюта,
	|			ШкалыДиапазонов.Валюта КАК ВалютаДиапазона
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СписокНоменклатуры.Номенклатура КАК Номенклатура,
	|				СписокНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|				ВЫБОР
	|					КОГДА ТипыЦенПоГруппам.ТипЦен ЕСТЬ NULL 
	|							ИЛИ ТипыЦенПоГруппам.ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|						ТОГДА &ТипЦен
	|					ИНАЧЕ ТипыЦенПоГруппам.ТипЦен
	|				КОНЕЦ КАК ТипЦен
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СпрХарактеристики.Владелец КАК Номенклатура,
	|					СпрХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры
	|				ИЗ
	|					Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СпрНоменклатура.Ссылка,
	|					ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ИЗ
	|					Справочник.Номенклатура КАК СпрНоменклатура) КАК СписокНоменклатуры
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ТипыЦенПоГруппам
	|					ПО (ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СписокНоменклатуры.Номенклатура.ЦеноваяГруппа
	|							ИЛИ ТипыЦенПоГруппам.НоменклатурнаяЦеноваяГруппа = СписокНоменклатуры.Номенклатура.НоменклатурнаяГруппа)) КАК СписокНоменклатуры
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СправочникЦен.Ссылка КАК ТипЦен,
	|					СправочникЦен.ВалютаЦены КАК ТипЦенВалюта,
	|					СправочникЦен.ПроцентСкидкиНаценки КАК ТипЦенПроцентСкидкиНаценки,
	|					СправочникЦен.СпособРасчетаЦены КАК ТипЦенСпособРасчетаЦены,
	|					СправочникЦен.Рассчитывается КАК ТипЦенРассчитывается
	|				ИЗ
	|					Справочник.ТипыЦенНоменклатуры КАК СправочникЦен) КАК СпрТипЦен
	|				ПО СпрТипЦен.ТипЦен = СписокНоменклатуры.ТипЦен
	|					И НЕ СписокНоменклатуры.Номенклатура В ИЕРАРХИИ
	|							(ВЫБРАТЬ
	|								Номенклатура
	|							ИЗ
	|								РегистрСведений.НоменклатураНеиспользуемаяВВебУправленииЗаказами)
	|" + ТекстОтбораПоНоменклатуре + "
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, " + ТекстОтбораПоНоменклатуреДляВТ + ") КАК ЦеныНоменклатуры
	|				ПО ЦеныНоменклатуры.Номенклатура = СписокНоменклатуры.Номенклатура
	|					И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = СписокНоменклатуры.ХарактеристикаНоменклатуры
	|					И ЦеныНоменклатуры.ТипЦен = СпрТипЦен.ТипЦен
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ДиапазоныЦен.ТипЦен КАК ТипЦен,
	|					ДиапазоныЦен.ВерхняяГраница КАК ВерхняяГраница,
	|					ДиапазоныЦен.Цена КАК Цена,
	|					ДиапазоныЦен.Валюта КАК Валюта,
	|					ДиапазоныЦен.Период КАК Период
	|				ИЗ
	|					РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ) КАК ДиапазоныЦен
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен КАК ТипЦен,
	|							МАКСИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.Период) КАК Период
	|						ИЗ
	|							РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, ) КАК ДиапазоныЦенДляНаценкиСрезПоследних
	|						
	|						СГРУППИРОВАТЬ ПО
	|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен) КАК МаксДиапазоныЦен
	|						ПО ДиапазоныЦен.ТипЦен = МаксДиапазоныЦен.ТипЦен
	|							И ДиапазоныЦен.Период = МаксДиапазоныЦен.Период) КАК ШкалыДиапазонов
	|				ПО ШкалыДиапазонов.ТипЦен = СпрТипЦен.ТипЦен
	|					И (СпрТипЦен.ТипЦенРассчитывается)) КАК ЦеныБазовые
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата," + ТекстОтбораПоНоменклатуреДляВТ + ") КАК ЦеныРасчетные
	|			ПО ЦеныБазовые.Номенклатура = ЦеныРасчетные.Номенклатура
	|				И ЦеныБазовые.ХарактеристикаНоменклатуры = ЦеныРасчетные.ХарактеристикаНоменклатуры
	|				И ЦеныБазовые.ТипЦен.БазовыйТипЦен = ЦеныРасчетные.ТипЦен
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, ДоговорКонтрагента = &ДоговорКонтрагента) КАК УсловияПоставок
	|			ПО УсловияПоставок.Номенклатура = ЦеныБазовые.Номенклатура
	|				И УсловияПоставок.ХарактеристикаНоменклатуры = ЦеныБазовые.ХарактеристикаНоменклатуры
	|	ГДЕ
	|		((НЕ ЦеныБазовые.ТипЦен.Рассчитывается)
	|				ИЛИ ЦеныБазовые.СпособРасчетаЦены <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
	|				ИЛИ ЦеныБазовые.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
	|					И (ЦеныРасчетные.Цена МЕЖДУ 0.000001 И ЦеныБазовые.ВерхняяГраница - 0.000001))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЦеныБазовые.ТипЦен,
	|		ЦеныБазовые.Номенклатура,
	|		ЦеныБазовые.ХарактеристикаНоменклатуры) КАК ЗапросПрайс
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НесвернутыеОстатки.Номенклатура КАК НоменклатураОст,
	|			НесвернутыеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыОст,
	|			СУММА(НесвернутыеОстатки.Остаток) КАК Остаток
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Ост.Номенклатура.Ссылка КАК Номенклатура,
	|				Ост.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|				Ост.КоличествоОстаток КАК Остаток
	|			ИЗ
	|				РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата," + ТекстОтбораПоНоменклатуреДляВТ + ") КАК Ост
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НТТ.Номенклатура.Ссылка,
	|				НТТ.ХарактеристикаНоменклатуры,
	|				НТТ.КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.ТоварыВНТТ.Остатки(&Дата," + ТекстОтбораПоНоменклатуреДляВТ + ") КАК НТТ
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Розница.Номенклатура.Ссылка,
	|				Розница.ХарактеристикаНоменклатуры,
	|				Розница.КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.ТоварыВРознице.Остатки(&Дата," + ТекстОтбораПоНоменклатуреДляВТ + ") КАК Розница) КАК НесвернутыеОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НесвернутыеОстатки.Номенклатура,
	|			НесвернутыеОстатки.ХарактеристикаНоменклатуры) КАК Остатки
	|		ПО ЗапросПрайс.Номенклатура = Остатки.НоменклатураОст
	|			И ЗапросПрайс.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатурыОст
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗапросПрайс.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаОтчета) КАК КурсыВалютСрезПоследнихОтчет
	|		ПО (ИСТИНА)
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросПрайс.Номенклатура.ЭтоГруппа УБЫВ,
	|	ЗапросПрайс.Номенклатура.Наименование
	|";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();

КонецФункции // СписокНоменклатуры()

//	Функции для отображения списка заказов покупателя

// Функция возвращает статусы заказов по товару и по оплате
//
Функция ПолучитьСтатусыЗаказов(СписокЗаказов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьЗапросДляЗаказовИСтатусов(Истина, Ложь, Ложь);
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Приход",  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);		
	Возврат Запрос.Выполнить();			
КонецФункции

// Функция возвращает заказы и их статусы по товару и по оплате
//
Функция ПолучитьЗапросДляЗаказовИСтатусов(ВыборДляСпискаЗаказов, ОтборПоСтатусамПоТоваруВключен, ОтборПоСтатусамПоОплатеВключен)
	ТекстЗапроса = "
		| ВЫБРАТЬ 
		| Заказы.Ссылка 
		| ";
	Если ВыборДляСпискаЗаказов Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|, 
			| ПредставленияСтатусовПоТовару.Представление КАК СтатусПоТовару, 
			| ПредставленияСтатусовПоОплате.Представление КАК СтатусПоОплате 
			| ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
        | ИЗ
        | (ВЫБРАТЬ Ссылка ИЗ Документ.ЗаказПокупателя " +
		?(ВыборДляСпискаЗаказов, " ГДЕ Ссылка В (&СписокЗаказов) ", "") + "
		| ) КАК Заказы

		| ЛЕВОЕ СОЕДИНЕНИЕ
        | (ВЫБРАТЬ Заказы.Заказ, 
		| ВЫБОР 
		| КОГДА Заказы.Проведен И (НеотгруженныеПозиции.Количество ЕСТЬ NULL ИЛИ НеотгруженныеПозиции.Количество = 0) 
		| 	ТОГДА 5
		| КОГДА ЗарезервированныеПозиции.Количество > 0
		| 	ТОГДА 
		| 	ВЫБОР КОГДА НезарезервированныеПозиции.Количество > 0
		| 		ТОГДА 2 
		| 	ИНАЧЕ 
		|		3
		| 	КОНЕЦ
		| КОГДА ОтгруженныеПозиции.Количество > 0
		| 	ТОГДА 4
		| КОГДА Заказы.Проведен
		| 	ТОГДА 1
		| ИНАЧЕ 
		|	0		
		| КОНЕЦ
		| КАК Статус
		| ИЗ
		| (Выбрать Ссылка Как Заказ, Проведен
		| ИЗ Документ.ЗаказПокупателя " +
		?(ВыборДляСпискаЗаказов, " ГДЕ Ссылка В (&СписокЗаказов) ", "") + "
		| ) КАК Заказы

		| ЛЕВОЕ СОЕДИНЕНИЕ
    		
		| (ВЫБРАТЬ ЗаказанныйТовар.Заказ КАК Заказ, КОЛИЧЕСТВО(1) КАК Количество ИЗ
		| (ВЫБРАТЬ ЗаказПокупателя КАК Заказ, Номенклатура, ХарактеристикаНоменклатуры, Количество
		| ИЗ РегистрНакопления.ЗаказыПокупателей " +
		?(ВыборДляСпискаЗаказов, " ГДЕ ЗаказПокупателя.Ссылка В (&СписокЗаказов) ", "") + "
		| ) КАК ЗаказанныйТовар 
		| ЛЕВОЕ СОЕДИНЕНИЕ 
		| (ВЫБРАТЬ Рег.ДокументРезерва КАК Заказ, Рег.Номенклатура, Рег.ХарактеристикаНоменклатуры, Сумма(Рег.Количество) КАК Количество 
		| ИЗ РегистрНакопления.ТоварыВРезервеНаСкладах КАК Рег 
		| ГДЕ Рег.ВидДвижения = &Приход " +
		?(ВыборДляСпискаЗаказов, " И Рег.ДокументРезерва В (&СписокЗаказов) ", "") + "
		| СГРУППИРОВАТЬ ПО Рег.ДокументРезерва, Рег.Номенклатура, Рег.ХарактеристикаНоменклатуры 
		| ) КАК ЗарезервированныйТовар
		| ПО ЗаказанныйТовар.Заказ = ЗарезервированныйТовар.Заказ
		| И ЗаказанныйТовар.Номенклатура = ЗарезервированныйТовар.Номенклатура
		| И ЗаказанныйТовар.ХарактеристикаНоменклатуры = ЗарезервированныйТовар.ХарактеристикаНоменклатуры
		| ГДЕ ЗарезервированныйТовар.Количество ЕСТЬ NULL
		| ИЛИ ЗаказанныйТовар.Количество > ЗарезервированныйТовар.Количество
		| СГРУППИРОВАТЬ ПО ЗаказанныйТовар.Заказ
		| ) КАК НезарезервированныеПозиции
		| ПО Заказы.Заказ = НезарезервированныеПозиции.Заказ
		
		| ЛЕВОЕ СОЕДИНЕНИЕ
		
		| (ВЫБРАТЬ ДокументРезерва КАК Заказ, КОЛИЧЕСТВО(1) КАК Количество
		| ИЗ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата" +
		?(ВыборДляСпискаЗаказов, ", ДокументРезерва.Ссылка В (&СписокЗаказов) ", "") + "
		|) 
		| СГРУППИРОВАТЬ ПО ДокументРезерва 
		| ) КАК ЗарезервированныеПозиции
		| ПО Заказы.Заказ = ЗарезервированныеПозиции.Заказ

		| ЛЕВОЕ СОЕДИНЕНИЕ
		
		| (ВЫБРАТЬ ЗаказПокупателя КАК Заказ, КОЛИЧЕСТВО(1) КАК Количество
		| ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата " +
		?(ВыборДляСпискаЗаказов, ", ЗаказПокупателя.Ссылка В (&СписокЗаказов) ", "") + "
		|) 
		| СГРУППИРОВАТЬ ПО ЗаказПокупателя 
		| ) КАК НеотгруженныеПозиции
		| ПО Заказы.Заказ = НеотгруженныеПозиции.Заказ
		
		| ЛЕВОЕ СОЕДИНЕНИЕ
		
		| (ВЫБРАТЬ ЗаказПокупателя КАК Заказ, КОЛИЧЕСТВО(1) КАК Количество
		| ИЗ РегистрНакопления.ЗаказыПокупателей
		| ГДЕ ВидДвижения = &Расход " +
		?(ВыборДляСпискаЗаказов, " И ЗаказПокупателя В (&СписокЗаказов) ", "") + "
		| СГРУППИРОВАТЬ ПО ЗаказПокупателя 
		| ) КАК ОтгруженныеПозиции
		| ПО Заказы.Заказ = ОтгруженныеПозиции.Заказ
	
		| ) КАК СтатусыПоТовару
		
		| ПО Заказы.Ссылка = СтатусыПоТовару.Заказ
		
		| ЛЕВОЕ СОЕДИНЕНИЕ		
        |(ВЫБРАТЬ 0 КАК Статус, ""Новый"" КАК Представление
		| ОБЪЕДИНИТЬ
		| ВЫБРАТЬ 1 КАК Статус, ""Принят"" КАК Представление
		| ОБЪЕДИНИТЬ
		| ВЫБРАТЬ 2 КАК Статус, ""Частично готов"" КАК Представление
		| ОБЪЕДИНИТЬ
		| ВЫБРАТЬ 3 КАК Статус, ""Готов"" КАК Представление
		| ОБЪЕДИНИТЬ
		| ВЫБРАТЬ 4 КАК Статус, ""Частично отгружен"" КАК Представление
		| ОБЪЕДИНИТЬ
		| ВЫБРАТЬ 5 КАК Статус, ""Отгружен"" КАК Представление
		| ) КАК ПредставленияСтатусовПоТовару

		| ПО СтатусыПоТовару.Статус = ПредставленияСтатусовПоТовару.Статус

		| ЛЕВОЕ СОЕДИНЕНИЕ

		| (ВЫБРАТЬ Заказ.Ссылка КАК Заказ,
		| ВЫБОР 
		| КОГДА СуммаРегистра ЕСТЬ NULL ТОГДА 0 
		| ИНАЧЕ 
		| ВЫБОР КОГДА СуммаДокумента > СуммаРегистра ТОГДА 1 ИНАЧЕ 2 
		| КОНЕЦ 
		| КОНЕЦ
		| КАК Статус
		| ИЗ
		| (ВЫБРАТЬ Ссылка, СуммаДокумента ИЗ Документ.ЗаказПокупателя " + 
		?(ВыборДляСпискаЗаказов, " ГДЕ Ссылка В (&СписокЗаказов) ", "") + "
		| ) КАК Заказ
		| ЛЕВОЕ СОЕДИНЕНИЕ
		| (ВЫБРАТЬ Сделка, СУММА(СуммаВзаиморасчетов) СуммаРегистра ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами
		| ГДЕ ВидДвижения = &Расход " +
		?(ВыборДляСпискаЗаказов, " И Сделка В (&СписокЗаказов) ", "") + "
		| СГРУППИРОВАТЬ ПО Сделка
		| ) КАК Регистр
		| ПО Заказ.Ссылка = Регистр.Сделка
		| ) КАК СтатусыПоОплате

		| ПО Заказы.Ссылка = СтатусыПоОплате.Заказ

		| ЛЕВОЕ СОЕДИНЕНИЕ

		| (ВЫБРАТЬ 0 КАК Статус, ""Не оплачен"" КАК Представление
		| ОБЪЕДИНИТЬ
		| ВЫБРАТЬ 1 КАК Статус, ""Частично оплачен"" КАК Представление
		| ОБЪЕДИНИТЬ
		| ВЫБРАТЬ 2 КАК Статус, ""Оплачен"" КАК Представление
		| ) КАК ПредставленияСтатусовПоОплате

		| ПО СтатусыПоОплате.Статус = ПредставленияСтатусовПоОплате.Статус
		| ";
	Если ОтборПоСтатусамПоТоваруВключен Или ОтборПоСтатусамПоОплатеВключен Тогда
		Если ОтборПоСтатусамПоТоваруВключен Тогда
			ТекстЗапроса = ТекстЗапроса + " Где СтатусыПоТовару.Статус В (&ДопустимыеСтатусыПоТовару) ";
		КонецЕсли;
		Если ОтборПоСтатусамПоОплатеВключен Тогда
			ТекстЗапроса = ТекстЗапроса + ?(ОтборПоСтатусамПоТоваруВключен, " И ", " Где ") +
				" СтатусыПоОплате.Статус В (&ДопустимыеСтатусыПоОплате) ";
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;	
КонецФункции

// Функция возвращает заказы с заданными статусами по товару и по оплате
//
Функция ПолучитьЗапросДляЗаказовПоСтатусам(ОтборПоСтатусамПоТоваруВключен, ОтборПоСтатусамПоОплатеВключен) Экспорт
	Возврат ПолучитьЗапросДляЗаказовИСтатусов(Ложь, ОтборПоСтатусамПоТоваруВключен, ОтборПоСтатусамПоОплатеВключен);
КонецФункции


Функция ПолучитьСчетаНаОплату(СписокЗаказов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Заказ.Ссылка КАК Заказ,
				   |	СчетНаОплатуПокупателю.Ссылка КАК СчетНаОплату,
	               |	СчетНаОплатуПокупателю.Номер КАК НомерСчета,
				   |	СчетНаОплатуПокупателю.Дата КАК ДатаСчета
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	               |	Документ.ЗаказПокупателя КАК Заказ
	               |ГДЕ
	               |	СчетНаОплатуПокупателю.ЗаказПокупателя = Заказ.Ссылка
	               |	И Заказ.Ссылка В(&СписокЗаказов)";
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);			   
	Возврат Запрос.Выполнить();	
КонецФункции

//	Функции работы с заказом

// Процедура инициализирует реквизиты нового веб-заказа
// при начале его формирования через веб-приложение
//
Процедура ИнициализироватьНовыйВебЗаказ(Заказ, ПараметрОбъектКопирования, ПараметрОснование, Контрагент, ДоговорКонтрагента, ВалютаДокумента) Экспорт
		
	Заказ.ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование);
	Заказ.Контрагент = Контрагент;
	Заказ.ПриИзмененииКонтрагента();
	Заказ.ДоговорКонтрагента = ДоговорКонтрагента;
	Заказ.ПриИзмененииДоговора();
	Заказ.ВалютаДокумента = ВалютаДокумента;

КонецПроцедуры // ИнициализироватьНовыйВебЗаказ()

// Процедура выполняет необходимые действия перед записью веб-заказа.
//
Процедура ПередЗаписьюВебЗаказа(Заказ, ОплатаНаличными) Экспорт

	ОбновитьТабличнуюЧастьТоварыВебЗаказа(Заказ);

	Заказ.СтруктурнаяЕдиница = ?(ОплатаНаличными,
	                       УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса"),
	                       Заказ.Организация.ОсновнойБанковскийСчет);

КонецПроцедуры // ПередЗаписьюВебЗаказа()

// Процедура выполняет необходимые действия при открытии веб-заказа.
//
Процедура ПриОткрытииВебЗаказа(Заказ) Экспорт

	Заказ.РассчитатьСумму();

КонецПроцедуры // ПриОткрытииВебЗаказа()

// Процедура обновляет табличную часть "Товары" и рассчитывает суммы веб-заказа.
//
Процедура ОбновитьВебЗаказ(Заказ) Экспорт

	ОбновитьТабличнуюЧастьТоварыВебЗаказа(Заказ);	
	Заказ.РассчитатьСумму();

КонецПроцедуры // ОбновитьВебЗаказ()

// Процедура обновляет табличную часть "Товары" веб-заказа.
//
Процедура ОбновитьТабличнуюЧастьТоварыВебЗаказа(Заказ) Экспорт

	Для каждого СтрокаТабличнойЧасти Из Заказ.Товары Цикл

		Заказ.ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	КонецЦикла;

КонецПроцедуры // ОбновитьТабличнуюЧастьТоварыВебЗаказа()


//	Отчет "Ведомость по заказам и взаиморасчетам"

Функция ПолучитьТекстЗапросаОтчетаАнализЗаказов(ОтображатьВедомостьПоЗаказам, ОтображатьВедомостьПоВзаиморасчетам) Экспорт
	ТекстЗапроса = " 
		| ВЫБРАТЬ
		| СУММА(ОбъединенныйЗапрос.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
		| СУММА(ОбъединенныйЗапрос.КоличествоПриход) КАК КоличествоПриход,
		| СУММА(ОбъединенныйЗапрос.КоличествоРасход) КАК КоличествоРасход,
		| СУММА(ОбъединенныйЗапрос.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
		| СУММА(ОбъединенныйЗапрос.СуммаВзаиморасчетовНачальныйОстаток) КАК СуммаВзаиморасчетовНачальныйОстаток,
		| СУММА(ОбъединенныйЗапрос.СуммаВзаиморасчетовПриход) КАК СуммаВзаиморасчетовПриход,
		| СУММА(ОбъединенныйЗапрос.СуммаВзаиморасчетовРасход) КАК СуммаВзаиморасчетовРасход,
		| СУММА(ОбъединенныйЗапрос.СуммаВзаиморасчетовКонечныйОстаток) КАК СуммаВзаиморасчетовКонечныйОстаток,
		| ОбъединенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
		| ОбъединенныйЗапрос.ЗаказПокупателя.Представление КАК ЗаказПокупателяПредставление
		| ";
	Если ОтображатьВедомостьПоЗаказам Тогда	
		ТекстЗапроса = ТекстЗапроса + "	
			| ,
			| ОбъединенныйЗапрос.Номенклатура КАК Номенклатура,
			| ВЫБОР КОГДА ОбъединенныйЗапрос.Номенклатура.ВестиУчетПоХарактеристикам ТОГДА ""да"" ИНАЧЕ ""нет"" КОНЕЦ КАК ВестиУчетПоХарактеристикам,
			| ОбъединенныйЗапрос.Номенклатура.Представление КАК НоменклатураПредставление,
			| ОбъединенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			| ОбъединенныйЗапрос.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатурыПредставление
			| ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "			
		| {ВЫБРАТЬ
		| ОбъединенныйЗапрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
		| ОбъединенныйЗапрос.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ДоговорКонтрагентаВалютаВзаиморасчетов,
		| ОбъединенныйЗапрос.ЗаказПокупателя КАК ЗаказПокупателя,
		| ";
	Если ОтображатьВедомостьПоЗаказам Тогда	
		ТекстЗапроса = ТекстЗапроса + "	
			| ОбъединенныйЗапрос.Номенклатура КАК Номенклатура,
			| ОбъединенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			| ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "		
		| ОбъединенныйЗапрос.Период КАК Период,
		| ОбъединенныйЗапрос.Регистратор КАК Регистратор}
		| ИЗ
	    | (
		| ";
	Если ОтображатьВедомостьПоЗаказам Тогда
		ТекстЗапроса = ТекстЗапроса + " 
			| ВЫБРАТЬ
			| ТаблицаРегистра.ДоговорКонтрагента,
			| ТаблицаРегистра.ЗаказПокупателя КАК ЗаказПокупателя,
			| ТаблицаРегистра.Номенклатура КАК Номенклатура,
			| ТаблицаРегистра.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			| ТаблицаРегистра.Период КАК Период,
			| ТаблицаРегистра.Регистратор КАК Регистратор,
			| ТаблицаРегистра.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,	
			| ТаблицаРегистра.КоличествоПриход КАК КоличествоПриход,
			| ТаблицаРегистра.КоличествоРасход КАК КоличествоРасход,
			| ТаблицаРегистра.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
			| NULL КАК СуммаВзаиморасчетовНачальныйОстаток,	
			| NULL КАК СуммаВзаиморасчетовПриход,
			| NULL КАК СуммаВзаиморасчетовРасход,	
			| NULL КАК СуммаВзаиморасчетовКонечныйОстаток
			| ИЗ
			| РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ДоговорКонтрагента.Владелец = &Контрагент) КАК ТаблицаРегистра
			| ";
	КонецЕсли;
	Если ОтображатьВедомостьПоЗаказам И ОтображатьВедомостьПоВзаиморасчетам Тогда
		ТекстЗапроса = ТекстЗапроса + " 
			| ОБЪЕДИНИТЬ
			| ";
	КонецЕсли;
	Если ОтображатьВедомостьПоВзаиморасчетам Тогда
		ТекстЗапроса = ТекстЗапроса + " 
			| ВЫБРАТЬ
			| ТаблицаРегистраВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
			| ТаблицаРегистраВзаиморасчетов.Сделка КАК ЗаказПокупателя,
			| NULL КАК Номенклатура,
			| NULL КАК ХарактеристикаНоменклатуры,
			| ТаблицаРегистраВзаиморасчетов.Период КАК Период,
			| ТаблицаРегистраВзаиморасчетов.Регистратор КАК Регистратор,
			| NULL КАК КоличествоНачальныйОстаток,
			| NULL КАК КоличествоПриход,
			| NULL КАК КоличествоРасход,
			| NULL КАК КоличествоКонечныйОстаток,	
			| ТаблицаРегистраВзаиморасчетов.СуммаВзаиморасчетовНачальныйОстаток КАК СуммаВзаиморасчетовНачальныйОстаток,
			| ТаблицаРегистраВзаиморасчетов.СуммаВзаиморасчетовПриход КАК СуммаВзаиморасчетовПриход,
			| ТаблицаРегистраВзаиморасчетов.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетовРасход,	
			| ТаблицаРегистраВзаиморасчетов.СуммаВзаиморасчетовКонечныйОстаток КАК СуммаВзаиморасчетовКонечныйОстаток
			| ИЗ
			| РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ДоговорКонтрагента.Владелец = &Контрагент) КАК ТаблицаРегистраВзаиморасчетов
			| ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + " 
		| ) КАК ОбъединенныйЗапрос	
	    | СГРУППИРОВАТЬ ПО 
		| ОбъединенныйЗапрос.ЗаказПокупателя
		| ";
	Если ОтображатьВедомостьПоЗаказам Тогда	
		ТекстЗапроса = ТекстЗапроса + "	
			| , 
			| ОбъединенныйЗапрос.Номенклатура, 
			| ВЫБОР КОГДА ОбъединенныйЗапрос.Номенклатура.ВестиУчетПоХарактеристикам ТОГДА ""да"" ИНАЧЕ ""нет"" КОНЕЦ,
			| ОбъединенныйЗапрос.ХарактеристикаНоменклатуры
			| ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	    | ИТОГИ
		| СУММА(КоличествоНачальныйОстаток),	
		| СУММА(КоличествоПриход),
		| СУММА(КоличествоРасход),
		| СУММА(КоличествоКонечныйОстаток),
		| СУММА(СуммаВзаиморасчетовНачальныйОстаток),	
		| СУММА(СуммаВзаиморасчетовПриход),
		| СУММА(СуммаВзаиморасчетовРасход),
		| СУММА(СуммаВзаиморасчетовКонечныйОстаток),
		| ВЫБОР КОГДА ЗаказПокупателя ЕСТЬ NULL ИЛИ ЗаказПокупателя = Неопределено
		|   ТОГДА ""<Без учета заказа>""
  		| 	ИНАЧЕ ЗаказПокупателяПредставление
		| КОНЕЦ КАК ЗаказПокупателяПредставление
		| ";
	Если ОтображатьВедомостьПоЗаказам Тогда	
		ТекстЗапроса = ТекстЗапроса + "	
			| ,
			| ВЫБОР КОГДА Номенклатура ЕСТЬ NULL
			|   ТОГДА ""<Без учета номенклатуры>""
			|   ИНАЧЕ НоменклатураПредставление
			| КОНЕЦ КАК НоменклатураПредставление,
			| ВЫБОР КОГДА ХарактеристикаНоменклатуры = &ПустаяХарактеристика
			|   ТОГДА 
			|   ВЫБОР КОГДА Номенклатура ЕСТЬ NULL
			| 		ТОГДА ""<Без учета характеристик>""
			| 	КОГДА ВестиУчетПоХарактеристикам = ""нет""
			| 		ТОГДА ""<Без учета характеристик>""
			| 		ИНАЧЕ ""<Характеристика не задана>""
			|   КОНЕЦ	
			|   КОГДА ХарактеристикаНоменклатуры ЕСТЬ NULL
			|   ТОГДА 
			|   ВЫБОР КОГДА Номенклатура ЕСТЬ NULL
			| 		ТОГДА ""<Без учета характеристик>""
			| 	КОГДА ВестиУчетПоХарактеристикам = ""нет""
			| 		ТОГДА ""<Без учета характеристик>""
			|     	ИНАЧЕ ""<Характеристика не задана>""
			|   КОНЕЦ	
			|   ИНАЧЕ ХарактеристикаНоменклатурыПредставление
			| КОНЕЦ КАК ХарактеристикаНоменклатурыПредставление
			| ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "		
		| ПО
		| ОБЩИЕ,
		| ЗаказПокупателя
		| ";
	Если ОтображатьВедомостьПоЗаказам Тогда	
		ТекстЗапроса = ТекстЗапроса + "		
			| ,
			| Номенклатура, 
			| ХарактеристикаНоменклатуры
			| ";	
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "		
		| {ИТОГИ ПО
		| ДоговорКонтрагента,
		| ДоговорКонтрагента.ВалютаВзаиморасчетов,		
		| ЗаказПокупателя
		| ";
	Если ОтображатьВедомостьПоЗаказам Тогда
		ТекстЗапроса = ТекстЗапроса + "		
			| ,
			| Номенклатура,
			| ХарактеристикаНоменклатуры
			| ";
	КонецЕсли;		
	ТекстЗапроса = ТекстЗапроса + "			
		| }
		| ";
	Возврат ТекстЗапроса;
КонецФункции

// Процедура обрабатывает переданную структуру таким образом, чтобы ее можно было корректно
//  использовать во внешнем соединении.
//
// Параметры:
//  ИсходнаяСтруктура - Структура для обработки.
//
Процедура ПодготовитьСтруктуруДляВнешнегоСоединения(ИсходнаяСтруктура) Экспорт

	ВыходнаяСтруктура = Новый Структура;

	Для Каждого КлючЗначение Из ИсходнаяСтруктура Цикл
		ВыходнаяСтруктура.Вставить("_" + КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	ИсходнаяСтруктура = ВыходнаяСтруктура;

КонецПроцедуры // ПодготовитьСтруктуруДляВнешнегоСоединения()


//	ФУНКЦИИ ДЛЯ ВЕБ-ПРИЛОЖЕНИЯ "УДАЛЕННЫЙ СКЛАД"

// Процедура ПроверитьТабличнуюЧасть проверяет корректность заполнения позиций 
//	табличной части. В случае ошибки вызывает исключение.
//
// Параметры
//  ДокументОбъект       - объект редактируемого документа,
//  ИмяТабличнойЧасти    - имя табличной части документа
//
Процедура ПроверитьТабличнуюЧасть(ДокументОбъект, ИмяТабличнойЧасти) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	
	Для Индекс = 0 По ТабличнаяЧасть.Количество() - 1 Цикл
	
		СтрокаТабличнойЧасти = ТабличнаяЧасть[Индекс]; 			

		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда				
				ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;				
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда				
					Если ЕдиницаИзмерения.Владелец <> СтрокаТабличнойЧасти.Номенклатура Тогда				
						ВызватьИсключение "Табличная часть """ + ИмяТабличнойЧасти + """: в строке " + (Индекс + 1) + " единица измерения не соответствует товару.";						
					КонецЕсли;  
				Иначе			
					ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков; 				
					СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
				КонецЕсли; 
				СтрокаТабличнойЧасти.Коэффициент = ЕдиницаИзмерения.Коэффициент;	
			КонецЕсли;  	
		
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры)	
				И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
				ВызватьИсключение "Табличная часть """ + ИмяТабличнойЧасти + """: в строке " + (Индекс + 1) + " характеристика не соответствует товару.";
			КонецЕсли; 	
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры)
		   		И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
				ВызватьИсключение "Табличная часть """ + ИмяТабличнойЧасти + """: в строке " + (Индекс + 1) + " серия не соответствует товару.";
			КонецЕсли; 	
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти)
				И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
				И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				РассчитатьСуммыТабЧасти(ДокументОбъект, ИмяТабличнойЧасти);
			КонецЕсли; 	
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
				И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				РассчитатьСуммыНДСТабЧасти(ДокументОбъект, ИмяТабличнойЧасти);
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти)
				И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти)
				И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентРозничнойНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				РассчитатьПроцентРозничнойНаценкиПозицийТабЧасти(ДокументОбъект, ИмяТабличнойЧасти);
			КонецЕсли;
		   
		КонецЕсли; 		
	
	КонецЦикла; 	

КонецПроцедуры // ПроверитьТабличнуюЧасть()

// Рассчитывает суммы в таб.части. 
// Используется в веб-приложении "Удаленный склад".
//
// Параметры
//  ДокументОбъект       - объект редактируемого документа,
//  ИмяТабличнойЧасти    - имя табличной части документа
//
Процедура РассчитатьСуммыТабЧасти(ДокументОбъект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабЧасти, ДокументОбъект);	
	КонецЦикла; 

КонецПроцедуры // РассчитатьСуммыТабЧасти()

// Рассчитывает суммы НДС в таб.части. 
// Используется в веб-приложении "Удаленный склад".
//
// Параметры
//  ДокументОбъект       - объект редактируемого документа,
//  ИмяТабличнойЧасти    - имя табличной части документа
//
Процедура РассчитатьСуммыНДСТабЧасти(ДокументОбъект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабЧасти, ДокументОбъект);	
	КонецЦикла; 

КонецПроцедуры // РассчитатьСуммыНДСТабЧасти()


// Рассчитывает процент розничной наценки в позициях таб.части. 
// Используется в веб-приложении "Удаленный склад".
//
// Параметры
//  ДокументОбъект       - объект редактируемого документа,
//  ИмяТабличнойЧасти    - имя табличной части документа
//
Процедура РассчитатьПроцентРозничнойНаценкиПозицийТабЧасти(ДокументОбъект, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл	
		ОбработкаТабличныхЧастей.РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабЧасти, ДокументОбъект, глЗначениеПеременной("ВалютаРегламентированногоУчета"));	
	КонецЦикла; 

КонецПроцедуры // РассчитатьПроцентРозничнойНаценкиПозицийТабЧасти()
