Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий;           // (Общ)

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура заполняет табличную часть Комплектующих из регистра сведений
// КомплектующиеНоменклатуры
//
Процедура ЗаполнитьКомплектующие() Экспорт

	Если Комплектующие.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Комплектующие.Очистить();
	КонецЕсли;

	// заполним по регистру КомплектующиеНоменклатуры
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура" ,               Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры" , ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Коэффициент" ,                Коэффициент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Комплектующая КАК Номенклатура,
	|	ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
	|	Количество * &Коэффициент КАК Количество,
	|	ЕдиницаИзмерения,
	|	ДоляСтоимости
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры
	|
	|ГДЕ
	|	Номенклатура = &Номенклатура И
	|	ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = Комплектующие.Добавить();

		НоваяСтрока.Номенклатура                     = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры       = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество                       = Выборка.Количество * Количество;
		НоваяСтрока.ЕдиницаИзмерения                 = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ДоляСтоимости                    = Выборка.ДоляСтоимости;
		НоваяСтрока.Коэффициент                      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;

		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьКомплектующие()

// Функция формирует табличный документ
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьКомплектацияНоменклатуры()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	""" + ТекстКодАртикул + ":""        КАК ИмяКодАртикул,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Комплект,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Ответственный,
	|	Организация
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|
	|ГДЕ
	|	КомплектацияНоменклатуры.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура,
	|	Количество,
	|	ЕдиницаИзмерения,
	|	НомерСтроки
	|
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
	|
	|ГДЕ
	|	КомплектацияНоменклатурыКомплектующие.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР
	|";

	ЗапросКомплектующие = Запрос.Выполнить().Выгрузить();

	Макет        = ПолучитьМакет("Комплектация");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомплектацияНоменклатуры_Комплектация";

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, ?(ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Комплектация", "Разукомплектация")+" номенклатуры");
	ТабДокумент.Вывести(ОбластьМакета);

	Если ВыводитьКоды Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("КомплектКод");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Комплект");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Комплект           = СокрЛП(Шапка.Комплект);
	ОбластьМакета.Параметры.КоличествоНаПечать = "" + Шапка.Количество + " ("+Шапка.ЕдиницаИзмерения+")";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Для каждого ВыборкаСтрокКомплектующие Из ЗапросКомплектующие Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокКомплектующие.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В одной из строк не заполнено значение комплектующей - строка при печати пропущена.");
			Продолжить;
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокКомплектующие);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросКомплектующие.Индекс(ВыборкаСтрокКомплектующие) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокКомплектующие.Номенклатура);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/"+ Шапка.Ответственный + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Комплектация" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьКомплектацияНоменклатуры();	
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Истина);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Комплектация","Комплектация номенклатуры");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ", "Расход с розничных складов в ценах АТТ");
	СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям()

	ТоварыТабличнойЧасти = Комплектующие.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;

	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество");
	ТоварыТабличнойЧасти=Комплектующие.Выгрузить();
	Комплектующие.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	ЗаказОбособленныйУчет = ложь;
	Если ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") И Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить() Тогда
		Если Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			ЗаказОбособленныйУчет = истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		ЗаполнятьИзРезервов = ЗаказОбособленныйУчет 
		                      И ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва; 

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   Справочники.Качество.Новый);

		Если ЗаполнятьИзРезервов Тогда
			СтруктураПоиска.Вставить("ДокументРезерва",    Заказ);
			НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента  >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			СписанноеКоличествоЕдХранения = Окр(Строка.Остаток * КоэффСписания, 3, РежимОкругления.Окр15как20);

			НоваяСтрока = Комплектующие.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			НоваяСтрока.СерияНоменклатуры  = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество         = СписанноеКоличество; 
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличествоЕдХранения;
		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Комплектующие.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				НоваяСтрока.Количество = КоличествоОсталосьПогасить;
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПоСериям()

// Заполняет табличную часть при оперативном проведении
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Склад", Склад);

	// Сформируем массив комплектующих для фильтров запросов.
	МассивКомплектующих = Комплектующие.ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("Комплектующие", МассивКомплектующих);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыВРезервеНаСкладах.Номенклатура                КАК Номенклатура,
	|	ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток           КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,ДокументРезерва = &Заказ
	|              И Склад = &Склад
	|              И Номенклатура В (&Комплектующие)) КАК ТоварыВРезервеНаСкладах
	|";

	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры");

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличную часть 
	// Комплектующие
	Для Каждого СтрокаТЧ Из Комплектующие Цикл

		// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
		// если способ списание "со склада" или не установлен - пропускаем строку
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров) ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
			Продолжить;
		КонецЕсли; 

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);

		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

		// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
		КоличествоОсталосьПогасить = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
						/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
			Иначе
				// Это ошибка: списываемое количество не должно быть больше остатка.
				// Такой документ не проведется оперативно.
				КоэффСписания = 1;
			КонецЕсли;

			СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

			Строка.Количество = Строка.Количество - СписанноеКоличество;

		КонецЦикла; 

		Если КоличествоОсталосьПогасить > 0 Тогда
			// Значит в документе неверно задан способ списания. Заполнять не будем
			Возврат;
		КонецЕсли; 

	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив;

	ТаблицаТЧ = Комплектующие.Выгрузить();
	ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

	МассивТаблицСтрок = Комплектующие.ВыгрузитьКолонки();
	МассивТаблицСтрок.Колонки.Добавить("ИндексИсходнойСтроки");
	МассивТаблицСтрок.Колонки.Добавить("СкладКомпанииРозничный");

	Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

		Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			Продолжить;
		КонецЕсли; 

		// Пересчитаем в единицы хранения
		СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
								/ СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);

		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

		// Погашаем количество в таблице
		КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;

		// Погашаем количество в таблице, записывая способ списания
		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;

			СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

			// Добавляем строку с данными о размещенном количестве
			НоваяСтрока = МассивТаблицСтрок.Добавить();
			НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

			НоваяСтрока.Номенклатура     = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;

			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;

			НоваяСтрока.Количество = ?(СтрокаТЧ.Коэффициент <> 0, СписанноеКоличество
			* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.Коэффициент 
										, 0);
			НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;

			КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

			// Уменьшаем количество в исходной строке
			СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

			// Уменьшаем количество в строке остатков
			Строка.Количество   = Строка.Количество - СписанноеКоличество;

		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 Тогда

			// Добавляем строку с данными о размещенном количестве
			НоваяСтрока = МассивТаблицСтрок.Добавить();
			НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;

			НоваяСтрока.Количество = ?(СтрокаТЧ.Коэффициент <>0, КоличествоОсталосьПогасить 
			* НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент/ СтрокаТЧ.Коэффициент 
										, 0);
			НоваяСтрока.Коэффициент = СтрокаТЧ.Коэффициент;

			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

		КонецЕсли; 

	КонецЦикла;

	// Изменяем табличную часть
	ТекИндексИсходнойСтроки = Неопределено;
	Для Каждого Строка Из МассивТаблицСтрок Цикл

		// Если строка с таким индексом уже обрабатывалась, то добавляем новую
		Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
			Стр = Комплектующие[Строка.ИндексИсходнойСтроки];
			РедактируемаяСтрока = Комплектующие.Добавить();
			РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
			РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
		Иначе
			РедактируемаяСтрока = Комплектующие[Строка.ИндексИсходнойСтроки];
		КонецЕсли; 

		РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;

		Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
			Продолжить;
		КонецЕсли;

		РедактируемаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		РедактируемаяСтрока.Коэффициент = Строка.Коэффициент;
		РедактируемаяСтрока.Количество = Строка.Количество;

		ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

	КонецЦикла; 
	
	ЗаполнитьПоСериям();

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ


/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - текст для дополнительной информации об ошибки проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, Склад, ВидОперации, Номенклатура, Количество, ЕдиницаИзмерения");
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И СтруктураШапкиДокумента.СложныйУчетНДС
		И Не СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда
		СтруктураОбязательныхПолей.Вставить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.Услуга = Истина Или СтруктураШапкиДокумента.Набор = Истина Или СтруктураШапкиДокумента.Комплект = Истина Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Комплектуемая номенклатура не может быть услугой, набором-пакетом или набором-комплектом!", Отказ, Заголовок);
	КонецЕсли;

	// Вид склада
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Комплектация номенклатуры не может проводится на НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	ТаблицаКомплектующих = РезультатЗапросаПоКомплектующим.Выгрузить();

	Возврат ТаблицаКомплектующих;

КонецФункции // ПодготовитьТаблицуКомплектующих()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоКомплектующим - результат запроса по табличной части "Комплектующие",
//  СтруктураШапкиДокумента         - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений по комплектам.
//
Функция ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента)

	// подготовим структуру таблицы
	ТаблицаКомплектов = РезультатЗапросаПоКомплектующим.Выгрузить();
	ТаблицаКомплектов.Очистить();

	НоваяСтрока = ТаблицаКомплектов.Добавить();
	НоваяСтрока.Номенклатура                 = СтруктураШапкиДокумента.Номенклатура;
	НоваяСтрока.Услуга                       = СтруктураШапкиДокумента.Услуга;
	НоваяСтрока.Количество                   = СтруктураШапкиДокумента.Количество * СтруктураШапкиДокумента.Коэффициент
											   / СтруктураШапкиДокумента.КоэффициентЕдиницыХранения;
	НоваяСтрока.НомерСтроки                  = 0;
	НоваяСтрока.ХарактеристикаНоменклатуры   = СтруктураШапкиДокумента.ХарактеристикаНоменклатуры;
	НоваяСтрока.СерияНоменклатуры            = СтруктураШапкиДокумента.СерияНоменклатуры;
	НоваяСтрока.ЗаказПартии                  = СтруктураШапкиДокумента.Заказ;
	НоваяСтрока.СпособСписанияОстаткаТоваров = СтруктураШапкиДокумента.СпособСписанияОстаткаТоваров;
	НоваяСтрока.Склад                        = СтруктураШапкиДокумента.Склад;
    НоваяСтрока.ЕдиницаИзмерения 			 = СтруктураШапкиДокумента.ЕдиницаИзмерения;
	Возврат ТаблицаКомплектов;

КонецФункции // ПодготовитьТаблицуКомплектов()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоКомплектующим  - таблица значений, содержащая данные для проведения и проверки ТЧ Комплектующие
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Комплектующие";

	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ДоляСтоимости");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Комплектующие",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Комплектующие", ТаблицаПоКомплектующим, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиКомплектующих()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоКомплектующим    - таблица значений, содержащая данные для проведения и проверки ТЧ ТаблицаПоКомплектующим
//  ТаблицаПоКомплектам       - таблица значений, содержащая данные для проведения и проверки по комплектам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);

	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

	Если ОтражатьВУправленческомУчете Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период      = Дата;
	КонецЕсли;

	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

		// Проведение по партиям остановим в том случае, если не хватит хоть одного комплектующего.
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка,Движения.СписанныеТовары.Выгрузить(),,,,,Истина);

	Иначе

		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)
	
	// Движения по документу.

	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах

		// По комплектующим.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		// Проверка остатков при оперативном проведении.
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующим);
								
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
			
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
				УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"], ТаблицаПоЦенам);

				Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Комплектующие", ТаблицыДанныхДокумента["ТаблицаПоКомплектующим"], Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
					
			ВидДвижения = ?( ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвижения, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		
			// Если есть списание из резерва, то надо списать резерв
			ТаблицаПоКомплектующимИзРезерва = УдалитьСтрокиНеТребующиеСписанияРезерва(ТаблицаПоКомплектующим);
			Если ТаблицаПоКомплектующимИзРезерва.Количество() > 0 Тогда
			
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектующим", ТаблицаПоКомплектующимИзРезерва);
										
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Заказ);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

		// По комплектам
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		// Проверка остатков при оперативном проведении.
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация И РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект,"", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектам);
										
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
			
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоКомплектам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
				УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоКомплектам"], ТаблицаПоЦенам);

				// Проверка наличия продажных цен на приходуемый товар.
				Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Комплектующие", ТаблицыДанныхДокумента["ТаблицаПоКомплектам"], Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
					
			ВидДвижения = ?(ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвижения, ТаблицыДанныхДокумента, Дата);
					
		КонецЕсли;
		
		// По резервам
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		
			//Если есть списание из резерва, то надо списать резерв		
			ТаблицаПоКомплектамИзРезерва = УдалитьСтрокиНеТребующиеСписанияРезерва(ТаблицаПоКомплектам);
			Если ТаблицаПоКомплектамИзРезерва.Количество() > 0 Тогда
			
				НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект,"", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектамИзРезерва);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Заказ);

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
				КонецЕсли;
				
			КонецЕсли;
					
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			
			ТаблицаПоКомплектамИзРезерва = ТаблицаПоКомплектам.Скопировать();
			Если ТаблицаПоКомплектамИзРезерва.Количество() > 0
				И ЗначениеЗаполнено(Заказ) Тогда
				
				// Считается исполнением внутреннего заказа. Резерв в это случае делать не надо.
				Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
			        И Заказ.Заказчик = Склад Тогда                         
					// Погашение внутренних заказов в случае Заказчик = Склад поступления комплекта
					Если НЕ Отказ Тогда
						
						НаборДвижений   = Движения.ВнутренниеЗаказы;
						ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

						Для Каждого СтрокаДок Из ТаблицаПоКомплектамИзРезерва Цикл

							КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(Заказ, 
											   СтрокаДок.Количество, 
											   СтрокаДок.Номенклатура,
											   ?(НЕ ЗначениеЗаполнено(СтрокаДок.ХарактеристикаНоменклатуры), Неопределено, СтрокаДок.ХарактеристикаНоменклатуры),
											   СтрокаДок.ЕдиницаИзмерения,
											   Перечисления.СтатусыПартийТоваров.Купленный);
											   
							Если КоличествоОстаток > 0 Тогда
								НоваяСтрока = ТаблицаДвижений.Добавить();
								НоваяСтрока.ВнутреннийЗаказ            = Заказ;
								НоваяСтрока.Заказчик                   = Склад;
								НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.Купленный;
								НоваяСтрока.Номенклатура               = СтрокаДок.Номенклатура;
								НоваяСтрока.ЕдиницаИзмерения           = СтрокаДок.ЕдиницаИзмерения;
								НоваяСтрока.Количество                 = Мин(СтрокаДок.Количество, КоличествоОстаток);
								Если ЗначениеЗаполнено(СтрокаДок.ХарактеристикаНоменклатуры) Тогда
									НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДок.ХарактеристикаНоменклатуры;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если ТаблицаДвижений.Количество() > 0 Тогда
							НаборДвижений.мПериод          = Дата;
							НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
							НаборДвижений.ВыполнитьРасход();
						КонецЕсли;
					КонецЕсли;
				Иначе
				
					НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоКомплектам", ТаблицаПоКомплектамИзРезерва);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
								
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",           Склад);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Заказ);

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	// По комплектующим

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектующим, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Комплектующие", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// По комплектам

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоКомплектам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатковРазукомплектация(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.

	ТаблицаПоТоварам = ТаблицаПоКомплектующим.Скопировать();

	// Количество комплекта распределяется на комплектующие
	СтрокаКомплекта = ТаблицаПоКомплектам[0];

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда

		ТаблицаПоТоварам.Колонки.Добавить("НоменклатураНовая");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатурыНовая");
		ТаблицаПоТоварам.Колонки.Добавить("КоличествоПоступление");

		Если ТаблицаПоТоварам.Количество()<>0 Тогда
			КоличествоКомплекта = Окр(СтрокаКомплекта.Количество/ТаблицаПоТоварам.Количество(), 3);
		Иначе
			КоличествоКомплекта = 0;
		КонецЕсли;

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;

		Для каждого Строка Из ТаблицаПоТоварам Цикл

			Строка.НоменклатураНовая               = СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатурыНовая = СтрокаКомплекта.ХарактеристикаНоменклатуры;
			
			Если СтрокаКомплекта.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
				Строка.СерияНоменклатурыНовая = СтрокаКомплекта.СерияНоменклатуры;
			КонецЕсли;	

			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта-КоличествоКомплекта;

			Строка.КоличествоПоступление = КоличествоКомплекта;

			Если ТаблицаПоТоварам.Индекс(Строка)=ТаблицаПоТоварам.Количество()-1 Тогда
				Строка.КоличествоПоступление = Строка.КоличествоПоступление + НеРаспределеноКоличествоКомплекта;
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда

		ТаблицаПоТоварам.Колонки.Номенклатура.Имя               = "НоменклатураНовая";
		ТаблицаПоТоварам.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаНоменклатурыНовая";
		ТаблицаПоТоварам.Колонки.СерияНоменклатуры.Имя          = "СерияНоменклатурыНовая"; 
		ТаблицаПоТоварам.Колонки.Количество.Имя                 = "КоличествоПоступление";

		ТаблицаПоТоварам.Колонки.Добавить("Номенклатура");
		ТаблицаПоТоварам.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаПоТоварам.Колонки.Добавить("Количество");

		НеРаспределеноКоличествоКомплекта = СтрокаКомплекта.Количество;

		ВсегоДолейСтоимости = ТаблицаПоТоварам.Итог("ДоляСтоимости");

		Для каждого Строка Из ТаблицаПоТоварам Цикл

			КоэффициентСтроки   = ?(ВсегоДолейСтоимости = 0, 0, Строка.ДоляСтоимости/ВсегоДолейСтоимости);
			КоличествоКомплекта = Окр(СтрокаКомплекта.Количество*КоэффициентСтроки, 3);

			Строка.Номенклатура               	= СтрокаКомплекта.Номенклатура;
			Строка.ХарактеристикаНоменклатуры 	= СтрокаКомплекта.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатуры 			= СтрокаКомплекта.СерияНоменклатуры;
			
			Если НЕ Строка.НоменклатураНовая.ВестиПартионныйУчетПоСериям Тогда
				Строка.СерияНоменклатурыНовая = Неопределено;
			КонецЕсли;	
			
			НеРаспределеноКоличествоКомплекта = НеРаспределеноКоличествоКомплекта-КоличествоКомплекта;

			Строка.Количество = КоличествоКомплекта;

			Если ТаблицаПоТоварам.Индекс(Строка)=ТаблицаПоТоварам.Количество()-1 Тогда
				Строка.Количество = Строка.Количество + НеРаспределеноКоличествоКомплекта;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	ТаблицаПоТоварам.Колонки.Добавить("ДокументОприходованияНовый");
	ТаблицаПоТоварам.ЗаполнитьЗначения(Ссылка, "ДокументОприходованияНовый");

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;


	// Если ПУ по складам
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"СкладПолучатель");
	КонецЕсли;

	// Если резервирование под заказ - заказ партии
	Если ТипЗнч(Заказ) =  Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда

			ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено),"ЗаказПартии");

			// Заказ, на который списывается
			ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено),"ЗаказСписания");
		КонецЕсли;
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,   "ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Комплектация, "КодОперацииПартииТоваров");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,  "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,      "ОтражатьВНалоговомУчете");

	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");

	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",       "ВалютаУправленческогоУчета",                 "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",       "КурсВалютыУправленческогоУчета",             "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ВидСклада",                                  "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Услуга",                                     "Услуга");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Набор",                                      "Набор");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "Комплект"                                   ,"Комплект");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Номенклатура"   , "ЕдиницаХраненияОстатков.Коэффициент",        "КоэффициентЕдиницыХранения");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",     "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, Дата, , Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Комплектующие.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть ""Комплектующие""!", Отказ, Заголовок);
	КонецЕсли;

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                       , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                        , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                     , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                   , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"            , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПартии"                  , "Ссылка.Заказ");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров" , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("ДоляСтоимости"                , "ДоляСтоимости");
	СтруктураПолей.Вставить("Склад"                        , "Ссылка.Склад");
    СтруктураПолей.Вставить("ЕдиницаИзмерения"             , "ЕдиницаИзмерения");

	РезультатЗапросаПоКомплектующим = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Комплектующие", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоКомплектующим = ПодготовитьТаблицуКомплектующих(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);
	
	Если Не Отказ Тогда
		ТаблицаПоКомплектам    = ПодготовитьТаблицуКомплектов(РезультатЗапросаПоКомплектующим, СтруктураШапкиДокумента);
	КонецЕсли;

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиКомплектующих(ТаблицаПоКомплектующим, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектующим, ТаблицаПоКомплектам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(Основание)

	Если Основание = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		возврат;
	КонецЕсли;

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполнение шапки
		Комментарий     = Основание.Комментарий;
		Заказ           = Основание.Ссылка;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		// Заполнение шапки
		Комментарий     = Основание.Комментарий;
		Заказ           = Основание.Ссылка;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВНалоговомУчете      = Ложь;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		Комментарий    = Основание.Комментарий;

		Если ЗначениеЗаполнено(Основание.ЗаказПокупателя) Тогда
			Заказ = Основание.ЗаказПокупателя;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Функция удаляет их исходной таблицы строки не требующие списания из резерва
// Возвращается КОПИЯ исходной таблицы
//
Функция УдалитьСтрокиНеТребующиеСписанияРезерва(ТаблицаПоКомплектующим)

	ТаблицаПоКомплектующимИзРезерва = ТаблицаПоКомплектующим.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоКомплектующимИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоКомплектующимИзРезерва.Получить(Сч);
		Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			 ТаблицаПоКомплектующимИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоКомплектующимИзРезерва;
	
КонецФункции // УдалитьСтрокиНеТребующиеСписанияРезерва()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
