////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КОРРЕКТИРОВКИ СТОИМОСТИ СПИСАНИЯ

// Возвращает массив кодов операций партий товаров для передачи в качестве
//параметров в запросы по переданной строке с названием операции
//
// Параметры:
//	ВидОперации 	- строка "Поступление", "Перемещение", "ВнешнееСписание". 
//	
//	Возвращает массив кодов операций
Функция ПолучитьСписокКодовОпераций(ВидОперации,РегистрИсточник=Неопределено, РегистрПриемник=Неопределено)
	СписокКодов = Новый Массив();
	Если ВидОперации = "Поступление" Тогда
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.Оприходование);
	ИначеЕсли ВидОперации = "Перемещение" Тогда
		Если (ВРЕГ(РегистрИсточник) = "ПАРТИИТОВАРОВНАСКЛАДАХ")
		  И (ВРЕГ(РегистрПриемник) = "ПАРТИИТОВАРОВНАСКЛАДАХ") Тогда
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.КорректировкаСерийИХарактеристик);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.КорректировкаКачества);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.Комплектация);
		ИначеЕсли (ВРЕГ(РегистрИсточник) = "ПАРТИИТОВАРОВНАСКЛАДАХ")
		  И (ВРЕГ(РегистрПриемник) = "ПАРТИИТОВАРОВПЕРЕДАННЫЕ") Тогда	
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
		ИначеЕсли (ВРЕГ(РегистрИсточник) = "ПАРТИИТОВАРОВПЕРЕДАННЫЕ")
		  И (ВРЕГ(РегистрПриемник) = "ПАРТИИТОВАРОВНАСКЛАДАХ") Тогда	
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента);
		Иначе
			//Все операции по перемещению
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.КорректировкаСерийИХарактеристик);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.КорректировкаКачества);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.Комплектация);
			
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
			
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
			СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратТарыОтКонтрагента);
		КонецЕсли;
	ИначеЕсли ВидОперации = "ВнешнееСписание" Тогда	
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.Реализация);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница);

		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеПоИнвентаризации);
		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру);

		СписокКодов.Добавить(Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты);
	КонецЕсли;
	
    Возврат СписокКодов;
КонецФункции	

// Добавляет в текст запроса условия фильтров по номенклатуре, партиобразующим документам, встречному выпуску
//
// Параметры:
//	ТекстЗапроса 	- строка текста запроса,
//	ДопПараметры 	- структура, содержащая настройки учетной политики и признак встречного выпуска. 
//	
Процедура ДополнитьЗапросУсловиями(ТекстЗапроса,ДопПараметры)
	ТекстОграничениеНаПартии = "И (НЕ СтатусПартии = &СтатусПартииПоОрдеру)
								|И (НЕ СтатусПартии = &СтатусПартииНаКомиссию)";
	СпособОценкиМПЗ = ВРег(Строка(УправлениеЗапасамиПартионныйУчет.УчетнаяПолитика("СпособОценкиМПЗ", "Упр", Неопределено, ДопПараметры)));
	Если СпособОценкиМПЗ = "ФИФО" 
		ИЛИ СпособОценкиМПЗ = "ЛИФО" Тогда
			
		ТекстОграничениеНаПартии = ТекстОграничениеНаПартии + "
		|	И ДокументОприходования В (&МассивДокументовОприходования) ";
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УСЛОВИЕ_ОСТАТКИ", "Номенклатура В (&МассивНоменклатуры)
	|	" + ТекстОграничениеНаПартии);
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УСЛОВИЕ_ДВИЖЕНИЯ_НАСКЛАДАХ", " И Номенклатура В (&МассивНоменклатуры) И Активность 
	|	" + ТекстОграничениеНаПартии);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УСЛОВИЕ_ДВИЖЕНИЯ_ПЕРЕДАННЫЕ", " И Номенклатура В (&МассивНоменклатуры) И Активность 
	|	" + ТекстОграничениеНаПартии);
	
КонецПроцедуры

// Формирует список и сохраняет в регистре сведений список узлов
// Узлом будем называть состояние ТМЦ, характеризуемое полным набором значений измерений регистров партионного учета
//
// Параметры:
//	ДатаНач 			- дата начала периода, за который корректируется стоимость списания,
//	ДатаКон 			- дата окончания периода, за который корректируется стоимость списания,
//	ТаблицаТоваров 		- таблица значений содержащая список номенклатуры и документов оприходования по которым производиться корректировка,
//	РегламентныйДокумент- документ, из которого вызывается корректировка стоимости списания,
//	ДопПараметры		- структура, содержащая дополнительные параметры, такие как учетная политика,
//	НомерПередела		- число, номер передела,
//	НомерРасчета		- число, номер операции в рамках одного передела при Расчете себестоимости выпуска.
//
Процедура СформироватьСписокУзлов(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры, НомерПередела, НомерРасчета)
	//Получим таблицу новых узлов, каждый узел определяется комбинацией всех 
	//измерений партионного упр. учета (все реквизиты регистра сведений УзлыКорректировкиСтоимостиСписания)
	//выбираются все узлы по которым был начальный остаток на ДатаНач и все по которым был приход за период, 
	//с кодами операций Поступления и Перемещения.
	//Данные получаются из регистров ПартииТоваровНаСкладах и ПартииТоваровПереданные
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ВложенныйЗапрос.СтоимостьОстаток) КАК Стоимость,
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.Склад,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	               |	ВложенныйЗапрос.СерияНоменклатуры,
	               |	ВложенныйЗапрос.ДокументОприходования,
	               |	ВложенныйЗапрос.СтатусПартии,
	               |	ВложенныйЗапрос.Заказ,
	               |	ВложенныйЗапрос.Качество,
	               |	ВложенныйЗапрос.СтатусПередачи,
	               |	ВложенныйЗапрос.ДоговорКонтрагента,
	               |	ВложенныйЗапрос.ДокументПередачи,
	               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	               |	ВложенныйЗапрос.Регистр
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ОстаткиПартииТоваров.СтоимостьОстаток КАК СтоимостьОстаток,
	               |		ОстаткиПартииТоваров.Номенклатура КАК Номенклатура,
	               |		ОстаткиПартииТоваров.Склад КАК Склад,
	               |		ОстаткиПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		ОстаткиПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
	               |		ОстаткиПартииТоваров.ДокументОприходования КАК ДокументОприходования,
	               |		ОстаткиПартииТоваров.СтатусПартии КАК СтатусПартии,
	               |		ОстаткиПартииТоваров.Заказ КАК Заказ,
	               |		ОстаткиПартииТоваров.Качество КАК Качество,
	               |		ОстаткиПартииТоваров.СтатусПередачи КАК СтатусПередачи,
	               |		ОстаткиПартииТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |		ОстаткиПартииТоваров.ДокументПередачи КАК ДокументПередачи,
	               |		ОстаткиПартииТоваров.КоличествоОстаток КАК Количество,
	               |		ОстаткиПартииТоваров.Регистр КАК Регистр
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |			ПартииТоваровНаСкладахОстатки.Склад КАК Склад,
	               |			ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |			ПартииТоваровНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	               |			ПартииТоваровНаСкладахОстатки.ДокументОприходования КАК ДокументОприходования,
	               |			ПартииТоваровНаСкладахОстатки.СтатусПартии КАК СтатусПартии,
	               |			ПартииТоваровНаСкладахОстатки.Заказ КАК Заказ,
	               |			ПартииТоваровНаСкладахОстатки.Качество КАК Качество,
	               |			ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |			ПартииТоваровНаСкладахОстатки.СтоимостьОстаток КАК СтоимостьОстаток,
	               |			NULL КАК СтатусПередачи,
	               |			NULL КАК ДоговорКонтрагента,
	               |			NULL КАК ДокументПередачи,
	               |			""ПартииТоваровНаСкладах"" КАК Регистр
	               |		ИЗ
	               |			РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаНач, 
				   |			                                                            //УСЛОВИЕ_ОСТАТКИ
				   |																			) КАК ПартииТоваровНаСкладахОстатки
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ПартииТоваровПереданныеОстатки.Номенклатура,
	               |			NULL,
	               |			ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры,
	               |			NULL,
	               |			ПартииТоваровПереданныеОстатки.ДокументОприходования,
	               |			ПартииТоваровПереданныеОстатки.СтатусПартии,
	               |			NULL,
	               |			NULL,
	               |			ПартииТоваровПереданныеОстатки.КоличествоОстаток,
	               |			ПартииТоваровПереданныеОстатки.СтоимостьОстаток,
	               |			ПартииТоваровПереданныеОстатки.СтатусПередачи,
	               |			ПартииТоваровПереданныеОстатки.ДоговорКонтрагента,
	               |			ПартииТоваровПереданныеОстатки.ДокументПередачи,
	               |			""ПартииТоваровПереданные""
	               |		ИЗ
	               |			РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаНач,  
				   |			                                                            //УСЛОВИЕ_ОСТАТКИ
				   |																			) КАК ПартииТоваровПереданныеОстатки) КАК ОстаткиПартииТоваров
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ДвиженияПартииТоваровНаСкладах.КодОперации В (&КодыОперацииПоступление)
	               |				ТОГДА ДвиженияПартииТоваровНаСкладах.Стоимость
	               |			ИНАЧЕ 0
	               |		КОНЕЦ,
	               |		ДвиженияПартииТоваровНаСкладах.Номенклатура,
	               |		ДвиженияПартииТоваровНаСкладах.Склад,
	               |		ДвиженияПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	               |		ДвиженияПартииТоваровНаСкладах.СерияНоменклатуры,
	               |		ДвиженияПартииТоваровНаСкладах.ДокументОприходования,
	               |		ДвиженияПартииТоваровНаСкладах.СтатусПартии,
	               |		ДвиженияПартииТоваровНаСкладах.Заказ,
	               |		ДвиженияПартииТоваровНаСкладах.Качество,
	               |		NULL,
	               |		NULL,
	               |		NULL,
	               |		ДвиженияПартииТоваровНаСкладах.Количество,
	               |		""ПартииТоваровНаСкладах""
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	               |			ПартииТоваровНаСкладах.Склад КАК Склад,
	               |			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |			ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	               |			ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	               |			ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
	               |			ПартииТоваровНаСкладах.Заказ КАК Заказ,
	               |			ПартииТоваровНаСкладах.Качество КАК Качество,
	               |			СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	               |			СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	               |			ПартииТоваровНаСкладах.КодОперации КАК КодОперации
	               |		ИЗ
	               |			РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	               |		ГДЕ
	               |			ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |			И (ПартииТоваровНаСкладах.КодОперации В (&КодыОперацииПоступление)
	               |					ИЛИ ПартииТоваровНаСкладах.КодОперации В (&КодыОперацииПеремещение))
	               |			И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвижения
				   |			//УСЛОВИЕ_ДВИЖЕНИЯ_НАСКЛАДАХ
				   |		СГРУППИРОВАТЬ ПО
	               |			ПартииТоваровНаСкладах.Номенклатура,
	               |			ПартииТоваровНаСкладах.Склад,
	               |			ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	               |			ПартииТоваровНаСкладах.СерияНоменклатуры,
	               |			ПартииТоваровНаСкладах.ДокументОприходования,
	               |			ПартииТоваровНаСкладах.СтатусПартии,
	               |			ПартииТоваровНаСкладах.Заказ,
	               |			ПартииТоваровНаСкладах.Качество,
	               |			ПартииТоваровНаСкладах.КодОперации
				   |			) КАК ДвиженияПартииТоваровНаСкладах
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВЫБОР
	               |			КОГДА ДвиженияПартииТоваровПереданные.КодОперации В (&КодыОперацииПоступление)
	               |				ТОГДА ДвиженияПартииТоваровПереданные.Стоимость
	               |			ИНАЧЕ 0
	               |		КОНЕЦ,
	               |		ДвиженияПартииТоваровПереданные.Номенклатура,
	               |		NULL,
	               |		ДвиженияПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	               |		NULL,
	               |		ДвиженияПартииТоваровПереданные.ДокументОприходования,
	               |		ДвиженияПартииТоваровПереданные.СтатусПартии,
	               |		NULL,
	               |		NULL,
	               |		ДвиженияПартииТоваровПереданные.СтатусПередачи,
	               |		ДвиженияПартииТоваровПереданные.ДоговорКонтрагента,
	               |		ДвиженияПартииТоваровПереданные.ДокументПередачи,
	               |		ДвиженияПартииТоваровПереданные.Количество,
	               |		""ПартииТоваровПереданные""
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ПартииТоваровПереданные.Номенклатура КАК Номенклатура,
	               |			ПартииТоваровПереданные.СтатусПередачи КАК СтатусПередачи,
	               |			ПартииТоваровПереданные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |			ПартииТоваровПереданные.ДокументПередачи КАК ДокументПередачи,
	               |			ПартииТоваровПереданные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |			ПартииТоваровПереданные.ДокументОприходования КАК ДокументОприходования,
	               |			ПартииТоваровПереданные.СтатусПартии КАК СтатусПартии,
	               |			СУММА(ПартииТоваровПереданные.Количество) КАК Количество,
	               |			СУММА(ПартииТоваровПереданные.Стоимость) КАК Стоимость,
	               |			ПартииТоваровПереданные.КодОперации КАК КодОперации
	               |		ИЗ
	               |			РегистрНакопления.ПартииТоваровПереданные КАК ПартииТоваровПереданные
	               |		ГДЕ
	               |			ПартииТоваровПереданные.Период МЕЖДУ &ДатаНач И &ДатаКон
	               |			И (ПартииТоваровПереданные.КодОперации В (&КодыОперацииПоступление)
	               |					ИЛИ ПартииТоваровПереданные.КодОперации В (&КодыОперацииПеремещение))
	               |			И ПартииТоваровПереданные.ВидДвижения = &ВидДвижения
				   |			//УСЛОВИЕ_ДВИЖЕНИЯ_ПЕРЕДАННЫЕ
				   |		СГРУППИРОВАТЬ ПО
	               |			ПартииТоваровПереданные.Номенклатура,
	               |			ПартииТоваровПереданные.СтатусПередачи,
	               |			ПартииТоваровПереданные.ДоговорКонтрагента,
	               |			ПартииТоваровПереданные.ДокументПередачи,
	               |			ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	               |			ПартииТоваровПереданные.ДокументОприходования,
	               |			ПартииТоваровПереданные.СтатусПартии,
	               |			ПартииТоваровПереданные.КодОперации
				   |			) КАК ДвиженияПартииТоваровПереданные) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписания
	               |		ПО ВложенныйЗапрос.Номенклатура = УзлыКорректировкиСтоимостиСписания.Номенклатура
	               |			И ВложенныйЗапрос.Склад = УзлыКорректировкиСтоимостиСписания.Склад
	               |			И ВложенныйЗапрос.ХарактеристикаНоменклатуры = УзлыКорректировкиСтоимостиСписания.ХарактеристикаНоменклатуры
	               |			И ВложенныйЗапрос.ДокументОприходования = УзлыКорректировкиСтоимостиСписания.ДокументОприходования
	               |			И ВложенныйЗапрос.СтатусПартии = УзлыКорректировкиСтоимостиСписания.СтатусПартии
				   |			И ((ВложенныйЗапрос.Регистр = ""ПартииТоваровНаСкладах""
				   |				И ВложенныйЗапрос.СерияНоменклатуры = УзлыКорректировкиСтоимостиСписания.СерияНоменклатуры				   
	               |				И ВложенныйЗапрос.Заказ = УзлыКорректировкиСтоимостиСписания.Заказ
	               |				И ВложенныйЗапрос.Качество = УзлыКорректировкиСтоимостиСписания.Качество)
				   |			ИЛИ (ВложенныйЗапрос.Регистр = ""ПартииТоваровПереданные""
	               |				И ВложенныйЗапрос.СтатусПередачи = УзлыКорректировкиСтоимостиСписания.СтатусПередачи
	               |				И ВложенныйЗапрос.ДоговорКонтрагента = УзлыКорректировкиСтоимостиСписания.ДоговорКонтрагента
	               |				И ВложенныйЗапрос.ДокументПередачи = УзлыКорректировкиСтоимостиСписания.ДокументПередачи))
	               |			И (УзлыКорректировкиСтоимостиСписания.Регистратор = &Регистратор)
				   |			И (УзлыКорректировкиСтоимостиСписания.НомерПередела = &НомерПередела)
				   |			И (УзлыКорректировкиСтоимостиСписания.НомерРасчета = &НомерРасчета)
	               |ГДЕ
	               |	УзлыКорректировкиСтоимостиСписания.Регистратор ЕСТЬ NULL 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.Склад,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	               |	ВложенныйЗапрос.СерияНоменклатуры,
	               |	ВложенныйЗапрос.ДокументОприходования,
	               |	ВложенныйЗапрос.СтатусПартии,
	               |	ВложенныйЗапрос.Заказ,
	               |	ВложенныйЗапрос.Качество,
	               |	ВложенныйЗапрос.СтатусПередачи,
	               |	ВложенныйЗапрос.ДоговорКонтрагента,
	               |	ВложенныйЗапрос.ДокументПередачи,
	               |	ВложенныйЗапрос.Регистр";
	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);			   
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);
	Запрос.УстановитьПараметр("НомерПередела",НомерПередела);
	Запрос.УстановитьПараметр("НомерРасчета",НомерРасчета);
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру",Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	Запрос.УстановитьПараметр("СтатусПартииНаКомиссию",Перечисления.СтатусыПартийТоваров.НаКомиссию);
	
    СписокКодовПоступление = ПолучитьСписокКодовОпераций("Поступление");
	СписокКодовПеремещение = ПолучитьСписокКодовОпераций("Перемещение");
	
	Запрос.УстановитьПараметр("КодыОперацииПоступление",СписокКодовПоступление);
	Запрос.УстановитьПараметр("КодыОперацииПеремещение",СписокКодовПеремещение);
	
	Запрос.УстановитьПараметр("МассивНоменклатуры",ДопПараметры.МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивДокументовОприходования",ДопПараметры.МассивДокументовОприходования);
	
	ДополнитьЗапросУсловиями(Запрос.Текст,ДопПараметры);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.УзлыКорректировкиСтоимостиСписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(РегламентныйДокумент);
		НаборЗаписей.Прочитать();
		
	    НомерУзла = НаборЗаписей.Количество();
		Пока Выборка.Следующий() Цикл
			НомерУзла = НомерУзла + 1;
			НовыйУзел = НаборЗаписей.Добавить();
			НовыйУзел.НомерУзла = НомерУзла;
			НовыйУзел.НомерПередела = НомерПередела;
			НовыйУзел.НомерРасчета = НомерРасчета;
			НовыйУзел.Регистратор = РегламентныйДокумент;
			НовыйУзел.Период = РегламентныйДокумент.Дата;
			ЗаполнитьЗначенияСвойств(НовыйУзел,Выборка);
		КонецЦикла;	
		
	    НаборЗаписей.Записать();
	КонецЕсли;	
КонецПроцедуры	

// Дополняет текст запроса в соответствии с структурой метаданных регистра
//
// Параметры:
//	ТекстЗапроса 			- текст запроса,
//	ТипДополнения 			- строка, описывает что именно нужно дополнять,
//	НаправлениеДополнения	- строка, содержит суффикс регистра для которого производиться дополнение,
//	МетаданныеРегистра		- метаданные регистра.
Процедура ДолнитьЗапросПолямиРегистра(ТекстЗапроса, ТипДополнения, НаправлениеДополнения, МетаданныеРегистра)
	ИмяДляЗаменыПоля = "//%СПИСОК_" + ВРЕГ(ТипДополнения) + "_" + ВРЕГ(НаправлениеДополнения);
	
	ТекстДляЗаменыПоля = "";
	ТекстДляЗаменыСоединения = "";
	
	Если ВРЕГ(ТипДополнения) = "ИЗМЕРЕНИЯ" Тогда
		Для Каждого ТекущееПеременная Из МетаданныеРегистра.Измерения Цикл
			ТекстДляЗаменыПоля = ТекстДляЗаменыПоля + "
				|	ПартииТоваров" + НаправлениеДополнения + "." + ТекущееПеременная.Имя + " КАК " + ТекущееПеременная.Имя + НаправлениеДополнения + ",";
			ТекстДляЗаменыСоединения = ТекстДляЗаменыСоединения + "
				|	И УзлыКорректировкиСтоимостиСписания" + НаправлениеДополнения + "." + ТекущееПеременная.Имя + " = ПартииТоваров" + НаправлениеДополнения + "." + ТекущееПеременная.Имя;
		КонецЦикла;	
		ИмяДляЗаменыСоединения = "//%СОЕДИНЕНИЕ_" + ВРЕГ(НаправлениеДополнения);
	Иначе
		Для Каждого ТекущееПеременная Из МетаданныеРегистра.Ресурсы Цикл
			ТекстДляЗаменыПоля = ТекстДляЗаменыПоля + "
				|	ПартииТоваров" + НаправлениеДополнения + "." + ТекущееПеременная.Имя + " КАК " + ТекущееПеременная.Имя + ",";
		КонецЦикла;	
		ИмяДляЗаменыСоединения = "";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяДляЗаменыПоля, ТекстДляЗаменыПоля);
	Если НЕ ИмяДляЗаменыСоединения = "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяДляЗаменыСоединения, ТекстДляЗаменыСоединения);
	КонецЕсли;	
КонецПроцедуры	

// Возвращает текст запроса по перемещениям
//
// Параметры:
//	РегистрИсточник			- метаданные регистра источника,
//	РегистрПриемник 		- метаданные регистра получателя,
//	СпособОценкиМПЗ			- строка, содержит название способа оценки из учетной политики.
Функция ПодготовитьТекстЗапросаПоПеремещению(РегистрИсточник,РегистрПриемник,СпособОценкиМПЗ)
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	               |	ПартииТоваровИсточник.Период,
	               |	ПартииТоваровИсточник.Регистратор,
   	               |	ВЫБОР
	               |		КОГДА ПартииТоваровИсточник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	               |			ТОГДА ПартииТоваровИсточник.ДокументДвижения
	               |		ИНАЧЕ ПартииТоваровИсточник.Регистратор
	               |	КОНЕЦ КАК ДокументДвижения,
				   |	(УзлыКорректировкиСтоимостиСписанияИсточник.Количество) КАК КоэффициентНеизвестной,
	               |	(0 - ПартииТоваровИсточник.Количество * УзлыКорректировкиСтоимостиСписанияИсточник.Стоимость) КАК ПраваяЧасть,
	               |	ПартииТоваровИсточник.НомерСтроки,
				   |	ПартииТоваровИсточник.КодОперации КАК КодОперации,
				   |	ПартииТоваровИсточник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров,
	               |	""" + РегистрИсточник.Имя + """ КАК РегистрИсточник,
	               |	""" + РегистрПриемник.Имя + """ КАК РегистрПриемник,
				   |	//%СПИСОК_РЕСУРСЫ_ИСТОЧНИК
				   |	УзлыКорректировкиСтоимостиСписанияИсточник.НомерУзла КАК Источник,
				   |	УзлыКорректировкиСтоимостиСписанияПриемник.НомерУзла КАК Получатель				   
	               |ИЗ
	               |	РегистрНакопления." + РегистрИсточник.Имя + " КАК ПартииТоваровИсточник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + РегистрПриемник.Имя + " КАК ПартииТоваровПриемник
	               |		ПО ПартииТоваровИсточник.Регистратор = ПартииТоваровПриемник.Регистратор
	               |			И ПартииТоваровИсточник.НомерКорСтроки = ПартииТоваровПриемник.НомерСтроки
				   |			И ПартииТоваровПриемник.ВидДвижения = &ВидДвиженияПриход
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписанияИсточник
	               |		ПО УзлыКорректировкиСтоимостиСписанияИсточник.Регистратор = &Регистратор
	               |			И УзлыКорректировкиСтоимостиСписанияИсточник.НомерПередела = &НомерПередела
				   |			И УзлыКорректировкиСтоимостиСписанияИсточник.НомерРасчета = &НомерРасчета
				   |			//%СОЕДИНЕНИЕ_ИСТОЧНИК
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписанияПриемник
				   |		ПО УзлыКорректировкиСтоимостиСписанияПриемник.Регистратор = &Регистратор
	               |			И УзлыКорректировкиСтоимостиСписанияПриемник.НомерПередела = &НомерПередела
				   |			И УзлыКорректировкиСтоимостиСписанияПриемник.НомерРасчета = &НомерРасчета
				   |			//%СОЕДИНЕНИЕ_ПРИЕМНИК				   
				   |ГДЕ
				   |	ПартииТоваровИсточник.Период МЕЖДУ &ДатаНач И &ДатаКон
				   |	И (ПартииТоваровИсточник.Период > &ПоследнийПериод
				   |		ИЛИ ((ПартииТоваровИсточник.Период = &ПоследнийПериод) И (ПартииТоваровИсточник.Регистратор > &ПоследнийРегистратор))
				   |		ИЛИ ((ПартииТоваровИсточник.Период = &ПоследнийПериод) И (ПартииТоваровИсточник.Регистратор = &ПоследнийРегистратор) И (ПартииТоваровИсточник.НомерСтроки > &ПоследнийНомерСтроки)))
   	               |	И ПартииТоваровИсточник.КодОперации В (&КодыОперации)
	               |	И ПартииТоваровИсточник.ВидДвижения = &ВидДвиженияРасход
				   |	И (НЕ ПартииТоваровИсточник.СтатусПартии = &СтатусПартииПоОрдеру)
				   |	И (НЕ ПартииТоваровИсточник.СтатусПартии = &СтатусПартииНаКомиссию)";
					Если СпособОценкиМПЗ = "ФИФО" 
						ИЛИ СпособОценкиМПЗ = "ЛИФО" Тогда
							
						ТекстЗапроса = ТекстЗапроса + "
						|	И ПартииТоваровИсточник.ДокументОприходования В (&МассивДокументовОприходования) ";
					КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + " 			   
				   |УПОРЯДОЧИТЬ ПО ПартииТоваровИсточник.Период, ПартииТоваровИсточник.Регистратор, ПартииТоваровИсточник.НомерСтроки";
	Возврат ТекстЗапроса;
КонецФункции	

// Возвращает текст запроса по внешним списаниям
//
// Параметры:
//	РегистрИсточник			- метаданные регистра источника,
//	СпособОценкиМПЗ			- строка, содержит название способа оценки из учетной политики.
Функция ПодготовитьТекстЗапросаПоВнешнемуСписанию(РегистрИсточник,СпособОценкиМПЗ)
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	               |	ПартииТоваровИсточник.Период,
	               |	ПартииТоваровИсточник.Регистратор,
   	               |	ВЫБОР
	               |		КОГДА ПартииТоваровИсточник.ДокументДвижения <> НЕОПРЕДЕЛЕНО
	               |			ТОГДА ПартииТоваровИсточник.ДокументДвижения
	               |		ИНАЧЕ ПартииТоваровИсточник.Регистратор
	               |	КОНЕЦ КАК ДокументДвижения,
				   |	(УзлыКорректировкиСтоимостиСписанияИсточник.Количество) КАК КоэффициентНеизвестной,
	               |	(0 - ПартииТоваровИсточник.Количество * УзлыКорректировкиСтоимостиСписанияИсточник.Стоимость) КАК ПраваяЧасть,
	               |	ПартииТоваровИсточник.НомерСтроки,
				   |	ПартииТоваровИсточник.КодОперации КАК КодОперации,
				   |	ПартииТоваровИсточник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров,
	               |	""" + РегистрИсточник.Имя + """ КАК РегистрИсточник,
	               |	"""" КАК РегистрПриемник,
				   |	//%СПИСОК_РЕСУРСЫ_ИСТОЧНИК
				   |	УзлыКорректировкиСтоимостиСписанияИсточник.НомерУзла КАК Источник,
				   |	0 КАК Получатель				   
	               |ИЗ
	               |	РегистрНакопления." + РегистрИсточник.Имя + " КАК ПартииТоваровИсточник
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписанияИсточник
	               |		ПО УзлыКорректировкиСтоимостиСписанияИсточник.Регистратор = &Регистратор
	               |			И УзлыКорректировкиСтоимостиСписанияИсточник.НомерПередела = &НомерПередела
				   |			И УзлыКорректировкиСтоимостиСписанияИсточник.НомерРасчета = &НомерРасчета
				   |			//%СОЕДИНЕНИЕ_ИСТОЧНИК
				   |ГДЕ
				   |	ПартииТоваровИсточник.Период МЕЖДУ &ДатаНач И &ДатаКон
				   |	И (ПартииТоваровИсточник.Период > &ПоследнийПериод
				   |		ИЛИ ((ПартииТоваровИсточник.Период = &ПоследнийПериод) И (ПартииТоваровИсточник.Регистратор > &ПоследнийРегистратор))
				   |		ИЛИ ((ПартииТоваровИсточник.Период = &ПоследнийПериод) И (ПартииТоваровИсточник.Регистратор = &ПоследнийРегистратор) И (ПартииТоваровИсточник.НомерСтроки > &ПоследнийНомерСтроки)))
   	               |	И ПартииТоваровИсточник.КодОперации В (&КодыОперации)
	               |	И ПартииТоваровИсточник.ВидДвижения = &ВидДвиженияРасход
				   |	И (НЕ ПартииТоваровИсточник.СтатусПартии = &СтатусПартииПоОрдеру)
				   |	И (НЕ ПартииТоваровИсточник.СтатусПартии = &СтатусПартииНаКомиссию)";
					Если СпособОценкиМПЗ = "ФИФО" 
						ИЛИ СпособОценкиМПЗ = "ЛИФО" Тогда
							
						ТекстЗапроса = ТекстЗапроса + "
						|	И ПартииТоваровИсточник.ДокументОприходования В (&МассивДокументовОприходования) ";
					КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
				   |УПОРЯДОЧИТЬ ПО ПартииТоваровИсточник.Период, ПартииТоваровИсточник.Регистратор, ПартииТоваровИсточник.НомерСтроки";
	Возврат ТекстЗапроса;
КонецФункции	

// Формирует список и сохраняет в регистре сведений список перемещений (дуг) по заданной комбинации регистров
// Перемещением (или дугой) будем называть все переходы ТМЦ из одного состояния в другое, в том числе и в пустое (т.е. реализация)
//
// Параметры:
//	ДатаНач 			- дата начала периода, за который корректируется стоимость списания,
//	ДатаКон 			- дата окончания периода, за который корректируется стоимость списания,
//	РегистрИсточник		- метаданные регистра источника,
//	РегистрПриемник 	- метаданные регистра получателя,
//	ТаблицаТоваров 		- таблица значений содержащая список номенклатуры и документов оприходования по которым производиться корректировка,
//	РегламентныйДокумент- документ, из которого вызывается корректировка стоимости списания,
//	ДопПараметры		- структура, содержащая дополнительные параметры, такие как учетная политика,
//	НомерПередела		- число, номер передела,
//	НомерРасчета		- число, номер порции.
//
Функция СформироватьСписокДугПоРегистрам(ДатаНач, ДатаКон, РегистрИсточник, РегистрПриемник, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета)
	
	Запрос = Новый Запрос();
	
	СпособОценкиМПЗ = ВРег(Строка(УправлениеЗапасамиПартионныйУчет.УчетнаяПолитика("СпособОценкиМПЗ", "Упр", Неопределено, ДопПараметры)));
	
	Если РегистрПриемник = Неопределено Тогда
		ТекстЗапроса = ПодготовитьТекстЗапросаПоВнешнемуСписанию(РегистрИсточник,СпособОценкиМПЗ);
		
		СписокКодов = ПолучитьСписокКодовОпераций("ВнешнееСписание",РегистрИсточник.Имя);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапросаПоПеремещению(РегистрИсточник,РегистрПриемник,СпособОценкиМПЗ);
		
		ДолнитьЗапросПолямиРегистра(ТекстЗапроса, "Измерения", "Приемник", РегистрПриемник);
       	ДолнитьЗапросПолямиРегистра(ТекстЗапроса, "Ресурсы", "Приемник", РегистрПриемник);
		
		СписокКодов = ПолучитьСписокКодовОпераций("Перемещение",РегистрИсточник.Имя, РегистрПриемник.Имя);
	КонецЕсли;	
	
	ДолнитьЗапросПолямиРегистра(ТекстЗапроса, "Измерения", "Источник", РегистрИсточник);
	ДолнитьЗапросПолямиРегистра(ТекстЗапроса, "Ресурсы", "Источник", РегистрИсточник);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);			   
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);
	Запрос.УстановитьПараметр("НомерПередела",НомерПередела);
	Запрос.УстановитьПараметр("НомерРасчета",НомерРасчета);
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру",Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	Запрос.УстановитьПараметр("СтатусПартииНаКомиссию",Перечисления.СтатусыПартийТоваров.НаКомиссию);
	
	Запрос.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидДвиженияПриход",ВидДвиженияНакопления.Приход);
	
	Запрос.УстановитьПараметр("КодыОперации",СписокКодов);
	
	Запрос.УстановитьПараметр("МассивНоменклатуры",ДопПараметры.МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивДокументовОприходования",ДопПараметры.МассивДокументовОприходования);
	
	ПоследнийПериод = '00010101';
	ПоследнийРегистратор = Неопределено;
	ПоследнийНомерСтроки = 0;
	
	НомерДуги = ДопПараметры.КоличествоУравненийСЛУ;
	ТаблицаКоэффициентов = ДопПараметры.ТаблицаКоэффициентов;
	
	Пока Истина Цикл
		Запрос.УстановитьПараметр("ПоследнийПериод",ПоследнийПериод);
		Запрос.УстановитьПараметр("ПоследнийРегистратор",ПоследнийРегистратор);
		Запрос.УстановитьПараметр("ПоследнийНомерСтроки",ПоследнийНомерСтроки);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ДугиКорректировкиСтоимостиСписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(РегламентныйДокумент);
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПоследнийПериод = Выборка.Период;
			ПоследнийРегистратор = Выборка.Регистратор;
			ПоследнийНомерСтроки = Выборка.НомерСтроки;
			
			Если Выборка.Получатель = NULL Тогда
				//Сообщить("Не удалось найти конечное состояние для перемещения по дуге " + Строка(НомерДуги+1) + "(" + Выборка.ДокументДвижения + ")");
				Сообщить("Себестоимость по документу " + Выборка.ДокументДвижения + " не скорректирована!");
			КонецЕсли;	
			
			НомерДуги = НомерДуги + 1;
			НоваяДуга = НаборЗаписей.Добавить();
			НоваяДуга.НомерДуги = НомерДуги;
			НоваяДуга.Регистратор = РегламентныйДокумент;
			НоваяДуга.Период = РегламентныйДокумент.Дата;
			НоваяДуга.НомерПередела = НомерПередела;
			НоваяДуга.НомерРасчета = НомерРасчета;
			ЗаполнитьЗначенияСвойств(НоваяДуга,Выборка);
			
			НоваяСтрокаКоэффициентов = ТаблицаКоэффициентов.Добавить();
			НоваяСтрокаКоэффициентов.КоэффициентНеизвестной = Выборка.КоэффициентНеизвестной;
			НоваяСтрокаКоэффициентов.ПраваяЧасть = Выборка.ПраваяЧасть;
		КонецЦикла;
		НаборЗаписей.Записать(Ложь);
	КонецЦикла;			
	ДопПараметры.КоличествоУравненийСЛУ = НомерДуги;
КонецФункции	

// Формирует список и сохраняет в регистре сведений список перемещений (дуг)
// Перемещением (или дугой) будем называть все переходы ТМЦ из одного состояния в другое, в том числе и в пустое (т.е. реализация)
//
// Параметры:
//	ДатаНач 			- дата начала периода, за который корректируется стоимость списания,
//	ДатаКон 			- дата окончания периода, за который корректируется стоимость списания,
//	ТаблицаТоваров 		- таблица значений содержащая список номенклатуры и документов оприходования по которым производиться корректировка,
//	РегламентныйДокумент- документ, из которого вызывается корректировка стоимости списания,
//	ДопПараметры		- структура, содержащая дополнительные параметры, такие как учетная политика,
//	НомерПередела		- число, номер передела,
//	НомерРасчета		- число, номер порции.
//
Процедура СформироватьСписокДуг(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета)
	//Получим таблицу переходов, в виде
	//	Источник - номер узла источника
	//	Получатель - номер узла получателя
	//	КодОперации - код операции из регистра партий по которому делалось перемещение
	//	ДокументДвижения - документ, который сделал перемещение (регистратор)
	//	Стоимость - стоимость перемещения
	//	Количество - количество перемещения
	//	КоэффициентНеизвестной - коэффициент для переменной соответствующей номеру дуги в системе уравнений
	//	ПраваяЧасть - правая часть уравнения соответствующего текущей дуге
	//Таблица формируется по принципу Одна строка - одно расходное движение из узла источника,
	//при это расходные движения отбираются по кодам операций Перемещение или Внешний расход,
	//в случае внешнего расхода в качестве номера узла получателя берется 0.
	
	ДопПараметры.Вставить("КоличествоУравненийСЛУ",0);
	ТаблицаКоэффициентов = Новый ТаблицаЗначений();
	ТаблицаКоэффициентов.Колонки.Добавить("КоэффициентНеизвестной");
	ТаблицаКоэффициентов.Колонки.Добавить("ПраваяЧасть");
	ДопПараметры.Вставить("ТаблицаКоэффициентов", ТаблицаКоэффициентов);
	
	СформироватьСписокДугПоРегистрам(ДатаНач, ДатаКон, Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах, Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	СформироватьСписокДугПоРегистрам(ДатаНач, ДатаКон, Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах, Метаданные.РегистрыНакопления.ПартииТоваровПереданные, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	СформироватьСписокДугПоРегистрам(ДатаНач, ДатаКон, Метаданные.РегистрыНакопления.ПартииТоваровПереданные, Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	
	ДопПараметры.Вставить("КоличествоПеремещений",ДопПараметры.КоличествоУравненийСЛУ);
	
	СформироватьСписокДугПоРегистрам(ДатаНач, ДатаКон, Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах, Неопределено, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	СформироватьСписокДугПоРегистрам(ДатаНач, ДатаКон, Метаданные.РегистрыНакопления.ПартииТоваровПереданные, Неопределено, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	
	ДопПараметры.Вставить("КоличествоВнешнихСписаний",ДопПараметры.КоличествоУравненийСЛУ - ДопПараметры.КоличествоПеремещений);
	
КонецПроцедуры	

// Устанавливает сначение в матрице
//
Процедура УстановитьЗначениеВМатрице(СЛУ, Строка, Столбец, Значение);
	
	МассивСтрок = СЛУ[Строка];
	
	Если МассивСтрок = Неопределено Тогда
		 СЛУ[Строка] = Новый Соответствие();
		 МассивСтрок = СЛУ[Строка];
	КонецЕсли;
	
	ЗначениеВМатрице = МассивСтрок[Столбец];
	Если ЗначениеВМатрице = Неопределено Тогда
		Если НЕ Значение = 0 Тогда
			МассивСтрок.Вставить(Столбец, Значение);
		КонецЕсли;
	Иначе
		МассивСтрок.Вставить(Столбец, Значение);
	КонецЕсли;	
КонецПроцедуры

// Возвращает значение из матрицы
//
Функция ПолучитьЗначениеВМатрице(СЛУ, Строка, Столбец);
	МассивСтрок = СЛУ[Строка];
	
	Если МассивСтрок = Неопределено Тогда
		 Возврат 0;
	КонецЕсли;
	
	ЗначениеВМатрице = МассивСтрок[Столбец];
	Если ЗначениеВМатрице = Неопределено Тогда
		Возврат 0;
	иначе
		Возврат ЗначениеВМатрице;
	КонецЕсли;
КонецФункции

// Формирует систему линейных уравнений по таблице дуг и узлов
//
// Параметры:
//	ДатаНач 			- дата начала периода, за который корректируется стоимость списания,
//	ДатаКон 			- дата окончания периода, за который корректируется стоимость списания,
//	ТаблицаТоваров 		- таблица значений содержащая список номенклатуры и документов оприходования по которым производиться корректировка,
//	РегламентныйДокумент- документ, из которого вызывается корректировка стоимости списания,
//	ДопПараметры		- структура, содержащая дополнительные параметры, такие как учетная политика,
//	НомерПередела		- число, номер передела,
//	НомерРасчета		- число, номер порции.
//
Процедура СформироватьСЛУ(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДугиКорректировкиСтоимостиСписания.НомерДуги КАК НомерНеизвестной,
	               |	ДугиКорректировкиСтоимостиСписанияПолучатели.НомерДуги КАК НомерУравнения,
				   |	ВЫБОР КОГДА ДугиКорректировкиСтоимостиСписанияПолучатели.Получатель = 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ВнешниеСписание,
	               |	СУММА(ДугиКорректировкиСтоимостиСписанияПолучатели.Количество) КАК Коэффициент
	               |ИЗ
	               |	РегистрСведений.ДугиКорректировкиСтоимостиСписания КАК ДугиКорректировкиСтоимостиСписания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДугиКорректировкиСтоимостиСписания КАК ДугиКорректировкиСтоимостиСписанияПолучатели
	               |		ПО ДугиКорректировкиСтоимостиСписания.Получатель = ДугиКорректировкиСтоимостиСписанияПолучатели.Источник
	               |ГДЕ
	               |	ДугиКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	               |	И ДугиКорректировкиСтоимостиСписанияПолучатели.Регистратор = &Регистратор
				   |	И ДугиКорректировкиСтоимостиСписания.НомерПередела = &НомерПередела
				   |	И ДугиКорректировкиСтоимостиСписанияПолучатели.НомерПередела = &НомерПередела
				   |	И ДугиКорректировкиСтоимостиСписания.НомерРасчета = &НомерРасчета
				   |	И ДугиКорректировкиСтоимостиСписанияПолучатели.НомерРасчета = &НомерРасчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДугиКорректировкиСтоимостиСписания.НомерДуги,
	               |	ДугиКорректировкиСтоимостиСписанияПолучатели.НомерДуги,
				   |	ВЫБОР КОГДА ДугиКорректировкиСтоимостиСписанияПолучатели.Получатель = 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);
	Запрос.УстановитьПараметр("НомерПередела",НомерПередела);
	Запрос.УстановитьПараметр("НомерРасчета",НомерРасчета);
	
	//Сформируем систему линейных уравнений только для перемещений, суммы внешних списаний затем найдем по готовым решениям
	КоличествоУравненийСЛУ = ДопПараметры.КоличествоПеремещений;
	КоличествоВнешнихСписаний = ДопПараметры.КоличествоВнешнихСписаний;
	
	Если КоличествоУравненийСЛУ = 0 ТОгда
		СЛУ = Новый Массив();
	Иначе	
		СЛУ = Новый Массив(КоличествоУравненийСЛУ,КоличествоУравненийСЛУ+1);
	КонецЕсли;
	
	Если КоличествоВнешнихСписаний = 0 Тогда
		МассивВнешнихСписаний = Неопределено;
	Иначе	
		МассивВнешнихСписаний = Новый Массив(КоличествоВнешнихСписаний);
	КонецЕсли;	
	
    ДопПараметры.Вставить("СЛУ",СЛУ);
	ДопПараметры.Вставить("МассивВнешнихСписаний",МассивВнешнихСписаний);
	ТаблицаКоэффициентов = ДопПараметры.ТаблицаКоэффициентов;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ВнешниеСписание Тогда
				СЛУ[Выборка.НомерУравнения-1][Выборка.НомерНеизвестной-1] = Выборка.Коэффициент;
			Иначе
				УстановитьЗначениеВМатрице(МассивВнешнихСписаний,Выборка.НомерУравнения - КоличествоУравненийСЛУ - 1,Выборка.НомерНеизвестной-1,Выборка.Коэффициент);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	//Обнулим все оставшиеся не заполненными элементы массива
	Для НомерУравнения = 0 По КоличествоУравненийСЛУ - 1 Цикл
		СЛУ[НомерУравнения][НомерУравнения] = -ТаблицаКоэффициентов[НомерУравнения].КоэффициентНеизвестной;
		СЛУ[НомерУравнения][КоличествоУравненийСЛУ] = ТаблицаКоэффициентов[НомерУравнения].ПраваяЧасть;
		
		Для НомерПеременной = 0 По КоличествоУравненийСЛУ Цикл
			Если СЛУ[НомерУравнения][НомерПеременной] = Неопределено Тогда
				СЛУ[НомерУравнения][НомерПеременной] = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

// Меняет местами текущее уравнение с одним из последующих с ненулевым коэффициентом
//
// Параметры:
//	СЛУ 					- массив, содержащий систему линейных уравнений,
//	КоличествоУравненийСЛУ	- число, количество уравнений,
//	УравнениеДляЗамены 		- число, номер уравнения для замены и номер переменной для которой подбираем не нулевой коэффициент.
//
Функция ПоменятьМестамиУравнения(СЛУ,КоличествоУравненийСЛУ,УравнениеДляЗамены)
	Для ТекущееУравнение = УравнениеДляЗамены + 1 По КоличествоУравненийСЛУ - 1 Цикл
		Если НЕ СЛУ[ТекущееУравнение][УравнениеДляЗамены] = 0 Тогда
			Для ТекущаяПеременная =  УравнениеДляЗамены По КоличествоУравненийСЛУ Цикл
				КоэффициентТекущейПеременной = СЛУ[ТекущееУравнение][ТекущаяПеременная];
				СЛУ[ТекущееУравнение][ТекущаяПеременная] = СЛУ[УравнениеДляЗамены][ТекущаяПеременная];
				СЛУ[УравнениеДляЗамены][ТекущаяПеременная] = КоэффициентТекущейПеременной;
			КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	Сообщить("Не удалось найти решение через СЛУ! Уравнение " + Строка(УравнениеДляЗамены + 1));
	Возврат Ложь;
КонецФункции	

// Решает систему линейных уравнений
//
// Параметры:
//	СЛУ 					- массив, содержащий систему линейных уравнений,
//	КоличествоУравненийСЛУ	- число, количество уравнений.
//
Процедура РешитьСЛУ(СЛУ,КоличествоУравненийСЛУ)
	Для ТекущаяПеременная = 0 По КоличествоУравненийСЛУ - 2 Цикл
		Для ТекущееУравнение = ТекущаяПеременная+1 По КоличествоУравненийСЛУ - 1 Цикл
			Если СЛУ[ТекущаяПеременная][ТекущаяПеременная] = 0 Тогда
				Если НЕ ПоменятьМестамиУравнения(СЛУ,КоличествоУравненийСЛУ,ТекущаяПеременная) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			КоэффициентУравнения = СЛУ[ТекущееУравнение][ТекущаяПеременная];
			Если НЕ КоэффициентУравнения = 0 Тогда
				КоэффициентПеременной = СЛУ[ТекущаяПеременная][ТекущаяПеременная];
				НОД = УправлениеПланированием.ПолучитьНаибольшийОбщийДелитель(КоэффициентПеременной,КоэффициентУравнения); 
				
				КоэффициентТекущаяПеременная = КоэффициентПеременной/НОД;
				КоэффициентТекущееУравнение = - КоэффициентУравнения/НОД;
				Для ТекущаяКолонка = ТекущаяПеременная По КоличествоУравненийСЛУ Цикл
					СЛУ[ТекущееУравнение][ТекущаяКолонка] = КоэффициентТекущаяПеременная*СЛУ[ТекущееУравнение][ТекущаяКолонка] + КоэффициентТекущееУравнение*СЛУ[ТекущаяПеременная][ТекущаяКолонка];
				КонецЦИкла;
			КонецЕсли;	
		КонецЦИкла;
	КонецЦикла;	
КонецПроцедуры	

// Формирует корректирующие движения по регистрам ПартииТоваровНаСкладах, ПартииТоваровПереданные, и ПродажиСебестоимость
//
// Параметры:
//	ДатаНач 			- дата начала периода, за который корректируется стоимость списания,
//	ДатаКон 			- дата окончания периода, за который корректируется стоимость списания,
//	ТаблицаТоваров 		- таблица значений содержащая список номенклатуры и документов оприходования по которым производиться корректировка,
//	РегламентныйДокумент- документ, из которого вызывается корректировка стоимости списания,
//	ДопПараметры		- структура, содержащая дополнительные параметры, такие как учетная политика,
//	НомерПередела		- число, номер передела,
//	НомерРасчета		- число, номер порции.
//
Процедура СформироватьКорректирующиеДвижения(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета)
	//Получаются все дуги, и аналитика из узлов
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДугиКорректировкиСтоимостиСписания.НомерДуги КАК НомерДуги,
	               |	ДугиКорректировкиСтоимостиСписания.Стоимость КАК Стоимость,
	               |	ДугиКорректировкиСтоимостиСписания.КодОперации КАК КодОперации,
	               |	ДугиКорректировкиСтоимостиСписания.ДокументДвижения КАК ДокументДвижения,
	               |	ДугиКорректировкиСтоимостиСписания.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.Номенклатура КАК НоменклатураПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.Склад КАК СкладПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.СерияНоменклатуры КАК СерияНоменклатурыПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.ДокументОприходования КАК ДокументОприходованияПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.СтатусПартии КАК СтатусПартииПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.Заказ КАК ЗаказПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.Качество КАК КачествоПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.Номенклатура КАК НоменклатураИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.Склад КАК СкладИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.СерияНоменклатуры КАК СерияНоменклатурыИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.ДокументОприходования КАК ДокументОприходованияИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.СтатусПартии КАК СтатусПартииИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.Заказ КАК ЗаказИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.Качество КАК КачествоИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.СтатусПередачи КАК СтатусПередачиИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.ДоговорКонтрагента КАК ДоговорКонтрагентаИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.ДокументПередачи КАК ДокументПередачиИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияИсточники.Регистр КАК РегистрИсточник,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.СтатусПередачи КАК СтатусПередачиПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.ДоговорКонтрагента КАК ДоговорКонтрагентаПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.ДокументПередачи КАК ДокументПередачиПолучатель,
	               |	УзлыКорректировкиСтоимостиСписанияПолучатели.Регистр КАК РегистрПолучатель,
	               |	СписанныеТовары.Подразделение,
	               |	СписанныеТовары.СтатьяЗатрат,
	               |	СписанныеТовары.ЗаказСписания,
	               |	ЕСТЬNULL(СписанныеТовары.ВедениеУчетаПоПроектам, ЛОЖЬ) КАК ВедениеУчетаПоПроектам,
	               |	СписанныеТовары.НоменклатураКомплекта,
				   |	СписанныеТовары.ХарактеристикаКомплекта,
	               |	СписанныеТовары.КоличествоКомплекта,
	               |	СписанныеТовары.СтатусПередачи,
	               |	СписанныеТовары.Проект,
				   |	СписанныеТовары.ВалютаДокумента,
				   |	СписанныеТовары.КурсДокумента,
				   |	СписанныеТовары.КратностьДокумента,
	               |	ВЫБОР
	               |		КОГДА ДугиКорректировкиСтоимостиСписания.Получатель = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК ВнешнееСписание
	               |ИЗ
	               |	РегистрСведений.ДугиКорректировкиСтоимостиСписания КАК ДугиКорректировкиСтоимостиСписания
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписанияПолучатели
	               |		ПО ДугиКорректировкиСтоимостиСписания.Получатель = УзлыКорректировкиСтоимостиСписанияПолучатели.НомерУзла
	               |			И (УзлыКорректировкиСтоимостиСписанияПолучатели.Регистратор = &Регистратор)
	               |			И (УзлыКорректировкиСтоимостиСписанияПолучатели.НомерПередела = &НомерПередела)
	               |			И (УзлыКорректировкиСтоимостиСписанияПолучатели.НомерРасчета = &НомерРасчета)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКорректировкиСтоимостиСписания КАК УзлыКорректировкиСтоимостиСписанияИсточники
	               |		ПО ДугиКорректировкиСтоимостиСписания.Источник = УзлыКорректировкиСтоимостиСписанияИсточники.НомерУзла
	               |			И (УзлыКорректировкиСтоимостиСписанияИсточники.Регистратор = &Регистратор)
	               |			И (УзлыКорректировкиСтоимостиСписанияИсточники.НомерПередела = &НомерПередела)
	               |			И (УзлыКорректировкиСтоимостиСписанияИсточники.НомерРасчета = &НомерРасчета)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	               |		ПО ДугиКорректировкиСтоимостиСписания.ДокументДвижения = СписанныеТовары.Регистратор
	               |			И ДугиКорректировкиСтоимостиСписания.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки
	               |ГДЕ
	               |	ДугиКорректировкиСтоимостиСписания.Регистратор = &Регистратор
	               |	И ДугиКорректировкиСтоимостиСписания.НомерПередела = &НомерПередела
	               |	И ДугиКорректировкиСтоимостиСписания.НомерРасчета = &НомерРасчета
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВнешнееСписание УБЫВ,
	               |	НомерДуги УБЫВ
	               |ИТОГИ ПО
	               |	ВнешнееСписание";
	Запрос.УстановитьПараметр("Регистратор",РегламентныйДокумент);
	Запрос.УстановитьПараметр("НомерПередела",НомерПередела);
	Запрос.УстановитьПараметр("НомерРасчета",НомерРасчета);
	
	Результат = Запрос.Выполнить();
	
	Если ДопПараметры.КоличествоПеремещений = 0 Тогда
		МассивРешений = Новый Массив();
	Иначе	
		МассивРешений = Новый Массив(ДопПараметры.КоличествоПеремещений);
	КонецЕсли;
	КоличествоУравненийСЛУ = ДопПараметры.КоличествоПеремещений;
	
	Если НЕ Результат.Пустой() Тогда
		ВыборкаПоТипуСписания = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаПоТипуСписания.Следующий();//Сначала обработаем перемещения
		
		Если ВыборкаПоТипуСписания.ВнешнееСписание = 1 Тогда
			СЛУ = ДопПараметры.СЛУ;
			
			СтруткураНаборовЗаписей = Новый Структура();
			СтруткураМетаданныхРегистров = Новый Структура();
			НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(РегламентныйДокумент);
			СтруткураНаборовЗаписей.Вставить("ПартииТоваровНаСкладах",НаборЗаписей);
			СтруткураМетаданныхРегистров.Вставить("ПартииТоваровНаСкладахМетаданные",Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах);
			
			НаборЗаписей = РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(РегламентныйДокумент);
			СтруткураНаборовЗаписей.Вставить("ПартииТоваровПереданные",НаборЗаписей);
			СтруткураМетаданныхРегистров.Вставить("ПартииТоваровПереданныеМетаданные",Метаданные.РегистрыНакопления.ПартииТоваровПереданные);
			
			ДопПараметры.Вставить("Учет","Упр");
			
			Выборка = ВыборкаПоТипуСписания.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				КоэффициентПеременной = ПолучитьЗначениеВМатрице(СЛУ, Выборка.НомерДуги-1, Выборка.НомерДуги-1); 
				Если НЕ КоэффициентПеременной = 0 Тогда
					СуммаПеремещения = ПолучитьЗначениеВМатрице(СЛУ, Выборка.НомерДуги-1, КоличествоУравненийСЛУ)/КоэффициентПеременной;
					МассивРешений[Выборка.НомерДуги-1] = СуммаПеремещения;
				Иначе
					//Сообщить("Перемещение по дуге №" + Строка(Выборка.НомерДуги) + " по документу " + Выборка.ДокументДвижения + " не скорректировано!");
					Сообщить("Себестоимость по документу " + Выборка.ДокументДвижения + " не скорректирована!");
					Продолжить;
				КонецЕсли;	
				//Подставим найденную переменную в вышестоящие уравнения
				Для ТекущееУравнение = 0 По Выборка.НомерДуги-2 Цикл
					СЛУ[ТекущееУравнение][КоличествоУравненийСЛУ] = СЛУ[ТекущееУравнение][КоличествоУравненийСЛУ] - СЛУ[ТекущееУравнение][Выборка.НомерДуги-1]*СуммаПеремещения;
				КонецЦикла;	
				
				СуммаКорректировки = Окр(СуммаПеремещения - Выборка.Стоимость,2);
				Если НЕ СуммаКорректировки = 0 Тогда
					
					СтСтоимость = Новый  Структура("Стоимость", СуммаКорректировки);
					Попытка
						ДобавитьЗаписиПоПеремещению(Выборка, СтСтоимость, ДопПараметры);
					Исключение
						Сообщить("При формировании движений для дуги " + Строка(Выборка.НомерДуги) + " произошла ошибка
						|	Номер передела: " + Строка(НомерПередела) + "
						|	Номер расчета: " + Строка(НомерРасчета));
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
			КонецЦикла;	
			ВыборкаПоТипуСписания.Следующий();
		КонецЕсли;	
		
		//Вторым проходом обработаем реализации
		Выборка = ВыборкаПоТипуСписания.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СуммаПеремещения = 0;
			
			Если (ДопПараметры.ТаблицаКоэффициентов[Выборка.НомерДуги-1].КоэффициентНеизвестной = 0)
			  ИЛИ (Выборка.НомерДуги < КоличествоУравненийСЛУ) Тогда
				Сообщить("Себестоимость по документу " + Выборка.ДокументДвижения + " не скорректирована!");
				Продолжить;
			КонецЕсли;
			
			Если ((Выборка.НомерДуги - КоличествоУравненийСЛУ -1) < 0)
			  ИЛИ ((Выборка.НомерДуги - КоличествоУравненийСЛУ -1) > ДопПараметры.МассивВнешнихСписаний.Количество()) Тогда	
				//Сообщить("Перемещение по дуге №" + Строка(Выборка.НомерДуги) + " по документу " + Выборка.ДокументДвижения + " не скорректировано!");
				Продолжить;
			КонецЕсли;  
			
			Если НЕ ДопПараметры.МассивВнешнихСписаний[Выборка.НомерДуги - КоличествоУравненийСЛУ -1] = Неопределено тогда
				Для Каждого ТекущиийКоэффициент Из ДопПараметры.МассивВнешнихСписаний[Выборка.НомерДуги - КоличествоУравненийСЛУ -1] Цикл
					СуммаПеремещения = СуммаПеремещения + ТекущиийКоэффициент.Значение*МассивРешений[ТекущиийКоэффициент.Ключ]; 
				КонецЦикла;
				СуммаПеремещения = (СуммаПеремещения - ДопПараметры.ТаблицаКоэффициентов[Выборка.НомерДуги-1].ПраваяЧасть) / ДопПараметры.ТаблицаКоэффициентов[Выборка.НомерДуги-1].КоэффициентНеизвестной;
			Иначе
				СуммаПеремещения = - ДопПараметры.ТаблицаКоэффициентов[Выборка.НомерДуги-1].ПраваяЧасть / ДопПараметры.ТаблицаКоэффициентов[Выборка.НомерДуги-1].КоэффициентНеизвестной;
			КонецЕсли;	
				
			СуммаКорректировки = Окр(СуммаПеремещения - Выборка.Стоимость,2);
			Если НЕ СуммаКорректировки = 0 Тогда
				
				СтСтоимость = Новый  Структура("Стоимость", СуммаКорректировки);
				Попытка
					ДобавитьЗаписиПоВнешнемуСписанию(Выборка, СтСтоимость, ДопПараметры);
				Исключение
					Сообщить("При формировании движений для дуги " + Строка(Выборка.НомерДуги) + " произошла ошибка
					|	Номер передела: " + Строка(НомерПередела) + "
					|	Номер расчета: " + Строка(НомерРасчета));
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

// Добавляет в базу данных записи по перемещению в другое состояние
//
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыПеремещения, СтСтоимость, СтруктураДопПараметров)
	
	// Выполним движение по сторнированию перемещения
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет            = СтруктураДопПараметров.Учет;
	
	Источник =  ПараметрыПеремещения.РегистрИсточник;
	Приемник =  ПараметрыПеремещения.РегистрПолучатель;
	ИмяРег=Источник;
		
	СтрокаДокумента= Новый Структура;
		
	// Эти параметры добавляются на всякий случай, т.к. они используются процедурой заполнения субконто по счету
	СтрокаДокумента.Вставить("НоменклатураНовая", Неопределено);
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатурыНовая", Неопределено);
	СтрокаДокумента.Вставить("СерияНоменклатурыНовая", Неопределено);
	СтрокаДокумента.Вставить("КачествоНовое", Неопределено);
	СтрокаДокумента.Вставить("СтатусПартииНовый", Неопределено);
	СтрокаДокумента.Вставить("СтатьяЗатрат", Неопределено);
	СтрокаДокумента.Вставить("Склад", Неопределено);
	СтрокаДокумента.Вставить("СкладПолучатель", Неопределено);
	СтрокаДокумента.Вставить("ДоговорКонтрагента", Неопределено);
	СтрокаДокумента.Вставить("ИзменитьСерию", Ложь);
	СтрокаДокумента.Вставить("ИзменитьХарактеристику", Ложь);
	СтрокаДокумента.Вставить("ИзменитьСклад", Ложь);
	СтрокаДокумента.Вставить("ВедениеУчетаПоПроектам", ПараметрыПеремещения.ВедениеУчетаПоПроектам);
	СтрокаДокумента.Вставить("НоменклатураКомплекта", ПараметрыПеремещения.НоменклатураКомплекта);
	СтрокаДокумента.Вставить("ХарактеристикаКомплекта", ПараметрыПеремещения.ХарактеристикаКомплекта);
	СтрокаДокумента.Вставить("КоличествоКомплекта", ПараметрыПеремещения.КоличествоКомплекта);
	СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыПеремещения.СтатусПередачи);
	СтрокаДокумента.Вставить("Проект", ПараметрыПеремещения.Проект);
	СтрокаДокумента.Вставить("ВалютаДокумента", ПараметрыПеремещения.ВалютаДокумента);
	СтрокаДокумента.Вставить("КурсДокумента", ПараметрыПеремещения.КурсДокумента);
	СтрокаДокумента.Вставить("КратностьДокумента", ПараметрыПеремещения.КратностьДокумента);
	СтрокаДокумента.Вставить("Количество", 0);
	
	СтрокаДокумента.Вставить("ВидТабличнойЧасти");
	
	// Трансляция параметров состояния-источника в формат регистра СписанныеТовары
	СтрокаДокумента.Вставить("Номенклатура", ПараметрыПеремещения.НоменклатураИсточник);
	
	СтруктураРеквизитов = Новый Структура("ВестиПартионныйУчетПоСериям");
	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(ПараметрыПеремещения.НоменклатураИсточник, СтруктураРеквизитов);
	
	СтрокаДокумента.Вставить("ВестиПартионныйУчетПоСериям", СтруктураРеквизитов.ВестиПартионныйУчетПоСериям);
	
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатуры", ПараметрыПеремещения.ХарактеристикаНоменклатурыИсточник);
	
	Если Источник =  "ПартииТоваровНаСкладах" Тогда
		СтрокаДокумента.Вставить("Склад", ПараметрыПеремещения.СкладИсточник);
		СтрокаДокумента.Вставить("СерияНоменклатуры", ПараметрыПеремещения.СерияНоменклатурыИсточник);
		СтрокаДокумента.Вставить("Качество", ПараметрыПеремещения.КачествоИсточник);
		Если Учет = "Упр" Тогда
			СтрокаДокумента.Вставить("СтатусПартии", ПараметрыПеремещения.СтатусПартииИсточник);
		КонецЕсли;
	Иначе
		СтрокаДокумента.Вставить("ДоговорКонтрагента", ПараметрыПеремещения.ДоговорКонтрагентаИсточник);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыПеремещения.ДокументПередачиИсточник);
		СтрокаДокумента.Вставить("СерияНоменклатуры", Неопределено);
		Если Учет = "Упр" Тогда
			СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыПеремещения.СтатусПередачиИсточник);
			СтрокаДокумента.Вставить("СтатусПартии", ПараметрыПеремещения.СтатусПартииИсточник);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.Вставить("Заказ", ПараметрыПеремещения.ЗаказИсточник);
	СтрокаДокумента.Вставить("ДокументОприходования", ПараметрыПеремещения.ДокументОприходованияИсточник);
	СтрокаДокумента.Вставить("ДокументОприходованияНовый", ПараметрыПеремещения.ДокументОприходованияПолучатель);
	
	// Трансляция параметров состояния-приемника в формат регистра СписанныеТовары
	СтрокаДокумента.Вставить("НоменклатураНовая", ПараметрыПеремещения.НоменклатураПолучатель);
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатурыНовая", ПараметрыПеремещения.ХарактеристикаНоменклатурыПолучатель);
	СтрокаДокумента.Вставить("СерияНоменклатурыНовая", ПараметрыПеремещения.СерияНоменклатурыПолучатель);
	
	СтрокаДокумента.Вставить("ЗаказСписания", ПараметрыПеремещения.ЗаказПолучатель);
	
	Если Приемник = "ПартииТоваровПереданные" Тогда
		СтрокаДокумента.Вставить("ДоговорКонтрагента", ПараметрыПеремещения.ДоговорКонтрагентаПолучатель);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыПеремещения.ДокументПередачиПолучатель);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыПеремещения.СтатусПартииПолучатель);
		СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыПеремещения.СтатусПередачиПолучатель);
	ИначеЕсли Приемник="ПартииТоваровНаСкладах" Тогда
		СтрокаДокумента.Вставить("КачествоНовое", ПараметрыПеремещения.КачествоПолучатель);
		СтрокаДокумента.Вставить("СкладПолучатель", ПараметрыПеремещения.СкладПолучатель);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыПеремещения.СтатусПартииПолучатель);
	КонецЕсли;
	
	СтрокаДокумента.Вставить("Подразделение", ПараметрыПеремещения.Подразделение);
	СтрокаДокумента.Вставить("СтатьяЗатрат", ПараметрыПеремещения.СтатьяЗатрат);
	СтрокаДокумента.Вставить("ЗаказСписания", ПараметрыПеремещения.ЗаказСписания);
	СтрокаДокумента.Вставить("ОтражатьВУправленческомУчете", Истина);
	СтрокаДокумента.Вставить("КоличествоПоступление", 0);

	СтрокаДокумента.Вставить("ОтражатьВУправленческомУчете", Истина);
	СтрокаДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	СтрокаДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	
	Движение              = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров(ИмяРег+Учет, СтруктураДопПараметров);
	Движение.Период       = КонецМесяца(СтруктураДопПараметров.Период);
	Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
	
	Движение.Номенклатура = ПараметрыПеремещения.НоменклатураИсточник;
	
	Движение.ХарактеристикаНоменклатуры = ПараметрыПеремещения.ХарактеристикаНоменклатурыИсточник;
	
	Если Источник =  "ПартииТоваровНаСкладах" Тогда
		Движение.Склад      = ПараметрыПеремещения.СкладИсточник;
		Движение.Заказ      = ПараметрыПеремещения.ЗаказИсточник;
		Движение.СерияНоменклатуры = ПараметрыПеремещения.СерияНоменклатурыИсточник;
		Движение.Качество = ПараметрыПеремещения.КачествоИсточник;
		Движение.СтатусПартии = ПараметрыПеремещения.СтатусПартииИсточник;
	Иначе
		Движение.ДоговорКонтрагента      = ПараметрыПеремещения.ДоговорКонтрагентаИсточник;
		Движение.ДокументПередачи = ПараметрыПеремещения.ДокументПередачиИсточник;
		Движение.СтатусПередачи = ПараметрыПеремещения.СтатусПередачиИсточник;
		Движение.СтатусПартии = ПараметрыПеремещения.СтатусПартииИсточник;
	КонецЕсли;
	
	Движение.ДокументОприходования = ПараметрыПеремещения.ДокументОприходованияИсточник;
	
	Движение.СтатусПартии = ПараметрыПеремещения.СтатусПартииИсточник;
	
	Движение.Количество   = 0;
	
	// Суммы из структуры
	Для Каждого ЭлСтоимость Из СтСтоимость	Цикл
		Движение[ЭлСтоимость.Ключ]  = ЭлСтоимость.Значение;
	КонецЦикла;
	
	// Коды операций
	СтрокаДокумента.Вставить("КодОперацииПартииТоваров", ПараметрыПеремещения.КодОперации);
	
	Движение.КодОперации = ПараметрыПеремещения.КодОперации;
	Движение.ДокументДвижения = ПараметрыПеремещения.ДокументДвижения;
	Движение.НомерСтрокиСписанныхТоваров = ПараметрыПеремещения.НомерСтрокиСписанныхТоваров;
	
	ВыполнитьКорДвижение(Источник, СтрокаДокумента, СтруктураДопПараметров, Движение);
	
КонецПроцедуры // ДобавитьЗаписиПоПеремещению()

// Добавляет в базу данных записи по внешнему списанию
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыПеремещения, СтСтоимость, СтруктураДопПараметров)
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет            = СтруктураДопПараметров.Учет;
	
	Источник =  ПараметрыПеремещения.РегистрИсточник;
	ИмяРег=Источник;
	
	СтрокаДокумента= Новый Структура;
	
	СтрокаДокумента.Вставить("НоменклатураНовая", Неопределено);
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатурыНовая", Неопределено);
	СтрокаДокумента.Вставить("СерияНоменклатурыНовая", Неопределено);
	СтрокаДокумента.Вставить("СтатусПартииНовый", Неопределено);
	СтрокаДокумента.Вставить("Склад", Неопределено);
	СтрокаДокумента.Вставить("СкладПолучатель", Неопределено);
	СтрокаДокумента.Вставить("ДоговорКонтрагента", Неопределено);
	СтрокаДокумента.Вставить("ИзменитьСерию", Ложь);
	СтрокаДокумента.Вставить("ИзменитьХарактеристику", Ложь);
	СтрокаДокумента.Вставить("ИзменитьСклад", Ложь);	
	СтрокаДокумента.Вставить("КачествоНовое", Неопределено);
	
	СтрокаДокумента.Вставить("Подразделение", ПараметрыПеремещения.Подразделение);
	СтрокаДокумента.Вставить("СтатьяЗатрат", ПараметрыПеремещения.СтатьяЗатрат);
	СтрокаДокумента.Вставить("ЗаказСписания", ПараметрыПеремещения.ЗаказСписания);
	СтрокаДокумента.Вставить("ВедениеУчетаПоПроектам", ПараметрыПеремещения.ВедениеУчетаПоПроектам);
	СтрокаДокумента.Вставить("НоменклатураКомплекта", ПараметрыПеремещения.НоменклатураКомплекта);
	СтрокаДокумента.Вставить("ХарактеристикаКомплекта", ПараметрыПеремещения.ХарактеристикаКомплекта);
	СтрокаДокумента.Вставить("КоличествоКомплекта", ПараметрыПеремещения.КоличествоКомплекта);
	СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыПеремещения.СтатусПередачи);
	СтрокаДокумента.Вставить("Проект", ПараметрыПеремещения.Проект);
	СтрокаДокумента.Вставить("ВалютаДокумента", ПараметрыПеремещения.ВалютаДокумента);
	СтрокаДокумента.Вставить("КурсДокумента", ПараметрыПеремещения.КурсДокумента);
	СтрокаДокумента.Вставить("КратностьДокумента", ПараметрыПеремещения.КратностьДокумента);

	СтрокаДокумента.Вставить("КоличествоПоступление", 0);
	СтрокаДокумента.Вставить("Количество", 0);
	
	СтруктураРеквизитов = Новый Структура("ВестиПартионныйУчетПоСериям");
	УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(ПараметрыПеремещения.НоменклатураИсточник, СтруктураРеквизитов);
	
	СтрокаДокумента.Вставить("ВестиПартионныйУчетПоСериям", СтруктураРеквизитов.ВестиПартионныйУчетПоСериям);	
	
	// Трансляция параметров состояния-источника в формат регистра СписанныеТовары
	СтрокаДокумента.Вставить("Номенклатура", ПараметрыПеремещения.НоменклатураИсточник);
	СтрокаДокумента.Вставить("ХарактеристикаНоменклатуры", ПараметрыПеремещения.ХарактеристикаНоменклатурыИсточник);
	
	Если Источник =  "ПартииТоваровНаСкладах" Тогда
		СтрокаДокумента.Вставить("Склад", ПараметрыПеремещения.СкладИсточник);
		СтрокаДокумента.Вставить("СерияНоменклатуры", ПараметрыПеремещения.СерияНоменклатурыИсточник);
		СтрокаДокумента.Вставить("Качество", ПараметрыПеремещения.КачествоИсточник);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыПеремещения.СтатусПартииИсточник);
	Иначе
		СтрокаДокумента.Вставить("ДоговорКонтрагента", ПараметрыПеремещения.ДоговорКонтрагентаИсточник);
		СтрокаДокумента.Вставить("ДокументПередачи", ПараметрыПеремещения.ДокументПередачиИсточник);
		СтрокаДокумента.Вставить("СтатусПередачи", ПараметрыПеремещения.СтатусПередачиИсточник);
		СтрокаДокумента.Вставить("СтатусПартии", ПараметрыПеремещения.СтатусПартииИсточник);
	КонецЕсли;
	
	СтрокаДокумента.Вставить("ДокументОприходования", ПараметрыПеремещения.ДокументОприходованияИсточник);
	СтрокаДокумента.Вставить("Заказ", ПараметрыПеремещения.ЗаказИсточник);
	
	СтрокаДокумента.Вставить("ОтражатьВУправленческомУчете", Истина);
	СтрокаДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	СтрокаДокумента.Вставить("ОтражатьВНалоговомУчете", Ложь);
	
	Движение              = УправлениеЗапасамиПартионныйУчет.ДобавитьДвижениеВСтруктуруПараметров(ИмяРег+Учет, СтруктураДопПараметров);
	Движение.Период       = КонецМесяца(СтруктураДопПараметров.Период);
	Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
	
	Движение.Номенклатура = ПараметрыПеремещения.НоменклатураИсточник;
	
	Движение.ХарактеристикаНоменклатуры = ПараметрыПеремещения.ХарактеристикаНоменклатурыИсточник;
	
	Если Источник =  "ПартииТоваровНаСкладах" Тогда
		Движение.Склад      = ПараметрыПеремещения.СкладИсточник;
		Движение.Заказ      = ПараметрыПеремещения.ЗаказИсточник;
		Движение.СерияНоменклатуры = ПараметрыПеремещения.СерияНоменклатурыИсточник;
		Движение.Качество = ПараметрыПеремещения.КачествоИсточник;
		Движение.СтатусПартии = ПараметрыПеремещения.СтатусПартииИсточник;
	Иначе
		Движение.ДоговорКонтрагента      = ПараметрыПеремещения.ДоговорКонтрагентаИсточник;
		Движение.ДокументПередачи = ПараметрыПеремещения.ДокументПередачиИсточник;
		Движение.СтатусПередачи = ПараметрыПеремещения.СтатусПередачиИсточник;
		Движение.СтатусПартии = ПараметрыПеремещения.СтатусПартииИсточник;
	КонецЕсли;
	
	Движение.ДокументОприходования = ПараметрыПеремещения.ДокументОприходованияИсточник;
	
	Движение.СтатусПартии = ПараметрыПеремещения.СтатусПартииИсточник;
	
	Движение.Количество   = 0;
	
	// Суммы из структуры
	Для Каждого ЭлСтоимость Из СтСтоимость	Цикл
		Движение[ЭлСтоимость.Ключ]  = ЭлСтоимость.Значение;
	КонецЦикла;
	
	// Коды операций
	СтрокаДокумента.Вставить("КодОперацииПартииТоваров", ПараметрыПеремещения.КодОперации);
	
	Движение.КодОперации = ПараметрыПеремещения.КодОперации;
		
	// При внешнем списании оставляем ссылку на исходное движение
	Движение.ДокументДвижения = ПараметрыПеремещения.ДокументДвижения;
	Движение.НомерСтрокиСписанныхТоваров = ПараметрыПеремещения.НомерСтрокиСписанныхТоваров;
	
	ВыполнитьКорДвижение(Источник, СтрокаДокумента, СтруктураДопПараметров, Движение);
	
КонецПроцедуры // ДобавитьЗаписиПоВнешнемуСписанию()

Процедура УдалитьОшибкиОкругленияПоРегистру(ДатаКон, ИмяРегистра, РегламентныйДокумент)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Истина КАК Активность,
						  |	&ВидДвижения КАК ВидДвижения,
	                      |	*
	                      |ИЗ
	                      |	РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, ) КАК ПартииТоваровНаСкладахОстатки
	                      |ГДЕ
	                      |	ПартииТоваровНаСкладахОстатки.КоличествоОстаток = 0
						  |	И ПартииТоваровНаСкладахОстатки.СтоимостьОстаток > -1
						  |	И ПартииТоваровНаСкладахОстатки.СтоимостьОстаток < 1");
	Запрос.УстановитьПараметр("ДатаКон",Новый Граница(ДатаКон,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТаблицаДвижений = Результат.Выгрузить();
		ТаблицаДвижений.Колонки.КоличествоОстаток.Имя = "Количество";
		ТаблицаДвижений.Колонки.СтоимостьОстаток.Имя = "Стоимость";
		
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(РегламентныйДокумент);
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписей.мПериод = ДатаКон;
		
		НаборЗаписей.ВыполнитьРасход();
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УдалитьОшибкиОкругления(ДатаКон, РегламентныйДокумент)
	УдалитьОшибкиОкругленияПоРегистру(ДатаКон, "ПартииТоваровНаСкладах", РегламентныйДокумент);
	УдалитьОшибкиОкругленияПоРегистру(ДатаКон, "ПартииТоваровПереданные", РегламентныйДокумент);
КонецПроцедуры

// Вызывает по очереди этапы корректировки
//
// Параметры:
//	ДатаНач 			- дата начала периода, за который корректируется стоимость списания,
//	ДатаКон 			- дата окончания периода, за который корректируется стоимость списания,
//	ТаблицаТоваров 		- таблица значений содержащая список номенклатуры и документов оприходования по которым производиться корректировка,
//	РегламентныйДокумент- документ, из которого вызывается корректировка стоимости списания,
//	ДопПараметры		- структура, содержащая дополнительные параметры, такие как учетная политика,
//	НомерПередела		- число, номер передела,
//	НомерРасчета		- число, номер порции.
//
Процедура СкорректироватьСписание(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета)
	Перем ПериодЗаписей;
	
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		
	МассивДокументовОприходования = ТаблицаТоваров.ВыгрузитьКолонку("ДокументОприходования");
	
	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

	ДопПараметры.Вставить("УчетнаяПолитика", УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(ДатаКон));
	ДопПараметры.Вставить("МассивНоменклатуры",МассивНоменклатуры);
	ДопПараметры.Вставить("МассивДокументовОприходования",МассивДокументовОприходования);
	
	СформироватьСписокУзлов(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	СформироватьСписокДуг(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	
	Если ДопПараметры.КоличествоПеремещений + ДопПараметры.КоличествоВнешнихСписаний = 0 Тогда
		Возврат;//Корректировка не требуется
	КонецЕсли;	
	
	СформироватьСЛУ(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	
	Если ДопПараметры.КоличествоПеремещений <> 0 Тогда
		
		РешитьСЛУ(ДопПараметры.СЛУ,ДопПараметры.КоличествоПеремещений);
		
	КонецЕсли;	
	
	// Структура общих параметров
	ТаблицаРезультатаЗапроса = Новый ТаблицаЗначений;
	
	ПодготовитьТаблицуКорректировкиСписания(ТаблицаРезультатаЗапроса);
	
	СтруктураПараметров = ДопПараметры;
		
	// Признак учета, используемый в общих процедурах
	СтруктураПараметров.Вставить("Учет", "Упр");
	СтруктураПараметров.Вставить("ИмяРегистраСклад",      "ПартииТоваровНаСкладах");
	СтруктураПараметров.Вставить("ИмяРегистраПереданные", "ПартииТоваровПереданные");
		
	СтруктураПараметров.Вставить("УчетнаяПолитика", УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(ДатаКон));
	СтруктураПараметров.Вставить("ТаблицаВыполненныхДвижений", ТаблицаРезультатаЗапроса);
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
	СтруктураПараметров.Вставить("РегламентныйДокумент", РегламентныйДокумент);
		
	// Движения - наборы записей по регистрам
	УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, РегламентныйДокумент);
		
	Если НЕ ДопПараметры.Свойство("Период", ПериодЗаписей) Тогда
			
		Если РегламентныйДокумент.Метаданные().Реквизиты.Найти("РегламентныйДокумент") <> Неопределено Тогда
			ПериодЗаписей = КонецМесяца(РегламентныйДокумент.ПериодРегистрации);
		Иначе
			ПериодЗаписей = РегламентныйДокумент.Дата;
		КонецЕсли;
			
	КонецЕсли;
		
	УправлениеЗапасамиПартионныйУчет.ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаРезультатаЗапроса, ПериодЗаписей, РегламентныйДокумент, Ложь);
	
	СформироватьКорректирующиеДвижения(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	
	УправлениеЗапасамиПартионныйУчет.ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаРезультатаЗапроса, Ложь);	
	
	УдалитьОшибкиОкругления(ДатаКон, РегламентныйДокумент);
КонецПроцедуры	

// Функция-оболочка, вызывающая корректировку списания. Вызывается из документов:
// КорректировкаСтоимостиСписанияТоваров
Процедура КорректировкаСписания(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент,
								Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете,
								ОтражатьВНалоговомУчете, ДопПараметры = Неопределено, НомерПередела=0,НомерРасчета=0) Экспорт
	
	//Признак того, что в параметр ДопПараметры передана структура и ее необходимо вернуть из процедуры
	
	флТребуетсяВозвратДопПараметров = истина;
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		флТребуетсяВозвратДопПараметров = Ложь;
		ДопПараметры = Новый Структура;
	КонецЕсли;

	ДопПараметры.Вставить("Организация", Организация);
	
	// Приведение структуры доп.параметров к виду структуры параметров из основного алгоритма списания партий
	//
	
	ДопПараметры.Вставить("ОтражатьВУправленческомУчете" , ОтражатьВУправленческомУчете);
	ДопПараметры.Вставить("ОтражатьВБухгалтерскомУчете"  , ОтражатьВБухгалтерскомУчете);
	ДопПараметры.Вставить("ОтражатьВНалоговомУчете"      , ОтражатьВНалоговомУчете);
	
	ДопПараметры.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете" , ОтражатьВУправленческомУчете);
	ДопПараметры.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете"  , ОтражатьВБухгалтерскомУчете);
	ДопПараметры.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете"      , ОтражатьВНалоговомУчете);
	
	Если НЕ ДопПараметры.Свойство("КодыОпераций") тогда
		ДопПараметры.Вставить("КодыОпераций", Перечисления.КодыОперацийПартииТоваров);
	КонецЕсли;
	
	Если НЕ РегламентныйДокумент = Неопределено тогда
		ДопПараметры.Вставить("ТипЗначенияРегистратора", ТипЗнч(РегламентныйДокумент));
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда
		СкорректироватьСписание(ДатаНач, ДатаКон, ТаблицаТоваров, РегламентныйДокумент, ДопПараметры,НомерПередела,НомерРасчета);
	КонецЕсли;	
	
	Если  флТребуетсяВозвратДопПараметров Тогда
		// Последних переделов может быть несколько 
		Если ДопПараметры.Свойство("КорректироватьСтоимостьВозвратовТекущегоМесяца") тогда
			ДопПараметры.Удалить("КорректироватьСтоимостьВозвратовТекущегоМесяца");
		КонецЕсли;
	Иначе
		//необходимо для того, чтобы предотвратить возврат из процедуры мутабельных значений.
		//Если в ДопПараметры не надо ничего возвращать, то переменную необходимо удалить
		ДопПараметры = неопределено;
	КонецЕсли;

КонецПроцедуры // КорректировкаСписания

//Готовит таблицу для передачи в модуль партионного учета
Процедура ПодготовитьТаблицуКорректировкиСписания(ТаблицаРезультатаЗапроса)
	
	ДобавляемыеПоля = "ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,
					  |НоменклатураНовая,КоличествоПоступление,СкладПолучатель,
					  |ИзменитьХарактеристику,ИзменитьСерию,ИзменитьСклад,КачествоНовое,СтатусПартииНовый,
					  |ВедениеУчетаПоПроектам, ЗаказПартии";
	СтруктураДобавляемыхПолей = Новый Структура(ДобавляемыеПоля,"Булево","Булево","Булево",,"Число",,"Булево","Булево","Булево",,,"Булево");
	
	Для Каждого Поле Из СтруктураДобавляемыхПолей цикл 
		Если ТаблицаРезультатаЗапроса.Колонки.Найти(Поле.Ключ) = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Поле.Значение) тогда
				ТипПоля = Неопределено;
			Иначе
				ТипПоля = Новый ОписаниеТипов(Поле.Значение);
			КонецЕсли;
			ТаблицаРезультатаЗапроса.Колонки.Добавить(Поле.Ключ, ТипПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуКорректировкиСписания()


// Выполняет корреспондирующее движение, связанное со списанием партии
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
	
	НаправлениеСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров, СтрокаДокумента.СтатьяЗатрат);
	УправлениеЗапасамиПартионныйУчет.ВыполнитьКорДвижениеУпр(РегистрУчета, НаправлениеСписания , СтрокаДокумента, СтруктураПараметров, Движение);
	
	// Сюда можно добавить вызов процедур для выполнения движений по другим учетам
	
КонецПроцедуры // ВыполнитьКорДвижение()
