////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки узлов плана обмена
//
// Параметры:
//  Форма – управляемая форма, из которой вызвана процедура
// 
Процедура ФормаНастройкиУзловПриСозданииНаСервере(Форма, Отказ) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ПроверкаЗаполнения") Тогда
		
		ЗагрузитьКонтекстВФорму(Форма, Форма.Параметры.Настройки);
		Возврат;
	ИначеЕсли Форма.Параметры.Свойство("ПолучитьЗначенияПоУмолчанию") Тогда
		
		Форма.Контекст = ВыгрузитьКонтекстИзФормы(Форма);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКонтекстВФорму(Форма, Форма.Параметры.Настройки);
	
	ВыполнитьСравнениеИОбъединениеТаблицФормы(Форма, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки узла
//
// Параметры:
//  Форма – управляемая форма, из которой вызвана процедура
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого создана форма
// 
Процедура ФормаНастройкиУзлаПриСозданииНаСервере(Форма, ИмяПланаОбмена) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Форма.НастройкаОтборовНаУзле = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзле();
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "НастройкаОтборовНаУзле");
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки узла базы корреспондента
//
// Параметры:
//  Форма – Управляемая форма базы корреспондента
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого создана форма
//  Данные - Соответствие - Содержит список таблиц базы данных для задания правил синхронизации данных
// 
Процедура ФормаНастройкиУзлаБазыКорреспондентаПриСозданииНаСервере(Форма, ИмяПланаОбмена, Данные = Неопределено) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Форма.ПараметрыВнешнегоСоединения = Форма.Параметры.ПараметрыВнешнегоСоединения;
	Форма.НастройкаОтборовНаУзле = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзлеБазыКорреспондента();
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "НастройкаОтборовНаУзле");
	
	Если Данные <> Неопределено И ТипЗнч(Данные) = Тип("Соответствие") Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		ВнешнееСоединение = ОбменДаннымиПовтИсп.УстановитьВнешнееСоединение(Форма.ПараметрыВнешнегоСоединения, СтрокаСообщенияОбОшибке);
		
		Если ВнешнееСоединение = Неопределено Тогда
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
		Для Каждого Таблица Из Данные Цикл
			
			Если    Форма.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_1_1_7
				ИЛИ Форма.ПараметрыВнешнегоСоединения.ВерсияКорреспондента_2_0_1_6 Тогда
				
				ТаблицаБазыКорреспондента = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбъектыТаблицы_2_0_1_6(Таблица.Ключ));
				
			Иначе
				
				ТаблицаБазыКорреспондента = ЗначениеИзСтрокиВнутр(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбъектыТаблицы(Таблица.Ключ));
				
			КонецЕсли;
			
			Данные.Вставить(Таблица.Ключ, ТаблицаЗначенийИзДереваЗначений(ТаблицаБазыКорреспондента));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки значений по умолчанию
//
// Параметры:                            
//  Форма – управляемая форма, из которой вызвана процедура
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого создана форма
// 
Процедура ФормаНастройкиЗначенийПоУмолчаниюПриСозданииНаСервере(Форма, ИмяПланаОбмена) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Форма.ЗначенияПоУмолчаниюНаУзле = ПланыОбмена[ИмяПланаОбмена].ЗначенияПоУмолчаниюНаУзле();
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "ЗначенияПоУмолчаниюНаУзле");
	
КонецПроцедуры

// Процедура-обработчик события "ПриСозданииНаСервере" для формы настройки значений по умолчанию,
// через внешнее соединение для базы корреспондента
//
// Параметры:                            
//  Форма – управляемая форма, из которой вызвана процедура
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого создана форма
//  ДополнительныеДанные - Получение дополнительных данных
// 
Процедура ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондентаПриСозданииНаСервере(Форма, ИмяПланаОбмена, ДополнительныеДанные = Неопределено) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Форма.ПараметрыВнешнегоСоединения = Форма.Параметры.ПараметрыВнешнегоСоединения;
	Форма.ЗначенияПоУмолчаниюНаУзле = ПланыОбмена[ИмяПланаОбмена].ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента();
	
	ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, "ЗначенияПоУмолчаниюНаУзле");
	
	Если Форма.ПараметрыВнешнегоСоединения.ТипСоединения = "ВременноеХранилище" Тогда
		
		ДополнительныеДанные = ПолучитьИзВременногоХранилища(
			Форма.ПараметрыВнешнегоСоединения.АдресВременногоХранилища
		).Получить().Получить("{ДополнительныеДанные}");
	КонецЕсли;
	
КонецПроцедуры

// Определяет список реквизитов, которые должны быть обязательно заполнены
// при настройке синхронизации данных с учетом функциональных опций
//
// Параметры:
//	ПроверяемыеРеквизиты - Массив - Список реквизитов, для которых выполняется проверка заполнения
//	ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется проверка реквизитов
//
Процедура ОпределитьПроверяемыеРеквизитыСУчетомФункциональныхОпций(ПроверяемыеРеквизиты, ИмяПланаОбмена) Экспорт
	
	ОбратныйИндекс = ПроверяемыеРеквизиты.Количество() - 1;
	
	Пока ОбратныйИндекс >= 0 Цикл
		
		ИмяРеквизита = ПроверяемыеРеквизиты[ОбратныйИндекс];
		
		Реквизит = Метаданные.ПланыОбмена[ИмяПланаОбмена].Реквизиты.Найти(ИмяРеквизита);
		
		Если Реквизит <> Неопределено
			И Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			
			ФункциональныеОпции = ФункциональныеОпцииРеквизита(Реквизит);
			
			УдалитьРеквизит = Истина;
			
			Если ФункциональныеОпции.Количество() = 0 Тогда
				
				УдалитьРеквизит = Ложь;
				
			Иначе
				
				Для Каждого ИмяФункциональнойОпции Из ФункциональныеОпции Цикл
					
					Если ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции) = Истина Тогда
						
						УдалитьРеквизит = Ложь;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если УдалитьРеквизит Тогда
				
				ПроверяемыеРеквизиты.Удалить(ОбратныйИндекс);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбратныйИндекс = ОбратныйИндекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет из списка реквизитов для обязательного заполнения те реквизиты,
// которые не отображаются на форме
//
// Параметры:
//	ПроверяемыеРеквизиты - Массив - Список реквизитов, для которых выполняется проверка заполнения
//	Элементы - ВсеЭлементыФормы - Содержит коллекцию всех элементов управляемой формы
//
Процедура ОпределитьПроверяемыеРеквизитыСУчетомНастроекВидимостиПолейФормы(ПроверяемыеРеквизиты, Элементы) Экспорт
	
	ОбратныйИндекс = ПроверяемыеРеквизиты.Количество() - 1;
	
	Пока ОбратныйИндекс >= 0 Цикл
		
		ИмяРеквизита = ПроверяемыеРеквизиты[ОбратныйИндекс];
		
		Для Каждого Элемент Из Элементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
				
				Если Элемент.ПутьКДанным = ИмяРеквизита
					И Не Элемент.Видимость Тогда
					
					ПроверяемыеРеквизиты.Удалить(ОбратныйИндекс);
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбратныйИндекс = ОбратныйИндекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость выполнения обработчика события "После выгрузки данных" при обмене в РИБ
//
// Параметры:
//  Объект – ПланОбменаОбъект – узел плана обмена, для которого выполняется обработчик
//  Ссылка – ПланОбменаСсылка – ссылка на узел плана обмена, для которого выполняется обработчик
// 
//  Возвращаемое значение:
//   Тип: Булево. Истина – необходимо выполнить обработчик "После выгрузки данных"; Ложь – нет.
//
Функция НадоВыполнитьОбработчикПослеВыгрузкиДанных(Объект, Ссылка) Экспорт
	
	Возврат НадоВыполнитьОбработчик(Объект, Ссылка, "НомерОтправленного");
	
КонецФункции

// Определяет необходимость выполнения обработчика события "После загрузки данных" при обмене в РИБ
//
// Параметры:
//  Объект – ПланОбменаОбъект – узел плана обмена, для которого выполняется обработчик
//  Ссылка – ПланОбменаСсылка – ссылка на узел плана обмена, для которого выполняется обработчик
// 
//  Возвращаемое значение:
//   Тип: Булево. Истина – необходимо выполнить обработчик "После загрузки данных"; Ложь – нет.
//
Функция НадоВыполнитьОбработчикПослеЗагрузкиДанных(Объект, Ссылка) Экспорт
	
	Возврат НадоВыполнитьОбработчик(Объект, Ссылка, "НомерПринятого");
	
КонецФункции

// Возвращает префикс этой информационной базы
//
Функция ПрефиксИнформационнойБазы() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	
КонецФункции

// Устанавливает префикс этой информационной базы
//
Процедура УстановитьПрефиксИнформационнойБазы(Знач Префикс) Экспорт
	
	Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(Префикс));
	
	ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
	
КонецПроцедуры

// Возвращает количество проблем обмена данными
//
Функция КоличествоПроблем() Экспорт
	
	Возврат РегистрыСведений.РезультатыОбменаДанными.КоличествоПроблем();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Объявляет служебные события подсистемы ОбменДанными:
//
// Серверные события:
//   ПриВыгрузкеДанных,
//   ПриЗагрузкеДанных.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Используется для переопределения стандартной обработки выгрузки данных.
	// В данном обработчике должна быть реализована логика выгрузки данных:
	// выборка данных для выгрузки, сериализация данных в файл сообщения или сериализация данных в поток.
	// После выполнения обработчика выгруженные данные будут отправлены получателю подсистемой обмена данными.
	// Формат сообщения для выгрузки может быть произвольным.
	// В случае ошибок при отправке данных следует прерывать выполнение обработчика
	// методом ВызватьИсключение с описанием ошибки.
	//
	// Параметры:
	//
	// СтандартнаяОбработка. Тип: Булево.
	// В данный параметр передается признак выполнения стандартной (системной) обработки события.
	// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
	// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
	// Значение по умолчанию: Истина.
	//
	// Получатель (только для чтения). Тип: ПланОбменаСсылка.
	// Узел плана обмена, для которого выполняется выгрузка данных.
	//
	// ИмяФайлаСообщения (только для чтения). Тип: Строка.
	// Имя файла, в который необходимо выполнить выгрузку данных. Если этот параметр заполнен, то система ожидает,
	// что данные будут выгружены в файл. После выгрузки система выполнит отправку данных из этого файла.
	// Если параметр пустой, то система ожидает, что данные будут выгружены в параметр ДанныеСообщения.
	//
	// ДанныеСообщения. Тип: Произвольный.
	// Если параметр ИмяФайлаСообщения пустой, то система ожидает, что данные будут выгружены в этот параметр.
	//
	// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
	// Определяет максимальное число элементов данных, которые помещаются в сообщение в рамках одной транзакции базы данных.
	// При необходимости в обработчике следует реализовать логику установки транзакционных блокировок на выгружаемые данные.
	// Значение параметра задается в настройках подсистемы обмена данными.
	//
	// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
	// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации 
	// данных (ошибок, предупреждений, информации) с заданным именем события.
	// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
	//
	// КоличествоОтправленныхОбъектов. Тип: Число.
	// Счетчик отправленных объектов. Используется для определения количества отправленных объектов
	// для последующей фиксации в протоколе обмена.
	//
	// Синтаксис:
	// Процедура ПриВыгрузкеДанныхСлужебный(СтандартнаяОбработка,
	//							Получатель,
	//							ИмяФайлаСообщения,
	//							ДанныеСообщения,
	//							КоличествоЭлементовВТранзакции,
	//							ИмяСобытияЖурналаРегистрации,
	//							КоличествоОтправленныхОбъектов) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбменДанными\ПриВыгрузкеДанныхСлужебный");
	
	// Используется для переопределения стандартной обработки загрузки данных.
	// В данном обработчике должна быть реализована логика загрузки данных:
	// необходимые проверки перед загрузкой данных, сериализация данных из файла сообщения или сериализация данных из потока.
	// Формат сообщения для загрузки может быть произвольным.
	// В случае ошибок при получении данных следует прерывать выполнение обработчика
	// методом ВызватьИсключение с описанием ошибки.
	//
	// Параметры:
	//
	// СтандартнаяОбработка. Тип: Булево.
	// В данный параметр передается признак выполнения стандартной (системной) обработки события.
	// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
	// Отказ от стандартной обработки не отменяет действие.
	// Значение по умолчанию: Истина.
	//
	// Отправитель (только для чтения). Тип: ПланОбменаСсылка.
	// Узел плана обмена, для которого выполняется загрузка данных.
	//
	// ИмяФайлаСообщения (только для чтения). Тип: Строка.
	// Имя файла, из которого требуется выполнить загрузку данных. Если параметр не заполнен, то данные для загрузки
	// передаются через параметр ДанныеСообщения.
	//
	// ДанныеСообщения. Тип: Произвольный.
	// Параметр содержит данные, которые необходимо загрузить. Если параметр ИмяФайлаСообщения пустой,
	// то данные для загрузки передаются через этот параметр.
	//
	// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
	// Определяет максимальное число элементов данных, которые читаются из сообщения и записываются в базу данных
	// в рамках одной транзакции. При необходимости в обработчике следует реализовать логику записи данных в транзакции.
	// Значение параметра задается в настройках подсистемы обмена данными.
	//
	// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
	// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации
	// данных (ошибок, предупреждений, информации) с заданным именем события.
	// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
	//
	// КоличествоПолученныхОбъектов. Тип: Число.
	// Счетчик полученных объектов. Используется для определения количества загруженных объектов
	// для последующей фиксации в протоколе обмена.
	//
	// Синтаксис:
	// Процедура ПриЗагрузкеДанныхСлужебный(СтандартнаяОбработка,
	//							Отправитель,
	//							ИмяФайлаСообщения,
	//							ДанныеСообщения,
	//							КоличествоЭлементовВТранзакции,
	//							ИмяСобытияЖурналаРегистрации,
	//							КоличествоПолученныхОбъектов) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.ОбменДанными\ПриЗагрузкеДанныхСлужебный");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОбработкеПараметровЗапуска"].Добавить(
			"ОбменДаннымиКлиент");
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы"].Добавить(
			"ОбменДаннымиКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииОбработчиковУстановкиПараметровСеанса"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена"].Добавить(
		"ОбменДаннымиСервер");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"ОбменДаннымиСервер");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриВключенииРазделенияПоОбластямДанных"].Добавить(
		"ОбменДаннымиСервер");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"ОбменДаннымиСервер");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов

// Выполняет загрузку идентификаторов объектов метаданных, полученных из главного узла РИБ.
Процедура ПриОбновленииИдентификаторовОбъектовМетаданных(Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") = Ложь Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.СоздатьМенеджерЗначения();
			ИспользоватьСинхронизациюДанных.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			ИспользоватьСинхронизациюДанных.ОбменДанными.Загрузка = Истина;
			ИспользоватьСинхронизациюДанных.Значение = Истина;
			ИспользоватьСинхронизациюДанных.Записать();
			
		Иначе
			
			Если ПолучитьИспользуемыеПланыОбмена().Количество() > 0 Тогда
				
				ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.СоздатьМенеджерЗначения();
				ИспользоватьСинхронизациюДанных.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
				ИспользоватьСинхронизациюДанных.ОбменДанными.Загрузка = Истина;
				ИспользоватьСинхронизациюДанных.Значение = Истина;
				ИспользоватьСинхронизациюДанных.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") = Истина Тогда
		
		УзелИнформационнойБазы = ПланыОбмена.ГлавныйУзел();
		
		Если УзелИнформационнойБазы <> Неопределено Тогда
			
			ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
			
			// Загрузка только параметров работы программы
			ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, Истина, Ложь, ВидТранспорта,,,,,, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак необходимости загрузки идентификаторов объектов метаданных из сообщения обмена.
// Очищает хранилище сообщения обмена, полученного из главного узла РИБ.
//
Процедура ПриОшибкеПолученияИдентификаторовОбъектовМетаданных() Экспорт
	
	Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Установить(Новый ХранилищеЗначения(Неопределено));
	
	Константы.ВыполнитьЗагрузкуПараметровРаботыПрограммы.Установить(Истина);
	
КонецПроцедуры

// Только для внутреннего использования.
Функция НеобходимоПодтвердитьНастройкиЗагрузкиСообщенияВПодчиненномУзлеРИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ВыполнитьЗагрузкуПараметровРаботыПрограммы.Получить() = Истина;
	
КонецФункции

// Возвращает Истина, если настройка подчиненного узла РИБ не завершена и
// требуется обновления параметров работы программы, которые не участвуют в РИБ.
//
Функция НастройкаПодчиненногоУзлаРИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ЭтоПодчиненныйУзелРИБ() И ОбменДаннымиПовтИсп.ЭтоУзелОбменаДаннымиБСП(ПланыОбмена.ГлавныйУзел())
	      И Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() = Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Приоритет = 1;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	Обработчик.Процедура = "ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьНеобходимостьВыполненияКорректировкиИнформацииСопоставленияДляВсехУзловИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьРежимВыгрузкиОбъектовДляВсехУзловИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.ОбновитьРегламентныеЗаданияСценариевОбменовДанными";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.0";
	Обработчик.Процедура = "ОбменДаннымиСервер.ОбновитьКонстантуНастройкаПодчиненногоУзлаРИБЗавершена";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.10";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.5";
	Обработчик.Приоритет = 1;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.УстановитьПризнакСохраненияПароляДляОбменаЧерезИнтернет";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.12";
	Обработчик.Процедура = "ОбменДаннымиСервер.СброситьНастройкиМонитораОбмена";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.21";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменДаннымиСервер.ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ_2_1_2_21";
	
КонецПроцедуры

// Выполняет обновление правил конвертации/регистрации объектов.
// Обновление выполняется для всех планов обмена, использующих функционал БСП.
// Обновление правил выполняется только для типовых правил.
// Если для плана обмена правила были загружены из файла, то такие правила не обновляются.
//
Процедура ВыполнитьОбновлениеПравилДляОбменаДанными() Экспорт
	
	// для сценария, когда в конфигурации был удален или переименован план обмена
	УдалитьНеактуальныеЗаписиВРегистреПравилДляОбменаДанными();
	
	ПравилаОбменаЗагруженныеИзФайла = Новый Массив;
	ПравилаРегистрацииЗагруженныеИзФайла = Новый Массив;
	
	ВыполнитьПроверкуНаличияПравилОбменаЗагруженныхИзФайла(ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла);
	
	Отказ = Ложь;
	
	ВыполнитьОбновлениеВерсииТиповыхПравилДляОбменаДанными(Отказ, ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла);
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'При обновлении правил обмена данными возникли ошибки (см. Журнал регистрации).'");
	КонецЕсли;
	
	ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
	
КонецПроцедуры

// Устанавливает признак того, что для всех узлов планов обмена необходимо выполнить процедуру
// корректировки информации сопоставления при следующем обмене данными.
//
Процедура УстановитьНеобходимостьВыполненияКорректировкиИнформацииСопоставленияДляВсехУзловИнформационнойБазы() Экспорт
	
	РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьНеобходимостьВыполненияКорректировкиИнформацииСопоставленияДляВсехУзловИнформационнойБазы();
	
КонецПроцедуры

// Устанавливает для всех узлов универсального обмена данными значения реквизитов-флагов режимов выгрузки значение "Выгружать по условию".
//
Процедура УстановитьРежимВыгрузкиОбъектовДляВсехУзловИнформационнойБазы() Экспорт
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	Для Каждого Элемент Из СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		Если Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУзлов = ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена(ИмяПланаОбмена);
		
		Для Каждого Узел Из МассивУзлов Цикл
			
			ИменаРеквизитов = ОбщегоНазначения.ИменаРеквизитовПоТипу(Узел, Тип("ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена"));
			
			Если ПустаяСтрока(ИменаРеквизитов) Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, " ", "");
			
			Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов);
			
			ОбъектМодифицирован = Ложь;
			
			УзелОбъект = Узел.ПолучитьОбъект();
			
			Для Каждого ИмяРеквизита Из Реквизиты Цикл
				
				Если Не ЗначениеЗаполнено(УзелОбъект[ИмяРеквизита]) Тогда
					
					УзелОбъект[ИмяРеквизита] = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
					
					ОбъектМодифицирован = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОбъектМодифицирован Тогда
				
				УзелОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
				УзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные регламентных заданий для всех сценариев обменов данных, кроме помеченных на удаление
//
Процедура ОбновитьРегламентныеЗаданияСценариевОбменовДанными() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СценарииОбменовДанными.Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	Не СценарииОбменовДанными.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отказ = Ложь;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Отказ, Неопределено, Объект);
		
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка при обновлении регламентного задания для сценария обмена данными.'");
		КонецЕсли;
		
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значение константы НастройкаПодчиненногоУзлаРИБЗавершена в Истина для подчиненного узла РИБ,
// т.к. в базе уже настроен обмен в РИБ по факту
//
Процедура ОбновитьКонстантуНастройкаПодчиненногоУзлаРИБЗавершена() Экспорт
	
	ОбновлятьКонстанту = Ложь;
	
	Если ЭтоПодчиненныйУзелРИБ() Тогда

		Если ОбменДаннымиПовтИсп.ЭтоУзелОбменаДаннымиБСП(ПланыОбмена.ГлавныйУзел()) Тогда
			Если РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаДляУзлаЗаданы(ПланыОбмена.ГлавныйУзел()) Тогда
				ОбновлятьКонстанту = Истина;
			КонецЕсли;
		Иначе
			ОбновлятьКонстанту = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если ОбновлятьКонстанту Тогда
		Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Переустанавливает значение константы ИспользоватьСинхронизациюДанных при необходимости
//
Процедура ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ() Экспорт
	
	Если Константы.ИспользоватьСинхронизациюДанных.Получить() = Истина Тогда
		
		Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Переустанавливает значение константы ИспользоватьСинхронизациюДанных при необходимости
// Т.к. константа стала неразделенной и ее значение сбросилось
//
Процедура ПроверитьУстановкуФункциональныхОпцийПриОбновленииИБ_2_1_2_21() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") = Ложь Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
			
		Иначе
			
			Если ПолучитьИспользуемыеПланыОбмена().Количество() > 0 Тогда
				
				Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение реквизита WSЗапомнитьПароль в РС.НастройкиТранспортаОбмена в значение Истина.
//
Процедура УстановитьПризнакСохраненияПароляДляОбменаЧерезИнтернет() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиТранспортаОбмена.Узел КАК Узел
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбмена КАК НастройкиТранспортаОбмена
	|ГДЕ
	|	НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.WS)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// обновляем запись в РС
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Узел", Выборка.Узел);
		СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
		РегистрыСведений.НастройкиТранспортаОбмена.ОбновитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает сохраненные настройки общей формы ОбменыДанными
//
Процедура СброситьНастройкиМонитораОбмена() Экспорт
	
	МассивНастроекФормы = Новый Массив;
	МассивНастроекФормы.Добавить("/НастройкиФормы");
	МассивНастроекФормы.Добавить("/НастройкиОкна");
	МассивНастроекФормы.Добавить("/НастройкиОкнаВебКлиента");
	МассивНастроекФормы.Добавить("/ТекущиеДанные");
	
	Для Каждого ЭлементФормы Из МассивНастроекФормы Цикл
		ХранилищеСистемныхНастроек.Удалить("ОбщаяФорма.ОбменыДанными" + ЭлементФормы, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

//

// Определяет является ли план обмена БСП разделенным
//
// Параметры:
//	ИмяПланаОбмена - Строка - Имя проверяемого плана обмена
//
// Возвращаемое значение:
//	Тип - Булево
//
Функция ЭтоРазделенныйПланОбменаБСП(Знач ИмяПланаОбмена) Экспорт
	
	Возврат ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП().Найти(ИмяПланаОбмена) <> Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ЗагрузкаПараметровРаботыПрограммы",             "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Обработчик события "перед обновлением информационной базы". Выполняет загрузку данных из главного узла.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") = Ложь Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
				
				Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
				
			КонецЕсли;
			
		Иначе
			
			Если ПолучитьИспользуемыеПланыОбмена().Количество() > 0 Тогда
				
				Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") = Истина Тогда
			
			УзелИнформационнойБазы = ПланыОбмена.ГлавныйУзел();
			
			Если УзелИнформационнойБазы <> Неопределено Тогда
				
				ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
				
				ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Ложь, УзелИнформационнойБазы, Истина, Ложь, ВидТранспорта); // только загрузка
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	// Выгрузка данных в главный узел.
	
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") = Истина Тогда
			
			УзелИнформационнойБазы = ПланыОбмена.ГлавныйУзел();
			
			Если УзелИнформационнойБазы <> Неопределено Тогда
				
				ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
				
				ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Ложь, УзелИнформационнойБазы, Ложь, Истина, ВидТранспорта); // только выгрузка
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДанными", МассивВерсий);
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики для подсистемы обмена данными
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.Вставить("ИмяПланаОбменаРИБ", ?(ЭтоПодчиненныйУзелРИБ(), ПланыОбмена.ГлавныйУзел().Метаданные().Имя, ""));
	Параметры.Вставить("ГлавныйУзел", ПланыОбмена.ГлавныйУзел());
	
	Параметры.Вставить("ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла", Ложь);
	//	Не ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто()
	//	И ЭтоПодчиненныйУзелРИБ()
	//	И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить()
	//);
	
	Параметры.Вставить("ПроверитьНеобходимостьОбновленияКонфигурацииПодчиненногоУзла", Ложь);
	//	Не Параметры.ОткрытьПомощникСозданияОбменаДаннымиДляНастройкиПодчиненногоУзла
	//	И Пользователи.РолиДоступны("ВыполнениеСинхронизацииДанных")
	//);
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.2.5", "Роль.ВыполнениеОбменовДанными", "Роль.ВыполнениеСинхронизацииДанных", Библиотека);
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.2.5", "Роль.ДобавлениеИзменениеОбменовДанными", "Роль.НастройкаСинхронизацииДанных", Библиотека);
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

// Используется для получения объектов метаданных обязательных для плана обмена.
// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбязательныхОбъектовПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые не следует включать в состав плана обмена.
// Если подсистема имеет объекты метаданных, которые не следует включать в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые не следует включать в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов-исключений плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбъектовИсключенийПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		Объекты.Добавить(Метаданные.Константы.ВыполнитьЗагрузкуПараметровРаботыПрограммы);
		Объекты.Добавить(Метаданные.Константы.ДатаОбновленияПовторноИспользуемыхЗначенийМРО);
		Объекты.Добавить(Метаданные.Константы.ИспользоватьСинхронизациюДанных);
		Объекты.Добавить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВЛокальномРежиме);
		Объекты.Добавить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВМоделиСервиса);
		Объекты.Добавить(Метаданные.Константы.НастройкаПодчиненногоУзлаРИБЗавершена);
		Объекты.Добавить(Метаданные.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы);
		Объекты.Добавить(Метаданные.Константы.СообщениеОбменаДаннымиИзГлавногоУзла);
		
		Объекты.Добавить(Метаданные.Справочники.СценарииОбменовДанными);
		
		Объекты.Добавить(Метаданные.РегистрыСведений.НастройкиТранспортаОбмена);
		Объекты.Добавить(Метаданные.РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз);
		Объекты.Добавить(Метаданные.РегистрыСведений.ПравилаДляОбменаДанными);
		Объекты.Добавить(Метаданные.РегистрыСведений.СообщенияОбменаДанными);
		Объекты.Добавить(Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз);
		Объекты.Добавить(Метаданные.РегистрыСведений.СостоянияОбменовДанными);
		Объекты.Добавить(Метаданные.РегистрыСведений.СостоянияУспешныхОбменовДанными);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Константы.НастройкиПодчиненногоУзлаРИБ);
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") = Ложь Тогда
		Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.РезультатыОбменаДанными.ПолноеИмя());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Определяет используется ли в конфигурации групповое изменение объектов
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияГрупповогоИзмененияОбъектов(Используется) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет используется ли в конфигурации версионирование
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияВерсионирования(Используется) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет используется ли в конфигурации подсистема даты запрета изменения
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияДатЗапретаИзменения(Используется) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак игнорирования версии объекта
//
// Параметры:
//	Ссылка - Ссылка на игнорируемый объект
//	НомерВерсии - Число - Номер версии игнорируемого объекта
//	Игнорировать - Булево Признак игнорирования версии
//
Процедура ПриИгнорированииВерсииОбъекта(Ссылка, НомерВерсии, Игнорировать) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВерсионированиеОбъектов");
		Модуль.ИгнорироватьВерсиюОбъекта(Ссылка, НомерВерсии, Игнорировать);
	КонецЕсли;
	
КонецПроцедуры

// Создает и записывает версию объекта в информационную базу.
//
// Параметры
//	Объект - записываемый объект ИБ;
//	АвторВерсии - Пользователь или Узел плана обмена - Источник версии;
//	ТипВерсииОбъекта - Перечисление - Тип создаваемой версии;
//	Комментарий - Строка - Комментарий к создаваемой версии;
//	УникальныйИдентификаторСтрокой - Строка - Создает пустую ссылку из УИДа, если у переданного объекта ссылка отсутствует.
//
Процедура ПриСозданииВерсииОбъекта(Объект, АвторВерсии, Знач ТипВерсииОбъекта, Комментарий, УникальныйИдентификаторСтрокой = "", БезусловнаяЗапись = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВерсионированиеОбъектов");
		Модуль.СоздатьВерсиюОбъекта(Объект, АвторВерсии, ТипВерсииОбъекта, Комментарий, УникальныйИдентификаторСтрокой, БезусловнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перехода на версию объекта
//
// Параметры:
//	ОбъектСсылка - Ссылка - Ссылка на объект, для которого имеется версия
//	НомерВерсииДляПерехода - Число - Номер версии, на которую необходимо выполнить переход
//	НомерИгнорируемойВерсии - Число - Номер версии, на которую необходимо проигнорировать
//	ПропуститьПроверкуЗапретаИзменения - Булево - Признак пропуска проверки даты запрета загрузки
//
Процедура ПриПереходеНаВерсиюОбъекта(ОбъектСсылка, НомерВерсииДляПерехода, НомерИгнорируемойВерсии, ПропуститьПроверкуЗапретаИзменения = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВерсионированиеОбъектов");
		Модуль.ПриПереходеНаВерсиюОбъекта(ОбъектСсылка, НомерВерсииДляПерехода, НомерИгнорируемойВерсии, ПропуститьПроверкуЗапретаИзменения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество коллизий или непринятых объектов
//
// Параметры:
//	ЭтоКоличествоКоллизий - Булево - Если Истина, то возвращает количество коллизий, иначе количество непринятых.
//	ПоказыватьПроигнорированные - Булево - Признак необходимости учета проигнорированных.
//	УзелИнформационнойБазы - ПланОбменаСсылка - Количество по конкретному узлу
//	Период - Стандартный период - Количество за дату
//	СтрокаПоиска - Строка - Количество объектов, содержащих в комментарии СтрокаПоиска
//
Процедура ПриОбновленииЗаголовковСтраницРезультатовОбменаДанными(Количество, ЭтоКоличествоКоллизий, ПоказыватьПроигнорированные = Ложь,
	УзелИнформационнойБазы = Неопределено, Период = Неопределено, СтрокаПоиска = "") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВерсионированиеОбъектов");
		Количество = Модуль.КоличествоКоллизийИлиНепринятых(ЭтоКоличествоКоллизий,
			ПоказыватьПроигнорированные, УзелИнформационнойБазы, Период, СтрокаПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дату последней коллизии или дату последнего запрета загрузки
// Параметры:
//	ПолучитьДатуПоследнейКоллизии - Булево - Если Истина, то возвращает дату последней коллизии,
//	если Ложь, то возвращает дату последнего запрета загрузки
//
Процедура ПриОбновленииЗаголовковКомандМонитораОбменаДанными(ДатаСобытия, ПолучитьДатуПоследнейКоллизии) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВерсионированиеОбъектов");
		ДатаСобытия = Модуль.ДатаПоследнейКоллизииИлиЗапретаЗагрузки(ПолучитьДатуПоследнейКоллизии);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик установки константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ – Булево. Флаг отказа включения синхронизации данных.
// Если установить в значение Истина, то синхронизация включена не будет.
//
Процедура ПриВключенииСинхронизацииДанных(Отказ) Экспорт
	
КонецПроцедуры

// Обработчик снятия константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ – Булево. Флаг отказа отключения синхронизации данных.
// Если установить в значение Истина, то синхронизация отключена не будет.
//
Процедура ПриОтключенииСинхронизацииДанных(Отказ) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		Модуль.ПриОтключенииСинхронизацииДанных(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик вызывается перед записью данных в ИБ при загрузке из сообщения обмена
// Используется только для обменов не РИБ.
//
//  Параметры:
// Данные            – СправочникОбъект, ДокументОбъект, РегистСведенийНаборЗаписей и др. данные.
//                     Данные, которые были зачитаны из сообщения обмена, но еще не были записаны в ИБ.
// УзелПланаОбмена   - ПланыОбменаСсылка.
// Отказ             - Булево (возвращаемое значение).
// СообщениеОбОшибке - Строка (возвращаемое значение).
//
Процедура ПередЗаписьюДанныхИзСообщенияОбмена(Данные, УзелПланаОбмена, Отказ, СообщениеОбОшибке) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДатыЗапретаИзменения");
		Если Модуль.ЗагрузкаЗапрещена(Данные, УзелПланаОбмена, СообщениеОбОшибке) = Истина Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик механизма регистрации объектов "После определения получателей".
// Событие возникает в транзакции записи данных в ИБ, когда определены 
// получатели изменений данных по правилам регистрации объектов.
//
// Параметры:
// Данные. Записываемый объект, представляющий данные - документ, элемент справочника,
// счет бухгалтерского учета, менеджер записи константы, набор записей регистра и т. п.
//
// Получатели. Тип: Массив. Массив узлов планов обмена на которых будут зарегистрированы изменения текущих данных.
//
// ИмяПланаОбмена. Тип: Строка. Имя плана обмена, как объекта метаданных,
// для которого выполняются правила регистрации объектов.
//
Процедура ПослеОпределенияПолучателей(Данные, Получатели, Знач ИмяПланаОбмена) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		Модуль.ПослеОпределенияПолучателей(Данные, Получатели, ИмяПланаОбмена);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выполнение обмена данными

// Точка входа для выполнения итерации обмена данными – загрузки и выгрузки данных для узла плана обмена
//
// Параметры:
//  Отказ                  - Булево - флаг отказа; поднимается в случае возникновения ошибки при выполнении обмена
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого выполняется итерация обмена данными
//  ВыполнятьЗагрузку      – Булево (необязательный) – флаг необходимости выполнять загрузку данных. Значение по умолчанию - Истина
//  ВыполнятьВыгрузку      – Булево (необязательный) – флаг необходимости выполнять выгрузку данных. Значение по умолчанию – Истина
//  ВидТранспортаСообщенийОбмена (необязательный) - ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена – вид транспорта, 
//								который будет использоваться в процессе обмена данными. 
//								Значение по умолчанию – значение из РС.НастройкиТранспортаОбмена.Ресурс.ВидТранспортаСообщенийОбменаПоУмолчанию;
//								если в РС значение не задано, то значение по умолчанию - Перечисления.ВидыТранспортаСообщенийОбмена.FILE
// 
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ,
														УзелИнформационнойБазы,
														ВыполнятьЗагрузку = Истина,
														ВыполнятьВыгрузку = Истина,
														ВидТранспортаСообщенийОбмена = Неопределено,
														ДлительнаяОперация = Ложь,
														ИдентификаторОперации = "",
														ИдентификаторФайла = "",
														ДлительнаяОперацияРазрешена = Ложь,
														Знач Пароль = "",
														Знач ТолькоПараметры = Ложь
	) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	Если ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM Тогда // Обмен через внешнее соединение
		
		Если ВыполнятьЗагрузку Тогда
			
			// ЗАГРУЗКА ДАННЫХ ЧЕРЕЗ ВНЕШНЕЕ СОЕДИНЕНИЕ
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, 
																	УзелИнформационнойБазы, 
																	Перечисления.ДействияПриОбмене.ЗагрузкаДанных, 
																	Неопределено
			);
			
		КонецЕсли;
		
		Если ВыполнятьВыгрузку Тогда
			
			// ВЫГРУЗКА ДАННЫХ ЧЕРЕЗ ВНЕШНЕЕ СОЕДИНЕНИЕ
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, 
																	УзелИнформационнойБазы, 
																	Перечисления.ДействияПриОбмене.ВыгрузкаДанных, 
																	Неопределено
			);
			
		КонецЕсли;
		
	ИначеЕсли ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда // Обмен через Web-сервис
		
		Если ВыполнятьЗагрузку Тогда
			
			// ЗАГРУЗКА ДАННЫХ ЧЕРЕЗ WEB-СЕРВИС
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(Отказ, 
																	УзелИнформационнойБазы, 
																	Перечисления.ДействияПриОбмене.ЗагрузкаДанных, 
																	ДлительнаяОперация, 
																	ИдентификаторОперации, 
																	ИдентификаторФайла,
																	ДлительнаяОперацияРазрешена,
																	Пароль,
																	ТолькоПараметры
			);
			
		КонецЕсли;
		
		Если ВыполнятьВыгрузку Тогда
			
			// ВЫГРУЗКА ДАННЫХ ЧЕРЕЗ WEB-СЕРВИС
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(Отказ, 
																	УзелИнформационнойБазы, 
																	Перечисления.ДействияПриОбмене.ВыгрузкаДанных, 
																	ДлительнаяОперация, 
																	ИдентификаторОперации, 
																	ИдентификаторФайла, 
																	ДлительнаяОперацияРазрешена,
																	Пароль,
																	ТолькоПараметры
			);
			
		КонецЕсли;
		
	Иначе // Обмен через обычные каналы связи
		
		Если ВыполнятьЗагрузку Тогда
			
			// ЗАГРУЗКА ДАННЫХ
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ,
															УзелИнформационнойБазы,
															Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
															ВидТранспортаСообщенийОбмена,
															ТолькоПараметры
			);
			
		КонецЕсли;
		
		Если ВыполнятьВыгрузку Тогда
			
			// ВЫГРУЗКА ДАННЫХ
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ,
															УзелИнформационнойБазы,
															Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
															ВидТранспортаСообщенийОбмена,
															ТолькоПараметры
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет процесс обмена данными отдельно для каждой строки настройки обмена
// Процесс обмена данными состоит из двух стадий:
// - инициализация обмена - подготовка подсистемы обмена данными к процессу обмена
// - обмен данными        - процесс зачитывания файла сообщения с последующей загрузкой этих данных в ИБ 
//                          или выгрузки изменений в файл сообщения
// Стадия инициализации выполняется один раз за сеанс и сохраняется в кэше сеанса на сервере 
// до перезапуска сеанса или сброса повторно-используемых значений подсистемы обмена данными.
// Сброс повторно-используемых значений происходит при изменении данных, влияющих на процесс обмена данными
// (настройки транспорта, настройка выполнения обмена, настройка отборов на узлах планов обмена)
//
// Обмен может быть выполнен полностью для всех строк сценария,
// а может быть выполнен для отдельной строки ТЧ сценария обмена
//
// Параметры:
//  Отказ                     - Булево - флаг отказа; поднимается в случае возникновения ошибки при выполнении сценария
//  НастройкаВыполненияОбмена - СправочникСсылка.СценарииОбменовДанными - элемент справочника,
//                              по значениям реквизитов которого будет выполнен обмен данными
//  НомерСтроки               - Число - Номер строки по которой будет выполнен обмен данными.
//                              Если не указан, то обмен данными будет выполнен для всех строк
// 
Процедура ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Отказ, НастройкаВыполненияОбмена, НомерСтроки = Неопределено) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка                         КАК НастройкаВыполненияОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки                    КАК НомерСтроки,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие            КАК ВыполняемоеДействие,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена            КАК ВидТранспортаОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы         КАК УзелИнформационнойБазы,
	|	НастройкиВыполненияОбменаНастройкиОбмена.КоличествоЭлементовВТранзакции КАК КоличествоЭлементовВТранзакции,
	|
	|	ВЫБОР КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.COM)
	|	ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменЧерезВнешнееСоединение,
	|
	|	ВЫБОР КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.WS)
	|	ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменЧерезВебСервис
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиВыполненияОбменаНастройкиОбмена
	|ГДЕ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка = &НастройкаВыполненияОбмена
	|	[УсловиеПоНомеруСтроки]
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки
	|";
	
	УсловиеПоНомеруСтроки = ?(НомерСтроки = Неопределено, "", "И НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки = &НомерСтроки");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеПоНомеруСтроки]", УсловиеПоНомеруСтроки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НастройкаВыполненияОбмена", НастройкаВыполненияОбмена);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбменЧерезВнешнееСоединение Тогда
			
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, Выборка.УзелИнформационнойБазы, Выборка.ВыполняемоеДействие, Выборка.КоличествоЭлементовВТранзакции);
			
		ИначеЕсли Выборка.ОбменЧерезВебСервис Тогда
			
			ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(Отказ, Выборка.УзелИнформационнойБазы, Выборка.ВыполняемоеДействие);
			
		Иначе
			
			// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
			СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбмена(Выборка.НастройкаВыполненияОбмена, Выборка.НомерСтроки);
			
			// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
			Если СтруктураНастроекОбмена.Отказ Тогда
				
				Отказ = Истина;
				
				// фиксируем в ЖР лог по обмену данными
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
				Продолжить;
			КонецЕсли;
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
			СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
			
			// добавляем в ЖР информацию о процессе обмена данными
			СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными по настройке %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование);
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
			
			// ОБМЕН ДАННЫМИ
			ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена);
			
			// фиксируем в ЖР лог по обмену данными
			ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
			
			Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Точка входа для выполнения обмена данными по сценарию обмена регламентным заданием
//
// Параметры:
//  КодСценарияОбмена – Строка – код элемента справочника "Сценарии обменов данными", для которого будет выполнен обмен данными
// 
Процедура ВыполнитьОбменДаннымиПоРегламентномуЗаданию(КодСценарияОбмена) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	Если Не ЗначениеЗаполнено(КодСценарияОбмена) Тогда
		ВызватьИсключение НСтр("ru = 'Не задан сценарий обмена данными.'");
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СценарииОбменовДанными.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|		 СценарииОбменовДанными.Код = &Код
	|	И Не СценарииОбменовДанными.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодСценарияОбмена);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// выполняем обмен по сценарию
		ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Ложь, Выборка.Ссылка);
	Иначе
		СтрокаСообщения = НСтр("ru = 'Сценарий обмена данными с кодом %1 не найден.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, КодСценарияОбмена);
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
КонецПроцедуры

//

// Получает сообщение обмена во временный каталог пользователя ОС
//
// Параметры:
//  Отказ                        - Булево - флаг отказа; поднимается в случае возникновения ошибки
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена – вид транспорта для получения сообщения обмена
//  ВыводитьСообщения            - Булево - если Истина, то выводятся сообщения пользователю
//
//  Возвращаемое значение:
// Тип: Структура. Содержит ключи:
//   ИмяВременногоКаталогаСообщенийОбмена – полное имя каталога обмена, в которое было загружено сообщение обмена
//   ИмяФайлаСообщенияОбмена              – полное имя файла сообщения обмена
//   ИдентификаторФайлаПакетаДанных       – дата изменения файла сообщения обмена
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталог(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена, ВыводитьСообщения = Истина) Экспорт
	
	// возвращаемое значение функции
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена);
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	// если настройка содержит ошибки, то получение сообщения обмена не производим; статус "Отменено"
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		Если ВыводитьСообщения Тогда
			НСтрока = НСтр("ru = 'При инициализации обработки транспорта сообщений обмена возникли ошибки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		КонецЕсли;
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	// создаем временный каталог
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		
		// получаем сообщение во временный каталог
		ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена <> Неопределено Тогда
		
		Если ВыводитьСообщения Тогда
			НСтрока = НСтр("ru = 'При получении сообщений обмена возникли ошибки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		КонецЕсли;
		
		// удаляем временный каталог и все его содержимое
		ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяКаталогаСообщенияОбмена();
	Результат.ИмяФайлаСообщенияОбмена              = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
	Результат.ИдентификаторФайлаПакетаДанных       = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДатаФайлаСообщенияОбмена();
	
	Возврат Результат;
КонецФункции

// Получает сообщение обмена из информационной базы корреспондента во временный каталог пользователя ОС
//
// Параметры:
//  Отказ                        - Булево - флаг отказа; поднимается в случае возникновения ошибки
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  ВыводитьСообщения            - Булево - если Истина, то выводятся сообщения пользователю
//
//  Возвращаемое значение:
// Тип: Структура. Содержит ключи:
//   ИмяВременногоКаталогаСообщенийОбмена – полное имя каталога обмена, в которое было загружено сообщение обмена
//   ИмяФайлаСообщенияОбмена              – полное имя файла сообщения обмена
//   ИдентификаторФайлаПакетаДанных       – дата изменения файла сообщения обмена
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондента(Отказ, УзелИнформационнойБазы, ВыводитьСообщения = Истина) Экспорт
	
	// возвращаемое значение функции
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена);
	КодТекущегоУзлаПланаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийУзелПланаОбмена, "Код");
	
	ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, Ложь);
	
	// Параметры, которые будут определены в функции
	ДатаФайлаСообщенияОбмена = Дата('00010101');
	ИмяКаталогаСообщенияОбмена = "";
	СтрокаСообщенияОбОшибке = "";
	
	Если Не СоздатьВременныйКаталогСообщенийОбмена(ИмяКаталогаСообщенияОбмена, СтрокаСообщенияОбОшибке) Тогда
		
		Если ВыводитьСообщения Тогда
			Сообщение = НСтр("ru = 'Не удалось произвести обмен: %1'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, СтрокаСообщенияОбОшибке);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// получаем внешнее соединение для узла информационной базы
	ДанныеСоединения = ОбменДаннымиПовтИсп.ВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
	ВнешнееСоединение = ДанныеСоединения.Соединение;
	
	Если ВнешнееСоединение = Неопределено Тогда
		
		Сообщение = НСтр("ru = 'Не удалось произвести обмен: %1'");
		Если ВыводитьСообщения Тогда
			СообщениеДляПользователя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ДанныеСоединения.КраткоеОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеДляПользователя,,,, Отказ);
		КонецЕсли;
		
		// добавляем две записи в ЖР: одну для загрузки данных, другую для выгрузки данных
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ДанныеСоединения.ПодробноеОписаниеОшибки);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецЕсли;
	
	ИмяФайлаСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ШаблонИмениФайлаСообщения + ".xml");
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ВыполнитьВыгрузкуДляУзлаИнформационнойБазы(Отказ, ИмяПланаОбмена, КодТекущегоУзлаПланаОбмена, ИмяФайлаСообщенияОбмена, СтрокаСообщенияОбОшибке);
	
	Если Отказ Тогда
		
		Если ВыводитьСообщения Тогда
			// Выводим сообщение об ошибке
			Сообщение = НСтр("ru = 'Не удалось выгрузить данные: %1'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ДанныеСоединения.КраткоеОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	ФайлСообщенияОбмена = Новый Файл(ИмяФайлаСообщенияОбмена);
	Если ФайлСообщенияОбмена.Существует() Тогда
		ДатаФайлаСообщенияОбмена = ФайлСообщенияОбмена.ПолучитьВремяИзменения();
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = ИмяКаталогаСообщенияОбмена;
	Результат.ИмяФайлаСообщенияОбмена              = ИмяФайлаСообщенияОбмена;
	Результат.ИдентификаторФайлаПакетаДанных       = ДатаФайлаСообщенияОбмена;
	
	Возврат Результат;
КонецФункции

// Получает сообщение обмена из информационной базы корреспондента через веб-сервис во временный каталог пользователя ОС
//
// Параметры:
//  Отказ                        - Булево - флаг отказа; поднимается в случае возникновения ошибки
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  ИдентификаторФайла           - УникальныйИдентификатор - Идентификатор файла
//  ДлительнаяОперация           - Булево - Признак использования длительное операции
//  ИдентификаторОперации        - УникальныйИдентификатор - Уникальный идентификатор длительной операции
//  Пароль                       - Строка - Пароль для WS соединения
//
//  Возвращаемое значение:
// Тип: Структура. Содержит ключи:
//   ИмяВременногоКаталогаСообщенийОбмена – полное имя каталога обмена, в которое было загружено сообщение обмена
//   ИмяФайлаСообщенияОбмена              – полное имя файла сообщения обмена
//   ИдентификаторФайлаПакетаДанных       – дата изменения файла сообщения обмена
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервис(
											Отказ,
											УзелИнформационнойБазы,
											ИдентификаторФайла,
											ДлительнаяОперация,
											ИдентификаторОперации,
											Пароль = ""
	) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// возвращаемое значение функции
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена);
	КодТекущегоУзлаПланаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийУзелПланаОбмена, "Код");
	
	// Параметры, которые будут определены в функции
	ИмяКаталогаСообщенияОбмена = "";
	ИмяФайлаСообщенияОбмена = "";
	ДатаФайлаСообщенияОбмена = Дата('00010101');
	СтрокаСообщенияОбОшибке = "";
	
	// получаем прокси веб-сервиса для узла информационной базы
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке, Пароль);
	
	Если Прокси = Неопределено Тогда
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Ошибка при установке подключения ко второй информационной базе: %1'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, СтрокаСообщенияОбОшибке);
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		
		Прокси.UploadData(
			ИмяПланаОбмена,
			КодТекущегоУзлаПланаОбмена,
			ИдентификаторФайла,
			ДлительнаяОперация,
			ИдентификаторОперации,
			Истина
		);
		
	Исключение
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'При выгрузке данных возникли ошибки во второй информационной базе: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	Если ДлительнаяОперация Тогда
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(НСтр("ru = 'Ожидание получения данных от базы-корреспондента...'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ИмяФайлаИзСервисаПередачиФайлов = ПолучитьФайлИзХранилищаВСервисе(Новый УникальныйИдентификатор(ИдентификаторФайла), УзелИнформационнойБазы,, Пароль);
	Исключение
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Возникли ошибки при получении сообщения обмена из сервиса передачи файлов: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	Если Не СоздатьВременныйКаталогСообщенийОбмена(ИмяКаталогаСообщенияОбмена, СтрокаСообщенияОбОшибке) Тогда
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'При получении сообщения обмена возникли ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, СтрокаСообщенияОбОшибке);
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецЕсли;
	
	ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, Ложь);
	
	ИмяФайлаСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ШаблонИмениФайлаСообщения + ".xml");
	
	ПереместитьФайл(ИмяФайлаИзСервисаПередачиФайлов, ИмяФайлаСообщенияОбмена);
	
	ФайлСообщенияОбмена = Новый Файл(ИмяФайлаСообщенияОбмена);
	Если ФайлСообщенияОбмена.Существует() Тогда
		ДатаФайлаСообщенияОбмена = ФайлСообщенияОбмена.ПолучитьВремяИзменения();
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = ИмяКаталогаСообщенияОбмена;
	Результат.ИмяФайлаСообщенияОбмена              = ИмяФайлаСообщенияОбмена;
	Результат.ИдентификаторФайлаПакетаДанных       = ДатаФайлаСообщенияОбмена;
	
	Возврат Результат;
КонецФункции

// Получает сообщение обмена из базы-корреспондента через веб-сервис.
// Сохраняет полученное сообщение обмена во временный каталог.
// Используется в том случае, если получение сообщения обмена выполнялось в контексте фонового задания в базе-корреспонденте.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа; поднимается в случае возникновения ошибки
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  ИдентификаторФайла           - УникальныйИдентификатор - Идентификатор файла
//  Пароль                       - Строка - Пароль для WS соединения
//
//  Возвращаемое значение:
// Тип: Структура. Содержит ключи:
//   ИмяВременногоКаталогаСообщенийОбмена – полное имя каталога обмена, в которое было загружено сообщение обмена
//   ИмяФайлаСообщенияОбмена              – полное имя файла сообщения обмена
//   ИдентификаторФайлаПакетаДанных       – дата изменения файла сообщения обмена
//
Функция ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервисЗавершениеДлительнойОперации(
							Отказ,
							УзелИнформационнойБазы,
							ИдентификаторФайла,
							Знач Пароль = ""
	) Экспорт
	
	// возвращаемое значение функции
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	// Параметры, которые будут определены в функции
	ИмяКаталогаСообщенияОбмена = "";
	ИмяФайлаСообщенияОбмена = "";
	ДатаФайлаСообщенияОбмена = Дата('00010101');
	СтрокаСообщенияОбОшибке = "";
	
	Попытка
		
		ИмяФайлаИзСервисаПередачиФайлов = ПолучитьФайлИзХранилищаВСервисе(Новый УникальныйИдентификатор(ИдентификаторФайла), УзелИнформационнойБазы,, Пароль);
	Исключение
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Возникли ошибки при получении сообщения обмена из сервиса передачи файлов: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецПопытки;
	
	Если Не СоздатьВременныйКаталогСообщенийОбмена(ИмяКаталогаСообщенияОбмена, СтрокаСообщенияОбОшибке) Тогда
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'При получении сообщения обмена возникли ошибки: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, СтрокаСообщенияОбОшибке);
		СтруктураНастроекОбмена = Новый Структура("КлючСообщенияЖурналаРегистрации");
		СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		ЗаписьЖурналаРегистрацииОбменаДанными(Сообщение, СтруктураНастроекОбмена, Истина);
		
		Возврат Результат;
	КонецЕсли;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена);
	
	ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, Ложь);
	
	ИмяФайлаСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена, ШаблонИмениФайлаСообщения + ".xml");
	
	ПереместитьФайл(ИмяФайлаИзСервисаПередачиФайлов, ИмяФайлаСообщенияОбмена);
	
	ФайлСообщенияОбмена = Новый Файл(ИмяФайлаСообщенияОбмена);
	Если ФайлСообщенияОбмена.Существует() Тогда
		ДатаФайлаСообщенияОбмена = ФайлСообщенияОбмена.ПолучитьВремяИзменения();
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = ИмяКаталогаСообщенияОбмена;
	Результат.ИмяФайлаСообщенияОбмена              = ИмяФайлаСообщенияОбмена;
	Результат.ИдентификаторФайлаПакетаДанных       = ДатаФайлаСообщенияОбмена;
	
	Возврат Результат;
КонецФункции

// Выполняет получение файла сообщения обмена из базы-корреспондента через веб-сервис.
// Выполняет загрузку полученного файла сообщения обмена в эту базу.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа; поднимается в случае возникновения ошибки
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  ИдентификаторФайла           - УникальныйИдентификатор - Идентификатор файла
//  ДатаНачалаОперации           - Дата - Дата начала загрузки
//  Пароль                       - Строка - Пароль для WS соединения
//
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЗавершениеДлительнойОперации(
															Отказ,
															Знач УзелИнформационнойБазы,
															Знач ИдентификаторФайла,
															Знач ДатаНачалаОперации,
															Знач Пароль = ""
	) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ФайлСообщенияОбмена = ПолучитьФайлИзХранилищаВСервисе(Новый УникальныйИдентификатор(ИдентификаторФайла), УзелИнформационнойБазы,, Пароль);
	Исключение
		ЗафиксироватьЗавершениеОбменаСОшибкой(УзелИнформационнойБазы,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
		ДатаНачалаОперации,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	// Загрузка файла сообщения обмена в эту базу
	Попытка
		ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(
			УзелИнформационнойБазы,
			ФайлСообщенияОбмена,
			Перечисления.ДействияПриОбмене.ЗагрузкаДанных,,,, ДатаНачалаОперации
		);
	Исключение
		ЗафиксироватьЗавершениеОбменаСОшибкой(УзелИнформационнойБазы,
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
		ДатаНачалаОперации,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Отказ = Истина;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ФайлСообщенияОбмена);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление файлов сообщений обмена, которые не были удалены из-за сбоев в работе системы.
// Удалению подлежат файлы с датой размещения более суток от текущей универсальной даты.
// Анализируется РС.СообщенияОбменаДанными и РС.СообщенияОбменаДаннымиОбластейДанных
//
// Параметры:
// Нет.
//
Процедура УдалитьНеактуальныеСообщенияОбмена() Экспорт
	
	ПроверитьВозможностьАдминистрированияОбменов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаляем неактуальные сообщения обмена, отмеченные в РС.СообщенияОбменаДанными
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДанными КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ДатаЗакладкиСообщения < &ДатаАктуальности";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяУниверсальнаяДата() - 60 * 60 * 24);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПолноеИмяФайлаСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), Выборка.ИмяФайла);
		
		ФайлСообщения = Новый Файл(ПолноеИмяФайлаСообщения);
		
		Если ФайлСообщения.Существует() Тогда
			
			Попытка
				УдалитьФайлы(ФайлСообщения.ПолноеИмя);
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		// Удаляем информацию о файле сообщения обмена из хранилища
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(Выборка.ИдентификаторСообщения));
		РегистрыСведений.СообщенияОбменаДанными.УдалитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;
	
	// Удаляем неактуальные сообщения обмена, отмеченные в РС.СообщенияОбменаДаннымиОбластейДанных
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		Модуль.ПриУдаленииНеактуальныхСообщенийОбмена();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы через внешнее соединение

// Для внутреннего использования
// 
Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыВоВременноеХранилище(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, Адрес) Экспорт
	
	ПолноеИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(
		Неопределено,
		ПолноеИмяФайлаСообщенияОбмена,
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
		ИмяПланаОбмена,
		КодУзлаИнформационнойБазы
	);
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаСообщенияОбмена));
	
	Попытка
		УдалитьФайлы(ПолноеИмяФайлаСообщенияОбмена);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыВСервисПередачиФайлов(Знач ИмяПланаОбмена,
	Знач КодУзлаИнформационнойБазы,
	Знач ИдентификаторФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		КаталогВременногоХранилищаФайлов(),
		УникальноеИмяФайлаСообщенияОбмена()
	);
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(
		Неопределено,
		ИмяФайлаСообщения,
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
		ИмяПланаОбмена,
		КодУзлаИнформационнойБазы
	);
	
	ПоместитьФайлВХранилище(ИмяФайлаСообщения, ИдентификаторФайла);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезФайл(Знач ИмяПланаОбмена,
	Знач КодУзлаИнформационнойБазы,
	Знач ПолноеИмяФайлаСообщенияОбмена) Экспорт
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(
		Неопределено,
		ПолноеИмяФайлаСообщенияОбмена,
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
		ИмяПланаОбмена,
		КодУзлаИнформационнойБазы
	);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезСтроку(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, СообщениеОбмена) Экспорт
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(Неопределено,
												"",
												Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
												ИмяПланаОбмена,
												КодУзлаИнформационнойБазы,
												СообщениеОбмена
	);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезСтроку(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, СообщениеОбмена) Экспорт
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(Неопределено,
												"",
												Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
												ИмяПланаОбмена,
												КодУзлаИнформационнойБазы,
												СообщениеОбмена
	);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьЗагрузкуДляУзлаИнформационнойБазыИзСервисаПередачиФайлов(Знач ИмяПланаОбмена,
	Знач КодУзлаИнформационнойБазы,
	Знач ИдентификаторФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВременногоФайла = ПолучитьФайлИзХранилища(ИдентификаторФайла);
	
	Попытка
		ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(
			Неопределено,
			ИмяВременногоФайла,
			Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
			ИмяПланаОбмена,
			КодУзлаИнформационнойБазы
		);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
		КонецПопытки;
		ВызватьИсключение ПредставлениеОшибки;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(УзелИнформационнойБазы = Неопределено,
																			ПолноеИмяФайлаСообщенияОбмена = "",
																			ДействиеПриОбмене,
																			ИмяПланаОбмена = "",
																			КодУзлаИнформационнойБазы = "",
																			СообщениеОбмена = "",
																			ДатаНачалаОперации = Неопределено
	) Экспорт
	
	ПроверитьВозможностьВыполненияОбменов();
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УзелИнформационнойБазы = Неопределено Тогда
		
		УзелИнформационнойБазы = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзлаИнформационнойБазы);
		
		Если УзелИнформационнойБазы.Пустая() Тогда
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел плана обмена %1 с кодом %2 не найден.'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ИмяПланаОбмена, КодУзлаИнформационнойБазы);
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
	КонецЕсли;
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ДействиеПриОбмене, Неопределено, Ложь);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при инициализации процесса обмена данными.'");
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ?(ДатаНачалаОперации = Неопределено, ТекущаяДатаСеанса(), ДатаНачалаОперации);
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ПолноеИмяФайлаСообщенияОбмена, СообщениеОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ПолноеИмяФайлаСообщенияОбмена, СообщениеОбмена);
		
	КонецЕсли;
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		ВызватьИсключение СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗафиксироватьЗавершениеОбменаЧерезВнешнееСоединение(СтруктураНастроекОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция СтруктураНастроекОбменаЧерезВнешнееСоединение(Структура) Экспорт
	
	ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелИнформационнойБазы = ПланыОбмена[Структура.ИмяПланаОбмена].НайтиПоКоду(Структура.ТекущийУзелПланаОбменаКод);
	
	ДействиеПриОбмене = Перечисления.ДействияПриОбмене[Структура.ДействиеПриОбменеСтрокой];
	
	СтруктураНастроекОбменаВнешнееСоединение = Новый Структура;
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяПланаОбмена",                   Структура.ИмяПланаОбмена);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РежимОтладки",                     Структура.РежимОтладки);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("УзелИнформационнойБазы",             УзелИнформационнойБазы);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("УзелИнформационнойБазыНаименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелИнформационнойБазы, "Наименование"));
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("КлючСообщенияЖурналаРегистрации",  ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене));
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РезультатВыполненияОбмена",        Неопределено);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РезультатВыполненияОбменаСтрокой", "");
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ДействиеПриОбмене", ДействиеПриОбмене);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ОтладкаОбработчиковВыгрузки ", Ложь);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ОтладкаОбработчиковЗагрузки", Ложь);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки", "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяФайлаВнешнейОбработкиОтладкиЗагрузки", "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("РежимПротоколированияОбменаДанными", Ложь);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ИмяФайлаПротоколаОбмена", "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ПродолжитьПриОшибке", Ложь);
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбменаВнешнееСоединение, Истина);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("КоличествоОбъектовОбработано", 0);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ДатаНачала",    Неопределено);
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ДатаОкончания", Неопределено);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("СообщениеПриОбмене",      "");
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("СтрокаСообщенияОбОшибке", "");
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("КоличествоЭлементовВТранзакции", Структура.КоличествоЭлементовВТранзакции);
	
	СтруктураНастроекОбменаВнешнееСоединение.Вставить("ЭтоОбменВРИБ", Ложь);
	
	Возврат СтруктураНастроекОбменаВнешнееСоединение;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьПравилаКонвертацииОбъектовЧерезВнешнееСоединение(ИмяПланаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.ПравилаДляОбменаДанными.ПолучитьЗачитанныеПравилаКонвертацииОбъектов(ИмяПланаОбмена);
	
КонецФункции

// Для внутреннего использования
// 
Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(
		Отказ,
		УзелИнформационнойБазы,
		ДействиеПриОбмене,
		ВидТранспортаСообщенийОбмена = Неопределено,
		Знач ТолькоПараметры = Ложь
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы, ДействиеПриОбмене, ВидТранспортаСообщенийОбмена
	);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// ОБМЕН ДАННЫМИ
	ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, ТолькоПараметры);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыЧерезWebСервис(Отказ,
																		УзелИнформационнойБазы,
																		ДействиеПриОбмене,
																		ДлительнаяОперация = Ложь,
																		ИдентификаторОперации = "",
																		ИдентификаторФайла = "",
																		ДлительнаяОперацияРазрешена = Ложь,
																		Пароль = "",
																		Знач ТолькоПараметры = Ложь
	)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ДействиеПриОбмене, Перечисления.ВидыТранспортаСообщенийОбмена.WS, Ложь);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		Если СтруктураНастроекОбмена.ИспользоватьПередачуБольшогоОбъемаДанных Тогда
			
			// {Обработчик: ПередЧтениемСообщенияОбмена} Начало
			ФайлСообщенияОбмена = "";
			СтандартнаяОбработка = Истина;
			
			ПередЧтениемСообщенияОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы, ФайлСообщенияОбмена, СтандартнаяОбработка);
			// {Обработчик: ПередЧтениемСообщенияОбмена} Окончание
			
			Если СтандартнаяОбработка Тогда
				
				СтрокаСообщенияОбОшибке = "";
				
				// получаем прокси веб-сервиса для узла информационной базы
				Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке, Пароль);
				
				Если Прокси = Неопределено Тогда
					
					// добавляем запись в ЖР
					ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
					
					// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
					СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
					ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				ФайлСообщенияОбмена = "";
				
				Попытка
					
					Прокси.UploadData(СтруктураНастроекОбмена.ИмяПланаОбмена,
									СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод,
									ИдентификаторФайла,
									ДлительнаяОперация,
									ИдентификаторОперации,
									ДлительнаяОперацияРазрешена
					);
					
					Если ДлительнаяОперация Тогда
						ЗаписьЖурналаРегистрацииОбменаДанными(НСтр("ru = 'Ожидание получения данных от базы-корреспондента...'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СтруктураНастроекОбмена);
						Возврат;
					КонецЕсли;
					
					ФайлСообщенияОбмена = ПолучитьФайлИзХранилищаВСервисе(Новый УникальныйИдентификатор(ИдентификаторФайла), УзелИнформационнойБазы,, Пароль);
				Исключение
					ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
					СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
			Если Не Отказ Тогда
				
				ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ФайлСообщенияОбмена,, ТолькоПараметры);
				
			КонецЕсли;
			
			// {Обработчик: ПослеЧтенияСообщенияОбмена} Начало
			СтандартнаяОбработка = Истина;
			
			ПослеЧтенияСообщенияОбмена(
						СтруктураНастроекОбмена.УзелИнформационнойБазы,
						ФайлСообщенияОбмена,
						РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена),
						СтандартнаяОбработка,
						Не ТолькоПараметры
			);
			// {Обработчик: ПослеЧтенияСообщенияОбмена} Окончание
			
			Если СтандартнаяОбработка Тогда
				
				Попытка
					Если Не ПустаяСтрока(ФайлСообщенияОбмена) Тогда
						УдалитьФайлы(ФайлСообщенияОбмена);
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					);
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаСообщенияОбОшибке = "";
			
			// получаем прокси веб-сервиса для узла информационной базы
			Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке, Пароль);
			
			Если Прокси = Неопределено Тогда
				
				// добавляем запись в ЖР
				ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
				
				// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
				ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ХранилищеСообщенияОбмена = Неопределено;
			
			Попытка
				Прокси.Upload(СтруктураНастроекОбмена.ИмяПланаОбмена, СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, ХранилищеСообщенияОбмена);
				
				ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена,, ХранилищеСообщенияОбмена.Получить());
				
			Исключение
				ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		// получаем прокси веб-сервиса для узла информационной базы
		Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке, Пароль);
		
		Если Прокси = Неопределено Тогда
			
			// добавляем запись в ЖР
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			
			// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
			ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтруктураНастроекОбмена.ИспользоватьПередачуБольшогоОбъемаДанных Тогда
			
			ФайлСообщенияОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), УникальноеИмяФайлаСообщенияОбмена());
			
			ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ФайлСообщенияОбмена);
			
			// отправка сообщения обмена только в случае успешной выгрузки данных
			Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
				
				Попытка
					
					ИдентификаторФайлаСтрокой = Строка(ПоместитьФайлВХранилищеВСервисе(ФайлСообщенияОбмена, УзелИнформационнойБазы,, Пароль));
					
					Попытка
						УдалитьФайлы(ФайлСообщенияОбмена);
					Исключение
					КонецПопытки;
					
					Прокси.DownloadData(СтруктураНастроекОбмена.ИмяПланаОбмена,
									СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод,
									ИдентификаторФайлаСтрокой,
									ДлительнаяОперация,
									ИдентификаторОперации,
									ДлительнаяОперацияРазрешена
					);
					
					Если ДлительнаяОперация Тогда
						ЗаписьЖурналаРегистрацииОбменаДанными(НСтр("ru = 'Ожидание загрузки данных в базе-корреспонденте...'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СтруктураНастроекОбмена);
						Возврат;
					КонецЕсли;
					
				Исключение
					ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
					СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
			Попытка
				УдалитьФайлы(ФайлСообщенияОбмена);
			Исключение
			КонецПопытки;
			
		Иначе
			
			СообщениеОбмена = "";
			
			Попытка
				
				ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена,, СообщениеОбмена);
				
				// отправка сообщения обмена только в случае успешной выгрузки данных
				Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
					
					Прокси.Download(СтруктураНастроекОбмена.ИмяПланаОбмена, СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, Новый ХранилищеЗначения(СообщениеОбмена, Новый СжатиеДанных(9)));
					
				КонецЕсли;
				
			Исключение
				ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазыПоВнешнемуСоединению(Отказ, УзелИнформационнойБазы,
	ДействиеПриОбмене,
	КоличествоЭлементовВТранзакции)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ПолучитьСтруктуруНастроекОбменаДляВнешнегоСоединения(
		УзелИнформационнойБазы,
		ДействиеПриОбмене,
		КоличествоЭлементовВТранзакции
	);
	
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	ЗаписьЖурналаРегистрацииНачалаОбменаДанными(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = "";
	
	// получаем внешнее соединение для узла информационной базы
	ВнешнееСоединение = ОбменДаннымиПовтИсп.ПолучитьВнешнееСоединениеДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы,
		СтрокаСообщенияОбОшибке
	);
	
	Если ВнешнееСоединение = Неопределено Тогда
		
		// добавляем запись в ЖР
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ (ВНЕШНЕЕ СОЕДИНЕНИЕ)
	Структура = Новый Структура("ИмяПланаОбмена, ТекущийУзелПланаОбменаКод, КоличествоЭлементовВТранзакции");
	ЗаполнитьЗначенияСвойств(Структура, СтруктураНастроекОбмена);
	
	// Выполняем реверс значений перечисления
	ДействиеПриОбменеСтрокой = ?(ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ЗагрузкаДанных),
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	//
	
	Структура.Вставить("ДействиеПриОбменеСтрокой", ДействиеПриОбменеСтрокой);
	
	ОбменСБСП20 = Ложь;
	ВерсияБСППоВнешнемуСоединению = ВнешнееСоединение.СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ОбменСБСП20 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии("2.1.1.10", ВерсияБСППоВнешнемуСоединению) > 0;
	
	Структура.Вставить("РежимОтладки", Ложь);
	Структура.Вставить("ИмяФайлаПротоколаОбмена", "");
	
	Попытка
		СтруктураНастроекОбменаВнешнееСоединение = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.СтруктураНастроекОбмена(Структура);
	Исключение
		// добавляем запись в ЖР
		ЗаписьЖурналаРегистрацииОбменаДанными(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтруктураНастроекОбмена, Истина);
		
		// если настройка содержит ошибки, то обмен не производим; статус "Отменено"
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбменаВнешнееСоединение.ДатаНачала = ТекущаяДатаСеанса();
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ЗаписьЖурналаРегистрацииНачалаОбменаДанными(СтруктураНастроекОбменаВнешнееСоединение);
	
	// ОБМЕН ДАННЫМИ
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		// Получаем правила обмена из второй ИБ
		ПравилаКонвертацииОбъектов = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПравилаКонвертацииОбъектов(СтруктураНастроекОбменаВнешнееСоединение.ИмяПланаОбмена);
		
		Если ПравилаКонвертацииОбъектов = Неопределено Тогда
			
			// правила обмена должны быть указаны
			НСтрока = НСтр("ru = 'Не заданы правила конвертации во второй информационной базе для плана обмена %1. Обмен отменен.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтруктураНастроекОбменаВнешнееСоединение.ИмяПланаОбмена);
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
			Возврат;
		КонецЕсли;
		
		// обработка для загрузки данных
		ОбработкаДляЗагрузкиДанных = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		ОбработкаДляЗагрузкиДанных.ИмяФайлаОбмена = "";
		ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
		ОбработкаДляЗагрузкиДанных.ИспользоватьТранзакции = (ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию <> 1);
		ОбработкаДляЗагрузкиДанных.ЗагрузкаДанныхВыполняетсяЧерезВнешнееСоединение = Истина;
		
		// получаем инициализированную обработку для выгрузки данных
		ОбработкаОбменаДаннымиВнешнееСоединение = ВнешнееСоединение.Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
		ОбработкаОбменаДаннымиВнешнееСоединение.РежимОбмена = "Выгрузка";
		ОбработкаОбменаДаннымиВнешнееСоединение.СохраненныеНастройки = ПравилаКонвертацииОбъектов;
		ОбработкаОбменаДаннымиВнешнееСоединение.ВосстановитьПравилаИзВнутреннегоФормата();
		
		// задаем узлы обмена
		ОбработкаОбменаДаннымиВнешнееСоединение.УзелДляОбмена = СтруктураНастроекОбменаВнешнееСоединение.УзелИнформационнойБазы;
		ОбработкаОбменаДаннымиВнешнееСоединение.УзелДляФоновогоОбмена = Неопределено;
		ОбработкаОбменаДаннымиВнешнееСоединение.НеВыгружатьОбъектыПоСсылкам = Истина;
		ОбработкаОбменаДаннымиВнешнееСоединение.ИмяФайлаПравилОбмена = "1";
		
		ОбработкаОбменаДаннымиВнешнееСоединение.ВнешнееСоединение = Неопределено;
		ОбработкаОбменаДаннымиВнешнееСоединение.ЗагрузкаДанныхВыполняетсяВоВнешнемСоединении = Ложь;
		
		УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДаннымиВнешнееСоединение, СтруктураНастроекОбменаВнешнееСоединение, ОбменСБСП20);
		
		// ВЫГРУЗКА (КОРРЕСПОНДЕНТ) - ЗАГРУЗКА (ЭТА БАЗА)
		ОбработкаОбменаДаннымиВнешнееСоединение.ВыполнитьВыгрузкуДанных(ОбработкаДляЗагрузкиДанных);
		
		// фиксируем состояние выполнения обмена данными
		СтруктураНастроекОбмена.РезультатВыполненияОбмена    = ОбработкаДляЗагрузкиДанных.РезультатВыполненияОбмена();
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаДляЗагрузкиДанных.СчетчикЗагруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаДляЗагрузкиДанных.СтрокаСообщенияОбОшибке();
		
		// фиксируем состояние выполнения обмена данными (внешнее соединение)
		СтруктураНастроекОбменаВнешнееСоединение.РезультатВыполненияОбменаСтрокой = ОбработкаОбменаДаннымиВнешнееСоединение.РезультатВыполненияОбменаСтрокой();
		СтруктураНастроекОбменаВнешнееСоединение.КоличествоОбъектовОбработано     = ОбработкаОбменаДаннымиВнешнееСоединение.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбменаВнешнееСоединение.СообщениеПриОбмене               = ОбработкаОбменаДаннымиВнешнееСоединение.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбменаВнешнееСоединение.СтрокаСообщенияОбОшибке          = ОбработкаОбменаДаннымиВнешнееСоединение.СтрокаСообщенияОбОшибке();
		
		ОбработкаОбменаДаннымиВнешнееСоединение = Неопределено;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		// обработка для загрузки данных
		ОбработкаДляЗагрузкиДанных = ВнешнееСоединение.Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
		ОбработкаДляЗагрузкиДанных.РежимОбмена = "Загрузка";
		ОбработкаДляЗагрузкиДанных.УзелОбменаЗагрузкаДанных = СтруктураНастроекОбменаВнешнееСоединение.УзелИнформационнойБазы;
		ОбработкаДляЗагрузкиДанных.ЗагрузкаДанныхВыполняетсяЧерезВнешнееСоединение = Истина;
		
		УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаДляЗагрузкиДанных, СтруктураНастроекОбменаВнешнееСоединение, ОбменСБСП20);
		
		ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
		ОбработкаДляЗагрузкиДанных.ИспользоватьТранзакции = (ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию <> 1);
		
		// получаем инициализированную обработку для выгрузки данных
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = "";
		ОбработкаОбменаДаннымиXML.ВнешнееСоединение = ВнешнееСоединение;
		ОбработкаОбменаДаннымиXML.ЗагрузкаДанныхВыполняетсяВоВнешнемСоединении = Истина;
		
		// ВЫГРУЗКА (ЭТА БАЗА) - ЗАГРУЗКА (КОРРЕСПОНДЕНТ)
		ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузкуДанных(ОбработкаДляЗагрузкиДанных);
		
		// фиксируем состояние выполнения обмена данными
		СтруктураНастроекОбмена.РезультатВыполненияОбмена    = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		
		// фиксируем состояние выполнения обмена данными (внешнее соединение)
		СтруктураНастроекОбменаВнешнееСоединение.РезультатВыполненияОбменаСтрокой = ОбработкаДляЗагрузкиДанных.РезультатВыполненияОбменаСтрокой();
		СтруктураНастроекОбменаВнешнееСоединение.КоличествоОбъектовОбработано     = ОбработкаДляЗагрузкиДанных.СчетчикЗагруженныхОбъектов();
		СтруктураНастроекОбменаВнешнееСоединение.СообщениеПриОбмене               = ОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных;
		СтруктураНастроекОбменаВнешнееСоединение.СтрокаСообщенияОбОшибке          = ОбработкаДляЗагрузкиДанных.СтрокаСообщенияОбОшибке();
		
		ОбработкаДляЗагрузкиДанных = Неопределено;
		
	КонецЕсли;
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаВнешнееСоединение);
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, Знач ТолькоПараметры = Ложь)
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		// {Обработчик: ПередЧтениемСообщенияОбмена} Начало
		СообщениеОбмена = "";
		СтандартнаяОбработка = Истина;
		
		ПередЧтениемСообщенияОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы, СообщениеОбмена, СтандартнаяОбработка);
		// {Обработчик: ПередЧтениемСообщенияОбмена} Окончание
		
		Если СтандартнаяОбработка Тогда
			
			ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
			
			Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
				
				ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
				
				Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
					
					СообщениеОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// загрузка данных только при успешном получении сообщения обмена
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СообщениеОбмена,, ТолькоПараметры);
			
		КонецЕсли;
		
		// {Обработчик: ПослеЧтенияСообщенияОбмена} Начало
		СтандартнаяОбработка = Истина;
		
		ПослеЧтенияСообщенияОбмена(
					СтруктураНастроекОбмена.УзелИнформационнойБазы,
					СообщениеОбмена,
					РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена),
					СтандартнаяОбработка,
					Не ТолькоПараметры
		);
		// {Обработчик: ПослеЧтенияСообщенияОбмена} Окончание
		
		Если СтандартнаяОбработка Тогда
			
			ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
		
		// выгрузка данных
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена());
			
		КонецЕсли;
		
		// отправка сообщения обмена только в случае успешной выгрузки данных
		Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
			
			ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
		ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ПередЧтениемСообщенияОбмена(Знач Получатель, СообщениеОбмена, СтандартнаяОбработка)
	
	Если ЭтоПодчиненныйУзелРИБ()
		И ТипЗнч(ПланыОбмена.ГлавныйУзел()) = ТипЗнч(Получатель) Тогда
		
		СохраненноеСообщениеОбмена = Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Получить().Получить();
		
		Если ТипЗнч(СохраненноеСообщениеОбмена) = Тип("ДвоичныеДанные") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СообщениеОбмена = ПолучитьИмяВременногоФайла("xml");
			
			СохраненноеСообщениеОбмена.Записать(СообщениеОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ПослеЧтенияСообщенияОбмена(Знач Получатель, Знач СообщениеОбмена, Знач СообщениеПрочитано, СтандартнаяОбработка, Знач УдалитьСообщение = Истина)
	
	Если ЭтоПодчиненныйУзелРИБ()
		И ТипЗнч(ПланыОбмена.ГлавныйУзел()) = ТипЗнч(Получатель) Тогда
		
		Если КонфигурацияИзменена() Тогда
			
			Если ТипЗнч(Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Получить().Получить()) <> Тип("ДвоичныеДанные") Тогда
				
				Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Установить(
					Новый ХранилищеЗначения(Новый ДвоичныеДанные(СообщениеОбмена), Новый СжатиеДанных(9))
				);
				
			КонецЕсли;
			
			Если Не СообщениеПрочитано Тогда
				
				ОбновлениеИнформационнойБазы.УстановитьНеобходимостьОбновленияИнформационнойБазы();
				
			КонецЕсли;
			
		Иначе
			
			Если УдалитьСообщение Тогда
				
				Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Установить(Новый ХранилищеЗначения(Неопределено));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "")
	
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда // Обмен в РИБ
		
		Отказ = Ложь;
		
		// получаем обработку обмена данными
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// устанавливаем имя файла сообщения обмена, который необходимо прочитать
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена(ИмяФайлаСообщенияОбмена);
		
		ОбработкаОбменаДанными.ВыполнитьВыгрузкуДанных(Отказ);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
		
	Иначе
		
		// {Обработчик: ПриВыгрузкеДанных} Начало. Переопределение стандартной обработки выгрузки данных
		СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
		
		Попытка
			ОбработчикПриВыгрузкеДанныхБСП(СтандартнаяОбработка,
											СтруктураНастроекОбмена.УзелИнформационнойБазы,
											ИмяФайлаСообщенияОбмена,
											СообщениеОбмена,
											СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
											СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
											КоличествоОбъектовОбработано
			);
			
			Если СтандартнаяОбработка = Истина Тогда
				
				КоличествоОбъектовОбработано = 0;
				
				ОбработчикПриВыгрузкеДанных(СтандартнаяОбработка,
												СтруктураНастроекОбмена.УзелИнформационнойБазы,
												ИмяФайлаСообщенияОбмена,
												СообщениеОбмена,
												СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
												СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
												КоличествоОбъектовОбработано
				);
				
			КонецЕсли;
			
		Исключение
			
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные(), 
					СтруктураНастроекОбмена.УзелИнформационнойБазы, СтрокаСообщенияОбОшибке
			);
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке;
			Возврат;
		КонецПопытки;
		
		Если СтандартнаяОбработка = Ложь Тогда
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			Возврат;
		КонецЕсли;
		// {Обработчик: ПриВыгрузкеДанных} Окончание
		
		Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда // Универсальный обмен (обмен по правилам конвертации)
			
			// получаем инициализированную обработку обмена данными
			ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
			
			// выгрузка данных
			ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузкуДанных();
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
			// фиксируем состояние выполнения обмена данными
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
			СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
			
		Иначе // Стандартный обмен (платформенная сериализация)
			
			Отказ = Ложь;
			КоличествоОбъектовОбработано = 0;
			
			ВыполнитьСтандартнуюВыгрузкуИзмененийДляУзла(Отказ,
								СтруктураНастроекОбмена.УзелИнформационнойБазы,
								ИмяФайлаСообщенияОбмена,
								СообщениеОбмена,
								СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
								СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
								КоличествоОбъектовОбработано
			);
			
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			
			Если Отказ Тогда
				
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает сообщение обмена с новыми данными и загружает данные в информационную базу
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "", Знач ТолькоПараметры = Ложь)
	
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда // Обмен в РИБ
		
		Отказ = Ложь;
		
		// получаем обработку обмена данными
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// устанавливаем имя файла сообщения обмена, который необходимо прочитать
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена(ИмяФайлаСообщенияОбмена);
		
		ОбработкаОбменаДанными.ВыполнитьЗагрузкуДанных(Отказ, ТолькоПараметры);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
		
	Иначе
		
		// {Обработчик: ПриЗагрузкеДанных} Начало. Переопределение стандартной обработки загрузки данных
		СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
		
		Попытка
			ОбработчикПриЗагрузкеДанныхБСП(СтандартнаяОбработка,
											СтруктураНастроекОбмена.УзелИнформационнойБазы,
											ИмяФайлаСообщенияОбмена,
											СообщениеОбмена,
											СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
											СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
											КоличествоОбъектовОбработано
			);
			
			Если СтандартнаяОбработка = Истина Тогда
				
				КоличествоОбъектовОбработано = 0;
				
				ОбработчикПриЗагрузкеДанных(СтандартнаяОбработка,
												СтруктураНастроекОбмена.УзелИнформационнойБазы,
												ИмяФайлаСообщенияОбмена,
												СообщениеОбмена,
												СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
												СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
												КоличествоОбъектовОбработано
				);
				
			КонецЕсли;
			
		Исключение
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные(), 
					СтруктураНастроекОбмена.УзелИнформационнойБазы, СтрокаСообщенияОбОшибке
			);
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке;
			Возврат;
		КонецПопытки;
		
		Если СтандартнаяОбработка = Ложь Тогда
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			Возврат;
		КонецЕсли;
		// {Обработчик: ПриЗагрузкеДанных} Окончание
		
		Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда // Универсальный обмен (обмен по правилам конвертации)
			
			// получаем инициализированную обработку обмена данными
			ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
			
			// загрузка данных
			ОбработкаОбменаДаннымиXML.ВыполнитьЗагрузкуДанных();
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
			// фиксируем состояние выполнения обмена данными
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикЗагруженныхОбъектов();
			СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриЗагрузкеДанных;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
			
		Иначе // Стандартный обмен (платформенная сериализация)
			
			КоличествоОбъектовОбработано = 0;
			РезультатВыполненияОбмена = Неопределено;
			
			ВыполнитьСтандартнуюЗагрузкуИзмененийДляУзла(
								СтруктураНастроекОбмена.УзелИнформационнойБазы,
								ИмяФайлаСообщенияОбмена,
								СообщениеОбмена,
								СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
								СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
								КоличествоОбъектовОбработано,
								РезультатВыполненияОбмена);
			//
			
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = РезультатВыполненияОбмена;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выполнение обмена методами сериализации

// Процедура записи изменений для сообщения обмена.
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене.
//
Процедура ВыполнитьСтандартнуюВыгрузкуИзмененийДляУзла(Отказ,
							УзелИнформационнойБазы,
							ИмяФайла,
							СообщениеОбмена,
							КоличествоЭлементовВТранзакции = 0,
							КлючСообщенияЖурналаРегистрации = "",
							КоличествоОбъектовОбработано = 0
	)
	
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = СобытиеЖурналаРегистрацииОбменДанными();
	КонецЕсли;
	
	НачальнаяВыгрузкаДанных = УстановленПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
	
	ЗаписьВФайл = Не ПустаяСтрока(ИмяФайла);
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если ЗаписьВФайл Тогда
		
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
	Иначе
		
		ЗаписьXML.УстановитьСтроку();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелИнформационнойБазы);
	
	// считаем количество записанных объектов
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоОбъектовОбработано = 0;
	
	ИспользоватьТранзакции = КоличествоЭлементовВТранзакции <> 1;
	
	ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
	
	// Получаем выборку изменённых данных
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
	
	Если ИспользоватьТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		ПолучательОбъект = ЗаписьСообщения.Получатель.ПолучитьОбъект();
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			Данные = ВыборкаИзменений.Получить();
			
			КоличествоОбъектовОбработано = КоличествоОбъектовОбработано + 1;
			
			// выполняем проверку на то, что объект проходит фильтр ПРО
			// если объект фильтр ПРО не проходит, то в базу-приемник отсылаем удаление объекта
			// для наборов записей выполняем фильтрацию каждой записи
			// наборы выгружаем всегда, даже пустые (аналог удаления объекта)
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
			
			СтандартныеПодсистемыСервер.ПриОтправкеДанныхПодчиненному(Данные, ОтправкаЭлемента, НачальнаяВыгрузкаДанных, ПолучательОбъект);
			
			Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
				
				Если ОбщегоНазначения.ЭтоРегистр(Данные.Метаданные()) Тогда
					
					// Удаление регистра отсылаем в виде пустого набора записей
					
				Иначе
					
					Данные = Новый УдалениеОбъекта(Данные.Ссылка);
					
				КонецЕсли;
				
			ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Записываем данные в сообщение
			ЗаписатьXML(ЗаписьXML, Данные);
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если ИспользоватьТранзакции
				И КоличествоЭлементовВТранзакции > 0
				И КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакции Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИспользоватьТранзакции Тогда
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
		
		СообщениеОбмена = ЗаписьXML.Закрыть();
		
	Исключение
		
		Если ИспользоватьТранзакции Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ЗаписьСообщения.ПрерватьЗапись();
		
		ЗаписьXML.Закрыть();
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
			УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Процедура чтения изменений из сообщения обмена
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене
//
Процедура ВыполнитьСтандартнуюЗагрузкуИзмененийДляУзла(
							УзелИнформационнойБазы,
							ИмяФайла = "",
							СообщениеОбмена = "",
							КоличествоЭлементовВТранзакции = 0,
							КлючСообщенияЖурналаРегистрации = "",
							КоличествоОбъектовОбработано = 0,
							РезультатВыполненияОбмена = Неопределено)
	//
	
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = СобытиеЖурналаРегистрацииОбменДанными();
	КонецЕсли;
	
	МенеджерПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьМенеджерПланаОбмена(УзелИнформационнойБазы);
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		
		Если Не ПустаяСтрока(СообщениеОбмена) Тогда
			ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
		Иначе
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
		КонецЕсли;
		
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если ЭтоОшибкаНомерСообщенияМеньшеИлиРавенНомеруРанееПринятогоСообщения(КраткоеПредставлениеОшибки(ИнформацияОбОшибке)) Тогда
			
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
			
			ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			//
		Иначе
			
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
			ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
				УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			//
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	Если ЧтениеСообщения.Отправитель <> УзелИнформационнойБазы Тогда // Сообщение предназначено не для этого узла
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
			УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, НСтр("ru = 'Сообщение обмена содержит данные для другого узла информационной базы.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		//
		Возврат;
	КонецЕсли;
	
	// Удаляем регистрацию изменений для узла отправителя сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СнятьПризнакНачальнойВыгрузкиДанных(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// считаем сколько объектов прочитали
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоОбъектовОбработано = 0;
	
	Попытка
		РазрешитьУдалениеОбъектов = МенеджерПланаОбмена.РазрешитьУдалениеОбъектов();
	Исключение
		РазрешитьУдалениеОбъектов = Ложь;
	КонецПопытки;
	
	ИспользоватьТранзакции = КоличествоЭлементовВТранзакции <> 1;
	
	Если ИспользоватьТранзакции Тогда
		
		// начинаем транзакцию
		НачатьТранзакцию();
		
	КонецЕсли;
	
	Попытка
		
		// Читаем данные из сообщения
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			
			// Читаем очередное значение
			Данные = ПрочитатьXML(ЧтениеXML);
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
			ОтправкаНазад = Ложь;
			
			СтандартныеПодсистемыСервер.ПриПолученииДанныхОтПодчиненного(Данные, ПолучениеЭлемента, ОтправкаНазад);
			
			Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоУдалениеОбъекта = (ТипЗнч(Данные) = Тип("УдалениеОбъекта"));
			
			КоличествоОбъектовОбработано = КоличествоОбъектовОбработано + 1;
			
			// Проверяем на наличие коллизии изменений
			Если ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
				
				ОбъектМетаданных = ?(ЭтоУдалениеОбъекта, Данные.Ссылка.Метаданные(), Данные.Метаданные());
				
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
				
				ПрименятьИзменения = МенеджерПланаОбмена.ПрименитьОбъектПриКоллизииИзменений(ЧтениеСообщения.Отправитель, Данные);
				
				Если ПрименятьИзменения Тогда
					
					ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
						ОбъектМетаданных, Строка(Данные), НСтр("ru = 'Возникла коллизия изменений для объекта. Объект этой базы заменён версией объекта из сообщения обмена.'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
					//
				Иначе
					
					ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
						ОбъектМетаданных, Строка(Данные), НСтр("ru = 'Возникла коллизия изменений для объекта. Объект этой базы не был изменён.'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
					//
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ОтправкаНазад Тогда
				Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			КонецЕсли;
			
			Данные.ОбменДанными.Загрузка = Истина;
			
			// Переопределяем стандартное поведение системы при получении удаления объекта.
			// Вместо физического удаления объекта без контроля ссылочной целостности 
			// выполняем установку пометки на удаление.
			Если ЭтоУдалениеОбъекта Тогда
				
				УдалениеОбъекта = Данные;
				
				Данные = Данные.Ссылка.ПолучитьОбъект();
				
				Если Данные = Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Не ОтправкаНазад Тогда
					Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
				КонецЕсли;
				
				Данные.ОбменДанными.Загрузка = Истина;
				
				Данные.ПометкаУдаления = Истина;
				
				Если ОбщегоНазначения.ЭтоДокумент(Данные.Метаданные()) Тогда
					
					Данные.Проведен = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Выполняем проверку на коллизии дат запрета загрузки.
			Отказ = Ложь;
			СообщениеОбОшибке = "";
			ПередЗаписьюДанныхИзСообщенияОбмена(Данные, УзелИнформационнойБазы, Отказ, СообщениеОбОшибке);
			
			Если Отказ Тогда
				// Если загрузка запрещена регистрируется ошибка и загрузка продолжается.
				ЗаписьЖурналаРегистрации(
					КлючСообщенияЖурналаРегистрации,
					УровеньЖурналаРегистрации.Предупреждение,
					УзелИнформационнойБазы.Метаданные(),
					УзелИнформационнойБазы,
					СообщениеОбОшибке);
				Продолжить;
			КонецЕсли;
			
			Если ЭтоУдалениеОбъекта И РазрешитьУдалениеОбъектов Тогда
				
				Данные = УдалениеОбъекта;
				
			КонецЕсли;
			
			Если ТипЗнч(Данные) <> Тип("УдалениеОбъекта") Тогда
				
				Данные.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				
			КонецЕсли;
			
			// Выполняем попытку записи объекта
			Попытка
				Данные.Записать();
			Исключение
				
				РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
				
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					Данные.Метаданные(), Строка(Данные), ОписаниеОшибки);
				//
				Прервать;
			КонецПопытки;
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если ИспользоватьТранзакции
				И КоличествоЭлементовВТранзакции > 0
				И КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакции Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
			УзелИнформационнойБазы.Метаданные(), УзелИнформационнойБазы, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//
	КонецПопытки;
	
	Если РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка Тогда
		
		Если ИспользоватьТранзакции Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ЧтениеСообщения.ПрерватьЧтение();
		
	Иначе
		
		Если ИспользоватьТранзакции Тогда
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		ЧтениеСообщения.ЗакончитьЧтение();
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные функции-свойства

// Возвращает имя временного каталога для сообщений обмена данными
// Имя каталога соответствует шаблону:
// "Exchange82 {GUID}", 
// где GUID - строка уникального идентификатора
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка - имя временного каталога для сообщений обмена данными
//
Функция ИмяВременногоКаталогаСообщенийОбмена() Экспорт
	
	Возврат СтрЗаменить("Exchange82 {GUID}", "GUID", ВРег(Строка(Новый УникальныйИдентификатор)));
	
КонецФункции

// Возвращает имя обработки транспорта сообщений обмена
//
// Параметры:
//  ВидТранспорта – ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена – вид транспорта, для которого необходимо получить имя обработки
// 
//  Возвращаемое значение:
//  Тип: Строка. Имя обработки транспорта сообщений обмена
//
Функция ИмяОбработкиТранспортаСообщенийОбмена(ВидТранспорта) Экспорт
	
	Возврат СтрЗаменить("ТранспортСообщенийОбмена[ВидТранспорта]", "[ВидТранспорта]", ОбщегоНазначения.ИмяЗначенияПеречисления(ВидТранспорта));
	
КонецФункции

// Дубль процедуры на сервере ОбменДаннымиКлиент.МаксимальноеКоличествоПолейСопоставленияОбъектов()
//
Функция МаксимальноеКоличествоПолейСопоставленияОбъектов() Экспорт
	
	Возврат 5;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Транспорт сообщений обмена

// Для внутреннего использования
// 
Процедура ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// получаем новое имя временного файла
	Если Не ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПередОбработкойСообщения() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// отправляем сообщение обмена из временного каталога
	Если Не ОбработкаТранспортаСообщенийОбмена.ОтправитьСообщение() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// получаем сообщение обмена во временный каталог
	Если Не ОбработкаТранспортаСообщенийОбмена.ПолучитьСообщение() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// выполняем действия после отправки сообщения
	ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПослеОбработкиСообщения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервис передачи файлов

// Функция по переданному идентификатору скачивает файл из сервиса передачи файлов
//
// Параметры:
//  ИдентификаторФайла       - УникальныйИдентификатор - идентификатор получаемого файла.
//  ПараметрыДоступаКСервису - Структура: АдресСервиса, ИмяПользователя, ПарольПользователя. 
//  РазмерЧасти              - Число - размер части в килобайтах. Если значение равно 0,
//                             то разбивка на части не производится.
// Возвращаемое значение:
//  Строка - путь к полученному файлу.
//
Функция ПолучитьФайлИзХранилищаВСервисе(Знач ИдентификаторФайла, Знач УзелИнформационнойБазы, Знач РазмерЧасти = 1024, Знач Пароль = "") Экспорт
	
	// возвращаемое значение функции
	ИмяФайлаРезультата = "";
	
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы,, Пароль);
	
	ОбменВыполняетсяВОднойСети = ОбменДаннымиПовтИсп.ОбменВыполняетсяВОднойЛокальнойСети(УзелИнформационнойБазы, Пароль);
	
	Если ОбменВыполняетсяВОднойСети Тогда
		
		ИмяФайлаИзХранилища = Прокси.GetFileFromStorage(ИдентификаторФайла);
		
		ИмяФайлаРезультата = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), ИмяФайлаИзХранилища);
		
	Иначе
		
		ИдентификаторСессии = Неопределено;
		КоличествоЧастей = Неопределено;
		
		Прокси.PrepareGetFile(ИдентификаторФайла, РазмерЧасти, ИдентификаторСессии, КоличествоЧастей);
		
		ИменаФайлов = Новый Массив;
		
		КаталогСборки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(КаталогСборки);
		
		ШаблонИмениФайла = "data.zip.[n]";
		
		Для НомерЧасти = 1 По КоличествоЧастей Цикл
			
			ДанныеЧасти = Неопределено;
			Прокси.GetFilePart(ИдентификаторСессии, НомерЧасти, ДанныеЧасти);
			
			ИмяФайла = СтрЗаменить(ШаблонИмениФайла, "[n]", Формат(НомерЧасти, "ЧГ=0"));
			ИмяФайлаЧасти = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСборки, ИмяФайла);
			
			ДанныеЧасти.Записать(ИмяФайлаЧасти);
			ИменаФайлов.Добавить(ИмяФайлаЧасти);
		КонецЦикла;
		ДанныеЧасти = Неопределено;
		
		Прокси.ReleaseFile(ИдентификаторСессии);
		
		ИмяАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСборки, "data.zip");
		
		ОбъединитьФайлы(ИменаФайлов, ИмяАрхива);
		
		Разархиватор = Новый ЧтениеZipФайла(ИмяАрхива);
		Если Разархиватор.Элементы.Количество() = 0 Тогда
			Попытка
				УдалитьФайлы(КаталогСборки);
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ВызватьИсключение(НСтр("ru = 'Файл архива не содержит данных.'"));
		КонецЕсли;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСборки, Разархиватор.Элементы[0].Имя);
		
		Разархиватор.Извлечь(Разархиватор.Элементы[0], КаталогСборки);
		Разархиватор.Закрыть();
		
		Файл = Новый Файл(ИмяФайла);
		
		ИмяФайлаРезультата = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), Файл.Имя);
		ПереместитьФайл(ИмяФайла, ИмяФайлаРезультата);
		
		Попытка
			УдалитьФайлы(КаталогСборки);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
КонецФункции

// Функция передает указанный файл в сервис передачи файлов.
//
// Параметры:
//  ИмяФайла                 - Строка - путь к передаваемому файлу.
//  ПараметрыДоступаКСервису - Структура: АдресСервиса, ИмяПользователя, ПарольПользователя. 
//  РазмерЧасти              - Число - размер части в килобайтах. Если значение равно 0,
//                             то разбивка на части не производится.
// Возвращаемое значение:
//  УникальныйИдентификатор  - идентификатор файла в сервисе передачи файлов.
//
Функция ПоместитьФайлВХранилищеВСервисе(Знач ИмяФайла, Знач УзелИнформационнойБазы, Знач РазмерЧасти = 1024, Знач Пароль = "") Экспорт
	
	// возвращаемое значение функции
	ИдентификаторФайла = Неопределено;
	
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы,, Пароль);
	
	ОбменВыполняетсяВОднойСети = ОбменДаннымиПовтИсп.ОбменВыполняетсяВОднойЛокальнойСети(УзелИнформационнойБазы, Пароль);
	
	Если ОбменВыполняетсяВОднойСети Тогда
		
		ИмяФайлаВХранилище = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), УникальноеИмяФайлаСообщенияОбмена());
		
		ПереместитьФайл(ИмяФайла, ИмяФайлаВХранилище);
		
		Прокси.PutFileIntoStorage(ИмяФайлаВХранилище, ИдентификаторФайла);
		
	Иначе
		
		КаталогФайлов = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(КаталогФайлов);
		
		// Архивирование файла
		ИмяНеразделенногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогФайлов, "data.zip");
		Архиватор = Новый ЗаписьZipФайла(ИмяНеразделенногоФайла,,,, УровеньСжатияZIP.Максимальный);
		Архиватор.Добавить(ИмяФайла);
		Архиватор.Записать();
		
		// Разделение файла на части
		ИдентификаторСессии = Новый УникальныйИдентификатор;
		
		КоличествоЧастей = 1;
		Если ЗначениеЗаполнено(РазмерЧасти) Тогда
			ИменаФайлов = РазделитьФайл(ИмяНеразделенногоФайла, РазмерЧасти * 1024);
			КоличествоЧастей = ИменаФайлов.Количество();
			Для НомерЧасти = 1 По КоличествоЧастей Цикл
				ИмяФайлаЧасти = ИменаФайлов[НомерЧасти - 1];
				ДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаЧасти);
				Прокси.PutFilePart(ИдентификаторСессии, НомерЧасти, ДанныеФайла);
			КонецЦикла;
		Иначе
			ДанныеФайла = Новый ДвоичныеДанные(ИмяНеразделенногоФайла);
			Прокси.PutFilePart(ИдентификаторСессии, 1, ДанныеФайла);
		КонецЕсли;
		
		Попытка
			УдалитьФайлы(КаталогФайлов);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Прокси.SaveFileFromParts(ИдентификаторСессии, КоличествоЧастей, ИдентификаторФайла);
		
	КонецЕсли;
	
	Возврат ИдентификаторФайла;
КонецФункции

// Получение файла по его идентификатору
//
// Параметры:
//	ИдентификаторФайла - УникальныйИдентификатор - идентификатор получаемого файла.
//
// Возвращаемое значение:
//  ИмяФайла - Строка - имя файла.
//
Функция ПолучитьФайлИзХранилища(Знач ИдентификаторФайла) Экспорт
	
	ИмяФайла = "";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		Модуль.ПриПолученииФайлаИзХранилища(ИдентификаторФайла, ИмяФайла);
		
	Иначе
		
		ПриПолученииФайлаИзХранилища(ИдентификаторФайла, ИмяФайла);
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), ИмяФайла);
КонецФункции

// Сохранение файла.
//
// Параметры:
//  ИмяФайла               - Строка - наименование файла.
//  ИдентификаторФайла     - УникальныйИдентификатор - идентификатор файла. Если задан, то при сохранении файла
//                           будет использоваться это значение, иначе - сгенерируется новое.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - идентификатор файла.
//
Функция ПоместитьФайлВХранилище(Знач ИмяФайла, Знач ИдентификаторФайла = Неопределено) Экспорт
	
	ИдентификаторФайла = ?(ИдентификаторФайла = Неопределено, Новый УникальныйИдентификатор, ИдентификаторФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	СтруктураЗаписи.Вставить("ИмяФайлаСообщения", Файл.Имя);
	СтруктураЗаписи.Вставить("ДатаЗакладкиСообщения", ТекущаяУниверсальнаяДата());
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОбменДаннымиВМоделиСервиса");
		Модуль.ПриПомещенииФайлаВХранилище(СтруктураЗаписи);
	Иначе
		
		ПриПомещенииФайлаВХранилище(СтруктураЗаписи);
		
	КонецЕсли;
	
	Возврат ИдентификаторФайла;
КонецФункции

// Определяет возможность передачи файлов между двумя базами через локальную сеть
//
// Параметры:
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  Пароль                       - Строка - Пароль для WS соединения
//
Функция ОбменВыполняетсяВОднойЛокальнойСети(Знач УзелИнформационнойБазы, Знач Пароль = "") Экспорт
	
	Прокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы,, Пароль);
	
	ИмяВременногоФайла = СтрЗаменить("test{GUID}.tmp", "GUID", Строка(Новый УникальныйИдентификатор));
	
	ПолноеИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременногоХранилищаФайлов(), ИмяВременногоФайла);
	ЗаписьТекста = Новый ЗаписьТекста(ПолноеИмяВременногоФайла);
	ЗаписьТекста.Закрыть();
	
	Попытка
		Результат = Прокси.FileExists(ИмяВременногоФайла);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Попытка
			УдалитьФайлы(ПолноеИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ВызватьИсключение ПодробноеПредставлениеОшибки;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ПолноеИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Получение имени файла по его идентификатору из хранилища.
// Если файла с указанным идентификатором нет, то вызывается исключение.
// Если файл найден, то возвращается его имя, при этом удаляется информация об этом файле из хранилища.
//
// Параметры:
//	ИдентификаторФайла - УникальныйИдентификатор - идентификатор получаемого файла.
//	ИмяФайла           - Строка - имя файла, из хранилища.
//
Процедура ПриПолученииФайлаИзХранилища(Знач ИдентификаторФайла, ИмяФайла)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДанными КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Описание = НСтр("ru = 'Файл с идентификатором %1 не обнаружен.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Строка(ИдентификаторФайла));
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИмяФайла = Выборка.ИмяФайла;
	
	// Удаляем информацию о файле сообщения обмена из хранилища
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	РегистрыСведений.СообщенияОбменаДанными.УдалитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Помещение файла в хранилище
//
Процедура ПриПомещенииФайлаВХранилище(Знач СтруктураЗаписи)
	
	РегистрыСведений.СообщенияОбменаДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регистрация изменений для начальной выгрузки данных

// Выполняет регистрацию изменений для начальной выгрузки данных с учетом даты начала выгрузки и списка организаций.
// Процедура является универсальной и может быть использована для регистрации изменений данных по дате начала выгрузки
// и списку организаций для объектных типов данных и наборов записей регистров.
// Если список организаций не задан (Организации = Неопределено), то изменения регистрируются только по дате начала выгрузки.
// Регистрации подлежат данные для всех объектов метаданных, включенных в состав плана обмена.
// Если для объекта метаданных в составе плана обмена установлен признак авторегистрации
// или если признак авторегистрации не установлен и правила регистрации не заданы,
// то регистрация изменений будет выполнена безусловно для всех данных этого типа.
// Если для объекта метаданных заданы правила регистрации, то регистрация изменений будет выполнена 
// с учетом даты начала выгрузки и списка организаций.
// Для документов поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Для бизнес-процессов и для задач поддерживается регистрация изменений по дате начала выгрузки.
// Для наборов записей регистров поддерживается регистрация изменений по дате начала выгрузки и по списку организаций.
// Данная процедура может служить прототипом для разработки собственных процедур регистрации изменений
// для начальной выгрузки данных.
//
// Параметры:
//
// Получатель (обязательный). Тип: ПланОбменаСсылка. Узел плана обмена,
// для которого требуется выполнить регистрацию изменений данных.
//
// ДатаНачалаВыгрузки (обязательный). Тип: Дата. Дата, относительно которой необходимо выполнить
// регистрацию изменений данных для выгрузки. Изменения будут зарегистрированы для данных,
// которые на оси времени располагаются после этой даты.
//
// Организации (необязательный). Тип: Массив, Неопределено.
// Список организаций, для которых необходимо выполнить регистрацию изменений данных.
// Если параметр не задан, то организации не будут учитываться при регистрации изменений.
//
Процедура ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Знач Получатель, ДатаНачалаВыгрузки,
	Организации = Неопределено,
	Данные = Неопределено) Экспорт
	
	ОтборПоОрганизациям = (Организации <> Неопределено);
	ОтборПоДатеНачалаВыгрузки = ЗначениеЗаполнено(ДатаНачалаВыгрузки);
	
	Если Не ОтборПоОрганизациям И Не ОтборПоДатеНачалаВыгрузки Тогда
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			
			Для Каждого ОбъектМетаданных Из Данные Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ОбъектМетаданных);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОтборПоДатеНачалаВыгрузкиИОрганизациям = ОтборПоДатеНачалаВыгрузки И ОтборПоОрганизациям;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ИспользоватьФильтрПоМетаданным = (ТипЗнч(Данные) = Тип("Массив"));
	
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ИспользоватьФильтрПоМетаданным
			И Данные.Найти(ЭлементСоставаПланаОбмена.Метаданные) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
		
		Если ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Запретить
			И ОбменДаннымиПовтИсп.ПравилаРегистрацииОбъектаСуществуют(ИмяПланаОбмена, ПолноеИмяОбъекта) Тогда
			
			Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Документы
				
				Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
					И ЭлементСоставаПланаОбмена.Метаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда // Регистрация по дате и организациям
					
					Выборка = ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				Иначе // Регистрация по дате
					
					Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
					
					Пока Выборка.Следующий() Цикл
						
						ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ЭлементСоставаПланаОбмена.Метаданные)
				ИЛИ ОбщегоНазначения.ЭтоЗадача(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Бизнес-процессы и Задачи
				
				// Регистрация по дате
				Выборка = ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Выборка.Ссылка);
					
				КонецЦикла;
				
				Продолжить;
				
			ИначеЕсли ОбщегоНазначения.ЭтоРегистр(ЭлементСоставаПланаОбмена.Метаданные) Тогда // Регистры
				
				// Регистры сведений (независимые)
				Если ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные)
					И ЭлементСоставаПланаОбмена.Метаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					ОсновнойОтбор = ОсновнойОтборРегистраСведений(ЭлементСоставаПланаОбмена.Метаданные);
					
					ОтборПоПериоду     = (ОсновнойОтбор.Найти("Период") <> Неопределено);
					ОтборПоОрганизации = (ОсновнойОтбор.Найти("Организация") <> Неопределено);
					
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям И ОтборПоПериоду И ОтборПоОрганизации Тогда // Регистрация по дате и организациям
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
					ИначеЕсли ОтборПоДатеНачалаВыгрузки И ОтборПоПериоду Тогда // Регистрация по дате
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
					ИначеЕсли ОтборПоОрганизациям И ОтборПоОрганизации Тогда // Регистрация по организациям
						
						Выборка = ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации);
						
					Иначе
						
						Выборка = Неопределено;
						
					КонецЕсли;
					
					Если Выборка <> Неопределено Тогда
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							Для Каждого ИмяИзмерения Из ОсновнойОтбор Цикл
								
								НаборЗаписей.Отбор[ИмяИзмерения].Значение = Выборка[ИмяИзмерения];
								НаборЗаписей.Отбор[ИмяИзмерения].Использование = Истина;
								
							КонецЦикла;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе // Регистры (прочие)
					
					Если ОтборПоДатеНачалаВыгрузкиИОрганизациям
						И ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Период") <> Неопределено
						И ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Организация") <> Неопределено Тогда // Регистрация по дате и организациям
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные.Измерения.Найти("Период") <> Неопределено Тогда // Регистрация по дате
						
						Выборка = ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки);
						
						НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта).СоздатьНаборЗаписей();
						
						Пока Выборка.Следующий() Цикл
							
							НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
							НаборЗаписей.Отбор.Регистратор.Использование = Истина;
							
							ПланыОбмена.ЗарегистрироватьИзменения(Получатель, НаборЗаписей);
							
						КонецЦикла;
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Получатель, ЭлементСоставаПланаОбмена.Метаданные);
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ВыборкаДокументовПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК Таблица
	|ГДЕ
	|	Таблица.Организация В(&Организации)
	|	И Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Для внутреннего использования
// 
Функция ВыборкаОбъектовПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК Таблица
	|ГДЕ
	|	Таблица.Дата >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Для внутреннего использования
// 
Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузкиИОрганизациям(ПолноеИмяОбъекта, ДатаНачалаВыгрузки, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Для внутреннего использования
// 
Функция ВыборкаРегистраторовНаборовЗаписейПоДатеНачалаВыгрузки(ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Для внутреннего использования
// 
Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузкиИОрганизациям(ОсновнойОтбор,
	ПолноеИмяОбъекта,
	ДатаНачалаВыгрузки,
	Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	[Измерения]
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)
	|	И ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Измерения]", СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ОсновнойОтбор));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Для внутреннего использования
// 
Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоДатеНачалаВыгрузки(ОсновнойОтбор, ПолноеИмяОбъекта, ДатаНачалаВыгрузки)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	[Измерения]
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период >= &ДатаНачалаВыгрузки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Измерения]", СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ОсновнойОтбор));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Для внутреннего использования
// 
Функция ВыборкаЗначенийОсновногоОтбораРегистраСведенийПоОрганизациям(ОсновнойОтбор, ПолноеИмяОбъекта, Организации)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	[Измерения]
	|ИЗ
	|	[ПолноеИмяОбъекта] КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Организация В(&Организации)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъекта]", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Измерения]", СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ОсновнойОтбор));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Для внутреннего использования
// 
Функция ОсновнойОтборРегистраСведений(ОбъектМетаданных)
	
	Результат = Новый Массив;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
		И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		
		Результат.Добавить("Период");
		
	КонецЕсли;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Если Измерение.ОсновнойОтбор Тогда
			
			Результат.Добавить(Измерение.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные служебные процедуры и функции

// Для внутреннего использования
// 
Функция ТаблицаМонитораОбменаДанными(Знач ПланыОбмена, Знач ДополнительныеСвойстваПланаОбмена = "", Знач ТолькоОшибочные = Ложь) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|				ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 2
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КоличествоПроблем.Количество, 0) > 0
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПроблем КАК КоличествоПроблем
	|		ПО СостоянияОбменовДанными.УзелИнформационнойБазы = КоличествоПроблем.УзелИнформационнойБазы
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|			ТОГДА 2
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 2
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ПОМЕСТИТЬ СценарииСинхронизацииДанных
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|	СценарииОбменовДаннымиНастройкиОбмена.Ссылка.ИспользоватьРегламентноеЗадание = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыОбмена.ИмяПланаОбмена КАК ИмяПланаОбмена,
	|	ПланыОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейВыгрузкиДанных,
	|	ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейЗагрузкиДанных,
	|	СостоянияОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейЗагрузки,
	|	СостоянияОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейВыгрузки,
	|	СостоянияУспешныхОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейУспешнойЗагрузки,
	|	СостоянияУспешныхОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейУспешнойВыгрузки,
	|	ВЫБОР
	|		КОГДА СценарииСинхронизацииДанных.УзелИнформационнойБазы ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РасписаниеНастроено
	|ИЗ
	|	ПланыОбменаКонфигурации КАК ПланыОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиЗагрузка КАК СостоянияОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиВыгрузка КАК СостоянияОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиЗагрузка КАК СостоянияУспешныхОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиВыгрузка КАК СостоянияУспешныхОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СценарииСинхронизацииДанных КАК СценарииСинхронизацииДанных
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СценарииСинхронизацииДанных.УзелИнформационнойБазы
	|
	|[Отбор]
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланыОбмена.ИмяПланаОбмена,
	|	ПланыОбмена.Наименование";
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьТаблицуПлановОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбмена, ДополнительныеСвойстваПланаОбмена);
	ПолучитьТаблицуРезультатовОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбмена);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваПланаОбмена]", ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(ДополнительныеСвойстваПланаОбмена));
	
	Если ТолькоОшибочные Тогда
		Отбор = "
			|ГДЕ
			|	    ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) <> 0
			|	ИЛИ ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) <> 0"
		;
	Иначе
		Отбор = "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Отбор]", Отбор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НастройкиСинхронизации = Запрос.Выполнить().Выгрузить();
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейВыгрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойВыгрузки");
	
	Для Каждого НастройкаСинхронизации Из НастройкиСинхронизации Цикл
		
		НастройкаСинхронизации.ПредставлениеДатыПоследнейЗагрузки         = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейВыгрузки         = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейВыгрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойЗагрузки = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойВыгрузки = ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойВыгрузки);
		
	КонецЦикла;
	
	Возврат НастройкиСинхронизации;
КонецФункции

// Для внутреннего использования
// 
Функция ОбменДаннымиВыполненСПредупреждениями(Знач УзелИнформационнойБазы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И (СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(Знач СвойстваСтрокой)
	
	Результат = "";
	
	Шаблон = "ПланыОбмена.[СвойствоСтрокой] КАК [СвойствоСтрокой]";
	
	СвойстваМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСтрокой);
	
	Для Каждого СвойствоСтрокой Из СвойстваМассив Цикл
		
		СвойствоСтрокойВЗапросе = СтрЗаменить(Шаблон, "[СвойствоСтрокой]", СвойствоСтрокой);
		
		Результат = Результат + СвойствоСтрокойВЗапросе + ", ";
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ФильтрПлановОбменаПоПризнакуРазделенияДанных(ПланыОбменаМассив)
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
				
				Если ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())
					ИЛИ  ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()) Тогда
					
					Результат.Добавить(ИмяПланаОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
				
				Если Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())
					И Не ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
						ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()) Тогда
					
					Результат.Добавить(ИмяПланаОбмена);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
			
			Результат.Добавить(ИмяПланаОбмена);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ФильтрПлановОбменаПоПризнакуАвтономнойРаботы(ПланыОбменаМассив)
	
	Результат = Новый Массив;
	
	Для Каждого ИмяПланаОбмена Из ПланыОбменаМассив Цикл
		
		Если ИмяПланаОбмена <> ОбменДаннымиПовтИсп.ПланОбменаАвтономнойРаботы() Тогда
			
			Результат.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ТаблицыКорреспондентаДляЗначенийПоУмолчанию(Знач ИмяПланаОбмена) Экспорт
	
	Результат = Новый Массив;
	
	Настройки = ЗначениеПоТипу(ПланыОбмена[ИмяПланаОбмена].ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(), "Структура");
	
	Для Каждого Реквизит Из Метаданные.ПланыОбмена[ИмяПланаОбмена].Реквизиты Цикл
		
		Если Настройки.Свойство(Реквизит.Имя) Тогда
			
			Если Реквизит.Тип.Типы().Количество() <> 1 Тогда
				
				СтрокаСообщения = НСтр("ru = 'Составной тип данных для значений по умолчанию не поддерживается.
					|Реквизит ""%1"".'"
				);
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Реквизит.ПолноеИмя());
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Реквизит.Тип.Типы().Получить(0));
			
			Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
				
				СтрокаСообщения = НСтр("ru = 'Выбор значений по умолчанию поддерживается только для справочников.
					|Реквизит ""%1"".'"
				);
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Реквизит.ПолноеИмя());
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			Результат.Добавить(ОбъектМетаданных.ПолноеИмя());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
КонецФункции

// Процедура удаляет неактуальные записи в регистре сведений.
// Запись считается неактуальной, если план обмена, для которого была создана запись,
// был переименован или удален.
//
// Параметры:
//  Нет.
// 
Процедура УдалитьНеактуальныеЗаписиВРегистреПравилДляОбменаДанными()
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена КАК ИмяПланаОбмена
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СписокПлановОбмена.НайтиПоЗначению(Выборка.ИмяПланаОбмена) = Неопределено Тогда
			
			НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(Новый Структура("ИмяПланаОбмена", Выборка.ИмяПланаОбмена), "ПравилаДляОбменаДанными");
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ПолучитьТаблицуПлановОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбменаМассив, Знач ДополнительныеСвойстваПланаОбмена)
	
	ПланыОбменаМетода = ФильтрПлановОбменаПоПризнакуРазделенияДанных(ПланыОбменаМассив);
	
	Если ОбменДаннымиПовтИсп.АвтономнаяРаботаПоддерживается() Тогда
		
		// Для плана обмена автономной работы используется отдельный монитор
		ПланыОбменаМетода = ФильтрПлановОбменаПоПризнакуАвтономнойРаботы(ПланыОбменаМетода);
		
	КонецЕсли;
	
	ДополнительныеСвойстваПланаОбменаСтрокой = ?(ПустаяСтрока(ДополнительныеСвойстваПланаОбмена), "", ДополнительныеСвойстваПланаОбмена + ", ");
	
	Запрос = Новый Запрос;
	
	ШаблонЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//////////////////////////////////////////////////////// {[ИмяПланаОбмена]}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	Ссылка                      КАК УзелИнформационнойБазы,
	|	Наименование                КАК Наименование,
	|	""[ИмяПланаОбменаСиноним]"" КАК ИмяПланаОбмена
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена]
	|ГДЕ
	|	     Ссылка <> &ЭтотУзел[ИмяПланаОбмена]
	|	И НЕ ПометкаУдаления
	|";
	
	ТекстЗапроса = "";
	
	Если ПланыОбменаМетода.Количество() > 0 Тогда
		
		Для Каждого ИмяПланаОбмена ИЗ ПланыОбменаМетода Цикл
			
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ШаблонЗапроса,              "[ИмяПланаОбмена]",        ИмяПланаОбмена);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ИмяПланаОбменаСиноним]", Метаданные.ПланыОбмена[ИмяПланаОбмена].Синоним);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
			
			ИмяПараметра = СтрЗаменить("ЭтотУзел[ИмяПланаОбмена]", "[ИмяПланаОбмена]", ИмяПланаОбмена);
			Запрос.УстановитьПараметр(ИмяПараметра, ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена));
			
			// удаляем литерал объединения для первой таблицы
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				
				ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "ОБЪЕДИНИТЬ ВСЕ", "");
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляПланаОбмена;
			
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСвойстваБезИсточникаДанныхСтрокой = "";
		
		Если Не ПустаяСтрока(ДополнительныеСвойстваПланаОбмена) Тогда
			
			ДополнительныеСвойства = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеСвойстваПланаОбмена);
			
			ДополнительныеСвойстваБезИсточникаДанных = Новый Массив;
			
			Для Каждого Свойство Из ДополнительныеСвойства Цикл
				
				ДополнительныеСвойстваБезИсточникаДанных.Добавить(СтрЗаменить("Неопределено КАК [Свойство]", "[Свойство]", Свойство));
				
			КонецЦикла;
			
			ДополнительныеСвойстваБезИсточникаДанныхСтрокой = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ДополнительныеСвойстваБезИсточникаДанных) + ", ";
			
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|
		|	[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]
		|
		|	Неопределено КАК УзелИнформационнойБазы,
		|	Неопределено КАК Наименование,
		|	Неопределено КАК ИмяПланаОбмена
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]", ДополнительныеСвойстваБезИсточникаДанныхСтрокой);
		
	КонецЕсли;
	
	ТекстЗапросаРезультат = "
	|//////////////////////////////////////////////////////// {ПланыОбменаКонфигурации}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	УзелИнформационнойБазы,
	|	Наименование,
	|	ИмяПланаОбмена
	|ПОМЕСТИТЬ ПланыОбменаКонфигурации
	|ИЗ
	|	(
	|	[ТекстЗапроса]
	|	) КАК ВложенныйЗапрос
	|;
	|";
	
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ТекстЗапроса]", ТекстЗапроса);
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
	
	Запрос.Текст = ТекстЗапросаРезультат;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ПолучитьТаблицуРезультатовОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбменаМассив)
	
	Запрос = Новый Запрос;
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ТекстЗапросаРезультат = "
		|ВЫБРАТЬ
		|	РезультатыОбменаДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РезультатыОбменаДанными.ПроблемныйОбъект) КАК Количество
		|ПОМЕСТИТЬ КоличествоПроблем
		|ИЗ
		|	РегистрСведений.РезультатыОбменаДанными КАК РезультатыОбменаДанными
		|ГДЕ
		|	РезультатыОбменаДанными.Пропущена = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатыОбменаДанными.УзелИнформационнойБазы";
		
	Иначе
		
		ТекстЗапросаРезультат = "
		|ВЫБРАТЬ
		|	Неопределено КАК УзелИнформационнойБазы,
		|	Неопределено КАК Количество
		|ПОМЕСТИТЬ КоличествоПроблем";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаРезультат;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

//

// Для внутреннего использования
// 
Процедура ПроверитьИспользованиеОбменаДанными() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") <> Истина Тогда
		
		Сообщение = НСтр("ru = 'Выполнение обмена запрещено администратором.'");
		СообщениеДляЖурналаРегистрации = НСтр("ru = 'Выполнение обмена запрещено администратором.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,, СообщениеДляЖурналаРегистрации);
		
		ВызватьИсключение Сообщение;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ПроверитьВозможностьВыполненияОбменов() Экспорт
	
	Если Не Пользователи.РолиДоступны("ВыполнениеСинхронизацииДанных, НастройкаСинхронизацииДанных") Тогда
		
		ВызватьИсключение НСтр("ru = 'Нет прав на выполнение обменов данными.'");
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ПроверитьВозможностьАдминистрированияОбменов() Экспорт
	
	Если Не Пользователи.РолиДоступны("НастройкаСинхронизацииДанных") Тогда
		
		ВызватьИсключение НСтр("ru = 'Нет прав на администрирование обменов данными.'");
		
	КонецЕсли;
	
КонецПроцедуры

//

// Заполняет список значений доступными видами транспорта для узла плана обмена
//
Процедура ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(УзелИнформационнойБазы, ЭлементФормы, Отбор = Неопределено) Экспорт
	
	ОтборЗадан = (Отбор <> Неопределено);
	
	ИспользуемыеТранспорты = ОбменДаннымиПовтИсп.ИспользуемыеТранспортыСообщенийОбмена(УзелИнформационнойБазы);
	
	ЭлементФормы.СписокВыбора.Очистить();
	
	Для Каждого Элемент Из ИспользуемыеТранспорты Цикл
		
		Если ОтборЗадан Тогда
			
			Если Отбор.Найти(Элемент) <> Неопределено Тогда
				
				ЭлементФормы.СписокВыбора.Добавить(Элемент, Строка(Элемент));
				
			КонецЕсли;
			
		Иначе
			
			ЭлементФормы.СписокВыбора.Добавить(Элемент, Строка(Элемент));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует что обмен был произведен и фиксирует информацию в протоколе
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена) Экспорт
	
	// статус "Неопределено" в конце обмена свидетельствует об успешном выполнении обмена
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
	// формируем итоговое сообщение для протокола
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда
		СтрокаСообщения = НСтр("ru = '%1, %2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							СтруктураНастроекОбмена.РезультатВыполненияОбмена,
							СтруктураНастроекОбмена.ДействиеПриОбмене
		);
	Иначе
		СтрокаСообщения = НСтр("ru = '%1, %2; Объектов обработано: %3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							СтруктураНастроекОбмена.РезультатВыполненияОбмена,
							СтруктураНастроекОбмена.ДействиеПриОбмене,
							СтруктураНастроекОбмена.КоличествоОбъектовОбработано
		);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	СтруктураНастроекОбмена.ДатаОкончания = ТекущаяДатаСеанса();
	
	// фиксируем состояние обмена в РС
	ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена);
	
	// если обмен данными был успешно выполнен
	Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		ЗафиксироватьУспешныйОбменДаннымиВРегистреСведений(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует состояние обмена данными в регистре сведений СостоянияОбменовДанными
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена)
	
	// создаем структуру для новой записи в РС
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы",    СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",         СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", СтруктураНастроекОбмена.РезультатВыполненияОбмена);
	СтруктураЗаписи.Вставить("ДатаНачала",                СтруктураНастроекОбмена.ДатаНачала);
	СтруктураЗаписи.Вставить("ДатаОкончания",             СтруктураНастроекОбмена.ДатаОкончания);
	
	РегистрыСведений.СостоянияОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗафиксироватьУспешныйОбменДаннымиВРегистреСведений(СтруктураНастроекОбмена)
	
	// создаем структуру для новой записи в РС
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы", СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",      СтруктураНастроекОбмена.ДействиеПриОбмене);
	СтруктураЗаписи.Вставить("ДатаОкончания",          СтруктураНастроекОбмена.ДатаОкончания);
	
	РегистрыСведений.СостоянияУспешныхОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗаписьЖурналаРегистрацииНачалаОбменаДанными(СтруктураНастроекОбмена) Экспорт
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
КонецПроцедуры

// Дополняет таблицу значений пустыми строками до заданного количества строк.
//
Процедура УстановитьКоличествоСтрокТаблицы(Таблица, КоличествоСтрок) Экспорт
	
	Пока Таблица.Количество() < КоличествоСтрок Цикл
		
		Таблица.Добавить();
		
	КонецЦикла;
	
КонецПроцедуры

// Создает запись в журнале регистрации о событии обмена данными/транспорте сообщений обмена
//
Процедура ЗаписьЖурналаРегистрацииОбменаДанными(Комментарий, СтруктураНастроекОбмена, ЭтоОшибка = Ложь) Экспорт
	
	Уровень = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, Уровень,,, Комментарий);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ФормаНастройкиУзлаОбработчикПриСозданииНаСервере(Форма, ИмяРеквизитаФормы)
	
	РеквизитыФормы = ИменаРеквизитовФормы(Форма);
	
	Для Каждого НастройкаОтбора ИЗ Форма[ИмяРеквизитаФормы] Цикл
		
		Ключ = НастройкаОтбора.Ключ;
		
		Если РеквизитыФормы.Найти(Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Форма[Ключ]) = Тип("ДанныеФормыКоллекция") Тогда
			
			Таблица = Новый ТаблицаЗначений;
			
			СтруктураТабличнойЧасти = Форма.Параметры[ИмяРеквизитаФормы][Ключ];
			
			Для Каждого Элемент ИЗ СтруктураТабличнойЧасти Цикл
				
				УстановитьКоличествоСтрокТаблицы(Таблица, Элемент.Значение.Количество());
				
				Таблица.Колонки.Добавить(Элемент.Ключ);
				
				Таблица.ЗагрузитьКолонку(Элемент.Значение, Элемент.Ключ);
				
			КонецЦикла;
			
			Форма[Ключ].Загрузить(Таблица);
			
		Иначе
			
			Форма[Ключ] = Форма.Параметры[ИмяРеквизитаФормы][Ключ];
			
		КонецЕсли;
		
		Форма[ИмяРеквизитаФормы][Ключ] = Форма.Параметры[ИмяРеквизитаФормы][Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ИменаРеквизитовФормы(Форма)
	
	// возвращаемое значение функции
	Результат = Новый Массив;
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		
		Результат.Добавить(РеквизитФормы.Имя);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Распаковывает файл архива ZIP в указанный каталог; Извлекает все файлы архива
//
// Параметры:
//  ПолноеИмяФайлаАрхива  - Строка - имя файла архива, который необходимо распаковать
//  ПутьРаспаковкиФайлов  - Строка - путь по которому необходимо распаковать файлы
//  ПарольАрхива          - Строка - пароль для распаковки архива. По умолчанию пустая строка
// 
// Возвращаемое значение:
//  Результат - Булево - Истина, если успешно, Ложь, если нет.
//
Функция РаспаковатьZipФайл(Знач ПолноеИмяФайлаАрхива, Знач ПутьРаспаковкиФайлов, Знач ПарольАрхива = "") Экспорт
	
	// возвращаемое значение функции
	Результат = Истина;
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ПолноеИмяФайлаАрхива, ПарольАрхива);
		
	Исключение
		Архиватор = Неопределено;
		СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		Архиватор.ИзвлечьВсе(ПутьРаспаковкиФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при распаковке файлов архива: %1 в каталог: %2'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолноеИмяФайлаАрхива, ПутьРаспаковкиФайлов);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
		Результат = Ложь;
	КонецПопытки;
	
	Архиватор.Закрыть();
	Архиватор = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Запаковывает указанный каталог в файл архива ZIP
//
// Параметры:
//  ПолноеИмяФайлаАрхива  - Строка - имя файла архива, в который необходимо запаковать
//  МаскаУпаковкиФайлов    - Строка - имя файла, помещаемого в архив, или маска.
//			Недопустимо использование в именах файлов и папок букв национальных алфавитов, которые при 
//			преобразовании из символов UNICODE в узкие символы могут быть преобразованы с потерей информации. 
//			Рекомендуется использовать в именах файлов и папок символы латинского алфавита. 
//  ПарольАрхива          - Строка - пароль для архива. По умолчанию пустая строка
// 
// Возвращаемое значение:
//  Результат - Булево - Истина, если успешно, Ложь, если нет.
//
Функция ЗапаковатьВZipФайл(Знач ПолноеИмяФайлаАрхива, Знач МаскаУпаковкиФайлов, Знач ПарольАрхива = "") Экспорт
	
	// возвращаемое значение функции
	Результат = Истина;
	
	Попытка
		
		Архиватор = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива, ПарольАрхива);
		
	Исключение
		Архиватор = Неопределено;
		СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		Архиватор.Добавить(МаскаУпаковкиФайлов, РежимСохраненияПутейZIP.НеСохранятьПути);
		Архиватор.Записать();
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при запаковке файлов архива: %1 из каталог: %2'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПолноеИмяФайлаАрхива, МаскаУпаковкиФайлов);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
		Результат = Ложь;
	КонецПопытки;
	
	Архиватор = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество записей в таблице базы данных
//
// Параметры:
//  ИмяТаблицы – Строка – полное имя таблицы базы данных. Например: "Справочник.Контрагенты.Заказы"
// 
//  Возвращаемое значение:
// Тип: Число. Количество записей в таблице базы данных
//
Функция КоличествоЗаписейВТаблицеБазыДанных(Знач ИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Количество(*) КАК Количество
	|ИЗ
	|	#ИмяТаблицы
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка["Количество"];
	
КонецФункции

// Возвращает количество записей во временной таблице базы данных
//
// Параметры:
//  ИмяТаблицы – Строка – имя таблицы. Например: "ВременнаяТаблица1"
//  МенеджерВременныхТаблиц - менеджер временных таблиц, который содержит указатель на временную таблицу ИмяТаблицы
// 
//  Возвращаемое значение:
// Тип: Число. Количество записей в таблице базы данных
//
Функция КоличествоЗаписейВоВременнойТаблицеБазыДанных(Знач ИмяТаблицы, МенеджерВременныхТаблиц) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Количество(*) КАК Количество
	|ИЗ
	|	#ИмяТаблицы
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка["Количество"];
	
КонецФункции

// Возвращает ключ сообщения журнала регистрации
//
Функция ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене) Экспорт
	
	ИмяПланаОбмена     = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	КодУзлаПланаОбмена = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелИнформационнойБазы, "Код"));
	
	КлючСообщения = НСтр("ru = 'Обмен данными.[ИмяПланаОбмена].Узел [КодУзла].[ДействиеПриОбмене]'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[КодУзла]",           КодУзлаПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", ДействиеПриОбмене);
	
	Возврат КлючСообщения;
	
КонецФункции

// Возвращает имя файла сообщения обмена данными по данным узла-отправителя и узла-получателя
//
Функция ИмяФайлаСообщенияОбмена(КодУзлаОтправителя, КодУзлаПолучателя) Экспорт
	
	ШаблонИмени = "[Префикс]_[УзелОтправитель]_[УзелПолучатель]";
	
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[Префикс]",         "Message");
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелОтправитель]", КодУзлаОтправителя);
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелПолучатель]",  КодУзлаПолучателя);
	
	Возврат ШаблонИмени;
КонецФункции

// Возвращает признак того, что реквизит входит в подмножество стандартных реквизитов
//
Функция ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита) Экспорт
	
	Для Каждого Реквизит ИЗ СтандартныеРеквизиты Цикл
		
		Если Реквизит.Имя = ИмяРеквизита Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает массив всех видов транспорта сообщений обмена, определенных в конфигурации.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
// Тип: Массив. Элементы массива имеют тип "ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена"
//
Функция ВсеТранспортыСообщенийОбменаКонфигурации() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	
	Возврат Результат;
КонецФункции

// Возвращает признак успешного выполнения обмена данными
//
Функция РезультатВыполненияОбменаВыполнено(РезультатВыполненияОбмена)
	
	Возврат РезультатВыполненияОбмена = Неопределено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
	
КонецФункции

// Формирует и возвращает ключ таблицы данных.
// Ключ таблицы используется для выборочной загрузки данных из сообщения обмена по заданному ключу.
//
Функция КлючТаблицыДанных(Знач ТипИсточника, Знач ТипПриемника, Знач ЭтоУдалениеОбъекта) Экспорт
	
	Возврат ТипИсточника + "#" + ТипПриемника + "#" + Строка(ЭтоУдалениеОбъекта);
	
КонецФункции

// Для внутреннего использования
// 
Функция НадоВыполнитьОбработчик(Объект, Ссылка, ИмяСвойства)
	
	НомерПослеОбработки = Объект[ИмяСвойства];
	
	НомерПередОбработкой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяСвойства);
	
	НомерПередОбработкой = ?(НомерПередОбработкой = Неопределено, 0, НомерПередОбработкой);
	
	Возврат НомерПередОбработкой <> НомерПослеОбработки;
	
КонецФункции

// Для внутреннего использования
// 
Функция ЗаполнитьПараметрыПодключенияВнешнегоСоединения(НастройкиТранспорта)
	
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
	
	ПараметрыПодключения.ВариантРаботыИнформационнойБазы             = НастройкиТранспорта.COMВариантРаботыИнформационнойБазы;
	ПараметрыПодключения.КаталогИнформационнойБазы                   = НастройкиТранспорта.COMКаталогИнформационнойБазы;
	ПараметрыПодключения.ИмяСервера1СПредприятия                     = НастройкиТранспорта.COMИмяСервера1СПредприятия;
	ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия = НастройкиТранспорта.COMИмяИнформационнойБазыНаСервере1СПредприятия;
	ПараметрыПодключения.АутентификацияОперационнойСистемы           = НастройкиТранспорта.COMАутентификацияОперационнойСистемы;
	ПараметрыПодключения.ИмяПользователя                             = НастройкиТранспорта.COMИмяПользователя;
	ПараметрыПодключения.ПарольПользователя                          = НастройкиТранспорта.COMПарольПользователя;
	
	Возврат ПараметрыПодключения;
КонецФункции

// Для внутреннего использования
// 
Функция СоздатьВременныйКаталогСообщенийОбмена(ИмяВременногоКаталога, СтрокаСообщенияОбОшибке = "")
	
	ИмяВременногоКаталога = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов(), ИмяВременногоКаталогаСообщенийОбмена());
	
	// создаем временный каталог для сообщений обмена
	Попытка
		СоздатьКаталог(ИмяВременногоКаталога);
	Исключение
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Для внутреннего использования
// 
Функция ДобавитьЛитералКИмениФайла(Знач ПолноеИмяФайла, Знач Литерал)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяФайлаБезРасширения = Сред(ПолноеИмяФайла, 1, СтрДлина(ПолноеИмяФайла) - 4);
	
	Расширение = Прав(ПолноеИмяФайла, 3);
	
	Результат = "[ИмяФайлаБезРасширения]_[Литерал].[Расширение]";
	
	Результат = СтрЗаменить(Результат, "[ИмяФайлаБезРасширения]", ИмяФайлаБезРасширения);
	Результат = СтрЗаменить(Результат, "[Литерал]",               Литерал);
	Результат = СтрЗаменить(Результат, "[Расширение]",            Расширение);
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция КодУзлаПланаОбменаСтрокой(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧЦ=7; ЧВН=; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

// Для внутреннего использования
// 
Функция НомерОбластиИзКодаУзлаПланаОбмена(Знач КодУзла) Экспорт
	
	Если ТипЗнч(КодУзла) <> Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра номер [1].'");
	КонецЕсли;
	
	Результат = СтрЗаменить(КодУзла, "S0", "");
	
	Возврат Число(Результат);
КонецФункции

// Для внутреннего использования
// 
Функция ЗначениеПоТипу(Значение, ИмяТипа) Экспорт
	
	Если ТипЗнч(Значение) <> Тип(ИмяТипа) Тогда
		
		Возврат Новый(Тип(ИмяТипа));
		
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

// Для внутреннего использования
// 
Функция ФункциональныеОпцииРеквизита(Реквизит)
	
	Результат = Новый Массив;
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		Если ФункциональнаяОпция.Состав.Содержит(Реквизит) Тогда
			
			Результат.Добавить(ФункциональнаяОпция.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция НаименованиеПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена), "Наименование");
КонецФункции

// Для внутреннего использования
// 
Функция НаименованиеЭтогоУзлаПоУмолчанию() Экспорт
	
	Возврат ?(ОбщегоНазначенияПовтИсп.РазделениеВключено(), Метаданные.Синоним, ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы());
	
КонецФункции

// Для внутреннего использования
// 
Процедура ОбработчикПриВыгрузкеДанныхБСП(СтандартнаяОбработка,
											Знач Получатель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоОтправленныхОбъектов
	)
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбменДанными\ПриВыгрузкеДанныхСлужебный");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриВыгрузкеДанныхСлужебный(
			СтандартнаяОбработка,
			Получатель,
			ИмяФайлаСообщения,
			ДанныеСообщения,
			КоличествоЭлементовВТранзакции,
			ИмяСобытияЖурналаРегистрации,
			КоличествоОтправленныхОбъектов);
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ОбработчикПриВыгрузкеДанных(СтандартнаяОбработка,
											Знач Получатель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоОтправленныхОбъектов
	)
	
	ОбменДаннымиПереопределяемый.ПриВыгрузкеДанных(СтандартнаяОбработка,
											Получатель,
											ИмяФайлаСообщения,
											ДанныеСообщения,
											КоличествоЭлементовВТранзакции,
											ИмяСобытияЖурналаРегистрации,
											КоличествоОтправленныхОбъектов
	);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ОбработчикПриЗагрузкеДанныхБСП(СтандартнаяОбработка,
											Знач Отправитель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоПолученныхОбъектов
	)
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбменДанными\ПриЗагрузкеДанныхСлужебный");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗагрузкеДанныхСлужебный(
			СтандартнаяОбработка,
			Отправитель,
			ИмяФайлаСообщения,
			ДанныеСообщения,
			КоличествоЭлементовВТранзакции,
			ИмяСобытияЖурналаРегистрации,
			КоличествоПолученныхОбъектов);
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ОбработчикПриЗагрузкеДанных(СтандартнаяОбработка,
											Знач Отправитель,
											Знач ИмяФайлаСообщения,
											ДанныеСообщения,
											Знач КоличествоЭлементовВТранзакции,
											Знач ИмяСобытияЖурналаРегистрации,
											КоличествоПолученныхОбъектов
	)
	
	ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных(СтандартнаяОбработка,
											Отправитель,
											ИмяФайлаСообщения,
											ДанныеСообщения,
											КоличествоЭлементовВТранзакции,
											ИмяСобытияЖурналаРегистрации,
											КоличествоПолученныхОбъектов
	);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗафиксироватьЗавершениеОбменаСОшибкой(Знач УзелИнформационнойБазы, 
												Знач ДействиеПриОбмене, 
												Знач ДатаНачала, 
												Знач СтрокаСообщенияОбОшибке
	) Экспорт
	
	Если ТипЗнч(ДействиеПриОбмене) = Тип("Строка") Тогда
		
		ДействиеПриОбмене = Перечисления.ДействияПриОбмене[ДействиеПриОбмене];
		
	КонецЕсли;
	
	СтруктураНастроекОбмена = Новый Структура;
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
	СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена", Перечисления.РезультатыВыполненияОбмена.Ошибка);
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене", ДействиеПриОбмене);
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации", ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене));
	СтруктураНастроекОбмена.Вставить("ДатаНачала", ДатаНачала);
	СтруктураНастроекОбмена.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
	СтруктураНастроекОбмена.Вставить("ЭтоОбменВРИБ", ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы));
	
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьСравнениеИОбъединениеТаблицФормы(Форма, Отказ)
	
	ИмяПланаОбмена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1];
	
	ДанныеКорреспондента = ОбщиеДанныеУзловКорреспондента(ИмяПланаОбмена, Форма.Параметры.ПараметрыПодключения, Отказ);
	
	Если ДанныеКорреспондента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭтойИнформационнойБазы = ДанныеДляТабличныхЧастейУзловЭтойИнформационнойБазы(ИмяПланаОбмена);
	
	ТабличныеЧастиПланаОбмена = ОбменДаннымиПовтИсп.ТабличныеЧастиПланаОбмена(ИмяПланаОбмена);
	
	ИменаРеквизитовФормы = ИменаРеквизитовФормы(Форма);
	
	// Объединение таблиц Общих данных
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧастиПланаОбмена["ТаблицыОбщие"] Цикл
		
		Если ИменаРеквизитовФормы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщаяТаблица = Новый ТаблицаЗначений;
		ОбщаяТаблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		ОбщаяТаблица.Колонки.Добавить("УникальныйИдентификаторСсылки", Новый ОписаниеТипов("Строка"));
		
		Для Каждого СтрокаТаблицы Из ДанныеЭтойИнформационнойБазы[ИмяТабличнойЧасти] Цикл
			
			ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ДанныеКорреспондента[ИмяТабличнойЧасти] Цикл
			
			ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
		ТаблицаРезультат = ОбщаяТаблица.Скопировать(, "УникальныйИдентификаторСсылки");
		ТаблицаРезультат.Свернуть("УникальныйИдентификаторСсылки");
		ТаблицаРезультат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		ТаблицаРезультат.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрокаТаблицыРезультата Из ТаблицаРезультат Цикл
			
			СтрокаТаблицы = ОбщаяТаблица.Найти(СтрокаТаблицыРезультата.УникальныйИдентификаторСсылки, "УникальныйИдентификаторСсылки");
			
			СтрокаТаблицыРезультата.Представление = СтрокаТаблицы.Представление;
			
		КонецЦикла;
		
		СинхронизироватьПризнакИспользованияВТаблицах(Форма[ИмяТабличнойЧасти], ТаблицаРезультат);
		
		ТаблицаРезультат.Сортировать("Представление");
		
		Форма[ИмяТабличнойЧасти].Загрузить(ТаблицаРезультат);
		
	КонецЦикла;
	
	// Объединение таблиц данных Этой базы
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧастиПланаОбмена["ТаблицыЭтойБазы"] Цикл
		
		Если ИменаРеквизитовФормы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаРезультат = ДанныеЭтойИнформационнойБазы[ИмяТабличнойЧасти].Скопировать();
		ТаблицаРезультат.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
		
		СинхронизироватьПризнакИспользованияВТаблицах(Форма[ИмяТабличнойЧасти], ТаблицаРезультат);
		
		Форма[ИмяТабличнойЧасти].Загрузить(ТаблицаРезультат);
		
	КонецЦикла;
	
	// Объединение таблиц данных Корреспондента
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧастиПланаОбмена["ТаблицыКорреспондента"] Цикл
		
		Если ИменаРеквизитовФормы.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаРезультат = ДанныеКорреспондента[ИмяТабличнойЧасти].Скопировать();
		ТаблицаРезультат.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
		
		СинхронизироватьПризнакИспользованияВТаблицах(Форма[ИмяТабличнойЧасти], ТаблицаРезультат);
		
		Форма[ИмяТабличнойЧасти].Загрузить(ТаблицаРезультат);
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура СинхронизироватьПризнакИспользованияВТаблицах(ТаблицаФормы, ТаблицаРезультат)
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		
		// При первом обращении к таблице устанавливаем все флажки
		ТаблицаРезультат.ЗаполнитьЗначения(Истина, "Использовать");
		
	Иначе
		
		// Если имеется предыдущий контекст таблицы, то используем этот контекст для задания флажков.
		ТаблицаПредыдущегоКонтекста = ТаблицаФормы.Выгрузить(Новый Структура("Использовать", Истина), "УникальныйИдентификаторСсылки");
		
		ТаблицаРезультат.ЗаполнитьЗначения(Ложь, "Использовать");
		
		Для Каждого СтрокаТаблицыКонтекста Из ТаблицаПредыдущегоКонтекста Цикл
			
			СтрокаТаблицы = ТаблицаРезультат.Найти(СтрокаТаблицыКонтекста.УникальныйИдентификаторСсылки, "УникальныйИдентификаторСсылки");
			
			Если СтрокаТаблицы <> Неопределено Тогда
				
				СтрокаТаблицы.Использовать = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗагрузитьКонтекстВФорму(Форма, Контекст)
	
	// Заполняем форму данными
	Реквизиты = Форма.ПолучитьРеквизиты();
	
	Если Контекст <> Неопределено Тогда
	
		Для Каждого Реквизит Из Реквизиты Цикл
			
			Если Контекст.Свойство(Реквизит.Имя) Тогда
				
				Если ТипЗнч(Форма[Реквизит.Имя]) = Тип("ДанныеФормыКоллекция") Тогда
					
					Если Контекст[Реквизит.Имя].Количество() = 0 Тогда
						
						Форма[Реквизит.Имя].Очистить();
						
					Иначе
						
						Таблица = Новый ТаблицаЗначений;
						
						Для Каждого Элемент Из Контекст[Реквизит.Имя][0] Цикл
							
							Таблица.Колонки.Добавить(Элемент.Ключ);
							
						КонецЦикла;
						
						Для Каждого СтрокаТаблицы Из Контекст[Реквизит.Имя] Цикл
							
							ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТаблицы);
							
						КонецЦикла;
						
						Форма[Реквизит.Имя].Загрузить(Таблица);
						
					КонецЕсли;
					
				Иначе
					
					Форма[Реквизит.Имя] = Контекст[Реквизит.Имя];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Форма.Реквизиты = ПолучитьРеквизитыФормы(Форма);
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ВыгрузитьКонтекстИзФормы(Форма)
	
	// возвращаемое значение функции
	Контекст = Новый Структура;
	
	Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучитьРеквизитыФормы(Форма));
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Найти(Реквизит, ".") > 0 Тогда
			
			Колонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизит, ".");
			
			Если Колонки.Количество() > 0 Тогда
				
				ИмяТаблицы = Колонки[0];
				
				Колонки.Удалить(0);
				
				КолонкиСтрокой = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Колонки);
				
				Таблица = Новый Массив;
				
				Для Каждого Элемент Из Форма[ИмяТаблицы] Цикл
					
					СтрокаТаблицы = Новый Структура(КолонкиСтрокой);
					
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
					
					Таблица.Добавить(СтрокаТаблицы);
					
				КонецЦикла;
				
				Контекст.Вставить(ИмяТаблицы, Таблица)
				
			КонецЕсли;
			
		Иначе
			
			Контекст.Вставить(Реквизит, Форма[Реквизит])
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Контекст;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьРеквизитыФормы(Форма)
	
	Реквизиты = Форма.ПолучитьРеквизиты();
	
	// Получаем описание структуры данных формы
	РеквизитыСтрокой = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если ТипЗнч(Форма[Реквизит.Имя]) = Тип("ДанныеФормыКоллекция") Тогда
			
			Таблица = Форма[Реквизит.Имя].Выгрузить();
			
			Колонки = Новый Массив;
			Колонки.Добавить(Реквизит.Имя);
			
			Для Каждого Колонка Из Таблица.Колонки Цикл
				
				Колонки.Добавить(Колонка.Имя);
				
			КонецЦикла;
			
			РеквизитыСтрокой.Добавить(СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Колонки, "."));
			
		Иначе
			
			РеквизитыСтрокой.Добавить(Реквизит.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(РеквизитыСтрокой);
КонецФункции

// Для внутреннего использования
// 
Процедура ВнешнееСоединениеОбновитьНастройкиОбменаДанными(Знач ИмяПланаОбмена, Знач КодУзла, Знач ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелИнформационнойБазы = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзла);
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		Сообщение = НСтр("ru = 'Не найден узел плана обмена; имя плана обмена %1; код узла %2'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КодУзла);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	ПомощникСозданияОбменаДанными = Обработки.ПомощникСозданияОбменаДанными.Создать();
	ПомощникСозданияОбменаДанными.УзелИнформационнойБазы = УзелИнформационнойБазы;
	ПомощникСозданияОбменаДанными.ВнешнееСоединениеОбновитьНастройкиОбменаДанными(ПолучитьЗначенияНастройкиОтборов(ЗначенияПоУмолчаниюНаУзле));
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ПолучитьЗначенияНастройкиОтборов(СтруктураНастроекВнешнегоСоединения) Экспорт
	
	Результат = Новый Структура;
	
	// объектные типы
	Для Каждого НастройкаОтбора ИЗ СтруктураНастроекВнешнегоСоединения Цикл
		
		Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Структура") Тогда
			
			РезультатВложенный = Новый Структура;
			
			Для Каждого Элемент ИЗ НастройкаОтбора.Значение Цикл
				
				Если Найти(Элемент.Ключ, "_Ключ") > 0 Тогда
					
					Ключ = СтрЗаменить(Элемент.Ключ, "_Ключ", "");
					
					Массив = Новый Массив;
					
					Для Каждого ЭлементМассива Из Элемент.Значение Цикл
						
						Если Не ПустаяСтрока(ЭлементМассива) Тогда
							
							Значение = ЗначениеИзСтрокиВнутр(ЭлементМассива);
							
							Массив.Добавить(Значение);
							
						КонецЕсли;
						
					КонецЦикла;
					
					РезультатВложенный.Вставить(Ключ, Массив);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Результат.Вставить(НастройкаОтбора.Ключ, РезультатВложенный);
			
		Иначе
			
			Если Найти(НастройкаОтбора.Ключ, "_Ключ") > 0 Тогда
				
				Ключ = СтрЗаменить(НастройкаОтбора.Ключ, "_Ключ", "");
				
				Попытка
					Если ПустаяСтрока(НастройкаОтбора.Значение) Тогда
						Значение = Неопределено;
					Иначе
						Значение = ЗначениеИзСтрокиВнутр(НастройкаОтбора.Значение);
					КонецЕсли;
				Исключение
					Значение = Неопределено;
				КонецПопытки;
				
				Результат.Вставить(Ключ, Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// примитивные типы
	Для Каждого НастройкаОтбора Из СтруктураНастроекВнешнегоСоединения Цикл
		
		Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Структура") Тогда
			
			РезультатВложенный = Результат[НастройкаОтбора.Ключ];
			
			Если РезультатВложенный = Неопределено Тогда
				
				РезультатВложенный = Новый Структура;
				
			КонецЕсли;
			
			Для Каждого Элемент Из НастройкаОтбора.Значение Цикл
				
				Если Найти(Элемент.Ключ, "_Ключ") <> 0 Тогда
					
					Продолжить;
					
				ИначеЕсли НастройкаОтбора.Значение.Свойство(Элемент.Ключ + "_Ключ") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Массив = Новый Массив;
				
				Для Каждого ЭлементМассива Из Элемент.Значение Цикл
					
					Массив.Добавить(ЭлементМассива);
					
				КонецЦикла;
				
				РезультатВложенный.Вставить(Элемент.Ключ, Массив);
				
			КонецЦикла;
			
		Иначе
			
			Если Найти(НастройкаОтбора.Ключ, "_Ключ") <> 0 Тогда
				
				Продолжить;
				
			ИначеЕсли СтруктураНастроекВнешнегоСоединения.Свойство(НастройкаОтбора.Ключ + "_Ключ") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Экранирование перечисления
			Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Строка")
				И (     Найти(НастройкаОтбора.Значение, "Перечисление.") <> 0
					ИЛИ Найти(НастройкаОтбора.Значение, "Enumeration.") <> 0
				) Тогда
				
				Результат.Вставить(НастройкаОтбора.Ключ, ПредопределенноеЗначение(НастройкаОтбора.Значение));
				
			Иначе
				
				Результат.Вставить(НастройкаОтбора.Ключ, НастройкаОтбора.Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ДанныеДляТабличныхЧастейУзловЭтойИнформационнойБазы(Знач ИмяПланаОбмена) Экспорт
	
	Результат = Новый Структура;
	
	ОбщиеТаблицыУзлов = ОбменДаннымиПовтИсп.ТабличныеЧастиПланаОбмена(ИмяПланаОбмена)["ВсеТаблицыЭтойБазы"];
	
	Для Каждого ИмяТабличнойЧасти Из ОбщиеТаблицыУзлов Цикл
		
		ДанныеТабличнойЧасти = Новый ТаблицаЗначений;
		ДанныеТабличнойЧасти.Колонки.Добавить("Представление",                 Новый ОписаниеТипов("Строка"));
		ДанныеТабличнойЧасти.Колонки.Добавить("УникальныйИдентификаторСсылки", Новый ОписаниеТипов("Строка"));
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Представление КАК Представление
		|ИЗ
		|	[ИмяТаблицы] КАК Таблица
		|
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.Представление";
		
		ИмяТаблицы = ИмяТаблицыИзПервогоРеквизитаТабличнойЧастиПланаОбмена(ИмяПланаОбмена, ИмяТабличнойЧасти);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицы);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицы = ДанныеТабличнойЧасти.Добавить();
			СтрокаТаблицы.Представление = Выборка.Представление;
			СтрокаТаблицы.УникальныйИдентификаторСсылки = Строка(Выборка.Ссылка.УникальныйИдентификатор());
			
		КонецЦикла;
		
		Результат.Вставить(ИмяТабличнойЧасти, ДанныеТабличнойЧасти);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ОбщиеДанныеУзловКорреспондента(Знач ИмяПланаОбмена, Знач ПараметрыПодключения, Отказ)
	
	Если ПараметрыПодключения.ТипСоединения = "ВнешнееСоединение" Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		ВнешнееСоединение = ОбменДаннымиПовтИсп.УстановитьВнешнееСоединение(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
		
		Если ВнешнееСоединение = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке,,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПараметрыПодключения.ВерсияКорреспондента_2_1_1_7
			ИЛИ ПараметрыПодключения.ВерсияКорреспондента_2_0_1_6 Тогда
			
			Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбщиеДанныеУзлов_2_0_1_6(ИмяПланаОбмена));
			
		Иначе
			
			Возврат ЗначениеИзСтрокиВнутр(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьОбщиеДанныеУзлов(ИмяПланаОбмена));
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.ТипСоединения = "ВебСервис" Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		Если ПараметрыПодключения.ВерсияКорреспондента_2_1_1_7 Тогда
			
			WSПрокси = ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		ИначеЕсли ПараметрыПодключения.ВерсияКорреспондента_2_0_1_6 Тогда
			
			WSПрокси = ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		Иначе
			
			WSПрокси = ПолучитьWSПрокси(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		КонецЕсли;
		
		Если WSПрокси = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке,,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ПараметрыПодключения.ВерсияКорреспондента_2_1_1_7
			ИЛИ ПараметрыПодключения.ВерсияКорреспондента_2_0_1_6 Тогда
			
			Возврат СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetCommonNodsData(ИмяПланаОбмена));
		Иначе
			
			Возврат ЗначениеИзСтрокиВнутр(WSПрокси.GetCommonNodsData(ИмяПланаОбмена));
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.ТипСоединения = "ВременноеХранилище" Тогда
		
		Возврат ПолучитьИзВременногоХранилища(ПараметрыПодключения.АдресВременногоХранилища).Получить();
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Для внутреннего использования
// 
Функция ИмяТаблицыИзПервогоРеквизитаТабличнойЧастиПланаОбмена(Знач ИмяПланаОбмена, Знач ИмяТабличнойЧасти)
	
	ТабличнаяЧасть = Метаданные.ПланыОбмена[ИмяПланаОбмена].ТабличныеЧасти[ИмяТабличнойЧасти];
	
	Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
		
		Тип = Реквизит.Тип.Типы()[0];
		
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			
			Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
КонецФункции

// Для внутреннего использования
// 
Функция СправочникиПланаОбмена(Знач ИмяПланаОбмена)
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(ИмяПланаОбмена);
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	Для Каждого Элемент Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоСправочник(Элемент.Метаданные)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(Элемент.Метаданные) Тогда
			
			Результат.Добавить(Элемент.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ВсеДанныеПланаОбменаКромеСправочников(Знач ИмяПланаОбмена)
	
	Если ТипЗнч(ИмяПланаОбмена) <> Тип("Строка") Тогда
		
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(ИмяПланаОбмена);
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	Для Каждого Элемент Из СоставПланаОбмена Цикл
		
		Если Не (ОбщегоНазначения.ЭтоСправочник(Элемент.Метаданные)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(Элемент.Метаданные)) Тогда
			
			Результат.Добавить(Элемент.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция НастройкиПараметровУчетаВСистемеУстановлены(Знач ИмяПланаОбмена, Знач Корреспондент, СообщениеОбОшибке) Экспорт
	
	Если ТипЗнч(Корреспондент) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(Корреспондент) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		КорреспондентКод = Корреспондент;
		
		Корреспондент = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(Корреспондент);
		
		Если Не ЗначениеЗаполнено(Корреспондент) Тогда
			Сообщение = НСтр("ru = 'Не найден узел плана обмена; имя плана обмена %1; код узла %2'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КорреспондентКод);
			ВызватьИсключение Сообщение;
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПланыОбмена[ИмяПланаОбмена].ОбработчикПроверкиПараметровУчета(Отказ, Корреспондент, СообщениеОбОшибке);
	
	Возврат Не Отказ;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьПараметрыИнформационнойБазы(Знач ИмяПланаОбмена, Знач КодУзла, СообщениеОбОшибке) Экспорт
	
	Возврат ЗначениеВСтрокуВнутр(ПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке));
	
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьПараметрыИнформационнойБазы_2_0_1_6(Знач ИмяПланаОбмена, Знач КодУзла, СообщениеОбОшибке) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке));
	
КонецФункции

// Для внутреннего использования
// 
Функция СвойстваОбъектаМетаданных(Знач ПолноеИмяТаблицы) Экспорт
	
	Результат = Новый Структура("Синоним, Иерархический");
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТаблицы);
	
	ЗаполнитьЗначенияСвойств(Результат, ОбъектМетаданных);
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьОбъектыТаблицы(Знач ПолноеИмяТаблицы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТаблицы);
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.Иерархический Тогда
			
			Если ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				
				Возврат ОбменДаннымиПовтИсп.ПолучитьЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(ПолноеИмяТаблицы);
				
			Иначе
				
				Возврат ОбменДаннымиПовтИсп.ПолучитьЭлементыИерархическогоСправочникаИерархияЭлементов(ПолноеИмяТаблицы);
				
			КонецЕсли;
			
		Иначе
			
			Возврат ОбменДаннымиПовтИсп.ПолучитьЭлементыНеиерархическогоСправочника(ПолноеИмяТаблицы);
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.Иерархический Тогда
			
			Возврат ОбменДаннымиПовтИсп.ПолучитьЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(ПолноеИмяТаблицы);
			
		Иначе
			
			Возврат ОбменДаннымиПовтИсп.ПолучитьЭлементыНеиерархическогоСправочника(ПолноеИмяТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Для внутреннего использования
// 
Функция ДанныеКорреспондента(Знач ПолноеИмяТаблицы) Экспорт
	
	Результат = Новый Структура("СвойстваОбъектаМетаданных, ТаблицаБазыКорреспондента");
	
	Результат.СвойстваОбъектаМетаданных = СвойстваОбъектаМетаданных(ПолноеИмяТаблицы);
	Результат.ТаблицаБазыКорреспондента = ПолучитьОбъектыТаблицы(ПолноеИмяТаблицы);
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ДанныеТаблицКорреспондента(Таблицы, Знач ИмяПланаОбмена) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого Таблица Из Таблицы Цикл
		
		ДанныеТаблицы = Новый Структура("СвойстваОбъектаМетаданных, ТаблицаБазыКорреспондента");
		ДанныеТаблицы.СвойстваОбъектаМетаданных = СвойстваОбъектаМетаданных(Таблица);
		ДанныеТаблицы.ТаблицаБазыКорреспондента = ПолучитьОбъектыТаблицы(Таблица);
		
		Результат.Вставить(Таблица, ДанныеТаблицы);
		
	КонецЦикла;
	
	ДополнительныеДанные = Новый Структура;
	
	// {Обработчик: ПолучитьДополнительныеДанныеДляКорреспондента} Начало
	ПланыОбмена[ИмяПланаОбмена].ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные);
	// {Обработчик: ПолучитьДополнительныеДанныеДляКорреспондента} Окончание
	
	Результат.Вставить("{ДополнительныеДанные}", ДополнительныеДанные);
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ПараметрыИнформационнойБазы(Знач ИмяПланаОбмена, Знач КодУзла, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("ПланОбменаСуществует, ПрефиксИнформационнойБазы, ПрефиксИнформационнойБазыПоУмолчанию, 
		|НаименованиеИнформационнойБазы, НаименованиеИнформационнойБазыПоУмолчанию, НастройкиПараметровУчетаЗаданы, КодЭтогоУзла"
	);
	
	Результат.ПланОбменаСуществует = (Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена) <> Неопределено);
	
	Если Результат.ПланОбменаСуществует Тогда
		
		СвойстваЭтогоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланыОбмена[ИмяПланаОбмена].ЭтотУзел(), "Код, Наименование");
		
		ПрефиксИнформационнойБазы = Неопределено;
		ПрефиксИнформационнойБазы = ОбменДаннымиПереопределяемый.ПрефиксИнформационнойБазыПоУмолчанию();
		
		Результат.ПрефиксИнформационнойБазы                 = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
		Результат.ПрефиксИнформационнойБазыПоУмолчанию      = ПрефиксИнформационнойБазы;
		Результат.НаименованиеИнформационнойБазы            = СвойстваЭтогоУзла.Наименование;
		Результат.НаименованиеИнформационнойБазыПоУмолчанию = НаименованиеЭтогоУзлаПоУмолчанию();
		Результат.НастройкиПараметровУчетаЗаданы            = НастройкиПараметровУчетаВСистемеУстановлены(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке);
		Результат.КодЭтогоУзла                              = СвойстваЭтогоУзла.Код;
		
	Иначе
		
		Результат.ПрефиксИнформационнойБазы = "";
		Результат.ПрефиксИнформационнойБазыПоУмолчанию = "";
		Результат.НаименованиеИнформационнойБазы = "";
		Результат.НаименованиеИнформационнойБазыПоУмолчанию = "";
		Результат.НастройкиПараметровУчетаЗаданы = Ложь;
		Результат.КодЭтогоУзла = "";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики) Экспорт
	
	ОтборМассив = ИнформацияСтатистики.ВыгрузитьКолонку("ИмяТаблицыПриемника");
	
	ОтборСтрока = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ОтборМассив);
	
	Отбор = Новый Структура("ПолноеИмя", ОтборСтрока);
	
	// получаем дерево объектов метаданных конфигурации
	ДеревоИнформацииСтатистики = ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации(Отбор).Скопировать();
	
	// добавляем колонки
	ДеревоИнформацииСтатистики.Колонки.Добавить("Ключ");
	ДеревоИнформацииСтатистики.Колонки.Добавить("КоличествоОбъектовВИсточнике");
	ДеревоИнформацииСтатистики.Колонки.Добавить("КоличествоОбъектовВПриемнике");
	ДеревоИнформацииСтатистики.Колонки.Добавить("КоличествоОбъектовНесопоставленных");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ПроцентСопоставленияОбъектов");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ИндексКартинки");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ИспользоватьПредварительныйПросмотр");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ИмяТаблицыПриемника");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ТипОбъектаСтрокой");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ПоляТаблицы");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ПоляПоиска");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ТипИсточникаСтрокой");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ТипПриемникаСтрокой");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ЭтоУдалениеОбъекта");
	ДеревоИнформацииСтатистики.Колонки.Добавить("ДанныеУспешноЗагружены");
	
	ИнформацияСтатистикиОбычныеОбъекты = ИнформацияСтатистики.Скопировать(Новый Структура("ОдинКоМногим, ЭтоУдалениеОбъекта", Ложь, Ложь));
	
	// заполняем обычные строки
	Для Каждого СтрокаТаблицы Из ИнформацияСтатистикиОбычныеОбъекты Цикл
		
		СтрокаДерева = ДеревоИнформацииСтатистики.Строки.Найти(СтрокаТаблицы.ИмяТаблицыПриемника, "ПолноеИмя", Истина);
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла;
	
	// добавляем строки с типом "ОдинКоМногим"
	Отбор = Новый Структура("ОдинКоМногим", Истина);
	ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистики, ИнформацияСтатистики, Отбор);
	
	// добавляем строки удаления объектов
	Отбор = Новый Структура("ЭтоУдалениеОбъекта", Истина);
	ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистики, ИнформацияСтатистики, Отбор);
	
	Возврат ДеревоИнформацииСтатистики;
КонецФункции

// Для внутреннего использования
// 
Процедура ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистики, ИнформацияСтатистики, Отбор)
	
	ИнформацияСтатистикиОдинКоМногим = ИнформацияСтатистики.Скопировать(Отбор);
	
	Если ИнформацияСтатистикиОдинКоМногим.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияСтатистикиОдинКоМногимВременная = ИнформацияСтатистикиОдинКоМногим.Скопировать(, "ИмяТаблицыПриемника");
	ИнформацияСтатистикиОдинКоМногимВременная.Свернуть("ИмяТаблицыПриемника");
	
	Для Каждого СтрокаТаблицы Из ИнформацияСтатистикиОдинКоМногимВременная Цикл
		
		Строки = ИнформацияСтатистикиОдинКоМногим.НайтиСтроки(Новый Структура("ИмяТаблицыПриемника", СтрокаТаблицы.ИмяТаблицыПриемника));
		
		СтрокаДерева = ДеревоИнформацииСтатистики.Строки.Найти(СтрокаТаблицы.ИмяТаблицыПриемника, "ПолноеИмя", Истина);
		
		Для Каждого Строка Из Строки Цикл
			
			НоваяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Строка);
			
			Если Строка.ЭтоУдалениеОбъекта Тогда
				
				НоваяСтрокаДерева.Картинка = БиблиотекаКартинок.ПометитьНаУдаление;
				
			Иначе
				
				Синоним = "[СинонимТаблицыПриемника] ([ИмяТаблицыИсточника])";
				Синоним = СтрЗаменить(Синоним, "[СинонимТаблицыПриемника]", НоваяСтрокаДерева.Синоним);
				Синоним = СтрЗаменить(Синоним, "[ИмяТаблицыИсточника]", УдалитьИмяКлассаИзИмениОбъекта(Строка.ТипИсточникаСтрокой));
				
				НоваяСтрокаДерева.Синоним = Синоним;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция УдалитьИмяКлассаИзИмениОбъекта(Знач Результат)
	
	Результат = СтрЗаменить(Результат, "ДокументСсылка.", "");
	Результат = СтрЗаменить(Результат, "СправочникСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланВидовХарактеристикСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланСчетовСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланВидовРасчетаСсылка.", "");
	Результат = СтрЗаменить(Результат, "БизнесПроцессСсылка.", "");
	Результат = СтрЗаменить(Результат, "ЗадачаСсылка.", "");
	
	Возврат Результат;
КонецФункции

// Добавляет параметры работы клиентской логики для подсистемы обмена данными
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.Вставить("ГлавныйУзел", ПланыОбмена.ГлавныйУзел());
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьПроверкуНаличияПравилОбменаЗагруженныхИзФайла(ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена КАК ИмяПланаОбмена,
	|	ПравилаДляОбменаДанными.ВидПравил КАК ВидПравил
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИсточникПравил = ЗНАЧЕНИЕ(Перечисление.ИсточникиПравилДляОбменаДанными.Файл)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ПланыОбменаМассив = Новый Массив;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов Тогда
				
				ПравилаОбменаЗагруженныеИзФайла.Добавить(Выборка.ИмяПланаОбмена);
				
			ИначеЕсли Выборка.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов Тогда
				
				ПравилаРегистрацииЗагруженныеИзФайла.Добавить(Выборка.ИмяПланаОбмена);
				
			КонецЕсли;
			
			Если ПланыОбменаМассив.Найти(Выборка.ИмяПланаОбмена) = Неопределено Тогда
				
				ПланыОбменаМассив.Добавить(Выборка.ИмяПланаОбмена);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаСообщения = НСтр("ru = 'Для плана(ов) обмена %1 используются правила обмена, загруженные из файла.
				|Эти правила могут быть несовместимы с новой версией программы.
				|Для предупреждения возможного возникновения ошибок при работе с программой рекомендуется актуализировать правила обмена из файла.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()
		);
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПланыОбменаМассив));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку подключения обработки транспорта по заданным настройкам.
//
Процедура ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, СтруктураНастроек, ВидТранспорта, СообщениеОбОшибке = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// создаем экземпляр объекта обработки
	ОбработкаОбъект = Обработки[ИмяОбработкиТранспортаСообщенийОбмена(ВидТранспорта)].Создать();
	
	// инициализация свойств обработки переданными параметрами настроек
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураНастроек);
	
	// Инициализация транспорта обмена
	ОбработкаОбъект.Инициализация();
	
	// выполняем проверку подключения
	Если Не ОбработкаОбъект.ПодключениеУстановлено() Тогда
		
		ШаблонСообщения = "%1
						|%2";
		//
		
		ДополнительноеСообщение = НСтр("ru = 'Техническую информацию об ошибке см. в журнале регистрации.'");
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбработкаОбъект.СтрокаСообщенияОбОшибке, ДополнительноеСообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,,,, Отказ);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Транспорт сообщений обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОбъект.СтрокаСообщенияОбОшибкеЖР);
		
	КонецЕсли;
	
КонецПроцедуры

// Устарело. В будущем необходимо использовать "УстановитьВнешнееСоединениеСБазой"
//
Функция УстановитьВнешнееСоединение(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", ОшибкаПодключенияКомпоненты = Ложь) Экспорт
    
    Результат = УстановитьВнешнееСоединениеСБазой(СтруктураНастроек);
    
    ОшибкаПодключенияКомпоненты = Результат.ОшибкаПодключенияКомпоненты;
    СтрокаСообщенияОбОшибке     = Результат.ПодробноеОписаниеОшибки;
    
    Возврат Результат.Соединение;
КонецФункции

// Для внутреннего использования
// 
Функция УстановитьВнешнееСоединениеСБазой(СтруктураНастроек) Экспорт
	
	Результат = ОбщегоНазначения.УстановитьВнешнееСоединениеСБазой(
		ЗаполнитьПараметрыПодключенияВнешнегоСоединения(СтруктураНастроек)
	);
	
	ВнешнееСоединение = Результат.Соединение;
	Если ВнешнееСоединение<>Неопределено Тогда
		Попытка
			Если Не ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.РольДоступнаПолныеПрава() Тогда
				СтрокаСообщенияОбОшибке = НСтр("ru = 'Для пользователя внешнего соединения должна быть указана роль ""Полные права"".'");
				Результат.ПодробноеОписаниеОшибки = СтрокаСообщенияОбОшибке;
				Результат.КраткоеОписаниеОшибки   = СтрокаСообщенияОбОшибке;
			КонецЕсли;
		Исключение
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Для пользователя внешнего соединения должна быть указана роль ""Полные права"".'");
			Результат.ПодробноеОписаниеОшибки = СтрокаСообщенияОбОшибке;
			Результат.КраткоеОписаниеОшибки   = СтрокаСообщенияОбОшибке;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьWSПроксиПоПараметрамПодключения(
					СтруктураНастроек,
					СтрокаСообщенияОбОшибке = "",
					СообщениеПользователю = "",
					ДелатьКонтрольныйВызов = Ложь
	) Экспорт
	
	Попытка
		ОбменДаннымиКлиентСервер.ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(СтруктураНастроек.WSИмяПользователя);
	Исключение
		СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	МестоположениеWSDL = "[URLВебСервиса]/ws/[ИмяСервиса]?wsdl";
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[URLВебСервиса]", СтруктураНастроек.WSURLВебСервиса);
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[ИмяСервиса]",    СтруктураНастроек.WSИмяСервиса);
	
	Попытка
		WSПрокси = ОбщегоНазначения.WSПрокси(
			МестоположениеWSDL,
			СтруктураНастроек.WSURLПространстваИменСервиса,
			СтруктураНастроек.WSИмяСервиса,
			,
			СтруктураНастроек.WSИмяПользователя,
			СтруктураНастроек.WSПароль,
			СтруктураНастроек.WSТаймаут,
			ДелатьКонтрольныйВызов
		);
	Исключение
		СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат WSПрокси;
КонецФункции

// Для внутреннего использования
// 
Функция СтруктураПараметровWS() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("WSURLВебСервиса");
	СтруктураПараметров.Вставить("WSИмяПользователя");
	СтруктураПараметров.Вставить("WSПароль");
	
	Возврат СтруктураПараметров;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "") Экспорт
	
	УдалитьНезначащиеСимволыВНастройкахПодключения(СтруктураНастроек);
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/Exchange");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "Exchange");
	СтруктураНастроек.Вставить("WSТаймаут", 60);
	
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "") Экспорт
	
	УдалитьНезначащиеСимволыВНастройкахПодключения(СтруктураНастроек);
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSТаймаут", 60);
	
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьWSПрокси_2_1_1_7(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "", Таймаут = 60) Экспорт
	
	УдалитьНезначащиеСимволыВНастройкахПодключения(СтруктураНастроек);
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "Exchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSТаймаут", Таймаут);
	
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю, Истина);
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке = "", Пароль = "")
	
	СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(УзелИнформационнойБазы, Пароль);
	
	Попытка
		ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(СтруктураНастроек);
	Исключение
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису(),
			УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке
		);
		Возврат Неопределено;
	КонецПопытки;
	
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_1_1_7(СтруктураНастроек, СтрокаСообщенияОбОшибке);
		
	ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек, СтрокаСообщенияОбОшибке);
		
	Иначе
		
		WSПрокси = ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке);
		
	КонецЕсли;
	
	Возврат WSПрокси;
КонецФункции

// Для внутреннего использования
// 
Процедура УдалитьНезначащиеСимволыВНастройкахПодключения(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл
		
		Если ТипЗнч(Настройка.Значение) = Тип("Строка") Тогда
			
			Настройки.Вставить(Настройка.Ключ, СокрЛП(Настройка.Значение));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ПроверитьПодключениеWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "") Экспорт
	
	ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(СтруктураНастроек);
	
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_1_1_7(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
		
	ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
		
	Иначе
		
		WSПрокси = ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
		
	КонецЕсли;
	
	Возврат WSПрокси;
КонецФункции

// Для внутреннего использования
// 
Функция ЕстьПодключениеККорреспонденту(Знач Корреспондент, Знач СтруктураНастроек, СообщениеПользователю = "") Экспорт
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Обмен данными.Проверка подключения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Попытка
		ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(СтруктураНастроек);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		СообщениеПользователю = КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_1_1_7(СтруктураНастроек,, СообщениеПользователю, 5);
		
		Если WSПрокси = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			
			Возврат WSПрокси.TestConnection(
				ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Корреспондент),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбменаПоСсылке(Корреспондент), "Код"),
				СообщениеПользователю
			);
			
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			СообщениеПользователю = КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек,, СообщениеПользователю);
		
	Иначе
		
		WSПрокси = ПолучитьWSПрокси(СтруктураНастроек,, СообщениеПользователю);
		
	КонецЕсли;
	
	Возврат WSПрокси <> Неопределено;
КонецФункции

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина".
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Получает таблицу правил выборочной регистрации объектов из параметров сеанса.
//
// Параметры:
// Нет.
// 
// Возвращаемое значение:
// Таблица значений - таблица реквизитов регистрации для всех объектов метаданных
//
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектовПС() Экспорт
	
	Возврат ОбменДаннымиПовтИсп.ПолучитьПравилаВыборочнойРегистрацииОбъектовПС();
	
КонецФункции

// Добавляет одну запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись
// 
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать менеджер записи и обновить запись
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо обновить запись
// 
Процедура ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем менеджер записи регистра
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			МенеджерЗаписи[Измерение.Имя] = СтруктураЗаписи[Измерение.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
	// считываем запись из базы данных
	МенеджерЗаписи.Прочитать();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
	
	// записываем менеджер записи
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет загрузку правил для обмена данными (ПРО или ПКО) в ИБ.
// 
Процедура ЗагрузитьПравилаДляОбменаДанными(Отказ,
										Знач ИмяПланаОбмена,
										Знач ВидПравил,
										Знач ИмяМакетаПравил
	)
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИмяПланаОбмена",  ИмяПланаОбмена);
	СтруктураЗаписи.Вставить("ВидПравил",       ВидПравил);
	СтруктураЗаписи.Вставить("ИмяМакетаПравил", ИмяМакетаПравил);
	СтруктураЗаписи.Вставить("ИсточникПравил",  Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации);
	СтруктураЗаписи.Вставить("ИспользоватьФильтрВыборочнойРегистрацииОбъектов", Истина);
	
	// получаем набор записей регистра
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, "ПравилаДляОбменаДанными");
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	// Загружаем правила для обмена данными в ИБ
	РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, НаборЗаписей[0]);
	
	Если Не Отказ Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьОбновлениеВерсииТиповыхПравилДляОбменаДанными(Отказ, ПравилаОбменаЗагруженныеИзФайла, ПравилаРегистрацииЗагруженныеИзФайла)
	
	Для Каждого ИмяПланаОбмена Из ОбменДаннымиПовтИсп.ПланыОбменаБСП() Цикл
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
			И Не ОбменДаннымиПовтИсп.ПланОбменаИспользуетсяВМоделиСервиса(ИмяПланаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаОбменаЗагруженныеИзФайла.Найти(ИмяПланаОбмена) = Неопределено
			И ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена") Тогда
			
			ЗагрузитьПравилаДляОбменаДанными(Отказ, ИмяПланаОбмена, Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов, "ПравилаОбмена");
			
		КонецЕсли;
		
		Если ПравилаРегистрацииЗагруженныеИзФайла.Найти(ИмяПланаОбмена) = Неопределено
			И ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаРегистрации") Тогда
			
			ЗагрузитьПравилаДляОбменаДанными(Отказ, ИмяПланаОбмена, Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов, "ПравилаРегистрации");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем набор записей регистра
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
КонецФункции

// Получает индекс картинки для вывода в таблице статистики сопоставления объектов
//
Функция ИндексКартинкиТаблицыИнформацииСтатистики(Знач КоличествоОбъектовНесопоставленных, Знач ДанныеУспешноЗагружены) Экспорт
	
	Возврат ?(КоличествоОбъектовНесопоставленных = 0, ?(ДанныеУспешноЗагружены = Истина, 2, 0), 1);
	
КонецФункции

// Проверяет признак того, что правила обмена загружены для заданного плана обмена
//
//  Возвращаемое значение:
//   Тип: Булево. Истина – привила обмена загружены в ИБ; Ложь – нет.
//
Функция ПравилаКонвертацииОбъектовДляПланаОбменаЗагружены(Знач ИмяПланаОбмена) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|	И ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

// Выполняет проверку того, что размер файла сообщения обмена превышает допустимый размер.
//
//  Возвращаемое значение:
//  Тип: Булево. Истина – размер файла больше допустимого; Ложь – размер файла не превышает допустимого размера.
//
Функция РазмерСообщенияОбменаПревышаетДопустимый(Знач ИмяФайла, Знач МаксимальныйДопустимыйРазмерСообщения) Экспорт
	
	// возвращаемое значение функции
	Результат = Ложь;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() И Файл.ЭтоФайл() Тогда
		
		Если МаксимальныйДопустимыйРазмерСообщения <> 0 Тогда
			
			РазмерПакета = Окр(Файл.Размер() / 1024, 0, РежимОкругления.Окр15как20);
			
			Если РазмерПакета > МаксимальныйДопустимыйРазмерСообщения Тогда
				
				СтрокаСообщения = НСтр("ru = 'Размер исходящего пакета составил %1 Кбайт, что превышает допустимое ограничение %2 Кбайт.'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(РазмерПакета), Строка(МаксимальныйДопустимыйРазмерСообщения));
				СообщитьОбОшибке(СтрокаСообщения, Результат);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования
// 
Функция УстановленПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановленПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
	
КонецФункции

// Для внутреннего использования
// 
Процедура ЗарегистрироватьТолькоСправочникиДляНачальнойВыгрузки(Знач УзелИнформационнойБазы) Экспорт
	
	ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелИнформационнойБазы, СправочникиПланаОбмена(УзелИнформационнойБазы));
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗарегистрироватьВсеДанныеКромеСправочниковДляНачальнойВыгрузки(Знач УзелИнформационнойБазы) Экспорт
	
	ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелИнформационнойБазы, ВсеДанныеПланаОбменаКромеСправочников(УзелИнформационнойБазы));
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелИнформационнойБазы, Данные = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	
	ОбменДаннымиПереопределяемый.РегистрацияИзмененийНачальнойВыгрузкиДанных(УзелИнформационнойБазы, СтандартнаяОбработка, Данные);
	
	Если СтандартнаяОбработка Тогда
		
		Если ТипЗнч(Данные) = Тип("Массив") Тогда
			
			Для Каждого ОбъектМетаданных Из Данные Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, ОбъектМетаданных);
				
			КонецЦикла;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Данные);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ПланОбменаСодержитОбъект(ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы),
		Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ПолноеИмя()) Тогда
		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелИнформационнойБазы, Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз);
		
	КонецЕсли;
	
	Если Не ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Тогда
		
		// Устанавливаем признак начальной выгрузки данных для узла
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.УстановитьПризнакНачальнойВыгрузкиДанных(УзелИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция СостояниеДлительнойОперацииДляУзлаИнформационнойБазы(Знач УзелИнформационнойБазы,
																Знач ИдентификаторОперации,
																СтрокаСообщенияОбОшибке = ""
	) Экспорт
	
	WSПрокси = ПолучитьWSПроксиДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке);
	
	Если WSПрокси = Неопределено Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	Возврат WSПрокси.GetContinuousOperationStatus(ИдентификаторОперации, СтрокаСообщенияОбОшибке);
КонецФункции

// Для внутреннего использования
// 
Функция КаталогВременногоХранилищаФайлов()
	
	Возврат ОбщегоНазначенияПовтИсп.КаталогВременногоХранилищаФайлов();
	
КонецФункции

// Для внутреннего использования
// 
Функция УникальноеИмяФайлаСообщенияОбмена()
	
	Результат = "Message{GUID}.xml";
	Результат = СтрЗаменить(Результат, "GUID", Строка(Новый УникальныйИдентификатор));
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ЭтоПодчиненныйУзелРИБ() Экспорт
	
	Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
	
КонецФункции

// Возвращает массив номеров версий, поддерживаемых интерфейсом корреспондента для подсистемы ОбменДанными.
// 
// Параметры:
// ВнешнееСоединение - объект COM-соединение, которое используется для работы с корреспондентом.
//
// Возвращаемое значение:
// Массив номеров версий, поддерживаемых интерфейсом корреспондента.
//
Функция ВерсииКорреспондентаЧерезВнешнееСоединение(ВнешнееСоединение) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейсаЧерезВнешнееСоединение(ВнешнееСоединение, "ОбменДанными");
	
КонецФункции

// Для внутреннего использования
// 
Функция КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке)
	
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		
		Возврат КраткоеПредставлениеПервойОшибки(ИнформацияОбОшибке.Причина);
		
	КонецЕсли;
	
	Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
КонецФункции

//

// Для внутреннего использования
// 
Функция ОбработкаОбменаДляЗагрузкиДанных(Отказ, Знач УзелИнформационнойБазы, Знач ИмяФайлаСообщенияОбмена) Экспорт
	
	// Платформенный кэш не используем при работе через веб-сервер
	Если ОбщегоНазначенияКлиентСервер.КлиентПодключенЧерезВебСервер() Тогда
		
		Возврат ОбработкаДляЗагрузкиДанных(Отказ, УзелИнформационнойБазы, ИмяФайлаСообщенияОбмена);
		
	Иначе
		
		Возврат ОбменДаннымиПовтИсп.ОбработкаДляЗагрузкиДанных(Отказ, УзелИнформационнойБазы, ИмяФайлаСообщенияОбмена);
		
	КонецЕсли;
	
КонецФункции

// Возвращает инициализированную обработку КонвертацияОбъектовИнформационныхБаз для выполнения загрузки данных.
// Обработка сохраняется в платформенном КЭШе для многократного использования для одного узла плана обмена
// и конкретного файла сообщения обмена с уникальным полным именем.
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена
//  ИмяФайлаСообщенияОбмена - Строка - уникальное имя файла сообщения обмена для загрузки данных
// 
//  Возвращаемое значение:
// Тип: ОбработкаОбъект.КонвертацияОбъектовИнформационныхБаз - инициализированная обработка для загрузки данных
//
Функция ОбработкаДляЗагрузкиДанных(Отказ, Знач УзелИнформационнойБазы, Знач ИмяФайлаСообщенияОбмена) Экспорт
	
	// ИНИЦИАЛИЗАЦИЯ ОБРАБОТКИ ДЛЯ ЗАГРУЗКИ ДАННЫХ
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Загрузка";
	
	ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	ОбработкаОбменаДанными.ВыводВПротоколИнформационныхСообщений = Ложь;
	ОбработкаОбменаДанными.ДописыватьДанныеВПротоколОбмена = Ложь;
	ОбработкаОбменаДанными.ВыгружатьТолькоРазрешенные = Ложь;
	ОбработкаОбменаДанными.ПродолжитьПриОшибке = Ложь;
	
	ОбработкаОбменаДанными.ИмяФайлаПротоколаОбмена = "";
	
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	ОбработкаОбменаДанными.УзелОбменаЗагрузкаДанных = УзелИнформационнойБазы;
	ОбработкаОбменаДанными.ИмяФайлаОбмена           = ИмяФайлаСообщенияОбмена;
	
	ОбработкаОбменаДанными.КоличествоОбъектовНаТранзакцию = РегистрыСведений.НастройкиТранспортаОбмена.КоличествоЭлементовВТранзакцииЗагрузкиДанных(УзелИнформационнойБазы);
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	УстановитьНастройкиОтладкиЗагрузкиДляПравилОбмена(ОбработкаОбменаДанными, ИмяПланаОбмена);
	
	Возврат ОбработкаОбменаДанными;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Контроль неразделенных данных

// Вызывается при проверке доступности неразделенных данных для записи.
//
Процедура ВыполнитьКонтрольЗаписиНеразделенныхДанных(Знач Данные) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		И Не ЭтоРазделенныйОбъект(Данные) Тогда
		
		ПредставлениеИсключения = НСтр("ru = 'Нарушение прав доступа!'");
		
		ЗаписьЖурналаРегистрации(
			ПредставлениеИсключения,
			УровеньЖурналаРегистрации.Ошибка,
			Данные.Метаданные()
		);
		
		ВызватьИсключение ПредставлениеИсключения;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоРазделенныйОбъект(Знач Объект)
	
	ПолноеИмя = Объект.Метаданные().ПолноеИмя();
	
	Возврат ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ПолноеИмя, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных())
		ИЛИ ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ПолноеИмя, ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных())
	;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с монитором обмена данными

// Возвращает структуру с данными последнего обмена для заданного узла информационной базы
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СостоянияОбменовДанными - Структура - структура с данными последнего обмена для заданного узла информационной базы
//
Функция СостоянияОбменовДаннымиДляУзлаИнформационнойБазы(Знач УзелИнформационнойБазы) Экспорт
	
	// возвращаемое значение функции
	СостоянияОбменовДанными = Новый Структура;
	СостоянияОбменовДанными.Вставить("УзелИнформационнойБазы");
	СостоянияОбменовДанными.Вставить("РезультатЗагрузкиДанных", "Неопределено");
	СостоянияОбменовДанными.Вставить("РезультатВыгрузкиДанных", "Неопределено");
	
	ТекстЗапроса = "
	|// {ЗАПРОС №0}
	|////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА ""Успех""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|	ТОГДА ""ВыполненоСПредупреждениями""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|	ТОГДА ""Предупреждение_СообщениеОбменаБылоРанееПринято""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения)
	|	ТОГДА ""Ошибка_ТранспортСообщения""
	|	
	|	ИНАЧЕ ""Ошибка""
	|	
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ИЗ
	|	РегистрСведений.[СостоянияОбменовДанными] КАК СостоянияОбменовДанными
	|ГДЕ
	|	  СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|// {ЗАПРОС №1}
	|////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|	ТОГДА ""Успех""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|	ТОГДА ""ВыполненоСПредупреждениями""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято)
	|	ТОГДА ""Предупреждение_СообщениеОбменаБылоРанееПринято""
	|	
	|	КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения)
	|	ТОГДА ""Ошибка_ТранспортСообщения""
	|	
	|	ИНАЧЕ ""Ошибка""
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|	
	|ИЗ
	|	РегистрСведений.[СостоянияОбменовДанными] КАК СостоянияОбменовДанными
	|ГДЕ
	|	  СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДаннымиОбластейДанных");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДанными");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРезультатовЗагрузкиДанных = МассивРезультатовЗапроса[0].Выбрать();
	ВыборкаРезультатовВыгрузкиДанных = МассивРезультатовЗапроса[1].Выбрать();
	
	Если ВыборкаРезультатовЗагрузкиДанных.Следующий() Тогда
		
		СостоянияОбменовДанными.РезультатЗагрузкиДанных = ВыборкаРезультатовЗагрузкиДанных.РезультатВыполненияОбмена;
		
	КонецЕсли;
	
	Если ВыборкаРезультатовВыгрузкиДанных.Следующий() Тогда
		
		СостоянияОбменовДанными.РезультатВыгрузкиДанных = ВыборкаРезультатовВыгрузкиДанных.РезультатВыполненияОбмена;
		
	КонецЕсли;
	
	СостоянияОбменовДанными.УзелИнформационнойБазы = УзелИнформационнойБазы;
	
	Возврат СостоянияОбменовДанными;
КонецФункции

// Возвращает структуру с данными последнего обмена для заданного узла информационной базы и действия при обмене
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СостоянияОбменовДанными - Структура - структура с данными последнего обмена для заданного узла информационной базы
//
Функция СостоянияОбменовДанными(Знач УзелИнформационнойБазы, ДействиеПриОбмене) Экспорт
	
	// возвращаемое значение функции
	СостоянияОбменовДанными = Новый Структура;
	СостоянияОбменовДанными.Вставить("ДатаНачала",    Дата('00010101'));
	СостоянияОбменовДанными.Вставить("ДатаОкончания", Дата('00010101'));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДатаНачала,
	|	ДатаОкончания
	|ИЗ
	|	РегистрСведений.[СостоянияОбменовДанными] КАК СостоянияОбменовДанными
	|ГДЕ
	|	  СостоянияОбменовДанными.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СостоянияОбменовДанными.ДействиеПриОбмене      = &ДействиеПриОбмене
	|";
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДаннымиОбластейДанных");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СостоянияОбменовДанными]", "СостоянияОбменовДанными");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ДействиеПриОбмене",      ДействиеПриОбмене);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СостоянияОбменовДанными, Выборка);
		
	КонецЕсли;
	
	Возврат СостоянияОбменовДанными;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация сеанса

// Получает массив всех планов обмена по которым выполняется обмен данными
// Наличие обмена с каким либо планом обмена определяется по наличию у этого плана обмена узлов кроме предопределенного.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  МассивПлановОбмена - Массив - массив строк (имен) всех планов обмена по которым выполняется обмен данными
//
Функция ПолучитьИспользуемыеПланыОбмена() Экспорт
	
	// возвращаемое значение
	МассивПлановОбмена = Новый Массив;
	
	// список всех узлов в конфигурации
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		Если Не ПланОбменаНеСодержитУзлов(ИмяПланаОбмена) Тогда
			
			МассивПлановОбмена.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПлановОбмена;
	
КонецФункции

// Получает таблицу правил регистрации объектов из информационной базы
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ПравилаРегистрацииОбъектов - ТаблицаЗначений - таблица общих правил регистрации объектов для МРО
// 
Функция ПолучитьПравилаРегистрацииОбъектов() Экспорт
	
	// возвращаемое значение функции
	ПравилаРегистрацииОбъектов = ИнициализацияТаблицыПравилРегистрацииОбъектов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные КАК ПравилаЗачитанные
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойствДляТаблицыЗначенийПРО(ПравилаРегистрацииОбъектов, Выборка.ПравилаЗачитанные.Получить());
		
	КонецЦикла;
	
	Возврат ПравилаРегистрацииОбъектов;
	
КонецФункции

// Получает таблицу правил выборочной регистрации объектов из информационной базы
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ПравилаВыборочнойРегистрацииОбъектов - ТаблицаЗначений - таблица общих правил выборочной регистрации объектов для МРО
// 
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектов() Экспорт
	
	// возвращаемое значение функции
	ПравилаВыборочнойРегистрацииОбъектов = ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные КАК ПравилаЗачитанные
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.ИспользоватьФильтрВыборочнойРегистрацииОбъектов
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПравилОбмена = Выборка.ПравилаЗачитанные.Получить();
		
		ЗаполнитьЗначенияСвойствДляТаблицыЗначений(ПравилаВыборочнойРегистрацииОбъектов, СтруктураПравилОбмена["ПравилаВыборочнойРегистрацииОбъектов"]);
		
	КонецЦикла;
	
	Возврат ПравилаВыборочнойРегистрацииОбъектов;
	
КонецФункции

// Для внутреннего использования
// 
Функция ИнициализацияТаблицыПравилРегистрацииОбъектов() Экспорт
	
	// возвращаемое значение функции
	Правила = Новый ТаблицаЗначений;
	
	Колонки = Правила.Колонки;
	
	Колонки.Добавить("ОбъектМетаданныхИмя", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяПланаОбмена",      Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ИмяРеквизитаФлага", Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ТекстЗапроса",    Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СвойстваОбъекта", Новый ОписаниеТипов("Структура"));
	
	Колонки.Добавить("СвойстваОбъектаСтрокой", Новый ОписаниеТипов("Строка"));
	
	// признаки того, что правила пустые
	Колонки.Добавить("ПравилоПоСвойствамОбъектаПустое", Новый ОписаниеТипов("Булево"));
	
	// обработчики событий
	Колонки.Добавить("ПередОбработкой",            Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПриОбработке",               Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПриОбработкеДополнительный", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПослеОбработки",             Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ЕстьОбработчикПередОбработкой",            Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриОбработке",               Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриОбработкеДополнительный", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеОбработки",             Новый ОписаниеТипов("Булево"));
	
	Колонки.Добавить("ОтборПоСвойствамОбъекта", Новый ОписаниеТипов("ДеревоЗначений"));
	
	// поле для оперативного хранения данных из объекта или ссылки
	Колонки.Добавить("ОтборПоСвойствам", Новый ОписаниеТипов("ДеревоЗначений"));
	
	// добавляем индекс
	Правила.Индексы.Добавить("ИмяПланаОбмена, ОбъектМетаданныхИмя");
	
	Возврат Правила;
	
КонецФункции

// Для внутреннего использования
// 
Функция ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов() Экспорт
	
	// возвращаемое значение функции
	Правила = Новый ТаблицаЗначений;
	
	Колонки = Правила.Колонки;
	
	Колонки.Добавить("Порядок",                        Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                     Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяПланаОбмена",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",              Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыРегистрации",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовРегистрации", Новый ОписаниеТипов("Структура"));
	
	// добавляем индекс
	Правила.Индексы.Добавить("ИмяПланаОбмена, ИмяОбъекта");
	
	Возврат Правила;
	
КонецФункции

// Для внутреннего использования
// 
Функция ПланОбменаНеСодержитУзлов(Знач ИмяПланаОбмена)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК ПланОбмена
	|ГДЕ
	|	ПланОбмена.Ссылка <> &ЭтотУзел
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	Возврат Запрос.Выполнить().Пустой()
	
КонецФункции

// Для внутреннего использования
// 
Процедура ЗаполнитьЗначенияСвойствДляТаблицыЗначенийПРО(ТаблицаПриемник, ТаблицаИсточник)
	
	Для Каждого СтрокаИсточника ИЗ ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗаполнитьЗначенияСвойствДляТаблицыЗначений(ТаблицаПриемник, ТаблицаИсточник)
	
	Для Каждого СтрокаИсточника ИЗ ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ОписаниеОграниченийПередачиДанных(Знач УзелИнформационнойБазы) Экспорт
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле(УзелИнформационнойБазы));
КонецФункции

// Для внутреннего использования
// 
Функция НастройкаОтборовНаУзле(Знач УзелИнформационнойБазы)
	
	Результат = Новый Структура;
	
	УзелИнформационнойБазыОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	НастройкаОтборовНаУзле = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзле();
	
	Для Каждого Настройка Из НастройкаОтборовНаУзле Цикл
		
		Если ТипЗнч(Настройка.Значение) = Тип("Структура") Тогда
			
			ТабличнаяЧасть = Новый Структура;
			
			Для Каждого Колонка Из Настройка.Значение Цикл
				
				ТабличнаяЧасть.Вставить(Колонка.Ключ, УзелИнформационнойБазыОбъект[Настройка.Ключ].ВыгрузитьКолонку(Колонка.Ключ));
				
			КонецЦикла;
			
			Результат.Вставить(Настройка.Ключ, ТабличнаяЧасть);
			
		Иначе
			
			Результат.Вставить(Настройка.Ключ, УзелИнформационнойБазыОбъект[Настройка.Ключ]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Процедура УстановитьРежимЗагрузкиПараметровРаботыПрограммы(Знач РежимЗагрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РежимЗагрузки = Истина
		И ЭтоПодчиненныйУзелРИБ() Тогда
		
		ПараметрыСеанса.ЗагрузкаПараметровРаботыПрограммы = Истина;
		
	Иначе
		
		ПараметрыСеанса.ЗагрузкаПараметровРаботыПрограммы = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Инициализация структуры настроек обмена данными

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
	УзелИнформационнойБазы,
	ДействиеПриОбмене,
	ВидТранспортаСообщенийОбмена,
	ИспользоватьНастройкиТранспорта = Истина
	) Экспорт
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = ДействиеПриОбмене;
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = ВидТранспортаСообщенийОбмена;
	СтруктураНастроекОбмена.ЭтоОбменВРИБ           = ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы);
	
	ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена, ИспользоватьНастройкиТранспорта);
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена);
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена, ИспользоватьНастройкиТранспорта);
	
	// если настройки содержат ошибки, то выходим
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	Если ИспользоватьНастройкиТранспорта Тогда
		
		// инициализируем обработку транспорта сообщений обмена
		ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	// инициализируем обработку обмена данными
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда
		
		ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьСтруктуруНастроекОбменаДляВнешнегоСоединения(УзелИнформационнойБазы, ДействиеПриОбмене, КоличествоЭлементовВТранзакции)
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = ДействиеПриОбмене;
	СтруктураНастроекОбмена.ЭтоОбменВРИБ           = ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы);
	
	СтруктураСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураНастроекОбмена.УзелИнформационнойБазы, "Код, Наименование");
	
	СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = СтруктураСвойств.Код;
	СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = СтруктураСвойств.Наименование;
	
	//
	СтруктураНастроекОбмена.НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	Если КоличествоЭлементовВТранзакции = Неопределено Тогда
		
		КоличествоЭлементовВТранзакции = ?(СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
									СтруктураНастроекОбмена.НастройкиТранспорта.КоличествоЭлементовВТранзакцииЗагрузкиДанных,
									СтруктураНастроекОбмена.НастройкиТранспорта.КоличествоЭлементовВТранзакцииВыгрузкиДанных);
		//
		
	КонецЕсли;
	
	СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции = КоличествоЭлементовВТранзакции;
	
	// ВЫЧИСЛЯЕМЫЕ ЗНАЧЕНИЯ
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	СтруктураНастроекОбмена.ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(СтруктураНастроекОбмена.ИмяПланаОбмена);
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураНастроекОбмена.ТекущийУзелПланаОбмена, "Код");
	
	// получаем ключ сообщения для ЖР
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.COM;
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена);
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// если настройки содержат ошибки, то выходим
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// инициализируем обработку обмена данными
	ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбмена(НастройкаВыполненияОбмена, НомерСтроки) Экспорт
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	ВыполнитьИнициализациюСтруктурыНастроекОбмена(СтруктураНастроекОбмена, НастройкаВыполненияОбмена, НомерСтроки);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена);
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// если настройки содержат ошибки, то выходим
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// инициализируем обработку транспорта сообщений обмена
	ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
	
	// инициализируем обработку обмена данными
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда
		
		ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Получает структуру настроек транспорта для выполнения обмена данными
//
Функция ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена) Экспорт
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене      = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = ВидТранспортаСообщенийОбмена;
	
	ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена, Истина);
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	// если настройки содержат ошибки, то выходим
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат СтруктураНастроекОбмена;
	КонецЕсли;
	
	// инициализируем обработку транспорта сообщений обмена
	ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена);
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Для внутреннего использования
// 
Процедура ВыполнитьИнициализациюСтруктурыНастроекОбмена(СтруктураНастроекОбмена, НастройкаВыполненияОбмена, НомерСтроки)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы         КАК УзелИнформационнойБазы,
	|	НастройкиВыполненияОбменаНастройкиОбмена.УзелИнформационнойБазы.Код     КАК УзелИнформационнойБазыКод,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВидТранспортаОбмена            КАК ВидТранспортаОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие            КАК ДействиеПриОбмене,
	|	НастройкиВыполненияОбменаНастройкиОбмена.КоличествоЭлементовВТранзакции КАК КоличествоЭлементовВТранзакции,
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка                         КАК НастройкаВыполненияОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка.Наименование            КАК НастройкаВыполненияОбменаНаименование,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных) ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ                                                                   КАК ПроизводитьЗагрузкуДанных,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных) ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ                                                                   КАК ПроизводитьВыгрузкуДанных
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиВыполненияОбменаНастройкиОбмена
	|ГДЕ
	|	  НастройкиВыполненияОбменаНастройкиОбмена.Ссылка      = &НастройкаВыполненияОбмена
	|	И НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки = &НомерСтроки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НастройкаВыполненияОбмена", НастройкаВыполненияОбмена);
	Запрос.УстановитьПараметр("НомерСтроки",               НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// заполняем значения свойств структуры
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, Выборка);
	
	СтруктураНастроекОбмена.ЭтоОбменВРИБ = ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = НСтр("ru = 'Обмен данными'");
	
	// выполняем проверку задания основных полей структуры настроек обмена
	ВыполнитьПроверкуОсновныхПолейСтруктурыНастроекОбмена(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтруктураНастроекОбмена.ИмяПланаОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = ОбменДаннымиПовтИсп.ЭтоУзелУниверсальногоОбменаДанными(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПланыОбмена[СтруктураНастроекОбмена.ИмяПланаОбмена].ЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код;
	
	СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
	
	// получаем ключ сообщения для ЖР
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	//
	СтруктураНастроекОбмена.НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ВидТранспортаОбмена);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(
		СтруктураНастроекОбмена,
		ИспользоватьНастройкиТранспорта
	)
	
	СтруктураСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураНастроекОбмена.УзелИнформационнойБазы, "Код, Наименование");
	
	СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = СтруктураСвойств.Код;
	СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = СтруктураСвойств.Наименование;
	
	// Получаем настройки транспорта обмена
	СтруктураНастроекОбмена.НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	Если СтруктураНастроекОбмена.НастройкиТранспорта <> Неопределено Тогда
		
		Если ИспользоватьНастройкиТранспорта Тогда
			
			// если не указан вид транспорта, то используем значение по умолчанию
			Если СтруктураНастроекОбмена.ВидТранспортаОбмена = Неопределено Тогда
				СтруктураНастроекОбмена.ВидТранспортаОбмена = СтруктураНастроекОбмена.НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
			КонецЕсли;
			
			// если вид транспорта не задан, то используем транспорт FILE
			Если Не ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
				
				СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
				
			КонецЕсли;
			
			СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
			
		КонецЕсли;
		
		СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции = ?(СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
									СтруктураНастроекОбмена.НастройкиТранспорта.КоличествоЭлементовВТранзакцииЗагрузкиДанных,
									СтруктураНастроекОбмена.НастройкиТранспорта.КоличествоЭлементовВТранзакцииВыгрузкиДанных
		);
		
		Если СтруктураНастроекОбмена.НастройкиТранспорта.Свойство("WSИспользоватьПередачуБольшогоОбъемаДанных") Тогда
			СтруктураНастроекОбмена.ИспользоватьПередачуБольшогоОбъемаДанных = СтруктураНастроекОбмена.НастройкиТранспорта.WSИспользоватьПередачуБольшогоОбъемаДанных;
		КонецЕсли;
		
	КонецЕсли;
	
	// ЗНАЧЕНИЯ ПО УМОЛЧАНИЮ
	СтруктураНастроекОбмена.НастройкаВыполненияОбмена             = Неопределено;
	СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование = "";
	
	// ВЫЧИСЛЯЕМЫЕ ЗНАЧЕНИЯ
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	СтруктураНастроекОбмена.ИмяПланаОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = ОбменДаннымиПовтИсп.ЭтоУзелУниверсальногоОбменаДанными(СтруктураНастроекОбмена.УзелИнформационнойБазы);
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПланыОбмена[СтруктураНастроекОбмена.ИмяПланаОбмена].ЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код;
	
	// получаем ключ сообщения для ЖР
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена.УзелИнформационнойБазы, СтруктураНастроекОбмена.ДействиеПриОбмене);
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция СтруктураНастроекОбменаБазовая()
	
	СтруктураНастроекОбмена = Новый Структура;
	
	// структура настроек по полям запроса
	
	СтруктураНастроекОбмена.Вставить("ДатаНачала");
	СтруктураНастроекОбмена.Вставить("ДатаОкончания");
	
	СтруктураНастроекОбмена.Вставить("НомерСтроки");
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбменаНаименование");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыКод", "");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыНаименование", "");
	СтруктураНастроекОбмена.Вставить("ВидТранспортаОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакции", 0); // все элементы в одной транзакции
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗагрузкуДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("ПроизводитьВыгрузкуДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("ИспользоватьПередачуБольшогоОбъемаДанных", Ложь);
	
	// структура настроек дополнительная
	СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
	СтруктураНастроекОбмена.Вставить("ЭтоОбменВРИБ", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными");
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("ИмяПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаКод");
	
	СтруктураНастроекОбмена.Вставить("ОбменПоПравиламКонвертацииОбъектов", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ИмяОбработкиТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации");
	
	СтруктураНастроекОбмена.Вставить("НастройкиТранспорта");
	
	СтруктураНастроекОбмена.Вставить("ПравилаКонвертацииОбъектов");
	СтруктураНастроекОбмена.Вставить("ПравилаЗагружены", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковВыгрузки ", Ложь);
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковЗагрузки", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки", "");
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиЗагрузки", "");
	СтруктураНастроекОбмена.Вставить("РежимПротоколированияОбменаДанными", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаПротоколаОбмена", "");
	СтруктураНастроекОбмена.Вставить("ПродолжитьПриОшибке", Ложь);
	
	// структура для регистрации событий в ЖР
	СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("СообщениеПриОбмене",           "");
	СтруктураНастроекОбмена.Вставить("СтрокаСообщенияОбОшибке",      "");
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Для внутреннего использования
// 
Процедура ВыполнитьПроверкуОсновныхПолейСтруктурыНастроекОбмена(СтруктураНастроекОбмена)
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		
		// узел информационной базы не должен быть пустым
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Не задан узел информационной базы с которым нужно производить обмен информацией. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан вид транспорта обмена. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ДействиеПриОбмене) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не указано выполняемое действие (выгрузка / загрузка). Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена, ИспользоватьНастройкиТранспорта = Истина)
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		
		// узел информационной базы не должен быть пустым
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Не задан узел информационной базы с которым нужно производить обмен информацией. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли ИспользоватьНастройкиТранспорта И НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задан вид транспорта обмена. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ДействиеПриОбмене) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не указано выполняемое действие (выгрузка / загрузка). Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы.ПометкаУдаления Тогда
		
		// узел информационной базы не должен быть помечен на удаление
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел информационной базы помечен на удаление. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена Тогда
		
		// сами с собой не обмениваемся
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Нельзя организовать обмен данными с текущим узлом информационной базы. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли ПустаяСтрока(СтруктураНастроекОбмена.УзелИнформационнойБазыКод)
		  ИЛИ ПустаяСтрока(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод) Тогда
		
		// у узлов участвующих в обмене должен быть не пустой код
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Один из узлов обмена имеет пустой код. Обмен отменен.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ОтладкаОбработчиковВыгрузки Тогда
		
		ФайлОбработкиВыгрузки = Новый Файл(СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки);
		
		Если Не ФайлОбработкиВыгрузки.Существует() Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Файл внешней обработки для отладки выгрузки не существует. Обмен отменен.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			
			ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ОтладкаОбработчиковЗагрузки Тогда
		
		ФайлОбработкиЗагрузки = Новый Файл(СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиЗагрузки);
		
		Если Не ФайлОбработкиЗагрузки.Существует() Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Файл внешней обработки для отладки загрузки не существует. Обмен отменен.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
			
			ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьИнициализациюОбработкиОбмена(СтруктураНастроекОбмена)
	
	// если настройки содержат ошибки, то не производим инициализацию
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// создание
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовРаспределенныхИнформационныхБаз.Создать();
	
	// инициализация свойств
	ОбработкаОбменаДанными.УзелИнформационнойБазы          = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	ОбработкаОбменаДанными.КоличествоЭлементовВТранзакции  = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными", ОбработкаОбменаДанными);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьИнициализациюОбработкиОбменаПоПравиламКонвертации(СтруктураНастроекОбмена)
	
	Перем ОбработкаОбменаДанными;
	
	// если настройки содержат ошибки, то не производим инициализацию
	Если СтруктураНастроекОбмена.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ОбработкаОбменаДанными = ПолучитьОбработкуОбменаДаннымиДляВыгрузки(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		ОбработкаОбменаДанными = ПолучитьОбработкуОбменаДаннымиДляЗагрузки(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными", ОбработкаОбменаДанными);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьИнициализациюОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена)
	
	// создаем обработку транспорта
	ОбработкаТранспортаСообщенийОбмена = Обработки[СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена].Создать();
	
	ЭтоИсходящееСообщение = СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных;
	
	// заполняем общие реквизиты, одинаковые для всех обработок транспорта
	ОбработкаТранспортаСообщенийОбмена.ШаблонИмениФайлаСообщения = ПолучитьШаблонИмениФайлаСообщения(СтруктураНастроекОбмена.ТекущийУзелПланаОбмена, СтруктураНастроекОбмена.УзелИнформационнойБазы, ЭтоИсходящееСообщение);
	
	// заполняем настойки транспорта, различные для каждой обработки транспорта
	ЗаполнитьЗначенияСвойств(ОбработкаТранспортаСообщенийОбмена, СтруктураНастроекОбмена.НастройкиТранспорта);
	
	// Инициализируем транспорт
	ОбработкаТранспортаСообщенийОбмена.Инициализация();
	
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена", ОбработкаТранспортаСообщенийОбмена);
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ПолучитьОбработкуОбменаДаннымиДляВыгрузки(СтруктураНастроекОбмена)
	
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Выгрузка";
	
	УстановитьПравилаОбменаВыгрузкиДанных(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	// задаем узлы обмена
	ОбработкаОбменаДанными.УзелДляОбмена         = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	ОбработкаОбменаДанными.УзелДляФоновогоОбмена = Неопределено;
	
	ОбработкаОбменаДанными.НеВыгружатьОбъектыПоСсылкам = Истина;
	ОбработкаОбменаДанными.ИмяФайлаПравилОбмена        = "1";
	
	УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	Возврат ОбработкаОбменаДанными;
	
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьОбработкуОбменаДаннымиДляЗагрузки(СтруктураНастроекОбмена)
	
	ОбработкаОбменаДанными = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	ОбработкаОбменаДанными.РежимОбмена = "Загрузка";
	ОбработкаОбменаДанными.УзелОбменаЗагрузкаДанных = СтруктураНастроекОбмена.УзелИнформационнойБазы;
	
	УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
	
	Возврат ОбработкаОбменаДанными
	
КонецФункции

// Для внутреннего использования
// 
Процедура УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДанными, СтруктураНастроекОбмена, ОбменСБСП20 = Ложь)
	
	ОбработкаОбменаДанными.ДописыватьДанныеВПротоколОбмена = Ложь;
	ОбработкаОбменаДанными.ВыгружатьТолькоРазрешенные      = Ложь;
	
	ОбработкаОбменаДанными.ИспользоватьТранзакции         = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции <> 1;
	ОбработкаОбменаДанными.КоличествоОбъектовНаТранзакцию = СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции;
	
	ОбработкаОбменаДанными.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
	
	Если Не ОбменСБСП20 Тогда
		
		УстановитьНастройкиРежимаОтладкиДляОбработки(ОбработкаОбменаДанными, СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПравилаОбменаВыгрузкиДанных(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбмена)
	
	ПравилаКонвертацииОбъектов = РегистрыСведений.ПравилаДляОбменаДанными.ПолучитьЗачитанныеПравилаКонвертацииОбъектов(СтруктураНастроекОбмена.ИмяПланаОбмена);
	
	Если ПравилаКонвертацииОбъектов = Неопределено Тогда
		
		// правила обмена должны быть указаны
		НСтрока = НСтр("ru = 'Не заданы правила конвертации для плана обмена %1. Выгрузка данных отменена.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, СтруктураНастроекОбмена.ИмяПланаОбмена);
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
		Возврат;
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.СохраненныеНастройки = ПравилаКонвертацииОбъектов;
	
	ОбработкаОбменаДаннымиXML.ВосстановитьПравилаИзВнутреннегоФормата();
	
КонецПроцедуры

// Считывает настройки отладки из ИБ и устанавливает их для структуры обмена
//
Процедура УстановитьНастройкиРежимаОтладкиДляСтруктуры(СтруктураНастроекОбмена, ЭтоВнешнееСоединение = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПроизводитьВыгрузку
	|			ТОГДА ПравилаДляОбменаДанными.РежимОтладкиВыгрузки
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтладкаОбработчиковВыгрузки,
	|	ВЫБОР
	|		КОГДА &ПроизводитьВыгрузку
	|			ТОГДА ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиВыгрузки
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяФайлаВнешнейОбработкиОтладкиВыгрузки,
	|	ВЫБОР
	|		КОГДА &ПроизводитьЗагрузку
	|			ТОГДА ПравилаДляОбменаДанными.РежимОтладкиЗагрузки
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтладкаОбработчиковЗагрузки,
	|	ВЫБОР
	|		КОГДА &ПроизводитьЗагрузку
	|			ТОГДА ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиЗагрузки
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяФайлаВнешнейОбработкиОтладкиЗагрузки,
	|	ПравилаДляОбменаДанными.РежимПротоколированияОбменаДанными КАК РежимПротоколированияОбменаДанными,
	|	ПравилаДляОбменаДанными.ИмяФайлаПротоколаОбмена КАК ИмяФайлаПротоколаОбмена,
	|	ПравилаДляОбменаДанными.НеОстанавливатьПоОшибке КАК ПродолжитьПриОшибке
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.РежимОтладки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ПроизводитьВыгрузкуДанных = Ложь;
	Если Не СтруктураНастроекОбмена.Свойство("ПроизводитьВыгрузкуДанных", ПроизводитьВыгрузкуДанных) Тогда
		ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	КонецЕсли;
	
	ПроизводитьЗагрузкуДанных = Ложь;
	Если Не СтруктураНастроекОбмена.Свойство("ПроизводитьЗагрузкуДанных", ПроизводитьЗагрузкуДанных) Тогда
		ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяПланаОбмена", СтруктураНастроекОбмена.ИмяПланаОбмена);
	Запрос.УстановитьПараметр("ПроизводитьВыгрузку", ПроизводитьВыгрузкуДанных);
	Запрос.УстановитьПараметр("ПроизводитьЗагрузку", ПроизводитьЗагрузкуДанных);
	
	Результат = Запрос.Выполнить();
	
	ИмяФайлаПротокола = "";
	Если ЭтоВнешнееСоединение И СтруктураНастроекОбмена.Свойство("ИмяФайлаПротоколаОбмена", ИмяФайлаПротокола)
		И Не ПустаяСтрока(ИмяФайлаПротокола) Тогда
		
		СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена = ДобавитьЛитералКИмениФайла(ИмяФайлаПротокола, "ВнешнееСоединение")
	
	КонецЕсли;
	
	Если Не Результат.Пустой() И Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ТаблицаНастроек = Результат.Выгрузить();
		СтрокаТаблицы = ТаблицаНастроек[0];
		
		ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, СтрокаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

// Считывает настройки отладки из ИБ и устанавливает их для структуры настроек обмена
//
Процедура УстановитьНастройкиРежимаОтладкиДляОбработки(ОбработкаОбменаДанными, СтруктураНастроекОбмена)
	
	Если СтруктураНастроекОбмена.Свойство("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки") Тогда
		
		ОбработкаОбменаДанными.ОтладкаОбработчиковВыгрузки = СтруктураНастроекОбмена.ОтладкаОбработчиковВыгрузки;
		ОбработкаОбменаДанными.ОтладкаОбработчиковЗагрузки = СтруктураНастроекОбмена.ОтладкаОбработчиковЗагрузки;
		ОбработкаОбменаДанными.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки = СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки;
		ОбработкаОбменаДанными.ИмяФайлаВнешнейОбработкиОтладкиЗагрузки = СтруктураНастроекОбмена.ИмяФайлаВнешнейОбработкиОтладкиЗагрузки;
		ОбработкаОбменаДанными.РежимПротоколированияОбменаДанными = СтруктураНастроекОбмена.РежимПротоколированияОбменаДанными;
		ОбработкаОбменаДанными.ИмяФайлаПротоколаОбмена = СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена;
		ОбработкаОбменаДанными.ПродолжитьПриОшибке = СтруктураНастроекОбмена.ПродолжитьПриОшибке;
		
		Если СтруктураНастроекОбмена.РежимПротоколированияОбменаДанными Тогда
			
			Если СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена = "" Тогда
				ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений = Истина;
				ОбработкаОбменаДанными.ВыводВПротоколИнформационныхСообщений = Ложь;
			Иначе
				ОбработкаОбменаДанными.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
				ОбработкаОбменаДанными.ВыводВПротоколИнформационныхСообщений = Истина;
				ОбработкаОбменаДанными.ИмяФайлаПротоколаОбмена = СтруктураНастроекОбмена.ИмяФайлаПротоколаОбмена;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает для обработки настройки выгрузки
//
Процедура УстановитьНастройкиОтладкиВыгрузкиДляПравилОбмена(ОбработкаОбменаДанными, ИмяПланаОбмена, РежимОтладки) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.РежимОтладкиВыгрузки КАК ОтладкаОбработчиковВыгрузки,
	|	ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиВыгрузки КАК ИмяФайлаВнешнейОбработкиОтладкиВыгрузки
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И &РежимОтладки = Истина";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	Запрос.УстановитьПараметр("РежимОтладки", РежимОтладки);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Или ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ОбработкаОбменаДанными.ОтладкаОбработчиковВыгрузки = Ложь;
		ОбработкаОбменаДанными.ИмяФайлаВнешнейОбработкиОтладкиВыгрузки = "";
		
	Иначе
		
		ТаблицаНастроек = Результат.Выгрузить();
		НастройкиОтладки = ТаблицаНастроек[0];
		
		ЗаполнитьЗначенияСвойств(ОбработкаОбменаДанными, НастройкиОтладки);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает для обработки настройки загрузки
//
Процедура УстановитьНастройкиОтладкиЗагрузкиДляПравилОбмена(ОбработкаОбменаДанными, ИмяПланаОбмена) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.РежимОтладкиЗагрузки КАК ОтладкаОбработчиковЗагрузки,
	|	ПравилаДляОбменаДанными.ИмяФайлаОбработкиДляОтладкиЗагрузки КАК ИмяФайлаВнешнейОбработкиОтладкиЗагрузки
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.РежимОтладки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Или ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ОбработкаОбменаДанными.ОтладкаОбработчиковЗагрузки = Ложь;
		ОбработкаОбменаДанными.ИмяФайлаВнешнейОбработкиОтладкиЗагрузки = "";
		
	Иначе
		
		ТаблицаНастроек = Результат.Выгрузить();
		НастройкиОтладки = ТаблицаНастроек[0];
		
		ЗаполнитьЗначенияСвойств(ОбработкаОбменаДанными, НастройкиОтладки);
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена)
	
	СтруктураНастроекОбмена.Отказ = Истина;
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ПолучитьШаблонИмениФайлаСообщения(ТекущийУзелПланаОбмена, УзелИнформационнойБазы, ЭтоИсходящееСообщение)
	
	УзелОтправитель = ?(ЭтоИсходящееСообщение, ТекущийУзелПланаОбмена, УзелИнформационнойБазы);
	УзелПолучатель  = ?(ЭтоИсходящееСообщение, УзелИнформационнойБазы, ТекущийУзелПланаОбмена);
	
	Возврат ИмяФайлаСообщенияОбмена(СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОтправитель, "Код")),
									СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелПолучатель, "Код")));
	//
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Для внутреннего использования
// 
Функция РезультатЗапросаВСтруктуру(Знач РезультатЗапроса) Экспорт
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Функция ТаблицаЗначенийИзДереваЗначений(Дерево)
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из Дерево.Колонки Цикл
		
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	РазвернутьДеревоЗначений(Результат, Дерево.Строки);
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Процедура РазвернутьДеревоЗначений(Таблица, Дерево)
	
	Для Каждого СтрокаДерева Из Дерево Цикл
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			РазвернутьДеревоЗначений(Таблица, СтрокаДерева.Строки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление даты синхронизации.
//
// Параметры:
// ДатаСинхронизации – Дата. Абсолютная дата синхронизации данных.
//
Функция ПредставлениеДатыСинхронизации(Знач ДатаСинхронизации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		Возврат НСтр("ru = 'Синхронизация не выполнялась.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Последняя синхронизация: %1'"),
		ОтносительнаяДатаСинхронизации(ДатаСинхронизации)
	);
КонецФункции

// Возвращает представление относительной даты синхронизации.
//
// Параметры:
// ДатаСинхронизации – Дата. Абсолютная дата синхронизации данных.
//
// Интервалы времени:
//  Никогда             (Т = пустая дата)
//  Сейчас              (Т < 5 мин)
//  5 минут назад       (5 мин  < Т < 15 мин)
//  15 минут назад      (15 мин  < Т < 30 мин)
//  30 минут назад      (30 мин  < Т < 1 час)
//  1 час назад         (1 час  < Т < 2 час)
//  2 часа назад        (2 час  < Т < 3 час)
//  Сегодня, 12:44:12   (3 час  < Т < вчера)
//  Вчера, 22:30:45     (вчера  < Т < позавчера)
//  Позавчера, 21:22:54 (позавчера  < Т < поза-позавчера)
//  <12 марта 2012г.>   (поза-позавчера < Т)
//
Функция ОтносительнаяДатаСинхронизации(Знач ДатаСинхронизации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		
		Возврат НСтр("ru = 'Никогда'");
		
	КонецЕсли;
	
	ДатаТекущая = ТекущаяДатаСеанса();
	
	Интервал = ДатаТекущая - ДатаСинхронизации;
	
	Если Интервал < 0 Тогда // 0 мин
		
		Результат = Формат(ДатаСинхронизации, "ДЛФ=DD");
		
	ИначеЕсли Интервал < 60 * 5 Тогда // 5 мин
		
		Результат = НСтр("ru = 'Сейчас'");
		
	ИначеЕсли Интервал < 60 * 15 Тогда // 15 мин
		
		Результат = НСтр("ru = '5 минут назад'");
		
	ИначеЕсли Интервал < 60 * 30 Тогда // 30 мин
		
		Результат = НСтр("ru = '15 минут назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 1 Тогда // 1 час
		
		Результат = НСтр("ru = '30 минут назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 2 Тогда // 2 часа
		
		Результат = НСтр("ru = '1 час назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 3 Тогда // 3 часа
		
		Результат = НСтр("ru = '2 часа назад'");
		
	Иначе
		
		КоличествоДнейРазницы = КоличествоДнейРазницы(ДатаСинхронизации, ДатаТекущая);
		
		Если КоличествоДнейРазницы = 0 Тогда // сегодня
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сегодня, %1'"), Формат(ДатаСинхронизации, "ДЛФ=T"));
			
		ИначеЕсли КоличествоДнейРазницы = 1 Тогда // вчера
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вчера, %1'"), Формат(ДатаСинхронизации, "ДЛФ=T"));
			
		ИначеЕсли КоличествоДнейРазницы = 2 Тогда // позавчера
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Позавчера, %1'"), Формат(ДатаСинхронизации, "ДЛФ=T"));
			
		Иначе // давно
			
			Результат = Формат(ДатаСинхронизации, "ДЛФ=DD");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция КоличествоДнейРазницы(Знач Дата1, Знач Дата2)
	
	Возврат Цел((НачалоДня(Дата2) - НачалоДня(Дата1)) / 86400);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Константы

// Функция-свойство: возвращает литерал обозначения строки неограниченной длины.
//
// Тип: Строка
//
Функция СтрокаНеограниченнойДлины() Экспорт
	
	Возврат "(снд)";
	
КонецФункции

// Функция-свойство: возвращает литерал обозначения узла-XML, который содержит значение константы ПРО
//
// Тип: Строка
//
Функция ЭлементОтбораСвойствоЗначениеКонстанты() Экспорт
	
	Возврат "ЗначениеКонстанты";
	
КонецФункции

// Функция-свойство: возвращает литерал обозначения узла-XML, который содержит алгоритм получения значения
//
// Тип: Строка
//
Функция ЭлементОтбораСвойствоАлгоритмЗначения() Экспорт
	
	Возврат "АлгоритмЗначения";
	
КонецФункции

// Функция-свойство: возвращает имя файла, который используется для проверки подключения обработки транспорта
//
// Тип: Строка
//
Функция ИмяФайлаПроверкиПодключения() Экспорт
	
	Возврат "ConnectionCheckFile.tmp";
	
КонецФункции

// Для внутреннего использования
// 
Функция ВариантРаботыИнформационнойБазыФайловый() Экспорт
	
	Возврат 0;
	
КонецФункции

// Для внутреннего использования
// 
Функция ВариантРаботыИнформационнойБазыКлиентСерверный() Экспорт
	
	Возврат 1;
	
КонецФункции

// Для внутреннего использования
// 
Функция ЭтоОшибкаНомерСообщенияМеньшеИлиРавенНомеруРанееПринятогоСообщения(ОписаниеОшибки)
	
	Возврат Найти(НРег(ОписаниеОшибки), НРег("Номер сообщения меньше или равен")) > 0;
	
КонецФункции

// Для внутреннего использования
// 
Функция СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Установка подключения к web-сервису'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Для внутреннего использования
// 
Функция СобытиеЖурналаРегистрацииЗагрузкаПравилДляОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Загрузка правил'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Для внутреннего использования
// 
Функция СобытиеЖурналаРегистрацииСозданиеОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Создание обмена данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Для внутреннего использования
// 
Функция СобытиеЖурналаРегистрацииУдалениеВременногоФайла() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными.Удаление временного файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Для внутреннего использования
// 
Функция ТребуетсяУстановкаОбновления() Экспорт
	
	Возврат КонфигурацияИзменена() И ЭтоПодчиненныйУзелРИБ();
	
КонецФункции

// Возвращает таблицу состава узла (только ссылочный тип)
//
//  Параметры:
//      УзелОбмена:    ссылка на анализируемый узел обмена
//      Периодические: флаг того, что надо включать в результат объекты с датой (документы и т.п.)
//      Справочные:    флаг того, что надо включать в результат  нормативно-справочные объекты
//  Колонки результата:
//      ПолноеИмяМетаданных - Полное имя метаданных (имя таблицы для запроса)
//      ПредставлениеСписка - Представление списка для таблицы
//      Представление       - Представление объекта для таблицы
//      ИндексКартинки      - Индекс картинки согласно "БиблиотекаКартинок.КоллекцияОбъектыМетаданных"
//      Тип                 - Соответствующий тип
//
Функция СсылочныеТаблицыСоставаУзла(УзелОбмена, Периодические=Истина, Справочные=Истина) Экспорт
	Возврат ОбменДаннымиПовтИсп.СсылочныеТаблицыСоставаУзла(УзелОбмена, Периодические, Справочные);
КонецФункции

// Возвращает расширенное представление объекта
//
Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	Если ПараметрОбъект=Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Мета = ?(ТипЗнч(ПараметрОбъект)=Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	// Реквизитов представления может не быть, обходим через структуру
	Представление = Новый Структура("РасширенноеПредставлениеОбъекта, ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, Мета);
	Если Не ПустаяСтрока(Представление.РасширенноеПредставлениеОбъекта) Тогда
		Возврат Представление.РасширенноеПредставлениеОбъекта;
	ИначеЕсли Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат Мета.Представление();
КонецФункции

// Возвращает расширенное представление списка объектов
//
Функция ПредставлениеСпискаОбъектов(ПараметрОбъект) Экспорт
	Если ПараметрОбъект=Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Мета = ?(ТипЗнч(ПараметрОбъект)=Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	// Реквизитов представления может не быть, обходим через структуру
	Представление = Новый Структура("РасширенноеПредставлениеСписка, ПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(Представление, Мета);
	Если Не ПустаяСтрока(Представление.РасширенноеПредставлениеСписка) Тогда
		Возврат Представление.РасширенноеПредставлениеСписка;
	ИначеЕсли Не ПустаяСтрока(Представление.ПредставлениеСписка) Тогда
		Возврат Представление.ПредставлениеСписка;
	КонецЕсли;
	
	Возврат Мета.Представление();
КонецФункции

// Возвращает флаг доступности выгрузки для указанной ссылке на узле
//
//  Параметры:
//      УзелОбмена:             ссылка на узел плана обмена, возможность выгрузки по которому проверяется
//      Ссылка:                 ссылка на проверяемый объект.
//      ДополнительныеСвойства: необязательная структура с дополнительными свойствами, передаваемыми через объект
//
Функция ВыгрузкаСсылкиРазрешена(УзелОбмена, Ссылка, ДополнительныеСвойства=Неопределено) Экспорт
	
	ОбъектСсылки = Ссылка.ПолучитьОбъект();
	Если ОбъектСсылки=Неопределено Тогда
		// Объект удален, можно.
		Возврат Истина;
	КонецЕсли;
	
	Если ДополнительныеСвойства<>Неопределено Тогда
		Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл
			ОбъектСсылки.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Отправка = ОтправкаЭлементаДанных.Авто;
	ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ОбъектСсылки, Отправка, , УзелОбмена);
	Возврат Отправка<>ОтправкаЭлементаДанных.Удалить;
	
КонецФункции

// Обертки фоновых процедур интерактивного изменения выгрузки
//
Процедура ИнтерактивноеИзменениеВыгрузки_СформироватьТабличныйДокументПользователя(СтруктураОбработки, АдресРезультата, ПолноеИмяМетаданных, Представление) Экспорт
	ОбъектОтчета = ОбъектОтчетаПоНастройкам(СтруктураОбработки);
	
	Результат = ОбъектОтчета.СформироватьТабличныйДокументПользователя(ПолноеИмяМетаданных, Представление);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ИнтерактивноеИзменениеВыгрузки_СформироватьДеревоЗначений(СтруктураОбработки, АдресРезультата, СписокИменМетаданных) Экспорт
	ОбъектОтчета = ОбъектОтчетаПоНастройкам(СтруктураОбработки);
	
	Результат = ОбъектОтчета.СформироватьДеревоЗначений(СписокИменМетаданных);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ИнтерактивноеИзменениеВыгрузки_ЗарегистрироватьДополнительныеИзменения(СтруктураОбработки) Экспорт
	ОбъектОтчета = ОбъектОтчетаПоНастройкам(СтруктураОбработки);
	
	ОбъектОтчета.ЗарегистрироватьДополнительныеИзменения();
КонецПроцедуры

// Для внутреннего использования
// 
Функция ОбъектОтчетаПоНастройкам(Знач Настройки)
	ОбъектОтчета = Обработки.ИнтерактивноеИзменениеВыгрузки.Создать();
	
	ОбъектОтчета.КомпоновщикОтбораВсехДокументов = ОбъектОтчета.КомпоновщикНастроекОбщегоОтбора();
	ЗаполнитьЗначенияСвойств(ОбъектОтчета, Настройки,, "КомпоновщикОтбораВсехДокументов");
	
	ЭлементыОтбора = ОбъектОтчета.КомпоновщикОтбораВсехДокументов.Настройки.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	ОбъектОтчета.ДобавитьЗначенияОтбораКомпоновки(
		ЭлементыОтбора, Настройки.НастройкиКомпоновщикаОтбораВсехДокументов.Отбор.Элементы
	);
	
	Возврат ОбъектОтчета;
КонецФункции

// Обслуживание фоновых заданий
Функция ЗапуститьФоновоеЗадание(ИмяМетода, ПараметрыМетода, ОписаниеМетода="") Экспорт
	
	Задание = ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыМетода, , ОписаниеМетода);
	Попытка 
		Задание.ОжидатьЗавершения( ?(ПолучитьСкоростьКлиентскогоСоединения()=СкоростьКлиентскогоСоединения.Низкая, 4, 2) );
		Возврат Неопределено;
	Исключение
		Если Задание.Состояние=СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	Возврат Задание.УникальныйИдентификатор;
	
КонецФункции

// Для внутреннего использования
// 
Функция ФоновоеЗаданиеЗавершено(ИдентификаторЗадания) Экспорт
	
	Если ИдентификаторЗадания=Неопределено Тогда
		Возврат Истина;     // Файловая база
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание=Неопределено Тогда
		Возврат Истина;     // Все непонятное - завершено
	КонецЕсли;
	
	Возврат Задание.Состояние<>СостояниеФоновогоЗадания.Активно;
КонецФункции

// Для внутреннего использования
// 
Процедура ОтменитьФоновоеЗадание(ИдентификаторЗадания) Экспорт
	
	Если ИдентификаторЗадания<>Неопределено Тогда 
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание<>Неопределено Тогда
			Задание.Отменить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция СобытиеЖурналаРегистрацииОбменДанными() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

