////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФормуОбъекта(Параметры, Отказ);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
			#Если ВебКлиент Тогда
				ПутьКФайлуПросмотра = АдресФайлаВХранилище;
			#Иначе
				ПутьКФайлуПросмотра = ПолучитьИмяВременногоФайла(РасширениеФайла);
				ДДФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
				ДДФайла.Записать(ПутьКФайлуПросмотра);
			#КонецЕсли
			Если Найти("HTML PDF DOCX XLSX", ВРег(РасширениеФайла)) > 0 Тогда
				Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаДругойФормат;
			Иначе
				#Если НЕ ВебКлиент Тогда
					ЗапуститьПриложение(ПутьКФайлуПросмотра);
				#КонецЕсли
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			УстановитьВидимостьДоступностьНаКлиенте();
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ДопДанные") Тогда
		СохранитьЭДНаДиск(Неопределено);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Если Не ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			Попытка
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
				Иначе
					МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
				КонецЕсли;
				СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
			Исключение
			КонецПопытки;
		КонецЕсли;
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СкрытьДопДанные(ОтключитьВыводДопДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Объект.ВладелецФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыводДопДанныхПриИзменении(Элемент)
	
	СкрытьДопДанные(ОтключитьВыводДопДанных);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Квитанция) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ПараметрыФормы = Новый Структура("Ключ", Квитанция);
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	ИзменитьТекстСопроводительнойЗаписки(Объект.ДополнительнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЭЛЕКТРОННЫЕ ЦИФРОВЫЕ ПОДПИСИ

&НаКлиенте
Процедура ЭЦППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ЭЦП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭЦПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Поле.Имя, "ЭЦПКомуВыданСертификат") > 0 Тогда
		ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке
				И НЕ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(Объект.ВладелецФайла, ЭтаФорма, , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьЭД(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Модифицированность = Ложь;
	ТекстПредупреждения = НСтр("ru = 'Внимание! Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?'");
	Ответ = Вопрос(ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыбЗнач = Объект.ВладелецФайла;
	ОписаниеТипов = Новый ОписаниеТипов();
	
	Если ВвестиЗначение(ВыбЗнач, "Укажите документ отражения в учете") Тогда
		ПерепривязатьЭлектронныйДокумент(ВыбЗнач);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		СохранитьБанковскиеДокументыСбербанка(Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = Объект.Ссылка;
	
	ДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
	
	ДанныеФайлаДляСохранения = Новый Структура;

	ДанныеФайлаДляСохранения.Вставить("Расширение", ДанныеФайла.Расширение);
	ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ДанныеФайла.Наименование);
	ДанныеФайлаДляСохранения.Вставить("АдресХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн")
			И Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка") Тогда
		СсылкаНаХранилище = "";
		ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеВыписки(ПрисоединенныйФайл, СсылкаНаХранилище);
		Если ЗначениеЗаполнено(СсылкаНаХранилище) Тогда
			ДанныеФайлаДляСохранения = Новый Структура;
			ДанныеФайлаДляСохранения.Вставить("Расширение", "txt");
			ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ДанныеФайла.Наименование);
			ДанныеФайлаДляСохранения.Вставить("АдресХранилища", СсылкаНаХранилище);
			ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеФайла.ПодписанЭЦП Тогда
		
		Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
		Если Настройка = "Спрашивать" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Объект",                  ПрисоединенныйФайл);
			ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
			
		ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
			МассивСтруктурПодписей = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьВсеПодписи(ПрисоединенныйФайл,
				УникальныйИдентификатор);
		КонецЕсли;
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			Индекс = 0;
			Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
				Индекс = Индекс + 1;
				ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
				Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
					ИмяФайлаПодписи = ДанныеФайла.Наименование + "_" + Индекс + ".p7s";
				КонецЕсли;
				// Сохраним Файл из БД на диск

				ДанныеФайлаДляСохранения = Новый Структура;
				ДанныеФайлаДляСохранения.Вставить("Расширение", "");
				ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ИмяФайлаПодписи);
				ДанныеФайлаДляСохранения.Вставить("АдресХранилища", СтруктураПодписи.АдресПодписи);
				
				ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			И Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение") Тогда
		ДанныеФайла = ДанныеСлужебногоЭДБанка(ПрисоединенныйФайл, УникальныйИдентификатор);
		Если НЕ ДанныеФайла = Неопределено Тогда
			ДанныеФайлаДляСохранения = Новый Структура;
			ДанныеФайлаДляСохранения.Вставить("Расширение",         "txt");
			ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", ДанныеФайла.Наименование);
			ДанныеФайлаДляСохранения.Вставить("АдресХранилища",     ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ЭЦП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЖурналуСобытийЭД(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки, Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн")
		И (Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение")
			ИЛИ Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки")
			ИЛИ Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка")) Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru = 'Невозможна проверка подписей из WEB-браузера'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		#Иначе
			ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписейСбербанка(Объект.Ссылка);
		#КонецЕсли
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодуль(Объект.СоглашениеЭД);
		Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписейЧерезДопОбработку(Объект.Ссылка,
		                                                                               ВнешнийПодключаемыйМодуль);
	Иначе
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(Объект.Ссылка, Истина);
		Иначе
			ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	ЗаполнитьТаблицуЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПодтверждениеЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	НовыйЭД = Неопределено;
	ЭлектронныеДокументыСлужебныйКлиент.УтвердитьЭД(Объект.ВладелецФайла, Объект.Ссылка, , НовыйЭД);
	ОбновитьОтображениеДанных();

	Если НовыйЭД <> Неопределено Тогда
		
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", Новый Структура("Ключ", НовыйЭД),
			ВладелецФормы, УникальныйИдентификатор, Окно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭД(Команда)
	
	ОчиститьСообщения();
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	ВыполнитьПросмотрЭДИзБДСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ЭлектронныеДокументыКлиент.ОтправитьПовторноЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	ОчиститьСообщения();
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	ВыполнитьПросмотрЭДИзБДСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПлатеж(Команда)
	
	ОчиститьСообщения();
	ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ДоступныеСертификаты(Объект.СоглашениеЭД);
	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодуль(Объект.СоглашениеЭД);
	ПарольУстановленРанее = Ложь;
	МассивСертификатов = Новый Массив;
	
	Для Каждого Элемент ИЗ ДоступныеСертификаты Цикл
		Если ЭлектронныеДокументыСлужебныйКлиент.УстановленПарольСертификата(ВнешнийПодключаемыйМодуль, Элемент.Значение.ФайлСертификата) Тогда
			ПарольУстановленРанее = Истина;
			ВыбранныйСертификат = Элемент.Ключ;
			СертификатXML = Элемент.Значение.ФайлСертификата;
			Прервать;
		КонецЕсли;
		МассивСертификатов.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Если Не ПарольУстановленРанее Тогда
		ВидОперации = НСтр("ru = 'Авторизация на ресурсе банка'");
		Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(ДоступныеСертификаты, ВидОперации)
			И ДоступныеСертификаты.Количество() > 0 Тогда
			Для Каждого КлючИЗначение Из ДоступныеСертификаты Цикл
				ПараметрыСертификата = КлючИЗначение.Значение;
				ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
				ВыбранныйСертификат = КлючИЗначение.Ключ;
				СертификатXML = ПараметрыСертификата.ФайлСертификата;
				Прервать;
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль,
	                                                                                           СертификатXML);

	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПинКодУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьПинКодЕслиТребуется(
	                                            ВнешнийПодключаемыйМодуль,
	                                            ДанныеСертификата.ИдентификаторХранилища);
	
	Если Не ПинКодУстановлен Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ПарольУстановленРанее Тогда
		ПарольУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		                                                                                            ВнешнийПодключаемыйМодуль,
		                                                                                            СертификатXML,
		                                                                                            ПарольПользователя);
		Если НЕ ПарольУстановлен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СоединениеУстановлено = ЭлектронныеДокументыСлужебныйКлиент.УстановитьСоединениеЧерезДопОбработку(
	                                                                                    Объект.СоглашениеЭД,
	                                                                                    ВнешнийПодключаемыйМодуль,
	                                                                                    СертификатXML);
	Если Не СоединениеУстановлено Тогда
		Возврат;
	КонецЕсли;
		
	ВнешниеИдентификаторы = Новый Массив;
	ВнешниеИдентификаторы.Добавить(УникальныйИДВнешний(Объект.Ссылка));
	ПараметрыЗапроса = Новый Структура("ИдентификаторыДокументов", ВнешниеИдентификаторы);
	
	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 4, ПараметрыЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка инициализации сессии подтверждения.
							|Код ошибки: %1
							|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Инициализация сессии подтверждения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	
	Сессия = Результат.Сессия;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сертификат",          СертификатXML);
	ПараметрыФормы.Вставить("Сессия",              Сессия);
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);
	
	Пароль = ОткрытьФормуМодально(
					"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПодтверждениеПлатежныхПорученийПоSMS",
					ПараметрыФормы);
	Если Пароль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("Способ, Пароль, Сессия");
	ПараметрыЗапроса.Способ = "SMS";
	ПараметрыЗапроса.Пароль = Пароль;
	ПараметрыЗапроса.Сессия = Сессия;
		
	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 5, ПараметрыЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка подтверждения платежного поручения.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Подтверждение платежного поручения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	
	Если Результат.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Нет данных для подтверждения'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат[0].ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при подтверждении платежного поручения:'")+ " " + Результат[0].ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусДоставлен(Объект.Ссылка);
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Документ подтвержден'"));
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	Комментарий = "";
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработатьПеренаправлениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформация) Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ИзменитьТекстСопроводительнойЗаписки(ТекстЗаписки)
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", ТекстЗаписки);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	ЭтаФорма.Модифицированность = Ложь;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("Описание") И ЗначениеЗаполнено(Ссылка.Ответственный) Тогда
		СтруктураПараметров.Вставить("Ответственный", Ссылка.Ответственный);
	КонецЕсли;
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД()
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(Объект.Ссылка);
	ЭлектронныеДокументыСлужебныйКлиент.ИзменитьОтветственного(МассивЭД);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
		|	ЖурналСобытийЭД.Дата КАК Дата,
		|	ЖурналСобытийЭД.СтатусЭД,
		|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
		|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5'");
	ПредыдущийКоммент = "";
	ПервыйКоммент = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКоммент = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКоммент = ТекущийКоммент Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКоммент = ТекущийКоммент;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКоммент);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКоммент = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКоммент = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКоммент, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКоммент = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуОбъекта(Параметры, Отказ)
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ОбъектСправочника = Параметры.Ключ.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаМассивСертификатов") Тогда
		СсылкаНаМассивСертификатов = Параметры.СсылкаНаМассивСертификатов;
	КонецЕсли;
	
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеЭД, "ПрограммаБанка");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭДОтклонен = ЭДОтклонен();
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		Заголовок = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		ЗаполнитьТаблицуЭЦП();
		
		Если НЕ Отказ Тогда
			ВыполнитьПросмотрЭДИзБДСервер(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПерезаполнитьКомментарии();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИДВнешний(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "УникальныйИДВнешний");
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусДоставлен(ЭД)
	
	СтруктураЭД = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураЭД, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивФайловСбербанка(ЭД)
	
	МассивВозврата = Новый Массив;
	
	СтруктураДайджест = Новый Структура;
	ОсноваИмениФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ЭД.Наименование);
	
	СтрокаBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
	ИмяФайлаДанных = "doc_" + ОсноваИмениФайла + ".txt";
	ДвоичныеДанные = Base64Значение(СтрокаBase64);
	СсылкаНаДайджест =  ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	СтруктураДайджест = Новый Структура("СсылкаНаФайл, ИмяФайла", СсылкаНаДайджест, ИмяФайлаДанных);
	МассивВозврата.Добавить(СтруктураДайджест);
	
	Для Каждого ЭЦП из ЭД.ЭлектронныеЦифровыеПодписи Цикл
		ДвоичныеДанныеЭЦП = ЭЦП.Подпись.Получить();
		ИмяФайлаДанных = "sign_" + ОсноваИмениФайла+ "_" + ЭЦП.НомерСтроки + ".txt";
		СсылкаНаПодпись = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭЦП);
		МассивВозврата.Добавить(Новый Структура("СсылкаНаФайл, ИмяФайла", СсылкаНаПодпись, ИмяФайлаДанных));
				
		ДвоичныеДанныеСертификата = ЭЦП.Сертификат.Получить();
		ИмяФайлаДанных = "cert_" + ОсноваИмениФайла + "_" + ЭЦП.НомерСтроки + ".cer";
		СсылкаНаСертификат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
		МассивВозврата.Добавить(Новый Структура("СсылкаНаФайл, ИмяФайла", СсылкаНаСертификат, ИмяФайлаДанных));
	КонецЦикла;

	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	ИмяФайлаДанных = ОсноваИмениФайла + ".xml";
	СтруктураФайла = Новый Структура("СсылкаНаФайл, ИмяФайла", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ИмяФайлаДанных);
	МассивВозврата.Добавить(СтруктураФайла);
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
		МассивСтруктурСертификатов = ПолучитьИзВременногоХранилища(СсылкаНаМассивСертификатов);
	Иначе
		МассивСтруктурСертификатов = Неопределено;
	КонецЕсли;
	
	ЭтоОбменЧерезДопОбработку = Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
								И ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;

	ЕстьВозможностьПодписания = (ЗначениеЗаполнено(МассивСтруктурСертификатов)
								  ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
								  ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн)
								И ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	МожноОтклонитьЭтотЭД = ЭлектронныеДокументыСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД);
	МожноАннулироватьЭтотЭД = ЭлектронныеДокументыСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
	
	// Отображение страниц:
	Элементы.ГруппаСодержимоеДокумента.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	
	Если НЕ Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка И НЕ Элементы.Найти("КомандаПрочитать") = Неопределено Тогда
		Элементы.КомандаПрочитать.Видимость = Ложь;
	КонецЕсли;
	
	ДОЗакрыт = ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.ВладелецФайла);
	ЭДОтклонен = ЭлектронныеДокументыСлужебныйВызовСервера.ЭДОтклонен(Объект.СтатусЭД);
	
	ЭтоСлужебный = ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Объект.Ссылка);
	
	ЭДТитулПродавца = (Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	ЭДСчетФактура = Объект.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
					
	ИспользуетсяКриптография = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеЭД, "ИспользуетсяКриптография");
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи")
		ИЛИ НЕ (ИспользуетсяКриптография = Истина)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеЭД, "СпособОбменаЭД") = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
		И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаУтвердитьЭД.Заголовок = НСтр("ru = 'Утвердить и отправить'");
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		КомандаПодписиОтправки = Элементы.КомандаОтправитьЭД;
	Иначе
		КомандаПодписиОтправки = Элементы.КомандаПодписать;
	КонецЕсли;
	
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандВх;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
			
			Элементы.ПерезаполнитьДокумент.Видимость = Ложь;
		ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			Элементы.ПерезаполнитьДокумент.Заголовок = НСтр("ru = 'Сопоставить номенклатуру'");
		ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Элементы.ПерезаполнитьДокумент.Видимость = Ложь;
		КонецЕсли;
		
		ЭтоПолученныйКаталогТоваров = Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
										И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		Элементы.ПерезаполнитьДокумент.Доступность = НЕ ЭДОтклонен И НЕ(ЭтоПолученныйКаталогТоваров);
		
		ОбменЧерезТакском = ОбменЧерезОператора();

		ВерсияФорматаПакета = ЭлектронныеДокументыСлужебный.ВерсияПакетаЭД(Объект.Ссылка);
		ЭтоСчетВерсии30 = (Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату)
			И (ОбменЧерезТакском
				Или (ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30
		 			И Не ОбменЧерезТакском));
		
		// КомандаОтправитьПодтверждениеЭД видимость и доступность:
		Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = ЕстьВозможностьПодписания
			И НЕ ЭДСчетФактура
			И НЕ ЭДТитулПродавца
			И Объект.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И Объект.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И Объект.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И Не ЭтоСчетВерсии30;
		
		Элементы.КомандаОтправитьПодтверждениеЭД.Доступность = ЕстьВозможностьПодписания
			И НЕ ЭДОтклонен И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден)
			И (ОтраженВУчете ИЛИ ЭтоПолученныйКаталогТоваров);
		
		// КомандаУтвердитьЭД видимость и доступность:
		Элементы.КомандаУтвердитьЭД.Видимость = Объект.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И Объект.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И Объект.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И Объект.ВидЭД <> Перечисления.ВидыЭД.ВыпискаБанка
			И Объект.ВидЭД <> Перечисления.ВидыЭД.Квитанция
			И (НЕ ЕстьВозможностьПодписания ИЛИ ЭДСчетФактура
				ИЛИ ЭДТитулПродавца Или ЭтоСчетВерсии30);
		
		Элементы.КомандаУтвердитьЭД.Доступность = Не ДОЗакрыт
			И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			И НЕ(Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении);
		//
		
		Элементы.ЗаголовокОтраженВУчете.Доступность = НЕ ЭДОтклонен;
		
		// Для входящего с.ф. кнопка отклонение имеет свое название и картинку
		Если Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'");
			Элементы.КомандаОтклонить.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
			Элементы.КомандаВыбратьДокумент.Видимость = Ложь;
		КонецЕсли
		
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		
		Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
		Элементы.КомандаВыбратьДокумент.Видимость          = Ложь;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
			КоличествоНеустановленныхПодписей =  ПолучитьКоличествоНеустановленныхПодписей();
			ЕстьОшибкаПередачи = (Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
			Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
				Элементы.КомандаОтправитьЭД.Видимость = Ложь;
				Элементы.КомандаПодписать.Видимость = КоличествоНеустановленныхПодписей > 0 И ЕстьВозможностьПодписания;
				Элементы.ОтправитьПовторно.Видимость = Ложь;
			Иначе
				Элементы.КомандаОтправитьЭД.Видимость = (КоличествоНеустановленныхПодписей = 1) И ЕстьВозможностьПодписания;
				Элементы.КомандаПодписать.Видимость   = КоличествоНеустановленныхПодписей > 1 И ЕстьВозможностьПодписания;
				Элементы.ОтправитьПовторно.Видимость = ЕстьОшибкаПередачи;
			КонецЕсли;
		Иначе
			КомандаПодписиОтправки.Видимость   = ЕстьВозможностьПодписания И ТребуетсяПодпись;
			КомандаПодписиОтправки.Доступность = НЕ ЭДОтклонен И Не ДОЗакрыт
				И (ОтраженВУчете ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении)
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
			
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
				Элементы.ОтправитьПовторно.Видимость = Истина;
				Элементы.ОтправитьПовторно.Доступность = НЕ ЭДОтклонен
					И ОтраженВУчете
					ИЛИ (Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении);
			КонецЕсли;
			
			ЗапискаДоступна = (НЕ ЭтоСлужебный
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке));
			Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ ЗапискаДоступна;
			Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступна;
		КонецЕсли;
		
		// КомандаУтвердитьЭД видимость и доступность:
		Элементы.КомандаУтвердитьЭД.Видимость   = НЕ (ЕстьВозможностьПодписания И ТребуетсяПодпись);
		Элементы.КомандаУтвердитьЭД.Доступность = Не ДОЗакрыт И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		//
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		
		Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
		Элементы.КомандаВыбратьДокумент.Видимость          = Ложь;
		
		Элементы.КомандаПодписать.Видимость     = ЕстьВозможностьПодписания;
		Элементы.КомандаПодписать.Доступность   = (ЕстьВозможностьПодписания
			И НЕ ЭДОтклонен И Объект.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан);
		
		Элементы.КомандаУтвердитьЭД.Видимость   = НЕ ЕстьВозможностьПодписания;
		Элементы.КомандаУтвердитьЭД.Доступность = (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		
	КонецЕсли;
	
	Элементы.ФормаАннулироватьЭД.Доступность = МожноАннулироватьЭтотЭД;
	Элементы.КомандаОтклонить.Доступность = НЕ (ЭДОтклонен ИЛИ ЭтоСлужебный ИЛИ ДОЗакрыт) И МожноОтклонитьЭтотЭД;
	Элементы.ФормаГруппаАннулирование.Видимость = Ложь;
	Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтатусовИСостояния;
	
	Если ЭДОтклонен Тогда
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.Ссылка.ПричинаОтклонения;
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтраницаОтклонение;
		
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			Элементы.ПричиныОтклоненияПричинаОтклонения.Заголовок = НСтр("ru = 'Ошибка обмена'");
			НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		КонецЕсли;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
			И ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаКвитанция;
			Квитанция = ЭлектронныеДокументыВнутренний.ПодчиненныйДокумент(Объект.Ссылка, Перечисления.ВидыЭД.Квитанция);
		КонецЕсли;
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СсылкаНаЭД.ПричинаОтклонения;
		
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтраницаОтклонение;
		Элементы.ПричиныОтклоненияПричинаОтклонения.Заголовок = НСтр("ru = 'Причина аннулирования'");
		Элементы.КомандаОтклонить.Доступность = Ложь;
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЭлектронныйДокументВладелец, "СтатусЭД") = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			Элементы.ФормаГруппаАннулирование.Видимость = Истина;
			Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
			Элементы.КомандаОтправитьЭД.Видимость = Ложь;
			Элементы.КомандаОтклонить.Видимость = Ложь;
			Элементы.ФормаАннулироватьЭД.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ РазрешеноОтклонитьЭД() Тогда
		Элементы.КомандаОтклонить.Видимость = Ложь;
	КонецЕсли;
	
	// Команда ОтправитьНаПодпись:
	Элементы.ФормаПеренаправить.Видимость = НЕ ЭтоСлужебный;
	//
	
	ОчиститьОповещениеОНеактуальности();
	УстановитьЗаголовокФормы();
	
	Элементы.ГруппаПодвалСтраницыКомментарии.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(ВсеКомментарии);
	Элементы.ГруппаПодвалСтраницыЗаписка.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.ДополнительнаяИнформация);
	
	Элементы.КомандаПодтвердитьПлатеж.Видимость = ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
													И Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноОтклонитьЭД()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Если Объект.СтатусЭД = перечисления.СтатусыЭД.НеОтправлен 
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.Подписан
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.Сформирован
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.Утвержден
			ИЛИ Объект.СтатусЭД = перечисления.СтатусыЭД.ЧастичноПодписан Тогда
				Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если НЕ ОтраженВУчете И НЕ (Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
								ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
								ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
								ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
								ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка
								ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.Квитанция
								ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки) Тогда
		
		Если НЕ ЗначениеЗаполнено(ВерсияЭД) ИЛИ Объект.Ссылка.ДатаФормированияЭДОтправителем <= ВерсияЭД Тогда
			Заголовок = Заголовок + НСтр("ru = ' - неактуальный'");
		ИначеЕсли Объект.ДатаФормированияЭДОтправителем > ВерсияЭД Тогда
			Заголовок = Заголовок + НСтр("ru = ' - новый'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОповещениеОНеактуальности()
	
	Заголовок = СтрЗаменить(Заголовок, НСтр("ru = ' - неактуальный'"), "");
	Заголовок = СтрЗаменить(Заголовок, НСтр("ru = ' - новый'"), "");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусЭД(СтатусЭД = Неопределено, ДатаИзмененияСтатусаЭД = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СтатусЭД) Тогда
		СтатусЭД = Объект.Ссылка.СтатусЭД;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаИзмененияСтатусаЭД) Тогда
		ДатаИзмененияСтатусаЭД = Объект.Ссылка.ДатаИзмененияСтатусаЭД;
	КонецЕсли;
	
	ТекстСтатусЭД = " " +  СтатусЭД + ", " + Формат(ДатаИзмененияСтатусаЭД, "ДЛФ=");
	ТекстСостояния = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.ВладелецФайла);
	ТекстДокументИБ = Строка(Объект.ВладелецФайла);
	
	ЗапросПоОтражению = Новый Запрос;
	ЗапросПоОтражению.УстановитьПараметр("СсылкаНаОбъект", Объект.ВладелецФайла);
	
	ЗапросПоОтражению.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЭлектронныйДокумент, "ДатаФормированияЭДОтправителем");
		ОтраженВУчете = (Объект.Ссылка = Выборка.ЭлектронныйДокумент);
	КонецЕсли;
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовЭД(Объект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "СтатусыЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭЦП()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка.СоглашениеЭД)
		ИЛИ НЕ Объект.Ссылка.СоглашениеЭД.ПроверятьСертификатыПодписей Тогда
		
		ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
		ТаблицаЭЦП.Очистить();
		
		Для Каждого ТекСтрока Из Объект.Ссылка.ЭлектронныеЦифровыеПодписи Цикл
			НоваяСтрока = ТаблицаЭЦП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковОжидаемыхСертификатов = ПолучитьОтпечаткиОжидаемыхСертификатов(Объект.Ссылка.СоглашениеЭД);
	
	ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
	ТаблицаЭЦП.Очистить();
	
	Для Каждого ТекСтрока Из Объект.Ссылка.ЭлектронныеЦифровыеПодписи Цикл
		НоваяСтрока = ТаблицаЭЦП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
			НоваяСтрока.ОтсутствуетВСписке = Истина;
			НоваяСтрока.ВыводКартинки = 1;
		Иначе
			НоваяСтрока.ВыводКартинки = 0;
		КонецЕсли;
		ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтпечаткиОжидаемыхСертификатов(ТекущееСоглашение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Организация = &Организация
	|	И СертификатыЭЦП.Отозван = ЛОЖЬ
	|	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Ссылка = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("Организация", ТекущееСоглашение.Организация);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", ТекущееСоглашение);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВерна = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВерна = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если НЕ ЭДОтклонен Тогда
		
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.Ссылка.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
			ФлагПодписи = Истина;
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ФлагПодписи = Объект.ПодписанЭЦП;
			ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				
				Если Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					
					ФлагПодписи = Объект.ЭлектронныйДокументВладелец.ПодписанЭЦП;
					
				Иначе
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
					|ИЗ
					|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
					|ГДЕ
					|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
					|	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
					|			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
					|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка",        Объект.СоглашениеЭД);
					Запрос.УстановитьПараметр("ВидЭД",         Объект.ВидЭД);
					Запрос.УстановитьПараметр("НаправлениеЭД", Объект.НаправлениеЭД);
					
					Результат = Запрос.Выполнить().Выбрать();
					Результат.Следующий();
					
					ФлагПодписи = Результат.ИспользоватьЭЦП;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов)
	
	ЗапросПоСертификатам = Новый Запрос;
	ЗапросПоСертификатам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СертификатыЭЦПВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|ГДЕ
	|	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И (СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = &ТекущийПользователь
	|			ИЛИ СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
	|	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
	|	И %1";
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
			И (ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку) Тогда

		МассивСертификатовНеобходимыхПодписей = Объект.СоглашениеЭД.СертификатыПодписейОрганизации.ВыгрузитьКолонку(
																										"Сертификат");
		ДопУсловие = " СертификатыЭЦПВидыДокументов.Ссылка В(&МассивСертификатовНеобходимыхПодписей)";
		ЗапросПоСертификатам.УстановитьПараметр("МассивСертификатовНеобходимыхПодписей",
												МассивСертификатовНеобходимыхПодписей);
	Иначе
		МассивОтпечатков = Новый Массив;
		Если Не МассивСтруктурСертификатов = Неопределено Тогда
			Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
				МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
			КонецЦикла;
		КонецЕсли;
		ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков", МассивОтпечатков);
		ДопУсловие = " СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатков)";
	КонецЕсли;
	
	ЗапросПоСертификатам.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ЗапросПоСертификатам.Текст,
																	ДопУсловие);
	
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("ВидДокумента",        Объект.ВидЭД);
	ЗапросПоСертификатам.УстановитьПараметр("Организация",         Объект.Организация);

	ИспользуютсяЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																	"ИспользоватьЭлектронныеЦифровыеПодписи")
						ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
						ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	ВозвращаемыйПараметр = ИспользуютсяЭП И НЕ ЗапросПоСертификатам.Выполнить().Пустой() И ТребуетсяПодпись;
		
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаКлиенте()

	Попытка
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
		Иначе
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		КонецЕсли;
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументЭД(СсылкаНаЭД = Неопределено, Знач ИмяФайлаПодчиненногоЭД = Неопределено, Идентификатор = Неопределено)
	
	Если СсылкаНаЭД = Неопределено Тогда
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	
	ТабличныйДокумент = ЭлектронныеДокументыВнутренний.ФайлДанныхЭД(СсылкаНаЭД,
																,
																УникальныйИдентификатор);
																
	Возврат ТабличныйДокумент;
	
КонецФункции


&НаСервере
Процедура ВыполнитьПросмотрЭДИзБДСервер(Отказ = Ложь)
	
	ДанныеЭД = ТабличныйДокументЭД();
	Если ДанныеЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
		ОпределитьНаличиеДопДанныхСкрытьФлаг();
		Если ЕстьДопДанные Тогда
			СкрытьДопДанные(ОтключитьВыводДопДанных);
		КонецЕсли;
		Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
	Иначе
		Если ТипЗнч(ДанныеЭД) = Тип("Строка") Тогда
			АдресФайлаВХранилище = ДанныеЭД;
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	ЗаполнитьТаблицуЭЦП();
	ОбновитьСтатусЭД();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПерепривязатьЭлектронныйДокумент(ВыбранноеЗначение)
	
	ЭлектронныйДокумент = РеквизитФормыВЗначение("Объект");
	СтарыйВладелец = ЭлектронныйДокумент.ВладелецФайла;
	ЭлектронныйДокумент.ВладелецФайла = ВыбранноеЗначение;
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент.Автор) Тогда
		ЭлектронныйДокумент.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	
	ОбновитьСостояниеЭДВладельцев(ЭлектронныйДокумент.Ссылка, СтарыйВладелец, ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент, "Объект");
	
	ТекстДокументИБ = Строка(Объект.ВладелецФайла.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭДВладельцев(ЭД, СтарыйВладелец, НовыйВладелец)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаСтарыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	(НЕ СостоянияЭД.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка))
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаНовыйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Запрос.УстановитьПараметр("СсылкаНаСтарыйДокумент", СтарыйВладелец);
	Запрос.УстановитьПараметр("СсылкаНаНовыйДокумент", НовыйВладелец);
	
	Выборка = Запрос.ВыполнитьПакет();
	
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(СтарыйВладелец, Неопределено);
	
	Результат2 = Выборка[1].Выбрать();
	Если НЕ Результат2.Следующий() Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(НовыйВладелец, ЭД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД)
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД.Ссылка,
		"ВидЭД, НаправлениеЭД, ВерсияРегламентаЭДО, Организация, Контрагент, СоглашениеЭД, ПрофильНастроекЭДО, ПодписанЭЦП");
	
	НастройкиСтатусов = Новый ТаблицаЗначений;
	НастройкиСтатусов.Колонки.Добавить("СпособОбмена");
	НастройкиСтатусов.Колонки.Добавить("Направление");
	НастройкиСтатусов.Колонки.Добавить("ВидЭД");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьПодпись");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьКвитанции");
	НастройкиСтатусов.Колонки.Добавить("ИспользуетсяНесколькоПодписей");
	НастройкиСтатусов.Колонки.Добавить("ВерсияРегламентаЭДО");
	НастройкиСтатусов.Колонки.Добавить("ПрограммаБанка");
	НастройкиСтатусов.Колонки.Добавить("ВерсияФорматаПакета");
	
	ИспользуетсяЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
		ИЛИ ((ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий)
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЭД.СоглашениеЭД,
			"СпособОбменаЭД, ПрограммаБанка, ИспользуетсяКриптография");
		РеквизитыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЭД.ПрофильНастроекЭДО,
			"СпособОбменаЭД");
		
		НоваяСтрока = НастройкиСтатусов.Добавить();
		Если РеквизитыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			НоваяСтрока.СпособОбмена        = РеквизитыСоглашения.СпособОбменаЭД;
		Иначе
			НоваяСтрока.СпособОбмена        = РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД;
		КонецЕсли;
		НоваяСтрока.Направление         = ПараметрыЭД.НаправлениеЭД;
		НоваяСтрока.ВидЭД               = ПараметрыЭД.ВидЭД;
		НоваяСтрока.ИспользоватьПодпись = ИспользуетсяЭЦП
				ИЛИ ?(РеквизитыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка,
				      РеквизитыСоглашения.ИспользуетсяКриптография,
				      Ложь);
		НоваяСтрока.ИспользоватьКвитанции = Ложь;
		НоваяСтрока.ИспользуетсяНесколькоПодписей = ПараметрыЭД.СоглашениеЭД.СертификатыПодписейОрганизации.Количество() > 1;
		НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
		НоваяСтрока.ПрограммаБанка        = РеквизитыСоглашения.ПрограммаБанка;
	Иначе
		
		Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЭД.СоглашениеЭД, "ПрограммаБанка");
			СпособОбмена = СпособОбменаЭД(ЭД, ПараметрыЭД.СоглашениеЭД);

			НоваяСтрока = НастройкиСтатусов.Добавить();
			НоваяСтрока.СпособОбмена        = СпособОбмена;
			НоваяСтрока.Направление         = ПараметрыЭД.НаправлениеЭД;
			НоваяСтрока.ВидЭД               = ПараметрыЭД.ВидЭД;
			НоваяСтрока.ИспользоватьПодпись = ТребуетсяПодпись;
			
			ВерсияПакетаЭД = ЭлектронныеДокументыСлужебный.ВерсияПакетаЭД(ЭД);
			НоваяСтрока.ВерсияФорматаПакета = ВерсияПакетаЭД;
			
			Если ВерсияПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				ИспользоватьКвитанции = Ложь;
			Иначе
				ИспользоватьКвитанции = Истина;
			КонецЕсли;
			НоваяСтрока.ИспользоватьКвитанции = ИспользоватьКвитанции;
			
			НоваяСтрока.ИспользуетсяНесколькоПодписей = ПараметрыЭД.СоглашениеЭД.СертификатыПодписейОрганизации.Количество() > 1;
			НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
			НоваяСтрока.ПрограммаБанка        = РеквизитыСоглашения.ПрограммаБанка;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВидЭД",           ПараметрыЭД.ВидЭД);
			Запрос.УстановитьПараметр("НаправлениеЭД",   ПараметрыЭД.НаправлениеЭД);
			Запрос.УстановитьПараметр("Контрагент",      ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("Организация",     ПараметрыЭД.Организация);
			Запрос.УстановитьПараметр("ИспользуетсяЭЦП", ИспользуетсяЭЦП);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЭЦП
			|			ТОГДА Соглашение.ИспользоватьПодпись
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьПодпись,
			|	Соглашение.ИспользоватьКвитанции,
			|	Соглашение.ВидЭД,
			|	Соглашение.Направление,
			|	Соглашение.СпособОбмена,
			|	Соглашение.ВерсияФорматаПакета,
			|	Соглашение.ПрограммаБанка
			|ИЗ
			|	
			|	(ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
			|		Истина КАК ИспользоватьКвитанции,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|		КОНЕЦ КАК Направление,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбмена,
			|		0 КАК Приоритет,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПрограммаБанка КАК ПрограммаБанка
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
			|		И Не СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
			|		Истина КАК ИспользоватьКвитанции,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|		КОНЕЦ КАК Направление,
			|		&ВидЭД КАК ВидЭД,
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбмена,
			|		0 КАК Приоритет,
			|		NULL,
			|		NULL
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
			|		И Не СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления) КАК Соглашение";
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				НоваяСтрока = НастройкиСтатусов.Добавить();
				НоваяСтрока.СпособОбмена          = Результат.СпособОбмена;
				НоваяСтрока.Направление           = Результат.Направление;
				НоваяСтрока.ВидЭД                 = Результат.ВидЭД;
				НоваяСтрока.ИспользоватьПодпись   = Результат.ИспользоватьПодпись;
				НоваяСтрока.ИспользоватьКвитанции = Результат.ИспользоватьКвитанции;
				
				НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
				НоваяСтрока.ПрограммаБанка        = Результат.ПрограммаБанка;
				НоваяСтрока.ВерсияФорматаПакета   = Результат.ВерсияФорматаПакета;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Если НастройкиСтатусов.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов[0]);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиСтатусов);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	Если ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
		Если ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Получен;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Отклонен;
		Иначе
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Сформирован;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = ЭД.СтатусЭД;
		КонецЕсли;
		
		КартаСтатусовЭД.ЗаполнитьЗначения(Истина, "Пройден");
		
	Иначе
		
		ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД);
		ПризнакПройден = Истина;
		Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл 
			ТекСтрока.Пройден = ПризнакПройден;
			Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
				И (ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем) Тогда
				ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
				Прервать;
			КонецЕсли;
			Если ЭД.СтатусЭД = ТекСтрока.Статус Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сертификат не найден'"));
		Возврат;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.СертификатЭЦП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = Объект.Ссылка.ЭлектронныеЦифровыеПодписи[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка.СоглашениеЭД) Тогда
		Возврат ;
	КонецЕсли;
	
	ОбъектЭД = РеквизитФормыВЗначение("Объект");
	НайденнаяСтрока = ОбъектЭД.ЭлектронныеЦифровыеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = Объект.Ссылка.СоглашениеЭД.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда 
		Текст = НСтр("ru = 'Добавить сертификат %1 в список ожидаемых сертификатов контрагента?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеПодписи.КомуВыданСертификат);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки,Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
			Возврат;
		КонецЕсли;
		
		// Добавим сертификат в Соглашение.
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭЦП();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоНеустановленныхПодписей()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток
	               |ПОМЕСТИТЬ УстановленныеПодписи
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаЭД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат) КАК КоличествоНеобходимыхПодписей
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	               |ГДЕ
	               |	НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток В
	               |				(ВЫБРАТЬ
	               |					УстановленныеПодписи.Отпечаток
	               |				ИЗ
	               |					УстановленныеПодписи КАК УстановленныеПодписи)
	               |	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СсылкаНаЭД", Объект.Ссылка);
	Запрос.УстановитьПараметр("СоглашениеЭД", Объект.Ссылка.СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.КоличествоНеобходимыхПодписей;
	
КонецФункции

&НаСервере
Функция ЭДОтклонен()
	
	ЭДОтклонен = (Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтказанАБС
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ЭЦПНеВерна
					ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаРеквизитов);
	Возврат ЭДОтклонен
	
КонецФункции

&НаСервере
Функция СкрытьОбластьТабличногоДокумента(ИмяОбласти)
	
	// Находим область дополнительных данных и скрываем ее.
	// Если область ДД имеет левую и/или правую границы, то это вертикальная область, иначе горизонтальная область.
	// Горизонтальная область выводится внизу таблицы, поэтому находим шапку горизонтальной области ДД и скрываем строки
	// от шапки ДД до конца всей таблицы.
	// Вертикальная область присоединяется к основной таблице данных, при этом, если таблица не помещается на одной странице,
	// то именуемая область будет присутствовать только на последней странице. В этом случае алгоритм определения скрываемой
	// области следующий:
	// 1. находим именованную область ДД (например ОбластьДД).
	// 2. вычисляем верхнюю границу области ДД: находим область шапки, следующая строка за областью шапки - будет верхней
	//  строкой области ДД, поэтому берем низ области шапки + 1.
	// 3. т.к. доп.данные присоединяются к основным данным справа, то в качестве нижней границы можно взять высоту табличного документа.
	//
	// Если область "Шапка" не существует, то область ДД может скрываться некорректно/неполностью.
	ЕстьОбластьДД = ТабличныйДокументФормы.Области.Найти(ИмяОбласти);
	Если ЕстьОбластьДД <> Неопределено Тогда
		ОбластьДДТаблицы = ТабличныйДокументФормы.Область(ИмяОбласти);
		ОбластьШапки = ТабличныйДокументФормы.Области.Найти("Шапка");
		Верх = ?(ОбластьДДТаблицы.Лево = 0 И ОбластьДДТаблицы.Право = 0 ИЛИ ОбластьШапки = Неопределено,
			ОбластьДДТаблицы.Верх, ОбластьШапки.Низ + 1);
		УдаляемаяОбласть = ТабличныйДокументФормы.Область(Верх, ОбластьДДТаблицы.Лево,
			ТабличныйДокументФормы.ВысотаТаблицы, ОбластьДДТаблицы.Право);
		ТабличныйДокументФормы.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СкрытьДопДанные(Скрыть)
	
	Если Скрыть Тогда
		СкрытьОбластьТабличногоДокумента("ОбластьДД");
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП");
		СкрытьОбластьТабличногоДокумента("ОбластьДДБезЭП");
		СкрытьОбластьТабличногоДокумента("ДопДанныеШапки_Шапка");
		
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП_УС");
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП_У");
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭП_С");

	Иначе
		ТабличныйДокументФормы = ИсходныйТабличныйДокумент.ПолучитьОбласть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеДопДанныхСкрытьФлаг()
	
	СсылкаНаЭД = Объект.Ссылка;
	
	Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик 
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		
		Тогда
		
		ЕстьДопДанные = Истина;
	Иначе
		
		ЕстьДопДанные = Ложь;
	КонецЕсли;
	Элементы.ОтключитьВыводДопДанных.Видимость = ЕстьДопДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьБанковскиеДокументыСбербанка(ЭД)
	
	КоличествоВыгруженныхДокументов = 0;
	
	МассивФайловСбербанка = МассивФайловСбербанка(ЭД);
	
	Для Каждого Элемент Из МассивФайловСбербанка Цикл
		ДанныеФайлаДляСохранения = Новый Структура;
		ДанныеФайлаДляСохранения.Вставить("Расширение", "");
		ДанныеФайлаДляСохранения.Вставить("ПолноеНаименование", Элемент.ИмяФайла);
		ДанныеФайлаДляСохранения.Вставить("АдресХранилища", Элемент.СсылкаНаФайл);
		
		ЭлектронныеДокументыКлиент.СохранитьКак(ДанныеФайлаДляСохранения);
		КоличествоВыгруженныхДокументов = КоличествоВыгруженныхДокументов + 1;
	КонецЦикла;
	
	ТекстОповещения = Нстр ("ru = 'Выгружено файлов: (" + КоличествоВыгруженныхДокументов + ")'");
	ПоказатьОповещениеПользователя(ТекстОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСлужебногоЭДБанка(Знач ЭД, Знач УникальныйИдентификатор)

	ДанныеФайла = Неопределено;
	СлужебныйЭДБанка = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
	Если ЗначениеЗаполнено(СлужебныйЭДБанка) Тогда
		ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(СлужебныйЭДБанка, УникальныйИдентификатор);
	КонецЕсли;
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервере
Функция СпособОбменаЭД(ЭД, СоглашениеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	
	Запрос.УстановитьПараметр("Ссылка", СоглашениеЭД);
	Запрос.УстановитьПараметр("ИсходящийДокумент", ЭД.ВидЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СпособОбменаЭД;
	
КонецФункции

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
		ИзменитьВидимостьДоступность();
	Иначе
		УстановитьВидимостьДоступностьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Отклонить = Ложь)
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ПараметрыЭД = Новый Структура("Организация, Отклонить", Объект.Организация, Отклонить);
	Если ЭлектронныеДокументыСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, ПараметрыЭД) Тогда
		Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			ИзменитьВидимостьДоступность();
		Иначе
			УстановитьВидимостьДоступностьНаКлиенте();
		КонецЕсли;
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбменЧерезОператора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ИсходящийДокумент";
	Запрос.УстановитьПараметр("Ссылка", Объект.СоглашениеЭД);
	Запрос.УстановитьПараметр("ИсходящийДокумент", Объект.ВидЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции
