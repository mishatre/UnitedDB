
Функция ПолучитьМассивВсехУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ОбменУправлениеПредприятиемУправлениеТорговлей.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеПредприятиемУправлениеТорговлей КАК ОбменУправлениеПредприятиемУправлениеТорговлей
				   |
				   |ГДЕ
				   |
				   |	ОбменУправлениеПредприятиемУправлениеТорговлей.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеПредприятиемУправлениеТорговлей.ЭтотУзел());			   
				   
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ВернутьМассивВсехУзловИзПараметровСеанса()
	
	Возврат ПараметрыСеанса.ВсеУзлыОбменаУТУПП;	
	
КонецФункции

Функция ПолучитьСоответствиеУзловИОрганизаций() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаУТУПП;
		
	СоответствиеУзловИОрганизаций = Хранилище.Получить();
	
	Возврат СоответствиеУзловИОрганизаций;
	
КонецФункции

Функция ВернутьМассивУзловПоОднойОрганизации(Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	Если СоответствиеУзловИОрганизаций = Неопределено Тогда
		
		СоответствиеУзловИОрганизаций = ПолучитьСоответствиеУзловИОрганизаций();
	
	КонецЕсли;
	
	Возврат СоответствиеУзловИОрганизаций[Организация];	
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ОбменУправлениеПредприятиемУправлениеТорговлей.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеПредприятиемУправлениеТорговлей КАК ОбменУправлениеПредприятиемУправлениеТорговлей
				   |		Левое соединение ПланОбмена.ОбменУправлениеПредприятиемУправлениеТорговлей.Организации КАК СписокОрганизаций
				   |			ПО (ОбменУправлениеПредприятиемУправлениеТорговлей.Ссылка = СписокОрганизаций.Ссылка)
				   |
	               |ГДЕ
	               |	(СписокОрганизаций.Организация В (&СсылкаНаОрганизацию)
				   |		ИЛИ СписокОрганизаций.Организация Есть NULL)
				   |	И ОбменУправлениеПредприятиемУправлениеТорговлей.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("СсылкаНаОрганизацию", Организация);
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеПредприятиемУправлениеТорговлей.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции

Функция ПолучитьТаблицуУзловИДат()
	
	Хранилище = ПараметрыСеанса.СоответствиеУзловИДатДляОбменаУТУПП;
		
	ТаблицаУзловИДат = Хранилище.Получить();
	
	Возврат ТаблицаУзловИДат;
	
КонецФункции

Функция ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Организация.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ОрганизацияДляПоиска = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ОрганизацияДляПоиска = Организация[0];
			
		Иначе
			
			ОрганизацияДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ОрганизацияДляПоиска = Организация;
		
	КонецЕсли;
	
	Если ОрганизацияДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОднойОрганизации(ОрганизацияДляПоиска, СоответствиеУзловИОрганизаций);
		
	Иначе	
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, ИмяБазовогоТипа, ТипЭлемента, СтруктураПараметров)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
			СтруктураПараметров[ЭлементСтруктуры.Ключ] = Элемент[ЭлементСтруктуры.Ключ];
			
		КонецЦикла;
		
		Возврат;
				
	КонецЕсли;
	
	// надо все единым запросом получить
	//нужно построить запрос и вернуть параметр по ссылке
	
	СтрокаИменПараметров = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
		СтрокаИменПараметров = СтрокаИменПараметров + "," + Символы.ПС + "ОбъектДанных." + ЭлементСтруктуры.Ключ;
		
	КонецЦикла;
	
	СтрокаИменПараметров = Сред(СтрокаИменПараметров, 2);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	" + СтрокаИменПараметров + "
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
						
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		
	КонецЕсли;		
	
КонецПроцедуры

// функция по элементу определяет это группа и возвращает ссылку на него
Функция ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, ИмяБазовогоТипа, ТипЭлемента, НужноОпределятьЭтоГруппа = Ложь, ЭтоГруппа = Ложь)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Если НужноОпределятьЭтоГруппа Тогда
			
			ЭтоГруппа = Элемент.ЭтоГруппа;
			
			Если ЭтоГруппа = Неопределено Тогда
				ЭтоГруппа = Ложь;
			КонецЕсли;
			
		Конецесли;
		
		Возврат Элемент.Ссылка;
		
	КонецЕсли;
	
	Если НужноОпределятьЭтоГруппа Тогда
		
		ЭтоГруппа = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, "ЭтоГруппа");	
		Если ЭтоГруппа = Неопределено Тогда
			ЭтоГруппа = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса)
	
	МетаданныеЭлемента = Элемент.Метаданные();
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ТипСсылки = Тип("СправочникСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Справочник." + МетаданныеЭлемента.Имя;
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ТипСсылки = Тип("ДокументСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Документ." + МетаданныеЭлемента.Имя; 
		
	Иначе
		
		ТипСсылки = Неопределено;
		
	КонецЕсли;
	
	Возврат ТипЭлемента = ТипСсылки;	
	
КонецФункции


// функция анализирует Элемент это объект или нет
// если объект возвращает его реквизит, иначе
// строит по ссылке запрос и возвращает значение этого реквизита из запроса
Функция ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяПараметра)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
		
	Если НЕ ЭтоСсылка Тогда
		Возврат Элемент[ИмяПараметра]
	КонецЕсли;
			
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектДанных." + ИмяПараметра + "
				   |
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();	
	
	Возврат Выборка[ИмяПараметра];		
		
КонецФункции

Процедура ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено, НужноАнализироватьОграниченияПоДатам = Ложь)
	
	Если ТипЭлемента = Неопределено Тогда
		ТипЭлемента = ТипЗнч(Элемент);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Дата");
	
	// если нужно делаем органичения для выгрузки для организации
	// не для всех документов нужно такое органичение
	// для некотороыех документов если в шапке пустая организация - значит документ едет везде
	
	Если ТипЭлемента = Тип("ДокументОбъект.ВнутреннееПеремещениеНаличныхДенежныхСредств") 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВнутреннееПеремещениеНаличныхДенежныхСредств") Тогда
		
		СтруктураПараметров.Вставить("ОрганизацияПолучатель");
			
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Документы", ТипЭлемента, СтруктураПараметров);
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.ОрганизацияПолучатель, СоответствиеУзловИОрганизаций);
				
	Иначе	
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЭлемента);

		Если МетаданныеДокумента.Реквизиты.найти("Организация") <> Неопределено Тогда
		
			СтруктураПараметров.Вставить("Организация");
				
			ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Документы", ТипЭлемента, СтруктураПараметров);
			
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Организация, СоответствиеУзловИОрганизаций);
			
		Иначе
			
			ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Документы", ТипЭлемента, СтруктураПараметров);
			
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НужноАнализироватьОграниченияПоДатам Тогда
		
		// ограничение по датам смотрим
		ТаблицаДатИУзлов = ПолучитьТаблицуУзловИДат();
		
		Номер = 0;
		Пока Номер <= МассивУзловДляПередачи.Количество() - 1 Цикл
			
			СтрокаТаблицы = ТаблицаДатИУзлов.Найти(МассивУзловДляПередачи[Номер], "ссылка");
			Если СтрокаТаблицы <> Неопределено
				И ЗначениеЗаполнено(СтруктураПараметров.Дата)
				И СтруктураПараметров.Дата < СтрокаТаблицы.ДатаНачалаВыгрузкиДокументов Тогда
				
				МассивУзловДляПередачи.Удалить(Номер);	
				
			Иначе
				
				Номер = Номер + 1;
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ДополнитьМассивСсылками(ТекущийМассив, МассивДляДобавления)
	
	Если МассивДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивДляДобавления Цикл
		
		Если ТекущийМассив.Найти(Элемент) = Неопределено Тогда
		
			ТекущийМассив.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоСправочникуИПараметру(ИмяСправочника, ИмяРеквизита, 
	СсылкаНаСправочник, МассивУзловДляПередачи, ИмяРеквизитаОрганизации = "Организация", СоответствиеУзловИОрганизаций = Неопределено)
	
	Если СсылкаНаСправочник.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Спр." + ИмяРеквизитаОрганизации + " КАК Организация
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр." + ИмяРеквизита + " = &СсылкаНаЭлемент";
				   
	Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);			   
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Справочники.Организации.ПустаяСсылка(), СоответствиеУзловИОрганизаций);	
		
	Иначе
	
		МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоответствиеУзловИОрганизаций);
	
	Конецесли;
	
КонецПроцедуры

Функция ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита)
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = НаборЗаписей.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Процедура ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи)
	
	МассивУзлов = ВернутьМассивВсехУзловИзПараметровСеанса();
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);	
	 
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	МассивУзлов = ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеУзловИОрганизаций);
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено)
	
	Перем ЭтоГруппа, СсылкаНаЭлемент;
	
	// пердопределенные элементы выгружаем и загружаем послностью
	Если Элемент.Предопределенный Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		Возврат;
		
	КонецЕсли;
	
	ВыгружатьДляВсехУзлов = Ложь;
	Если ТипЭлемента = Неопределено Тогда
	
		ТипЭлемента = ТипЗнч(Элемент);
	
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникОбъект.БанковскиеСчета")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		// нужно определить владельца
		// если владелец не организация, тогда регистрируем изменения для всех узлов, 
		// если организация, то только для тех узлов куда организация передается
		
		Владелец = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Справочники", ТипЭлемента, "Владелец");
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			
			// только узлы с указанной организацией
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Владелец, СоответствиеУзловИОрганизаций);
			
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				Владелец, МассивУзловДляПередачи, "Организация", СоответствиеУзловИОрганизаций);	
			
		Иначе
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Организации") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеУзловИОрганизаций);
			
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				СсылкаНаЭлемент, МассивУзловДляПередачи, "Организация", СоответствиеУзловИОрганизаций);
				
		КонецЕсли;		
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ДоговорыКонтрагентов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда		
		
		СтруктураПараметров = Новый Структура("ЭтоГруппа, Организация", Ложь, Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		Если СтруктураПараметров.ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Организация, СоответствиеУзловИОрганизаций);	
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Кассы")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Кассы") Тогда		
		
		СтруктураПараметров = Новый Структура("ЭтоГруппа, Владелец", Ложь, Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		Если СтруктураПараметров.ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Владелец, СоответствиеУзловИОрганизаций);	
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.КассыККМ")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КассыККМ") Тогда		
		
		СтруктураПараметров = Новый Структура("Владелец", Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Владелец, СоответствиеУзловИОрганизаций);	
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда		
		
		СтруктураПараметров = Новый Структура("Объект", Неопределено);
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		ТипОбъекта = ТипЗнч(СтруктураПараметров.Объект);
		
		Если ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
        	ИЛИ ТипОбъекта = Тип("СправочникСсылка.Контрагенты") 
            ИЛИ ТипОбъекта = Тип("СправочникСсылка.Номенклатура") 
            ИЛИ ТипОбъекта = Тип("СправочникСсылка.Организации")
            ИЛИ ТипОбъекта = Тип("СправочникСсылка.Проекты")
            ИЛИ ТипОбъекта = Тип("СправочникСсылка.СерииНоменклатуры")
            ИЛИ ТипОбъекта = Тип("СправочникСсылка.Склады")
            ИЛИ ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица")
            ИЛИ ТипОбъекта = Тип("ДокументСсылка.АвансовыйОтчет") 
            ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЗаказПокупателя")  
            ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЗаказПоставщику")  
            ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") 
            ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") 
            ИЛИ ТипОбъекта = Тип("ДокументСсылка.Событие") Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);	
			
		КонецЕсли;
							
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи)
	
	ВыгружатьДляВсехУзлов = Истина;
			
	Если ВозвращатьМассивВсехУзлов Тогда
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
	КонецЕсли;	
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиСправочника(Элемент, ТипЭлемента = Неопределено, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, 
	СоответствиеУзловИОрганизаций = Неопределено)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
		ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиДокумента(Элемент, ТипРеквизита = Неопределено, ВыгружатьДляВсехУзлов = Ложь, 
	ВозвращатьМассивВсехУзлов = Истина, 
	СоответствиеУзловИОрганизаций = Неопределено, НужноАнализироватьОграниченияПоДатам = Ложь)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
		ТипРеквизита, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций, НужноАнализироватьОграниченияПоДатам);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено)
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеУзловИОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Данные, ИмяБазовогоТипа, ТипЭлемента = Неопределено, МетаданныеОбъекта = Неопределено,
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено, НужноАнализироватьОграниченияПоДатам = Истина) Экспорт
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
			
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиСправочника(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиДокумента(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций, НужноАнализироватьОграниченияПоДатам);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
		
	КонецЕсли;		
			
	Возврат МассивУзловДляРегистрацииСсылки;
	
КонецФункции

Процедура ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(НаборЗаписей, МассивУзловДляПередачи, 
	ИмяРеквизита, ТипЭлемента = Неопределено, СоответствиеУзловИОрганизаций = Неопределено, ИмяБазовогоТипа = "Справочники")
	
	МассивРазличныхЗначенийРеквизита = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита);
	
	МассивУзловДляПередачи = Новый Массив();
	
	Для Каждого Элемент Из МассивРазличныхЗначенийРеквизита Цикл 
		
		// для каждого элемента массива нужно определить набор узлов куда он может передаваться
		ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, ТипЭлемента, , , СоответствиеУзловИОрганизаций);
	
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеУзловИОрганизаций = Неопределено)
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЭлемента);					
	НаличиеОрганизации = (МетаданныеОбъекта.Измерения.Найти("Организация") <> Неопределено);
	
	Если НаличиеОрганизации Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Организация", 
			Тип("СправочникСсылка.Организации"), СоответствиеУзловИОрганизаций);	
		
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииПередЗаписью, МассивУзловДляРегистрацииПриЗаписи = Неопределено)
	
	ПроцедурыОбменаДанными.ДополнитьМассивПолучателейУзламиАвторегистрации(Источник);
	
	// для регистрации ссылки
	Для Каждого Элемент Из МассивУзловДляРегистрацииПередЗаписью Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
	
	Если МассивУзловДляРегистрацииПриЗаписи <> Неопределено Тогда
		
		// для регистрации объекта
		Для Каждого Элемент Из МассивУзловДляРегистрацииПриЗаписи Цикл
			
			Источник.ОбменДанными.Получатели.Добавить(Элемент);
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, ИмяБазовогоТипа, 
	МассивУзловДляРегистрацииСсылки = Неопределено, МассивУзловДляРегистрацииОбъекта = Неопределено)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		
		Возврат;
		
	КонецЕсли;		
	
	Если Источник.ЭтоНовый() Тогда
		
		// элемент еще никуда не передавался
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник.Ссылка, ИмяБазовогоТипа);
						
	КонецЕсли;
		
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа);
			
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);	
			
КонецПроцедуры

Процедура ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, ИмяБазовогоТипа, ТипЗначенияИсточника = Неопределено)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗначенияИсточника = Неопределено Тогда
		ТипЗначенияИсточника = ТипЗнч(Источник);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	Если Замещение Тогда
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			СтарыйНаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, ИмяБазовогоТипа,  , МетаданныеРегистра);		
				
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа,  , МетаданныеРегистра);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
	
КонецПроцедуры

Процедура ПередЗаписьСправочникаДляОбменаУТУПП(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники");	
		
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляОбменаУТУПП(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");	
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраСведенийОбменУПП(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("РегистрСведенийНаборЗаписей.ОбъектыДоступаДокументов") Тогда
		
		ДокументСсылка = Источник.Отбор.ДокументСсылка.Значение;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда 
		
			МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(ДокументСсылка, "Документы");		
			
			ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки);
			
		КонецЕсли;
		
	//ИначеЕсли ТипИсточника = Тип("РегистрСведенийНаборЗаписей.НастройкиПравДоступаПользователей") Тогда
	//	
	//	ОбъектДоступаСсылка = Источник.Отбор.ОбъектДоступа.Значение;
	//	
	//	Если ЗначениеЗаполнено(ОбъектДоступаСсылка) Тогда 
	//		
	//		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(ОбъектДоступаСсылка, "Справочники");		
	//		
	//		ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки);
	//		
	//	КонецЕсли;
		
	Иначе
	
		ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыСведений", ТипИсточника);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемСправочникаДляОбменаУТУПП(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники");	
	
КонецПроцедуры

Процедура ПередУдалениемДокументаДляОбменаУТУПП(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаУТУПП Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");	
	
КонецПроцедуры
