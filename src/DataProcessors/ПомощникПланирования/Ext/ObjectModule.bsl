Перем мМассивСтратегии Экспорт;

Перем мРежимОбъединение Экспорт;
Перем мРежимСложениеОбъединениеСУчетомЗаказов Экспорт;
Перем мРежимСложениеОбъединениеСУчетомПодразделений Экспорт;
Перем мРежимСложениеОбъединениеСУчетомПроектов Экспорт;
Перем мРежимСложениеОбъединениеСУчетомКонтрагентов Экспорт;
Перем мРежимСложениеОбъединениеСУчетомДоговоров Экспорт;

Перем мСформированныеДокументы Экспорт;

Перем мВалюта;
Перем мКурс;
Перем мКратность;

Перем мДокумент Экспорт;

Перем мСоответствиеНазначений Экспорт;

Перем мТекущаяНастройка Экспорт;

#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ДАННЫХ

Функция ВыполнитьОбработку(ИсходныеДанные) Экспорт
	
	// Инициализация валюты и курса
	Если мДокумент = Неопределено Тогда
		
		мВалюта = глЗначениеПеременной("ВалютаУправленческогоУчета");
		
	    СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалюта, ТекущаяДата());
		
		мКурс = СтруктураКурса.Курс;
		мКратность = СтруктураКурса.Кратность;
		
	Иначе
		
		мВалюта = мДокумент.ВалютаДокумента;
		мКурс = мДокумент.КурсДокумента;
		мКратность = мДокумент.КратностьДокумента;
		
	КонецЕсли;

	// Определение флага необходимости распределения по номенклатуре.
	// Устанавливается в том случае, если хотя бы один исходный план
	// ведется по группам и хотя бы один конечный по номенклатуре.
	ИсходныеДанныеПоГруппам = Ложь;
	
	Для каждого СтрокаИсходныхДанных из ИсходныеДанные Цикл
		
		Если ЭтоПлановыеДанные(СтрокаИсходныхДанных.Источник) И СтрокаИсходныхДанных.Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
			
			ИсходныеДанныеПоГруппам = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КонечныеДанныеПоНоменклатуре = Ложь;
	
	Для каждого СтрокаКонечныхПланов из КонечныеПланы Цикл
		
		Если СтрокаКонечныхПланов.Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура Тогда
			
			КонечныеДанныеПоНоменклатуре = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределение по номенклатуре.
	Если ИсходныеДанныеПоГруппам И КонечныеДанныеПоНоменклатуре Тогда
		
		РаспределитьПоНоменклатуре(ИсходныеДанные);
		
	КонецЕсли;
	
	// Формирование документов
	НачатьТранзакцию();
	
	ДокументыСформированы = Ложь;
	
	Для каждого КонечныйПлан из КонечныеПланы Цикл
		
		ТекущиеДанные = ИсходныеДанные.Скопировать();
		
		Для каждого СтрокаТекущихДанных из ТекущиеДанные Цикл
			
			Если НЕ ЭтоПлановыеДанные(СтрокаТекущихДанных.Источник) Тогда
				
				СтрокаТекущихДанных.ДатаНачПериода = КонечныйПлан.ДатаНач;
				СтрокаТекущихДанных.ДатаКонПериода = КонечныйПлан.ДатаКон;
				
			ИначеЕсли КонечныйПлан.ДатаНач <> Дата('00010101') И КонечныйПлан.ДатаКон <> Дата('00010101') Тогда
					
				УправлениеПланированием.ВыровнятьПериод(КонечныйПлан.ДатаНач, КонечныйПлан.ДатаКон, КонечныйПлан.Сценарий.Периодичность);
					
				ДлительностьКонечногоПериода = (КонецДня(КонечныйПлан.ДатаКон) - НачалоДня(КонечныйПлан.ДатаНач) + 1) / (3600 * 24);
					
				Если КонечныйПлан.Сценарий.Периодичность = Перечисления.Периодичность.Месяц Тогда
							
					Если НачалоМесяца(СтрокаТекущихДанных.ДатаНачПериода) = СтрокаТекущихДанных.ДатаНачПериода И
						НачалоМесяца(СтрокаТекущихДанных.ДатаКонПериода) = НачалоМесяца(СтрокаТекущихДанных.ДатаНачПериода) И
						КонецМесяца(СтрокаТекущихДанных.ДатаКонПериода) = СтрокаТекущихДанных.ДатаКонПериода И
						КонецМесяца(СтрокаТекущихДанных.ДатаНачПериода) = КонецМесяца(СтрокаТекущихДанных.ДатаКонПериода) И
						НачалоМесяца(КонечныйПлан.ДатаКон) = НачалоМесяца(КонечныйПлан.ДатаНач) И
						КонецМесяца(КонечныйПлан.ДатаНач) = КонецМесяца(КонечныйПлан.ДатаКон) Тогда
						
						ДлительностьНачальногоПериода = ДлительностьКонечногоПериода;
								
					Иначе
								
						ДлительностьНачальногоПериода = (КонецДня(СтрокаТекущихДанных.ДатаКонПериода) - НачалоДня(СтрокаТекущихДанных.ДатаНачПериода) + 1) / (3600 * 24);
								
					КонецЕсли;
								 
				ИначеЕсли КонечныйПлан.Сценарий.Периодичность = Перечисления.Периодичность.Квартал Тогда
							
					Если НачалоКвартала(СтрокаТекущихДанных.ДатаНачПериода) = СтрокаТекущихДанных.ДатаНачПериода И
						НачалоКвартала(СтрокаТекущихДанных.ДатаКонПериода) = НачалоКвартала(СтрокаТекущихДанных.ДатаНачПериода) И
						КонецКвартала(СтрокаТекущихДанных.ДатаКонПериода) = СтрокаТекущихДанных.ДатаКонПериода И
						КонецКвартала(СтрокаТекущихДанных.ДатаНачПериода) = КонецКвартала(СтрокаТекущихДанных.ДатаКонПериода) И
						НачалоКвартала(КонечныйПлан.ДатаКон) = НачалоКвартала(КонечныйПлан.ДатаНач) И
						КонецКвартала(КонечныйПлан.ДатаНач) = КонецКвартала(КонечныйПлан.ДатаКон) Тогда
								
						ДлительностьНачальногоПериода = ДлительностьКонечногоПериода;
								
					Иначе
								
						ДлительностьНачальногоПериода = (КонецДня(СтрокаТекущихДанных.ДатаКонПериода) - НачалоДня(СтрокаТекущихДанных.ДатаНачПериода) + 1) / (3600 * 24);
								
					КонецЕсли;
							
				ИначеЕсли КонечныйПлан.Сценарий.Периодичность = Перечисления.Периодичность.Год Тогда
							
					Если НачалоГода(СтрокаТекущихДанных.ДатаНачПериода) = СтрокаТекущихДанных.ДатаНачПериода И
						НачалоГода(СтрокаТекущихДанных.ДатаКонПериода) = НачалоГода(СтрокаТекущихДанных.ДатаНачПериода) И
						КонецГода(СтрокаТекущихДанных.ДатаКонПериода) = СтрокаТекущихДанных.ДатаКонПериода И
						КонецГода(СтрокаТекущихДанных.ДатаНачПериода) = КонецГода(СтрокаТекущихДанных.ДатаКонПериода) И
						НачалоГода(КонечныйПлан.ДатаКон) = НачалоГода(КонечныйПлан.ДатаНач) И
						КонецГода(КонечныйПлан.ДатаНач) = КонецГода(КонечныйПлан.ДатаКон) Тогда
								
						ДлительностьНачальногоПериода = ДлительностьКонечногоПериода;
								
					Иначе
								
						ДлительностьНачальногоПериода = (КонецДня(СтрокаТекущихДанных.ДатаКонПериода) - НачалоДня(СтрокаТекущихДанных.ДатаНачПериода) + 1) / (3600 * 24);
								
					КонецЕсли;
							
				Иначе
							
					ДлительностьНачальногоПериода = (КонецДня(СтрокаТекущихДанных.ДатаКонПериода) - НачалоДня(СтрокаТекущихДанных.ДатаНачПериода) + 1) / (3600 * 24);
							
				КонецЕсли;
						
				СтрокаТекущихДанных.Количество = СтрокаТекущихДанных.Количество * ДлительностьКонечногоПериода / ДлительностьНачальногоПериода;
				СтрокаТекущихДанных.Стоимость  = СтрокаТекущихДанных.Стоимость * ДлительностьКонечногоПериода / ДлительностьНачальногоПериода;
						
				СтрокаТекущихДанных.ДатаНачПериода = НачалоДня(КонечныйПлан.ДатаНач);
				СтрокаТекущихДанных.ДатаКонПериода = КонецДня(КонечныйПлан.ДатаКон);
						
			КонецЕсли;

		КонецЦикла;
		
		// Приведение плановых данных к периодичности конечных планов
		РезультатТекущиеДанные = Новый ТаблицаЗначений;
		
		Для ИндексСтроки = 0 по ТекущиеДанные.Количество() - 1 Цикл
			
			Если ЭтоПлановыеДанные(ТекущиеДанные[ИндексСтроки].Источник) Тогда
						
				ТекущаяПериодичностьДанных = ТекущиеДанные[ИндексСтроки].Сценарий.Периодичность;
				
			Иначе
				
				ТекущаяПериодичностьДанных = КонечныйПлан.Сценарий.Периодичность;
						
			КонецЕсли;		
			
			НачальныйПериод = ТекущаяПериодичностьДанных;
			КонечныйПериод = КонечныйПлан.Сценарий.Периодичность;
			ПрофильРаспределения = ?(КонечныйПлан.ПрофильРаспределения.Пустая(), 0, КонечныйПлан.ПрофильРаспределения);
			РаспределитьПоПодпериодам(РезультатТекущиеДанные, ТекущиеДанные, ИндексСтроки, НачальныйПериод, КонечныйПериод, ПрофильРаспределения);
			
		КонецЦикла;
		
		// Свертка в зависимости от режима сложения/объединения исходных данных
		СложениеОбъединениеДанных(РезультатТекущиеДанные);
		
		// Формирование таблицы документов
		ТаблицаДокументов = Новый ТаблицаЗначений;
		
		ТаблицаДокументов.Колонки.Добавить("ДатаПланирования");
		ТаблицаДокументов.Колонки.Добавить("Подразделение");
		ТаблицаДокументов.Колонки.Добавить("Проект");
		ТаблицаДокументов.Колонки.Добавить("Сценарий");
		ТаблицаДокументов.Колонки.Добавить("СоставПлана");
		
		ТабличнаяЧасть = Новый ТаблицаЗначений;
		
		ТабличнаяЧасть.Колонки.Добавить("Период");
		ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
		ТабличнаяЧасть.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТабличнаяЧасть.Колонки.Добавить("ЕдиницаИзмерения");
		ТабличнаяЧасть.Колонки.Добавить("Коэффициент");
		ТабличнаяЧасть.Колонки.Добавить("Заказ");
		ТабличнаяЧасть.Колонки.Добавить("Контрагент");
		ТабличнаяЧасть.Колонки.Добавить("Договор");
		ТабличнаяЧасть.Колонки.Добавить("Количество");
		ТабличнаяЧасть.Колонки.Добавить("Сумма");
		
		Для каждого СтрокаРезультатТекущиеДанные из РезультатТекущиеДанные Цикл
			
			НайденныеДокументы = ТаблицаДокументов.НайтиСтроки(Новый Структура("ДатаПланирования, Проект, Подразделение", СтрокаРезультатТекущиеДанные.ДатаНачПериода, ?(КонечныйПлан.Проект.Пустая(), СтрокаРезультатТекущиеДанные.Проект, КонечныйПлан.Проект), ?(КонечныйПлан.Подразделение.Пустая(), СтрокаРезультатТекущиеДанные.Подразделение, КонечныйПлан.Подразделение)));
			
			Если НайденныеДокументы.Количество() > 0 Тогда
				
				ТекущийДокумент = НайденныеДокументы[0];
				
			Иначе
				
				ТекущийДокумент = ТаблицаДокументов.Добавить();
				
				ТекущийДокумент.ДатаПланирования = СтрокаРезультатТекущиеДанные.ДатаНачПериода;
				ТекущийДокумент.Проект = ?(КонечныйПлан.Проект.Пустая(), СтрокаРезультатТекущиеДанные.Проект, КонечныйПлан.Проект);
				ТекущийДокумент.Подразделение = ?(КонечныйПлан.Подразделение.Пустая(), СтрокаРезультатТекущиеДанные.Подразделение, КонечныйПлан.Подразделение);
				ТекущийДокумент.СоставПлана = ТабличнаяЧасть.Скопировать();
				
			КонецЕсли;
			
			ДобавитьСтрокуВТабличнуюЧасть(ТекущийДокумент.СоставПлана, СтрокаРезультатТекущиеДанные, КонечныйПлан, СтрокаРезультатТекущиеДанные.ИндексСтроки);
				
		КонецЦикла;
		
		// Создание документов
		Для каждого Документ из ТаблицаДокументов Цикл
			
			СвернутьТабличнуюЧастьДокумента(Документ.СоставПлана, КонечныйПлан.Сценарий);
			
			Если Документ.СоставПлана.Количество() = 0 Тогда
				
				Продолжить;
				
			Иначе
				
				ДокументыСформированы = Истина;
				
			КонецЕсли;
				
			Если мДокумент = Неопределено Тогда
				
				Если КонечныйПлан.ВидПлана = Перечисления.ВидыПланирования.Продажи Тогда
					
					ЗаполняемыйДокумент = Документы.ПланПродаж.СоздатьДокумент();
					ЗаполняемыйДокумент.Дата = ТекущаяДата();
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаполняемыйДокумент, глЗначениеПеременной("глТекущийПользователь"), мВалюта, "Продажа");
					
				ИначеЕсли КонечныйПлан.ВидПлана = Перечисления.ВидыПланирования.Закупки Тогда
					
					ЗаполняемыйДокумент = Документы.ПланЗакупок.СоздатьДокумент();
					ЗаполняемыйДокумент.Дата = ТекущаяДата();
					ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаполняемыйДокумент, глЗначениеПеременной("глТекущийПользователь"), мВалюта, "Покупка");
					
				КонецЕсли;
				
				ЗаполняемыйДокумент.ДатаПланирования = Документ.ДатаПланирования;
				ЗаполняемыйДокумент.Подразделение = Документ.Подразделение;
				ЗаполняемыйДокумент.Проект = Документ.Проект;
				ЗаполняемыйДокумент.Сценарий = КонечныйПлан.Сценарий;
				
			Иначе
				
				ЗаполняемыйДокумент = мДокумент;
				
			КонецЕсли;
				
			ЗаполняемыйДокумент.ПериодичностьДетализации = КонечныйПлан.ПрофильРаспределенияДетализацияПлана.Подпериод;
			ЗаполняемыйДокумент.СоставПлана.Загрузить(Документ.СоставПлана);
			
			Для каждого СтрокаСоставаПлана из ЗаполняемыйДокумент.СоставПлана Цикл
				
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаСоставаПлана, ЗаполняемыйДокумент);
				
				Если КонечныйПлан.Сценарий.УчетПоКоличеству И КонечныйПлан.Сценарий.УчетПоСуммам И СтрокаСоставаПлана.Количество <> 0 Тогда
				
					СтрокаСоставаПлана.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаСоставаПлана.Сумма / СтрокаСоставаПлана.Количество, Неопределено, Истина, ЗаполняемыйДокумент.УчитыватьНДС, ЗаполняемыйДокумент.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаСоставаПлана.СтавкаНДС));
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСоставаПлана, ЗаполняемыйДокумент);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСоставаПлана, ЗаполняемыйДокумент);
					
				КонецЕсли;
				
			КонецЦикла;
					
			Если мДокумент = Неопределено Тогда
				
				ЗаполняемыйДокумент.Записать();
				НоваяСтрока = мСформированныеДокументы.Добавить();
				НоваяСтрока.Документ = ЗаполняемыйДокумент.Ссылка;
				НоваяСтрока.ВидПлана = КонечныйПлан.ВидПлана;
				НоваяСтрока.Пометка = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ДокументыСформированы;
	
КонецФункции // ВыполнитьОбработку()

Процедура РаспределитьПоПодпериодам(ТаблицаПриемник, ТаблицаИсточник, НомерСтрокиИсточника, НачальныйПериод, КонечныйПериод, ПрофильРаспределения = 0)

	Если Перечисления.Периодичность.Индекс(НачальныйПериод) >= Перечисления.Периодичность.Индекс(КонечныйПериод) Тогда
		
		Коэффициенты = Новый Массив;
		Значения = Новый Соответствие;
		
		// Приведение к начальному периоду
		СтрокаИсточник = ТаблицаИсточник[НомерСтрокиИсточника];

		ДатаНачалаПериода = НачалоДня(СтрокаИсточник.ДатаНачПериода);
		ДатаОкончанияПериода = КонецДня(СтрокаИсточник.ДатаКонПериода);

		НачПериодРезультат = Новый ТаблицаЗначений();

		Значения.Вставить("Количество", ТаблицаИсточник[НомерСтрокиИсточника].Количество);
		Значения.Вставить("Стоимость", ТаблицаИсточник[НомерСтрокиИсточника].Стоимость);

		Пока ДатаНачалаПериода < ДатаОкончанияПериода Цикл

			// Окончание подпериода
			ДатаОкончанияПодпериода = ДатаНачалаПериода;
			УправлениеПланированием.ВыровнятьДатуПоКонцуПериода(ДатаОкончанияПодпериода, НачальныйПериод);
			
			// Начало и окончание подпериода
			ДатаНачалаПодпериода = ДатаНачалаПериода;
			ДатаОкончанияПодпериода = ?(ДатаОкончанияПодпериода > ДатаОкончанияПериода, ДатаОкончанияПериода, ДатаОкончанияПодпериода);
			
			// Начало периода
			ДатаНачалаПериода = ДатаОкончанияПодпериода + 1;

			УправлениеПланированием.ДополнитьТаблицу(НачПериодРезультат, ТаблицаИсточник,, НомерСтрокиИсточника);
			
			НачПериодРезультат[НачПериодРезультат.Количество() - 1].ДатаНачПериода = ДатаНачалаПодпериода;
			НачПериодРезультат[НачПериодРезультат.Количество() - 1].ДатаКонПериода = ДатаОкончанияПодпериода;
			
			// Длительность подпериода
			ДлительностьПодпериода = (КонецДня(ДатаОкончанияПодпериода) - НачалоДня(ДатаНачалаПодпериода) + 1) / (3600 * 24);
			
			Коэффициенты.Добавить(ДлительностьПодпериода);
			
		КонецЦикла;
		
		Строки = Новый Массив;
		
		Для каждого Строка из НачПериодРезультат Цикл
			
			Строки.Добавить(Строка);
			
		КонецЦикла;

		Распределить(Строки, Коэффициенты, Значения);

		// Приведение к конечному периоду
		КонПериодРезультат = Новый ТаблицаЗначений();

		Для НомерСтроки = 0 по НачПериодРезультат.Количество() - 1 Цикл
			
			Коэффициенты.Очистить();
			Значения.Очистить();

			КонПериодРезультат.Очистить();

			СтрокаИсточник = НачПериодРезультат[НомерСтроки];

			ДатаНачалаПериода = СтрокаИсточник.ДатаНачПериода;
			ДатаОкончанияПериода = СтрокаИсточник.ДатаКонПериода;

			Значения.Вставить("Количество", НачПериодРезультат[НомерСтроки].Количество);
			Значения.Вставить("Стоимость", НачПериодРезультат[НомерСтроки].Стоимость);

			НомерПериода = 0;
			
			Пока ДатаНачалаПериода < ДатаОкончанияПериода Цикл
				
				// Окончание подпериода
				ДатаОкончанияПодпериода = ДатаНачалаПериода;
				УправлениеПланированием.ВыровнятьДатуПоКонцуПериода(ДатаОкончанияПодпериода, КонечныйПериод);
				
				// Начало и окончание подпериода
				ДатаНачалаПодпериода = ДатаНачалаПериода;
				ДатаОкончанияПодпериода = ?(ДатаОкончанияПодпериода > ДатаОкончанияПериода, ДатаОкончанияПериода, ДатаОкончанияПодпериода);
				
				// Начало периода
				ДатаНачалаПериода = ДатаОкончанияПодпериода + 1;

				УправлениеПланированием.ДополнитьТаблицу(КонПериодРезультат, НачПериодРезультат,, НомерСтроки);
				
				КонПериодРезультат[КонПериодРезультат.Количество() - 1].ДатаНачПериода = ДатаНачалаПодпериода;
				КонПериодРезультат[КонПериодРезультат.Количество() - 1].ДатаКонПериода = ДатаОкончанияПодпериода;
				
				// Длительность подпериода
				ДлительностьПодпериода = (КонецДня(ДатаОкончанияПодпериода) - НачалоДня(ДатаНачалаПодпериода) + 1) / (3600 * 24);
				
				НомерПодпериода = ПолучитьНомерПодпериода(НачальныйПериод, КонечныйПериод, ДатаНачалаПодпериода);
				Если ПрофильРаспределения = 0 Тогда
					
					Коэффициенты.Добавить(ДлительностьПодпериода);
					
				ИначеЕсли ПрофильРаспределения.Распределение.Количество() = 0 Тогда
					
					Коэффициенты.Добавить(ДлительностьПодпериода);
					
				Иначе
					
					НайденнаяСтрока = ПрофильРаспределения.Распределение.Найти(НомерПодпериода, "НомерПодпериода");
					
					Если НайденнаяСтрока = Неопределено Тогда
						
						Коэффициенты.Добавить(0);
						
					Иначе
						
						Коэффициенты.Добавить(НайденнаяСтрока.ДоляПодпериода);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строки = Новый Массив;
			
			Для каждого Строка из КонПериодРезультат Цикл
				
				Строки.Добавить(Строка);
				
			КонецЦикла;

			Распределить(Строки, Коэффициенты, Значения);
			
			Для каждого Строка из КонПериодРезультат Цикл
				
				УправлениеПланированием.ВыровнятьПериод(Строка.ДатаНачПериода, Строка.ДатаКонПериода, КонечныйПериод);
				
			КонецЦикла;
				
			УправлениеПланированием.ДополнитьТаблицу(ТаблицаПриемник, КонПериодРезультат);

		КонецЦикла;
		
	Иначе
		
		СтрокаИсточник = ТаблицаИсточник[НомерСтрокиИсточника];
		
		// Выравнивание по границе периода
		ДатаНачПериода = СтрокаИсточник.ДатаНачПериода;
		ДатаКонПериода = СтрокаИсточник.ДатаКонПериода;
		УправлениеПланированием.ВыровнятьПериод(ДатаНачПериода, ДатаКонПериода, КонечныйПериод);
		
		// Длительность периода и подпериода
		ДлительностьПериода = (КонецДня(ДатаКонПериода) - НачалоДня(ДатаНачПериода) + 1) / (3600 * 24);
		ДлительностьПодпериода = (КонецДня(СтрокаИсточник.ДатаКонПериода) - НачалоДня(СтрокаИсточник.ДатаНачПериода) + 1) / (3600 * 24);
		
		УправлениеПланированием.ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник,, НомерСтрокиИсточника);
		
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].ДатаНачПериода = ДатаНачПериода;
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].ДатаКонПериода = ДатаКонПериода;
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Количество = Окр(ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Количество * ДлительностьПериода / ДлительностьПодпериода, 3);
		ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Стоимость = Окр(ТаблицаПриемник[ТаблицаПриемник.Количество() - 1].Стоимость  * ДлительностьПериода / ДлительностьПодпериода, 2);
		
	КонецЕсли;

КонецПроцедуры // РаспределитьПоПодпериодам()

Процедура РаспределитьПоПодпериодамДетализацияПлана(КонечныйПлан, ТаблицаПриемник, ДобавляемаяСтрока, СтруктураНовойСтроки, Количество, Сумма)
	
	ПрофильРаспределения = КонечныйПлан.ПрофильРаспределенияДетализацияПлана;
	
	Если НЕ ЗначениеЗаполнено(ПрофильРаспределения) ИЛИ НЕ ЗначениеЗаполнено(ПрофильРаспределения.Период) ИЛИ НЕ ЗначениеЗаполнено(ПрофильРаспределения.Подпериод) Тогда
		
		НоваяСтрокаКонечногоПлана = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонечногоПлана, СтруктураНовойСтроки);
		
		НоваяСтрокаКонечногоПлана.Количество = Количество;
		НоваяСтрокаКонечногоПлана.Сумма = Сумма;
		
		Возврат;
		
	КонецЕсли;
	
	Коэффициенты = Новый Массив;
	Значения = Новый Соответствие;
	
	ДобавляемыеСтроки = Новый Массив;
	
	Значения.Вставить("Количество", Количество);
	Значения.Вставить("Сумма", Сумма);
	
	НачальныйПериод = КонечныйПлан.ПрофильРаспределенияДетализацияПлана.Период;
	КонечныйПериод = КонечныйПлан.ПрофильРаспределенияДетализацияПлана.Подпериод;
	
	ДатаНачалаТекущегоПодпериода = НачалоДня(ДобавляемаяСтрока.ДатаНачПериода);
	ДатаОкончанияПериода = НачалоДня(ДобавляемаяСтрока.ДатаКонПериода);
	
	Пока ДатаНачалаТекущегоПодпериода <= ДатаОкончанияПериода Цикл
		
		НоваяСтрокаКонечногоПлана = ТаблицаПриемник.Добавить();
		
		НоваяСтрокаКонечногоПлана.Период = ДатаНачалаТекущегоПодпериода;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонечногоПлана, СтруктураНовойСтроки);
		
		ДобавляемыеСтроки.Добавить(НоваяСтрокаКонечногоПлана);
		
		ДатаОкончанияТекущегоПодпериода = ДатаНачалаТекущегоПодпериода;
		УправлениеПланированием.ВыровнятьДатуПоКонцуПериода(ДатаОкончанияТекущегоПодпериода, КонечныйПериод);
		
		НомерПодпериода = ПолучитьНомерПодпериода(НачальныйПериод, КонечныйПериод, ДатаНачалаТекущегоПодпериода);
		
		Если ПрофильРаспределения.Распределение.Количество() = 0 Тогда
			
			Коэффициенты.Добавить((КонецДня(ДатаОкончанияТекущегоПодпериода) - НачалоДня(ДатаНачалаТекущегоПодпериода) + 1) / 3600 * 24);
			
		Иначе
			
			НайденнаяСтрока = ПрофильРаспределения.Распределение.Найти(НомерПодпериода, "НомерПодпериода");
			
			Если НайденнаяСтрока = Неопределено Тогда
				
				Коэффициенты.Добавить(0);
				
			Иначе
				
				Коэффициенты.Добавить(НайденнаяСтрока.ДоляПодпериода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаНачалаТекущегоПодпериода = ДатаОкончанияТекущегоПодпериода + 1;
		
	КонецЦикла;
	
	Распределить(ДобавляемыеСтроки, Коэффициенты, Значения);
	
КонецПроцедуры // РаспределитьПоПодпериодамДетализацияПлана()

Процедура Распределить(Строки, Коэффициенты, Значения, ДополнятьЗначения = Ложь)

	СуммаКоэффициентов = 0;
	
	Для каждого Коэффициент из Коэффициенты Цикл
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
		
	КонецЦикла;
	
	Для Индекс = 0 по Строки.Количество() - 1 Цикл
		
		Для каждого Значение из Значения Цикл
			
			Если СуммаКоэффициентов = 0 Тогда
				
				Строки[Индекс][Значение.Ключ] = 0;
				
			Иначе
				
				Если Индекс = Строки.Количество() - 1 Тогда
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Значение.Значение;
					Значения.Вставить(Значение.Ключ, 0);
					
				Иначе
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Окр(Значение.Значение * Коэффициенты[Индекс] / СуммаКоэффициентов, ?(Значение.Ключ = "Количество", 3, 2));
					
					Если Значение.Значение <> 0 Тогда
						
						Значения.Вставить(Значение.Ключ, Значение.Значение - Окр(Значение.Значение * Коэффициенты[Индекс] / СуммаКоэффициентов, ?(Значение.Ключ = "Количество", 3, 2)));
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициенты[Индекс];
		
	КонецЦикла;

КонецПроцедуры // Распределить()

Функция ПолучитьНомерПодпериода(Период, Подпериод, ДатаНачалаПодпериода)

	ДатаНачалаПериода = ДатаНачалаПодпериода;
	УправлениеПланированием.ВыровнятьДатуПоНачалуПериода(ДатаНачалаПериода, Период);
	
	Если Подпериод = Перечисления.Периодичность.День Тогда
		
		Возврат ДеньГода(ДатаНачалаПодпериода) - ДеньГода(ДатаНачалаПериода) + 1;
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Неделя Тогда
		
		Возврат НеделяГода(ДатаНачалаПодпериода) - НеделяГода(ДатаНачалаПериода) + 1;
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Декада Тогда
		
		Возврат (Месяц(ДатаНачалаПодпериода) - Месяц(ДатаНачалаПериода)) * 3 + 1 + Число(День(ДатаНачалаПодпериода) > 10) + Число(День(ДатаНачалаПодпериода) > 20);
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Месяц Тогда
		
		Возврат Месяц(ДатаНачалаПодпериода) - Месяц(ДатаНачалаПериода) + 1;
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Квартал Тогда
		
		Возврат Цел((Месяц(ДатаНачалаПодпериода) - 1) / 3 + 1);
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Полугодие Тогда
		
		Возврат ?(Месяц(ДатаНачалаПодпериода) > 6, 2, 1);
		
	ИначеЕсли Подпериод = Перечисления.Периодичность.Год Тогда
		
		Возврат 1;
		
	КонецЕсли;

КонецФункции // ПолучитьНомерПодпериода()

Функция ЭтоПлановыеДанные(Источник)
	
	Возврат Источник = 2 ИЛИ Источник = 4;
	
КонецФункции // ЭтоПлановыеДанные()

Процедура РаспределитьПоНоменклатуре(ТаблицаИсточник)

	ИндексСтроки = 0;

	Пока ИндексСтроки < ТаблицаИсточник.Количество() Цикл
		
		Если ТипЗнч(ТаблицаИсточник[ИндексСтроки].Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда

			ТаблицаРезультатРаспределения = Новый ТаблицаЗначений;

			Коэффициенты = Новый Массив;
			Значения = Новый Соответствие;

			Значения.Вставить("Количество", ТаблицаИсточник[ИндексСтроки].Количество * ?(ТаблицаИсточник[ИндексСтроки].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0, 1, ТаблицаИсточник[ИндексСтроки].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент));
			Значения.Вставить("Стоимость", ТаблицаИсточник[ИндексСтроки].Стоимость);

			Номенклатура = Справочники.Номенклатура.Выбрать(,, Новый Структура("НоменклатурнаяГруппа", ТаблицаИсточник[ИндексСтроки].Номенклатура));
			
			Пока Номенклатура.Следующий() Цикл
				
				Если Номенклатура.ВесовойКоэффициентВхождения > 0 Тогда

					УправлениеПланированием.ДополнитьТаблицу(ТаблицаРезультатРаспределения, ТаблицаИсточник, , ИндексСтроки);
	                ТаблицаРезультатРаспределения[ТаблицаРезультатРаспределения.Количество() - 1].Номенклатура = Номенклатура.Ссылка;
					Коэффициенты.Добавить(Номенклатура.ВесовойКоэффициентВхождения);
				
				КонецЕсли;
				
			КонецЦикла;

			ТаблицаИсточник.Удалить(ТаблицаИсточник[ИндексСтроки]);
			
			Строки = Новый Массив;
			
			Для каждого Строка из ТаблицаРезультатРаспределения Цикл
				
				Строки.Добавить(Строка);
				
			КонецЦикла;
			
			Распределить(Строки, Коэффициенты, Значения);
			
			Индекс = 0;
			
			Пока Индекс < ТаблицаРезультатРаспределения.Количество() Цикл
				
				ТаблицаРезультатРаспределения[Индекс].Количество = ТаблицаРезультатРаспределения[Индекс].Количество / ?(ТаблицаРезультатРаспределения[Индекс].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0, 1, ТаблицаРезультатРаспределения[Индекс].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			УправлениеПланированием.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаРезультатРаспределения);
			
		Иначе
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // РаспределитьПоНоменклатуре()

Процедура ДобавитьСтрокуВТабличнуюЧасть(ТабличнаяЧасть, ДобавляемаяСтрока, КонечныйПлан, ИндексСтроки)
	
	УчетПоКоличеству = КонечныйПлан.Сценарий.УчетПоКоличеству;
	УчетПоСуммам = КонечныйПлан.Сценарий.УчетПоСуммам;
	
	Если УчетПоСуммам Тогда
		
		ТипЦен = Неопределено;
		ДатаЦены = Неопределено;
		СтратегияРасчета = Неопределено;
		ФункцияРасчета = Неопределено;
		
		СтратегияРасчета = ПолучитьСтратегиюПоИдентификатору(ИндексСтроки);
		
		Если СтратегияРасчета <> Неопределено И СтратегияРасчета.СтратегияРасчетаСуммы > 0 Тогда
				
			ТипЦен = СтратегияРасчета.ТипЦен;
			ДатаЦены = СтратегияРасчета.ДатаЦен;
			СтратегияРасчетаСуммы = СтратегияРасчета.СтратегияРасчетаСуммы;
			ФункцияРасчета = СтратегияРасчета.Функция;
				
		КонецЕсли;
			
	КонецЕсли;
	
	Если КонечныйПлан.Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы И ТипЗнч(ДобавляемаяСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			
		Если ДобавляемаяСтрока.Номенклатура.НоменклатурнаяГруппа.Пустая() Тогда
				
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры """ + ДобавляемаяСтрока.Номенклатура.Наименование + """ не определена номенклатурная группа.");
			Возврат;
				
		КонецЕсли;
			
		СтруктураНовойСтроки = Новый Структура();
			
		СтруктураНовойСтроки.Вставить("Номенклатура", ДобавляемаяСтрока.Номенклатура.НоменклатурнаяГруппа);
		СтруктураНовойСтроки.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтруктураНовойСтроки.Вставить("ЕдиницаИзмерения", ДобавляемаяСтрока.Номенклатура.НоменклатурнаяГруппа.ЕдиницаХраненияОстатков);
		СтруктураНовойСтроки.Вставить("Коэффициент", ?(ДобавляемаяСтрока.Номенклатура.НоменклатурнаяГруппа.ЕдиницаХраненияОстатков.Коэффициент = 0, 1, ДобавляемаяСтрока.Номенклатура.НоменклатурнаяГруппа.ЕдиницаХраненияОстатков.Коэффициент));
		СтруктураНовойСтроки.Вставить("Заказ", ДобавляемаяСтрока.Заказ);
		СтруктураНовойСтроки.Вставить("Контрагент", ДобавляемаяСтрока.Контрагент);
		СтруктураНовойСтроки.Вставить("Договор", ДобавляемаяСтрока.Договор);
			
	Иначе
			
		СтруктураНовойСтроки = Новый Структура();
			
		СтруктураНовойСтроки.Вставить("Номенклатура", ДобавляемаяСтрока.Номенклатура);
		СтруктураНовойСтроки.Вставить("ХарактеристикаНоменклатуры", ДобавляемаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураНовойСтроки.Вставить("ЕдиницаИзмерения", ДобавляемаяСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		СтруктураНовойСтроки.Вставить("Коэффициент", ?(ДобавляемаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0, 1, ДобавляемаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент));
		СтруктураНовойСтроки.Вставить("Заказ", ДобавляемаяСтрока.Заказ);
		СтруктураНовойСтроки.Вставить("Контрагент", ДобавляемаяСтрока.Контрагент);
		СтруктураНовойСтроки.Вставить("Договор", ДобавляемаяСтрока.Договор);
			
	КонецЕсли;
	
	Сумма = 0;
	Количество = 0;
	
	Если УчетПоСуммам Тогда
			
		Если ТипЦен = Неопределено И СтратегияРасчета.СтратегияРасчетаСуммы = 0 Тогда
				
			Сумма = ДобавляемаяСтрока.Стоимость;
				
		Иначе
			
			Сумма = ДобавляемаяСтрока.Количество * ПолучитьЦену(ДобавляемаяСтрока, ТипЦен, ДатаЦены, СтратегияРасчетаСуммы, ФункцияРасчета);
					
		КонецЕсли;
		
	КонецЕсли;
		
	Если УчетПоКоличеству Тогда
			
		Количество = ДобавляемаяСтрока.Количество * ?(ДобавляемаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0, 1, ДобавляемаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) / ?(СтруктураНовойСтроки.Коэффициент = 0, 1, СтруктураНовойСтроки.Коэффициент);
		
	КонецЕсли;
	
	РаспределитьПоПодпериодамДетализацияПлана(КонечныйПлан, ТабличнаяЧасть, ДобавляемаяСтрока, СтруктураНовойСтроки, Количество, Сумма);
	
КонецПроцедуры // ДобавитьСтрокуВТабличнуюЧасть()

Функция ПолучитьЦену(Строка, ТипЦен, ДатаЦены, СтратегияРасчета, ФункцияРасчета)
	
	ПолученнаяЦена = 0;
	
	Если ФункцияРасчета = 0 Тогда
		
		_ФункцияРасчета = "МАКСИМУМ";
		
	ИначеЕсли ФункцияРасчета = 1 Тогда
		
		_ФункцияРасчета = "МИНИМУМ";
		
	ИначеЕсли ФункцияРасчета = 2 Тогда
		
		_ФункцияРасчета = "СРЕДНЕЕ";
		
	КонецЕсли;
	
	Если СтратегияРасчета = 1 Тогда
		
		ИмяРегистра = "ЦеныНоменклатуры";
		
		Если ТипЦен = Неопределено ИЛИ ТипЦен.Пустая() Тогда
			
			ТекстУсловия1 = "";
			ТекстУсловия2 = "";
			
		Иначе
			
			ТекстУсловия1 = " И ТипЦен = &ТипЦен";
			ТекстУсловия2 = " И ТипыЦен.Ссылка = &ТипЦен";
			
		КонецЕсли;
		
	ИначеЕсли СтратегияРасчета = 2 Тогда
		
		ИмяРегистра = "ЦеныНоменклатурыКонтрагентов";
		
		Если ТипЦен = Неопределено ИЛИ ТипЦен.Пустая() Тогда
			
			ТекстУсловия1 = "";
			ТекстУсловия2 = " И Ложь";
			
		ИначеЕсли ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
			
			ТекстУсловия1 = " И ТипЦен = &ТипЦен";
			ТекстУсловия2 = " И Ложь";
			
		ИначеЕсли ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
			
			ТекстУсловия1 = " И ТипЦен.ТипЦеныНоменклатуры = &ТипЦен";
			ТекстУсловия2 = " И Ложь";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + _ФункцияРасчета + "(Цены.Цена) КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		Цены.Цена * (100 + ВЫБОР
	|			КОГДА Цены.ТипЦен.ЦенаВключаетНДС = ЛОЖЬ
	|				ТОГДА ВЫБОР
	|						КОГДА Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|								ИЛИ Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|							ТОГДА 20
	|						КОГДА Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|								ИЛИ Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|							ТОГДА 18
	|						КОГДА Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|								ИЛИ Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) / 100 * Цены.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Цены.ЕдиницаИзмерения.Коэффициент * КурсВалюты.Курс * &Кратность / КурсВалюты.Кратность / &Курс КАК Цена
	|	ИЗ
	|		РегистрСведений." + ИмяРегистра + ".СрезПоследних(
	|			&ДатаЦены,
	|			Номенклатура = &Номенклатура
	|			    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)" + ТекстУсловия1 + ") КАК Цены
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсВалюты
	|			ПО Цены.Валюта = КурсВалюты.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Цены.Цена * (100 + ВЫБОР
	|			КОГДА Цены.ТипЦен.ЦенаВключаетНДС = ЛОЖЬ
	|				ТОГДА ВЫБОР
	|						КОГДА Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|								ИЛИ Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|							ТОГДА 20
	|						КОГДА Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|								ИЛИ Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|							ТОГДА 18
	|						КОГДА Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|								ИЛИ Цены.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|							ТОГДА 10
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) / 100 * (100 + ТипыЦен.ПроцентСкидкиНаценки) / 100 * Цены.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Цены.ЕдиницаИзмерения.Коэффициент * КурсВалюты.Курс * &Кратность / КурсВалюты.Кратность / &Курс
	|	ИЗ
	|		Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаЦены,
	|			Номенклатура = &Номенклатура
	|			    И ХарактеристикаНоменклатуры В (&ХарактеристикаНоменклатуры)) КАК Цены
	|			ПО Цены.ТипЦен = ТипыЦен.БазовыйТипЦен
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсВалюты
	|			ПО Цены.Валюта = КурсВалюты.Валюта
	|	ГДЕ
	|		ТипыЦен.Рассчитывается = ИСТИНА" + ТекстУсловия2 + ") КАК Цены";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("ДатаЦены", ДатаЦены);
	Запрос.УстановитьПараметр("Курс", мКурс);
	Запрос.УстановитьПараметр("Кратность", мКратность);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		ПолученнаяЦена = ?(Выборка.Цена = Null, 0, Выборка.Цена);
		
	КонецЕсли;
	
	Возврат ПолученнаяЦена;
	
КонецФункции // ПолучитьЦену()

Процедура СвернутьТабличнуюЧастьДокумента(ТабличнаяЧасть, Сценарий)
	
	ТабличнаяЧасть.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, Заказ, Контрагент, Договор", "Количество, Сумма");
	
	УчетПоКоличеству = Сценарий.УчетПоКоличеству;
	УчетПоСуммам = Сценарий.УчетПоСуммам;
	
	КоэффИзмененияКоличество = 1 + ?(ИзменитьРезультатРасчетаКоличества, ИзменитьРезультатРасчетаКоличестваПроцент / 100, 0);
	КоэффИзмененияСумма = 1 + ?(ИзменитьРезультатРасчетаСуммы, ИзменитьРезультатРасчетаСуммыПроцент / 100, 0);
	
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < ТабличнаяЧасть.Количество() Цикл
		
		Количество = ТабличнаяЧасть[ИндексСтроки].Количество;
		Сумма = ТабличнаяЧасть[ИндексСтроки].Сумма;
		
		Если (Количество <= 0 И УчетПоКоличеству) И (Сумма <= 0 И УчетПоСуммам) Тогда
			
			ТабличнаяЧасть.Удалить(ИндексСтроки);
			
		ИначеЕсли (Количество <= 0 И УчетПоКоличеству И НЕ УчетПоСуммам) Тогда
			
			ТабличнаяЧасть.Удалить(ИндексСтроки);
			
		ИначеЕсли (Сумма <= 0 И УчетПоСуммам И НЕ УчетПоКоличеству) Тогда
			
			ТабличнаяЧасть.Удалить(ИндексСтроки);
			
		Иначе
			
			Если УчетПоСуммам Тогда
					
				Сумма = Сумма * КоэффИзмененияСумма * КоэффИзмененияКоличество;
				
				Если РезультатРасчетаСуммыОкруглитьДо <> Неопределено Тогда
					
					Сумма = Окр(Сумма, РезультатРасчетаСуммыОкруглитьДо);
					
				КонецЕсли;
				
				ТабличнаяЧасть[ИндексСтроки].Сумма = Сумма;
					
			КонецЕсли;
				
			Если УчетПоКоличеству Тогда
					
				Количество = Количество * КоэффИзмененияКоличество;
				
				Если РезультатРасчетаКоличестваОкруглитьДо <> Неопределено Тогда
					
					Количество = Окр(Количество, РезультатРасчетаКоличестваОкруглитьДо);
					
				КонецЕсли;
				
				ТабличнаяЧасть[ИндексСтроки].Количество = Количество;
					
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СвернутьТабличнуюЧастьДокумента()

Процедура СложениеОбъединениеДанных(ТаблицаИсточник)
	
	Если ТаблицаИсточник.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ мРежимСложениеОбъединениеСУчетомЗаказов Тогда
		
		ТаблицаИсточник.ЗаполнитьЗначения(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ");
		
	КонецЕсли;
	
	Если НЕ мРежимСложениеОбъединениеСУчетомПодразделений Тогда
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Подразделения.ПустаяСсылка(), "Подразделение");
		
	КонецЕсли;
	
	Если НЕ мРежимСложениеОбъединениеСУчетомПроектов Тогда
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Проекты.ПустаяСсылка(), "Проект");
		
	КонецЕсли;
	
	Если НЕ мРежимСложениеОбъединениеСУчетомКонтрагентов Тогда
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.Контрагенты.ПустаяСсылка(), "Контрагент");
		
	КонецЕсли;
	
	Если НЕ мРежимСложениеОбъединениеСУчетомДоговоров Тогда
		
		ТаблицаИсточник.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "Договор");
		
	КонецЕсли;
	
	Если мРежимОбъединение Тогда // Объединение
		
		ТаблицаИсточник.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Заказ, Проект, Подразделение, Контрагент, Договор, Источник, ИндексСтроки, ДатаНачПериода, ДатаКонПериода", "Количество, Стоимость");
		ТаблицаИсточник.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, Заказ, Проект, Подразделение, Контрагент, Договор, Количество Убыв");
		
		Индекс = 1;

		Пока Индекс < ТаблицаИсточник.Количество() Цикл
			
			Если ТаблицаИсточник[Индекс].Номенклатура = ТаблицаИсточник[Индекс - 1].Номенклатура И
				 ТаблицаИсточник[Индекс].ХарактеристикаНоменклатуры = ТаблицаИсточник[Индекс - 1].ХарактеристикаНоменклатуры И
				 ТаблицаИсточник[Индекс].Заказ = ТаблицаИсточник[Индекс - 1].Заказ И
				 ТаблицаИсточник[Индекс].Подразделение = ТаблицаИсточник[Индекс - 1].Подразделение И
				 ТаблицаИсточник[Индекс].Проект = ТаблицаИсточник[Индекс - 1].Проект И
				 ТаблицаИсточник[Индекс].Контрагент = ТаблицаИсточник[Индекс - 1].Контрагент И
				 ТаблицаИсточник[Индекс].Договор = ТаблицаИсточник[Индекс - 1].Договор Тогда
				 
				ТаблицаИсточник.Удалить(Индекс);
				
			Иначе
				
				Индекс = Индекс + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе // Сложение
		
		ТаблицаИсточник.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Заказ, Проект, Подразделение, Контрагент, Договор, Источник, ИндексСтроки, ДатаНачПериода, ДатаКонПериода", "Количество, Стоимость");

	КонецЕсли;
	
КонецПроцедуры // СложениеОбъединениеДанных()

Функция КорректностьЗаполненияДанных() Экспорт
	
	ДанныеКорректны = Истина;
	
	Если КонечныеПланы.Количество() > 0 Тогда
		
		Для каждого КонечныйПлан из КонечныеПланы Цикл
			
			Текст = "";
			
			Если КонечныйПлан.ВидПлана.Пустая() Тогда
				
				Текст = Текст + "Не указан вид плана." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если КонечныйПлан.Сценарий.Пустая() Тогда
				
				Текст = Текст + "Не указан сценарий." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если КонечныйПлан.Сценарий.Периодичность.Пустая() Тогда
				
				Текст = Текст + "Не указана периодичность сценария." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если КонечныйПлан.ДатаНач = Дата('00010101') Тогда
				
				Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если КонечныйПлан.ДатаКон = Дата('00010101') Тогда
				
				Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если КонечныйПлан.ДатаНач <> Дата('00010101') И КонечныйПлан.ДатаКон <> Дата('00010101') И КонечныйПлан.ДатаНач > КонечныйПлан.ДатаКон Тогда
				
				Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если КонечныйПлан.ПрофильРаспределенияДетализацияПлана <> Справочники.ПрофилиРаспределенияПоПериодам.ПустаяСсылка() И КонечныйПлан.Сценарий.Периодичность <> КонечныйПлан.ПрофильРаспределенияДетализацияПлана.Период Тогда
				
				Текст = Текст + "Период профиля распределения (детализация плана) должен быть равен периодичности сценария." + Символы.ПС;
				ДанныеКорректны = Ложь;
				
			КонецЕсли;
			
			Если СтрДлина(Текст) > 0 Тогда
			
				ОбщегоНазначения.СообщитьОбОшибке(Текст,, "Конечные планы: Строка " + КонечныйПлан.НомерСтроки + ".");
			
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ДанныеКорректны = Ложь;
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнены.",, "Конечные планы.");
		
	КонецЕсли;
	
	Для каждого СтратегияРасчета из СтратегииРасчета Цикл
		
		Если НЕ СтратегияРасчета.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		Текст = "";
			
		Если НЕ ПолучитьПараметрыСтратегииПоВиду(СтратегияРасчета.ВидСтратегии).НаДату Тогда
			
			Если СтратегияРасчета.ДатаНач = Дата('00010101') Тогда
					
				Текст = Текст + "Не указана дата начала периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
					
			КонецЕсли;
			
			Если СтратегияРасчета.ДатаКон = Дата('00010101') Тогда
					
				Текст = Текст + "Не указана дата окончания периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
					
			КонецЕсли;
			
			Если СтратегияРасчета.ДатаНач <> Дата('00010101') И СтратегияРасчета.ДатаКон <> Дата('00010101') И СтратегияРасчета.ДатаНач > СтратегияРасчета.ДатаКон Тогда
					
				Текст = Текст + "Дата начала превышает дату окончания периода." + Символы.ПС;
				ДанныеКорректны = Ложь;
					
			КонецЕсли;
			
		КонецЕсли;
			
		Если СтрДлина(Текст) > 0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(Текст,, "Стратегии расчета количества: " + СтратегияРасчета.НаименованиеСтратегии + ".");
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ДанныеКорректны;
	
КонецФункции // КорретностьЗаполненияДанных()

Функция КорректностьЗаполненияДокумента() Экспорт
	
	Если мДокумент = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ДанныеКорректны = Истина;
	
	Текст = "";
	
	Если мДокумент.ВалютаДокумента.Пустая() Тогда
		
		Текст = Текст + "Не выбрана валюта." + Символы.ПС;
		ДанныеКорректны = Ложь;
	
	КонецЕсли;

	Если мДокумент.КурсДокумента = 0 Тогда
		
		Текст = Текст + "Не указан курс валюты." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;

	Если мДокумент.КратностьДокумента = 0 Тогда
		
		Текст = Текст + "Не указана кратность валюты." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;

	Если мДокумент.Сценарий.Пустая() Тогда
		
		Текст = Текст + "Не указан сценарий планирования." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	ИначеЕсли мДокумент.Сценарий.Периодичность.Пустая() Тогда
		
		Текст = Текст + "Не указана периодичность сценария планирования." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;

	Если мДокумент.ДатаПланирования = Дата('00010101') Тогда
		
		Текст = Текст + "Не указана дата планирования." + Символы.ПС;
		ДанныеКорректны = Ложь;
		
	КонецЕсли;
	
	Если СтрДлина(Текст) > 0 Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке(Текст,, "В документе: " + Строка(мДокумент));
	
	КонецЕсли;
	
	Возврат ДанныеКорректны;
	
КонецФункции // КорректностьЗаполненияДокумента()

Функция ПолучитьСтратегиюПоИдентификатору(ИндексСтроки)
	
	Для каждого СтратегияРасчета из СтратегииРасчета Цикл
			
		Если ПолучитьИдентификаторСтратегии(СтратегияРасчета.ИдентификаторСтроки) = ИндексСтроки Тогда
				
			Возврат СтратегияРасчета;
				
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтратегиюПоИдентификатору()

Функция ПолучитьПараметрыСтратегииПоВиду(ВидСтратегии) Экспорт
	
	Для каждого Стратегия из мМассивСтратегии Цикл
		
		Если Стратегия.ВидСтратегии = ВидСтратегии Тогда
			
			Возврат Стратегия;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьПараметрыСтратегииПоВиду()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ОБЪЕКТА "ПостроительОтчета"

Процедура НастроитьПостроитель(ПостроительОтчета) Экспорт
	
	ТекстЗапроса = "";
	
	Для каждого Стратегия из СтратегииРасчета Цикл
		
		Если Стратегия.Использование Тогда
			
			Если ТекстЗапроса <> "" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ПолучитьПараметрыСтратегииПоВиду(Стратегия.ВидСтратегии).ТекстЗапроса, "_Индекс", ПолучитьИдентификаторСтратегии(Стратегия.ИдентификаторСтроки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ПостроительОтчета.Текст = ТекстЗапроса;
		
		УстановитьПредставленияПолей(ПостроительОтчета);
		
		//Отборы по свойствам и категориям
		мСоответствиеНазначений = Новый Соответствие;
		
		Если ИспользоватьСвойстваИКатегории Тогда
			
			ТаблицаПолей = Новый ТаблицаЗначений;
			ТаблицаПолей.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляются свойства и категории
			ТаблицаПолей.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляются свойства и категории
			ТаблицаПолей.Колонки.Добавить("Представление"); // представление поля, для которого добавляются свойства и категории
			ТаблицаПолей.Колонки.Добавить("Назначение");    // назначение свойств/категорий объектов для данного поля
			ТаблицаПолей.Колонки.Добавить("НетКатегорий");  // признак НЕиспользования категорий для объекта
			
			Для каждого Стратегия из СтратегииРасчета Цикл
				
				Если НЕ Стратегия.Использование Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Для каждого ПредставлениеПоля из ПолучитьПараметрыСтратегииПоВиду(Стратегия.ВидСтратегии).ПредставленияПолей Цикл
						
					НайденноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(ПредставлениеПоля.Ключ + ПолучитьИдентификаторСтратегии(Стратегия.ИдентификаторСтроки));
						
					Если НайденноеПоле <> Неопределено Тогда
							
						ДокументыДобавлен = Ложь;
								
						Для каждого Тип из НайденноеПоле.ТипЗначения.Типы() Цикл
										
							Назначение = Неопределено;
										
							Если НЕ ДокументыДобавлен Тогда
											
								Назначение = ?(Документы.ТипВсеСсылки().СодержитТип(Тип), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы, Назначение);
								ДокументыДобавлен = Истина;
											
							КонецЕсли;
							
							Назначение = ?(Тип = Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛицаКонтрагентов, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.КонтактныеЛица"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛица, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.Контрагенты"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.Номенклатура"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.НоменклатурныеГруппы"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.Организации"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.Склады"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады, Назначение);
							Назначение = ?(Тип = Тип("СправочникСсылка.ФизическиеЛица"), ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица, Назначение);
										
							Если Назначение <> Неопределено Тогда
											
								ДобавитьСвойстваИКатегорииДляПоля(ПредставлениеПоля.Значение.ПутьКДанным, НайденноеПоле.Имя, НайденноеПоле.Представление, Назначение,, ТаблицаПолей);
											
							КонецЕсли;
										
						КонецЦикла;
									
					КонецЕсли;
						
				КонецЦикла;
				
				ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса, ТаблицаПолей, ПолучитьПараметрыСтратегииПоВиду(Стратегия.ВидСтратегии).ПредставленияПолей, мСоответствиеНазначений, ПостроительОтчета.Параметры, Стратегия);
				ТаблицаПолей.Очистить();
	
			КонецЦикла;
			
			ПостроительОтчета.Текст = ТекстЗапроса;
			
		КонецЕсли;
			
		УстановитьПредставленияПолей(ПостроительОтчета, Истина);
		
		Для каждого Стратегия из СтратегииРасчета Цикл
			
			Если Стратегия.Использование Тогда
				
				УстановитьТипыЗначенийСвойствИКатегорийДляОтбораЛокально(ПостроительОтчета, мСоответствиеНазначений, ПолучитьПараметрыСтратегииПоВиду(Стратегия.ВидСтратегии).ПредставленияПолей);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПостроительОтчета.Текст = "ВЫБРАТЬ ПЕРВЫЕ 0 NULL";
		
	КонецЕсли;
	
КонецПроцедуры // НастроитьПостроитель()

Процедура ИнициализацияПомощникаПланирования() Экспорт
	
	Если ТипЗнч(мМассивСтратегии) <> Тип("Массив") Тогда
		
		мМассивСтратегии = Новый Массив;
		
	КонецЕсли;
	
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ОбъемЗакупок", 1, "Объем закупок", "ЗакупкиОбороты", Ложь, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ПланыЗакупок", 2,"Планы закупок", "ПланыЗакупокОбороты", Ложь, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ОбъемПродаж", 3, "Объем продаж", "ПродажиОбороты", Ложь, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ПланыПродаж", 4, "Планы продаж", "ПланыПродажОбороты", Ложь, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ЗаказыПоставщикам", 5, "Заказы поставщикам", "ЗаказыПоставщикамОстатки", Истина, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ЗаказыПокупателей", 6, "Заказы покупателей", "ЗаказыПокупателейОстатки", Истина, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ВнутренниеЗаказы", 7, "Внутренние заказы", "ВнутренниеЗаказыОстатки", Истина, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "СкладскиеОстатки", 8, "Складские остатки", "ТоварыНаСкладахОстатки", Истина, Новый Структура));
	мМассивСтратегии.Добавить(Новый Структура("ВидСтратегии, Источник, Представление, ИмяТаблицы, НаДату, ПредставленияПолей, ТекстЗапроса", "ПлановыеОстатки", 9, "Плановые остатки", "ПлановыеОстаткиТоваровСрезПоследних", Истина, Новый Структура));

	// ОбъемЗакупок
	ПолучитьПараметрыСтратегииПоВиду("ОбъемЗакупок").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий,
	|	ЗакупкиОбороты.Проект КАК Проект,
	|	ЗакупкиОбороты.Подразделение КАК Подразделение,
	|	ЗакупкиОбороты.Номенклатура КАК Номенклатура,
	|	ЗакупкиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗакупкиОбороты.Контрагент КАК Контрагент,
	|	ЗакупкиОбороты.ДоговорКонтрагента КАК Договор,
	|	&ОбъемЗакупокДатаНач_Индекс КАК ДатаНачПериода,
	|	&ОбъемЗакупокДатаКон_Индекс КАК ДатаКонПериода,
	|	ЗакупкиОбороты.КоличествоОборот * &ОбъемЗакупокКоэффициент_Индекс КАК Количество,
	|	ЗакупкиОбороты.СтоимостьОборот * &ОбъемЗакупокКоэффициент_Индекс КАК Стоимость
	|ИЗ
	|	РегистрНакопления.Закупки.Обороты(&ОбъемЗакупокДатаНачГраница_Индекс, &ОбъемЗакупокДатаКонГраница_Индекс,,
	|		{Проект.* КАК ОбъемЗакупокПроект_Индекс,
	|		Подразделение.* КАК ОбъемЗакупокПодразделение_Индекс,
	|		Номенклатура.* КАК ОбъемЗакупокНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ОбъемЗакупокХарактеристикаНоменклатуры_Индекс,
	|		ЗаказПоставщику.* КАК ОбъемЗакупокЗаказПоставщику_Индекс,
	|		Контрагент.* КАК ОбъемЗакупокКонтрагент_Индекс,
	|		ДоговорКонтрагента.* КАК ОбъемЗакупокДоговор_Индекс,
	|		ДокументЗакупки.* КАК ОбъемЗакупокДокументЗакупки_Индекс,
	|		СтатусПартии КАК ОбъемЗакупокСтатусПартии_Индекс}
	|	) КАК ЗакупкиОбороты
	|	//СОЕДИНЕНИЯ_ОбъемЗакупок_Индекс
	|{ГДЕ
	|	ЗакупкиОбороты.КоличествоОборот КАК ОбъемЗакупокКоличество_Индекс,
	|	ЗакупкиОбороты.СтоимостьОборот КАК ОбъемЗакупокСтоимость_Индекс}
	|//ОТБОР_ОбъемЗакупок_Индекс{ГДЕ
	|	//СВОЙСТВА_ОбъемЗакупок_Индекс
	|	//КАТЕГОРИИ_ОбъемЗакупок_Индекс
	|//ОТБОР_ОбъемЗакупок_Индекс}";
	
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "Проект", "Проект", "ЗакупкиОбороты.Проект");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "Подразделение", "Подразделение", "ЗакупкиОбороты.Подразделение");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "Номенклатура", "Номенклатура", "ЗакупкиОбороты.Номенклатура");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ЗакупкиОбороты.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "ЗаказПоставщику", "Заказ поставщику", "ЗакупкиОбороты.ЗаказПоставщику");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "Контрагент", "Контрагент", "ЗакупкиОбороты.Контрагент");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "Договор", "Договор", "ЗакупкиОбороты.ДоговорКонтрагента");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "ДокументЗакупки", "Документ закупки", "ЗакупкиОбороты.ДокументЗакупки");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "СтатусПартии", "Статус партии", "ЗакупкиОбороты.СтатусПартии");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "Количество", "Количество", "");
	ДобавитьПредставлениеПоля("ОбъемЗакупок", "Стоимость", "Стоимость", "");

	// ПланыЗакупок
	ПолучитьПараметрыСтратегииПоВиду("ПланыЗакупок").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ПланыЗакупокОбороты.Сценарий КАК Сценарий,
	|	ПланыЗакупокОбороты.Проект КАК Проект,
	|	ПланыЗакупокОбороты.Подразделение КАК Подразделение,
	|	ПланыЗакупокОбороты.Номенклатура КАК Номенклатура,
	|	ПланыЗакупокОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПланыЗакупокОбороты.Заказ КАК Заказ,
	|	ПланыЗакупокОбороты.Контрагент КАК Контрагент,
	|	ПланыЗакупокОбороты.Договор КАК Договор,
	|	&ПланыЗакупокДатаНач_Индекс КАК ДатаНачПериода,
	|	&ПланыЗакупокДатаКон_Индекс КАК ДатаКонПериода,
	|	ПланыЗакупокОбороты.КоличествоОборот * &ПланыЗакупокКоэффициент_Индекс КАК Количество,
	|	(ПланыЗакупокОбороты.СтоимостьОборот + ПланыЗакупокОбороты.НДСОборот) * &ПланыЗакупокКоэффициент_Индекс КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПланыЗакупок.Обороты(&ПланыЗакупокДатаНачГраница_Индекс, &ПланыЗакупокДатаКонГраница_Индекс, ,
	|		{Сценарий.* КАК ПланыЗакупокСценарий_Индекс,
	|		Проект.* КАК ПланыЗакупокПроект_Индекс,
	|		Подразделение.* КАК ПланыЗакупокПодразделение_Индекс,
	|		Номенклатура.* КАК ПланыЗакупокНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ПланыЗакупокХарактеристикаНоменклатуры_Индекс,
	|		Заказ.* КАК ПланыЗакупокЗаказ_Индекс,
	|		ДокументПланирования.* КАК ПланыЗакупокДокументПланирования_Индекс,
	|		Контрагент.* КАК ПланыЗакупокКонтрагент_Индекс,
	|		Договор.* КАК ПланыЗакупокДоговор_Индекс}
	|	) КАК ПланыЗакупокОбороты
	|	//СОЕДИНЕНИЯ_ПланыЗакупок_Индекс
	|{ГДЕ
	|	ПланыЗакупокОбороты.КоличествоОборот КАК ПланыЗакупокКоличество_Индекс,
	|	ПланыЗакупокОбороты.СтоимостьОборот + ПланыЗакупокОбороты.НДСОборот КАК ПланыЗакупокСтоимость_Индекс}
	|//ОТБОР_ПланыЗакупок_Индекс{ГДЕ
	|	//СВОЙСТВА_ПланыЗакупок_Индекс
	|	//КАТЕГОРИИ_ПланыЗакупок_Индекс
	|//ОТБОР_ПланыЗакупок_Индекс}";
	
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Сценарий", "Сценарий", "ПланыЗакупокОбороты.Сценарий");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Проект", "Проект", "ПланыЗакупокОбороты.Проект");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Подразделение", "Подразделение", "ПланыЗакупокОбороты.Подразделение");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Номенклатура", "Номенклатура", "ПланыЗакупокОбороты.Номенклатура");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ПланыЗакупокОбороты.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Заказ", "Заказ", "ПланыЗакупокОбороты.Заказ");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "ДокументПланирования", "Документ планирования", "ПланыЗакупокОбороты.ДокументПланирования");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Контрагент", "Контрагент", "ПланыЗакупокОбороты.Контрагент");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Договор", "Договор", "ПланыЗакупокОбороты.Договор");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Количество", "Количество", "");
	ДобавитьПредставлениеПоля("ПланыЗакупок", "Стоимость", "Стоимость", "");

	// ОбъемПродаж
	ПолучитьПараметрыСтратегииПоВиду("ОбъемПродаж").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий,
	|	ПродажиОбороты.Проект КАК Проект,
	|	ПродажиОбороты.Подразделение КАК Подразделение,
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ПродажиОбороты.Контрагент КАК Контрагент,
	|	ПродажиОбороты.ДоговорКонтрагента КАК Договор,
	|	&ОбъемПродажДатаНач_Индекс КАК ДатаНачПериода,
	|	&ОбъемПродажДатаКон_Индекс КАК ДатаКонПериода,
	|	ПродажиОбороты.КоличествоОборот * &ОбъемПродажКоэффициент_Индекс КАК Количество,
	|	ПродажиОбороты.СтоимостьОборот * &ОбъемПродажКоэффициент_Индекс КАК Стоимость
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&ОбъемПродажДатаНачГраница_Индекс, &ОбъемПродажДатаКонГраница_Индекс,,
	|		{Проект.* КАК ОбъемПродажПроект_Индекс,
	|		Подразделение.* КАК ОбъемПродажПодразделение_Индекс,
	|		Номенклатура.* КАК ОбъемПродажНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ОбъемПродажХарактеристикаНоменклатуры_Индекс,
	|		ЗаказПокупателя.* КАК ОбъемПродажЗаказПокупателя_Индекс,
	|		ДоговорКонтрагента.* КАК ОбъемПродажДоговор_Индекс,
	|		Контрагент.* КАК ОбъемПродажКонтрагент_Индекс,
	|		ДокументПродажи.* КАК ОбъемПродажДокументПродажи_Индекс}
	|	) КАК ПродажиОбороты
	|	//СОЕДИНЕНИЯ_ОбъемПродаж_Индекс
	|{ГДЕ
	|	ПродажиОбороты.КоличествоОборот КАК ОбъемПродажКоличество_Индекс,
	|	ПродажиОбороты.СтоимостьОборот КАК ОбъемПродажСтоимость_Индекс}
	|//ОТБОР_ОбъемПродаж_Индекс{ГДЕ
	|	//СВОЙСТВА_ОбъемПродаж_Индекс
	|	//КАТЕГОРИИ_ОбъемПродаж_Индекс
	|//ОТБОР_ОбъемПродаж_Индекс}";

	ДобавитьПредставлениеПоля("ОбъемПродаж", "Проект", "Проект", "ПродажиОбороты.Проект");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "Подразделение", "Подразделение", "ПродажиОбороты.Подразделение");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "Номенклатура", "Номенклатура", "ПродажиОбороты.Номенклатура");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ПродажиОбороты.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "ЗаказПокупателя", "Заказ покупателя", "ПродажиОбороты.ЗаказПокупателя");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "Контрагент", "Контрагент", "ПродажиОбороты.ДоговорКонтрагента.Владелец");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "Договор", "Договор", "ПродажиОбороты.ДоговорКонтрагента");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "ДокументПродажи", "Документ продажи", "ПродажиОбороты.ДокументПродажи");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "Количество", "Количество", "");
	ДобавитьПредставлениеПоля("ОбъемПродаж", "Стоимость", "Стоимость", "");

	// ПланыПродаж
	ПолучитьПараметрыСтратегииПоВиду("ПланыПродаж").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ПланыПродажОбороты.Сценарий КАК Сценарий,
	|	ПланыПродажОбороты.Проект КАК Проект,
	|	ПланыПродажОбороты.Подразделение КАК Подразделение,
	|	ПланыПродажОбороты.Номенклатура КАК Номенклатура,
	|	ПланыПродажОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПланыПродажОбороты.Заказ КАК Заказ,
	|	ПланыПродажОбороты.Контрагент КАК Контрагент,
	|	ПланыПродажОбороты.Договор КАК Договор,
	|	&ПланыПродажДатаНач_Индекс КАК ДатаНачПериода,
	|	&ПланыПродажДатаКон_Индекс КАК ДатаКонПериода,
	|	ПланыПродажОбороты.КоличествоОборот * &ПланыПродажКоэффициент_Индекс КАК Количество,
	|	(ПланыПродажОбороты.СтоимостьОборот + ПланыПродажОбороты.НДСОборот) * &ПланыПродажКоэффициент_Индекс КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(&ПланыПродажДатаНачГраница_Индекс, &ПланыПродажДатаКонГраница_Индекс, ,
	|		{Сценарий.* КАК ПланыПродажСценарий_Индекс,
	|		Проект.* КАК ПланыПродажПроект_Индекс,
	|		Подразделение.* КАК ПланыПродажПодразделение_Индекс,
	|		Номенклатура.* КАК ПланыПродажНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ПланыПродажХарактеристикаНоменклатуры_Индекс,
	|		Заказ.* КАК ПланыПродажЗаказ_Индекс,
	|		Контрагент.* КАК ПланыПродажКонтрагент_Индекс,
	|		Договор.* КАК ПланыПродажДоговор_Индекс,
	|		ДокументПланирования.* КАК ПланыПродажДокументПланирования_Индекс}
	|	) КАК ПланыПродажОбороты
	|	//СОЕДИНЕНИЯ_ПланыПродаж_Индекс
	|{ГДЕ
	|	ПланыПродажОбороты.КоличествоОборот КАК ПланыПродажКоличество_Индекс,
	|	ПланыПродажОбороты.СтоимостьОборот + ПланыПродажОбороты.НДСОборот КАК ПланыПродажСтоимость_Индекс}
	|//ОТБОР_ПланыПродаж_Индекс{ГДЕ
	|	//СВОЙСТВА_ПланыПродаж_Индекс
	|	//КАТЕГОРИИ_ПланыПродаж_Индекс
	|//ОТБОР_ПланыПродаж_Индекс}";
	
	ДобавитьПредставлениеПоля("ПланыПродаж", "Сценарий", "Сценарий", "ПланыПродажОбороты.Сценарий");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Проект", "Проект", "ПланыПродажОбороты.Проект");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Подразделение", "Подразделение", "ПланыПродажОбороты.Подразделение");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Номенклатура", "Номенклатура", "ПланыПродажОбороты.Номенклатура");
	ДобавитьПредставлениеПоля("ПланыПродаж", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ПланыПродажОбороты.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Заказ", "Заказ", "ПланыПродажОбороты.Заказ");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Контрагент", "Контрагент", "ПланыПродажОбороты.Контрагент");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Договор", "Договор", "ПланыПродажОбороты.Договор");
	ДобавитьПредставлениеПоля("ПланыПродаж", "ДокументПланирования", "Документ планирования", "ПланыПродажОбороты.ДокументПланирования");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Количество", "Количество", "");
	ДобавитьПредставлениеПоля("ПланыПродаж", "Стоимость", "Стоимость", "");

	// ЗаказыПоставщикам
	ПолучитьПараметрыСтратегииПоВиду("ЗаказыПоставщикам").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
	|	ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) КАК Подразделение,
	|	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК Заказ,
	|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента КАК Договор,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачПериода,
	|	&ЗаказыПоставщикамДатаКон_Индекс КАК ДатаКонПериода,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток * &ЗаказыПоставщикамКоэффициент_Индекс КАК Количество,
	|	ЗаказыПоставщикамОстатки.СуммаУпрОстаток * &ЗаказыПоставщикамКоэффициент_Индекс КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ЗаказыПоставщикамДатаКонГраница_Индекс,
	|		{Номенклатура.* КАК ЗаказыПоставщикамНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ЗаказыПоставщикамХарактеристикаНоменклатуры_Индекс,
	|		ЗаказПоставщику.* КАК ЗаказыПоставщикамЗаказПоставщику_Индекс,
	|		ДоговорКонтрагента.Владелец.* КАК ЗаказыПоставщикамКонтрагент_Индекс,
	|		ДоговорКонтрагента.* КАК ЗаказыПоставщикамДоговор_Индекс,
	|		СтатусПартии КАК ЗаказыПоставщикамСтатусПартии_Индекс}
	|	) КАК ЗаказыПоставщикамОстатки
	|	//СОЕДИНЕНИЯ_ЗаказыПоставщикам_Индекс
	|{ГДЕ
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказыПоставщикамКоличество_Индекс,
	|	ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК ЗаказыПоставщикамСтоимость_Индекс}
	|//ОТБОР_ЗаказыПоставщикам_Индекс{ГДЕ
	|	//СВОЙСТВА_ЗаказыПоставщикам_Индекс
	|	//КАТЕГОРИИ_ЗаказыПоставщикам_Индекс
	|//ОТБОР_ЗаказыПоставщикам_Индекс}";
	
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "Номенклатура", "Номенклатура", "ЗаказыПоставщикамОстатки.Номенклатура");
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "ЗаказПоставщику", "Заказ поставщику", "ЗаказыПоставщикамОстатки.ЗаказПоставщику");
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "Контрагент", "Контрагент", "ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец");
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "Договор", "Договор", "ЗаказыПоставщикамОстатки.ДоговорКонтрагента");
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "СтатусПартии", "Статус партии", "ЗаказыПоставщикамОстатки.СтатусПартии");
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "Количество", "Количество", "");
	ДобавитьПредставлениеПоля("ЗаказыПоставщикам", "Стоимость", "Стоимость", "");

	// ЗаказыПокупателей
	ПолучитьПараметрыСтратегииПоВиду("ЗаказыПокупателей").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
	|	ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) КАК Подразделение,
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента КАК Договор,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачПериода,
	|	&ЗаказыПокупателейДатаКон_Индекс КАК ДатаКонПериода,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток * &ЗаказыПокупателейКоэффициент_Индекс КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток * &ЗаказыПокупателейКоэффициент_Индекс КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ЗаказыПокупателейДатаКонГраница_Индекс,
	|		{Номенклатура.* КАК ЗаказыПокупателейНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ЗаказыПокупателейХарактеристикаНоменклатуры_Индекс,
	|		ДоговорКонтрагента.Владелец.* КАК ЗаказыПокупателейКонтрагент_Индекс,
	|		ДоговорКонтрагента.* КАК ЗаказыПокупателейДоговор_Индекс,
	|		ЗаказПокупателя.* КАК ЗаказыПокупателейЗаказПокупателя_Индекс,
	|		СтатусПартии КАК ЗаказыПокупателейСтатусПартии_Индекс}
	|	) КАК ЗаказыПокупателейОстатки
	|	//СОЕДИНЕНИЯ_ЗаказыПокупателей_Индекс
	|{ГДЕ
	|	ЗаказыПокупателейОстатки.КоличествоОстаток КАК ЗаказыПокупателейКоличество_Индекс,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК ЗаказыПокупателейСтоимость_Индекс}
	|//ОТБОР_ЗаказыПокупателей_Индекс{ГДЕ
	|	//СВОЙСТВА_ЗаказыПокупателей_Индекс
	|	//КАТЕГОРИИ_ЗаказыПокупателей_Индекс
	|//ОТБОР_ЗаказыПокупателей_Индекс}";
	
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "Номенклатура", "Номенклатура", "ЗаказыПокупателейОстатки.Номенклатура");
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "ЗаказПокупателя", "Заказ покупателя", "ЗаказыПокупателейОстатки.ЗаказПокупателя");
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "Контрагент", "Контрагент", "ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец");
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "Договор", "Договор", "ЗаказыПокупателейОстатки.ДоговорКонтрагента");
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "СтатусПартии", "Статус партии", "ЗаказыПокупателейОстатки.СтатусПартии");
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "Количество", "Количество", "");
	ДобавитьПредставлениеПоля("ЗаказыПокупателей", "Стоимость", "Стоимость", "");

	// ВнутренниеЗаказы
	ПолучитьПараметрыСтратегииПоВиду("ВнутренниеЗаказы").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
	|	ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) КАК Подразделение,
	|	ВнутренниеЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачПериода,
	|	&ВнутренниеЗаказыДатаКон_Индекс КАК ДатаКонПериода,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток * &ВнутренниеЗаказыКоэффициент_Индекс КАК Количество,
	|	0 КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ВнутренниеЗаказыДатаКонГраница_Индекс,
	|		{Номенклатура.* КАК ВнутренниеЗаказыНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ВнутренниеЗаказыХарактеристикаНоменклатуры_Индекс,
	|		ВнутреннийЗаказ.* КАК ВнутренниеЗаказыВнутреннийЗаказ_Индекс,
	|		СтатусПартии КАК ВнутренниеЗаказыСтатусПартии_Индекс}
	|	) КАК ВнутренниеЗаказыОстатки
	|	//СОЕДИНЕНИЯ_ВнутренниеЗаказы_Индекс
	|{ГДЕ
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток КАК ВнутренниеЗаказыКоличество_Индекс}
	|//ОТБОР_ВнутренниеЗаказы_Индекс{ГДЕ
	|	//СВОЙСТВА_ВнутренниеЗаказы_Индекс
	|	//КАТЕГОРИИ_ВнутренниеЗаказы_Индекс
	|//ОТБОР_ВнутренниеЗаказы_Индекс}";
	
	ДобавитьПредставлениеПоля("ВнутренниеЗаказы", "Номенклатура", "Номенклатура", "ВнутренниеЗаказыОстатки.Номенклатура");
	ДобавитьПредставлениеПоля("ВнутренниеЗаказы", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ВнутренниеЗаказы", "ВнутреннийЗаказ", "Внутренний заказ", "ВнутренниеЗаказыОстатки.ВнутреннийЗаказ");
	ДобавитьПредставлениеПоля("ВнутренниеЗаказы", "СтатусПартии", "Статус партии", "ВнутренниеЗаказыОстатки.СтатусПартии");
	ДобавитьПредставлениеПоля("ВнутренниеЗаказы", "Количество", "Количество", "");
	
	// СкладскиеОстатки
	ПолучитьПараметрыСтратегииПоВиду("СкладскиеОстатки").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
	|	ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) КАК Подразделение,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачПериода,
	|	&СкладскиеОстаткиДатаКон_Индекс КАК ДатаКонПериода,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток * &СкладскиеОстаткиКоэффициент_Индекс КАК Количество,
	|	0 КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&СкладскиеОстаткиДатаКонГраница_Индекс,
	|		{Номенклатура.* КАК СкладскиеОстаткиНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК СкладскиеОстаткиХарактеристикаНоменклатуры_Индекс,
	|		Склад.* КАК СкладскиеОстаткиСклад_Индекс}
	|	) КАК ТоварыНаСкладахОстатки
	|	//СОЕДИНЕНИЯ_СкладскиеОстатки_Индекс
	|{ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК СкладскиеОстаткиКоличество_Индекс}
	|//ОТБОР_СкладскиеОстатки_Индекс{ГДЕ
	|	//СВОЙСТВА_СкладскиеОстатки_Индекс
	|	//КАТЕГОРИИ_СкладскиеОстатки_Индекс
	|//ОТБОР_СкладскиеОстатки_Индекс}";

	ДобавитьПредставлениеПоля("СкладскиеОстатки", "Номенклатура", "Номенклатура", "ТоварыНаСкладахОстатки.Номенклатура");
	ДобавитьПредставлениеПоля("СкладскиеОстатки", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("СкладскиеОстатки", "Склад", "Склад", "ТоварыНаСкладахОстатки.Склад");
	ДобавитьПредставлениеПоля("СкладскиеОстатки", "Количество", "Количество", "");

	// ПлановыеОстатки
	ПолучитьПараметрыСтратегииПоВиду("ПлановыеОстатки").ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Источник_Индекс КАК Источник,
	|	&ИндексСтроки_Индекс КАК ИндексСтроки,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) КАК Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
	|	ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) КАК Подразделение,
	|	ПлановыеОстаткиТоваровСрезПоследних.Номенклатура КАК Номенклатура,
	|	ПлановыеОстаткиТоваровСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачПериода,
	|	&ПлановыеОстаткиДатаКон_Индекс КАК ДатаКонПериода,
	|	ПлановыеОстаткиТоваровСрезПоследних.Количество * &ПлановыеОстаткиКоэффициент_Индекс КАК Количество,
	|	(ПлановыеОстаткиТоваровСрезПоследних.Стоимость + ПлановыеОстаткиТоваровСрезПоследних.НДС) * &ПлановыеОстаткиКоэффициент_Индекс КАК Стоимость
	|ИЗ
	|	РегистрСведений.ПлановыеОстаткиТоваров.СрезПоследних(&ПлановыеОстаткиДатаКонГраница_Индекс,
	|		Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) И
	|		Номенклатура <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|		{Сценарий.* КАК ПлановыеОстаткиСценарий_Индекс,
	|		Номенклатура.* КАК ПлановыеОстаткиНоменклатура_Индекс,
	|		ХарактеристикаНоменклатуры.* КАК ПлановыеОстаткиХарактеристикаНоменклатуры_Индекс}
	|	) КАК ПлановыеОстаткиТоваровСрезПоследних	
	|	//СОЕДИНЕНИЯ_ПлановыеОстатки_Индекс
	|{ГДЕ
	|	ПлановыеОстаткиТоваровСрезПоследних.Количество КАК ПлановыеОстаткиКоличество_Индекс,
	|	ПлановыеОстаткиТоваровСрезПоследних.Стоимость + ПлановыеОстаткиТоваровСрезПоследних.НДС КАК ПлановыеОстаткиСтоимость_Индекс}
	|//ОТБОР_ПлановыеОстатки_Индекс{ГДЕ
	|	//СВОЙСТВА_ПлановыеОстатки_Индекс
	|	//КАТЕГОРИИ_ПлановыеОстатки_Индекс
	|//ОТБОР_ПлановыеОстатки_Индекс}";	
	
	ДобавитьПредставлениеПоля("ПлановыеОстатки", "Сценарий", "Сценарий", "ПлановыеОстаткиТоваровСрезПоследних.Сценарий");
	ДобавитьПредставлениеПоля("ПлановыеОстатки", "Номенклатура", "Номенклатура", "ПлановыеОстаткиТоваровСрезПоследних.Номенклатура");
	ДобавитьПредставлениеПоля("ПлановыеОстатки", "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "ПлановыеОстаткиТоваровСрезПоследних.ХарактеристикаНоменклатуры");
	ДобавитьПредставлениеПоля("ПлановыеОстатки", "Количество", "Количество", "");
	ДобавитьПредставлениеПоля("ПлановыеОстатки", "Стоимость", "Стоимость", "");
	
КонецПроцедуры // ИнициализацияПомощникаПланирования()

Процедура УстановитьПредставленияПолей(ПостроительОтчета, ДобавлятьНаименованиеСтратегии = Ложь) Экспорт
	
	Для каждого Стратегия из СтратегииРасчета Цикл
			
		Если Стратегия.Использование Тогда
				
			Для каждого ПредставлениеПоля из ПолучитьПараметрыСтратегииПоВиду(Стратегия.ВидСтратегии).ПредставленияПолей Цикл
					
				НайденноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(ПредставлениеПоля.Ключ + ПолучитьИдентификаторСтратегии(Стратегия.ИдентификаторСтроки));
					
				Если НайденноеПоле <> Неопределено Тогда
						
					НайденноеПоле.Представление = ?(ДобавлятьНаименованиеСтратегии, Стратегия.НаименованиеСтратегии + " - ", "") + ПредставлениеПоля.Значение.Представление;
						
				КонецЕсли;
					
			КонецЦикла;
				
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // УстановитьПредставленияПолей()

Процедура ДобавитьПредставлениеПоля(ВидСтратегии, ИмяПоля, ПредставлениеПоля, ПутьКДанным)
	
	ПолучитьПараметрыСтратегииПоВиду(ВидСтратегии).ПредставленияПолей.Вставить(ВидСтратегии + ИмяПоля, Новый Структура("Представление, ПутьКДанным", ПредставлениеПоля, ПутьКДанным));
	
КонецПроцедуры // ДобавитьПредставлениеПоля()

Процедура ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса, ТаблицаПолей, СтруктураПредставлениеПолей, СоответствиеНазначений, Параметры, Стратегия) Экспорт
	
	ВидСтратегии = Стратегия.ВидСтратегии;
	ИндексСтратегии = ПолучитьИдентификаторСтратегии(Стратегия.ИдентификаторСтроки);

	// Добавляемые фрагменты запроса
	ЗаменятьПоляСвойства = "//СВОЙСТВА_" + ВидСтратегии + ИндексСтратегии;
	ЗаменятьПоляКатегории = "//КАТЕГОРИИ_" + ВидСтратегии + ИндексСтратегии;
	ЗаменятьСоединения = "//СОЕДИНЕНИЯ_" + ВидСтратегии + ИндексСтратегии;
	ЗаменятьОтбор = "//ОТБОР_" + ВидСтратегии + ИндексСтратегии;
	
	ТекстПоляСвойства = "";
	ТекстПоляКатегории = "";
	ТекстСоединения = "";
	
	
	СвойстваОбъектов = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать();
	
	Пока СвойстваОбъектов.Следующий() Цикл

		Если СвойстваОбъектов.ЭтоГруппа ИЛИ СвойстваОбъектов.ПометкаУдаления Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИдентификаторСвойства = "Свойство" + СтрЗаменить(Строка(СвойстваОбъектов.Ссылка.УникальныйИдентификатор()), "-", "");
		
		Если СвойстваОбъектов.ТипЗначения.Типы().Количество() > 1 Тогда
			
			ПараметрПустоеЗначениеСвойства = "Неопределено";
			
		Иначе
			
			ТипСвойства = СвойстваОбъектов.ТипЗначения.Типы()[0];
			ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
			
			ИндексТекущегоВозможногоТипа = 1;
			
			Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
				
				Если ВозможныйТипСвойства = ТипСвойства Тогда
					
					_ИндексТекущегоВозможногоТипа = Формат(ИндексТекущегоВозможногоТипа, "ЧГ=0");
					ПараметрПустоеЗначениеСвойства = "&ПараметрПустоеЗначениеСвойства" + _ИндексТекущегоВозможногоТипа;
					
				КонецЕсли;
				
				ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
			КонецЦикла;
			
		КонецЕсли;

		Поля = ТаблицаПолей.НайтиСтроки(Новый Структура("Назначение", СвойстваОбъектов.НазначениеСвойства));
		
		Для каждого Поле из Поля Цикл

			ИмяСвойства = Поле.ИмяИзмерения + ИдентификаторСвойства;

			// Поля
			ТекстПоляСвойства = ТекстПоляСвойства + ?(НЕ ПустаяСтрока(ТекстПоляСвойства), ",", "") + "
			|	ЕСТЬNULL (" + ИмяСвойства + ".Значение, " + ПараметрПустоеЗначениеСвойства + ") КАК " + ВидСтратегии + ИмяСвойства + "Значение" + ИндексСтратегии;
			
			// Соединения
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяСвойства + "
			|	ПО " + ИмяСвойства + ".Объект = " + Поле.ПутьКДанным + "
			|	И " + ИмяСвойства + ".Свойство = &Параметр" + ИмяСвойства + ВидСтратегии + ИндексСтратегии + "}";

			Параметры.Вставить("Параметр" + ИмяСвойства + ВидСтратегии + ИндексСтратегии, СвойстваОбъектов.Ссылка);
			ДобавитьПредставлениеПоля(ВидСтратегии, ИмяСвойства + "Значение", Поле.Представление + " (св-во " + СвойстваОбъектов.Наименование + ")", "");
			СоответствиеНазначений.Вставить(Поле.Представление + " (св-во " + СвойстваОбъектов.Наименование + ")", СвойстваОбъектов.Ссылка);
			
		КонецЦикла;	

	КонецЦикла;
	
	КатегорииОбъектов = Справочники.КатегорииОбъектов.Выбрать();
	
	Пока КатегорииОбъектов.Следующий() Цикл

		Если КатегорииОбъектов.ЭтоГруппа ИЛИ КатегорииОбъектов.ПометкаУдаления Тогда
			
			Продолжить;
			
		КонецЕсли;

		ИдентификаторКатегории = "Категория" + СтрЗаменить(Строка(КатегорииОбъектов.Ссылка.УникальныйИдентификатор()), "-", "");
		
		Поля = ТаблицаПолей.НайтиСтроки(Новый Структура("Назначение", КатегорииОбъектов.НазначениеКатегории));
		
		Для каждого Поле из Поля Цикл

			Если Поле.НетКатегорий Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИмяКатегории = Поле.ИмяИзмерения + ИдентификаторКатегории;
			
			// Поля
			ТекстПоляКатегории = ТекстПоляКатегории + ?(НЕ ПустаяСтрока(ТекстПоляСвойства) ИЛИ НЕ ПустаяСтрока(ТекстПоляКатегории), ",", "") + "
			|	ВЫБОР КОГДА " + ИмяКатегории + ".Категория ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК " + ВидСтратегии + ИмяКатегории + "Категория" + ИндексСтратегии;
			
			// Источник для категорий
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК " + ИмяКатегории + "
			|	ПО " + ИмяКатегории + ".Объект = " + Поле.ПутьКДанным + "
			|	И " + ИмяКатегории + ".Категория = &Параметр" + ИмяКатегории + ВидСтратегии + ИндексСтратегии + "}";

			Параметры.Вставить("Параметр" + ИмяКатегории + ВидСтратегии + ИндексСтратегии, КатегорииОбъектов.Ссылка);
			ДобавитьПредставлениеПоля(ВидСтратегии, ИмяКатегории + "Категория", Поле.Представление + " (категория " + КатегорииОбъектов.Наименование + ")", "");

		КонецЦикла;	

	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстПоляСвойства) ИЛИ НЕ ПустаяСтрока(ТекстПоляКатегории) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьОтбор, "");	
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляСвойства, ТекстПоляСвойства);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляКатегории, ТекстПоляКатегории);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьСоединения, ТекстСоединения);
	
	ТаблицаПолей.Очистить();

КонецПроцедуры // ДобавитьВТекстЗапросаСвойстваИКатегории()

Процедура ДобавитьСвойстваИКатегорииДляПоля(ПутьКДанным, ИмяИзмерения, Представление, Назначение, НетКатегорий = Ложь, ТаблицаПолей) Экспорт
	
	СтрокаТаблицыПолей = ТаблицаПолей.Добавить();
		
	СтрокаТаблицыПолей.ПутьКДанным = ПутьКДанным;
	СтрокаТаблицыПолей.ИмяИзмерения = ИмяИзмерения;
	СтрокаТаблицыПолей.Представление = Представление;
	СтрокаТаблицыПолей.Назначение = Назначение;
	СтрокаТаблицыПолей.НетКатегорий = НетКатегорий;
	
КонецПроцедуры // ДобавитьСвойстваИКатегорииДляПоля()

Процедура УстановитьТипыЗначенийСвойствИКатегорийДляОтбораЛокально(ПостроительОтчета, СоответствиеНазначений, СтруктураПредставлениеПолей)
	
	Для каждого Поле из СтруктураПредставлениеПолей Цикл
		
		Если СоответствиеНазначений[Поле.Значение.Представление] <> Неопределено Тогда
			
			Назначение = СоответствиеНазначений[Поле.Значение.Представление];
			
			Если Назначение <> Неопределено Тогда
					
				Для каждого ДоступноеПоле из ПостроительОтчета.ДоступныеПоля Цикл
					
					Если Найти(ДоступноеПоле.Имя, Поле.Ключ) > 0 И ДоступноеПоле.Отбор Тогда
						
						ДоступноеПоле.ТипЗначения = Назначение.ТипЗначения;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
	
	ИндексТекущегоВозможногоТипа = 1;
			
	Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
				
		ПостроительОтчета.Параметры.Вставить("ПараметрПустоеЗначениеСвойства" + ИндексТекущегоВозможногоТипа, ОбщегоНазначения.ПустоеЗначениеТипа(ВозможныйТипСвойства));
		ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
	КонецЦикла;
		
КонецПроцедуры // УстановитьТипыЗначенийСвойствИКатегорийДляОтбораЛокально()

Функция УстановитьПараметрыПостроителя(ПостроительОтчета) Экспорт
	
	Для каждого СтратегияРасчета из СтратегииРасчета Цикл
		
		Если НЕ СтратегияРасчета.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьПараметрыСтратегии(СтратегияРасчета, ПостроительОтчета);
		
	КонецЦикла;
	
	Для каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Если СтрокаОтбора.ПутьКДанным = "" Тогда
			
			Предупреждение("В отборе не должно быть пустых полей!", 30);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат Истина;

КонецФункции // УстановитьПараметрыПостроителя()

Процедура УстановитьПараметрыСтратегии(Стратегия, ПостроительОтчета)
	
	Индекс = ПолучитьИдентификаторСтратегии(Стратегия.ИдентификаторСтроки);
	ВидСтратегии = Стратегия.ВидСтратегии;
	
	ПостроительОтчета.Параметры.Вставить("Источник" + Индекс, ПолучитьПараметрыСтратегииПоВиду(ВидСтратегии).Источник);
	ПостроительОтчета.Параметры.Вставить("ИндексСтроки" + Индекс, Индекс);
	
	ПостроительОтчета.Параметры.Вставить(ВидСтратегии + "ДатаНач" + Индекс, ?(Стратегия.ДатаНач = '00010101000000', Стратегия.ДатаНач, НачалоДня(Стратегия.ДатаНач)));
	ПостроительОтчета.Параметры.Вставить(ВидСтратегии + "ДатаКон" + Индекс, ?(Стратегия.ДатаКон = '00010101000000', Стратегия.ДатаКон, КонецДня(Стратегия.ДатаКон)));
	
	ПостроительОтчета.Параметры.Вставить(ВидСтратегии + "ДатаНачГраница" + Индекс, ?(Стратегия.ДатаНач = Дата('00010101000000'), Стратегия.ДатаНач, Новый Граница(НачалоДня(Стратегия.ДатаНач), ВидГраницы.Включая)));
	ПостроительОтчета.Параметры.Вставить(ВидСтратегии + "ДатаКонГраница" + Индекс, ?(Стратегия.ДатаКон = Дата('00010101000000'), Стратегия.ДатаКон, Новый Граница(КонецДня(Стратегия.ДатаКон), ВидГраницы.Включая)));
	
	ПостроительОтчета.Параметры.Вставить(ВидСтратегии + "Коэффициент" + Индекс, ПолучитьКоэффициент(Стратегия.Исключить, Стратегия.Процент));
	
КонецПроцедуры // УстановитьПараметрыСтратегии()

Функция ПолучитьИдентификаторСтратегии(ИдентификаторСтроки)
	
	Возврат Формат(ИдентификаторСтроки, "ЧЦ=10; ЧВН=; ЧГ=0");
	
КонецФункции // ПолучитьИдентификаторСтратегии()

Функция ПолучитьКоэффициент(Исключить, Процент)
	
	Возврат ?(Исключить, -1, 1) * Процент / 100;
	
КонецФункции // ПолучитьКоэффициент()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

Процедура УстановитьИдентификаторСтроки(Строка, МассивИдентификаторов) Экспорт
	
	ИдентификаторСтроки = Строка.НомерСтроки;
	ИндексУникален = Ложь;
	
	Пока НЕ ИндексУникален Цикл
		
		ИндексУникален = Истина;
		
		Для Индекс = 0 по МассивИдентификаторов.ВГраница() Цикл
			
			Если МассивИдентификаторов = ИдентификаторСтроки Тогда
				
				ИндексУникален = Ложь;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
				Прервать;

			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЦикла;
	
	Строка.ИдентификаторСтроки = ИдентификаторСтроки;

КонецПроцедуры // УстановитьИдентификаторСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ НАСТРОЕК

Функция ВосстановитьНастройки() Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;

КонецФункции // ВосстановитьНастройки()

Процедура СохранитьНастройки(ПостроительОтчета) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	// Конечные планы
	Если мДокумент = Неопределено Тогда
		
		СтруктураСНастройками.Вставить("КонечныеПланы", КонечныеПланы.Выгрузить());
		
	КонецЕсли;
	
	// Стратегии
	СтруктураСНастройками.Вставить("СтратегииРасчета", СтратегииРасчета.Выгрузить());
		
	СтруктураСНастройками.Вставить("ИзменитьРезультатРасчетаСуммы", ИзменитьРезультатРасчетаСуммы);
	СтруктураСНастройками.Вставить("ИзменитьРезультатРасчетаСуммыПроцент", ИзменитьРезультатРасчетаСуммыПроцент);
	СтруктураСНастройками.Вставить("РезультатРасчетаСуммыОкруглитьДо", РезультатРасчетаСуммыОкруглитьДо);
	
	СтруктураСНастройками.Вставить("ИзменитьРезультатРасчетаКоличества", ИзменитьРезультатРасчетаКоличества);
	СтруктураСНастройками.Вставить("ИзменитьРезультатРасчетаКоличестваПроцент", ИзменитьРезультатРасчетаКоличестваПроцент);
	СтруктураСНастройками.Вставить("РезультатРасчетаКоличестваОкруглитьДо", РезультатРасчетаКоличестваОкруглитьДо);
	
	// Использовать свойства и категории
	СтруктураСНастройками.Вставить("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
	
	// Режим выбора дат периодом
	СтруктураСНастройками.Вставить("РежимВыбораДатПериодом", РежимВыбораДатПериодом);
	
	// Отборы
	СтруктураСНастройками.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь));
	
	// Режим сложения, объединения
	СтруктураСНастройками.Вставить("РежимСложенияОбъединения",
		Новый Структура(
		"РежимОбъединение,
		|РежимСложениеОбъединениеСУчетомЗаказов,
		|РежимСложениеОбъединениеСУчетомПодразделений,
		|РежимСложениеОбъединениеСУчетомПроектов,
		|РежимСложениеОбъединениеСУчетомКонтрагентов,
		|РежимСложениеОбъединениеСУчетомДоговоров",
		мРежимОбъединение,
		мРежимСложениеОбъединениеСУчетомЗаказов,
		мРежимСложениеОбъединениеСУчетомПодразделений,
		мРежимСложениеОбъединениеСУчетомПроектов,
		мРежимСложениеОбъединениеСУчетомКонтрагентов,
		мРежимСложениеОбъединениеСУчетомДоговоров)
	);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт

	Перем СохраненныеНастройкиПостроителя;
	
	Если ТипЗнч(СтруктураСНастройками) = Тип("Структура") Тогда
		
		Для каждого Настройка из СтруктураСНастройками Цикл
			
			Если Настройка.Ключ = "КонечныеПланы" Тогда
				
				Если Настройка.Значение <> Неопределено И мДокумент = Неопределено Тогда
					
					КонечныеПланы.Загрузить(Настройка.Значение);
					
				КонецЕсли;
				
			ИначеЕсли Настройка.Ключ = "СтратегииРасчета" Тогда
				
				Если Настройка.Значение <> Неопределено Тогда
				
					СтратегииРасчета.Загрузить(Настройка.Значение);
					
				КонецЕсли;
				
			ИначеЕсли Настройка.Ключ = "НастройкиПостроителя" Тогда
				
				Если Настройка.Значение <> Неопределено Тогда
					
					СохраненныеНастройкиПостроителя = Настройка.Значение;
					
				КонецЕсли;
				
			ИначеЕсли Настройка.Ключ = "РежимСложенияОбъединения" Тогда
				
				Если Настройка.Значение <> Неопределено Тогда
					
					Если ТипЗнч(Настройка.Значение) = Тип("Структура") Тогда
						
						мРежимОбъединение = ?(Настройка.Значение.Свойство("РежимОбъединение"), Настройка.Значение.РежимОбъединение, мРежимОбъединение);
						мРежимСложениеОбъединениеСУчетомЗаказов = ?(Настройка.Значение.Свойство("РежимСложениеОбъединениеСУчетомЗаказов") И ТипЗнч(Настройка.Значение.РежимСложениеОбъединениеСУчетомЗаказов) = Тип("Булево"), Настройка.Значение.РежимСложениеОбъединениеСУчетомЗаказов, мРежимСложениеОбъединениеСУчетомЗаказов);
						мРежимСложениеОбъединениеСУчетомПодразделений = ?(Настройка.Значение.Свойство("РежимСложениеОбъединениеСУчетомПодразделений") И ТипЗнч(Настройка.Значение.РежимСложениеОбъединениеСУчетомПодразделений) = Тип("Булево"), Настройка.Значение.РежимСложениеОбъединениеСУчетомПодразделений, мРежимСложениеОбъединениеСУчетомПодразделений);
						мРежимСложениеОбъединениеСУчетомПроектов = ?(Настройка.Значение.Свойство("РежимСложениеОбъединениеСУчетомПроектов") И ТипЗнч(Настройка.Значение.РежимСложениеОбъединениеСУчетомПроектов) = Тип("Булево"), Настройка.Значение.РежимСложениеОбъединениеСУчетомПроектов, мРежимСложениеОбъединениеСУчетомПроектов);
						мРежимСложениеОбъединениеСУчетомКонтрагентов = ?(Настройка.Значение.Свойство("РежимСложениеОбъединениеСУчетомКонтрагентов") И ТипЗнч(Настройка.Значение.РежимСложениеОбъединениеСУчетомКонтрагентов) = Тип("Булево"), Настройка.Значение.РежимСложениеОбъединениеСУчетомКонтрагентов, мРежимСложениеОбъединениеСУчетомКонтрагентов);
						мРежимСложениеОбъединениеСУчетомДоговоров = ?(Настройка.Значение.Свойство("РежимСложениеОбъединениеСУчетомДоговоров") И ТипЗнч(Настройка.Значение.РежимСложениеОбъединениеСУчетомДоговоров) = Тип("Булево"), Настройка.Значение.РежимСложениеОбъединениеСУчетомДоговоров, мРежимСложениеОбъединениеСУчетомДоговоров);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если Настройка.Значение <> Неопределено Тогда
					
					ЭтотОбъект[Настройка.Ключ] = Настройка.Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НастроитьПостроитель(ПостроительОтчета);
		
		Если СохраненныеНастройкиПостроителя <> Неопределено Тогда
			
			ПостроительОтчета.УстановитьНастройки(СохраненныеНастройкиПостроителя, Истина, Ложь, Ложь, Ложь);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ВосстановитьНастройкиИзСтруктуры()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мРежимОбъединение = Ложь;
мРежимСложениеОбъединениеСУчетомЗаказов = Ложь;
мРежимСложениеОбъединениеСУчетомПодразделений = Ложь;
мРежимСложениеОбъединениеСУчетомПроектов = Ложь;
мРежимСложениеОбъединениеСУчетомКонтрагентов = Ложь;
мРежимСложениеОбъединениеСУчетомДоговоров = Ложь;
