#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Все возможные показатели
Перем ПоказателиЗапроса;
Перем ПоказателиРасшифровки;

Перем ТаблицаИзмененийСтадий;

Перем ТаблицаИзмененийСтадийМенеджера;

Перем КоличествоСправочникаКонтрагенты;
Перем КоличествоСправочникаКЛ;

// Список имен показателей отчета
Перем мПоказатели Экспорт;

// Количество строк заголовка поля табличного документа
Перем мКоличествоВыведенныхСтрокЗаголовка Экспорт;

// Настройка периода
Перем НП Экспорт;

// Настройки отчета
Перем мТекущаяНастройка Экспорт;

Перем мСтруктураТаблицДанныхДиаграммы Экспорт;

Перем мНаименованиеВалютыУпрУчета;
Перем мВалютУпрУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует дату начала отчета в случае, если она не задана
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  Дата
//
Функция УстановитьДатуНачалаПоУмолчанию()
	
	ЗапросЗаказы = Новый Запрос;
	ЗапросЗаказы.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Заказы.Период КАК ДатаНачала
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК Заказы
	|УПОРЯДОЧИТЬ ПО
	|	Заказы.Период Возр
	|";
	
	Если НЕ ЗапросЗаказы.Выполнить().Пустой() Тогда
		Возврат НачалоДня(ЗапросЗаказы.Выполнить().Выгрузить()[0].ДатаНачала);
	Иначе
		Возврат '19910818000000'; // 18 августа 1991 года СССР распался
	КонецЕсли;
	
КонецФункции

// Функция формирует строку представления периода отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьСтрокуПериода() Экспорт

	ОписаниеПериода = "";
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНачала = '00010101000000' ИЛИ ДатаКонца = '00010101000000' Тогда

			ОписаниеПериода = "Период: " + Формат(ДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКонца, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНачала <= ДатаКонца Тогда
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаКонца), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;
	
КонецФункции // ()

// Функция преобразует ВидСравнения в строку и формирует строку для шапки отчета
// 
// Параметры 
//  ВыбВидСравнения - ВидСравнения, исходное значение вида сравнения
//  ЗначениеОтбора - возможные значения отборов, которые надо вставить в строку возврата
//
Функция СтрокаОтборов(ВыбВидСравнения, ЗначениеОтбора)
	
	СтрокаВозврата = "";
	
	Если ВыбВидСравнения = ВидСравнения.Равно Тогда
		СтрокаВозврата = СтрокаВозврата + "равно ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = СтрокаВозврата + "не равно ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = СтрокаВозврата + "одно из: ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = СтрокаВозврата + "все, кроме: ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаВозврата = СтрокаВозврата + "одно из (по иерархии): ";
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаВозврата = СтрокаВозврата + "все, кроме (по иерархии): ";
	КонецЕсли; 

	Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		СтрокаВозврата = СтрокаВозврата + "[";
		Для а=0 По ЗначениеОтбора.Количество() - 1 Цикл
			СтрокаВозврата = СтрокаВозврата + СокрЛП(ЗначениеОтбора[а].Значение)+?(а=ЗначениеОтбора.Количество() - 1,"",", ");
		КонецЦикла; 
		СтрокаВозврата = СтрокаВозврата + "]";
	Иначе
		СтрокаВозврата = СтрокаВозврата + СокрЛП(ЗначениеОтбора);
	КонецЕсли; 

	Возврат СтрокаВозврата;
	
КонецФункции // СтрокаОтборов()

// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВидОтбора - ВидОтбора
// ЗначениеОтбора - Значение отбора запроса
// 
// Возвращаемое значение 
//  Строка для запроса
Функция ВозвратитьСтрокуВидаОтбора(ВидОтбора, ЗначениеОтбора)

	СтрокаВозврата = "";
	Если ВидОтбора = ВидСравнения.Равно Тогда
		СтрокаВозврата = Строка("= "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = Строка("<> "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = Строка("В ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.ВСпискеПоИерархии ИЛИ ВидОтбора = ВидСравнения.ВИерархии Тогда
		СтрокаВозврата = Строка("В ИЕРАРХИИ ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = Строка("НЕ В ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСпискеПоИерархии ИЛИ ВидОтбора = ВидСравнения.НеВИерархии Тогда
		СтрокаВозврата = Строка("НЕ В ИЕРАРХИИ ("+ЗначениеОтбора+")");
	КонецЕсли;

	Возврат СтрокаВозврата;
	
КонецФункции // ВозвратитьСтрокуВидаОтбора()

// Определяет пустую ссылку одного из типов значений
// Параметры
//  ОписаниеТиповЗначения - Описание типов
//
// Возвращаемое значение:
//   Пустая ссылка (справочник, перечисление)
//
Функция ОпределитьПустоеЗначениеТипа(ОписаниеТиповЗначения) Экспорт

	Если ТипЗнч(ОписаниеТиповЗначения) = Тип("ОписаниеТипов") Тогда
		
		МассивТипов = ОписаниеТиповЗначения.Типы();
		Для каждого Тип Из МассивТипов Цикл
		
			Если Тип <> Тип("СписокЗначений") Тогда
			
				Возврат Новый(Тип);
			
			КонецЕсли; 
		
		КонецЦикла; 

	Иначе

		Возврат Неопределено;
		
	КонецЕсли; 

КонецФункции //()

// Процедура преобразовывает значения реквизитов табличных частей отчета
// в таблицы значений
// 
// Параметры
//  НЕТ
// 
// Возвращаемое значение
//  НЕТ
Процедура РасписатьРеквизиты()
	
	мПоказатели.Очистить();
	
	// Показатели
	ТаблицаСписокВсехПоказателей = ПоказателиОтчета.Выгрузить();
	Для каждого Строки Из ТаблицаСписокВсехПоказателей Цикл
		Если Строки.ИспользованиеПоказателя Тогда
			мПоказатели.Добавить(Строки.ИмяПоказателя, Строки.ПредставлениеПоказателя);
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ИзменитьВидимостьЗаголовка(Таб) Экспорт

	ОбластьВидимости = Таб.Область(1,,мКоличествоВыведенныхСтрокЗаголовка,);
	ОбластьВидимости.Видимость = ПоказыватьЗаголовок;

КонецПроцедуры

// Функция рассчитывает процент одного числа от другого
//
// Параметры
//  Чего - Число, процент которого необходимо рассчитать
//  ОтЧего - Число, процент ОТ которого необходимо рассчитать
//
// Возвращаемое значение:
//   Число
//
Функция ПосчитатьПроцент(Чего, ОтЧего)

	Если ОтЧего = Неопределено ИЛИ ОтЧего = 0 Тогда
	
		РассчитанныйПроцент = 0;

	Иначе

		РассчитанныйПроцент = (Чего/ОтЧего)*100;
	
	КонецЕсли; 

	Возврат РассчитанныйПроцент;
	
КонецФункции // ПосчитатьПроцент()

// Функция преобразовывает значение к числу и округляет до 2-х знаков
//
// Параметры
//  ВходящееЗначение - Значение которое необходимо преобразовать
//
// Возвращаемое значение:
//   Число
//
Функция ПреобразоватьКЧислу(ВходящееЗначение)

	Если ВходящееЗначение = NULL Тогда
	
		Возврат 0;

	Иначе

		Возврат Окр(Число(ВходящееЗначение), 2);
	
	КонецЕсли;

КонецФункции // ПреобразоватьКЧислу()

// Приводит число к определенному формату
//
// Параметры
//  ВходящееЧисло - Число, которое необходимо преобразовать
//  ЦелаяЧасть - Число знаков целой части
//  ДробнаяЧасть - Число знаков дробной части
//
// Возвращаемое значение:
//   Строка - отформатированное значение числа
//
Функция ПривестиКФормату(ВходящееЧисло, ЦелаяЧасть, ДробнаяЧасть, ПоказыватьНоль = Ложь)

	Если ВходящееЧисло = 0 И НЕ ПоказыватьНоль Тогда
	
		Возврат "";

	Иначе

		Возврат СокрЛП(Формат(ВходящееЧисло, "ЧЦ=" + Строка(ЦелаяЧасть) + "; ЧДЦ=" + Строка(ДробнаяЧасть) + "; ЧРД=,; ЧН="));
	
	КонецЕсли; 

КонецФункции // ПривестиКФормату()

// Функция собирает текст запроса и устанавливает параметры запроса
// 
// Параметры
// Запрос - Запрос
// 
// Возвращаемое значение
//  Булево - собран ли текст запроса
Функция СобратьТекстЗапроса(Запрос) Экспорт
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Продажи.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер, 
	|	СУММА(Продажи.СтоимостьОборот)                КАК СуммаВыручки";
	
	ТекстГруппировки = "
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Контрагент.ОсновнойМенеджерПокупателя";
	
	ТекстИтогов = "
	|
	|ИТОГИ
	|	СУММА(СуммаВыручки)";
	
	ПоляЗапроса = "";
	ТаблицыЗапроса = "";
	ТекстНенулевыхУсловий = "";
	
	Если мПоказатели.НайтиПоЗначению("СуммаПрибыли") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "," + "
		|	СУММА(ЦеныСебестоимости.Себестоимость) КАК СуммаПрибыли";
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	(
		|	ВЫБРАТЬ
		|		СебестоимостьПродаж.Номенклатура               КАК Номенклатура,
		|		СебестоимостьПродаж.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		СебестоимостьПродаж.ЗаказПокупателя            КАК ЗаказПокупателя,
		|		ВЫБОР
		|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
		|			ТОГДА СебестоимостьПродаж.ДокументДвижения
		|			ИНАЧЕ СебестоимостьПродаж.Регистратор
		|			КОНЕЦ                                      КАК ДокументПродажи,
		|		СУММА(СебестоимостьПродаж.Стоимость)           КАК Себестоимость
		|	ИЗ
		|		РегистрНакопления.ПродажиСебестоимость КАК СебестоимостьПродаж
		|	ГДЕ
		|		СебестоимостьПродаж.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|	СГРУППИРОВАТЬ ПО
		|		СебестоимостьПродаж.Номенклатура,
		|		СебестоимостьПродаж.ХарактеристикаНоменклатуры,
		|		СебестоимостьПродаж.ЗаказПокупателя,
		|		ВЫБОР
		|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
		|			ТОГДА СебестоимостьПродаж.ДокументДвижения
		|			ИНАЧЕ СебестоимостьПродаж.Регистратор
		|			КОНЕЦ
		|	)
		|	КАК ЦеныСебестоимости
		|ПО ЦеныСебестоимости.Номенклатура = Продажи.Номенклатура
		|И ЦеныСебестоимости.ХарактеристикаНоменклатуры = Продажи.ХарактеристикаНоменклатуры
		|И ЦеныСебестоимости.ЗаказПокупателя = Продажи.ЗаказПокупателя
		|И ЦеныСебестоимости.ДокументПродажи = Продажи.ДокументПродажи
		|";
		
		ТекстИтогов = ТекстИтогов + "," + "
			|СУММА(СуммаПрибыли)";
				
	КонецЕсли; //мПоказатели.НайтиПоЗначению("СуммаПрибыли") <> Неопределено
	
	Если мПоказатели.НайтиПоЗначению("СуммаРучныхСкидок") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "," + "
		|	СУММА(ПредоставленныеСкидкиОбороты.СуммаСкидкиОборот) КАК СуммаРучныхСкидок";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПредоставленныеСкидки.Обороты(&ДатаНачала, &ДатаКонца, , УсловиеСкидки = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.РучнаяСкидка)) КАК ПредоставленныеСкидкиОбороты
		|ПО ПредоставленныеСкидкиОбороты.ДокументСкидки = Продажи.ДокументПродажи
		|И ПредоставленныеСкидкиОбороты.Номенклатура = Продажи.Номенклатура
		|И ПредоставленныеСкидкиОбороты.ХарактеристикаНоменклатуры = Продажи.ХарактеристикаНоменклатуры
		|";
		
		ТекстИтогов = ТекстИтогов + "," + "
			|СУММА(СуммаРучныхСкидок)";
		
	КонецЕсли; //мПоказатели.НайтиПоЗначению("СуммаРучныхСкидок") <> Неопределено

	Если мПоказатели.НайтиПоЗначению("ЧислоСделок") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ЧислоПервыхСделок") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("СреднееЧислоСделок") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("СреднееЗначениеВыручки") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "," + "
		|ПродажиМенеджера.ЧислоПродаж                                    КАК ЧислоСделок,
		|ПродажиМенеджера.ЧислоКонтрагентов                              КАК ЧислоКонтрагентов,
		|ПродажиМенеджера.ЧислоПервичныхПродаж                           КАК ЧислоПервыхСделок,
		|ПродажиМенеджера.Выручка                                        КАК ВыручкаОтСделок,
		|ПродажиМенеджера.ЧислоПродаж/ПродажиМенеджера.ЧислоКонтрагентов КАК СреднееЧислоСделок,
		|ПродажиМенеджера.Выручка/ПродажиМенеджера.ЧислоПродаж           КАК СреднееЗначениеВыручки";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		ЛистингПоКонтрагентам.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
		|		КОЛИЧЕСТВО(ЛистингПоКонтрагентам.Контрагент)                КАК ЧислоКонтрагентов,
		|		СУММА(ЛистингПоКонтрагентам.Выручка)                        КАК Выручка,
		|		СУММА(ЛистингПоКонтрагентам.ЧислоПродаж)                    КАК ЧислоПродаж,
		|		СУММА(ЛистингПоКонтрагентам.ЧислоПервичныхПродаж)           КАК ЧислоПервичныхПродаж
		|	ИЗ
		|		(	
		|		ВЫБРАТЬ
		|			ЛистингСделок.Контрагент                            КАК Контрагент,
		|			СУММА(ЛистингСделок.Выручка)                        КАК Выручка,
		|			СУММА(ЛистингСделок.СделокВсего)                    КАК ЧислоПродаж,
		|			СУММА(ЛистингСделок.Первичных)                      КАК ЧислоПервичныхПродаж
		|		ИЗ
		|			(
		|			ВЫБРАТЬ
		|				Продажи.Контрагент             КАК Контрагент,
		|				Продажи.ДокументПродажи        КАК Документ,
		|				Продажи.СтоимостьОборот        КАК Выручка,
		|				1                              КАК СделокВсего,
		|				ВЫБОР 
		|						КОГДА СУММА(СовершПродажи.Сделка) > 0
		|						ТОГДА 0
		|						ИНАЧЕ 1
		|						КОНЕЦ                      КАК Первичных
		|			ИЗ
		|				РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ) КАК Продажи
		|			ЛЕВОЕ СОЕДИНЕНИЕ 
		|				(
		|				ВЫБРАТЬ
		|						Продажи.Контрагент         КАК Контрагент,
		|						Продажи.Регистратор.Дата   КАК ДатаСделки,
		|						1                          КАК Сделка
		|				ИЗ
		|						РегистрНакопления.Продажи.Обороты(, &ДатаКонца, Регистратор, Контрагент = Контрагент) КАК Продажи
		|				)
		|				КАК СовершПродажи
		|			ПО 
		|				СовершПродажи.Контрагент = Продажи.Контрагент
		|				И СовершПродажи.ДатаСделки < Продажи.ДокументПродажи.Дата
		|			ГДЕ
		|				Продажи.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И Продажи.Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И Продажи.КоличествоОборот > 0
		|			СГРУППИРОВАТЬ ПО
		|				Продажи.Контрагент,
		|				Продажи.ДокументПродажи,
		|				Продажи.СтоимостьОборот
		|			)
		|			КАК ЛистингСделок
		|		СГРУППИРОВАТЬ ПО
		|			ЛистингСделок.Контрагент
		|		)
		|		КАК ЛистингПоКонтрагентам
		|	СГРУППИРОВАТЬ ПО
		|		ЛистингПоКонтрагентам.Контрагент.ОсновнойМенеджерПокупателя
		|	)
		|	КАК ПродажиМенеджера
		|ПО
		|	ПродажиМенеджера.Менеджер = Продажи.Контрагент.ОсновнойМенеджерПокупателя
		|";
		
		ТекстГруппировки = ТекстГруппировки + "," + "
		|ПродажиМенеджера.ЧислоПродаж,
		|ПродажиМенеджера.ЧислоКонтрагентов,
		|ПродажиМенеджера.ЧислоПервичныхПродаж,
		|ПродажиМенеджера.Выручка";
		
		ТекстИтогов = ТекстИтогов + "," + "
			|СУММА(ЧислоСделок),
			|СУММА(ЧислоПервыхСделок),
			|СУММА(СреднееЧислоСделок),
			|СУММА(СреднееЗначениеВыручки)";
		
	КонецЕсли; //мПоказатели.НайтиПоЗначению("ЧислоСделок") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ЧислоПервыхСделок") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("СреднееЧислоСделок") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("СреднееЗначениеВыручки") <> Неопределено
	
	Если мПоказатели.НайтиПоЗначению("ПроцентКИКонтрагентов") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ПроцентКИКонтЛицКонтр") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ПроцентКИКонтактныхЛиц") <> Неопределено Тогда
		
		ПоляЗапроса = ПоляЗапроса + "," + "
		|ЗаполненностьКИ.ЗаполненностьКонтрагентов                      КАК ПроцентКИКонтрагентов,
		|ЗаполненностьКИ.ЗаполненностьКонтЛицКонтр                      КАК ПроцентКИКонтЛицКонтр,
		|ЗаполненностьКИ.ЗаполненностьКонтактныхЛиц                     КАК ПроцентКИКонтактныхЛиц";
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		СведенияОЗаполнении.Менеджер                        КАК Менеджер,
		|		СУММА(СведенияОЗаполнении.ЗаполнениеКонтрагенты)    КАК ЗаполненностьКонтрагентов,
		|		СУММА(СведенияОЗаполнении.ЗаполнениеКЛКонтрагентов) КАК ЗаполненностьКонтЛицКонтр,
		|		СУММА(СведенияОЗаполнении.ЗаполнениеКонтактныхЛиц)  КАК ЗаполненностьКонтактныхЛиц
		|	ИЗ
		|		(
		|		ВЫБРАТЬ
		|			КонтактыМенеджеровПоВидам.Менеджер,
		|			КонтактыМенеджеровПоВидам.ВидКонтакта,
		|			КонтактыМенеджеровПоВидам.ЧислоКонтактов,
		|			ЗаполненаяКонтактнаяИнформация.ЗаполненоВидов,
		|			ВидыКонтактнойИнформацииКоличество.КоличествоВидовКИ,
		|			ВЫБОР
		|				КОГДА КонтактыМенеджеровПоВидам.ВидКонтакта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.Контрагенты)
		|				ТОГДА ЗаполненаяКонтактнаяИнформация.ЗаполненоВидов * 100 / (КонтактыМенеджеровПоВидам.ЧислоКонтактов * ВидыКонтактнойИнформацииКоличество.КоличествоВидовКИ) 
		|				ИНАЧЕ 0 
		|				КОНЕЦ КАК ЗаполнениеКонтрагенты,
		|			ВЫБОР
		|				КОГДА КонтактыМенеджеровПоВидам.ВидКонтакта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов)
		|				ТОГДА ЗаполненаяКонтактнаяИнформация.ЗаполненоВидов * 100 / (КонтактыМенеджеровПоВидам.ЧислоКонтактов * ВидыКонтактнойИнформацииКоличество.КоличествоВидовКИ) 
		|				ИНАЧЕ 0 
		|				КОНЕЦ КАК ЗаполнениеКЛКонтрагентов,
		|			ВЫБОР
		|				КОГДА КонтактыМенеджеровПоВидам.ВидКонтакта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица)
		|				ТОГДА ЗаполненаяКонтактнаяИнформация.ЗаполненоВидов * 100 / (КонтактыМенеджеровПоВидам.ЧислоКонтактов * ВидыКонтактнойИнформацииКоличество.КоличествоВидовКИ) 
		|				ИНАЧЕ 0 
		|				КОНЕЦ КАК ЗаполнениеКонтактныхЛиц
		|		ИЗ
		|			(
		|			ВЫБРАТЬ
		|				Контакты.ОсновнойМенеджерПокупателя                                 КАК Менеджер,
		|				ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.Контрагенты) КАК ВидКонтакта,
		|				КОЛИЧЕСТВО(*)                                                       КАК ЧислоКонтактов
		|			ИЗ
		|				Справочник.Контрагенты КАК Контакты
		|			ГДЕ
		|				Контакты.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И Контакты.Покупатель = Истина
		|			СГРУППИРОВАТЬ ПО
		|				Контакты.ОсновнойМенеджерПокупателя
		|			ОБЪЕДИНИТЬ
		|			ВЫБРАТЬ
		|				Контакты.Владелец.ОсновнойМенеджерПокупателя,
		|				ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов),
		|				КОЛИЧЕСТВО(*)
		|			ИЗ
		|				Справочник.КонтактныеЛицаКонтрагентов КАК Контакты
		|			ГДЕ
		|				Контакты.Владелец.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И Контакты.Владелец.Покупатель = Истина
		|			СГРУППИРОВАТЬ ПО
		|				Контакты.Владелец.ОсновнойМенеджерПокупателя
		|			ОБЪЕДИНИТЬ
		|			ВЫБРАТЬ
		|				КонтактныеЛица.Менеджер,
		|				ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица),
		|				КОЛИЧЕСТВО(КонтактныеЛица.Персона)
		|			ИЗ
		|				(
		|				ВЫБРАТЬ
		|					Контакты.Владелец.ОсновнойМенеджерПокупателя КАК Менеджер,
		|					Контакты.КонтактноеЛицо                      КАК Персона
		|				ИЗ
		|					Справочник.КонтактныеЛицаКонтрагентов КАК Контакты
		|				ГДЕ
		|					Контакты.Владелец.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|					И Контакты.Владелец.Покупатель = Истина
		|				СГРУППИРОВАТЬ ПО
		|					Контакты.Владелец.ОсновнойМенеджерПокупателя,
		|					Контакты.КонтактноеЛицо
		|				)
		|				КАК КонтактныеЛица
		|			СГРУППИРОВАТЬ ПО
		|				КонтактныеЛица.Менеджер
		|			) КАК КонтактыМенеджеровПоВидам
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(
		|			ВЫБРАТЬ
		|				КонтактнаяИнформация.Объект.ОсновнойМенеджерПокупателя  КАК Менеджер,
		|				КонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации КАК ВидКонтакта,
		|				КОЛИЧЕСТВО(КонтактнаяИнформация.Вид)                    КАК ЗаполненоВидов
		|			ИЗ
		|				РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|			ГДЕ
		|				КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
		|				И КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации
		|				И КонтактнаяИнформация.Объект.Покупатель = Истина
		|			СГРУППИРОВАТЬ ПО
		|				КонтактнаяИнформация.Объект.ОсновнойМенеджерПокупателя,
		|				КонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации
		|			ОБЪЕДИНИТЬ
		|			ВЫБРАТЬ
		|				КонтактныеЛица.Владелец.ОсновнойМенеджерПокупателя,
		|				КонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации,
		|				КОЛИЧЕСТВО(КонтактнаяИнформация.Вид)
		|			ИЗ
		|				РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|			ПРАВОЕ СОЕДИНЕНИЕ
		|				Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛица
		|			ПО 
		|				КонтактныеЛица.КонтактноеЛицо = КонтактнаяИнформация.Объект
		|			ГДЕ
		|				КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации
		|				И КонтактныеЛица.Владелец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И КонтактныеЛица.Владелец ССЫЛКА Справочник.Контрагенты
		|				И КонтактныеЛица.Владелец.Покупатель = Истина
		|			СГРУППИРОВАТЬ ПО
		|				КонтактныеЛица.Владелец.ОсновнойМенеджерПокупателя,
		|				КонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации
		|			ОБЪЕДИНИТЬ
		|			ВЫБРАТЬ
		|				КонтактныеЛица.Владелец.ОсновнойМенеджерПокупателя,
		|				КонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации,
		|				КОЛИЧЕСТВО(КонтактнаяИнформация.Вид)
		|			ИЗ
		|				РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|			ПРАВОЕ СОЕДИНЕНИЕ
		|				Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛица
		|			ПО 
		|				КонтактнаяИнформация.Объект = КонтактныеЛица.Ссылка
		|			ГДЕ
		|				КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации
		|				И КонтактныеЛица.Владелец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И КонтактныеЛица.Владелец ССЫЛКА Справочник.Контрагенты
		|				И КонтактныеЛица.Владелец.Покупатель = Истина
		|			СГРУППИРОВАТЬ ПО
		|				КонтактныеЛица.Владелец.ОсновнойМенеджерПокупателя,
		|				КонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации
		|			) КАК ЗаполненаяКонтактнаяИнформация
		|		ПО
		|			КонтактыМенеджеровПоВидам.Менеджер      = ЗаполненаяКонтактнаяИнформация.Менеджер
		|			И КонтактыМенеджеровПоВидам.ВидКонтакта = ЗаполненаяКонтактнаяИнформация.ВидКонтакта
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(
		|			ВЫБРАТЬ
		|				ВидОбъектаКонтактнойИнформации,
		|				КОЛИЧЕСТВО(*) КАК КоличествоВидовКИ
		|			ИЗ
		|				Справочник.ВидыКонтактнойИнформации
		|			СГРУППИРОВАТЬ ПО
		|				ВидОбъектаКонтактнойИнформации
		|			) КАК ВидыКонтактнойИнформацииКоличество
		|		ПО
		|			КонтактыМенеджеровПоВидам.ВидКонтакта = ВидыКонтактнойИнформацииКоличество.ВидОбъектаКонтактнойИнформации
		|		) КАК СведенияОЗаполнении
		|		СГРУППИРОВАТЬ ПО
		|			СведенияОЗаполнении.Менеджер
		|	)
		|	КАК ЗаполненностьКИ
		|ПО
		|	ЗаполненностьКИ.Менеджер = Продажи.Контрагент.ОсновнойМенеджерПокупателя
		|";
		
		ТекстГруппировки = ТекстГруппировки + "," + "
		|ЗаполненностьКИ.ЗаполненностьКонтрагентов,
		|ЗаполненностьКИ.ЗаполненностьКонтЛицКонтр,
		|ЗаполненностьКИ.ЗаполненностьКонтактныхЛиц";
		
		ТекстИтогов = ТекстИтогов + "," + "
		|СУММА(ПроцентКИКонтрагентов),
		|СУММА(ПроцентКИКонтЛицКонтр),
		|СУММА(ПроцентКИКонтактныхЛиц)";
		
	КонецЕсли; //мПоказатели.НайтиПоЗначению("ПроцентКИКонтрагентов") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ПроцентКИКонтЛицКонтр") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ПроцентКИКонтактныхЛиц") <> Неопределено
	
	Если мПоказатели.НайтиПоЗначению("ЧислоЗаказов") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ЧислоОплаченныхЗаказов") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ЧислоНеоплаченныхЗаказов") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ЧислоЧастичноОплаченных") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "," + "
		|ПродажиЗаказы.ЧислоЗаказов             КАК ЧислоЗаказов,
		|ПродажиЗаказы.ЧислоОплаченныхЗаказов   КАК ЧислоОплаченныхЗаказов,
		|ПродажиЗаказы.ЧислоНеоплаченныхЗаказов КАК ЧислоНеоплаченныхЗаказов,
		|ПродажиЗаказы.ЧислоЧастичноОплаченных  КАК ЧислоЧастичноОплаченных";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		ЗаказыПоКатегориям.Заказ.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
		|		КОЛИЧЕСТВО(ЗаказыПоКатегориям.Заказ)                           КАК ЧислоЗаказов,
		|		СУММА(ЗаказыПоКатегориям.ЧислоОплаченныхЗаказов)               КАК ЧислоОплаченныхЗаказов,
		|		СУММА(ЗаказыПоКатегориям.ЧислоНеоплаченныхЗаказов)             КАК ЧислоНеоплаченныхЗаказов,
		|		СУММА(ЗаказыПоКатегориям.ЧислоЧастичноОплаченных)              КАК ЧислоЧастичноОплаченных
		|	ИЗ
		|		(
		|		ВЫБРАТЬ
		|			ЗаказыПокупателей.ЗаказПокупателя                                       КАК Заказ,
		|			СУММА(Расчеты.НеоплаченныйЗаказ)                                        КАК ЧислоНеоплаченныхЗаказов,
		|			СУММА(Расчеты.ОплаченыйЗаказ)                                           КАК ЧислоОплаченныхЗаказов,
		|			СУММА(Расчеты.ЧастичноОплаченыйЗаказ)                                   КАК ЧислоЧастичноОплаченных
		|		ИЗ
		|			РегистрНакопления.ЗаказыПокупателей.Обороты(&ДатаНачала, &ДатаКонца, , ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) КАК ЗаказыПокупателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(
		|			ВЫБРАТЬ
		|				РасчетыСКонтрагентами.Сделка          КАК ЗаказПокупателя,
		|				ВЫБОР 
		|					КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0 
		|					ТОГДА 1
		|					ИНАЧЕ 0
		|					КОНЕЦ                             КАК НеоплаченныйЗаказ,
		|				ВЫБОР
		|					КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход <> 0
		|						И РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход <= РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход
		|					ТОГДА 1
		|					ИНАЧЕ 0
		|					КОНЕЦ                             КАК ОплаченыйЗаказ,
		|				ВЫБОР
		|					КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход <> 0
		|						И РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход > РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход
		|					ТОГДА 1
		|					ИНАЧЕ 0
		|					КОНЕЦ                             КАК ЧастичноОплаченыйЗаказ
		|			ИЗ
		|				РегистрНакопления.РасчетыСКонтрагентами.Обороты(, &ДатаКонца, , Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентами	
		|			)
		|			КАК Расчеты
		|		ПО
		|			ЗаказыПокупателей.ЗаказПокупателя = Расчеты.ЗаказПокупателя
		|		СГРУППИРОВАТЬ ПО
		|			ЗаказыПокупателей.ЗаказПокупателя
		|		)
		|		КАК ЗаказыПоКатегориям
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыПоКатегориям.Заказ.Контрагент.ОсновнойМенеджерПокупателя
		|	)
		|	КАК ПродажиЗаказы
		|ПО 
		|	ПродажиЗаказы.Менеджер = Продажи.Контрагент.ОсновнойМенеджерПокупателя
		|";
		
		ТекстГруппировки = ТекстГруппировки + "," + "
		|ПродажиЗаказы.ЧислоЗаказов,
		|ПродажиЗаказы.ЧислоОплаченныхЗаказов,
		|ПродажиЗаказы.ЧислоНеоплаченныхЗаказов,
		|ПродажиЗаказы.ЧислоЧастичноОплаченных";
		
		ТекстИтогов = ТекстИтогов + "," + "
			|СУММА(ЧислоЗаказов),
			|СУММА(ЧислоОплаченныхЗаказов),
			|СУММА(ЧислоНеоплаченныхЗаказов),
			|СУММА(ЧислоЧастичноОплаченных)";
		
	КонецЕсли; //мПоказатели.НайтиПоЗначению("ЧислоЗаказов") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ЧислоОплаченныхЗаказов") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ЧислоНеоплаченныхЗаказов") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ЧислоЧастичноОплаченных") <> Неопределено

	Если мПоказатели.НайтиПоЗначению("СуммаДолга") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ЧислоДолжников") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("СрокЗадолженности") <> Неопределено Тогда
	
		ПоляЗапроса = ПоляЗапроса + "," + "
		|ДебиторскаяЗадолженность.СуммаДолга        КАК СуммаДолга,
		|ДебиторскаяЗадолженность.ЧислоДолжников    КАК ЧислоДолжников,
		|ДебиторскаяЗадолженность.СрокЗадолженности КАК СрокЗадолженности";

		ТаблицыЗапроса = ТаблицыЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		ВзаиморасчетыПоКонтрагентам.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
		|		СУММА(ВзаиморасчетыПоКонтрагентам.СуммаДолга)                     КАК СуммаДолга,
		|		КОЛИЧЕСТВО(ВзаиморасчетыПоКонтрагентам.Контрагент)                КАК ЧислоДолжников,
		|		ВЫБОР
		|			КОГДА КОЛИЧЕСТВО(ВзаиморасчетыПоКонтрагентам.Контрагент) > 0
		|			ТОГДА СУММА(ВзаиморасчетыПоКонтрагентам.СрокЗадолженности)/КОЛИЧЕСТВО(ВзаиморасчетыПоКонтрагентам.Контрагент)
		|			ИНАЧЕ 0
		|			КОНЕЦ                                                         КАК СрокЗадолженности
		|	ИЗ
		|		(
		|		ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Контрагент       КАК Контрагент,
		|			ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток  КАК СуммаДолга,
		|			ВЫБОР
		|				КОГДА ВзаиморасчетыЗадолженность.ДатаВозникновения ЕСТЬ NULL
		|				ТОГДА 0
		|				ИНАЧЕ РАЗНОСТЬДАТ(ВзаиморасчетыЗадолженность.ДатаВозникновения, &ДатаКонца, ДЕНЬ)
		|				КОНЕЦ                                    КАК СрокЗадолженности
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКонца, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)) КАК ВзаиморасчетыСКонтрагентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(
		|			ВЫБРАТЬ
		|				ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Контрагент       КАК Клиент,
		|				МАКСИМУМ(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Период) КАК ДатаВозникновения
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(, &ДатаКонца, День, , ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
		|			ГДЕ
		|				ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрКонечныйОстаток > 0
		|				И ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрНачальныйОстаток <= 0
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Контрагент
		|			)
		|			КАК ВзаиморасчетыЗадолженность
		|		ПО
		|			ВзаиморасчетыСКонтрагентами.Контрагент = ВзаиморасчетыЗадолженность.Клиент
		|		ГДЕ
		|			ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток > 0
		|		)
		|		КАК ВзаиморасчетыПоКонтрагентам
		|	СГРУППИРОВАТЬ ПО
		|		ВзаиморасчетыПоКонтрагентам.Контрагент.ОсновнойМенеджерПокупателя
		|	)
		|	КАК ДебиторскаяЗадолженность
		|ПО
		|	ДебиторскаяЗадолженность.Менеджер = Продажи.Контрагент.ОсновнойМенеджерПокупателя
		|";
		
		ТекстГруппировки = ТекстГруппировки + "," + "
		|ДебиторскаяЗадолженность.СуммаДолга,
		|ДебиторскаяЗадолженность.ЧислоДолжников,
		|ДебиторскаяЗадолженность.СрокЗадолженности";
		
		ТекстИтогов = ТекстИтогов + "," + "
			|СУММА(СуммаДолга),
			|СУММА(ЧислоДолжников),
			|СУММА(СрокЗадолженности)";
		
	КонецЕсли; //мПоказатели.НайтиПоЗначению("СуммаДолга") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ЧислоДолжников") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("СрокЗадолженности") <> Неопределено
	
	Если мПоказатели.НайтиПоЗначению("СуммаПросроченногоДолга") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ЧислоПросрочившихДолжников") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ЧислоДнейПросрочки") <> Неопределено Тогда
		
		ПоляЗапроса = ПоляЗапроса + "," + "
		|ПросроченнаяДебиторскаяЗадолженность.СуммаДолга         КАК СуммаПросроченногоДолга,
		|ПросроченнаяДебиторскаяЗадолженность.ЧислоДолжников     КАК ЧислоПросрочившихДолжников,
		|ПросроченнаяДебиторскаяЗадолженность.ЧислоДнейПросрочки КАК ЧислоДнейПросрочки";
		
		Запрос.УстановитьПараметр("ВалютаУпрУчета", мВалютУпрУчета);
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютУпрУчета, ?(ЗначениеЗаполнено(ДатаКонца), ДатаКонца, ТекущаяДата()));
		Запрос.УстановитьПараметр("КратностьВалютыУпр", СтруктураКурса.Кратность);
		Запрос.УстановитьПараметр("КурсВалютыУпр", СтруктураКурса.Курс);
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		ВзаиморасчетыПоДокументамРасчетов.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
		|		ВзаиморасчетыПоДокументамРасчетов.ЧислоДолжников                        КАК ЧислоДолжников,
		|		СУММА(ВзаиморасчетыПоДокументамРасчетов.СуммаДолга)                     КАК СуммаДолга,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументамРасчетов.ЧислоДолжников, 0.00) > 0.00
		|			ТОГДА СУММА(ВзаиморасчетыПоДокументамРасчетов.ДнейПросрочки)/ВзаиморасчетыПоДокументамРасчетов.ЧислоДолжников
		|			ИНАЧЕ 0
		|			КОНЕЦ                                                               КАК ЧислоДнейПросрочки
		|	ИЗ
		|		(	
		|		ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Контрагент         КАК Контрагент,
		|			ВЫБОР
		|				КОГДА
		|				ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаУпрУчета
		|			ТОГДА
		|				ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток
		|			ИНАЧЕ
		|				((ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток * КурсыВалют.Курс * &КратностьВалютыУпр) / (&КурсВалютыУпр* КурсыВалют.Кратность))
		|			КОНЕЦ КАК СуммаДолга,
		|			ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента            КАК Договор,
		|			ВзаиморасчетыСКонтрагентами.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|			ЧисленностьКлиентов.ЧислоКлиентов                         КАК ЧислоДолжников,
		|			ВЫБОР
		|				КОГДА ПросроченнаяЗадолженность.ДатаВозникновения ЕСТЬ NULL
		|				ТОГДА 0
		|				ИНАЧЕ РАЗНОСТЬДАТ(ПросроченнаяЗадолженность.ДатаВозникновения, &ДатаКонца, ДЕНЬ) - ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности
		|				КОНЕЦ                                   КАК ДнейПросрочки
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаКонца,
		|			(ДоговорКонтрагента.ВидДоговора В(ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем),ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
		|			И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
		|			И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)
		|			) КАК ВзаиморасчетыСКонтрагентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(
		|			ВЫБРАТЬ
		|				ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом                       КАК ДокументРасчетовСКонтрагентом,
		|				МАКСИМУМ(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом.Дата)        КАК ДатаВозникновения
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, ДЕНЬ, ,
		|				(ДоговорКонтрагента.ВидДоговора В(ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем),ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
		|				И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
		|				И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)
		|				) КАК ВзаиморасчетыПоДокументам
		|			ГДЕ
		|				ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовКонечныйОстаток > 0
		|				И ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовНачальныйОстаток <= 0
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом
		|			)
		|			КАК ПросроченнаяЗадолженность
		|		ПО
		|			ВзаиморасчетыСКонтрагентами.ДокументРасчетовСКонтрагентом = ПросроченнаяЗадолженность.ДокументРасчетовСКонтрагентом
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(
		|			ВЫБРАТЬ
		|				КОЛИЧЕСТВО(ПодсчетКонтрагентов.Клиент) КАК ЧислоКлиентов
		|			ИЗ
		|				(
		|				ВЫБРАТЬ
		|					Взаиморасчеты.Контрагент КАК Клиент
		|				ИЗ
		|					РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаКонца,
		|					(ДоговорКонтрагента.ВидДоговора В(ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем),ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
		|					И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
		|					И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)
		|					)КАК Взаиморасчеты
		|				ГДЕ
		|					Взаиморасчеты.СуммаВзаиморасчетовОстаток > 0
		|				СГРУППИРОВАТЬ ПО
		|					Взаиморасчеты.Контрагент
		|				)
		|				КАК
		|				ПодсчетКонтрагентов
		|			)
		|			КАК ЧисленностьКлиентов
		|		ПО
		|			Истина
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалют
		|			ПО КурсыВалют.Валюта = ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов
		|		ГДЕ
		|			ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток > 0
		|		И
		|		ВЫБОР
		|			КОГДА ПросроченнаяЗадолженность.ДатаВозникновения ЕСТЬ NULL
		|			ТОГДА 0
		|			ИНАЧЕ РАЗНОСТЬДАТ(ПросроченнаяЗадолженность.ДатаВозникновения, &ДатаКонца, ДЕНЬ) - ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности
		|			КОНЕЦ > 0
		|		)
		|		КАК ВзаиморасчетыПоДокументамРасчетов
		|	ГДЕ
		|		ВзаиморасчетыПоДокументамРасчетов.ДнейПросрочки > 0
		|	СГРУППИРОВАТЬ ПО
		|		ВзаиморасчетыПоДокументамРасчетов.Контрагент.ОсновнойМенеджерПокупателя,
		|		ВзаиморасчетыПоДокументамРасчетов.ЧислоДолжников
		|	)
		|	КАК ПросроченнаяДебиторскаяЗадолженность
		|ПО
		|	ПросроченнаяДебиторскаяЗадолженность.Менеджер = Продажи.Контрагент.ОсновнойМенеджерПокупателя	
		|";
		
		ТекстГруппировки = ТекстГруппировки + "," + "
		|ПросроченнаяДебиторскаяЗадолженность.СуммаДолга,
		|ПросроченнаяДебиторскаяЗадолженность.ЧислоДолжников,
		|ПросроченнаяДебиторскаяЗадолженность.ЧислоДнейПросрочки";
		
		ТекстИтогов = ТекстИтогов + "," + "
			|СУММА(СуммаПросроченногоДолга),
			|СУММА(ЧислоПросрочившихДолжников),
			|СУММА(ЧислоДнейПросрочки)";
	 
	КонецЕсли; //мПоказатели.НайтиПоЗначению("СуммаПросроченногоДолга") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ЧислоПросрочившихДолжников") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ЧислоДнейПросрочки") <> Неопределено
			   
	Если мПоказатели.НайтиПоЗначению("ЧислоСобытий") <> Неопределено
		ИЛИ мПоказатели.НайтиПоЗначению("ДлительностьСобытий") <> Неопределено Тогда
		
		ПоляЗапроса = ПоляЗапроса + "," + "
		|События.ЧислоСобытий КАК ЧислоСобытий,
		|События.Длительность КАК ДлительностьСобытий";
		
		ТаблицыЗапроса = ТаблицыЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		ДокументыСобытия.Контрагент.ОсновнойМенеджерПокупателя                                        КАК Менеджер,
		|		СУММА(РАЗНОСТЬДАТ(ДокументыСобытия.НачалоСобытия, ДокументыСобытия.ОкончаниеСобытия, МИНУТА)) КАК Длительность,
		|		КОЛИЧЕСТВО(ДокументыСобытия.Номер)                                                            КАК ЧислоСобытий
		|	ИЗ
		|		Документ.Событие КАК ДокументыСобытия
		|	ГДЕ
		|		ДокументыСобытия.СостояниеСобытия = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Завершено)
		|		И ДокументыСобытия.ОкончаниеСобытия МЕЖДУ &ДатаНачала И &ДатаКонца
		|	СГРУППИРОВАТЬ ПО
		|		ДокументыСобытия.Контрагент.ОсновнойМенеджерПокупателя
		|	)
		|	КАК События
		|ПО
		|	События.Менеджер = Продажи.Контрагент.ОсновнойМенеджерПокупателя
		|";
		
		ТекстГруппировки = ТекстГруппировки + "," + "
		|События.ЧислоСобытий,
		|События.Длительность";
		
		ТекстИтогов = ТекстИтогов + "," + "
			|СУММА(ЧислоСобытий),
			|СУММА(ДлительностьСобытий)";
		
	КонецЕсли; //мПоказатели.НайтиПоЗначению("ЧислоСобытий") <> Неопределено
			   //ИЛИ мПоказатели.НайтиПоЗначению("ДлительностьСобытий") <> Неопределено

	ТекстЗапроса = ТекстЗапроса + ПоляЗапроса + "
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ) КАК Продажи	
	|" + ТаблицыЗапроса + "
	|	
	|ГДЕ 
	|	Продажи.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Продажи.Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|";

	Если ОтборМенеджер.Менеджер.Использование Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	И Продажи.Контрагент.ОсновнойМенеджерПокупателя " + ВозвратитьСтрокуВидаОтбора(ОтборМенеджер.Менеджер.ВидСравнения, ("&ЗначениеОтбораМенеджер")) + "
		|";

		Запрос.УстановитьПараметр("ЗначениеОтбораМенеджер", ОтборМенеджер.Менеджер.Значение);
	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|" + ТекстГруппировки + "
	|" + ТекстИтогов + "
	|ПО ОБЩИЕ
	|";
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала))
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", УстановитьДатуНачалаПоУмолчанию())
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаКонца) Тогда
		Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаКонца))
	Иначе
		Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ТекущаяДата()))
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Истина;
	
КонецФункции // СобратьТекстЗапроса()

// Процедура восстановления сохраненных настроек отчета
//
Процедура ВосстановитьНастройки(ЭлементыФормы) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
		
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;

КонецПроцедуры // ВосстановитьНастройки()

// Процедура восстановления значений реквизитов отчета
//
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Перем ТаблицаПоказателейОтчета;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ПоказателиОтчета", ТаблицаПоказателейОтчета);
	
	Если ТипЗнч(ТаблицаПоказателейОтчета) = Тип("ТаблицаЗначений") Тогда
		ПоказателиОтчета.Загрузить(ТаблицаПоказателейОтчета);
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ДатаНачала"              , ДатаНачала);
	СтруктураСНастройками.Свойство("ДатаКонца"               , ДатаКонца);
	СтруктураСНастройками.Свойство("ПоказыватьЗаголовок"     , ПоказыватьЗаголовок);
	СтруктураСНастройками.Свойство("ПоказыватьПокупателей"   , ПоказыватьПокупателей);
	СтруктураСНастройками.Свойство("РаскрашиватьГруппировки" , РаскрашиватьГруппировки);
	СтруктураСНастройками.Свойство("НастройкиДиаграммы"      , НастройкиДиаграммы);
	СтруктураСНастройками.Свойство("ОтборМенеджер"           , ОтборМенеджер);
	
КонецПроцедуры // ВосстановитьНастройкиИзСтруктуры()

// Процедура сохранения настроек отчета
//
Процедура СохранитьНастройки(ЭлементыФормы) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
		мТекущаяНастройка = Результат;
	Иначе
		мТекущаяНастройка = СтруктураНастройки;
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

// Процедура сохранения значений реквизитов отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		СтруктураСНастройками = Новый Структура;
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("ДатаНачала"              , ДатаНачала);
	СтруктураСНастройками.Вставить("ДатаКонца"               , ДатаКонца);
	СтруктураСНастройками.Вставить("ПоказыватьЗаголовок"     , ПоказыватьЗаголовок);
	СтруктураСНастройками.Вставить("ПоказыватьПокупателей"   , ПоказыватьПокупателей);
	СтруктураСНастройками.Вставить("РаскрашиватьГруппировки" , РаскрашиватьГруппировки);
	СтруктураСНастройками.Вставить("НастройкиДиаграммы"      , НастройкиДиаграммы);
	СтруктураСНастройками.Вставить("ОтборМенеджер"           , ОтборМенеджер);
	СтруктураСНастройками.Вставить("ПоказателиОтчета"        , ПоказателиОтчета.Выгрузить());
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНОЙ ФОРМЫ ОТЧЕТА

// Процедура заполняет ПолеТабличногоДокумента
//
// Параметры - Таб - ПолеТабличногоДокумента
Процедура СформироватьОтчет(Таб) Экспорт

	мКоличествоВыведенныхСтрокЗаголовка = 0;
	
	РасписатьРеквизиты();

	Макет = ПолучитьМакет("Отчет");
	Таб.Очистить();

	Секция = Макет.ПолучитьОбласть("Шапка|ПервыйСтолбец");
	Секция.Параметры.СтрокаИнтервал = СформироватьСтрокуПериода();
	Таб.Вывести(Секция);
	Таб.Область(2, 2, 2, (?(мПоказатели.Количество()>2, 2, мПоказатели.Количество())*2 + 2)).ПоВыделеннымКолонкам = Истина;
	мКоличествоВыведенныхСтрокЗаголовка = 4;

	Если ОтборМенеджер.Менеджер.Использование Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаОтбор|ПервыйСтолбец");
		Секция.Параметры.СтрокаОтбор = "Отбор: Менеджер " + СтрокаОтборов(ОтборМенеджер.Менеджер.ВидСравнения, ОтборМенеджер.Менеджер.Значение);
		Таб.Вывести(Секция);
		Таб.Область(6, 2, 6, (?(мПоказатели.Количество()>2,2,мПоказатели.Количество())*2 + 2)).ПоВыделеннымКолонкам = Истина;
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 

	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ПервыйСтолбец");
	Таб.Вывести(Секция);
	
	Запрос = Новый Запрос;
	Если НЕ СобратьТекстЗапроса(Запрос) Тогда
		Предупреждение("Запрос не выполнен!"); 
		Возврат;
	КонецЕсли;
	ЗапросВыполнен = Запрос.Выполнить();

	Если мПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Строки Из мПоказатели Цикл
		Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ОдиночныйСтолбец");
		Секция.Параметры.НаименованиеПоказателя = Строки.Представление;
		Таб.Присоединить(Секция);
	КонецЦикла; 

	СтруктураПоказателей = Новый Структура;

	ВыборкаИтоговыхЗаписей = ЗапросВыполнен.Выбрать();
	Если ВыборкаИтоговыхЗаписей.Следующий() Тогда
		Для каждого Строки Из ПоказателиЗапроса Цикл

			Если мПоказатели.НайтиПоЗначению(Строки.Значение) = Неопределено Тогда
				Продолжить;
			КонецЕсли; 

			СуммаПоказателя = ?(ВыборкаИтоговыхЗаписей[Строки.Значение] = NULL, 0, ВыборкаИтоговыхЗаписей[Строки.Значение]);
			СтруктураПоказателей.Вставить(Строки.Значение, СуммаПоказателя);
						
		КонецЦикла;
	КонецЕсли;

	Таб.НачатьАвтогруппировкуСтрок();
	
	мСтруктураТаблицДанныхДиаграммы = Новый Структура;
	
	// Суммы выручки, прибыли, скидок
	Если ПоказателиОтчета.Найти("СуммаВыручки", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("СуммаПрибыли", "ИмяПоказателя").ИспользованиеПоказателя  
		ИЛИ ПоказателиОтчета.Найти("СуммаРучныхСкидок", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("СреднееЗначениеВыручки", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("СуммаВыручки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Выручка");
		ТаблицаДанных.Колонки.Добавить("СреднееЗначениеВыручки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Средняя выручка");
		ТаблицаДанных.Колонки.Добавить("СуммаПрибыли", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Себестоимость номенклатуры");
		ТаблицаДанных.Колонки.Добавить("СуммаРучныхСкидок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Руч. скидки");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Объемы выручки, прибыли и ручных скидок");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("ВыручкаПрибыльСкидки", СтруктураДанныхДиаграммы);
		
	КонецЕсли;
	
	// Количественные показатели объемов продаж
	Если ПоказателиОтчета.Найти("ЧислоСделок", "ИмяПоказателя").ИспользованиеПоказателя
		ИЛИ ПоказателиОтчета.Найти("ЧислоПервыхСделок", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("СреднееЧислоСделок", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("ЧислоСделок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Сделки");
		ТаблицаДанных.Колонки.Добавить("ЧислоПервыхСделок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Перв. сделки");
		ТаблицаДанных.Колонки.Добавить("СреднееЧислоСделок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Сред кол-во сделок");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Количественные характеристики сделок");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("ХарактеристикиСделок", СтруктураДанныхДиаграммы);
		
	КонецЕсли;
	
	// Процентные показатели заполненности контактных данных
	Если ПоказателиОтчета.Найти("ПроцентКИКонтрагентов", "ИмяПоказателя").ИспользованиеПоказателя
		ИЛИ ПоказателиОтчета.Найти("ПроцентКИКонтЛицКонтр", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("ПроцентКИКонтактныхЛиц", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("ПроцентКИКонтрагентов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Конт. данные покупателей");
		ТаблицаДанных.Колонки.Добавить("ПроцентКИКонтЛицКонтр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Конт. данные контактных лиц контрагентов");
		ТаблицаДанных.Колонки.Добавить("ПроцентКИКонтактныхЛиц", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Личные конт. данные контактных лиц");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Показатели заполненности контактных данных");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("ЗаполненностьКонтДанных", СтруктураДанныхДиаграммы);
		
	КонецЕсли;
	
	// Количественные показатели заказов
	Если ПоказателиОтчета.Найти("ЧислоЗаказов", "ИмяПоказателя").ИспользованиеПоказателя
		ИЛИ ПоказателиОтчета.Найти("ЧислоОплаченныхЗаказов", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("ЧислоНеоплаченныхЗаказов", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("ЧислоЧастичноОплаченных", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("ЧислоЗаказов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Заказы");
		ТаблицаДанных.Колонки.Добавить("ЧислоОплаченныхЗаказов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Заказы оплаченные");
		ТаблицаДанных.Колонки.Добавить("ЧислоНеоплаченныхЗаказов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Заказы неоплаченные");
		ТаблицаДанных.Колонки.Добавить("ЧислоЧастичноОплаченных", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Заказы оплаченные частично");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Количественные характеристики заказов");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("ХарактеристикиЗаказов", СтруктураДанныхДиаграммы);
		
	КонецЕсли;
	
	// Структура дебиторки
	Если ПоказателиОтчета.Найти("СуммаДолга", "ИмяПоказателя").ИспользованиеПоказателя
		ИЛИ ПоказателиОтчета.Найти("ЧислоДолжников", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("СрокЗадолженности", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("СуммаДолга", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Долг");
		ТаблицаДанных.Колонки.Добавить("ЧислоДолжников", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Должники");
		ТаблицаДанных.Колонки.Добавить("СрокЗадолженности", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Срок долга");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Характеристики дебиторской задолженности");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("СтруктураДебиторской", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Структура просроченной дебиторки
	Если ПоказателиОтчета.Найти("СуммаПросроченногоДолга", "ИмяПоказателя").ИспользованиеПоказателя
		ИЛИ ПоказателиОтчета.Найти("ЧислоПросрочившихДолжников", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("ЧислоДнейПросрочки", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("СуммаПросроченногоДолга", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2), "Долг");
		ТаблицаДанных.Колонки.Добавить("ЧислоПросрочившихДолжников", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Должники");
		ТаблицаДанных.Колонки.Добавить("ЧислоДнейПросрочки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Дней просрочки");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "Характеристики просроченной дебиторской задолженности");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("СтруктураПросроченной", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	// Количество зарегистрированных событий с покупателями
	Если ПоказателиОтчета.Найти("ЧислоСобытий", "ИмяПоказателя").ИспользованиеПоказателя 
		ИЛИ ПоказателиОтчета.Найти("ДлительностьСобытий", "ИмяПоказателя").ИспользованиеПоказателя Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Объект");
		ТаблицаДанных.Колонки.Добавить("ЧислоСобытий", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Событий");
		ТаблицаДанных.Колонки.Добавить("ДлительностьСобытий", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0), "Длительность");
		
		СтруктураДанныхДиаграммы = Новый Структура;
		СтруктураДанныхДиаграммы.Вставить("Представление", "События с покупателями");
		СтруктураДанныхДиаграммы.Вставить("ТаблицаДанных", ТаблицаДанных);
		мСтруктураТаблицДанныхДиаграммы.Вставить("КоличествоСобытий", СтруктураДанныхДиаграммы);
		
	КонецЕсли; 
	
	ВывестиСтроки(Таб, Макет, ЗапросВыполнен, 0, СтруктураПоказателей);
	
	Таб.ЗакончитьАвтогруппировкуСтрок();

	Таб.ФиксацияСверху = мКоличествоВыведенныхСтрокЗаголовка + 4;
	Таб.ФиксацияСлева  = 2;
	
	ИзменитьВидимостьЗаголовка(Таб);
	
	Таб.Показать();
	
КонецПроцедуры

// Процедура выводит строки в ПолеТабличногоДокумента
// 
// Параметры
//  Таб - ПолеТабличногоДокумента
//  Макет - макет отчета
//  ТекущаяВыборка - выборка запроса, из которой выводить строки
// 
// Возвращаемое значение
//  НЕТ
// Комментарий:
// в данной процедуре есть момент, который может показаться сомнительным. А именно:
// сначала мы высчитываем ЧислоСтрокВыборки, для того, чтобы потом получить среднее значение итога
// по колонкам, выводящим процент и среднее. На первый взгляд правильнее было бы в тексте запроса
// вместо итога суммой, получать итог по среднему, но если сделать итог по среднему, то неправильно
// расчитывается доля (%) текущего значения по строке.
//
Процедура ВывестиСтроки(Таб, Макет, ТекущаяВыборка, ИндексТекущейГруппировки, ПоказателиПрошлойГруппировки)

	СтруктураПоказателей = Новый Структура;
	
	ЧислоСтрокВыборки = 0;
	ВыборкаРасчетСтрок = ТекущаяВыборка.Выбрать();
	Пока ВыборкаРасчетСтрок.Следующий() Цикл
		Если ВыборкаРасчетСтрок.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			ЧислоСтрокВыборки = ЧислоСтрокВыборки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Выборка = ТекущаяВыборка.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			Секция = Макет.ПолучитьОбласть("СтрокаИтог|ПервыйСтолбец");
		Иначе
			СтрокаВывода = СокрЛП(Выборка.Менеджер);
			Секция = Макет.ПолучитьОбласть("Строка|ПервыйСтолбец");
			Секция.Параметры.ЗначениеМенеджерКонтрагент = СтрокаВывода;
		КонецЕсли;
		
		Таб.Вывести(Секция);
		
		Для каждого Строки Из мПоказатели Цикл
		
			СуммаПоказателя = 0;
			СуммаПоказателяПрошлойГруппировки = 0;
			
			Если Строки.Значение = "СуммаВыручки"
				ИЛИ Строки.Значение = "СуммаПрибыли"
				ИЛИ Строки.Значение = "СуммаРучныхСкидок"
				ИЛИ Строки.Значение = "СреднееЗначениеВыручки" Тогда
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.ВыручкаПрибыльСкидки.ТаблицаДанных;
			ИначеЕсли Строки.Значение = "ЧислоСделок"
				ИЛИ Строки.Значение = "ЧислоПервыхСделок"
				ИЛИ Строки.Значение = "СреднееЧислоСделок" Тогда
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.ХарактеристикиСделок.ТаблицаДанных;
			ИначеЕсли Строки.Значение = "ПроцентКИКонтрагентов"
				ИЛИ Строки.Значение = "ПроцентКИКонтЛицКонтр"
				ИЛИ Строки.Значение = "ПроцентКИКонтактныхЛиц" Тогда
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.ЗаполненностьКонтДанных.ТаблицаДанных;
			ИначеЕсли Строки.Значение = "ЧислоЗаказов"
				ИЛИ Строки.Значение = "ЧислоОплаченныхЗаказов"
				ИЛИ Строки.Значение = "ЧислоНеоплаченныхЗаказов"
				ИЛИ Строки.Значение = "ЧислоЧастичноОплаченных"	Тогда
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.ХарактеристикиЗаказов.ТаблицаДанных;
			ИначеЕсли Строки.Значение = "СуммаДолга"
				ИЛИ Строки.Значение = "ЧислоДолжников"
				ИЛИ Строки.Значение = "СрокЗадолженности" Тогда
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.СтруктураДебиторской.ТаблицаДанных;
			ИначеЕсли Строки.Значение = "СуммаПросроченногоДолга"
				ИЛИ Строки.Значение = "ЧислоПросрочившихДолжников"
				ИЛИ Строки.Значение = "ЧислоДнейПросрочки" Тогда
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.СтруктураПросроченной.ТаблицаДанных;
			ИначеЕсли Строки.Значение = "ЧислоСобытий"
				ИЛИ Строки.Значение = "ДлительностьСобытий" Тогда
				ТаблицаДанныхДиаграммы = мСтруктураТаблицДанныхДиаграммы.КоличествоСобытий.ТаблицаДанных;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Менеджер) Тогда
				ОбъектВыборки = Выборка.Менеджер;
			Иначе
				ОбъектВыборки = "Итог";
			КонецЕсли;
			
			СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Найти(ОбъектВыборки, "Объект");
			Если СтрокаТекущегоМенеджераВДанныхДиаграммы = Неопределено
				И ОбъектВыборки <> "Итог" Тогда
					
				СтрокаТекущегоМенеджераВДанныхДиаграммы = ТаблицаДанныхДиаграммы.Добавить();
				СтрокаТекущегоМенеджераВДанныхДиаграммы.Объект = ОбъектВыборки;
								
			КонецЕсли;
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				Секция = Макет.ПолучитьОбласть("СтрокаИтог|ОдиночныйСтолбец");
			Иначе
				
				Секция = Макет.ПолучитьОбласть("Строка|ОдиночныйСтолбец");
				
				ТаблицаРасшифровки = Новый ТаблицаЗначений;
				ТаблицаРасшифровки.Колонки.Добавить("ПараметрИмя");
				ТаблицаРасшифровки.Колонки.Добавить("ПараметрЧисло", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаРасшифровки.Колонки.Добавить("Менеджер");
				
				СтрокаРасшифровки               = ТаблицаРасшифровки.Добавить();
				СтрокаРасшифровки.ПараметрИмя   = Строки.Значение;
				СтрокаРасшифровки.ПараметрЧисло = ПреобразоватьКЧислу(Выборка[Строки.Значение]);
				СтрокаРасшифровки.Менеджер      = Выборка.Менеджер;
				
			КонецЕсли;
			
			ЦветВыделения = Новый Цвет(255, 0, 0); 
			
			Если Найти(Строки.Значение, "Сумма") > 0 Тогда
				Секция.Параметры.ЗначениеПоказатель = ПривестиКФормату(ПреобразоватьКЧислу(Выборка[Строки.Значение]),15,2);
			ИначеЕсли Найти(Строки.Значение, "Процент") > 0
				ИЛИ Найти(Строки.Значение, "Среднее") > 0 Тогда
				
				Если ОбъектВыборки = "Итог" Тогда
					
					Если ЧислоСтрокВыборки > 0 Тогда
						Секция.Параметры.ЗначениеПоказатель = ПривестиКФормату(ПреобразоватьКЧислу(Выборка[Строки.Значение])/ЧислоСтрокВыборки,15,2);
					Иначе
						Секция.Параметры.ЗначениеПоказатель = 0;
					КонецЕсли;
					
				Иначе
					Секция.Параметры.ЗначениеПоказатель = ПривестиКФормату(ПреобразоватьКЧислу(Выборка[Строки.Значение]),15,2);
				КонецЕсли;
				
			Иначе
				Секция.Параметры.ЗначениеПоказатель = ПривестиКФормату(ПреобразоватьКЧислу(Выборка[Строки.Значение]),15,0);
			КонецЕсли;
			
			СтруктураПоказателей.Вставить(Строки.Значение, ПреобразоватьКЧислу(Выборка[Строки.Значение]));
			ПоказателиПрошлойГруппировки.Свойство(Строки.Значение, СуммаПоказателяПрошлойГруппировки);
			Если Выборка.ТипЗаписи() <> ТипЗаписиЗапроса.ОбщийИтог Тогда
				
				Секция.Параметры.ЗначениеПроцент = ПривестиКФормату(ПосчитатьПроцент(ПреобразоватьКЧислу(Выборка[Строки.Значение]), СуммаПоказателяПрошлойГруппировки),5,2);
				Секция.Параметры.Расшифровка     = ТаблицаРасшифровки;
				
			КонецЕсли;
			
			Если ОбъектВыборки <> "Итог" Тогда
				СтрокаТекущегоМенеджераВДанныхДиаграммы[Строки.Значение] = СтрокаТекущегоМенеджераВДанныхДиаграммы[Строки.Значение] + ПреобразоватьКЧислу(Выборка[Строки.Значение]);
			КонецЕсли;
			
			Таб.Присоединить(Секция);

		КонецЦикла;

		ВывестиСтроки(Таб, Макет, Выборка, ИндексТекущейГруппировки + 1, СтруктураПоказателей);
		
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ПЕЧАТНОЙ ФОРМЫ РАСШИФРОВКИ ПОКАЗАТЕЛЯ

Процедура СформироватьРасшифровкуПоказателя(Таб, ИмяПоказателя, Менеджер, ФлагВозврата) Экспорт
	
	Если ИмяПоказателя = "СуммаВыручки" Тогда
		
		// Следует отметить, что запрос формируется таким образом, чтобы в нём обязательно содержались
		// строки с параметрами, по которым группируются итоги (разумеется ОБЩИЕ - не в счет).
		// Итог по ОБЩЕЕ должен присутсвовать обязательно!!!
		// Названия параметров должны быть точно такими как названия указанные после оператора ПО, и
		// параметры, по которым установлены группировки, должны идти первыми
		
		ТекстЗапросаРасшифровки = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрПродаж.Контрагент.Ссылка          КАК Контрагент,      // *параметр группировки
		|	РегистрПродаж.Регистратор                КАК Документ,        // **параметр группировки
		|	РегистрПродаж.Номенклатура               КАК Номенклатура,
		|	РегистрПродаж.ХарактеристикаНоменклатуры КАК Характеристика,
		|	РегистрПродаж.Количество                 КАК Количество,
		|	РегистрПродаж.Стоимость                  КАК Стоимость
		|ИЗ
		|	РегистрНакопления.Продажи КАК РегистрПродаж
		|ГДЕ
		|	(НЕ РегистрПродаж.Контрагент.ОсновнойМенеджерПокупателя ЕСТЬ NULL )
		|	И РегистрПродаж.Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И РегистрПродаж.Стоимость <> 0
		|	И РегистрПродаж.Контрагент.ОсновнойМенеджерПокупателя = &Менеджер
		|	И РегистрПродаж.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|ИТОГИ
		|	СУММА(Стоимость)
		|ПО
		|	ОБЩИЕ,
		|	Контрагент,                                                   // *параметр группировки
		|	Документ                                                      // **параметр группировки
		|";
		
	ИначеЕсли ИмяПоказателя = "СуммаПрибыли" Тогда
		
		ТекстЗапросаРасшифровки = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрПродаж.Контрагент.Ссылка          КАК Контрагент,
		|	РегистрПродаж.ДокументПродажи            КАК Документ,
		|	РегистрПродаж.Номенклатура               КАК Номенклатура,
		|	РегистрПродаж.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ЦеныСебестоимости.Количество             КАК Количество,
		|	ЦеныСебестоимости.Себестоимость          КАК Себестоимость
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ) КАК РегистрПродаж		
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	(
		|	ВЫБРАТЬ
		|		СебестоимостьПродаж.Номенклатура КАК Номенклатура,
		|		СебестоимостьПродаж.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		СебестоимостьПродаж.ЗаказПокупателя КАК ЗаказПокупателя,
		|		ВЫБОР
		|			КОГДА СебестоимостьПродаж.ДокументДвижения <> НЕОПРЕДЕЛЕНО
		|			ТОГДА СебестоимостьПродаж.ДокументДвижения
		|			ИНАЧЕ СебестоимостьПродаж.Регистратор
		|			КОНЕЦ КАК ДокументПродажи,
		|		СебестоимостьПродаж.Стоимость КАК Себестоимость,
		|		СебестоимостьПродаж.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.ПродажиСебестоимость КАК СебестоимостьПродаж
		|	ГДЕ
		|		СебестоимостьПродаж.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		|	)
		|	КАК ЦеныСебестоимости
		|ПО 
		|	ЦеныСебестоимости.Номенклатура = РегистрПродаж.Номенклатура
		|	И ЦеныСебестоимости.ХарактеристикаНоменклатуры = РегистрПродаж.ХарактеристикаНоменклатуры
		|	И ЦеныСебестоимости.ЗаказПокупателя = РегистрПродаж.ЗаказПокупателя
		|	И ЦеныСебестоимости.ДокументПродажи = РегистрПродаж.ДокументПродажи
		|ГДЕ
		|	РегистрПродаж.СтоимостьОборот <> 0
		|	И (НЕ РегистрПродаж.Контрагент.ОсновнойМенеджерПокупателя ЕСТЬ NULL )
		|	И РегистрПродаж.Контрагент.ОсновнойМенеджерПокупателя <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И РегистрПродаж.Контрагент.ОсновнойМенеджерПокупателя = &Менеджер
		|ИТОГИ
		|	СУММА(Себестоимость)
		|ПО
		|	ОБЩИЕ,
		|	Контрагент,
		|	Документ
		|";
		
	ИначеЕсли ИмяПоказателя = "СуммаРучныхСкидок" Тогда
		
		ТекстЗапросаРасшифровки = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПродажиОбороты.Контрагент.Ссылка                 КАК Контрагент,
		|	ПродажиОбороты.Регистратор                       КАК Документ,
		|	ПредоставленныеСкидки.Номенклатура               КАК Номенклатура,
		|	ПредоставленныеСкидки.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ПродажиОбороты.СтоимостьОборот                   КАК Стоимость,
		|	ВЫБОР
		|		КОГДА ПродажиОбороты.СтоимостьБезСкидокОборот > 0
		|		ТОГДА ПредоставленныеСкидки.СуммаСкидкиОборот * 100 / ПродажиОбороты.СтоимостьБезСкидокОборот
		|		ИНАЧЕ 0
		|		КОНЕЦ                                        КАК Процент,
		|	ПредоставленныеСкидки.СуммаСкидкиОборот                КАК Скидка
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, Регистратор, ) КАК ПродажиОбороты
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрНакопления.ПредоставленныеСкидки.Обороты(&ДатаНачала, &ДатаКонца, , УсловиеСкидки = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.РучнаяСкидка)) КАК ПредоставленныеСкидки
		|ПО
		|	ПродажиОбороты.Номенклатура                 = ПредоставленныеСкидки.Номенклатура
		|	И ПродажиОбороты.ХарактеристикаНоменклатуры = ПредоставленныеСкидки.ХарактеристикаНоменклатуры
		|	И ПродажиОбороты.ДокументПродажи            = ПредоставленныеСкидки.ДокументСкидки
		|ГДЕ
		|	ПродажиОбороты.Контрагент.ОсновнойМенеджерПокупателя = &Менеджер
		|	И ПродажиОбороты.СтоимостьОборот > 0
		|	И ПредоставленныеСкидки.СуммаСкидкиОборот > 0
		|ИТОГИ
		|	СУММА(Скидка),
		|	СРЕДНЕЕ(Процент)
		|ПО
		|	ОБЩИЕ,
		|	Контрагент,
		|	Документ
		|";
		
	ИначеЕсли ИмяПоказателя = "ЧислоСделок"
		ИЛИ ИмяПоказателя = "СреднееЧислоСделок"
		ИЛИ ИмяПоказателя = "ЧислоПервыхСделок"
		ИЛИ ИмяПоказателя = "СреднееЗначениеВыручки" Тогда
		
		ТекстЗапросаРасшифровки = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Продажи.Контрагент      КАК Контрагент,
		|	Продажи.ДокументПродажи КАК Документ,
		|	Продажи.ЗаказПокупателя КАК Заказ,
		|	Продажи.СтоимостьОборот КАК Выручка,
		|	1 КАК Всего,
		|	ВЫБОР 
		|		КОГДА СУММА(ПервичныеПродажи.Сделка) > 0
		|		ТОГДА 0
		|		ИНАЧЕ 1
		|		КОНЕЦ               КАК Первичных
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ) КАК Продажи
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	(
		|	ВЫБРАТЬ
		|		Продажи.Контрагент         КАК Контрагент,
		|		Продажи.Регистратор.Дата   КАК ДатаСделки,
		|		1                          КАК Сделка
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(, &ДатаКонца, Регистратор, Контрагент = Контрагент) КАК Продажи
		|	)
		|	КАК ПервичныеПродажи
		|ПО
		|	ПервичныеПродажи.Контрагент = Продажи.Контрагент
		|	И ПервичныеПродажи.ДатаСделки < Продажи.ДокументПродажи.Дата
		|ГДЕ
		|	Продажи.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	И Продажи.Контрагент.ОсновнойМенеджерПокупателя = &Менеджер
		|	И Продажи.КоличествоОборот > 0
		|СГРУППИРОВАТЬ ПО
		|	Продажи.Контрагент,
		|	Продажи.ДокументПродажи,
		|	Продажи.ЗаказПокупателя,
		|	Продажи.СтоимостьОборот
		|ИТОГИ
		|	СРЕДНЕЕ(Выручка),
		|	СУММА(Всего),
		|	СУММА(Первичных)
		|ПО
		|	ОБЩИЕ,
		|	Контрагент,
		|	Документ
		|";
		
	ИначеЕсли ИмяПоказателя = "ПроцентКИКонтрагентов"
		ИЛИ ИмяПоказателя = "ПроцентКИКонтЛицКонтр"
		ИЛИ ИмяПоказателя = "ПроцентКИКонтактныхЛиц" Тогда
		
		Предупреждение("Расшифровка данного показателя содержится в отчете о контактной информации!");
		ФлагВозврата = Истина;
		
	ИначеЕсли ИмяПоказателя = "ЧислоЗаказов"
		ИЛИ ИмяПоказателя = "ЧислоОплаченныхЗаказов"
		ИЛИ ИмяПоказателя = "ЧислоНеоплаченныхЗаказов"
		ИЛИ ИмяПоказателя = "ЧислоЧастичноОплаченных" Тогда
		
		ТекстЗапросаРасшифровки = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПокупателей.ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказыПокупателей.ЗаказПокупателя КАК Документ,
		|	ВЫБОР
		|		КОГДА СУММА(ЕСТЬNULL(Расчеты.Оплачен, 0)) = 0
		|			ТОГДА ""Не оплачен""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СУММА(Расчеты.Оплачен) < СУММА(Расчеты.КОплате)
		|					ТОГДА ""Частично оплачен""
		|				ИНАЧЕ ""Оплачен полностью""
		|			КОНЕЦ
		|	КОНЕЦ КАК Оплата,
		|	СУММА(Расчеты.КОплате) КАК КОплате,
		|	СУММА(Расчеты.Оплачен) КАК Оплачено,
		|	ВЫБОР
		|		КОГДА СУММА(ЕСТЬNULL(ЗаказыПокупателей.КоличествоРасход, 0)) = 0
		|			ТОГДА ""Не отгружалось""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СУММА(ЗаказыПокупателей.КоличествоРасход) < СУММА(ЗаказыПокупателей.КоличествоПриход)
		|					ТОГДА ВЫБОР
		|							КОГДА СУММА(ЕСТЬNULL(Продажи.КоличествоОборот, 0)) = 0
		|								ТОГДА ""Не отгружалось""
		|							ИНАЧЕ ""Частично отгружено""
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА СУММА(ЕСТЬNULL(Продажи.КоличествоОборот, 0)) = 0
		|							ТОГДА ""Не отгружалось""
		|						ИНАЧЕ ""Отгружено полностью""
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Отгрузка,
		|	СУММА(ЗаказыПокупателей.КоличествоПриход) - СУММА(ЗаказыПокупателей.КоличествоРасход) КАК КОтгрузке,
		|	СУММА(Продажи.КоличествоОборот) КАК Отгружено
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Обороты(
		|			&ДатаНачала,
		|			&ДатаКонца,
		|			,
		|			ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
		|				И ЗаказПокупателя.Контрагент.ОсновнойМенеджерПокупателя = &Менеджер) КАК ЗаказыПокупателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РасчетыСКонтрагентами.Сделка КАК ЗаказПокупателя,
		|			СУММА(РасчетыСКонтрагентами.СуммаУпрРасход) КАК Оплачен,
		|			СУММА(РасчетыСКонтрагентами.СуммаУпрПриход) КАК КОплате
		|		ИЗ
		|			РегистрНакопления.РасчетыСКонтрагентами.Обороты(, &ДатаКонца, , Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентами
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РасчетыСКонтрагентами.Сделка) КАК Расчеты
		|		ПО ЗаказыПокупателей.ЗаказПокупателя = Расчеты.ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
		|				&ДатаНачала,
		|				&ДатаКонца,
		|				,
		|				ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
		|					И ЗаказПокупателя.Контрагент.ОсновнойМенеджерПокупателя = &Менеджер) КАК Продажи
		|		ПО ЗаказыПокупателей.ЗаказПокупателя = Продажи.ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПокупателей.ЗаказПокупателя.Контрагент,
		|	ЗаказыПокупателей.ЗаказПокупателя
		|ИТОГИ
		|	СУММА(КОплате),
		|	СУММА(Оплачено),
		|	СУММА(КОтгрузке),
		|	СУММА(Отгружено)
		|ПО
		|	ОБЩИЕ,
		|	Контрагент";
		
	ИначеЕсли ИмяПоказателя = "СуммаДолга"
			ИЛИ ИмяПоказателя = "ЧислоДолжников"
			ИЛИ ИмяПоказателя = "СрокЗадолженности" Тогда
			
		ТекстЗапросаРасшифровки = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыСКонтрагентами.Контрагент  КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор.Дата ЕСТЬ NULL 
		|		ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентами.Период, &ДатаКонца, ДЕНЬ)
		|		КОНЕЦ                               КАК ДнейСМоментаУчета,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрПриход <> 0
		|		ТОГДА ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрПриход > 0
		|				ТОГДА ""Передача клиенту""
		|				ИНАЧЕ ""Поступление от клиента""
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрРасход > 0
		|				ТОГДА ""Поступление от клиента""
		|				ИНАЧЕ ""Передача клиенту""
		|				КОНЕЦ
		|		КОНЕЦ                               КАК Движение,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрПриход <> 0
		|		ТОГДА ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрПриход > 0
		|				ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрПриход
		|				ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпрПриход
		|				КОНЕЦ 
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрРасход > 0
		|				ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпрРасход
		|				ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпрРасход
		|				КОНЕЦ
		|		КОНЕЦ                               КАК НаСумму,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпрКонечныйОстаток КАК Задолженность
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты( , &ДатаКонца, Регистратор, Движения, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|																										И Контрагент.ОсновнойМенеджерПокупателя = &Менеджер) КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.Контрагент В
		|			(ВЫБРАТЬ
		|				КонтрагентыВзаиморасчетов.Контрагент
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКонца, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)) КАК КонтрагентыВзаиморасчетов
		|			ГДЕ
		|				КонтрагентыВзаиморасчетов.СуммаУпрОстаток > 0)
		|ИТОГИ
		|	СУММА(
		|			ВЫБОР 	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|					ТОГДА 0
		|					ИНАЧЕ	ВЫБОР	КОГДА Движение = ""Поступление от клиента""
		|									ТОГДА -НаСумму
		|									ИНАЧЕ НаСумму
		|							КОНЕЦ
		|			КОНЕЦ
		|	) КАК Задолженность
		|ПО
		|	ОБЩИЕ,
		|	Контрагент
		|";
		
	ИначеЕсли ИмяПоказателя = "СуммаПросроченногоДолга"
		ИЛИ ИмяПоказателя = "ЧислоПросрочившихДолжников"
		ИЛИ ИмяПоказателя = "ЧислоДнейПросрочки" Тогда
		
		ТекстЗапросаРасшифровки = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыСКонтрагентами.Контрагент                    КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентами.ДокументРасчетовСКонтрагентом КАК Документ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.ДокументРасчетовСКонтрагентом ЕСТЬ NULL
		|		ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентами.ДокументРасчетовСКонтрагентом.Дата, &ДатаКонца, ДЕНЬ)
		|		КОНЕЦ                                                 КАК ДнейСМоментаУчета,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглПриход <> 0
		|		ТОГДА ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглПриход > 0
		|				ТОГДА ""Передача клиенту""
		|				ИНАЧЕ ""Поступление от клиента""
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглРасход > 0
		|				ТОГДА ""Поступление от клиента""
		|				ИНАЧЕ ""Передача клиенту""
		|				КОНЕЦ
		|		КОНЕЦ                                                     КАК Движение,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглПриход <> 0
		|		ТОГДА ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглПриход > 0
		|				ТОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглПриход
		|				ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаРеглПриход
		|				КОНЕЦ 
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглРасход > 0
		|				ТОГДА ВзаиморасчетыСКонтрагентами.СуммаРеглРасход
		|				ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаРеглРасход
		|				КОНЕЦ
		|		КОНЕЦ                                                     КАК НаСумму,
		|	ВзаиморасчетыСКонтрагентами.СуммаРеглКонечныйОстаток КАК Задолженность
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты( , &ДатаКонца, Регистратор, Движения, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|																										И Контрагент.ОсновнойМенеджерПокупателя = &Менеджер) КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.Контрагент В
		|		(
		|		ВЫБРАТЬ
		|			ПросроченнаяЗадолженность.Клиент
		|		ИЗ
		|			(
		|			ВЫБРАТЬ
		|				ВзаиморасчетыПоДокументам.Контрагент         КАК Клиент,
		|				ВзаиморасчетыПоДокументам.ДоговорКонтрагента КАК Договор,
		|				ВЫБОР 
		|					КОГДА МАКСИМУМ(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом.Дата) ЕСТЬ NULL
		|					ТОГДА 0
		|					ИНАЧЕ РАЗНОСТЬДАТ(МАКСИМУМ(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом.Дата), &ДатаКонца, ДЕНЬ) - ВзаиморасчетыПоДокументам.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности
		|					КОНЕЦ                                    КАК РазницаДней
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаКонца, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)) КАК ВзаиморасчетыПоДокументам
		|			ГДЕ
		|				ВзаиморасчетыПоДокументам.СуммаРеглОстаток > 0
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыПоДокументам.Контрагент,
		|				ВзаиморасчетыПоДокументам.ДоговорКонтрагента
		|			)
		|			КАК ПросроченнаяЗадолженность
		|		ГДЕ
		|			ПросроченнаяЗадолженность.РазницаДней > 0
		|		СГРУППИРОВАТЬ ПО
		|			ПросроченнаяЗадолженность.Клиент
		|		)
		|ИТОГИ
		|	СУММА(ВЫБОР КОГДА Движение = ""Поступление от клиента""
		|				ТОГДА -НаСумму
		|				ИНАЧЕ НаСумму
		|				КОНЕЦ) КАК Задолженность
		|ПО
		|	ОБЩИЕ,
		|	Контрагент		
		|";
		
	ИначеЕсли ИмяПоказателя = "ЧислоСобытий"
		ИЛИ ИмяПоказателя = "ДлительностьСобытий" Тогда
		
		ТекстЗапросаРасшифровки = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Событие.Контрагент КАК Контрагент,
		|	Событие.Ссылка     КАК Событие,
		|	Событие.ВидСобытия КАК Вид,
		|	1                  КАК Количество,
		|	РАЗНОСТЬДАТ(Событие.НачалоСобытия, Событие.ОкончаниеСобытия, МИНУТА) КАК Длительность
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.СостояниеСобытия = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Завершено)
		|	И Событие.Контрагент.ОсновнойМенеджерПокупателя = &Менеджер
		|	И Событие.ОкончаниеСобытия МЕЖДУ &ДатаНачала И &ДатаКонца
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Длительность)
		|ПО
		|	ОБЩИЕ,
		|	Контрагент
		|";
		
	КонецЕсли;
	
	Таб.Очистить();
	Макет  = ПолучитьМакет("Расшифровка");
	Секция = Макет.ПолучитьОбласть("Шапка|ПервыйСтолбец");
	
	Секция.Параметры.РасшифровкаЗаголовок = ПоказателиОтчета.Найти(ИмяПоказателя, "ИмяПоказателя").ПредставлениеПоказателя;
	Секция.Параметры.СтрокаМенеджер       = "Менеджер: " + Менеджер;
	Секция.Параметры.СтрокаИнтервал       = СформироватьСтрокуПериода();
	Таб.Вывести(Секция);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровки;
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала))
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", УстановитьДатуНачалаПоУмолчанию())
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаКонца) Тогда
		Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаКонца))
	Иначе
		Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ТекущаяДата()))
	КонецЕсли;
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	
	Если ЗначениеЗаполнено(ТекстЗапросаРасшифровки) Тогда
		РезультатЗапроса = Запрос.Выполнить();
	Иначе
		Возврат;
	КонецЕсли;
		
	ГруппировкиЗапроса = Новый СписокЗначений;
	
	ВыборкаРасшифровка = РезультатЗапроса.Выбрать();
	Пока ВыборкаРасшифровка.Следующий() Цикл
		
		Если (ВыборкаРасшифровка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке)
			И (ГруппировкиЗапроса.НайтиПоЗначению(ВыборкаРасшифровка.Группировка()) = Неопределено) Тогда
			ГруппировкиЗапроса.Добавить(ВыборкаРасшифровка.Группировка());
		КонецЕсли;
			
	КонецЦикла;
		
	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ПервыйСтолбец");
	
	ШагНачала = 0;
	СтрокаСоЗначением = "";
	Пока СтрокаСоЗначением = "" Цикл
		
		Если ГруппировкиЗапроса.НайтиПоЗначению(РезультатЗапроса.Колонки[ШагНачала].Имя) = Неопределено Тогда
			СтрокаСоЗначением = РезультатЗапроса.Колонки[ШагНачала].Имя;
		КонецЕсли;
		ШагНачала = ШагНачала + 1;
		
	КонецЦикла;
	
	Секция.Параметры.ЗначениеШапкиТаблицы = СтрокаСоЗначением;
	Таб.Вывести(Секция);
		
	Для ШагЦикла = ШагНачала ПО (РезультатЗапроса.Колонки.Количество() - 1) Цикл
		
		Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|СтолбецПоказателя");
		Если ГруппировкиЗапроса.НайтиПоЗначению(РезультатЗапроса.Колонки[ШагЦикла].Имя) = Неопределено Тогда
			
			Если ПоказателиРасшифровки.НайтиПоЗначению(РезультатЗапроса.Колонки[ШагЦикла].Имя) <> Неопределено Тогда
				Секция.Параметры.НаименованиеПоказателя = ПоказателиРасшифровки.НайтиПоЗначению(РезультатЗапроса.Колонки[ШагЦикла].Имя).Представление;
			Иначе
				Секция.Параметры.НаименованиеПоказателя = РезультатЗапроса.Колонки[ШагЦикла].Имя;
			КонецЕсли;
			
		КонецЕсли;
		Таб.Присоединить(Секция);
		
	КонецЦикла;
	
	Таб.НачатьАвтогруппировкуСтрок();
	
	СформироватьСтрокиРасшифровки(Таб, Макет, РезультатЗапроса, ГруппировкиЗапроса, (ШагНачала - 1));
	
	Таб.ЗакончитьАвтогруппировкуСтрок();
	Таб.Показать();
	
КонецПроцедуры

Процедура СформироватьСтрокиРасшифровки(Таб, Макет, РезультатЗапроса, ГруппировкиЗапроса, ШагНачала)
	
	ВыборкаРасшифровка = РезультатЗапроса.Выбрать();
	
	ИндексГруппировки = 0;
	ГруппироватьЗаписи = Ложь;
	
	Пока ВыборкаРасшифровка.Следующий() Цикл
		
		Если ВыборкаРасшифровка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			Секция = Макет.ПолучитьОбласть("СтрокаТаблицы|ПервыйСтолбец");
			Секция.Параметры.ЗначениеСтроки = ВыборкаРасшифровка[РезультатЗапроса.Колонки[ШагНачала].Имя];
			Если ГруппироватьЗаписи Тогда
				ИндексГруппировки = ИндексГруппировки + 1;
				ГруппироватьЗаписи = Ложь;
			КонецЕсли;
						
		ИначеЕсли ВыборкаРасшифровка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			
			Секция = Макет.ПолучитьОбласть("ИтогТаблицы|ПервыйСтолбец");
			Секция.Параметры.ЗначениеИтога = "Итого";
						
		Иначе
			
			Секция = Макет.ПолучитьОбласть("ИтогГруппировки|ПервыйСтолбец");
			Секция.Параметры.ЗначениеИтога = ВыборкаРасшифровка.Группировка() + ": " + ВыборкаРасшифровка[ВыборкаРасшифровка.Группировка()];
			Секция.Области.СекцияИтогГруппировка.Расшифровка = ВыборкаРасшифровка[ВыборкаРасшифровка.Группировка()];
			Если ГруппировкиЗапроса.НайтиПоЗначению(ВыборкаРасшифровка.Группировка()) <> Неопределено Тогда
				ИндексГруппировки = ГруппировкиЗапроса.Индекс(ГруппировкиЗапроса.НайтиПоЗначению(ВыборкаРасшифровка.Группировка()));
				ГруппироватьЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Таб.Вывести(Секция, ИндексГруппировки);
		
		Для ШагЦикла = (ШагНачала + 1) ПО (РезультатЗапроса.Колонки.Количество() - 1) Цикл
			
			Если ВыборкаРасшифровка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
				Секция = Макет.ПолучитьОбласть("СтрокаТаблицы|СтолбецПоказателя");
			ИначеЕсли ВыборкаРасшифровка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
				Секция = Макет.ПолучитьОбласть("ИтогТаблицы|СтолбецПоказателя");
			Иначе
				Секция = Макет.ПолучитьОбласть("ИтогГруппировки|СтолбецПоказателя");
			КонецЕсли;
			
			Секция.Параметры.ЗначениеПоказателя = ВыборкаРасшифровка[РезультатЗапроса.Колонки[ШагЦикла].Имя];
			Секция.Параметры.ЗначениеПоказателя = ПривестиКФормату(ВыборкаРасшифровка[РезультатЗапроса.Колонки[ШагЦикла].Имя],15,2);
			Таб.Присоединить(Секция);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

// Инициализация таблиц всех возможных показателей, группировок, фильтров

мВалютУпрУчета              = глЗначениеПеременной("ВалютаУправленческогоУчета");
мНаименованиеВалютыУпрУчета = мВалютУпрУчета.Наименование;


СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаВыручки"; //СуммаВыручки
СтрокаПоказателя.ПредставлениеПоказателя = "Общая сумма выручки от продаж в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаПрибыли"; //СуммаПрибыли
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма себестоимости проданных товаров в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаРучныхСкидок"; //КоэффициентУдержанияПокупателей
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма предоставленных ручных скидок в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоСделок"; //КоличествоСобытий
СтрокаПоказателя.ПредставлениеПоказателя = "Число сделок";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоПервыхСделок"; //СуммаЗакрытияЗаказов
СтрокаПоказателя.ПредставлениеПоказателя = "Число первичных сделок";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СреднееЧислоСделок"; //ВыполнениеЗаказов
СтрокаПоказателя.ПредставлениеПоказателя = "Среднее число сделок с клиентом";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СреднееЗначениеВыручки"; //СуммаВыручкиБезНДС
СтрокаПоказателя.ПредставлениеПоказателя = "Средняя сумма выручки от сделки в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ПроцентКИКонтрагентов"; //ПроцентКИКонтрагентов
СтрокаПоказателя.ПредставлениеПоказателя = "Заполненность конт. данных покупателей (%)";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ПроцентКИКонтЛицКонтр"; //КИКонтЛицКонтр
СтрокаПоказателя.ПредставлениеПоказателя = "Заполненность конт. данных контактных лиц покупателей (%)";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ПроцентКИКонтактныхЛиц"; //КИКонтактныхЛиц
СтрокаПоказателя.ПредставлениеПоказателя = "Заполненность личных конт. данных контактных лиц (%)";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоЗаказов"; //ПолнотаБазыДанныхКонтактнойИнформации
СтрокаПоказателя.ПредставлениеПоказателя = "Число выставленных заказов";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоОплаченныхЗаказов"; //СтадииПокупателей
СтрокаПоказателя.ПредставлениеПоказателя = "Число оплаченных заказов";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоНеоплаченныхЗаказов"; //КоличествоДокументовПродажи
СтрокаПоказателя.ПредставлениеПоказателя = "Число неоплаченных заказов";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоЧастичноОплаченных";
СтрокаПоказателя.ПредставлениеПоказателя = "Число частично оплаченных заказов";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаДолга";
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма дебиторской задолженности в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоДолжников";
СтрокаПоказателя.ПредставлениеПоказателя = "Число должников";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СрокЗадолженности";
СтрокаПоказателя.ПредставлениеПоказателя = "Средний срок существования задолженности в днях";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "СуммаПросроченногоДолга";
СтрокаПоказателя.ПредставлениеПоказателя = "Сумма просроченной дебиторской задолженности в " + мНаименованиеВалютыУпрУчета;
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоПросрочившихДолжников";
СтрокаПоказателя.ПредставлениеПоказателя = "Число должников, с просроченной задолженностью";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоДнейПросрочки";
СтрокаПоказателя.ПредставлениеПоказателя = "Среднее число дней просрочки";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ЧислоСобытий";
СтрокаПоказателя.ПредставлениеПоказателя = "Число завершенных событий";
СтрокаПоказателя = ПоказателиОтчета.Добавить();
СтрокаПоказателя.ИмяПоказателя = "ДлительностьСобытий";
СтрокаПоказателя.ПредставлениеПоказателя = "Длительность завершенных событий (мин.)";

ПоказателиЗапроса = Новый СписокЗначений;
ПоказателиЗапроса.Добавить("СуммаВыручки");
ПоказателиЗапроса.Добавить("СуммаПрибыли");
ПоказателиЗапроса.Добавить("СуммаРучныхСкидок");
ПоказателиЗапроса.Добавить("ЧислоСделок");
ПоказателиЗапроса.Добавить("ЧислоПервыхСделок");
ПоказателиЗапроса.Добавить("СреднееЧислоСделок");
ПоказателиЗапроса.Добавить("СреднееЗначениеВыручки");
ПоказателиЗапроса.Добавить("ПроцентКИКонтрагентов");
ПоказателиЗапроса.Добавить("ПроцентКИКонтЛицКонтр");
ПоказателиЗапроса.Добавить("ПроцентКИКонтактныхЛиц");
ПоказателиЗапроса.Добавить("ЧислоЗаказов");
ПоказателиЗапроса.Добавить("ЧислоОплаченныхЗаказов");
ПоказателиЗапроса.Добавить("ЧислоНеоплаченныхЗаказов");
ПоказателиЗапроса.Добавить("ЧислоЧастичноОплаченных");
ПоказателиЗапроса.Добавить("СуммаДолга");
ПоказателиЗапроса.Добавить("ЧислоДолжников");
ПоказателиЗапроса.Добавить("СрокЗадолженности");
ПоказателиЗапроса.Добавить("СуммаПросроченногоДолга");
ПоказателиЗапроса.Добавить("ЧислоПросрочившихДолжников");
ПоказателиЗапроса.Добавить("ЧислоДнейПросрочки");
ПоказателиЗапроса.Добавить("ЧислоСобытий");
ПоказателиЗапроса.Добавить("ДлительностьСобытий");

ПоказателиРасшифровки = Новый СписокЗначений;
ПоказателиРасшифровки.Добавить("Характеристика", "Характеристика номенклатуры");
ПоказателиРасшифровки.Добавить("Стоимость", "Сумма реализации (" + мНаименованиеВалютыУпрУчета + ")");
ПоказателиРасшифровки.Добавить("Себестоимость", "Сумма себестоимости (" + мНаименованиеВалютыУпрУчета + ")");
ПоказателиРасшифровки.Добавить("Процент", "Скидка в процентном выражении");
ПоказателиРасшифровки.Добавить("Скидка", "Сумма скидки (" + мНаименованиеВалютыУпрУчета + ")");
ПоказателиРасшифровки.Добавить("Выручка", "Сумма выручки от сделки (" + мНаименованиеВалютыУпрУчета + ")");
ПоказателиРасшифровки.Добавить("Всего", "Общее число сделок");
ПоказателиРасшифровки.Добавить("Первичных", "Число первичных сделок");
ПоказателиРасшифровки.Добавить("Оплата", "Состояние оплаты");
ПоказателиРасшифровки.Добавить("КОплате", "Сумма к оплате (" + мНаименованиеВалютыУпрУчета + ")");
ПоказателиРасшифровки.Добавить("Оплачено", "Оплачено на сумму (" + мНаименованиеВалютыУпрУчета + ")");
ПоказателиРасшифровки.Добавить("Отгрузка", "Состояние отгрузки");
ПоказателиРасшифровки.Добавить("КОтгрузке", "Количество единиц к отгрузке");
ПоказателиРасшифровки.Добавить("Отгружено", "Фактически отгружено единиц");
ПоказателиРасшифровки.Добавить("ДнейСМоментаУчета", "Число дней с момента учета");
ПоказателиРасшифровки.Добавить("Движение", "Вид движения");
ПоказателиРасшифровки.Добавить("НаСумму", "Сумма операции (" + мНаименованиеВалютыУпрУчета + ")");
ПоказателиРасшифровки.Добавить("Задолженность", "Сумма задолженности (" + мНаименованиеВалютыУпрУчета + ")");

мКоличествоВыведенныхСтрокЗаголовка = 0;
мПоказатели = Новый СписокЗначений;

НП = Новый НастройкаПериода;

ПоляНастройкиОтбора = ОтборМенеджер.ПолучитьДоступныеПоля();
ПолеНастройки = ПоляНастройкиОтбора.Добавить("Менеджер", "Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
ПолеНастройки.Отбор = Истина;
ОтборМенеджер.УстановитьДоступныеПоля(ПоляНастройкиОтбора);
ОтборМенеджер.Добавить("Менеджер");
#КонецЕсли
