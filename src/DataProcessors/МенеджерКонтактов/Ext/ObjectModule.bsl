
// КАЛЕНДАРЬ

Перем мСписокКлючейСтруктурыСобытий Экспорт;

// Список представлений отборов
Перем мСтруктураПредставленийОтборов Экспорт;

// Список отборов
Перем мСписокОтборов Экспорт;

// ПОЧТА

Перем мПоследняяДатаОбновленияРассмотренностиПисем Экспорт;

// Переменная содержит список доступных учетных для создания писем
Перем мДоступныеУчетныеЗаписи Экспорт;

// Переменная содержит структуру с данными о доступе пользователя к ученым записям
// и о предопределенных папках учетных записей
Перем мСтруктураДоступныхУчетныхЗаписей Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Входящие" для учетной записи
Перем мСоответствияГруппВходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Исходящие" для учетной записи
Перем мСоответствияГруппИсходящие Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Удаленные" для учетной записи
Перем мСоответствияГруппУдаленные Экспорт;

// Переменная содержит соответствие учетной записи и предопределенной
// группы писем "Черновики" для учетной записи
Перем мСоответствияГруппЧерновики Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества нерассмотренных писем в этой группе
Перем мСтатистикаРассмотренностиПисем Экспорт;

// Переменная содержит соответствие группы писем электронной почты
// и количества сохраненных писем в этой группе
Перем мСтатистикаСохраненныхПисем     Экспорт;

// Переменная содержит соответствие предмета классификации писем
// и количества нерассмотренных писем данного предмета
Перем мСтатистикаРассмотренностиПисемПоПредметам Экспорт;

// Признак отображения списка предметов электронных писем в форме
Перем мОтображатьСписокПредметов Экспорт;

// Признак отображение рассмотренности писем только по текущему пользователю
Перем мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю Экспорт;

// Переменные, используемые при создании физлица по переписке
Перем Фамилия;
Перем Имя;
Перем Отчество;
Перем ДатаРождения;
Перем ИНН;
Перем СерияДокумента;
Перем ВидДокументаУдостоверяющегоЛичность;
Перем НомерДокумента;
Перем ДатаВыдачиДокумента;
Перем КемВыданДокумент;
Перем КодПодразделенияДокумента;
Перем Гражданство;
Перем СемейноеПоложение;
Перем ОтношениеКВоинскойОбязанности;
Перем ОтношениеКВоинскомуУчету;
Перем Состав;
Перем НомерКомандыПартии;
Перем СоответствиеНачалоИОкончениеРабочегоДняПользователя;

// КАЛЕНДАРЬ

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция мОпределитьНачалоИОкончениеРабочегоДняПользователя(Пользователь, РабочаяДата) Экспорт
	
	НайденнаяСтруктура = СоответствиеНачалоИОкончениеРабочегоДняПользователя.Получить(РабочаяДата);
	Если НайденнаяСтруктура <> Неопределено Тогда
		Возврат НайденнаяСтруктура;
	КонецЕсли;
	
	СтруктураВозврата = УправлениеКонтактами.ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	СоответствиеНачалоИОкончениеРабочегоДняПользователя.Вставить(РабочаяДата,СтруктураВозврата);
	
	Возврат СтруктураВозврата;
	
КонецФункции // УправлениеКонтактами.ОпределитьНачалоИОкончениеРабочегоДняПользователя()

// Функция возвращает строку вида сравнения
// Параметры:
//       ВидСравненияПараметр - Вид сравнения для которого необходимо получить строку
//       ИмяПараметраВЗапросе - Строка, имя параметра в запросе
// Возвращаемое значение:
//       Строка - строка вида сравнения
Функция ПолучитьСтокуВидаСравнения(ВидСравненияПараметр,ИмяПараметраВЗапросе)
	Перем ВидСравненияПользователь;
	Если ВидСравненияПараметр = ВидСравнения.Равно
		ИЛИ ВидСравненияПараметр = ВидСравнения.ВСписке Тогда
		ВидСравненияПользователь = " В (&" + ИмяПараметраВЗапросе + ") ";
	ИначеЕсли ВидСравненияПараметр = ВидСравнения.НеРавно
		ИЛИ ВидСравненияПараметр = ВидСравнения.НеВСписке Тогда
		ВидСравненияПользователь = " НЕ В (&" + ИмяПараметраВЗапросе + ") ";
	ИначеЕсли ВидСравненияПараметр = ВидСравнения.ВСпискеПоИерархии
		ИЛИ ВидСравненияПараметр = ВидСравнения.ВИерархии Тогда
		ВидСравненияПользователь = " В ИЕРАРХИИ (&" + ИмяПараметраВЗапросе + ") ";
	ИначеЕсли ВидСравненияПараметр = ВидСравнения.НеВСпискеПоИерархии
		ИЛИ ВидСравненияПараметр = ВидСравнения.НеВИерархии Тогда
		ВидСравненияПользователь = " НЕ В ИЕРАРХИИ (&" + ИмяПараметраВЗапросе + ") ";
	Иначе
		ВидСравненияПользователь = " В (&" + ИмяПараметраВЗапросе + ") ";
	КонецЕсли;
	возврат ВидСравненияПользователь;
КонецФункции //ПолучитьСтокуВидаСравнения()

Процедура ОчиститьСоответствиеНачалоИОкончаниеРабочегоДняПользователя() Экспорт 

	СоответствиеНачалоИОкончениеРабочегоДняПользователя = Новый Соответствие;

КонецПроцедуры

// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВидОтбора - ВидОтбора
// ЗначениеОтбора - Значение отбора запроса
// 
// Возвращаемое значение 
//  Строка для запроса
Функция ВозвратитьСтрокуВидаОтбора(ВидОтбора, ЗначениеОтбора)
	
	СтрокаВозврата = "";
	Если ВидОтбора = ВидСравнения.Равно Тогда
		СтрокаВозврата = Строка("= "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = Строка("<> "+ЗначениеОтбора);
	ИначеЕсли ВидОтбора = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = Строка("В ("+ЗначениеОтбора+")");
	ИначеЕсли ВидОтбора = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = Строка("НЕ В ("+ЗначениеОтбора+")");
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции // ВозвратитьСтрокуВидаОтбора()

// Функции формирования запросов для ПРОЦЕДУРЫ "ЗаполнитьСобытия"
//
// Функция возвращает текст запроса формирования событий календаря
// 
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаСобытийКалендаря()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие           КАК Документ,
	|	СобытияКалендаряПользователяОбобщенные.ВидСобытия        КАК ВидОперации,
	|	0                                                        КАК Законченность,
	|	&ПустаяВалюта                                            КАК ВалютаДокумента,
	|	0                                                        КАК КурсВзаиморасчетов,
	|	0                                                        КАК КратностьВзаиморасчетов,
	|	0                                                        КАК СуммаДокумента,
	|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия  КАК СостояниеСобытия,
	|	СобытияКалендаряПользователяОбобщенные.Важность          КАК Важность,
	|	СобытияКалендаряПользователяОбобщенные.ТипСобытия        КАК ТипСобытия,
	|	СобытияКалендаряПользователяОбобщенные.ОписаниеСобытия   КАК ОписаниеСобытия,
	|	СобытияКалендаряПользователяОбобщенные.Контрагент        КАК Контрагент,
	|	СобытияКалендаряПользователяОбобщенные.Дата              КАК Дата,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия КАК НачалоСобытия,
	|	""Событие""                                              КАК ПредставлениеДокумента,
	|	СобытияКалендаряПользователяОбобщенные.Событие.Номер     КАК Номер,
	|	NULL                                                     КАК ДатаПоступленияОтгрузки,
	|	NULL                                                     КАК ДатаОплаты,
	|	NULL                                                     КАК Склад,
	|	NULL                                                     КАК СтруктурнаяЕдиница,
	|	0                                                        КАК ИтогКоличествоТЧ
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.СостояниеСобытия = &СостояниеЗапланировано
	|	И СобытияКалендаряПользователяОбобщенные.Пользователь $ВидСравненияПользователь$
	|	И (СобытияКалендаряПользователяОбобщенные.Событие.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И СобытияКалендаряПользователяОбобщенные.Событие.Дата <= &ДатаКон","") + ")
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст запроса формирования оплат заказов покупателей
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаОплатаЗаказовПокупателей()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиОстатки.Сделка                         КАК Документ,
	|	&ВидЗаказПокупателяОплата                                   КАК ВидОперации,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток     КАК Законченность,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента         КАК ВалютаДокумента,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента          КАК СуммаДокумента,
	|	NULL                                                        КАК СостояниеСобытия,
	|	NULL                                                        КАК Важность,
	|	NULL                                                        КАК ТипСобытия,
	|	NULL                                                        КАК ОписаниеСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент              КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Дата                    КАК Дата,
	|	NULL                                                        КАК НачалоСобытия,
	|	""Заказ покупателя""                                        КАК ПредставлениеДокумента,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Номер                   КАК Номер,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОтгрузки            КАК ДатаПоступленияОтгрузки,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты              КАК ДатаОплаты,
	|	РасчетыСКонтрагентамиОстатки.Сделка.СкладГруппа             КАК Склад,
	|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
	|	0 КАК ИтогКоличествоТЧ
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата) КАК ЗаказыПокупателейОстатки
	|ПО
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя = РасчетыСКонтрагентамиОстатки.Сделка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Обороты КАК ЗаказыПокупателейОбороты
	|	ГДЕ
	|		ЗаказыПокупателейОбороты.КоличествоРасход > 0
	|	) КАК ОтгрузкиПоЗаказам
	|ПО
	|	ОтгрузкиПоЗаказам.ЗаказПокупателя = РасчетыСКонтрагентамиОстатки.Сделка
	|ГДЕ 
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И (РасчетыСКонтрагентамиОстатки.Сделка.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.Дата <= &ДатаКон","") + ")
	|	И РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст запроса формирования отгрузки заказов покупателей
// 
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаОтгрузкаЗаказовПокупателей()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя                         КАК Документ,
	|	&ВидЗаказПокупателяОтгрузка                                      КАК ВидОперации,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток                       КАК Законченность,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ВалютаДокумента         КАК ВалютаДокумента,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента          КАК СуммаДокумента,
	|	NULL                                                             КАК СостояниеСобытия,
	|	NULL                                                             КАК Важность,
	|	NULL                                                             КАК ТипСобытия,
	|	NULL                                                             КАК ОписаниеСобытия,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент              КАК Контрагент,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата                    КАК Дата,
	|	NULL                                                             КАК НачалоСобытия,
	|	""Заказ покупателя""                                             КАК ПредставлениеДокумента,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер                   КАК Номер,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки            КАК ДатаПоступленияОтгрузки,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОплаты              КАК ДатаОплаты,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СкладГруппа             КАК Склад,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
	|	СУММА(ВЫБОР КОГДА ДокументЗаказПокупателяТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяТовары.Количество КОНЕЦ
	|	    + ВЫБОР КОГДА ДокументЗаказПокупателяВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяВозвратнаяТара.Количество КОНЕЦ
	|	    + ВЫБОР КОГДА ДокументЗаказПокупателяУслуги.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПокупателяУслуги.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) КАК ЗаказыПокупателейОстатки	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата) КАК РасчетыСКонтрагентамиОстатки
	|ПО
	|	РасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		Сумма(ЗаказПокупателяТовары.Количество) КАК Количество,
	|		ЗаказПокупателяТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателяТовары.Ссылка
	|	) КАК ДокументЗаказПокупателяТовары
	|	ПО ДокументЗаказПокупателяТовары.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		Сумма(ЗаказПокупателяВозвратнаяТара.Количество) КАК Количество,
	|		ЗаказПокупателяВозвратнаяТара.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПокупателя.ВозвратнаяТара КАК ЗаказПокупателяВозвратнаяТара
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателяВозвратнаяТара.Ссылка
	|	) КАК ДокументЗаказПокупателяВозвратнаяТара
	|	ПО ДокументЗаказПокупателяВозвратнаяТара.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		Сумма(ЗаказПокупателяУслуги.Количество) КАК Количество,
	|		ЗаказПокупателяУслуги.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателяУслуги.Ссылка
	|	) КАК ДокументЗаказПокупателяУслуги
	|	ПО ДокументЗаказПокупателяУслуги.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасчетыСКонтрагентамиОбороты.Сделка КАК ОжидаемыйПлатеж
	|	ИЗ
	|		РегистрНакопления.РасчетыСКонтрагентами.Обороты КАК РасчетыСКонтрагентамиОбороты
	|	ГДЕ
	|		РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход <> 0
	|	) КАК ПлатежиПоСделкам
	|ПО
	|	ПлатежиПоСделкам.ОжидаемыйПлатеж = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|ГДЕ 
	|	ЗаказыПокупателейОстатки.КоличествоОстаток <> 0
	|	И ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный $ВидСравненияПользователь$
	|	И (ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата <= &ДатаКон","") + ")
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст группировки запроса формирования отгрузки заказов покупателей
// 
// Возвращаемое значение 
//  Строка - часть запроса с текстом группировки
//
Функция ВозвратитьТекстГруппировкиОтгрузкаЗаказовПокупателей()
	
	ТекстГруппировки = "
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	&ВидЗаказПокупателяОтгрузка,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ВалютаДокумента,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КурсВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КратностьВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента,
	|	NULL,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата,
	|	""Заказ покупателя"",
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Номер,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОплаты,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СкладГруппа,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.СтруктурнаяЕдиница
	|";
		
	Возврат ТекстГруппировки;
	
КонецФункции

// Функция возвращает текст запроса формирования оплат заказов поставщикам
// 
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаОплатаЗаказовПоставщикам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиОстатки.Сделка                         КАК Документ,
	|	&ВидЗаказПоставщикуОплата                                   КАК ВидОперации,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток     КАК Законченность,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ВалютаДокумента         КАК ВалютаДокумента,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.Сделка.СуммаДокумента          КАК СуммаДокумента,
	|	NULL                                                        КАК СостояниеСобытия,
	|	NULL                                                        КАК Важность,
	|	NULL                                                        КАК ТипСобытия,
	|	NULL                                                        КАК ОписаниеСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент              КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Дата                    КАК Дата,
	|	NULL                                                        КАК НачалоСобытия,
	|	""Заказ поставщику""                                        КАК ПредставлениеДокумента,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Номер                   КАК Номер,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаПоступления         КАК ДатаПоступленияОтгрузки,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты              КАК ДатаОплаты,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Склад                   КАК Склад,
	|	РасчетыСКонтрагентамиОстатки.Сделка.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
	|	0 КАК ИтогКоличествоТЧ
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК РасчетыСКонтрагентамиОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата) КАК ЗаказыПоставщикамОстатки
	|ПО
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику = РасчетыСКонтрагентамиОстатки.Сделка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЗаказыПоставщикамОбороты.ЗаказПоставщику КАК ЗаказПоставщику
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Обороты КАК ЗаказыПоставщикамОбороты
	|	ГДЕ
	|		ЗаказыПоставщикамОбороты.КоличествоРасход > 0
	|	) КАК ОтгрузкиПоЗаказам
	|ПО
	|	ОтгрузкиПоЗаказам.ЗаказПоставщику = РасчетыСКонтрагентамиОстатки.Сделка
	|ГДЕ 
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|	И (РасчетыСКонтрагентамиОстатки.Сделка.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.Дата <= &ДатаКон","") + ")
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст запроса формирования отгрузки заказов поставщикам
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаОтгрузкаЗаказовПоставщикам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                         КАК Документ,
	|	&ВидЗаказПоставщикуПоступление                                   КАК ВидОперации,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток                       КАК Законченность,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ВалютаДокумента         КАК ВалютаДокумента,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КурсВзаиморасчетов      КАК КурсВзаиморасчетов,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СуммаДокумента          КАК СуммаДокумента,
	|	NULL                                                             КАК СостояниеСобытия,
	|	NULL                                                             КАК Важность,
	|	NULL                                                             КАК ТипСобытия,
	|	NULL                                                             КАК ОписаниеСобытия,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент              КАК Контрагент,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата                    КАК Дата,
	|	NULL                                                             КАК НачалоСобытия,
	|	""Заказ поставщику""                                             КАК ПредставлениеДокумента,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер                   КАК Номер,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления         КАК ДатаПоступленияОтгрузки,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаОплаты              КАК ДатаОплаты,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад                   КАК Склад,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СтруктурнаяЕдиница      КАК СтруктурнаяЕдиница,
	|	СУММА(ВЫБОР КОГДА ДокументЗаказПоставщикуТовары.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуТовары.Количество КОНЕЦ
	|	    + ВЫБОР КОГДА ДокументЗаказПоставщикуВозвратнаяТара.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуВозвратнаяТара.Количество КОНЕЦ
	|	    + ВЫБОР КОГДА ДокументЗаказПоставщикуУслуги.Количество ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ДокументЗаказПоставщикуУслуги.Количество КОНЕЦ) КАК ИтогКоличествоТЧ
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата) КАК РасчетыСКонтрагентамиОстатки
	|ПО
	|	РасчетыСКонтрагентамиОстатки.Сделка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		Сумма(ЗаказПоставщикуТовары.Количество) КАК Количество,
	|		ЗаказПоставщикуТовары.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщикуТовары.Ссылка
	|	) КАК ДокументЗаказПоставщикуТовары
	|	ПО ДокументЗаказПоставщикуТовары.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		Сумма(ЗаказПоставщикуВозвратнаяТара.Количество) КАК Количество,
	|		ЗаказПоставщикуВозвратнаяТара.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщикуВозвратнаяТара
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщикуВозвратнаяТара.Ссылка
	|	) КАК ДокументЗаказПоставщикуВозвратнаяТара
	|	ПО ДокументЗаказПоставщикуВозвратнаяТара.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		Сумма(ЗаказПоставщикуУслуги.Количество) КАК Количество,
	|		ЗаказПоставщикуУслуги.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщикуУслуги
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщикуУслуги.Ссылка
	|	) КАК ДокументЗаказПоставщикуУслуги
	|	ПО ДокументЗаказПоставщикуУслуги.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасчетыСКонтрагентамиОбороты.Сделка КАК ОжидаемыйПлатеж
	|	ИЗ
	|		РегистрНакопления.РасчетыСКонтрагентами.Обороты КАК РасчетыСКонтрагентамиОбороты
	|	ГДЕ
	|		РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход <> 0
	|	) КАК ПлатежиПоСделкам
	|ПО
	|	ПлатежиПоСделкам.ОжидаемыйПлатеж = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|ГДЕ 
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток <> 0
	|	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Ответственный $ВидСравненияПользователь$
	|	И (ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата <= &ДатаКон","") + ")
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст группировки запроса формирования отгрузки заказов поставщикам
//
// Возвращаемое значение 
//  Строка - часть запроса с текстом группировки
//
Функция ВозвратитьТекстГруппировкиОтгрузкаЗаказовПоставщикам()
	
	ТекстГруппировки = "
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
	|	&ВидЗаказПоставщикуПоступление,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ВалютаДокумента,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КурсВзаиморасчетов,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КратностьВзаиморасчетов,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СуммаДокумента,
	|	NULL,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
	|	""Заказ поставщику"",
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаОплаты,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.СтруктурнаяЕдиница
	|";
		
	Возврат ТекстГруппировки;
					
КонецФункции

// ПРОЦЕДУРА "ЗаполнитьСобытия" заполняет табличную часть обработки ЗаказыСобытия.
// 
// Параметры
//  НЕТ
// 
// Возвращаемое значение 
//  НЕТ
Процедура ЗаполнитьСобытия(ОтображатьЗаказыПокупателя, ОтображатьЗаказыПоставщику) Экспорт
	
	Перем Отбор, ВидСравненияПользователь;
	
	МассивТекстовЗапросов = Новый Массив;
	
	# Если Клиент Тогда
		Состояние("Выполняется заполнение событий списка ...");
	# КонецЕсли
	
	ОтборКонтрагент     = СтруктураОтборов.Получить("Контрагент");
	ОтборКонтактноеЛицо = СтруктураОтборов.Получить("КонтактноеЛицо");
	ОтборПользователь   = СтруктураОтборов.Получить("Пользователь");
	
	ВидСравненияПользователь = ПолучитьСтокуВидаСравнения(ОтборПользователь[0], "ПользовательКалендаря");
	
	Для ШагЦикла = 1 ПО (1 + (Число(ОтображатьЗаказыПокупателя) * 2) + (Число(ОтображатьЗаказыПоставщику) * 2)) Цикл
		
		СтруктураЗапроса = Новый Структура;
		СтруктураПараметров = Новый Структура;
		
		Если ШагЦикла = 1 Тогда
			
			ТекстЗапроса = ВозвратитьТекстЗапросаСобытийКалендаря();
			Если ОтборКонтактноеЛицо <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо " + ВозвратитьСтрокуВидаОтбора(ОтборКонтактноеЛицо[0],"&ВыбКонтактноеЛицо") + "
				|";
				СтруктураПараметров.Вставить("ВыбКонтактноеЛицо",ОтборКонтактноеЛицо[1]);
			КонецЕсли;
			
			Если ОтборКонтрагент <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И СобытияКалендаряПользователяОбобщенные.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
			КонецЕсли;
						
		ИначеЕсли ШагЦикла = 2 Тогда
			
			Если ОтображатьЗаказыПокупателя Тогда
				
				ТекстЗапроса = ВозвратитьТекстЗапросаОплатаЗаказовПокупателей();
				ТекстГруппировки = "";
				Если ОтборКонтрагент <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И РасчетыСКонтрагентамиОстатки.Сделка.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
					|";
					СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				КонецЕсли;
				
			Иначе
				
				ТекстЗапроса = ВозвратитьТекстЗапросаОплатаЗаказовПоставщикам();
				ТекстГруппировки = "";
				Если ОтборКонтрагент <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И РасчетыСКонтрагентамиОстатки.Сделка.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
					|";
					СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				КонецЕсли;
				
			КонецЕсли; // ОтображатьЗаказыПокупателя
			
			ТекстЗапроса = ТекстЗапроса + ТекстГруппировки;
			
		ИначеЕсли ШагЦикла = 3 Тогда
			
			Если ОтображатьЗаказыПокупателя Тогда
				
				ТекстЗапроса = ВозвратитьТекстЗапросаОтгрузкаЗаказовПокупателей();
				ТекстГруппировки = ВозвратитьТекстГруппировкиОтгрузкаЗаказовПокупателей();
				Если ОтборКонтрагент <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
					|";
					СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				КонецЕсли;
				
			Иначе
				
				ТекстЗапроса = ВозвратитьТекстЗапросаОтгрузкаЗаказовПоставщикам();
				ТекстГруппировки = ВозвратитьТекстГруппировкиОтгрузкаЗаказовПоставщикам();
				Если ОтборКонтрагент <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
					|";
					СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
				КонецЕсли;
			
			КонецЕсли; // ОтображатьЗаказыПокупателя
			
			ТекстЗапроса = ТекстЗапроса + ТекстГруппировки;
			
		ИначеЕсли ШагЦикла = 4 Тогда
			
			ТекстЗапроса = ВозвратитьТекстЗапросаОплатаЗаказовПоставщикам();
			ТекстГруппировки = "";
			Если ОтборКонтрагент <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И РасчетыСКонтрагентамиОстатки.Сделка.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ТекстГруппировки;
			
		ИначеЕсли ШагЦикла = 5 Тогда
			
			ТекстЗапроса = ВозвратитьТекстЗапросаОтгрузкаЗаказовПоставщикам();
			ТекстГруппировки = ВозвратитьТекстГруппировкиОтгрузкаЗаказовПоставщикам();
			Если ОтборКонтрагент <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент " + ВозвратитьСтрокуВидаОтбора(ОтборКонтрагент[0],"&ВыбКонтрагент") + "
				|";
				СтруктураПараметров.Вставить("ВыбКонтрагент",ОтборКонтрагент[1]);
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ТекстГруппировки;
			
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$ВидСравненияПользователь$", ВидСравненияПользователь);
		СтруктураЗапроса.Вставить("ТекстЗапроса", ТекстЗапроса);
		СтруктураЗапроса.Вставить("ПараметрыЗапроса", СтруктураПараметров);
		МассивТекстовЗапросов.Добавить(СтруктураЗапроса);
		
	КонецЦикла;
	
	// Теперь выполним все запросы и запишем информацию в ТЧ

	ЗаказыСобытия.Очистить();
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПользовательКалендаря"        , ПользовательКалендаря);
	Запрос.УстановитьПараметр("ДатаНач"                      , НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон"                      , ?(ДатаКон <> '00010101000000', КонецДня(ДатаКон), ДатаКон));
	Запрос.УстановитьПараметр("ТекущаяДата"                  , ТекущаяДата());
	Запрос.УстановитьПараметр("СостояниеЗапланировано"       , Перечисления.СостоянияСобытий.Запланировано);
	Запрос.УстановитьПараметр("ВидЗаказПокупателяОплата"     , Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу);
	Запрос.УстановитьПараметр("ВидЗаказПокупателяОтгрузка"   , Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу);
	Запрос.УстановитьПараметр("ВидЗаказПоставщикуОплата"     , Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу);
	Запрос.УстановитьПараметр("ВидЗаказПоставщикуПоступление", Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу);
	Запрос.УстановитьПараметр("ПустаяВалюта"                 , Справочники.Валюты.ПустаяСсылка());
	
	ТекЗапрос = 0;
	ВсегоЗапросов = МассивТекстовЗапросов.Количество();
	Для каждого ЭлементМассива Из МассивТекстовЗапросов Цикл
		
		ТекЗапрос = ТекЗапрос + 1;
		# Если Клиент Тогда
		Состояние("Выполняется заполнение событий списка ...");
		# КонецЕсли
		
		ТекстЗапроса     = Неопределено;
		ПараметрыЗапроса = Неопределено;
		
		ЭлементМассива.Свойство("ТекстЗапроса"    , ТекстЗапроса);
		ЭлементМассива.Свойство("ПараметрыЗапроса", ПараметрыЗапроса);
		
		Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли; 
		
		Запрос.Текст = ТекстЗапроса;
		Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
			Для каждого ЭлементСтруктуры Из ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла; 
		КонецЕсли; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЧ = ЗаказыСобытия.Добавить();
			
			СтрокаТЧ.Документ                = Выборка.Документ;
			СтрокаТЧ.ВидОперации             = Выборка.ВидОперации;
			СтрокаТЧ.Законченность           = Выборка.Законченность;
			СтрокаТЧ.ВалютаДокумента         = Выборка.ВалютаДокумента;
			СтрокаТЧ.КурсВзаиморасчетов      = Выборка.КурсВзаиморасчетов;
			СтрокаТЧ.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
			СтрокаТЧ.СуммаДокумента          = Выборка.СуммаДокумента;
			СтрокаТЧ.СостояниеСобытия        = Выборка.СостояниеСобытия;
			СтрокаТЧ.Важность                = Выборка.Важность;
			СтрокаТЧ.ТипСобытия              = Выборка.ТипСобытия;
			СтрокаТЧ.ОписаниеСобытия         = Выборка.ОписаниеСобытия;
			СтрокаТЧ.Дата                    = Выборка.Дата;
			СтрокаТЧ.НачалоСобытия           = Выборка.НачалоСобытия;
			СтрокаТЧ.ПредставлениеДокумента  = Выборка.ПредставлениеДокумента;
			СтрокаТЧ.Номер                   = Выборка.Номер;
			СтрокаТЧ.Контрагент              = Выборка.Контрагент;
			СтрокаТЧ.ДатаПоступленияОтгрузки = Выборка.ДатаПоступленияОтгрузки;
			СтрокаТЧ.ДатаОплаты              = Выборка.ДатаОплаты;
			СтрокаТЧ.Склад                   = Выборка.Склад;
			СтрокаТЧ.СтруктурнаяЕдиница      = Выборка.СтруктурнаяЕдиница;
			СтрокаТЧ.ИтогКоличествоТЧ        = Выборка.ИтогКоличествоТЧ;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Функции формирования запроса для ПРОЦЕДУР "СобратьДокументыМесяца" и "СобратьДокументыНедели"
//
// Функция возвращает текст запроса формирования заказов покупателей
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаЗаказовПокупателей()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя                           КАК Документ,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки              КАК Дата,
	|	&ЗаказПокупателяОтгрузка                                           КАК ТипЗаказа,
	|	&ПустаяДата                                                        КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                                        КАК ДатаКонцаСобытия,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент                КАК Контрагент,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ТекущаяДата, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.КоличествоОстаток <> 0
	|	И (ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки <= &ДатаКон","") + ")
	|	И ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный $ВидСравненияПользователь$
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка                           КАК Документ,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты                КАК Дата,
	|	&ЗаказПокупателяОплата                                        КАК ТипЗаказа,
	|	&ПустаяДата                                                   КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                                   КАК ДатаКонцаСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент                КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И (РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты <= &ДатаКон","") + ")
	|	И РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст запроса формирования заказов поставщикам
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаЗаказовПоставщикам(ВыбиратьРазрешенные)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ " + ?(ВыбиратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                            КАК Документ,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления            КАК Дата,
	|	&ЗаказПоставщикуПоступление                                         КАК ТипЗаказа,
	|	&ПустаяДата                                                         КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                                         КАК ДатаКонцаСобытия,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент                 КАК Контрагент,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.КонтактноеЛицоКонтрагента  КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, ЗаказПоставщику ССЫЛКА Документ.ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток <> 0
	|	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Ответственный $ВидСравненияПользователь$
	|	И (ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ДатаКон","") + ")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка                           КАК Документ,
	|	РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты                КАК Дата,
	|	&ЗаказПоставщикуОплата                                        КАК ТипЗаказа,
	|	&ПустаяДата                                                   КАК ДатаНачалаСобытия,
	|	&ПустаяДата                                                   КАК ДатаКонцаСобытия,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Контрагент                КАК Контрагент,
	|	РасчетыСКонтрагентамиОстатки.Сделка.КонтактноеЛицоКонтрагента КАК КонтактноеЛицо
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ТекущаяДата, Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК РасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0
	|	И РасчетыСКонтрагентамиОстатки.Сделка.Ответственный $ВидСравненияПользователь$
	|	И (РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты >= &ДатаНач" + ?(ДатаКон <> Дата("000101010000")," И РасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты <= &ДатаКон","") + ")
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст запроса формирования событий
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаСобытийКалендаряОбобщенных(ВыбиратьРазрешенные)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ " + ?(ВыбиратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + " РАЗЛИЧНЫЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие            КАК Документ,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия  КАК Дата,
	|	&ПустойТипЗаказа                                          КАК ТипЗаказа,
	|	СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия  КАК ДатаНачалаСобытия,
	|	СобытияКалендаряПользователяОбобщенные.ДатаКонцаСобытия   КАК ДатаКонцаСобытия,
	|	СобытияКалендаряПользователяОбобщенные.Контрагент         КАК Контрагент,
	|	СобытияКалендаряПользователяОбобщенные.КонтактноеЛицо     КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные	
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Пользователь $ВидСравненияПользователь$
	|	И СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия <= &ДатаКон
	|	И СобытияКалендаряПользователяОбобщенные.ДатаНачалаСобытия >= &ДатаНач
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// ПРОЦЕДУРА "СобратьДокументыМесяца" заполняет табличную часть ДанныеМесяца
// 
// Параметры
//  ОтображатьЗаказыПокупателя - булево
//  ОтображатьЗаказыПоставщику - булево 
//  ТипСобытияКалендаря - тип событий, которые надо отображать
// 
// Возвращаемое значение 
//  НЕТ
Процедура СобратьДокументыМесяца(ОтображатьЗапланированныеСобытия = Ложь, ТипСобытияКалендаря, ОтображатьЗаказыПокупателя, ОтображатьЗаказыПоставщику) Экспорт
	Перем ВидСравненияПользователь;
	
	# Если Клиент Тогда
	Состояние("Выполняется заполнение документов месяца ...");
	# КонецЕсли
	
	
	ОтборПользователь = СтруктураОтборов.Получить("Пользователь");
	ВидСравненияПользователь = ПолучитьСтокуВидаСравнения(ОтборПользователь[0], "ПользовательКалендаря");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	Если ОтображатьЗаказыПокупателя Тогда
		
		Запрос.Текст = Запрос.Текст + ВозвратитьТекстЗапросаЗаказовПокупателей() + "
		|ОБЪЕДИНИТЬ" + ?(ОтображатьЗаказыПоставщику, " ВСЕ", "") + "
		|";
				
	КонецЕсли;
	
	Если ОтображатьЗаказыПоставщику Тогда
		
		Запрос.Текст = Запрос.Текст + ВозвратитьТекстЗапросаЗаказовПоставщикам(НЕ ОтображатьЗаказыПокупателя) + "
		|ОБЪЕДИНИТЬ
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ВозвратитьТекстЗапросаСобытийКалендаряОбобщенных(НЕ(ОтображатьЗаказыПокупателя ИЛИ ОтображатьЗаказыПоставщику));
	
	Если ОтображатьЗапланированныеСобытия Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И СобытияКалендаряПользователяОбобщенные.СостояниеСобытия = &ВыбСостояние
		|";
		Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
		
	КонецЕсли;
	
	Если НЕ ТипСобытияКалендаря.Пустая() Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И СобытияКалендаряПользователяОбобщенные.ТипСобытия = &ВыбТипСобытия
		|";
		Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата"                , '00010101000000');
	Запрос.УстановитьПараметр("ПользовательКалендаря"     , ПользовательКалендаря);
	Запрос.УстановитьПараметр("ДатаКон"                   , КонецНедели(КонецМесяца(ДатаКалендаря)));
	Запрос.УстановитьПараметр("ДатаНач"                   , НачалоНедели(НачалоМесяца(ДатаКалендаря)));
	Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо"      , Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипЗаказа"           , Перечисления.ВидыДействийПоЗаказамПокупателей.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЗаказПокупателяОплата"     , Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу);
	Запрос.УстановитьПараметр("ЗаказПокупателяОтгрузка"   , Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу);
	Запрос.УстановитьПараметр("ЗаказПоставщикуОплата"     , Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПоступление", Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Сортировать("Дата ВОЗР");
	
	ДанныеМесяца.Загрузить(ТаблицаЗапроса);
	
	ДатаНачалаМесяцаЗапроса = НачалоМесяца(ДатаКалендаря);
	
КонецПроцедуры

// Функции формирования запросов для ПРОЦЕДУРЫ "СобратьДокументыНедели"
//
// Функция возвращает текст запроса формирования обобщенных событий календаря пользователя
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаОбобщенныхСобытий(ОперандВидСобытия = "=")
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователя.Событие                           КАК Документ,
	|	СобытияКалендаряПользователя.НомерНачальнойСтроки              КАК НомерНачальнойСтроки,
	|	СобытияКалендаряПользователя.НомерКонечнойСтроки               КАК НомерКонечнойСтроки,
	|	СобытияКалендаряПользователя.ДатаНачалаСобытия                 КАК ДатаНачалаСобытия,
	|	СобытияКалендаряПользователя.ДатаКонцаСобытия                  КАК ДатаКонцаСобытия,
	|	СобытияКалендаряПользователя.Контрагент                        КАК Контрагент,
	|	СобытияКалендаряПользователя.КонтактноеЛицо                    КАК КонтактноеЛицо,
	|	СобытияКалендаряПользователя.ОписаниеСобытия                   КАК ОписаниеСобытия,
	|	СобытияКалендаряПользователя.Важность                          КАК Важность,
	|	СобытияКалендаряПользователя.СостояниеСобытия                  КАК СостояниеСобытия,
	|	СобытияКалендаряПользователя.ТипСобытия                        КАК ТипСобытия,
	|	СобытияКалендаряПользователя.ВидСобытия                        КАК ВидСобытия,
	|	СобытияКалендаряПользователя.КоличествоОдновременныхДокументов КАК КоличествоОдновременныхДокументов
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователя
	|ГДЕ
	|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
	|	И СобытияКалендаряПользователя.Событие <> &ПустоеСобытие
	|	И СобытияКалендаряПользователя.ВидСобытия " + ОперандВидСобытия + " &ПустойВидСобытия
	|	И СобытияКалендаряПользователя.Пользователь $ВидСравненияПользователь$
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст упорядочивания запроса формирования обобщенных событий календаря пользователя
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстУпорядочиванияОбобщенныхСобытий()
	
	ТекстУпорядочивания = "
	|УПОРЯДОЧИТЬ ПО
	|	СобытияКалендаряПользователя.Событие.НачалоСобытия
	|";
		
	Возврат ТекстУпорядочивания;
					
КонецФункции

// Функция возвращает текст запроса формирования событий календаря пользователя
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстЗапросаСобытий()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователя.НомерСтрокиТаблицы  КАК НомерСтрокиТаблицы,
	|	СобытияКалендаряПользователя.ПорядковыйНомерВДне КАК ПорядковыйНомерВДне,
	|	ВЫБОР
	|		КОГДА СобытияКалендаряПользователя.Событие = &ПустоеСобытие
	|		ТОГДА Неопределено
	|		ИНАЧЕ СобытияКалендаряПользователя.Событие
	|		КОНЕЦ                                        КАК Документ
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователя КАК СобытияКалендаряПользователя	
	|ГДЕ
	|	СобытияКалендаряПользователя.Дата = &ДатаДняНедели
	|	И СобытияКалендаряПользователя.Пользователь $ВидСравненияПользователь$
	|";
		
	Возврат ТекстЗапроса;
					
КонецФункции

// Функция возвращает текст упорядочивания запроса формирования событий календаря пользователя
// 
// Возвращаемое значение 
//  Строка запроса
//
Функция ВозвратитьТекстУпорядочиванияСобытий()
	
	ТекстУпорядочивания = "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТаблицы ВОЗР,
	|	ПорядковыйНомерВДне ВОЗР
	|ИТОГИ ПО
	|	НомерСтрокиТаблицы,
	|	ПорядковыйНомерВДне
	|";
		
	Возврат ТекстУпорядочивания;
					
КонецФункции

// ПРОЦЕДУРА "СобратьДокументыНедели" заполняет табличную часть обработки ДанныеНеделиЗаказы и
//  .реквизиты объекта СобытияНедели_День[Х]
// 
// Параметры
//  ОтображатьЗапланированныеСобытия  - булево, отображать запланированные события или все
//  ТипСобытияКалендаря - тип событий, которые надо отображать
// 
// Возвращаемое значение 
//  НЕТ
Процедура СобратьДокументыНедели(ОтображатьЗапланированныеСобытия = Ложь, ТипСобытияКалендаря, ОтображатьЗаказыПокупателя, ОтображатьЗаказыПоставщику, ОтображатьЗанятостьПомещений) Экспорт
	Перем ВидСравненияПользователь;
	# Если Клиент Тогда
	Состояние("Выполняется заполнение документов недели и дня ...");
	# КонецЕсли

	ОтборПользователь = СтруктураОтборов.Получить("Пользователь");
	ВидСравненияПользователь = ПолучитьСтокуВидаСравнения(ОтборПользователь[0], "ТекПользователь");

	Для а = 1 По ?(ОтображатьЗаказыПокупателя ИЛИ ОтображатьЗаказыПоставщику, 7, 8) Цикл
		
		ЭтотОбъект["СобытияНедели_День" + Строка(а)] = Неопределено;
		
		ДатаДняНедели = НачалоДня(НачалоНедели(ДатаКалендаря) + (60*60*24)*а - 1);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ВозвратитьТекстЗапросаОбобщенныхСобытий("<>");
		
		Если ОтображатьЗапланированныеСобытия Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И СобытияКалендаряПользователя.Событие.СостояниеСобытия = &ВыбСостояние
			|";
			Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
			
		КонецЕсли;
		
		Если НЕ ТипСобытияКалендаря.Пустая() Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И СобытияКалендаряПользователя.Событие.ТипСобытия = &ВыбТипСобытия
			|";
			Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + ВозвратитьТекстУпорядочиванияОбобщенныхСобытий();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);
		Запрос.УстановитьПараметр("ДатаДняНедели"    , ДатаДняНедели);
		Запрос.УстановитьПараметр("ПустоеСобытие"    , Документы.Событие.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойВидСобытия" , Перечисления.ВидыСобытий.ПустаяСсылка());
		Запрос.УстановитьПараметр("ТекПользователь"  , ПользовательКалендаря);
		
		РезультатЗапроса = Запрос.Выполнить();

		ТаблицаСобытий = РезультатЗапроса.Выгрузить();
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
		
		ТаблицаСобытий.Колонки.Добавить("НомерНачальнойКолонки", ОписаниеТиповЧисло);
		ТаблицаСобытий.Колонки.Добавить("НомерКонечнойКолонки" , ОписаниеТиповЧисло);
		
		СписокДня = Новый СписокЗначений;
		Для я = 1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокДня.Добавить(НовыйСписок);
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = ВозвратитьТекстЗапросаСобытий();
		
		Если ОтображатьЗапланированныеСобытия Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И СобытияКалендаряПользователя.Событие.СостояниеСобытия = &ВыбСостояние
			|";
			Запрос.УстановитьПараметр("ВыбСостояние", Перечисления.СостоянияСобытий.Запланировано);
			
		КонецЕсли;
		
		Если НЕ ТипСобытияКалендаря.Пустая() Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|	И СобытияКалендаряПользователя.Событие.ТипСобытия = &ВыбТипСобытия
			|";
			Запрос.УстановитьПараметр("ВыбТипСобытия", ТипСобытияКалендаря);
						
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + ВозвратитьТекстУпорядочиванияСобытий();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);
		Запрос.УстановитьПараметр("ПустоеСобытие"  , Документы.Событие.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаДняНедели"  , ДатаДняНедели);
		Запрос.УстановитьПараметр("ТекПользователь", ПользовательКалендаря);
		
		РезультатЗапроса = Запрос.Выполнить();
			
		СоответствиеПорядковогоНомераВДне = Новый Соответствие;
		ПоНесколькимПользователям         = ПользовательКалендаря.Количество() > 1;
		
		ВыборкаСтрокЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиТаблицы");
		Пока ВыборкаСтрокЗапроса.Следующий() Цикл
			СписокЗначенийСтроки = СписокДня[ВыборкаСтрокЗапроса.НомерСтрокиТаблицы - 1].Значение;
			
			// Собираем документы
			ТаблицаДокументов = Новый ТаблицаЗначений;
			ТаблицаДокументов.Колонки.Добавить("Документ");
			ТаблицаДокументов.Колонки.Добавить("ПорядковыйНомерВДне");
			
			ВыборкаПолейЗапроса = ВыборкаСтрокЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПорядковыйНомерВДне");
			Пока ВыборкаПолейЗапроса.Следующий() Цикл
				КонечнаяВыборка = ВыборкаПолейЗапроса.Выбрать();
				Пока КонечнаяВыборка.Следующий() Цикл
					Если КонечнаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
						
						ПорядковыйНомерВДне = СоответствиеПорядковогоНомераВДне.Получить(КонечнаяВыборка.Документ);
						
						СтрокаТаблицы = ТаблицаДокументов.Добавить();
						СтрокаТаблицы.Документ            = КонечнаяВыборка.Документ;
						СтрокаТаблицы.ПорядковыйНомерВДне = ?(ПорядковыйНомерВДне=Неопределено,?(ПоНесколькимПользователям,0,ВыборкаПолейЗапроса.ПорядковыйНомерВДне),ПорядковыйНомерВДне);
						
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
			
			// если по нескольким пользователям - сортируем так, чтобы в начале следовали документы с уже установленными номерами (документы были в пред. строках),
			// а потом - с новыми 
			Если ПоНесколькимПользователям Тогда
				ТаблицаДокументов.Сортировать("ПорядковыйНомерВДне УБЫВ, Документ ВОЗР");
			КонецЕсли;
			
			Смещение = 0;
			
			Для каждого ДокументИзТаблицы из ТаблицаДокументов Цикл
				
				ПорядковыйНомерВДне = СоответствиеПорядковогоНомераВДне.Получить(ДокументИзТаблицы.Документ);
				Если ПорядковыйНомерВДне = Неопределено Тогда
					ПорядковыйНомерВДне = ?(ПоНесколькимПользователям,1,ДокументИзТаблицы.ПорядковыйНомерВДне);
				КонецЕсли;
				
				Если СписокЗначенийСтроки.Количество() < ПорядковыйНомерВДне Тогда
					Для б = СписокЗначенийСтроки.Количество() + 1 По ПорядковыйНомерВДне Цикл
						СписокЗначенийСтроки.Добавить(Неопределено);
					КонецЦикла; 
				КонецЕсли; 
				
				// если по нескольким пользователям - необходимо смещение
				Если ПоНесколькимПользователям Тогда
					Пока ЗначениеЗаполнено(СписокЗначенийСтроки[ПорядковыйНомерВДне - 1 + Смещение].Значение) Цикл
						Смещение = Смещение + 1;
						СписокЗначенийСтроки.Добавить(Неопределено);
					КонецЦикла;
				КонецЕсли;
				
				СоответствиеПорядковогоНомераВДне.Вставить(ДокументИзТаблицы.Документ,ПорядковыйНомерВДне+Смещение);
				
				СписокЗначенийСтроки[ПорядковыйНомерВДне - 1 + Смещение].Значение = ДокументИзТаблицы.Документ;
				
			КонецЦикла;
						
		КонецЦикла; 
		
		Если ПоНесколькимПользователям Тогда
			
			// Пересчитываем параметр "Количество одновременных документов"
			Для КАЖДОГО СтрокаТаблицы ИЗ ТаблицаСобытий Цикл
				
				НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
				НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаДняНедели;
				НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
				НаборЗаписейРегистра.Отбор.Событие.Значение           = СтрокаТаблицы.Документ;
				НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
				НаборЗаписейРегистра.Прочитать();
				
				Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
					КоличествоДокументов = СтрокаТаблицы.КоличествоОдновременныхДокументов;
					Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
						ТекСписок = СписокДня[б].Значение;
						Если ТекСписок.Количество() > КоличествоДокументов Тогда
							КоличествоДокументов = ТекСписок.Количество();
						КонецЕсли; 
					КонецЦикла;
					СтрокаТаблицы.КоличествоОдновременныхДокументов = КоличествоДокументов;
				КонецЦикла;
				
			КонецЦикла;
			
        КонецЕсли;
		
		ТаблицаСобытийПоПомещениям = Новый ТаблицаЗначений;
		СписокДняПоПомещениям      = Новый СписокЗначений;
		
		Если ОтображатьЗанятостьПомещений Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = ВозвратитьТекстЗапросаОбобщенныхСобытий() + ВозвратитьТекстУпорядочиванияОбобщенныхСобытий();
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", " = &ТекПользователь");
			Запрос.УстановитьПараметр("ДатаДняНедели"    , ДатаДняНедели);
			Запрос.УстановитьПараметр("ПустоеСобытие"    , Документы.Событие.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойВидСобытия" , Перечисления.ВидыСобытий.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТекПользователь"  , Справочники.Пользователи.ПустаяСсылка());
						
			РезультатЗапроса = Запрос.Выполнить();  
			
			ТаблицаСобытийПоПомещениям = РезультатЗапроса.Выгрузить();
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
			
			ТаблицаСобытийПоПомещениям.Колонки.Добавить("НомерНачальнойКолонки", ОписаниеТиповЧисло);
			ТаблицаСобытийПоПомещениям.Колонки.Добавить("НомерКонечнойКолонки", ОписаниеТиповЧисло);
			
			Для я = 1 По 48 Цикл
				НовыйСписок = Новый СписокЗначений;
				СписокДняПоПомещениям.Добавить(НовыйСписок);
			КонецЦикла; 
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = ВозвратитьТекстЗапросаСобытий() + ВозвратитьТекстУпорядочиванияСобытий();
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", " = &ТекПользователь");
			Запрос.УстановитьПараметр("ПустоеСобытие"   , Документы.Событие.ПустаяСсылка());
			Запрос.УстановитьПараметр("ДатаДняНедели"   , ДатаДняНедели);
			Запрос.УстановитьПараметр("ТекПользователь" , Справочники.Пользователи.ПустаяСсылка());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаСтрокЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтрокиТаблицы");
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				СписокЗначенийСтроки = СписокДняПоПомещениям[ВыборкаСтрокЗапроса.НомерСтрокиТаблицы - 1].Значение;
				
				ВыборкаПолейЗапроса = ВыборкаСтрокЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПорядковыйНомерВДне");
				Пока ВыборкаПолейЗапроса.Следующий() Цикл
					КонечнаяВыборка = ВыборкаПолейЗапроса.Выбрать();
					Пока КонечнаяВыборка.Следующий() Цикл
						Если КонечнаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
							
							Если СписокЗначенийСтроки.Количество() < ВыборкаПолейЗапроса.ПорядковыйНомерВДне Тогда
								Для б = СписокЗначенийСтроки.Количество() + 1 По ВыборкаПолейЗапроса.ПорядковыйНомерВДне Цикл
									СписокЗначенийСтроки.Добавить(Неопределено);
								КонецЦикла; 
							КонецЕсли; 
							
							СписокЗначенийСтроки[ВыборкаПолейЗапроса.ПорядковыйНомерВДне - 1].Значение = КонечнаяВыборка.Документ;
							
							Прервать;
							
						КонецЕсли; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		
		СтруктураЗначенияРеквизита = Новый Структура;
		СтруктураЗначенияРеквизита.Вставить("ТаблицаСобытий", ТаблицаСобытий);
		СтруктураЗначенияРеквизита.Вставить("РасположениеСобытий", СписокДня);
		
		СтруктураЗначенияРеквизита.Вставить("ТаблицаСобытийПоПомещениям", ТаблицаСобытийПоПомещениям);
		СтруктураЗначенияРеквизита.Вставить("РасположениеСобытийПоПомещениям", СписокДняПоПомещениям);
		
		ЭтотОбъект["СобытияНедели_День" + Строка(а)] = СтруктураЗначенияРеквизита;
		
	КонецЦикла;
	
	ДанныеНеделиЗаказы.Очистить();
	
	Если ОтображатьЗаказыПокупателя ИЛИ ОтображатьЗаказыПоставщику Тогда
		
		Запрос = Новый Запрос;
	
		Запрос.Текст = "";
		Если ОтображатьЗаказыПокупателя Тогда
		
			Запрос.Текст = Запрос.Текст + ВозвратитьТекстЗапросаЗаказовПокупателей();
			Если ОтображатьЗаказыПоставщику Тогда
				Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
				
		КонецЕсли;
	
		Если ОтображатьЗаказыПоставщику Тогда
			Запрос.Текст = Запрос.Текст + ВозвратитьТекстЗапросаЗаказовПоставщикам(НЕ ОтображатьЗаказыПокупателя);
		КонецЕсли;
		ВидСравненияПользователь = ПолучитьСтокуВидаСравнения(ОтборПользователь[0], "ПользовательКалендаря");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "$ВидСравненияПользователь$", ВидСравненияПользователь);
		Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
		Запрос.УстановитьПараметр("ПустаяДата"                , '00010101000000');
		Запрос.УстановитьПараметр("ПользовательКалендаря"     , ПользовательКалендаря);
		Запрос.УстановитьПараметр("ДатаКон"                   , КонецНедели(КонецМесяца(ДатаКалендаря)));
		Запрос.УстановитьПараметр("ДатаНач"                   , НачалоНедели(НачалоМесяца(ДатаКалендаря)));
		Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо"      , Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("ЗаказПокупателяОплата"     , Перечисления.ВидыДействийПоЗаказамПокупателей.ОплатаПоЗаказу);
		Запрос.УстановитьПараметр("ЗаказПокупателяОтгрузка"   , Перечисления.ВидыДействийПоЗаказамПокупателей.ОтгрузкаПоЗаказу);
		Запрос.УстановитьПараметр("ЗаказПоставщикуОплата"     , Перечисления.ВидыДействийПоЗаказамПоставщикам.ОплатаПоЗаказу);
		Запрос.УстановитьПараметр("ЗаказПоставщикуПоступление", Перечисления.ВидыДействийПоЗаказамПоставщикам.ПоступлениеПоЗаказу);
	 
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		ТаблицаЗапроса.Сортировать("Дата ВОЗР");
		
		ДанныеНеделиЗаказы.Загрузить(ТаблицаЗапроса);
		
	КонецЕсли;
	
	ДатаНачалаНедели = НачалоНедели(ДатаКалендаря);
	
КонецПроцедуры

// ПОЧТА

// Процедура обновляет данные доступных учетных записей текущего пользователя
// а так же данные о предопределенных группах учетных записей.
//
Процедура ОбновитьДоступныеУчетныеЗаписи() Экспорт
	
	мСоответствияГруппИсходящие.Очистить();
	мСоответствияГруппВходящие.Очистить();
	мСоответствияГруппУдаленные.Очистить();
	мСоответствияГруппЧерновики.Очистить();
	
	мСтруктураДоступныхУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(ПараметрыСеанса.ТекущийПользователь);
	
	мДоступныеУчетныеЗаписи = мСтруктураДоступныхУчетныхЗаписей.Чтение.Скопировать();
	
	мСоответствияГруппИсходящие = мСтруктураДоступныхУчетныхЗаписей.ГруппыИсходящие;
	мСоответствияГруппВходящие  = мСтруктураДоступныхУчетныхЗаписей.ГруппыВходящие;
	мСоответствияГруппУдаленные = мСтруктураДоступныхУчетныхЗаписей.ГруппыУдаленные;
	мСоответствияГруппЧерновики = мСтруктураДоступныхУчетныхЗаписей.ГруппыЧерновики;
	
КонецПроцедуры

// Процедура определяет статистику рассмотренности писем электронной почты
// для быстрого отображения их количества в дереве групп писем электронной почты
// и в списке предметов писем.
//
Процедура СобратьСтатистикуРассмотренностиПисем() Экспорт
	
	мСтатистикаРассмотренностиПисем.Очистить();
	мСтатистикаСохраненныхПисем.Очистить();
	мСтатистикаРассмотренностиПисемПоПредметам.Очистить();
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокУчетныхЗаписей", ?(ЗначениеЗаполнено(УчетнаяЗапись), УчетнаяЗапись, мДоступныеУчетныеЗаписи));
		Запрос.УстановитьПараметр("ТекущаяДата"         , ТекущаяДата());
		
		СписокПользователей = Новый СписокЗначений;
		СписокПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
		СписокПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("СписокПользователей" , СписокПользователей);
		Запрос.УстановитьПараметр("Сохраненное"         , Перечисления.СтатусыПисем.Сохраненное);
		
		мПоследняяДатаОбновленияРассмотренностиПисем = ТекущаяДата();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Группа                 КАК Группа,
		|	" + ?(мОтображатьСписокПредметов, "ВложенныйЗапрос.Предмет        КАК Предмет,", "") + "
		|	КОЛИЧЕСТВО(ВложенныйЗапрос.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА (ЭлектронноеПисьмо.ПометкаУдаления И ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец.ГруппаУдаленные <> ЗНАЧЕНИЕ(Справочник.ГруппыПисемЭлектроннойПочты.ПустаяСсылка))
		|				ТОГДА ГруппаУчетнойЗаписи.Владелец.ГруппаУдаленные
		|			КОГДА (ЭлектронноеПисьмо.СтатусПисьма = &Сохраненное И ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец.ГруппаЧерновики <> ЗНАЧЕНИЕ(Справочник.ГруппыПисемЭлектроннойПочты.ПустаяСсылка))
		|				ТОГДА ГруппаУчетнойЗаписи.Владелец.ГруппаЧерновики
		|			ИНАЧЕ ЭлектронноеПисьмо.ГруппаУчетнойЗаписи
		|		КОНЕЦ КАК Группа,
		|		" + ?(мОтображатьСписокПредметов, "ЭлектронноеПисьмо.Предмет КАК Предмет,", "") + "
		|		ЭлектронноеПисьмо.Ссылка КАК Количество
		|	ИЗ
		|		Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|	
		|	ГДЕ
		|		ЭлектронноеПисьмо.НеРассмотрено
		|		И
		|		ЭлектронноеПисьмо.ГруппаУчетнойЗаписи.Владелец В(&СписокУчетныхЗаписей)
		|		И
		|		ЭлектронноеПисьмо.РассмотретьПосле < &ТекущаяДата
		|	"+?(мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю,"		И ЭлектронноеПисьмо.Ответственный в (&СписокПользователей)","")+"
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	" + ?(мОтображатьСписокПредметов, "ВложенныйЗапрос.Предмет,", "") + "
		|	ВложенныйЗапрос.Группа
		|
		|" + ?(мОтображатьСписокПредметов, "ИТОГИ СУММА(Количество) ПО Группа", "") + "
		|";
		
		Если мОтображатьСписокПредметов Тогда
			ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Группа");
			Пока ВыборкаГрупп.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(ВыборкаГрупп.Группа, ВыборкаГрупп.Количество);
				ВыборкаПредметов = ВыборкаГрупп.Выбрать();
				СоответствиеГруппаПредмет = Новый Соответствие;
				Пока ВыборкаПредметов.Следующий() Цикл
					СоответствиеГруппаПредмет.Вставить(ВыборкаПредметов.Предмет, ВыборкаПредметов.Количество);
				КонецЦикла; 
				Если СоответствиеГруппаПредмет.Количество() > 0 Тогда
					мСтатистикаРассмотренностиПисемПоПредметам.Вставить(ВыборкаГрупп.Группа, СоответствиеГруппаПредмет);
				КонецЕсли; 
			КонецЦикла;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				мСтатистикаРассмотренностиПисем.Вставить(Выборка.Группа, Выборка.Количество);
			КонецЦикла;
		КонецЕсли;
		
		// Соберем статистику наличия писем в папках черновиков
		ВременнаяТаблица = Новый ТаблицаЗначений;
		ВременнаяТаблица.Колонки.Добавить("ГруппаПисем", Новый ОписаниеТипов("СправочникСсылка.ГруппыПисемЭлектроннойПочты"));
		Для каждого Элемент Из мСоответствияГруппЧерновики Цикл
			СтрокаТаблицы = ВременнаяТаблица.Добавить();
			СтрокаТаблицы.ГруппаПисем = Элемент.Значение;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблица ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
		Запрос.УстановитьПараметр("ВнешнийИсточник", ВременнаяТаблица);
		Запрос.УстановитьПараметр("Сохраненное", Перечисления.СтатусыПисем.Сохраненное);
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ.ГруппаПисем КАК ГруппаПисем
		|ИЗ
		|	ВременнаяТаблица КАК ВТ
		|ГДЕ
		|	1 В(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|		ГДЕ
		|			ЭлектронноеПисьмо.СтатусПисьма = &Сохраненное
		|		  И ЭлектронноеПисьмо.УчетнаяЗапись = ВТ.ГруппаПисем.Владелец
		|		  И НЕ (ЭлектронноеПисьмо.ПометкаУдаления И ВТ.ГруппаПисем.Владелец.ГруппаУдаленные <> ЗНАЧЕНИЕ(Справочник.ГруппыПисемЭлектроннойПочты.ПустаяСсылка)))
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			мСтатистикаСохраненныхПисем.Вставить(Выборка.ГруппаПисем, Истина);
		КонецЦикла; 
		
	Иначе
		
		Сообщить("У Вас закрыт доступ к таблицам, обслуживающим электронную почту.");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

# Если Клиент Тогда
Процедура СоздатьОпрос(ТекущийПредмет) Экспорт
	
	ЗапросПоПредмету = Новый Запрос;
	ЗапросПоПредмету.УстановитьПараметр("Предмет", ТекущийПредмет);
	ЗапросПоПредмету.УстановитьПараметр("Отправленное", Перечисления.СтатусыПисем.Отправленное);
	ЗапросПоПредмету.УстановитьПараметр("Полученное", Перечисления.СтатусыПисем.Полученное);
	ЗапросПоПредмету.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыЭлектронныхПисем.Регистратор КАК ЭП,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьРезультатОпроса,
	|	ВЫБОР КОГДА ВложенияЭлектронныхПисем.ИмяФайла ПОДОБНО ""%.xml"" ТОГДА ВложенияЭлектронныхПисем.Хранилище КОНЕЦ КАК Хранилище,
	|	ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.(
	|		ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Отправленное ТОГДА ПредметыЭлектронныхПисем.Регистратор.КомуТЧ.АдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресКому
	|	) КАК Кому,
	|	ВЫБОР КОГДА ПредметыЭлектронныхПисем.Регистратор.СтатусПисьма = &Полученное ТОГДА ПредметыЭлектронныхПисем.Регистратор.ОтправительАдресЭлектроннойПочты ИНАЧЕ """" КОНЕЦ КАК АдресОтКого
	|ИЗ
	|	РегистрСведений.ПредметыЭлектронныхПисем КАК ПредметыЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|		ПО ПредметыЭлектронныхПисем.Регистратор = ВложенияЭлектронныхПисем.Объект
	|
	|ГДЕ
	|	ПредметыЭлектронныхПисем.Предмет = &Предмет И
	|	(ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = """") И
	|	(ВложенияЭлектронныхПисем.Объект.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмо)";
	РезультатЗапроса = ЗапросПоПредмету.Выполнить();
	ВыборкаЗапроса 	 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	ОбработкаРезультатовАнкетирования = Обработки.ЗагрузкаРезультатовАнкетирования.Создать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если ВыборкаЗапроса.ЕстьРезультатОпроса тогда
			ХранилищеИзЗапроса = ВыборкаЗапроса.Хранилище.Получить();
			//Попытка
			ИмяВрФайла = ПолучитьИмяВременногоФайла();
			ХранилищеИзЗапроса.Записать(ИмяВрФайла);
			Файл = Новый ЧтениеXML();
			Файл.ОткрытьФайл(ИмяВрФайла);
			ОбъектЗагрузки 	= ОбработкаРезультатовАнкетирования.НайтиОбъектДляЗагрузки(Файл);
			Анкета 			= ОбработкаРезультатовАнкетирования.ПолучитьАнкетуИзФайла(Файл);
			ДатаОпроса 		= ОбработкаРезультатовАнкетирования.ПолучитьДатуФормированияАнкеты(Файл);
			
			Если Анкета = Неопределено тогда
				Продолжить;
			КонецЕсли;
			Если ОбъектЗагрузки = Неопределено тогда
				// если объект загрузки найти по ИдОпрашиваемого найти не удалось, тогда пробуем его найти
				// по ФИО и дате рождения, если это физлицо(конт. лицо), либо по ИНН, если это контрагент
				Файл.ОткрытьФайл(ИмяВрФайла);
				ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
			КонецЕсли;
			ДокОпрос = ОбработкаРезультатовАнкетирования.НайтиДокументОпрос(ДатаОпроса, Анкета);
			Если НЕ ЗначениеЗаполнено(ОбъектЗагрузки) тогда
				ОбъектЗагрузки = ОбработкаРезультатовАнкетирования.НайтиОбъектПоАнкетнымДанным(Файл, Анкета);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокОпрос) тогда
				
				Ответ = Вопрос("Найден документ опрос по данной анкете. Возможно такой документ уже есть в ИБ. Продолжить зарузку данных?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Нет тогда
					ФормаОЗ = ДокОпрос.ПолучитьФорму("ФормаДокумента");
					ФормаОЗ.Открыть();
					Сообщить("Найден документ опрос по данной анкете.");
					Возврат;
				ИначеЕсли Ответ = КодВозвратаДиалога.Отмена тогда
					Возврат;
				КонецЕсли;   
				
			КонецЕсли;
			
			Файл.ОткрытьФайл(ИмяВрФайла);
			ДокРассылки 		= ОбработкаРезультатовАнкетирования.ПолучитьДокРассылкиИзФайла(Файл);
			Если НЕ ЗначениеЗаполнено(Анкета) тогда
				Продолжить;
			КонецЕсли;
			// загружаем в документ Опрос
			ДокОпроса = Документы.Опрос.СоздатьДокумент();
			
			Пока Файл.Прочитать() Цикл
				Если (Файл.ТипУзла  = ТипУзлаXML.НачалоЭлемента) и ((Файл.Имя = "Вопрос")) Тогда
					Значение 		= Файл.ПолучитьАтрибут("Ид");
					Если Значение 	= "" Тогда
						Файл.Прочитать();
						Продолжить; // Пустые вопросы пропускаем
					КонецЕсли;
					ОбработкаРезультатовАнкетирования.ПрочитатьВопрос(Файл, ДокОпроса);
				КонецЕсли;
			КонецЦикла;
			Файл.Закрыть();
			
			ДокОпроса.ОпрашиваемоеЛицо = ОбъектЗагрузки;
			ДокОпроса.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
			ДокОпроса.ТиповаяАнкета	   = Анкета;
			ДокОпроса.Рассылка 		   = ДокРассылки;
			ДокОпроса.Дата			   = ДатаОпроса;
			ДокОпроса.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
			ОбработкаПрерыванияПользователя();
			
			//Исключение
			//	Сообщить("При загрузке файла " + ИмяВрФайла + " произошла ошибка");
			//КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
# КонецЕсли

// КАЛЕНДАРЬ

// Заполним реквизиты обработки по умолчанию
ДатаНач = Дата("000101010000");
ДатаКон = Дата("000101010000");

Отборы = Новый Соответствие;
МассивЗначенийОтбора = Новый Массив;
МассивЗначенийОтбора.Добавить(ВидСравнения.ВСписке);
МассивЗначенийОтбора.Добавить(ПользовательКалендаря);
Отборы.Вставить("Пользователь", МассивЗначенийОтбора);
СтруктураОтборов = Отборы;

мСписокКлючейСтруктурыСобытий = Новый СписокЗначений;
мСписокКлючейСтруктурыСобытий.Добавить("Документ");
мСписокКлючейСтруктурыСобытий.Добавить("ДатаНачалаСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ДатаКонцаСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ОписаниеСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("Контрагент");
мСписокКлючейСтруктурыСобытий.Добавить("КонтактноеЛицо");
мСписокКлючейСтруктурыСобытий.Добавить("Важность");
мСписокКлючейСтруктурыСобытий.Добавить("СостояниеСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ТипСобытия");
мСписокКлючейСтруктурыСобытий.Добавить("ВидСобытия");

мСписокОтборов              = Новый СписокЗначений;
мСтруктураПредставленийОтборов = Новый Структура;

мСтруктураПредставленийОтборов.Вставить("Дата", "Дата документа");
мСтруктураПредставленийОтборов.Вставить("ДатаСобытия", "Дата события");
мСписокОтборов.Добавить("Контрагент","СправочникСсылка.Контрагенты");
мСтруктураПредставленийОтборов.Вставить("Контрагент");
мСписокОтборов.Добавить("КонтактноеЛицо","СправочникСсылка.ФизическиеЛица");
мСтруктураПредставленийОтборов.Вставить("КонтактноеЛицо", "Физическое лицо");
мСписокОтборов.Добавить("Пользователь","СписокЗначений");
мСтруктураПредставленийОтборов.Вставить("Пользователь", "Ответственный");
мСписокОтборов.Добавить("Важность","ПеречислениеСсылка.Важность");
мСтруктураПредставленийОтборов.Вставить("Важность", "Важность события");
мСписокОтборов.Добавить("Тип","ПеречислениеСсылка.ВходящееИсходящееСобытие");
мСтруктураПредставленийОтборов.Вставить("Тип", "Тип события");
мСписокОтборов.Добавить("Номер","Строка");
мСтруктураПредставленийОтборов.Вставить("Номер", "Номер документа");
мСписокОтборов.Добавить("ВидОперации","");
мСтруктураПредставленийОтборов.Вставить("ВидОперации", "Вид операции");

// ПОЧТА

# Если Клиент Тогда

мОтображатьСписокПредметов = Истина;

// Воссатновим сохраненное значение отображения рассмотренности писем
СохраненноеЗначениеКнопки = ВосстановитьЗначение("ПометкаКнопкиРассмотренностиПоТекущемуПользователю");
Если ТипЗнч(СохраненноеЗначениеКнопки) = Тип("Булево") Тогда
	мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю = СохраненноеЗначениеКнопки;
Иначе
	мОтображатьРассмотренностиПисемТолькоПоТекущемуПользователю = Ложь;
КонецЕсли;

# КонецЕсли

// Инициализируем переменные объекта
мСоответствияГруппВходящие  = Новый Соответствие;
мСоответствияГруппИсходящие = Новый Соответствие;
мСоответствияГруппУдаленные = Новый Соответствие;
мСоответствияГруппЧерновики = Новый Соответствие;

мСтатистикаРассмотренностиПисем            = Новый Соответствие;
мСтатистикаСохраненныхПисем                = Новый Соответствие;
мСтатистикаРассмотренностиПисемПоПредметам = Новый Соответствие;

СоответствиеНачалоИОкончениеРабочегоДняПользователя = Новый Соответствие;