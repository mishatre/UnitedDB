Перем мПериод          Экспорт; // Период движений
Перем мТаблицаДвижений Экспорт; // Таблица движений

// Выполняет приход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьПриход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Приход);

КонецПроцедуры // ВыполнитьПриход()

// Выполняет расход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьРасход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Расход);

КонецПроцедуры // ВыполнитьРасход()

// Выполняет движения по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьДвижения() Экспорт

	Загрузить(мТаблицаДвижений);

КонецПроцедуры // ВыполнитьДвижения()

// Процедура контролирует объем отгрузки по заказу, с проверкой прав пользователя
//
Процедура КонтрольПревышенияОбъемаЗаказа(ДокОбъект, СтруктураШапкиДокумента, ИмяТЧ, Отказ, Заголовок) Экспорт
	
	Если СтруктураШапкиДокумента.Свойство("Заказ") Тогда
		ДокЗаказ = СтруктураШапкиДокумента.Заказ;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("Сделка") Тогда
		ДокЗаказ = СтруктураШапкиДокумента.Сделка;
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокПрав = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьПревышениеОбъемЗаказаПриОтгрузке,
		Ложь);
		
	НуженКонтроль = Ложь;
	Для Каждого СтрокаПрав Из СписокПрав Цикл
		НуженКонтроль = Макс(НуженКонтроль, СтрокаПрав.Значение);
		Если НуженКонтроль Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НуженКонтроль Тогда
		КонтрольОстатков(ДокОбъект, ИмяТЧ, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // КонтрольПревышенияОбъемаЗаказа()

// Процедура контролирует остаток по данному регистру по переданному документу
// и его табличной части. В случае недостатка товаров выставляется флаг отказа и 
// выдается сообщение.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - строка, имя табличной части, которая проводится по регистру, 
//  СтруктураШапкиДокумента - структура, содержащая значения "через точку" ссылочных реквизитов по шапке документа,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольОстатков(ДокументОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
   Если ДокументОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	ИмяТаблицы          = ИмяДокумента + "." + СокрЛП(ИмяТабличнойЧасти);
	ЕстьХарактеристика  = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьКоэффициент     = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЗаказПокупателяВТЧ = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПокупателя", МетаданныеДокумента, ИмяТабличнойЧасти);
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ
	|	Документ." + ИмяТаблицы +"
	|ГДЕ Ссылка = &ДокументСсылка";
    ТекстУсловияКоличество = "";
	Если ЕстьКоэффициент Тогда
		ТекстКоличество = "ВЫРАЗИТЬ(СУММА(Док.Количество * Док.Коэффициент /Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Число(15,3))";
	Иначе
		ТекстКоличество = "СУММА(Док.Количество)";
	КонецЕсли;
	флКонтролироватьЦену = ложь;
	флКонтролироватьСкидки = ложь;
	Если ИмяДокумента = "КорректировкаЗаказаПокупателя" Тогда
		ТекстКоличество = "-1 * "+ТекстКоличество;
		ТекстУсловияКоличество = " И Док.Количество<0";
		флКонтролироватьЦену = истина;
		Если ИмяТабличнойЧасти = "Товары" или ИмяТабличнойЧасти = "Услуги" Тогда
			флКонтролироватьСкидки = истина;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Если  ИмяДокумента = "КорректировкаЗаказаПокупателя" Тогда
		Запрос.УстановитьПараметр("ЗаказПокупателя",         СтруктураШапкиДокумента.Ссылка);
		ЗаказПокупателя = СтруктураШапкиДокумента.Ссылка;
		Запрос.УстановитьПараметр("ДокументСсылка",          ДокументОбъект.Ссылка);

	Иначе	
		Запрос.УстановитьПараметр("ДокументСсылка",          СтруктураШапкиДокумента.Ссылка);
		Запрос.УстановитьПараметр("ЗаказПокупателя",         СтруктураШапкиДокумента.Сделка);
		ЗаказПокупателя = СтруктураШапкиДокумента.Сделка;
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);

	Если ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли;
    Запрос.УстановитьПараметр("ПустойЗаказПокупателя",         Документы.ЗаказПокупателя.ПустаяСсылка());
    Запрос.УстановитьПараметр("ДоговорКонтрагента",      СтруктураШапкиДокумента.ДоговорКонтрагента);

	Запрос.Текст = "
	|ВЫБРАТЬ // Запрос, контролирующий остатки на складах
	|	Док.Номенклатура.Представление                         КАК НоменклатураПредставление,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаХраненияОстатковПредставление,"
	+ ?(ЕстьХарактеристика, "
	|	Док.ХарактеристикаНоменклатуры				           КАК ХарактеристикаНоменклатуры," , "")
	+?(флКонтролироватьЦену,"
	|	Док.Цена 											   КАК Цена,","")
	+ ?(флКонтролироватьСкидки, "
	|   Док.ПроцентСкидкиНаценки							   КАК ПроцентСкидкиНаценки,
	|   Док.ПроцентАвтоматическихСкидок                        КАК ПроцентАвтоматическихСкидок,","")
	+ ?(ЕстьЗаказПокупателяВТЧ, "
	|	Остатки.ЗаказПокупателя                                КАК ЗаказПокупателя," , "")+"
	|"+ТекстКоличество+" КАК ДокументКоличество,
	|	ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0)       КАК ОстатокКоличество
	|ИЗ 
	|	Документ." + ИмяТаблицы + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента=&ДоговорКонтрагента И
	|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")"
	+ ?(НЕ ЕстьЗаказПокупателяВТЧ, "
	|	И ЗаказПокупателя            = &ЗаказПокупателя", "") + "
	|   И СтатусПартии = &СтатусПартии
	|	) КАК Остатки
	|ПО 
	|	Док.Номенклатура                = Остатки.Номенклатура"
	+ ?(ЕстьХарактеристика, "
	| И Док.ХарактеристикаНоменклатуры  = Остатки.ХарактеристикаНоменклатуры", "")
	+ ?(флКонтролироватьЦену, "
	| И Док.Цена  					    = Остатки.Цена", "")
	+ ?(флКонтролироватьСкидки, "
	| И Док.ПроцентСкидкиНаценки 		= Остатки.ПроцентСкидкиНаценки
	| И Док.ПроцентАвтоматическихСкидок = Остатки.ПроцентАвтоматическихСкидок","")
	+ ?(ЕстьЗаказПокупателяВТЧ, "
	| И Док.ЗаказПокупателя             = Остатки.ЗаказПокупателя", "") + "
	|
	|ГДЕ
	|	Док.Ссылка  =  &ДокументСсылка "+ТекстУсловияКоличество+
	?(ЕстьЗаказПокупателяВТЧ, "
	| И Док.ЗаказПокупателя             <> &ПустойЗаказПокупателя И Док.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	Док.Номенклатура"
	+ ?(ЕстьХарактеристика, ",
	|	Док.ХарактеристикаНоменклатуры ", "")
	+ ?(флКонтролироватьЦену, ",
	|	Док.Цена ", "")
    + ?(флКонтролироватьСкидки, ",
	| Док.ПроцентСкидкиНаценки,
	| Док.ПроцентАвтоматическихСкидок","")
	+ ?(ЕстьЗаказПокупателяВТЧ, ",
	|	Остатки.ЗаказПокупателя ", "") + "	

	|
	|ИМЕЮЩИЕ ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0) < "+ТекстКоличество+"
	|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.ЗаказыПокупателей.Остатки // Блокирующие чтение таблицы остатков регистра для разрешения коллизий многопользовательской работы
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаСообщения = "Остатка " + 
		УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, 
								  ?(ЕстьХарактеристика, Выборка.ХарактеристикаНоменклатуры, "")) +
		", заказанного по документу " + ?(ЕстьЗаказПокупателяВТЧ,Выборка.ЗаказПокупателя,ЗаказПокупателя) + 
		?(флКонтролироватьЦену," с ценой " + ОбщегоНазначения.ФорматСумм(Выборка.Цена),"")+ 
		?(флКонтролироватьСкидки, " с ручной скидкой "+Выборка.ПроцентСкидкиНаценки+", с автоматической скидкой "+Выборка.ПроцентАвтоматическихСкидок,"")+" недостаточно.";

		УправлениеЗапасами.ОшибкаНетОстатка(СтрокаСообщения, Выборка.ОстатокКоличество, Выборка.ДокументКоличество,
		Выборка.ЕдиницаХраненияОстатковПредставление, Отказ, Заголовок);

	КонецЦикла;

КонецПроцедуры // КонтрольОстатков()


