#Если Клиент Тогда
Перем мНазваниеОтчета Экспорт;

// Структура соответствия имен и представлений построителя отчета
Перем мСтруктураСоответствияИмен;

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

// Соответствия, содержащая назначения свойств и категорий именам
Перем мСоответствиеНазначений Экспорт;

// Структура, ключи которой - имена отборов Построителя, значения - параметры Построителя
Перем мСтруктураДляОтбораПоКатегориям Экспорт;

// Структура, содержащая представления полей
Перем СтруктураПредставлениеПолей;

Перем МассивИзмерения;
Перем МассивКолонки;

Перем СтруктураФорматаПолей;

Перем КоличествоПоказателей;

Перем ВысотаЗаголовка Экспорт;

Перем мСписокОтбора Экспорт;

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выводит шапку таблицы
Процедура ВывестиКолонкуШапки(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета)

	НомерЭлементаВыборки = 0;
	Пока Выборка.Следующий() Цикл
		НомерЭлементаВыборки = НомерЭлементаВыборки + 1;

		Если Выборка[ПостроительОтчета.ИзмеренияКолонки[0].Имя] <> NULL ТОгда
			МакетКолонкаШапки = СтруктураПараметров.МакетКолонкаШапкиДляОстальныхЦен;
			ЭтоОстальные = Истина;
		Иначе
			МакетКолонкаШапки = СтруктураПараметров.МакетКолонкаШапкиДляСобственныхЦен;
			ЭтоОстальные = Ложь;
		КонецЕсли;
		ФорматПоля = "";
		СтруктураПараметров.СтруктураФорматаПолей.Свойство(ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя, ФорматПоля);

		Если КоличествоПоказателей = 1 тогда
			МакетКолонкаШапки.Область(1,1,МакетКолонкаШапки.ВысотаТаблицы,МакетКолонкаШапки.ШиринаТаблицы).Очистить(Истина);
		иначе
			МакетКолонкаШапки.Область(1,1,МакетКолонкаШапки.ВысотаТаблицы - 1,МакетКолонкаШапки.ШиринаТаблицы).Очистить(Истина);
		КОнецЕсли;
		
		Если (НомерЭлементаВыборки = 1) И (Индекс <> 0) Тогда
			Обл = ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-МакетКолонкаШапки.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы - МакетКолонкаШапки.ШиринаТаблицы + 1,
			                                ДокументРезультат.ВысотаТаблицы,                                 ДокументРезультат.ШиринаТаблицы);
			ДокументРезультат.Область(2+ДокументРезультат.ВысотаТаблицы-МакетКолонкаШапки.ВысотаТаблицы+Индекс,ДокументРезультат.ШиринаТаблицы - МакетКолонкаШапки.ШиринаТаблицы + 1).Формат= ФорматПоля;
			НазваниеПоля = Выборка[Выборка.Группировка()];
			ДокументРезультат.Область(2+ДокументРезультат.ВысотаТаблицы-МакетКолонкаШапки.ВысотаТаблицы+Индекс,ДокументРезультат.ШиринаТаблицы - МакетКолонкаШапки.ШиринаТаблицы + 1).Текст = ?(НазваниеПоля = NULL, "Собственные цены", НазваниеПоля);
		Иначе
			// Накопление количества колонок в шапке.
			СтруктураПараметров.КоличествоКолонокПоказателей = СтруктураПараметров.КоличествоКолонокПоказателей + ?(Выборка[ПостроительОтчета.ИзмеренияКолонки[0].Имя] = NULL, 1, 2);

			МакетКолонкаШапки.Область(2+Индекс,1).Формат= ФорматПоля;
			НазваниеПоля = Выборка[Выборка.Группировка()];
			МакетКолонкаШапки.Область(2+Индекс,1).Текст = ?(НазваниеПоля = NULL, "Собственные цены", НазваниеПоля);
			Обл = ДокументРезультат.Присоединить(МакетКолонкаШапки, Выборка.Уровень());
		КонецЕсли;

		НачКолонка = Обл.Лево;

		// В специальном параметре будет сохраняться правая ячейка
		СтруктураПараметров.Вставить("КонКолонка", Обл.Право);

		НоваяСтрока = ДеревоКолонкиОтчета.Строки.Добавить();
		НоваяСтрока.Значение = Выборка[Выборка.Группировка()];
		НоваяСтрока.ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя;
		НоваяСтрока.ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя;
		НоваяСтрока.ЭтоОстальные = ЭтоОстальные;

		Если Индекс < ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Тогда

			ВывестиКолонкуШапки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[Индекс+1].Имя), Индекс+1, СтруктураПараметров, ДокументРезультат, НоваяСтрока);

		КонецЕсли;

		// Оформление ячеек группы непоследнего уровня
		Если НачКолонка <> СтруктураПараметров.КонКолонка Тогда
			Обл = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс, НачКолонка, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс, СтруктураПараметров.КонКолонка);
			Обл.ПоВыделеннымКолонкам = Истина;
			Обл.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;

			// Очистим границы слева и справа
			ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Обл.ГраницаСправа = ЛинияНетЛинии;
			Обл.ГраницаСнизу  = ЛинияНетЛинии;

			Обл2 = ДокументРезультат.Область(СтруктураПараметров.ВысотаЗаголовка+2 +Индекс, НачКолонка+1, СтруктураПараметров.ВысотаЗаголовка+2 + Индекс, СтруктураПараметров.КонКолонка);
			Обл2.ГраницаСлева = ЛинияНетЛинии;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Выводит показатели в строку отчета
Процедура ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета, ДеревоСтроки, МакетПоказательДляЦенКомпании, МакетПоказательДляОстальныхЦен, ПоследняяГруппировка)
	Перем НайденнаяСтрока;
	Для Каждого Строка Из ДеревоКолонкиОтчета.Строки Цикл

		СтруктураЗначенийПоказателей = Новый Структура;

		Если ДеревоСтроки <> Неопределено Тогда
			НайденнаяСтрока = ДеревоСтроки.Строки.Найти(Строка.Значение, "Значение", Ложь);
			Если НайденнаяСтрока <> Неопределено Тогда
				СтруктураЗначенийПоказателей = НайденнаяСтрока.СтруктураЗначенийПоказателей;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого показатель из Показатели Цикл
			Если НЕ СтруктураЗначенийПоказателей.Свойство(Показатель.Имя) тогда
				СтруктураЗначенийПоказателей.Вставить(Показатель.Имя, 0);
			КонецЕсли;
		КонецЦикла;

		Если Строка.Строки.Количество() = 0 Тогда

			Если Строка.ЭтоОстальные тогда
				МакетПоказатель = МакетПоказательДляОстальныхЦен;
			иначе
				МакетПоказатель = МакетПоказательДляЦенКомпании;
			КонецЕсли;
					//	//Заполняем "Остальные" показатели
					//Иначе
					//	//Заполняем "для компании"
					//КонецЕсли;//МакетПоказатель.Параметры["Цена"] = МассивЗначенийПоказателей[0];
			МакетПоказатель.Параметры.Заполнить(СтруктураЗначенийПоказателей);
			ДокументРезультат.Присоединить(МакетПоказатель);

		КонецЕсли;

		// Следующий уровень:
		ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, Строка, НайденнаяСтрока, МакетПоказательДляЦенКомпании, МакетПоказательДляОстальныхЦен, ПоследняяГруппировка);

	КонецЦикла;

КонецПроцедуры

// Получает значения показателей для
Процедура ПолучитьПоказатели(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат, ДеревоСтроки)

	Пока Выборка.Следующий() Цикл

		СтруктураЗначенийПоказателей = Новый Структура;
		для каждого Показатель из Показатели Цикл
			Если Показатель.Использование тогда
				СтруктураЗначенийПоказателей.Вставить(Показатель.Имя, Выборка[Показатель.Имя]);
			КОнецЕсли;
		КонецЦикла;

		// Запомним соответствие значений показателей и группировки в дереве
		НоваяСтрока = ДеревоСтроки.Строки.Добавить();
		НоваяСтрока.Значение = Выборка[Выборка.Группировка()];
		НоваяСтрока.ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя;
		НоваяСтрока.СтруктураЗначенийПоказателей = СтруктураЗначенийПоказателей;

		Если Индекс < ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Тогда

			ПолучитьПоказатели(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[Индекс+1].Имя, ПостроительОтчета.ИзмеренияКолонки[Индекс].Имя), 
			Индекс+1, СтруктураПараметров, ДокументРезультат, НоваяСтрока);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выводит строку отчета
Процедура ВывестиСтроку(Выборка, Знач Индекс, СтруктураПараметров, ДокументРезультат)

	ИзмерениеСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс];
	Пока Выборка.Следующий() Цикл

		// Вывод значения измерения
		МакетСтроки = ?(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии,
							ПостроительОтчета.ИзмеренияСтроки[Индекс].МакетИерархии,
							ПостроительОтчета.ИзмеренияСтроки[Индекс].Макет);

		// Значения измерений и т.д.
		МакетСтроки.Параметры.Заполнить(Выборка);

		МакетИзмерение = МакетСтроки.ПолучитьОбласть(1,1,МакетСтроки.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок);

		ДокументРезультат.Вывести(МакетИзмерение, Выборка.Уровень());

		// Набор соответствий для хранения значений по измерениям колонки
		Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
			СтруктураПараметров.Вставить("СоответствиеПоказателей"+ПостроительОтчета.ИзмеренияКолонки[Инд].Имя, Новый Соответствие);
		КонецЦикла;

		// Дерево значений для хранения значений по измерениям колонки
		ДеревоСтроки = Новый ДеревоЗначений;
		ДеревоСтроки.Колонки.Добавить("ИмяИзмерения");
		ДеревоСтроки.Колонки.Добавить("Значение");
		ДеревоСтроки.Колонки.Добавить("СтруктураЗначенийПоказателей");

		// Получение значений показателей по измерениям колонки
		ПолучитьПоказатели(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[0].Имя, "Все"), 
						 0, СтруктураПараметров, ДокументРезультат, ДеревоСтроки);

		// Значение показателей для общего итога
		СтруктураЗначенийПоказателей = Новый Структура;

		для каждого Показатель из Показатели Цикл

			Если Показатель.Использование тогда
				СтруктураЗначенийПоказателей.Вставить(Показатель.Имя, Выборка[Показатель.Имя]);
			КонецЕсли;
			
		КонецЦикла;
		
		// Макет для показателей
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			МакетСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс].МакетИерархии;
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			МакетСтроки = ПостроительОтчета.ИзмеренияСтроки[Индекс].Макет;
		КонецЕсли;

		// Макет показателей
		МакетПоказательДляЦенКомпании = МакетСтроки.ПолучитьОбласть(1,1+СтруктураПараметров.КоличествоКолонок+1,
						  МакетСтроки.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок+1);
						  
		МакетПоказательДляОстальныхЦен = МакетСтроки.ПолучитьОбласть(1,1+СтруктураПараметров.КоличествоКолонок+1,
						  МакетСтроки.ВысотаТаблицы,1+СтруктураПараметров.КоличествоКолонок+СтруктураПараметров.КоличествоПоказателей);


		// Выводим показатели в соответствии с их порядком в шапке
		ВывестиПоказатели(СтруктураПараметров, ДокументРезультат, СтруктураПараметров.ДеревоКолонкиОтчета, ДеревоСтроки, МакетПоказательДляЦенКомпании, МакетПоказательДляОстальныхЦен,
						  (Индекс = ПостроительОтчета.ИзмеренияСтроки.Количество()-1) И (Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке));

		Если Индекс < ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
			ВывестиСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияСтроки[Индекс+1].Имя), 
						  Индекс+1, СтруктураПараметров, ДокументРезультат);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьПоказатели(ИмяПоля, ПредставлениеПоля, ВклПоУмолчанию, ФорматнаяСтрока)

	СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	// Показатели заносятся в специальную таблицу и добавляются в список
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = ИмяПоля;
	СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
	СтрПоказатели.ВклПоУмолчанию    = ВклПоУмолчанию;
	СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;
	Если Показатели.Найти(ИмяПоля) = Неопределено Тогда
		НовыйПоказатель = Показатели.Добавить();
		НовыйПоказатель.Имя = ИмяПоля;
		НовыйПоказатель.Представление = ПредставлениеПоля;
		НовыйПоказатель.Использование    = ВклПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПредставление(ИмяПоля, ПредставлениеПоля, ТипИзмерения, ВклВИтоги)

	Если ВклВИтоги Тогда
		Если ТипИзмерения = "Колонки" Тогда
			МассивКолонки.Добавить(ИмяПоля);
		Иначе
			МассивИзмерения.Добавить(ИмяПоля);
		КонецЕсли;
	КонецЕсли;

	СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

КонецПроцедуры

// Выполняет настройку отчета по умолчанию.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	мТаблицаПоказатели.Очистить();

	СтруктураПредставлениеПолей = Новый Структура;
	мСоответствиеНазначений     = Новый Соответствие;
	МассивИзмерения             = Новый Массив;
	МассивКолонки               = Новый Массив;
	МассивОтбора                = Новый Массив;

	// Очистим отбор
	ОтборКоличество = ПостроительОтчета.Отбор.Количество();
	Для а = 1 По ОтборКоличество Цикл
		ПостроительОтчета.Отбор.Удалить(ОтборКоличество - а);
	КонецЦикла;

	ЗаполнитьПоказатели("Цена", "Цена", ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");
	ЗаполнитьПоказатели("ПроцентОтклоненияОтЦеныКомпании", "Отклонение от цены компании в %%", ИСТИНА, "ЧЦ = 15; ЧДЦ = 2");

	ЗаполнитьПредставление("Номенклатура",               "Номенклатура",                "Строки",  ИСТИНА);
	ЗаполнитьПредставление("ХарактеристикаНоменклатуры", "Характеристика номенклатуры", "Строки",  ИСТИНА);
	ЗаполнитьПредставление("Контрагент",                 "Контрагент",                  "Колонки", ИСТИНА);
	ЗаполнитьПредставление("ТипЦен",                     "Тип цен",                     "Колонки", ИСТИНА);
	ЗаполнитьПредставление("ПериодЦен",                  "Дата регистрации цены",       "Колонки", ИСТИНА);

	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ
		|	ЦеныНоменклатуры.Номенклатура                       КАК Номенклатура,
		|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры         КАК ХарактеристикаНоменклатуры,
		|	NULL                                        КАК Контрагент,
		|	ЦеныНоменклатуры.ТипЦен                             КАК ТипЦен,
		|	КонецПериода(ЦеныНоменклатуры.Период, ДЕНЬ)         КАК ПериодЦен,
		|	ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения ТОГДА
		|		ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|			/КурсыВалютСрезПоследних.Кратность
		|			/&КурсВалютыОтчета    
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|			/КурсыВалютСрезПоследних.Кратность
		|			/ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
		|			/&КурсВалютыОтчета
		|	КОНЕЦ                                               КАК Цена,
		|	0                                                   КАК ПроцентОтклоненияОтЦеныКомпании
		|
		|{ВЫБРАТЬ 
		|	ЦеныНоменклатуры.Номенклатура.*                     КАК Номенклатура,
		|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры.*       КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатуры.ТипЦен.*                           КАК ТипЦен,
		|	КонецПериода(ЦеныНоменклатуры.Период, ДЕНЬ)         КАК ПериодЦен,
		|	0                                                   КАК ПроцентОтклоненияОтЦеныКомпании}
		|
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета) КАК ЦеныНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета) КАК КурсыВалютСрезПоследних
		|		ПО ЦеныНоменклатуры.Валюта = КурсыВалютСрезПоследних.Валюта
		|//СОЕДИНЕНИЯ
		|
		|{ГДЕ 
		|	ЦеныНоменклатуры.Номенклатура.*                     КАК Номенклатура,
		|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры.*       КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатуры.ТипЦен.*                           КАК ТипЦен,
		|	КонецПериода(ЦеныНоменклатуры.Период, ДЕНЬ)         КАК ПериодЦен
		|	//СВОЙСТВА
		|	//КАТЕГОРИИ
		|	}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ //РАЗЛИЧНЫЕ
		|	ЦеныНоменклатуры.Номенклатура               КАК Номенклатура,
		|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатуры.ТипЦен.Владелец            КАК Контрагент,
		|	ЦеныНоменклатуры.ТипЦен.ТипЦеныНоменклатуры КАК ТипЦен,
		|	КОНЕЦПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ) КАК ПериодЦен,
		|	ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения ТОГДА
		|		ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|			/КурсыВалютСрезПоследних.Кратность
		|			/&КурсВалютыОтчета
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|			/КурсыВалютСрезПоследних.Кратность
		|			/ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент
		|			/&КурсВалютыОтчета
		|	КОНЕЦ                                               КАК Цена,
		|	ВЫБОР
		|		КОГДА (РублевыеЦеныКомпании.РублеваяЦена ЕСТЬ НЕ NULL) и (РублевыеЦеныКомпании.РублеваяЦена<>0)
		|			ТОГДА 
		|				ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения ТОГДА
		|					100*(-РублевыеЦеныКомпании.РублеваяЦена + 
		|					ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|					/КурсыВалютСрезПоследних.Кратность)/
		|					РублевыеЦеныКомпании.РублеваяЦена
		|				ИНАЧЕ
		|					100*(-РублевыеЦеныКомпании.РублеваяЦена + 
		|					ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|					/КурсыВалютСрезПоследних.Кратность
		|					/ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент)/
		|					РублевыеЦеныКомпании.РублеваяЦена
		|				КОНЕЦ
		|			ИНАЧЕ 0
		|	КОНЕЦ                                       КАК ПроцентОтклоненияОтЦеныКомпании
		|
		|{ВЫБРАТЬ 
		|	ЦеныНоменклатуры.Номенклатура.*               КАК Номенклатура,
		|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатуры.ТипЦен.Владелец.*            КАК Контрагент,
		|	ЦеныНоменклатуры.ТипЦен.ТипЦеныНоменклатуры.* КАК ТипЦен,
		|	КОНЕЦПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ) КАК ПериодЦен}
		|
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаОтчета) КАК ЦеныНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета) КАК КурсыВалютСрезПоследних
		|		ПО ЦеныНоменклатуры.Валюта = КурсыВалютСрезПоследних.Валюта
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ
		|		ВЫБОР КОГДА ЦеныКомпании1.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения ТОГДА
		|			ЦеныКомпании1.Цена *
		|			КурсыВалютДляЦенКомпании.Курс
		|			/КурсыВалютДляЦенКомпании.Кратность
		|		ИНАЧЕ
		|			ЦеныКомпании1.Цена/ЦеныКомпании1.ЕдиницаИзмерения.Коэффициент*
		|			КурсыВалютДляЦенКомпании.Курс
		|			/КурсыВалютДляЦенКомпании.Кратность
		|		КОНЕЦ                                    КАК РублеваяЦена,
		|		ЦеныКомпании1.Номенклатура               КАК Номенклатура,
		|		ЦеныКомпании1.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ЦеныКомпании1.ТипЦен                     КАК ТипЦен
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета) КАК ЦеныКомпании1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОтчета) КАК КурсыВалютДляЦенКомпании
		|			ПО ЦеныКомпании1.Валюта = КурсыВалютДляЦенКомпании.Валюта
		|	) КАК РублевыеЦеныКомпании
		|	ПО РублевыеЦеныКомпании.Номенклатура = ЦеныНоменклатуры.Номенклатура 
		|	И РублевыеЦеныКомпании.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
		|	И ЦеныНоменклатуры.ТипЦен.ТипЦеныНоменклатуры = РублевыеЦеныКомпании.ТипЦен
		|//СОЕДИНЕНИЯ
		|
		|{ГДЕ 
		|	ЦеныНоменклатуры.Номенклатура.*               КАК Номенклатура,
		|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатуры.ТипЦен.Владелец.*            КАК Контрагент,
		|	ЦеныНоменклатуры.ТипЦен.ТипЦеныНоменклатуры.* КАК ТипЦен,
		|	КонецПериода(ЦеныНоменклатуры.Период, ДЕНЬ) КАК ПериодЦен,
		|	ВЫБОР
		|		КОГДА (РублевыеЦеныКомпании.РублеваяЦена ЕСТЬ НЕ NULL) И (РублевыеЦеныКомпании.РублеваяЦена <> 0)
		|			ТОГДА 
		|				ВЫБОР КОГДА ЦеныНоменклатуры.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения ТОГДА
		|					100*(-РублевыеЦеныКомпании.РублеваяЦена +
		|					ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|					/КурсыВалютСрезПоследних.Кратность)
		|					/РублевыеЦеныКомпании.РублеваяЦена
		|				ИНАЧЕ
		|					100*(-РублевыеЦеныКомпании.РублеваяЦена +
		|					ЦеныНоменклатуры.Цена*КурсыВалютСрезПоследних.Курс
		|					/КурсыВалютСрезПоследних.Кратность
		|					/ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент)
		|					/РублевыеЦеныКомпании.РублеваяЦена
		|				КОНЕЦ
		|			ИНАЧЕ NULL
		|	КОНЕЦ                                       КАК ПроцентОтклоненияОтЦеныКомпании
		|	//СВОЙСТВА
		|	//КАТЕГОРИИ
		|	}
		|
		|{УПОРЯДОЧИТЬ ПО 
		|	Номенклатура.*                              КАК Номенклатура,
		|	ХарактеристикаНоменклатуры.*                КАК ХарактеристикаНоменклатуры,
		|	Контрагент.*                                КАК Контрагент,
		|	ТипЦен.*                                    КАК ТипЦен
		|	//СВОЙСТВА
		|	}
		|
		|{ИТОГИ ПО 
		|	Номенклатура.*                              КАК Номенклатура,
		|	ХарактеристикаНоменклатуры.*                КАК ХарактеристикаНоменклатуры,
		|	Контрагент.*                                КАК Контрагент,
		|	ТипЦен.*                                    КАК ТипЦен,
		|	ПериодЦен                                   КАК ПериодЦен
		|	//СВОЙСТВА
		|}
		|
		|ИТОГИ СРЕДНЕЕ(Цена), СРЕДНЕЕ(ПроцентОтклоненияОтЦеныКомпании)
		|ПО ОБЩИЕ
		|";

	мСтруктураСоответствияИмен.Очистить();
	мСтруктураСоответствияИмен = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Контрагент, ТипЦен, ПериодЦен, Цена, ПроцентОтклоненияОтЦеныКомпании",
	"Номенклатура",
	"Характеристика номенклатуры",
	"Контрагент",
	"Тип цен",
	"Дата регистрации цены",
	"Цена",
	"Процент отклонения от цены компании");
	
	мСоответствиеНазначений = Новый Соответствие;

	Если ИспользоватьСвойстваИКатегории Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ЦеныНоменклатуры.Номенклатура";
		НоваяСтрока.Представление = "Номенклатура";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ЦеныНоменклатуры.ХарактеристикаНоменклатуры";
		НоваяСтрока.Представление = "Характеристика номенклатуры";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;

		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		// Добавим строки запроса, необходимые для использования свойств и категорий
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, мСтруктураСоответствияИмен, мСоответствиеНазначений, ПостроительОтчета.Параметры, , ТекстПоляКатегорий, ТекстПоляСвойств, , , , , , мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;

	Если ИспользоватьСвойстваИКатегории Тогда
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, мСтруктураСоответствияИмен);
	КонецЕсли;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(мСтруктураСоответствияИмен, ПостроительОтчета);
	
	Для Каждого Измерение Из МассивИзмерения Цикл
		ПостроительОтчета.ИзмеренияСтроки.Добавить(Измерение, Измерение, ТипИзмеренияПостроителяОтчета.Иерархия);
	КонецЦикла;

	Для Каждого Измерение Из МассивКолонки Цикл
		ПостроительОтчета.ИзмеренияКолонки.Добавить(Измерение, Измерение, ТипИзмеренияПостроителяОтчета.Элементы);
	КонецЦикла;

	// Удалим добавляемые автоматически поля
	Сч=0;
	Пока Сч < ПостроительОтчета.ВыбранныеПоля.Количество() Цикл
		ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);
	КонецЦикла;

	Для каждого ЭлементСписка Из мСписокОтбора Цикл
		Если ПостроительОтчета.Отбор.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			ПостроительОтчета.Отбор.Добавить(ЭлементСписка.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом,
//  ПоказыватьЗаголовок - флаг того, показывать заголовок или скрывать его
//  ВысотаЗаголовка - возращаемое значение - высота заголовка
//  ТолькоЗаголовок - флаг того, сформировать только заголовок или весь отчет
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ТолькоЗаголовок = Ложь) Экспорт
	
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		Предупреждение("Не задано ни одной группировки для строк отчета!");
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеОтчетами.ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, мСтруктураДляОтбораПоКатегориям) Тогда
		Предупреждение("По одной категории нельзя устанавливать несколько отборов");
		Возврат;
	КонецЕсли;
	
	ДатаКурса = ?(Не ЗначениеЗаполнено(ДатаОтчета), ТекущаяДата(), ДатаОтчета);
	КурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаОтчета));
	
	Если ДатаОтчета <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаОтчета", КонецДня(ДатаОтчета));
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаОтчета", ТекущаяДата());
	КонецЕсли;
	
	
	Если КурсВалюты.Курс = 0 тогда
		Предупреждение("Курс валюты отчета """ + ВалютаОтчета.Наименование+""" на дату " + строка(ДатаКурса)+" не определен или нулевой. Формирование отчета невозможно.");
		возврат;
	КонецЕсли;
	
	Если КурсВалюты.Кратность = 0 тогда
		Предупреждение("Кратность курса валюты отчета """ + ВалютаОтчета.Наименование+""" на дату " + строка(ДатаКурса)+" не определена или нулевая. Формирование отчета невозможно.");
		возврат;
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("КурсВалютыОтчета",       КурсВалюты.Курс/КурсВалюты.Кратность);
	ПостроительОтчета.Параметры.Вставить("ПустаяЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	
	СтруктураПредставлениеПолей.Вставить("Цена", "Цена в "+ВалютаОтчета);
	мТаблицаПоказатели.Найти("Цена", "ИмяПоля").ПредставлениеПоля = "Цена в "+ВалютаОтчета;
	Показатели.Найти("Цена", "Имя").Представление = "Цена в "+ВалютаОтчета;
	МакетОтчета = ПолучитьМакет("Макет");

	//Если не выбрано ни одного поля, то флаг вывода детальных записей сбрасываем
	Если ВыводитьДетальныеЗаписи И ПостроительОтчета.ВыбранныеПоля.Количество()=0 Тогда
		ВыводитьДетальныеЗаписи= Ложь;
	КонецЕсли;

	МассивЦветаИзмерений = Новый Массив;
	Если РаскрашиватьИзмерения Тогда

		ТабДокЦветаИзмерений = МакетОтчета.ПолучитьОбласть("ЦветаИзмерений");
		Для Сч = 1 По ТабДокЦветаИзмерений.ВысотаТаблицы Цикл
			МассивЦветаИзмерений.Добавить(ТабДокЦветаИзмерений.Область(Сч,2).ЦветФона);
		КонецЦикла;

		Если НЕ ВыводитьДетальныеЗаписи Тогда
			МассивЦветаИзмерений.Добавить(Новый Цвет());
		КонецЕсли;

	КонецЕсли;

	ПостроительОтчета.ЗаполнениеРасшифровки   = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка;
	ПостроительОтчета.ВыводитьДетальныеЗаписи = ВыводитьДетальныеЗаписи;

	ОбластьСтрока         = МакетОтчета.Область("Строка");
	ОбластьСтрокаИерархии = МакетОтчета.Область("СтрокаИерархии");
	ОбластьДетали         = МакетОтчета.Область("СтрокаДетали");
	ОбластьОбщиеИтоги     = МакетОтчета.Область("ОбщиеИтоги");

	ОбластьКолонка        = МакетОтчета.Область("КолонкаДанные");
	ОбластьПоле           = МакетОтчета.Область("Поле");

	КоличествоПоказателей = 0;
	
	для каждого Показатель из Показатели Цикл
		Если ПОказатель.Использование тогда
			КоличествоПОказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКолонок     = 1;

	//Если ВыводитьДетальныеЗаписи Тогда
	//	НачКоличествоКолонок = КоличествоКолонок;
	//	Для Инд = НачКоличествоКолонок По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл  // на 1 меньше количества полей - одно уже есть
	//		МакетОтчета.ВставитьОбласть(ОбластьПоле, ОбластьПоле, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	//		КоличествоКолонок = КоличествоКолонок + 1;
	//		ОбластьПоле = МакетОтчета.Область("Поле");
	//	КонецЦикла;

	//	МакетОтчета.Область(ОбластьДетали.Верх,1+1,ОбластьДетали.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

	//	Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл
	//		МакетОтчета.Область(ОбластьДетали.Верх,1+1+Инд).Параметр = ПостроительОтчета.ВыбранныеПоля[Инд].Имя;
	//	КонецЦикла;

	//	для каждого Показатель из Показатели Цикл
	//		Если ПОказатель.Использование тогда
	//			Инд = Инд + 1;
	//			МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+Инд).Параметр = Показатель.Имя;
	//			МакетОтчета.Область(ОбластьДетали.Верх,1+КоличествоКолонок+Инд).Формат   = мТаблицаПоказатели.Найти(Показатель.Имя).ФорматнаяСтрока;;
	//		КонецЕсли;
	//	КонецЦикла;

	//	ПостроительОтчета.МакетДетальныхЗаписей = МакетОтчета.ПолучитьОбласть(ОбластьДетали.Верх, ,ОбластьДетали.Верх);
	//КонецЕсли; 

	Если КоличествоКолонок=1 Тогда
		ОбластьПоле.ШиринаКолонки = 30;
	КонецЕсли;

	// Формирование макета заголовка отчета
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+2,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+1).Очистить(Истина);
	МакетОтчета.Область(МакетОтчета.Область("Заголовок").Верх,1+1,МакетОтчета.Область("Заголовок").Низ,1+КоличествоКолонок+1).ПоВыделеннымКолонкам = Истина;

	СписокИзмерений = "";
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СписокИзмерений = СписокИзмерений + ", " + ПостроительОтчета.ИзмеренияСтроки[Сч].Представление + " " + ПостроительОтчета.ИзмеренияСтроки[Сч].ТипИзмерения;
	КонецЦикла; 

	СписокКолонок = "";
	Для Сч=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
		СписокКолонок = СписокКолонок + ", " + ПостроительОтчета.ИзмеренияКолонки[Сч].Представление + " " + ПостроительОтчета.ИзмеренияКолонки[Сч].ТипИзмерения;
	КонецЦикла; 
	
	СписокПоказателей = "";
	Для Сч=0 По Показатели.Количество()-1 Цикл
		Если Показатели[Сч].Использование тогда
			СписокПоказателей = СписокПоказателей + ", " + Показатели[Сч].Представление;
		КонецЕсли;
	КонецЦикла; 

	СписокОтбор = "";
	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		Если ПостроительОтчета.Отбор[Сч].Использование Тогда
			СписокОтбор = СписокОтбор + ", " + ПостроительОтчета.Отбор[Сч].Представление + " " + ПостроительОтчета.Отбор[Сч].ВидСравнения + " " + ПостроительОтчета.Отбор[Сч].Значение;
		КонецЕсли;
	КонецЦикла; 

	ЗаголовокОтчета = МакетОтчета.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
	
	Если ДатаОтчета = '00010101000000' Тогда
		Если ТолькоЗаголовок Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		Иначе
			ОписаниеПериода = "на " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг ЧЧ:мм:сс""; ДП = ""...""");
		КонецЕсли; 
	Иначе
		ОписаниеПериода = "на конец дня " + Формат(ДатаОтчета, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.Период          = "Данные "+ ОписаниеПериода;
	ЗаголовокОтчета.Параметры.Измерения       = "Строки: "  + Сред(СписокИзмерений, 2);
	ЗаголовокОтчета.Параметры.Колонки         = "Колонки: "  + Сред(СписокКолонок, 2);
	ЗаголовокОтчета.Параметры.Показатели      = "Показатели: "  + Сред(СписокПоказателей, 2);;
	ЗаголовокОтчета.Параметры.Отбор           = "Отбор:"      + Сред(СписокОтбор,2);
	ПостроительОтчета.МакетЗаголовкаОтчета = ЗаголовокОтчета;

	ВысотаЗаголовка = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы;

	Если (ТолькоЗаголовок) ИЛИ (ПостроительОтчета.ИзмеренияКолонки.Количество() = 0) Тогда
		ДокументРезультат.Вывести(ЗаголовокОтчета);
		Возврат;
	КонецЕсли; 

	ОбластьШапкаТаблицы = МакетОтчета.Область("ШапкаТаблицы");

	Инд = 0;
	для Каждого Показатель из Показатели Цикл
		Если ПОказатель.Использование тогда
			Инд = Инд + 1;
			МакетОтчета.Область(ОбластьШапкаТаблицы.Верх+1,1+КоличествоКолонок+инд).Текст = Показатель.Имя;
		КонецЕсли;
	КонецЦикла;

	// Назначение, корректировка макетов измерений
	Сдвиг = Макс(МассивЦветаИзмерений.Количество()-ПостроительОтчета.ИзмеренияСтроки.Количество(),0);

	// Структура, определяющая вывод показателей
	СтруктураВыводаПоказателей = Новый Структура;

	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		Измерение = ПостроительОтчета.ИзмеренияСтроки[Сч];

		Если МассивЦветаИзмерений.Количество()>0 Тогда
			ЦветИзмерения = МассивЦветаИзмерений[Сдвиг+((Сч) - (МассивЦветаИзмерений.Количество()-Сдвиг)*Цел((Сч)/(МассивЦветаИзмерений.Количество()-Сдвиг)))];
		Иначе
			ЦветИзмерения = Новый Цвет();
		КонецЕсли;

		ФорматПоля = "";

		Шаблон = "["+Измерение.Имя+"]";

		Для Инд = 0 По ПостроительОтчета.ВыбранныеПоля.Количество()-1 Цикл

			Если ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным <> Измерение.ПутьКДанным
			   И Найти(ПостроительОтчета.ВыбранныеПоля[Инд].ПутьКДанным, Измерение.ПутьКДанным) >0 Тогда
				Шаблон = Шаблон + ", [" + ПостроительОтчета.ВыбранныеПоля[Инд].Имя+"]";
			КонецЕсли;

		КонецЦикла;

		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,ОбластьСтрока.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1,ОбластьСтрока.Верх,1+КоличествоКолонок+КОличествоПоказателей).ЦветФона   = ЦветИзмерения;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Отступ     = Сч;
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).Текст      = Шаблон;
		
		МакетОтчета.Область(ОбластьСтрока.Верх,1+1).ПараметрРасшифровки = Измерение.Имя;

		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1,ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+КоличествоПоказателей).ЦветФона   = ЦветИзмерения;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Отступ   = Сч;
		МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+1).Параметр = Измерение.Имя;
		
		Инд = 0;
		Для каждого Показатель из Показатели Цикл
			Если Показатель.Использование Тогда
				Инд = Инд + 1;

				МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+Инд).Параметр = Показатель.Имя;
				МакетОтчета.Область(ОбластьСтрока.Верх,1+КоличествоКолонок+Инд).Формат   = мТаблицаПоказатели.Найти(Показатель.Имя, "ИмяПоля").ФорматнаяСтрока;

				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+Инд).Параметр = Показатель.Имя;
				МакетОтчета.Область(ОбластьСтрокаИерархии.Верх,1+КоличествоКолонок+Инд).Формат   = мТаблицаПоказатели.Найти(Показатель.Имя, "ИмяПоля").ФорматнаяСтрока;
			КонецЕсли;
		КонецЦикла;

		Если КоличествоКолонок > 1 Тогда
			МакетОтчета.Область(ОбластьСтрока.Верх        , 1+1, ОбластьСтрока.Верх        , 1+КоличествоКолонок).Объединить();
			МакетОтчета.Область(ОбластьСтрокаИерархии.Верх, 1+1, ОбластьСтрокаИерархии.Верх, 1+КоличествоКолонок).Объединить();
		КонецЕсли;

		Измерение.Макет         = МакетОтчета.ПолучитьОбласть(ОбластьСтрока.Верх,         , ОбластьСтрока.Верх        );
		Измерение.МакетИерархии = МакетОтчета.ПолучитьОбласть(ОбластьСтрокаИерархии.Верх, , ОбластьСтрокаИерархии.Верх);

	КонецЦикла;
	МакетШапкиТаблицы = МакетОтчета.ПолучитьОбласть("ШапкаТаблицы");

	// Заголовок первой колонки
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда

		//В заголовке колонки детальной записи оставим только название последнего поля
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияСтроки[ПостроительОтчета.ИзмеренияСтроки.Количество()-1].Представление;
		Для Поз = 1 По СтрЧислоВхождений(ЗаголовокКолонки, ".") Цикл
			ЗаголовокКолонки = Сред(ЗаголовокКолонки, Найти(ЗаголовокКолонки,".")+1);
		КонецЦикла;
		МакетШапкиТаблицы.Область(2,1+1).Текст = ЗаголовокКолонки;

	КонецЕсли;

	ПостроительОтчета.МакетПодвалаТаблицы = МакетОтчета.ПолучитьОбласть("Подвал");

	// Шапка таблицы имеет внизу граница той же линией, что и вверху
	ШиринаТаблицы = 1+КоличествоКолонок+КоличествоПоказателей;
	ЛинияВверхуШапки = Новый Линия(МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.ТипЛинии, МакетШапкиТаблицы.Область(2, 2).ГраницаСверху.Толщина);
	МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2, МакетШапкиТаблицы.ВысотаТаблицы, ШиринаТаблицы).ГраницаСнизу = ЛинияВверхуШапки;
	МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 2, МакетШапкиТаблицы.ВысотаТаблицы, ШиринаТаблицы).ГраницаСверху = ЛинияВверхуШапки;

	// Назначим построителю сформированнный макет шапки
	//ПостроительОтчета.МакетШапкиТаблицы = МакетШапкиТаблицы;
	// Подвал отчета не выводится
	ПостроительОтчета.ВыводитьПодвалОтчета = Ложь;

	// Вывод в макет
	ПостроительОтчета.Выполнить();
	//МакетШапкиТаблицы = ПостроительОтчета.МакетШапкиТаблицы
	//МакетШапкиТаблицы.Показать();
	//возврат;
	ДокументРезультат.Очистить();

	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("КоличествоКолонок"    , КоличествоКолонок);
	СтруктураПараметров.Вставить("КоличествоПоказателей", КоличествоПоказателей);
	СтруктураПараметров.Вставить("СтруктураФорматаПолей", СтруктураФорматаПолей);
	СтруктураПараметров.Вставить("ВысотаЗаголовка"      , ВысотаЗаголовка);

	РезультатЗапроса = ПостроительОтчета.Результат;

	// 1. Вывод заголовка отчета
	ДокументРезультат.Вывести(ПостроительОтчета.МакетЗаголовкаОтчета);

	ТонкаяЛиния = МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+КоличествоКолонок+1).ГраницаСлева;
	ИсхШиринаТаблицы = 1+ КоличествоКолонок + КоличествоПоказателей;
	ДобавленоСтрок = 0;
	Для Сч=1 По ПостроительОтчета.ИзмеренияКолонки.Количество() Цикл
		Если Сч>1 Тогда
			ШапкаТаблицыСтрока = МакетШапкиТаблицы.Область("ШапкаТаблицыСтрока");
			МакетШапкиТаблицы.ВставитьОбласть(ШапкаТаблицыСтрока,,ТипСмещенияТабличногоДокумента.ПоВертикали);

			// Горизонтальные линии внутри - тонкие
			МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы,   2, МакетШапкиТаблицы.ВысотаТаблицы,  1+ИсхШиринаТаблицы).ГраницаСверху = ТонкаяЛиния;
			МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы-1, 2, МакетШапкиТаблицы.ВысотаТаблицы-1, 1+ИсхШиринаТаблицы).ГраницаСнизу = ТонкаяЛиния;

			ДобавленоСтрок = ДобавленоСтрок+1;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоПоказателей>1 Тогда
		ШапкаТаблицыСтрока = МакетШапкиТаблицы.Область("ШапкаТаблицыСтрока");
		МакетШапкиТаблицы.ВставитьОбласть(ШапкаТаблицыСтрока,,ТипСмещенияТабличногоДокумента.ПоВертикали);
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы,   2, МакетШапкиТаблицы.ВысотаТаблицы,  1+ИсхШиринаТаблицы).ГраницаСверху = ТонкаяЛиния;
		МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы-1, 2, МакетШапкиТаблицы.ВысотаТаблицы-1, 1+ИсхШиринаТаблицы).ГраницаСнизу = ТонкаяЛиния;
		Для а = 1 по КоличествоПоказателей Цикл
			МакетШапкиТаблицы.Область(МакетШапкиТаблицы.ВысотаТаблицы, 1+1+а).Текст = Показатели[а-1].Представление;
		КонецЦикла;
		ДобавленоСтрок = ДобавленоСтрок+1;
	КонецЕсли;
	// Объединение ячеек в начале шапки
	МакетШапкиТаблицы.Область(2, 2, 2+ДобавленоСтрок,1+КоличествоКолонок).Объединить();

	// 2. Вывод шапки таблицы
	ОбластьНачалоШапкиТаблицы = МакетШапкиТаблицы.ПолучитьОбласть(1,1,МакетШапкиТаблицы.ВысотаТаблицы,1+КоличествоКолонок);
	ДокументРезультат.Вывести(ОбластьНачалоШапкиТаблицы);

	МакетКолонкаШапкиДляСобственныхЦен = МакетШапкиТаблицы.ПолучитьОбласть(1,1+КоличествоКолонок+1,МакетШапкиТаблицы.ВысотаТаблицы,1+КоличествоКолонок+1);
	МакетКолонкаШапкиДляОстальныхЦен = МакетШапкиТаблицы.ПолучитьОбласть(1,1+КоличествоКолонок+1,МакетШапкиТаблицы.ВысотаТаблицы,1+КоличествоКолонок+КоличествоПоказателей);
	//МакетКолонкаШапкиДляСобственныхЦен.Показать();
	//МакетКолонкаШапкиДляОстальныхЦен.Показать();
//	возврат;
	
	ЛинияСлева = ДокументРезультат.Область(ВысотаЗаголовка+2, 2).ГраницаСлева;
	СтруктураПараметров.Вставить("ГраницаКолонки"   , Новый Линия(ЛинияСлева.ТипЛинии, ЛинияСлева.Толщина));
	СтруктураПараметров.Вставить("МакетКолонкаШапкиДляСобственныхЦен", МакетКолонкаШапкиДляСобственныхЦен);
	СтруктураПараметров.Вставить("МакетКолонкаШапкиДляОстальныхЦен", МакетКолонкаШапкиДляОстальныхЦен);

	// Здесь количество колонок показателей
	СтруктураПараметров.Вставить("КоличествоКолонокПоказателей", 0);

	// Дерево значений, представляющее набор и порядок значений измерений колонок отчета. Заполняется при выводе шапки 
	// и в дальнейшем определяет последовательность вывода ячеек со значениями показателей при выводе строк.
	ДеревоКолонкиОтчета = Новый ДеревоЗначений;
	ДеревоКолонкиОтчета.Колонки.Добавить("Значение");
	ДеревоКолонкиОтчета.Колонки.Добавить("ИмяИзмерения");
	ДеревоКолонкиОтчета.Колонки.Добавить("ЭтоОстальные");

	ВывестиКолонкуШапки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияКолонки[0].Имя, "Все"), 0, СтруктураПараметров, ДокументРезультат, ДеревоКолонкиОтчета);

	// Последовательность и значения колонок в шапке, как они заданы в ДеревоКолонкиОтчета, будут
	// использоваться для вывода строк по следующим причинам:
	// - При построении шапки обходятся все значения всех измерений колонки в правильном порядке
	// - На каждом уровне присутствуют не все значения из значений измерений колонки,
	// - Сортировка по агрегатной функции приводит к порядку выборки измерений, отличному от порядка в шапке
	СтруктураПараметров.Вставить("ДеревоКолонкиОтчета", ДеревоКолонкиОтчета);

	// 3. Вывод самой таблицы
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ВывестиСтроку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ПостроительОтчета.ИзмеренияСтроки[0].Имя), 0, СтруктураПараметров, ДокументРезультат);
	КонецЕсли;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// Ширина таблицы.
	ШиринаТаблицы = Неопределено;

	СтруктураПараметров.Свойство("КонКолонка", ШиринаТаблицы);
	Если ШиринаТаблицы = Неопределено Тогда
		ШиринаТаблицы = 1;
	КонецЕсли;

	// Зафиксируем колонки слева
	ДокументРезультат.ФиксацияСлева = 1+КоличествоКолонок;

	// Снизу граница той же линией, что и вверху в шапке таблицы
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, ДокументРезультат.ВысотаТаблицы, ШиринаТаблицы).ГраницаСнизу = ЛинияВверхуШапки;

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Справа граница той же линией, что и вверху в шапке таблицы
	ДокументРезультат.Область(ВысотаЗаголовка+2, ШиринаТаблицы, ДокументРезультат.ВысотаТаблицы, ШиринаТаблицы).ГраницаСправа = ЛинияВверхуШапки;

	// Слева граница той же линией, что и вверху в шапке таблицы
	ДокументРезультат.Область(ВысотаЗаголовка+2, 2, ДокументРезультат.ВысотаТаблицы, 2).ГраницаСлева = ЛинияВверхуШапки;

	// Фиксация шапки
	ДокументРезультат.ФиксацияСверху = ПостроительОтчета.МакетЗаголовкаОтчета.ВысотаТаблицы + МакетШапкиТаблицы.ВысотаТаблицы;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели = Новый ТаблицаЗначений;
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля",           ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеПоля",      ОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ВклПоУмолчанию",    ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("Пометка",           ОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока",   ОписаниеТиповСтрока);

МассивКатегории = Новый Массив;
МассивКатегории.Добавить(Тип("СправочникСсылка.КатегорииОбъектов"));
ОписаниеТиповКатегории = Новый ОписаниеТипов(МассивКатегории);

СтруктураФорматаПолей = Новый Структура;
СтруктураФорматаПолей.Вставить("ПериодЦен", "ДЛФ = Д");
мНазваниеОтчета = "Анализ цен";
ВалютаОтчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

мСтруктураСоответствияИмен = Новый Структура;

мСписокОтбора = Новый СписокЗначений;
мСписокОтбора.Добавить("Номенклатура");
мСписокОтбора.Добавить("ТипЦен");
#КонецЕсли
