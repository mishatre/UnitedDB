#Если Клиент Тогда

///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДанныеСервера;
Перем мИмяКомпьютера;
Перем мНетОшибки;
Перем мПрефиксВесовогоТовара;
Перем мДлинаКодаВесовогоТовара;
Перем мКачествоПустаяСсылка;
Перем мКачествоНовый;
Перем мEAN8;
Перем мEAN13;
Перем мCODE39;
Перем мМагнитнаяКарта;
Перем мХарактеристикиПустаяСсылка;
Перем мСерииПустаяСсылка;
Перем мОшибкаНеизвестныйШтрихкод;
Перем мОшибкаНеизвестно;
Перем мОшибкаНеизвестныйТовар;
Перем мОшибкаЗагрузкиОтчета;

Перем мДисплейПокупателя;
Перем мККМOffLine;
Перем мККМOnLine;
Перем мСчитывательМагнитныхКарт;
Перем мСканерШтрихКода;
Перем мТерминалСбораДанных;
Перем мФискальныйРегистратор;
Перем мЭлектронныеВесы;
Перем мВесыСПечатьюЭтикеток;
Перем мСчитывателиRFIDМеток;
Перем мЭквайринговыеСистемы;

Перем мОшибкаНеизвестнаяКарта;
Перем мПустаяКассаККМ;
Перем мНетПрав;

Перем мОписаниеОшибки;

Перем мМодельПодключаемогоТО;

Перем мВнешнееСобытиеОбработано;

Перем мАдресОбновленияОбработокОбслуживания;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ)

// Функция осуществляет подключение клиента к серверу.
//
// Параметры:
//  Клиент                         – <*>
//                                 - Клиент, планирующий взаимодействие с механизмом.
//                                   В случае, если Клиент = Неопределено,
//                                   считается, что клиентом является модуль
//                                   приложения.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьКлиента(Клиент) Экспорт

	Результат = мНетОшибки;
	КонечныйРезультат = мНетОшибки;

	Клиенты   = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты[Клиент] <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ВидТО = Неопределено;
	Для Каждого ВидТО Из Перечисления.ВидыТорговогоОборудования Цикл
		Если Клиент.ПоддерживаетсяВидТО(ВидТО) Тогда
			Результат = ПодключитьОборудование(ВидТО, Клиент);
			Если ЗначениеЗаполнено(Результат) Тогда
				КонечныйРезультат = мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(КонечныйРезультат) Тогда
		мОписаниеОшибки = "Произошла ошибка при подключении торгового оборудования";
		Ошибка = ПолучитьТекстОшибкиТО(КонечныйРезультат);
		Сообщить(Ошибка, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции // ПодключитьКлиента()

// Процедура осуществляет отключение клиента от сервера.
//
// Параметры:
//  Клиент                         – <*>
//                                 - Клиент, планирующий взаимодействие с механизмом.
//                                   В случае, если Клиент = Неопределено,
//                                   считается, что клиентом является модуль
//                                   приложения.
//
Процедура ОтключитьКлиента(Клиент) Экспорт

	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты[Клиент] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтключитьОборудование(Клиент);

КонецПроцедуры // ОтключитьКлиента()

// Функция осуществляет обработку внешнего события, информация о котором была
// получена клиентом.
//
// Параметры:
//  Событие                        - <Строка>
//                                 - Строка, идентифицирующая внешнее событие. Передаётся в
//                                   качестве параметра обработчику «ВнешнееСобытие».
//
//  Данные                         - <Строка>
//                                 - Данные, связанные с событием. Также передаётся в
//                                   качестве параметра обработчику «ВнешнееСобытие».
//
//  Клиент                         - <*>
//                                 - Клиент-получатель внешнего события.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВнешнееСобытие(Источник, Событие, Данные, Клиент) Экспорт

	Результат = мНетОшибки;

	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	События = Клиенты[Клиент];
	Если События <> Неопределено Тогда
		Для Каждого ТекСобытие Из События Цикл
			Если ТекСобытие.Источник   = Источник
			   И ТекСобытие.ИмяСобытия = Событие Тогда
				Оборудование = ПолучитьПараметрСервераТО("Оборудование",    "ТаблицаЗначений");
				ТО           = Оборудование.Найти(ТекСобытие.Идентификатор, "Идентификатор");
				ВидТО        = ТО.Вид;
				Обработка    = ТО.Обработка;
				Объект       = ТО.Объект;
				Результат = ОбработатьВнешнееСобытиеВнутр(ВидТО, Обработка, Объект,
				                                          Клиент, Событие, Данные,
				                                          ТекСобытие.Идентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет обработку строки штрихкода, введённой вручную.
//
// Параметры:
//  Штрихкод                       - <Строка>
//                                 - Введённый пользователем штрихкод.
//
//  Клиент                         - <*>
//                                 - Клиент.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВведенныйШтрихкод(Штрихкод, Клиент) Экспорт

	Результат = мНетОшибки;

	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат Результат;
	КонецЕсли;

	ТипШК     = Неопределено;
	ШК        = Штрихкод;
	СШК       = "00000000-0000-0000-0000-000000000000";

	Если НЕ ЗначениеЗаполнено(ТипШК) Тогда
		Если      РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК) Тогда
			ТипШК = мEAN8;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
			ТипШК = мEAN13;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаCODE39ТО(ШК) Тогда
			ТипШК = мCODE39;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    СпрСН.Ссылка КАК СерийныйНомер
	|ИЗ
	|    Справочник.СерийныеНомера КАК СпрСН
	|ГДЕ
	|    (ВЫРАЗИТЬ(СпрСН.Код КАК СТРОКА(" + Формат(СтрДлина(ШК), "ЧН=0; ЧГ=0") + "))) = &Код");
	Запрос.УстановитьПараметр("Код", ШК);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатЗапроса.Выбрать();
		РезультатЗапроса.Следующий();

		Ответ = Клиент.СШКСерийныйНомер(РезультатЗапроса.СерийныйНомер, СШК);
		Если Ответ Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(мПрефиксВесовогоТовара)
		 И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
		 И ТипШК = мEAN13
		 И Лев(ШК, 2) = "2" + мПрефиксВесовогоТовара Тогда

		КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
		КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);
		Запрос           = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегКВТ.Номенклатура                         КАК Номенклатура,
		|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|    " + КоличествоТовара + " / 1000             КАК Количество,
		|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегКВТ.Качество
		|    КОНЕЦ                                       КАК Качество
		|ИЗ
		|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		|ГДЕ
		|    РегКВТ.Код = &Код");
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
		Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
		Запрос.УстановитьПараметр("Код",                  Число(КодТовара));

		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			РезультатЗапроса.Следующий();

			Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Номенклатура,
										   РезультатЗапроса.ХарактеристикаНоменклатуры,
										   РезультатЗапроса.СерияНоменклатуры,
										   РезультатЗапроса.Качество,
										   РезультатЗапроса.ЕдиницаИзмерения,
										   РезультатЗапроса.Количество,
										   СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Владелец,
	|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    РегШК.Качество                   КАК Качество
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", ШК);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатЗапроса.Выбрать();
		РезультатЗапроса.Следующий();
		Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			Ответ = Клиент.СШКИнформационнаяКарта(РезультатЗапроса.Владелец, СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		Иначе // Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура")
			Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Владелец,
										   РезультатЗапроса.ХарактеристикаНоменклатуры,
										   РезультатЗапроса.СерияНоменклатуры,
										   РезультатЗапроса.Качество,
										   РезультатЗапроса.ЕдиницаИзмерения,
										   1,
										   СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Ответ = Клиент.СШКНеизвестныйКод(ШК, ТипШК, СШК);
	Если Ответ Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = мОшибкаНеизвестныйШтрихкод;
	Клиент.СШКОшибка(Результат, ШК, ТипШК, СШК);

	Возврат Результат;

КонецФункции // ОбработатьВведенныйШтрихкод()

// Функция возвращает список идентификаторов подключенных устройств заданного вида.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информацию о котором необходимо получить.
//
//  КассаККМ - <СправочникСсылка.КассыККМ>
//           - Касса ККМ, к которой подключено данное оборудование.
//             В случае, если данный параметр соответствует пустой ссылке,
//             будет возвращено всё торговое оборудование указанного вида.
//
// Возвращаемое значение:
//  <Массив> - Список идентификаторов устройств.
//
Функция ПолучитьСписокУстройств(Вид, КассаККМ = Неопределено) Экспорт

	НеЗаданаКассаККМ = НЕ ЗначениеЗаполнено(КассаККМ);

	Результат = Новый Массив();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|    РегТО.Идентификатор КАК Идентификатор
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Вид = &Вид
	|    И РегТО.Компьютер = &Компьютер
	|    И РегТО.Подключено
	|" + ?(НеЗаданаКассаККМ, "", "    И РегТО.КассаККМ = &КассаККМ"));
	Запрос.УстановитьПараметр("Вид"       , Вид);
	Запрос.УстановитьПараметр("Компьютер" , ПолучитьИмяКомпьютераТО());
	Если Не НеЗаданаКассаККМ Тогда
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	КонецЕсли;

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

	Возврат Результат;

КонецФункции // ПолучитьСписокУстройств()

// Функция возвращает представление экземпляра торгового оборудования, пригодное
// для отображения в интерфейсе пользователя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор, представление которого запрашивается.
//
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Выходной параметр; после удачного завершения работы данной
//                                   функции данный параметр будет содержать вид торгового
//                                   оборудования, к которому принадлежит устройство, соответствующее
//                                   переданному идентификатору.
//
//  Представление                  - <Строка>
//                                 - Выходной параметр; после удачного завершения работы данной
//                                   функции данный параметр будет содержать представление экземпляра
//                                   торгового оборудования, соответствующее переданному
//                                   идентификатору.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПолучитьПредставлениеУстройства(Идентификатор, Вид, Представление) Экспорт

	Результат = мНетОшибки;
	Запрос    = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|    РегТО.Модель.Наименование КАК Наименование,
	|    РегТО.Вид                 КАК Вид
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		РезультатЗапроса = РезультатЗапроса.Выгрузить()[0];
		Вид              = РезультатЗапроса.Вид;
		Представление    = РезультатЗапроса.Наименование;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПредставлениеУстройства()

// Функция возвращает текущую версию API конфигурации для торгового оборудования.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьВерсиюAPIКонфигурацииТО() Экспорт

	Результат = 2.05;

	Возврат Результат;

КонецФункции // ПолучитьВерсиюAPIКонфигурацииТО()

// Функция, производящая отключение обработок обслуживания
// Применяется для переподключения вновь загруженных обработок обслуживания
Функция ОтключитьОбработкиОбслуживания() Экспорт

	Результат = Ложь;
	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты.Количество() = 0 Тогда
		мДанныеСервера =Неопределено;
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция получает и возвращает ссылку на элемент справочника ОбработкиОбслуживания
// из переданной в параметре "СправочникТО" ссылки на элемент справочника "ТорговоеОборудование"
Функция ПолучитьОбработкуОбслуживания(СправочникТО) Экспорт

	Результат = Неопределено;
	Обработка = Неопределено;

	Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СправочникТО, Обработка);
	Если ЗначениеЗаполнено(Результат) Тогда
		Обработка = Неопределено;

		ТекстОшибки = """" + СправочникТО.Модель + """: " + ПолучитьТекстОшибкиТО(Результат);
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат Обработка;

КонецФункции

// Вызывает у переданной обработки обслуживания функцию создания объекта драйвера
// "Модель" и "Параметры" - выходные параметры
Функция СоздатьОбъектДрайвера(ОбработкаОбслуживания, Модель, Параметры) Экспорт

	Объект    = Неопределено;
	Результат = Неопределено;
	Форма     = ОбработкаОбслуживания.ПолучитьФорму();

	Результат = Форма.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
	Если ЗначениеЗаполнено(Результат) ТОгда
		Объект = Неопределено;

		ТекстОшибки = """" + Модель + """:
		    |" + ПолучитьТекстОшибкиТО(Результат);
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат Объект;

КонецФункции

// Вызывает у обработки обслуживания функцию, получающую и открывающую форму настройки
// параметров модели ТО
Процедура НастроитьДрайвер(ОбработкаОбслуживания, Модель, Параметры) Экспорт

	Форма = ОбработкаОбслуживания.ПолучитьФорму();

	Форма.НастроитьОборудование(Модель, Параметры);

КонецПроцедуры

// Вызывает у обработки обслуживания функцию проверки настроенных параметров
Функция ТестДрайвера(ОбработкаОбслуживания, ОбъектОО) Экспорт

	Результат = Неопределено;
	Форма     = ОбработкаОбслуживания.ПолучитьФорму();
	
	ОбъектОО.ОписаниеОшибки = "";
	Результат = Форма.ТестУстройства(ОбъектОО);
	ДопИнфо = ОбъектОО.ОписаниеОшибки;
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекстОшибки = """" + ОбъектОО.Модель + """:
		    |" + ПолучитьТекстОшибкиТО(Результат);
		ТекстОшибки = ТекстОшибки + "
		    |" + ДопИнфо;
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат Не ЗначениеЗаполнено(Результат)

КонецФункции

// Возвращает версию API, поддерживаемую обработкой обслуживания
Функция ПолучитьВерсиюAPIОбработкиОбслуживания(ОбработкаОбслуживания) Экспорт

	Форма = ОбработкаОбслуживания.ПолучитьФорму();

	Возврат ?(Форма.ПолучитьВерсиюAPI() <> 2.1, Форма.ПолучитьВерсиюAPI(), 2.01);

КонецФункции

// Возвращает структуру, содержащую необходимую информацию об обработке обслуживания
Функция ПолучитьОписаниеОбработкиОбслуживания(ОбработкаОбслуживания) Экспорт

	Форма = ОбработкаОбслуживания.ПолучитьФорму();
	
	Попытка
		ОписаниеОО = ОбработкаОбслуживания.ПолучитьОписание();
	Исключение
		ОписаниеОО = Новый Структура("Вид, СписокМоделей, Наименование, Описание, ВерсияОбработки, Идентификатор");
	КонецПопытки;

	Возврат ОписаниеОО;

КонецФункции

// Возвращает строку адреса ресурса обновления обработок обслуживания
Функция ПолучитьАдресОбновленияОбработокОбслуживания() Экспорт

	Возврат мАдресОбновленияОбработокОбслуживания;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ДИСПЛЕИ ПОКУПАТЕЛЯ)

// Функция осуществляет вывод строки на дисплей покупателя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор дисплея покупателя.
//
//  Данные                         - <Строка>
//                                 - Строка, которую необходимо отобразить на
//                                   дисплеях покупателя.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ВывестиСтрокуНаДисплейПокупателя(Идентификатор, Данные) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Вывод(Объект, Данные);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("дисплея покупателя");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВывестиСтрокуНаДисплейПокупателя()

// Функция осуществляет вывод строк на дисплей покупателя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор дисплея покупателя.
//
//  ТаблицаСтрок                   - <ТаблицаЗначений>
//                                 - Таблица, которая содержит список строк,
//                                   а также признак бегущей строки, для 
//                                   вывода на дисплей покупателя.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ВывестиСтрокиНаДисплейПокупателя(Идентификатор, ТаблицаСтрок) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ВывестиСтрокиНаДисплейПокупателя(Объект, ТаблицаСтрок);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("дисплея покупателя");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция очищает дисплей покупателя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор дисплея покупателя.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОчиститьДисплейПокупателя(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Очистить(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("дисплея покупателя");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОчиститьДисплейПокупателя()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ЭЛЕКТРОННЫЕ ВЕСЫ)

// Функция задаёт вес тары на электронных весах.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
//  ВесТары                        - <Число>, <Неопределено>
//                                 - В случае, если значение не задано
//                                   («Неопределено»), тогда фиксируется вес тары.
//                                   Иначе – он задаётся равным данному параметру.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТарированиеЭВ(Идентификатор, ВесТары = Неопределено) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Если ВесТары = Неопределено Тогда
			Вес       = Неопределено;
			Результат = Обработка.Вес(Объект, Вес);
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = Обработка.Тарирование(Объект, Вес);
			КонецЕсли;
		Иначе
			Результат = Обработка.Тарирование(Объект, ВесТары);
		КонецЕсли;
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("электронных весов");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ТарированиеЭВ()

// Функция осуществляет получение веса от электронных весов.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
//  Вес                            - <Число>
//                                 - Выходной параметр; вес товара.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьВесЭВ(Идентификатор, Вес) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Вес(Объект, Вес);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("электронных весов");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьВесЭВ()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ВЕСЫ С ПЕЧАТЬЮ ЭТИКЕТОК)

// Функция инициализирует выгрузку в весы с печатью этикеток.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор весов с печатью этикеток.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция НачатьВыгрузкуВВесыСПечатьюЭтикеток(Идентификатор, ЧастичнаяВыгрузка = Неопределено) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НачатьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("весов с печатью этикеток");
	КонецЕсли;

	Возврат Результат;

КонецФункции // НачатьВыгрузкуВВесыСПечатьюЭтикеток()

// Функция осуществляет выгрузку позиции в весы с печатью этикеток.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор весов с печатью этикеток.
//
//  PLU                            - <Число>
//                                 - Номер PLU.
//
//  КодТовара                      - <Число>
//                                 - Код товара.
//
//  Наименование                   - <Строка>
//                                 - Наименование номенклатуры.
//
//  Цена                           - <Число>
//                                 - Цена номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьПозициюВВесыСПечатьюЭтикеток(Идентификатор, PLU, КодТовара, Наименование, Цена) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат       = Обработка.Выгрузить(Объект, PLU, КодТовара, Наименование, Цена);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("весов с печатью этикеток");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВыгрузитьПозициюВВесыСПечатьюЭтикеток()

// Функция деинициализирует выгрузку в весы с печатью этикеток.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор весов с печатью этикеток.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьВыгрузкуВВесыСПечатьюЭтикеток(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗавершитьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("весов с печатью этикеток");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗавершитьВыгрузкуВВесыСПечатьюЭтикеток()

// Функция выгружает таблицу товаров в весы с печатью этикеток.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьТоварыВесы(Идентификатор, Товары, ЧастичнаяВыгрузка = Неопределено) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ВыгрузитьТаблицу(Объект, Товары);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("весов с печатью этикеток");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВыгрузитьТоварыВесы()

// Функция очищает таблицу товаров в весы с печатью этикеток.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор электронных весов.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОчиститьТоварыВВесах(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат  = Обработка.ОчиститьТоварыВВесах(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("весов с печатью этикеток");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОчиститьТоварыВВесах()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ТСД)

// Функция инициализирует выгрузку в терминал сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция НачатьВыгрузкуТСД(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НачатьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // НачатьВыгрузкуТСД()

// Функция осуществляет выгрузку строки в терминал сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод товара.
//
//  Номенклатура                   - <СправочникСсылка.Номенклатура>
//                                 - Номенклатура.
//
//  ЕдиницаИзмерения               - <СправочникСсылка.ЕдиницыИзмерения>
//                                 - Единица измерения номенклатуры.
//
//  ХарактеристикаНоменклатуры     - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                 - Характеристика номенклатуры.
//
//  СерияНоменклатуры              - <СправочникСсылка.СерииНоменклатуры>
//                                 - Серия номенклатуры.
//
//  Качество                       - <СправочникСсылка.Качество>
//                                 - Качество.
//
//  Цена                           - <Число>
//                                 - Цена номенклатуры.
//
//  Количество                     - <Число>
//                                 - Количество номенклатуры.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьСтрокуТСД(Идентификатор, Штрихкод, Номенклатура, ЕдиницаИзмерения,
                           ХарактеристикаНоменклатуры, СерияНоменклатуры,
                           Качество, Цена, Количество) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ВыгрузитьСтроку(Объект, Штрихкод, Номенклатура,
		                                      ЕдиницаИзмерения, ХарактеристикаНоменклатуры,
		                                      СерияНоменклатуры, Качество, Цена, Количество);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВыгрузитьСтрокуТСД()

// Функция деинициализирует выгрузку в терминал сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьВыгрузкуТСД(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗавершитьВыгрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗавершитьВыгрузкуТСД()

// Функция инициализирует загрузку из терминала сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  Количество                     - <Число>
//                                 - Выходной параметр; количество записей
//                                   в терминале.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция НачатьЗагрузкуТСД(Идентификатор, Количество) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НачатьЗагрузку(Объект, Количество);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // НачатьЗагрузкуТСД()

// Функция осуществляет загрузку позиции из терминала сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  ДанныеИзТСД                     - Таблица значений, в которую будет добавлена загруженная строка.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗагрузитьСтрокуТСД(Идентификатор, ДанныеИзТСД) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ШК         = Неопределено;
		Количество = Неопределено;

		Результат = Обработка.ЗагрузитьСтроку(Объект, ШК, Количество);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			НоваяСтрока = ДанныеИзТСД.Добавить();
			НоваяСтрока.ШК         = ШК;
			НоваяСтрока.Количество = Количество;
		КонецЕсли;

		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьСтрокуТСД()

// Функция деинициализирует загрузку из терминала сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьЗагрузкуТСД(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗавершитьЗагрузку(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗавершитьЗагрузкуТСД()

/////////////////// Новые функции для работы с ТСД ////////////////////////////

// Функция осуществляет выгрузку таблицы в терминал сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  ТаблицаВыгрузки                - <ТаблицаЗначений>
//                                 - Таблица товаров, выгружаемых в ТСД.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьТаблицуТСД(Идентификатор, ТаблицаВыгрузки) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ВыгрузитьТаблицу(Объект, ТаблицаВыгрузки);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВыгрузитьСтрокуТСД()

// Функция осуществляет загрузку таблицы из терминала сбора данных.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор терминала сбора данных.
//
//  ТаблицаЗагрузки                - <ТаблицаЗначений>
//                                 - Таблица товаров, загруженных из ТСД.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗагрузитьТаблицуТСД(Идентификатор, ТаблицаЗагрузки)Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;

	ТаблицаЗагрузки = Новый ТаблицаЗначений;
	ТаблицаЗагрузки.Колонки.Добавить("Штрихкод");
	ТаблицаЗагрузки.Колонки.Добавить("Количество");

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗагрузитьТаблицу(Объект, ТаблицаЗагрузки);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ТСД");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьСтрокуТСД()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ФР)

// Функция осуществляет печать чека для приходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаПКО(Идентификатор, Пароль, НомерЧека, НомерСмены,
                         ОписаниеПлатежа, СуммаНал, СуммаБезнал) Экспорт

	Результат = мНетОшибки;

	Результат = ПечатьЧекаПКОРКО(Идентификатор, Ложь, Пароль, НомерЧека, НомерСмены,
								 ОписаниеПлатежа, СуммаНал, СуммаБезнал);

	Возврат Результат;

КонецФункции // ПечатьЧекаПКО()

// Функция осуществляет печать чека для расходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаРКО(Идентификатор, Пароль, НомерЧека, НомерСмены,
                         ОписаниеПлатежа, СуммаНал, СуммаБезнал) Экспорт

	Результат = мНетОшибки;

	Результат = ПечатьЧекаПКОРКО(Идентификатор, Истина, Пароль, НомерЧека, НомерСмены,
		                             ОписаниеПлатежа, СуммаНал, СуммаБезнал);

	Возврат Результат;

КонецФункции // ПечатьЧекаРКО()

// Функция осуществляет печать чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеЧека                   - <ТаблицаЗначений>
//                                 - Описание чека. Таблица имеет следующие колонки:
//                                     Наименование - <Строка>
//                                                  - Наименование позиции.
//                                     НомерСекции  - <Число>
//                                                  - Номер секции.
//                                     Цена         - <Число>
//                                                  - Цена за единицу.
//                                     Количество   - <Число>
//                                                  - Количество единиц.
//                                     Скидка       - <Число>
//                                                  - Процент скидки (>0) или наценки (<0).
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
//  ПризнакВозврата                - <Булево>
//                                 - Признак необходимости печати чека на возврат.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧека(Идентификатор, Пароль, НомерЧека, НомерСмены,
                ОписаниеЧека, СуммаНал, СуммаБезнал, ПризнакВозврата) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОткрытьЧек(Объект, Пароль, ПризнакВозврата, НомерЧека, НомерСмены, Истина);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Позиция = Неопределено;
			Для Каждого Позиция Из ОписаниеЧека Цикл
				ЗначениеСкидки = Позиция.Количество * Позиция.Цена * Позиция.Скидка * 0.01;
				СуммаСоСкидкой1С = Окр(Позиция.Количество * Позиция.Цена - ЗначениеСкидки, 2);
				СуммаСоСкидкойФР = Окр(Позиция.Количество * Позиция.Цена - Окр(ЗначениеСкидки, 2), 2);

				Если СуммаСоСкидкой1С = СуммаСоСкидкойФР Тогда
					Результат = Обработка.ПечататьСтроку(Объект,
												   Позиция.Наименование,
												   Позиция.Количество,
												   Позиция.Цена,
												   Позиция.Скидка,
												   Позиция.НомерСекции,
												   Позиция.СтавкаНДС);
				Иначе
					Результат = Обработка.ПечататьСтроку(Объект,
												   Позиция.Наименование,
												   1,
												   СуммаСоСкидкой1С,
												   0,
												   Позиция.НомерСекции,
												   Позиция.СтавкаНДС);
				КонецЕсли;

				Если ЗначениеЗаполнено(Результат) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
			КонецЕсли;
		КонецЕсли;

		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПечатьЧека()

// Функция осуществляет получение параметров наличной оплаты.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  НомерОтдела                    - <Булево>
//                                 - Номер отдела, по которому производится оплата.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьПараметрыНаличнойОплаты(Идентификатор, НомерОтдела) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ПолучитьПараметрыНаличнойОплаты(Объект, НомерОтдела);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОткрытьЧек()

// Функция осуществляет открытие чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ПризнакВозврата                - <Булево>
//                                 - Признак необходимости печати чека на возврат.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОткрытьЧек(Идентификатор, Пароль, ПризнакВозврата, НомерЧека, НомерСмены, ФискальныйЧек = Истина) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОткрытьЧек(Объект, Пароль, ПризнакВозврата, НомерЧека, НомерСмены, ФискальныйЧек);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОткрытьЧек()

// Функция осуществляет печать строки чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  СтрокаЧека                     - <Структура>
//                                     Наименование - <Строка>
//                                                  - Наименование позиции.
//                                     НомерСекции  - <Число>
//                                                  - Номер секции.
//                                     Цена         - <Число>
//                                                  - Цена за единицу.
//                                     Количество   - <Число>
//                                                  - Количество единиц.
//                                     Скидка       - <Число>
//                                                  - Процент скидки (>0) или наценки (<0).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьСтрокиЧека(Идентификатор, СтрокаЧека) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ПечататьСтроку(Объект,
		                                 СтрокаЧека.Наименование,
		                                 СтрокаЧека.Количество,
		                                 СтрокаЧека.Цена,
		                                 СтрокаЧека.Скидка,
		                                 СтрокаЧека.НомерСекции,
		                                 СтрокаЧека.СтавкаНДС);

		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПечатьСтрокиЧека()

// Функция осуществляет закрытие чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗакрытьЧек(Идентификатор, СуммаНал, СуммаБезнал) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗакрытьЧек()

// Функция осуществляет отмену чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтменитьЧек(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОтменитьЧек(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтменитьЧек()

// Функция осуществляет аннулирование чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция АннулироватьЧек(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.АннулироватьЧек(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // АннулироватьЧек()

// Функция осуществляет внесение суммы в ФР.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  Сумма                          - <Число>
//                                 - Вносимая (>0) или изымаемая (<0) сумма.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВнестиСумму(Идентификатор, Пароль, Сумма) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Сумма(Объект, Пароль, Сумма);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВнестиСумму()

// Функция осуществляет снятие отчёта без гашения.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтчетБезГашения(Идентификатор, Пароль) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.XОтчет(Объект, Пароль, Неопределено, Неопределено);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтчетБезГашения()

// Функция осуществляет снятие отчёта с гашением.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтчетСГашением(Идентификатор, Пароль) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ZОтчет(Объект, Пароль, НомерЧека, НомерСмены);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтчетСГашением()

// Функция осуществляет печать массива произвольных строк.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  МассивСтрокСлипЧека            - <Массив>
//                                 - Массив строк для печати на ФР.
//
//  ШиринаЧека                     - <Число>
//                                 - Указывает маскимальную ширину строки передаваемого текста.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьТекста(Идентификатор, МассивСтрокСлипЧека, ШиринаЧека) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НапечататьСтроки(Объект, МассивСтрокСлипЧека, ШиринаЧека);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверяется возможность печати нефискальных строк в фискальном чеке
Функция ПоддерживаетсяСмешанныйРежимПечати(Идентификатор) Экспорт
	
	Результат   = Неопределено;
	Обработка   = Неопределено;
	Объект      = Неопределено;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ПоддерживаетсяСмешанныйРежимПечати();
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ККМ Offline)

// Функция осуществляет получение параметров выгрузки данных в ККМ Offline.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Offline.
//
//  НеобходимШтрихкод              - <Булево>
//                                 - Выходной параметр; признак необходимости
//                                   выгружать в ККМ только те товары, для
//                                   которых назначен штрихкод.
//
//  ВесовойТовар                   - <Булево>
//                                 - Выходной параметр; признак возможности
//                                   работы ККМ с весовым товаром.
//
//  ТипыШтрихкодов                 - <Массив>
//                                 - Массив типов штрихкодов, поддерживаемых
//                                   ККМ.
//
//  КассаККМ                       - <СправочникСсылка.КассыККМ>
//                                 - КассаККМ, с которой связано данное
//                                   устройство.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьПараметрыВыгрузкиOffline(Идентификатор, НеобходимШтрихкод,
                                         ВесовойТовар, ТипыШтрихкодов,
                                         КассаККМ) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ПолучитьПараметрыВыгрузки(Объект, НеобходимШтрихкод,
		                                                 ВесовойТовар, ТипыШтрихкодов);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			КассаККМ = ПолучитьКассуККМ(Идентификатор);
		Иначе
			мОписаниеОшибки = Объект.ОписаниеОшибки;
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Offline");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПараметрыВыгрузкиOffline()

// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Offline.
//
//  Товары                         - <ТаблицаЗначений>
//                                 - Таблица товаров, подлежащих загрузке в ККМ.
//                                   Таблица имеет следующие колонки:
//                                     ПЛУ                        - <Число>
//                                                                - Идентификатор товара на кассе.
//                                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                                - Номенклатура.
//                                     ВесовойТовар               - <Булево>
//                                                                - Товар является весовым.
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения номенклатуры.
//                                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                                - Характеристика номенклатуры.
//                                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                                - Серия номенклатуры.
//                                     Цена                       - <Число>
//                                                                - Цена номенклатуры.
//                                     КодТовара                  - <Число>, <Строка>
//                                                                - Код весового товара (для весовых товаров),
//                                                                  или штрихкод (для штучного товара).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВыгрузитьТоварыККМ(Идентификатор, Товары) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ВыгрузитьТовары(Объект, Товары);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Offline");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВыгрузитьТоварыККМ()

// Функция осуществляет загрузку отчета о продажах из ККМ, подключенной в режиме Offline.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Offline.
//
//  Отчет                          - <ТаблицаЗначений>
//                                 - Выходной параметр; таблица с данными о
//                                   продажах за смену. Таблица имеет следующие
//                                   колонки:
//                                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                                - Проданный товар.
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения проданного товара.
//                                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                                - Характеристика проданного товара.
//                                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                                - Серия проданного товара.
//                                     Качество                   - <СправочникСсылка.Качество>
//                                                                - Качество проданного товара.
//                                     Количество                 - <Число>
//                                                                - Количество проданного (>0) или возвращённого (<0) товара.
//                                     Цена                       - <Число>
//                                                                - Цена за единицу товара.
//                                     Сумма                      - <Число>
//                                                                - Сумма позиции. >0 при продаже, <0 при возврате.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗагрузитьОтчетОПродажах(Идентификатор, Отчет) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Отчет      = Новый ТаблицаЗначений();

		Отчет.Колонки.Добавить("Номенклатура");
		Отчет.Колонки.Добавить("ЕдиницаИзмерения");
		Отчет.Колонки.Добавить("ХарактеристикаНоменклатуры");
		Отчет.Колонки.Добавить("СерияНоменклатуры");
		Отчет.Колонки.Добавить("Качество");
		Отчет.Колонки.Добавить("Количество");
		Отчет.Колонки.Добавить("Цена");
		Отчет.Колонки.Добавить("Сумма");

		НомерЧека       = Неопределено;
		НомерСмены      = Неопределено;
		ВремОтчет       = Неопределено;
		СтрокаОтчета    = Неопределено;
		Результат       = Обработка.ЗагрузитьОтчет(Объект, ВремОтчет);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|    РегТО.КассаККМ
			|ИЗ
			|    РегистрСведений.ТорговоеОборудование КАК РегТО
			|ГДЕ
			|    РегТО.Идентификатор = &Идентификатор");
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
			КассаККМ = Запрос.Выполнить().Выгрузить()[0].КассаККМ;
			Позиция = Неопределено;
			Для каждого Позиция Из ВремОтчет Цикл
				ОписаниеПозиции = РаботаСТорговымОборудованием.ПолучитьОписаниеТовараККМ(КассаККМ, Позиция.ПЛУ);
				Если ОписаниеПозиции = Неопределено Тогда
					Отчет.Очистить();
					Результат = мОшибкаЗагрузкиОтчета;
					Прервать;
				КонецЕсли;
				
				СтрокаОтчета = Отчет.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, ОписаниеПозиции);
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, Позиция, "Количество, Цена, Сумма");
			КонецЦикла;
		КонецЕсли;
		
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Offline");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьОтчетОПродажах()

// Функция извещает ККМ, подключенную в режиме Offline, об окончании загрузки отчёта.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор ККМ, подключаемой в режиме
//                                   Offline.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗавершитьЗагрузкуОтчетаОПродажах(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ОтчетЗагружен(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ККМ Offline");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗавершитьЗагрузкуОтчетаОПродажах()

// Функция возвращает ПЛУ товара по штрихкоду для заданного объекта драйвера ККМ Offline.
// Используется в обработках обслуживания.
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера оборудования.
//
//  Штрихкод                       - <Строка>
//                                 - Штрихкод товара.
//
//  ПЛУ                            - <Число>
//                                 - Выходной параметр; ПЛУ товара.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьПЛУПоШтрихкоду(Объект, Штрихкод, ПЛУ) Экспорт

	Результат = мНетОшибки;

	ТО = ПолучитьТО();

	СтрокаТО = ТО.Найти(Объект, "Объект");
	Если СтрокаТО = Неопределено Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		Идентификатор = СтрокаТО.Идентификатор;
		КассаККМ      = ПолучитьКассуККМ(Идентификатор);
		Запрос        = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегТовары.Код КАК ПЛУ
		|ИЗ
		|    РегистрСведений.ТоварыНаККМ КАК РегТовары
		|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегШК
		|        ПО   РегТовары.Номенклатура               = РегШК.Владелец
		|           И РегТовары.ХарактеристикаНоменклатуры = РегШК.ХарактеристикаНоменклатуры
		|           И РегТовары.СерияНоменклатуры          = РегШК.СерияНоменклатуры
		|           И РегТовары.ЕдиницаИзмерения           = РегШК.ЕдиницаИзмерения
		|           И РегТовары.КассаККМ                   = &КассаККМ
		|           И РегШК.Штрихкод                       = &Штрихкод");
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Результат = мОшибкаНеизвестно;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПЛУ = Выборка.ПЛУ;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПЛУПоШтрихкоду()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ККМ)

// Функция возвращает пароль кассира, заданный в текущих настройках пользователя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <Число> - Пароль кассира.
//
Функция ПолучитьПарольКассираККМ() Экспорт

	Результат = ПолучитьПарольККМ(Истина);

	Возврат Результат;

КонецФункции // ПолучитьПарольКассираККМ()

// Функция возвращает пароль администратора, заданный в текущих настройках пользователя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <Число> - Пароль администратора.
//
Функция ПолучитьПарольАдминистратораККМ() Экспорт

	Результат = ПолучитьПарольККМ(Ложь);

	Возврат Результат;

КонецФункции // ПолучитьПарольАдминистратораККМ()

// Функция осуществляет получение кассы ККМ, с которой связано устройство.
//
// Параметры:
//  Идентификатор               - <Строка>
//                              - Идентификатор ККМ.
//
// Возвращаемое значение:
//  <СправочникСсылка.КассыККМ> - Касса ККМ, с которой связано устройство.
//
Функция ПолучитьКассуККМ(Идентификатор) Экспорт

	Результат = мПустаяКассаККМ;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|    РегТО.КассаККМ
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.КассаККМ;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьКассуККМ()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (Считыватели RFID)

// Производит обнаружение меток в поле считывателя и возвращает в параметре количество обнаруженных меток. 
// Результат – успех выполнения функции.
//
Функция ПолучитьКоличествоМетокRFID(Идентификатор, КоличествоМеток) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ПолучитьКоличествоМетокRFID(Объект, КоличествоМеток);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;

	Возврат Результат;

КонецФункции

//Считывает все данные из обнаруженных меток и возвращает в параметре структуру, содержащую идентификаторы меток и данные. 
// Результат – успех выполнения функции.
//
Функция ПрочитатьДанныеИзМетокRFID(Идентификатор, КоличествоМеток, ДанныеИзМеток) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат  = Обработка.ПрочитатьДанныеИзМетокRFID(Объект, КоличествоМеток, ДанныеИзМеток);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Записывает переданные данные в метки, находящиеся в поле считывателя.
// Результат – успех выполнения функции.
//
Функция ЗаписатьДанныеВМеткиRFID(Идентификатор, КоличествоМеток, ДанныеДляЗаписи, ЗаписанноеКолвоМеток) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат  = Обработка.ЗаписатьДанныеВМеткиRFID(Объект, КоличествоМеток, ДанныеДляЗаписи, ЗаписанноеКолвоМеток);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Устанавливает режим работы драйвера (активный/пассивный).
// Результат – успех выполнения функции.
//
Функция УстановитьРежимДрайвераRFID(Идентификатор, АктивныйРежим) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.УстановитьРежимДрайвера(Объект, АктивныйРежим);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Открывает новую сессию для чтения данных из меток, попадающих в поле считывателя.
// Результат – успех выполнения функции.
//
Функция ОткрытьСессиюRFID(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОткрытьСессиюRFID(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Закрывает открытую ранее сессию.
// Результат – успех выполнения функции.
//
Функция ЗакрытьСессиюRFID(Идентификатор, ИгнорироватьМеткиВПоле, КоличествоМеток) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат  = Обработка.ЗакрытьСессиюRFID(Объект, ИгнорироватьМеткиВПоле, КоличествоМеток);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("считывателей RFID меток");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Обрабатывает пришедшее событие от считывателя RFID меток.
// Результат – успех выполнения функции.
//
Функция ОбработатьСобытиеОтRFID(Обработка, Объект, Клиент, Событие, Данные, Идентификатор) Экспорт

	Результат     = Ложь;
	ДанныеИзМеток = Неопределено;

	Если Событие = "ЧтениеМеток" Тогда
		ДанныеИзМеток = Новый ТаблицаЗначений;
		ДанныеИзМеток.Колонки.Добавить("Идентификатор");
		ДанныеИзМеток.Колонки.Добавить("ШК");

		Результат = Обработка.ОбработатьСобытиеОтRFID(Объект, Событие, Данные, ДанныеИзМеток);
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ДанныеИзМеток.Колонки.Добавить("Количество");
			ДанныеИзМеток.ЗаполнитьЗначения(1, "Количество");

			Результат = Клиент.RFIDЧтениеМеток(ДанныеИзМеток);
		Иначе
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Событие = "МеткаВПоле" Тогда
		// Оповестить, что осуществлен пронос в поле считывателя товара с метками.
		Результат = Клиент.RFIDМеткаВПоле(Событие, Данные);
	ИначеЕсли Событие = "НетМетокВПоле" Тогда
		// Оповестить, что все метки исчезли из поля.
		Результат = Клиент.RFIDНетМетокВПоле(Событие, Данные);
	ИначеЕсли Событие = "ОшибкаВДрайвере" Тогда
		// Отобразить сообщение о проблемах с драйвером.
		Результат = Клиент.RFIDОшибкаВДрайвере(Событие, Данные);
	КонецЕсли;

	мВнешнееСобытиеОбработано = Результат;
	
	мОписаниеОшибки = Объект.ОписаниеОшибки;
	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (Эквайринговые системы)

// Производится оплата банковской картой. 
// Результат – успех выполнения функции.
//
Функция ОплатитьПлатежнойКартой(Идентификатор, Сумма, КодRRN, ИдентификаторФР) Экспорт

	Результат   = мНетОшибки;
	РезультатФР = мНетОшибки;

	Обработка   = Неопределено;
	Объект      = Неопределено;
	ОбработкаФР = Неопределено;
	ОбъектФР    = Неопределено;

	КодАвторизации = Неопределено;
	КодОперации    = Неопределено;

	МассивСтрокСлипЧека = Новый Массив();
	ШиринаЧека          = Неопределено;
	КоличествоКопий     = 0;
	НомерЧека           = 0;
	НомерСмены          = 0;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОбъектДрайвера(ИдентификаторФР, ОбработкаФР, ОбъектФР);

		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ОплатитьПлатежнойКартой(Объект, Сумма, КодRRN, КодАвторизации, КодОперации, МассивСтрокСлипЧека, ШиринаЧека, КоличествоКопий);

			Если МассивСтрокСлипЧека.Количество() > 0 Тогда
				Для Индекс = 1 По КоличествоКопий Цикл
					РезультатФР = ОткрытьЧек(ИдентификаторФР, "", Ложь, НомерЧека, НомерСмены, Ложь);
					Если Не ЗначениеЗаполнено(РезультатФР) Тогда
						РезультатФР = ПечатьТекста(ИдентификаторФР, МассивСтрокСлипЧека, ШиринаЧека);
						Если Не ЗначениеЗаполнено(РезультатФР) Тогда
							РезультатФР = ЗакрытьЧек(ИдентификаторФР, 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Результат)
			      И ЗначениеЗаполнено(РезультатФР) Тогда
				Обработка.АварийнаяОтменаОперации(Объект, Сумма, КодRRN, КодАвторизации);
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат) И Не ЗначениеЗаполнено(РезультатФР) Тогда
				мОписаниеОшибки = "Ошибка эквайринговой системы: " + Объект.ОписаниеОшибки + "
				|Операция по карте не выполнена";
			ИначеЕсли ЗначениеЗаполнено(РезультатФР) Тогда
				Результат = РезультатФР;
				мОписаниеОшибки = "Ошибка фискального регистратора: " + ПолучитьТекстОшибкиТО(РезультатФР) + "
				|Операция по карте отменена.";
			КонецЕсли;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
	КонецЕсли;

	Возврат Результат;

КонецФункции

//Производится отмена ранее осуществленного платежа по банковской карте. 
// Результат – успех выполнения функции.
//
Функция ОтменитьПлатежПоПлатежнойКарте(Идентификатор, Сумма, КодRRN, ИдентификаторФР) Экспорт

	Результат   = Неопределено;
	РезультатФР = Неопределено;

	Обработка   = Неопределено;
	Объект      = Неопределено;
	ОбработкаФР = Неопределено;
	ОбъектФР    = Неопределено;

	КодАвторизации = Неопределено;
	КодОперации    = Неопределено;

	МассивСтрокСлипЧека = Новый Массив();
	ШиринаЧека          = Неопределено;
	КоличествоКопий     = 0;
	НомерЧека           = 0;
	НомерСмены          = 0;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОбъектДрайвера(ИдентификаторФР, ОбработкаФР, ОбъектФР);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат  = Обработка.ОтменитьПлатежПоПлатежнойКарте(Объект, Сумма, КодRRN, КодАвторизации, КодОперации, МассивСтрокСлипЧека, ШиринаЧека, КоличествоКопий);

			Если МассивСтрокСлипЧека.Количество() > 0 Тогда
				Для Индекс = 1 По КоличествоКопий Цикл
					РезультатФР = ОткрытьЧек(ИдентификаторФР, "", Ложь, НомерЧека, НомерСмены, Ложь);
					Если Не ЗначениеЗаполнено(РезультатФР) Тогда
						РезультатФР = ПечатьТекста(ИдентификаторФР, МассивСтрокСлипЧека, ШиринаЧека);
						Если Не ЗначениеЗаполнено(РезультатФР) Тогда
							РезультатФР = ЗакрытьЧек(ИдентификаторФР, 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Результат)
			      И ЗначениеЗаполнено(РезультатФР) Тогда
				Обработка.АварийнаяОтменаОперации(Объект, Сумма, КодRRN, КодАвторизации);
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат) И Не ЗначениеЗаполнено(РезультатФР) Тогда
				мОписаниеОшибки = "Ошибка эквайринговой системы: " + Объект.ОписаниеОшибки + "
				|Операция по карте не выполнена";
			ИначеЕсли ЗначениеЗаполнено(РезультатФР) Тогда
				Результат = РезультатФР;
				мОписаниеОшибки = "Ошибка фискального регистратора: " + ПолучитьТекстОшибкиТО(РезультатФР) + "
				|Операция по карте отменена.";
			КонецЕсли;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Производится операция возврата платежа на банковскую карту.
// Результат – успех выполнения функции.
//
Функция ВернутьПлатежПоПлатежнойКарте(Идентификатор, Сумма, КодRRN, ИдентификаторФР) Экспорт

	Результат   = Неопределено;
	РезультатФР = Неопределено;

	Обработка   = Неопределено;
	Объект      = Неопределено;
	ОбработкаФР = Неопределено;
	ОбъектФР    = Неопределено;

	КодАвторизации = Неопределено;
	КодОперации    = Неопределено;

	МассивСтрокСлипЧека = Новый Массив();
	ШиринаЧека          = Неопределено;
	КоличествоКопий     = 0;
	НомерЧека           = 0;
	НомерСмены          = 0;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОбъектДрайвера(ИдентификаторФР, ОбработкаФР, ОбъектФР);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат  = Обработка.ВернутьПлатежПоПлатежнойКарте(Объект, Сумма, КодRRN, КодАвторизации, КодОперации, МассивСтрокСлипЧека, ШиринаЧека, КоличествоКопий);

			Если МассивСтрокСлипЧека.Количество() > 0 Тогда
				Для Индекс = 1 По КоличествоКопий Цикл
					РезультатФР = ОткрытьЧек(ИдентификаторФР, "", Ложь, НомерЧека, НомерСмены, Ложь);
					Если Не ЗначениеЗаполнено(РезультатФР) Тогда
						РезультатФР = ПечатьТекста(ИдентификаторФР, МассивСтрокСлипЧека, ШиринаЧека);
						Если Не ЗначениеЗаполнено(РезультатФР) Тогда
							РезультатФР = ЗакрытьЧек(ИдентификаторФР, 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Результат)
			      И ЗначениеЗаполнено(РезультатФР) Тогда
				Обработка.АварийнаяОтменаОперации(Объект, Сумма, КодRRN, КодАвторизации);
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат) И Не ЗначениеЗаполнено(РезультатФР) Тогда
				мОписаниеОшибки = "Ошибка эквайринговой системы: " + Объект.ОписаниеОшибки + "
				|Операция по карте не выполнена";
			ИначеЕсли ЗначениеЗаполнено(РезультатФР) Тогда
				Результат = РезультатФР;
				мОписаниеОшибки = "Ошибка фискального регистратора: " + ПолучитьТекстОшибкиТО(РезультатФР) + "
				|Операция по карте отменена.";
			КонецЕсли;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Производится сверка итогов по банковским картам с банком
// Результат – успех выполнения функции.
//
Функция ИтогиДняПоКартам(Идентификатор, ИдентификаторФР) Экспорт

	Результат   = Неопределено;
	РезультатФР = Неопределено;

	Обработка   = Неопределено;
	Объект      = Неопределено;
	ОбработкаФР = Неопределено;
	ОбъектФР    = Неопределено;

	МассивСтрокСлипЧека = Новый Массив();
	ШиринаЧека          = Неопределено;
	КоличествоКопий     = 0;
	НомерЧека           = 0;
	НомерСмены          = 0;
	
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОбъектДрайвера(ИдентификаторФР, ОбработкаФР, ОбъектФР);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ИтогиДняПоКартам(Объект, МассивСтрокСлипЧека, ШиринаЧека);

			Если МассивСтрокСлипЧека.Количество() > 0 Тогда
				РезультатФР = ОткрытьЧек(ИдентификаторФР, "", Ложь, НомерЧека, НомерСмены, Ложь);
				Если Не ЗначениеЗаполнено(РезультатФР) Тогда
					РезультатФР = ПечатьТекста(ИдентификаторФР, МассивСтрокСлипЧека, ШиринаЧека);
					Если Не ЗначениеЗаполнено(РезультатФР) Тогда
						РезультатФР = ЗакрытьЧек(ИдентификаторФР, 0, 0);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат) И Не ЗначениеЗаполнено(РезультатФР) Тогда
				мОписаниеОшибки = "Ошибка эквайринговой системы: " + Объект.ОписаниеОшибки + "
				|Операция по карте не выполнена";
			ИначеЕсли ЗначениеЗаполнено(РезультатФР) Тогда
				Результат = РезультатФР;
				мОписаниеОшибки = "Ошибка фискального регистратора: " + ПолучитьТекстОшибкиТО(РезультатФР) + "
				|Операция по карте отменена.";
			КонецЕсли;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверяется возможность выполнения операции "Сверка итогов"
Функция ПоддерживаетсяСверкаИтогов(Идентификатор) Экспорт
	
	Результат   = Неопределено;
	Обработка   = Неопределено;
	Объект      = Неопределено;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ПоддерживаетсяСверкаИтогов();
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Производится преавторизация банковской картой.
// Результат – успех выполнения функции.
//
Функция ПреавторизацияПоПлатежнойКарте(Идентификатор, Сумма, КодRRN, КодАвторизации, КодОперации, ИдентификаторФР) Экспорт

	Результат   = мНетОшибки;
	РезультатФР = мНетОшибки;

	Обработка   = Неопределено;
	Объект      = Неопределено;
	ОбработкаФР = Неопределено;
	ОбъектФР    = Неопределено;

	КодАвторизации = Неопределено;
	КодОперации    = Неопределено;

	МассивСтрокСлипЧека = Новый Массив();
	ШиринаЧека          = Неопределено;
	КоличествоКопий     = 0;
	НомерЧека           = 0;
	НомерСмены          = 0;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОбъектДрайвера(ИдентификаторФР, ОбработкаФР, ОбъектФР);

		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ПреавторизацияПоПлатежнойКарте(Объект, Сумма, КодRRN, КодАвторизации, КодОперации, МассивСтрокСлипЧека, ШиринаЧека, КоличествоКопий);

			Если МассивСтрокСлипЧека.Количество() > 0 Тогда
				Для Индекс = 1 По КоличествоКопий Цикл
					РезультатФР = ОткрытьЧек(ИдентификаторФР, "", Ложь, НомерЧека, НомерСмены, Ложь);
					Если Не ЗначениеЗаполнено(РезультатФР) Тогда
						РезультатФР = ПечатьТекста(ИдентификаторФР, МассивСтрокСлипЧека, ШиринаЧека);
						Если Не ЗначениеЗаполнено(РезультатФР) Тогда
							РезультатФР = ЗакрытьЧек(ИдентификаторФР, 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Результат)
			      И ЗначениеЗаполнено(РезультатФР) Тогда
				Обработка.АварийнаяОтменаОперации(Объект, Сумма, КодRRN, КодАвторизации);
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат) И Не ЗначениеЗаполнено(РезультатФР) Тогда
				мОписаниеОшибки = "Ошибка эквайринговой системы: " + Объект.ОписаниеОшибки + "
				|Операция по карте не выполнена";
			ИначеЕсли ЗначениеЗаполнено(РезультатФР) Тогда
				Результат = РезультатФР;
				мОписаниеОшибки = "Ошибка фискального регистратора: " + ПолучитьТекстОшибкиТО(РезультатФР) + "
				|Операция по карте отменена.";
			КонецЕсли;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Производится завершение преавторизации банковской картой.
// Результат – успех выполнения функции.
//
Функция ЗавершитьПреавторизацииПоПлатежнойКарте(Идентификатор, Сумма, КодRRN, КодАвторизации, КодОперации, ИдентификаторФР) Экспорт

	Результат   = мНетОшибки;
	РезультатФР = мНетОшибки;

	Обработка   = Неопределено;
	Объект      = Неопределено;
	ОбработкаФР = Неопределено;
	ОбъектФР    = Неопределено;

	КодАвторизации = Неопределено;
	КодОперации    = Неопределено;

	МассивСтрокСлипЧека = Новый Массив();
	ШиринаЧека          = Неопределено;
	КоличествоКопий     = 0;
	НомерЧека           = 0;
	НомерСмены          = 0;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОбъектДрайвера(ИдентификаторФР, ОбработкаФР, ОбъектФР);

		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ЗавершениеПреавторизацииПоПлатежнойКарте(Объект, Сумма, КодRRN, КодАвторизации, КодОперации, МассивСтрокСлипЧека, ШиринаЧека, КоличествоКопий);

			Если МассивСтрокСлипЧека.Количество() > 0 Тогда
				Для Индекс = 1 По КоличествоКопий Цикл
					РезультатФР = ОткрытьЧек(ИдентификаторФР, "", Ложь, НомерЧека, НомерСмены, Ложь);
					Если Не ЗначениеЗаполнено(РезультатФР) Тогда
						РезультатФР = ПечатьТекста(ИдентификаторФР, МассивСтрокСлипЧека, ШиринаЧека);
						Если Не ЗначениеЗаполнено(РезультатФР) Тогда
							РезультатФР = ЗакрытьЧек(ИдентификаторФР, 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Результат)
			      И ЗначениеЗаполнено(РезультатФР) Тогда
				Обработка.АварийнаяОтменаОперации(Объект, Сумма, КодRRN, КодАвторизации);
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат) И Не ЗначениеЗаполнено(РезультатФР) Тогда
				мОписаниеОшибки = "Ошибка эквайринговой системы: " + Объект.ОписаниеОшибки + "
				|Операция по карте не выполнена";
			ИначеЕсли ЗначениеЗаполнено(РезультатФР) Тогда
				Результат = РезультатФР;
				мОписаниеОшибки = "Ошибка фискального регистратора: " + ПолучитьТекстОшибкиТО(РезультатФР) + "
				|Операция по карте отменена.";
			КонецЕсли;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Производится отмена преавторизации банковской картой.
// Результат – успех выполнения функции.
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(Идентификатор, Сумма, КодRRN, КодАвторизации, КодОперации, ИдентификаторФР) Экспорт

	Результат   = мНетОшибки;
	РезультатФР = мНетОшибки;

	Обработка   = Неопределено;
	Объект      = Неопределено;
	ОбработкаФР = Неопределено;
	ОбъектФР    = Неопределено;

	КодАвторизации = Неопределено;
	КодОперации    = Неопределено;

	МассивСтрокСлипЧека = Новый Массив();
	ШиринаЧека          = Неопределено;
	КоличествоКопий     = 0;
	НомерЧека           = 0;
	НомерСмены          = 0;

	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПолучитьОбъектДрайвера(ИдентификаторФР, ОбработкаФР, ОбъектФР);

		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ОтменитьПреавторизациюПоПлатежнойКарте(Объект, Сумма, КодRRN, КодАвторизации, КодОперации, МассивСтрокСлипЧека, ШиринаЧека, КоличествоКопий);

			Если МассивСтрокСлипЧека.Количество() > 0 Тогда
				Для Индекс = 1 По КоличествоКопий Цикл
					РезультатФР = ОткрытьЧек(ИдентификаторФР, "", Ложь, НомерЧека, НомерСмены, Ложь);
					Если Не ЗначениеЗаполнено(РезультатФР) Тогда
						РезультатФР = ПечатьТекста(ИдентификаторФР, МассивСтрокСлипЧека, ШиринаЧека);
						Если Не ЗначениеЗаполнено(РезультатФР) Тогда
							РезультатФР = ЗакрытьЧек(ИдентификаторФР, 0, 0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Результат)
			      И ЗначениеЗаполнено(РезультатФР) Тогда
				Обработка.АварийнаяОтменаОперации(Объект, Сумма, КодRRN, КодАвторизации);
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат) И Не ЗначениеЗаполнено(РезультатФР) Тогда
				мОписаниеОшибки = "Ошибка эквайринговой системы: " + Объект.ОписаниеОшибки + "
				|Операция по карте не выполнена";
			ИначеЕсли ЗначениеЗаполнено(РезультатФР) Тогда
				Результат = РезультатФР;
				мОписаниеОшибки = "Ошибка фискального регистратора: " + ПолучитьТекстОшибкиТО(РезультатФР) + "
				|Операция по карте отменена.";
			КонецЕсли;
		Иначе
			мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
		КонецЕсли;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("эквайринговой системы");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает пароль кассира или администратора ККМ.
//
// Параметры:
//  ПарольКассира - <Булево>
//                - Возвращать пароль кассира. Если данный параметр имеет
//                  значение Ложь, возвращается пароль администратора ККМ.
//
// Возвращаемое значение:
//  <Число>       - Пароль ККМ.
//
Функция ПолучитьПарольККМ(ПарольКассира)

	Результат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	                                        ?(ПарольКассира,
	                                        "ПарольКассираФискальногоРегистратора",
	                                        "ПарольАдминистратораФискальногоРегистратора"));

	Возврат Результат;

КонецФункции // ПолучитьПарольККМ()

// Функция осуществляет печать чека для приходного и расходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  ЭтоРКО                         - <Булево>
//                                 - Осуществляется печать чека из РКО.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаПКОРКО(Идентификатор, ЭтоРКО, Пароль, НомерЧека, НомерСмены,
                         ОписаниеПлатежа, СуммаНал, СуммаБезнал)

	Обработка = Неопределено;
	Объект    = Неопределено;
	ВремНомерЧека = 0;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерОтдела = Неопределено;
		Результат   = Обработка.ПолучитьПараметрыНаличнойОплаты(Объект, НомерОтдела);

		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ОткрытьЧек(Объект, Пароль, ЭтоРКО, ВремНомерЧека, НомерСмены, Истина);
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Позиция = Неопределено;
				Для Каждого Позиция Из ОписаниеПлатежа Цикл
					Результат = Обработка.ПечататьСтроку(Объект,
					                                     Позиция.Заголовок,
					                                     1,
					                                     Позиция.Сумма,
					                                     0,
					                                     НомерОтдела,
					                                     Позиция.НДС);

					Если ЗначениеЗаполнено(Результат) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека = ВремНомерЧека
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПечатьЧекаПКО()

// Функция возвращает параметр механизма работы с торговым оборудованием.
//
// Параметры:
//  ИмяПараметра  - <Строка>
//                - Имя необходимого параметра.
//
//  ТипПараметра  - <Строка>
//                - Имя типа необходимого параметра.
//
// Возвращаемое значение:
//  <*>           - Описание возвращаемого значения.
//
Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра)

	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;

	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПараметрСервераТО()

// Функция, при необходимости, подключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид подключаемого оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьОборудование(Вид, Клиент)

	Результат = мНетОшибки;
	ПоследняяОшибка = мНетОшибки;

	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");

	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТО.Количество() = 0 Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    РегТО.Идентификатор       КАК Идентификатор,
		|    РегТО.Модель.Наименование КАК Наименование,
		|    РегТО.Модель              КАК Модель,
		|    РегТО.Параметры           КАК Параметры
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ
		|    РегТО.Вид = &Вид
		|    И РегТО.Компьютер                      = &Компьютер
		|    И РегТО.Подключено
		|");
		Запрос.УстановитьПараметр("Вид"      , Вид);
		Запрос.УстановитьПараметр("Компьютер", ПолучитьИмяКомпьютераТО());
		СтрокиТО = Запрос.Выполнить().Выгрузить();
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Идентификатор = СтрокаТО.Идентификатор;
			Наименование  = СтрокаТО.Наименование;
			Обработка     = Неопределено;
			Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),
			                  Новый Структура(),
			                  ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
			Модель        = СтрокаТО.Модель.Модель;
			мМодельПодключаемогоТО = Модель;

			Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка);
			Если ЗначениеЗаполнено(Результат) Тогда
				Ошибка = ПолучитьТекстОшибкиТО(Результат);
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;

			Объект    = Неопределено;
			Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
			Если ЗначениеЗаполнено(Результат) Тогда
				Ошибка = ПолучитьТекстОшибкиТО(Результат);
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;

			Результат = Обработка.Подключить(Объект);
			Если ЗначениеЗаполнено(Результат) Тогда
				мОписаниеОшибки = Объект.ОписаниеОшибки;
				Ошибка = ПолучитьТекстОшибкиТО(Результат);
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;

			Оборудование                             = ТО.Добавить();
			Оборудование.Вид                         = Вид;
			Оборудование.Ссылки                      = 1;
			Оборудование.Идентификатор               = Идентификатор;
			Оборудование.Наименование                = Наименование;
			Оборудование.Обработка                   = Обработка;
			Оборудование.Объект                      = Объект;
			Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);

			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Источник");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(Оборудование.ИмяИсточникаВнешнегоСобытия, "Источник");
			Сообщения.ЗаполнитьЗначения(Вид, "Вид");

			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;
	Иначе
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Если СтрокаТО.Ссылки = 0 Тогда
				мМодельПодключаемогоТО = СтрокаТО.Объект.Модель;
				Результат = СтрокаТО.Обработка.Подключить(СтрокаТО.Объект);

				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = СтрокаТО.Объект.ОписаниеОшибки;
					Ошибка = ПолучитьТекстОшибкиТО(Результат);
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				СтрокаТО.ИмяИсточникаВнешнегоСобытия = СтрокаТО.Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(СтрокаТО.Объект);
			КонецЕсли;

			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = СтрокаТО.Обработка.ПолучитьОписаниеСобытий(СтрокаТО.Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Источник");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.ИмяИсточникаВнешнегоСобытия, "Источник");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Вид, "Вид");

			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
			КонецЕсли;

			СтрокаТО.Ссылки = СтрокаТО.Ссылки + 1;
		КонецЦикла;
	КонецЕсли;

	Возврат ПоследняяОшибка;

КонецФункции // ПодключитьОборудование()

// Процедура, при необходимости, отключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
Процедура ОтключитьОборудование(Клиент)

	ТО              = ПолучитьТО();
	Клиенты         = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");
	ВидТО           = Неопределено;
	СтруктураПоиска = Новый Структура("Вид");

	Для Каждого ВидТО Из Перечисления.ВидыТорговогоОборудования Цикл
		Если Клиент.ПоддерживаетсяВидТО(ВидТО) Тогда
			СтруктураПоиска.Вид = ВидТО;
			СтрокиТО            = ТО.НайтиСтроки(СтруктураПоиска);
			СтрокаТО            = Неопределено;
			Для Каждого СтрокаТО Из СтрокиТО Цикл
				Если      СтрокаТО.Ссылки = 1 Тогда
					СтрокаТО.Ссылки = 0;
					СтрокаТО.Обработка.Отключить(СтрокаТО.Объект);
				ИначеЕсли СтрокаТО.Ссылки > 1 Тогда
					СтрокаТО.Ссылки = СтрокаТО.Ссылки - 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Клиенты.Удалить(Клиент);

КонецПроцедуры // ОтключитьОборудование()

// Функция осуществляет обработку внешнего события.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид торгового оборудования.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВнешнееСобытиеВнутр(Вид, Обработка, Объект, Клиент, Событие, Данные, Идентификатор)

	Результат = мНетОшибки;

	Если Вид = мДисплейПокупателя Тогда
	ИначеЕсли Вид = мККМOffLine Тогда
	ИначеЕсли Вид = мККМOnLine Тогда
		Результат = ОбработатьСобытиеOnline(Обработка, Объект, Клиент, Событие, Данные, Идентификатор);
	ИначеЕсли Вид = мСчитывательМагнитныхКарт Тогда
		Результат = ОбработатьСобытиеСМК(Обработка, Объект, Клиент, Событие, Данные, Идентификатор);
	ИначеЕсли Вид = мСканерШтрихКода Тогда
		Результат = ОбработатьСобытиеСШК(Обработка, Объект, Клиент, Событие, Данные, Идентификатор);
	ИначеЕсли Вид = мТерминалСбораДанных Тогда
	ИначеЕсли Вид = мФискальныйРегистратор Тогда
	ИначеЕсли Вид = мЭлектронныеВесы Тогда
	ИначеЕсли Вид = мСчитывателиRFIDМеток Тогда
		Результат = ОбработатьСобытиеОтRFID(Обработка, Объект, Клиент, Событие, Данные, Идентификатор);
	ИначеЕсли Вид = мЭквайринговыеСистемы Тогда
	ИначеЕсли Вид = мВесыСПечатьюЭтикеток Тогда
	КонецЕсли;

	мВнешнееСобытиеОбработано = (Результат = мНетОшибки);

	Возврат Результат;

КонецФункции // ОбработатьВнешнееСобытиеВнутр()

// Функция осуществляет обработку внешнего события от сканеров штрихкода.
//
// Параметры:
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  СШК                            - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеСШК(Обработка, Объект, Клиент, Событие, Данные, СШК)

	Результат = мНетОшибки;

	ШК        = Неопределено;
	ТипШК     = Неопределено;
	Результат = Обработка.ОбработатьСобытиеСШК(Объект,
	                                           Событие,
	                                           Данные,
	                                           ШК,
	                                           ТипШК);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Если ПустаяСтрока(ШК) Тогда
		Возврат Результат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТипШК) Тогда
		Если      РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК) Тогда
			ТипШК = мEAN8;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
			ТипШК = мEAN13;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаCODE39ТО(ШК) Тогда
			ТипШК = мCODE39;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    СпрСН.Ссылка КАК СерийныйНомер
	|ИЗ
	|    Справочник.СерийныеНомера КАК СпрСН
	|ГДЕ
	|    (ВЫРАЗИТЬ(СпрСН.Код КАК СТРОКА(" + Формат(СтрДлина(ШК), "ЧН=0; ЧГ=0") + "))) = &Код");
	Запрос.УстановитьПараметр("Код", ШК);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатЗапроса.Выбрать();
		РезультатЗапроса.Следующий();

		Ответ = Клиент.СШКСерийныйНомер(РезультатЗапроса.СерийныйНомер, СШК);
		Если Ответ Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(мПрефиксВесовогоТовара)
		 И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
		 И ТипШК = мEAN13
		 И Лев(ШК, 2) = "2" + мПрефиксВесовогоТовара Тогда

		КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
		КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);
		Запрос           = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегКВТ.Номенклатура                         КАК Номенклатура,
		|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|    " + КоличествоТовара + " / 1000             КАК Количество,
		|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегКВТ.Качество
		|    КОНЕЦ                                       КАК Качество
		|ИЗ
		|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		|ГДЕ
		|    РегКВТ.Код = &Код");
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
		Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
		Запрос.УстановитьПараметр("Код",                  Число(КодТовара));

		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			РезультатЗапроса.Следующий();

			Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Номенклатура,
			                               РезультатЗапроса.ХарактеристикаНоменклатуры,
			                               РезультатЗапроса.СерияНоменклатуры,
			                               РезультатЗапроса.Качество,
			                               РезультатЗапроса.ЕдиницаИзмерения,
			                               РезультатЗапроса.Количество,
			                               СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Владелец,
	|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    РегШК.Качество                   КАК Качество
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод", ШК);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатЗапроса.Выбрать();
		РезультатЗапроса.Следующий();
		Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			Ответ = Клиент.СШКИнформационнаяКарта(РезультатЗапроса.Владелец, СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		Иначе // Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура")
			Ответ = Клиент.СШКНоменклатура(РезультатЗапроса.Владелец,
			                               РезультатЗапроса.ХарактеристикаНоменклатуры,
			                               РезультатЗапроса.СерияНоменклатуры,
			                               РезультатЗапроса.Качество,
			                               РезультатЗапроса.ЕдиницаИзмерения,
			                               1,
			                               СШК);
			Если Ответ Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Ответ = Клиент.СШКНеизвестныйКод(ШК, ТипШК, СШК);
	Если Ответ Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = мОшибкаНеизвестныйШтрихкод;
	Клиент.СШКОшибка(Результат, ШК, ТипШК, СШК);

	Возврат Результат;

КонецФункции // ОбработатьСобытиеСШК()

// Функция осуществляет обработку внешнего события от устройств для считывания
// магнитных карт.
//
// Параметры:
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  СМК                            - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеСМК(Обработка, Объект, Клиент, Событие, Данные, СМК)

	Результат = мНетОшибки;

	КодКарты  = Неопределено;
	Результат = Обработка.ОбработатьСобытиеСМК(Объект,
	                                       Событие,
	                                       Данные,
	                                       КодКарты);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    СпрКарты.Ссылка КАК Карта
	|ИЗ
	|    Справочник.ИнформационныеКарты КАК СпрКарты
	|ГДЕ
	|    СпрКарты.ВидКарты   = &ВидКарты
	|    И СпрКарты.КодКарты = &КодКарты");
	Запрос.УстановитьПараметр("ВидКарты", мМагнитнаяКарта);
	Запрос.УстановитьПараметр("КодКарты", КодКарты);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатЗапроса.Выгрузить()[0];
		Ответ            = Клиент.СМКИнформационнаяКарта(РезультатЗапроса.Карта, СМК);
		Если Ответ Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Ответ = Клиент.СМКНеизвестныйКод(КодКарты, СМК);
	Если Ответ Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = мОшибкаНеизвестнаяКарта;
	Клиент.СМКОшибка(Результат, КодКарты, СМК);

	Возврат Результат;

КонецФункции // ОбработатьСобытиеСМК()

// Функция осуществляет обработку внешнего события от ККМ Online.
//
// Параметры:
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  ККМ                            - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьСобытиеOnline(Обработка, Объект, Клиент, Событие, Данные, ККМ)

	Результат = мНетОшибки;

	Параметры = Неопределено;
	Результат = Обработка.ОбработатьСобытие(Объект, Событие, Данные, Параметры);
	Если ЗначениеЗаполнено(Результат) Тогда
		мОписаниеОшибки = Объект.ОписаниеОшибки;

		Возврат Результат;
	КонецЕсли;

	Если Параметры <> Неопределено Тогда
		Если      Параметры.Операция = "ЗапросИнформации" Тогда
			ОписаниеТовара = ПолучитьОписаниеТовараПоШтрихкоду(Параметры.Штрихкод);
			Если ОписаниеТовара <> Неопределено Тогда
				Цена        = Неопределено;
				НомерСекции = Неопределено;
				Скидка      = Неопределено;

				Ответ = Клиент.ОбработатьЗапросККМ(ОписаниеТовара.Номенклатура,
				                                   ОписаниеТовара.ХарактеристикаНоменклатуры,
				                                   ОписаниеТовара.СерияНоменклатуры,
				                                   ОписаниеТовара.Качество,
				                                   ОписаниеТовара.ЕдиницаИзмерения,
				                                   ОписаниеТовара.Количество,
				                                   Цена, Скидка, НомерСекции,
				                                   ККМ);
				Если Ответ Тогда
					ОписаниеТовара.Вставить("Цена",        Цена);
					ОписаниеТовара.Вставить("НомерСекции", НомерСекции);
					ОписаниеТовара.Вставить("Скидка",      Скидка);
				Иначе
					ОписаниеТовара = Неопределено;
				КонецЕсли;
			КонецЕсли;
			Результат = Обработка.ОбработатьРезультатЗапроса(Объект, ОписаниеТовара);
		ИначеЕсли Параметры.Операция = "Чек" Тогда
			Чек = Новый ТаблицаЗначений();
			Чек.Колонки.Добавить("Номенклатура");
			Чек.Колонки.Добавить("ЕдиницаИзмерения");
			Чек.Колонки.Добавить("ХарактеристикаНоменклатуры");
			Чек.Колонки.Добавить("СерияНоменклатуры");
			Чек.Колонки.Добавить("Качество");
			Чек.Колонки.Добавить("Цена");
			Чек.Колонки.Добавить("Количество");
			Чек.Колонки.Добавить("Сумма");

			СтрокаЧекаККМ = Неопределено;
			Для каждого СтрокаЧекаККМ Из Параметры.Товары Цикл
				СтрокаЧека = Чек.Добавить();
				Описание   = ПолучитьОписаниеТовараПоШтрихкоду(СтрокаЧекаККМ.Штрихкод);
				ЗаполнитьЗначенияСвойств(СтрокаЧека, СтрокаЧекаККМ, "Количество, Сумма, Цена");
				ЗаполнитьЗначенияСвойств(СтрокаЧека, Описание, , "Количество");
			КонецЦикла;
			Клиент.ЗакрытиеЧекаККМ(Чек,
			                       Параметры.Возврат,
			                       Параметры.Наличные,
			                       Параметры.Безнал,
			                       Параметры.НомЧека,
			                       Параметры.НомСмены,
			                       ККМ);
		Иначе
			Результат = мОшибкаНеизвестно;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбработатьСобытиеOnline()

// Функция осуществляет поиск товара по штрихкоду
//
// Параметры:
//  Штрихкод       - <Строка>
//                 - Строка, содержащая штрихкод товара.
//
// Возвращаемое значение:
//  <Структура>,
//  <Неопределено> - В случае, если товар не найден, возвращается Неопределено.
//                   В противном случае возвращается структура со следующими полями:
//                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                - Номенклатура, которой соответствует
//                                                  отсканированный штрихкод.
//                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                - Единица измерения номенклатуры.
//                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                - Характеристика  номенклатуры.
//                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                - Серия  номенклатуры.
//                     Качество                   - <СправочникСсылка.Качество>
//                                                - Качество номенклатуры.
//                     Количество                 - <СправочникСсылка.Количество>
//                                                - Количество номенклатуры.
//
Функция ПолучитьОписаниеТовараПоШтрихкоду(Штрихкод)

	Результат = Неопределено;
	ТипШК     = Неопределено;
	ВремРез   = Новый Структура("Номенклатура,
	                            |ЕдиницаИзмерения,
	                            |ХарактеристикаНоменклатуры,
	                            |СерияНоменклатуры,
	                            |Качество,
	                            |Количество");

	Если      РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(Штрихкод) Тогда
		ТипШК = мEAN8;
	ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(Штрихкод) Тогда
		ТипШК = мEAN13;
	ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаCODE39ТО(Штрихкод) Тогда
		ТипШК = мCODE39;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    СпрСН.Владелец КАК Номенклатура
	|ИЗ
	|    Справочник.СерийныеНомера КАК СпрСН
	|ГДЕ
	|    (ВЫРАЗИТЬ(СпрСН.Код КАК СТРОКА(" + Формат(СтрДлина(Штрихкод), "ЧГ=0") + "))) = &Код");
	Запрос.УстановитьПараметр("Код", Штрихкод);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ВремРез.Номенклатура               = Выборка.Номенклатура;
		ВремРез.ЕдиницаИзмерения           = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
		ВремРез.ХарактеристикаНоменклатуры = мХарактеристикиПустаяСсылка;
		ВремРез.СерияНоменклатуры          = мСерииПустаяСсылка;
		ВремРез.Качество                   = мКачествоНовый;
		ВремРез.Количество                 = 1;

		Возврат ВремРез;
	КонецЕсли;

	ПрефиксВесовогоТовара = мПрефиксВесовогоТовара;
	ДлинаКодаТовара       = мДлинаКодаВесовогоТовара;

	Если ЗначениеЗаполнено(ПрефиксВесовогоТовара)
		 И ЗначениеЗаполнено(ДлинаКодаТовара)
		 И ТипШК = мEAN13
		 И Лев(Штрихкод, 2) = "2" + ПрефиксВесовогоТовара Тогда

		КодТовара        = Сред(Штрихкод, 3, ДлинаКодаТовара);
		КоличествоТовара = Сред(Штрихкод, 3 + ДлинаКодаТовара, 10 - ДлинаКодаТовара);
		Запрос           = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    РегКВТ.Номенклатура                         КАК Номенклатура,
		|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|    " + КоличествоТовара + " / 1000             КАК Количество,
		|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
		|    ВЫБОР
		|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
		|            &КачествоНовый
		|        ИНАЧЕ
		|            РегКВТ.Качество
		|    КОНЕЦ                                       КАК Качество
		|ИЗ
		|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
		|ГДЕ
		|    РегКВТ.Код = &Код");
		Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
		Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
		Запрос.УстановитьПараметр("Код",                  Число(КодТовара));

		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();

			ЗаполнитьЗначенияСвойств(ВремРез, Выборка);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    РегШК.Владелец                   КАК Номенклатура,
	|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
	|    ВЫБОР
	|        КОГДА РегШК.Качество = &КачествоПустаяСсылка ТОГДА
	|            &КачествоНовый
	|        ИНАЧЕ
	|            РегШК.Качество
	|    КОНЕЦ                            КАК Качество,
	|    1                                КАК Количество
	|ИЗ
	|    РегистрСведений.Штрихкоды        КАК РегШК
	|ГДЕ
	|    РегШК.Владелец ССЫЛКА Справочник.Номенклатура
	|    И РегШК.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод",             Штрихкод);
	Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
	Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ВремРез, Выборка);
		Результат = ВремРез;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьОписаниеТовараПоШтрихкоду()

// Функция осуществляет получение объекта драйвера торгового оборудования по идентификатору
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания.
//
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект)

	Результат = мНетОшибки;

	ТО = ПолучитьТО();

	Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
	Если Оборудование = Неопределено Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		Обработка = Оборудование.Обработка;
		Объект    = Оборудование.Объект;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьОбъектДрайвера()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ РАБОТЫ С ОШИБКАМИ ТОРГОВОГО ОБОРУДОВАНИЯ

// Функция возвращает текст ошибки при работе с торговым оборудованием.
//
// Параметры:
//  Ошибка   - <ПеречислениеСсылка.ТООшибки*>
//           - Ошибка, описание которой необходимо получить.
//
// Возвращаемое значение:
//  <Строка> - Описание ошибки.
//
Функция ПолучитьТекстОшибкиТО(Ошибка) Экспорт

	Если НЕ ЗначениеЗаполнено(Ошибка) Тогда
		Результат = "";
		мОписаниеОшибки = "";
	Иначе
		Если Ошибка = мОшибкаНеизвестно Тогда
			Результат = мОписаниеОшибки;
			мОписаниеОшибки = "";
		Иначе
			МетаданныеОшибки = Ошибка.Метаданные();
			КомментарийОшибки = МетаданныеОшибки.ЗначенияПеречисления.Получить(Перечисления[МетаданныеОшибки.Имя].Индекс(Ошибка)).Комментарий;
			Если КомментарийОшибки = "" Тогда
				Результат = СокрЛП(Ошибка) + ".";
			Иначе
				Результат = СокрЛП(Ошибка) + "." + Символы.ПС + КомментарийОшибки;
			КонецЕсли;

			Если мОписаниеОшибки <> "" Тогда
				Результат = Результат + Символы.ПС + Символы.ПС + мОписаниеОшибки;
			КонецЕсли;
			
			мОписаниеОшибки = "";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьТекстОшибкиТО()

// Функция возвращает текст ошибки при работе со сканером штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	Если Ошибка = Перечисления.ТООшибкиСШК.ОшибкаНеизвестныйШтрихкод Тогда
		Текст = Текст + ?(ПустаяСтрока(Штрихкод),
		                  "",
		                  "
		                  |(штрихкод """
		                  + Штрихкод
		                  + """"
		                  + ?(НЕ ЗначениеЗаполнено(ТипШК),
		                      "",
		                      ", тип """
		                      + СокрЛП(ТипШК)
		                      + """")
		                      + ")");
	КонецЕсли;

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиСШКТО()

// Функция возвращает текст ошибки при работе с устройством для считывания
// магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты  - <Строка>
//            - Код считанной карты.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);
	Если Ошибка = Перечисления.ТООшибкиСМК.ОшибкаНеизвестнаяКарта Тогда
		Текст = Текст + ?(ПустаяСтрока(КодКарты),
		                  "",
		                  "
		                  |(карта с кодом """ + КодКарты + """)");
	КонецЕсли;

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиСМКТО()

// Функция возвращает текст ошибки при работе с дисплеями покупателя.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиДПТО(Ошибка) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиДПТО()

// Функция возвращает текст ошибки при работе с электронными весами.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиЭВТО(Ошибка) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиЭВТО()

// Функция возвращает текст ошибки при работе с весами с печатью этикеток.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиВесыСПЭТО(Ошибка) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиЭВOFFТО()

// Функция возвращает текст ошибки при работе с терминалами сбора данных.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиТСДТО(Ошибка) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиТСДТО()

// Функция возвращает текст ошибки при работе с фискальными регистраторами.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиФРТО(Ошибка) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиФРТО()

// Функция возвращает текст ошибки при работе с ККМ, подключаемыми в режиме Offline.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиККМOfflineТО(Ошибка) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиККМOfflineТО()

Функция ПолучитьТекстОшибкиПодключенияТО(ТО) Экспорт

	Текст = "Драйвер " + ТО + " не загружен";

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиПодключенияТО()

// Процедура выполняет загрузку данных из ТСД в табличную часть документа или обработки.
//
// Параметры:
//  Терминалы - Массив доступных ТСД.
//  ФормаКлиент - форма, в которой вызвано заполнение из ТСД.
//
Процедура ЗагрузитьИзТерминалаСбораДанных(Терминалы, ФормаКлиент) Экспорт

	ДанныеИзТСД = Неопределено;

	Если Терминалы.Количество() = 1 Тогда
		Терминал = Терминалы[0];
	Иначе // Если мТерминалы.Количество() > 1
		СписокВыбора = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(Терминалы);

		Терминал = СписокВыбора.ВыбратьЭлемент("Выберите терминал сбора данных");
		Если Терминал = Неопределено Тогда
			Возврат;
		Иначе
			Терминал = Терминал.Значение;
		КонецЕсли;
	КонецЕсли;

	Результат = ЗагрузитьТаблицуТСД(Терминал, ДанныеИзТСД);

	ОбработатьТаблицуШтрихкодов(ДанныеИзТСД, ФормаКлиент);

	Ошибки = ПолучитьТекстОшибкиТСДТО(Результат);
	Если ПустаяСтрока(Ошибки) Тогда
		Предупреждение("Загрузка завершена успешно." + Символы.ПС +"Загружено " + СокрЛП(ДанныеИзТСД.Количество()) + " строк.");
	Иначе
		Предупреждение("Не удалось загрузить данные:" + Символы.ПС + Ошибки);
	КонецЕсли;

КонецПроцедуры // ЗагрузитьИзТерминалаСбораДанных()

// Процедура обрабатывает строку, загруженную из ТСД.
//
// Параметры:
//  ТаблицаШтрихкодов - таблица значений, содержащая штрихкоды и их количество.
//  ФормаКлиент - форма, из которой вызвана загрузка данных из ТСД.
Процедура ОбработатьТаблицуШтрихкодов(ТаблицаШтрихкодов, ФормаКлиент)

	Перем Номенклатура;
	Перем ХарактеристикаНоменклатуры;
	Перем СерияНоменклатуры;
	Перем Качество;
	Перем ЕдиницаИзмерения;

	ТаблицаШтрихкодов.Свернуть("Штрихкод", "Количество");

	Для Каждого СтрокаТЧ Из ТаблицаШтрихкодов Цикл
		ШК = СтрокаТЧ.Штрихкод;
		Количество = СтрокаТЧ.Количество;

		Если РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК) Тогда
			ТипШК = мEAN8;
		ИначеЕсли РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК) Тогда
			ТипШК = мEAN13;
		Иначе
			ТипШК = мCODE39;
		КонецЕсли;

		НоменклатураНайдена = Ложь;

		Если ЗначениеЗаполнено(мПрефиксВесовогоТовара)
		   И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
		   И ТипШК = мEAN13
		   И Лев(ШК, 2) = "2" + мПрефиксВесовогоТовара Тогда
			КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
			КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);

			Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|    РегКВТ.Номенклатура                         КАК Номенклатура,
			|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
			|    " + КоличествоТовара + " / 1000             КАК Количество,
			|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
			|    ВЫБОР
			|        КОГДА РегКВТ.Качество = &КачествоПустаяСсылка ТОГДА
			|            &КачествоНовый
			|        ИНАЧЕ
			|            РегКВТ.Качество
			|    КОНЕЦ                                       КАК Качество
			|ИЗ
			|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
			|ГДЕ
			|    РегКВТ.Код = &Код
			|");

			Запрос.УстановитьПараметр("КачествоПустаяСсылка", мКачествоПустаяСсылка);
			Запрос.УстановитьПараметр("КачествоНовый",        мКачествоНовый);
			Запрос.УстановитьПараметр("Код",                  Число(КодТовара));

			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				РезультатЗапроса = РезультатЗапроса.Выбрать();
				РезультатЗапроса.Следующий();

				Номенклатура               = РезультатЗапроса.Номенклатура;
				ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
				СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
				Качество                   = РезультатЗапроса.Качество;
				ЕдиницаИзмерения           = РезультатЗапроса.ЕдиницаИзмерения;
				Количество                 = Количество * РезультатЗапроса.Количество;

				НоменклатураНайдена = Истина;
			КонецЕсли;
		КонецЕсли;

		Если Не НоменклатураНайдена Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|    РегШК.Владелец                   КАК Владелец,
			|    РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
			|    РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|    РегШК.СерияНоменклатуры          КАК СерияНоменклатуры,
			|    РегШК.Качество                   КАК Качество
			|ИЗ
			|    РегистрСведений.Штрихкоды        КАК РегШК
			|ГДЕ
			|    РегШК.Штрихкод = &Штрихкод
			|");

			Запрос.УстановитьПараметр("Штрихкод", ШК);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				РезультатЗапроса = РезультатЗапроса.Выбрать();
				РезультатЗапроса.Следующий();
				Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					Номенклатура               = РезультатЗапроса.Владелец;
					ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
					СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
					Качество                   = РезультатЗапроса.Качество;
					ЕдиницаИзмерения           = РезультатЗапроса.ЕдиницаИзмерения;

					НоменклатураНайдена = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НоменклатураНайдена Тогда
			ФормаКлиент.СШКНоменклатура(Номенклатура, ХарактеристикаНоменклатуры,
			   СерияНоменклатуры, Качество, ЕдиницаИзмерения, Количество, Неопределено);
		Иначе
			Текст = ПолучитьТекстОшибкиСШКТО(мОшибкаНеизвестныйШтрихкод, ШК, ТипШК);
			Сообщить(Текст);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбработатьТаблицуШтрихкодов()

// Функция возвращает строку c именем компьютера для нужд торгового оборудования.
//
// Возвращаемое значение:
//  Строка - имя компьютера для торгового оборудования.
//
Функция ПолучитьИмяКомпьютераТО() Экспорт

	Если мИмяКомпьютера = Неопределено Тогда
		мИмяКомпьютера = ВРег(ИмяКомпьютера());
	КонецЕсли;

	Возврат мИмяКомпьютера;

КонецФункции // ПолучитьИмяКомпьютераТО()

// Процедура завершает обработку внешнего события. Вызывается из модуля приложения.
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные) Экспорт

	Оборудование = ПолучитьТО();

	ТО = Оборудование.Найти(Источник, "ИмяИсточникаВнешнегоСобытия");
	Если  ТО <> Неопределено Тогда
		Обработка    = ТО.Обработка;
		Объект       = ТО.Объект;

		Обработка.СобытиеОбработано(Объект, мВнешнееСобытиеОбработано);
	КонецЕсли;

	мВнешнееСобытиеОбработано = Ложь;

КонецПроцедуры // ЗавершитьОбработкуВнешнегоСобытия()

///////////////////////////////////////////////////////////////////////////////
//// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТО()

	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;

	Возврат ТО;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ВидыТО = Перечисления.ВидыТорговогоОборудования;

мДисплейПокупателя        = ВидыТО.ДисплейПокупателя;
мККМOffLine               = ВидыТО.ККМOffLine;
мККМOnLine                = ВидыТО.ККМOnLine;
мСчитывательМагнитныхКарт = ВидыТО.СчитывательМагнитныхКарт;
мСканерШтрихКода          = ВидыТО.СканерШтрихКода;
мТерминалСбораДанных      = ВидыТО.ТерминалСбораДанных;
мФискальныйРегистратор    = ВидыТО.ФискальныйРегистратор;
мЭлектронныеВесы          = ВидыТО.ЭлектронныеВесы;
мВесыСПечатьюЭтикеток     = ВидыТО.ВесыСПечатьюЭтикеток;
мСчитывателиRFIDМеток     = ВидыТО.СчитывательRFIDМеток;
мЭквайринговыеСистемы     = ВидыТО.ЭквайринговаяСистема;

мПрефиксВесовогоТовара      = Константы.ПрефиксВесовогоТовара.Получить();
мДлинаКодаВесовогоТовара    = Константы.ДлинаКодаВесовогоТовара.Получить();

мПустаяКассаККМ             = Справочники.КассыККМ.ПустаяСсылка();
мКачествоПустаяСсылка       = Справочники.Качество.ПустаяСсылка();
мКачествоНовый              = Справочники.Качество.Новый;
мХарактеристикиПустаяСсылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
мСерииПустаяСсылка          = Справочники.СерииНоменклатуры.ПустаяСсылка();
мМагнитнаяКарта             = Перечисления.ВидыИнформационныхКарт.Магнитная;

мEAN8                       = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
мEAN13                      = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
мCODE39                     = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39;

мНетОшибки                  = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаНеизвестно           = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;
мНетПрав                    = Перечисления.ТООшибкиОбщие.ОшибкаНетПрав;

мОшибкаНеизвестныйШтрихкод  = Перечисления.ТООшибкиСШК.ОшибкаНеизвестныйШтрихкод;
мОшибкаНеизвестныйТовар     = Перечисления.ТООшибкиТСД.ОшибкаНеизвестныйТовар;
мОшибкаЗагрузкиОтчета       = Перечисления.ТООшибкиККМOffline.ОшибкаЗагрузкиОтчета;
мОшибкаНеизвестнаяКарта     = Перечисления.ТООшибкиСМК.ОшибкаНеизвестнаяКарта;

мМодельПодключаемогоТО = "";

мВнешнееСобытиеОбработано = Ложь;

мОписаниеОшибки = "";

мАдресОбновленияОбработокОбслуживания = "http://downloads.v8.1c.ru/tmplts/ITS/TradeWare/";

#КонецЕсли