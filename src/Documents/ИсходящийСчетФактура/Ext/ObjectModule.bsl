
Функция ПодготовитьНоменклатуруСчетаФактурыДляЭкспорта(УчетныйДокумент, ДанныеОШтрихКодах = Неопределено, ПолучатьСериюНоменклатуры = Ложь) Экспорт
	
	ПолноеИмяДокумента = УчетныйДокумент.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураДокумента.Номенклатура,
	|	НоменклатураДокумента.ХарактеристикаНоменклатуры,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК ИдТовара,
	|	НоменклатураДокумента.Количество,
	|	НоменклатураДокумента.Сумма,
	|	НоменклатураДокумента.Ссылка.ВалютаДокумента.Код КАК Валюта,
	|	НоменклатураДокумента.СтавкаНДС КАК СтавкаНДС,
	|	НоменклатураДокумента.СуммаНДС КАК СуммаНДС,
	|	НоменклатураДокумента.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	НоменклатураДокумента.Содержание КАК Примечание, " + Символы.ПС + 
	?(ПолучатьСериюНоменклатуры, "НоменклатураДокумента.СерияНоменклатуры КАК СерияНоменклатуры,", "") + "
	|	НоменклатураДокумента.НомерСтроки,
	|	НоменклатураДокумента.Ссылка КАК ДокументСсылка,
	|	НоменклатураДокумента.Ссылка.Номер КАК ДокументНомер,
	|	НоменклатураДокумента.Ссылка.Дата КАК ДокументДата,
	|	НоменклатураДокумента.ЕдиницаПоКлассификатору		
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.Ссылка КАК Ссылка,
	|		ЗаказТовары.Номенклатура КАК Номенклатура,
	|		ЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаПоКлассификатору,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Сумма КАК Сумма,
	|		ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|		ЗаказТовары.СуммаНДС КАК СуммаНДС,
	|		"""" КАК Содержание,  " + Символы.ПС +
	?(ПолучатьСериюНоменклатуры, "ЗаказТовары.СерияНоменклатуры КАК СерияНоменклатуры,", "") + "
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки	
	|	ИЗ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК Основания 
	|		Внутреннее соединение Документ.РеализацияТоваровУслуг.Товары КАК	ЗаказТовары
	|		ПО (ЗаказТовары.Ссылка = Основания.ДокументОснование)
	|		
	|	ГДЕ
	|		Основания.Ссылка = &ДокСсылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказУслуги.Ссылка,
	|		ЗаказУслуги.Номенклатура,
	|		&ПустаяХарактеристикаНоменклатуры,
	|		ЗаказУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|		ЗаказУслуги.Количество,
	|		ЗаказУслуги.Сумма,
	|		ЗаказУслуги.СтавкаНДС,
	|		ЗаказУслуги.СуммаНДС,
	|		ЗаказУслуги.Содержание, " + Символы.ПС +
	?(ПолучатьСериюНоменклатуры, "NULL КАК СерияНоменклатуры,", "") + "
	|		ЗаказУслуги.НомерСтроки		
	|	ИЗ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК Основания 
	|		Внутреннее соединение Документ.РеализацияТоваровУслуг.Услуги КАК	ЗаказУслуги
	|		ПО (ЗаказУслуги.Ссылка = Основания.ДокументОснование)
	|	ГДЕ
	|		Основания.Ссылка = &ДокСсылка) КАК НоменклатураДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО НоменклатураДокумента.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И НоменклатураДокумента.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|			И НоменклатураДокумента.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент");
	
	Запрос.УстановитьПараметр("ДокСсылка", УчетныйДокумент);
	Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ТаблицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	ДанныеОШтрихКодах = ЭлектронныеДокументы.ПолучитьИнформациюПоШтрихКодамНоменклатурыДляСчетаФактуры(УчетныйДокумент);
	
	Возврат ТаблицаИсходныхДанных;
	
КонецФункции

Процедура ДобавитьДанныеСчетаФактурыВДеревоТэгов(СтрокиДерева, ДанныеТаблицыТовары, ЭлДок, ДанныеОШтрихКодах, Отказ, Сообщение) Экспорт
	
	ДанныеТаблицыТовары.Сортировать("ДокументСсылка");
	
	Для каждого СтрокаТаблицыТовары Из ДанныеТаблицыТовары Цикл
		
		СообщениеСтроки = "";
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыТовары.Количество) Тогда
			СообщениеСтроки = СообщениеСтроки + Символы.ПС + "- не заполнено количество";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.ИдТовара)
			И Не ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаПоКлассификатору) Тогда
			СообщениеСтроки = СообщениеСтроки + Символы.ПС + "- не указана единица измерения товара (международное сокращение): """ + СтрокаТаблицыТовары.Номенклатура + """";
		КонецЕсли;
		
		СтрокиТовара = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "СтрокаСчетФактура").Строки;
		
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "НомерТоварнойНакладной", СтрокаТаблицыТовары.ДокументНомер, "ДокументИД");
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "ДатаТоварнойНакладной", ЭлектронныеДокументы.ХМЛДата(СтрокаТаблицыТовары.ДокументДата));
		
		ИмяТипаДляЗаписи = "";
		ИдентификаторТовара = ЭлектронныеДокументы.ПолучитьИдентификаторТовараДляВыгрузки(СтрокаТаблицыТовары, ДанныеОШтрихКодах, СообщениеСтроки, ИмяТипаДляЗаписи);
		
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "ИдТовара",  ИдентификаторТовара, ИмяТипаДляЗаписи);
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "ОКЕИ", СтрокаТаблицыТовары.ЕдиницаПоКлассификатору, "ОКЕИ");
		
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "Количество", ЭлектронныеДокументы.ХМЛЧисло(СтрокаТаблицыТовары.Количество));
		СтрокиСтоимости = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "Стоимость").Строки;
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиСтоимости, "Сумма", ЭлектронныеДокументы.ХМЛЧисло(СтрокаТаблицыТовары.Сумма), , Новый Структура("Валюта", СтрокаТаблицыТовары.Валюта));
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.СуммаНДС) Тогда
			
			СтрокиНалога = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиСтоимости, "Налог").Строки;
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ТипНалога", "НДС");
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ВеличинаСтавкиНалога", ЭлектронныеДокументы.ХМЛЧисло(УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыТовары.СтавкаНДС)));
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "Сумма", ЭлектронныеДокументы.ХМЛЧисло(СтрокаТаблицыТовары.СуммаНДС));
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ВключеноВСтоимость", ЭлектронныеДокументы.ХМЛБулево(СтрокаТаблицыТовары.СуммаВключаетНДС));
			
		КонецЕсли;		
		
		Если Не ПустаяСтрока(СообщениеСтроки) Тогда
			Сообщение = Сообщение + Символы.ПС + "Строка: " + СтрокаТаблицыТовары.НомерСтроки + "; Номенклатура :""" + СтрокаТаблицыТовары.Номенклатура + """ содержит ошибки:" + СообщениеСтроки;
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ()

Процедура ЗаполнитьXML(ОбъектXML, Отказ, Сообщение, ДобавлятьАтрибутПроверки = Ложь, ДополнятьИсходящееСообщениеПриложеннымиФайлами = Ложь) Экспорт
	
	ПрефиксИмен = "";
	ПространствоИменСОДИ    = "urn:moo-sodi.ru:commerceml_sodi";
	
	ОбъектXML.ЗаписатьНачалоЭлемента("СчетФактура", ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксИмен, ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Если ДобавлятьАтрибутПроверки Тогда
		ОбъектXML.ЗаписатьАтрибут("xsi:schemaLocation","urn:moo-sodi.ru:commerceml_sodi cml-ordering-3.0sodi.xsd");
	КонецЕсли;
	
	ДеревоТэгов  = ЭлектронныеДокументы.ИнициализироватьДеревоТэгов(ЭтотОбъект, Отказ, Сообщение);
	СтрокиДерева = ДеревоТэгов.Строки;
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "НомерСчетФактураПоставщик", УчетныйДокумент.Номер, "ДокументИД");
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДатаСчетФактураПоставщик", ЭлектронныеДокументы.ХМЛДата(УчетныйДокумент.Дата));
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДлительностьОжиданияОтвета", ЭлектронныеДокументы.ХМЛДлительность(ДлительностьОжиданияОтвета));	
		
	ДанныеОШтрихКодах = Неопределено;
	ДанныеТаблицыТовары = ПодготовитьНоменклатуруСчетаФактурыДляЭкспорта(УчетныйДокумент, ДанныеОШтрихКодах);
		
	ДобавитьДанныеСчетаФактурыВДеревоТэгов(СтрокиДерева, ДанныеТаблицыТовары, Ссылка, ДанныеОШтрихКодах, Отказ, Сообщение);
	
	ЭлектронныеДокументы.ЗаписатьИнформациюОПриложенныхФайлахКДокументу(ДополнятьИсходящееСообщениеПриложеннымиФайлами, СтрокиДерева, УчетныйДокумент);	
	   	
	ЭлектронныеДокументы.ЗаписатьТэгиВXMLДокумент(ОбъектXML, ДеревоТэгов.Строки, ПрефиксИмен);
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипОснования = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		// Заполнение шапки
		УчетныйДокумент = Основание.Ссылка;
		Контрагент = Основание.Контрагент;
		Организация = Основание.Организация;
		
		#Если Клиент Тогда
		ЭлектронныеДокументы.ПриИзмененииОрганизацииВДокументе(ЭтотОбъект, Ложь);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаОтправки = Неопределено;
	Отправлен    = Ложь;
	
КонецПроцедуры

Функция SOAPAction() Экспорт
	
	Возврат "invoice";
	
КонецФункции // () 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы.ПередЗаписьюИсходящегоЭлектронногоДокумента(ЭтотОбъект, Отказ, Истина);
	
	Если ЗначениеЗаполнено(УчетныйДокумент) Тогда
		
		Если УчетныйДокумент.ДокументыОснования.Количество() = 0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не указан документ основания у счета-фактуры", Отказ);
			
		Иначе
	
			Для Каждого СтрокаТаблицыОснований Из УчетныйДокумент.ДокументыОснования Цикл
				
				Если ЗначениеЗаполнено(СтрокаТаблицыОснований.ДокументОснование)
					И ТипЗнч(СтрокаТаблицыОснований.ДокументОснование) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Основание исходящей счета-фактуры может быть только реализация товаров и услуг: " + СтрокаТаблицыОснований.ДокументОснование, Отказ);	
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПометкаУдаления Тогда 
		
		// не должно быть второго документа по одному и тому же заказу
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ИсходящийСчетФактура.Ссылка
		               |ИЗ
		               |	Документ.ИсходящийСчетФактура КАК ИсходящийСчетФактура
		               |ГДЕ
		               |	ИсходящийСчетФактура.УчетныйДокумент = &УчетныйДокумент
		               |	И ИсходящийСчетФактура.Ссылка <> &Ссылка
		               |	И ИсходящийСчетФактура.ПометкаУдаления = ЛОЖЬ";
					   
		Запрос.УстановитьПараметр("УчетныйДокумент", УчетныйДокумент);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаЗаказов.Количество() > 0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Недопустимо создавать несколько электронных документов на базе одной счета-фактуры.
			|Существующий исходящий электронный документ: " + Строка(ТаблицаЗаказов[0].Ссылка), Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
