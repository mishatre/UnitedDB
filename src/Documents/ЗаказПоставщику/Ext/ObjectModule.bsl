Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаПоступления,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;

	Макет = ПолучитьМакет("СчетЗаказ");

	// Определим параметры запроса и табличного документа  
	// в зависимости от необходимости отображения артикула поставщика  
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда

		ВыводитьКоды    = Истина;
		ТекстКодАртикул = "Код";
		Колонка         = "Артикул" + Символы.ПС + "поставщика";
		ОбластьШапки    = Макет.ПолучитьОбласть("ШапкаСКодом");
		ОбластьСтроки   = Макет.ПолучитьОбласть("СтрокаСКодом");

		Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);

		ТекстПоляТовараДляТоваров = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеКонтрагента КАК Строка(100)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеКонтрагента КАК Строка(100)) = """") ТОГДА ВЫРАЗИТЬ (ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) ИНАЧЕ ВЫРАЗИТЬ (НаименованиеКонтрагента КАК Строка(100)) КОНЕЦ КАК Товар,";

		ТекстПоляТовараДляУслуг = "
		|	ВЫБОР КОГДА (ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) ЕСТЬ NULL ИЛИ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) = """") ТОГДА ВЫРАЗИТЬ (ЗаказПоставщику.Номенклатура.НаименованиеПолное КАК Строка(100)) ИНАЧЕ ВЫРАЗИТЬ (НаименованиеНоменклатурыКонтрагента КАК Строка(100)) КОНЕЦ КАК Товар,";

		ТекстПоляАртикула = ",
			|	АртикулКонтрагента";

		ТекстВыборкиАртикула = ", 
			|	АртикулНоменклатурыКонтрагента КАК АртикулКонтрагента";

		ТекстВыборкиНоменклатуры = ", 
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100)) КАК НаименованиеКонтрагента";

		ТекстИсточникАртикула = "
			|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
			|	ПО НоменклатураКонтрагентов.Номенклатура = ЗаказПоставщику.Номенклатура
			|   И НоменклатураКонтрагентов.ХарактеристикаНоменклатуры = ЗаказПоставщику.ХарактеристикаНоменклатуры
			|	И НоменклатураКонтрагентов.Контрагент = &Контрагент";
			
		ТекстИсточникАртикулаБезХарактеристики = "
			|	ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
			|	ПО НоменклатураКонтрагентов.Номенклатура = ЗаказПоставщику.Номенклатура
			|	И НоменклатураКонтрагентов.Контрагент = &Контрагент";

		ТекстГруппировкиАртикулаИНоменклатуры = ", 
			|	АртикулНоменклатурыКонтрагента,
			|	ВЫРАЗИТЬ(НаименованиеНоменклатурыКонтрагента КАК Строка(100))";

	Иначе

		ТекстПоляТовараДляТоваров = "
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) КАК Товар,";
		
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПоставщику");
		
		ТекстПоляТовараДляУслуг = "
		|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,";

		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Артикул";
			ТекстКодАртикул = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды    = Истина;
			Колонка         = "Код";
			ТекстКодАртикул = "Код";
		Иначе
			ВыводитьКоды    = Ложь;
			Колонка         = "";
			ТекстКодАртикул = "Код";
		КонецЕсли;

		Если ВыводитьКоды Тогда
			ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаСКодом");
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСКодом");
		Иначе
			ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		Конецесли;

		ТекстПоляАртикула                     = "";
		ТекстВыборкиАртикула                  = ""; 
		ТекстИсточникАртикула                 = "";
		ТекстГруппировкиАртикулаИНоменклатуры = ""; 

	КонецЕсли;

	ОбластьШапки.Параметры.Товар = "Товары (работы, услуги)";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|   2    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + ТекстВыборкиНоменклатуры + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Номенклатура," + ТекстПоляТовараДляУслуг + "
	|	ЗаказПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ЗаказПоставщику.Количество,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПоставщику.Цена,
	|	ЗаказПоставщику.Сумма,
	|	ЗаказПоставщику.СуммаНДС,
	|	NULL,
	|   3    КАК НомерТЧ,
	|   ЗаказПоставщику.НомерСтроки КАК НомерСтроки,	
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщику" + ТекстИсточникАртикулаБезХарактеристики + "
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	NULL,
	|   4    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		0           								КАК СуммаНДС" + ТекстВыборкиАртикула + ТекстВыборкиНоменклатуры + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщику" + ТекстИсточникАртикулаБезХарактеристики + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.Цена" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерТЧ ВОЗР, НомерСтроки ВОЗР
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Если Тип = "ЗаказПоДаннымПоставщика" Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказПоДаннымПоставщика";
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказ";
	КонецЕсли;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстПоставщик = "Поставщик:";
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель = "Покупатель:";
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	Если ВыводитьКоды Тогда
		ОбластьШапки.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьШапки);

	Сумма    = 0;
	СуммаНДС = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
										+ ?(ВыборкаСтрокТовары.НомерТЧ = 4, " (возвратная тара)", "");

		Если ВыводитьКоды Тогда
			Если Тип = "ЗаказПоДаннымПоставщика" Тогда
				ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.АртикулКонтрагента;
			Иначе
				ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ЗапросТовары.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета                    = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Отпустил = "/"+ Руководитель + "/";
	ОбластьМакета.Параметры.Получил  = "/"+ Бухгалтер + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДатаПоступления,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;

	Макет = ПолучитьМакет("СчетЗаказ");    

	ТекстПоляТовараДляТоваров = "
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(100)) КАК Товар,";
		
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПоставщику");
		
	ТекстПоляТовараДляУслуг = "
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,";

	СтрокаВыборкиПоляСодержанияДляКорректировки = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("КорректировкаЗаказаПоставщику");
		
	ТекстПоляТовараДляУслугДляКорректировки = "
	|	" + СтрокаВыборкиПоляСодержанияДляКорректировки + " КАК Товар,";
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаСКодом");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСКодом");
	Иначе
		ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	Конецесли;

	ТекстПоляАртикула                     = "";
	ТекстВыборкиАртикула                  = ""; 
	ТекстИсточникАртикула                 = "";
	ТекстГруппировкиАртикулаИНоменклатуры = ""; 
    
	ОбластьШапки.Параметры.Товар = "Товары (работы, услуги)";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
	|	ВложенныйЗапрос.Товар		 		КАК Товар,
	|	ВложенныйЗапрос.КодАртикул 			КАК КодАртикул,
	|	СУММА(ВложенныйЗапрос.Количество)	КАК Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена 				КАК Цена,
	|	СУММА(ВложенныйЗапрос.Сумма) 		КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) 	КАК СуммаНДС,
	|	ВложенныйЗапрос.Характеристика		КАК Характеристика,
	|   ВложенныйЗапрос.НомерТЧ			    КАК НомерТЧ,
	|	Минимум(ВложенныйЗапрос.ПризнакКорректировка) 	КАК ПризнакКорректировка,
	|   Минимум(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ВложенныйЗапрос.Серия				КАК Серия
	|ИЗ (
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|   2    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	0 КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.ЕдиницаИзмерения,
	|		ЗаказПоставщику.Цена,
	|		ЗаказПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|   2    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	1 КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.ЕдиницаИзмерения,
	|		КорректировкаЗаказаПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(КорректировкаЗаказаПоставщику.НомерСтроки)        КАК НомерСтроки,
	|		СУММА(КорректировкаЗаказаПоставщику.Количество)           КАК Количество,
	|		СУММА(КорректировкаЗаказаПоставщику.Сумма     )           КАК Сумма,
	|		СУММА(КорректировкаЗаказаПоставщику.СуммаНДС  )           КАК СуммаНДС,
	|		КорректировкаЗаказаПоставщику.ХарактеристикаНоменклатуры  КАК Характеристика" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.КорректировкаЗаказаПоставщику.Товары КАК КорректировкаЗаказаПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		КорректировкаЗаказаПоставщику.Ссылка.ЗаказПоставщику = &ТекущийДокумент
	|		И КорректировкаЗаказаПоставщику.Ссылка.Проведен      = Истина
	|
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.ЕдиницаИзмерения,
	|		КорректировкаЗаказаПоставщику.Цена,
	|		КорректировкаЗаказаПоставщику.ХарактеристикаНоменклатуры" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Номенклатура," + ТекстПоляТовараДляУслуг + "
	|	ЗаказПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ЗаказПоставщику.Количество,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПоставщику.Цена,
	|	ЗаказПоставщику.Сумма,
	|	ЗаказПоставщику.СуммаНДС,
	|	NULL,
	|   3    КАК НомерТЧ,
	|   ЗаказПоставщику.НомерСтроки КАК НомерСтроки,
	|	0 КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаЗаказаПоставщику.Номенклатура," + ТекстПоляТовараДляУслугДляКорректировки + "
	|	КорректировкаЗаказаПоставщику.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	КорректировкаЗаказаПоставщику.Количество,
	|	КорректировкаЗаказаПоставщику.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаЗаказаПоставщику.Цена,
	|	КорректировкаЗаказаПоставщику.Сумма,
	|	КорректировкаЗаказаПоставщику.СуммаНДС,
	|	NULL,
	|   3    КАК НомерТЧ,
	|   КорректировкаЗаказаПоставщику.НомерСтроки КАК НомерСтроки,
	|	1 КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстВыборкиАртикула + "
	|	
	|ИЗ
	|	Документ.КорректировкаЗаказаПоставщику.Услуги КАК КорректировкаЗаказаПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		КорректировкаЗаказаПоставщику.Ссылка.ЗаказПоставщику = &ТекущийДокумент
	|		И КорректировкаЗаказаПоставщику.Ссылка.Проведен      = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	NULL,
	|   4    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	0 КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(ЗаказПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(ЗаказПоставщику.Количество)           КАК Количество,
	|		СУММА(ЗаказПоставщику.Сумма     )           КАК Сумма,
	|		0           								КАК СуммаНДС" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.ЗаказПоставщику.ВозвратнаяТара КАК ЗаказПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Номенклатура,
	|		ЗаказПоставщику.Цена" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура," + ТекстПоляТовараДляТоваров + "
	|	ВложенныйЗапрос.Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	NULL,
	|   4    КАК НомерТЧ,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	1 КАК ПризнакКорректировка,
	|	NULL КАК Серия" + ТекстПоляАртикула + "
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.Цена                        КАК Цена,
	|       МИНИМУМ(КорректировкаЗаказаПоставщику.НомерСтроки)        КАК НомерСтроки,	
	|		СУММА(КорректировкаЗаказаПоставщику.Количество)           КАК Количество,
	|		СУММА(КорректировкаЗаказаПоставщику.Сумма     )           КАК Сумма,
	|		0           								КАК СуммаНДС" + ТекстВыборкиАртикула + "
	|	ИЗ
	|		Документ.КорректировкаЗаказаПоставщику.ВозвратнаяТара КАК КорректировкаЗаказаПоставщику" + ТекстИсточникАртикула + "
	|
	|	ГДЕ
	|		КорректировкаЗаказаПоставщику.Ссылка.ЗаказПоставщику = &ТекущийДокумент
	|		И КорректировкаЗаказаПоставщику.Ссылка.Проведен      = Истина
	|
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаЗаказаПоставщику.Номенклатура,
	|		КорректировкаЗаказаПоставщику.Цена" + ТекстГруппировкиАртикулаИНоменклатуры + "
	|	) КАК ВложенныйЗапрос
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Товар,
	|	ВложенныйЗапрос.КодАртикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Характеристика,
	|   ВложенныйЗапрос.НомерТЧ,
	|	ВложенныйЗапрос.Серия
	|
	|УПОРЯДОЧИТЬ ПО ВложенныйЗапрос.НомерТЧ ВОЗР, ПризнакКорректировка, НомерСтроки
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_СчетЗаказ";
	

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.Дата,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Выводим шапку накладной
	ОбластьМакета                          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстПоставщик = "Поставщик:";
	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель = "Покупатель:";
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	Если ВыводитьКоды Тогда
		ОбластьШапки.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьШапки);

	Сумма    = 0;
	СуммаНДС = 0;
    НумераторСтрок = 0;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл
		Если ВыборкаСтрокТовары.количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
        НумераторСтрок = НумераторСтрок + 1;
		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.НомерСтроки = НумераторСтрок;
		ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
										+ ?(ВыборкаСтрокТовары.НомерТЧ = 4, " (возвратная тара)", "");

		Если ВыводитьКоды Тогда
			Если Тип = "ЗаказПоДаннымПоставщика" Тогда
				ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.АртикулКонтрагента;
			Иначе
				ОбластьСтроки.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + НумераторСтрок
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета                    = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Отпустил = "/"+ Руководитель + "/";
	ОбластьМакета.Параметры.Получил  = "/"+ Бухгалтер + "/";
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	
	// Получить экземпляр документа на печать
	Если ИмяМакета      = "Заказ" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);

	ИначеЕсли ИмяМакета      = "ЗаказПоДаннымПоставщика" Тогда

		// печать заявки от покупателя
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);
   ИначеЕсли ИмяМакета = "ЗаказКорректировка" тогда
		
		// печать заявки от покупателя
		ТабДокумент 	= ПечатьСчетаЗаказаКорректировки(ИмяМакета);
		

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	СтруктураПечатныхФорм = Новый Структура("Заказ,ЗаказКорректировка,ЗаказПоДаннымПоставщика","Заказ поставщику","Заказ поставщику (с учетом корректировок)","Заказ поставщику (по данным поставщика)");
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть, ЗаказПокупателя = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ЗаказПокупателя.ДатаОтгрузки) И ЗначениеЗаполнено(ДатаПоступления)
	   И (ЗаказПокупателя.ДатаОтгрузки < ДатаПоступления) Тогда
#Если Клиент Тогда
		Предупреждение("Отгрузку по заказу покупателя необходимо осуществить раньше даты поступления по данному документу!");
#Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Отгрузку по заказу покупателя необходимо осуществить раньше даты поступления по данному документу!");
#КонецЕсли 
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;
	
	Если ЭтоТовары Тогда
		ТоварТара = Перечисления.ТоварТара.Товар;
	Иначе
		ТоварТара = Перечисления.ТоварТара.Тара;
	КонецЕсли; 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТоварТара", ТоварТара);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли;

	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Номенклатура.СтавкаНДС       КАК СтавкаНДС,
	
	
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток              КАК Сумма,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток            КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток            КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток             КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя
	|		                И СтатусПартии = &СтатусПартии) КАК ЗаказыПокупателейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ЗаказПокупателя
	|		                И ЗаказПоставщику <> &Ссылка
	|		                И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
	|
	|ГДЕ 
	|	НЕ ЗаказыПокупателейОстатки.Номенклатура.Услуга
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Заказ			 = Выборка.ЗаказПокупателя;

			Если ЭтоТовары Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
				
				СтрокаТабличнойЧасти.Количество = Количество * Выборка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
														/ Выборка.Коэффициент;
			Иначе
				СтрокаТабличнойЧасти.Количество = Количество;														
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Получить нужные цены запросом
	НовыйВалютаДокумента    = ?(ЭтоТовары, ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, Дата);
	НовыйКурсДокумента      = СтруктураКурса.Курс;
	НовыйКратностьДокумента = СтруктураКурса.Кратность;

	СтруктураЗначенийЦен = Новый Структура;
	СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                       ТипЦен);
	СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",              НовыйВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",                НовыйКурсДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",           НовыйКратностьДокумента);
	СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",            ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",                 ?(ЭтоТовары, УчитыватьНДС, Истина));
	СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",             ?(ЭтоТовары, СуммаВключаетНДС, Истина));
	СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти",      ?(ЭтоТовары, Истина, Ложь));

	РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначенийЦен, 
	                                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
	                                                ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"),
	                                                Дата, Контрагент, ДоговорКонтрагента);

	ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.Цена = 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			Ценообразование.ЗаполнитьЦенуВСтрокеТабличнойЧасти(ЭтотОбъект,
			                                   СтрокаТабличнойЧасти,
			                                   СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен,
			                                   СтруктураЗначенийЦен,
			                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			                                   ?(ЭтоТовары, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Неопределено));
			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;
		Если ЭтоТовары Тогда
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
        КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ(ТабличнаяЧасть, ВнутреннийЗаказ = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ВнутреннийЗаказ.ДатаОтгрузки)
	   И ЗначениеЗаполнено(ДатаПоступления)
	      И ВнутреннийЗаказ.ДатаОтгрузки < ДатаПоступления Тогда
#Если Клиент Тогда
		Предупреждение  ("Отгрузку по внутреннему заказу необходимо осуществить раньше даты поступления по данному документу!");
#Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Отгрузку по внутреннему заказу необходимо осуществить раньше даты поступления по данному документу!");
#КонецЕсли 
		Возврат;
	КонецЕсли;

	ЭтоТовары = ТабличнаяЧасть = Товары;
	ТоварТара = ?(ЭтоТовары, Перечисления.ТоварТара.Товар, Перечисления.ТоварТара.Тара);
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр( "ТоварТара", ТоварТара);
	Запрос.УстановитьПараметр( "Ссылка",    Ссылка);

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВнутреннийЗаказ", ВнутреннийЗаказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТекстЗапросаПоНоменклатуре = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|   ИЗ  Документ.ВнутреннийЗаказ." + ?(ЭтоТовары, "Товары", "ВозвратнаяТара") + "
	|   ГДЕ Документ.ВнутреннийЗаказ." + ?(ЭтоТовары, "Товары", "ВозвратнаяТара") + ".Ссылка = &ВнутреннийЗаказ";

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ЗаказыОстатки.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.ВнутреннийЗаказ,
	|	ЗаказыОстатки.КоличествоОстаток КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ВнутреннийЗаказ = &ВнутреннийЗаказ
	|                       И СтатусПартии = &СтатусПартии) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказПокупателя = &ВнутреннийЗаказ
	|                       И ЗаказПоставщику <> &Ссылка
	|                       И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ДокументРезерва = &ВнутреннийЗаказ) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыОстатки.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура 
	|		 И ЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано           = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано    = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура    = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество      = Количество;
			СтрокаТабличнойЧасти.Заказ			 = Выборка.ВнутреннийЗаказ;
			
			Если ЭтоТовары Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла; 
	
	// Получить нужные цены запросом
	НовыйВалютаДокумента    = ?(ЭтоТовары, ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, Дата);
	НовыйКурсДокумента      = СтруктураКурса.Курс;
	НовыйКратностьДокумента = СтруктураКурса.Кратность;

	СтруктураЗначенийЦен = Новый Структура;
	СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                       ТипЦен);
	СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",              НовыйВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",                НовыйКурсДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",           НовыйКратностьДокумента);
	СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",            ВалютаДокумента);
	СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",                 ?(ЭтоТовары, УчитыватьНДС, Истина));
	СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",             ?(ЭтоТовары, СуммаВключаетНДС, Истина));
	СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти",      ?(ЭтоТовары, Истина, Ложь));

	РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначенийЦен, 
	                                                  Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
	                                                  ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"),
	                                                  Дата, Контрагент, ДоговорКонтрагента);

	ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.Цена = 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			Ценообразование.ЗаполнитьЦенуВСтрокеТабличнойЧасти(ЭтотОбъект,
			                                   СтрокаТабличнойЧасти,
			                                   СтруктураПоиска,
			                                   ВыборкаРезультатЗапросаЦен,
			                                   СтруктураЗначенийЦен,
			                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
			                                   ?(ЭтоТовары, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Неопределено));

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ()

// Заполняет табличную часть "Товары" по остаткам заказа покупателя
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоЗаказуПокупателю(ЗаказПокупателя) Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары, ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьТоварыПоЗаказуПокупателю()

// Заполняет табличную часть "Возвратная тара" по остаткам заказа покупателя
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоЗаказуПокупателю(ЗаказПокупателя) Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара, ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоЗаказуПокупателю()

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии(ИмяТЧ) 
	Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);


		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
 	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",            ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Рассчитаем сумму взаиморасчетов
		СтрокаТаблицы.СуммаУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);

		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ можно выписывать только по договору, взаиморасчеты по которому ведутся по заказам или по договору в целом!", Отказ, Заголовок);
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок, ИмяТабЧасти = "Товары")

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
		Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");
	СтруктураОбязательныхПолей.Вставить("Сумма");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)


	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Содержание, Количество, Сумма");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Услуги", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	// Движения по документу.
	Если Не Отказ Тогда

		// Контроль лимитов возвратной тары
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			УправлениеЗапасами.КонтрольЛимитовВозвратнойТарыПоставщика(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если  СуммаДокумента <> 0 Тогда
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Ссылка; 
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;
			
        КонецЕсли;
		Если НЕ Отказ Тогда
			
			НаборДвижений = Движения.ЗаказыПоставщикам;
				
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам",    ТаблицаПоУслугам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",       ТаблицаПоТаре);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии("Товары"),                 "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоУслугам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам);
			ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда 

				// По регистру РазмещениеЗаказовПокупателей
				НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
					
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОчиститьНенужныеТабличныеЧасти();

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаДокумента = СуммаДокумента + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"               , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьЧислоДнейЗадолженности", "КонтролироватьЧислоДнейЗадолженности");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьСуммуЗадолженности"    , "КонтролироватьСуммуЗадолженности");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ДопустимоеЧислоДнейЗадолженности"    , "ДопустимоеЧислоДнейЗадолженности");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ДопустимаяСуммаЗадолженности"        , "ДопустимаяСуммаЗадолженности");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                         , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада"                         , "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "Заказ");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"                , "Содержание");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");

	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "Заказ");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	
	// Проверить заполнение ТЧ "Товары", "Услуги", "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
			
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			                    ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
			                    Отказ, Заголовок);
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ДокументОснование = Основание;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		// Заполнение шапки
		КонтактноеЛицоКонтрагента = Основание.КонтактноеЛицо;
		Контрагент     = Основание.Контрагент;
		Организация = 	УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		
		ДоговорКонтрагента 	= ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, мСтруктураПараметровДляПолученияДоговора);
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Заполнение шапки
		ВалютаДокумента                   = Основание.ВалютаДокумента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		Комментарий                       = Основание.Комментарий;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов                = Основание.КурсВзаиморасчетов;
		Подразделение                     = Основание.Подразделение;
		СтруктурнаяЕдиница                = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС                  = Основание.СуммаВключаетНДС;
		СуммаДокумента                    = Основание.СуммаДокумента;
		УчитыватьНДС                      = Основание.УчитыватьНДС;
		
		Склад = ?(ТипЗнч(Основание.СкладГруппа) = Тип("СправочникСсылка.Склады"), Основание.СкладГруппа, Неопределено);
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#Если Клиент Тогда
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
		КонецЕсли;
		#КонецЕсли
		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Если ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
			
			СкопироватьТабличнуюЧасть(Основание, "ВозвратнаяТара");
			СкопироватьТабличнуюЧасть(Основание, "Товары");
			СкопироватьТабличнуюЧасть(Основание, "Услуги");

		Иначе
			Организация = Основание.Организация;

			//переносим в документ необеспеченную часть заказа покупателя
			ЗаполнитьТабличнуюЧастьНеобеспеченнойЧастьюЗаказа(Товары, Основание);
			ЗаполнитьТабличнуюЧастьНеобеспеченнойЧастьюЗаказа(ВозвратнаяТара, Основание);

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		// Заполнение шапки
		ВалютаДокумента                   = Основание.ВалютаДокумента;
		ДатаОплаты                        = Основание.ДатаОплаты;
		ДатаПоступления                   = Основание.ДатаПоступления;
		ДоговорКонтрагента                = Основание.ДоговорКонтрагента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		Комментарий                       = Основание.Комментарий;
		КонтактноеЛицоКонтрагента         = Основание.КонтактноеЛицоКонтрагента;
		Контрагент                        = Основание.Контрагент;
		КурсВзаиморасчетов                = Основание.КурсВзаиморасчетов;
		Организация                       = Основание.Организация;
		Ответственный                     = Основание.Ответственный;
		Подразделение                     = Основание.Подразделение;
		Склад                             = Основание.Склад;
		СтруктурнаяЕдиница                = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС                  = Основание.СуммаВключаетНДС;
		СуммаДокумента                    = Основание.СуммаДокумента;
		ТипЦен                            = Основание.ТипЦен;
		УчитыватьНДС                      = Основание.УчитыватьНДС;
		
		УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ЭтотОбъект);

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВозвратнаяТара);
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовары);
		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУслуги);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура СкопироватьТабличнуюЧасть(Основание, ИмяТабЧасти)
	Для Каждого ТекСтрока Из Основание[ИмяТабЧасти] Цикл
		Если ИмяТабЧасти = "Товары" И ТекСтрока.Номенклатура.Комплект Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТабЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если ИмяТабЧасти <> "Услуги" Тогда
			НоваяСтрока.Заказ = Основание;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьНеобеспеченнойЧастьюЗаказа(ТабЧасть, Основание)
	ЭтоТовары = ТабЧасть=Товары;
	Запрос = новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|ОстаткиЗаказы.Номенклатура,
	|//ПОЛЕ_Характеристика,
	|ОстаткиЗаказы.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|ОстаткиЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|ОстаткиЗаказы.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|ОстаткиЗаказы.КоличествоОстаток - ЕстьNull(ОстаткиРезервы.КоличествоОстаток,0)-ЕстьNull(ОстаткиРазмещение.КоличествоОстаток,0) КАК Количество
	|ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя=&Основание И СтатусПартии=&СтатусПартии) КАК ОстаткиЗаказы
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,ДокументРезерва=&Основание) КАК ОстаткиРезервы
	|ПО ОстаткиЗаказы.Номенклатура = ОстаткиРезервы.Номенклатура 
	|//СОЕДИНЕНИЕ_Резервы_Характеристика
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНАкопления.РазмещениеЗаказовПокупателей.Остатки(,ЗаказПокупателя=&Основание) КАК ОстаткиРазмещение
	|ПО ОстаткиЗаказы.Номенклатура = ОстаткиРазмещение.Номенклатура
	|//СОЕДИНЕНИЕ_Размещение_Характеристика
	|ГДЕ НЕ ОстаткиЗаказы.Номенклатура.Комплект  И не ОстаткиЗаказы.Номенклатура.Услуга И
	|ОстаткиЗаказы.КоличествоОстаток - ЕстьNull(ОстаткиРезервы.КоличествоОстаток,0)-ЕстьNull(ОстаткиРазмещение.КоличествоОстаток,0)>=0 ";
	Если ЭтоТовары Тогда
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"//ПОЛЕ_Характеристика","ОстаткиЗаказы.ХарактеристикаНоменклатуры");
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"//СОЕДИНЕНИЕ_Резервы_Характеристика","И ОстаткиЗаказы.ХарактеристикаНоменклатуры = ОстаткиРезервы.ХарактеристикаНоменклатуры");
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"//СОЕДИНЕНИЕ_Размещение_Характеристика","И ОстаткиЗаказы.ХарактеристикаНоменклатуры = ОстаткиРазмещение.ХарактеристикаНоменклатуры");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основание",Основание);
	Запрос.УстановитьПараметр("СтатусПартии",?(ЭтоТовары,Перечисления.СтатусыПартийТоваров.Купленный,Перечисления.СтатусыПартийТоваров.ВозвратнаяТара));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.Количество<=0 Тогда Продолжить; КонецЕсли;
		НоваяСтрока = ТабЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Заказ = Основание;
		Если ЭтоТовары Тогда
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ЭтотОбъект, мВалютаРегламентированногоУчета);
        КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
СписокДопустимыхВидовВзаиморасчетов = Новый СписокЗначений();
СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);

мИспользоватьОбменЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
