
////////////////////////////////////////////////////////////////////////////////
//
// ОБЩИЙ МОДУЛЬ - УПРАВЛЕНИЕ СОЕДИНЕНИЯМИ ИНФОРМАЦИОННОЙ БАЗЫ 
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ БЛОКИРОВКИ И ЗАВЕРШЕНИЯ СОЕДИНЕНИЙ С ИБ

// Устанавливает блокировку соединений ИБ.
//
// Параметры
//  ТекстСообщения  – Строка – текст, который будет частью сообщения об ошибке 
//                             при попытке установки соединения с заблокированной
//                             информационной базой.  
// 
//  КодРазрешения - Строка -   строка, которая должна быть добавлена к параметру 
//                             командной строки "/uc" или к параметру строки 
//                             соединения "uc", чтобы установить соединение с 
//                             информационной базой несмотря на блокировку. 
//
// Возвращаемое значение:
//   Булево   – результат завершения работы пользователей.
//
Процедура УстановитьБлокировкуСоединений(Знач ТекстСообщения = "", 
	Знач КодРазрешения = "КодРазрешения") Экспорт
	
	Блокировка = Новый БлокировкаУстановкиСоединений;
	Блокировка.Установлена = Истина;
	Блокировка.Начало = ТекущаяДата();
	Блокировка.КодРазрешения = КодРазрешения; 
	Блокировка.Сообщение = СформироватьСообщениеБлокировки(ТекстСообщения, КодРазрешения);
	УстановитьБлокировкуУстановкиСоединений(Блокировка);
	
КонецПроцедуры
        
// Снять блокировку информационной базы
// после выполнения обновления
//
Процедура РазрешитьРаботуПользователей() Экспорт
	
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	Если ТекущийРежим.Установлена Тогда
		НовыйРежим = Новый БлокировкаУстановкиСоединений;
		НовыйРежим.Установлена = Ложь;
		УстановитьБлокировкуУстановкиСоединений(НовыйРежим);
	КонецЕсли;		
	
КонецПроцедуры	

// Устанавливает блокировку соединений при пакетном 
// обновлении конфигурации информационной базы
// Может вызываться из внешнего соединения.
Процедура УстановитьБлокировкуСоединенийПриОбновлении() Экспорт
	
	УстановитьБлокировкуСоединений("в связи с необходимостью обновления конфигурации.", 
	                               "ПакетноеОбновлениеКонфигурацииИБ");
	
КонецПроцедуры

// Отключить все активные соединения ИБ (кроме текущего сеанса).
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ.  
//
// Возвращаемое значение:
//   Булево   – результат отключения соединений.
//
Функция ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ) Экспорт

	Если ПолучитьСеансыИнформационнойБазы().Количество() <= 1 Тогда
		Возврат Истина;	// Отключены все пользователи, кроме текущего сеанса
	КонецЕсли; 
	
	Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
		Сообщение = ПолучитьНазванияСоединенийИБ("Не удалось завершить работу пользователей:");
		ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение);
#КонецЕсли
		Возврат Ложь;	// Невозможно принудительно отсоединить подключения в файловом режиме работы
	КонецЕсли;	
	
	Попытка
		
		Сеансы = ПолучитьАктивныеСеансыИБ(ПараметрыАдминистрированияИБ);
		Для каждого Сеанс Из Сеансы.Сеансы Цикл
			// Разрываем Connections с ИБ
			СтрСообщения = "Разрывается сеанс: Пользователь " + Сеанс.UserName + ", компьютер " + 
				Сеанс.Host + ", установлено " + Сеанс.StartedAt + ", режим " + Сеанс.AppID;
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Информация, , , СтрСообщения);
			Сеансы.АгентСервера.TerminateSession(Сеансы.КластерСерверов, Сеанс);
		КонецЦикла;
		
		Возврат ПолучитьСеансыИнформационнойБазы().Количество() <= 1;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции 

// Получить параметры блокировки соединений ИБ для использования на стороне клиента.
//
// Параметры:
//  ПолучитьКоличествоСеансов - Булево - если Истина, то в возвращаемой структуре
//                                       заполняется поле КоличествоСеансов.
//
Функция ПараметрыБлокировкиСеансов(Знач ПолучитьКоличествоСеансов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийРежимИБ = ПолучитьБлокировкуСеансов();
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийРежим = НовыеПараметрыБлокировкиСоединений();
	Если УстановленаБлокировкаСоединенийНаДату(ТекущийРежимИБ, ТекущаяДата) Тогда
		ТекущийРежим = ТекущийРежимИБ;
	ИначеЕсли ТекущийРежимИБ.Установлена Тогда
		ТекущийРежим = ТекущийРежимИБ;
	КонецЕсли;
	
	ПараметрыБлокировки = Новый Структура(
		"Установлена,Начало,Конец,Сообщение,ИнтервалОжиданияЗавершенияРаботыПользователей,КоличествоСеансов,ТекущаяДатаСеанса,ПерезапуститьПриЗавершении",
		ТекущийРежим.Установлена,
		ТекущийРежим.Начало,
		ТекущийРежим.Конец,
		ТекущийРежим.Сообщение,
		5 * 60, // 5 минут; интервал ожидания завершения пользователей после установки
		        // блокировки информационной базы (в секундах).
		?(ПолучитьКоличествоСеансов, КоличествоСеансовИнформационнойБазы(), 0),
		ТекущаяДатаСеанса(),
		Истина
	);
	
	УправлениеСоединениямиИБПереопределяемый.ЗаполнитьПараметрыБлокировкиСеансов(ПараметрыБлокировки, ТекущаяДата);

	Возврат ПараметрыБлокировки;
	
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Обработать параметры запуска, связанные с завершение и разрешение соединений ИБ.
//
// Параметры
//  ЗначениеПараметраЗапуска  – Строка – главный параметр запуска
//  ПараметрыЗапуска          – Массив – дополнительные параметры запуска, разделенные
//                                       символом ";".
//
// Возвращаемое значение:
//   Булево   – Истина, если требуется прекратить выполнение запуска системы.
//
Функция ОбработатьПараметрыЗапуска(Знач ЗначениеПараметраЗапуска, Знач ПараметрыЗапуска) Экспорт

	// Обработка параметров запуска программы - 
	// ЗапретитьРаботуПользователей и РазрешитьРаботуПользователей
	Если ЗначениеПараметраЗапуска = Врег("РазрешитьРаботуПользователей") Тогда
		
		Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
			Сообщить("Параметр запуска РазрешитьРаботуПользователей не отработан. Нет прав на администрирование информационной базы.", 
			         СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;   
		
		РазрешитьРаботуПользователей();
		ЗавершитьРаботуСистемы(Ложь);
		Возврат Истина;

	ИначеЕсли ЗначениеПараметраЗапуска = Врег("ЗавершитьРаботуПользователей") Тогда
		// Параметр может содержать две дополнительные части, разделенные символом ";" - 
		// имя и пароль администратора ИБ, от имени которого происходит подключение к кластеру серверов
		// в клиент-серверном варианте развертывания системы. Их необходимо передавать в случае, 
		// если текущий пользователь не является администратором ИБ.
		// См. использование в процедуре ЗавершитьРаботуПользователей().
		
		Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
			Сообщить("Параметр запуска ЗавершитьРаботуПользователей не отработан. Нет прав на администрирование информационной базы.", 
			         СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли; 
		
		// поскольку блокировка еще не установлена, то при входе в систему
		// для данного пользователя был подключен обработчик ожидания завершения работы.
		// Отключаем его. Так как для этого пользователя подключается специализированный обработчики ожидания
		// "ЗавершитьРаботуПользователей", который ориентирован на то, что данный пользователь
		// должен быть отключен последним.   
		ОтключитьОбработчикОжидания("КонтрольРежимаЗавершенияРаботыПользователей");
		УстановитьБлокировкуСоединений();
		ЗавершитьРаботуПользователей();
		ПодключитьОбработчикОжидания("ЗавершитьРаботуПользователей", 180);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецЕсли

// Осуществляет попытку подключиться к кластеру серверов и получить список 
// активных соединений к ИБ и использованием указанных параметров администрирования.
//
// Параметры
//  ПараметрыАдминистрированияИБ  – Структура – параметры администрирования ИБ
//  ВыдаватьСообщения             – Булево    – разрешить вывод интерактивных сообщений.
//
// Возвращаемое значение:
//   Булево   – Истина, если проверка завершена успешно.
//
Функция ПроверитьПараметрыАдминистрированияИБ(ПараметрыАдминистрированияИБ, Знач ВыдаватьСообщения = Истина) Экспорт

  Результат = Ложь;
	Попытка
		Сеансы = ПолучитьАктивныеСеансыИБ(ПараметрыАдминистрированияИБ);
		Результат = Истина;
	Исключение
		Сообщение = "Не удалось подключиться к кластеру серверов.";
		ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Ошибка,,, 
			Сообщение + Символы.ПС + ОписаниеОшибки());
#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение(Сообщение + Символы.ПС + ИнформацияОбОшибке().Описание);
		КонецЕсли; 
#Иначе
		ВызватьИсключение Сообщение;
#КонецЕсли
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
	
КонецФункции 

//////////////////////////////////////////////////////////////////////////////// 
// СЕРВИСНЫЕ ФУНКЦИИ 
//  

// Получить пустую структуру с параметрами блокировки сеансов области данных.
// 
// Возвращаемое значение:
//   Структура        – с полями:
//     Начало         - Дата   - время начала действия блокировки
//     Конец          - Дата   - время завершения действия блокировки
//     Сообщение      - Строка - сообщения для пользователей, выполняющих вход в заблокированную область данных
//     Установлена    - Булево - признак того, что блокировка установлена
//     Эксклюзивная   - Булево - блокировка не может быть изменена администратором приложения
//
Функция НовыеПараметрыБлокировкиСоединений() Экспорт
	
	Возврат Новый Структура("Конец,Начало,Сообщение,Установлена,Эксклюзивная",
		Дата(1,1,1), Дата(1,1,1), "", Ложь, Ложь);
		
КонецФункции

// Возвращает текст сообщения блокировки сеансов.
//
Функция СформироватьСообщениеБлокировки(Знач Сообщение, Знач КодРазрешения) Экспорт

	ПараметрыАдминистрированияИБ = ПолучитьПараметрыАдминистрированияИБ();
	ПризнакФайловогоРежима = Ложь;
	ПутьКИБ = ПутьКИнформационнойБазе(ПризнакФайловогоРежима, ПараметрыАдминистрированияИБ.ПортКластераСерверов);
	СтрокаПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима = Истина, "/F", "/S") + ПутьКИБ; 
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ТекстСообщения = Сообщение + Символы.ПС + Символы.ПС;
	КонецЕсли; 
	ТекстСообщения = ТекстСообщения +
		"Для администратора:" + Символы.ПС +
		"Чтобы принудительно разблокировать информационную базу, воспользуйтесь консолью кластера серверов или запустите ""1С:Предприятие"" с параметрами:" + Символы.ПС +
        "ENTERPRISE " + СтрокаПутиКИнформационнойБазе + " /CРазрешитьРаботуПользователей /UC" + КодРазрешения;
	Возврат ТекстСообщения;

КонецФункции 

// Возвращает пользовательский текст сообщения блокировки сеансов.
//
Функция ИзвлечьСообщениеБлокировки(Знач Сообщение) Экспорт

	ИндексМаркера = Найти(Сообщение, "Для администратора:");
	Возврат ?(ИндексМаркера > 0, Сред(Сообщение, 1, ИндексМаркера - 3), Сообщение);

КонецФункции 

// Возвращает новую структуру параметров администрирования ИБ.
//
Функция НовыеПараметрыАдминистрированияИБ(Знач ИмяАдминистратораИБ = "",
	Знач ПарольАдминистратораИБ = "", Знач ИмяАдминистратораКластера = "",
	Знач ПарольАдминистратораКластера = "", Знач ПортКластераСерверов = 0, 
	Знач ПортАгентаСервера = 0) Экспорт
	
	Возврат Новый Структура("ИмяАдминистратораИБ,
							|ПарольАдминистратораИБ,
							|ИмяАдминистратораКластера,
							|ПарольАдминистратораКластера,
							|ПортКластераСерверов,
							|ПортАгентаСервера",
							ИмяАдминистратораИБ,
							ПарольАдминистратораИБ,
							ИмяАдминистратораКластера,
							ПарольАдминистратораКластера,
							ПортКластераСерверов,
							ПортАгентаСервера);
	
КонецФункции

// Возвращает текст со списком названий активных соединений ИБ.
//
// Параметры
//  Сообщение  – Строка – текст, который добавляется в начало возвращаемого текста.
// 
Функция ПолучитьНазванияСоединенийИБ(Знач Сообщение) Экспорт
	
	Результат = Сообщение;
	Для каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если Сеанс.НомерСеанса <> НомерСеансаИнформационнойБазы() Тогда
			Результат = Результат + Символы.ПС + " - " + Сеанс;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// Получить интервал ожидания завершения пользователей после установки
// блокировки информационной базы (в секундах).
// 
Функция ИнтервалОжиданияЗавершенияРаботыПользователей() Экспорт
	
	Возврат 5 * 60;	// 5 минут
	
КонецФункции

// Получить сохраненные параметры администрирования кластера серверов.
//
Функция ПолучитьПараметрыАдминистрированияИБ() Экспорт

	СтруктураНастроек = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		Возврат НовыеПараметрыАдминистрированияИБ();
	Иначе	
		Параметры = НовыеПараметрыАдминистрированияИБ();
		ЗаполнитьЗначенияСвойств(Параметры, СтруктураНастроек);
		Возврат Параметры;
	КонецЕсли;
	
КонецФункции 

// Записать параметры администрирования кластера серверов в ИБ.
//
Процедура ЗаписатьПараметрыАдминистрированияИБ(Параметры) Экспорт
	
	Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(Параметры));
	
КонецПроцедуры

Функция ПолучитьАктивныеСеансыИБ(НастройкаБлокировки, Знач ВсеКромеТекущего = Истина) 

	Результат = Новый Структура("АгентСервера, КластерСерверов, Сеансы", Неопределено, Неопределено, Новый Массив);
	Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
		ВызватьИсключение "Невозможно получить список активных сеансов в Файловом варианте системы";
	КонецЕсли;	
	
	ПодстрокиСтрокиСоединения  = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(
		СтрокаСоединенияИнформационнойБазы(), ";");
		
	ИмяСервера = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	
	ComConnector = Новый COMОбъект(ИмяCOMСоединителя());
	
	РазделительПорта = Найти(ИмяСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяИПортСервера = ИмяСервера;
		ИмяСервера = Сред(ИмяИПортСервера, 1, РазделительПорта - 1);
		НомерПортаКластера = Число(Сред(ИмяИПортСервера, РазделительПорта + 1));
	ИначеЕсли НастройкаБлокировки.ПортКластераСерверов <> 0 Тогда
		НомерПортаКластера = НастройкаБлокировки.ПортКластераСерверов;
	Иначе		
		НомерПортаКластера = ComConnector.RMngrPortDefault;
	КонецЕсли;
	
	ИдентификаторАгентаСервера = ИмяСервера;
	Если НастройкаБлокировки.ПортАгентаСервера <> 0 Тогда
	      ИдентификаторАгентаСервера = ИдентификаторАгентаСервера + ":" + 
		  	Формат(НастройкаБлокировки.ПортАгентаСервера, "ЧГ=0");
	КонецЕсли; 
	
	// Подключение к агенту сервера
	АгентСервера = ComConnector.ConnectAgent(ИдентификаторАгентаСервера);
	Результат.АгентСервера = АгентСервера;
	
	// Найдем необходимый нам кластер
	Для каждого Кластер Из АгентСервера.GetClusters() Цикл
		
		Если Кластер.MainPort <> НомерПортаКластера Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.КластерСерверов = Кластер; 
		АгентСервера.Authenticate(Кластер, НастройкаБлокировки.ИмяАдминистратораКластера, 
			НастройкаБлокировки.ПарольАдминистратораКластера);
		
		// Получаем список сеансов
		НомерТекущегоСеанса = ПараметрыОтключенияСеансов().НомерСеансаИнформационнойБазы;
		СписокСеансов = АгентСервера.GetSessions(Кластер);
		Для Каждого Сеанс из СписокСеансов Цикл
			Если ВРег(Сеанс.InfoBase.Name) <> ВРег(ИмяИБ) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВсеКромеТекущего ИЛИ (НомерТекущегоСеанса <> Сеанс.SessionID) Тогда
				Результат.Сеансы.Добавить(Сеанс);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции 


// Получить строку соединения ИБ, если задан нестандартный порт кластера серверов.
//
// Параметры
//  ПортКластераСерверов  - Число - нестандартный порт кластера серверов
//
// Возвращаемое значение:
//   Строка   - строка соединения ИБ
//
Функция ПолучитьСтрокуСоединенияИнформационнойБазы(Знач ПортКластераСерверов = 0) Экспорт

	Результат = СтрокаСоединенияИнформационнойБазы();
	Если ОпределитьЭтаИнформационнаяБазаФайловая() ИЛИ (ПортКластераСерверов = 0) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ПодстрокиСтрокиСоединения  = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Результат, ";");
	ИмяСервера = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[0], 7));
	ИмяИБ      = СократитьДвойныеКавычки(Сред(ПодстрокиСтрокиСоединения[1], 6));
	Результат  = "Srvr=" + """" + ИмяСервера + 
		?(Найти(ИмяСервера,":")>0, "", ":" + Формат(ПортКластераСерверов, "ЧГ=0")) + """;" + 
		"Ref=" + """" + ИмяИБ + """;";
	Возврат Результат;

КонецФункции 

// Определение пути к информационной базе
//
Функция ПутьКИнформационнойБазе(ПризнакФайловогоРежима = Неопределено, Знач ПортКластераСерверов = 0) Экспорт
	
	СтрокаСоединения = ПолучитьСтрокуСоединенияИнформационнойБазы(ПортКластераСерверов);
	
	ПозицияПоиска = Найти(Врег(СтрокаСоединения), "FILE=");
	
	Если ПозицияПоиска = 1 Тогда // файловая ИБ
		
		ПутьКИБ = Сред(СтрокаСоединения, 6, СтрДлина(СтрокаСоединения) - 6);
		ПризнакФайловогоРежима = Истина;
		
	Иначе
		ПризнакФайловогоРежима = Ложь;
		
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "SRVR=");
		
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединения), "REF=");
		
		Если НЕ (ПозицияПоиска = 1) Тогда
			Возврат Неопределено;
		КонецЕсли;
				
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКИБ = """" + ИмяСервера + "\" + ИмяИБНаСервере + """";				
	КонецЕсли;
	
	Возврат ПутьКИБ;
	
КонецФункции

Функция СократитьДвойныеКавычки(Знач Строка)

	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2); 
	КонецЦикла; 
	Пока Найти(Результат, """") = СтрДлина(Результат) Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1); 
	КонецЦикла; 
	Возврат Результат;

КонецФункции 

// Вернуть имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
Функция ИмяCOMСоединителя() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");
	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	
КонецФункции	

// Возвращает структуру с параметрами для принудительного отключения сеансов.
//
Функция ПараметрыОтключенияСеансов()
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат Новый Структура("НомерСеансаИнформационнойБазы,WindowsПлатформаНаСервере", 
		НомерСеансаИнформационнойБазы(), 
		СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
			Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
КонецФункции	

// Получить число активных сеансов ИБ.
//
// Параметры:
//   УчитыватьКонсоль               - Булево - если Ложь, то исключить сеансы консоли кластера серверов.
//                                             сеансы консоли кластера серверов не препятствуют выполнению 
//                                             административных операций (установке монопольного режима и т.п.).
//   СообщенияДляЖурналаРегистрации - СписокЗначений - пакета сообщения для журнала регистрации
//                                                     сформированных на клиенте.
//
// Возвращаемое значение:
//   Число   – количество активных сеансов ИБ.
//
Функция КоличествоСеансовИнформационнойБазы(УчитыватьКонсоль = Истина) Экспорт
	
	СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	Если УчитыватьКонсоль Тогда
		Возврат СеансыИБ.Количество();
	КонецЕсли;
	
	Результат = 0;
	Для каждого СеансИБ Из СеансыИБ Цикл
		Если СеансИБ.ИмяПриложения <> "SrvrConsole" Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция УстановленаБлокировкаСоединенийНаДату(ТекущийРежим, ТекущаяДата)
	
	Возврат (ТекущийРежим.Установлена И ТекущийРежим.Начало <= ТекущаяДата 
		И (Не ЗначениеЗаполнено(ТекущийРежим.Конец) Или ТекущаяДата <= ТекущийРежим.Конец));
		
КонецФункции

