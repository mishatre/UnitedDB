
Функция ПолучитьМассивВсехУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия КАК ОбменУправлениеТорговлейБухгалтерия
				   |
				   |ГДЕ
				   |
				   |	ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.ЭтотУзел());			   
				   
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ВернутьМассивВсехУзловИзПараметровСеанса()
	
	Возврат ПараметрыСеанса.ВсеУзлыОбменаТорговляБухгалтерия;	
	
КонецФункции




Функция ПолучитьСоответствиеУзловИОрганизаций() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаТорговляБухгалтерия;
		
	СоответствиеУзловИОрганизаций = Хранилище.Получить();
	
	Возврат СоответствиеУзловИОрганизаций;
	
КонецФункции

Функция ПолучитьСоответствиеУзловИСкладов() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеСкладовИУзловОбменаТорговляБухгалтерия;
		
	СоответствиеУзловИСкладов = Хранилище.Получить();
	
	Возврат СоответствиеУзловИСкладов;
	
КонецФункции

Функция ПолучитьСоответствиеУзловИПодразделений() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеПодразделенийИУзловОбменаТорговляБухгалтерия;
		
	СоответствиеУзловИПодразделений = Хранилище.Получить();
	
	Возврат СоответствиеУзловИПодразделений;
	
КонецФункции

Функция ПолучитьТаблицуУзловИДат() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеУзловИДатДляОбменаБухгалтерияТорговля;
		
	ТаблицаУзловИДат = Хранилище.Получить();
	
	Возврат ТаблицаУзловИДат;
	
КонецФункции

Функция ВернутьМассивУзловПоОднойОрганизации(Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	СоответвиеПустое = СоответствиеУзловИОрганизаций = Неопределено;
	Если СоответвиеПустое Тогда
		
		СоответствиеУзловИОрганизаций = ПолучитьСоответствиеУзловИОрганизаций();
	
	КонецЕсли;
	
	МассивУзлов = СоответствиеУзловИОрганизаций[Организация];
	
	Если МассивУзлов = Неопределено Тогда
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
		
		Если МассивУзлов = Неопределено Тогда
			Возврат МассивУзлов;
		КонецЕсли;
		
		СоответствиеУзловИОрганизаций.Вставить(Организация, МассивУзлов);
		
		Если СоответвиеПустое Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными(); 	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивУзлов;	
	
КонецФункции

Функция ВернутьМассивУзловПоОдномуСкладу(Склад, СоответствиеУзловИСкладов = Неопределено)
	
	СоответвиеПустое = СоответствиеУзловИСкладов = Неопределено;
	Если СоответвиеПустое Тогда
		
		СоответствиеУзловИСкладов = ПолучитьСоответствиеУзловИСкладов();
	
	КонецЕсли;
	
	МассивУзлов = СоответствиеУзловИСкладов[Склад];
	
	Если МассивУзлов = Неопределено Тогда
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоСкладу(Склад);
		
		Если МассивУзлов = Неопределено Тогда
			Возврат МассивУзлов;
		КонецЕсли;
		
		СоответствиеУзловИСкладов.Вставить(Склад, МассивУзлов);
		
		Если СоответвиеПустое Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными(); 	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивУзлов;		
	
КонецФункции

Функция ВернутьМассивУзловПоОдномуПодразделению(Подразделение, СоответствиеУзловИПодразделений = Неопределено)
	
	СоответвиеПустое = СоответствиеУзловИПодразделений = Неопределено;
	Если СоответвиеПустое Тогда
		
		СоответствиеУзловИПодразделений = ПолучитьСоответствиеУзловИПодразделений();
	
	КонецЕсли;
	
	МассивУзлов = СоответствиеУзловИПодразделений[Подразделение];
	
	Если МассивУзлов = Неопределено Тогда
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоПодразделению(Подразделение);
		
		Если МассивУзлов = Неопределено Тогда
			Возврат МассивУзлов;
		КонецЕсли;
		
		СоответствиеУзловИПодразделений.Вставить(Подразделение, МассивУзлов);
		
		Если СоответвиеПустое Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными(); 	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивУзлов;		
	
КонецФункции





Функция ПолучитьЗапросомМассивУзловПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия КАК ОбменУправлениеТорговлейБухгалтерия
				   |		Левое соединение ПланОбмена.ОбменУправлениеТорговлейБухгалтерия.Организации КАК СписокОрганизаций
				   |			ПО (ОбменУправлениеТорговлейБухгалтерия.Ссылка = СписокОрганизаций.Ссылка)
				   |
	               |ГДЕ
	               |	(СписокОрганизаций.Организация В (&СсылкаНаОрганизацию)
				   |		ИЛИ СписокОрганизаций.Организация Есть NULL)
				   |	И ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("СсылкаНаОрганизацию", Организация);
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоСкладу(Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия КАК ОбменУправлениеТорговлейБухгалтерия
				   |		Левое соединение ПланОбмена.ОбменУправлениеТорговлейБухгалтерия.Склады КАК СписоСкладов
				   |			ПО (ОбменУправлениеТорговлейБухгалтерия.Ссылка = СписоСкладов.Ссылка)
				   |
	               |ГДЕ
	               |	(СписоСкладов.Склад В (&СсылкаНаСклад)
				   |		ИЛИ СписоСкладов.Склад Есть NULL)
				   |	И ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("СсылкаНаСклад", Склад);
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоПодразделению(Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ОбменУправлениеТорговлейБухгалтерия.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерия КАК ОбменУправлениеТорговлейБухгалтерия
				   |		Левое соединение ПланОбмена.ОбменУправлениеТорговлейБухгалтерия.Подразделения КАК СписокПодразделений
				   |			ПО (ОбменУправлениеТорговлейБухгалтерия.Ссылка = СписокПодразделений.Ссылка)
				   |
	               |ГДЕ
	               |	(СписокПодразделений.Подразделение В (&СсылкаНаПодразделение)
				   |		ИЛИ СписокПодразделений.Подразделение Есть NULL)
				   |	И ОбменУправлениеТорговлейБухгалтерия.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("СсылкаНаПодразделение", Подразделение);
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции




Функция ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Организация.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ОрганизацияДляПоиска = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ОрганизацияДляПоиска = Организация[0];
			
		Иначе
			
			ОрганизацияДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ОрганизацияДляПоиска = Организация;
		
	КонецЕсли;
	
	Если ОрганизацияДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОднойОрганизации(ОрганизацияДляПоиска, СоответствиеУзловИОрганизаций);
		
	Иначе	
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, ИмяБазовогоТипа, ТипЭлемента, СтруктураПараметров)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
			СтруктураПараметров[ЭлементСтруктуры.Ключ] = Элемент[ЭлементСтруктуры.Ключ];
			
		КонецЦикла;
		
		Возврат;
				
	КонецЕсли;
	
	// надо все единым запросом получить
	//нужно построить запрос и вернуть параметр по ссылке
	
	СтрокаИменПараметров = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
		СтрокаИменПараметров = СтрокаИменПараметров + "," + Символы.ПС + "ОбъектДанных." + ЭлементСтруктуры.Ключ;
		
	КонецЦикла;
	
	СтрокаИменПараметров = Сред(СтрокаИменПараметров, 2);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	" + СтрокаИменПараметров + "
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
						
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		
	КонецЕсли;		
	
КонецПроцедуры

// функция по элементу определяет это группа и возвращает ссылку на него
Функция ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, ИмяБазовогоТипа, ТипЭлемента, НужноОпределятьЭтоГруппа = Ложь, ЭтоГруппа = Ложь)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Если НужноОпределятьЭтоГруппа Тогда
			
			ЭтоГруппа = Элемент.ЭтоГруппа;
			
			Если ЭтоГруппа = Неопределено Тогда
				ЭтоГруппа = Ложь;
			КонецЕсли;
			
		Конецесли;
		
		Возврат Элемент.Ссылка;
		
	КонецЕсли;
	
	Если НужноОпределятьЭтоГруппа Тогда
		
		ЭтоГруппа = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, "ЭтоГруппа");	
		Если ЭтоГруппа = Неопределено Тогда
			ЭтоГруппа = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса)
	
	МетаданныеЭлемента = Элемент.Метаданные();
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ТипСсылки = Тип("СправочникСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Справочник." + МетаданныеЭлемента.Имя;
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ТипСсылки = Тип("ДокументСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Документ." + МетаданныеЭлемента.Имя; 
		
	Иначе
		
		ТипСсылки = Неопределено;
		
	КонецЕсли;
	
	Возврат ТипЭлемента = ТипСсылки;	
	
КонецФункции


// функция анализирует Элемент это объект или нет
// если объект возвращает его реквизит, иначе
// строит по ссылке запрос и возвращает значение этого реквизита из запроса
Функция ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяПараметра)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
		
	Если НЕ ЭтоСсылка Тогда
		Возврат Элемент[ИмяПараметра]
	КонецЕсли;
			
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектДанных." + ИмяПараметра + "
				   |
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();	
	
	Возврат Выборка[ИмяПараметра];		
		
КонецФункции

Процедура ОбъединитьМассивыУзловПоИ(ИсходныйМассив, МассивОграничений)
	
	Если МассивОграничений = Неопределено Тогда
		ИсходныйМассив.Очистить();
		Возврат;
	КонецЕсли;
	
	Если МассивОграничений.Количество() = 0 Тогда
		ИсходныйМассив.Очистить();
		Возврат;
	КонецЕсли;
	
	НомерВмассиве = ИсходныйМассив.Количество() - 1;
	Пока НомерВМассиве >= 0 Цикл
		
		Если МассивОграничений.Найти(ИсходныйМассив[НомерВМассиве]) = Неопределено Тогда
			ИсходныйМассив.Удалить(НомерВМассиве);
		КонецЕсли;
	
		НомерВМассиве = НомерВМассиве - 1;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено, СоответствиеУзловИСкладов = Неопределено, 
	СоответствиеУзловИПодразделений = Неопределено, НужноАнализироватьОграниченияПоДатам = Ложь)
	
	Если ТипЭлемента = Неопределено Тогда
		ТипЭлемента = ТипЗнч(Элемент);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация,Дата");
		
	// склад
	Если ТипЭлемента = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвансовыйОтчет")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		СтруктураПараметров.Вставить("СкладОрдер");
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		Если ТипЗнч(Элемент.СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
			СтруктураПараметров.Вставить("СкладГруппа");	
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		СтруктураПараметров.Вставить("СкладОтправитель");
		СтруктураПараметров.Вставить("СкладПолучатель");
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.АккредитивПереданный")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АккредитивПереданный")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.АккредитивПолученный")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АккредитивПолученный")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ГТДИмпорт")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ГТДИмпорт")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДенежныйЧек")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ДенежныйЧек")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.УстановкаЦенНоменклатуры")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.Доверенность")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.Доверенность")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнкассовоеПоручениеПолученное")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОбъявлениеНаВзносНаличными")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОбъявлениеНаВзносНаличными")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтчетКомитентуОПродажах")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежноеТребованиеВыставленное")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежноеТребованиеПолученное")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПоступлениеДопРасходов")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетФактураВыданный")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетФактураПолученный")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВводНачальныхОстатковНДС")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВводНачальныхОстатковНДСпоПартиям")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВводНачальныхОстатковНДСпоПартиям")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.КорректировкаДолга")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.КорректировкаДолга") 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПереоценкаТоваровВРознице")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПереоценкаТоваровВРознице") Тогда
		
		// нет ограничения по складу	
		
	Иначе
		
		СтруктураПараметров.Вставить("Склад");
		
	КонецЕсли;
	
	
	// подразделение
	Если НЕ (
		
		    ТипЭлемента = Тип("ДокументСсылка.ДенежныйЧек")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ДенежныйЧек")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтражениеПоступленияТоваровИУслугНДС")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.УстановкаЦенНоменклатуры")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.Доверенность")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.Доверенность")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОбъявлениеНаВзносНаличными")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОбъявлениеНаВзносНаличными")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетФактураВыданный")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетФактураПолученный")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетФактураПолученный")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВводНачальныхОстатковНДС")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВводНачальныхОстатковНДСпоПартиям")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВводНачальныхОстатковНДСпоПартиям")
			
		) Тогда
		
		СтруктураПараметров.Вставить("Подразделение");
		
	КонецЕсли;
	
	
	Если НЕ (
		ТипЭлемента = Тип("ДокументСсылка.ДенежныйЧек")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ДенежныйЧек")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтражениеПоступленияТоваровИУслугНДС")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПереоценкаТоваровВРознице")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПереоценкаТоваровВРознице") 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.Доверенность")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.Доверенность") 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнвентаризацияТоваровНаСкладе")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ОбъявлениеНаВзносНаличными")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ОбъявлениеНаВзносНаличными")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетНаОплатуПокупателю")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетФактураВыданный")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетФактураПолученный")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВводНачальныхОстатковНДС")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ВводНачальныхОстатковНДСпоПартиям")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ВводНачальныхОстатковНДСпоПартиям") 
		)Тогда
		
		СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете");
		
	КонецЕсли;
	
	Если ТипЭлемента = Тип("ДокументСсылка.АккредитивПереданный")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.АккредитивПереданный")
		 ИЛИ ТипЭлемента = Тип("ДокументСсылка.АккредитивПолученный")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.АккредитивПолученный")
		 ИЛИ ТипЭлемента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнкассовоеПоручениеПереданное")
		 ИЛИ ТипЭлемента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.ИнкассовоеПоручениеПолученное")
		 ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежноеТребованиеПолученное")
		 ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		 ИЛИ ТипЭлемента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		 ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
		 ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
		
		СтруктураПараметров.Вставить("Оплачено");
		
		Если ТипЭлемента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
			ИЛИ ТипЭлемента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			ИЛИ ТипЭлемента = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
			
			СтруктураПараметров.Вставить("ОтражатьВУправленческомУчете");
					 
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Документы", ТипЭлемента, СтруктураПараметров);
	
	Оплачено = Неопределено;
	Если СтруктураПараметров.Свойство("Оплачено", Оплачено) Тогда
		
		// если не оплачен - то не передаем в БП
		Если Оплачено = Ложь Тогда
			
			ОтражатьВУправленческомУчете = Неопределено;
			Если СтруктураПараметров.Свойство("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете) Тогда
				
				Если ОтражатьВУправленческомУчете Тогда
					
					Возврат;
					
				КонецЕсли;				
					
			Иначе
					
			    Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Организация, СоответствиеУзловИОрганизаций);
	
	Если МассивУзловДляПередачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ограничение по складу
	СкладОтправитель = Неопределено;
	СкладПолучатель = Неопределено;
	Если СтруктураПараметров.Свойство("СкладОтправитель", СкладОтправитель) Тогда
		
		СтруктураПараметров.Свойство("СкладПолучатель", СкладПолучатель);
		
		МассивУзловОтправителя = ВернутьМассивУзловПоОдномуСкладу(СкладОтправитель, СоответствиеУзловИСкладов);
		МассивУзловПолучателя = ВернутьМассивУзловПоОдномуСкладу(СкладПолучатель, СоответствиеУзловИСкладов);
		
		ИтоговыйМассивУзлов = Новый Массив();
		
		Если МассивУзловОтправителя <> Неопределено Тогда
		
			Для Каждого Эл Из МассивУзловОтправителя Цикл
				ИтоговыйМассивУзлов.Добавить(Эл);
			КонецЦикла;
			
		КонецЕсли;
		
		Если МассивУзловПолучателя <> Неопределено Тогда
			
			Для Каждого Эл Из МассивУзловПолучателя Цикл
				ИтоговыйМассивУзлов.Добавить(Эл);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, ИтоговыйМассивУзлов);
			
		Если МассивУзловДляПередачи.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Склад = Неопределено;
		Если СтруктураПараметров.Свойство("СкладОрдер", Склад) Тогда
			
			Если ТипЗнч(Склад) <> Тип("СправочникСсылка.Склады")
				И ЗначениеЗаполнено(Склад) Тогда
				
				Склад = Склад.Склад;	
				
			КонецЕсли;
		Иначе
			СтруктураПараметров.Свойство("СкладГруппа", Склад); 
		КонецЕсли;
		
		Если Склад = Неопределено Тогда
			СтруктураПараметров.Свойство("Склад", Склад);
		КонецЕсли;
		
		Если Склад <> Неопределено Тогда
			
			МассивОграниченйиПоСкладу = ВернутьМассивУзловПоОдномуСкладу(Склад, СоответствиеУзловИСкладов);
			ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивОграниченйиПоСкладу);
			
			Если МассивУзловДляПередачи.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение по подразделению
	Подразделение = Неопределено;
	СтруктураПараметров.Свойство("Подразделение", Подразделение);
	
	Если Подразделение <> Неопределено Тогда
		
		МассивОграниченийПоПодразделению = ВернутьМассивУзловПоОдномуПодразделению(Подразделение, СоответствиеУзловИПодразделений);
		ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивОграниченийПоПодразделению);
		
		Если МассивУзловДляПередачи.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	// ограничение по отражению в бух учете	
	ОтражатьВБухгалтерскомУчете = Неопределено;
	СтруктураПараметров.Свойство("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
	
	Если ОтражатьВБухгалтерскомУчете = Ложь	Тогда
		
		// нужно сделать отбор узлов по организации и по не установленному признаку фильтрации по отражению в бух учете
		МассивУзловБезОграничений = ПараметрыСеанса.УзлыДляОбменаТорговляБухгалтерияБезОтбораПоОтражениюВБухУчете;
		
		ОбъединитьМассивыУзловПоИ(МассивУзловДляПередачи, МассивУзловБезОграничений);		
		
		Если МассивУзловДляПередачи.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
				
	КонецЕсли;
	
	Если НужноАнализироватьОграниченияПоДатам Тогда
		
		// ограничение по датам смотрим
		ТаблицаДатИУзлов = ПолучитьТаблицуУзловИДат();
		
		Номер = 0;
		Пока Номер <= МассивУзловДляПередачи.Количество() - 1 Цикл
			
			СтрокаТаблицы = ТаблицаДатИУзлов.Найти(МассивУзловДляПередачи[Номер], "ссылка");
			Если СтрокаТаблицы <> Неопределено
				И ЗначениеЗаполнено(СтруктураПараметров.Дата)
				И СтруктураПараметров.Дата < СтрокаТаблицы.ДатаНачалаВыгрузкиДокументов Тогда
				
				МассивУзловДляПередачи.Удалить(Номер);
				
			Иначе
				
				Номер = Номер + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	Если ТипЭлемента = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.ЗаказПокупателя")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		Номер = 0;
		Пока Номер <= МассивУзловДляПередачи.Количество() - 1 Цикл
			УзелДляПередачи = МассивУзловДляПередачи[Номер];
			Если ТипЗнч(УзелДляПередачи) = Тип("ПланОбменаСсылка.ОбменУправлениеТорговлейБухгалтерия") Тогда
				Если УзелДляПередачи.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать Тогда
					МассивУзловДляПередачи.Удалить(Номер);
				ИначеЕсли УзелДляПередачи.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя
					И (ТипЭлемента = Тип("ДокументСсылка.СчетНаОплатуПокупателю") ИЛИ ТипЭлемента = Тип("ДокументОбъект.СчетНаОплатуПокупателю")) Тогда
					МассивУзловДляПередачи.Удалить(Номер);
				ИначеЕсли УзелДляПередачи.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
					И (ТипЭлемента = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЭлемента = Тип("ДокументОбъект.ЗаказПокупателя")) Тогда
					МассивУзловДляПередачи.Удалить(Номер);
				Иначе
					Номер = Номер + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьМассивСсылками(ТекущийМассив, МассивДляДобавления)
	
	Если МассивДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивДляДобавления Цикл
		
		Если ТекущийМассив.Найти(Элемент) = Неопределено Тогда
		
			ТекущийМассив.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоСправочникуИПараметру(ИмяСправочника, ИмяРеквизита, 
	СсылкаНаСправочник, МассивУзловДляПередачи, ИмяРеквизитаОрганизации = "Организация", СоответствиеУзловИОрганизаций = Неопределено)
	
	Если СсылкаНаСправочник.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Спр." + ИмяРеквизитаОрганизации + " КАК Организация
	               |ИЗ
	               |	Справочник." + ИмяСправочника + " КАК Спр
	               |ГДЕ
	               |	Спр." + ИмяРеквизита + " = &СсылкаНаЭлемент";
				   
	Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);			   
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Справочники.Организации.ПустаяСсылка(), СоответствиеУзловИОрганизаций);	
		
	Иначе
	
		МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоответствиеУзловИОрганизаций);
	
	Конецесли;
	
КонецПроцедуры

Функция ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита)
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = НаборЗаписей.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ПолучитьПоТабличнойЧастиРазличныеЗначенияРеквизита(ТабличнаяЧасть, ИмяРеквизита) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = ТабличнаяЧасть.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Процедура ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи)
	
	МассивУзлов = ВернутьМассивВсехУзловИзПараметровСеанса();
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);	
	 
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	МассивУзлов = ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеУзловИОрганизаций);
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоСкладам(МассивУзловДляПередачи, Склад, СоответствиеУзловИСкладов = Неопределено)
	
	МассивУзлов = ВернутьМассивУзловПоОдномуСкладу(Склад, СоответствиеУзловИСкладов);
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено, СоответствиеУзловИСкладов = Неопределено, СоответствиеУзловИПодразделений = Неопределено)
	
	Перем ЭтоГруппа, СсылкаНаЭлемент;
	
	// пердопределенные элементы выгружаем и загружаем послностью
	Если Элемент.Предопределенный Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		Возврат;
		
	КонецЕсли;
	
	ВыгружатьДляВсехУзлов = Ложь;
	Если ТипЭлемента = Неопределено Тогда
	
		ТипЭлемента = ТипЗнч(Элемент);
	
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникОбъект.БанковскиеСчета")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		// нужно определить владельца
		// если владелец не организация, тогда регистрируем изменения для всех узлов, 
		// если организация, то только для тех узлов куда организация передается
		
		Владелец = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Справочники", ТипЭлемента, "Владелец");
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			
			// только узлы с указанной организацией
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Владелец, СоответствиеУзловИОрганизаций);
			
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				Владелец, МассивУзловДляПередачи, "Организация", СоответствиеУзловИОрганизаций);	
			
		Иначе
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Организации") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Склады")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Склады") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиПоСкладам(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеУзловИСкладов);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
			//иначе при выгрузке по ссылке в дальнейшем "потеряем реквизиты"
			Если ТипЭлемента  = Тип("СправочникОбъект.Контрагенты")
				И Элемент.ЭтоНовый() Тогда
				
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);	
				
			КонецЕсли;	
			
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				СсылкаНаЭлемент, МассивУзловДляПередачи, "Организация", СоответствиеУзловИОрганизаций);
				
		КонецЕсли;		
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ДоговорыКонтрагентов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда		
		
		СтруктураПараметров = Новый Структура("ЭтоГруппа, Организация", Ложь, Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		Если СтруктураПараметров.ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Организация, СоответствиеУзловИОрганизаций);	
			
		КонецЕсли;
		
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи)
	
	ВыгружатьДляВсехУзлов = Истина;
			
	Если ВозвращатьМассивВсехУзлов Тогда
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
	КонецЕсли;	
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиСправочника(Элемент, ТипЭлемента = Неопределено, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, 
	СоответствиеУзловИОрганизаций = Неопределено, СоответствиеУзловИСкладов = Неопределено, СоответствиеУзловИПодразделений = Неопределено)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
		ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций, СоответствиеУзловИСкладов, СоответствиеУзловИПодразделений);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиДокумента(Элемент, ТипРеквизита = Неопределено, ВыгружатьДляВсехУзлов = Ложь, 
	ВозвращатьМассивВсехУзлов = Истина, 
	СоответствиеУзловИОрганизаций = Неопределено, СоответствиеУзловИСкладов = Неопределено, 
	СоответствиеУзловИПодразделений = Неопределено, НужноАнализироватьОграниченияПоДатам = Ложь)
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
		ТипРеквизита, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций, СоответствиеУзловИСкладов, 
		СоответствиеУзловИПодразделений, НужноАнализироватьОграниченияПоДатам);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено)
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеУзловИОрганизаций, , , Истина);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Данные, ИмяБазовогоТипа, ТипЭлемента = Неопределено, МетаданныеОбъекта = Неопределено,
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено, СоответствиеУзловИСкладов = Неопределено, СоответствиеУзловИПодразделений = Неопределено,
	НужноАнализироватьОграниченияПоДатам = Истина) Экспорт
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
			
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиСправочника(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций, СоответствиеУзловИСкладов, СоответствиеУзловИПодразделений);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиДокумента(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций, СоответствиеУзловИСкладов, СоответствиеУзловИПодразделений, 
			НужноАнализироватьОграниченияПоДатам);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
		
	КонецЕсли;		
			
	Возврат МассивУзловДляРегистрацииСсылки;
	
КонецФункции

Процедура ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(НаборЗаписей, МассивУзловДляПередачи, 
	ИмяРеквизита, ТипЭлемента = Неопределено, СоответствиеУзловИОрганизаций = Неопределено, ИмяБазовогоТипа = "Справочники")
	
	МассивРазличныхЗначенийРеквизита = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита);
	
	МассивУзловДляПередачи = Новый Массив();
	
	Для Каждого Элемент Из МассивРазличныхЗначенийРеквизита Цикл 
		
		// для каждого элемента массива нужно определить набор узлов куда он может передаваться
		ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, ТипЭлемента, , , СоответствиеУзловИОрганизаций);
	
	КонецЦикла;
	
КонецПроцедуры


Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеУзловИОрганизаций = Неопределено)
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизации") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "СтруктурнаяЕдиница", 
			Тип("СправочникСсылка.Организации"), СоответствиеУзловИОрганизаций);	
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Объект", 
			, СоответствиеУзловИОрганизаций);
		
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииПередЗаписью, МассивУзловДляРегистрацииПриЗаписи)
	
	ПроцедурыОбменаДанными.ДополнитьМассивПолучателейУзламиАвторегистрации(Источник);
	
	// для регистрации ссылки
	Для Каждого Элемент Из МассивУзловДляРегистрацииПередЗаписью Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
	// для регистрации объекта
	Для Каждого Элемент Из МассивУзловДляРегистрацииПриЗаписи Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, ИмяБазовогоТипа, 
	МассивУзловДляРегистрацииСсылки = Неопределено, МассивУзловДляРегистрацииОбъекта = Неопределено)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;		
	
	Если Источник.ЭтоНовый() Тогда
		
		// элемент еще никуда не передавался
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник.Ссылка, ИмяБазовогоТипа);
						
	КонецЕсли;
		
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа);
			
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);	
			
КонецПроцедуры

Процедура ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, ИмяБазовогоТипа)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	Если Замещение Тогда
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			СтарыйНаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, ИмяБазовогоТипа,  , МетаданныеРегистра);		
				
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа,  , МетаданныеРегистра);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
	
КонецПроцедуры

Процедура ПередЗаписьСправочникаДляОбменаТорговляБухгалтерияПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники");	
		
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляОбменаТорговляБухгалтерияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");	
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраСведенийОбменТорговляБухгалтерияПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыСведений");
	
КонецПроцедуры

Процедура ПередУдалениемСправочникаДляОбменаТорговляБухгалтерияПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники");	
	
КонецПроцедуры

Процедура ПередУдалениемДокументаДляОбменаТорговляБухгалтерияПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");	
	
КонецПроцедуры

Процедура ПриЗаписиРегистрыНакопленияДляОбменаТорговляБухгалтерияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// для регистра партии товаров на складах при записи наборе регистрируем изменения для
	// документов
	
	ТипРегистратора = ТипЗнч(Источник.Отбор.Регистратор.Значение);
	Если ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.СписаниеТоваров")
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		
		ФиксированныйМассивУзловДлярегистрации = ПараметрыСеанса.УзлыДляОбменаТорговляБухгалтерияРегистрацияДокументовПриДвиженииПартий;
		Если ФиксированныйМассивУзловДлярегистрации.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		МассивУзлов = Новый Массив();
		Для Каждого УзелДляОбмена Из ФиксированныйМассивУзловДлярегистрации Цикл
			
			МассивУзлов.Добавить(УзелДляОбмена);	
			
		КонецЦикла;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник.Отбор.Регистратор.Значение);
		
	КонецЕсли;
	
КонецПроцедуры
