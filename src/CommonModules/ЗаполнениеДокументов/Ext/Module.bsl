////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета, то курс 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КурсДокумента - его и вернем
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсДокумента;
		КонецЕсли;

		// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КурсВзаиморасчетов - его и вернем.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсВзаиморасчетов;
		КонецЕсли;

	КонецЕсли;

	Возврат 1;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если есть реквизит КратностьДокумента - его и вернем
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьДокумента;
		КонецЕсли;

		// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КратностьВзаиморасчетов - его и вернем.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьВзаиморасчетов;
		КонецЕсли;

	КонецЕсли;

	Возврат 1;

КонецФункции // КратностьДокумента()

// Функция возвращает дату отстоящую на заданное количество рабочих дней от начальной в соответствии с
//регламентированным производственным календарем
//
//Параметры:
// ДатаНач      - начальная дата
// ЧислоДней    - количество рабочих дней, на которое искомая дата должна отстоять от начальной
//
Функция ОпределитьДату(ДатаНач, ЧислоДней) Экспорт
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ЧислоДней",           ЧислоДней);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Если ЧислоДней > 0 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря > &ДатаНач
		|	 И (РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
		|      ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень)
		|";
		
	Иначе
		ЧислоДней = -ЧислоДней;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + ЧислоДней + "
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря < &ДатаНач
		|	 И (РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
		|      ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень)
        |УПОРЯДОЧИТЬ ПО
		|	ДатаКалендаря УБЫВ
		|";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = ЧислоДней Тогда
		Пока Выборка.Следующий() Цикл
			ТекДата = Выборка.ДатаКалендаря;
		КонецЦикла;
		Возврат ТекДата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Функция определяет контрагента, соответствующего указанной организации
//
// Параметры
//  Организация - организация, по которой определяется конрагент
//
// Возвращаемое значение:
//  Контрагент - контрагент, соответствующий указанной организации
//
Функция ПолучитьКонтрагентаПоОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Организация" , Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|   Контрагент
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ Объект     = &Организация
	|    И ВидСвязи = &ВидСвязи";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;

	Возврат Справочники.Контрагенты.ПустаяСсылка();

КонецФункции // ПолучитьКонтрагентаПоОрганизации()

// Функция определяет организацию, соответствующего указанному юр/физ лицу контрагента
//
// Параметры
//  Контрагент - конрагент, по которому определяется организация
//
// Возвращаемое значение:
//  Организации - организация, соответствующий указаннму юр/физ лицу контрагента
//
Функция ПолучитьОрганизациюПоКонтрагенту(Контрагент) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ВидСвязи"   , Перечисления.ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|   Объект
	|ИЗ
	|   РегистрСведений.СобственныеКонтрагенты 
	|ГДЕ Контрагент = &Контрагент
	|    И ВидСвязи = &ВидСвязи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Объект;
	КонецЕсли;

	Возврат Справочники.Организации.ПустаяСсылка();

КонецФункции // ПолучитьОрганизациюПоКонтрагенту()

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//
Процедура ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Организация.
	ФлагОтражРеглУчете = Ложь;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
		ФлагОтражРеглУчете = ЗначениеЗаполнено(ДокументОбъект.Организация) И ДокументОбъект.Организация.ОтражатьВРегламентированномУчете;
	КонецЕсли;

	// Подразделение.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Подразделение = ДокументОснование.Подразделение;
	КонецЕсли;

	// Ответственный.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	// Склад.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("СкладГруппа", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ?(ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.Склады"), ДокументОснование.СкладГруппа, Неопределено);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладГруппа", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СкладГруппа = ДокументОснование.Склад;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СкладОрдер = ДокументОснование.СкладОрдер;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СкладОрдер = ДокументОснование.Склад;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокументаОснования) Тогда
		Если ТипЗнч(ДокументОснование.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
			ДокументОбъект.Склад = ДокументОснование.СкладОрдер;
		ИначеЕсли ТипЗнч(ДокументОснование.СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ДокументОбъект.Склад = ОбщегоНазначения.ПолучитьРеквизитОбъекта(ДокументОснование.СкладОрдер, "Склад");
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("СкладГруппа", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СкладОрдер = ?(ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.Склады"), ДокументОснование.СкладГруппа, Неопределено);
	КонецЕсли;

	// Контрагент.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Грузоотправитель") <> Неопределено
	   И МетаданныеДокументаОснования.Реквизиты.Найти("Грузоотправитель") <> Неопределено Тогда
		ДокументОбъект.Грузоотправитель = ДокументОснование.Грузоотправитель;
	КонецЕсли;
	
	// ДоговорКонтрагента.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) 
	   И (НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
	      ИЛИ ДокументОбъект.Организация = ДокументОснование.ДоговорКонтрагента.Организация) Тогда

		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ТекущаяДата());
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

			// КратностьВзаиморасчетов.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Касса
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.Касса) Тогда
				ДокументОбъект.Касса = ДокументОснование.Касса;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет 
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица(или касса), то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) 
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Банковский счет организации
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования)
				И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница) Тогда
				ДокументОбъект.БанковскийСчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Структурная единица
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница)
		  И ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)Тогда
			ДокументОбъект.СтруктурнаяЕдиница = ДокументОснование.СтруктурнаяЕдиница;
		КонецЕсли;
	КонецЕсли;
	
	// ВалютаДокумента.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ТекущаяДата());
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// Тип скидки.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ТипСкидкиНаценки", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипСкидкиНаценки = ДокументОснование.ТипСкидкиНаценки;
	КонецЕсли;
	// Тип скидки.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ДисконтнаяКарта", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДисконтнаяКарта = ДокументОснование.ДисконтнаяКарта;
	КонецЕсли;

	// УчитыватьНДС.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УчитыватьНДС = ДокументОснование.УчитыватьНДС;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	// ОтражатьВУправленческомУчете.
	// Если есть в основании, копируем из основания, иначе - Истина.
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ОтражатьВУправленческомУчете = ДокументОснование.ОтражатьВУправленческомУчете;
		Иначе
			ДокументОбъект.ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВУправленческомУчете");
		КонецЕсли;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		// организация отражается в регламентированном учете
		Если ФлагОтражРеглУчете Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования) Тогда
				ДокументОбъект.ОтражатьВБухгалтерскомУчете = ДокументОснование.ОтражатьВБухгалтерскомУчете;
			Иначе
				ДокументОбъект.ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
				Если ДокументОбъект.ОтражатьВБухгалтерскомУчете Тогда
					//флаг может устанавливаться только если установлено отражение в БУ
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокументаОснования) Тогда
						ДокументОбъект.ОтражатьВНалоговомУчете = ДокументОснование.ОтражатьВНалоговомУчете;
					Иначе
						ДокументОбъект.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
					КонецЕсли;
				Иначе
					ДокументОбъект.ОтражатьВНалоговомУчете = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Ложь;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
				ДокументОбъект.ОтражатьВНалоговомУчете = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ИспользоватьПлановуюСебестоимость = ДокументОснование.ИспользоватьПлановуюСебестоимость;
		КонецЕсли;
	КонецЕсли;

	// УсловиеПродаж.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УсловиеПродаж", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("УсловиеПродаж", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.УсловиеПродаж = ДокументОснование.УсловиеПродаж;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокументаПоОснованию()

// Процедура заполняет кассу по сделке или значением по умолчанию
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа
//  ТекПользователь - ссылка на справочник, определяет текущего пользователя  
//
Процедура ЗаполнитьКассу(ДокументОбъект, ТекПользователь) Экспорт
	
	// Если кассу уже заполнена ранее, то здесь ничего делать не надо
	Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
		Возврат;
	КонецЕсли;
	
	КассаПоУмолчанию=Неопределено;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", ДокументОбъект.Метаданные()) Тогда
		
		МетаданныеДокументаСделка = ДокументОбъект.Сделка.Метаданные();
		
		Если ЗначениеЗаполнено(ДокументОбъект.Сделка) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаСделка) Тогда
				КассаПоУмолчанию = ДокументОбъект.Сделка.СтруктурнаяЕдиница;
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокументаСделка) Тогда
				КассаПоУмолчанию = ДокументОбъект.Сделка.Касса;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КассаПоУмолчанию) Тогда
		КассаПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаПоУмолчанию) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда 
			
			ДокументОбъект.Касса=КассаПоУмолчанию;
			ДокументОбъект.ВалютаДокумента    = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		ИначеЕсли ДокументОбъект.ВалютаДокумента=КассаПоУмолчанию.ВалютаДенежныхСредств Тогда
			
			ДокументОбъект.Касса=КассаПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКассу()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                          - объект редактируемого документа,
//  ТекПользователь                         - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета          - валюта регламентированного учета,
//  ТипОперации                             - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                            если не передан, то реквизиты, зависящие от вида операции, не заполняются,
//  ПараметрОбъектКопирования               - ссылка на объект копирования,
//  ПараметрОснование                       - ссылка на объект-основание.
//  СтруктураПараметровДляПолученияДоговора - Структура содержит список допустимых видов договоров.
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "", ПараметрОбъектКопирования = Неопределено, ПараметрОснование = неопределено, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	#Если Клиент Тогда
	Если ПараметрОбъектКопирования <> Неопределено 
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
	    СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		Если СтруктураКурсаДокумента.Курс <> ДокументОбъект.КурсВзаиморасчетов 
		 Или СтруктураКурсаДокумента.Кратность <> ДокументОбъект.КратностьВзаиморасчетов Тогда
			Ответ = Вопрос("Курс валюты изменился. Поменять курс в документе?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		ДокументОбъект.ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВУправленческомУчете");
	КонецЕсли;

	// Флаги БУ и НУ взаимосвязаны, не возможна ситуация, когда флаг НУ "истина". а флаг БУ "ложь".
	// А также надо проверить признак отражения организации в регл. учете.
	ФлагОтражРеглУчете = Ложь;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КассаККМ", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КассаККМ) Тогда
			ДокументОбъект.КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКассаККМ");
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КассаККМ", МетаданныеДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.КассаККМ) Тогда
					ДокументОбъект.Организация = ДокументОбъект.КассаККМ.Владелец;
				Иначе
					ДокументОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				ДокументОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
			КонецЕсли;
		КонецЕсли;

		//если значение настройки заполнено (организация для пользователя определена и доступна), флаг устанавливается по данным организации
		//	если значение настройки не заполнено, флаг сбрасывается
		ФлагОтражРеглУчете = ЗначениеЗаполнено(ДокументОбъект.Организация) И ДокументОбъект.Организация.ОтражатьВРегламентированномУчете;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда

			// организация отражается в регламентированном учете
			Если ФлагОтражРеглУчете Тогда
				ФлагОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
				ДокументОбъект.ОтражатьВБухгалтерскомУчете = ФлагОтражатьВБухгалтерскомУчете;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
					Если ФлагОтражатьВБухгалтерскомУчете Тогда

						//флаг может устанавливаться только если установлено отражение в БУ
						ДокументОбъект.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
					Иначе
						ДокументОбъект.ОтражатьВНалоговомУчете = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ДокументОбъект.ОтражатьВБухгалтерскомУчете = Ложь;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
					ДокументОбъект.ОтражатьВНалоговомУчете = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; //ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

	//если копируем - возврат из процедуры
	Если ПараметрОбъектКопирования<>неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорЭквайринга", МетаданныеДокумента) Тогда
		ДокументОбъект.ДоговорЭквайринга = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойДоговорЭквайринга");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Склад)) Тогда
		ДокументОбъект.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладГруппа", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СкладГруппа)) Тогда
		ДокументОбъект.СкладГруппа = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) 
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) И НЕ ЗначениеЗаполнено(ДокументОбъект.ВидПоступления) Тогда
		ДокументОбъект.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
		ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтавкаНДС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС)) Тогда
		ДокументОбъект.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			ИначеЕсли ДокументОбъект.СчетОрганизации.Владелец <> ДокументОбъект.Организация Тогда
				ДокументОбъект.СчетОрганизации = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетОрганизации) Тогда
				ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			ИначеЕсли ДокументОбъект.БанковскийСчетОрганизации.Владелец <> ДокументОбъект.Организация Тогда
				ДокументОбъект.БанковскийСчетОрганизации = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) Тогда
				ДокументОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			ИначеЕсли ДокументОбъект.СтруктурнаяЕдиница.Владелец <> ДокументОбъект.Организация Тогда
				ДокументОбъект.СтруктурнаяЕдиница = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость", МетаданныеДокумента)
		И НЕ ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		ДокументОбъект.ИспользоватьПлановуюСебестоимость = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ИспользоватьПлановуюСебестоимость");
	КонецЕсли;
	
	ДатаДокумента = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.Дата),ОбщегоНазначения.ПолучитьРабочуюДату(),ДокументОбъект.Дата);

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипОперации = "Покупка" Тогда
				ДокументОбъект.Контрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПоставщик");
			ИначеЕсли ТипОперации = "Продажа" Тогда
				ДокументОбъект.Контрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойПокупатель");
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КонтактноеЛицоКонтрагента", МетаданныеДокумента) Тогда
			Если (НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицоКонтрагента))
			   И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				ДокументОбъект.КонтактноеЛицоКонтрагента = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
			Иначе
				ДокументОбъект.КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) 
			   И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
			   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда

				Если ТипЗнч(СтруктураПараметровДляПолученияДоговора) <> Тип("Структура") Тогда
					Если ТипОперации = "Продажа" Тогда 
						СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
					ИначеЕсли ТипОперации = "Покупка" Тогда 
						СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
					Иначе
						СтруктураПараметровДляПолученияДоговора = Неопределено;
					КонецЕсли;
				КонецЕсли;

				Организация = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента), 
				                                               ДокументОбъект.Организация, Неопределено);
				ДокументОбъект.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
			КонецЕсли;

			Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
			   И (ДокументОбъект.ДоговорКонтрагента.Владелец <> ДокументОбъект.Контрагент 
			 Или (ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
			     И ЗначениеЗаполнено(ДокументОбъект.Организация) 
			   И ДокументОбъект.ДоговорКонтрагента.Организация <> ДокументОбъект.Организация)) Тогда

				//если договор не соответствует контрагенту или организации - очистить договор
				ДокументОбъект.ДоговорКонтрагента = Неопределено; 
			КонецЕсли;

			Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда

				//тип сделки имеет смысл устанавливать только в том случае, если заполнен договор
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
					ЗаказПокупателя = Истина;
					Если ДокументОбъект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ
						ДокументОбъект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
						ЗаказПокупателя = Ложь;
					КонецЕсли;
					ЗаполнениеДокументов.УстановитьТипСделки(ДокументОбъект, ЗаказПокупателя);
				КонецЕсли;
				
				//если в документе есть реквизит организация и он не заполнен
				// то заполняем из договора
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)

					И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда

					ДокументОбъект.Организация = ДокументОбъект.ДоговорКонтрагента.Организация;
					
				КонецЕсли;
				
				ЕстьРеквизитКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьРеквизитКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);

				Если ЕстьРеквизитКурсВзаиморасчетов 
				 Или ЕстьРеквизитКратностьВзаиморасчетов Тогда
					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаДокумента);
				КонецЕсли;

				Если ЕстьРеквизитКурсВзаиморасчетов Тогда
					ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;

				Если ЕстьРеквизитКратностьВзаиморасчетов Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
				   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен)) Тогда
					ДокументОбъект.ТипЦен = ДокументОбъект.ДоговорКонтрагента.ТипЦен;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли; // есть реквизит договор

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетКонтрагента", МетаданныеДокумента) 
		   И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
				ДокументОбъект.БанковскийСчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
			ИначеЕсли ДокументОбъект.БанковскийСчетКонтрагента.Владелец <> ДокументОбъект.Контрагент Тогда
				ДокументОбъект.БанковскийСчетКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;// есть реквизит контрагент
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
		Если  Не ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			ДокументОбъект.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");
		КонецЕсли;

		//Возможно заполненная касса не соответствует заполненной организации
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
			   И ДокументОбъект.Касса.Владелец <> ДокументОбъект.Организация Тогда
				ДокументОбъект.Касса = Неопределено;
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КассаККМ", МетаданныеДокумента) Тогда
		//Возможно заполненная касса ККМ не соответствует заполненной организации
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
			   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
			   И ДокументОбъект.КассаККМ.Владелец <> ДокументОбъект.Организация Тогда
				ДокументОбъект.КассаККМ = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
		        И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
		        И ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
					ДокументОбъект.ВалютаДокумента = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДатаДокумента);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)) Тогда
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДокумента);
		ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	флСуммаВключаетНДС = Истина;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда

		// Если тип цен оказался не заполненным, то берем его из установок пользователя
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) И ТипОперации = "Продажа" Тогда
			ДокументОбъект.ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойТипЦенПродажи");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда

			// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
			// то флаги включения налогов надо брать из базовой цены
			Если ТипЗнч(ДокументОбъект.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И ДокументОбъект.ТипЦен.Рассчитывается Тогда
				флСуммаВключаетНДС = ДокументОбъект.ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
			Иначе
				флСуммаВключаетНДС = ДокументОбъект.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
	   И (Не ДокументОбъект.УчитыватьНДС) Тогда

		ДокументОбъект.УчитыватьНДС = Истина;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
			ДокументОбъект.СуммаВключаетНДС = флСуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;


	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидПоступления)) Тогда
		ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидПередачи", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидПередачи)) Тогда
		ДокументОбъект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УсловиеПродаж", МетаданныеДокумента)
	   И Не ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ДокументОбъект.УсловиеПродаж = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеУсловиеПродаж");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура проверяет реквизиты на заполненность
// Если хотя бы один из них не заполнен то Отказ становится Истина и в сообщении
// пишется о незаполненном реквизите
// Паремтры:
// ОбъектПроверки - тот объект реквизиты которого нужно проверить на заполненность
// СписокИменРеквизитов - список реквизитов для проверки (В значении - Имя реквизиты, 
//										в представлении - строковое название реквизита)
// Отказ - есть ли незаполненный реквизит или нет
// ЖесткаяПроверка - Булевский параметр. В случае Ложь пишется только информация о незаполненных реквизитах, а Отказ не изменяется
Процедура ПроверитьЗаполнениеРеквизитов(ОбъектПроверки, СписокИменРеквизитов, Отказ, ЖесткаяПроверка = Истина) Экспорт
	
	Если (СписокИменРеквизитов = Неопределено) Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокИменРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(ОбъектПроверки[ЭлементСписка.Значение]) Тогда
			
			СообщениеОНевозможностиЗаписи = "Реквизит """+СокрЛП(ЭлементСписка.Представление)+""" не заполнен!";
			
			Если ЖесткаяПроверка Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СообщениеОНевозможностиЗаписи);
				Отказ = Истина;
			Иначе
				Сообщить(СообщениеОНевозможностиЗаписи, СтатусСообщения.Внимание);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	//ПроверитьПринадлежностьКВидамУчета();

	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;

	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

// Формирует структуру параметров для получения договора продажи заказа покупателя,
// используется вдокументе и WEB-приложении "Управление заказми".
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя() Экспорт

	СтруктураПараметровДляПолученияДоговора = ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	СписокДопустимыхВидовВзаиморасчетов = Новый СписокЗначений();
	СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);

	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя()

// Формирует структуру параметров для получения договора продажи со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – структура параметров для получения договора продажи.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи()

// Формирует структуру параметров для получения договора покупки со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – структура параметров для получения договора покупки.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()  Экспорт

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()

// Функция возвращает таблицу договоров данного контрагента, доступных для выбора
//
// Параметры
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
// 	ВозвращатьТолькоПервые                  - булево, Истина - нужно вернуть только первые два договора,
//                                          - ложь - нужно вернуть весь список.
//  Организация                             - необязательный, организация, по которой определяется договор,
//                                            если не передана, то возвращается список договоров по всем орагнизациям.
//  ДополнительныеРеквизиты                 - необязательный, массив дополнительных реквизитов договора,
//                                            которые необходимо вернуть в результате запроса.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, ВозвращатьТолькоПервые, Организация = Неопределено, ДополнительныеРеквизиты = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора", СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 2","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
		
			Запрос.Текст = Запрос.Текст  + ", " + ПсевдонимТаблицы + "." + НаименованиеРеквизита;
		
		КонецЦикла; 		
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|");

	Если ЗначениеЗаполнено(Организация) Тогда 

		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ПарВалютаВзаиморасчетов
		|")
		+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ПарВидДоговора)
		|")
		+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
		|")
		+ "
		|	         ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьДоступныеДоговорыКонтрагента()

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента, а также переданным параметрам.
// Если всем параметрам удовлетворяет основной договор, то выбирается он.
//
// Параметры
//  Организация                             - организация, по которой определяется договор
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если не передана организация, то проверим, можно ли использовать основной договор. 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Договор = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(Контрагент);
		Если МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	РезультатЗапроса = ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, Истина, Организация );
	ТаблицаДоговоров = РезультатЗапроса.Выгрузить();

	Если ТаблицаДоговоров.Количество() = 1 Тогда
		Возврат ТаблицаДоговоров[0].Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьДоговорПоОрганизацииИКонтрагенту()

// Проверяет. можно ли использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, ложь - нельзя.
//
Функция МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;


	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе невыбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено 
	   И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду взаиморасчетов.
	Если СписокДопустимыхВидовВзаиморасчетов <> Неопределено 
	   И СписокДопустимыхВидовВзаиморасчетов.НайтиПоЗначению(Договор.ВедениеВзаиморасчетов) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // МожноИспользоватьДоговорДляДокумента()

// Устанавливает тип сделки документа
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ЗаказПокупателя - признак заказа покупателю/поставщику
//
Процедура УстановитьТипСделки(ДокументОбъект, ЗаказПокупателя = Истина) Экспорт

	Сделка = Неопределено;

	ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			Сделка = Документы["Заказ"+?(ЗаказПокупателя, "Покупателя", "Поставщику")].ПустаяСсылка()

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда

			НадписьСделка = "Счет "+?(ЗаказПокупателя,"покупателю:", "поставщика:");
			Сделка = Документы["СчетНаОплату"+?(ЗаказПокупателя, "Покупателю", "Поставщика")].ПустаяСсылка()

		КонецЕсли;
	КонецЕсли;

	// Поменяем значение сделки, если она не того типа.
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Сделка)
	   И ТипЗнч(ДокументОбъект.Сделка) <> ТипЗнч(Сделка) Тогда

		ДокументОбъект.Сделка = Сделка;

	КонецЕсли;

КонецПроцедуры // УстановитьТипСделки()

// Процедура выполняет общие действия при изменнении контрагента
//
// Параметры:
//  ДокументОбъект                          - объект редактируемого документа,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых видов взаиморасчетов, не обязательный.
//
Процедура ПриИзмененииЗначенияКонтрагента(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЕстьДоговорКонтрагента        = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	ЕстьКонтактноеЛицоКонтрагента = ОбщегоНазначения.ЕстьРеквизитДокумента("КонтактноеЛицоКонтрагента", МетаданныеДокумента);
	
	Если ДокументОбъект.Контрагент = Неопределено Тогда
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 

	Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
				КонтактноеЛицоКонтрагента = "";
			Иначе
				КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
	Иначе

		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			Если  МожноИспользоватьДоговорДляДокумента(ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
			Иначе
				ДоговорКонтрагента = ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
			КонецЕсли;
		КонецЕсли;

		Если ЕстьКонтактноеЛицоКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицоКонтрагента)
			 ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицоКонтрагента) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
				КонтактноеЛицоКонтрагента = ОбщегоНазначения.ПолучитьОсновноеКонтактноеЛицоКонтрагента(ДокументОбъект.Контрагент);
			Иначе
				Если ДокументОбъект.КонтактноеЛицоКонтрагента.Владелец <> ДокументОбъект.Контрагент Тогда
					КонтактноеЛицоКонтрагента = ОбщегоНазначения.ПолучитьОсновноеКонтактноеЛицоКонтрагента(ДокументОбъект.Контрагент);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	Если ЕстьДоговорКонтрагента Тогда
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		   И ДоговорКонтрагента <> Неопределено 
		   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.Организация        = ДоговорКонтрагента.Организация;
			Если Не ПустаяСтрока(ДокументОбъект.Номер) Тогда
				ДокументОбъект.Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьКонтактноеЛицоКонтрагента 
	    И КонтактноеЛицоКонтрагента <> Неопределено Тогда
		ДокументОбъект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
	КонецЕсли; 

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
	   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
	   И Не ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Функция возвращает число рабочих дней между заданными датами по регламентированному производственному календарю
//
//Параметры:
// ДатаНач      - начальная дата
// ДатаКон      - конечная дата
//
Функция ЧислоРабочихДней(ДатаНач, ДатаКон) Экспорт
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДатаНач",             ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",             ДатаКон);
	Запрос.УстановитьПараметр("РабочийДень",         Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕстьNull(СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = &РабочийДень
	|				ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = &ПредпраздничныйДень
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ),0) КАК ЧислоРабочихДней
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНач И &ДатаКон
	|	//РегламентированныйПроизводственныйКалендарь.Год = &Год";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЧислоРабочихДней;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//  ДокументОбъект                          - объект документ в форме которого произошло событие,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых видов взаиморасчетов, не обязетльный.
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект, СтруктураПараметровДляПолученияДоговора= Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
				 Или ДокументОбъект.ДоговорКонтрагента.Организация <> ДокументОбъект.Организация Тогда
					ДокументОбъект.ДоговорКонтрагента = ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
				КонецЕсли;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента) Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

// Процедура вызывает сервисный механизм для изменения общих для
// всей табличной части Товары реквизитов, таких, например, как
// тип цен, валюта и т. д.
//
// Параметры:
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СпособЗаполненияЦен                - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                       регистров ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр;
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураЗначений                  - для эмуляции ввода пользователем валюты, типа цен и пр. Применяется при
//                                       автоматическом заполнении документов.
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//  СтруктураНеобрабатываемыхТабличныхЧастей - структура, содержащая имена табличных частей, которые не надо 
//                                       обрабатывать при изменении цен/валюты;
//
Процедура ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, 
	                           СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
	                           ВалютаРегламентированногоУчета,
	                           СкидкаУстановлена = Ложь,
	                           СтруктураЗначений = Неопределено,
	                           НовыйТипЦенДляУстановки = Неопределено,
	                           СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт

	// Откроем модально форму "Цены и Налоги" и получим структуру старых и новых значений реквизитов документа
	Автозаполнение = Ложь;
	Если СтруктураЗначений = Неопределено Тогда
		#Если Клиент Тогда
		СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
		                              СтруктураНеРедактируемыхРеквизитов, ИмяТабличнойЧасти, НовыйТипЦенДляУстановки);
		#КонецЕсли
	Иначе

		Автозаполнение = Истина;

	КонецЕсли;

	// Если в форме отказались от изменений, то необходимо прекратить обработку
	Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Заполним нужные реквизиты документа
	Ценообразование.УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураЗначений, ДокументОбъект, СтруктураРеквизитовДокумента);

	//обрабатываем изменения Товаров, Услуг, ВозворатнойТары 
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Для Каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		ТекущееИмяТабличнойЧасти = ТЧОбъекта.Имя;
		Если (СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено
		      ИЛИ Не СтруктураНеобрабатываемыхТабличныхЧастей.Свойство(ТекущееИмяТабличнойЧасти))
		   И (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
		      ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)) Тогда

			Ценообразование.ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект,
			                                      СпособЗаполненияЦен,
			                                      СтруктураРеквизитовДокумента,
			                                      ТекущееИмяТабличнойЧасти,
			                                      ВалютаРегламентированногоУчета,
			                                      СкидкаУстановлена,
			                                      СтруктураЗначений,
			                                      Автозаполнение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ИзменитьЦеныВалюту()  

// Процедура выполняет общие действия при изменнении учетной политики розничная торговля облагается ЕНВД
//
// Параметры:
//  ДокументОбъект                      - объект редактируемого документа
//  ВалютаРегламентированногоУчета      - валюта регламентированного учета
//  СпособЗаполненияЦен                 - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                        регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос
//  ТипОперации                         - тип операции, строка вида операции ("Покупка" или "Продажа")
//  РежимВызова                         - режим вызова, строка режима вызова ("ДатаДокумента", "Организация" или "Склад")
//  ИмяТабличнойЧасти                   - имя табличной части
//  РозничнаяТорговляОблагаетсяЕНВД     - текущий флаг учетной политики документа (изменяется в процедуре)
//  Склад                               - текущий склад документа (изменяется в процедуре)
//  ОрганизацияЯвляетсяПлательщикомЕНВД - текущий флаг учетной политики документа (только для типа операции "Продажа")
//
Процедура ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ДокументОбъект,
	                                                  ВалютаРегламентированногоУчета,
	                                                  СпособЗаполненияЦен,
	                                                  ТипОперации,
	                                                  РежимВызова,
	                                                  ИмяТабличнойЧасти,
	                                                  РозничнаяТорговляОблагаетсяЕНВД,
	                                                  Склад,
	                                                  ОрганизацияЯвляетсяПлательщикомЕНВД = Неопределено) Экспорт

	// Если учетная политика неопределена
	Если РозничнаяТорговляОблагаетсяЕНВД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Организация         = ДокументОбъект.Организация;
	Дата                = ДокументОбъект.Дата;

	// Если изменился склад
	Если РежимВызова = "Склад" Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
			Если ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				НовыйСклад = ДокументОбъект.СкладОрдер;
			Иначе
				НовыйСклад = ДокументОбъект.СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			НовыйСклад     = ДокументОбъект.Склад;
		КонецЕсли;

		СтарыйВидСклада = Склад.ВидСклада;
		НовыйВидСклада  = НовыйСклад.ВидСклада;
		Склад           = НовыйСклад;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;

	// Определим значения учетной политики
	СтарыйРозничнаяТорговляОблагаетсяЕНВД = РозничнаяТорговляОблагаетсяЕНВД;
	НовыйРозничнаяТорговляОблагаетсяЕНВД  = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Организация, Дата);

	// Проверим необходимость выполнения пересчета
	МожноНеВыполнятьПересчет = Истина;
	Если ТипОперации = "Покупка" Тогда
		Если НЕ ДокументОбъект.НДСВключенВСтоимость Тогда
			МожноНеВыполнятьПересчет = Ложь;
		КонецЕсли;
	Иначе
		Если ДокументОбъект.УчитыватьНДС Тогда
			МожноНеВыполнятьПересчет = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если МожноНеВыполнятьПересчет Тогда
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
		Возврат;
	КонецЕсли;

	Если ТипОперации = "Покупка"
	   И НЕ НовыйРозничнаяТорговляОблагаетсяЕНВД Тогда
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
		Возврат;
	КонецЕсли;

	// Если изменилась дата
	Если РежимВызова = "ДатаДокумента"
	   И СтарыйРозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД Тогда
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
		Возврат;
	КонецЕсли;

	// Если изменился склад
	Если РежимВызова = "Склад" Тогда
		ВидСкладаОптовый = Перечисления.ВидыСкладов.Оптовый;

		Если (СтарыйВидСклада <> ВидСкладаОптовый И НовыйВидСклада <> ВидСкладаОптовый)
		 ИЛИ (СтарыйВидСклада =  ВидСкладаОптовый И НовыйВидСклада =  ВидСкладаОптовый) Тогда
			РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Откатить = Ложь;
	
	#Если Клиент Тогда
	Если НадоПересчитывать Тогда
		ТекстВопроса = "При изменении ";

		Если РежимВызова = "ДатаДокумента" Тогда
			ТекстВопроса = ТекстВопроса + "даты документа";
		ИначеЕсли РежимВызова = "Организация" Тогда
			ТекстВопроса = ТекстВопроса + "организации";
		ИначеЕсли РежимВызова = "Склад" Тогда
			ТекстВопроса = ТекстВопроса + "склада (места хранения)";
		КонецЕсли;

		ТекстВопроса = ТекстВопроса + " сменилась учетная политика ""Розничная торговля облагается ЕНВД"".";
		ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с новой учетной политикой?";
		Откатить = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) <> КодВозвратаДиалога.Да;		
	КонецЕсли;	
	#КонецЕсли
	
	Если Откатить Тогда	
		РозничнаяТорговляОблагаетсяЕНВД = СтарыйРозничнаяТорговляОблагаетсяЕНВД;	
	Иначе	
		Если НадоПересчитывать Тогда
			СтруктураЗначений = Неопределено;

			// Задать набор реквизитов для редактирования.
			СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект);

			// Структура не редактируемых реквизитов
			СтруктураНередактируемыхРеквизитов = Новый Структура;
			Если ТипОперации = "Покупка" Тогда
				СтруктураНередактируемыхРеквизитов.Вставить("НДСВключенВСтоимость");
			Иначе
				СтруктураНередактируемыхРеквизитов.Вставить("СуммаВключаетНДС");
			КонецЕсли;

			СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииУчетнойПолитикиЕНВД", ТипОперации);
			ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,
			                   СтруктураНередактируемыхРеквизитов, ИмяТабличнойЧасти,
			                   ВалютаРегламентированногоУчета,, СтруктураЗначений);

			Если СтруктураЗначений = Неопределено Тогда
				РозничнаяТорговляОблагаетсяЕНВД = СтарыйРозничнаяТорговляОблагаетсяЕНВД;
				Возврат;
			ИначеЕсли ТипОперации = "Продажа" Тогда
				ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					Если СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
						// Если услуга облагается ЕНВД, то ставка БезНДС,
						// если нет, то устанавливаем ставку НДС по умолчанию.
						Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата, ОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
							СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						Иначе
							ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
					Иначе
						Если НовыйРозничнаяТорговляОблагаетсяЕНВД Тогда
							СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						Иначе
							ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
					КонецЕсли;

					// Рассчитываем реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    ДокументОбъект);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
		РозничнаяТорговляОблагаетсяЕНВД = НовыйРозничнаяТорговляОблагаетсяЕНВД;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АДРЕСОВ ДОСТАВКИ ТОВАРОВ

#Если Клиент Тогда

// Процедура вызова формы редактирования адреса доставки
Процедура РедактированиеАдресаДоставки(АдресДоставкиКонтрагента, ПолеВводаАдреса, ДокументОбъект) Экспорт
	
	Если СокрЛП(АдресДоставкиКонтрагента) = "" Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если  МетаданныеДокумента.Реквизиты.Найти("Грузополучатель") <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.Грузополучатель) Тогда
		Получатель = ДокументОбъект.Грузополучатель;
	Иначе
		Если ДокументОбъект.Контрагент.Пустая() Тогда
			Возврат;
		КонецЕсли;
		Получатель = ДокументОбъект.Контрагент;
	КонецЕсли;
	
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресДоставкиКонтрагента);
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбработкаРедактирования.Объект = Получатель;
	ОбработкаРедактирования.ДоступностьОбъекта = Ложь;
	ОбработкаРедактирования.мВозвратСтруктуры = Истина;
		
	УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре(ОбработкаРедактирования, СтруктураАдреса);
	
	//Определим вид контактной информации
	//Выполняется после вызова УправлениеКонтактнойИнформацией.ЗаполнитьОбъектРедактированияАдресаПоСтруктуре,
	//	т.к. для поиска необходимо получить представление адреса доставки

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Вид,
	//В первую очередь берем адрес доставки, если такой есть
	|	ВЫБОР КОГДА Вид = Значение(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента) Тогда
	|		0
	|	Иначе
	|		1
	|	Конец КАК Сортировка
	|ИЗ РегистрСведений.КонтактнаяИнформация
	|ГДЕ Объект = &Объект
	|	И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И Представление ПОДОБНО &АдресДоставки
	|УПОРЯДОЧИТЬ ПО Сортировка");
	Запрос.УстановитьПараметр("Объект", Получатель);
	Запрос.УстановитьПараметр("АдресДоставки", СокрЛП(ОбработкаРедактирования.Представление));
	Вид = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Вид = Выборка.Вид;
	КонецЕсли;
	ОбработкаРедактирования.Вид = Вид;
	
	Форма = ОбработкаРедактирования.ПолучитьФорму("ФормаЗаписиАдреса", ПолеВводаАдреса);
	Форма.РежимВыбора = Истина;
	Форма.ЭлементыФормы.ПанельКомментарий.Свертка = РежимСверткиЭлементаУправления.Низ;
	Форма.Открыть();
	
КонецПроцедуры

#КонецЕсли

// Процедура заполнения реквизитов документа, относящихся к расчету стоимости доставки, при вводе документа по основанию
Процедура ЗаполнитьДанныеДоставкиПоОснованию(ДокументОбъект, ДокументОснование) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДокументОснование, "Грузополучатель, АдресДоставки, ДополнениеКАдресуДоставки");
	
КонецПроцедуры

// Функция возвращает строковое представление адреса доставки из контактной информации
// и комментарий из контактной информации соответсвующей строки
Функция ПолучитьАдресДоставкиСтрокой(Грузополучатель, КомментарийАдреса) Экспорт
	
	Результат = "";
	КомментарийАдреса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "                                       
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.*
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Грузополучатель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		СтрокаТаблицыДоставки = ТаблицаЗапроса[0];
		Результат = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтрокаТаблицыДоставки);
		КомментарийАдреса = СтрокаТаблицыДоставки.Комментарий;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если Клиент Тогда

// Процедура обрабатывает выбор адреса доставки из формы списка адресного классификатора
Процедура ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ДокументОбъект) Экспорт
	
	СтандартнаяОбработка = Ложь;
	КонтрагентДокумент = ДокументОбъект.Контрагент;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Грузополучатель", ДокументОбъект.Метаданные()) И НЕ ДокументОбъект.Грузополучатель.Пустая() Тогда
		КонтрагентДокумент = ДокументОбъект.Грузополучатель;
	Иначе
		Если ДокументОбъект.Контрагент.Пустая() Тогда
			ВвестиЗначение(ДокументОбъект.Контрагент, "Выберите контрагента");
			Если ДокументОбъект.Контрагент.ЭтоГруппа Тогда
				ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
				возврат;
			КонецЕсли;
			КонтрагентДокумент = ДокументОбъект.Контрагент;
		КонецЕсли;
	КонецЕсли;

	Если НЕ КонтрагентДокумент.Пустая() Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.мВозвратДанныхКонтактнойИнформации = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = КонтрагентДокумент;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		СтруктураАдреса = ФормаВыбора.ОткрытьМодально();

		// Устанавливаем адрес доставки и его комментарий
		Если СтруктураАдреса <> Неопределено Тогда
			ДокументОбъект.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(СтруктураАдреса);
			// Пустое дополнение к адресу меняем на непустое без дополнительных вопросов аользователю
			ИзменятьДополнениеКАдресуДоставки = НЕ ЗначениеЗаполнено(ДокументОбъект.ДополнениеКАдресуДоставки) 
											ИЛИ (ДокументОбъект.ДополнениеКАдресуДоставки = СтруктураАдреса.Комментарий);
			// спросим пользователя о необходимости изменить дополнение к адресу доставки
			Если НЕ ИзменятьДополнениеКАдресуДоставки Тогда
				Ответ = Вопрос("Дополнение к адресу доставки отличается от текущего значения в документе. Поменять дополнение к адресу доставки?", 
					РежимДиалогаВопрос.ДаНет, , , "Изменение дополнения к адресу доставки");

				ИзменятьДополнениеКАдресуДоставки = (Ответ = КодВозвратаДиалога.Да);	
			КонецЕсли;
			
			// Изменяем дополнение к адресу доставки при необходимости
			Если ИзменятьДополнениеКАдресуДоставки Тогда
				ДокументОбъект.ДополнениеКАдресуДоставки = СтруктураАдреса.Комментарий;
			КонецЕсли;	
						
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБМЕН ДАННЫМИ COMMERCEML

#Если Клиент Тогда
	
Процедура ВыгрузитьДокументВФайлCommerceML(СсылкаНаДокумент) Экспорт
		
	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ВыгрузитьИзДокумента(СсылкаНаДокумент);
	
КонецПроцедуры

Процедура ОтправитьДокументПоПочтеCommerceML(СсылкаНаДокумент) Экспорт
		
	ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
	ОбработкаВыгрузки.ОтправитьИзДокумента(СсылкаНаДокумент);
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////

// Процедура выполняет общие действия при изменнении договора взаиморасчетов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  СпособЗаполненияЦен            - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                   регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
//  СтараяВалютаВзаиморасчетов     - ссылка на справочник валют, определяет валюту взаиморасчетов 
//                                   до изменения договора;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа;
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа");
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ИмяТабличнойЧасти	           - имя табличной части
//  СтарыйДоговорКонтрагента       - старый договор контрагента, который был до изменения
//  СтруктураЗначений              - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
//
Процедура ПриИзмененииЗначенияДоговора(ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
	                             СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", ИмяТабличнойЧасти, 
	                             СтарыйДоговорКонтрагента = Неопределено,
	                             СтруктураЗначений = Неопределено) Экспорт

	Перем Договор, ТипЦенВДоговоре;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	//При изменении договора необходимо очистить Сделку
	Если МетаданныеДокумента.Реквизиты.Найти("Сделка") <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.Сделка) И 
			(ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ
			ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") ИЛИ
			ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") ИЛИ
            ТипЗнч(ДокументОбъект.Сделка)=Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда

			Если Договор<>ДокументОбъект.Сделка.ДоговорКонтрагента Тогда
				ДокументОбъект.Сделка = Неопределено;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли; 

	Договор = ДокументОбъект.ДоговорКонтрагента;

	Если НЕ ЗначениеЗаполнено(Договор) Тогда

		// Если ДоговорКонтрагента не заполнен то не проводим никаких изменений.
		Возврат;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и догоров взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и догоров взаиморасчетов имеет тип не договор покупателя
		СписокТиповОбъектовПоступлениеОборудования = Новый СписокЗначений;
		СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументОбъект.ПоступлениеТоваровУслуг"));
		СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументОбъект.ЗаказПоставщику"));
		СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		СписокТиповОбъектовПоступлениеОборудования.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));

		МожноПродолжать = Истина;
		
		Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
			И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
			ИЛИ (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
			И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			
			МожноПродолжать = Ложь;
			СтрокаВозможныхВыборов = ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, "покупателями или с комиссионерами", "поставщиками или комитентами");
			
		КонецЕсли;
		
		Если НЕ МожноПродолжать Тогда

			Если НЕ ЗначениеЗаполнено(СтарыйДоговорКонтрагента) Тогда
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			Иначе
#Если Клиент Тогда

				ТекстПредупреждения = "В документе можно выбирать только договора с "
				                    + СтрокаВозможныхВыборов + "!" + Символы.ПС;

				Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
					ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
					ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
				Иначе
					ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
					ДокументОбъект.ДоговорКонтрагента = Неопределено;
				КонецЕсли;

				Предупреждение(ТекстПредупреждения);
#КонецЕсли
			КонецЕсли;

			Возврат; // дальше ничего пересчитывать не надо

		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда

		ДокументОбъект.Контрагент = Договор.Владелец;

	ИначеЕсли ЗначениеЗаполнено(Договор)
	        И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.
#Если Клиент Тогда
			Предупреждение("Выбранный договор принадлежит другому контрагенту. 
			               |Будет восстановлен старый договор.");
#КонецЕсли

			Договор = СтарыйДоговорКонтрагента;

	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		 И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = Договор.Организация;
		Если Не ПустаяСтрока(ДокументОбъект.Номер) Тогда
			ДокументОбъект.Номер = "";
		КонецЕсли;
	КонецЕсли;

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать = Ложь Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
				ДокументОбъект.ТипЦен = Договор.ТипЦен;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
				   И ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				   И ДокументОбъект.УчитыватьНДС Тогда
					ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
		               |отличные от установленных в документе:";

		// Валюта документа
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
		   И (ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
			НовыйВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
			Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
			КонецЕсли;
			Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
			КонецЕсли;

			Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
				НеобходимоПересчитать = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС + 
				                 "Валюта документа: """ +
				                ?(НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента), "Не задана",СокрЛП(ДокументОбъект.ВалютаДокумента)) +
				                  """, договора: """ +  СокрЛП(НовыйВалютаДокумента) + """.";
			КонецЕсли;
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			НовыйТипЦен = ДокументОбъект.ТипЦен;
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
				НовыйТипЦен = Договор.ТипЦен;
			КонецЕсли;

			Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать = Истина;
				НадоПередаватьНовыйТипЦен = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС +
				                 "Тип цен документа: """ +
				                 ?(НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен), "Не задан",СокрЛП(ДокументОбъект.ТипЦен)) +
				                   """, договора: """ + СокрЛП(НовыйТипЦен) + """.";
			КонецЕсли;
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с договором?";
#Если Клиент Тогда
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда

				// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
				СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииЗначенияДоговора");
				ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,, СтруктураЗначений, ?(НадоПередаватьНовыйТипЦен, НовыйТипЦен, Неопределено));

				// Если в форме "Цены и валюта" бала нажата кнопка отмена то проверим реквизиты
				// КурсВзаиморасчетов и КратностьВзаиморасчетов на заполнение
				ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
				Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.КратностьВзаиморасчетов) Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;
#Иначе
			Если Истина Тогда
#КонецЕсли
				ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
				Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

					СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
		Иначе

			// Установим курс и кратность взаиморасчетов
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
			   И (ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0

	// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной, 
	// очистим договор
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
	   И ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
	   И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

#Если Клиент Тогда

		Если НЕ ЗначениеЗаполнено(СтарыйДоговорКонтрагента) Тогда
			ДокументОбъект.ДоговорКонтрагента = Неопределено;
		Иначе
			ТекстПредупреждения = "Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!"
			                    + Символы.ПС;

			Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

			Предупреждение(ТекстПредупреждения);
		КонецЕсли;
#Иначе
		ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
#КонецЕсли
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДоговора()

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой прихода или расхода
//  с розничных складов в ценах АТТ.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма.
//
Функция НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Док, ВалютаРегламентированногоУчета, ЭтоПриход) Экспорт

	Если ЭтоПриход Тогда
		ТекстЗапросаКоличество = "ВЫБОР КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	   И РегТоварыВРознице.Количество > 0 ТОГДА
		|		РегТоварыВРознице.Количество
		|	КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	   И РегТоварыВРознице.Количество < 0 ТОГДА
		|		-РегТоварыВРознице.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ";

		ТекстЗапросаСуммаПродажная = "ВЫБОР КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	   И РегТоварыВРознице.СуммаПродажная > 0 ТОГДА
		|		РегТоварыВРознице.СуммаПродажная
		|	КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	   И РегТоварыВРознице.СуммаПродажная < 0 ТОГДА
		|		-РегТоварыВРознице.СуммаПродажная
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ";

		ТекстНетДвижений = "Данным документом не выполнен приход ни на один розничный склад!";

		ТекстВсегоПринятоОтпущено = "Всего принято ";
		ТекстПринялОтпустил = "Принял";
	Иначе
		ТекстЗапросаКоличество = "ВЫБОР КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	   И РегТоварыВРознице.Количество > 0 ТОГДА
		|		РегТоварыВРознице.Количество
		|	КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	   И РегТоварыВРознице.Количество < 0 ТОГДА
		|		-РегТоварыВРознице.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ";

		ТекстЗапросаСуммаПродажная = "ВЫБОР КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	   И РегТоварыВРознице.СуммаПродажная > 0 ТОГДА
		|		РегТоварыВРознице.СуммаПродажная
		|	КОГДА РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	   И РегТоварыВРознице.СуммаПродажная < 0 ТОГДА
		|		-РегТоварыВРознице.СуммаПродажная
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ";

		ТекстНетДвижений = "Данным документом не выполнен расход ни с одного розничного склада!";

		ТекстВсегоПринятоОтпущено = "Всего отпущено ";
		ТекстПринялОтпустил = "Отпустил";
	КонецЕсли;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		СуффиксОбласти = "СКодами";
		ИмяКолонкиКодов = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		СуффиксОбласти = "СКодами";
		ИмяКолонкиКодов = "Код";
	Иначе
		СуффиксОбласти = "";
		ИмяКолонкиКодов = "Код"; // это нужно, чтобы текст запроса формировался корректно
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РегТоварыВРознице.Склад КАК Склад,
	|	РегТоварыВРознице.Номенклатура.Представление КАК Номенклатура,
	|   РегТоварыВРознице.Номенклатура."+ИмяКолонкиКодов+" КАК КодТовара,
	|	РегТоварыВРознице.Номенклатура КАК НоменклатураСсылка,
	|	РегТоварыВРознице.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	РегТоварыВРознице.ХарактеристикаНоменклатуры.Представление КАК Характеристика,
	|	РегТоварыВРознице.СерияНоменклатуры.Представление КАК Серия,
	|	РегТоварыВРознице.Качество.Представление КАК Качество,
	|	Сумма(" + ТекстЗапросаКоличество + ") КАК Количество,
	|	Сумма(" + ТекстЗапросаСуммаПродажная + ") КАК СуммаПродажная
	|ИЗ
	|	РегистрНакопления.ТоварыВРознице КАК РегТоварыВРознице
	|ГДЕ
	|	РегТоварыВРознице.Регистратор = &Док
	|	И РегТоварыВРознице.Активность
	|СГРУППИРОВАТЬ ПО
	|	РегТоварыВРознице.Склад,
	|	РегТоварыВРознице.Номенклатура,
	|	РегТоварыВРознице.Номенклатура.ЕдиницаХраненияОстатков,
	|	РегТоварыВРознице.ХарактеристикаНоменклатуры,
	|	РегТоварыВРознице.СерияНоменклатуры,
	|	РегТоварыВРознице.Качество
	|ИМЕЮЩИЕ
	|	Сумма(" + ТекстЗапросаКоличество + ") <> 0
	|	ИЛИ Сумма(" + ТекстЗапросаСуммаПродажная + ") <> 0
	|УПОРЯДОЧИТЬ ПО Номенклатура
	|ИТОГИ
	|ПО
	|	Склад
	|");

	Запрос.УстановитьПараметр("Док", Док);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение(ТекстНетДвижений);
		ТабДокумент = Неопределено;
	Иначе
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходСРозничныхСкладовВЦенахАТТ";

		Макет = ПолучитьОбщийМакет("ПриходРасходВЦенахАТТ");

		ОбластьЗаголовок     = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбласти);
		ОбластьСклад         = Макет.ПолучитьОбласть("Склад");
		ОбластьСтроки        = Макет.ПолучитьОбласть("Строка"+СуффиксОбласти);
		ОбластьИтого         = Макет.ПолучитьОбласть("Итого");
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьПодписи       = Макет.ПолучитьОбласть("Подписи");
		
		Если СуффиксОбласти <> "" Тогда
			ОбластьШапкаТаблицы.Параметры.ИмяКолонкиКодов = ИмяКолонкиКодов;
		КонецЕсли;

		ЗаголовокДокумента = ОбщегоНазначения.СформироватьЗаголовокДокумента(Док, Док.Метаданные().Синоним);

		ВыборкаСклады = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклады.Следующий() Цикл
			ВыбМОЛ = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(Док.Дата, Новый Структура("СтруктурнаяЕдиница", ВыборкаСклады.Склад)).ФизическоеЛицо;

			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ЗаголовокДокумента;
			ТабДокумент.Вывести(ОбластьЗаголовок);

			ОбластьСклад.Параметры.ПредставлениеСклада = СокрЛП(ВыборкаСклады.Склад) + ?(ЗначениеЗаполнено(ВыбМОЛ), " (материально-ответственное лицо: " + ВыбМОЛ + ")", "");
			ТабДокумент.Вывести(ОбластьСклад);

			ТабДокумент.Вывести(ОбластьШапкаТаблицы);

			НомерСтроки = 0;
			Сумма = 0;

			Выборка = ВыборкаСклады.Выбрать();
			Пока Выборка.Следующий() Цикл
				НомерСтроки = НомерСтроки + 1;

				Сумма = Сумма + Выборка.СуммаПродажная;

				ОбластьСтроки.Параметры.Заполнить(Выборка);
				ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтроки.Параметры.Товар = СокрЛП(Выборка.Номенклатура)
				   + ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка);
				ОбластьСтроки.Параметры.Цена = ?(Выборка.Количество = 0, 0, Выборка.СуммаПродажная / Выборка.Количество);

				ТабДокумент.Вывести(ОбластьСтроки);
			КонецЦикла;

			ОбластьИтого.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
			ТабДокумент.Вывести(ОбластьИтого);

			ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстВсегоПринятоОтпущено + НомерСтроки + " наименований, на сумму " + ОбщегоНазначения.ФорматСумм(Сумма, ВалютаРегламентированногоУчета);
			ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(Сумма, ВалютаРегламентированногоУчета);
			ТабДокумент.Вывести(ОбластьСуммаПрописью);

			ОбластьПодписи.Параметры.ПринялОтпустил = ТекстПринялОтпустил;
			ТабДокумент.Вывести(ОбластьПодписи);

			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВОССТАНОВЛЕНИЯ ПОСЛЕДОВАТЕЛЬНОСТИ ПАРТИОННОГО УЧЕТА

Функция ПолучитьСтруктуруОчередейДокументов(МоментВермениНачала, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
	СтруктураОчередей = Новый Структура();
	Если ОтражатьВУправленческомУчете Тогда
		СтруктураОчередей.Вставить("ОтражатьВУправленческомУчете", Новый Структура("ТаблицаСсылок, Граница",Новый ТаблицаЗначений(),МоментВермениНачала));
	КонецЕсли;
	Возврат СтруктураОчередей;
КонецФункции	

Функция ОпределитьИмяПоследовательностиДляОчереди(Очередь)
	Если Очередь.Ключ = "ОтражатьВУправленческомУчете" Тогда
		Возврат "ПартионныйУчет";
	КонецЕсли;
	Возврат "";
КонецФункции	


Функция ПолучитьСледующийДокумент(СтруктураОчередей, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке, Организация)
	СтруктураВозврата = Новый Структура("Ссылка, Дата, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Организация",Неопределено,Неопределено,Ложь,Ложь,Ложь,Организация);
	
	//Заполним пустые очереди и найдем самый раний документ
	Для Каждого ТекущаяОчередь Из СтруктураОчередей Цикл
		Если (ТекущаяОчередь.Значение.ТаблицаСсылок.Количество() = 0) И (НЕ ТекущаяОчередь.Значение.Граница = Неопределено) Тогда
			ТекущаяОчередь.Значение.ТаблицаСсылок = УправлениеЗапасамиПартионныйУчет.ПолучитьСписокДокументовПоПоследовательности(ОпределитьИмяПоследовательностиДляОчереди(ТекущаяОчередь),ТекущаяОчередь.Значение.Граница, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке, Организация);
			Если ТекущаяОчередь.Значение.ТаблицаСсылок.Количество() = 0 Тогда
				//Больше документов в данной последовательности нет
				ТекущаяОчередь.Значение.Граница = Неопределено;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ТекущаяОчередь.Значение.Граница = Неопределено Тогда
			Если (СтруктураВозврата.Ссылка = Неопределено) ИЛИ (СтруктураВозврата.Дата > ТекущаяОчередь.Значение.ТаблицаСсылок[0].Дата) Тогда
				СтруктураВозврата.Дата = ТекущаяОчередь.Значение.ТаблицаСсылок[0].Дата;
				СтруктураВозврата.Ссылка = ТекущаяОчередь.Значение.ТаблицаСсылок[0].Ссылка;
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;
	
	//Удалим документ из очередей и заполним виды учета
	Для Каждого ТекущаяОчередь Из СтруктураОчередей Цикл
		Если НЕ ТекущаяОчередь.Значение.Граница = Неопределено Тогда
			Если ТекущаяОчередь.Значение.ТаблицаСсылок[0].Ссылка = СтруктураВозврата.Ссылка Тогда
				СтруктураВозврата[ТекущаяОчередь.Ключ] = Истина;
				ТекущаяОчередь.Значение.Граница = Новый МоментВремени(ТекущаяОчередь.Значение.ТаблицаСсылок[0].Дата, ТекущаяОчередь.Значение.ТаблицаСсылок[0].Ссылка);
				ТекущаяОчередь.Значение.ТаблицаСсылок.Удалить(0);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции	

// Процедура выполняет поиск и исправление ошибок в последовательности.
//
Процедура КорректировкаРегистрацииВПоследовательности()

	Для Каждого ТекПоследовательность Из Метаданные.Последовательности Цикл
		ТекстЕстьДвижения = "
						|	ВЫБОР
						|		КОГДА СписанныеТоварыСрезПоследних.Регистратор ЕСТЬ NULL";
		Для Каждого ДвиженияВлияющиеНаПоследовательность Из ТекПоследовательность.Движения Цикл
			ТекстЕстьДвижения = ТекстЕстьДвижения + "
						|				И РегистрНакопления" + ДвиженияВлияющиеНаПоследовательность.Имя + ".Регистратор ЕСТЬ NULL";
		КонецЦикла;
		ТекстЕстьДвижения = ТекстЕстьДвижения + "
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ";

		ТекстЗапроса = "ВЫБРАТЬ
						|	Последовательность.Регистратор КАК Регистратор,
						|	Последовательность.Регистратор.Проведен КАК Проведен,
						|	Последовательность.Регистратор.Дата КАК Дата,
						|	Последовательность.Период КАК Период,
						|" + ТекстЕстьДвижения + " КАК ЕстьДвижения
						|ИЗ
						|	Последовательность." + ТекПоследовательность.Имя + " КАК Последовательность
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыСрезПоследних
						|		ПО Последовательность.Регистратор = СписанныеТоварыСрезПоследних.Регистратор
						|		И СписанныеТоварыСрезПоследних.НомерСтроки = 1";
		Для Каждого ДвиженияВлияющиеНаПоследовательность Из ТекПоследовательность.Движения Цикл
			ТекстЗапроса = ТекстЗапроса + "
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." +ДвиженияВлияющиеНаПоследовательность.Имя + ".Обороты(, , Регистратор, ) КАК РегистрНакопления" + ДвиженияВлияющиеНаПоследовательность.Имя + "
						|		ПО Последовательность.Регистратор = РегистрНакопления" + ДвиженияВлияющиеНаПоследовательность.Имя + ".Регистратор";
		КонецЦикла;

		ТекстЗапроса = ТекстЗапроса + "
						|ГДЕ
						|	НЕ (Последовательность.Регистратор.Проведен
						|	    И (Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
						|	       ИЛИ Последовательность.Регистратор.Дата = Последовательность.Период)
						|       И " + ТекстЕстьДвижения + ")
						|";

		Запрос = Новый Запрос(ТекстЗапроса);

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.Проведен Тогда
				НаборЗаписей = Последовательности[ТекПоследовательность.Имя].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Записать();
			ИначеЕсли (Выборка.Дата <> Выборка.Период)
			        И (ТипЗнч(Выборка.Регистратор) <> Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров")) Тогда
				НаборЗаписей = Последовательности[ТекПоследовательность.Имя].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				Для Каждого СтрокаНабора Из НаборЗаписей Цикл
					СтрокаНабора.Период = Выборка.Дата;
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;

			Если Не Выборка.ЕстьДвижения Тогда
				НаборЗаписей = Последовательности[ТекПоследовательность.Имя].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // КорректировкаРегистрацииВПоследовательности()

// Восстановление последовательностей партионного учета

Процедура ВыполнитьВосстановление (ДатаКонцаОбработки,
								  Организация,
								  ОтражатьВУправленческомУчете,
								  ОтражатьВБухгалтерскомУчете,
								  ОтражатьВНалоговомУчете,
								  Останавливаться,
								  МаксимальноеКоличествоДокументовВВыборке,
								  МаксимальноеКоличествоСтрокВТранзакции) Экспорт

	Если НЕ (ОтражатьВУправленческомУчете
		ИЛИ ОтражатьВНалоговомУчете
		ИЛИ ОтражатьВБухгалтерскомУчете) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран ни один из учетов!");
		Возврат;
		
	КонецЕсли;

	КорректировкаРегистрацииВПоследовательности();

	// Будем обрабатывать документы с минимальной из границ
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ
	|( ";
	ТекстВложенногоЗапроса=  "";
	Если ОтражатьВУправленческомУчете Тогда
		
		Если Не ПустаяСтрока(ТекстВложенногоЗапроса) Тогда
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;

		ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
		|ВЫБРАТЬ
		|	ПартионныйУчетГраницы.МоментВремени КАК МоментВремени
		|ИЗ
		|	Последовательность.ПартионныйУчет.Границы КАК ПартионныйУчетГраницы
		|";
	КонецЕсли;
	
	Текст = Текст + ТекстВложенногоЗапроса + "
	|) ВложенныйЗапрос
	|УПОРЯДОЧИТЬ ПО МоментВремени ВОЗР";
	
	Запрос.Текст = Текст;
	
	ВыборкаГраниц = Запрос.Выполнить().Выбрать();
	Если ВыборкаГраниц.Следующий() Тогда
		ГПт = ВыборкаГраниц.МоментВремени;
	Иначе
		ГПт = Новый МоментВремени('00010101');
	КонецЕсли;
	
	// Восстанавливаем обе последовательности, последовательно проводя документы
	ЕстьДокументы = Истина;
	
	ОбработаноСтрок = 0;
	
	НачатьТранзакцию();
	#Если Клиент Тогда
		Состояние("Начало транзакции");
	#КонецЕсли
	
	ПроведениеОстановлено = Ложь;
	
	ДатаДокумента = ГПт.Дата;
	ДокументСсылка = ГПт.Ссылка;
	ДатаКон = КонецДня(ДатаКонцаОбработки);
	БылПоследнийДокумент = Ложь;
	СтруктураОчередей = ПолучитьСтруктуруОчередейДокументов(Новый МоментВремени(ДатаДокумента,ДокументСсылка), ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	Пока ЕстьДокументы Цикл
		
		#Если Клиент Тогда
			Состояние("Выборка документов для проведения.");
		#КонецЕсли
		
		Если НЕ БылПоследнийДокумент
		  И УправлениеЗапасами.СуществуетСсылкаНаДокумент(ДокументСсылка) Тогда
			Строка = Новый Структура("Ссылка, Дата, Организация",ДокументСсылка,ДатаДокумента,Организация);
		Иначе	
			Строка = ПолучитьСледующийДокумент(СтруктураОчередей, ДатаКон, МаксимальноеКоличествоДокументовВВыборке, Организация);
		КонецЕсли;	
		
		ЕстьДокументы = (НЕ (Строка.Ссылка = Неопределено));
		БылПоследнийДокумент = ЕстьДокументы;
		
		Если НЕ ЕстьДокументы Тогда
			Прервать;
		КонецЕсли;	
		
		ДокументСсылка = Строка.Ссылка;
		ДатаДокумента  = Строка.Дата;
			
		// Через параметр получим количество обработанных строк
		КоличествоСтрокВДокументе = 0;
			
		// Проводим только по тем видам учета, которые указаны в документе
		//Упр = ОтражатьВУправленческомУчете И Строка.ОтражатьВУправленческомУчете;
		//Бух = ОтражатьВБухгалтерскомУчете  И Строка.ОтражатьВБухгалтерскомУчете;
		//Нал = ОтражатьВНалоговомУчете      И Строка.ОтражатьВНалоговомУчете;
		
		Упр = ОтражатьВУправленческомУчете;
		Бух = ОтражатьВБухгалтерскомУчете;
		Нал = ОтражатьВНалоговомУчете;
		
			
		СтруктураНаборовЗаписей = Неопределено;
		# Если Сервер Тогда
			// При выполнении на сервере наборы записей создаем один раз
			СтруктураНаборовЗаписей = Новый Структура;
			СтруктураНаборовЗаписей.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете" , ОтражатьВУправленческомУчете);
			СтруктураНаборовЗаписей.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете"  , ОтражатьВБухгалтерскомУчете);
			СтруктураНаборовЗаписей.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете"      , ОтражатьВНалоговомУчете);
				
			УправлениеЗапасамиПартионныйУчет.СоздатьНаборыЗаписей(СтруктураНаборовЗаписей);
				
			СтруктураНаборовЗаписей.Удалить("ЕстьСтрокиОтражатьВУправленческомУчете");
			СтруктураНаборовЗаписей.Удалить("ЕстьСтрокиОтражатьВБухгалтерскомУчете");
			СтруктураНаборовЗаписей.Удалить("ЕстьСтрокиОтражатьВНалоговомУчете");
		# КонецЕсли
			
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда
				
			#Если Клиент Тогда
				Состояние("Проведение документа " + ДокументСсылка);
			#КонецЕсли
				
			ТаблицаСписания = ПолучитьТаблицуСтрокЗакрытиеЗаказовПокупателей(ДокументСсылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			Если ТаблицаСписания.Количество() <> 0 Тогда				
				
				// Движение партий товаров по документу
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров (ДокументСсылка,
									   ТаблицаСписания,
									   КоличествоСтрокВДокументе,
									   ОтражатьВУправленческомУчете,
									   ОтражатьВБухгалтерскомУчете,
									   ОтражатьВНалоговомУчете,
									   Останавливаться,
									   ПроведениеОстановлено,
									   ,
									   Истина,
									   СтруктураНаборовЗаписей);
					
				Если ПроведениеОстановлено тогда
						
					ОтменитьТранзакцию();
					Возврат;
						
				КонецЕсли;
				
			КонецЕсли;
				
		Иначе
				
			Если (Бух ИЛИ Нал ИЛИ Упр)
				И (Организация.Пустая() ИЛИ (НЕ Организация.Пустая() И (Строка.Организация = Организация))) Тогда
					
				#Если Клиент Тогда
					Состояние("Проведение документа " + ДокументСсылка);
				#КонецЕсли
				
				Если ТипЗНЧ(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров") Тогда
					ДокументМоментВремени = Новый МоментВремени(КонецМесяца(ДокументСсылка.ПериодРегистрации), ДокументСсылка);
				Иначе
					ДокументМоментВремени = Неопределено;
				КонецЕсли;					
				
				// Движение партий товаров по документу
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров (ДокументСсылка,
									  ,
									  КоличествоСтрокВДокументе,
									  Упр,
									  Бух,
									  Нал,
									  Останавливаться,
									  ПроведениеОстановлено,
									  ДокументМоментВремени,
									  Истина,
									  СтруктураНаборовЗаписей);
					
				Если ПроведениеОстановлено тогда
						
					ОтменитьТранзакцию();
					Возврат;
						
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;
		
		#Если Клиент Тогда
		Состояние();
		#КонецЕсли
			
		ОбработаноСтрок = ОбработаноСтрок + КоличествоСтрокВДокументе;
			
		// Фиксируем транзакцию
		Если ОбработаноСтрок >= МаксимальноеКоличествоСтрокВТранзакции Тогда
				
			#Если Клиент Тогда
				Состояние("Обработано "+ОбработаноСтрок+". фиксация транзакции.");
			#КонецЕсли
			ЗафиксироватьТранзакцию();
			Сообщить("Обработано "+ОбработаноСтрок+". Транзакция зафиксирована");
				
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли

			НачатьТранзакцию();
				
			ОбработаноСтрок = 0;
				
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("Обработано "+ОбработаноСтрок+". фиксация транзакции.");
	#КонецЕсли
	ЗафиксироватьТранзакцию();
	#Если Клиент Тогда	
	Состояние();
	#КонецЕсли

	#Если Клиент Тогда
		Состояние("Проведение документов ""Подтверждение нулевой ставки НДС""");
	#КонецЕсли

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ПодтверждениеНулевойСтавкиНДС.Ссылка
				   |ИЗ
				   |	Документ.ПодтверждениеНулевойСтавкиНДС КАК ПодтверждениеНулевойСтавкиНДС
				   |ГДЕ
				   |	ПодтверждениеНулевойСтавкиНДС.Проведен = ИСТИНА
				   |	И ПодтверждениеНулевойСтавкиНДС.Дата <= &ДатаКон
				   |	И ПодтверждениеНулевойСтавкиНДС.Дата >= &ДатаНач";
				   
	Если ЗначениеЗаполнено(Организация) тогда
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ","ГДЕ ПодтверждениеНулевойСтавкиНДС.Организация = &Организация И ");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаКонцаОбработки));
	Запрос.УстановитьПараметр("ДатаНач",ГПт.Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		#Если Клиент Тогда
			Состояние("Проводится документ "+ Выборка.Ссылка);
		#КонецЕсли
		Попытка
			УправлениеЗапасамиПартионныйУчет.ЗаписатьДокументНаСервере(Выборка.Ссылка,РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЦикла;

	#Если Клиент Тогда	
	Состояние();
	#КонецЕсли

КонецПроцедуры // ВыполнитьВосстановление

Функция ПолучитьТаблицуСтрокЗакрытиеЗаказовПокупателей(ДокументСписания, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, СписокОрганизаций = Неопределено)
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументовЗакрытиеЗаказоаПокупателей"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	НомерСтрокиДокумента
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	Строки.Регистратор = &ДокументСписания";
	
	Если Не Организация.Пустая() Тогда
		Запрос.Текст = Запрос.Текст+ "
			|	И Строки.Организация = &Организация";
	КонецЕсли;
	
	ПервоеУсловие = Истина;
	
	Если ОтражатьВУправленческомУчете Тогда
		Если ПервоеУсловие Тогда
			Запрос.Текст = Запрос.Текст+ "
			|	И ((";
		Иначе
			Запрос.Текст = Запрос.Текст+ ") ИЛИ (";
		КонецЕсли;
		ПервоеУсловие = Ложь;	
		Запрос.Текст = Запрос.Текст+ 	"Строки.ОтражатьВУправленческомУчете = Истина";
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если ПервоеУсловие Тогда
			Запрос.Текст = Запрос.Текст+ "
			|	И ((";
		Иначе
			Запрос.Текст = Запрос.Текст+ ") ИЛИ (";
		КонецЕсли;
		ПервоеУсловие = Ложь;	
		
		Запрос.Текст = Запрос.Текст+ "Строки.ОтражатьВБухгалтерскомУчете = Истина";
	КонецЕсли;
		
	Если ОтражатьВНалоговомУчете Тогда
		Если ПервоеУсловие Тогда
			Запрос.Текст = Запрос.Текст+ "
			|	И ((";
		Иначе
			Запрос.Текст = Запрос.Текст+ ") ИЛИ (";
		КонецЕсли;
		ПервоеУсловие = Ложь;
		
		Запрос.Текст = Запрос.Текст+ "Строки.ОтражатьВНалоговомУчете = Истина";
	КонецЕсли;
	Если НЕ ПервоеУсловие Тогда
		Запрос.Текст = Запрос.Текст+ "))";
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();

КонецФункции

// Процедура выполняет печать этикеток из переданного доумента.
//
// Параметры:
//  Док - ссылка на документ, из которго нужно напечатать этикетки.
//  ИмяКолонкиЦена - имя колонки, в которой содержится цена.
//
Процедура ЗаписатьRFIDМеткиИзДокумента(Док) Экспорт

	МетаданныеДокумента = Док.Метаданные();

	ИмяДокумента = МетаданныеДокумента.Имя;

	ЕстьХарактеристика   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, "Товары");
	ЕстьСерия            = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, "Товары");
	ЕстьКачество         = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, "Товары");
	ЕстьЕдиницаИзмерения = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, "Товары");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Количество КАК Количество,
	|	Док.Характеристика КАК ХарактеристикаНоменклатуры,
	|	Док.Серия КАК СерияНоменклатуры,
	|	Док.Качество КАК Качество,
	|	Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РегШК.Штрихкод КАК Штрихкод
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Номенклатура КАК Номенклатура,
	|		Док.Количество КАК Количество,
	|		" + ?(ЕстьХарактеристика, "Док.ХарактеристикаНоменклатуры", "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)") + " КАК Характеристика,
	|		" + ?(ЕстьСерия, "Док.СерияНоменклатуры", "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)") + " КАК Серия,
	|		" + ?(ЕстьКачество, "Док.Качество", "ЗНАЧЕНИЕ(Справочник.Качество.Новый)") + " КАК Качество,
	|		" + ?(ЕстьЕдиницаИзмерения, "Док.ЕдиницаИзмерения", "Док.Номенклатура.ЕдиницаХраненияОстатков") + " КАК ЕдиницаИзмерения
	|	ИЗ
	|		Документ." + ИмяДокумента + ".Товары КАК Док
	|	ГДЕ
	|		Док.Ссылка = &Док
	|	) КАК Док
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Штрихкоды КАК РегШК
	|ПО
	|	РегШК.Владелец = Док.Номенклатура
	|	И РегШК.ЕдиницаИзмерения = Док.ЕдиницаИзмерения
	|	И РегШК.ХарактеристикаНоменклатуры = Док.Характеристика
	|	И РегШК.СерияНоменклатуры = Док.Серия
	|	И РегШК.Качество = Док.Качество
	|");

	Запрос.УстановитьПараметр("Док", Док);

	ТекОбработка = Обработки.ТОЗаписьДанныхВRFIDМетки.Создать();
	ТекОбработка.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	ТекОбработка.ПолучитьФорму().Открыть();

КонецПроцедуры // ЗаписатьRFIDМеткиИзДокумента()
