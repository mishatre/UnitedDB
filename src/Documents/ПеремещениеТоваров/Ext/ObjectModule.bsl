Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;

Перем мОтражатьВРегламентированномУчете Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьПеремещениеТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиПеремещенияТоваров() Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	СкладОтправитель,
	|	СкладОтправитель.Представление КАК Поставщик,
	|	СкладПолучатель,
	|	СкладПолучатель.Представление  КАК Покупатель,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            Как Артикул,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		Цена,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            КАК Артикул,
	|		0 КАК КоличествоМест,
	|		Количество,
	|		0 КАК Цена,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		NULL                                               КАК ЕдиницаИзмеренияМест
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	// Выводим шапку накладной
	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение"));

	ПараметрыПечати.Вставить("ПредставлениеПоставщика", Шапка.Поставщик);
	ПараметрыПечати.Вставить("Поставщик", Шапка.СкладОтправитель);

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", Шапка.Покупатель);
	ПараметрыПечати.Вставить("Получатель", Шапка.СкладПолучатель);

	// Вывести табличную часть
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Артикул");
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Код");
	Иначе
		ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
	КонецЕсли;
	
	ПараметрыПечати.Вставить("ВыводитьЦены", СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПараметрыПечати.Вставить("ФлагПечатиМест", (Товары.Итог("КоличествоМест") > 0));
	
	Позиции = Новый Массив;
	
	Ном = 0;

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		
		
		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			Если ПараметрыПечати.ИмяКолонкиКодов = "Артикул" Тогда
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Артикул);
			Иначе
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Код);
			КонецЕсли;
		КонецЕсли;

		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));

		Если ПараметрыПечати.ФлагПечатиМест Тогда
			ПараметрыПозиции.Вставить("КоличествоМест", ВыборкаСтрокТовары.КоличествоМест);
			ПараметрыПозиции.Вставить("ЕдиницаИзмеренияМест", ВыборкаСтрокТовары.ЕдиницаИзмеренияМест);
		КонецЕсли;

		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		
		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		

		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			Если ПараметрыПечати.ИмяКолонкиКодов = "Артикул" Тогда
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТара.Артикул);
			Иначе
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТара.Код);
			КонецЕсли;
		КонецЕсли;

		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТара.Товар);

		Если ПараметрыПечати.ФлагПечатиМест Тогда
			ПараметрыПозиции.Вставить("КоличествоМест", ВыборкаСтрокТара.КоличествоМест);
			ПараметрыПозиции.Вставить("ЕдиницаИзмеренияМест", ВыборкаСтрокТара.ЕдиницаИзмеренияМест);
		КонецЕсли;
		
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТара.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТара.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТара.Цена);

		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли
	
	Возврат ПараметрыПечати;
	
КонецФункции //ПолучитьДанныеДляПечатиПеремещенияТоваров()

#Если Клиент Тогда

// Функция осуществляет запись в RFID метки.
//
// Параметры
//  Нет
//
Процедура ЗаписатьВRFIDМетки()

	ЗаполнениеДокументов.ЗаписатьRFIDМеткиИзДокумента(Ссылка);

КонецПроцедуры // ЗаписатьВRFIDМетки()

// Функция осуществляет печать этикеток для позиций ТЧ
//
// Параметры
//  Нет
//
Процедура ПечататьЭтикетки()

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка, "Цена");
	Иначе
		УправлениеРозничнойТорговлей.НапечататьЭтикеткиИзДокумента(Ссылка);
	КонецЕсли;

КонецПроцедуры // ПечататьЭтикетки()

// Функция печатает ценники.
//
Функция ПечатьЦенников()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК Печать,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &Док
	|");

	Запрос.УстановитьПараметр("Док", Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецФункции // ПечатьЦенников()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  ИмяМакета - Имя макета для печати.
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(ИмяМакета, НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, ИмяМакета, , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Возвращает таблицу стоимости по товарам
//
Функция ПолучитьТаблицуСтоимостиТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидДвижения",     ВидДвиженияНакопления.Расход);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор   = &ТекущийДокумент
	|	И ПартииТоваровНаСкладах.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры
	|";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Возвращает стоимость товара
//
Функция ПолучитьСтоимостьТовара(Таблица, Номенклатура, Характеристика = Неопределено, Серия = Неопределено, ПартионныйУчетПоСериям = Ложь, Количество)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   Номенклатура);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	КонецЕсли;

	Если ПартионныйУчетПоСериям
	   И ЗначениеЗаполнено(Серия) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	КонецЕсли;

	Строки = Таблица.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() > 0 Тогда
		Стоимость  = Строки[0].Стоимость;
		Количество = Строки[0].Количество;
	Иначе
		Стоимость  = 0;
		Количество = 0;
	КонецЕсли;

	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьПоПартиямТоваров()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПеремещениеТоваров()

	ПараметрыПечати = ПолучитьДанныеДляПечатиПеремещенияТоваров();	

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть

	Если ПараметрыПечати.ВыводитьЦены Тогда
		ИмяШапки  = "ШапкаТаблицыСЦенами";
		ИмяСтроки = "СтрокаСЦенами";
	Иначе
		ИмяШапки  = "ШапкаТаблицы";
		ИмяСтроки = "Строка";
	КонецЕсли;

	ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
	ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
	ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
	ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
	ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + ?(ПараметрыПечати.ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	Иначе
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("КолонкаКодов").ШиринаКолонки
		                                    + ?(ПараметрыПечати.ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
	КонецЕсли;
	Если ПараметрыПечати.ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");

	// Выборка товаров
	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ПараметрыПечати.ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;
    	
	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ПараметрыПечати.ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция ПечатьТОРГ13()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК НомерДокумента,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	СкладОтправитель КАК ОтправительПодразделение,
	|	СкладПолучатель  КАК ПолучательПодразделение,
	|	СкладОтправитель.ВидСклада КАК ОтправительВидСклада,
	|	СкладПолучатель.ВидСклада  КАК ПолучательВидСклада,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		Цена,
	|		Количество,
	|		КоличествоМест,
	|		Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|		ЕдиницаИзмерения.Коэффициент КАК ДокЕдиницаКоэффициент,
	|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|		ЕдиницаИзмеренияМест.Представление           КАК ЕдиницаИзмеренияМестНаименование,
	|		ВЫБОР
	|			КОГДА КоличествоМест > 0 ТОГДА ЕдиницаИзмеренияМест.Коэффициент / Коэффициент
	|			ИНАЧЕ NULL
	|		КОНЕЦ                                        КАК КоличествоВОдномМесте,
	|		ХарактеристикаНоменклатуры                   КАК Характеристика,
	|		СерияНоменклатуры                            КАК Серия,
	|		Номенклатура.ВестиПартионныйУчетПоСериям     КАК ПартионныйУчетПоСериям
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|		Номенклатура." + ТоварКод + " КАК ТоварКод,
	|		0 КАК Цена,
	|		0 КАК Сумма,
	|		0 КАК КоличествоВОдномМесте,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
	|	)
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ЭтоСкладНТТ = (Шапка.ОтправительВидСклада = Перечисления.ВидыСкладов.НТТ
	              ИЛИ Шапка.ПолучательВидСклада = Перечисления.ВидыСкладов.НТТ);

	Если НЕ ЭтоСкладНТТ Тогда
		ТаблицаСтоимости        = ПолучитьТаблицуСтоимостиТоваров();
		ТаблицаСтоимости.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
		ВалютаУпрУчета          = глЗначениеПеременной("ВалютаУправленческогоУчета");
		Параметры               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
		КурсВалютыУпрУчета      = Параметры.Курс;
		КратностьВалютыУпрУчета = Параметры.Кратность;
	КонецЕсли;
	
	ТаблицаТовары = Товары.Выгрузить();
	ТаблицаТовары.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры", "Количество");
	ТаблицаТовары.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");
	СтруктураПоискаПоТоварам = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");

	Макет = ПолучитьОбщийМакет("ТОРГ13");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента));
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогКоличествоМестПоСтранице = 0;
	ИтогМассаБруттоПоСтранице    = 0;
	ИтогМассыНеттоПоСтранице     = 0;
	ИтогСуммыПоСтранице          = 0;

	// инициализация итогов по документу
	ИтогоКоличество  = 0;
	ИтогоМассаБрутто = 0;
	ИтогоМассаНетто  = 0;
	ИтогоСумма       = 0;

	Ном = 0;

	// Выводим многострочную часть докмента
	ВыборкаСтрокТовары      = Шапка.Товары.Выбрать();
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");

	// Выборка товаров
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоМест = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");

		Если ВыборкаСтрокТовары.КоличествоМест <> 0 И ЗначениеЗаполнено(ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование) Тогда
			КоличествоМест = КоличествоМест 
			                 + Символы.ПС
			                 + " (" + Формат(ВыборкаСтрокТовары.КоличествоМест,"ЧЦ=15; ЧДЦ=0")
			                 + " "
			                 + ВыборкаСтрокТовары.ЕдиницаИзмеренияМестНаименование
			                 + ")";
		КонецЕсли;

		ОбластьМакета.Параметры.КоличествоМест    = КоличествоМест;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ЭтоСкладНТТ Тогда
			Сумма = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена;
		Иначе
			Если ВыборкаСтрокТовары.Количество = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Количество = 0;
				Сумма = ПолучитьСтоимостьТовара(ТаблицаСтоимости,
				                                ВыборкаСтрокТовары.Номенклатура,
				                                ВыборкаСтрокТовары.Характеристика,
				                                ВыборкаСтрокТовары.Серия,
				                                ВыборкаСтрокТовары.ПартионныйУчетПоСериям,
				                                Количество);
				Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, ВалютаУпрУчета, ВалютаПечати, КурсВалютыУпрУчета, 1, КратностьВалютыУпрУчета, 1);
				
				Если ВыборкаСтрокТовары.ДокЕдиницаКоэффициент <> 0 Тогда
					Количество = Количество * ВыборкаСтрокТовары.ЕдиницаХраненияОстатковКоэффициент / ВыборкаСтрокТовары.ДокЕдиницаКоэффициент;
				КонецЕсли;
				
				СтруктураПоискаПоТоварам.Номенклатура = ВыборкаСтрокТовары.Номенклатура;
				СтруктураПоискаПоТоварам.ХарактеристикаНоменклатуры = ВыборкаСтрокТовары.Характеристика;
				СтруктураПоискаПоТоварам.СерияНоменклатуры = ВыборкаСтрокТовары.Серия;
				СтрокиТаблицыТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоискаПоТоварам);
				Цена = Окр(?(Количество > 0, Сумма / Количество, 0), 2);
				Сумма = Цена * ВыборкаСтрокТовары.Количество;
			КонецЕсли;

			ОбластьМакета.Параметры.Цена = Цена;
		КонецЕсли;

		ОбластьМакета.Параметры.Сумма = Сумма;

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + Сумма;

	КонецЦикла;

	// Выборка возвратная тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			ИтогМассаБруттоПоСтранице    = 0;
			ИтогМассаНеттоПоСтранице     = 0;
			ИтогСуммыПоСтранице          = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);

		ОбластьМакета.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТара.Количество, "ЧЦ=15; ЧДЦ=3");
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТара.ТоварНаименование + " (возвратная тара)";

		ТабДокумент.Вывести(ОбластьМакета);

		// Обновим итоги по странице
		ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТара.Количество;
		ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
		ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
		ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + 0;

		// Обновим итогов по документу
		ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТара.Количество;
		ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
		ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
		ИтогоСумма       = ИтогоСумма       + 0;

	КонецЦикла;

	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
	ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ПараметрыПрописиНаРусском = ВалютаПечати.ПараметрыПрописиНаРусском;
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "1", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "2", "0");
	ПараметрыПрописиНаРусском = СтрЗаменить(ПараметрыПрописиНаРусском, "3", "0");
	ОбластьМакета.Параметры.ИтогоСуммаПрописью = ЧислоПрописью(Цел(ИтогоСумма), "L=ru_RU; НП=Ложь; НД=Ложь", ПараметрыПрописиНаРусском);
	ОбластьМакета.Параметры.ИтогоСуммаКоп      = Формат(Цел((ИтогоСумма-Цел(ИтогоСумма))*100), "ЧЦ=2; ЧН=00");
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ13()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()
	
	Если НачалоДня(Дата) >= Дата(2012, 03, 13) Тогда
		ОбработкаПечати = Обработки.ПечатьТТН1208.ПолучитьФорму("Форма");
	Иначе
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	КонецЕсли;
	
	
	ОбработкаПечати.Документ = ЭтотОбъект.Ссылка;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Функция формирует табличный документ унифицированной формы М-4
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-4 (приходный ордер).
//
Функция ПечатьМ4()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
	Запрос.УстановитьПараметр("ВидПоступленияОрдер", Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаСоставления,
	|	Организация,
	|	Организация             КАК ЮрФизЛицо,
	|	СкладПолучатель         КАК МестоПриемки,
	|	СкладПолучатель.Представление КАК СкладНаименование,
	|	Подразделение,
	|	Подразделение  КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка       КАК Метка
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		СУММА(Количество)                    КАК КоличествоПринято,
	|		ХарактеристикаНоменклатуры           КАК Характеристика,
	|		СерияНоменклатуры                    КАК Серия,
	|		МИНИМУМ(НомерСтроки)                 КАК НомерСтроки,
	|		0                                    КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО 
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	Номенклатура.Код,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление  КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	Количество КАК Количество,
	|	NULL,
	|	NULL,
	|	НомерСтроки КАК НомерСтроки,
	|	2           КАК Метка
	|ИЗ
	|(ВЫБРАТЬ
	|	Номенклатура,
	|	СУММА(Количество) КАК Количество,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|) КАК ПеремещениеТоваров
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Макет = ПолучитьОбщийМакет("М4");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М4";

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок докмента
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаСоставления), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	// Инициализация итогов в документе
	ИтогоКоличествоПринято = 0;
	Ном = 0;

	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;	

	// Выводим многострочную часть докмента
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтрок");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);

		КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;

		ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
		                                          + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
		                                          + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
												  
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;

		Если НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда

			НомерСтраницы = НомерСтраницы + 1;
			ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
			ТабДокумент.Вывести(ПодвалСтрок);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;												  
												  
		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");

	ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьМ4()

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	КАК Номер,
	|	Дата	КАК ДатаДокумента,
	|	Дата	КАК ДатаСоставления,
	|	Организация,
	|	СкладОтправитель КАК Склад,
	|	СкладПолучатель КАК Подразделение
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
	|ИЗ 
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры	КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия,
	|		СУММА(Количество)           КАК Количество,
	|		МИНИМУМ(НомерСтроки) 		КАК НомерСтроки
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок     = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	Область.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.КодОКПО = СведенияОбОрганизации.КодПоОКПО;
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	
	ТабДокумент.Вывести(Область);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		ТабДокумент = ПечатьПеремещениеТоваров();
	ИначеЕсли ИмяМакета = "ТОРГ13" тогда
		// Унифицированная форма ТОРГ-13 (накладаня на внутрнее перемещение)
		ТабДокумент = ПечатьТОРГ13();
	ИначеЕсли ИмяМакета = "1Т"
		  ИЛИ ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "М4" тогда
		// Унифицированная форма М-4 (приходный ордер)
		ТабДокумент = ПечатьМ4();
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
	ИначеЕсли ИмяМакета = "БланкОтправитель" Или ИмяМакета = "БланкПолучатель" Тогда
		ТабДокумент = ПечатьБланк(ИмяМакета, НаПринтер);
	ИначеЕсли ИмяМакета = "Ценники" Тогда
		ТабДокумент = ПечатьЦенников();
	ИначеЕсли ИмяМакета = "Этикетки" Тогда
		ПечататьЭтикетки();
		Возврат;
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Истина);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	ИначеЕсли ИмяМакета = "ЗаписьВRFIDМетки" Тогда
		ЗаписатьВRFIDМетки();
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Ведомость", "Перемещение товаров");
	СтруктураМакетов.Вставить("ТОРГ13",             "ТОРГ-13 (Накладная на внутреннее перемещение)");
	СтруктураМакетов.Вставить("_1Т",                "Бланки ТТН");
	СтруктураМакетов.Вставить("М4",                 "М-4 (Приходный ордер)");
	СтруктураМакетов.Вставить("М11",                "M-11 (Требование-накладная)");
	СтруктураМакетов.Вставить("БланкОтправитель",   "Бланк товарного наполнения, склад отправитель");
	СтруктураМакетов.Вставить("БланкПолучатель",    "Бланк товарного наполнения, склад получатель");
	СтруктураМакетов.Вставить("Ценники",            "Ценники на товары");
	СтруктураМакетов.Вставить("Этикетки",           "Этикетки");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ", "Расход с розничных складов в ценах АТТ");
	СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");
	СтруктураМакетов.Вставить("ЗаписьВRFIDМетки", "Запись в RFID метки");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(СкладОтправитель, Организация, МассивНоменклатуры, , СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ,ТаблицаРезервовПоСериям);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество");

	ТоварыТабличнойЧасти=Товары.Выгрузить();

	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтруктураПоиска   = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);

		Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтруктураПоиска.Вставить("Цена",                   ИсходнаяСтрока.Цена);
		КонецЕсли;
		
		ЗаполнятьИзРезервов = Ложь;
		Если ТипЗнч(ИсходнаяСтрока.ДокументРезерва) = Тип("ДокументСсылка.ЗаказПокупателя") 
		   И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании
		   И СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда

			Если ИсходнаяСтрока.ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтруктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ДокументРезерва);
				ЗаполнятьИзРезервов = Истина;
			КонецЕсли;

		КонецЕсли;

		Если ЗаполнятьИзРезервов Тогда
			НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;

		СтрокаСПустойСерией = Неопределено;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры            = Строка.СерияНоменклатуры;
			НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
			НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
			НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
			НоваяСтрока.Количество                   = СписанноеКоличество; 
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество* ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;            

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                 = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения             = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.ЕдиницаИзмеренияМест         = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Коэффициент                  = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                         = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры   = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры            = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ДокументРезерва              = ИсходнаяСтрока.ДокументРезерва;
				НоваяСтрока.ВнутреннийЗаказ              = ИсходнаяСтрока.ВнутреннийЗаказ;
				НоваяСтрока.Качество                     = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" табличной части "Товары".
//
Процедура ЗаполнитьРозничнуюЦену() Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Для Каждого Строка Из Товары Цикл

		Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
			Строка.Цена = 0;
		ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
			Строка.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры,
			              ПолучательТипЦен, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		ИначеЕсли ОтправительНТТ Тогда
			Строка.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, СкладОтправитель,
			              мВалютаРегламентированногоУчета, Дата, Строка.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Производит заполнение поля "Цена" строки табличной части "Товары".
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части "Товары"
//
Процедура ЗаполнитьРозничнуюЦенуВСтроке(СтрокаТабличнойЧасти) Экспорт

	ОтправительНТТ   = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ    = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательТипЦен = ?((НЕ ОтправительНТТ) И ПолучательНТТ, СкладПолучатель.ТипЦенРозничнойТорговли, Неопределено);

	Если НЕ (ОтправительНТТ ИЛИ ПолучательНТТ) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли (НЕ ОтправительНТТ) И ПолучательНТТ Тогда
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		              ПолучательТипЦен, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
	ИначеЕсли ОтправительНТТ Тогда
		СтрокаТабличнойЧасти.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СкладОтправитель,
		              мВалютаРегламентированногоУчета, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, мВалютаРегламентированногоУчета, 1, 1);
	КонецЕсли;

КонецПроцедуры

// Выполняет необходимые действия при изменении реквизита ОтражатьВБухгалтерскомУчете
//
Процедура ПриИзмененииОтражатьВБухгалтерскомУчете() Экспорт

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // ПриИзмененииОрганизации()

// Выполняет необходимые действия при изменении реквизита ВнутреннийЗаказ
//
Процедура ПриИзмененииЗаказа() Экспорт

	СкладПолучатель = ВнутреннийЗаказ.Заказчик;

КонецПроцедуры // ПриИзмененииОрганизации()

// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;

	ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(ЭтотОбъект, ,,мОтражатьВРегламентированномУчете,истина);

КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого
//
Процедура ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт
	
	#Если Клиент Или ВнешнееСоединение Тогда
		
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);
	
	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	КонецЕсли;
	
	#КонецЕсли

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации      = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
		НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьНовыйДокумент()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 Или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СкладОтправитель, СкладПолучатель");

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И СтруктураШапкиДокумента.СложныйУчетНДС
		И Не СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС Тогда
		СтруктураОбязательныхПолей.Вставить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ 
	   И ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Перемещение с НТТ по ордерам не осуществляется!", Отказ, Заголовок);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ВнутреннийЗаказ)
	   И Не СтруктураШапкиДокумента.ВидВнутреннегоЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Перемещение можно осуществлять только по внутреннему заказу с видом заказа на склад!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ЕдиницаИзмерения");
	СтруктураОбязательныхПолей.Вставить("Качество");

	Если (    СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	      Или СтруктураШапкиДокумента.ВидСкладаПолучателя  = Перечисления.ВидыСкладов.НТТ)
	   И (Не мРазрешитьНулевыеЦеныВРознице) Тогда
		СтруктураОбязательныхПолей.Вставить("Цена");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

		
	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Вызовем общую процедуру для проверки проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

		
	ПроверитьСтрокиТабличнойЧасти("Возвратная тара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания реквизита ВнутреннийЗаказ
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	Для каждого Строка из ТЧ цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
			                               """ табличной части """ + ИмяТЧ + """: ";

		Если не ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДокументРезерва) Тогда
			Если Строка.ДокументРезерва<>Строка.ВнутреннийЗаказ Тогда
				//неправильный документ резерва
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан документ резерва, отличающийся от значения реквизита ""Внутренний заказ""" , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			//неправильный внутренний заказ
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""На склад"" " , Отказ, Заголовок);

		КонецЕсли;
		
		Если Строка.СкладВнутреннегоЗаказа <> СкладПолучатель Тогда
			// неправильный склад
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ, в котором склад-заказчик отличается от склада-получателя, указанного в шапке документа" , Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);

	// Отражение в партионном учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок);
		
		ТаблицаДвиженийПоСписаннымТоварам = Движения.СписанныеТовары.Выгрузить();
		Если ТаблицаДвиженийПоСписаннымТоварам.Количество()>0 Тогда
			
			// Зарегистрируем в пследовательности
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = Дата;

			// Проводить по партиям сразу нужно если установлен параметр
			// учетной политики СписыватьПартииПриПроведенииДокументов
			ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;

			Если ПроводитьПоПартиям Тогда
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, ТаблицаДвиженийПоСписаннымТоварам);

			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре,Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
			Если НЕ Отказ Тогда
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            СкладОтправитель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// Если мы перемещаем в НТТ, то надо сделать приход по специальному регистру
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ И НЕ Отказ Тогда
				
				// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПеремещениюВНТТ
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПеремещениюВНТТ, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",               СкладПолучатель);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПеремещения", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",           Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
						
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПеремещениюВНТТ, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда

					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
		 			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
					
			КонецЕсли;
			
		Иначе // не по ордерам

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Расход.
			Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
				
				Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				Иначе
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
					Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.Розничный Тогда
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладОтправитель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);
					КонецЕсли;
				КонецЕсли;
													
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Приход.
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				НаборДвижений = Движения.ТоварыВНТТ;
			ИначеЕсли СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
				НаборДвижений = Движения.ТоварыВРознице;
			Иначе
				НаборДвижений = Движения.ТоварыНаСкладах;
			КонецЕсли;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
												
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
											
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
				
			Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
			Иначе
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",  Справочники.Качество.Новый,  "ТаблицаПоТаре");
				Если СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.Розничный Тогда
					// ТОВАР
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
						
					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента["ТаблицаПоТоварам"], Отказ, Заголовок);
						
					// ТАРА
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, СкладПолучатель, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);

					// Проверка наличия продажных цен на приходуемый товар.
					УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицыДанныхДокумента["ТаблицаПоТаре"], Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
													
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
			ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТоварам);
			ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеСнятияСРезерва(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
			
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладОтправитель);
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					//приход резерва на склад-получатель
					ТаблицаПоТоварамРезерв = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТоварам);
					ТаблицаПоТареРезерв    = УдалитьСтрокиНеТребующиеРезервирования(ТаблицаПоТаре);
                    Если ТаблицаПоТоварамРезерв.Количество() > 0 ИЛИ ТаблицаПоТареРезерв.Количество() > 0 Тогда
						СтруктТаблицДокумента = Новый Структура;
						СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезерв);
						СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезерв);
						
						ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);

						ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
						ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				    КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
			// Для резервов по ордеру надо поменять склад в регистре "Товары к получению на склады"
			ТаблицаПоТоварамКПолучению = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТоварам);
			ТаблицаПоТареКПолучению    = ПодготовитьТаблицуТоваровКПолучению(ТаблицаПоТаре);
			
			Если ТаблицаПоТоварамКПолучению.Количество() > 0 ИЛИ ТаблицаПоТареКПолучению.Количество() > 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыКПолучениюНаСклады.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
				
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПолучению);
					СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареКПолучению);
												
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
											
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",        СкладОтправитель);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
													
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
					
					// То же в приход на новый склад.
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяТабЧасти",       "Товары");
		ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
		ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
		ДопПараметры.Вставить("ИмяРеквизитаЗаказ",  "ВнутреннийЗаказ");
		ДопПараметры.Вставить("ЗаказВШапке",        Ложь);
		ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
		
		ДопПараметры.Вставить("ИмяТабЧасти", "ВозвратнаяТара");
		ДопПараметры.Вставить("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ТабИсходная = ТаблицаПоТаре.Скопировать();
		
		ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Если ТабИсходная.Количество() > 0 Тогда
			УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)  // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ВнутреннийЗаказ.Заказчик = СкладПолучатель Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ВнутреннийЗаказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры),
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры



Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамИсходная, ТаблицаПоТареИсходная,Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	
	ТаблицаПоТоварам = ТаблицаПоТоварамИсходная.Скопировать();

	// Удалим строки с документами резерва по ордерам
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Движение = ТаблицаДвижений[ТаблицаПоТоварам.Индекс(Строка)];
		
		Если Строка.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			Движение.ЗаказПартии = Строка.ДокументРезерва;
			Движение.ЗаказСписания = Строка.ДокументРезерва;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "СписыватьТолькоПоЗаказу");
	
	// Недостающие поля.
	НомерСтрокиРегистра = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,    "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	ТаблицаПоТаре = ТаблицаПоТареИсходная.Скопировать();
	Пока Инд<ТаблицаПоТаре.Количество() Цикл
		Если ТаблицаПоТаре[Инд].РезервБезПраваПродажи=Истина Тогда
			ТаблицаПоТаре.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		НомерСтрокиРегистра = НомерСтрокиРегистра+1;
		Строка.НомерСтрокиДокумента = НомерСтрокиРегистра;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(СкладОтправитель,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(СкладПолучатель,"СкладПолучатель");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПеремещениеМеждуСкладами,"КодОперацииПартииТоваров");

	// Если Партионный учет по складам  в упр учете
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	// Если перемещение по ордерам, то партии не списываются документом перемещения
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете
	 ИЛИ НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов 
	 ИЛИ    СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыОрганизаций.
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       СкладОтправитель);
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	// А теперь приход на склад-получатель
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", СкладПолучатель);
				
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда

		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		СкладПолучатель    = Основание.Заказчик;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		ВнутреннийЗаказ    = Основание.Ссылка;
		Комментарий        = Основание.Комментарий;

		Склад = Неопределено;
		#Если Клиент Тогда
		Если НЕ ВвестиЗначение(Склад, "Выберите склад отправитель", Тип("СправочникСсылка.Склады")) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#КонецЕсли
		СкладОтправитель = Склад;

		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, Товары,         Склад, Дата);
		УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Основание, ВозвратнаяТара, Склад, Дата, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ЗаполнитьРозничнуюЦену();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Комментарий                  = Основание.Комментарий;

		#Если Клиент Тогда
		Если НЕ ВвестиЗначение(СкладПолучатель, "Выберите склад получатель", Тип("СправочникСсылка.Склады")) Тогда
			СкладПолучатель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#КонецЕсли

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			СкладОтправитель = Основание.СкладОрдер.Склад;
		Иначе
			СкладОтправитель = Основание.СкладОрдер;
		КонецЕсли;

		// Заполнение таб.части
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
            НоваяСтрока.ДокументРезерва = ТекСтрокаТовары.Заказ;

		КонецЦикла;

		Для Каждого ТекСтрокаТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Номенклатура    = ТекСтрокаТара.Номенклатура;
			НоваяСтрока.Количество      = ТекСтрокаТара.Количество;
			НоваяСтрока.ДокументРезерва = ТекСтрокаТара.Заказ;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
	 Или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда // В этом случае ДокументРезерва должен быть пуст.

		УстановитьКачество = Ложь;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл

			Если УстановитьКачество 
			   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Качество) Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;

		Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) Тогда
				СтрокаТаблицы.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	КонецЕсли;
	

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("Склад", СкладОтправитель);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,  "ВалютаУправленческогоУчета",                 "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,  "КурсВалютыУправленческогоУчета",             "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОтправитель", "ВидСклада",                                  "ВидСкладаОтправителя");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладПолучатель",  "ВидСклада",                                  "ВидСкладаПолучателя");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВнутреннийЗаказ",  "ВидЗаказа",                                  "ВидВнутреннегоЗаказа");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",      "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, Дата, , Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Коэффициент"                 , "Коэффициент");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                    , "Качество");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ДокументРезерва"             , "ДокументРезерва");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"             , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"       , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"       , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"       ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ВидОперации"                 ,  "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	Если СтруктураШапкиДокумента.ВидСкладаОтправителя = Перечисления.ВидыСкладов.НТТ
	 Или СтруктураШапкиДокумента.ВидСкладаПолучателя = Перечисления.ВидыСкладов.НТТ Тогда
		СтруктураПолей.Вставить("Цена", "Цена * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Коэффициент");
	Иначе
		СтруктураПолей.Вставить("Цена", "Цена");
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"       , "ДокументРезерва.ВидОперации");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"           , "ВнутреннийЗаказ");
	СтруктураПолей.Вставить("СкладВнутреннегоЗаказа"    , "ВнутреннийЗаказ.Заказчик");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"     , "ДокументРезерва.СкладГруппа");
	СтруктураПолей.Вставить("РезервБезПраваПродажи"     ,  "ДокументРезерва.БезПраваПродажи");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ДокументРезерва.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;
    //Амбер
	//Переместим товары в рамках регистра абмСрокиИСерии(!)
	  
	Для Каждого ТекСтрокаНоменклатура Из Товары Цикл
		Если не (ТекСтрокаНоменклатура.СерияСклада = "" и не значениеЗаполнено(ТекСтрокаНоменклатура.СрокГодности )) тогда
		// регистр амбСрокиИСерии Приход
		Движение 				= Движения.амбСрокиИСерии.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Период 		= Дата;
		Движение.Номенклатура 	= ТекСтрокаНоменклатура.Номенклатура;
		Движение.СерияНоменклатуры = ТекСтрокаНоменклатура.СерияСклада;
		Движение.СрокГодности 	= ТекСтрокаНоменклатура.СрокГодности;
		Движение.Количество 	= ТекСтрокаНоменклатура.Количество;
		Движение.Склад			= ?(СкладОтправитель.амбИспользоватьОбособленныйУчетСроковГодности, СкладОтправитель, Справочники.Склады.ПустаяСсылка());	

		Движение 				= Движения.амбСрокиИСерии.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= Дата;
		Движение.Номенклатура 	= ТекСтрокаНоменклатура.Номенклатура;
		Движение.СерияНоменклатуры = ТекСтрокаНоменклатура.СерияСклада;
		Движение.СрокГодности 	= ТекСтрокаНоменклатура.СрокГодности;
		Движение.Количество 	= ТекСтрокаНоменклатура.Количество;
		Движение.Склад			= ?(СкладПолучатель.амбИспользоватьОбособленныйУчетСроковГодности, СкладПолучатель, Справочники.Склады.ПустаяСсылка());
		     КонецЕсли;

		
	КонецЦикла;
    
	
	///Амбер
КонецПроцедуры // ОбработкаПроведения()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеСнятияСРезерва(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие резервирования.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервирования(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) 
		   ИЛИ (ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ) И СтрокаТаблицы.СкладВнутреннегоЗаказа = СкладПолучатель)
		   Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСнятияСРезерва()

// Функция удаляет из исходной таблицы строки не требующие снятия с резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция ПодготовитьТаблицуТоваровКПолучению(ТабТовары)

	ТаблицаПоТоварамКПолучению = ТабТовары.Скопировать();
	ТаблицаПоТоварамКПолучению.Колонки.Добавить("ДокументПолучения");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамКПолучению.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамКПолучению.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРезерва) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаПоТоварамКПолучению.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументПолучения = СтрокаТаблицы.ДокументРезерва;
			Если не СтрокаТаблицы.ДокументРезерва.БезПраваПРодажи Тогда
				СтрокаТаблицы.ДокументРезерва = неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамКПолучению;
	
КонецФункции // ПодготовитьТаблицуТоваровКПолучению()

// Функция удаляет из исходной таблицы строки не требующие резерва.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРезервПоЗаказ(ТабТовары)

	ТаблицаПоТоварамРезерв = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезерв.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезерв.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) 
		 ИЛИ (ТипЗнч(СтрокаТаблицы.ДокументРезерва) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		   И НЕ СтрокаТаблицы.РезервБезПраваПродажи) Тогда
			ТаблицаПоТоварамРезерв.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеРезервПоЗаказ()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

// Функция проверяет, есть ли НТТ среди склада-отправителя или склад-получателя.
//
// Возвращаемое значение:
//  Булево. Истина, если отправитель или получатель - НТТ.
//
Функция ЕстьНТТ() Экспорт

	ВидНТТ = Перечисления.ВидыСкладов.НТТ;

	Возврат (СкладОтправитель.ВидСклада = ВидНТТ Или СкладПолучатель.ВидСклада = ВидНТТ);

КонецФункции // ЕстьНТТ()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();

