Перем ТабИнтервалы;

#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

Процедура УстановитьТекстЗапроса()

	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОстатки.Организация,
	|	ВзаиморасчетыПоДокументамОстатки.Контрагент,
	|	ВзаиморасчетыПоДокументамОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументамОстатки.Сделка,
	|	ВзаиморасчетыПоДокументамОстатки.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток КАК ОстатокДолга0
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	|			&ДатаОстатков, 
	|			{(Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Сделка).* КАК Сделка}) КАК ВзаиморасчетыПоДокументамОстатки
	|ГДЕ
	|	ВзаиморасчетыПоДокументамОстатки.СуммаВзаиморасчетовОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыБезДокументовОстатки.Организация,
	|	ВзаиморасчетыБезДокументовОстатки.Контрагент,
	|	ВзаиморасчетыБезДокументовОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыБезДокументовОстатки.Сделка,
	|	НЕОПРЕДЕЛЕНО,
	|	ВзаиморасчетыБезДокументовОстатки.СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ДатаОстатков, 
	|			(НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом) {(Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Сделка).* КАК Сделка}) КАК ВзаиморасчетыБезДокументовОстатки
	|ГДЕ
	|	ВзаиморасчетыБезДокументовОстатки.СуммаВзаиморасчетовОстаток > 0";
	
	ТекстЗапросаПоОборотам =
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоДокументамОбороты.Организация,
	|	ВзаиморасчетыПоДокументамОбороты.Контрагент,
	|	ВзаиморасчетыПоДокументамОбороты.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДокументамОбороты.Сделка,
	|	ВзаиморасчетыПоДокументамОбороты.ДокументРасчетовСКонтрагентом,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументамОбороты.СуммаВзаиморасчетовПриход > 0
	|			ТОГДА ВзаиморасчетыПоДокументамОбороты.СуммаВзаиморасчетовПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыПоДокументамОбороты.СуммаВзаиморасчетовРасход < 0
	|			ТОГДА ВзаиморасчетыПоДокументамОбороты.СуммаВзаиморасчетовРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга1
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала1,
	|			,
	|			{(Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Сделка).* КАК Сделка}) КАК ВзаиморасчетыПоДокументамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыБезДокументовОбороты.Организация,
	|	ВзаиморасчетыБезДокументовОбороты.Контрагент,
	|	ВзаиморасчетыБезДокументовОбороты.ДоговорКонтрагента,
	|	ВзаиморасчетыБезДокументовОбороты.Сделка,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыБезДокументовОбороты.СуммаВзаиморасчетовПриход > 0
	|			ТОГДА ВзаиморасчетыБезДокументовОбороты.СуммаВзаиморасчетовПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыБезДокументовОбороты.СуммаВзаиморасчетовРасход < 0
	|			ТОГДА ВзаиморасчетыБезДокументовОбороты.СуммаВзаиморасчетовРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала1,
	|			,
	|			(НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом) 
	|			{(Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Сделка).* КАК Сделка}) КАК ВзаиморасчетыБезДокументовОбороты";
	
	КолИнтервалов = ТабИнтервалы.Количество();
	
	ТекстЗапросаОстатокИОбороты = 
	"ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.Контрагент,
	|	Остатки.ДоговорКонтрагента,
	|	Остатки.Сделка,
	|	Остатки.ДокументРасчетовСКонтрагентом,
	|	Остатки.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов - 1 Цикл
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + ",
		|	ЕСТЬNULL(Обороты" + Ном + ".УвеличениеДолга" + Ном + ", 0) КАК УвеличениеДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
	|ИЗ
	|	(" + ТекстЗапросаПоОстаткам + ") КАК Остатки";
	Для Ном = 1 По КолИнтервалов - 1 Цикл
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотам, "УвеличениеДолга1", "УвеличениеДолга" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&НачалоИнтервала1", "&НачалоИнтервала" + Ном);
		ТекстЗапросаПоОборотамИнтервала = СтрЗаменить(ТекстЗапросаПоОборотамИнтервала, "&КонецИнтервала1", "&КонецИнтервала" + Ном);
		ОборотыНом = "Обороты" + Ном;
		ТекстЗапросаОстатокИОбороты = ТекстЗапросаОстатокИОбороты + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(" + ТекстЗапросаПоОборотамИнтервала + ") КАК " + ОборотыНом + "
		|	ПО
		|		Остатки.Организация = " + ОборотыНом + ".Организация
		|			И Остатки.Контрагент = " + ОборотыНом + ".Контрагент
		|			И Остатки.ДоговорКонтрагента = " + ОборотыНом + ".ДоговорКонтрагента
		|			И Остатки.Сделка = " + ОборотыНом + ".Сделка
		|			И Остатки.ДокументРасчетовСКонтрагентом = " + ОборотыНом + ".ДокументРасчетовСКонтрагентом";
	КонецЦикла;
	
	ТекстЗапросаОстаткиПоПериодам =
	"ВЫБРАТЬ
	|	ОстатокИОбороты.Организация,
	|	ОстатокИОбороты.Контрагент,
	|	ОстатокИОбороты.ДоговорКонтрагента,
	|	ОстатокИОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОстатокИОбороты.Сделка,
	|	ОстатокИОбороты.ДокументРасчетовСКонтрагентом,
	|	ОстатокИОбороты.ОстатокДолга0";
	Для Ном = 1 По КолИнтервалов - 1 Цикл
		ВыражениеОстатка = "ОстатокИОбороты.ОстатокДолга0";
		Для й = 1 По Ном Цикл
			ВыражениеОстатка = ВыражениеОстатка + " - ОстатокИОбороты.УвеличениеДолга" + й;
		КонецЦикла;
		ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + ",
		|	ВЫБОР
		|		КОГДА " + ВыражениеОстатка + " > 0
		|			ТОГДА " + ВыражениеОстатка + "
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокДолга" + Ном;
	КонецЦикла;
	ТекстЗапросаОстаткиПоПериодам = ТекстЗапросаОстаткиПоПериодам + "
	|ИЗ
	|	(" + ТекстЗапросаОстатокИОбороты + ") КАК ОстатокИОбороты";
	
	ТекстПоказателей = "
	|	ОстаткиПоПериодам.ОстатокДолга0 КАК ОстатокДолга";
	Для Ном = 1 По КолИнтервалов - 1 Цикл
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + (Ном - 1) + " - ОстаткиПоПериодам.ОстатокДолга" + Ном + " КАК ОстатокПериода" + Ном;
	КонецЦикла;
	Если КолИнтервалов > 0 Тогда
		ТекстПоказателей = ТекстПоказателей + ",
		|	ОстаткиПоПериодам.ОстатокДолга" + (КолИнтервалов - 1) + " КАК ОстатокПериода" + КолИнтервалов;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиПоПериодам.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиПоПериодам.Организация) КАК ОрганизацияПредставление,
	|	ОстаткиПоПериодам.Контрагент КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиПоПериодам.Контрагент) КАК КонтрагентПредставление,
	|	ОстаткиПоПериодам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиПоПериодам.ДоговорКонтрагента) КАК ДоговорКонтрагентаПредставление,
	|	ОстаткиПоПериодам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиПоПериодам.ДоговорКонтрагента.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетовПредставление,
	|	ОстаткиПоПериодам.Сделка КАК Сделка,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиПоПериодам.Сделка) КАК СделкаПредставление,
	|	ОстаткиПоПериодам.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиПоПериодам.ДокументРасчетовСКонтрагентом) КАК ДокументРасчетовСКонтрагентомПредставление,"
	+ ТекстПоказателей + "
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	|{ВЫБРАТЬ
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	ВалютаВзаиморасчетов.*,
	|	Сделка.*,
	|	ДокументРасчетовСКонтрагентом.*,"
	+ ТекстПоказателей + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|ИЗ
	|	(" + ТекстЗапросаОстаткиПоПериодам + ") КАК ОстаткиПоПериодам
	|	//СОЕДИНЕНИЯ
	|{ГДЕ"
	+ ТекстПоказателей + "
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	Сделка.*,
	|	ДокументРасчетовСКонтрагентом.*,
	|	ВалютаВзаиморасчетов.*,
	|	ОстатокДолга";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	ОстатокПериода" + Ном;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|ИТОГИ
	|	СУММА(ОстатокДолга)";
	Для Ном = 1 По КолИнтервалов Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	СУММА(ОстатокПериода" + Ном + ")";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	Контрагент.*,
	|	Сделка.*,
	|	ДокументРасчетовСКонтрагентом.*,
	|	ВалютаВзаиморасчетов.*
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";

	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ОстаткиПоПериодам.Контрагент", "Контрагент", "Контрагент", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ОстаткиПоПериодам.ДоговорКонтрагента", "ДоговорКонтрагента", "Договор контрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ОстаткиПоПериодам.Организация", "Организация", "Организация", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);

		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;

КонецПроцедуры

Процедура УстановитьИнтервалыЗапроса()

	ТабИнтервалы = Новый ТаблицаЗначений;
	ТабИнтервалы.Колонки.Добавить("ИмяИнтервала");
	ТабИнтервалы.Колонки.Добавить("НомерИнтервала");
	ТабИнтервалы.Колонки.Добавить("НачалоИнтервала");
	ТабИнтервалы.Колонки.Добавить("КонецИнтервала");
	
	Для каждого СтрокаТабЧасти из Интервал.ТабличнаяЧасть Цикл
		НоваяСтрока = ТабИнтервалы.Добавить();
		НоваяСтрока.ИмяИнтервала    = СтрокаТабЧасти.Подпись;
		НоваяСтрока.НомерИнтервала  = СтрокаТабЧасти.НомерСтроки;
		НоваяСтрока.НачалоИнтервала = НачалоДня(УниверсальныйОтчет.ДатаКон) - СтрокаТабЧасти.НачалоИнтервала * 60 * 60 * 24;
		НоваяСтрока.КонецИнтервала  = КонецДня(УниверсальныйОтчет.ДатаКон)  - СтрокаТабЧасти.КонецИнтервала  * 60 * 60 * 24;
		
	КонецЦикла;
	
	ПараметрыПостроителя = УниверсальныйОтчет.ПостроительОтчета.Параметры;
	ПараметрыПостроителя.Вставить("ДатаОстатков", КонецДня(УниверсальныйОтчет.ДатаКон) + 1);
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		ПараметрыПостроителя.Вставить("НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.НачалоИнтервала);
		ПараметрыПостроителя.Вставить("КонецИнтервала"  + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.КонецИнтервала);
	КонецЦикла;
	
КонецПроцедуры

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	
	УниверсальныйОтчет.ДатаКон = ?(ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон), УниверсальныйОтчет.ДатаКон, КонецДня(РабочаяДата));
	
	УстановитьИнтервалыЗапроса();
	
	УстановитьТекстЗапроса();
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);

	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументРасчетовСКонтрагентом", "Документ расчетов с контрагентом");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОстатокДолга", "Остаток долга контрагента");
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		Ном = СтрокаИнтервала.НомерИнтервала;
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОстатокПериода" + Ном, СтрокаИнтервала.ИмяИнтервала);
	КонецЦикла;
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("ОстатокДолга", "Остаток долга контрагента", Истина, "ЧЦ=15; ЧДЦ=2", , );
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		Ном = СтрокаИнтервала.НомерИнтервала;
		УниверсальныйОтчет.ДобавитьПоказатель("ОстатокПериода" + Ном, СтрокаИнтервала.ИмяИнтервала, Истина, "ЧЦ=15; ЧДЦ=2", "ПоПериодам", "В т.ч. по срокам возникновения долга:");
	КонецЦикла;
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ВалютаВзаиморасчетов");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");

	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагента");
	УниверсальныйОтчет.ДобавитьОтбор("ОстатокДолга", , ВидСравнения.Больше, 0, , , Ложь);
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	УниверсальныйОтчет.УстановитьСвязьПолей("ВалютаВзаиморасчетов", "ДоговорКонтрагента");
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;

	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВалютаВзаиморасчетов");
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Интервал) Тогда
		Сообщить("Отчет может быть сформирован только при выбранном интервале.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// Перед формированием отчета можно установить необходимые параметры универсального отчета.
	
	УстановитьИнтервалыЗапроса();
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0

УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
