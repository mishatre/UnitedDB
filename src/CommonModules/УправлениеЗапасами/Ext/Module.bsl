////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ ТЕКСТЫ СООБЩЕНИЙ ОБ ОШИБКАХ ПРОВЕДЕНИЯ

// Формирует стандартный текст сообщения при ошибках проведения, когда не хватает остатка в регистре.
//
// Параметры: 
//  ТекстСообщения - Исходный текст выводимого сообщения.
//  Остаток        - Текущий остаток ресурса в регистре.
//  Требуется      - Требуемый остаток ресурса в регистре.
//  ЕИ             - Единица измерения ресурса (единица измерения, валюта и т.д.).
//  Отказ          - Флаг отказа в проведении документа,
//  Заголовок      - Заголовок начала серии сообщений об ошибках проведения (не обязательный).
//
Процедура ОшибкаНетОстатка(ТекстСообщения, Остаток, Требуется, ЕИ, Отказ, Заголовок="") Экспорт

	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + Символы.ПС + Символы.Таб +
					   "Не хватает " + ?(Остаток > 0 , Требуется - Остаток, Требуется) + " " + ЕИ +
					   "; Остаток " + Остаток + " " + ЕИ +
					   "; Требуется " + Требуется + " " + ЕИ, Отказ, Заголовок);

КонецПроцедуры // ОшибкаНетОстатка()

// Формирует строку представления номенклатуры с учетом характеристики и серий.
//
// Параметры
//  НоменклатураПредставление   - представление номенклатуры.
//  ХарактеристикаПредставление - представление характеристики.
//  СерияПредставление          - представление серии.
//
// Возвращаемое значение
//  Строка с представлением номенклатуры.
//
Функция ПредставлениеНоменклатуры(НоменклатураПредставление, ХарактеристикаПредставление = "", 
	                                 СерияПредставление = "") Экспорт

	СтрПредставление = """" + СокрЛП(НоменклатураПредставление) + """";

	Если ЗначениеЗаполнено(ХарактеристикаПредставление)Тогда

		СтрПредставление = СтрПредставление + " / """ + СокрЛП(ХарактеристикаПредставление) + """";

	КонецЕсли;

	Если ЗначениеЗаполнено(СерияПредставление) Тогда

		СтрПредставление = СтрПредставление + " (""" + СокрЛП(СерияПредставление) + """)";

	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции // ПредставлениеНоменклатуры()

// Заполняет структуру полей стандартными для табличной части "Товары" колонками.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруПолейТовары() Экспорт

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям" , "Номенклатура.ВестиПартионныйУчетПоСериям");

	Возврат СтруктураПолей;

КонецФункции // СформироватьСтруктуруПолейТовары()

// Заполняет структуру полей стандартными для табличной части "Товары" колонками,
// обязательными к заполнению в документах.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруОбязательныхПолейТовары() Экспорт

	Возврат Новый Структура("Номенклатура, Количество, Сумма");
	
КонецФункции // СформироватьСтруктуруОбязательныхПолейТовары()

// Заполняет структуру полей стандартными для табличной части "Возвратная тара" колонками.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруПолейТара() Экспорт

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");

	Возврат СтруктураПолей;

КонецФункции // СформироватьСтруктуруПолейТара()

// Заполняет структуру полей стандартными для табличной части "Возвратная тара" колонками,
// обязательными к заполнению в документах.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированная структура.
//
Функция СформироватьСтруктуруОбязательныхПолейТара() Экспорт

	Возврат Новый Структура("Номенклатура, Количество, Сумма");

КонецФункции // СформироватьСтруктуруОбязательныхПолейТара()

// Формирует запрос на дополнительные параметры, нужные при проведении документа.
//
// Параметры: 
//  ДокументОбъект                 - объект проводимого документа, 
//  ДеревоПолейЗапросаПоШапке      - дерево значений, содержащего имена полей, 
//                                   которые нужно заполнить в запросе по шапке документа.
//  СтруктураШапкиДокумента        - структура, содержащая значения реквизитов, относящихся к шапке документа,
//                                   необходимых для его проведения.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Дополненная по результату запроса структура СтруктураШапкиДокумента.
//
Функция СформироватьЗапросПоДеревуПолей(ДокументОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета)  Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ";

	СтрокиЗапроса           = "";
	ТаблицыЗапроса          = "";
	НуженКурсВалютыУпрУчета = Ложь;
	ЕстьУчетнаяПолитика     = Ложь;
	
	ДокументОбъектМетаданные = ДокументОбъект.Метаданные();
	
	
	// Реквизиты договора взаиморасчетов.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентов", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагента." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты договора взаиморасчетов регл.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентовРегл", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагентаРегл." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты организации.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Организации", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Организация." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты сделки.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Сделка", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		Если ЗначениеЗаполнено(ДокументОбъект.Сделка) Тогда
			СделкаМетаданные = ДокументОбъект.Сделка.Метаданные();
		Иначе
			СделкаМетаданные = Неопределено;
		КонецЕсли;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + ?(СделкаМетаданные = Неопределено ИЛИ СделкаМетаданные.Реквизиты.Найти(СокрЛП(СтрокаПоля.Поле)) = Неопределено,
								"NULL",
								"ВЫРАЗИТЬ(Док.Сделка КАК Документ." + СделкаМетаданные.Имя + ")." + СокрЛП(СтрокаПоля.Поле)) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты расчетного документа.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("РасчетныйДокумент", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		Если ЗначениеЗаполнено(ДокументОбъект.РасчетныйДокумент) Тогда
			СделкаМетаданные = ДокументОбъект.РасчетныйДокумент.Метаданные();
		Иначе
			СделкаМетаданные = Неопределено;
		КонецЕсли;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + ?(СделкаМетаданные = Неопределено, "NULL", "ВЫРАЗИТЬ(Док.РасчетныйДокумент КАК Документ." + СделкаМетаданные.Имя + ")." + СокрЛП(СтрокаПоля.Поле)) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Склад", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Склад." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-группы.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладГруппа", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладГруппа." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОтправитель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОтправитель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПеремещения", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПеремещения." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПередачи", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПередачи." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-получателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладПолучатель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладПолучатель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-ордера
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОрдер", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОрдер." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Заказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Заказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ВнутреннийЗаказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ВнутреннийЗаказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа покупателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказПокупателя", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПокупателя." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа поставщику
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказПоставщику", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПоставщику." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты номенклатуры
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Номенклатура", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Номенклатура." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты документа основания
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументОснование", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументОснование." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Пустые реквизиты.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("NULL", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "NULL" +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Константы.
	ТаблицыЗапроса = ТаблицыЗапроса + ", Константы";

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Константы", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			Если СтрокаПоля.Поле = "КурсВалютыУправленческогоУчета" Тогда

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Курс КАК КурсВалютыУправленческогоУчета";
			
				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыУправленческогоУчета";
			
				НуженКурсВалютыУпрУчета = Истина;

			Иначе

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "Константы." + СокрЛП(СтрокаПоля.Поле) +
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("УчетнаяПолитика", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда
		ЕстьУчетнаяПолитика = Истина;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
			Символы.Таб + "УчетнаяПолитикаСрезПоследних." + СокрЛП(СтрокаПоля.Поле) +
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
		КонецЦикла;
			
	КонецЕсли;

	// Надо добавить константу ВалютаРегламнтированногоУчета
	СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
	Символы.Таб + "Константы.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";

	СтрокаЗапросаКурсВалютыУпрУчета = Символы.ПС + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента,) КАК КурсыВалютСрезПоследних
	|	ПО Константы.ВалютаУправленческогоУчета = КурсыВалютСрезПоследних.Валюта";

	СтрокаРегистраУчетнойПолитики = Символы.ПС + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаДокумента,) КАК УчетнаяПолитикаСрезПоследних
	|	ПО Истина";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ " + Сред(СтрокиЗапроса, 2) + "
	                | ИЗ 
	                |      Документ." + ДокументОбъектМетаданные.Имя + " КАК Док "+ ТаблицыЗапроса +
	                ?(НуженКурсВалютыУпрУчета, СтрокаЗапросаКурсВалютыУпрУчета,"") + Символы.ПС + 
	                ?(ЕстьУчетнаяПолитика, СтрокаРегистраУчетнойПолитики,"") + Символы.ПС + "
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента"  , ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации", ДокументОбъектМетаданные), КонецМесяца(ДокументОбъект.ПериодРегистрации), ДокументОбъект.Дата));

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Для Каждого Колонка из ТаблицаЗапроса.Колонки Цикл
		Если ТаблицаЗапроса.Количество() = 0 Тогда
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, Неопределено);
		Иначе
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, ТаблицаЗапроса[0][Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", ДокументОбъектМетаданные) Тогда
			СтруктураШапкиДокумента.Вставить("КурсДокумента", 		ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
			СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьЗапросПоДеревуПолей()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
					                   "Услуг здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Номенклатура.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
					                   "Услуг здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетУслуг()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.Номенклатура.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетУслуг)

// Проверяет, что в табличной части нет наборов-пакетов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетНаборов(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И  СтрокаТаблицы.Набор Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-пакет. " +
					                   "Наборов-пакетов здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И  СтрокаТаблицы.Номенклатура.Набор Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-пакет. " +
					                   "Наборов-пакетов здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетНаборов()

// Проверяет, что в табличной части нет комплектов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак комплекта
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетКомплектов(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		   И  СтрокаТаблицы.Комплект Тогда

				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-комплект. " +
				                   "Наборов-комплектов здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетКомплектов()

// Проверяет, что в размещение, указанное в табиличной части, не на складе НТТ.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоСкладНеНТТ(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок, ИмяВидаСкладаРазмещения = "ВидСкладаРазмещения") Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если СтрокаТаблицы[ИмяВидаСкладаРазмещения] = Перечисления.ВидыСкладов.НТТ Тогда

				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится размещение по НТТ. " +
				                   "Такого быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоСкладНеНТТ()

// Проверяет, что в табличной части нет номенклатуры, учет которой ведется по характеристикам.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак учет по характеристикам
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетНоменклатурыСХарактеристиками(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.ВестиУчетПоХарактеристикам Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, по которой ведется учет по характеристикам. " +
					                   "По возвратной таре не ведется учет по характеристикам!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Номенклатура.ВестиУчетПоХарактеристикам Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, по которой ведется учет по характеристикам. " +
					                   "По возвратной таре не ведется учет по характеристикам!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетНоменклатурыСХарактеристиками()

// .Корректирует структуру обязательных полей в зависимости от настроек пользователей.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  ВидСклада                  - вид склада,
//  СтруктураОбязательныхПолей - корректируемая структура обязательных полей.
//
Процедура КорректировкаСтруктурыОбязательныхПолей(ДокументОбъект, ИмяТабличнойЧасти, ВидСклада = Неопределено, СтруктураОбязательныхПолей) Экспорт

	РазрешитьНулевыеСуммыИЦены = Ложь;
	Если ВидСклада = Перечисления.ВидыСкладов.Оптовый
	 Или НЕ ЗначениеЗаполнено(ВидСклада) Тогда
		РазрешитьНулевыеСуммыИЦены = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();
	ИначеЕсли (ВидСклада = Перечисления.ВидыСкладов.Розничный) Или (ВидСклада = Перечисления.ВидыСкладов.НТТ) Тогда
		РазрешитьНулевыеСуммыИЦены = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
	КонецЕсли;

	Если РазрешитьНулевыеСуммыИЦены Тогда
		Если СтруктураОбязательныхПолей.Свойство("Сумма") Тогда
			СтруктураОбязательныхПолей.Удалить("Сумма");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("Цена") Тогда
			СтруктураОбязательныхПолей.Удалить("Цена");
		КонецЕсли;
		Если СтруктураОбязательныхПолей.Свойство("ЦенаВРознице") Тогда
			СтруктураОбязательныхПолей.Удалить("ЦенаВРознице");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КорректировкаСтруктурыОбязательныхПолей()

// Формирует список остатков по сериям по регистрам "Товары организаций" и "Товары на складах", с фильтром
// по переданным значениям параметров
//
// Параметры:
//	Организация         - организация, по которой определяются остатки по сериям
//  Номенклатура        - номенклатура, по которой определяются остатки
//  Единица		        - единица, в которой	возварщаются остатки
//  СтранаПроисхождения - если не задана, то по всем
//	Комиссионер	        - комиссионер, если не задан, то по пустому
//
Функция ПолучитьСписокТекущихСерийНоменклатуры(Организация, Номенклатура, ХарактеристикаНоменклатуры, Единица, Комиссионер = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Если Комиссионер = Неопределено Тогда
		Запрос.УстановитьПараметр("Комиссионер", Справочники.Контрагенты.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Комиссионер", Комиссионер);
	КонецЕсли;
	
	СписокСерий = Новый СписокЗначений;

	Запрос.УстановитьПараметр("КоэффициентЕдиницы"        , Единица.Коэффициент);
	Запрос.УстановитьПараметр("КоэффициентЕдиницыХранения", Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
	|         Номенклатура               = &Номенклатура
	|       И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ТоварыНаСкладахОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
	|			Организация                = &Организация
	|         И Номенклатура               = &Номенклатура
	|         И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|		  И Комиссионер                = &Комиссионер
	|   ) КАК ТоварыОрганизацийОстатки 
	|ИТОГИ МИНИМУМ(Остаток) ПО СерияНоменклатуры";

	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		СписокСерий.Добавить(Выборка.СерияНоменклатуры, СокрЛП(Выборка.СерияНоменклатуры) 
		+ " (" + Формат(Выборка.Остаток, "ЧЦ=15;ЧДЦ=3") + " " + СокрЛП(Единица) + ")");	
	КонецЦикла;

	Возврат СписокСерий;
	
КонецФункции // ПолучитьСписокТекущихСерийНоменклатуры()

// Возвращает таблицу остатков по сериям на заданом складе в заданной организации, для склада с видом НТТ.
//
// Параметры:
//  СкладДоговор       - склад, на котором получаются остатки,
//  МассивНоменклатуры - массив, содержащий номенклатуру, по которой необходимо получить остатки
//
Функция ПолучитьТаблицуОстатковПоСериямДляНТТ(СкладДоговор, МассивНоменклатуры,КонДата)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Новый",        Справочники.Качество.Новый);
	Если ТипЗнч(СкладДоговор) = Тип("Массив") Тогда
		МассивСклады = СкладДоговор;
	Иначе
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(СкладДоговор);
	КонецЕсли;
	Запрос.УстановитьПараметр("Склад", МассивСклады);
	Запрос.УстановитьПараметр("КонДата",КонДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Номенклатура                                     КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры                                КАК СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры.СрокГодности                   КАК СрокГодности,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры.Код                            КАК СерияНоменклатурыКод,
	|	&Новый                                                                  КАК Качество,
	|	ТоварыНаСкладахОстатки.Склад                                            КАК Склад,
	|	ТоварыНаСкладахОстатки.ЦенаВРознице                                     КАК Цена,
	|	Сумма(ТоварыНаСкладахОстатки.КоличествоОстаток)                         КАК Остаток, 
	|	0                                                                       КАК ОстатокКПередаче
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ.Остатки(&КонДата, Склад В (&Склад)
	|	                                       И Номенклатура В (&Номенклатура)) ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.ЦенаВРознице
	|";

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПоСкладам = РезультатЗапроса.Выгрузить();
	ТаблицаПоСкладам.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, СрокГодности, СерияНоменклатурыКод");

	Возврат ТаблицаПоСкладам;

КонецФункции //ПолучитьТаблицуОстатковПоСериямДляНТТ()

// Возвращает таблицу остатков по сериям на заданном складе в заданной организации.
// Используется при запылении по кнопке "Заполнить и провести" в документах, списывающих товары.
//
// Параметры:
//  СкладДоговор            - склад или комиссионер, по которому получаются остатки,
//  Организация             - организация, по которой получаются остатки,
//  МассивНоменклатуры      - массив, содержащий номенклатуру, по которой необходимо получить остатки,
//  Комиссионер             - необязательный параметр, если не передан, то нужны остатки по товарам на складах,
//                            если передан, то нужны остатки переданных этому комиссионеру товаров,
//  НТТ                     - необязательный параметр, если истина, то остатки нужны по НТТ
//  ТаблицаРезервовПоСериям - необязательный параметр, если предано, то сюда возвращается 
//                            таблица значений, заполненная сериями, которые зарезервированы под заказ покупателя.
//  КонДата 				- дата, на которую необходимо получить остатки
// Возвращаемое значение:
//  Таблица значений, содержащая остатки товаров по сериям.
//
Функция ПолучитьТаблицуОстатковПоСериям(СкладДоговор, Организация, МассивНоменклатуры, Комиссионер = Неопределено, НТТ = Ложь, ТаблицаРезервовПоСериям = Неопределено,КонДата=неопределено) Экспорт

	Если НТТ Тогда
		Возврат ПолучитьТаблицуОстатковПоСериямДляНТТ(СкладДоговор, МассивНоменклатуры,?(КонДата=неопределено,Дата("00010101000000"),КонДата));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Новый",        Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("КонДата",      ?(КонДата=неопределено,Дата("00010101000000"),КонДата));
	
	Если Комиссионер = Неопределено Тогда
		Если ТипЗнч(СкладДоговор) = Тип("Массив") Тогда
			МассивСклады = СкладДоговор;
		Иначе
			МассивСклады = Новый Массив;
			МассивСклады.Добавить(СкладДоговор);
		КонецЕсли;
		
		ИмяРегистра = "ТоварыНаСкладах";
		
		Запрос.УстановитьПараметр("Комиссионер",        Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("Склад",              МассивСклады);
	Иначе
		ИмяРегистра = "ТоварыПереданные";
		Запрос.УстановитьПараметр("Комиссионер",        Комиссионер);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СкладДоговор);
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("Склад",              МассивСклады);
	КонецЕсли;
	МожноПревышатьОстатокПоОрганизации=УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация);
	КонтролироватьОстатокПоОрганизацииПоСкладу = ложь;
	Отказ = ложь;
	СтруктураУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ТекущаяДата(), Отказ, , "Упр"); 
	Если не Отказ Тогда
		КонтролироватьОстатокПоОрганизацииПоСкладу = СтруктураУП.ВестиУчетТоваровОрганизацийВРазрезеСкладов;
	КонецЕсли;

	ТекстЗапросаПоОрганизации = "
	|ВЫБРАТЬ 
	|   истина                                                         КАК флОстатокОрганизации,
	|	ТоварыОрганизацийОстатки.Номенклатура                          КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры            КАК ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры                     КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыОрганизацийОстатки.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) ТОГДА
	|			Истина
	|   	ИНАЧЕ
	|			Ложь
	|	КОНЕЦ                                                          КАК ПустаяСерия,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры.СрокГодности        КАК СрокГодности,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры.Код                 КАК СерияНоменклатурыКод,
	|	ТоварыОрганизацийОстатки.Качество                              КАК Качество,
	|	ТоварыОрганизацийОстатки.Склад                                 КАК Склад,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток                     КАК Остаток,
	|	ТоварыКПередачеОрганизацийОрганизацийОстатки.КоличествоОстаток КАК ОстатокКПередаче
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&КонДата,
	|"+ ?(МожноПревышатьОстатокПоОрганизации, "", "		    Организация                = &Организация
	|		  И") + " Номенклатура               В (&Номенклатура)
	|		  И Комиссионер                = &Комиссионер
	|	  	  "+?(КонтролироватьОстатокПоОрганизацииПоСкладу,"И Склад В (&Склад)","")+"
	|	) КАК ТоварыОрганизацийОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПередачеОрганизаций.Остатки(&КонДата,
	|"+ ?(МожноПревышатьОстатокПоОрганизации, "", "		    Организация                = &Организация
	|		  И") + " Номенклатура               В (&Номенклатура)
	|	  	  "+?(КонтролироватьОстатокПоОрганизацииПоСкладу,"И Склад В (&Склад)","")+"
	|	) КАК ТоварыКПередачеОрганизацийОрганизацийОстатки
	|ПО
	|	ТоварыОрганизацийОстатки.Номенклатура                 = ТоварыКПередачеОрганизацийОрганизацийОстатки.Номенклатура
	|	И ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеОрганизацийОрганизацийОстатки.ХарактеристикаНоменклатуры
	|	И ТоварыОрганизацийОстатки.СерияНоменклатуры          = ТоварыКПередачеОрганизацийОрганизацийОстатки.СерияНоменклатуры
	|	И ТоварыОрганизацийОстатки.Организация                = ТоварыКПередачеОрганизацийОрганизацийОстатки.Организация
	|	И ТоварыОрганизацийОстатки.Качество                   = ТоварыКПередачеОрганизацийОрганизацийОстатки.Качество";

	Если Комиссионер = Неопределено Тогда
		Если ИмяРегистра = "ТоварыНаСкладах" Тогда
			ТекстЗапросаСклады = "
			|(ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.Номенклатура,
			|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
			|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
			|	ТоварыНаСкладахОстатки.Качество,
			|	ТоварыНаСкладахОстатки.Склад,
			|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыНаСкладах.Номенклатура,
			|		ТоварыНаСкладах.ХарактеристикаНоменклатуры,
			|		ТоварыНаСкладах.СерияНоменклатуры,
			|		ТоварыНаСкладах.Качество,
			|		ТоварыНаСкладах.Склад,
			|		ТоварыНаСкладах.КоличествоОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(&КонДата, Склад В (&Склад)
			|		   И Номенклатура В (&Номенклатура)) ТоварыНаСкладах
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		ТоварыВРознице.Номенклатура,
			|		ТоварыВРознице.ХарактеристикаНоменклатуры,
			|		ТоварыВРознице.СерияНоменклатуры,
			|		ТоварыВРознице.Качество,
			|		ТоварыВРознице.Склад,
			|		ТоварыВРознице.КоличествоОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыВРознице.Остатки(&КонДата, Склад В (&Склад)
			|		   И Номенклатура В (&Номенклатура)) ТоварыВРознице
			|	) КАК ТоварыНаСкладахОстатки
			|	СГРУППИРОВАТЬ ПО
			|		ТоварыНаСкладахОстатки.Номенклатура,
			|		ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
			|		ТоварыНаСкладахОстатки.СерияНоменклатуры,
			|		ТоварыНаСкладахОстатки.Качество,
			|		ТоварыНаСкладахОстатки.Склад
			|) ТоварыНаСкладахОстатки
			|";
		Иначе
			ТекстЗапросаСклады = "
			|	РегистрНакопления.ТоварыПереданные.Остатки(&КонДата, Номенклатура В (&Номенклатура)) КАК ТоварыНаСкладахОстатки
			|";
		КонецЕсли;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.флОстатокОрганизации 							 КАК флОстатокОрганизации,
		|	ВложенныйЗапрос.Номенклатура                                     КАК Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры                                КАК СерияНоменклатуры,
		|	ВложенныйЗапрос.ПустаяСерия                                      КАК ПустаяСерия,
		|	ВложенныйЗапрос.СерияНоменклатуры.СрокГодности                   КАК СрокГодности,
		|	ВложенныйЗапрос.СерияНоменклатуры.Код                            КАК СерияНоменклатурыКод,
		|	ВложенныйЗапрос.Качество                                         КАК Качество,
		|	ВложенныйЗапрос.Склад                                            КАК Склад,
		|	МИНИМУМ(ВложенныйЗапрос.Остаток)                                 КАК Остаток," 
		+ ?(ИмяРегистра = "ТоварыНаСкладах", "
		|	МИНИМУМ(ВложенныйЗапрос.ОстатокКПередаче)                        КАК ОстатокКПередаче", "
		|	0                                                                КАК ОстатокКПередаче") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|	ложь                                                  КАК флОстатокОрганизации,
		|	ТоварыНаСкладахОстатки.Номенклатура                   КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры     КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры              КАК СерияНоменклатуры,
		|	ВЫБОР
		|		КОГДА ТоварыНаСкладахОстатки.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) ТОГДА
		|			Истина
		|   	ИНАЧЕ
		|			Ложь
		|	КОНЕЦ                                                 КАК ПустаяСерия,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры.СрокГодности КАК СрокГодности,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры.Код          КАК СерияНоменклатурыКод,
		|	"+ ?(ИмяРегистра = "ТоварыНаСкладах", "ТоварыНаСкладахОстатки.Качество", "&Новый") + " КАК Качество,
		|	"+ ?(ИмяРегистра <> "ТоварыПереданные", "ТоварыНаСкладахОстатки.Склад",     "NULL")  + " КАК Склад,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток              КАК Остаток,"
		+ ?(ИмяРегистра = "ТоварыНаСкладах", "
		|	ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток     КАК ОстатокКПередаче", "
		|	0                                                     КАК ОстатокКПередаче") + "
		|ИЗ
		|" + ТекстЗапросаСклады + ?(ИмяРегистра = "ТоварыНаСкладах","
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&КонДата,
		|		Склад В (&Склад)
		|	  И Номенклатура               В (&Номенклатура)
		|	) КАК ТоварыКПередачеСоСкладовОстатки
		|ПО
		|	ТоварыНаСкладахОстатки.Номенклатура                 = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		|	И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|	И ТоварыНаСкладахОстатки.СерияНоменклатуры          = ТоварыКПередачеСоСкладовОстатки.СерияНоменклатуры
		|	И ТоварыНаСкладахОстатки.Качество                   = ТоварыКПередачеСоСкладовОстатки.Качество
		|", "
		|") + "
		|ОБЪЕДИНИТЬ ВСЕ
		|"
		+ ТекстЗапросаПоОрганизации + ") КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.флОстатокОрганизации,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.СерияНоменклатуры,
		|	ВложенныйЗапрос.Качество,
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.ПустаяСерия
		|";

	Иначе
		
		Запрос.Текст = ТекстЗапросаПоОрганизации;
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по организации
	ТаблицаПоОрганизации = РезультатЗапроса.Выгрузить();
	
	Если Комиссионер = Неопределено Тогда
		Сч = 0;
		Пока Сч < ТаблицаПоОрганизации.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоОрганизации.Получить(Сч);
			Если не СтрокаТаблицы.флОстатокОрганизации Тогда
				ТаблицаПоОрганизации.Удалить(СтрокаТаблицы);
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.ОстатокКПередаче) Тогда
					СтрокаТаблицы.Остаток = Макс(СтрокаТаблицы.Остаток - СтрокаТаблицы.ОстатокКПередаче,0);
				КонецЕсли;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		// Таблица остатков на складах
		ТаблицаПоСкладам = РезультатЗапроса.Выгрузить();
		Сч = 0;
		Пока Сч < ТаблицаПоСкладам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоСкладам.Получить(Сч);
			Если СтрокаТаблицы.флОстатокОрганизации Тогда
				ТаблицаПоСкладам.Удалить(СтрокаТаблицы);
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.ОстатокКПередаче) Тогда
					СтрокаТаблицы.Остаток = СтрокаТаблицы.Остаток - СтрокаТаблицы.ОстатокКПередаче;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;

		// Корректировка остатков склада
		Если не МожноПревышатьОстатокПоОрганизации Тогда
			Для Каждого СтрокаОрганизации ИЗ ТаблицаПоОрганизации Цикл

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура",               СтрокаОрганизации.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаОрганизации.ХарактеристикаНоменклатуры);
				СтруктураПоиска.Вставить("СерияНоменклатуры",          СтрокаОрганизации.СерияНоменклатуры);
				СтруктураПоиска.Вставить("Качество",                   СтрокаОрганизации.Качество);
				Если КонтролироватьОстатокПоОрганизацииПоСкладу 
				   И ЗначениеЗаполнено(СтрокаОрганизации.Склад) Тогда
					СтруктураПоиска.Вставить("Склад",                   СтрокаОрганизации.Склад);
				КонецЕсли;

				СтрокиПоСкладам      = ТаблицаПоСкладам.НайтиСтроки(СтруктураПоиска);
				ОстатокПоОрганизации = ?(ЗначениеЗаполнено(СтрокаОрганизации.Остаток), СтрокаОрганизации.Остаток, 0);

				Для Каждого СтрокаСклада Из СтрокиПоСкладам Цикл

					ОстатокПоСкладу      = ?(ЗначениеЗаполнено(СтрокаСклада.Остаток), СтрокаСклада.Остаток, 0);
					МинимальныйОстаток   = Мин(ОстатокПоСкладу, ОстатокПоОрганизации);
					МинимальныйОстаток   = ?(МинимальныйОстаток < 0, 0, МинимальныйОстаток);
					ОстатокПоОрганизации = ОстатокПоОрганизации - МинимальныйОстаток;
					СтрокаСклада.Остаток = МинимальныйОстаток;

				КонецЦикла;
			КонецЦикла;
			//удаление строк из остатков по складам, для которых вообще нет остатков по организации
			Для каждого СтрокаСклада из ТаблицаПоСкладам цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура",               СтрокаСклада.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаСклада.ХарактеристикаНоменклатуры);
				СтруктураПоиска.Вставить("СерияНоменклатуры",          СтрокаСклада.СерияНоменклатуры);
				СтруктураПоиска.Вставить("Качество",                   СтрокаСклада.Качество);
				Если КонтролироватьОстатокПоОрганизацииПоСкладу Тогда
					СтруктураПоиска.Вставить("Склад",                   СтрокаСклада.Склад);
				КонецЕсли;

				СтрокиПоОрганизации = ТаблицаПоОрганизации.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПоОрганизации.Количество()=0 Тогда
					СтрокаСклада.Остаток = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ТаблицаПоСкладам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, СерияНоменклатурыКод, Качество, Склад, ПустаяСерия", "Остаток");

		Если Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить() Тогда

			//для учета серий товара, зарезервированных под конкретный заказ покупателя, необходимо следующее:
			//1) В любом случае - из доступного остатка по серии на складе исключить резерв по серии под заказ покупателя
			//2) Если списание происходит из резерва по заказу покупателя - подобрать серии, которые зарезервированы под заказ покупателя 
			//		(заполнить предназначенную для этого таблицу ТаблицаРезервовПоСериям)
			ЗапросРезервы = новый Запрос;
			ЗапросРезервы.Текст = "ВЫБРАТЬ
			|Номенклатура,
			|ХарактеристикаНоменклатуры,
			|СерияНоменклатуры,
			|	ВЫБОР
			|		КОГДА СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) ТОГДА
			|			Истина
			|   	ИНАЧЕ
			|			Ложь
			|	КОНЕЦ КАК ПустаяСерия,
			|СерияНоменклатуры.СрокГодности  КАК СрокГодности,
			|СерияНоменклатуры.Код           КАК СерияНоменклатурыКод,
			|Склад,
			|&Новый КАК Качество,
			|ДокументРезерва,
			|КоличествоОстаток КАК Остаток
			|ИЗ
			|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&КонДата,Склад В (&Склад)
			|	  И Номенклатура  В (&Номенклатура)
			|	  И ВЫРАЗИТЬ(ДокументРезерва КАК ДОкумент.ЗаказПокупателя).ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей = истина
			|							 ) КАК РезервыПоСерии
			|ГДЕ КоличествоОстаток>0";
			ЗапросРезервы.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			ЗапросРезервы.УстановитьПараметр("Новый",        Справочники.Качество.Новый);
			ЗапросРезервы.УстановитьПараметр("Склад",        МассивСклады);
			ЗапросРезервы.УстановитьПараметр("КонДата",      ?(КонДата=неопределено,Дата("00010101000000"),КонДата));
			
			РезультатЗапроса = ЗапросРезервы.Выполнить();

			//этап1 - уменьшение свободного остатка по серии на количество серии в резерве под заказ
			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() цикл

				//уменьшение остатка на количество резерва
				нстр = ТаблицаПоСкладам.Добавить();
				ЗаполнитьЗначенияСвойств(нстр, Выборка);
				нстр.Остаток = (-1)*Выборка.Остаток;
			КонецЦикла;
			ТаблицаПоСкладам.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, СерияНоменклатурыКод, Качество, Склад, ПустаяСерия", "Остаток");

			//удалим строки с пустым остатком
			КоличествоСтрок = ТаблицаПоСкладам.Количество();

			Для а=1 по КоличествоСтрок цикл
				Если ТаблицаПоСкладам[КоличествоСтрок-а].Остаток<=0 Тогда
					ТаблицаПоСкладам.Удалить(КоличествоСтрок-а);
				КонецЕсли;
			КонецЦикла;

			//этап2 - при необходимости готовим таблицу с данными по зарезервированным сериям номенклатуры
			Если ТаблицаРезервовПоСериям<>неопределено Тогда
				ТаблицаРезервовПоСериям =  РезультатЗапроса.Выгрузить();
			КонецЕсли;

		КонецЕсли;

		ТаблицаСерий = ТаблицаПоСкладам.Скопировать();

	Иначе
		ТаблицаПоОрганизации.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, СрокГодности, СерияНоменклатурыКод, Качество, ПустаяСерия", "Остаток");
		ТаблицаСерий = ТаблицаПоОрганизации.Скопировать();
	КонецЕсли;
	
	ТаблицаСерий.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, ПустаяСерия, СрокГодности, СерияНоменклатурыКод");
	
	ТаблицаСерий.Колонки.Удалить("ПустаяСерия");

	Возврат ТаблицаСерий;

КонецФункции // ПолучитьТаблицуОстатковПоСериям()

// Возвращает таблицу остатков по сериям на заданом складе в заданной организации.
// Используется при заполении по кнопке "Заполнить и провести" в документах, списывающих товары.
//
// Параметры:
//  МассивСклады       - массив, склады, на котором получаются остатки.
//  Организация        - организация, по которой получаются остатки.
//  МассивНоменклатуры - массив, содержащий номенклатуру, по которой необходимо получить остатки.
//
Функция ПолучитьТаблицуСвободныхОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры) Экспорт

	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры.СрокГодности КАК СрокГодности,
	|	ТоварыНаСкладахОстатки.СерияНоменклатуры.Код КАК СерияНоменклатурыКод,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0) КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|		,
	|		Номенклатура В (&Номенклатура)
	|			И Склад В (&Склад)
	|			И Качество = &НовоеКачество) КАК ТоварыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	|		,
	|		Номенклатура В (&Номенклатура)
	|		    И Склад В (&Склад)) КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|			И ТоварыНаСкладахОстатки.СерияНоменклатуры = ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры
	|			И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	|			И ТоварыНаСкладахОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
	|		,
	|		Номенклатура В (&Номенклатура)
	|			И Склад В (&Склад)
	|			И Качество = &НовоеКачество) КАК ТоварыКПередачеСоСкладовОстатки
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
	|			И ТоварыНаСкладахОстатки.СерияНоменклатуры = ТоварыКПередачеСоСкладовОстатки.СерияНоменклатуры
	|			И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
	|			И ТоварыНаСкладахОстатки.Склад = ТоварыКПередачеСоСкладовОстатки.Склад
	|УПОРЯДОЧИТЬ ПО ТоварыНаСкладахОстатки.Номенклатура,СрокГодности,СерияНоменклатурыКод";
	
	Запрос.УстановитьПараметр("Склад", МассивСклады);
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("НовоеКачество", Справочники.Качество.Новый);
	
	Возврат(Запрос.Выполнить().Выгрузить());	

КонецФункции // ПолучитьТаблицуСвободныхОстатковПоСериям()

// Процедура проверяет, что в серии заполнен номер ГТД.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоВСерииЗаполненНомерГТД(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если СтрокаТаблицы.УчетПоСериям <> Истина
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерияНоменклатуры)
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)
		 ИЛИ СтрокаТаблицы.СтранаПроисхождения = Справочники.КлассификаторСтранМира.Россия Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """     + СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                                """ табличной части """ + ПредставлениеТабличнойЧасти       + """: ";

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в серии не заполнен номер ГТД для импортного товара!", Ложь, Заголовок);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоВСерииЗаполненНомерГТД()

// Процедура формирует массив типов цен по помеченным элементам списка значений
процедура СформироватьМассивБазовыхТиповЦен(СписокТиповЦен, МассивТиповЦен, МассивРассчитываемыхЦен, ВсеТипыЦен = Ложь) Экспорт
	
	МассивТиповЦен.Очистить();
	МассивРассчитываемыхЦен.Очистить();
	Для Каждого Элемент Из СписокТиповЦен Цикл
		Если Элемент.Пометка ИЛИ ВсеТипыЦен Тогда
			
			ТипБазЭлемента = Элемент.Ссылка;
			// может уже этот тип есть в массиве
			ИндексЭлемента = ОбщегоНазначения.ВернутьИндексВМассиве(МассивТиповЦен, ТипБазЭлемента);
			
			Если (ИндексЭлемента = -1) Тогда
				МассивТиповЦен.Добавить(ТипБазЭлемента);
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция по типы цены СправочникСсылка.ТипыЦенНоменклатуры определяет префикс имени колонки
Функция ОпределитьПрефиксИмениКолонки(ТаблицаПоиска, ТипЦены)
	
	Если (ТаблицаПоиска = Неопределено) Тогда
		Возврат "";
	Иначе
		Элемент = ТаблицаПоиска.Найти(ТипЦены, "Ссылка");
		Возврат Элемент.Префикс;
	КонецЕсли;	
	
КонецФункции

// Процедура создает в дереве необходимые для работы колонки сумм 
//с определенным префиксов в наименовании
Процедура СоздатьКолонкиСуммДерево(Дерево, Префикс)
	
	Дерево.Колонки.Добавить(Префикс + "Цена"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Дерево.Колонки.Добавить(Префикс + "ВалютаЦены"      , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Дерево.Колонки.Добавить(Префикс + "ЦенаНоменклатуры", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Дерево.Колонки.Добавить(Префикс + "КурсВалюты"      , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,4)));
	Дерево.Колонки.Добавить(Префикс + "КратностьВалюты" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	Дерево.Колонки.Добавить(Префикс + "ЕдиницаЦены"     , Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Дерево.Колонки.Добавить(Префикс + "ФлагЦены"        , Новый ОписаниеТипов("Булево"));

КонецПроцедуры
 
// Функция по параметру ТаблицаПоиска создает дерево и в нем нужные колонки
Функция СоздатьКолонкиДереваОстатков(ТаблицаПоиска = Неопределено, ВсеТипыЦен = Ложь) Экспорт
	
	ДеревоОстатков = Новый ДеревоЗначений;
	
	МассивБазовыхТиповЦен   = Новый Массив;
	МассивРассчитываемыхЦен = Новый Массив;
	СформироватьМассивБазовыхТиповЦен(ТаблицаПоиска, МассивБазовыхТиповЦен, МассивРассчитываемыхЦен, ВсеТипыЦен);

	ДеревоОстатков.Колонки.Добавить("ХарактеристикаСклад", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры,СправочникСсылка.Склады"));
	ДеревоОстатков.Колонки.Добавить("МестоХранения"      , Новый ОписаниеТипов("Строка"));
	ДеревоОстатков.Колонки.Добавить("Общий"              , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДеревоОстатков.Колонки.Добавить("Свободный"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДеревоОстатков.Колонки.Добавить("СвободныйОжидаемый" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДеревоОстатков.Колонки.Добавить("ВРезерве"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	// Тут колонки добавляются в том порядке в котором они идут в списке типов цен
	Если МассивБазовыхТиповЦен.Количество() > 0 Тогда
		
		// колонки для Каждого типа цены
		Для Каждого Элемент Из МассивБазовыхТиповЦен Цикл
			ПрефиксИмени = ОпределитьПрефиксИмениКолонки(ТаблицаПоиска, Элемент);
			СоздатьКолонкиСуммДерево(ДеревоОстатков, ПрефиксИмени);
		КонецЦикла;
		
		Для Каждого Элемент Из МассивРассчитываемыхЦен Цикл
			ПрефиксИмени = ОпределитьПрефиксИмениКолонки(ТаблицаПоиска, Элемент);
			СоздатьКолонкиСуммДерево(ДеревоОстатков, ПрефиксИмени);
		КонецЦикла;

	КонецЕсли; 
	
	Возврат ДеревоОстатков;
	
КонецФункции

// Процедура перекачивает поля сумм выборки в нужные колонки
Процедура ЗаполнитьПоляСумм(СтрокаДерева, Выборка, СписокЦенОстатков, КурсыВалют)
	
	// если цены не заданы - то ничего не делаем
	Если НЕ ЗначениеЗаполнено(Выборка.ТипЦен) Тогда
		Возврат
	КонецЕсли;
	
	// в зависимости от типа цен помещаем данные в нужные колонки
	ПрефиксКолонки = ОпределитьПрефиксИмениКолонки(СписокЦенОстатков, Выборка.ТипЦен);
		
	Если ЗначениеЗаполнено(ПрефиксКолонки) Тогда
		ПолученнаяЦена = 0;
		ПолученнаяЦена = Ценообразование.ОкруглитьЦену(Выборка.Цена, Выборка.ТипЦен.ПорядокОкругления, Выборка.ТипЦен.ОкруглятьВБольшуюСторону);

		СтрокаДерева[ПрефиксКолонки + "ВалютаЦены"]          = Выборка.Валюта;
		СтрокаДерева[ПрефиксКолонки + "ЦенаНоменклатуры"]    = ПолученнаяЦена;
		
		СтруктураВалюты = ВернутьСтруктуруКурсВалюты(КурсыВалют, Выборка.Валюта);
		Если СтруктураВалюты <> Неопределено Тогда
			СтрокаДерева[ПрефиксКолонки + "КурсВалюты"]          = СтруктураВалюты.Курс;
			СтрокаДерева[ПрефиксКолонки + "КратностьВалюты"]     = СтруктураВалюты.Кратность;
		КонецЕсли;
	
		СтрокаДерева[ПрефиксКолонки + "ЕдиницаЦены"]         = Выборка.ЕдиницаЦены;
		СтрокаДерева[ПрефиксКолонки + "ФлагЦены"]            = Выборка.ФлагЦены;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура перекачивает поля остатков выборки в нужные колонки
Процедура ЗаполнитьПоляОстатков(СтрокаДерева, Выборка)
	
	СтрокаДерева.Общий               = Выборка.КоличествоОстаток;
	СтрокаДерева.Свободный           = Выборка.КоличествоСвободныйОстаток;
	СтрокаДерева.СвободныйОжидаемый  = ?(Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам > 0,Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам,СтрокаДерева.СвободныйОжидаемый);
	СтрокаДерева.ВРезерве            = Выборка.КоличествоВРезерве;
	
КонецПроцедуры

// Процедура инициализирует поля остатков - нули им присваивает
Процедура ИнициализироватьПоляОстатков(СтрокаДерева)
	
	СтрокаДерева.Общий               = 0;
	СтрокаДерева.Свободный           = 0;
	СтрокаДерева.ВРезерве            = 0;
	
КонецПроцедуры

// Процедура добавляет текущие остатки выборки к тем, которые имеются
Процедура ДополнитьПоляОстатков(СтрокаДерева, Выборка)
	
	СтрокаДерева.Общий               = СтрокаДерева.Общий + Выборка.КоличествоОстаток;
	СтрокаДерева.Свободный           = СтрокаДерева.Свободный + Выборка.КоличествоСвободныйОстаток;
	СтрокаДерева.СвободныйОжидаемый  = СтрокаДерева.СвободныйОжидаемый + Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам;
	СтрокаДерева.ВРезерве            = СтрокаДерева.ВРезерве + Выборка.КоличествоВРезерве;
	
КонецПроцедуры

// Процедура заполняет строку характеристики товара по выборе
Процедура ЗаполнитьХарактеристикуТовара(СтрокаДерева, Выборка)
	
	СтрокаДерева.ХарактеристикаСклад = Выборка.ХарактеристикаНоменклатуры;
	СтрокаДерева.СвободныйОжидаемый = Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам;
	ИнициализироватьПоляОстатков(СтрокаДерева);
	
КонецПроцедуры


//Функция для Элемента формирует префикс
Функция СформироватьПрефиксДляЭлемента(Элемент)
	
	ПрефиксИмени = "А" + Элемент.УникальныйИдентификатор(); 
	ЗначениеПрефикса = СтрЗаменить(ПрефиксИмени, "-", "_");

	Возврат ЗначениеПрефикса;
	
КонецФункции

// Функция формирует таблицу списока типов цен и дополнительной информации и них
функция ЗаполнитьСписокТиповЦенДляПолученияОстатков() Экспорт
	
	СписокЦенОстатков = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ТипыЦенНоменклатуры.Ссылка,
	 |	ТипыЦенНоменклатуры.Наименование,
	 |  Выразить(" + """1""" + " КАК Строка(100))	Префикс,
	 |	ТипыЦенНоменклатуры.БазовыйТипЦен,
	 |	ТипыЦенНоменклатуры.Рассчитывается,
	 |	ТипыЦенНоменклатуры.ПроцентСкидкиНаценки,
	 |	ТипыЦенНоменклатуры.ОкруглятьВБольшуюСторону,
	 |	ТипыЦенНоменклатуры.ПорядокОкругления,
	 |	Ложь Пометка
	 |ИЗ
	 |	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	 |";
	 
	СписокЦенОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Элемент Из СписокЦенОстатков Цикл 
		Элемент.Префикс = СформироватьПрефиксДляЭлемента(Элемент.Ссылка);
	КонецЦикла;
	
	Возврат СписокЦенОстатков;
	
КонецФункции

// Функция возвращает структуру курса валюты
Функция ВернутьСтруктуруКурсВалюты(ДанныеКурсов, Валюта) Экспорт
	
	СтруктураКурса = ДанныеКурсов[Валюта];
	
	Если СтруктураКурса = Неопределено Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ТекущаяДата());
        ДанныеКурсов.Вставить(Валюта, СтруктураКурса);
	КонецЕсли;
	
	Возврат  СтруктураКурса;
	
КонецФункции

// Процедура формирует дерево остатков номенклатуры на складах в разрезе характеристик номенклатуры
//
// Параметры
//  Номенклатура     - СправочникСсылка.Номенклатура, номенклатурная позиция, для которой необходимо рассчитать остатки
//  ОтображатьСклады - Булево, признак расчета остатков по складам
//  СписокЦенОстатков - таблица для расчета сложных типов цен
//
// Возвращаемое значение:
//   ДеревоЗначений, структура дерева описана в процедуре
//   для Каждого типа цен будет создана своя колонка куда и будет помещена соответсвующая сумма
//
Процедура ПолучитьДеревоОстатковНоменклатуры(ДеревоОстатков, Номенклатура, ОтображатьСклады, 
											СписокЦенОстатков = Неопределено, ВсеТипыЦен = Ложь, 
											КурсыВалют, СписокСкладов = Неопределено, ДатаАктуальности = Неопределено) Экспорт
											
	Если ДатаАктуальности = Неопределено Тогда
		ДатаАктуальности = КонецДня(ТекущаяДата());
	КонецЕсли;
												
	ДеревоОстатков.Строки.Очистить();
		
	ТипыЦен = Новый Массив;
	МассивРассчитываемыхЦен = Новый Массив;
	СформироватьМассивБазовыхТиповЦен(СписокЦенОстатков, ТипыЦен, МассивРассчитываемыхЦен, ВсеТипыЦен);

	ПолучатьЦены = (ТипыЦен.Количество() > 0);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура"        , Номенклатура);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад"         , Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипыЦен"             , ТипыЦен);
	Запрос.УстановитьПараметр("ДатаАктуальности"    , ДатаАктуальности);
	Если ЗначениеЗаполнено(СписокСкладов) Тогда
		Запрос.УстановитьПараметр("Склады"       	, СписокСкладов);	
	КонецЕсли;
	
	ОграничениеПоСкладу = ?(НЕ ЗначениеЗаполнено(СписокСкладов), "", " И Склад В (&Склады) " );
	
	ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ХарактеристикиНоменклатуры.Ссылка               КАК ХарактеристикаНоменклатуры
		|		" + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад КАК Склад, АдресныйСклад.МестоХранения КАК МестоХранения","") + "
		|		, ВложенныйЗапрос.КоличествоОстаток             КАК КоличествоОстаток
		|		, ВложенныйЗапрос.КоличествоСвободныйОстаток    КАК КоличествоСвободныйОстаток
		|		, ВложенныйЗапрос.КоличествоВРезерве            КАК КоличествоВРезерве
		|		, 0                                             КАК КоличествоСвободныйОстатокВЗаказахПоставщикам
		|";
		
		Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	,
			|	Цены.ФлагУсловийПоставки  КАК ФлагЦены,
			|	ЕСТЬNULL(Цены.Цена, 0.00) КАК Цена,
			|	Цены.Валюта               КАК Валюта,
			|	Цены.ЕдиницаИзмерения     КАК ЕдиницаЦены,
			|	1                         КАК КурсВалюты,
			|	1                         КАК КратностьВалюты,
			|	Цены.ТипЦен               КАК ТИПЦЕН
			|";
		КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			ХарактеристикиНоменклатуры.Ссылка   КАК Ссылка,
		|			ХарактеристикиНоменклатуры.Владелец КАК Владелец
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ГДЕ
		|			ХарактеристикиНоменклатуры.Владелец = &Номенклатура
		|
		|		ОБЪЕДИНИТЬ
		|
		|		ВЫБРАТЬ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|			&Номенклатура КАК Владелец
		|
		|		) КАК ХарактеристикиНоменклатуры
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.ХарактеристикаНоменклатуры                     КАК ХарактеристикаНоменклатуры
		|		" + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад ","") + "
		|		, СУММА(ВложенныйЗапрос.ТоварыНаСкладахОстатки 
		|				+ ВложенныйЗапрос.ТоварыВРозницеОстатки 
		|				+ ВложенныйЗапрос.ТоварыВНТТОстатки)                   КАК КоличествоОстаток
		|		, СУММА(ВложенныйЗапрос.ТоварыНаСкладахОстатки
		|				+ ВложенныйЗапрос.ТоварыВРозницеОстатки
		|				+ ВложенныйЗапрос.ТоварыВНТТОстатки
		|				- ВложенныйЗапрос.ТоварыВРезервеСкладахОстатки
		|				- ВложенныйЗапрос.ТоварыКПередачеСоСкладовОстатки)     КАК КоличествоСвободныйОстаток
		|		, СУММА(ВложенныйЗапрос.ТоварыВРезервеСкладахОстатки)          КАК КоличествоВРезерве
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры          КАК ХарактеристикаНоменклатуры
		|			, ТоварыНаСкладахОстатки.Склад                             КАК Склад
		|			, ТоварыНаСкладахОстатки.КоличествоОстаток                 КАК ТоварыНаСкладахОстатки
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАктуальности, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыНаСкладахОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры           КАК ХарактеристикаНомнклатуры
		|			, ТоварыВРозницеОстатки.Склад                              КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстатки
		|			, ТоварыВРозницеОстатки.КоличествоОстаток                  КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаАктуальности, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВРозницеОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыВНТТОстатки.ХарактеристикаНоменклатуры               КАК ХарактеристикаНоменклатуры
		|			, ТоварыВНТТОстатки.Склад                                  КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстаток
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, ТоварыВНТТОстатки.КоличествоОстаток                      КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВНТТ.Остатки(&ДатаАктуальности, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВНТТОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыВРезервеСкладахОстатки.ХарактеристикаНоменклатуры    КАК ХарактеристикаНоменклатуры
		|			, ТоварыВРезервеСкладахОстатки.Склад                       КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстатки
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, ТоварыВРезервеСкладахОстатки.КоличествоОстаток           КАК ТоварыВРезервеСкладахОстатки
		|			, 0                                                        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАктуальности, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыВРезервеСкладахОстатки
					
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|			, ТоварыКПередачеСоСкладовОстатки.Склад                    КАК Склад
		|			, 0                                                        КАК ТоварыНаСкладахОстатки
		|			, 0                                                        КАК ТоварыВРозницеОстатки
		|			, 0                                                        КАК ТоварыВНТТОстатки
		|			, 0                                                        КАК ТоварыВРезервеСкладахОстатки
		|			, ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток        КАК ТоварыКПередачеСоСкладовОстатки
		|		ИЗ
		|			РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаАктуальности, Номенклатура = &Номенклатура" + ОграничениеПоСкладу + ") КАК ТоварыКПередачеСоСкладовОстатки
					
		|		) КАК ВложенныйЗапрос
		|	СГРУППИРОВАТЬ ПО ВложенныйЗапрос.ХарактеристикаНоменклатуры " + ?(ОтображатьСклады,", ВложенныйЗапрос.Склад","") + "
		|	) КАК ВложенныйЗапрос
		|ПО ХарактеристикиНоменклатуры.Ссылка = ВложенныйЗапрос.ХарактеристикаНоменклатуры
		|";
	Если ОтображатьСклады Тогда
		ОграничениеЗапросаПоСкладу = ?(НЕ ЗначениеЗаполнено(СписокСкладов), "", Символы.ПС + "И МестаХраненияНоменклатуры.Склад В (&Склады) " );
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения,
		|	МестаХраненияНоменклатуры.Склад КАК Склад,
		|	МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
		|	МестаХраненияНоменклатуры.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|ГДЕ
		|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура "+ ОграничениеЗапросаПоСкладу + " ) КАК АдресныйСклад
		|	ПО
		|		АдресныйСклад.Склад = ВложенныйЗапрос.Склад
		|";
	
	КонецЕсли;
	Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|ВЫБРАТЬ ЦеныНаБазовыйТип.Номенклатура,
		| 		ЦеныНаБазовыйТип.ХарактеристикаНоменклатуры,
		|		ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) + ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) * (ЦеныНаБазовыйТип.ПроцентСкидкиНаценки /100)
		|							ИНАЧЕ ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00)
		|					КОНЕЦ
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР 	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР 	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЦеныНаБазовыйТип.Валюта
		|							ИНАЧЕ ЦенаПоДиапазону.Валюта
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныНаБазовыйТип.Валюта
		|		КОНЕЦ КАК Валюта,
		|		ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|				ТОГДА
		|					ВЫБОР	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|							ТОГДА ЦеныНаБазовыйТип.ЕдиницаИзмерения
		|							ИНАЧЕ ЦенаПоДиапазону.ЕдиницаИзмерения
		|					КОНЕЦ
		|				ИНАЧЕ ЦеныНаБазовыйТип.ЕдиницаИзмерения
		|		КОНЕЦ КАК ЕдиницаИзмерения,
		|		ЛОЖЬ КАК ФлагУсловийПоставки,
		|		ЦеныНаБазовыйТип.Рассчитывается,
		|		ЦеныНаБазовыйТип.ТипЦенБазовыйДинамический КАК ТипЦен
		| ИЗ
		|(
		|	ВЫБРАТЬ
		|		НоменклатураХарактеристикаТипЦены.Номенклатура,
		|		НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(КурсВалют.Кратность, 0.00) = 0 ИЛИ ЕСТЬNULL(КурсВалютДинамическийТип.Курс, 0.00) = 0
		|								ТОГДА 0.00
		|								ИНАЧЕ ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатуры.Цена, ЦеныНоменклатурыПустаяХарактеристика.Цена), 0.00)
		|									  * ЕСТЬNULL(КурсВалют.Курс, 0.00)
		|									  * ЕСТЬNULL(КурсВалютДинамическийТип.Кратность, 0.00)
		|									  / КурсВалют.Кратность
		|									  / КурсВалютДинамическийТип.Курс
		|						КОНЕЦ
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, ЦеныНоменклатурыПустаяХарактеристика.Цена)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.СпособРасчетаЦены, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.СпособРасчетаЦены) ЕСТЬ NULL
		|				                ТОГДА ТипЦенНоменклаутры.СпособРасчетаЦены
		|				                ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.СпособРасчетаЦены, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.СпособРасчетаЦены)
		|				        КОНЕЦ
		|				ИНАЧЕ NULL
		|		КОНЕЦ КАК СпособРасчета,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА 	ВЫБОР 	КОГДА ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.ПроцентСкидкиНаценки, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ПроцентСкидкиНаценки) ЕСТЬ NULL
		|				                ТОГДА ТипЦенНоменклаутры.ПроцентСкидкиНаценки
		|				                ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.ПроцентСкидкиНаценки, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ПроцентСкидкиНаценки)
		|				        КОНЕЦ
		|				ИНАЧЕ NULL
		|		КОНЕЦ КАК ПроцентСкидкиНаценки,
		|		ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается
		|				ТОГДА ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта), ТипЦенНоменклаутры.ВалютаЦены)
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ЦеныНоменклатурыПустаяХарактеристика.Валюта)
		|		КОНЕЦ КАК Валюта,
		|		КурсВалютДинамическийТип.Валюта КАК ВалютаДинамическийТип,
		|		ЕСТЬNULL(ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения, ЦеныНоменклатурыПустаяХарактеристика.ЕдиницаИзмерения), НоменклатураХарактеристикаТипЦены.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения,
		|		НоменклатураХарактеристикаТипЦены.ТипЦен,
		|		НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический,
		|		НоменклатураХарактеристикаТипЦены.Рассчитывается
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			НоменклатураХарактеристикаТипЦены.Номенклатура,
		|			НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры,
		|			НоменклатураХарактеристикаТипЦены.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|			ВЫБОР 	КОГДА СпрТипЦены.Рассчитывается
		|					ТОГДА СпрТипЦены.БазовыйТипЦен
		|					ИНАЧЕ СпрТипЦены.Ссылка
		|			КОНЕЦ КАК ТипЦен,
		|			СпрТипЦены.Ссылка КАК ТипЦенБазовыйДинамический,
		|			СпрТипЦены.Рассчитывается
		|		ИЗ
		|		(
		|			ВЫБРАТЬ НоменклатураХарактеристика.Номенклатура,
		|					НоменклатураХарактеристика.ХарактеристикаНоменклатуры,
		|					СпрНомеклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|					сТипыЦенНоменклатуры.Ссылка КАК ТипЦен
		|			ИЗ
		|			(
		|				ВЫБРАТЬ	
		|					Характеристики.Владелец КАК Номенклатура,
		|					Характеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|				ИЗ
		|					Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|					ГДЕ Характеристики.Владелец = &Номенклатура
		|				ОБЪЕДИНИТЬ
		|				ВЫБРАТЬ 
		|						&Номенклатура КАК Номенклатура,
		|						ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|			) КАК НоменклатураХарактеристика
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				Справочник.Номенклатура КАК СпрНомеклатура
		|			ПО
		|				СпрНомеклатура.Ссылка = НоменклатураХарактеристика.Номенклатура
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				Справочник.ТипыЦенНоменклатуры КАК сТипыЦенНоменклатуры
		|			ПО ИСТИНА
		|			ГДЕ
		|				сТипыЦенНоменклатуры.Ссылка В (&ТипыЦен)
		|		) КАК НоменклатураХарактеристикаТипЦены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК СпрТипЦены
		|		ПО
		|			СпрТипЦены.Ссылка = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	) КАК НоменклатураХарактеристикаТипЦены
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаАктуальности, Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
		|	ПО
		|		ЦеныНоменклатуры.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры
		|		И ЦеныНоменклатуры.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаАктуальности, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыПустаяХарактеристика
		|	ПО
		|		ЦеныНоменклатурыПустаяХарактеристика.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыПустаяХарактеристика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЦеныНоменклатурыПустаяХарактеристика.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦен
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаАктуальности, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыДинамическийТип
		|	ПО
		|		ЦеныНоменклатурыДинамическийТип.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыДинамическийТип.ХарактеристикаНоменклатуры = НоменклатураХарактеристикаТипЦены.ХарактеристикаНоменклатуры
		|		И ЦеныНоменклатурыДинамическийТип.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаАктуальности, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип
		|	ПО
		|		ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Номенклатура = НоменклатураХарактеристикаТипЦены.Номенклатура
		|		И ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.ТипЦен = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаАктуальности) КАК КурсВалют
		|	ПО
		|		КурсВалют.Валюта = ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ЦеныНоменклатурыПустаяХарактеристика.Валюта)
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ТипыЦенНоменклатуры КАК ТипЦенНоменклаутры
		|	ПО 
		|		ТипЦенНоменклаутры.Ссылка = НоменклатураХарактеристикаТипЦены.ТипЦенБазовыйДинамический
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаАктуальности) КАК КурсВалютДинамическийТип
		|	ПО
		|		КурсВалютДинамическийТип.Валюта = 	ВЫБОР 	КОГДА НоменклатураХарактеристикаТипЦены.Рассчитывается И ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта) ЕСТЬ NULL
		|													ТОГДА ТипЦенНоменклаутры.ВалютаЦены
		|													ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыДинамическийТип.Валюта, ЦеныНоменклатурыПустаяХарактеристикаДинамическийТип.Валюта)
		|											КОНЕЦ
		|) КАК ЦеныНаБазовыйТип
		|//Динамический тип цен
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(
		|	ВЫБРАТЬ
		|	        ДинамическийТипЦен.Номенклатура
		|	      , ДинамическийТипЦен.ХарактеристикаНоменклатуры
		|	      , ДинамическийТипЦен.ДинамическийТип КАК БазовыйТипЦен
		|	      , ДинамическийТипЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|	      , ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00) КАК Цена
		|	      , ЦенаПоДиапазону.Валюта
		|	ИЗ
		|	(
		|		ВЫБРАТЬ  ЦенаДляРасчетаДиапазона.Номенклатура,
		|			ЦенаДляРасчетаДиапазона.ХарактеристикаНоменклатуры,		
		|	  		ЦенаДляРасчетаДиапазона.ДинамическийТип,
		|	  		МИНИМУМ(ЦенаПоДиапазону.Валюта) КАК Валюта,
		|	  		МИНИМУМ(ЦенаДляРасчетаДиапазона.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	  		МИНИМУМ(ЦенаПоДиапазону.ВерхняяГраница) КАК Цена
		|	ИЗ
		|	(
		|		ВЫБРАТЬ
		|			НомеклатураХарактеристикаТип.Номенклатура КАК Номенклатура,
		|			НомеклатураХарактеристикаТип.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ЕСТЬNULL(ЕСТЬNULL(ЦеныБазовые.Цена, ЦеныБазовыеПустаяХарактеристика.Цена), 0.00) КАК Цена,
		|			ЕСТЬNULL(ЦеныБазовые.ТипЦен, ЦеныБазовыеПустаяХарактеристика.ТипЦен) КАК ДинамическийТип,
		|			ЕСТЬNULL(ЦеныБазовые.ЕдиницаИзмерения, ЦеныБазовыеПустаяХарактеристика.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		|		ИЗ
		|		(
		|			ВЫБРАТЬ	
		|				Характеристики.Владелец КАК Номенклатура,
		|				Характеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|			ГДЕ Характеристики.Владелец = &Номенклатура
		|			ОБЪЕДИНИТЬ
		|			ВЫБРАТЬ 
		|					&Номенклатура КАК Номенклатура,
		|					ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|		) КАК НомеклатураХарактеристикаТип
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаАктуальности, Номенклатура = &Номенклатура И (НЕ ТипЦен.Рассчитывается И ТипЦен В (&ТипыЦен))) КАК ЦеныБазовые
		|		ПО
		|			ЦеныБазовые.Номенклатура = НомеклатураХарактеристикаТип.Номенклатура
		|			И ЦеныБазовые.ХарактеристикаНоменклатуры = НомеклатураХарактеристикаТип.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаАктуальности, Номенклатура = &Номенклатура И (НЕ ТипЦен.Рассчитывается И ТипЦен В (&ТипыЦен))) КАК ЦеныБазовыеПустаяХарактеристика
		|		ПО
		|			ЦеныБазовыеПустаяХарактеристика.Номенклатура = НомеклатураХарактеристикаТип.Номенклатура
		|			И ЦеныБазовыеПустаяХарактеристика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ГДЕ
		|			НЕ ЕСТЬNULL(ЦеныБазовые.ТипЦен, ЦеныБазовыеПустаяХарактеристика.ТипЦен) ЕСТЬ NULL
		|	) КАК ЦенаДляРасчетаДиапазона
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|		ВЫБРАТЬ  Диапазон.Валюта
		|				,ТипыЦен.БазовыйТипЦен КАК ТипЦен
		|				, Диапазон.Цена
		|				, Диапазон.ВерхняяГраница
		|		ИЗ
		|			РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ДатаАктуальности,) КАК Диапазон 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(	
		|			ВЫБРАТЬ	ТипЦен
		|					, МАКСИМУМ(Период) КАК Период
		|			ИЗ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ДатаАктуальности, ) КАК Диапазон 
		|			СГРУППИРОВАТЬ ПО Диапазон.ТипЦен
		|		) КАК Диапазон2
		|		ПО Диапазон2.ТипЦен = Диапазон.ТипЦен И Диапазон2.Период = Диапазон.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
		|		ПО
		|			ТипыЦен.Ссылка = Диапазон.ТипЦен
		|	) КАК ЦенаПоДиапазону
		|	ПО
		|		ЦенаПоДиапазону.ТипЦен = ЦенаДляРасчетаДиапазона.ДинамическийТип
		|		И ЦенаПоДиапазону.ВерхняяГраница > ЦенаДляРасчетаДиапазона.Цена
		|	ГДЕ
		|		НЕ ЦенаПоДиапазону.ВерхняяГраница ЕСТЬ NULL	
		|	СГРУППИРОВАТЬ ПО ЦенаДляРасчетаДиапазона.ДинамическийТип
		|					, ЦенаДляРасчетаДиапазона.ХарактеристикаНоменклатуры
		|					, ЦенаДляРасчетаДиапазона.Номенклатура	
							
		|	) КАК ДинамическийТипЦен
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(	
		|		ВЫБРАТЬ  Диапазон.Валюта
		|				, ТипыЦен.БазовыйТипЦен КАК ТипЦен
		|				, Диапазон.Цена
		|				, Диапазон.ВерхняяГраница
		|		ИЗ
		|			РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ДатаАктуальности,) КАК Диапазон 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ТипыЦенНоменклатуры КАК ТипыЦен
		|		ПО
		|			ТипыЦен.Ссылка = Диапазон.ТипЦен
		|	) КАК ЦенаПоДиапазону
		|	ПО
		|		ЦенаПоДиапазону.ТипЦен = ДинамическийТипЦен.ДинамическийТип
		|		И ЦенаПоДиапазону.ВерхняяГраница = ДинамическийТипЦен.Цена
		|) КАК ЦенаПоДиапазону
		|ПО
		|	ЦенаПоДиапазону.БазовыйТипЦен = ЦеныНаБазовыйТип.ТипЦен
		|	И ЦенаПоДиапазону.Номенклатура = ЦеныНаБазовыйТип.Номенклатура
		|	И ЦенаПоДиапазону.ХарактеристикаНоменклатуры = ЦеныНаБазовыйТип.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ВЫБОР	КОГДА ЦеныНаБазовыйТип.Рассчитывается
		|			ТОГДА
		|				ВЫБОР 	КОГДА ЦеныНаБазовыйТип.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|						ТОГДА ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) + ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00) * (ЦеныНаБазовыйТип.ПроцентСкидкиНаценки /100)
		|						ИНАЧЕ ЕСТЬNULL(ЦенаПоДиапазону.Цена, 0.00)
		|				КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНаБазовыйТип.Цена, 0.00)
		|	КОНЕЦ > 0
		|) КАК Цены
		|ПО
		|	Цены.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|	И Цены.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
		|		ОБЪЕДИНИТЬ ВСЕ
				
		|		ВЫБРАТЬ
		|			ЗаказаныйТовар.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|			 " + ?(ОтображатьСклады,", ""НеВыводить"" КАК Склад, ""НеВыводить"" КАК МестоХранения ","") + "
		|			, 0 КАК КоличествоОстаток
		|			, 0 КАК КоличествоСвободныйОстаток
		|			, 0 КАК КоличествоВРезерве
		|			, ЗаказаныйТовар.КоличествоОстаток КАК КоличествоСвободныйОстатокВЗаказахПоставщикам";
		Если ПолучатьЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	,
			|	0  КАК ФлагЦены,
			|	0 КАК Цена,
			|	0 КАК Валюта,
			|	0 КАК ЕдиницаЦены,
			|	0 КАК КурсВалюты,
			|	0 КАК КратностьВалюты,
			|	NULL КАК ТИПЦЕН";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|		ИЗ
		|			(
		|			ВЫБРАТЬ
		|				ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				СУММА(ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
		|			ИЗ
		|				РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура = &Номенклатура) КАК ЗаказыПоставщикамОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ
		|				РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура = &Номенклатура) КАК РазмещениеЗаказовПокупателейОстатки
		|			ПО
		|				РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|				И ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура
		|				И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
		|			СГРУППИРОВАТЬ ПО
		|				ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
		|			) КАК ЗаказаныйТовар
		|		ГДЕ ЕСТЬNULL(ЗаказаныйТовар.КоличествоОстаток , 0.00) > 0
		|";
	Если ОтображатьСклады Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	УПОРЯДОЧИТЬ ПО
		|		ХарактеристикаНоменклатуры,
		|		Склад
		|		//,АдресныйСклад.Приоритет
		|	ИТОГИ 	СУММА(КоличествоСвободныйОстатокВЗаказахПоставщикам) ПО
		|	ХарактеристикаНоменклатуры,
		|	Склад,
		|	МестоХранения
		|	АВТОУПОРЯДОЧИВАНИЕ
		|";
	Иначе	
		ТекстЗапроса = ТекстЗапроса + "
		|	УПОРЯДОЧИТЬ ПО
		|		ХарактеристикаНоменклатуры, КоличествоСвободныйОстатокВЗаказахПоставщикам Убыв
		|	АВТОУПОРЯДОЧИВАНИЕ
		| ";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	// ничего не выбрали - нечего и обрабатывать
	Если РезультатЗапроса.Пустой() Тогда
		
		СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
	
	КонецЕсли;
	
		
	Если ОтображатьСклады Тогда
		
		// отображение результатов с итогами по Характеристикам и Складам
		ВыборкаХарактеристика = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
			ЗаполнитьХарактеристикуТовара(СтрокаХарактеристика, ВыборкаХарактеристика);
						
			ВыборкаСклад = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
			Пока ВыборкаСклад.Следующий() Цикл
				Если ВыборкаСклад.Склад = "НеВыводить" Тогда
					продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаСклад.Склад) Тогда
					СтрокаСклад = СтрокаХарактеристика.Строки.Добавить();
					СтрокаСклад.ХарактеристикаСклад = ВыборкаСклад.Склад;
				КонецЕсли;
				
				ПервыйПроходМестХранения = Истина;
				
				ВыборкаМестаХранения = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МестоХранения");
				Пока ВыборкаМестаХранения.Следующий() Цикл
					
					Если ПервыйПроходМестХранения Тогда
						ВыборкаДетальных = ВыборкаМестаХранения.Выбрать();
						Если ВыборкаДетальных.Следующий() Тогда
							
							// остатки везде одинаковые
							Если ЗначениеЗаполнено(ВыборкаСклад.Склад) Тогда
								ЗаполнитьПоляОстатков(СтрокаСклад, ВыборкаДетальных);
								
								// для итогов еще более верхнего уровня дополняем суммы
								ДополнитьПоляОстатков(СтрокаХарактеристика, ВыборкаДетальных);
							КонецЕсли;
							
							// в разрезе цен заполняем
							Если ПолучатьЦены Тогда
								ЗаполнитьПоляСумм(СтрокаХарактеристика, ВыборкаДетальных, СписокЦенОстатков, КурсыВалют);
								Пока ВыборкаДетальных.Следующий() Цикл
									Если ПолучатьЦены Тогда
										ЗаполнитьПоляСумм(СтрокаХарактеристика, ВыборкаДетальных, СписокЦенОстатков, КурсыВалют);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаМестаХранения.МестоХранения) Тогда
						СтрокаСклад.МестоХранения = ?(ПустаяСтрока(СтрокаСклад.МестоХранения), "", СтрокаСклад.МестоХранения + "; ") + ВыборкаМестаХранения.МестоХранения;
					КонецЕсли;
					
					ПервыйПроходМестХранения = Ложь;
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	Иначе
		ТекущаяХарактеристикаНоменклатуры = Неопределено;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоСвободныйОстатокВЗаказахПоставщикам > 0 Тогда
				СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
			Иначе
				Если ТекущаяХарактеристикаНоменклатуры <> Выборка.ХарактеристикаНоменклатуры Тогда
					СтрокаХарактеристика = ДеревоОстатков.Строки.Добавить();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаХарактеристика.ХарактеристикаСклад = Выборка.ХарактеристикаНоменклатуры;
			ЗаполнитьПоляОстатков(СтрокаХарактеристика, Выборка);
			
			Если ПолучатьЦены Тогда
				ЗаполнитьПоляСумм(СтрокаХарактеристика, Выборка, СписокЦенОстатков, КурсыВалют);
			КонецЕсли;
			
			ТекущаяХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьНовДеревоОстатковНоменклатуры()

// Функция возвращает массив префиксов тех колонок сумм которые будут выведены
Функция ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков)Экспорт 
	
	СписокПрефиксовЦен = Новый СписокЗначений;
	
	Если СписокЦенОстатков = Неопределено Тогда
		Возврат СписокПрефиксовЦен;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокЦенОстатков Цикл
		
		Если Элемент.Пометка Тогда
			
			СписокПрефиксовЦен.Добавить(Элемент.Префикс, Элемент.Наименование);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат  СписокПрефиксовЦен;
КонецФункции

// Процедура пересчитывает суммы номенклатуры из одной валюты в другую
Процедура ПересчитатьОстаткиВВалюте(ДеревоОстатков, СписокПрефиксовЦен, СтруктураКурса, ВВалютеЦены, ВалютаЦены) Экспорт
	
	// определяем курс и кратность валюты
	Если НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
		КурсВалюты      = СтруктураКурса.Курс;
		КратностьВалюты = СтруктураКурса.Кратность;
	КонецЕсли;
 	
	Для Каждого СтрокаДерева Из ДеревоОстатков.Строки Цикл
		
		Для Каждого Префикс Из СписокПрефиксовЦен Цикл
			
			СтрокаПрефикса = Префикс.Значение;
			Если ВВалютеЦены Тогда
				СтрокаДерева[СтрокаПрефикса + "Цена"] = СтрокаДерева[СтрокаПрефикса + "ЦенаНоменклатуры"];
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаДерева[СтрокаПрефикса + "ВалютаЦены"]) ИЛИ НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
					СтрокаДерева[СтрокаПрефикса + "Цена"] = 0;
				Иначе
					СтрокаДерева[СтрокаПрефикса + "Цена"] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДерева[СтрокаПрефикса + "ЦенаНоменклатуры"], 
																				СтрокаДерева[СтрокаПрефикса + "ВалютаЦены"], 
																				ВалютаЦены, 
																				СтрокаДерева[СтрокаПрефикса + "КурсВалюты"], 
																				КурсВалюты, 
																				СтрокаДерева[СтрокаПрефикса + "КратностьВалюты"], 
																				КратностьВалюты);
				КонецЕсли; 
																			
			КонецЕсли; 
			
		КонецЦикла;
	
	КонецЦикла; 

КонецПроцедуры

// Процедура из структуры заполняет параметры
Процедура ПолучитьПараметрыДокументаИзСтруктуры(СтруктурЗначений, ТипЦен,
												СпособЗаполненияЦен, Номенклатура, Количество, КоличествоМест, Характеристика,
												ВалютаЦены, Цена, ЕдиницаИзмерения) Экспорт
	Перем СписокПрефиксовЦен;
	
	// Получим параметры подбора из структуры подбора.
	СтруктурЗначений.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктурЗначений.Свойство("Номенклатура"    , Номенклатура);
	СтруктурЗначений.Свойство("Количество"      , Количество);
	СтруктурЗначений.Свойство("КоличествоМест"  , КоличествоМест);
	СтруктурЗначений.Свойство("Характеристика"  , Характеристика);
	Если Характеристика = Неопределено Тогда
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	СтруктурЗначений.Свойство("СписокПрефиксовЦен"  , СписокПрефиксовЦен);
	
	Если СписокПрефиксовЦен <> Неопределено Тогда 
		// может быть передано несколько типов цен
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			ПрефиксЦены = СформироватьПрефиксДляЭлемента(ТипЦен);
	
			СтруктурЗначений.Свойство(ПрефиксЦены + "ВалютаЦены"      , ВалютаЦены);
	        СтруктурЗначений.Свойство(ПрефиксЦены + "Цена"            , Цена);
			СтруктурЗначений.Свойство(ПрефиксЦены + "ЕдиницаИзмерения", ЕдиницаИзмерения);
			
		КонецЕсли;
		
	Иначе	
		
	    СтруктурЗначений.Свойство("ВалютаЦены"      , ВалютаЦены);
	    СтруктурЗначений.Свойство("Цена"            , Цена);
		СтруктурЗначений.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков	
	КонецЕсли;

КонецПроцедуры


// Процедура восстанавливает флажки у выделенных элементов списка типов цен
Процедура ВосстановитьФлажкиТиповЦен(СписокТиповЦен, СохраненныйСписок) Экспорт
	
	Если СписокТиповЦен = Неопределено Или СохраненныйСписок = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Элемент Из СписокТиповЦен Цикл
		СтрокаОтмеченная = СохраненныйСписок.НайтиПоЗначению(Элемент.Префикс);	
		
		Элемент.Пометка = (СтрокаОтмеченная <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет список типов цен, оставляет выделенными те элементы, что и были выделены до этого
Процедура ОбновитьСписокТиповЦен(СписокТиповЦен, СписокВыделенныхЭлементов)  Экспорт
	
	// восстанавливаем выделенные элементы у СписокЦенОстатков
	СписокТиповЦен = ЗаполнитьСписокТиповЦенДляПолученияОстатков();
	Если СписокВыделенныхЭлементов <> Неопределено Тогда
		
		ВосстановитьФлажкиТиповЦен(СписокТиповЦен, СписокВыделенныхЭлементов);
				
	КонецЕсли;	
	
КонецПроцедуры

// Процедура устанавливает порядок следования списка типов цен
Процедура УпорядочитьСписокТиповЦен(СписокТиповЦен, ПорядокСледованияЦен) Экспорт
	
	Если (СписокТиповЦен = Неопределено) Или (ПорядокСледованияЦен = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	НомерОчередногоТипаЦен = 0;
	Для Каждого ЭлементПорядка Из ПорядокСледованияЦен Цикл
		
		СтрокаТипаЦены = СписокТиповЦен.Найти(ЭлементПорядка, "Ссылка");
		Если СтрокаТипаЦены = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекущийИндекс = СписокТиповЦен.Индекс(СтрокаТипаЦены);
		Если ТекущийИндекс <> НомерОчередногоТипаЦен Тогда
			СписокТиповЦен.Сдвинуть(СтрокаТипаЦены, НомерОчередногоТипаЦен - ТекущийИндекс);
		КонецЕсли;
				
		НомерОчередногоТипаЦен = НомерОчередногоТипаЦен + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет и упорядочивает список типов цен
Процедура ОбновитьИУпорядочитьСписокТиповЦен(СписокТиповЦен) Экспорт
	
	СписокВыделенныхЭлементов = ПолучитьСписокПрефиксовВыводимыхСумм(СписокТиповЦен);
	ПорядокСледованияТиповЦен = Новый Массив;
	ПорядокСледованияТиповЦен = СписокТиповЦен.ВыгрузитьКолонку("Ссылка");

	ОбновитьСписокТиповЦен(СписокТиповЦен, СписокВыделенныхЭлементов);
    УпорядочитьСписокТиповЦен(СписокТиповЦен, ПорядокСледованияТиповЦен);
	
КонецПроцедуры

Функция СуществуетСсылкаНаДокумент(Документ) Экспорт
	Если ЗначениеЗаполнено(Документ) Тогда
		ТипДокумента = Строка(Документ.Метаданные().Имя);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаДокументов.Ссылка
		               |ИЗ
		               |	Документ." + ТипДокумента + " КАК ТаблицаДокументов
		               |ГДЕ
		               |	ТаблицаДокументов.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Документ);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ КОМПЛЕКТУЮЩИХ

// Формирует копию таблицы значений, с заменой "комплекта" на "комплектующие".
//
// Параметры:
//  ТаблицаИсточник         - таблица значений источник, содержащая комплекты,
//  ДокументОбъект          – объект редактируемого документа,
//  СтруктураШапкиДокумента - структура шапки документа.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция СформироватьТаблицуКомплектующих(ТаблицаИсточник, ДокументОбъект, СтруктураШапкиДокумента = Неопределено) Экспорт

	ТаблицаРезультат   = ТаблицаИсточник.Скопировать();
	ТаблицаРезультат.Колонки.Добавить("НоменклатураКомплекта");
	ТаблицаРезультат.Колонки.Добавить("ХарактеристикаКомплекта");
	ТаблицаРезультат.Колонки.Добавить("КоличествоКомплекта");
	ТаблицаРезультат.Индексы.Добавить("Комплект");

	НайденныеКомплекты = ТаблицаРезультат.НайтиСтроки(Новый Структура("Комплект", Истина));

	Если НайденныеКомплекты.Количество() > 0 Тогда
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		ИмяДокумента        = МетаданныеДокумента.Имя;
		ЕстьСерия           = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры",            МетаданныеДокумента, "СоставНабора");
		ЕстьСклад           = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад",                        МетаданныеДокумента, "СоставНабора");
		ЕстьКачество        = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество",                     МетаданныеДокумента, "СоставНабора");
		ЕстьСпособСписания  = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СпособСписанияОстаткаТоваров", МетаданныеДокумента, "СоставНабора");
		ЕстьСебестоимость   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Себестоимость",                МетаданныеДокумента, "СоставНабора");

		СписокКомплектов = Новый СписокЗначений;
		Для Каждого СтрокаКомплект Из НайденныеКомплекты Цикл
			СписокКомплектов.Добавить(СтрокаКомплект.КлючСтроки);
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокументСсылка",   ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПарСписокКомплектов", СписокКомплектов);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.КлючСтроки                                           КАК КлючСтроки,
		|	Док.Номенклатура                                         КАК Номенклатура,
		|	Док.Номенклатура.ВестиПартионныйУчетПоСериям             КАК ВестиПартионныйУчетПоСериям,
		|	Док.ХарактеристикаНоменклатуры                           КАК ХарактеристикаНоменклатуры,
		|" + ?(ЕстьСерия,          "Док.СерияНоменклатуры            КАК СерияНоменклатуры,",            "") + "
		|" + ?(ЕстьСклад,          "Док.Склад                        КАК Склад,
		|						    Док.Склад.ВидСклада              КАК ВидСклада,",                    "") + "
		|" + ?(ЕстьКачество,       "Док.Качество                     КАК Качество,",                     "") + "
		|" + ?(ЕстьСпособСписания, "Док.СпособСписанияОстаткаТоваров КАК СпособСписанияОстаткаТоваров,", "") + "
		|" + ?(ЕстьСебестоимость,  "Док.Себестоимость                КАК Себестоимость,",                "") + "
		|	Док.Количество                                           КАК Количество,
		|	Док.Количество * 
		|		Док.ЕдиницаИзмерения.Коэффициент /
		|		Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоХранения,
		|	Док.ЕдиницаИзмерения                                     КАК ЕдиницаИзмерения,
		|	Док.Цена                                     			 КАК Цена
		|
		|ИЗ
		|	Документ." + ИмяДокумента + ".СоставНабора КАК Док
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокументСсылка
		|	И Док.КлючСтроки В (&ПарСписокКомплектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.КлючСтроки
		|
		|";

		РезультатЗапроса     = Запрос.Выполнить();
		ТаблицаКомплектующих = РезультатЗапроса.Выгрузить();
		ТаблицаКомплектующих.Индексы.Добавить("КлючСтроки");
        КолекцияРаспределяемыхПоказателей = Новый Структура("Цена", 0);		
		
		Для Каждого СтрокаКомплект Из НайденныеКомплекты Цикл
			НайденныеКомплектующие = ТаблицаКомплектующих.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаКомплект.КлючСтроки));
			
			БазаЦены = 0;
			Для Каждого СтрокаКомплектующая Из НайденныеКомплектующие Цикл
				БазаЦены = БазаЦены + СтрокаКомплектующая.Цена;
			КонецЦикла;
			Если НЕ ТаблицаРезультат.Колонки.Найти("Количество") = Неопределено Тогда
				КоличествоКомплекта = СтрокаКомплект.Количество;
			Иначе
				КоличествоКомплекта = СтрокаКомплект.КоличествоДок;
			КонецЕсли;	
			КолекцияРаспределяемыхПоказателей = Новый Структура("Цена", 0);
			РапределеноЦены		  = 0;
			
			Для Каждого СтрокаКомплектующая Из НайденныеКомплектующие Цикл
				НоваяСтрока = ТаблицаРезультат.Добавить();

				Для Сч = 1 По ТаблицаРезультат.Колонки.Количество() Цикл
					Индекс     = Сч - 1;
					ИмяКолонки = ТаблицаРезультат.Колонки[Индекс].Имя;

					
									
					Если ИмяКолонки = "ДокументПартии"                ИЛИ
					     ИмяКолонки = "ДокументПолучения"             ИЛИ
					     ИмяКолонки = "ОрганизацияДокументаПолучения" ИЛИ
					     ИмяКолонки = "НомерСтроки"                   ИЛИ
					     ИмяКолонки = "Услуга"                        ИЛИ
					     ИмяКолонки = "Набор"                         Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));

					ИначеЕсли ИмяКолонки = "СерияНоменклатуры"
					        И ЕстьСерия Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.СерияНоменклатуры) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.СерияНоменклатуры);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "Склад"
					        И ЕстьСклад Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.Склад) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.Склад);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "ВидСклада"
					        И ЕстьСклад Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.ВидСклада) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.ВидСклада);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "Качество"
					        И ЕстьКачество Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.Качество) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.Качество);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "СпособСписанияОстаткаТоваров"
					        И ЕстьСпособСписания Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаКомплектующая.СпособСписанияОстаткаТоваров) Тогда
							НоваяСтрока.Установить(Индекс, СтрокаКомплект.Получить(Индекс));
						Иначе
							НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.СпособСписанияОстаткаТоваров);
						КонецЕсли;

					ИначеЕсли ИмяКолонки = "Номенклатура" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.Номенклатура);

					ИначеЕсли ИмяКолонки = "ХарактеристикаНоменклатуры" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.ХарактеристикаНоменклатуры);

					ИначеЕсли ИмяКолонки = "ЕдиницаИзмерения" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплектующая.ЕдиницаИзмерения);

					ИначеЕсли ИмяКолонки = "Комплект" Тогда
						НоваяСтрока.Установить(Индекс, Ложь);

					ИначеЕсли ИмяКолонки = "Количество" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплект.Количество * СтрокаКомплектующая.КоличествоХранения);

					ИначеЕсли ИмяКолонки = "КоличествоДок" Тогда
						НоваяСтрока.Установить(Индекс, СтрокаКомплект.КоличествоДок * СтрокаКомплектующая.Количество);

					ИначеЕсли ИмяКолонки = "МинусКоличество" Тогда
						НоваяСтрока.Установить(Индекс, - (СтрокаКомплект.КоличествоДок * СтрокаКомплектующая.Количество));

					ИначеЕсли ИмяКолонки = "МинусСебестоимость"
					        И ЕстьСебестоимость Тогда
						Себестоимость= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаКомплектующая.Себестоимость,
						               СтруктураШапкиДокумента.ВалютаДокумента,
						               СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
						               СтруктураШапкиДокумента.КурсДокумента,
						               СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
						               СтруктураШапкиДокумента.КратностьДокумента,
						               СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
						НоваяСтрока.Установить(Индекс, - (Себестоимость * СтрокаКомплект.КоличествоДок * СтрокаКомплектующая.Количество));

					ИначеЕсли ИмяКолонки = "НоменклатураКомплекта" Тогда
						НоваяСтрока.НоменклатураКомплекта = СтрокаКомплект.Номенклатура;
					ИначеЕсли ИмяКолонки = "ХарактеристикаКомплекта" Тогда
						НоваяСтрока.ХарактеристикаКомплекта = СтрокаКомплект.ХарактеристикаНоменклатуры;
					ИначеЕсли ИмяКолонки = "КоличествоКомплекта" Тогда
						НоваяСтрока.КоличествоКомплекта = КоличествоКомплекта;
						КоличествоКомплекта = 0;
					Иначе 
												
						НовоеЗначение = СтрокаКомплект.Получить(Индекс);
						Если (ТипЗнч(НовоеЗначение) = Тип("Число")) Тогда
							
							РапределеноПоказателя = 0;
							КолекцияРаспределяемыхПоказателей.Свойство(ИмяКолонки, РапределеноПоказателя);
							РапределеноПоказателя = ?(НЕ ЗначениеЗаполнено(РапределеноПоказателя), 0, РапределеноПоказателя);
							
							НовоеЗначение = ?((БазаЦены - РапределеноЦены) = 0, 0, (НовоеЗначение - РапределеноПоказателя) * СтрокаКомплектующая.Цена / (БазаЦены - РапределеноЦены));
							
							КолекцияРаспределяемыхПоказателей.Вставить(ИмяКолонки, НовоеЗначение + РапределеноПоказателя);
							
							
						Конецесли;
						НоваяСтрока.Установить(Индекс, НовоеЗначение);
					КонецЕсли;
				КонецЦикла;
								
				РапределеноЦены =  СтрокаКомплектующая.Цена + РапределеноЦены;
				
			КонецЦикла;

			ТаблицаРезультат.Удалить(СтрокаКомплект);
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаРезультат;

КонецФункции // СформироватьТаблицуКомплектующих()

// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
//  ДокументОбъект – объект редактируемого документа,
//  ИмяТЧ          – имя табличной части объекта.
//
Функция ПолучитьНовыйКлючСтроки(ДокументОбъект, ИмяТЧ = "Товары") Экспорт

	Если ДокументОбъект[ИмяТЧ].Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ДокументОбъект[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // ПолучитьНовыйКлючСвязи()

// Функция получает таблицу значений с "комплектующими".
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуКомплектующих(СтрокаТабличнойЧасти, ДатаДокумента = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарНоменклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ПарХарактеристика", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("ПарКлючСтроки"  , СтрокаТабличнойЧасти.КлючСтроки);

	Если ДатаДокумента <> Неопределено Тогда
		Запрос.УстановитьПараметр("Дата", ДатаДокумента);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СпецПредложения.Комплектующая КАК Номенклатура,
		|	СпецПредложения.ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
		|	СпецПредложения.Количество КАК Количество,
		|	СпецПредложения.Комплектующая.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	&ПарКлючСтроки КАК КлючСтроки,
		|	0 КАК Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		СкидкиНатуральные.СпецПредложение КАК СпецПредложение,
		|		СкидкиНатуральные.ХарактеристикаСпецПредложения КАК ХарактеристикаСпецПредложения,
		|		МАКСИМУМ(СкидкиНатуральные.Регистратор) КАК Регистратор
		|	ИЗ
		|		РегистрСведений.СкидкиНоменклатурыНатуральные.СрезПоследних(&Дата) КАК СкидкиНатуральные
		|	ГДЕ
		|		СкидкиНатуральные.СпецПредложение = &ПарНоменклатура
		|	  И СкидкиНатуральные.ХарактеристикаСпецПредложения = &ПарХарактеристика
		|	СГРУППИРОВАТЬ ПО
		|		СпецПредложение,
		|		ХарактеристикаСпецПредложения
		|	) КАК СкидкиНатуральные
		|СОЕДИНЕНИЕ
		|	РегистрСведений.СпецПредложения КАК СпецПредложения
		|	ПО СкидкиНатуральные.Регистратор = СпецПредложения.Регистратор
		|	И СкидкиНатуральные.СпецПредложение = СпецПредложения.Номенклатура
		|	И СкидкиНатуральные.ХарактеристикаСпецПредложения = СпецПредложения.ХарактеристикаНоменклатуры
		|";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегКомплектующие.Комплектующая               КАК Номенклатура,
		|	РегКомплектующие.ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
		|	РегКомплектующие.Количество                  КАК Количество,
		|	РегКомплектующие.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|	&ПарКлючСтроки                               КАК КлючСтроки
		|ИЗ
		|	РегистрСведений.КомплектующиеНоменклатуры КАК РегКомплектующие
		|ГДЕ
		|	РегКомплектующие.Номенклатура = &ПарНоменклатура
		| И РегКомплектующие.ХарактеристикаНоменклатуры = &ПарХарактеристика
		|УПОРЯДОЧИТЬ ПО
		|	РегКомплектующие.Комплектующая,
		|	РегКомплектующие.ХарактеристикаКомплектующей
		|";
	КонецЕсли;

	РезультатЗапроса     = Запрос.Выполнить();
	ТаблицаКомплектующих = РезультатЗапроса.Выгрузить();

	Возврат ТаблицаКомплектующих;

КонецФункции // ПолучитьТаблицуКомплектующих()

// Очистить состав набора в документе
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ОчиститьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ТабличнаяЧасть = ДокументОбъект.СоставНабора;

	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки);

	МассивЭлементов = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	КолвоЭлементов  = МассивЭлементов.Количество();
	
	СерНомераНабора = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("СерийныеНомераСоставНабора");
	Если СерНомераНабора <> Неопределено Тогда
		Для Каждого Элемент Из МассивЭлементов Цикл
			Если Элемент.КлючСвязи <> 0 Тогда
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("КлючСвязи", Элемент.КлючСвязи);
				СерийныеНомера = ДокументОбъект.СерийныеНомераСоставНабора.НайтиСтроки(СтруктураПоиска);
				Для Каждого СерийныйНомер Из СерийныеНомера Цикл
					ДокументОбъект.СерийныеНомераСоставНабора.Удалить(СерийныйНомер);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		ТабличнаяЧасть.Удалить(МассивЭлементов[КолвоЭлементов - ОбратныйИндекс]);
	КонецЦикла;

КонецПроцедуры // ОчиститьСоставНабора()

// Добавить состав набора в документ
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ДобавитьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Очистим состав набора.
	ОчиститьСоставНабора(СтрокаТабличнойЧасти, ДокументОбъект);

	Если Не СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокументы = Метаданные.Документы;

	ДокументыПродажи = Новый Соответствие;
	ДокументыПродажи.Вставить(МетаданныеДокументы["ЗаказПокупателя"]           , 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["ВозвратТоваровОтПокупателя"], 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["РеализацияТоваровУслуг"]    , 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["СчетНаОплатуПокупателю"]    , 0);
	ДокументыПродажи.Вставить(МетаданныеДокументы["ЧекККМ"]                    , 1);
	ДокументыПродажи.Вставить(МетаданныеДокументы["ОтчетОРозничныхПродажах"]   , 1);

	ТекДокументПродажи = ДокументыПродажи[ДокументОбъект.Метаданные()];

	Если ТекДокументПродажи = Неопределено Тогда
		ТекСпецПредложение = Ложь;
	Иначе
		ВидРеализации = ?(ТекДокументПродажи = 0, Перечисления.ВидыСкидок.Оптовая, Перечисления.ВидыСкидок.Розничная);

		ТекСпецПредложение = Ценообразование.ЭтоСпецПредложение(ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура,
		   СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		   Ценообразование.ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект));
	КонецЕсли;

	Если ТекСпецПредложение Тогда
		ТаблицаКомплектующих = ПолучитьТаблицуКомплектующих(СтрокаТабличнойЧасти, ДокументОбъект.Дата);
	Иначе
		ТаблицаКомплектующих = ПолучитьТаблицуКомплектующих(СтрокаТабличнойЧасти);
	КонецЕсли;

	ТабличнаяЧасть = ДокументОбъект.СоставНабора;
	СтруктураПоиска = Новый Структура;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаКомплектующих Цикл
		СтруктураПоиска.Вставить("Номенклатура"              , СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения"          , СтрокаТаблицы.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("КлючСтроки"                , СтрокаТаблицы.КлючСтроки);

		МассивСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);

		Если МассивСтрок.Количество() > 0 Тогда
			НоваяСтрока            = МассивСтрок[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + СтрокаТаблицы.Количество;
		Иначе
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

			Если ТекДокументПродажи <> Неопределено Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(НоваяСтрока, ДокументОбъект, ДокументОбъект.мВалютаРегламентированногоУчета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ДобавитьСоставНабора()

// Заполнить состав набора на основании
//
// Параметры:
//  ДокументОбъект    - объект редактируемого документа,
//  ДокументОснование - объект документа основания,
//
Процедура ЗаполнитьСоставНабораПоОснованию(ДокументОбъект, ДокументОснование, ПоискПоКлючу = Ложь) Экспорт

	Если ДокументОбъект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокумента   = ДокументОбъект.Метаданные();
	МетаданныеОснования   = ДокументОснование.Метаданные();
	ОснованиеЕстьСерия    = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеОснования, "Товары");
	ДокументЕстьСерия     = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, "Товары");
	ДокументСоставНабора  = ДокументОбъект.СоставНабора;
	ОснованиеСоставНабора = ДокументОснование.СоставНабора;
	ОснованиеТовар        = ДокументОснование.Товары;
	КолонкиСоставаНабора  = ДокументСоставНабора.Выгрузить().Колонки;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
		Если СтрокаТаблицы.КлючСтроки = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",           СтрокаТаблицы.ЕдиницаИзмерения);

		Если ПоискПоКлючу Тогда
			СтруктураПоиска.Вставить("КлючСтроки",             СтрокаТаблицы.КлючСтроки);
		Иначе
			СтруктураПоиска.Вставить("Цена",                   СтрокаТаблицы.Цена);
		КонецЕсли;

		Если ОснованиеЕстьСерия
		   И ДокументЕстьСерия Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры",      СтрокаТаблицы.СерияНоменклатуры);
		КонецЕсли;

		МассивСтрок = ОснованиеТовар.НайтиСтроки(СтруктураПоиска);

		Если МассивСтрок.Количество() > 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСтроки", МассивСтрок[0].КлючСтроки);
			МассивСтрок = ОснованиеСоставНабора.НайтиСтроки(СтруктураПоиска);

			Для Каждого Строка Из МассивСтрок Цикл
				НоваяСтрока            = ДокументСоставНабора.Добавить();
				НоваяСтрока.КлючСтроки = СтрокаТаблицы.КлючСтроки;

				Для Сч = 1 По КолонкиСоставаНабора.Количество() Цикл
					ИмяКолонки = КолонкиСоставаНабора[Сч - 1].Имя;

					Если ИмяКолонки <> "КлючСтроки"
					   И ИмяКолонки <> "НомерСтроки" Тогда

						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяКолонки, МетаданныеДокумента, "СоставНабора")
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяКолонки, МетаданныеОснования, "СоставНабора") Тогда
							НоваяСтрока[ИмяКолонки] = Строка[ИмяКолонки];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСоставНабораПоОснованию()

Процедура СообщитьОНедостаткеТовара(Требуется, Свободно = 0, ВРезерве = 0, КПередаче = 0, КПолучению = 0, Отказ, Заголовок="", Склад = "", ЗаказПоставщику = "", Номенклатура = "", Характеристика = "", Серия = "", Качество = "", ЕИ = "", СтрокаСообщения = "") Экспорт

	Если СтрокаСообщения = "" Тогда
		Если ВРезерве > 0 ИЛИ КПередаче > 0 Тогда
			СтрокаСообщения = "Свободного остатка ";
		Иначе
			СтрокаСообщения = "Остатка ";
		КонецЕсли;
	КонецЕсли;

	СтрокаСообщения = СтрокаСообщения + Номенклатура + Характеристика + Серия;
	СтрокаСообщения = СтрокаСообщения + ?(Качество = "", "", " с качеством " + Качество);
	Если ЗаказПоставщику <> "" И Склад <> "" Тогда
		СтрокаСообщения = СтрокаСообщения + " в заказах поставщикам на склад " + Склад + " недостаточно для размещения.";
	ИначеЕсли ЗаказПоставщику <> "" Тогда
		СтрокаСообщения = СтрокаСообщения + " заказанного по документу " + ЗаказПоставщику + " недостаточно для размещения.";
	ИначеЕсли Склад <> "" Тогда
		СтрокаСообщения = СтрокаСообщения + " на складе " + Склад + " недостаточно.";
	КонецЕсли;

	ОшибкаНетОстатка(СтрокаСообщения, Свободно , Требуется, ЕИ, Отказ, Заголовок);

	Если КПередаче > 0 Тогда
		Сообщить("К передаче " + КПередаче + " " + ЕИ);
	КонецЕсли;
	Если ВРезерве > 0 Тогда
		Сообщить("Зарезервировано " + ВРезерве + " " + ЕИ);
	КонецЕсли;
	Если КПолучению > 0 Тогда
		Сообщить("К получению "+ КПолучению + " "+ ЕИ);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНедостаткеТовара()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура контролирует лимиты возвратной тары, передаваемой покупателю по переданному документу
// и его табличной части. В случае превышения лимита выставляется флаг отказа и выдается сообщение.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  СтруктураШапкиДокумента - структура, содержащая значения "через точку" ссылочных реквизитов по шапке документа,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольЛимитовВозвратнойТарыПоставщика(ДокументОбъект, СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт

	ИмяТабличнойЧасти  = "ВозвратнаяТара";
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		возврат;
	КонецЕсли;

	ИмяДокумента       = ДокументОбъект.Метаданные().Имя;
	ИмяТаблицы         = ИмяДокумента + "." + СокрЛП(ИмяТабличнойЧасти);

	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ
	|	Документ." + ИмяТаблицы +"
	|ГДЕ Ссылка = &ДокументСсылка";


	Запрос = Новый Запрос;

	// Установим параметры запроса
	//Ссылка извлекается из ДокументОбъект
	//Значение СтрукрураШапкиДокумента.Ссылка использовать нельзя, 
	//	т.к. для документа КорректировкаЗаказаПоставщику там хранится ссылка на корректируемый заказ
	Запрос.УстановитьПараметр("ДокументСсылка",       ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",   СтруктураШапкиДокумента.ДоговорКонтрагента); 
	
	Запрос.УстановитьПараметр("СтатусПолучения",         Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);

	Запрос.Текст = "
	|ВЫБРАТЬ // Запрос, контролирующий остатки на складах
	|	Док.Номенклатура.Представление                         КАК НоменклатураПредставление,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков			   КАК ЕдиницаХраненияОстатков,
	|	СУММА(Док.Количество)                                  КАК ДокументКоличество, 
	|	ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0)       КАК ОстатокКоличество,
	|	МИНИМУМ(Лимиты.ЛимитПоставщика)                        КАК Лимит 
	|   
	|ИЗ 
	|	Документ." + ИмяТаблицы + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПолученные.Остатки(,
	|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|	И ДоговорКонтрагента = &ДоговорКонтрагента
	|	И СтатусПолучения       = &СтатусПолучения
	|	) КАК Остатки
	|ПО 
	|	Док.Номенклатура        = Остатки.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(,
	|		Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ")
	|	И ДоговорКонтрагента = &ДоговорКонтрагента
	|	) КАК Лимиты
	|ПО 
	|	Док.Номенклатура                = Лимиты.Номенклатура
	|
	|ГДЕ
	|	Док.Ссылка  =  &ДокументСсылка
	|	И НЕ Лимиты.ЛимитПоставщика ЕСТЬ NULL
	|	И Лимиты.ЛимитПоставщика > 0
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	Док.Номенклатура
	|
	|ИМЕЮЩИЕ ЕСТЬNULL(МАКСИМУМ(Остатки.КоличествоОстаток), 0) + СУММА(Док.Количество) > МИНИМУМ(Лимиты.ЛимитПоставщика)
	|
	|ДЛЯ ИЗМЕНЕНИЯ РегистрНакопления.ТоварыПолученные.Остатки // Блокирующие чтение таблицы остатков регистра для разрешения коллизий многопользовательской работы
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаСообщения = "По " + 
		УправлениеЗапасами.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, "", "") +
		" по договору """ + СокрЛП(СтруктураШапкиДокумента.ДоговорКонтрагента) + """ превышен лимит возвратной тары.";

		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения + Символы.ПС + Символы.Таб +
						   "Лимит " + (Выборка.Лимит) + " " + Выборка.ЕдиницаХраненияОстатков +
						   "; Получено ранее " + Выборка.ОстатокКоличество + " " + Выборка.ЕдиницаХраненияОстатков +
						   "; Заказано " + Выборка.ДокументКоличество + " " + Выборка.ЕдиницаХраненияОстатков, Ложь);

	КонецЦикла;

КонецПроцедуры
