////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ

// Функция проверяет корректность порядка назначения PLU для товаров,
// выгружаемых в ККМ в режиме Offline.
//
// Параметры
//  ПорядокНазначения - <ПеречислениеСсылка.ПорядокПрисвоенияPLU>
//                    - Проверяемое значение.
//
// Возвращаемое значение:
//   <Булево>         – Результат проверки.
//
Функция КорректныйПорядокНазначенияPLU(ПорядокНазначения) Экспорт

	Результат = Ложь;

	Если ПорядокНазначения = Перечисления.ПорядокПрисвоенияPLU.ПоПорядку Тогда
		Результат = Истина;
	ИначеЕсли ПорядокНазначения = Перечисления.ПорядокПрисвоенияPLU.ПоКодуНоменклатуры Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Результат
		|ИЗ
		|	РегистрСведений.ТоварыНаККМ КАК РегТовары1
		|СГРУППИРОВАТЬ ПО
		|	РегТовары1.Номенклатура,
		|	РегТовары1.КассаККМ
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегТовары1.Код) > 1
		|");

		Результат = Запрос.Выполнить().Пустой();
	КонецЕсли;

	Возврат Результат;

КонецФункции // КорректныйПорядокНазначенияPLU()

// Функция возвращает значение PLU для новой записи регистра сведений
// "ТоварыНаККМ" в соответствии с текущим порядком назначения PLU.
//
// Параметры
//  КассаККМ       - <СправочникСсылка.КассыККМ>
//                 - Касса, с которой будет связана запись.
//
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, для которой необходимо задать новый PLU.
//
// Возвращаемое значение:
//  <Число>        – Значение PLU.
//
Функция ПолучитьНовыйPLU(КассаККМ, Номенклатура) Экспорт

	Код     = 0;
	Порядок = Константы.ПорядокПрисвоенияPLU.Получить();

	Если Порядок = Перечисления.ПорядокПрисвоенияPLU.ПоКодуНоменклатуры Тогда
		КодСтрокой = СокрЛП(Номенклатура.Код);
		Для Сч = 1 По СтрДлина(КодСтрокой) Цикл
			ОчереднойСимвол = Сред(КодСтрокой, Сч, 1);
			Если КодСимвола(ОчереднойСимвол) < 48 ИЛИ КодСимвола(ОчереднойСимвол) > 57 Тогда
				КодСтрокой = СтрЗаменить(КодСтрокой, ОчереднойСимвол, "0");
			КонецЕсли;
		КонецЦикла;
		Попытка
			Код = Число(КодСтрокой);
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка присвоения PLU-кода для номенклатуры ""%1"" на кассе ""%2""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(Номенклатура), Строка(КассаККМ));
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|    ВЫБОР
		|        КОГДА ПзКоды.Код ЕСТЬ NULL ТОГДА
		|            1
		|        ИНАЧЕ
		|            ПзКоды.Код + 1
		|    КОНЕЦ КАК Код
		|ИЗ
		|    (
		|    ВЫБРАТЬ
		|        МАКСИМУМ(РегТовары.Код) КАК Код
		|    ИЗ
		|        РегистрСведений.ТоварыНаККМ КАК РегТовары
		|    ГДЕ
		|        РегТовары.КассаККМ = &КассаККМ) КАК ПзКоды");
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Код = Запрос.Выполнить().Выгрузить()[0].Код;
	КонецЕсли;

	Возврат Код;

КонецФункции // ПолучитьНовыйPLU()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ РАБОТЫ С ОБРАБОТКАМИ ОБСЛУЖИВАНИЯ

// Функция возвращает обработку обслуживания торгового оборудования.
//
// Параметры:
//  Модель                             - <СправочникСсылка.ТорговоеОборудование>
//                                     - Модель торгового оборудования, для
//                                       которой необходимо получить обработку
//                                       обслуживания.
//
//  Обработка                          - <ВнешняяОбработкаОбъект.*>
//                                     - Выходной параметр; обработка обслуживания,
//                                       соответствующая указанной модели торгового
//                                       оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибкиОбщие> - Результат выполнения операции.
//                                       В случае успешного завершения возвращается
//                                       пустая ссылка перечисления ТООшибкиОбщие.
//
Функция ПолучитьОбработкуОбслуживанияТО(Модель, Обработка) Экспорт

	Обработка = Неопределено;

	Попытка
		ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(РаботаСФайлами.ПолучитьИмяКаталога(), Модель.ОбработкаОбслуживания.ИмяФайла);
		Данные   = Модель.ОбработкаОбслуживания.Обработка;

		Данные.Получить().Записать(ИмяФайла);

		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	Исключение
		Результат = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиОбработкиОбслуживания;
		Возврат Результат;
	КонецПопытки;

	Попытка
		Форма     = Обработка.ПолучитьФорму();
		ВерсияAPI = ?(Форма.ПолучитьВерсиюAPI() <> 2.1, Форма.ПолучитьВерсиюAPI(), 2.01);
	Исключение
		Сообщить("Выбранная внешняя обработка не является обработкой
		               |обслуживания торгового оборудования.", СтатусСообщения.Внимание);
		Результат = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиОбработкиОбслуживания;
		Обработка = Неопределено;
		Возврат Результат;
	КонецПопытки;

	ВерсияAPIКонфигурации = ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО();

	Если Не ((ВерсияAPI >= ВерсияAPIКонфигурации) И (ВерсияAPI < Окр(ВерсияAPIКонфигурации, 0, РежимОкругления.Окр15как10) + 1)) Тогда
		Сообщить("" + Модель + "" + ":" + Символы.ПС
		+ "Версия API обработки обслуживания " + Формат(ВерсияAPI, "ЧЦ=5; ЧДЦ=2") + " не совпадает с версией API конфигурации " + Формат(ВерсияAPIКонфигурации, "ЧЦ=5; ЧДЦ=2") + "." + Символы.ПС
		+ "Обновите обработку обслуживания.", СтатусСообщения.Важное);
		Обработка = Неопределено;
		Результат = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиОбработкиОбслуживания;
		Возврат Результат;
	КонецЕсли;

	Возврат Перечисления.ТООшибкиОбщие.ПустаяСсылка();

КонецФункции // ПолучитьОбработкуОбслуживанияТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ, ОБЛЕГЧАЮЩИЕ РАБОТУ С РЕГИСТРОМ СВЕДЕНИЙ "ТОВАРЫ НА ККМ"

// Функция осуществляет получение информации о товаре по заданному номеру PLU.
//
// Параметры:
//  КассаККМ       - <СправочникСсылка.КассыККМ>
//                 - КассаККМ, для которой определён данный PLU.
//
//  ПЛУ            - <Число>
//                 - PLU товара, информацию о котором необходимо получить.
//
// Возвращаемое значение:
//  <Структура>,
//  <Неопределено> - В случае, если товар не найден, возвращается значение
//                   Неопределено. Иначе - структура со следующими полями:
//                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                - Номенклатура, которая соответствует
//                                                  переданному значению PLU.
//                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                - Единица измерения номенклатуры.
//                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                - Характеристика номенклатуры.
//                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                - Серия номенклатуры.
//                     Качество                   - <СправочникСсылка.Качество>
//                                                - Качество.
//
Функция ПолучитьОписаниеТовараККМ(КассаККМ, ПЛУ) Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА РегТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА РегТовары.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ РегТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	РегТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РегТовары.СерияНоменклатуры КАК СерияНоменклатуры
	|ИЗ
	|	РегистрСведений.ТоварыНаККМ КАК РегТовары
	|ГДЕ
	|	РегТовары.КассаККМ = &КассаККМ
	|	И РегТовары.Код = &ПЛУ");
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ПЛУ",      ПЛУ);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Новый Структура(
		                      "Качество, Номенклатура, ЕдиницаИзмерения, ХарактеристикаНоменклатуры, СерияНоменклатуры",
		                      Справочники.Качество.Новый);
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Иначе
		ТекстСообщения = НСтр("ru='Товар с кодом %1 на кассе ""%2"" не найден'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(Формат(ПЛУ,"ЧГ=0")), Строка(КассаККМ));
		ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьОписаниеТовараККМ()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ СО ШТРИХКОДАМИ

// Функция осуществляет ввод штрихкода пользователем.
//
// Возвращаемое значение:
//  Строка - введенный щтрихкод. Если пользователь отказался от ввода - возвращается пустая строка.
//
Функция ВвестиШтрихкод() Экспорт

	Результат = "";

	ВвестиСтроку(Результат, "Введите штрихкод");

	Возврат Результат;

КонецФункции // ВвестиШтрихкод()

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN8.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
Функция ТипШтрихкодаEAN8ТО(Штрихкод) Экспорт

	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 3;

	Если СтрДлина(Штрихкод) = 8 Тогда
		Индекс = Неопределено;
		Для Индекс = 1 По 7 Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 8) = Сумма + 48);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ТипШтрихкодаEAN8ТО()

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN13.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
Функция ТипШтрихкодаEAN13ТО(Штрихкод) Экспорт

	Результат = (СтрДлина(Штрихкод) = 13
	             И КонтрольныйСимволEAN13ТО(Штрихкод) = Прав(Штрихкод, 1));

	Возврат Результат;

КонецФункции // ТипШтрихкодаEAN13ТО()

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата CODE39.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  <Булево> - Результат проверки.
//
Функция ТипШтрихкодаCODE39ТО(Штрихкод) Экспорт

	Результат = Ложь;
	Длина     = СтрДлина(Штрихкод);
	Индекс    = Неопределено;

	Если Длина > 0 Тогда
		Результат = Истина;
		Для Индекс = 1 По Длина Цикл
			КодСимв = КодСимвола(Штрихкод, Индекс);
			Если (КодСимв <> 32)
			     И (КодСимв < 36 Или КодСимв > 37)
			     И (КодСимв <> 43)
			     И (КодСимв < 45 Или КодСимв > 57)
			     И (КодСимв < 65 Или КодСимв > 90) Тогда

				Результат = Ложь;
				Прервать;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ТипШтрихкодаCODE39ТО()

// Функция возвращает контрольный символ штрихкода EAN13.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Неполный штрихкод (12 символов), для которого вычисляется
//             контрольный 13-й символ.
//
// Возвращаемое значение:
//  <Строка> - Контрольный символ EAN13.
//
Функция КонтрольныйСимволEAN13ТО(Штрихкод) Экспорт

	Результат   = "";
	Сумма       = 0;
	Коэффициент = 1;

	Индекс = Неопределено;
	Для Индекс = 1 По 12 Цикл
		КодСимв     = КодСимвола(Штрихкод, Индекс);
		Сумма       = Сумма + Коэффициент * (КодСимв - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма     = (10 - Сумма % 10) % 10;
	Результат = Символ(Сумма + 48);

	Возврат Результат;

КонецФункции // КонтрольныйСимволEAN13ТО()

// Функция вычисляет контрольный символ кода EAN
//
// Параметры:
//  ШтрихКод     - штрихкод (без контрольной цифры)
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ штрихкода
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()

// Проверка штрихкода на корректность
//
// Параметры:
//  ШтрихКод     - проверяемый штрихкод;
//  ТипШтрихкода - элемент плана видов характеристик "ТипыШтрихкодов", содержит тип
//                 проверяемого штрихкода.
//
// Возвращаемое значение:
//  Истина если штрих код корректен, иначе Ложь
//
Функция ПроверитьШтрихКод(ШтрихКод, ТипШтрихкода) Экспорт

	ДлинаКода = СтрДлина(Штрихкод);

	Если ДлинаКода = 0 Тогда
		Возврат Ложь;
	Иначе
		Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			Если (ДлинаКода <> 13)
			 Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			 Или КонтрольныйСимволEAN(Лев(Штрихкод,12), 13) <> Прав(Штрихкод, 1) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8 Тогда
			Если (ДлинаКода <> 8)
			 Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			 Или КонтрольныйСимволEAN(Лев(Штрихкод, 7), 8 ) <> Прав(Штрихкод, 1) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39 Тогда
			Условие = СтрДлина(ШтрихКод) - 1;
			Для Индекс = 0 По Условие Цикл
				Символ = Лев(Прав(Штрихкод, Условие - Индекс + 1), 1);
				Если НЕ (((Символ >= "0") И (Символ <= "9"))
					ИЛИ	((Символ >= "A") И (Символ <= "Z"))
					ИЛИ (Символ = "-")
					ИЛИ (Символ = ".")
					ИЛИ (Символ = " ")
					ИЛИ (Символ = "$")
					ИЛИ (Символ = "/")
					ИЛИ (Символ = "+")
					ИЛИ (Символ = "%")
					ИЛИ (Символ = "*")) Тогда
					Возврат Ложь;
				КонецЕсли
			КонецЦикла;
		ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code128 
				ИЛИ ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
			Условие = СтрДлина(ШтрихКод) - 1;
			Для Индекс = 0 По Условие Цикл
				Если КодСимвола(ШтрихКод, Индекс) > 127 Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьШтрихКод()

// Функция осуществляет формирование нового внутреннего штрихкода для
// штучного товара
//
// Параметры
//  Код  – <Число> 
//       – Измерение "Код" регистра сведений Штрихкоды
//
// Возвращаемое значение:
//  <Строка>
//       – сформированный штрихкод
//
Функция СформироватьШтрихКод(Знач ПрефиксШтучногоТовара = Неопределено, Знач ПрефиксВнутреннегоШтрихкода = Неопределено) Экспорт

	Если ПрефиксШтучногоТовара = Неопределено Тогда
		ПрефиксШтучногоТовара = СокрЛП(Константы.ПрефиксШтучногоТовара.Получить());
	КонецЕсли;

	Если ПрефиксВнутреннегоШтрихкода = Неопределено Тогда
		ПрефиксВнутреннегоШтрихкода = Константы.ПрефиксВнутреннегоШтрихкода.Получить();
	КонецЕсли;

	ПрефиксШтучногоТовара = ?(ПустаяСтрока(ПрефиксШтучногоТовара), "0", ПрефиксШтучногоТовара);
	ПрефиксВнутреннегоШтрихкода = Формат(ПрефиксВнутреннегоШтрихкода, "ЧЦ=2; ЧН=; ЧВН=");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(РегШтрихКоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК РегШтрихКоды
	|ГДЕ
	|	РегШтрихКоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
	|	И РегШтрихКоды.Штрихкод ПОДОБНО ""2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + "_________""
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ТекКод = ?(Выборка.Код = NULL, 1, Мин(ОбщегоНазначения.ПривестиСтрокуКЧислу(Выборка.Код) + 1, 99999999));

	Штрихкод = "2" + ПрефиксШтучногоТовара + ПрефиксВнутреннегоШтрихкода + Формат(ТекКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()

// Проверка наличия в передаваемот штрихкоде только цифр
//
// Параметры:
//  ШтрихКод     - проверяемый штрихкод
//
// Возвращаемое значение:
//  Истина если штрих код только из цифр, иначе Ложь
//
Функция ТолькоЦифры(Штрихкод)

	Для Сч = 1 По СтрДлина(Штрихкод) Цикл
		Символ = Сред(Штрихкод, Сч, 1);
		Если НЕ(Найти("0123456789", Символ)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции // ТолькоЦифры()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ, ОБЛЕГЧАЮЩИЕ ПОДБОР НОМЕНКЛАТУРЫ ПРИ ИСПОЛЬЗОВАНИИ СКАНЕРА

// Функция возвращает структуру, которая может в дальнейшем использоваться в
// обработке подбора.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>, <Неопределено>
//                 - Номенклатура, подбор которой осуществляется. В случае,
//                   если задан параметр "СерийныйНомер", значение данного
//                   параметра игнорируется.
//
//  Характеристика - <СправочникСсылка.ХарактеристикиНоменклатуры>, <Неопределено>
//                 - Характеристика подбираемой номенклатуры.  В случае,
//                   если задан параметр "СерийныйНомер", значение данного
//                   параметра игнорируется.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>, <Неопределено>
//                 - Серия подбираемой номенклатуры.  В случае,
//                   если задан параметр "СерийныйНомер", значение данного
//                   параметра игнорируется.
//
//  Качество       - <СправочникСсылка.Качество>, <Неопределено>
//                 - Качество подбираемой номенклатуры.  В случае,
//                   если задан параметр "СерийныйНомер", значение данного
//                   параметра игнорируется.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>, <Неопределено>
//                 - Единица измерения подбираемой номенклатуры.  В случае,
//                   если задан параметр "СерийныйНомер", значение данного
//                   параметра игнорируется.
//
//  Количество     - <Число>
//                 - Количество подбираемой номенклатуры.
//
//  Валюта         - <СправочникСсылка.Валюты>
//                 - Используемая валюта.
//
//  СерийныйНомер  - <СправочникСсылка.СерийныеНомера>, <Неопределено>
//                 - Серийный номер. В случае, если данный параметр не задан,
//                   осуществляется обычный подбор номенклатуры. В противном
//                   случае - подбор по серийному номеру.
//
//  СкладыВТЧ      - <Булево>
//                 - Признак необходимости указания складов в табличной части документа.
//
//  ТипЦен         - <СправочникСсылка.ТипыЦенНоменклатуры>, <СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов>
//                 - Тип цен номенклатуры.
//
//  Контрагент     - <СправочникСсылка.Контрагенты>
//                 - Необязательный параметр; контрагент, для которого осуществляется
//                   получение цены номенклатуры.
//
//  Договор        - <СправочникСсылка.ДоговорыКонтрагентов>
//                 - Необязательный параметр; договор контрагентов.
//
// Возвращаемое значение:
//  <Структура>    - Структура, которая может в дальнейшем использоваться в
//                   обработке подбора.
//
Функция СформироватьСтруктуруПодбора(Знач ДатаЦен, Знач Номенклатура, Знач Характеристика, Знач Серия,
                                     Знач Качество, Знач Единица, Знач Количество, Знач Валюта,
                                     Знач СерийныйНомер, Знач СкладыВТЧ, Знач ТипЦен,
                                     Знач Контрагент = Неопределено,
                                     Знач Договор = Неопределено,
                                     Знач УсловиеПродаж = Неопределено,
                                     Знач Склад = Неопределено) Экспорт

	Результат = Новый Структура();

	Если ЗначениеЗаполнено(СерийныйНомер) Тогда
		Номенклатура   = СерийныйНомер.Владелец;
		Единица        = Номенклатура.ЕдиницаХраненияОстатков;
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Серия          = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Качество       = Справочники.Качество.Новый;
		Количество     = 1;
		Результат.Вставить("СерийныйНомер", СерийныйНомер);
	КонецЕсли;

	Цена = 0;
	Если Склад <> Неопределено И Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДатаЦен, Номенклатура,
		   Характеристика, Единица, Склад, УсловиеПродаж);
	Иначе
		Если ТипЦен <> Неопределено Тогда
			Если Контрагент = Неопределено Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, ТипЦен, ДатаЦен, Единица, Валюта, , , , Договор, УсловиеПродаж);
			Иначе
				Цена = Ценообразование.ПолучитьЦенуКонтрагента(Номенклатура, Характеристика, Контрагент, ТипЦен, ДатаЦен, Единица, Валюта, , , Договор, УсловиеПродаж);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Результат.Вставить("СпособЗаполненияЦен",      Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	Результат.Вставить("ВалютаЦены",               Валюта);
	Результат.Вставить("Номенклатура",             Номенклатура);
	Результат.Вставить("ЕдиницаИзмерения",         Единица);
	Результат.Вставить("Количество",               Количество);
	Результат.Вставить("Цена",                     Цена);
	Результат.Вставить("Характеристика",           Характеристика);
	Результат.Вставить("Серия",                    Серия);
	Результат.Вставить("Качество",                 Качество);
	Результат.Вставить("ЕстьСкладВТабличнойЧасти", СкладыВТЧ);
	Результат.Вставить("Команда",                  "ПодборВТабличнуюЧасть");

	Возврат Результат;

КонецФункции // СформироватьСтруктуруПодбора()

// Функция формирует список значений по переданному массиву устройств.
//
// Параметры:
//  МассивУстройств - Массив устройств ТО.
//
// Возвращаемое значение:
//  СписокЗначений - сформированный список значений.
//
Функция ПолучитьСписокУстройствТОДляВыбора(МассивУстройств) Экспорт

	Перем ВидУстройства;
	Перем ПредставлениеУстройства;

	СписокУстройств = Новый СписокЗначений;

	Для Каждого Устройство Из МассивУстройств Цикл
		ПолучитьСерверТО().ПолучитьПредставлениеУстройства(Устройство, ВидУстройства, ПредставлениеУстройства);
		СписокУстройств.Добавить(Устройство, ПредставлениеУстройства);
	КонецЦикла;

	Возврат СписокУстройств;

КонецФункции // ПолучитьСписокУстройствДляВыбора()

// Функция определяет и проверяет эквайринговую систему и фискальный регистратор.
//
// Параметры:
//  ЭС - В эту переменную будет возвращена выбранная эквайринговая система.
//  ФР - В эту переменную будет возвращен выбранный фискальный регистратор.
//
// Возвращаемое значение:
//  Булево - Истина, если эквайринговая система и фискальный регистратор выбраны.
//
Функция ПолучитьПроверитьПараметрыДляОплатыКартой(ЭС, ФР) Экспорт

	ФР = ПолучитьЭлементТО(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	   "Необходимо выбрать фискальный регистратор", "Фискальный регистратор не подключен!");

	ЭС = ПолучитьЭлементТО(Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема,
	   "Необходимо выбрать эквайринговую систему", "Эквайринговая система не подключена!");

	Возврат ЗначениеЗаполнено(ФР) И ЗначениеЗаполнено(ЭС);

КонецФункции // ПолучитьПроверитьПараметрыДляОплатыКартой()

// Функция определяет и проверяет фискальный регистратор.
//
// Параметры:
//  ФР - В эту переменную будет возвращен выбранный фискальный регистратор.
//
// Возвращаемое значение:
//  Булево - Истина, если фискальный регистратор выбран.
//
Функция ПолучитьПроверитьПараметрыДляПробитияЧека(ФР) Экспорт

	ФР = ПолучитьЭлементТО(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	   "Необходимо выбрать фискальный регистратор", "Фискальный регистратор не подключен!");

	Возврат ЗначениеЗаполнено(ФР);

КонецФункции // ПолучитьПроверитьПараметрыДляПробитияЧека()

// Функция возвращает подключенный элемент ТО, вид которого передан параметром.
//
// Параметры:
//  ВидТО - вид торгового оборудования, подключенный элемент которого требуется получить.
//  ТекстЗаголовкаВыбора - текст заголовка для выбора.
//   Используется, когда подключено несколько элементов.
//  СообщениеНеПодключен - сообщение о том, что ни один элемент не подключен.
//
// Возвращаемое значение:
//  Нужный элемент торгового оборудования.
//
Функция ПолучитьЭлементТО(ВидТО, ТекстЗаголовкаВыбора, СообщениеНеПодключен)

	МассивТО = ПолучитьСерверТО().ПолучитьСписокУстройств(ВидТО);

	Если МассивТО.Количество() = 0 Тогда
		ЭлементТО = Неопределено;
		Предупреждение(СообщениеНеПодключен);
	ИначеЕсли МассивТО.Количество() = 1 Тогда
		ЭлементТО = МассивТО[0];
	Иначе
		ЭлементТО = ПолучитьСписокУстройствТОДляВыбора(МассивТО).ВыбратьЭлемент(ТекстЗаголовкаВыбора);
		Если ЭлементТО <> Неопределено Тогда
			ЭлементТО = ЭлементТО.Значение;
		КонецЕсли;
	КонецЕсли;

	Возврат ЭлементТО;

КонецФункции // ПолучитьТО()

// Функция выполняет проверку, что переданная информационная карта не является дисконтной.
// Если карта не является дисконтной, то выдается соответствующее предупреждение.
//
// Параметры:
//  ИнформационнаяКарта - ссылка справочника "Информационные карты".
//
// Возвращаемое значение:
//  Булево. Истина - если информационная карта не является дисконтной.
//
Функция ПроверитьСообщитьЧтоКартаНеДисконтная(ИнформационнаяКарта) Экспорт

	Если ИнформационнаяКарта.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
		Результат = Истина;
		Предупреждение("Считанная карта не является дисконтной.");
	Иначе
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьСообщитьЧтоКартаНеДисконтная()

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ, ОБЕСПЕЧИВАЮЩИЕ ЭКСПОРТ, ИМПОРТ И ОБНОВЛЕНИЕ ОБРАБОТОК ОБСЛУЖИВАНИЯ

// Функция возвращает информацию о обработках обслуживания, удовлетворяющих,
// если значение параметра "ИспользоватьФильтр" = Истина,
// критериям отбора. Дополнительно можно указать идентификатор.
//
// Параметры
//  Идентификатор      - <Строка>, <Неопределено>
//                     - В случае, если данный параметр имеет значение, отличное от
//                       "Неопределено", будет возвращён единственный элемент
//                       справочника, имеющий данный идентификатор. Если
//                       отбор исключает данное значение, то оно возвращено не будет.
//
//  Версия             - <Число>, <Неопределено>
//                       В случае, если данный параметр имеет значение, отличное от
//                       "Неопределено", элементы, имеющие данную или более позднюю
//                       версии, будут исключены.
//
//  ИспользоватьФильтр - <Булево>
//                     - В случае, если данный параметр имеет значение Истина,
//                       будет использоваться фильтр.
//
// Возвращаемое значение:
//  <ТаблицаЗначений>  - Таблица, содержащая информацию об обработках обслуживания
//
Функция ПолучитьОбработки(ВидТО = Неопределено) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    СпрОбработки.Код,
	|    СпрОбработки.Наименование,
	|    СпрОбработки.ПометкаУдаления,
	|    СпрОбработки.Ссылка,
	|    СпрОбработки.Описание,
	|    СпрОбработки.Вид,
	|    СпрОбработки.ИмяФайла,
	|    СпрОбработки.Версия,
	|    СпрОбработки.ВерсияAPI,
	|    СпрОбработки.Идентификатор,
	|    СпрОбработки.Обработка
	|ИЗ
	|    Справочник.ОбработкиОбслуживанияТО КАК СпрОбработки
	|ГДЕ
	|    СпрОбработки.ПометкаУдаления = Ложь
	|    " + ?(ВидТО = Неопределено, "", "И
	|    СпрОбработки.Вид = &ВидТО"));

	Если ВидТО <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидТО", ВидТО);
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьОбработки()

// Процедура осуществляет импорт обработок обслуживания.
//
// Параметры
//  КонтролироватьВерсии - <Булево>
//                       - В случае, если данный параметр имеет значение "Истина",
//                         будет осуществляться контроль версий обработок
//                         обслуживания.
//
Процедура ИмпортироватьОбработки(ПроцессОбновления, ВидТО = Неопределено, ИмпортироватьССайта = Ложь, АдресИПараметрыСервера = Неопределено) Экспорт

	СообщениеОбОшибке = "";

	СписокФайлов = Неопределено;
	КаталогОбработокОбслуживания = Неопределено;
	СоответствиеИменФайлов = Неопределено;
	ОбновленоЗаписей = 0;
	ДобавленоЗаписей = 0;
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");

	Если ИмпортироватьССайта Тогда
		КаталогОбработокОбслуживания = ЗагрузитьОбработкиССервера(АдресИПараметрыСервера, , , СообщениеОбОшибке);
		Если Не ЗначениеЗаполнено(КаталогОбработокОбслуживания) Тогда
			Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
				Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
			КонецЕсли;
			Возврат;
		КонецЕсли;

		СписокФайлов = НайтиФайлы(КаталогОбработокОбслуживания, "*.epf"); // Получаем список всех обработок в выбранном каталоге
	Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Заголовок = "Укажите каталог, содержащий обработки обслуживания";

		Пока Истина Цикл
			Если Не Диалог.Выбрать() Тогда // Выбирается каталог с обработками обслуживания
				Возврат;
			КонецЕсли;

			КаталогОбработокОбслуживания = Диалог.Каталог;
			СписокФайлов = НайтиФайлы(КаталогОбработокОбслуживания, "*.epf"); // Получаем список всех обработок в выбранном каталоге

			// Если не обнаружено ни одной обработки...
			Если СписокФайлов.Количество() = 0 Тогда
				Ответ = Вопрос("В указанном каталоге не обнаружены обработки обслуживания." + Символы.ПС + "Выбрать другой каталог?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Если не обнаружено ни одной обработки, то завершаем импорт
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЭлементыСправочника = ПолучитьОбработки(ВидТО); // Получаем из справочника "ОбработкиОбслуживанияТО" уже загруженные обработки
	ПолноеИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(КаталогОбработокОбслуживания, "\temp.epf"); // Временный файл для работы с ОО из справочника
	СоответствиеИмен = Новый Соответствие;

	// Индикатор хода работы с ОО справочника
	Индикатор.НаименованиеОбработкиДанных = "Обработка справочника обработок обслуживания";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = ЭлементыСправочника.Количество();
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	// Сначала выполняем обход справочника
	ОбрОбслуживания = Неопределено;
	Для Каждого ЭлементСправочника Из ЭлементыСправочника Цикл
		Индикатор.КомментарийОбработкиДанных = "Обработка элемента: " + ЭлементСправочника.Наименование;
		Попытка
			СоответствиеИмен.Вставить(ВРег(ЭлементСправочника.ИмяФайла), ЭлементСправочника.Ссылка);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		Индикатор.Значение = Индикатор.Значение + 1;
	КонецЦикла;

	Если ПроцессОбновления Тогда
		СоответствиеИменФайлов = Новый Соответствие;
		Для Каждого ИмяФайла Из СписокФайлов Цикл
			СоответствиеИменФайлов.Вставить(ВРег(ИмяФайла.Имя), ИмяФайла);
		КонецЦикла;
	КонецЕсли;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	// Индикатор хода работы с ОО из каталога
	Индикатор.НаименованиеОбработкиДанных = ?(ПроцессОбновления, "Обновление ","Импортирование ") + "обработок обслуживания";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = ?(ПроцессОбновления, ЭлементыСправочника.Количество(),СписокФайлов.Количество());
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	Если Не ПроцессОбновления Тогда
		Для Каждого ФайлОО Из СписокФайлов Цикл
			Индикатор.КомментарийОбработкиДанных = "Обработка файла: " + ФайлОО.Имя;
			Попытка
				ООИзФайла = ВнешниеОбработки.Создать(ФайлОО.ПолноеИмя);
				ОбрОбслуживания = ООИзФайла.ПолучитьФорму();
				ВерсияAPI = ?(ОбрОбслуживания.ПолучитьВерсиюAPI() <> 2.1, ОбрОбслуживания.ПолучитьВерсиюAPI(),2.01);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка при обработке файла: " + ФайлОО.Имя + Символы.ПС
					    + "Файл не является обработкой обслуживания торгового оборудования" + Символы.ПС
					    + "или содержит ошибки, не позволяющие выполнить загрузку," + Символы.ПС
					    + "либо формат обработки не соответствует текущей версии системы 1С:Предприятие.", , , СтатусСообщения.Внимание);
				Индикатор.Значение = Индикатор.Значение + 1;
				Продолжить;
			КонецПопытки;

			Если ВерсияAPI >= ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО() Тогда // Версия API обработки не соответствует версии API конфигурации, то пропускаем файл
				ООИзСправочника = СоответствиеИмен.Получить(ВРег(ФайлОО.Имя));
				Если ООИзСправочника = Неопределено Тогда
					ОбъектСправочника = Справочники.ОбработкиОбслуживанияТО.СоздатьЭлемент();
					Попытка
						Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ФайлОО.ПолноеИмя) Тогда
							ОбъектСправочника.Записать();
							ОбщегоНазначения.СообщитьОбОшибке("Элемент справочника """ + ОбъектСправочника.Наименование + """ (" + СокрЛП(Строка(ОбъектСправочника.Код)) + ") добавлен.", , , СтатусСообщения.Информация);
							ДобавленоЗаписей = ДобавленоЗаписей + 1;
						КонецЕсли;
					Исключение
						ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
					КонецПопытки;
				Иначе
					ОбъектСправочника = ООИзСправочника.Ссылка.ПолучитьОбъект();
					ВерсияИзСпр = ОбъектСправочника.Версия;// Получение версии ОО в справочнике
					ВерсияИзФайла = ООИзФайла.ПолучитьФорму().ПолучитьОписание().ВерсияОбработки;// Получение версии ОО из файла

					Если ВерсияИзСпр < ВерсияИзФайла Тогда // Если версия ОО из файла равна или меньше версии в справочнике, то не обновляемся
						Попытка
							Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ФайлОО.ПолноеИмя) Тогда
								ОбъектСправочника.Записать();
								ОбщегоНазначения.СообщитьОбОшибке("Элемент справочника """ + ОбъектСправочника.Наименование + """ (" + СокрЛП(Строка(ОбъектСправочника.Код)) + ") обновлен.", , , СтатусСообщения.Информация);
								ОбновленоЗаписей = ОбновленоЗаписей + 1;
							КонецЕсли;
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Не ПроцессОбновления Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Файл " + ФайлОО.Имя + " не загружен." + Символы.ПС 
					    + "Версия API обработки (" + Формат(ВерсияAPI, "ЧДЦ=2; ЧН=Ноль") + ") меньше версии API конфигурации (" 
					    + Формат(ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО(), "ЧДЦ=2; ЧН=Ноль") + ").", , , СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			Индикатор.Значение = Индикатор.Значение + 1;
		КонецЦикла;
	Иначе
		Для Каждого ООИзСправочника Из ЭлементыСправочника Цикл
			Индикатор.КомментарийОбработкиДанных = "Обработка элемента справочника: " + ООИзСправочника.Наименование;
			ФайлОО = СоответствиеИменФайлов.Получить(ВРег(ООИзСправочника.ИмяФайла));
			Если ФайлОО <> Неопределено Тогда
				Попытка
					ООИзФайла = ВнешниеОбработки.Создать(ФайлОО.ПолноеИмя);
					ОбрОбслуживания = ООИзФайла.ПолучитьФорму();
					ВерсияAPI = ?(ОбрОбслуживания.ПолучитьВерсиюAPI() <> 2.1, ОбрОбслуживания.ПолучитьВерсиюAPI(),2.01);
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Ошибка при обработке файла: " + ФайлОО.Имя + Символы.ПС
						    + "Файл не является обработкой обслуживания торгового оборудования" + Символы.ПС
						    + "или содержит ошибки, не позволяющие выполнить загрузку," + Символы.ПС
						    + "либо формат обработки не соответствует текущей версии системы 1С:Предприятие.", , , СтатусСообщения.Внимание);
					Индикатор.Значение = Индикатор.Значение + 1;
					Продолжить;
				КонецПопытки;

				Если ВерсияAPI >= ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО() Тогда // Версия API обработки не соответствует версии API конфигурации, то пропускаем файл
					ОбъектСправочника = ООИзСправочника.Ссылка.ПолучитьОбъект();
					ВерсияИзСпр = ОбъектСправочника.Версия;// Получение версии ОО в справочнике
					ВерсияИзФайла = ООИзФайла.ПолучитьФорму().ПолучитьОписание().ВерсияОбработки;// Получение версии ОО из файла

					Если ВерсияИзСпр < ВерсияИзФайла Тогда // Если версия ОО из файла равна или меньше версии в справочнике, то не обновляемся
						Попытка
							Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ФайлОО.ПолноеИмя) Тогда
								ОбъектСправочника.Записать();
								ОбщегоНазначения.СообщитьОбОшибке("Элемент справочника """ + ОбъектСправочника.Наименование + """ (" + СокрЛП(Строка(ОбъектСправочника.Код)) + ") обновлен.", , , СтатусСообщения.Информация);
								ОбновленоЗаписей = ОбновленоЗаписей + 1;
							КонецЕсли;
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Индикатор.Значение = Индикатор.Значение + 1;
		КонецЦикла;
	КонецЕсли;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	УдалитьФайлы(КаталогОбработокОбслуживания, "temp.epf");

	Сообщить("Процесс " + ?(ПроцессОбновления, "обновления", "загрузки") + " завершен." + Символы.ПС
	    + "Обработано файлов: " + ?(ПроцессОбновления, ЭлементыСправочника.Количество(),СписокФайлов.Количество()) + Символы.ПС + "Обновлено записей: " + Строка(ОбновленоЗаписей)
	    + ?(ПроцессОбновления, "", Строка(Символы.ПС + "Добавлено записей: " + ДобавленоЗаписей)) + Символы.ПС, СтатусСообщения.Информация);

КонецПроцедуры // ИмпортироватьОбработки()

// Процедура осуществляет экспорт обработок обслуживания.
//
// Параметры
//  ИспользоватьФильтр - <Булево>
//                     - В случае, если данный параметр имеет значение "Истина",
//                       будет использоваться фильтр.
//
Процедура ЭкспортироватьОбработки(ВидТО = Неопределено) Экспорт

	УспешноОбработано = 0;
	КаталогОбработокОбслуживания = Неопределено;

	ЭлементыСправочника = ПолучитьОбработки(ВидТО);
	Если ЭлементыСправочника.Количество() = 0 Тогда
		Предупреждение("Список экспортируемых обработок обслуживания пуст.");
		Возврат;
	КонецЕсли;

	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Укажите каталог, для сохранения обработок обслуживания";

	Пока Истина Цикл
		Если Не Диалог.Выбрать() Тогда // Выбирается каталог
			Возврат;
		КонецЕсли;

		// Проверка существования каталога на диске
		КаталогНаДиске = Новый Файл(Диалог.Каталог);
		Если Не КаталогНаДиске.Существует() Тогда
			Возврат;
		КонецЕсли;

		КаталогОбработокОбслуживания = Диалог.Каталог;
		СписокФайлов = НайтиФайлы(КаталогОбработокОбслуживания, "*.epf"); // Получаем список всех обработок в выбранном каталоге

		// Если в каталоге обнаружены обработки обслуживания
		Если СписокФайлов.Количество() <> 0 Тогда
			Ответ = Вопрос("В указанном каталоге обнаружены обработки обслуживания." 
			    + Символы.ПС + "Совпадающие обработки будут перезаписаны." 
			    + Символы.ПС + "Выбрать другой каталог?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Прервать;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Индикатор хода работы с ОО справочника
	Индикатор.НаименованиеОбработкиДанных = "Экспортирование обработок обслуживания";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = ЭлементыСправочника.Количество();
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	// Выполняем обход справочника
	Обработка = Неопределено;
	Для Каждого ЭлементСправочника Из ЭлементыСправочника Цикл
		Индикатор.КомментарийОбработкиДанных = "Обработка элемента: " + ЭлементСправочника.Наименование;
		
		Попытка
			ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(КаталогОбработокОбслуживания, ЭлементСправочника.ИмяФайла);

			ФайлНаДиске = Новый Файл(ИмяФайла);
			Если ФайлНаДиске.Существует() И ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
				Ответ = Вопрос("Файл " + ЭлементСправочника.ИмяФайла + " имеет атрибут ""Только на чтение"". Перезаписать?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
					ЭлементСправочника.Обработка.Получить().Записать(ИмяФайла);
					ФайлНаДиске.УстановитьТолькоЧтение(Истина);

					Сообщить("Файл " + ЭлементСправочника.ИмяФайла + " сохранен.", СтатусСообщения.Информация);
					УспешноОбработано = УспешноОбработано + 1;
				Иначе
					Сообщить("Файл " + ЭлементСправочника.ИмяФайла + " имеет атрибут ""Только на чтение"".", СтатусСообщения.Внимание);
				КонецЕсли;
			Иначе
				ЭлементСправочника.Обработка.Получить().Записать(ИмяФайла);
				Сообщить("Файл " + ЭлементСправочника.ИмяФайла + ": сохранен.", СтатусСообщения.Информация);
				УспешноОбработано = УспешноОбработано + 1;
			КонецЕсли;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать " + ЭлементСправочника.ИмяФайла 
			    + Символы.ПС + "Проверьте свободное место на диске, а также, что диск не защищен от записи.", , , СтатусСообщения.Внимание);
		КонецПопытки;

		Индикатор.Значение = Индикатор.Значение + 1;
	КонецЦикла;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	Сообщить("Процесс экспортирования завершен." + Символы.ПС + "Обработано записей: " + ЭлементыСправочника.Количество() 
	    + Символы.ПС + "Сохранено файлов: " + УспешноОбработано + Символы.ПС, СтатусСообщения.Информация);

КонецПроцедуры // ЭкспортироватьОбработки()

// Открывает помощника подключения и настройки торгового оборудования
//
Процедура ОткрытьПомощникПодключенияИНастройкиТО(ВидТО = Неопределено) Экспорт

	ФормаПомощника = Обработки.ТОНастройка.ПолучитьФорму("ФормаПомощникаНастроек");
	ФормаПомощника.мВидТОПоУмолчанию = ВидТО;
	ФормаПомощника.ОткрытьМодально();

КонецПроцедуры

// Открывает форму проверки и настройки обновлений обработок обслуживания
//
Процедура ОткрытьОбновлениеОбработокОбслуживания(АдресИПараметрыСервера) Экспорт

	СообщениеОбОшибке = "";
	ТаблицаОбработокССайта = ПолучитьСписокОбработокССайта(АдресИПараметрыСервера, , СообщениеОбОшибке);

	Если Не ПустаяСтрока(СообщениеОбОшибке) И АдресИПараметрыСервера.HTTP = Неопределено Тогда
		Сообщить("Не удалось выполнить операцию.
		|Проверьте наличие соединения с Интернетом и параметры подключения к ресурсу обновления обработок обслуживания.", СтатусСообщения.Важное);
		Возврат;
	ИначеЕсли СообщениеОбОшибке = "" И АдресИПараметрыСервера.HTTP = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТаблицаОбработокССайта) И АдресИПараметрыСервера.HTTP <> Неопределено Тогда
		Сообщить("Не удалось загрузить список обработок обслуживания с сайта.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	ФормаПроверкиОбновлений = Обработки.ТОНастройка.ПолучитьФорму("ФормаОбновленияОбработок");
	ФормаПроверкиОбновлений.мТаблицаОбработокССайта = ТаблицаОбработокССайта;
	ФормаПроверкиОбновлений.мАдресИПараметрыСервера = АдресИПараметрыСервера;

	Если ФормаПроверкиОбновлений.Открыта() Тогда
		ФормаПроверкиОбновлений.Активизировать();
	Иначе
		ФормаПроверкиОбновлений.Открыть();
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьДоступностьНовыхОбработок(АдресИПараметрыСервера, ТихийРежим = Ложь) Экспорт

	Результат = Ложь;
	СообщениеОбОшибке = "";

	ТаблицаОбработокИзСправочника = ПолучитьОбработки();

	ТаблицаОбработокССайта = ПолучитьСписокОбработокССайта(АдресИПараметрыСервера, , СообщениеОбОшибке);

	Если ЗначениеЗаполнено(ТаблицаОбработокССайта) Тогда
		Для Каждого СтрокаСправочника Из ТаблицаОбработокИзСправочника Цикл
			СтрокиТаблицыОбработокССайта = ТаблицаОбработокССайта.НайтиСтроки(Новый Структура("Имя", СтрокаСправочника.ИмяФайла));
			Если СтрокиТаблицыОбработокССайта.Количество() > 0 Тогда
				Для Каждого СтрокаТаблицыОбработокССайта Из СтрокиТаблицыОбработокССайта Цикл
					Если Число(СтрокаТаблицыОбработокССайта.ВерсияОбработки) > СтрокаСправочника.Версия
					   И Число(СтрокаТаблицыОбработокССайта.ВерсияAPI) >= СтрокаСправочника.ВерсияAPI Тогда
						Результат = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли АдресИПараметрыСервера.HTTP = Неопределено Тогда
		Если Не ПустаяСтрока(СообщениеОбОшибке) И Не ТихийРежим Тогда
			Сообщить(СообщениеОбОшибке + Символы.ПС +
			"Ошибка при проверке обновления обработок обслуживания!
			|Не удалось выполнить операцию.
			|Проверьте наличие соединения с Интернетом и параметры подключения 
			|к ресурсу обновления обработок обслуживания и повторите попытку.", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ ПОЛУЧЕНИЯ ОБРАБОТОК С САЙТА

// Получение файла описания обновления с сервера и загрузка обработок обслуживания 
// во временный каталог в соответствии с переданными условиями.
//
// АдресИПараметрыСервера - <Структура>
//                          Содержит адрес ресурса обработок и дополнительные параметры для подключения к ресурсу
//                            - АдресОбработок - <Строка>, адрес ресурса обработок.
//                            - ЛогинПрокси    - <Строка>, логин доступа к прокси-серверу
//                            - ПарольПрокси   - <Строка>, пароль доступа к прокси-серверу
//                            - ЛогинСервера   - <Строка>, логин доступа к серверу ресурса
//                            - ПарольСервера  - <Строка>, пароль доступа к серверу ресурса
//
// Результат - каталог с загруженными обработками
//
Функция ЗагрузитьОбработкиССервера(АдресИПараметрыСервера, ВидТО = Неопределено, ИмяОбработки = Неопределено, СообщениеОбОшибке = "") Экспорт

	КаталогОбработок = "";
	ЗаголовокДляАвторизации = "Загрузка обработки обслуживания с сайта";
	СообщениеДляАвторизации = "Для доступа к пользовательскому сайту укажите логин/код и пароль. Для всех версий, кроме базовых, необходимо наличие действующей подписки на ИТС.";

	СписокДоступныхДляОбновленияОбработок = ПолучитьСписокОбработокССайта(АдресИПараметрыСервера, ВидТО, СообщениеОбОшибке);

	Если ЗначениеЗаполнено(СписокДоступныхДляОбновленияОбработок) Тогда

		КаталогОбработок = КаталогВременныхФайлов() + "tempTWE_v2\";

		времАдресОбработок = Неопределено;
		HTTP               = Неопределено;
		времЛогинПрокси    = Неопределено;
		времПарольПрокси   = Неопределено;
		времЛогинСервера   = Неопределено;
		времПарольСервера  = Неопределено;

		АдресИПараметрыСервера.Свойство("АдресОбработок", времАдресОбработок);
		АдресИПараметрыСервера.Свойство("HTTP"          , HTTP);
		АдресИПараметрыСервера.Свойство("ЛогинПрокси"   , времЛогинПрокси);
		АдресИПараметрыСервера.Свойство("ПарольПрокси"  , времПарольПрокси);
		АдресИПараметрыСервера.Свойство("ЛогинСервера"  , времЛогинСервера);
		АдресИПараметрыСервера.Свойство("ПарольСервера" , времПарольСервера);

		АдресОбработок = ?(времАдресОбработок = Неопределено, "", времАдресОбработок);
		ЛогинПрокси    = ?(времЛогинПрокси    = Неопределено, "", времЛогинПрокси);
		ПарольПрокси   = ?(времПарольПрокси   = Неопределено, "", времПарольПрокси);
		ЛогинСервера   = ?(времЛогинСервера   = Неопределено, "", времЛогинСервера);
		ПарольСервера  = ?(времПарольСервера  = Неопределено, "", времПарольСервера);

		Если ЗначениеЗаполнено(АдресОбработок) Тогда
			//Загрузка с сервера необходимых обработок
			Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
			Индикатор.НаименованиеОбработкиДанных = "Загрузка с сервера обработок обслуживания";
			Индикатор.КомментарийОбработкиДанных  = "";
			Индикатор.КомментарийЗначения         = "Загружено";
			Индикатор.МаксимальноеЗначение        = СписокДоступныхДляОбновленияОбработок.Количество();
			Индикатор.Значение = 0;
			Если Индикатор.МаксимальноеЗначение > 0 Тогда
				Индикатор.Открыть();
			КонецЕсли;

			Результат = Истина;
			ЗагруженоОбработок = 0;
			Для Каждого СтрокаСписка Из СписокДоступныхДляОбновленияОбработок Цикл
				Индикатор.КомментарийОбработкиДанных = "Обработка файла: " + СтрокаСписка.Имя;

				Если ?(ВидТО = Неопределено, Истина, СтрокаСписка.Вид = ВидТО)
				   И ?(ИмяОбработки = Неопределено, Истина, СтрокаСписка.Имя = ИмяОбработки) Тогда
					Индикатор.КомментарийОбработкиДанных = "Загрузка файла: " + СтрокаСписка.Имя;

					АрхивОбработки = СтрЗаменить(СтрокаСписка.Имя, ".epf", ".zip");

					Если ЗагрузитьРесурсССайта(АдресОбработок + АрхивОбработки, КаталогОбработок, HTTP, ЛогинПрокси, ПарольПрокси, ЛогинСервера, ПарольСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации, СообщениеОбОшибке) = "" Тогда
						Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
							Сообщить(СообщениеОбОшибке + Символы.ПС + "Ошибка! Обработку """ + СтрокаСписка.Наименование + " (" + СтрокаСписка.Имя  + ")" + """ не удалось загрузить с сервера.", СтатусСообщения.Важное);
						КонецЕсли;
					Иначе
						// Сохранение обратно в структуре параметров доступа к ресурсу для дальнейшего использования на время работы клиента
						АдресИПараметрыСервера.Вставить("HTTP"          , HTTP);
						АдресИПараметрыСервера.Вставить("ЛогинПрокси"   , ЛогинПрокси);
						АдресИПараметрыСервера.Вставить("ПарольПрокси"  , ПарольПрокси);
						АдресИПараметрыСервера.Вставить("ЛогинСервера"  , ЛогинСервера);
						АдресИПараметрыСервера.Вставить("ПарольСервера" , ПарольСервера);

						//Распаковка обработки обслуживания
						Попытка
							Архиватор = Новый ЧтениеZipФайла(КаталогОбработок + АрхивОбработки);
							Архиватор.ИзвлечьВсе(КаталогОбработок, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
							Архиватор.Закрыть();
							УдалитьФайлы(КаталогОбработок + АрхивОбработки);

							ЗагруженоОбработок = ЗагруженоОбработок + 1;
						Исключение
							Сообщить("Ошибка при распаковке архива обработки """ + АрхивОбработки + """.", СтатусСообщения.Важное);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;

				Индикатор.Значение = Индикатор.Значение + 1;
			КонецЦикла;

			Если Индикатор.МаксимальноеЗначение > 0 Тогда
				Индикатор.Закрыть();
			КонецЕсли;

			Если ЗагруженоОбработок = 0 Тогда
				Возврат "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат КаталогОбработок;

КонецФункции

// Получение файла описания обновления с сервера и формирования таблицы значений
// доступных обработок обслуживания в соответствии с переданными условиями.
//
// АдресИПараметрыСервера - <Структура>
//                          Содержит адрес ресурса обработок и дополнительные параметры для подключения к ресурсу
//                            - АдресОбработок - <Строка>, адрес ресурса обработок.
//                            - ЛогинПрокси    - <Строка>, логин доступа к прокси-серверу
//                            - ПарольПрокси   - <Строка>, пароль доступа к прокси-серверу
//                            - ЛогинСервера   - <Строка>, логин доступа к серверу ресурса
//                            - ПарольСервера  - <Строка>, пароль доступа к серверу ресурса
//
// Результат - каталог с загруженными обработками
//
Функция ПолучитьСписокОбработокССайта(АдресИПараметрыСервера, ВидТО = Неопределено, СообщениеОбОшибке = "") Экспорт

	СписокОбработок = Неопределено;
	ЗаголовокДляАвторизации = "Получение списка обновлений обработок обслуживания с сайта";
	СообщениеДляАвторизации = "Для доступа к пользовательскому сайту укажите логин/код и пароль. Для всех версий, кроме базовых, необходимо наличие действующей подписки на ИТС.";

	времАдресОбработок = Неопределено;
	HTTP               = Неопределено;
	времЛогинПрокси    = Неопределено;
	времПарольПрокси   = Неопределено;
	времЛогинСервера   = Неопределено;
	времПарольСервера  = Неопределено;

	АдресИПараметрыСервера.Свойство("АдресОбработок", времАдресОбработок);
	АдресИПараметрыСервера.Свойство("ЛогинПрокси"   , времЛогинПрокси);
	АдресИПараметрыСервера.Свойство("HTTP"          , HTTP);
	АдресИПараметрыСервера.Свойство("ПарольПрокси"  , времПарольПрокси);
	АдресИПараметрыСервера.Свойство("ЛогинСервера"  , времЛогинСервера);
	АдресИПараметрыСервера.Свойство("ПарольСервера" , времПарольСервера);

	АдресОбработок = ?(времАдресОбработок = Неопределено, "", времАдресОбработок);
	ЛогинПрокси    = ?(времЛогинПрокси    = Неопределено, "", времЛогинПрокси);
	ПарольПрокси   = ?(времПарольПрокси   = Неопределено, "", времПарольПрокси);
	ЛогинСервера   = ?(времЛогинСервера   = Неопределено, "", времЛогинСервера);
	ПарольСервера  = ?(времПарольСервера  = Неопределено, "", времПарольСервера);

	СписокДоступныхДляОбновленияОбработок = Новый ТаблицаЗначений;
	СписокДоступныхДляОбновленияОбработок.Колонки.Добавить("Имя");
	СписокДоступныхДляОбновленияОбработок.Колонки.Добавить("Наименование");
	СписокДоступныхДляОбновленияОбработок.Колонки.Добавить("Описание");
	СписокДоступныхДляОбновленияОбработок.Колонки.Добавить("ВерсияОбработки");
	СписокДоступныхДляОбновленияОбработок.Колонки.Добавить("ВерсияAPI");
	СписокДоступныхДляОбновленияОбработок.Колонки.Добавить("Вид");
	СписокДоступныхДляОбновленияОбработок.Колонки.Добавить("Модели");

	Если ЗначениеЗаполнено(АдресОбработок) Тогда
		СсылкаНаРесурсОписаниеОбновлений = АдресОбработок + "TradeWareEPF.xml";
		КаталогФайловОбновления = КаталогВременныхФайлов() + "tempTWE_v2\";

		СерверОбновлений = "";
		АдресОбновлений  = "";
		РесурсОбновлений = "";

		ПолныйПутьКФайлуСпискаОбработок = ЗагрузитьРесурсССайта(СсылкаНаРесурсОписаниеОбновлений, КаталогФайловОбновления, HTTP, ЛогинПрокси, ПарольПрокси, ЛогинСервера, ПарольСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации, СообщениеОбОшибке);

		// Сохранение обратно в структуре параметров доступа к ресурсу для дальнейшего использования на время работы клиента
		АдресИПараметрыСервера.Вставить("HTTP"          , HTTP);
		АдресИПараметрыСервера.Вставить("ЛогинПрокси"   , ЛогинПрокси);
		АдресИПараметрыСервера.Вставить("ПарольПрокси"  , ПарольПрокси);
		АдресИПараметрыСервера.Вставить("ЛогинСервера"  , ЛогинСервера);
		АдресИПараметрыСервера.Вставить("ПарольСервера" , ПарольСервера);

		Если Не ПустаяСтрока(ПолныйПутьКФайлуСпискаОбработок) Тогда
			//Загрузка и разбор полученного с сервера файла описания обновлений "TradeWareEPF.xml"
			ФайлОписанияОбновлений = Новый ЧтениеXML;
			ФайлОписанияОбновлений.ОткрытьФайл(ПолныйПутьКФайлуСпискаОбработок);

			СтрокаСпискаДоступныхОбработок = Неопределено;
			ТекущийЭлемент = Неопределено;
			Пока ФайлОписанияОбновлений.Прочитать() Цикл
				Если ФайлОписанияОбновлений.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

					ТекущийЭлемент = ФайлОписанияОбновлений.Имя;
					Если ФайлОписанияОбновлений.Имя = "ОбработкаОбслуживания" Тогда
						СтрокаСпискаДоступныхОбработок = СписокДоступныхДляОбновленияОбработок.Добавить();
					ИначеЕсли ФайлОписанияОбновлений.Имя = "Модели"
					   И СтрокаСпискаДоступныхОбработок <> Неопределено Тогда
						СтрокаСпискаДоступныхОбработок[ТекущийЭлемент] = Новый Массив;
					КонецЕсли;

				ИначеЕсли ФайлОписанияОбновлений.ТипУзла = ТипУзлаXML.Текст Тогда

					Если ТекущийЭлемент = "Вид"
					   И СтрокаСпискаДоступныхОбработок <> Неопределено
					   И ?(ВидТО = Неопределено Или ПустаяСтрока(Строка(ВидТО)), Ложь, ФайлОписанияОбновлений.Значение <> Строка(ВидТО)) Тогда
						СписокДоступныхДляОбновленияОбработок.Удалить(СтрокаСпискаДоступныхОбработок);
						СтрокаСпискаДоступныхОбработок = Неопределено;

					ИначеЕсли ТекущийЭлемент = "Модель"
					   И СтрокаСпискаДоступныхОбработок <> Неопределено
					   И СтрокаСпискаДоступныхОбработок["Модели"] <> Неопределено Тогда
						 СтрокаСпискаДоступныхОбработок["Модели"].Добавить(ФайлОписанияОбновлений.Значение);

					ИначеЕсли ТекущийЭлемент <> Неопределено И СтрокаСпискаДоступныхОбработок <> Неопределено Тогда
						СтрокаСпискаДоступныхОбработок[ТекущийЭлемент] = ФайлОписанияОбновлений.Значение;
					КонецЕсли;

				ИначеЕсли ФайлОписанияОбновлений.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда

					Если ФайлОписанияОбновлений.Имя = "ОбработкаОбслуживания" Тогда
						СтрокаСпискаДоступныхОбработок = Неопределено;
					Иначе
						ТекущийЭлемент = Неопределено;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат СписокДоступныхДляОбновленияОбработок;

КонецФункции

// Получение файла с сервера.
//
Функция ЗагрузитьРесурсССайта(СсылкаНаРесурс, КаталогФайлов, HTTP = Неопределено, ЛогинПрокси = "", ПарольПрокси = "", ЛогинСервера = "", ПарольСервера = "", ЗаголовокДляАвторизации = "", СообщениеДляАвторизации = "", СообщениеОбОшибке = "")

	СерверОбновлений = "";
	АдресОбновлений  = "";
	РесурсОбновлений = "";

	СоставСсылки(СсылкаНаРесурс, СерверОбновлений, АдресОбновлений, РесурсОбновлений);

	УдалитьФайлы(КаталогФайлов + РесурсОбновлений);

	Результат = Получить(СерверОбновлений, АдресОбновлений, РесурсОбновлений, КаталогФайлов, , HTTP, ЛогинПрокси, ПарольПрокси, ЛогинСервера, ПарольСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации,СообщениеОбОшибке);
	Если ПустаяСтрока(Результат) Тогда
		Возврат "";
	КонецЕсли;

	Возврат КаталогФайлов + РесурсОбновлений;

КонецФункции

// Получение заданного ресурса
//
// Параметры:
//  Ресурс - имя файл-ресурса (например: UpdSetup.exe)
// Возвращаемое значение:
//  Имя файла полученного ресурса. Тип - Строка. Если не получен - пустая строка
//
Функция Получить(Сервер, Адрес, Ресурс, Каталог, ДобавитьРесурс = Истина, HTTP = Неопределено, ЛогинПрокси = "", ПарольПрокси = "", ЛогинСервера = "", ПарольСервера = "", ЗаголовокДляАвторизации = "", СообщениеДляАвторизации = "", СообщениеОбОшибке = "")

	ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();
	СоздатьКаталог(Каталог);
	Результат = ОбработкаПолученияФайлов.ЗапроситьФайлыССервера(Сервер, Адрес + ?(ДобавитьРесурс, Ресурс, ""), Каталог + Ресурс, HTTP, Истина,
	                                                            ЛогинПрокси, ПарольПрокси, ЛогинСервера, ПарольСервера, ЗаголовокДляАвторизации, СообщениеДляАвторизации, СообщениеОбОшибке);

	Если НЕ Результат Тогда
		Возврат "";
	КонецЕсли;

	Файл      = Новый Файл(Каталог + Ресурс);
	Результат = Файл.ПолучитьТолькоЧтение();

	Если Результат Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
	КонецЕсли;

	Возврат Каталог + Ресурс;

КонецФункции

// Вспомогательная процедура выделения имени сервера, адреса ресурса и имя ресурса по ссылке
//
// Параметры
//  Ссылка  – <Строка> – исходная ссылка, содержащая имя сервера, адрес ресурса и имя ресурс
//  Сервер  – <Строка> – результат - имя сервера
//  Адрес   – <Строка> – результат - адрес ресурса
//  Ресурс  – <Строка> – результат - имя ресурса
//
Процедура СоставСсылки(Ссылка, Сервер, Адрес, Ресурс)

	Поз = Найти(НРег(Ссылка),".ru");

	Если Поз>0 Тогда

		М = Найти(НРег(Ссылка),"http://");
		М = ?(М=0,1,8);

		Сервер = Сред(Ссылка,М,Поз+3-М);

		Поз1 = Найти(Ссылка,"?");
		Поз1 = ?(Поз1=0,СтрДлина(Ссылка),Поз1-1);
		АдресРесурс = Сред(Ссылка,Поз+4,Поз1-Поз-3);
		Н    = СтрДлина(АдресРесурс);
		Поз2 = Н;
		Стр  = АдресРесурс;

		Пока Истина Цикл

			Н = Найти(Стр,"/");

			Если Н = 0 Тогда
				Прервать;
			КонецЕсли;

			Поз2 = Н;
			Стр  = Лев(Стр, Поз2 - 1) + " " + Сред(Стр, Поз2 + 1);

		КонецЦикла;

		Адрес = "/"+Лев(АдресРесурс, Поз2);
		Ресурс = СокрЛП(Сред(АдресРесурс, Поз2 + 1));

	КонецЕсли;

КонецПроцедуры // ПараметрыСсылки()
