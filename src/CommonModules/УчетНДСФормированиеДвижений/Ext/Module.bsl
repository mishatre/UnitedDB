//***********************************************************************************************
//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить поступление МПЗ или затрат в подсистеме учета НДС,
// а именно в регистре: "НДСПокупки"
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, ИдТабЧасти, Движения, Отказ) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС")
		или не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
		КонецЕсли;
		Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь и УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	ВыполнятьДвижения = Не СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС 
		ИЛИ (СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134 И СтруктураШапкиДокумента.УчетАгентскогоНДС);
	Если Не ВыполнятьДвижения Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	УчитыватьНДСПредъявленный = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДСПредъявленный = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;
	
	Если не УчитыватьНДСПредъявленный Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено;
	ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено;
	
	ХарактерЗатратНеВключаемыйВСоставКосвенныхРасходов = Новый СписокЗначений();
	ХарактерЗатратНеВключаемыйВСоставКосвенныхРасходов.Добавить(Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы);
	ХарактерЗатратНеВключаемыйВСоставКосвенныхРасходов.Добавить(Перечисления.ХарактерЗатрат.Прочие);

	ЕстьКолонка_СтатьяЗатрат = (не ТаблицаПредъявленногоНДС.Колонки.Найти("СтатьяЗатрат")=Неопределено);
	ЕстьКолонка_ХарактерЗатрат = (не ТаблицаПредъявленногоНДС.Колонки.Найти("ХарактерЗатрат")=Неопределено);
	ЕстьКолонка_ОтнесениеРасходовКДеятельностиЕНВД = (не ТаблицаПредъявленногоНДС.Колонки.Найти("ОтнесениеРасходовКДеятельностиЕНВД")=Неопределено);
	
	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		
		Если СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" и НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
			//По строкам АО, в которых не указана СФ записи в регистре не формируются 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДок.СуммаБезНДС = 0 И СтрокаДок.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаДок.ВидЦенности;

		Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
			// при проведении авансовых отчетов порядок заполнения данных измерений иной
			СтрокаДвижения.Поставщик   = СтрокаДок.Поставщик;
			СтрокаДвижения.СчетФактура = СтрокаДок.СчетФактура;
		Иначе
			СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
			СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;

		Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
			СтрокаДвижения.СтавкаНДС   = СтруктураШапкиДокумента.СтавкаНДС;
		Иначе
			СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
		КонецЕсли;	
		
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;
		
		СтрокаДвижения.ВидДвижения  = ВидДвиженияНакопления.Приход;

		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
		//************************************
		// Обработка специфических ситуаций
		
		Если СтруктураШапкиДокумента.СложныйУчетНДС и ЕстьКолонка_СтатьяЗатрат тогда
			
			СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
			Если ЕстьКолонка_ХарактерЗатрат Тогда
			    ХарактерЗатрат =  СтрокаДок.ХарактерЗатрат;
			Иначе
			    ХарактерЗатрат =  СтатьяЗатрат.ХарактерЗатрат;
			КонецЕсли;
			
			Если ЕстьКолонка_ОтнесениеРасходовКДеятельностиЕНВД Тогда
			    ОтнесениеРасходовКДеятельностиЕНВД =  СтрокаДок.ОтнесениеРасходовКДеятельностиЕНВД;
			Иначе
			    ОтнесениеРасходовКДеятельностиЕНВД =  СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД;
			КонецЕсли; 
			
			//КонецЕсли; 
			Если ЗначениеЗаполнено(ХарактерЗатрат) 
				И ХарактерЗатратНеВключаемыйВСоставКосвенныхРасходов.НайтиПоЗначению(ХарактерЗатрат) = Неопределено
				и не ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД
				Тогда
				
				Если ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
					ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.ВыгрузитьКолонки();
				КонецЕсли;
				
				СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();

				СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
				//СтрокаДвиженияКР.НалоговыйПериод= НачалоМесяца(СтруктураШапкиДокумента.Дата);
				
				СтрокаДвиженияКР.ВидЦенности	= СтрокаДок.ВидЦенности;

				Если (СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет") Тогда
					// при проведении авансовых отчетов порядок заполнения данных измерений иной
					СтрокаДвиженияКР.СчетФактура= СтрокаДок.СчетФактура;
				Иначе
					СтрокаДвиженияКР.СчетФактура= СтруктураШапкиДокумента.Ссылка;
				КонецЕсли;

				Если (СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеДопРасходов") Тогда
					СтрокаДвиженияКР.СтавкаНДС	= СтруктураШапкиДокумента.СтавкаНДС;
				Иначе
					СтрокаДвиженияКР.СтавкаНДС	= СтрокаДок.СтавкаНДС;
				КонецЕсли;	
					
				СтрокаДвиженияКР.НДСВключенВСтоимость = ?(СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость"),СтруктураШапкиДокумента.НДСВключенВСтоимость,Ложь);
				
				СтрокаДвиженияКР.СтатьяЗатрат = СтатьяЗатрат;
				
				СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
				СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
				
			КонецЕсли; 
		КонецЕсли;
		// Обработка специфических ситуаций
		//************************************
		
		//************************************
		// Отражение включения НДС в стоимость 
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") и СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда

			СтрокаДвижения2 = ТаблицаДвижений_НДСПредъявленный.Добавить();

			СтрокаДвижения2.Организация = СтрокаДвижения.Организация;
			СтрокаДвижения2.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвижения2.Поставщик   = СтрокаДвижения.Поставщик;
			СтрокаДвижения2.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвижения2.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
			
			СтрокаДвижения2.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвижения2.НДС         = СтрокаДвижения.НДС;
			
			СтрокаДвижения2.ВидДвижения  = ВидДвиженияНакопления.Расход;
			
			СтрокаДвижения2.Событие     = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			
			
			Если ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
				ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаДвиженияВкл = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();

			СтрокаДвиженияВкл.Организация = СтрокаДвижения.Организация;
			СтрокаДвиженияВкл.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвиженияВкл.Поставщик   = СтрокаДвижения.Поставщик;
			СтрокаДвиженияВкл.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвиженияВкл.СтавкаНДС   = СтрокаДвижения.СтавкаНДС;
			
			СтрокаДвиженияВкл.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвиженияВкл.НДС         = СтрокаДвижения.НДС;
			
		КонецЕсли;
		// Отражение включения НДС в стоимость 
		//************************************
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда

		Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
		Движения.НДСПредъявленный.Записать(Ложь);
		
	КонецЕсли;
	
	Если не ТаблицаДвижений_НДСКосвенныеРасходы = Неопределено Тогда
		Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
		Движения.НДСКосвенныеРасходы.ВыполнитьПриход();
		Движения.НДСКосвенныеРасходы.Записать(Ложь);
	КонецЕсли; 
	
	Если не ТаблицаДвижений_НДСВключенныйВСтоимость = Неопределено Тогда
		Движения.НДСВключенныйВСтоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
		Движения.НДСВключенныйВСтоимость.Записать(Ложь);
	КонецЕсли; 
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПредъявленный()

// Процедура вызывается из модулей документов прихода.
Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, НДСНеВлияетНаРасчеты = Ложь, ТаблицаАвансов = Неопределено,Сделка = Неопределено) Экспорт
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
	    СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// По расчетам документ отражаем всегда, даже если он не отражается для целей НДС.
	// Это необходимо для корректного построения FIFO по расчетам.
	ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено;
	
	Сумма = 0;
	ВалютнаяСумма = 0;
	Если НДСНеВлияетНаРасчеты Тогда
		НДС = 0;
		ВалютныйНДС = 0;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
		СчитатьВалютнуюСумму = Не ( СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ВалютаВзаиморасчетов));
		ВалютаРасчетов = ?(СчитатьВалютнуюСумму, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	Иначе
		СчитатьВалютнуюСумму = Ложь;
		ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	Для Каждого СтрокаДок из ТабЧасть Цикл
		Сумма = Сумма + СтрокаДок.СуммаБезНДС;
		Если СчитатьВалютнуюСумму Тогда
			ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.СуммаБезНДСВал;
		КонецЕсли;
		
		Если НДСНеВлияетНаРасчеты Тогда
			НДС = НДС + СтрокаДок.НДС;
			Если СчитатьВалютнуюСумму Тогда
				ВалютныйНДС = ВалютныйНДС + СтрокаДок.НДСВал;
			КонецЕсли;
		Иначе
			Сумма = Сумма + СтрокаДок.НДС;
			Если СчитатьВалютнуюСумму Тогда
				ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.НДСВал;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Не (Сумма = 0 и ВалютнаяСумма = 0) Тогда
		СтрокаДвижения = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Поставщик			= СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижения.Документ 			= СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижения.ВалютаРасчетов		= ВалютаРасчетов;
		СтрокаДвижения.Сделка				= Сделка;
		
		СтрокаДвижения.Сумма				= Сумма;
		Если СчитатьВалютнуюСумму Тогда
			СтрокаДвижения.ВалютнаяСумма	= ВалютнаяСумма;
		Иначе
			СтрокаДвижения.ВалютнаяСумма	= Сумма;
		КонецЕсли;
		
		СтрокаДвижения.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
		
		Если НДСНеВлияетНаРасчеты Тогда
			
			СтрокаДвиженияНДС = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
			
			СтрокаДвиженияНДС.Организация			= СтруктураШапкиДокумента.Организация;
			СтрокаДвиженияНДС.Поставщик				= СтруктураШапкиДокумента.Контрагент;
			СтрокаДвиженияНДС.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
			СтрокаДвиженияНДС.Документ 			= СтруктураШапкиДокумента.Ссылка;
			СтрокаДвиженияНДС.РасчетыСБюджетом		= Истина;
			СтрокаДвиженияНДС.Сделка				= Сделка;
			
			СтрокаДвиженияНДС.Сумма				= НДС;
			
			СтрокаДвиженияНДС.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
			
		КонецЕсли; 
		
	КонецЕсли; 
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	// при необходимости отражаем операции зачета аванса в подсистеме НДС
	Если не ТаблицаАвансов=Неопределено
		и не ?(СтруктураШапкиДокумента.Свойство("ВидДоговора"),СтруктураШапкиДокумента.ВидДоговора, СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора) = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		Тогда
		ТаблицаРаспределенныхОплат = ТаблицаАвансов.Скопировать();
		
		РазницаВКурсахОпределенаПриЗачете = (не ТаблицаРаспределенныхОплат.Колонки.Найти("КурсоваяРазница") = Неопределено);
	 	РасчетыВУсловныхЕдиницах = (СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") и СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
		
		Если РазницаВКурсахОпределенаПриЗачете и не РасчетыВУсловныхЕдиницах Тогда
		    ТаблицаРаспределенныхОплат.Колонки.Добавить("СуммаСУчетомКурсовой", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаАванса из ТаблицаРаспределенныхОплат Цикл
			Если СтрокаАванса.Сумма = 0 или НЕ ЗначениеЗаполнено(СтрокаАванса.Сделка) или НЕ ЗначениеЗаполнено(СтрокаАванса.ДокументОплаты) тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			ИначеЕсли РазницаВКурсахОпределенаПриЗачете и не РасчетыВУсловныхЕдиницах тогда
				//Сумма по курсу оплаты, необходимо определить сумму по курсу документа.
				СтрокаАванса.СуммаСУчетомКурсовой = СтрокаАванса.Сумма + СтрокаАванса.КурсоваяРазница;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаАванса из СтрокиКУдалению Цикл
			ТаблицаРаспределенныхОплат.Удалить(СтрокаАванса);
		КонецЦикла;
		Если не ТаблицаРаспределенныхОплат.Количество()=0 тогда
			
			СоответствиеКолонок = Новый Соответствие();
			СоответствиеКолонок.Вставить("Контрагент","Поставщик");
			СоответствиеКолонок.Вставить("ВалютаВзаиморасчетов","ВалютаРасчетов");
			СоответствиеКолонок.Вставить("Сделка","СчетФактура");
			СоответствиеКолонок.Вставить("СуммаВал","ВалютнаяСумма");
			УчетНДС.ПереименованиеКолонок(ТаблицаРаспределенныхОплат, СоответствиеКолонок);
			
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Организация");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Документ");
			
			// Погашение задолженности
			Если РазницаВКурсахОпределенаПриЗачете и не РасчетыВУсловныхЕдиницах Тогда
				ТаблицаРаспределенныхОплат.Колонки.Сумма.Имя = "СуммаБезКурсовой";
				ТаблицаРаспределенныхОплат.Колонки.СуммаСУчетомКурсовой.Имя = "Сумма";
			КонецЕсли; 
			
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("СчетФактура"),"Документ");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСРасчетыСПоставщиками);
			
			Если РазницаВКурсахОпределенаПриЗачете и не РасчетыВУсловныхЕдиницах Тогда
				ТаблицаРаспределенныхОплат.Колонки.Сумма.Имя = "СуммаСУчетомКурсовой";
				ТаблицаРаспределенныхОплат.Колонки.СуммаБезКурсовой.Имя = "Сумма";
			КонецЕсли; 
			
			// Погашение документов оплаты
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("ДокументОплаты"),"Документ");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСРасчетыСПоставщиками);
			
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам	= Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();

			// Отражение распределенной задолженности
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("РаспределеннаяСумма");
			Если РазницаВКурсахОпределенаПриЗачете и не РасчетыВУсловныхЕдиницах Тогда
				ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("СуммаСУчетомКурсовой"),"РаспределеннаяСумма");
			Иначе
				ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("Сумма"),"РаспределеннаяСумма");	
			КонецЕсли; 
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам);
			
		КонецЕсли;
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество()>0 Тогда
		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
	КонецЕсли; 	
	
	Если не ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = неопределено 
		и ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество()>0 
		Тогда
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
	КонецЕсли; 	
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность()

// Процедура вызывается из модулей документов списания
Процедура СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") 
		или не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
		КонецЕсли;
		Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
	    	СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда 
		
		Если ТипЗнч(Движения) = Тип("Структура") тогда
			ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.ТаблицаДвиженийНДСКосвенныеРасходы;
		Иначе	
			ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.НДСКосвенныеРасходы.ВыгрузитьКолонки();
		КонецЕсли;
		
		Для Каждого СтрокаДок Из ТаблицаДвиженийПартий Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
				// Обрабатываем только записи с заполненными счетами-фактурами
				Продолжить;
			КонецЕсли;
			
			Если Не СтруктураШапкиДокумента.Свойство("СтатьяЗатрат") Тогда
				Если ТаблицаДвиженийПартий.Колонки.Найти("СтатьяЗатрат") <> Неопределено Тогда
					СтатьяЗатрат = СтрокаДок.СтатьяЗатрат;
				Иначе
					СтатьяЗатрат = Неопределено;
				КонецЕсли;
			Иначе
				СтатьяЗатрат = СтруктураШапкиДокумента.СтатьяЗатрат;
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				// Необходимо включить запись в состав косвенных расходов для последующего распределения
				СтрокаДвиженияКР = ТаблицаДвижений_НДСКосвенныеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияКР,СтрокаДок); 
				
				СтрокаДвиженияКР.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвиженияКР.СтатьяЗатрат 	= СтатьяЗатрат;
				
				СтрокаДвиженияКР.СуммаБезНДС = СтрокаДок.Стоимость - СтрокаДок.НДС;
				СтрокаДвиженияКР.НДС         = СтрокаДок.НДС;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДвижений_НДСКосвенныеРасходы.Количество() > 0 тогда
			Если ТипЗнч(Движения) = Тип("Структура") тогда
				ТаблицаДвижений_НДСКосвенныеРасходы.ЗаполнитьЗначения(Движения.Период,"Период");
				Движения.ИзмененыДвиженияНДСКосвенныеРасходы = Истина;
			Иначе	
				Движения.НДСКосвенныеРасходы.мПериод          = СтруктураШапкиДокумента.Дата;
				Движения.НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвижений_НДСКосвенныеРасходы;
				Движения.НДСКосвенныеРасходы.ДобавитьДвижение();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы()

// Процедура вызывается из модулей документов прихода.
// Основная задача - отразить начисление НДС налогового агента в подсистеме учета НДС,
// а именно в регистре: "НДСНачисленный"
Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента,ДвиженияНДСПредъявленный,Движения) Экспорт
	
	ВидыЦенностей_Агентские = Новый списокЗначений();
	ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_Агентские.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);

	ТаблицаДвижений_НДСНачисленный = Неопределено;
	Для каждого СтрокаДвижений_НДСПредъявленный Из ДвиженияНДСПредъявленный Цикл
		Если СтрокаДвижений_НДСПредъявленный.ВидДвижения = ВидДвиженияНакопления.Приход 
			и не ВидыЦенностей_Агентские.НайтиПоЗначению(СтрокаДвижений_НДСПредъявленный.ВидЦенности) = Неопределено Тогда
			
			Если ТаблицаДвижений_НДСНачисленный = Неопределено тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
			КонецЕсли;
			СтрокаДвижений_НДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
			
			СтрокаДвижений_НДСНачисленный.Организация	= СтрокаДвижений_НДСПредъявленный.Организация;
			СтрокаДвижений_НДСНачисленный.Покупатель	= СтрокаДвижений_НДСПредъявленный.Поставщик;
			СтрокаДвижений_НДСНачисленный.СчетФактура	= СтрокаДвижений_НДСПредъявленный.СчетФактура;
			СтрокаДвижений_НДСНачисленный.ВидЦенности	= СтрокаДвижений_НДСПредъявленный.ВидЦенности;
			СтрокаДвижений_НДСНачисленный.СтавкаНДС		= СтрокаДвижений_НДСПредъявленный.СтавкаНДС;
			
			СтрокаДвижений_НДСНачисленный.СуммаБезНДС	= СтрокаДвижений_НДСПредъявленный.СуммаБезНДС;
			СтрокаДвижений_НДСНачисленный.НДС			= СтрокаДвижений_НДСПредъявленный.НДС;
			
			СтрокаДвижений_НДСНачисленный.Событие 		= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			СтрокаДвижений_НДСНачисленный.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
			
			СтрокаДвижений_НДСНачисленный.ВидДвижения	= ВидДвиженияНакопления.Приход;
			СтрокаДвижений_НДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.НДСНачисленКУплате;
		
		КонецЕсли; 
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда

		Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	
	КонецЕсли; 
	
КонецПроцедуры //СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС()

Процедура СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ, ЭтоВозврат = ложь,УчетнаяПолитикаНУ = Неопределено) Экспорт
    Перем СписокУслугОблагаемыхЕНВД;
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
	    СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС  И Не СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134 тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	УчитыватьНДС = Истина;

	Если СтруктураШапкиДокумента.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = СтруктураШапкиДокумента.УчитыватьНДС;
	КонецЕсли;
	
	Если не УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	КомиссияПоПокупателям = СтруктураШапкиДокумента.Свойство("КомиссияПоПокупателям") И СтруктураШапкиДокумента.КомиссияПоПокупателям;
	Если ТипЗнч(Движения) = Тип("Структура") тогда
		ТаблицаДвижений_НДСНачисленный	= Движения.ТаблицаДвиженийНДСНачисленный;
	Иначе	
		ТаблицаДвижений_НДСНачисленный	= Движения.НДСНачисленный.ВыгрузитьКолонки();
	КонецЕсли;
		
	ТаблицаДвижений_НДСРеализация0	= Неопределено;

	ЕстьКомиссионный = (не ТабЧасть.Колонки.Найти("Комиссионный")= неопределено);
	ЕстьДоговорКомиссии = (не ТабЧасть.Колонки.Найти("ДоговорКомиссии")= неопределено);
	ЕстьДокументПартии = (не ТабЧасть.Колонки.Найти("ДокументПартии")= неопределено);
	
	//Учет особенностей ЕНВД
	ОрганизацияЯвляетсяПлательщикомЕНВД = Ложь;
	РозничнаяТорговляОблагаетсяЕНВД = Ложь;
	
	Если УчетнаяПолитикаНУ = Неопределено Тогда
		ОшибкаПолученияУчетнойПолитики = Ложь;
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаПолученияУчетнойПолитики, СтруктураШапкиДокумента.Организация, "Нал");
		Если ОшибкаПолученияУчетнойПолитики Тогда
			УчетнаяПолитикаНУ = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	Если не УчетнаяПолитикаНУ = Неопределено Тогда
		ОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомЕНВД;
		РозничнаяТорговляОблагаетсяЕНВД 	= УчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД;
	КонецЕсли;
	
	ЕстьКолонка_Услуга = (не ТабЧасть.Колонки.Найти("Услуга") = неопределено);
	Если ЕстьКолонка_Услуга и ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
	    СписокУслугОблагаемыхЕНВД = УчетНДС.ПолучитьСписокУслугОблагаемыхЕНВД(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	КонецЕсли; 
	
	Для Каждого СтрокаВыбытия Из ТабЧасть Цикл
		
		ОтражатьНДСКомитента = Ложь;

		Если (ЕстьКомиссионный и СтрокаВыбытия.Комиссионный = Истина)
			или (СтрокаВыбытия.СуммаБезНДС + СтрокаВыбытия.НДС) = 0 
			тогда
			Продолжить;
		КонецЕсли;
		
		Если КомиссияПоПокупателям И НЕ СтрокаВыбытия.ВыставленСФ Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = СтрокаВыбытия.ВидЦенности;
		СтрокаДвижения.Покупатель  = ?(СтруктураШапкиДокумента.Свойство("Контрагент"),СтруктураШапкиДокумента.Контрагент,СтруктураШапкиДокумента.Организация);
		
		Если ЭтоВозврат Тогда
			ТипДокументаПартии = ТипЗнч(СтрокаВыбытия.ДокументПартии);
			Если ТипДокументаПартии =  Тип("ДокументСсылка.РеализацияТоваровУслуг") 
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
				Тогда
				СтрокаДвижения.СчетФактура = СтрокаВыбытия.ДокументПартии;
			Иначе
				СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;	
			КонецЕсли; 
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Возврат;
		ИначеЕсли КомиссияПоПокупателям Тогда
			СтрокаДвижения.Покупатель  = СтрокаВыбытия.Покупатель;
			СтрокаДвижения.СчетФактура = СтрокаВыбытия.СчетФактура;
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Реализация;
		Иначе	
			СтрокаДвижения.СчетФактура = СтруктураШапкиДокумента.Ссылка;
			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.Реализация;
		КонецЕсли; 
		СтрокаДвижения.СтавкаНДС   = СтрокаВыбытия.СтавкаНДС;
		
		СтрокаДвижения.СуммаБезНДС = СтрокаВыбытия.СуммаБезНДС*?(ЭтоВозврат,-1,1);
		СтрокаДвижения.НДС         = СтрокаВыбытия.НДС*?(ЭтоВозврат,-1,1);

		
		СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		Если СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
		ИначеЕсли СтрокаВыбытия.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Если не СписокУслугОблагаемыхЕНВД = Неопределено 
				и СтрокаВыбытия.Услуга
				и не СписокУслугОблагаемыхЕНВД.НайтиПоЗначению(СтрокаВыбытия.Ценность) = неопределено Тогда
				
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
				
			ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах"
				и РозничнаяТорговляОблагаетсяЕНВД
				и не (ЕстьКолонка_Услуга и СтрокаВыбытия.Услуга)
				Тогда
				
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
			ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" 
				и ЕстьДокументПартии
				и ТипЗнч(СтрокаВыбытия.ДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
				тогда
				
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияЕНВД;
				
			Иначе	
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			КонецЕсли; 
		Иначе
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
		КонецЕсли; 
		
		// Устанавливаем реквизиты движения
		СтрокаДвижения.Номенклатура = СтрокаВыбытия.Ценность;
		
		Если СтрокаВыбытия.СтавкаНДС = Ставка0 
			и не СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах"
			и не СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер"
			Тогда
			Если ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
				
				Если ТипЗнч(Движения) = Тип("Структура") тогда
					ТаблицаДвижений_НДСРеализация0 = Движения.ТаблицаДвиженийНДСРеализация0;
				Иначе	
					ТаблицаДвижений_НДСРеализация0	= Движения.НДСРеализация0.ВыгрузитьКолонки();
				КонецЕсли;
			КонецЕсли;
			СтрокаДвижения0 = ТаблицаДвижений_НДСРеализация0.добавить();
			
			СтрокаДвижения0.Организация = СтрокаДвижения.Организация;
			СтрокаДвижения0.ВидЦенности = СтрокаДвижения.ВидЦенности;
			СтрокаДвижения0.Покупатель  = СтрокаДвижения.Покупатель;
			СтрокаДвижения0.СчетФактура = СтрокаДвижения.СчетФактура;
			СтрокаДвижения0.СтавкаНДС   = Ставка0;
			СтрокаДвижения0.Состояние   = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
			
			СтрокаДвижения0.СуммаБезНДС = СтрокаДвижения.СуммаБезНДС;
			СтрокаДвижения0.НДС         = СтрокаДвижения.НДС;
			
			СтрокаДвижения0.Событие     = СтрокаДвижения.Событие;
			
			СтрокаДвижения0.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		КонецЕсли; 

	КонецЦикла;
	
		
	Если ТаблицаДвижений_НДСНачисленный.Количество() > 0 Тогда
		Если НЕ ТипЗнч(Движения) = Тип("Структура") тогда
		
			Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
			Движения.НДСНачисленный.ДобавитьДвижение();
			Движения.НДСНачисленный.Записать(Ложь);
		Иначе	
			ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.ИзмененыДвиженияНДСНачисленный = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Если не ТаблицаДвижений_НДСРеализация0 = Неопределено Тогда
		Если НЕ ТипЗнч(Движения) = Тип("Структура") тогда
			Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
			Движения.НДСРеализация0.ДобавитьДвижение();
			Движения.НДСРеализация0.Записать(Ложь);
		Иначе
			ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.ИзмененыДвиженияНДСРеализация0 = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации()

Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ, ТаблицаАвансов = Неопределено, ЭтоВозврат = ложь, Знач Сделка = Неопределено) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
	    СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// По расчетам документ отражаем всегда, даже если он не отражается для целей НДС.
	// Это необходимо для корректного построения FIFO по расчетам.
	Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСРасчетыСПокупателями") Тогда
		ТаблицаДвижений_НДСРасчетыСПокупателями	= Движения.ТаблицаДвиженийНДСРасчетыСПокупателями;
	Иначе	
		ТаблицаДвижений_НДСРасчетыСПокупателями	= Движения.НДСРасчетыСПокупателями.ВыгрузитьКолонки();
	КонецЕсли;
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Неопределено; 
	
	Сумма = 0;
	ВалютнаяСумма = 0;
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
	  	СчитатьВалютнуюСумму = Не ( СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ВалютаВзаиморасчетов));
		ВалютаРасчетов = ?(СчитатьВалютнуюСумму, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	Иначе
		СчитатьВалютнуюСумму = Ложь;
		ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	Для Каждого СтрокаДок из ТабЧасть Цикл
			
		Сумма = Сумма + СтрокаДок.СуммаБезНДС;
		Если СчитатьВалютнуюСумму Тогда
			ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.СуммаБезНДСВал;
		КонецЕсли;
		
		Сумма = Сумма + СтрокаДок.НДС;
		Если СчитатьВалютнуюСумму Тогда
			ВалютнаяСумма = ВалютнаяСумма + СтрокаДок.НДСВал;
		КонецЕсли;

	КонецЦикла;
	
	Если Не (Сумма = 0 и ВалютнаяСумма = 0) Тогда
		СтрокаДвижения = ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
		
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.Покупатель			= СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижения.Документ				= СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижения.ВалютаРасчетов		= ВалютаРасчетов;
		СтрокаДвижения.Сделка				= Сделка;

		СтрокаДвижения.Сумма				= Сумма;
		Если СчитатьВалютнуюСумму Тогда
			СтрокаДвижения.ВалютнаяСумма	= ВалютнаяСумма;
		Иначе
			СтрокаДвижения.ВалютнаяСумма	= Сумма;
		КонецЕсли;

		СтрокаДвижения.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.ВидДвижения			= ?(ЭтоВозврат,ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	КонецЕсли; 
	
	// при необходимости отражаем операции зачета аванса в подсистеме НДС
	Если не ЭтоВозврат и не ТаблицаАвансов = Неопределено
		и не ТаблицаАвансов.Количество() = 0 
		и не ?(СтруктураШапкиДокумента.Свойство("ВидДоговора"),СтруктураШапкиДокумента.ВидДоговора, СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора) = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		Тогда
		
		ТаблицаРаспределенныхОплат = ТаблицаАвансов.Скопировать();
		ТаблицаРаспределенныхОплат.Колонки.Добавить("СуммаОплатыРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("Сумма"),"СуммаОплатыРегл");
		
	 	РасчетыВУсловныхЕдиницах = (СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") и СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
		РазницаВКурсахОпределенаПриЗачете = (не ТаблицаРаспределенныхОплат.Колонки.Найти("КурсоваяРазница") = Неопределено);
		
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаАванса из ТаблицаРаспределенныхОплат Цикл
			Если СтрокаАванса.Сумма = 0 или НЕ ЗначениеЗаполнено(СтрокаАванса.Сделка) или НЕ ЗначениеЗаполнено(СтрокаАванса.ДокументОплаты) тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			ИначеЕсли РазницаВКурсахОпределенаПриЗачете и не РасчетыВУсловныхЕдиницах тогда
				//Сумма по курсу оплаты, необходимо определить сумму по курсу документа.
				СтрокаАванса.Сумма = СтрокаАванса.Сумма + СтрокаАванса.КурсоваяРазница;
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаАванса из СтрокиКУдалению Цикл
			ТаблицаРаспределенныхОплат.Удалить(СтрокаАванса);
		КонецЦикла;
		
		СформироватьДвиженияПоРаспределениюАвансов0(СтруктураШапкиДокумента, ТаблицаРаспределенныхОплат, Движения, Отказ);
		
		Если не ТаблицаРаспределенныхОплат.Количество()=0 тогда
			
			Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСУчетРаспределенныхОплатПокупателей") Тогда
				ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.ТаблицаДвиженийНДСУчетРаспределенныхОплатПокупателей;
			Иначе	
				ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей	= Движения.НДСУчетРаспределенныхОплатПокупателей.ВыгрузитьКолонки();
			КонецЕсли;
			
			СоответствиеКолонок = Новый Соответствие();
			СоответствиеКолонок.Вставить("Контрагент","Покупатель");
			СоответствиеКолонок.Вставить("ВалютаВзаиморасчетов","ВалютаРасчетов");
			СоответствиеКолонок.Вставить("Сделка","СчетФактура");
			СоответствиеКолонок.Вставить("СуммаВал","ВалютнаяСумма");
			Если РазницаВКурсахОпределенаПриЗачете Тогда
				СоответствиеКолонок.Вставить("КурсоваяРазница","КурсоваяРазница_Базовая") 
			КонецЕсли; 
			
			УчетНДС.ПереименованиеКолонок(ТаблицаРаспределенныхОплат, СоответствиеКолонок, Ложь);
			
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Организация");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("Документ");
			
			// Погашение задолженности
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("СчетФактура"),"Документ");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСРасчетыСПокупателями);
			
			// Погашение документов оплаты
			ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("ДокументОплаты"),"Документ");
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
				
			Если не РазницаВКурсахОпределенаПриЗачете Тогда
				ТаблицаОплат = ПолучитьДанныеПоЗадолженностиВалютныеДоговора(СтруктураШапкиДокумента, ТаблицаРаспределенныхОплат, Истина);
				ТаблицаРаспределенныхОплат.Колонки.Добавить("КурсоваяРазница_Базовая");
				Если ТаблицаОплат <> Неопределено Тогда
					СтруктураОтбора = Новый Структура("Покупатель, ДоговорКонтрагента, ДокументОплаты, ВалютаРасчетов");
					Для Каждого СтрокаТаблицы Из ТаблицаРаспределенныхОплат Цикл
						Если Не СтрокаТаблицы.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И СтрокаТаблицы.ДоговорКонтрагента.РеализацияНаЭкспорт И 
							Не СтрокаТаблицы.ВалютаРасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета тогда 
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
							СтрокиЗадолженности = ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
							Если СтрокиЗадолженности.Количество() > 0 Тогда
								Если не (СтрокаТаблицы.ВалютнаяСумма = 0 или СтрокиЗадолженности[0].ВалютнаяСумма = 0) Тогда
									СуммаПоКурсуОплаты = Окр(СтрокиЗадолженности[0].Сумма*СтрокаТаблицы.ВалютнаяСумма/СтрокиЗадолженности[0].ВалютнаяСумма,2);
								    СтрокаТаблицы.КурсоваяРазница_Базовая = СтрокаТаблицы.Сумма - СуммаПоКурсуОплаты;
									СтрокаТаблицы.СуммаОплатыРегл = СуммаПоКурсуОплаты;
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли; 

			УчетНДС.ПереименованиеКолонок(ТаблицаРаспределенныхОплат,Новый Структура("Сумма,СуммаОплатыРегл","СуммаЗадолженности","Сумма"));
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСРасчетыСПокупателями);

			// Отражение распределенной задолженности
			ТаблицаРаспределенныхОплат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			ТаблицаРаспределенныхОплат.Колонки.Добавить("РаспределеннаяСумма");
			
			Если РасчетыВУсловныхЕдиницах тогда
				ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("Сумма"),"РаспределеннаяСумма");
			Иначе
				ТаблицаРаспределенныхОплат.ЗагрузитьКолонку(ТаблицаРаспределенныхОплат.ВыгрузитьКолонку("СуммаЗадолженности"),"РаспределеннаяСумма");
				Если Не СтруктураШапкиДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах И СтруктураШапкиДокумента.ДоговорКонтрагента.РеализацияНаЭкспорт И 
					Не СтруктураШапкиДокумента.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета тогда
						ТаблицаРаспределенныхОплат.Колонки.КурсоваяРазница_Базовая.Имя = "КурсоваяРазница";
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРаспределенныхОплат, ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей);
			
		КонецЕсли;
	КонецЕсли;

	Если ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() > 0 Тогда
		Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСРасчетыСПокупателями") Тогда
			ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.ИзмененыДвиженияНДСРасчетыСПокупателями = Истина;
		Иначе	
			Движения.НДСРасчетыСПокупателями.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
			Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();
		КонецЕсли;
	КонецЕсли;
	
	Если не ЭтоВозврат 
		и не ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Неопределено 
		и ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество() > 0 
		Тогда
		
		Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСУчетРаспределенныхОплатПокупателей") Тогда
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.Вставить("ИзмененыДвиженияНДСУчетРаспределенныхОплатПокупателей",Истина);
		Иначе	
			Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
			Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность

Процедура СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Розница(СтруктураШапкиДокумента, ТабЧасть, Движения, Отказ) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
	    СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь и  УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
	КонецЕсли;              
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// По расчетам документ отражаем всегда, даже если он не отражается для целей НДС.
	// Это необходимо для корректного построения FIFO по расчетам.
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей	= Движения.НДСУчетРаспределенныхОплатПокупателей.ВыгрузитьКолонки();
	
	Сумма = 0;
	
	Для Каждого СтрокаДок из ТабЧасть Цикл
			
		Сумма = Сумма + СтрокаДок.СуммаБезНДС;
		Сумма = Сумма + СтрокаДок.НДС;

	КонецЦикла;
	
	Если Не (Сумма = 0) Тогда
		СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
		
		СтрокаДвижения.Организация			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.СчетФактура 			= СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижения.ДокументОплаты 		= СтруктураШапкиДокумента.Ссылка;

		СтрокаДвижения.РаспределеннаяСумма	= Сумма;

		СтрокаДвижения.ДатаСобытия			= СтруктураШапкиДокумента.Дата;
	КонецЕсли; 
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");

	Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество()>0 Тогда
		Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
		Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
	КонецЕсли; 	
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Розница

Процедура СформироватьДвиженияПоРаспределениюАвансов0(СтруктураШапкиДокумента, ТаблицаПоАвансам, Движения, Отказ)
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	
	Если Отказ Тогда
	    Возврат;
	КонецЕсли; 
	
	ДокументыОплатыПоАвансам = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаПоАвансам.ВыгрузитьКолонку("ДокументОплаты"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСсАвансовОстатки.СчетФактура,
	               |	ЕСТЬNULL(НДСсАвансовОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСсАвансовОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0.Сумма, 0) КАК Сумма,
	               |	НДСсАвансовОстатки.СтавкаНДС
	               |ИЗ
	               |	РегистрНакопления.НДСсАвансов.Остатки(
	               |		&Дата,
	               |		Организация = &Организация
	               |		    И Покупатель = &Покупатель
	               |		    И ДоговорКонтрагента = &ДоговорКонтрагента
	               |		    И СчетФактура В (&СписокСчетовФактур)) КАК НДСсАвансовОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК Сумма,
	               |			НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	               |			НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС
	               |		ИЗ
	               |			РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	               |				&Дата,
	               |				Организация = &Организация
	               |				    И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйРеализация0Остатки
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НДСПредъявленныйРеализация0Остатки.СчетФактура,
	               |			НДСПредъявленныйРеализация0Остатки.СтавкаНДС) КАК НДСПредъявленныйРеализация0
	               |		ПО НДСсАвансовОстатки.СчетФактура = НДСПредъявленныйРеализация0.СчетФактура
	               |			И НДСсАвансовОстатки.СтавкаНДС = НДСПредъявленныйРеализация0.СтавкаНДС";
				   
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Покупатель", СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СписокСчетовФактур", ДокументыОплатыПоАвансам);
					
	ТаблицаАвансов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаАвансов.Количество() <> 0 Тогда	
		ПараметрыОтбора = Новый Структура("ДокументОплаты", Неопределено);
		ТаблицаПоАвансам.Индексы.Добавить("ДокументОплаты");
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаАвансов Цикл
		
		ПараметрыОтбора.ДокументОплаты = СтрокаТаблицы.СчетФактура;
		СтрокиТаблицыПоАвансам = ТаблицаПоАвансам.НайтиСтроки(параметрыОтбора);
		СуммаАванса = 0;
		Для Каждого СтрокаПоАвансу Из СтрокиТаблицыПоАвансам Цикл;
			СуммаАванса = СуммаАванса + СтрокаПоАвансу.Сумма;
		КонецЦикла;
		СтрокаТаблицы.Сумма = Мин(?(СтрокаТаблицы.Сумма < 0, 0, СтрокаТаблицы.Сумма), СуммаАванса);
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаАвансов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаНДСНачисленный = Движения.НДСНачисленный.Выгрузить();
	
	СуммаРеализация0 = 0;
	СуммаНеРеализация0 = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаНДСНачисленный Цикл
		Если СтрокаТаблицы.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0 Тогда
			СуммаРеализация0 = СуммаРеализация0 + СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		Иначе
			СуммаНеРеализация0 = СуммаРеализация0 + СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = Неопределено;
		
	Для Каждого СтрокаТаблицы Из ТаблицаАвансов Цикл
		
		Если Не (УчетнаяПолитикаНУ.НДСИспользованиеОплатПокупателя_Приоритет0) И СуммаНеРеализация0 > 0 Тогда
			СуммаЗачета = Мин(СуммаНеРеализация0, СтрокаТаблицы.Сумма);
			СуммаНеРеализация0 = СуммаНеРеализация0 - СуммаЗачета;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаЗачета;
		КонецЕсли;
			
		Если (УчетнаяПолитикаНУ.НДСИспользованиеОплатПокупателя_Приоритет0 или ((СтрокаТаблицы.Сумма > 0) И (СуммаНеРеализация0 = 0))) и (СуммаРеализация0 > 0) Тогда
			СуммаЗачета = Мин(СуммаРеализация0, СтрокаТаблицы.Сумма);
			СуммаРеализация0 = СуммаРеализация0 - СуммаЗачета;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаЗачета;
			
			Если ТаблицаДвиженийНДСПредъявленныйРеализация0 = Неопределено Тогда
				ТаблицаДвиженийНДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
			КонецЕсли; 
			
			СтрокаДвижения = ТаблицаДвиженийНДСПредъявленныйРеализация0.Добавить();
			СтрокаДвижения.Организация 		= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетФактура 		= СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.Состояние 		= Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
			СтрокаДвижения.ДокументОтгрузки = СтруктураШапкиДокумента.Ссылка;
			СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
			СтрокаДвижения.СтавкаНДС		= СтрокаТаблицы.СтавкаНДС;
			СтрокаДвижения.НДС 				= УчетНДС.РассчитатьСуммуНДС(СуммаЗачета, Истина, Истина,
																	УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			СтрокаДвижения.СуммаБезНДС 		= СуммаЗачета - СтрокаДвижения.НДС;
			СтрокаДвижения.ДатаСобытия		= СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		КонецЕсли;                                                             		
		
	КонецЦикла;
	
	Если не ТаблицаДвиженийНДСПредъявленныйРеализация0 = Неопределено Тогда
		
		Движения.НДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДвиженияНДСНомераДокументовОплаты(Ссылка, Отказ) Экспорт
	
	СтруктураПараметров = Общегоназначения.ПолучитьЗначенияРеквизитов(Ссылка,"Ссылка,Дата,ДокументОснование");
	ТаблицаДвижений = Документы.СчетФактураВыданный.СформироватьТаблицуНомеровДокументовОплаты(СтруктураПараметров);	
	
	Если ТаблицаДвижений = Неопределено ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДвиженияНДСЗаписиКнигиПродаж = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
	ДвиженияНДСЗаписиКнигиПродаж.Отбор.Регистратор.Установить(Ссылка);	

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Запись = ДвиженияНДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
					
	КонецЦикла;

	ДвиженияНДСЗаписиКнигиПродаж.Записать();

КонецПроцедуры

//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС
//***********************************************************************************************




//***********************************************************************************************
// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// Непосредственное заполнение таблицы движений для регистра "НДСПартииТоваров"
// Данные движения необходимо делать в следующих случаях:
// 1. Когда ведется сложный учет НДС и происходит приходование товаров или материалов.
//    Это соответсвтвует ситуации когда у организации существуют виды деятельности, 
//    облагаемые НДС по-разному, например обычный НДС, НДС по ставке 0%, и т.п.).
// 2. Когда происходит оприходование оборудования, требуегощего монтажа (бухсчет 07)
//    для того чтобы впоследствии, можно было правильно рассчитать суммы для отражения в 
//    регистре НДССтроительство при передаче этого оборудования в монтаж.
Процедура СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента,ВходящаяТаблица, ТаблицаДвиженийНДСПартии, Отказ) экспорт
	
	Если ВходящаяТаблица.Количество()=0 тогда
		//Отрабатывать ничего не надо.
		Возврат;
	КонецЕсли;
	
	ТЗ = ВходящаяТаблица.Скопировать();
	
	Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
		Если Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
			СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", Ложь);
		КонецЕсли;
	КонецЕсли; 
	
    УчетНДС.ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, Отказ);
	
	Если ТЗ.Колонки.Найти("Партия") = неопределено тогда 
		ТЗ.Колонки.Добавить("Партия");
		ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	КонецЕсли;
	Если ТЗ.Колонки.Найти("Склад") = неопределено тогда 
		ТЗ.Колонки.Добавить("Склад",новый ОписаниеТипов("СправочникСсылка.Склады"));
		Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,"Склад");
		ИначеЕсли СтруктураШапкиДокумента.Свойство("СкладОрдер") Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладОрдер,"Склад");
			Иначе
				ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПриходногоОрдера,"Склад");
			КонецЕсли;
		КонецЕсли; 
	Иначе
		СкладИзШапки = Неопределено;
		Если СтруктураШапкиДокумента.Свойство("Склад") Тогда
			СкладИзШапкиДокумента = СтруктураШапкиДокумента.Склад;
		ИначеЕсли СтруктураШапкиДокумента.Свойство("СкладОрдер") Тогда
			Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				СкладИзШапкиДокумента = СтруктураШапкиДокумента.СкладОрдер;
			Иначе
				СкладИзШапкиДокумента = СтруктураШапкиДокумента.СкладПриходногоОрдера;
			КонецЕсли;
		КонецЕсли; 
		Для Каждого Строка Из ТЗ Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Склад) Тогда
				Строка.Склад = СкладИзШапкиДокумента;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("Услуга") = неопределено тогда 
		ТЗ.Колонки.Добавить("Услуга", новый описаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("НДСВключенВСтоимость")= Неопределено Тогда
		ТЗ.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
		Если СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость") Тогда
			ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВключенВСтоимость,"НДСВключенВСтоимость");
		КонецЕсли; 
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СчетФактура")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СчетФактура");
		ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"СчетФактура");
	КонецЕсли;
	
	Если ТЗ.Колонки.Найти("СтавкаНДС")= Неопределено Тогда
		ТЗ.Колонки.Добавить("СтавкаНДС");
		Если СтруктураШапкиДокумента.Свойство("СтавкаНДС") Тогда
		    ТЗ.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтавкаНДС,"СтавкаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	ЕстьСтоимость	= не ( ТЗ.Колонки.Найти("Стоимость") = Неопределено);
	ЕстьСуммаБезНДС	= не ( ТЗ.Колонки.Найти("СуммаБезНДС") = Неопределено);
	ЕстьНДС			= не ( ТЗ.Колонки.Найти("НДС") = Неопределено);
	ЕстьКодОперации = не ( ТЗ.Колонки.Найти("КодОперацииПартииТоваров") = Неопределено);
	
	ТЗ.Свернуть("СчетФактура, Партия,Склад, ВидЦенности,Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры,
				|НДСВключенВСтоимость, Услуга, СтавкаНДС"+
				?(ЕстьКодОперации,", КодОперацииПартииТоваров", ""),
		"Количество"+?(ЕстьСтоимость,", Стоимость", "") + ?(ЕстьСуммаБезНДС,", СуммаБезНДС","") + ?(ЕстьНДС,", НДС",""));
		
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
		
	Для Каждого СтрокаДок из ТЗ Цикл
		
		Если СтруктураШапкиДокумента.СложныйУчетНДС Тогда
			//Все партии приобретенных ТМЦ учитываются в регистре.
		Иначе 
			// Не отражаем в регистре партий.
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвиженийНДСПартии.Добавить();
		СтрокаДвижения.Активность	= Истина;
		СтрокаДвижения.Период		= СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
			СтрокаДвижения.СчетФактура	= Неопределено;
		Иначе	
			СтрокаДвижения.СчетФактура	= СтрокаДок.СчетФактура;
		КонецЕсли;
		СтрокаДвижения.НДСВключенВСтоимость = СтрокаДок.НДСВключенВСтоимость;
		
		Если НЕ СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСкладов
		   ИЛИ (ЕстьКодОперации и СтрокаДок.КодОперацииПартииТоваров = КодыОпераций.ПередачаНаКомиссию) тогда
			СтрокаДвижения.Склад = Неопределено;
		Иначе
			СтрокаДвижения.Склад = СтрокаДок.Склад;
		КонецЕсли;
		СтрокаДвижения.ВидЦенности	= СтрокаДок.ВидЦенности;
		СтрокаДвижения.Номенклатура = СтрокаДок.Номенклатура;
		Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			СтрокаДвижения.ХарактеристикаНоменклатуры = СтрокаДок.ХарактеристикаНоменклатуры;
		Иначе
			СтрокаДвижения.ХарактеристикаНоменклатуры = Неопределено;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик И СтрокаДок.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижения.СерияНоменклатуры 		  = СтрокаДок.СерияНоменклатуры;
		Иначе
			СтрокаДвижения.СерияНоменклатуры 		  = Неопределено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаДок.Партия) И СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
			СтрокаДвижения.Партия = СтруктураШапкиДокумента.Ссылка;
		Иначе
			СтрокаДвижения.Партия		= СтрокаДок.Партия;
		КонецЕсли;
		Если СтрокаДок.Услуга Тогда
			СтрокаДвижения.Количество =	0;
		Иначе	
			СтрокаДвижения.Количество =	СтрокаДок.Количество;
		КонецЕсли;
		
		СтрокаДвижения.СтавкаНДС = СтрокаДок.СтавкаНДС;
		
		СтрокаДвижения.Стоимость	= ?(ЕстьСтоимость,СтрокаДок.Стоимость,?(ЕстьСуммаБезНДС,СтрокаДок.СуммаБезНДС,0) + ?(ЕстьНДС,СтрокаДок.НДС,0));
		Если ЕстьСуммаБезНДС Тогда
			Стоимость = СтрокаДок.СуммаБезНДС + ?(ЕстьНДС,СтрокаДок.НДС,0);
		ИначеЕсли ЕстьСтоимость Тогда
			Стоимость = СтрокаДок.Стоимость;
		Иначе
			Стоимость = 0;
		КонецЕсли;
			
		СтрокаДвижения.Стоимость	= Стоимость;
		СтрокаДвижения.НДС			= ?(ЕстьНДС,СтрокаДок.НДС,0);
		
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПартииТоваров()

// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС
//***********************************************************************************************



//***********************************************************************************************
// НДС РЕАЛИЗАЦИИ                                                       

//***********************************************************************************************
//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации

Процедура ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаСписания, СтруктураПараметров, Заголовок) Экспорт

	
	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	ОписаниеИсточника_ТаблицаСписания = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Отбор.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Значение = Истина;
	Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Использование = Истина;
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Отражение предположения 0% по данному набору не требуется
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> Значение(Справочник.Контрагенты.ПустаяСсылка)";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	КонтрагентПоСчетуФактуре.Индексы.Добавить("СчетФактура");
	ДанныеДляОбработки.Колонки.Добавить("Поставщик");
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
		КонецЕсли; 
	КонецЦикла;
	
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ДокументОтгрузки") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ДокументОтгрузки");
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,"ДокументОтгрузки");
	Иначе
		ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОтгрузки");
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	// Отразить в регистре НДСПредъявленныйРеализация0
	ТаблицаДвижений_НДСПредъявленныйРеализация0 = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0;
	
	Если ДанныеДляОбработки.Колонки.Найти("Состояние") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("Состояние");
	КонецЕсли; 
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСПредъявленныйРеализация0);
	
	Если не ТаблицаДвижений_НДСПредъявленныйРеализация0 = Неопределено Тогда
		Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
			СтруктураПараметров.НДСПредъявленныйРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
			СтруктураПараметров.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
			СтруктураПараметров.НДСПредъявленныйРеализация0.ДобавитьДвижение();
			СтруктураПараметров.НДСПредъявленныйРеализация0.Записать(Ложь);
		Иначе
			ТаблицаДвижений_НДСПредъявленныйРеализация0.ЗаполнитьЗначения(СтруктураПараметров.Период,"Период");
			СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0 = Истина;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры // ОтразитьПредположениеСтавки0()

//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации
//***********************************************************************************************

// НДС РЕАЛИЗАЦИИ
//***********************************************************************************************



//***********************************************************************************************
//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС

// Процедура вызывается из модулей управления взаиморасчетами для отражения 
// факта оплаты в регистре "НДСРасчетыСПоставщиками". 
// Производится первоначальное фиксирование оплаты без распределения по СФ,
// В случае если в передаваемой таблице есть результат распределения по оплатам 
// - вместо непосредственного платежа фиксируется результат распределения.
Процедура РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаОплат, Движения, ЭтоВозврат) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСРасчетыСПоставщиками.
	ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Поставщик","Контрагент");
	СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов");
	СоответствиеКолонок.Вставить("Сумма","РублеваяСумма");
								 
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, ТаблицаДвижений_НДСРасчетыСПоставщиками);
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПоставщиками, СоответствиеКолонок, Истина);
	
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено;
	
	СтрокВТаблицеОплат = ТаблицаОплат.Количество();
	СтрокиКУдалению = новый массив();
	
	Для НомерСтроки=0 По СтрокВТаблицеОплат-1 Цикл
		СтрокаТаблицыОплат = ТаблицаОплат[НомерСтроки];
		СтрокаТаблицыДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками[НомерСтроки];
		
		Если СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		 ИЛИ СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыДвижений);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыОплат.РезультатРаспределения Тогда
		
			Если ЭтоВозврат и ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом) тогда
				СтрокаТаблицыДвижений.Документ = СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом;
			Иначе
				СтрокаТаблицыДвижений.Документ = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" 
				и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
				и СтруктураШапкиДокумента.КонтрагентКредитор = СтрокаТаблицыОплат.Контрагент 
				тогда
				// Перенос задолженности на того-же контрагента, но на другой договор не является фактом оплаты 
				
				СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.Поставщик			= СтрокаТаблицыДвижений.Поставщик;
				СтрокаРаспределеннойОплаты.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтрокаРаспределеннойОплаты.Документ				= ?(ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом),СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом,СтруктураШапкиДокумента.Ссылка);
				СтрокаРаспределеннойОплаты.Сделка				= СтрокаТаблицыОплат.Сделка;
				
				СтрокаРаспределеннойОплаты.ВалютаРасчетов		= СтрокаТаблицыДвижений.ВалютаРасчетов;
				СтрокаРаспределеннойОплаты.Сумма				= СтрокаТаблицыДвижений.Сумма;
				СтрокаРаспределеннойОплаты.ВалютнаяСумма	    = СтрокаТаблицыДвижений.ВалютнаяСумма;
				
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
				СтрокаТаблицыДвижений.Сумма 					= (-1) *СтрокаТаблицыДвижений.Сумма;
				СтрокаТаблицыДвижений.ВалютнаяСумма 			= (-1) * СтрокаТаблицыДвижений.ВалютнаяСумма;
				СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
			ИначеЕсли не ЭтоВозврат и БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом).Направление = Неопределено тогда
				Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено Тогда
					ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
				КонецЕсли; 
				СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.СчетФактура;
				СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;
				
				СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= СтрокаТаблицыДвижений.Сумма;
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
			КонецЕслИ;

			Если ЭтоВозврат Тогда
				 СтрокаТаблицыДвижений.Сумма 		= СтрокаТаблицыДвижений.Сумма*(-1);
				 СтрокаТаблицыДвижений.ВалютнаяСумма = СтрокаТаблицыДвижений.ВалютнаяСумма*(-1);
				 Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" 
					 Или СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ" тогда
					// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
					СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
				КонецЕсли;
				Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено Тогда
					ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
				КонецЕсли; 
				СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.СчетФактура;
				СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;
				
				СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= СтрокаТаблицыДвижений.Сумма * (-1);
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
			КонецЕсли;
		Иначе
			СтрокаТаблицыДвижений.Документ = СтруктураШапкиДокумента.Ссылка;
			Если ЭтоВозврат Тогда
				 Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" 
					 Или СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ" тогда
					// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
						СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Расход;
					Иначе
						СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Если СтрокиКУдалению.Количество() =  ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() Тогда
		     ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
		Иначе
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСРасчетыСПоставщиками.удалить(СтрокаКУдалению);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() > 0 Тогда

		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			Движения.НДСРасчетыСПоставщиками.мПериод      = СтруктураШапкиДокумента.Период;
		Иначе
			Движения.НДСРасчетыСПоставщиками.мПериод      = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;

		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
		Движения.НДСРасчетыСПоставщиками.Записать(Ложь);

	КонецЕсли;

	Если не (ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = Неопределено) 
		и ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество() > 0 Тогда

		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод      = СтруктураШапкиДокумента.Период;
		Иначе
			Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод      = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;

		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
		Движения.НДСУчетРаспределенныхОплатПоставщикам.Записать(Ложь);

	КонецЕсли;
	
КонецПроцедуры // РегистрацияОплаты_НДСРасчетыСПоставщиками()

// Процедура вызывается из модулей управления взаиморасчетами для отражения 
// факта оплаты в регистре "НДСРасчетыСПокупателями". 
// Производится первоначальное фиксирование оплаты без распределения по СФ,
// В случае если в передаваемой таблице есть результат распределения по оплатам 
// - вместо непосредственного платежа фиксируется результат распределения.
Процедура РегистрацияОплаты_НДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаОплат, Движения, ЭтоВозврат) Экспорт

	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра НДСРасчетыСПокупателями.
	ТаблицаДвижений_НДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями.ВыгрузитьКолонки();
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Покупатель","Контрагент");
	СоответствиеКолонок.Вставить("ВалютаРасчетов","ВалютаВзаиморасчетов");
	СоответствиеКолонок.Вставить("Сумма","РублеваяСумма");

	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОплат, ТаблицаДвижений_НДСРасчетыСПокупателями);
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСРасчетыСПокупателями, СоответствиеКолонок, Истина);
	
	ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	//Если не ЭтоВозврат Тогда
	//	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
	//	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
	//КонецЕсли; 
	
	СтрокВТаблицеОплат = ТаблицаОплат.Количество();
	СтрокиКУдалению = Новый Массив();
	
	Для НомерСтроки=0 По СтрокВТаблицеОплат-1 Цикл
		СтрокаТаблицыОплат = ТаблицаОплат[НомерСтроки];
		СтрокаТаблицыДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями[НомерСтроки];
		
		Если СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Или 
			СтрокаТаблицыОплат.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыДвижений);
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаТаблицыОплат.РезультатРаспределения Тогда
			
			Если ЭтоВозврат и ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом) тогда
				СтрокаТаблицыДвижений.Документ = СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом;
			Иначе
				СтрокаТаблицыДвижений.Документ = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;	
			
			Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" 
				и СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
				и СтруктураШапкиДокумента.КонтрагентКредитор = СтрокаТаблицыОплат.Контрагент 
				тогда
				// Перенос задолженности на того-же контрагента, но на другой договор не является фактом оплаты 
				
				СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСРасчетыСПокупателями.Добавить();
				СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
				СтрокаРаспределеннойОплаты.Покупатель			= СтрокаТаблицыДвижений.Покупатель;
				СтрокаРаспределеннойОплаты.ДоговорКонтрагента	= СтруктураШапкиДокумента.ДоговорКонтрагента;
				СтрокаРаспределеннойОплаты.Документ				= ?(ЗначениеЗаполнено(СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом),СтрокаТаблицыОплат.ДокументРасчетовСКонтрагентом,СтруктураШапкиДокумента.Ссылка);
				
				СтрокаРаспределеннойОплаты.ВалютаРасчетов		= СтрокаТаблицыДвижений.ВалютаРасчетов;
				СтрокаРаспределеннойОплаты.Сумма				= СтрокаТаблицыДвижений.Сумма;
				СтрокаРаспределеннойОплаты.ВалютнаяСумма	    = СтрокаТаблицыДвижений.ВалютнаяСумма;
				
				СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
				
				// Корректировка записи таблицы движений - уменьшаем задолженность по СФ, но не путем погашения, а путем сторнирования
				СтрокаТаблицыДвижений.Сумма 					= (-1) * СтрокаТаблицыДвижений.Сумма;
				СтрокаТаблицыДвижений.ВалютнаяСумма 			= (-1) * СтрокаТаблицыДвижений.ВалютнаяСумма;
				СтрокаТаблицыДвижений.ВидДвижения				= ВидДвиженияНакопления.Приход;
				
				
			//ИначеЕсли не ЭтоВозврат и ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтрокаТаблицыОплат.Сделка).Направление = Неопределено тогда
			//	
			//	СтрокаРаспределеннойОплаты =  ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			//	СтрокаРаспределеннойОплаты.Организация			= СтрокаТаблицыДвижений.Организация;
			//	СтрокаРаспределеннойОплаты.СчетФактура			= СтрокаТаблицыОплат.СчетФактура;
			//	СтрокаРаспределеннойОплаты.ДокументОплаты		= СтруктураШапкиДокумента.Ссылка;
			//	СтрокаРаспределеннойОплаты.Сделка				= СтрокаТаблицыОплат.Сделка;
			//	
			//	СтрокаРаспределеннойОплаты.РаспределеннаяСумма	= СтрокаТаблицыДвижений.Сумма;
			//	Если Не СтрокаТаблицыОплат.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета И
			//		Не ТаблицаОплат.Колонки.Найти("КурсоваяРазница") = Неопределено Тогда
			//		СтрокаРаспределеннойОплаты.КурсоваяРазница		= СтрокаТаблицыОплат.КурсоваяРазница;
			//	КонецЕсли;
			//	СтрокаРаспределеннойОплаты.ВидДвижения			= ВидДвиженияНакопления.Приход;
			КонецЕслИ;

		Иначе
			СтрокаТаблицыДвижений.Документ = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли; 
		
		Если ЭтоВозврат Тогда
			 СтрокаТаблицыДвижений.Сумма 		= СтрокаТаблицыДвижений.Сумма*(-1);
			 СтрокаТаблицыДвижений.ВалютнаяСумма = СтрокаТаблицыДвижений.ВалютнаяСумма*(-1);
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество()>0 Тогда
		Если СтрокиКУдалению.Количество() =  ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() Тогда
		     ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();
		Иначе
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаДвижений_НДСРасчетыСПокупателями.удалить(СтрокаКУдалению);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() > 0 Тогда

		Если СтруктураШапкиДокумента.Свойство("Период") И ЗначениеЗаполнено(СтруктураШапкиДокумента.Период) Тогда
			Движения.НДСРасчетыСПокупателями.мПериод      = СтруктураШапкиДокумента.Период;
		Иначе
			Движения.НДСРасчетыСПокупателями.мПериод      = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;

		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();

	КонецЕсли;
	
	//Если не ЭтоВозврат и ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество() > 0 Тогда
	//	
	//	Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод      = СтруктураШапкиДокумента.Дата;
	//	Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
	//	Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
	//	
	//КонецЕсли;
	
КонецПроцедуры // РегистрацияОплаты_НДСРасчетыСПокупателями()

Функция ПолучитьДанныеПоЗадолженностиВалютныеДоговора(СтруктураШапкиДокумента, ТаблицаОплат, Аванс = Ложь)
	
	МассивСФ = Новый Массив;
	МассивПокупателей = Новый Массив;
	МассивДоговоров = Новый Массив;
	МассивСФ = Новый Массив;
	МассивВалют = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		Если Не ?(Аванс, СтрокаТаблицы.ВалютаРасчетов, СтрокаТаблицы.ВалютаВзаиморасчетов) = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			МассивСФ.Добавить(?(Аванс, СтрокаТаблицы.ДокументОплаты, СтрокаТаблицы.Сделка));
			МассивПокупателей.Добавить(?(Аванс, СтрокаТаблицы.Покупатель, СтрокаТаблицы.Контрагент));
			МассивДоговоров.Добавить(СтрокаТаблицы.ДоговорКонтрагента);
			МассивВалют.Добавить(?(Аванс, СтрокаТаблицы.ВалютаРасчетов, СтрокаТаблицы.ВалютаВзаиморасчетов));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСФ.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРасчетыСПокупателямиОстатки.Покупатель,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
		|	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
		|	ВЫБОР
		|		КОГДА &ПоАвансам
		|			ТОГДА НДСРасчетыСПокупателямиОстатки.ДокументОплаты
		|		ИНАЧЕ НДСРасчетыСПокупателямиОстатки.СчетФактура
		|	КОНЕЦ КАК СчетФактура,
		|	СУММА(НДСРасчетыСПокупателямиОстатки.СуммаОстаток) КАК Сумма,
		|	СУММА(НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСумма
		|ИЗ
		|	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(
		|		&Дата,
		|		Организация = &Организация
		|		    И Покупатель В (&СписокПокупателей)
		|		    И ДоговорКонтрагента В (&СписокДоговоров)
		|		    И ВЫБОР
		|		        КОГДА &ПоАвансам
		|		            ТОГДА ДокументОплаты В (&СписокСФ)
		|		        ИНАЧЕ СчетФактура В (&СписокСФ)
		|		    КОНЕЦ
		|		    И ВалютаРасчетов В (&СписокВалют)) КАК НДСРасчетыСПокупателямиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРасчетыСПокупателямиОстатки.Покупатель,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
		|	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
		|	ВЫБОР
		|		КОГДА &ПоАвансам
		|			ТОГДА НДСРасчетыСПокупателямиОстатки.ДокументОплаты
		|		ИНАЧЕ НДСРасчетыСПокупателямиОстатки.СчетФактура
		|	КОНЕЦ";
		Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);			   
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СписокПокупателей", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПокупателей));
		Запрос.УстановитьПараметр("СписокДоговоров", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров));
		Запрос.УстановитьПараметр("СписокСФ", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСФ));
		Запрос.УстановитьПараметр("СписокВалют", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивВалют));
		Запрос.УстановитьПараметр("ПоАвансам", Аванс);
		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		Если Результат.Количество()=0 Тогда
			Возврат Неопределено;
		Иначе	
			Если Аванс Тогда
			     Результат.Колонки.СчетФактура.Имя = "ДокументОплаты";
			КонецЕсли; 
			
			Возврат Результат;

		КонецЕсли; 
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции // ПолучитьДанныеПоЗадолженностиВалютныеДоговора()

//  РЕГИСТРАЦИЯ ОПЛАТ В ПОДСИСТЕМЕ НДС
//***********************************************************************************************


//***********************************************************************************************
// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Процедура ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаВыручки, Отказ, Заголовок) Экспорт
	
	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВыручки.Количество() = 0 Тогда
		//Отработка по партиям НДС не требуется. 
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС  Тогда
		
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
		
		Если Отказ тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСДокументамиПартий = ТаблицаВыручки.Скопировать();
		ТаблицаБезДокументовПартий = ТаблицаВыручки.СкопироватьКолонки();
		КоличествоСтрок = ТаблицаСДокументамиПартий.Количество();
		Для К = 1 По КоличествоСтрок Цикл
			Если Не ЗначениеЗаполнено(ТаблицаСДокументамиПартий[КоличествоСтрок - К].ДокументПартии) Тогда
				НоваяСтрока = ТаблицаБезДокументовПартий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаСДокументамиПартий[КоличествоСтрок - К]);
				ТаблицаСДокументамиПартий.Удалить(КоличествоСтрок - К);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Скопировать();
		
		Если ТаблицаСДокументамиПартий.Количество() <> 0 Тогда
			ТаблицаВыручкиДляНДС = ТаблицаВыручки.Скопировать();
			ТаблицаВыручкиДляНДС.ЗагрузитьКолонку(ТаблицаВыручкиДляНДС.ВыгрузитьКолонку("Склад"), "СкладПолучатель");
			
			Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручкиДляНДС, Отказ, Заголовок, , Истина,СтруктураПараметров);
			Иначе
				ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаВыручкиДляНДС, Отказ, Заголовок,,,СтруктураПараметров);
			КонецЕсли;				
			
			Если не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
				
				// Полученные партии могли быть реализованы с другого склада
				Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл
					
					Если НЕ УчетнаяПолитика.ВестиПартионныйУчетПоСкладам Тогда
						СтрокаПартии.Склад = Неопределено;
					КонецЕсли;
					
					// Делаем не приход, а сторно расхода по регистру.
					Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						СтрокаПартии.Стоимость  = - СтрокаПартии.Стоимость;
						СтрокаПартии.НДС  		= - СтрокаПартии.НДС;
						СтрокаПартии.Количество = - СтрокаПартии.Количество;
					КонецЕсли;
				КонецЦикла;
				
				//************************************************************************
				// Отработка сторнирования предположения ставки 0% по НДС покупки.
				// При передачи товаров комиссионеру предположение ставки 0% не должно отрабатывать, только по фактическому отражению реализации
				Если Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);
				КонецЕсли;
				// Отработка сторнирования предположения ставки 0% по НДС покупки.
				//************************************************************************
				
				//************************************************************************
				// Отработка сторнирования включения/исключения НДС из стоимости.
				СторноПереквалификацииПартииПриРеализации(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, Неопределено, ТаблицаДвиженийПартии, СтруктураПараметров, Заголовок);
				
				Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
					ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
				КонецЕсли; 
				// Отработка сторнирования включения/исключения НДС из стоимости.
				//************************************************************************
				
				//************************************************************************
				// НДС по партиям - отразить сторно непосредственного списания.
				// Склад возврата может не совпадать со складом списания
				Если Не УчетнаяПолитика.ВестиПартионныйУчетПоСкладам И Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания цикл
						Если ЗначениеЗаполнено(СтрокаПартии.СкладПолучатель) тогда
							СтрокаПартии.Склад = СтрокаПартии.СкладПолучатель;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ТаблицаДвиженийПартии.Очистить();
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
				ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
				
				// НДС по партиям - отразить сторно непосредственного списания.
				//************************************************************************
				
				//************************************************************************
				// НДС по партиям - отразить приход от комиссионера.
				Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					Для Каждого СтрокаПартии Из ТаблицаНДСПартииСписания Цикл 
						Если УчетнаяПолитика.ВестиПартионныйУчетПоСкладам Тогда
							СтрокаПартии.Склад = СтрокаПартии.СкладПолучатель;
						Иначе
							СтрокаПартии.Склад = Неопределено;
						КонецЕсли;
					КонецЦикла;
					
					ТаблицаДвиженийПартии.Очистить();
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
					ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
					
				КонецЕсли;
				
				// НДС по партиям - отразить приход от комиссионера.
				//************************************************************************
				
				СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = Истина;
				СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.ЗаполнитьЗначения(структураШапкиДокумента.Дата,"Период");
				
				Если СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество()>0 Тогда
					СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный = Истина;
					СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(структураШапкиДокумента.Дата,"Период");
				КонецЕсли; 
				Если СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество()>0 Тогда
					СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость = Истина;
					СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.ЗаполнитьЗначения(структураШапкиДокумента.Дата,"Период");
				КонецЕсли; 
				
				// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
				//************************************************************************
			КонецЕсли;
			
		КонецЕсли;		
	
		Если ТаблицаБезДокументовПартий.Количество() <> 0 Тогда
			
			СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаБезДокументовПартий, ТаблицаДвиженийПартии, Отказ);
			Если ТаблицаДвиженийПартии.Количество()>0 Тогда
				ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров);
			КонецЕсли; 
			
			СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = Истина;
			СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.ЗаполнитьЗначения(структураШапкиДокумента.Дата,"Период");
			
		КонецЕсли;		
		
		УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Если СтруктураШапкиДокумента.ОтразитьВКнигеПокупок Тогда
				СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШапкиДокумента, ТаблицаВыручки, СтруктураПараметров, Отказ);
			Иначе
				СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, СтруктураПараметров, Отказ, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СторноПереквалификацииПартииПриРеализации(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПокупки, ТаблицаДвиженийПартии, СтруктураПараметров, Заголовок)

	Если ТаблицаСписания.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли;
	
	//Фильтрование по произведенным в документе переквалификациям партий.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПартииТоваровОбороты.Организация,
	|	НДСПартииТоваровОбороты.Номенклатура,
	|	НДСПартииТоваровОбороты.Партия,
	|	НДСПартииТоваровОбороты.Склад,
	|	НДСПартииТоваровОбороты.СчетФактура,
	|	НДСПартииТоваровОбороты.ВидЦенности,
	|	НДСПартииТоваровОбороты.Регистратор КАК ДокументРеализации,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтоимостьИсключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ИСТИНА
	|				ТОГДА НДСПартииТоваровОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСВключен,
	|	СУММА(ВЫБОР
	|			КОГДА НДСПартииТоваровОбороты.НДСВключенВСтоимость = ЛОЖЬ
	|				ТОГДА НДСПартииТоваровОбороты.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСИсключен,
	|	НДСПартииТоваровОбороты.СтавкаНДС
	|ИЗ
	|	РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваровОбороты
	|ГДЕ
	|	НДСПартииТоваровОбороты.Регистратор В(&СписокДокументовРеализации)
	|	И НДСПартииТоваровОбороты.Номенклатура В(&Номенклатура)
	|	И НДСПартииТоваровОбороты.ВидЦенности В(&ВидыЦенностей)
	|	И НДСПартииТоваровОбороты.СчетФактура В(&СчетаФактуры)
	|	И НДСПартииТоваровОбороты.ВидДвижения = &ВидДвиженияПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПартииТоваровОбороты.Номенклатура,
	|	НДСПартииТоваровОбороты.Склад,
	|	НДСПартииТоваровОбороты.СчетФактура,
	|	НДСПартииТоваровОбороты.ВидЦенности,
	|	НДСПартииТоваровОбороты.Организация,
	|	НДСПартииТоваровОбороты.Партия,
	|	НДСПартииТоваровОбороты.СтавкаНДС,
	|	НДСПартииТоваровОбороты.Регистратор";

	СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("ДокументПартии"),Истина);

	//Выделим документы реализации
	Для ИндексДокумента = 0 По СписокДокументовРеализации.Количество()-1 Цикл
			
		Если НЕ ЗначениеЗаполнено(СписокДокументовРеализации[ИндексДокумента]) Тогда
			СписокДокументовРеализации[ИндексДокумента] = Неопределено;
		Иначе
			ТипДокументаПартии = ТипЗнч(СписокДокументовРеализации[ИндексДокумента]);
			Если ТипДокументаПартии =  Тип("ДокументСсылка.РеализацияТоваровУслуг") 
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				или ТипДокументаПартии =  Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
				тогда
					
			Иначе
				СписокДокументовРеализации[ИндексДокумента] = Неопределено;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
		
	СписокДокументовРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовРеализации,Истина);
	
	Запрос.УстановитьПараметр("СписокДокументовРеализации",	СписокДокументовРеализации);
	Запрос.УстановитьПараметр("Номенклатура",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("Номенклатура")));
	Запрос.УстановитьПараметр("ВидыЦенностей",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("ВидЦенности")));
	Запрос.УстановитьПараметр("СчетаФактуры",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ВидДвиженияПриход",	ВидДвиженияНакопления.Приход);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		//Переквалификация возвращаемых партий при реализации не производилась.
		возврат;
	КонецЕсли; 
	ТаблицаПереквалификаций = Результат.Выгрузить(ОБходРезультатаЗапроса.Прямой);
	ТаблицаПереквалификаций.Индексы.Добавить("Номенклатура,ВидЦенности,СчетФактура, ДокументРеализации");
	
	ТаблицаВключенияВСтоимость = ТаблицаСписания.СкопироватьКолонки();
	
	КолонкиТаблицыПереквалификации = ТаблицаПереквалификаций.Колонки;
	КолонкиТаблицыСписания = ТаблицаСписания.Колонки;
	
	Отказ = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	
	Для каждого СтрокаСписания Из ТаблицаСписания Цикл
		Отбор = Новый Структура ("Номенклатура,ВидЦенности,СчетФактура, ДокументРеализации",СтрокаСписания.Номенклатура,СтрокаСписания.ВидЦенности,СтрокаСписания.СчетФактура,СтрокаСписания.ДокументПартии);
		НаборПереквалификацияПоКлючу = ТаблицаПереквалификаций.НайтиСтроки(Отбор);
		Если НаборПереквалификацияПоКлючу.Количество()=0 Тогда
			// Переквалификация по данному набору не производилась
			Продолжить;
		КонецЕсли; 
		
		КоличествоПоДвижению = - СтрокаСписания.Количество;
		СтоимостьПоДвижению  = - СтрокаСписания.Стоимость;
		НДСПоДвижению  = - СтрокаСписания.НДС;
		Для каждого СтрокаПереквалификации Из НаборПереквалификацияПоКлючу Цикл
			СуммаПереквалификации = 0;
			КоличествоПереквалификации = 0;
			НДСПереквалификации = 0;
			
			Если СтрокаСписания.НДСВключенВСтоимость Тогда
				//Могло производиться только включениеНДС в стоимость товаров (КоличествоВключен>0, КоличествоИсключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьВключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьВключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоВключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоВключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСВключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСВключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен - НДСПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			Иначе
				//Могло производиться только исключение НДС из стоимости товаров (КоличествоИсключен>0, КоличествоВключен<0)
				//Переквалификация по стоимости
				Если СтрокаПереквалификации.СтоимостьИсключен >0 и СтоимостьПоДвижению >0 Тогда
					СуммаПереквалификации = мин(СтрокаПереквалификации.СтоимостьИсключен, СтоимостьПоДвижению);
					СтрокаПереквалификации.СтоимостьИсключен = СтрокаПереквалификации.СтоимостьИсключен - СуммаПереквалификации;
					//Стоимость по НДС не включенному в стоимость должна быть отрицательной, компенсируем. 
					СтрокаПереквалификации.СтоимостьВключен = СтрокаПереквалификации.СтоимостьВключен + СуммаПереквалификации;
					СтоимостьПоДвижению = СтоимостьПоДвижению - СуммаПереквалификации;
				КонецЕсли; 
				//Переквалификация по количеству
				Если СтрокаПереквалификации.КоличествоИсключен >0 и КоличествоПоДвижению >0 Тогда
					КоличествоПереквалификации = мин(СтрокаПереквалификации.КоличествоИсключен, КоличествоПоДвижению);
					СтрокаПереквалификации.КоличествоИсключен = СтрокаПереквалификации.КоличествоИсключен - КоличествоПереквалификации;
					//Количество по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.КоличествоВключен = СтрокаПереквалификации.КоличествоВключен + КоличествоПереквалификации;
					КоличествоПоДвижению = КоличествоПоДвижению - КоличествоПереквалификации;
				КонецЕсли; 
				//Переквалификация по НДС
				Если СтрокаПереквалификации.НДСИсключен >0 и НДСПоДвижению >0 Тогда
					НДСПереквалификации = мин(СтрокаПереквалификации.НДСИсключен, НДСПоДвижению);
					СтрокаПереквалификации.НДСИсключен = СтрокаПереквалификации.НДСИсключен - НДСПереквалификации;
					//НДС по НДС не включенному в стоимость должно быть отрицательным, компенсируем. 
					СтрокаПереквалификации.НДСВключен = СтрокаПереквалификации.НДСВключен + НДСПереквалификации;
					НДСПоДвижению = НДСПоДвижению - НДСПереквалификации;
				КонецЕсли; 
			КонецЕсли;
			
			Если (КоличествоПереквалификации = 0 и СуммаПереквалификации = 0) Тогда
				продолжить;
			КонецЕсли;
				
			//Добавляем строки в движения по таблице НДС партии (по обратной переквалификации)
		
			//Отразим включения НДС в стоимость по регисту НДС партии
			СтрокаСписанияНДСПартии	= ТаблицаДвиженийПартии.Добавить();
			СтрокаДобавленияНДСПартии= ТаблицаДвиженийПартии.Добавить();
			
			Для каждого Колонка Из ТаблицаДвиженийПартии.Колонки Цикл
				Если Колонка.Имя = "Количество" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= КоличествоПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -КоличествоПереквалификации;
				ИначеЕсли Колонка.Имя = "Стоимость" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= СуммаПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -СуммаПереквалификации;
				ИначеЕсли Колонка.Имя = "НДС" тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] 	= НДСПереквалификации;
					СтрокаДобавленияНДСПартии[Колонка.Имя]	= -НДСПереквалификации;
				ИначеЕсли Колонка.Имя = "Склад" тогда
					Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" 
						и не СтруктураШапкиДокумента.ПартионныйУчетНДСВРазрезеСкладов
						тогда
					    СтрокаСписанияНДСПартии[Колонка.Имя]= Справочники.Склады.ПустаяСсылка();
					    СтрокаДобавленияНДСПартии[Колонка.Имя]= Справочники.Склады.ПустаяСсылка();
					Иначе
						СтрокаСписанияНДСПартии[Колонка.Имя] 	= СтрокаСписания.Склад;
						СтрокаДобавленияНДСПартии[Колонка.Имя]	= СтрокаСписания.Склад;
					КонецЕсли; 
				ИначеЕсли не КолонкиТаблицыПереквалификации.Найти(Колонка.Имя) = неопределено тогда
					СтрокаСписанияНДСПартии[Колонка.Имя] =   СтрокаПереквалификации[Колонка.Имя];
					СтрокаДобавленияНДСПартии[Колонка.Имя] = СтрокаПереквалификации[Колонка.Имя];
				КонецЕсли; 
			КонецЦикла;
			
			СтрокаСписанияНДСПартии.НДСВключенВСтоимость = не СтрокаСписания.НДСВключенВСтоимость;
			СтрокаДобавленияНДСПартии.НДСВключенВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			
			// подготовка таблицы для отражения переквалификации по другим регистрам.
			СтрокаТаблицыВключенияВстоимость = ТаблицаВключенияВСтоимость.Добавить();
			Для каждого Колонка Из ТаблицаВключенияВСтоимость.Колонки Цикл
				Если Колонка.Имя = "Количество" или Колонка.Имя = "Стоимость" или Колонка.Имя = "НДС" тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] 	= СтрокаДобавленияНДСПартии[Колонка.Имя];
				ИначеЕсли не КолонкиТаблицыСписания.Найти(Колонка.Имя) = неопределено тогда
					СтрокаТаблицыВключенияВстоимость[Колонка.Имя] =   СтрокаСписания[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ВключитьВСтоимость = СтрокаСписания.НДСВключенВСтоимость;
			СтрокаТаблицыВключенияВстоимость.ДействияНДСПокупки_ИсключитьИзСтоимости = не СтрокаСписания.НДСВключенВСтоимость;
			
			Если КоличествоПоДвижению= 0 и СтоимостьПоДвижению = 0 Тогда
				//Обработка данной строки списания завершена
				Прервать;
			КонецЕсли; 	
		КонецЦикла; 
	КонецЦикла; 
	
	Если ТаблицаВключенияВСтоимость.Количество()>0 Тогда
		Если Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
			ТаблицаВключенияВСтоимость.ЗаполнитьЗначения(Неопределено, "ХарактеристикаНоменклатуры");
			ТаблицаВключенияВСтоимость.ЗаполнитьЗначения(Неопределено, "СерияНоменклатуры");
		КонецЕсли;
		
		ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Истина,СтруктураПараметров,Заголовок, Ложь);
		ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаВключенияВСтоимость, ТаблицаДвиженийПартии,Ложь,СтруктураПараметров,Заголовок, Ложь);
	КонецЕсли; 
	
	
КонецПроцедуры // СторноПереквалификацииПартииПриРеализации()

// Отражение возврата от покупателя в книге покупок (в регистре НДСПредъявленный)
// 
Процедура СформироватьДвиженияПоРегиструНДСПредъявленный_ВозвратОтПокупателя(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, СтруктураПараметров, Отказ) Экспорт

	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
		ТаблицаДвижений_НДСПредъявленный	= СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный;
	Иначе
		ТаблицаДвижений_НДСПредъявленный	= СтруктураПараметров.НДСПредъявленный.Выгрузить();
		ТаблицаДвижений_НДСПредъявленный.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаДок из ТаблицаПредъявленногоНДС Цикл
		
		СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();

		СтрокаДвижения.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.Возврат;

		СтрокаДвижения.Поставщик   = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.СчетФактура = ?(СтруктураШапкиДокумента.ПокупателемВыставляетсяСчетФактураНаВозврат Или Не ЗначениеЗаполнено(СтрокаДок.ДокументПартии), 
										СтруктураШапкиДокумента.Ссылка, 
										СтрокаДок.ДокументПартии);

		СтрокаДвижения.СтавкаНДС   = СтрокаДок.СтавкаНДС;
			
		СтрокаДвижения.СуммаБезНДС = СтрокаДок.СуммаБезНДС;
		СтрокаДвижения.НДС         = СтрокаДок.НДС;
		
		СтрокаДвижения.ВидДвижения  = ВидДвиженияНакопления.Приход;

		СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") тогда
			ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
			СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный = Истина;
		Иначе	
			СтруктураПараметров.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
			СтруктураПараметров.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
			СтруктураПараметров.НДСПредъявленный.ДобавитьДвижение();
			СтруктураПараметров.НДСПредъявленный.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияПоРегиструНДСПредъявленный()

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ
//***********************************************************************************************

//***********************************************************************************************
//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ

// Процедура вызывается из процедур.
// В тех случаях, когда розничная реализация в организации переведена на ЕНВД,
// при передаче товаров в розницу, происходит автоматическое включение НДС в себестоимость
// этих товаров
Процедура ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ТаблицаСписания, ТаблицаДвиженийПартии, ВключитьВСтоимость, СтруктураПараметров, Заголовок, ОтражатьПоПартиям = Истина) Экспорт

	Построитель_ТаблицаСписания = Новый ПостроительЗапроса();
	Построитель_ТаблицаСписания.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаСписания);
	Отбор = Построитель_ТаблицаСписания.Отбор;
	
	Если ВключитьВСтоимость Тогда
		Отбор.Добавить("ДействияНДСПокупки_ВключитьВСтоимость");
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ВключитьВСтоимость"].Использование = Истина;
	Иначе
		Отбор.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости");
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Значение = Истина;
		Отбор["ДействияНДСПокупки_ИсключитьИзСтоимости"].Использование = Истина;
	КонецЕсли; 
	
	Построитель_ТаблицаСписания.Выполнить();
	ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		СтрокиКУдалению = новый Массив();
		Для каждого СтрокаТаблицы Из ДанныеДляОбработки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ДанныеДляОбработки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеДляОбработки.Количество() = 0 Тогда
		//Включение НДС в стоимость по данному набору не требуется
		Возврат;
	КонецЕсли;
	
	Если ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено тогда	
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли; 
	
	Если ДанныеДляОбработки.Количество()>0 Тогда
		Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
			Если не ВключитьВСтоимость Тогда
				СтрокаОбрабатываемая.Количество = СтрокаОбрабатываемая.Количество*(-1);
				СтрокаОбрабатываемая.Стоимость = СтрокаОбрабатываемая.Стоимость*(-1);
				СтрокаОбрабатываемая.НДС = СтрокаОбрабатываемая.НДС*(-1);
			КонецЕсли; 
			СтрокаОбрабатываемая.СуммаБезНДС = СтрокаОбрабатываемая.Стоимость - СтрокаОбрабатываемая.НДС;
		КонецЦикла; 
	КонецЕсли;
	
	ПартионныйУчетБУ = Ложь;
	
	Если не СтруктураШапкиДокумента.Свойство("ПартионныйУчетБУ") Тогда
		СтруктураШапкиДокумента.Вставить("ПартионныйУчетБУ",ПартионныйУчетБУ);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка), ВидГраницы.Исключая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО) КАК СчетФактураДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		Организация = &Организация
	|			И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	не НДСПредъявленныйОбороты.Поставщик = Значение(Справочник.Контрагенты.ПустаяСсылка)";
	
	КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	КонтрагентПоСчетуФактуре.Индексы.Добавить("СчетФактура");
	
	Если ДанныеДляОбработки.Колонки.Найти("Поставщик") = Неопределено Тогда
		ДанныеДляОбработки.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	ДанныеДляОбработки.Колонки.Добавить("СчетФактураДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Для каждого СтрокаОбрабатываемая  Из ДанныеДляОбработки Цикл
		СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(СтрокаОбрабатываемая.СчетФактура,"СчетФактура");
		Если не СтрокаКонтрагента = Неопределено Тогда
		    СтрокаОбрабатываемая.Поставщик = СтрокаКонтрагента.Поставщик;
			СтрокаОбрабатываемая.СчетФактураДоговорКонтрагента = СтрокаКонтрагента.СчетФактураДоговорКонтрагента;
		КонецЕсли; 
	КонецЦикла;
	ДанныеДляОбработки.Колонки.Добавить("Событие");
	ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,"Событие");
	
	Если ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено Тогда
	 	ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");
	КонецЕсли; 
	
	ОсобыйПорядокОтражения_ст170НКРФ = (ВключитьВСтоимость и СтруктураШапкиДокумента.Дата >='20060101');
	
	Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
		
		ДанныеДляОбработки.Колонки.Добавить("НДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДСкСписанию", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
		
		// Особый порядок отражения в соответствии со п.3 статьи 170 НК РФ
		// по НДС, принятому к вычету на момент "включения в стоимость" 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",	СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетаФактуры",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура"), Истина));
		Запрос.УстановитьПараметр("ВидыЦенностей",	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("ВидЦенности"), Истина));
		Запрос.УстановитьПараметр("СтавкиНДС",		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СтавкаНДС"), Истина));
		Запрос.УстановитьПараметр("Период",			Новый Граница(новый моментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка),ВидГраницы.Исключая));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|		&Период,
		|		Организация = &Организация
		|		    И СчетФактура В (&СчетаФактуры)
		|		    И ВидЦенности В (&ВидыЦенностей)
		|		    И СтавкаНДС В (&СтавкиНДС)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	(НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток) > 0
		|ИТОГИ ПО
		|	СчетФактура";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("СуммаБезНДС"),"СуммаБезНДСкСписанию");
		    ДанныеДляОбработки.ЗагрузитьКолонку(ДанныеДляОбработки.ВыгрузитьКолонку("НДС"),"НДСкСписанию");
			ДанныеДляОбработки.ЗаполнитьЗначения(0, "СуммаБезНДС,НДС");
		Иначе
			НДСнеПринятыйКВычету = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтруктураОтбора = Новый Структура("ВидЦенности, СтавкаНДС");
			
			
			Для каждого ОбрабатываемаяСтрока Из ДанныеДляОбработки Цикл
				СтрокаОстаткаПоСФ = НДСнеПринятыйКВычету.Строки.Найти(ОбрабатываемаяСтрока.СчетФактура, "СчетФактура");
				Если СтрокаОстаткаПоСФ = Неопределено Тогда
				     ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					 ОбрабатываемаяСтрока.НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					 ОбрабатываемаяСтрока.СуммаБезНДС			= 0;
					 ОбрабатываемаяСтрока.НДС					= 0;
				Иначе
					СуммаБезНДСКСписанию	= ОбрабатываемаяСтрока.СуммаБезНДС;
					НДСКСписанию			= ОбрабатываемаяСтрока.НДС;
					
					// Отбираем строки с фильтром по виду ценности, ставке НДС, счету учета НДС
					ЗаполнитьЗначенияСвойств(СтруктураОтбора,ОбрабатываемаяСтрока); 
					СтрокиПоОтбору			= СтрокаОстаткаПоСФ.Строки.НайтиСтроки(СтруктураОтбора);
					Для каждого СтрокаОстатка Из СтрокиПоОтбору Цикл
						СуммаБезНДС_ВСтоимость	= Мин(СтрокаОстатка.СуммаБезНДС,СуммаБезНДСКСписанию);
						НДС_ВСтоимость			= Мин(СтрокаОстатка.НДС,НДСКСписанию);
						
						СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию - СуммаБезНДС_ВСтоимость;
						НДСКСписанию			= НДСКСписанию - НДС_ВСтоимость;
						
						СтрокаОстатка.СуммаБезНДС = СтрокаОстатка.СуммаБезНДС - СуммаБезНДС_ВСтоимость;
						СтрокаОстатка.НДС = СтрокаОстатка.НДС - НДС_ВСтоимость;
						
						Если СтрокаОстатка.СуммаБезНДС = 0 и СтрокаОстатка.НДС = 0 Тогда
							СтрокаОстаткаПоСФ.Строки.Удалить(СтрокаОстатка);
						КонецЕсли; 
						
						Если СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0 Тогда
							Прервать;
						КонецЕсли; 
						
					КонецЦикла; 
					Если не (СуммаБезНДСКСписанию = 0 и НДСКСписанию = 0) Тогда
						ОбрабатываемаяСтрока.СуммаБезНДСКСписанию	= СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДСКСписанию			= НДСКСписанию;
						
						ОбрабатываемаяСтрока.СуммаБезНДС			= ОбрабатываемаяСтрока.СуммаБезНДС - СуммаБезНДСКСписанию;
						ОбрабатываемаяСтрока.НДС					= ОбрабатываемаяСтрока.НДС - НДСКСписанию;
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	ДанныеДляОтраженияВДополнительныхРегистрах = ДанныеДляОбработки.Скопировать();
	КолвоЭлементовКоллекции = ДанныеДляОтраженияВДополнительныхРегистрах.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
	     ЭлементКоллекции = ДанныеДляОтраженияВДополнительныхРегистрах[КолвоЭлементовКоллекции - ОбратныйИндекс]; 
	     Если НЕ ЗначениеЗаполнено(ЭлементКоллекции.СчетФактура) Тогда 
	          ДанныеДляОтраженияВДополнительныхРегистрах.Удалить(ЭлементКоллекции); 
	     КонецЕсли; 
	КонецЦикла;
	
	// Отразить в регистре НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный	= СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный;
	ДанныеДляОтраженияВДополнительныхРегистрах.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОтраженияВДополнительныхРегистрах, ТаблицаДвижений_НДСПредъявленный);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСПредъявленный.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСПредъявленный.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	// Отразить в регистре НДСВключенныйВСтоимость
	ТаблицаДвижений_НДСВключенныйВСтоимость	= СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость;
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОтраженияВДополнительныхРегистрах, ТаблицаДвижений_НДСВключенныйВСтоимость);
	
	//Зачистить таблицу от записей с пустыми суммами
	СтрокиКУдалению = ТаблицаДвижений_НДСВключенныйВСтоимость.НайтиСтроки(Новый Структура("СуммаБезНДС,НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвижений_НДСВключенныйВСтоимость.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	Если ОсобыйПорядокОтражения_ст170НКРФ
		и (не ДанныеДляОбработки.Итог("НДСКСписанию") = 0 или не ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0)
		Тогда
		
		//Отражение списания (восстановления) НДС в регистре "НДС начисленный"
		СтруктураПереименования = Новый Структура("СуммаБезНДС, НДС, Покупатель","СуммаБезНДСКСписанию", "НДСКСписанию", "Поставщик");
			
		ТаблицаДвижений_НДСНачисленный	= СтруктураПараметров.ТаблицаДвиженийНДСначисленный.СкопироватьКолонки();
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвижений_НДСНачисленный);
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСНачисленный, СтруктураПереименования, Истина);
			
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
		ТаблицаДвижений_НДСНачисленный.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
			
		//Зачистить таблицу от записей с пустыми суммами
		СтрокиКУдалению = ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("НДС", 0));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений_НДСНачисленный.Удалить(СтрокаКУдалению);
		КонецЦикла; 
			
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСНачисленный, СтруктураПараметров.ТаблицаДвиженийНДСначисленный);
		СтруктураПараметров.ИзмененыДвиженияНДСНачисленный = Истина;
			
	КонецЕсли;
	
	КолонкиТаблицыДанныхДляОбработки = ДанныеДляОбработки.Колонки;
	//************************************************************************
	// Движения по НДС партии,по регистру бухгалтерии и по партиям товаров на складах
	
	Если ВключитьВСтоимость Тогда
		МассивСтоимость = ДанныеДляОбработки.ВыгрузитьКолонку("Стоимость");
		МассивКоличество = ДанныеДляОбработки.ВыгрузитьКолонку("Количество");
		МассивНДС = ДанныеДляОбработки.ВыгрузитьКолонку("НДС");
		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			
			Если ОтражатьПоПартиям Тогда
				СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
				СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
				СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
				Если ОсобыйПорядокОтражения_ст170НКРФ Тогда
					СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС - СтрокаТаблицыВключения.НДСКСписанию;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
			
			ДанныеДляОбработки.ЗаполнитьЗначения(Истина, "НДСВключенВСтоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивСтоимость,"Стоимость");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивКоличество,"Количество");
			ДанныеДляОбработки.ЗагрузитьКолонку(МассивНДС,"НДС");
		КонецЕсли;
		
		Если ОсобыйПорядокОтражения_ст170НКРФ 
			и не (ДанныеДляОбработки.Итог("НДСКСписанию") = 0 и ДанныеДляОбработки.Итог("СуммаБезНДСКСписанию") = 0) Тогда
			// Корректировка таблицы данных для обработки для последующего отражения в регистре партионного учета
			ДанныеДляОбработки_КоличествоЗаписей = ДанныеДляОбработки.Количество();
			Для Счетчик = 1 По ДанныеДляОбработки_КоличествоЗаписей Цикл
				ИндексСтроки = ДанныеДляОбработки_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ДанныеДляОбработки[ИндексСтроки];
				Если не СтрокаДанных.НДСКСписанию = 0  
					или не СтрокаДанных.СуммаБезНДСКСписанию = 0 
					Тогда
					//Требуется корректировка. Списанная сумма отражается как доп. расходы, но без указанаия счета-фактуры.
					ДополнительнаяСтрока = ДанныеДляОбработки.Вставить(ИндексСтроки+1);
					ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаДанных);
					ДополнительнаяСтрока.Стоимость = ДополнительнаяСтрока.СуммаБезНДСКСписанию + ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СуммаБезНДС = ДополнительнаяСтрока.СуммаБезНДСКСписанию;
					ДополнительнаяСтрока.НДС = ДополнительнаяСтрока.НДСКСписанию;
					ДополнительнаяСтрока.СчетФактура = Неопределено;
					ДополнительнаяСтрока.Количество = 0;
					
					СтрокаДанных.Стоимость = СтрокаДанных.СуммаБезНДС + СтрокаДанных.НДС; 
					
				КонецЕсли; 
			КонецЦикла; 
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.СуммаБезНДСКСписанию);
			ДанныеДляОбработки.Колонки.Удалить(ДанныеДляОбработки.Колонки.НДСКСписанию);
			
			
			// Корректировка таблицы списания для последующего использования.
			СтрокиКУдалению = Новый Массив;
			
			ТаблицаСписания_КоличествоЗаписей = ТаблицаСписания.Количество();
			Для Счетчик = 1 По ТаблицаСписания_КоличествоЗаписей Цикл
				ИндексСтроки = ТаблицаСписания_КоличествоЗаписей - Счетчик;
				СтрокаДанных = ТаблицаСписания[ИндексСтроки];
				Если СтрокаДанных.ДействияНДСПокупки_ВключитьВСтоимость тогда
					СтрокиТаблицы_ДанныеДляОбработки = ДанныеДляОбработки.НайтиСтроки(Новый Структура("QuieryId", СтрокаДанных.QuieryId));
					Если не СтрокиТаблицы_ДанныеДляОбработки.Количество() = 0  Тогда
						СтрокиКУдалению.Добавить(СтрокаДанных);
						Для каждого СтрокаТаблицы_ДанныеДляОбработки Из СтрокиТаблицы_ДанныеДляОбработки Цикл
							НоваяСтрока = ТаблицаСписания.Вставить(ИндексСтроки+1);
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы_ДанныеДляОбработки); 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаСписания.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		КонецЕсли; 
		
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;

	Иначе
		Если ОтражатьПоПартиям Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;

		Для каждого СтрокаТаблицыВключения Из ДанныеДляОбработки Цикл
			СтрокаТаблицыВключения.Стоимость = СтрокаТаблицыВключения.Стоимость*(-1);
			СтрокаТаблицыВключения.Количество = СтрокаТаблицыВключения.Количество*(-1);
			СтрокаТаблицыВключения.НДС = СтрокаТаблицыВключения.НДС*(-1);
		КонецЦикла;

		Если ОтражатьПоПартиям Тогда
			ДанныеДляОбработки.ЗаполнитьЗначения(Ложь, "НДСВключенВСтоимость");
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки,ТаблицаДвиженийПартии);
		КонецЕсли;
	КонецЕсли; 
	
	СтрокиКУдалению = ТаблицаДвиженийПартии.НайтиСтроки(Новый Структура("Стоимость, НДС, Количество",0,0,0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДвиженийПартии.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для каждого СтрокаСписания из ТаблицаСписания Цикл
		Если ?(ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ВключитьВСтоимость,СтрокаСписания.ДействияНДСПокупки_ИсключитьИзСтоимости) Тогда
			СтрокаСписания.НДСВключенВСтоимость = ВключитьВСтоимость;
		КонецЕсли; 
	КонецЦикла; 
	
	// Движения по НДС партии и по регистру бухгалтерии
	//************************************************************************
	
КонецПроцедуры // СформироватьДвиженияПоПередачеТоваровИзОптаВРозницуЕНВД()

//  ОТРАЖЕНИЕ ВКЛЮЧЕНИЯ И ИСКЛЮЧЕНИЯ НДС ИЗ СТОИМОСТИ ПРИ ПЕРЕМЕЩЕНИИ ИЛИ СПИСАНИИ ПАРТИИ ТОВАРОВ
//***********************************************************************************************



//***********************************************************************************************
// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

Процедура ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок) Экспорт
	
	ДвиженияВозвратаТоваровПоставщикуПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок)

	
КонецПроцедуры

// Формирует движения по возврату поставщику по регистру партий НДС
Процедура ДвиженияВозвратаТоваровПоставщикуПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаВозвратов, Отказ, Заголовок) Экспорт

	Если ТаблицаВозвратов.Количество()=0 Тогда
		// Возврат товаров не осуществлялся
		Возврат;
	ИначеЕсли СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоПартиямБУ = УчетНДС.РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаВозвратов, СтруктураШапкиДокумента, СтруктураПараметров);
	
	//************************************************************************
	// Попытка списания товаров по партионному учету НДС
		
	//***************************************************
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	
	//При учете "По средней" или если партионный учет по БУ не ведется - партия может быть не заполнена.
	Если ТаблицаПоПартиямБУ.Колонки.Найти("Партия") = Неопределено Тогда
		ТаблицаПоПартиямБУ.Колонки.Добавить("Партия");
	КонецЕсли; 
	
	Для каждого СтрокаТаблицыСписания Из ТаблицаПоПартиямБУ Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСписания.Партия) Тогда
			СтрокаТаблицыСписания.Партия = СтрокаТаблицыСписания.ДокументПартии; 
		КонецЕсли; 
	КонецЦикла; 
		
	ТаблицаНДСПартииСписания = УчетНДС.ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПоПартиямБУ, Отказ, Заголовок, Истина,,СтруктураПараметров);
	// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
	//***************************************************

	//***************************************************
	// НДС по партиям - отразить непосредственое списание.
	Если не ТаблицаНДСПартииСписания.Количество() = 0 Тогда
		//Партии найдены (хотя бы частично). Отразим в партионном учете НДС.
		
		ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;
		СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = Истина;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);
		ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Период,"Период");
		
		// Делаем не расход, а сторно прихода по регистру.
		Для каждого СтрокаПартии Из ТаблицаДвиженийПартии Цикл
			СтрокаПартии.Стоимость	= - СтрокаПартии.Стоимость;
			СтрокаПартии.НДС		= - СтрокаПартии.НДС;
			СтрокаПартии.Количество	= - СтрокаПартии.Количество;
		КонецЦикла; 
		
	КонецЕсли; 
	// НДС по партиям - отразить непосредственое списание.
	//****************************************************

	// Попытка списания товаров по партионному учету НДС
	//************************************************************************
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

Процедура СформироватьДвиженияВозвратаПоставщикуПоРегистрамНДС(СтруктураШапкиДокумента, ТаблицаВозвратов, Движения, Отказ, Заголовок) Экспорт

	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений_НДСПредъявленный	= Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
		ТаблицаДвижений_НДСВключенныйВСтоимость	= Движения.НДСВключенныйВСтоимость.ВыгрузитьКолонки();
	КонецЕсли; 
	
	ОтразитьВКнигеПродаж =  (СтруктураШапкиДокумента.Дата>='20060530');
	Если ОтразитьВКнигеПродаж Тогда
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	КонецЕсли; 
	
	Для каждого СтрокаВозврата Из ТаблицаВозвратов Цикл
		
		УказанДокументЗакупки = ЗначениеЗаполнено(СтрокаВозврата.ДокументЗакупки) И Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат;
		
		СчетФактура = ?(УказанДокументЗакупки,СтрокаВозврата.ДокументЗакупки,СтруктураШапкиДокумента.Ссылка);

		Если ОтразитьВКнигеПродаж Тогда
		    Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			    // НДС был включен в стоимость а не отражен в книге покупок.
				// Формирование записи в книге продаж не требуется, так как НДС в книге покупок не отражался)
			Иначе
				//Отработка по регистру НДС начисленный возврата поставщику

				СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();
				СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.СчетФактура	= СчетФактура;
				СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.Покупатель	= СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижения.ВидНачисления = ?(Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат,
												Перечисления.НДСВидНачисления.НДСВосстановлен, 
												Перечисления.НДСВидНачисления.РеализацияСНДС);
				
				СтрокаДвижения.СуммаБезНДС	= СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС			= СтрокаВозврата.НДС;
				СтрокаДвижения.Событие		= ?(Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат, 
				                                Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС,
												Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			КонецЕсли; 
		Иначе	
			
			//Отработка по регистру НДС предъявленный возврата поставщику
			
			СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
			СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетФактура	= СчетФактура;
			СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
			СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
			
			СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
			СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.НДСВключенВСтоимость и не ОтразитьВКнигеПродаж Тогда
			//Отработка по регистру НДС предъявленный записи по включению в стоимость, введенной ранее
			СтрокаДвижения = ТаблицаДвижений_НДСПредъявленный.Добавить();
			СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
			СтрокаДвижения.СчетФактура	= СчетФактура;
			СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
			СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
			СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
				
			СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
			СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
			
			Если УказанДокументЗакупки Тогда
				// Сторнирование по регистру НДС включенный в стоимость записи, введенной ранее
				СтрокаДвижения = ТаблицаДвижений_НДСВключенныйВСтоимость.Добавить();
				СтрокаДвижения.Период 		= СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Организация	= СтруктураШапкиДокумента.Организация;
				СтрокаДвижения.СчетФактура	= СчетФактура;
				СтрокаДвижения.ВидЦенности	= СтрокаВозврата.ВидЦенности;
				СтрокаДвижения.СтавкаНДС	= СтрокаВозврата.СтавкаНДС;
				СтрокаДвижения.Поставщик	= СтруктураШапкиДокумента.Контрагент;
					
				СтрокаДвижения.СуммаБезНДС	= (-1)* СтрокаВозврата.СуммаБезНДС;
				СтрокаДвижения.НДС			= (-1)* СтрокаВозврата.НДС;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДвижений_НДСПредъявленный.Количество() > 0 Тогда
		Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
		Движения.НДСПредъявленный.ДобавитьДвижение();
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.НДСВключенВСтоимость
		и ТаблицаДвижений_НДСВключенныйВСтоимость.Количество() > 0 Тогда
		Движения.НДСВключенныйВСтоимость.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвижений_НДСВключенныйВСтоимость;
		Движения.НДСВключенныйВСтоимость.ДобавитьДвижение();
	КонецЕсли;
	
	Если ОтразитьВКнигеПродаж и не ТаблицаДвижений_НДСНачисленный.Количество() = 0  Тогда
	
		Движения.НДСНачисленный.мПериод			= СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений	= ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
		
	КонецЕсли; 
	
КонецПроцедуры // СформироватьДвиженияВозвратаПоставщикуПоНДСПокупки()

// Вызывается из процедуры ОтразитьВозвратПоставщикуПоРегиструРасчетовСПоставщикамиНДС
// Преобразует таблицу возвратов поставщику в таблицу расчетов
//
// Параметры
//  СтруктураШапкиДокумента
//  ТаблицаВозвратов
//
// Возвращаемое значение:
//   ТаблицаРасчетов
//
Функция ПреобразоватьТаблицуВозвратовПоставщикуВТаблицуРасчетов(СтруктураШапкиДокумента, ТаблицаВозвратов, Сделка)

	СтруктураТаблицыРасчетов = Новый структура("Контрагент,ДоговорКонтрагента,ВедениеВзаиморасчетов,ВидДоговора,РасчетыВУсловныхЕдиницах
		|,ВалютаВзаиморасчетов,КурсВзаиморасчетов,КратностьВзаиморасчетов
		|,ДокументЗакупки 
		|,СуммаВал,Сумма, НДСВал, НДС,
		|,Сделка");
			
	//Формируем таблицу расчетов с нужной структурой и заполняем по таблице возвратов
	ТаблицаНеоплаченныхВозвратов = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаВозвратов,СтруктураТаблицыРасчетов,,Истина);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНеоплаченныхВозвратов Цикл
		СтрокаТаблицы.СуммаВал = СтрокаТаблицы.СуммаВал + СтрокаТаблицы.НДСВал;
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
	КонецЦикла;
		
	СоответствиеНазваний = Новый Структура("ДокументЗакупки,Сумма,СуммаВал","ДокументРасчетовСКонтрагентом","РублеваяСумма","ВалютнаяСумма");
	
	//Приводим названия в соответствие требованиям обработки отражения зачета авансов по НДС
	УчетНДС.ПереименованиеКолонок(ТаблицаНеоплаченныхВозвратов, СоответствиеНазваний);	
		
	//Заполняем признак получения колонки по результатам распределения
	ТаблицаНеоплаченныхВозвратов.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов("Булево"));
	
	ТаблицаНеоплаченныхВозвратов.Колонки.Добавить("СчетФактура");
	ТаблицаНеоплаченныхВозвратов.загрузитьКолонку(ТаблицаНеоплаченныхВозвратов.ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом"),"СчетФактура");
	
	Для каждого СтрокаВозврата Из ТаблицаНеоплаченныхВозвратов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаВозврата.СчетФактура) Тогда
			СтрокаВозврата.СчетФактура = СтруктураШапкиДокумента.Ссылка;
		Иначе
			СтрокаВозврата.РезультатРаспределения = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	// Заполнение колонок реквизитами, общими для всего документа
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,"Контрагент");
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"ДоговорКонтрагента");
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора,"ВидДоговора");
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеВзаиморасчетов,"ВедениеВзаиморасчетов");
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов,"ВалютаВзаиморасчетов");
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах,"РасчетыВУсловныхЕдиницах");
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсВзаиморасчетов,"КурсВзаиморасчетов");
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьВзаиморасчетов,"КратностьВзаиморасчетов");
	
	ТаблицаНеоплаченныхВозвратов.ЗаполнитьЗначения(Сделка,"Сделка");
	
    Возврат ТаблицаНеоплаченныхВозвратов;
	
КонецФункции // ПреобразоватьТаблицуВозвратовПоставщикуВТаблицуРасчетов()

Процедура ОтразитьВозвратПоставщикуПоРегиструРасчетовСПоставщикамиНДС(СтруктураШапкиДокумента, Движения, ТаблицаВозвратов, Отказ, Заголовок, Сделка) Экспорт
	
	Если ТаблицаВозвратов.Количество()=0 Тогда
		// Возврат товаров не осуществлялся
		Возврат;
	КонецЕсли; 
	
	// Движения возврата по регистру НДСРасчетыСПоставщиками
	Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСРасчетыСПоставщиками") Тогда
		ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.ТаблицаДвиженийНДСРасчетыСПоставщиками;
	Иначе	
		ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.НДСРасчетыСПоставщиками.ВыгрузитьКолонки();
	КонецЕсли;
	
	ТаблицаНеоплаченныхВозвратов = ПреобразоватьТаблицуВозвратовПоставщикуВТаблицуРасчетов(СтруктураШапкиДокумента, ТаблицаВозвратов, Сделка);
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНеоплаченныхВозвратов Цикл
			СтрокаТаблицы.РублеваяСумма = СтрокаТаблицы.РублеваяСумма - СтрокаТаблицы.НДС;					
			СтрокаТаблицы.ВалютнаяСумма = СтрокаТаблицы.ВалютнаяСумма - СтрокаТаблицы.НДСВал;
		КонецЦикла;
	КонецЕсли;

	РегистрацияОплаты_НДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаНеоплаченныхВозвратов, Движения, Истина);		
		
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() > 0 Тогда
		Если ТипЗнч(Движения) = Тип("Структура") И Движения.Свойство("ТаблицаДвиженийНДСРасчетыСПоставщиками") Тогда
			ТаблицаДвижений_НДСРасчетыСПоставщиками.ЗаполнитьЗначения(Движения.Период,"Период");
			Движения.ИзмененыДвиженияНДСРасчетыСПоставщиками = Истина;
		Иначе	
			Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
			Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОтразитьВозвратПоСтавщикуПоРегиструРасчетовСПоставщиками


// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ
//***********************************************************************************************

////////////////////////////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВОЧНЫЕ ДОКУМЕНТЫ

////////////////////////////////////////////////////////////////////////////////////////////////////
// Корректировка поступления

Функция КорректировкаПоступленияПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СчетФактураДата", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.ИсправляемыйДокументПоступления, "Дата"),
		СтруктураШапкиДокумента.Дата));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование вычета НДС"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорАванса,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПокупок";
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("КнигаПокупок", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование восстановления НДС"" КАК Содержание,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорАванса,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот * -1 КАК НДС,
	|	ВЫБОР
	|		КОГДА &СчетФактураДата < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ""18""
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПродаж";

	СтруктураТаблиц.Вставить("КнигаПродаж", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
    |	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСПредъявленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСПредъявленный", Запрос.Выполнить().Выгрузить());
	
	Возврат СтруктураТаблиц;
	
КонецФункции	
          
Функция КорректировкаПоступленияПодготовитьТаблицуВычетНДСЗаМинусомНалогаВключенногоВСтоимость(СтруктураШапкиДокумента, ТаблицаДокумента)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
    Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.НДС) КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ВТСгруппированнаяТаблица
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Поставщик,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0) КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ИЗ
	|	ВТСгруппированнаяТаблица КАК ТаблицаДокумента
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСВключенныйВСтоимость.Обороты(, &МоментДокумента, , СчетФактура = &ИсправляемыйДокумент) КАК НДСВключенныйВСтоимостьОбороты
	|		ПО ТаблицаДокумента.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности
	|			И ТаблицаДокумента.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция КорректировкаПоступленияПодготовитьТаблицуВычетНДССУчетомПропорции(СтруктураШапкиДокумента, ТаблицаДокумента)
	
	ТаблицаКоэффициентов = КорректировкаПоступленияПодготовитьТаблицуКоэффициентов(СтруктураШапкиДокумента);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
    Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ТаблицаКоэффициентов", ТаблицаКоэффициентов);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.НДС) КАК НДС,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Поставщик КАК Поставщик,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ВТСгруппированнаяТаблицаДокумента
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Поставщик,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоэффициентов.ВидЦенности КАК ВидЦенности,
	|	ТаблицаКоэффициентов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаКоэффициентов.НДСКоэффициент КАК НДСКоэффициент,
	|	ТаблицаКоэффициентов.СуммаБезНДСКоэффициент КАК СуммаБезНДСКоэффициент
	|ПОМЕСТИТЬ ВТТаблицаКоэффициентов
	|ИЗ
	|	&ТаблицаКоэффициентов КАК ТаблицаКоэффициентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦенности,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСгруппированнаяТаблицаДокумента.ВидЦенности,
	|	ВТСгруппированнаяТаблицаДокумента.СтавкаНДС,
	|	ВТСгруппированнаяТаблицаДокумента.СуммаБезНДС * ЕСТЬNULL(ВТТаблицаКоэффициентов.СуммаБезНДСКоэффициент, 1) КАК СуммаБезНДС,
	|	ВТСгруппированнаяТаблицаДокумента.НДС * ЕСТЬNULL(ВТТаблицаКоэффициентов.НДСКоэффициент, 1) КАК НДС,
	|	ВТСгруппированнаяТаблицаДокумента.Регистратор,
	|	ВТСгруппированнаяТаблицаДокумента.Период,
	|	ВТСгруппированнаяТаблицаДокумента.Организация,
	|	ВТСгруппированнаяТаблицаДокумента.Поставщик,
	|	ВТСгруппированнаяТаблицаДокумента.Событие,
	|	ВТСгруппированнаяТаблицаДокумента.ДатаСобытия,
	|	ВТСгруппированнаяТаблицаДокумента.СчетФактура,
	|	ВТСгруппированнаяТаблицаДокумента.ИсправленныйСчетФактура
	|ИЗ
	|	ВТСгруппированнаяТаблицаДокумента КАК ВТСгруппированнаяТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаКоэффициентов КАК ВТТаблицаКоэффициентов
	|		ПО ВТСгруппированнаяТаблицаДокумента.ВидЦенности = ВТТаблицаКоэффициентов.ВидЦенности
	|			И ВТСгруппированнаяТаблицаДокумента.СтавкаНДС = ВТТаблицаКоэффициентов.СтавкаНДС";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуКоэффициентов(СтруктураШапкиДокумента)
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления, Истина));
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходыОбороты.ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС,
	|	1 - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) / ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0)
	|	КОНЕЦ КАК НДСКоэффициент,
	|	1 - ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0) / ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0)
	|	КОНЕЦ КАК СуммаБезНДСКоэффициент
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйДокумент) КАК НДСКосвенныеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|				,
	|				&МоментДокумента,
	|				,
	|				Организация = &Организация
	|					И СчетФактура = &ИсправляемыйДокумент) КАК НДСВключенныйВСтоимостьОбороты
	|		ПО НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС
	|			И НДСКосвенныеРасходыОбороты.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				,
	|				&МоментДокумента,
	|				,
	|				Организация = &Организация
	|					И СчетФактура = &ИсправляемыйДокумент) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСЗаписиКнигиПокупокОбороты.СтавкаНДС
	|			И НДСКосвенныеРасходыОбороты.ВидЦенности = НДСЗаписиКнигиПокупокОбороты.ВидЦенности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
	|				&МоментДокумента,
	|				Организация = &Организация
	|					И СчетФактура = &ИсправляемыйДокумент) КАК НДСПредъявленныйОстатки
	|		ПО (НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСВключенныйВСтоимостьОбороты.СтавкаНДС)
	|			И (НДСКосвенныеРасходыОбороты.ВидЦенности = НДСВключенныйВСтоимостьОбороты.ВидЦенности)"; 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуВычетНДСНаОснованииДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("ИсправляемыйДокумент", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления));
	Запрос.УстановитьПараметр("ДокументИсправление", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Дата,
	|	ТаблицаТовары.Организация,
	|	ТаблицаТовары.Контрагент,
	|	ЛОЖЬ КАК Услуга,
	|	ТаблицаТовары.Номенклатура
	|ПОМЕСТИТЬ ВТТоварыИУслуги
	|ИЗ
	|	ВТТаблицаПоТоварам КАК ТаблицаТовары
	//|ГДЕ
	//|	(НЕ ТаблицаТовары.СчетУчета.Забалансовый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.Ссылка,
	|	ТаблицаУслуги.Дата,
	|	ТаблицаУслуги.Организация,
	|	ТаблицаУслуги.Контрагент,
	|	ИСТИНА,
	|	ТаблицаУслуги.Номенклатура
	|ИЗ
	|	ВТТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	ТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТоварыИУслуги.Сумма) КАК Сумма,
	|	СУММА(ТоварыИУслуги.СуммаНДС) КАК НДС,
	|	ТоварыИУслуги.Ссылка КАК Регистратор,
	|	ТоварыИУслуги.Дата КАК Период,
	|	ТоварыИУслуги.Организация КАК Организация,
	|	ТоварыИУслуги.Контрагент КАК Поставщик,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	ТоварыИУслуги.Дата КАК ДатаСобытия,
	|	&ИсправляемыйДокумент КАК СчетФактура,
	|	&ДокументИсправление КАК ИсправленныйСчетФактура,
	|	ТоварыИУслуги.Услуга КАК Услуга,
	|	ТоварыИУслуги.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТТоварыИУслуги КАК ТоварыИУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИУслуги.СтавкаНДС,
	|	ТоварыИУслуги.Ссылка,
	|	ТоварыИУслуги.Дата,
	|	ТоварыИУслуги.Организация,
	|	ТоварыИУслуги.Услуга,
	|	ТоварыИУслуги.Номенклатура,
	|	ТоварыИУслуги.Контрагент,
	|	ТоварыИУслуги.Дата";
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, , , , СтрокаТаблицы.Услуга);
	КонецЦикла;	
	
	Возврат ТаблицаДокумента;
	
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("СчетФактураДата", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
		СтруктураШапкиДокумента.ИсправляемыйДокументПоступления.Дата, СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("СчетФактура", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, 
		УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления), СтруктураШапкиДокумента.Ссылка));
	Запрос.УстановитьПараметр("ИсправленныйСчетФактура", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, СтруктураШапкиДокумента.Ссылка, Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка())); 
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
	
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""Восстановление НДС"" КАК Содержание,
	|	ЛОЖЬ КАК Услуга,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма > 0
	|			ТОГДА КорректировкаПоступленияТовары.СуммаНДСДоКорректировки - КорректировкаПоступленияТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма > 0
	|			ТОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК Период,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК ДатаСобытия,
	|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаПоступленияТовары.Ссылка.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА &СчетФактураДата < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ""18""
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""Восстановление НДС"",
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС),
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	КорректировкаПоступленияУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма > 0
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки - КорректировкаПоступленияУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма > 0
	|			ТОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Организация,
	|	КорректировкаПоступленияУслуги.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	КорректировкаПоступленияУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА &СчетФактураДата < ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА """"
	|		ИНАЧЕ ""18""
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка
	|	И КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""НДС"" КАК Содержание,
	|	ЛОЖЬ КАК Услуга,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК ДатаСобытия,
	|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияТовары.СуммаНДСДоКорректировки - КорректировкаПоступленияТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК Период,
	|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаПоступленияТовары.Ссылка.Контрагент КАК Поставщик,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Регистратор
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И КорректировкаПоступленияТовары.СуммаДоКорректировки - КорректировкаПоступленияТовары.Сумма < 0
	//|	И (НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""НДС"",
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету),
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	ЛОЖЬ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	КорректировкаПоступленияУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки - КорректировкаПоступленияУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма < 0
	|			ТОГДА (КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Организация,
	|	КорректировкаПоступленияУслуги.Ссылка.Контрагент,
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	КорректировкаПоступленияУслуги.Ссылка
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка
	|	И КорректировкаПоступленияУслуги.СуммаДоКорректировки - КорректировкаПоступленияУслуги.Сумма < 0";

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаВосстановление = Результат[2].Выгрузить();
	ТаблицаВычет = Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаВосстановление Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, , , , СтрокаТаблицы.Услуга);
	КонецЦикла;		
		
	Для Каждого СтрокаТаблицы Из ТаблицаВычет Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, , , , СтрокаТаблицы.Услуга);
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаВосстановление, ТаблицаВычет", ТаблицаВосстановление, ТаблицаВычет);
		
КонецФункции	

Функция КорректировкаПоступленияПодготовитьТаблицуКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	Если НЕ СтруктураШапкиДокумента.СложныйУчетНДС Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СчетФактура", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления, Истина));  
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&СчетФактура КАК Партия,
	|	КорректировкаПоступленияТовары.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.Количество - КорректировкаПоступленияТовары.КоличествоДоИзменения КАК Количество,
	|	ВЫБОР
	|		КОГДА (НЕ КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС)
	|			ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС - (КорректировкаПоступленияТовары.СуммаДоИзменения + КорректировкаПоступленияТовары.СуммаНДСДоИзменения)
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма - КорректировкаПоступленияТовары.СуммаДоИзменения
	|	КОНЕЦ КАК Стоимость,
	|	КорректировкаПоступленияТовары.Ссылка.Дата КАК Период,
	|	КорректировкаПоступленияТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка КАК Регистратор,
	|	ЛОЖЬ КАК НоваяСтрока,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20 / 120
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18 / 118
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10 / 110
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДСМножитель
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияТовары.КоличествоДоИзменения - КорректировкаПоступленияТовары.Количество <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма <> 0)
	|	И КорректировкаПоступленияТовары.КоличествоДоИзменения <> 0
//	|	И (НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&СчетФактура,
	|	КорректировкаПоступленияТовары.Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка),
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.СерияНоменклатуры,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.Количество,
	|	ВЫБОР
	|		КОГДА (НЕ КорректировкаПоступленияТовары.Ссылка.СуммаВключаетНДС)
	|			ТОГДА КорректировкаПоступленияТовары.Сумма + КорректировкаПоступленияТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаПоступленияТовары.Сумма
	|	КОНЕЦ,
	|	КорректировкаПоступленияТовары.Ссылка.Дата,
	|	КорректировкаПоступленияТовары.Ссылка.Организация,
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Ссылка,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20 / 120
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18 / 118
	|		КОГДА КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ КорректировкаПоступленияТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10 / 110
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка
	|	И (КорректировкаПоступленияТовары.КоличествоДоИзменения - КорректировкаПоступленияТовары.Количество <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаНДСДоИзменения - КорректировкаПоступленияТовары.СуммаНДС <> 0
	|			ИЛИ КорректировкаПоступленияТовары.СуммаДоИзменения - КорректировкаПоступленияТовары.Сумма <> 0)
	|	И КорректировкаПоступленияТовары.КоличествоДоИзменения = 0
//	|	И (НЕ КорректировкаПоступленияТовары.СчетУчета.Забалансовый)
	|";
		
	ТаблицаКорректировки = Запрос.Выполнить().Выгрузить();
				
	Для Каждого СтрокаТаблицы Из ТаблицаКорректировки Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, , , , Ложь);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаКорректировки);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.Партия,
	|	ТаблицаДокумента.Склад,
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.СерияНоменклатуры,
	|	ТаблицаДокумента.ХарактеристикаНоменклатуры,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Стоимость,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.НоваяСтрока,
	|	ТаблицаДокумента.СтавкаНДСМножитель
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаДокумента.СчетФактура,
	|	ВТТаблицаДокумента.Партия,
	|	ВТТаблицаДокумента.Склад,
	|	ВТТаблицаДокумента.ВидЦенности,
	|	ВТТаблицаДокумента.Номенклатура,
	|	ВТТаблицаДокумента.СерияНоменклатуры,
	|	ВТТаблицаДокумента.ХарактеристикаНоменклатуры,
	|	ВТТаблицаДокумента.СтавкаНДС,
	|	ВТТаблицаДокумента.Количество,
	|	ВТТаблицаДокумента.Стоимость * (&Курс / &Кратность) * ВТТаблицаДокумента.СтавкаНДСМножитель КАК НДС,
	|	ВТТаблицаДокумента.Стоимость * (&Курс / &Кратность) КАК Стоимость,
	|	ВТТаблицаДокумента.Период,
	|	ВТТаблицаДокумента.Организация,
	|	ВТТаблицаДокумента.НомерСтроки,
	|	ВТТаблицаДокумента.Регистратор,
	|	ВТТаблицаДокумента.НоваяСтрока,
	|	НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
	|ИЗ
	|	ВТТаблицаДокумента КАК ВТТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПартииТоваров.Остатки(
	|				&МоментДокумента,
	|				Организация = &Организация
	|					И СчетФактура = &СчетФактура) КАК НДСПоПриобретеннымЦенностямОстатки
	|		ПО ВТТаблицаДокумента.Номенклатура = НДСПоПриобретеннымЦенностямОстатки.Номенклатура
	|			И ВТТаблицаДокумента.СерияНоменклатуры = НДСПоПриобретеннымЦенностямОстатки.СерияНоменклатуры
	|			И ВТТаблицаДокумента.ХарактеристикаНоменклатуры = НДСПоПриобретеннымЦенностямОстатки.ХарактеристикаНоменклатуры
	|			И ВТТаблицаДокумента.ВидЦенности = НДСПоПриобретеннымЦенностямОстатки.ВидЦенности
	|			И ВТТаблицаДокумента.Склад = НДСПоПриобретеннымЦенностямОстатки.Склад
	|ГДЕ
	|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток > 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток > 0
	|			ИЛИ ВТТаблицаДокумента.НоваяСтрока)";
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Функция КорректировкаПоступленияПроверитьНаличиеКосвенныхРасходов(СтруктураШапкиДокумента)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления, Истина));
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
    Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСКосвенныеРасходыОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|			,
	|			&МоментДокумента,
	|			Регистратор,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСКосвенныеРасходыОбороты";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

Процедура КорректировкаПоступленияСформироватьКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения)
	
	СтруктураТаблиц = КорректировкаПоступленияПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВычет, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВосстановление, СтруктураШапкиДокумента, Истина);
    	                                                                                
	Если СтруктураШапкиДокумента.ВосстановитьНДС Тогда
		КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, СтруктураТаблиц.ТаблицаВосстановление, , Движения);	
	КонецЕсли;	
	
	Если ЕстьКосвенныеРасходы Тогда
		// НДС принят к вычету в пропорции определенной согласно п.4 ст.170 НК РФ
		ТаблицаВычетНДС = КорректировкаПоступленияПодготовитьТаблицуВычетНДССУчетомПропорции(СтруктураШапкиДокумента, СтруктураТаблиц.ТаблицаВычет);
	Иначе
		// НДС будет предъявлен к вычету по строкам на увеличение стоимости	
		ТаблицаВычетНДС = СтруктураТаблиц.ТаблицаВычет;
	КонецЕсли;
	
	КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаВычетНДС, , Движения);
			
КонецПроцедуры	

Процедура КорректировкаПоступленияСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, СтруктураТаблицСторноНДС, Движения)
	
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументПоступления);
	
	Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		// Сторно движений исправляемого документа
		КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПродаж, Истина, Движения);
		// Новые движения по исправленному корректировочному счету-фактуре
		КорректировкаПоступленияСформироватьКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения);	
				
	Иначе	
						
		ТаблицаДокумента = КорректировкаПоступленияПодготовитьТаблицуВычетНДСНаОснованииДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
		
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДокумента, СтруктураШапкиДокумента, Истина);
		
		Если ЕстьКосвенныеРасходы Тогда
			// НДС принят к вычету в пропорции определенной согласно п.4 ст.170 НК РФ
			ТаблицаВычетНДС = КорректировкаПоступленияПодготовитьТаблицуВычетНДССУчетомПропорции(СтруктураШапкиДокумента, ТаблицаДокумента);					
		Иначе
			// НДС будет предъявлен к вычету за минусом включенного в стомость
			ТаблицаВычетНДС = КорректировкаПоступленияПодготовитьТаблицуВычетНДСЗаМинусомНалогаВключенногоВСтоимость(СтруктураШапкиДокумента, ТаблицаДокумента);
		КонецЕсли;;	
				
		КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаВычетНДС, , Движения);	
						
	КонецЕсли;	
		
КонецПроцедуры	

Процедура КорректировкаПоступленияДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда // Исправительный счет-фактура	
		
		// Сторно движений исправляемого документа
		КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПокупок, Движения);
		КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.НДСПредъявленный, Истина, Движения);
		
		КорректировкаПоступленияСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, СтруктураТаблицСторноНДС, Движения);
		
		
	Иначе // Корректировочный счет-фактура
		
		КорректировкаПоступленияСформироватьКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения);
				
	КонецЕсли;
	
	ТаблицаКорректировкаНДСПоПартиямЗапасов = КорректировкаПоступленияПодготовитьТаблицуКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
	КорректировкаПоступленияСформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, ТаблицаКорректировкаНДСПоПартиямЗапасов, Движения);
		
КонецПроцедуры		

Процедура КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, ТаблицаДвижений, Движения)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
			
		// НДС Покупки
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура КорректировкаПоступленияСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДвижений, Сторно = Ложь, Движения)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
    		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
	КонецЦикла;
			
КонецПроцедуры

Процедура КорректировкаПоступленияСформироватьДвиженияНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Сторно = Ложь, Движения)
	
	Если ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаПредъявленногоНДС Цикл 
		Если Сторно Тогда
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе
			Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
				
	КонецЦикла;	
		
КонецПроцедуры	

Процедура КорректировкаПоступленияСформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(СтруктураШапкиДокумента, ТаблицаДвижений, Движения)
	
	Если ТаблицаДвижений = Неопределено
		ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПартииТоваров", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл 
				
		Движение = Движения.НДСПартииТоваров.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
	КонецЦикла;
				
КонецПроцедуры	

Функция КорректировкаПоступленияПолучитьТаблицыДокумента(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияТовары.НомерСтроки,
	|	КорректировкаПоступленияТовары.Номенклатура,
	|	КорректировкаПоступленияТовары.Количество,
	|	КорректировкаПоступленияТовары.Цена,
	|	КорректировкаПоступленияТовары.Сумма,
	|	КорректировкаПоступленияТовары.СтавкаНДС,
	|	КорректировкаПоступленияТовары.СуммаНДС,
	|	КорректировкаПоступленияТовары.СерияНоменклатуры,
	|	КорректировкаПоступленияТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаПоступленияТовары.Склад,
	|	КорректировкаПоступленияТовары.КоличествоДоИзменения,
	|	КорректировкаПоступленияТовары.ЦенаДоИзменения,
	|	КорректировкаПоступленияТовары.СтавкаНДСДоИзменения,
	|	КорректировкаПоступленияТовары.СуммаДоИзменения,
	|	КорректировкаПоступленияТовары.СуммаНДСДоИзменения,
	|	КорректировкаПоступленияТовары.КоличествоДоКорректировки,
	|	КорректировкаПоступленияТовары.ЦенаДоКорректировки,
	|	КорректировкаПоступленияТовары.СуммаДоКорректировки,
	|	КорректировкаПоступленияТовары.СуммаНДСДоКорректировки,
	|	КорректировкаПоступленияТовары.Ссылка,
	|	КорректировкаПоступленияТовары.Ссылка.Дата,
	|	КорректировкаПоступленияТовары.Ссылка.Организация,
	|	КорректировкаПоступленияТовары.Ссылка.Контрагент
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|ГДЕ
	|	КорректировкаПоступленияТовары.Ссылка = &Ссылка";
	
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПоступленияУслуги.НомерСтроки,
	|	КорректировкаПоступленияУслуги.Номенклатура,
	|	КорректировкаПоступленияУслуги.Количество,
	|	КорректировкаПоступленияУслуги.Цена,
	|	КорректировкаПоступленияУслуги.Сумма,
	|	КорректировкаПоступленияУслуги.СтавкаНДС,
	|	КорректировкаПоступленияУслуги.СуммаНДС,
	|	КорректировкаПоступленияУслуги.КоличествоДоИзменения,
	|	КорректировкаПоступленияУслуги.ЦенаДоИзменения,
	|	КорректировкаПоступленияУслуги.СтавкаНДСДоИзменения,
	|	КорректировкаПоступленияУслуги.СуммаНДСДоИзменения,
	|	КорректировкаПоступленияУслуги.СуммаДоИзменения,
	|	КорректировкаПоступленияУслуги.КоличествоДоКорректировки,
	|	КорректировкаПоступленияУслуги.ЦенаДоКорректировки,
	|	КорректировкаПоступленияУслуги.СуммаДоКорректировки,
	|	КорректировкаПоступленияУслуги.СуммаНДСДоКорректировки,
	|	КорректировкаПоступленияУслуги.Ссылка,
	|	КорректировкаПоступленияУслуги.СтатьяЗатрат,
	|	КорректировкаПоступленияУслуги.НоменклатурнаяГруппа,
	|	КорректировкаПоступленияУслуги.Подразделение,
	|	КорректировкаПоступленияУслуги.Ссылка.Дата,
	|	КорректировкаПоступленияУслуги.Ссылка.Организация,
	|	КорректировкаПоступленияУслуги.Ссылка.Контрагент
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК КорректировкаПоступленияУслуги
	|ГДЕ
	|	КорректировкаПоступленияУслуги.Ссылка = &Ссылка";
	
	ТаблицаПоУслугам = Запрос.Выполнить().Выгрузить();
	
	Возврат Новый Структура("ТаблицаПоТоварам, ТаблицаПоУслугам", ТаблицаПоТоварам, ТаблицаПоУслугам);
	
КонецФункции

Процедура ПровестиКорректировкуПоступленияПоРегистрамНДС(СтруктураШапкиДокумента, ДокументСсылка) Экспорт
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") 
		или не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
		КонецЕсли;
		Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
	    	СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли;
	
	Движения = Новый Структура();
		
	СтруктураТаблицСторноНДС = КорректировкаПоступленияПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента);
	СтруктураТаблицДокумента = КорректировкаПоступленияПолучитьТаблицыДокумента(СтруктураШапкиДокумента);
	ЕстьКосвенныеРасходы = КорректировкаПоступленияПроверитьНаличиеКосвенныхРасходов(СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда	
		КорректировкаПоступленияДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, СтруктураТаблицДокумента, ЕстьКосвенныеРасходы, Движения);	
	КонецЕсли;
		
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.мПериод = СтруктураШапкиДокумента.Дата;
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Корректировка реализации

Функция КорректировкаРеализацииПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос();
	
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	ДатаИсправляемогоДокумента = ИсправляемыйДокумент.Дата;
	
	ИсходныйСчетФактура = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации, Истина);
	ИсходныйСчетФактураДата = ИсходныйСчетФактура.Дата;
	
	Если УчетНДС.ПолучитьПорядокКорректировкиНДС(ДатаИсправляемогоДокумента) = 1 И ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйСчетФактураДата = ИсправляемыйДокумент.Дата; 
	КонецЕсли;

	Запрос.УстановитьПараметр("ИсходныйСчетФактураДата", ИсходныйСчетФактураДата);
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование реализации"" КАК Содержание,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорАванса,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПродаж";
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("КнигаПродаж", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование реализации"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорАванса,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот * -1 КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК ЗаписиКнигиПокупок";
	
	СтруктураТаблиц.Вставить("КнигаПокупок", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	NULL КАК Событие,
	|	NULL КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСПредъявленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСПредъявленный", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСНачисленныйОстатки.Организация,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорАванса,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	NULL КАК Событие,
	|	NULL КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура) КАК НДСНачисленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСНачисленный", Запрос.Выполнить().Выгрузить());
    	
	Возврат СтруктураТаблиц;
			
КонецФункции

Функция КорректировкаРеализацииПодготовитьТаблицуНачисленияНДСПоДаннымДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	Запрос = Новый Запрос();
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	ДатаСчетаФактуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИсправляемыйДокумент, "Дата");		
	
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
    Запрос.УстановитьПараметр("ИсправляемыйДокумент", ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("ИсходныйДокумент", УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации, Истина));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", ДатаСчетаФактуры);
	//Запрос.УстановитьПараметр("Принятые", Перечисления.ПринадлежностьНоменклатуры.Принятый);
	Запрос.УстановитьПараметр("Событие", ?(ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику"), 
			Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате, Перечисления.СобытияПоНДСПродажи.Реализация));
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Ссылка,
	|	ЛОЖЬ КАК Услуга,
	|	ТаблицаТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	""Реализация товаров"" КАК Содержание
	|ПОМЕСТИТЬ ВТТоварыИУслуги
	|ИЗ
	|	ВТТаблицаПоТоварам КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
//	|	И ТаблицаТовары.ПринадлежностьНоменклатуры <> &Принятые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.Ссылка,
	|	ИСТИНА,
	|	ТаблицаУслуги.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги),
	|	""Реализация услуг""
	|ИЗ
	|	ВТТаблицаПоУслугам КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИУслуги.ВидЦенности КАК ВидЦенности,
	|	ТоварыИУслуги.Содержание КАК Содержание,
	|	ТоварыИУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТоварыИУслуги.Сумма) КАК Сумма,
	|	СУММА(ТоварыИУслуги.СуммаНДС) КАК НДС,
	|	ТоварыИУслуги.Ссылка КАК Регистратор,
	|	ТоварыИУслуги.Ссылка.Дата КАК Период,
	|	ТоварыИУслуги.Ссылка.Организация КАК Организация,
	|	ТоварыИУслуги.Ссылка.Контрагент КАК Покупатель,
	|	ТоварыИУслуги.Ссылка КАК ИсправленныйСчетФактура,
	|	&Событие КАК Событие,
	|	ТоварыИУслуги.Ссылка.Дата КАК ДатаСобытия,
	|	&ИсправляемыйДокумент КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ДатаСчетаФактуры, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ДатаСчетаФактуры, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ТоварыИУслуги.Услуга КАК Услуга,
	|	ТоварыИУслуги.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТТоварыИУслуги КАК ТоварыИУслуги
	|ГДЕ
	|	ТоварыИУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИУслуги.СтавкаНДС,
	|	ТоварыИУслуги.ВидЦенности,
	|	ТоварыИУслуги.Содержание,
	|	ТоварыИУслуги.Ссылка,
	|	ТоварыИУслуги.Ссылка.Дата,
	|	ТоварыИУслуги.Ссылка.Организация,
	|	ТоварыИУслуги.Услуга,
	|	ТоварыИУслуги.Номенклатура,
	|	ТоварыИУслуги.Ссылка.Контрагент,
	|	ТоварыИУслуги.Ссылка,
	|	ТоварыИУслуги.Ссылка.Дата";
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл 
		Если НЕ СтрокаТаблицы.Услуга Тогда
			СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
				СтрокаТаблицы.Номенклатура, , , , СтрокаТаблицы.Услуга);
		КонецЕсли;		
	КонецЦикла;	
		
	Возврат ТаблицаДокумента;
    	
КонецФункции	

Функция КорректировкаРеализацииПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента)
	
	ДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации, Истина);
	
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	ДатаИсправляемогоДокумента = ИсправляемыйДокумент.Дата;

	СчетФактура = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, 
		ИсправляемыйДокумент, СтруктураШапкиДокумента.Ссылка);
	СчетФактураДата = СчетФактура.Дата;
	
	КорректироватьВТекущемПериоде = Ложь;
	Если УчетНДС.ПолучитьПорядокКорректировкиНДС(ДатаИсправляемогоДокумента) = 1 И ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		СчетФактураДата = ДатаИсправляемогоДокумента;
		КорректироватьВТекущемПериоде = Истина;
	ИначеЕсли УчетНДС.ПолучитьПорядокКорректировкиНДС(СчетФактураДата) = 1 Тогда
		КорректироватьВТекущемПериоде = Истина;
	Иначе
		СчетФактураДата = ДокументРеализацииСсылка.Дата;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Курс", СтруктураШапкиДокумента.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
    Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	//Запрос.УстановитьПараметр("Принятые", Перечисления.ПринадлежностьНоменклатуры.Принятый);
	Запрос.УстановитьПараметр("СчетФактураДата", СчетФактураДата);
	Запрос.УстановитьПараметр("ИсправленныйСчетФактура", 
		?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, СтруктураШапкиДокумента.Ссылка, Неопределено)); 
	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("ТаблицаПоТоварам", СтруктураТаблицДокумента.ТаблицаПоТоварам);
	Запрос.УстановитьПараметр("ТаблицаПоУслугам", СтруктураТаблицДокумента.ТаблицаПоУслугам);
	Запрос.УстановитьПараметр("КорректироватьВТекущемПериоде", КорректироватьВТекущемПериоде);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоТоварам
	|ИЗ
	|	&ТаблицаПоТоварам КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаПоУслугам
	|ИЗ
	|	&ТаблицаПоУслугам КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""Корректировка НДС"" КАК Содержание,
	|	ЛОЖЬ КАК Услуга,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоКорректировки - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК Период,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК ДатаСобытия,
	|	КорректировкаРеализацииТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент КАК Поставщик,
	|	ЛОЖЬ КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	КорректировкаРеализацииТовары.НомерСтроки,
	|	КорректировкаРеализацииТовары.Ссылка КАК Регистратор
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма > 0
	//|	И КорректировкаРеализацииТовары.ПринадлежностьНоменклатуры <> &Принятые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""Корректировка НДС"",
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету),
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Ссылка.Организация,
	|	КорректировкаРеализацииУслуги.Ссылка.Контрагент,
	|	ЛОЖЬ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ЛОЖЬ,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Ссылка
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка
	|	И КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СчетФактура КАК СчетФактура,
	|	&ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	""Реализация товаров"" КАК Содержание,
	|	ЛОЖЬ КАК Услуга,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦенности,
	|	&Событие КАК Событие,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК ДатаСобытия,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоКорректировки - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК Период,
	|	КорректировкаРеализацииТовары.Ссылка.Организация КАК Организация,
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент КАК Покупатель,
	|	КорректировкаРеализацииТовары.НомерСтроки,
	|	КорректировкаРеализацииТовары.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ) ИЛИ &КорректироватьВТекущемпериоде
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ЛОЖЬ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ) ИЛИ &КорректироватьВТекущемпериоде
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод
	|ИЗ
	|	ВТТаблицаПоТоварам КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И КорректировкаРеализацииТовары.СуммаДоКорректировки - КорректировкаРеализацииТовары.Сумма < 0
	//|	И КорректировкаРеализацииТовары.ПринадлежностьНоменклатуры <> &Принятые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СчетФактура,
	|	&ИсправленныйСчетФактура,
	|	""Реализация услуг"",
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	&Событие,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	КорректировкаРеализацииУслуги.Ссылка.Дата,
	|	КорректировкаРеализацииУслуги.Ссылка.Организация,
	|	КорректировкаРеализацииУслуги.Ссылка.Контрагент,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ) ИЛИ &КорректироватьВТекущемпериоде
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&СчетФактураДата, КВАРТАЛ) ИЛИ &КорректироватьВТекущемпериоде
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&СчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ
	|ИЗ
	|	ВТТаблицаПоУслугам КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка
	|	И КорректировкаРеализацииУслуги.СуммаДоКорректировки - КорректировкаРеализацииУслуги.Сумма < 0";

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаВычет = Результат[2].Выгрузить();
	ТаблицаВосстановление = Результат[3].Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаВосстановление Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, , , , СтрокаТаблицы.Услуга);
	КонецЦикла;		
		
	Для Каждого СтрокаТаблицы Из ТаблицаВычет Цикл 
		СтрокаТаблицы.ВидЦенности = УчетНДС.ОпределитьВидЦенности(
			СтрокаТаблицы.Номенклатура, , , , СтрокаТаблицы.Услуга);
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаВосстановление, ТаблицаВычет", ТаблицаВосстановление, ТаблицаВычет);
    	
КонецФункции	

Процедура КорректировкаРеализацииСформироватьДвиженияСторноВычетаНДС(СтруктураШапкиДокумента, ТаблицаСторноНДС, Движения)
	
	КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, ТаблицаСторноНДС, Движения);
	
КонецПроцедуры	

Процедура КорректировкаРеализацииСформироватьДвиженияПредъявленНДС(СтруктураШапкиДокумента, ТаблицаПредъявленногоНДС, Сторно = Ложь, Движения)
	
	Если ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
		
	ТаблицаПредъявленногоНДС.Свернуть(
		"ВидЦенности, СтавкаНДС, Поставщик, Организация, СчетФактура, ИсправленныйСчетФактура, Событие, ДатаСобытия, 
		| Регистратор, Период", "СуммаБезНДС, НДС");
		
	Для каждого СтрокаДвижения Из ТаблицаПредъявленногоНДС Цикл
		
		Если Сторно Тогда
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе			
			Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
          
  	КонецЦикла;
		
КонецПроцедуры

Процедура КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПокупок(СтруктураШапкиДокумента, ТаблицаДвижений, Движения)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
      		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		                       	
	КонецЦикла;
				
КонецПроцедуры

Процедура КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДвижений, Движения)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		Если СтрокаДвижения.НДС = 0 И СтрокаДвижения.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		                       	
	КонецЦикла;
	
КонецПроцедуры

Процедура КорректировкаРеализацииСформироватьКорректировочныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, Движения)
	
	СтруктураТаблиц = КорректировкаРеализацииПодготовитьТаблицуКорректировочныеДвиженияНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВычет, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(СтруктураТаблиц.ТаблицаВосстановление, СтруктураШапкиДокумента, Истина);
	
	// Отражение предъявленного НДС по строкам на уменьшение стоимости	
	КорректировкаРеализацииСформироватьДвиженияПредъявленНДС(СтруктураШапкиДокумента, СтруктураТаблиц.ТаблицаВычет, , Движения);
			
	ТаблицаДвижений = СтруктураТаблиц.ТаблицаВосстановление;
	ТаблицаДвижений.Свернуть(
		"Организация, Покупатель, СчетФактура, ВидЦенности, СтавкаНДС, Событие, ДатаСобытия, ЗаписьДополнительногоЛиста, СторнирующаяЗаписьДопЛиста, 
		| КорректируемыйПериод, ИсправленныйСчетФактура, Период, Регистратор", 
		"СуммаБезНДС, НДС");
    	
	КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДвижений, Движения);
		
КонецПроцедуры	

Процедура КорректировкаРеализацииСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения)
	
	ИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	
	Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Сторно движений исправляемого документа
		КорректировкаРеализацииСформироватьДвиженияПредъявленНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.НДСПредъявленный, Истина, Движения);
    	КорректировкаРеализацииСформироватьДвиженияСторноВычетаНДС(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПокупок, Движения);
		
		// Новые движения по исправленному корректировочному счету-фактуре
		КорректировкаРеализацииСформироватьКорректировочныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, Движения);
		
	Иначе
		
		ТаблицаДокумента = КорректировкаРеализацииПодготовитьТаблицуНачисленияНДСПоДаннымДокумента(СтруктураШапкиДокумента, СтруктураТаблицДокумента);	
		
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДокумента, СтруктураШапкиДокумента, Истина);
		
		ТаблицаДокумента.Свернуть(
			"ВидЦенности, СтавкаНДС, Покупатель, Организация, СчетФактура, ИсправленныйСчетФактура, Событие, ДатаСобытия, 
			| ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста, Регистратор, Период",
			"СуммаБезНДС, НДС");
				
		КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, ТаблицаДокумента, Движения);
				
	КонецЕсли;	
		
КонецПроцедуры	

Процедура КорректировкаРеализацииДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения)
	
	//Если НДС еще не отражен в книге продаж, следует его там отразить
	Если СтруктураТаблицСторноНДС.НДСНачисленный.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения,"НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
		
		Для Каждого СтрокаДвижения Из СтруктураТаблицСторноНДС.НДСНачисленный Цикл
			
			// НДС Начисленный
			Движение = Движения.НДСНачисленный.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
			
			// Книга продаж
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
			Движение.Событие 		= Перечисления.СобытияПоНДСПродажи.Реализация;
			Движение.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
				// Книга продаж сторно
				Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
				Движение.Событие 		= Перечисления.СобытияПоНДСПродажи.Реализация;
				Движение.ДатаСобытия 	= СтруктураШапкиДокумента.Дата;
				Движение.СуммаБезНДС	= - СтрокаДвижения.СуммаБезНДС;
				Движение.НДС			= - СтрокаДвижения.НДС;
			КонецЕсли;
			
		КонецЦикла;
		
		Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
		ДатаСобытия = СтруктураШапкиДокумента.Дата;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		// Сторно движений исправляемого документа
		КорректировкаРеализацииСформироватьДвиженияЗаписьКнигиПродаж(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС.КнигаПродаж, Движения);
				
		// Формирование исправленных движений
		КорректировкаРеализацииСформироватьИсправительныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения);
		
	Иначе
		// Формирование корректировочных движений
		КорректировкаРеализацииСформироватьКорректировочныеДвижения(СтруктураШапкиДокумента, СтруктураТаблицДокумента, Движения);
		
	КонецЕсли;	
	
КонецПроцедуры

Функция КорректировкаРеализацииПолучитьТаблицыДокумента(СтруктураШапкиДокумента)
	
	//Получим цепочку корректирующих документов для запроса по партиям
	МассивОснований = Новый Массив;
	ЭлементМассиваОснований = СтруктураШапкиДокумента.ДокументРеализации;
	МассивОснований.Добавить(СтруктураШапкиДокумента.Ссылка);
	МассивОснований.Добавить(ЭлементМассиваОснований);
	Пока ТипЗнч(ЭлементМассиваОснований) = Тип("ДокументСсылка.КорректировкаРеализации") Цикл
		ЭлементМассиваОснований = ЭлементМассиваОснований.ДокументРеализации;
		Если МассивОснований.Найти(ЭлементМассиваОснований) = Неопределено Тогда
			МассивОснований.Добавить(ЭлементМассиваОснований);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("МассивОснований", МассивОснований);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	КорректировкаРеализацииТовары.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
	|	КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Коэффициент / КорректировкаРеализацииТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	КорректировкаРеализацииТовары.ПринадлежностьНоменклатуры,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры,
	|	КорректировкаРеализацииТовары.Склад,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.Цена,
	|	КорректировкаРеализацииТовары.Сумма,
	|	КорректировкаРеализацииТовары.СуммаНДС,
	|	КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.Коэффициент / КорректировкаРеализацииТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоДоКорректировки,
	|	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
	|	КорректировкаРеализацииТовары.СуммаДоКорректировки,
	|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения * КорректировкаРеализацииТовары.Коэффициент / КорректировкаРеализацииТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.СтавкаНДСДоИзменения
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	КорректировкаРеализацииУслуги.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КорректировкаРеализацииУслуги.Содержание,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.КоличествоДоКорректировки,
	|	КорректировкаРеализацииУслуги.ЦенаДоКорректировки,
	|	КорректировкаРеализацииУслуги.СуммаДоКорректировки,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки,
	|	КорректировкаРеализацииУслуги.СодержаниеДоИзменения,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	КорректировкаРеализацииУслуги.ЦенаДоИзменения,
	|	КорректировкаРеализацииУслуги.СуммаДоИзменения,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.СтавкаНДСДоИзменения
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	СУММА(ВЫБОР КОГДА ПартииТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|			ТОГДА ПартииТоваровНаСкладах.Количество
	|	ИНАЧЕ -ПартииТоваровНаСкладах.Количество КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор В(&МассивОснований)
	|	И ПартииТоваровНаСкладах.СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	NULL,
	|	СУММА(ВЫБОР КОГДА ПартииТоваровПереданные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|			ТОГДА ПартииТоваровПереданные.Количество
	|	ИНАЧЕ -ПартииТоваровПереданные.Количество КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК ПартииТоваровПереданные
	|ГДЕ
	|	ПартииТоваровПереданные.Регистратор В(&МассивОснований)
	|	И ПартииТоваровПереданные.СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры";
	
	Результат 				= Запрос.ВыполнитьПакет();
	ТаблицаПоТоварам 		= Результат[0].Выгрузить();
	ТаблицаПоУслугам	 	= Результат[1].Выгрузить();
	НеКорректируемые		= Результат[2].Выгрузить();
	
	//Вычтем из таблицы товаров не корректируемые
	ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СтруктураШапкиДокумента.ДокументРеализации);
	Для Каждого СтрокаКомиссии Из НеКорректируемые Цикл 
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтрокиТоваров = ТаблицаПоТоварам.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаКомиссии.Номенклатура, СтрокаКомиссии.ХарактеристикаНоменклатуры));
		Иначе
			СтрокиТоваров = ТаблицаПоТоварам.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", СтрокаКомиссии.Номенклатура, СтрокаКомиссии.ХарактеристикаНоменклатуры, СтрокаКомиссии.СерияНоменклатуры));
		КонецЕсли;
		Для Каждого КомТовар Из СтрокиТоваров Цикл
			Если СтрокаКомиссии.Количество <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если КомТовар.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоСтроке = Мин(СтрокаКомиссии.Количество, КомТовар.Количество);
			СтрокаКомиссии.Количество = СтрокаКомиссии.Количество - КоличествоПоСтроке;
			Коэфф = КоличествоПоСтроке/КомТовар.Количество;
			
			КомТовар.Количество 				= КомТовар.Количество - КоличествоПоСтроке;
			КомТовар.Сумма 						= КомТовар.Сумма - Окр(Коэфф*КомТовар.Сумма, 2, 1);
			КомТовар.СуммаНДС 					= КомТовар.СуммаНДС - Окр(Коэфф*КомТовар.СуммаНДС, 2, 1);
			КомТовар.СуммаДоКорректировки 		= КомТовар.СуммаНДС - Окр(Коэфф*КомТовар.СуммаНДС, 2, 1);
			КомТовар.СуммаДоИзменения 			= КомТовар.СуммаНДС - Окр(Коэфф*КомТовар.СуммаНДС, 2, 1);
			КомТовар.СуммаНДСДоКорректировки 	= КомТовар.СуммаНДС - Окр(Коэфф*КомТовар.СуммаНДС, 2, 1);
			КомТовар.СуммаНДСДоИзменения 		= КомТовар.СуммаНДС - Окр(Коэфф*КомТовар.СуммаНДС, 2, 1);
			
		КонецЦикла;		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаПоТоварам, ТаблицаПоУслугам", ТаблицаПоТоварам, ТаблицаПоУслугам);
	
КонецФункции

Процедура ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, ДокументСсылка) Экспорт
	
	Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") 
		или не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") 
		Тогда
		ОшибкаВПолучении = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаВПолучении, СтруктураШапкиДокумента.Организация, "Нал");
		Если не СтруктураШапкиДокумента.Свойство("ОрганизацияНеЯвляетсяПлательщикомНДС") Тогда
			СтруктураШапкиДокумента.Вставить("ОрганизацияНеЯвляетсяПлательщикомНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС));
		КонецЕсли;
		Если не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС") Тогда
	    	СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ОшибкаВПолучении = Ложь И УчетнаяПолитика.СложныйУчетНДС));
		КонецЕсли;
	КонецЕсли;
	
	Движения = Новый Структура();
		
	СтруктураТаблицСторноНДС = КорректировкаРеализацииПодготовитьСтруктуруТаблицСторнирующихНДСЗаписей(СтруктураШапкиДокумента);
	СтруктураТаблицДокумента = КорректировкаРеализацииПолучитьТаблицыДокумента(СтруктураШапкиДокумента);
	
	Если (Не СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС ИЛИ СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134) И СтруктураШапкиДокумента.УчитыватьНДС Тогда	
		КорректировкаРеализацииДвиженияПоРегистрамНДС(СтруктураШапкиДокумента, СтруктураТаблицДокумента, СтруктураТаблицСторноНДС, Движения);	
	КонецЕсли;
		
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.мПериод = СтруктураШапкиДокумента.Дата;
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// КОРРЕКТИРОВОЧНЫЕ ДОКУМЕНТЫ
////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////
//  ПО НДС ПРЕДЪЯВЛЕННОМУ ПО ПОЛУЧЕННОМУ СЧЕТУ-ФАКТУРЕ НА АВАНС

// Формирует движения по регистрам НДС для документа СФ Полученный на аванс
//
Процедура СформироватьДвиженияСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт
	
	Если УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата) = 2 Тогда
		Если СтруктураШапкиДокумента.Исправление Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	СформироватьДвиженияНДСПредъявленныйСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	СформироватьДвиженияНДСсАвансовСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

// Формирует движения по регистру НДСПредъявленный для документа СФ Полученный на аванс
//
Процедура СформироватьДвиженияНДСПредъявленныйСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	
	Для Каждого СтрокаОснования Из ТаблицаПоСчетуФактуре Цикл
		
		ТаблицаПоОснованию = СтрокаОснования.ТаблицаДанных;
		Для Каждого СтрокаТаблицы Из ТаблицаПоОснованию Цикл
			СтрокаДвижений = ТаблицаДвижений_НДСПредъявленный.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
			СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.НДСПредъявленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьПриход();
	
КонецПроцедуры

// Формирует движения по регистру НДСсАвансов для документа СФ полученный на аванс
//
Процедура СформироватьДвиженияНДСсАвансовСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
    ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();

	Для Каждого СтрокаОснования Из ТаблицаПоСчетуФактуре Цикл
		
		ТаблицаПоОснованию = СтрокаОснования.ТаблицаДанных;
		Для Каждого СтрокаТаблицы Из ТаблицаПоОснованию Цикл
			СтрокаДвижений = ТаблицаДвижений_НДССАвансов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
			СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.Покупатель = СтрокаТаблицы.Контрагент;
			СтрокаДвижений.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
	Движения.НДСсАвансов.ВыполнитьПриход();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Исправленные счета-фактуры полученные на аванс

Процедура ПровестиИсправленныйПолученныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Возврат;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	// Готовим таблицы с данными для сторно-движений
	
	СтруктураТаблицСторноНДС = ИсправленныйПолученныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента);
	
	// Формируем движения
	
	СформироватьСторноДвиженияИсправляемыйСчетФактуруПолученный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения);
	
	// По исправленному счету-фактуре делаем записи в НДСпредъявленный
	СформироватьДвиженияНДСпредъявленныйСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	// Формируем движения по НДСсАвансов по исправленному счету-фактуре
	СформироватьДвиженияНДСсАвансовСчетФактураПолученныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	// Записываем сформированные движения
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

Функция ИсправленныйПолученныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента)

	Запрос = Новый Запрос();
	
	ИсходныйСчетФактура = СтруктураШапкиДокумента.ДокументОснование;
	Запрос.УстановитьПараметр("ИсходныйСчетФактура", ИсходныйСчетФактура);
	Запрос.УстановитьПараметр("ИсходныйСчетФактураДата", ИсходныйСчетФактура.Дата);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	// Регистр накопления НДСЗаписиКнигиПокупок
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорАванса = &ДоговорКонтрагента) КАК ЗаписиКнигиПокупок";
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("НДСЗаписиКнигиПокупок", Запрос.Выполнить().Выгрузить());
	
	// Регистр накопления НДСПредъявленный
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	&Период КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК НДСПредъявленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСПредъявленный", Запрос.Выполнить().Выгрузить());
    	
	// Регистр накопления НДСсАвансов
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.ВидЦенности,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ИсправленныйСчетФактура,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток КАК ВалютнаяСуммаСНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток КАК НДС,
	|	&Период КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК НДСсАвансовОстатки";
	
	СтруктураТаблиц.Вставить("НДСсАвансов", Запрос.Выполнить().Выгрузить());
    	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура СформироватьСторноДвиженияИсправляемыйСчетФактуруПолученный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения)

	// Если НДС по исправляемому счету-фактуре еще не был принят к вычету (не был отражен в книге покупок), 
	// списываем остатки регистра НДСПредъявленный
	Если СтруктураТаблицСторноНДС.НДСПредъявленный.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСПредъявленный", СтруктураШапкиДокумента.Ссылка);
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
		ДатаИсходногоДокумента = СтруктураШапкиДокумента.ДокументОснование.Дата;
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСПредъявленный Цикл
			
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;

	// Если счет-фактура был отражен в книге покупок ранее, делаем сторно движения
	Если СтруктураТаблицСторноНДС.НДСЗаписиКнигиПокупок.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПокупок", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСЗаписиКнигиПокупок Цикл
			
			// Книга покупок сторно
			Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.СуммаБезНДС = - СтрокаТаблицы.СуммаБезНДС;
			Движение.НДС         = - СтрокаТаблицы.НДС;
			Движение.ДоговорАванса = СтрокаТаблицы.ДоговорКонтрагента;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Списываем остатки регистра НДСсАвансов по исправляемому счету-фактуре
	Если СтруктураТаблицСторноНДС.НДСсАвансов.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСсАвансов Цикл
			Движение = Движения.НДСсАвансов.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

//  ПО НДС ПРЕДЪЯВЛЕННОМУ ПО ПОЛУЧЕННОМУ СЧЕТУ-ФАКТУРЕ НА АВАНС
//////////////////////////////////////////////////

//////////////////////////////////////////////////
//  ПО НДС НАЧИСЛЕННОМУ С ПОЛУЧЕННОГО АВАНСА

// Формирует движения по регистрам НДС и бух.проводки для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт
	
	Если УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата) = 2 Тогда
		Если СтруктураШапкиДокумента.Исправление Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Движения = Новый Структура;
	
	СформироватьДвиженияНДСНачисленныйСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
	
	СформироватьДвиженияНДСсАвансовСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);

	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

// Формирует движения по регистру НДСНачисленный для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияНДСНачисленныйСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
	Если СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) Тогда
		СФВыданный = СтруктураШапкиДокумента.Ссылка;
	Иначе
		СФВыданный = СтруктураШапкиДокумента.ДокументОснование;
	КонецЕсли;
		
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
		
	Для Каждого СтрокаТаблицы Из ТаблицаПоСчетуФактуре Цикл
		
		СтрокаДвижений = ТаблицаДвижений_НДСНачисленный.Добавить();
		
		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		Если СтруктураШапкиДокумента.Под0 Тогда
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0;
		Иначе
			СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		КонецЕсли;
		
		СтрокаДвижений.Покупатель    = ?(СтруктураШапкиДокумента.СводныйКомиссионный, СтрокаТаблицы.Контрагент, СтруктураШапкиДокумента.Контрагент);
		СтрокаДвижений.СчетФактура   = СФВыданный;
		СтрокаДвижений.Событие       = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		СтрокаДвижений.СтавкаНДС     = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.ВидНачисления = Перечисления.НДСВидНачисления.НДСсАвансов;
		СтрокаДвижений.ДоговорАванса = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		СтрокаДвижений.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС         = СтрокаТаблицы.СуммаНДС;
		
	КонецЦикла;
	
	Движения.НДСНачисленный.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ВыполнитьПриход();
	
КонецПроцедуры

// Формирует движения по регистру НДСЗаписиКнигиПродаж для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияНДСЗаписиКнигиПродажСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
	Если НЕ СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	ДатаОплаты = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураШапкиДокумента.ДокументОснование, "Дата");
	ЗаписьДопЛиста = НачалоКвартала(ДатаОплаты) < НачалоКвартала(СтруктураШапкиДокумента.Дата);
	
	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) Тогда
		СФВыданный = СтруктураШапкиДокумента.ИсправляемыйСчетФактура;
	Иначе
		СФВыданный = СтруктураШапкиДокумента.ДокументОснование;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоСчетуФактуре Цикл
		
		СтрокаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Добавить();
		
		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Покупатель  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.СчетФактура = СФВыданный;
		СтрокаДвижений.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
		СтрокаДвижений.СтавкаНДС   = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.Событие     = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		СтрокаДвижений.ДатаОплаты  = ДатаОплаты;
		СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижений.ДоговорАванса      = СтруктураШапкиДокумента.ДоговорКонтрагента;
		
		Если ЗаписьДопЛиста Тогда
			СтрокаДвижений.ЗаписьДополнительногоЛиста = Истина;
			СтрокаДвижений.КорректируемыйПериод = НачалоКвартала(ДатаОплаты);
		КонецЕсли;
		
		СтрокаДвижений.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС         = СтрокаТаблицы.СуммаНДС;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение();
	
КонецПроцедуры

// Формирует движения по регистру НДСсАвансов для документа СФ Выданный на аванс
//
Процедура СформироватьДвиженияНДСсАвансовСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения)
	
    ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
    ТаблицаДвижений_НДССАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();

	Если ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента)
		И УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата) = 2 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоСчетуФактуре Цикл
		
		СтрокаДвижений = ТаблицаДвижений_НДССАвансов.Добавить();
		
		СтрокаДвижений.Организация		  = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ВидЦенности		  = Перечисления.ВидыЦенностей.АвансыПолученные;
		СтрокаДвижений.Покупатель		  = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		СтрокаДвижений.СтавкаНДС		  = СтрокаТаблицы.СтавкаНДС;
		СтрокаДвижений.ВалютаАванса       = СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаДвижений.СчетФактура		  = СтруктураШапкиДокумента.ДокументОснование;
		Если СтруктураШапкиДокумента.Исправление Тогда
			СтрокаДвижений.ИсправленныйСчетФактура = СтруктураШапкиДокумента.Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СуммаБезНДС		 = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.НДС				 = СтрокаТаблицы.СуммаНДС;
		СтрокаДвижений.ВалютнаяСуммаСНДС = СтрокаТаблицы.ВалютнаяСумма;
		
	КонецЦикла;
	
	Движения.НДСсАвансов.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДССАвансов;
	Движения.НДСсАвансов.ВыполнитьПриход();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Исправленные счета-фактуры выданные (на аванс и налоговый агент)

Процедура ПровестиИсправленныйВыданныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре) Экспорт
	
	Если НЕ СтруктураШапкиДокумента.Исправление Тогда
		Возврат;
	КонецЕсли;

	Движения = Новый Структура;
	
	// Готовим таблицы с данными для сторно-движений
	
	СтруктураТаблицСторноНДС = ИсправленныйВыданныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента);
	
	// Формируем движения
	
	ОтразитьВКнигеПродажИсправляемыйСчетФактуруВыданный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения);
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		// Делаем расход регистра НДСсАвансов по исправляемому счету-фактуре
		Если СтруктураТаблицСторноНДС.НДСсАвансов.Количество() > 0 Тогда
			
			ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСсАвансов", СтруктураШапкиДокумента.Ссылка);
			
			Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСсАвансов Цикл
				Движение = Движения.НДСсАвансов.ДобавитьРасход();
				ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
		// По исправленному счету-фактуре сразу формируем записи книги продаж, без записи в НДСначисленный
		СформироватьДвиженияНДСЗаписиКнигиПродажСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
		
		// Формируем движения по НДСсАвансов по исправленному счету-фактуре
		СформироватьДвиженияНДСсАвансовСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоСчетуФактуре, Движения);
		
	КонецЕсли;
	
	// Записываем сформированные движения
	
	Для Каждого Элемент Из Движения Цикл
		
		НаборЗаписей = Элемент.Значение;
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

Функция ИсправленныйВыданныйСчетФактураПодготовитьТаблицыСторноЗаписей(СтруктураШапкиДокумента)
    	
	ИсходныйСчетФактура = 
		?(ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		И НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента), 
		СтруктураШапкиДокумента.ИсправляемыйСчетФактура, СтруктураШапкиДокумента.ДокументОснование);
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсходныйСчетФактура", ИсходныйСчетФактура);
	Запрос.УстановитьПараметр("ИсходныйСчетФактураДата", ИсходныйСчетФактура.Дата);
	Запрос.УстановитьПараметр("Период", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	
	// Регистр накопления НДСЗаписиКнигиПродаж
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗаписиКнигиПродаж.Организация,
	|	ЗаписиКнигиПродаж.Покупатель,
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЗаписиКнигиПродаж.ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС,
	|	ЗаписиКнигиПродаж.ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорКонтрагента,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДСОборот КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорАванса = &ДоговорКонтрагента) КАК ЗаписиКнигиПродаж";
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("НДСЗаписиКнигиПродаж", Запрос.Выполнить().Выгрузить());
	
	// Регистр накопления НДСНачисленный
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСНачисленныйОстатки.Организация,
	|	НДСНачисленныйОстатки.СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.ВидНачисления,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	&ИсходныйСчетФактураДата КАК ДатаОплаты,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ДоговорАванса КАК ДоговорКонтрагента,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПолученАванс) КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ИсходныйСчетФактураДата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорАванса = &ДоговорКонтрагента) КАК НДСНачисленныйОстатки";
	
	СтруктураТаблиц.Вставить("НДСНачисленный", Запрос.Выполнить().Выгрузить());
    	
	// Регистр накопления НДСсАвансов
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НДСсАвансовОстатки.Организация,
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.ВидЦенности,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ИсправленныйСчетФактура,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток КАК ВалютнаяСуммаСНДС,
	|	НДСсАвансовОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСсАвансовОстатки.НДСОстаток КАК НДС,
	|	&Период КАК ДатаСобытия
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И СчетФактура = &ИсходныйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК НДСсАвансовОстатки";
	
	СтруктураТаблиц.Вставить("НДСсАвансов", Запрос.Выполнить().Выгрузить());
    	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура ОтразитьВКнигеПродажИсправляемыйСчетФактуруВыданный(СтруктураШапкиДокумента, СтруктураТаблицСторноНДС, Движения)

	// Если исправляемый счет-фактура еще не был отражен в книге продаж, следует его там отразить и сразу сторнировать.
	Если СтруктураТаблицСторноНДС.НДСНачисленный.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСНачисленный", СтруктураШапкиДокумента.Ссылка);
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
		ДатаИсходногоДокумента = СтруктураШапкиДокумента.ДокументОснование.Дата;
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСНачисленный Цикл
			
			// НДС начисленный расход
			Движение = Движения.НДСНачисленный.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.ДоговорАванса = СтрокаТаблицы.ДоговорКонтрагента;
			Движение.Событие = Перечисления.СобытияПоНДСПродажи.НДССкорректирован;
			
			// Книга продаж
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.ДоговорАванса = СтрокаТаблицы.ДоговорКонтрагента;
			Движение.ДатаСобытия = ДатаИсходногоДокумента;
			
			// Книга продаж сторно
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.ДоговорАванса = СтрокаТаблицы.ДоговорКонтрагента;
			Движение.СуммаБезНДС = - СтрокаТаблицы.СуммаБезНДС;
			Движение.НДС         = - СтрокаТаблицы.НДС;
			Движение.СторнирующаяЗаписьДопЛиста = Движение.ЗаписьДополнительногоЛиста;
			
		КонецЦикла;
		
	КонецЕсли;

	// Если счет-фактура был отражен в книге продаж ранее, делаем сторно движения
	Если СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж.Количество() > 0 Тогда
		
		ДобавитьНаборЗаписейВСтруктуруДвижений(Движения, "НДСЗаписиКнигиПродаж", СтруктураШапкиДокумента.Ссылка);
		
		Для каждого СтрокаТаблицы Из СтруктураТаблицСторноНДС.НДСЗаписиКнигиПродаж Цикл
			
			// Книга продаж сторно
			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			Движение.ДоговорАванса = СтрокаТаблицы.ДоговорКонтрагента;
			Движение.СуммаБезНДС = - СтрокаТаблицы.СуммаБезНДС;
			Движение.НДС         = - СтрокаТаблицы.НДС;
			Движение.СторнирующаяЗаписьДопЛиста = Движение.ЗаписьДополнительногоЛиста;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


//  ПО НДС НАЧИСЛЕННОМУ С ПОЛУЧЕННОГО АВАНСА
//////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  РЕГИСТРАЦИЯ ДОКУМЕНТОВ

Процедура ЗарегистрироватьВЖурналеУчетаСчетовФактур(ТаблицаЗаписейЖурнала, Знач СуммаДокументаДляРегистрацииВЖурнале = 0, Знач НДСДокументаДляРегистрацииВЖурнале = 0, Отказ, Заголовок) Экспорт
	
	Если ТаблицаЗаписейЖурнала = Неопределено ИЛИ ТаблицаЗаписейЖурнала.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если УчетНДС.ПолучитьВерсиюПостановления(ТаблицаЗаписейЖурнала[0].Дата) = 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДвиженияЖурналУчетаСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
	ДвиженияЖурналУчетаСчетовФактур.Отбор.Регистратор.Установить(ТаблицаЗаписейЖурнала[0].Ссылка);
	
	Для Каждого СтруктураШапкиДокумента ИЗ ТаблицаЗаписейЖурнала Цикл
		
		Если НЕ ТаблицаЗаписейЖурнала.Колонки.Найти("СуммаДокументаДляРегистрацииВЖурнале") = Неопределено Тогда
			СуммаДокументаДляРегистрацииВЖурнале = СтруктураШапкиДокумента.СуммаДокументаДляРегистрацииВЖурнале;
		КонецЕсли;
		
		Если НЕ ТаблицаЗаписейЖурнала.Колонки.Найти("НДСДокументаДляРегистрацииВЖурнале") = Неопределено Тогда
			НДСДокументаДляРегистрацииВЖурнале = СтруктураШапкиДокумента.НДСДокументаДляРегистрацииВЖурнале;
		КонецЕсли;
		
		СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
		
		СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
		СтрокаДвижения.Организация     = СтруктураШапкиДокумента.Организация;	
		СтрокаДвижения.Контрагент      = СтруктураШапкиДокумента.Контрагент;
		СтрокаДвижения.СчетФактура     = СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижения.КодВидаОперации = СтруктураШапкиДокумента.КодВидаОперации;
		Если СтруктураШапкиДокумента.Дата >= '20150101'
			И (СтруктураШапкиДокумента.СуммаДокументаКомиссия <> 0
			ИЛИ СтруктураШапкиДокумента.СуммаУменьшениеКомиссия <> 0
			ИЛИ СтруктураШапкиДокумента.СуммаУвеличениеКомиссия <> 0) Тогда
			КодВидаОперацииКомиссия = "";
			Если СтрДлина(СтруктураШапкиДокумента.КодВидаОперации) >= 4 Тогда 
				Если Найти(СтруктураШапкиДокумента.КодВидаОперации, "04") > 0 Тогда
					КодВидаОперацииКомиссия = "04";
				ИначеЕсли Найти(СтруктураШапкиДокумента.КодВидаОперации, "05") > 0 Тогда	
					КодВидаОперацииКомиссия = "05"
				ИначеЕсли Найти(СтруктураШапкиДокумента.КодВидаОперации, "13") > 0 Тогда	
					КодВидаОперацииКомиссия = "13"
				КонецЕсли;
			Иначе
				КодВидаОперацииКомиссия = СтруктураШапкиДокумента.КодВидаОперации;	
			КонецЕсли;
			Если СтруктураШапкиДокумента.СуммаУменьшениеКомиссия Тогда
				КодВидаОперацииКомиссия = КодВидаОперацииКомиссия + ";18";
			КонецЕсли;
			СтрокаДвижения.КодВидаОперацииКомиссия = КодВидаОперацииКомиссия;
		КонецЕсли;
		СтрокаДвижения.Валюта          = СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаДвижения.КППКонтрагента  = СтруктураШапкиДокумента.КППКонтрагента;
		СтрокаДвижения.ИндексСтроки    = СтруктураШапкиДокумента.ИндексСтроки;
		
		РасчетыВУсловныхЕдиницах = Ложь;
		
		Если ТаблицаЗаписейЖурнала.Колонки.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			Если  ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) И СтруктураШапкиДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
				Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					РасчетыВУсловныхЕдиницах = Истина;
					СтрокаДвижения.Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидДокумента = "СчетФактураПолученный" Тогда
			
			СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
			
			СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаПолучения;
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда 
				СтрокаДвижения.СчетФактураВыданныйПокупателю = СтруктураШапкиДокумента.СчетФактураВыданныйПокупателю;
				СтрокаДвижения.Субкомиссионер = СтруктураШапкиДокумента.Субкомиссионер;
				СтрокаДвижения.КодВидаСделки = "2";
			Иначе
				Если НЕ СтруктураШапкиДокумента.СводныйКомиссионный 
					И СтруктураШапкиДокумента.Продавец <> СтруктураШапкиДокумента.Контрагент
					И СтруктураШапкиДокумента.Продавец <> Справочники.Контрагенты.ПустаяСсылка() Тогда
					СтрокаДвижения.Субкомиссионер = СтруктураШапкиДокумента.Контрагент;
				КонецЕсли;
			КонецЕсли;					

			Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
				СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
				
				СтрокаДвижения.НомерКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерВходящегоДокумента;
				СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.ДатаВходящегоДокумента;
				
				
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшение = СтруктураШапкиДокумента.СуммаУменьшение;
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличение = СтруктураШапкиДокумента.СуммаУвеличение;
				
				СтрокаДвижения.СуммаНДСРазницаУменьшение            = СтруктураШапкиДокумента.СуммаНДСУменьшение;
				СтрокаДвижения.СуммаНДСРазницаУвеличение            = СтруктураШапкиДокумента.СуммаНДСУвеличение;
				
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия = СтруктураШапкиДокумента.СуммаУменьшениеКомиссия;
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия = СтруктураШапкиДокумента.СуммаУвеличениеКомиссия;
				
				СтрокаДвижения.СуммаНДСРазницаУменьшениеКомиссия            = СтруктураШапкиДокумента.СуммаНДСУменьшениеКомиссия;
				СтрокаДвижения.СуммаНДСРазницаУвеличениеКомиссия            = СтруктураШапкиДокумента.СуммаНДСУвеличениеКомиссия;
				
				СтрокаДвижения.НомерИсправленияКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерИсправленияКорректировочногоСчетаФактуры;
				СтрокаДвижения.ДатаИсправленияКорректировочногоСчетаФактуры	 = СтруктураШапкиДокумента.ДатаИсправленияКорректировочногоСчетаФактуры;
				
			ИначеЕсли СтруктураШапкиДокумента.СводныйКомиссионный
				И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				
				СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоДокумента;
				СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоДокумента;
				
				СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
				СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
				
				СтрокаДвижения.СуммаПоСчетуФактуреКомиссия = СуммаДокументаДляРегистрацииВЖурнале;
				СтрокаДвижения.СуммаНДСКомиссия            = НДСДокументаДляРегистрацииВЖурнале;
				
			Иначе
				
				СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоДокумента;
				СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоДокумента;
				
				СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
				СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
				
				СтрокаДвижения.СуммаПоСчетуФактуреКомиссия = СтруктураШапкиДокумента.СуммаДокументаКомиссия;
				СтрокаДвижения.СуммаНДСКомиссия            = СтруктураШапкиДокумента.СуммаНДСДокументаКомиссия;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.Исправление Тогда
				СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправления;
				СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.ДатаИсправления;
			КонецЕсли;
			
			Если РасчетыВУсловныхЕдиницах И НЕ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				ПараметрыСФ = Неопределено;
				ПересчитатьСчетФактуруВРубли(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента, ПараметрыСФ);
				
				СтрокаДвижения.СуммаПоСчетуФактуре = ПараметрыСФ.СуммаДокумента;
				СтрокаДвижения.СуммаНДС            = ПараметрыСФ.СуммаНДСДокумента;
				
				КурсДляКомиссии = ?(ПараметрыСФ.СуммаДокумента = 0, 0, ПараметрыСФ.СуммаДокумента/СуммаДокументаДляРегистрацииВЖурнале);
				
				СтрокаДвижения.СуммаПоСчетуФактуреКомиссия = СтруктураШапкиДокумента.СуммаДокументаКомиссия * КурсДляКомиссии;
				СтрокаДвижения.СуммаНДСКомиссия            = СтруктураШапкиДокумента.СуммаНДСДокументаКомиссия * КурсДляКомиссии;
				
			КонецЕсли;
			
			СтрокаДвижения.ПоСтавкеБезНДС = СтруктураШапкиДокумента.СчетФактураБезНДС;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "СчетФактураВыданный" Тогда
			
			// Определим контрагента для СМР хозспособом и налогового агента
			Если НЕ ЗначениеЗаполнено(СтрокаДвижения.Контрагент) Тогда 
				СтрокаДвижения.Контрагент = СтруктураШапкиДокумента.Организация;
			КонецЕсли;
			
			СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
			
			СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.ДатаВыставления;
			СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаВыставления;
			СтрокаДвижения.Период          				  = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаВыставления),СтруктураШапкиДокумента.ДатаВыставления,СтруктураШапкиДокумента.Дата);
			
			Если УчетНДС.ВерсияПостановленияНДС1137(СтрокаДвижения.Период) = 3 Тогда
				
				ДокументОснование = СтруктураШапкиДокумента.ДокументОснование;
				
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					СтрокаДвижения.Посредник = ДокументОснование.Контрагент;
				КонецЕсли;	
				
			КонецЕсли;	

			Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				
				СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
				СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
				
				Если СтруктураШапкиДокумента.УчитыватьИсправлениеИсходногоДокумента Тогда
					СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправленияИсходногоДокумента;
					СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.Исправление Тогда
					СтрокаДвижения.НомерКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерИсправляемогоКорректировочногоДокумента;
					СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсправляемогоКорректировочногоДокумента;
					СтрокаДвижения.НомерИсправленияКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерИсправления;
					СтрокаДвижения.ДатаИсправленияКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.Дата;
				Иначе
					СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента.Ссылка);
					СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
				
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшение = СтруктураШапкиДокумента.СуммаУменьшение;
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличение = СтруктураШапкиДокумента.СуммаУвеличение;
				
				СтрокаДвижения.СуммаНДСРазницаУменьшение            = СтруктураШапкиДокумента.СуммаНДСУменьшение;
				СтрокаДвижения.СуммаНДСРазницаУвеличение            = СтруктураШапкиДокумента.СуммаНДСУвеличение;
				
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия = СтруктураШапкиДокумента.СуммаУменьшениеКомиссия;
				СтрокаДвижения.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия = СтруктураШапкиДокумента.СуммаУвеличениеКомиссия;
				
				СтрокаДвижения.СуммаНДСРазницаУменьшениеКомиссия            = СтруктураШапкиДокумента.СуммаНДСУменьшениеКомиссия;
				СтрокаДвижения.СуммаНДСРазницаУвеличениеКомиссия            = СтруктураШапкиДокумента.СуммаНДСУвеличениеКомиссия;
				
			Иначе
				
				Если СтруктураШапкиДокумента.Исправление Тогда
					СтрокаДвижения.НомерСчетаФактуры = СтруктураШапкиДокумента.НомерИсходногоДокумента;
					СтрокаДвижения.ДатаСчетаФактуры  = СтруктураШапкиДокумента.ДатаИсходногоДокумента;
					СтрокаДвижения.НомерИсправления = СтруктураШапкиДокумента.НомерИсправления;
					СтрокаДвижения.ДатаИсправления  = СтруктураШапкиДокумента.Дата;
				Иначе				
					СтрокаДвижения.НомерСчетаФактуры   = ОбщегоНазначения.ПолучитьНомерНаПечать(СтруктураШапкиДокумента.Ссылка);
					СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
				
				СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
				СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
				
				СтрокаДвижения.СуммаПоСчетуФактуреКомиссия = СтруктураШапкиДокумента.СуммаДокументаКомиссия;
				СтрокаДвижения.СуммаНДСКомиссия            = СтруктураШапкиДокумента.СуммаНДСДокументаКомиссия;
				
			КонецЕсли;
			
			Если РасчетыВУсловныхЕдиницах И НЕ СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				
				ПараметрыСФ = Неопределено;
				ПересчитатьСчетФактуруВРубли(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента, ПараметрыСФ);
				
				СтрокаДвижения.СуммаПоСчетуФактуре = ПараметрыСФ.СуммаДокумента;
				СтрокаДвижения.СуммаНДС            = ПараметрыСФ.СуммаНДСДокумента;			
				
				КурсДляКомиссии = ?(ПараметрыСФ.СуммаДокумента = 0, 0, ПараметрыСФ.СуммаДокумента/СуммаДокументаДляРегистрацииВЖурнале);
				
				СтрокаДвижения.СуммаПоСчетуФактуреКомиссия = СтруктураШапкиДокумента.СуммаДокументаКомиссия * КурсДляКомиссии;
				СтрокаДвижения.СуммаНДСКомиссия            = СтруктураШапкиДокумента.СуммаНДСДокументаКомиссия * КурсДляКомиссии;
				
			КонецЕсли;
			
			СтрокаДвижения.ПоСтавкеБезНДС = СтруктураШапкиДокумента.СчетФактураБезНДС;
			
			Если СтруктураШапкиДокумента.СчетФактураНеВыставляется Тогда
				СтрокаДвижения.СчетФактураНеВыставляется = СтруктураШапкиДокумента.СчетФактураНеВыставляется;
				СтрокаДвижения.ДатаВыставленияПолучения  = СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Период          			 = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
			
		Иначе // любые другие документы поступления
			
			СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
			
			СтрокаДвижения.ДатаВыставленияПолучения       = СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.КодСпособаВыставленияПолучения = СтруктураШапкиДокумента.КодСпособаПолучения;
			
			СтрокаДвижения.НомерСчетаФактуры   = СтруктураШапкиДокумента.НомерВходящегоСчетаФактуры;
			СтрокаДвижения.ДатаСчетаФактуры    = СтруктураШапкиДокумента.ДатаВходящегоСчетаФактуры;
			
			СтрокаДвижения.СуммаПоСчетуФактуре = СуммаДокументаДляРегистрацииВЖурнале;
			СтрокаДвижения.СуммаНДС            = НДСДокументаДляРегистрацииВЖурнале;
			
			СтрокаДвижения.СуммаПоСчетуФактуреКомиссия = СтруктураШапкиДокумента.СуммаДокументаКомиссия;
			СтрокаДвижения.СуммаНДСКомиссия            = СтруктураШапкиДокумента.СуммаНДСДокументаКомиссия;
			
			Если СтрокаДвижения.СуммаНДС = 0 Тогда
				СтрокаДвижения.ПоСтавкеБезНДС = ЭтоДокументПоСтавкеБезНДС(СтруктураШапкиДокумента.Ссылка);
			КонецЕсли;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДвиженияЖурналУчетаСчетовФактур.Записать();
	
КонецПроцедуры

///////////////////////////////////////////
// Блок пересчета сумм у.е. в рубли
// при регистрации счета-фактуры в Журнале

Процедура ПересчитатьСчетФактуруВРубли(СчетФактура, СтруктураШапкиДокумента, Результат)
	
	Результат = Новый Структура("СуммаДокумента, СуммаНДСДокумента");
	
	СуммаДокумента    = 0;
	СуммаНДСДокумента = 0;
	
	Для Каждого СтрокаОснования ИЗ СчетФактура.ДокументыОснования Цикл
		
		ТекущееОснование = СтрокаОснования.ДокументОснование;
		
		Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ТаблицаДокумента = ПолучитьТаблицуДокументаНДС(ТекущееОснование);
		Иначе
			ТаблицаДокумента = УчетНДС.ПолучитьТаблицуДокументаНДС(ТекущееОснование, , ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный"));				
		КонецЕсли;
		
		Если ТаблицаДокумента = Неопределено Тогда
			Результат.СуммаДокумента    = 0;
			Результат.СуммаНДСДокумента = 0;
			Возврат;
		КонецЕсли;
		
		ДокументОбъект = ТекущееОснование.ПолучитьОбъект();
		ЕстьДокументыРасчетов = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено;		
		
		// Вычислим курс документа для печати
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
			И ЕстьДокументыРасчетов Тогда
			
			ИмяДокумента = ДокументОбъект.Метаданные().Имя;		
			
			ЗапросКурсАванса = Новый Запрос;
			ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", ТекущееОснование);
			ЗапросКурсАванса.Текст =
			"ВЫБРАТЬ
			|	Док.СуммаВзаиморасчетов,
			|	Док.СуммаРегл
			|ИЗ 
			|	Документ." + ИмяДокумента + ".ДокументыРасчетовСКонтрагентом КАК Док
			|ГДЕ Док.Ссылка = &ДокументСсылка
			|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
			
			Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если Выборка.Следующий() Тогда
				КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл/Выборка.СуммаВзаиморасчетов);
				ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				ВыборкаСуммаРегл           = Выборка.СуммаРегл;
			Иначе
				КурсОплаты                 = 0;
				ВыборкаСуммаВзаиморасчетов = 0;
				ВыборкаСуммаРегл           = 0;
			КонецЕсли;
			
			СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект),
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета), ТекущееОснование.КурсВзаиморасчетов,
			ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета), ТекущееОснование.КратностьВзаиморасчетов);
			НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
			Если НеоплаченнаяСумма > 0 Тогда
				КурсДляПечати = (НеоплаченнаяСумма * ТекущееОснование.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
			Иначе
				КурсДляПечати = КурсОплаты;
			КонецЕсли;
			
			Если КурсДляПечати = 0 Тогда
				Курс = ТекущееОснование.КурсВзаиморасчетов;
				Кратность = ТекущееОснование.КратностьВзаиморасчетов;
			Иначе
				Курс = КурсДляПечати;
				Кратность = 1;
			КонецЕсли;
			
		Иначе
			
			Курс = ТекущееОснование.КурсВзаиморасчетов;
			Кратность = ТекущееОснование.КратностьВзаиморасчетов;
			
		КонецЕсли;
		
		ТаблицаДокумента.Колонки.Добавить("СуммаСНДС");		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл			
			СтрокаТаблицы.СуммаСНДС = Окр(СтрокаТаблицы.СуммаВал * Курс / Кратность, 2);
			СтрокаТаблицы.НДС = Окр(СтрокаТаблицы.НДСВал * Курс / Кратность, 2);
		КонецЦикла;		
				
		СуммаДокумента = СуммаДокумента + ТаблицаДокумента.Итог("СуммаСНДС");
		СуммаНДСДокумента = СуммаНДСДокумента + ТаблицаДокумента.Итог("НДС");
		
	КонецЦикла;
	
	Результат.СуммаДокумента    = СуммаДокумента;
	Результат.СуммаНДСДокумента = СуммаНДСДокумента;
	
КонецПроцедуры

Функция ПолучитьТаблицуДокументаНДС(ТекущееОснование)
		
	Перем СтруктураШапкиДокумента, ТаблицаПоУслугам;
	
	ТекущийОбъект = ТекущееОснование.ПолучитьОбъект();
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ТекущийОбъект);
		
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         , "НомерСтроки");
	
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда	
		ИмяТабличнойЧасти = "Товары";
		НДСВключенВСтоимость = ?(СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, Истина, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	                    
	РезультатЗапроса = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ТекущийОбъект, ИмяТабличнойЧасти, СтруктураПолей);
	
	// Подготовим таблицу услуг для проведения.
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗапроса, СтруктураШапкиДокумента, НДСВключенВСтоимость);
		
	Возврат ТаблицаЗапроса;
	
КонецФункции

Функция ЭтоДокументПоСтавкеБезНДС(ДокументСсылка)

	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ШаблонТекста =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таб.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Таб
	|ГДЕ
	|	Таб.Ссылка = &ДокументСсылка
	|	И Таб.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)";
	ШаблонОбъединения =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
		
	ТекстЗапроса = "";
	Для каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ТабЧасть.Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ШаблонОбъединения)
				+ СтрЗаменить(ШаблонТекста, "РеализацияТоваровУслуг.Товары", МетаданныеДокумента.Имя + "." + ТабЧасть.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СтавкаНДС") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", ШаблонОбъединения)
			+ СтрЗаменить(ШаблонТекста, "РеализацияТоваровУслуг.Товары", МетаданныеДокумента.Имя);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Ложь;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Результат = Запрос.Выполнить();
		Возврат Результат.Пустой();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ  И ФУНКЦИИ

Процедура ДобавитьНаборЗаписейВСтруктуруДвижений(СтруктураДвижений,ИмяРегистра,СсылкаНаДокумент)
	Если не СтруктураДвижений.Свойство(ИмяРегистра) Тогда
		СтруктураДвижений.Вставить(ИмяРегистра,РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей());
		СтруктураДвижений[ИмяРегистра].Отбор.Регистратор.Установить(СсылкаНаДокумент);
	КонецЕсли;
КонецПроцедуры
