
Процедура ЗаполнитьXML(ОбъектXML, Отказ, Сообщение, ДобавлятьАтрибутПроверки = Ложь, ДополнятьИсходящееСообщениеПриложеннымиФайлами = Ложь) Экспорт
	
	ПрефиксИмен = "";
	ПространствоИменСОДИ    = "urn:moo-sodi.ru:commerceml_sodi";
	
	ОбъектXML.ЗаписатьНачалоЭлемента("Заказ", ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксИмен, ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Если ДобавлятьАтрибутПроверки Тогда
		ОбъектXML.ЗаписатьАтрибут("xsi:schemaLocation","urn:moo-sodi.ru:commerceml_sodi cml-ordering-3.0sodi.xsd");
	КонецЕсли;
	
	ДеревоТэгов  = ЭлектронныеДокументы.ИнициализироватьДеревоТэгов(ЭтотОбъект, Отказ, Сообщение);
	СтрокиДерева = ДеревоТэгов.Строки;
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДлительностьОжиданияОтвета", ЭлектронныеДокументы.ХМЛДлительность(ДлительностьОжиданияОтвета));
	ЭлектронныеДокументы.ДобавитьДанныеСкладаВДеревоТегов(СтрокиДерева, УчетныйДокумент.Склад);
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДатаВремяДоставки", ЭлектронныеДокументы.ХМЛДата(УчетныйДокумент.ДатаПоступления));
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДлительностьОжиданияДоставки", ЭлектронныеДокументы.ХМЛДлительность(ДлительностьОжиданияДоставки));
	
	ДанныеОШтрихКодах = Неопределено;
	ДанныеТаблицыТовары = ЭлектронныеДокументы.ПодготовитьНоменклатуруДокументаДляЭкспорта(УчетныйДокумент, ДанныеОШтрихКодах);
		
	ЭлектронныеДокументы.ДобавитьНоменклатуруЗаказаВДеревоТэгов(СтрокиДерева, ДанныеТаблицыТовары, Ссылка, ДанныеОШтрихКодах, Отказ, Сообщение);
	
	ЭлектронныеДокументы.ЗаписатьИнформациюОПриложенныхФайлахКДокументу(ДополнятьИсходящееСообщениеПриложеннымиФайлами, СтрокиДерева, УчетныйДокумент);	
	   	
	ЭлектронныеДокументы.ЗаписатьТэгиВXMLДокумент(ОбъектXML, ДеревоТэгов.Строки, ПрефиксИмен);
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипОснования = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		// Заполнение шапки
		УчетныйДокумент = Основание.Ссылка;
		Контрагент = Основание.Контрагент;
		Организация = Основание.Организация;
		
		#Если Клиент Тогда
		ЭлектронныеДокументы.ПриИзмененииОрганизацииВДокументе(ЭтотОбъект, Ложь);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаОтправки = Неопределено;
	Отправлен    = Ложь;
	
КонецПроцедуры

Функция SOAPAction() Экспорт
	
	Возврат "order";
	
КонецФункции // () 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы.ПередЗаписьюИсходящегоЭлектронногоДокумента(ЭтотОбъект, Отказ, Истина);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПометкаУдаления Тогда 
		
		// не должно быть второго документа по одному и тому же заказу
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые 1 
		               |	ИсходящийЗаказ.Ссылка
		               |ИЗ
		               |	Документ.ИсходящийЗаказ КАК ИсходящийЗаказ
					   |ГДЕ
					   |	ИсходящийЗаказ.УчетныйДокумент = &УчетныйДокумент
					   |	И ИсходящийЗаказ.Ссылка <> &Ссылка
					   |	И ИсходящийЗаказ.ПометкаУдаления = Ложь";
					   
		Запрос.УстановитьПараметр("УчетныйДокумент", УчетныйДокумент);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаЗаказов.Количество() > 0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Недопустимо создавать несколько электронных документов на базе одного заказа.
			|Существующий исходящий электронный заказ: " + Строка(ТаблицаЗаказов[0].Ссылка), Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
