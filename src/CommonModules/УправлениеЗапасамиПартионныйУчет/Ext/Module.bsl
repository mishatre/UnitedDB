
// Удаляет пустые значения из массива (для которых НЕ ЗначениеЗаполнено = Истина)
//
// Параметры:
//	Массив
//
Процедура УдалитьПустыеЭлементы(Массив) Экспорт

	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		
		Инд=0;
		
		Пока Инд<Массив.Количество() Цикл
			
			Если НЕ ЗначениеЗаполнено(Массив[Инд]) Тогда
				Массив.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает таблицу значений с данными учетной политики для всех организаций
// Данные берутся на заданный момент времени 
//
// Параметры:
//	Момент времени, дата
//
// Возварщаемое значение: 
//	Таблица значений
//
Функция ПолучитьУчетнуюПолитику(МоментКон) Экспорт
	
	Если ТипЗнч(МоментКон) = Тип("Дата") Тогда
		ДатаСрезаОстатков = МоментКон;
	ИначеЕсли ТипЗнч(МоментКон) = Тип("МоментВремени") Тогда
		ДатаСрезаОстатков = МоментКон.Дата;
	ИначеЕсли ТипЗнч(МоментКон) = Тип("Граница") Тогда
		Если ТипЗнч(МоментКон.Значение) = Тип("Дата") Тогда
			ДатаСрезаОстатков = МоментКон.Значение;
		ИначеЕсли ТипЗнч(МоментКон.Значение) = Тип("МоментВремени") Тогда
			ДатаСрезаОстатков = МоментКон.Значение.Дата;
		Иначе
			ДатаСрезаОстатков = '00010101';
		КонецЕсли;
	Иначе
		ДатаСрезаОстатков = '00010101';
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации");
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("СпособОценкиМПЗУпр");
	Результат.Колонки.Добавить("ВестиПартионныйУчетПоСкладамУпр");
	Результат.Колонки.Добавить("МоментОпределенияНалоговойБазыНДСБух");
	Результат.Колонки.Добавить("СписыватьПартииПриПроведенииДокументовУпр");
	Результат.Колонки.Добавить("СтратегияСписанияПоСтатусамУпр");
	Результат.Колонки.Добавить("СложныйУчетНДСНал");
	Результат.Колонки.Добавить("РозничнаяТорговляОблагаетсяЕНВДНал");
	Результат.Колонки.Добавить("ВедениеУчетаПоПроектам");
	Результат.Колонки.Добавить("НеВключатьНДСВСтоимостьПартийУпр");
	
	Для Каждого ТекущаяСтрока Из Результат Цикл
		Отказ = Ложь;
		УчетнаяПолитикаНал = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаСрезаОстатков, Отказ, ТекущаяСтрока.Организация, "Нал", Ложь);
		Если НЕ Отказ Тогда
			ТекущаяСтрока.МоментОпределенияНалоговойБазыНДСБух = УчетнаяПолитикаНал.МоментОпределенияНалоговойБазыНДС;
			ТекущаяСтрока.СложныйУчетНДСНал = УчетнаяПолитикаНал.СложныйУчетНДС;
			ТекущаяСтрока.РозничнаяТорговляОблагаетсяЕНВДНал = УчетнаяПолитикаНал.РозничнаяТорговляОблагаетсяЕНВД;
		КонецЕсли;
		
		Отказ = Ложь;
		УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаСрезаОстатков, Отказ,,, Ложь);
		Если НЕ Отказ Тогда
			ТекущаяСтрока.СпособОценкиМПЗУпр = УчетнаяПолитикаУпр.СпособОценкиМПЗ;
			ТекущаяСтрока.ВестиПартионныйУчетПоСкладамУпр = УчетнаяПолитикаУпр.ВестиПартионныйУчетПоСкладам;
			ТекущаяСтрока.СписыватьПартииПриПроведенииДокументовУпр = УчетнаяПолитикаУпр.СписыватьПартииПриПроведенииДокументов;
			ТекущаяСтрока.СтратегияСписанияПоСтатусамУпр = УчетнаяПолитикаУпр.СтратегияСписанияПартийТоваровПоСтатусам;
			ТекущаяСтрока.ВедениеУчетаПоПроектам = УчетнаяПолитикаУпр.ВедениеУчетаПоПроектам;
			ТекущаяСтрока.НеВключатьНДСВСтоимостьПартийУпр = УчетнаяПолитикаУпр.НеВключатьНДСВСтоимостьПартий;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьУчетнуюПолитику()

// Читает заданные в структуре реквизиты объекта, переданного ссылкой
//
Процедура ПолучитьРеквизитыОбъекта(ДокументСсылка, СтруктураРеквизитов) Экспорт
	
	ТипДок = ТипЗнч(ДокументСсылка);
	МетаДок = Метаданные.НайтиПоТипу(ТипДок);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Справочник."+МетаДок.Имя;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипДок) тогда
		НазваниеТаблицы = "Документ."+МетаДок.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если МетаДок <> Неопределено Тогда
		
		СтрРеквизиты = "";
		Для Каждого Элемент Из СтруктураРеквизитов Цикл
			Если Элемент.Значение <> Неопределено Тогда
				Если ОбщегоНазначения.ЕстьРеквизитДокумента(Элемент.Ключ, МетаДок) Тогда
					СтрРеквизиты = СтрРеквизиты +", "+Элемент.Ключ;
				КонецЕсли;
			Иначе
				СтрРеквизиты = СтрРеквизиты +", "+Элемент.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	" + Сред(СтрРеквизиты, 2) +"
		|ИЗ
		|	"+НазваниеТаблицы+"
		|
		|ГДЕ
		|	Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает параметр учетной политики для заданной организации по заданному учету
// Перед использованием функции должна быть заполнена таблица параметров учетной политики
//
// Параметры:
//	ИмяПараметра - Строка, имя запрашиваемого параметра учетной политики,
//	Учет         - Может принимать три значения: "Упр", "Бух", "Нал", "Меж". Задает учет
//	Организация,
//	СтруктураПараметров - структура, содержащая все общие параметры.
//
// Возвращаемое значение: 
//	Значение учетной политики
//
Функция УчетнаяПолитика(ИмяПараметра, Учет, Организация=Неопределено, СтруктураПараметров) Экспорт
	СтрокаУчетнойПолитики = Неопределено;
	Результат = Ложь;
	
	Если Учет = "Упр" Тогда
		Если СтруктураПараметров.УчетнаяПолитика.Количество()>0 Тогда
			СтрокаУчетнойПолитики = СтруктураПараметров.УчетнаяПолитика[0];
		КонецЕсли;
	Иначе
		СтрокаУчетнойПолитики = СтруктураПараметров.УчетнаяПолитика.Найти(Организация);
	КонецЕсли;
	
	Если СтрокаУчетнойПолитики<>Неопределено Тогда
		Результат = СтрокаУчетнойПолитики[ИмяПараметра+Учет];
		Если Результат = Null тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не задан параметр учетной политики """ +ИмяПараметра+ """ "+Учет+" учета" + ?(Учет<>"Упр", " для организации " + Организация, "")+"!");
			СтруктураПараметров.Вставить("Отказ", Истина);
			Результат = Ложь;
		КонецЕсли;
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Не задан параметр учетной политики """ +ИмяПараметра+ """ "+Учет+" учета" + ?(Учет<>"Упр", " для организации " + Организация, "")+"!");
		СтруктураПараметров.Вставить("Отказ", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // УчетнаяПолитика()

// Объект Описание типов с одним типом Подразделения
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом Подразделения
//
Функция ПолучитьОписаниеТиповПодразделения()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Объект Описание типов с типами - заказами
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Объект Описание типов с типом ЗаказПокупателя
//
Функция ПолучитьОписаниеТиповЗаказ()

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);

КонецФункции // ПолучитьОписаниеТиповЗаказ()

// Преобразует код операции в направление списания
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
//
// Возвращаемое значение:
//	Направление списания.
//
Функция ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации, СтатьяЗатрат = Неопределено) Экспорт
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Если КодОперации=КодыОпераций.Реализация 
		ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации=КодыОпераций.РеализацияРозница
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателя 
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателяТекущийМесяц Тогда
		
		НаправлениеСписания = "СебестоимостьПродаж";
		
	ИначеЕсли КодОперации=КодыОпераций.ПередачаНаКомиссию Тогда
		
		НаправлениеСписания = "Переданные";
		
	ИначеЕсли КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации   = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации   = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации   = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации   = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации   = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации   = КодыОпераций.Комплектация 
		
		Тогда
		
		НаправлениеСписания = "НаСкладах";
		
	ИначеЕсли КодОперации=КодыОпераций.СписаниеНаЗатраты Тогда
		НаправлениеСписания = "Затраты";
				
	Иначе
				
		НаправлениеСписания = "";
		
	КонецЕсли;
	
	
	Возврат НаправлениеСписания;
	
КонецФункции // ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации)

// Возвращает строковое описание регистра-источника для заданного кода операции
//
// Параметры:
//	КодОперации   - код операции по регистру партий
//
// Возвращаемое значение:
//	Источник списания.
//
Функция ПолучитьИсточникПоКодуОперации(КодОперации)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	Если КодОперации = КодыОпераций.Реализация
		ИЛИ КодОперации = КодыОпераций.РеализацияРозница
		ИЛИ КодОперации = КодыОпераций.ПередачаНаКомиссию 
		ИЛИ КодОперации = КодыОпераций.ВозвратПоставщику
		ИЛИ КодОперации = КодыОпераций.Комплектация
		ИЛИ КодОперации = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации = КодыОпераций.ПередачаТарыКонтрагенту
		ИЛИ КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СписаниеНаЗатраты
		ИЛИ КодОперации = КодыОпераций.СписаниеПоИнвентаризации
		ИЛИ КодОперации = КодыОпераций.СписаниеПоОрдеру

	Тогда
	
		Возврат "НаСкладах";
	КонецЕсли;
	
	Если КодОперации = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации = КодыОпераций.РеализацияКомиссия
	Тогда
		Возврат "Переданные";
	КонецЕсли;
	
	Возврат "НаСкладах"; // По умолчанию
	
КонецФункции // ПолучитьИсточникПоКоду()

// Общая процедура для добавления записей в набор записей с сопутствующими действиями.
// Добавляет строку в таблицу движений, инкрементирует номер последней строки,
// устанавливает признак модифицированности.
//
Функция ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров) Экспорт

	Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();
	
	// Увеличим счетчик движений на 1:
	СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра] = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра]+1;
	
	// Устанавливаем флаг модификации
	СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;

	Возврат Движение;

КонецФункции

// Создает наборы записей по регистрам управленческого учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейУпр(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахУпр",    РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеУпр",   РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияЗатратыУпр",                   РегистрыНакопления.Затраты.СоздатьНаборЗаписей());
	СтруктураПараметров.Вставить("ДвиженияПродажиСебестоимость",       РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());
	
	// Учет реализации принятых на комиссию товаров для отчета комитенту
	СтруктураПараметров.Вставить("ДвиженияРеализованныеТовары",            РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());
	
КонецПроцедуры // СоздатьНаборыЗаписейУпр()

// Создает наборы записей по регистрам бухгалтерского и налогового учета
//
// Параметры:
//	Нет.
//
Процедура СоздатьНаборыЗаписейРегл(СтруктураПараметров)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		

		// Учет НДС
		СтруктураПараметров.Вставить("ДвиженияНДСПартииТоваров",            РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСКосвенныеРасходы",         РегистрыНакопления.НДСКосвенныеРасходы.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСПредъявленный",            РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСВключенныйВСтоимость",     РегистрыНакопления.НДСВключенныйВСтоимость.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСПредъявленныйРеализация0", РегистрыНакопления.НДСПредъявленныйРеализация0.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСНачисленный",				РегистрыНакопления.НДСНачисленный.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСРеализация0",				РегистрыНакопления.НДСРеализация0.СоздатьНаборЗаписей());
		СтруктураПараметров.Вставить("ДвиженияНДСРасчетыСПокупателями",		РегистрыНакопления.НДСРасчетыСПокупателями.СоздатьНаборЗаписей());
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьНаборыЗаписейРегл()

// Создает наборы записей для заданных учетов.
//
Процедура СоздатьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания = Неопределено, Регистратор =Неопределено ) Экспорт
	
	СоздатьНаборыЗаписейУпр(СтруктураПараметров);
	
	СоздатьНаборыЗаписейРегл(СтруктураПараметров);
	
КонецПроцедуры

// Подготовка наборов записей по регистрам Упр учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;
	
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыУпр", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияПродажиСебестоимость", Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияРеализованныеТовары", Ложь);
	
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Очистить();
	СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Очистить();
	СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияЗатратыУпр.Очистить();
	СтруктураПараметров.ДвиженияЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.ДвиженияПродажиСебестоимость.Очистить();
	СтруктураПараметров.ДвиженияПродажиСебестоимость.Отбор.Регистратор.Установить(Регистратор);
	
	// Таблицы движений:
	
	// Для партий на складах
	СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахУпр", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Выгрузить());
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Очистить();
	
	// Служебные колонки
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ДокументОприходованияДата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СтоимостьПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
	
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	// Валюты и курсы - для пересчета
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютаДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КурсДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КратностьДокумента");
	
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Количество поступления - для комплектации
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КоличествоПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Если НЕ ЗамещатьПриЗаписи Тогда
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладах", Регистратор));
	Иначе
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", 0);
	КонецЕсли;
	
	
	// Для партий товаров переданных
	СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеУпр", СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Выгрузить());
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Очистить();
	
	// Служебные колонки
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ДокументОприходованияДата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СтоимостьПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());
	
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	// Валюты и курсы - для пересчета
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютаДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КурсДокумента");
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КратностьДокумента");
	
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Количество поступления - для комплектации
	СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КоличествоПоступление", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Если НЕ ЗамещатьПриЗаписи Тогда
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданные", Регистратор));
	Иначе
		СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", 0);
	КонецЕсли;
	
	// Для товаров, списанных на затраты
	СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыУпр", СтруктураПараметров.ДвиженияЗатратыУпр.Выгрузить());
	СтруктураПараметров.ТаблицаДвиженийЗатратыУпр.Очистить();
	
	Если Не ЗамещатьПриЗаписи Тогда
		СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("Затраты", Регистратор));
	Иначе
		СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", 0);
	КонецЕсли;
	
	// Для МПЗ, списанных на себестоимость продаж
	СтруктураПараметров.Вставить("ТаблицаДвиженийПродажиСебестоимость", СтруктураПараметров.ДвиженияПродажиСебестоимость.Выгрузить());
	СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Очистить();
	
	Если НЕ ЗамещатьПриЗаписи Тогда
		СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПродажиСебестоимость", Регистратор));
	Иначе
		СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", 0);
	КонецЕсли;
	
	СтруктураПараметров.ДвиженияРеализованныеТовары.Очистить();
	СтруктураПараметров.ДвиженияРеализованныеТовары.Отбор.Регистратор.Установить(Регистратор);
	СтруктураПараметров.Вставить("ТаблицаДвиженийРеализованныеТовары", СтруктураПараметров.ДвиженияРеализованныеТовары.Выгрузить());
	СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары.Очистить();
	СтруктураПараметров.Вставить("ТекНомерСтрокиРеализованныеТовары", 0);
	
КонецПроцедуры // ПодготовитьНаборыЗаписейУпр()

// Подготовка наборов записей по регистрам бух и нал учета к добавлению в них строк
//
// Параметры:
//	Нет.
//
Процедура ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи)
	
	ОтражатьВБухгалтерскомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете;
	
	// НДС	
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров",             Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСКосвенныеРасходы",          Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленный",			 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСНачисленный",				 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСРеализация0",				 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСВключенныйВСтоимость",		 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленныйРеализация0",	 Ложь);
	СтруктураПараметров.Вставить("ИзмененыДвиженияНДСРасчетыСПокупателями",		 Ложь);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		// НДС
		
		СтруктураПараметров.ДвиженияНДСПартииТоваров.Очистить();
		СтруктураПараметров.ДвиженияНДСПартииТоваров.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Очистить();
		СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСПредъявленный.Очистить();
		СтруктураПараметров.ДвиженияНДСПредъявленный.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Очистить();
		СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Очистить();
		СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСНачисленный.Очистить();
		СтруктураПараметров.ДвиженияНДСНачисленный.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСРеализация0.Очистить();
		СтруктураПараметров.ДвиженияНДСРеализация0.Отбор.Регистратор.Установить(Регистратор);
		
		СтруктураПараметров.ДвиженияНДСРасчетыСПокупателями.Очистить();
		СтруктураПараметров.ДвиженияНДСРасчетыСПокупателями.Отбор.Регистратор.Установить(Регистратор);

		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПартииТоваров",               СтруктураПараметров.ДвиженияНДСПартииТоваров.Выгрузить());
		
		// Служебные колонки
		СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("КодОперацииПартииТоваров",Новый ОписаниеТипов("ПеречислениеСсылка.КодыОперацийПартииТоваров"));
		
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСКосвенныеРасходы",          СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленный",          СтруктураПараметров.ДвиженияНДСПредъявленный.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСВключенныйВСтоимость",          СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленныйРеализация0",          СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСНачисленный",          СтруктураПараметров.ДвиженияНДСНачисленный.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСРеализация0",          СтруктураПараметров.ДвиженияНДСРеализация0.Выгрузить());
		СтруктураПараметров.Вставить("ТаблицаДвиженийНДСРасчетыСПокупателями",         СтруктураПараметров.ДвиженияНДСРасчетыСПокупателями.Выгрузить());

		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПартииТоваров", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСНезавершенноеПроизводство", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСКосвенныеРасходы", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПредъявленный", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПредъявленныйРеализация0", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСНачисленный", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСРеализация0", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСРасчетыСПокупателями", 0);
		СтруктураПараметров.Вставить("ТекНомерСтрокиНДСВключенныйВСтоимость", 0);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает параметры, необходимые для работы с наборами записей для заданных учетов.
//
Процедура ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина, ИзмененыДвижения = Истина) Экспорт
	
	СтруктураПараметров.Вставить("Период",         Период);
	СтруктураПараметров.Вставить("Регистратор",    Регистратор);
	
	ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);
	
	// Установим флаги модифицированности для наборов записей всех регистров, 
	// для которых документ является регистратором
	// и по которым у документа есть движения
	// для того, чтобы набор записей был перезаписан 
	// При вызове из обработки проведение по регистрам НДС модифицированность не устанавливаем
	
	ТаблицаДвиженийРегистратора = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(Регистратор);
	Для каждого СтрокаДвижения из ТаблицаДвиженийРегистратора цикл
		ПозицияТочки = Найти(СтрокаДвижения.Имя,"."); 
		ВидРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки -1);
		Если ВидРегистра = "РегистрСведений" Тогда
			Продолжить;
		КонецЕсли;
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки+1));
		
		Если ВидРегистра = "РегистрНакопления" Тогда
			Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете тогда 
				Продолжить;
			КонецЕсли;
			ИмяРегистра = ИмяРегистра + "Упр";
		КонецЕсли;
		ИмяФлагаМодифицированности = "ИзмененыДвижения" + ИмяРегистра;
		Если СтруктураПараметров.Свойство(ИмяФлагаМодифицированности) тогда
			СтруктураПараметров[ИмяФлагаМодифицированности] = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьНаборыЗаписей

// Записывет набор записей в базу данных.
//
Процедура ЗаписатьДвижения(ДвиженияРегистра, ТаблицаДвиженийРегистра, Замещать, ДвижениеНДСПродукции = Ложь, ТолькоВключениеНДСВСтоимость = Неопределено)

	// При замещении нужно удалять записи, сформированные прошлым списанием партий (СписаниеПартий=Истина),
	// если у регистра есть реквизит СписаниеПартий, то нужно удалить строки с Истина
	
	ДМ = ДвиженияРегистра.Метаданные();
	ЕстьРеквизитСписаниеПартий = (ДМ.Реквизиты.Найти("СписаниеПартий") <> Неопределено);
	
	Если Замещать И ЕстьРеквизитСписаниеПартий Тогда
		
		Если ТаблицаДвиженийРегистра=Неопределено Тогда
			ТаблицаДвиженийРегистра = ДвиженияРегистра.Выгрузить();
		КонецЕсли;
		
		ДвиженияРегистра.Прочитать();
		
		Инд = ДвиженияРегистра.Количество();
		Пока Инд >0 Цикл
			Инд = Инд - 1;
			Если ДвиженияРегистра[Инд].СписаниеПартий тогда
				ДвиженияРегистра.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;

		// Заполним параметр "Списание партий"
		ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");
		
		ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		
		ДвиженияРегистра.Записать(Истина);
		
	Иначе
		
		Если ТаблицаДвиженийРегистра<>Неопределено Тогда
			
			// Заполним параметр "Списание партий"
			Если ЕстьРеквизитСписаниеПартий Тогда
				ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");
			КонецЕсли;
			
			ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);
		КонецЕсли;
		
		ДвиженияРегистра.Записать(Замещать);
		
	КонецЕсли;

КонецПроцедуры//ЗаписатьДвижения

// Запись движений по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;
	
	Если ОтражатьВУправленческомУчете Тогда
		
		// Управленческий учет
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияПродажиСебестоимость Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияПродажиСебестоимость, 
			СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияЗатратыУпр Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыУпр, Замещать);
			
		КонецЕсли;
		
		// Для отчета комитенту
		Если СтруктураПараметров.ИзмененыДвиженияРеализованныеТовары Тогда
			
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияРеализованныеТовары, 
			СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары, Замещать);
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры // ЗаписатьДвиженияДокументаУпр()

// Запись движений по бух и нал учету
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания, Замещать)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда
		
		// Бухгалтерский учет
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПартииТоваров, 
			СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСКосвенныеРасходы Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСКосвенныеРасходы, 
			СтруктураПараметров.ТаблицаДвиженийНДСКосвенныеРасходы, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПредъявленный, 
			СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость, 
			СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0 Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0, 
			СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСНачисленный Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСНачисленный, 
			СтруктураПараметров.ТаблицаДвиженийНДСНачисленный, Замещать);
			
		КонецЕсли;
		
		Если СтруктураПараметров.ИзмененыДвиженияНДСРеализация0 Тогда
			ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСРеализация0, 
			СтруктураПараметров.ТаблицаДвиженийНДСРеализация0, Замещать);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура-вход для записи движений документа в базу данных
//
Процедура ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Замещать = Истина) Экспорт

	// Управленческий учет
	ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать);
	
	// Бухгалтерский и налоговый учет
	ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания, Замещать);
	
КонецПроцедуры// ЗаписатьДвиженияДокумента()

// Бух
// Проверка партии по измерению "Качество"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента)
	
	КачествоНовый = Справочники.Качество.Новый;
	
	Если  ЗначениеЗаполнено(СтрокаПартии.Качество) Тогда 
		
		// Если задано, какое качество списывать, проверяем
		Если  ЗначениеЗаполнено(СтрокаДокумента.Качество) Тогда
			
			Если СтрокаПартии.Качество<>СтрокаДокумента.Качество Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			// В противном случае списываем только новые
		Иначе
			
			Если СтрокаПартии.Качество <> КачествоНовый Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоКачеству()

// Проверка партии по измерению "Заказ"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоЗаказу(СтрокаПартии, СтрокаДокумента)
	
	Если СтрокаДокумента.СписыватьТолькоПоЗаказу Тогда
		
		Если СтрокаПартии.Заказ <> СтрокаДокумента.ЗаказПартии Тогда
			
			// Заполненные не отличаются
			Если  ЗначениеЗаполнено(СтрокаДокумента.ЗаказПартии) Тогда
				
				Возврат Ложь;
				
			Иначе
				
				// Если отличаются, то оба пустые
				Если  ЗначениеЗаполнено(СтрокаПартии.Заказ) Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Можно списывать по тому же заказу или пустые
		
		Если СтрокаПартии.Заказ <> СтрокаДокумента.ЗаказПартии Тогда
			
			// Если отличаются, то в партиях только пустой
			Если  ЗначениеЗаполнено(СтрокаПартии.Заказ) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоЗаказу()

// Приведение таблицы списания к требуемому виду
//
Процедура ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Упр, Бух, Нал) Экспорт
	
	// SSSS
	Если ТаблицаСписания.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено Тогда
		
		// Получим данные о признаках ведения учета по сериям, установленным для номенклатуры
		МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
		МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ВестиПартионныйУчетПоСериям
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)");
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Данные из запроса поместим в соответствие
		Соотв = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Соотв.Вставить(Выборка.Ссылка, Выборка.ВестиПартионныйУчетПоСериям);
		КонецЦикла;
		
		// Заполним колонку "ВестиПартионныйУчетПоСериям" значениями из соответствия
		ТаблицаСписания.Колонки.Добавить("ВестиПартионныйУчетПоСериям", Новый ОписаниеТипов("Булево"));
		Для Каждого Строка Из ТаблицаСписания Цикл
			Строка.ВестиПартионныйУчетПоСериям = Соотв[Строка.Номенклатура];
		КонецЦикла;
	КонецЕсли;
	
	
	// Приведем к виду со всеми колонками
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВУправленческомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ОтражатьВНалоговомУчете") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ИсточникПоКодуОперации") <> Неопределено Тогда
		// Таблица строк получена запросом к регистру СписанныеТовары		
		СтруктураПараметров.Вставить("ЕстьНаСкладах", ТаблицаСписания.Найти("НаСкладах", "ИсточникПоКодуОперации") <> Неопределено);
		СтруктураПараметров.Вставить("ЕстьПереданные", ТаблицаСписания.Найти("Переданные", "ИсточникПоКодуОперации") <> Неопределено);
	Иначе	
		
		// Таблица строк получена из документа		
		ТаблицаСписания.Колонки.Добавить("ИсточникПоКодуОперации");
		ЕстьНаСкладах = Ложь;
		ЕстьПереданные = Ложь;		
		Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
			СтрокаСписания.ИсточникПоКодуОперации = ПолучитьИсточникПоКодуОперации(СтрокаСписания.КодОперацииПартииТоваров);
			Если Не ЕстьНаСкладах И СтрокаСписания.ИсточникПоКодуОперации = "НаСкладах" Тогда
				ЕстьНаСкладах=Истина;
			ИначеЕсли НЕ ЕстьПереданные И СтрокаСписания.ИсточникПоКодуОперации = "Переданные" Тогда
				ЕстьПереданные=Истина;
			КонецЕсли;			
			
			СтрокаСписания.ОтражатьВУправленческомУчете = Упр И СтрокаСписания.ОтражатьВУправленческомУчете;
			СтрокаСписания.ОтражатьВБухгалтерскомУчете  = Бух И СтрокаСписания.ОтражатьВБухгалтерскомУчете;
			СтрокаСписания.ОтражатьВНалоговомУчете		= Нал И СтрокаСписания.ОтражатьВНалоговомУчете;
			
		КонецЦикла;
		СтруктураПараметров.Вставить("ЕстьНаСкладах", ЕстьНаСкладах);
		СтруктураПараметров.Вставить("ЕстьПереданные", ЕстьПереданные);
	КонецЕсли;
	
КонецПроцедуры //ПодготовитьТаблицуСписания

// Проверка списываемой партии по упр учету
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево
//
Функция ПроверитьПартиюНаСкладеУпр(СтрокаПартии, СтрокаДокумента, СтруктураПараметров) Экспорт
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если НЕ ПроверитьПартиюПоСтатусу(СтрокаПартии, СтрокаДокумента) Тогда Возврат Ложь КонецЕсли;
		
		Возврат  ПроверитьПартиюПоКачеству(СтрокаПартии, СтрокаДокумента)
		И ПроверитьПартиюПоЗаказу(СтрокаПартии, СтрокаДокумента)
		И ПроверитьПартиюПоСкладу(СтрокаПартии, СтрокаДокумента, СтруктураПараметров);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПроверитьПартиюНаСкладеУпр()

// Проверяет партию по статусу партии
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоСтатусу(СтрокаПартии, СтрокаДокумента)
	
	// Проверка выполняется, когда заданы условия проверки
	Если ЗначениеЗаполнено(СтрокаПартии.СтатусПартии) 
		И (ЗначениеЗаполнено(СтрокаДокумента.ДопустимыйСтатус1)
		ИЛИ ЗначениеЗаполнено(СтрокаДокумента.ДопустимыйСтатус2)
		ИЛИ ЗначениеЗаполнено(СтрокаДокумента.ДопустимыйСтатус3)) Тогда
		
		Если СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус1
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус2
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус3
			И СтрокаПартии.СтатусПартии <> СтрокаДокумента.ДопустимыйСтатус4
			// Статус "По ордеру" списывается всегда
			И СтрокаПартии.СтатусПартии <> Перечисления.СтатусыПартийТоваров.ПоОрдеру Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоСтатусу()

// Проверка партии по измерению "Склад"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПроверитьПартиюПоСкладу(СтрокаПартии, СтрокаДокумента, СтруктураПараметров)
	
	// Склад, если партионный учет по складам
	Если УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров) Тогда
		
		Если СтрокаПартии.Склад <> СтрокаДокумента.Склад
			И ЗначениеЗаполнено(СтрокаПартии.Склад) Тогда // пустые склады могут остаться со времени, когда не было партионного учета по складам
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПартиюПоСкладу()


/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЯ (КРЕДИТ)

// Упр учет

// Структура отбора партий по упр учету заполняется нужными значениями
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
		
		Если РегистрУчета="НаСкладах" Тогда
			
			// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
			// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
			// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
			Если СписыватьПустыеСерии тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе
				// Серии не отбираются при резервировании т.к. в заказах нет серий
				Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
				   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
				
					СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаДокумента.СерияНоменклатуры);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруОтбораУпр()
// Упр учет

// Возвращает имя соответствующего регистра для строки по упр учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Если ВидРегистра="ПартииТоваров" Тогда
			ИмяРегистра = ВидРегистра + РегистрУчета + "Упр";
		Иначе
			ИмяРегистра = ВидРегистра + "Упр";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Заполняет поля записи списания по упр учету
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;
		
		Если РегистрУчета="НаСкладах" Тогда
			Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;
			Движение.Склад 			        = СтрокаПартии.Склад;
			Движение.Заказ  				= СтрокаПартии.Заказ;
			Движение.Качество  				= СтрокаПартии.Качество;
			
		Иначе // Если РегистрУчета="Переданные" Тогда
			
			Движение.ДоговорКонтрагента	    = СтрокаПартии.ДоговорКонтрагента;
			Движение.ДокументПередачи		= СтрокаПартии.ДокументПередачи;
			
		КонецЕсли;
		
		Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;
		
		Движение.СтатусПартии		    = СтрокаПартии.СтатусПартии;
		
		// Реквизиты
		Движение.Подразделение	        = СтрокаДокумента.Подразделение;
		
		Если РегистрУчета="Переданные" Тогда
			Движение.СтатусПередачи		= СтрокаПартии.СтатусПередачи;
		КонецЕсли;
		
		// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
		
		// Сумма выручки и сумма НДС  - для учета НДС
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
		Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
		
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
		
		// Сумма выручки в валюте документа - для отчета комитенту
		Движение.СуммаВыручки = Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
		// Валюты и курсы - для пересчета
		Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
		Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
		Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
		
		СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
		
		// Количество поступления - для комплектации
		Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);
		СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписанияУпр()

// Возвращает текст содержащий вид табличной части
//
Функция ТекстСтрокиДокумента(СтрокаДокумента)

	Если ЗначениеЗаполнено(СтрокаДокумента.ВидТабличнойЧасти)Тогда
		
		ТекстСтрокиДокумента = ", табличная часть """ + Строка(СтрокаДокумента.ВидТабличнойЧасти)+"""";
		
	Иначе
		ТекстСтрокиДокумента =  " ";
		
	КонецЕсли;
	
	Возврат ТекстСтрокиДокумента;

КонецФункции // ТекстСтрокиДокумента()

// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтрокаСообщения = "Управленческий учет. ";
		
		Если РегистрУчета = "НаСкладах" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ?(УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");
			
		ИначеЕсли РегистрУчета = "Переданные" Тогда
			СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ", по договору " + СтрокаДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Отказ", Истина);
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Сообщает о нехватке партии в управленческом учете
//
// Параметры:
//	СтрокаДокумента.
//
Процедура СообщитьОНеполномСписанииУказаннойПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		СтрокаСообщения = "Управленческий учет. ";

		СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");
			
		Сообщить(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // СообщитьОНехваткеПартииУпр()

// Общие

// Возвращает имя соответствующего регистра для строки
//
// Параметры:
//	Нет.
//
Функция ПолучитьИмяРегистра(ВидРегистра, РегистрУчета, СтрокаДокумента)
	
	ИмяРегистра ="";
	ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);
	
	Возврат ИмяРегистра;
	
КонецФункции // ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента)

// Отбирает в партиях строки соответствующие значениям обрабатываемой строки
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив строк
//
Функция ОтобратьСтрокиПартий(ТаблицаПартий, СтрокаДокумента, РегистрУчета) Экспорт
	
	// Структура отбор строк партий
	СтруктураОтбора = Новый Структура;
	
	ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);
	
	МассивСтрок = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
	
	// Для регистров "ПартииТоваровНаСкладах"...
	// Если серия заполнена - попытаемся отобрать дополнительно пустые серии
	// Если серия в документе не заполнена - пустые серии уже отобраны
	// Для переданных товаров учет по сериям не ведется.
	Если РегистрУчета ="НаСкладах" тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры) тогда
			
			// Серии не отбираются при резервировании т.к. в заказах нет серий
			Если СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
			   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ Тогда
			
				ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);
				
				МассивСтрокСПустымиСериями = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);
				
				Для каждого Элемент из МассивСтрокСПустымиСериями Цикл
					МассивСтрок.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции // ОтобратьСтрокиПартий()

// Заполняет поля записи списания
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный)
	
	ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);
	
КонецПроцедуры // ЗаполнитьПоляЗаписиСписания()

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица списанных партий
//
Процедура СписаниеПартий(СтрокаДокумента, СтруктураПараметров, РегистрУчета)
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	// Партии для данного учета
	ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента);
	
	// Если нет регистра, по которому списываем, тогда пропускаем
	Если ИмяРегистра="" Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистра];
	
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];
	
	СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	
	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	// В строке может быть указана стоимость поступления, если затем товар будет оприходован с другой стоимостью
	СтоимостьПоступлениеОсталосьПогасить = 0;
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		СтоимостьПоступлениеОсталосьПогасить = СтрокаДокумента.СтоимостьПоступление;
	КонецЕсли;
	
	КоэффСписанияВалютный = 0;
	
	// Валютная задолженность при возврате товаров поставщику должна списываться пропорционально стоимости
	Если СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику 
	   И СтрокаДокумента.СуммаЗадолженностиБУ <> 0 тогда
		КоэффСписанияВалютный = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ/СтрокаДокумента.СуммаЗадолженностиБУ;
	Иначе
	КонецЕсли;
	
	КоличествоПоступление = СтрокаДокумента.КоличествоПоступление;
	
	КоличествоСписанноеПоДокументуПартии = 0;
	
	Если СтрокаДереваПартий <> Неопределено Тогда
		
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) И (СтрокаПартии.ДокументОприходования = СтрокаДокумента.ДокументПартии) Тогда
				КоличествоСписанноеПоДокументуПартии = КоличествоСписанноеПоДокументуПартии + Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			КонецЕсли;			
			
			// Добавим новую строку
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);
			
			// Свойства
			Движение.Период 	 = СтрокаДокумента.Период;
			Движение.Регистратор = СтрокаДокумента.Регистратор;
			Движение.Активность  = Истина;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.Номенклатура = СтрокаПартии.Номенклатура;
			
			// Ресурсы 
			Движение.Количество	= Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Движение.Стоимость	= Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			
			Если Движение.Количество < КоличествоОсталосьПогасить Тогда
				КоэффПоступления = Движение.Количество / КоличествоОсталосьПогасить;
			Иначе
				КоэффПоступления = 1;
			КонецЕсли;
			
			// Вспомогательное поле, не являющееся ресурсом, но используемое
			// для формирования записей по переоценке принятого на комиссию.
			Движение.СтоимостьПоступление = СтоимостьПоступлениеОсталосьПогасить * КоэффПоступления;
			СтоимостьПоступлениеОсталосьПогасить = СтоимостьПоступлениеОсталосьПогасить - Движение.СтоимостьПоступление;
			
			// Реквизиты
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
			
			СтрокаПартии.Количество = СтрокаПартии.Количество - Движение.Количество;
			СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Движение.Стоимость;
			
			// Заполнение полей, специфических для учета
			ЗаполнитьПоляЗаписиСписания(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный);
			
			// Обработка движений, связанных со списанием определенных партий по документу (специфика разных видов учета)
			ВыполнитьСвязанныеСоСписаниемДвижения(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления);

			// Обработка поступления
			КорректировкаСтоимости.ВыполнитьКорДвижение(РегистрУчета, СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЦикла;
	КонецЕсли;
	
	// Восстановим ранее сохраненное количество поступления для движений по НДС
	СтрокаДокумента.КоличествоПоступление = КоличествоПоступление;
	
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	Иначе
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументПартии) 
		  И (СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику)
		  И (КоличествоСписанноеПоДокументуПартии < СтрокаДокумента.Количество) Тогда
		    СообщитьОНеполномСписанииУказаннойПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
		КонецЕсли;			
	КонецЕсли; 
	
КонецПроцедуры // СписаниеПартий()

// Сообщение о нехватке партий
//
// Параметры:
//	Нет.
//
Процедура СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
КонецПроцедуры // СообщитьОНехваткеПартии()

// Сообщение о неполном списании явно указанной партии
//
// Параметры:
//	Нет.
//
Процедура СообщитьОНеполномСписанииУказаннойПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить)
	
	СообщитьОНеполномСписанииУказаннойПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);
	
КонецПроцедуры // СообщитьОНехваткеПартии()

/////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ

// Отражение продажи комиссионного товара
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания)
	
	МассивДокументов = Новый Массив;
	
	КодОперации = Перечисления.КодыОперацийПартииТоваров;
	
	Для Сч=1 По 2 Цикл
		
		// Первый раз движения по партиям на складах, второй - по партиям на комиссии
		Если Сч=1 Тогда
			
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Скопировать();
			СписаноИз = "НаСкладах";
			
		Иначе
			ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Скопировать();
			СписаноИз = "Переданные";
		КонецЕсли;
		
		// Из таблицы удалим движения, не относящиеся к продаже купленных товаров
		Инд=0;
		Пока Инд<ТаблицаСписанныхПартий.Количество() Цикл
			Строка = ТаблицаСписанныхПартий[Инд];
			
			// Товар должен быть комиссионным и списываться (операции определенных типов)
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию 
				
				И ( Строка.КодОперации = КодОперации.Реализация
				ИЛИ Строка.КодОперации = КодОперации.РеализацияРозница
				ИЛИ Строка.КодОперации = КодОперации.РеализацияКомиссия
				ИЛИ Строка.КодОперации = КодОперации.СписаниеНаЗатраты
				ИЛИ Строка.КодОперации = КодОперации.СписаниеПоИнвентаризации
				ИЛИ Строка.КодОперации = КодОперации.Комплектация
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателя
				ИЛИ Строка.КодОперации = КодОперации.ВозвратОтПокупателяТекущийМесяц
				
				)Тогда
				
				Инд = Инд+1;
				МассивДокументов.Добавить(Строка.ДокументОприходования);
			Иначе
				ТаблицаСписанныхПартий.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСписанныхПартий.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ПолныеПрава.ПолучитьПараметрыДокументовОприходования(МассивДокументов, СтруктураПараметров.Период);
		
		СоотвДок = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоотвДок.Вставить(Выборка.Ссылка, Новый Структура("ДоговорПоставки, ВедениеВзаиморасчетов, Сделка, Ссылка, Валюта, Курс, Кратность", Выборка.ДоговорПоставки, Выборка.ВедениеВзаиморасчетов, Выборка.Сделка, Выборка.Ссылка, Выборка.Валюта, Выборка.Курс, Выборка.Кратность));
		КонецЦикла;	
			
		ДоговорПоставки        = Выборка.ДоговорПоставки;
		ВалютаДоговораПоставки = Выборка.Валюта;
		
		ВалютаУпр = Неопределено;
		КурсВалютыУпр = 0;
		КратностьВалютыУпр = 0;
		
		Для Каждого Движение Из ТаблицаСписанныхПартий Цикл
			
			ДвижениеРТ = ДобавитьДвижениеВСтруктуруПараметров("РеализованныеТовары", СтруктураПараметров);
			ДвижениеРТ.Период = СтруктураПараметров.Период;
			
			Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
				ДвижениеРТ.ВидДвижения = Движение.ВидДвижения;
				ДвижениеРТ.Количество  = -Движение.Количество;
				
			Иначе
				Если Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Приход;
				Иначе
					ДвижениеРТ.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЕсли;
				ДвижениеРТ.Количество = Движение.Количество;
			КонецЕсли;
			
			ДвижениеРТ.Номенклатура = Движение.Номенклатура;
			ДвижениеРТ.ХарактеристикаНоменклатуры = Движение.ХарактеристикаНоменклатуры;
			
			СтрокаТаблицыСписания = ТаблицаСписания.Найти(Движение.НомерСтрокиСписанныхТоваров, "НомерСтроки");			
			
			Если СтрокаТаблицыСписания = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТаблицаСписания[0].ПоступлениеПриходныйОрдер) Тогда
				//Это корректировка ордерной партии, возмем серию из движений
				Если СписаноИз = "НаСкладах" Тогда//В партиях товаров переданных нет серии
					ДвижениеРТ.СерияНоменклатуры = Движение.СерияНоменклатуры;
				КонецЕсли;
			Иначе
				// серия номенклатуры в реализованных товарах должна совпадать со списанными товарами
				ДвижениеРТ.СерияНоменклатуры = СтрокаТаблицыСписания.СерияНоменклатуры;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				Тогда
				Если ТипЗнч(СтрокаТаблицыСписания.ДокументПередачи) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ДвижениеРТ.ДатаРеализации = СтрокаТаблицыСписания.ДокументПередачи.Дата;
					ДвижениеРТ.Покупатель = СтруктураПараметров.Покупатель;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")
				И ТипЗнч(СтруктураПараметров.Регистратор.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
				Тогда
				ДвижениеРТ.ДатаРеализации = СтруктураПараметров.Регистратор.ИсправляемыйДокументРеализации.Дата;
				ДвижениеРТ.Покупатель = СтруктураПараметров.Покупатель;
			ИначеЕсли ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				Тогда
				ДвижениеРТ.ДатаРеализации = СтрокаТаблицыСписания.ДатаСФ;
				ДвижениеРТ.Покупатель = СтрокаТаблицыСписания.Покупатель;
			Иначе
				ДвижениеРТ.ДатаРеализации = ДвижениеРТ.Период;
				ДвижениеРТ.Покупатель = СтруктураПараметров.Покупатель;
			КонецЕсли;
			
			ДвижениеРТ.ДокументПоставки	 = Движение.ДокументОприходования;
			
			СтруктураДок = СоотвДок[Движение.ДокументОприходования];
			
			Если СтруктураДок <> Неопределено Тогда
				ДвижениеРТ.ДоговорКонтрагента = СтруктураДок.ДоговорПоставки;
				
				Если ЗначениеЗаполнено(СтруктураДок.Сделка) Тогда
					ДвижениеРТ.Сделка = СтруктураДок.Сделка;
				Иначе
					ДвижениеРТ.Сделка = Неопределено;
				КонецЕсли;	
				
				Если Движение.СуммаВыручки<>0 Тогда
					// Пересчет выручки в валюту взаиморасчетов с комитентом
					ДвижениеРТ.Выручка = 
					МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаВыручки, 
					Движение.ВалютаДокумента, СтруктураДок.Валюта, 
					Движение.КурсДокумента, СтруктураДок.Курс, 
					Движение.КратностьДокумента, СтруктураДок.Кратность);

				Иначе // по стоимости принятия на комиссию
					
					Если ВалютаУпр = Неопределено Тогда
						ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
						СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
						КурсВалютыУпр = СтруктураКурсВалюты.Курс;
						КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
					КонецЕсли;
					
					ДвижениеРТ.Выручка = 
					МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.Стоимость, 
					ВалютаУпр, СтруктураДок.Валюта, 
					КурсВалютыУпр, СтруктураДок.Курс, 
					КратностьВалютыУпр, СтруктураДок.Кратность);
				КонецЕсли;
				
				Если Движение.КодОперации = КодОперации.ВозвратОтПокупателя Тогда
				  //ИЛИ Движение.КодОперации = КодОперации.ВозвратОтПокупателяТекущийМесяц Тогда
					ДвижениеРТ.Выручка = -ДвижениеРТ.Выручка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтрокаДокумента, СтруктураПараметров, Движение)()

// Связанные со списанием движения по упр учету
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьСвязанныеДвиженияУпр(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления)
	
	Если СтрокаДокумента.ОтражатьвУправленческомУчете Тогда
		Если СтрокаДокумента.НеСписывать И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
		   И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда
				
			ОприходоватьТоварПринятыйНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыполнитьСвязанныеДвиженияУпр()

// Выполнение движений, связанных со списанием партий по документу, имеющих специфику разных в разных видах учета
// Выполняется только при первичном проведении документа, не используется при корректировке списания.
//
Процедура ВыполнитьСвязанныеСоСписаниемДвижения(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления)
	
	ВыполнитьСвязанныеДвиженияУпр(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления);
	
	// Сюда можно добавить вызов процедур для выполнения движений по другим учетам
	
КонецПроцедуры // ВыполнитьСвязанныеСоСписаниемДвижения()

/////////////////////////////////////////////////////////////////////////////////
// КОРРЕСПОНДИРУЮЩИЕ СПИСАНИЮ ДВИЖЕНИЯ (ДЕБЕТ)
// Движение по себестоимости продаж
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая")

	Если СтрокаДокумента.ВедениеУчетаПоПроектам Тогда
		
		// Создадим таблицу значений для передачи в ОтразитьДвиженияПоПроектам
		
		ТаблицаПоТоварам = Новый ТаблицаЗначений;
		
		Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки Цикл
			
			ТаблицаПоТоварам.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
		КонецЦикла;
		
		Если НЕ (ТипЗнч(СтрокаДокумента.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам")) Тогда
		
			ТаблицаПоТоварам.Колонки.Добавить("Проект");
			ТаблицаПоТоварам.ЗаполнитьЗначения(СтрокаДокумента.Проект,"Проект");
			
		КонецЕсли;
		
		ТаблицаПоТоварам.Колонки.Добавить("СтоимостьБезСкидок",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		ТаблицаДвижений = Новый ТаблицаЗначений;
		
		Для каждого Колонка ИЗ СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Колонки Цикл
			
			ТаблицаДвижений.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения);
			
		КонецЦикла;
		
		ТаблицаДвижений.Колонки.Добавить("Заказ");
		
		ТаблицаДвижений.Колонки.Добавить("СтатусПартии");
		
		ТаблицаДвижений.Колонки.Добавить("СуммаВыручки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ТаблицаДвижений.Колонки.Добавить("СуммаНДСВыручкиБУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		ТаблицаДвижений.Колонки.Добавить("НомерКорСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0));

		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам,ТаблицаДвижений,СтрокаДокумента.Проект,СтруктураПараметров.Период,"Продажи");
		
		НуженНомерКорСтроки = Истина;
		Для Каждого Движение из ТаблицаДвижений Цикл
			СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
			Если НуженНомерКорСтроки тогда
				НуженНомерКорСтроки = Ложь;
				Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
			КонецЕсли;
		КонецЦикла;
		
		Возврат;

	КонецЕсли;

	СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи);

КонецПроцедуры // СписаниеНаСебестоимостьПродажУпр()

Процедура СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая")
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПродажиСебестоимость", СтруктураПараметров);
	
	Если ТипЗаписи = "Сторно" Тогда
		КоэффициентСторно = -1;
	Иначе
		КоэффициентСторно = 1;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.Активность = Истина;
	
	Если  ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		
		Движение.ЗаказПокупателя = СтрокаДокумента.ЗаказСписания;
		
	ИначеЕсли  ЗначениеЗаполнено(Строка.Заказ) Тогда
		
		Движение.ЗаказПокупателя = Строка.Заказ;
		
	Иначе
		
		Движение.ЗаказПокупателя = Неопределено;
		
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта) Тогда
	
		Движение.Номенклатура = СтрокаДокумента.НоменклатураКомплекта;
	
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаКомплекта) Тогда
	
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаКомплекта;
	
	КонецЕсли;	
	
	Движение.Подразделение = СтрокаДокумента.Подразделение;
	
	Если ( ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта)) И (НЕ СтрокаДокумента.Количество = 0) Тогда
		Движение.Количество = КоэффициентСторно*СтрокаДокумента.КоличествоКомплекта*Строка.Количество/СтрокаДокумента.Количество;
	Иначе
		Движение.Количество = КоэффициентСторно*Строка.Количество;
	КонецЕсли;	
	
	Если НЕ Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
		Движение.Стоимость  = КоэффициентСторно*Строка.Стоимость;
	Иначе
		ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
		СтруктураКурсВалюты = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Движение.Период, Новый Структура("Валюта", ВалютаУпр));
		КурсВалютыУпр = СтруктураКурсВалюты.Курс;
		КратностьВалютыУпр = СтруктураКурсВалюты.Кратность;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.ВалютаДокумента) Тогда
			НеВключатьНДСВСтоимостьПартий = УчетнаяПолитика("НеВключатьНДСВСтоимостьПартий", "Упр",, СтруктураПараметров);
			Если НеВключатьНДСВСтоимостьПартий Тогда
				ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				СуммаИсключаемогоНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДСВыручкиБУ, 
				ВалютаРегл, ВалютаУпр, 
				1, КурсВалютыУпр,
				1, КратностьВалютыУпр);
			Иначе
				СуммаИсключаемогоНДС = 0;
			КонецЕсли;	
			
			Движение.Стоимость = КоэффициентСторно*
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВыручки, 
			СтрокаДокумента.ВалютаДокумента, ВалютаУпр, 
			СтрокаДокумента.КурсДокумента, КурсВалютыУпр,
			СтрокаДокумента.КратностьДокумента, КратностьВалютыУпр) - СуммаИсключаемогоНДС;
			
		Иначе	
			НеВключатьНДСВСтоимостьПартий = УчетнаяПолитика("НеВключатьНДСВСтоимостьПартий", "Упр",, СтруктураПараметров);
			Если НеВключатьНДСВСтоимостьПартий Тогда
				ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				СуммаИсключаемогоНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаНДСВыручкиБУ, 
				ВалютаРегл, ВалютаУпр, 
				1, КурсВалютыУпр,
				1, КратностьВалютыУпр);
			Иначе
				СуммаИсключаемогоНДС = 0;
			КонецЕсли;	
			
			Движение.Стоимость = КоэффициентСторно*Строка.СуммаВыручки - СуммаИсключаемогоНДС;
			
		КонецЕсли;	
	КонецЕсли;	
	
	Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;
	
КонецПроцедуры//СформироватьДвиженияСписанияНаСебестоимостьПродажУпр()

// Склад

Процедура ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров)
	
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям тогда
		
		// Если задана новая серия или установлен флаг изменить серию - подставляем ее
		Если  ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Или СтрокаДокумента.ИзменитьСерию Тогда
			
			Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
			
		Иначе
			
			// Серия номенклатуры в движении списания есть, только если списано со склада 
			Если СписаноИз = "НаСкладах" Тогда
			
				Движение.СерияНоменклатуры	= Строка.СерияНоменклатуры;
				
			КонецЕсли;
			// При возврате товара от комиссионера или переработчика серия есть в строке документа
			Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера Тогда
				
				Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Движение.СерияНоменклатуры	= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры//ЗаполнитьСериюВДвижении()

// Поступление товаров на склад
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	Движение.Активность  = Истина;
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	// Измерения
	Если УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", Учет, , СтруктураПараметров) Тогда
		
		// Склад в движении есть, только если списано со склада
		Если СписаноИз = "НаСкладах" Тогда
			Движение.Склад	= Строка.Склад;
		Иначе
			
			Движение.Склад 	= СтрокаДокумента.Склад;
			
		КонецЕсли;
		
		// Если задан новый склад поступления, подставляем его
		Если  ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
			Движение.Склад 	= СтрокаДокумента.СкладПолучатель;
			
		КонецЕсли;
		
	Иначе
		
		Движение.Склад      = Неопределено;
	КонецЕсли;
	
	Движение.Номенклатура 	= Строка.Номенклатура;
	
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	
	// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
	Если  ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику Тогда
		
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		
	КонецЕсли;
	
	ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);
	
	// Качество номенклатуры в движении есть только, если списано со склада
	Если СписаноИз = "НаСкладах" Тогда
		
		Движение.Качество	= Строка.Качество;
	КонецЕсли;
	
	// Если задано новое качество, подставляем его
	Если  ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое) Тогда
		
		Движение.Качество = СтрокаДокумента.КачествоНовое;
	КонецЕсли;
	
	// Вместо пустого качества - новый
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество = Справочники.Качество.Новый;
	КонецЕсли;
	
	Движение.ДокументОприходования = Строка.ДокументОприходования;
	
	Если НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества 
		Тогда
	
		Движение.Заказ	= ?( ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);
	
	КонецЕсли;
	
	Движение.СтатусПартии = Строка.СтатусПартии;
	
	// Новая номенклатура-для комплектации: меняется все
	// Аналогично обрабатывается включение оборудования в состав МПЗ
	Если  ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая) Тогда
		
		Движение.Номенклатура = СтрокаДокумента.НоменклатураНовая;
		Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;
		
		СпособОценкиМПЗ = ВРег(УчетнаяПолитика("СпособОценкиМПЗ", Учет, , СтруктураПараметров));
		Если СпособОценкиМПЗ <> "ПО СРЕДНЕЙ" тогда
			Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;
		Иначе
			Движение.ДокументОприходования	= Неопределено;
		КонецЕсли;

		// Комплект(ующее) приходуется со статусом партии, указанным в документе
		// Если значение не заполнено - статус партии "купленный"
		// Статус партии "по ордеру" не меняем
		Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация 
		Тогда
			Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру Тогда
				Движение.СтатусПартии = Строка.СтатусПартии;
			Иначе	
				Если  ЗначениеЗаполнено(СтрокаДокумента.СтатусПартииНовый) тогда
					Движение.СтатусПартии = СтрокаДокумента.СтатусПартииНовый;
				Иначе
					Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	// Вспомогательные поля для списания
	Движение.ДокументОприходованияДата = Строка.ДокументОприходованияДата;
	
	// Ресурсы
	Движение.Количество	= Строка.Количество;
	Движение.Стоимость	= Строка.Стоимость;
	
	// Новое количество-для комплектации
	Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация Тогда 
		Если Строка.Количество < 0 Тогда
			Движение.Количество	= -Строка.КоличествоПоступление;
		Иначе	
			Движение.Количество	= Строка.КоличествоПоступление;
		КонецЕсли;	
	КонецЕсли;
	
	// Оприходование может быть с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость = Строка.СтоимостьПоступление;
		
	КонецЕсли;

	// Реквизиты
	Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;

	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];
	
КонецПроцедуры//ПоступлениеНаСкладУпр()

// Переданные на комиссию

// Поступление товаров отданных
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
//
Процедура ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	Учет = "Упр";
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);
	
	// Свойства
	Движение.Период                 = Строка.Период;
	Движение.Регистратор            = Строка.Регистратор;
	Движение.Активность				= Истина;
	
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	Движение.Номенклатура 			= Строка.Номенклатура;
	Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.СтатусПартии	    = Строка.СтатусПартии;
	Движение.СтатусПередачи		= СтрокаДокумента.СтатусПередачи;
	
	Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;
	Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;
	
	// Вспомогательные поля для списания
	Движение.ДокументОприходованияДата	= Строка.ДокументОприходованияДата;
	
	// Ресурсы
	Движение.Количество				= Строка.Количество;
		
	Движение.Стоимость	= Строка.Стоимость;
	
	// Оприходование с новой стоимостью
	Если Строка.СтоимостьПоступление<>0 Тогда
		
		Движение.Стоимость			= Строка.СтоимостьПоступление;
		
	КонецЕсли;
	
	// Реквизиты
	Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;
						
	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];

КонецПроцедуры

// Списание на постоянные затраты

// Поступление товаров на постоянные затраты
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка)
	
	СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка);

КонецПроцедуры//СписаниеНаПостоянныеЗатратыУпр

Процедура СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка)

	Учет = "Упр";

	Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);

	// Свойства
	ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);
	
	// Свойства из основного движения
	Движение.Период      = Строка.Период;
	Движение.Регистратор = Строка.Регистратор;
	
	// Свойства кор. движения
	Движение.Активность  = Истина;

	ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, , СтруктураПараметров);

	// Ресурсы
	Движение.Сумма				    = Строка.Стоимость;

	Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет];

КонецПроцедуры // СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр


Процедура ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, Организация = Неопределено, СтруктураПараметров)
	
	// Заказ списания
	ЗаказСписания = Неопределено;
	Если ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания) Тогда
		Если ТипЗнч(СтрокаДокумента.ЗаказСписания) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказСписания = СтрокаДокумента.ЗаказСписания;
		КонецЕсли;
	КонецЕсли;
	
	Движение.Заказ = ЗаказСписания;

КонецПроцедуры // ЗаполнитьЗаказВДвижении

// Общая процедура поступления: маршрутизирует алгоритм поступления
//
Процедура ВыполнитьКорДвижениеУпр(СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение) Экспорт
			
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		// Общие для всех учетов алгоритмы
		Если ПриходоватьВ = "НаСкладах" Тогда
			
			ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "Переданные" Тогда
			
			ПоступлениеПереданныхУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		ИначеЕсли ПриходоватьВ = "СебестоимостьПродаж" Тогда
			
			СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение);
		
		ИначеЕсли ПриходоватьВ = "Затраты" Тогда
			
			СписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Движение);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
// Общие

////////////////////////////////////////////////////////////////////////////////
// СПЕЦИФИЧЕСКИЕ ПРОЦЕДУРЫ ДВИЖЕНИЯ ПАРТИЙ ДЛЯ ОПРЕДЕЛЕННЫХ ВИДОВ ДОКУМЕНТОВ

// Процедуры, обслуживающие возврат товара от покупателя
// Возврат товара от комиссионера обслуживается общим случаем списания партий товаров
Процедура ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение(СтруктураПараметров, ДокументПартии, СтрУчет)
	
	Запрос = Новый Запрос;
	Если СтрУчет = "Управленческий" Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		               |	ПартииТоваровНаСкладах.Склад КАК Склад,
		               |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
		               |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
		               |	ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
		               |	ПартииТоваровНаСкладах.Заказ КАК Заказ,
		               |	ПартииТоваровНаСкладах.Качество КАК Качество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладах.Количество
		               |			ИНАЧЕ -ПартииТоваровНаСкладах.Количество
		               |		КОНЕЦ) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладах.Стоимость
		               |			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		               |		КОНЕЦ) КАК Стоимость
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.КодОперации = &КодОперации
		               |	И (ПартииТоваровНаСкладах.ДокументДвижения = &ДокументПартии
		               |			ИЛИ ПартииТоваровНаСкладах.Регистратор = &ДокументПартии)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПартииТоваровНаСкладах.Номенклатура,
		               |	ПартииТоваровНаСкладах.Склад,
		               |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладах.СерияНоменклатуры,
		               |	ПартииТоваровНаСкладах.ДокументОприходования,
		               |	ПартииТоваровНаСкладах.СтатусПартии,
		               |	ПартииТоваровНаСкладах.Заказ,
		               |	ПартииТоваровНаСкладах.Качество";
					   
	Иначе
		Возврат;
	
	КонецЕсли; 
				   
	Запрос.УстановитьПараметр("КодОперации", Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДокументПартии", ДокументПартии);
	
	СтруктураПараметров.Вставить("ТаблицаПартийПринятыхНаОтветственноеХранение"+СтрУчет,Запрос.Выполнить().Выгрузить());


КонецПроцедуры//ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение()

// Определяет параметры возврата 
//
Процедура ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";
		ВестиПУПоСкладам  = УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров);
		СтрУчет			  = "Управленческий";
		НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
	КонецЕсли;
	
КонецПроцедуры//ПолучитьПараметрыВозвратаОтПокупателя


// Возвращает таблицу партий товаров, которую можно оприходовать документом "Возврат товаров от покупателя"
//
Функция ПолучитьТаблицуЗаписейОснованияВозврата(СтрокаДокумента, СтруктураПараметров, ДокументПартии, НаборОснование, СтрУчет, ИмяРегистраПартии)
	
	// Партии, которые можно вернуть, получаем при первом вызове и помещаем в структуру параметров
	// Затем до конца обработки документа используем таблицы значений из структуры параметров
	ТаблицаЗаписейОснования = Неопределено;
	ТаблицыПартийВозврата = Неопределено;
	
	// В табличной части возврата от покупателя может быть указано произвольное количество документов партии
	Если СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата) тогда
		ТаблицаЗаписейОснования = ТаблицыПартийВозврата.Получить(ДокументПартии.УникальныйИдентификатор());
		Если ТаблицаЗаписейОснования <> Неопределено тогда
			Возврат ТаблицаЗаписейОснования;
		КонецЕсли;
	КонецЕсли;
	
	КодыОпераций = СтруктураПараметров.КодыОпераций;
	
	// Если указан партиеобразующий документ, данные берутся из него
	Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
		
		// Для сообщения о нехватке партии
		
		СтруктураПараметров.Вставить("СтрокаСообщенияНеНайдено", "Не найдено поступление ");
		СтруктураПараметров.Вставить("СтрокаСообщенияДокументПартии", ", по документу партии ");
		// 
		Если СтрокаДокумента.ОтражатьВУправленческомУчете 
		   И ТипЗнч(ДокументПартии)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		   Тогда
			// выберем движения документа партии по регистру "ПартииТоваров" за исключением сторнирующих движений
			ЗапросПоДокументуПартии = Новый Запрос;
			ЗапросПоДокументуПартии.Текст =  "ВЫБРАТЬ
			|	ПартииТоваровНаСкладах.Период,
			|	ПартииТоваровНаСкладах.Регистратор,
			|	ПартииТоваровНаСкладах.Номенклатура,
			|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
			|	ПартииТоваровНаСкладах.СерияНоменклатуры,
			|	ПартииТоваровНаСкладах.ДокументОприходования,
			|	ПартииТоваровНаСкладах.СтатусПартии,
			|	ПартииТоваровНаСкладах.Заказ,
			|	ПартииТоваровНаСкладах.Качество,
			|	ПартииТоваровНаСкладах.Количество,
			|	ПартииТоваровНаСкладах.Стоимость
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
			|ГДЕ
			|	ПартииТоваровНаСкладах.СтатусПартии <> &СтатусПартии
			|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор";
			
			ЗапросПоДокументуПартии.УстановитьПараметр("СтатусПартии",Перечисления.СтатусыПартийТоваров.ПоОрдеру);
			ЗапросПоДокументуПартии.УстановитьПараметр("Регистратор",ДокументПартии);
			ТаблицаЗаписейОснования = ЗапросПоДокументуПартии.Выполнить().Выгрузить();
		Иначе
			НаборОснование.Отбор.Регистратор.Установить(ДокументПартии);
			НаборОснование.Прочитать();
			ТаблицаЗаписейОснования = НаборОснование.Выгрузить();
		КонецЕсли;
		
		// Если указан документ списания, данные о партиях берутся из него
	Иначе
		// Для сообщения о нехватке партии
		СтруктураПараметров.Вставить("СтрокаСообщенияНеНайдено", "Не найдено ");
		СтруктураПараметров.Вставить("СтрокаСообщенияДокументПартии",  ", списанного документом ");
		
		// Движения реализации могут быть выполнены с неточной или нерассчитанной себестоимостью
		// Кроме того в управленческом учете при ордерной схеме движения реализации может выполнять поступление
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидДвиженияРасход",ВидДвиженияНакопления.Расход);
		МассивРеализация = Новый Массив;
		МассивРеализация.Добавить(КодыОпераций.ПередачаТарыКонтрагенту);
		МассивРеализация.Добавить(КодыОпераций.Реализация);
		МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
		МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
		
		Запрос.УстановитьПараметр("КодыСписание",МассивРеализация);
		Запрос.УстановитьПараметр("Регистратор",ДокументПартии);
		// Возврат не может быть раньше реализации
		Запрос.УстановитьПараметр("Период",СтруктураПараметров.Период);
		
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			ЗаполнитьЗапросПоВозвратуУпр(Запрос);
		КонецЕсли;	
			
		ТаблицаЗаписейОснования = Запрос.Выполнить().Выгрузить();
		
		ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение(СтруктураПараметров, ДокументПартии, СтрУчет);
		
	КонецЕсли;//Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
	
	// Добавим вспомогательное поле ДокументОприходованияДата
	ТаблицаЗаписейОснования.Колонки.Добавить("ДокументОприходованияДата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	// В полученной таблице найдем партии, которые уже возвращались другими возвратами
	ТаблицаЗаписейОснования = ПодготовитьТаблицуЗаписейОснования(ТаблицаЗаписейОснования, СтруктураПараметров, ДокументПартии, СтрУчет);
	
	Если НЕ СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата) тогда
		ТаблицыПартийВозврата = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыПартийВозврата.Вставить(ДокументПартии.УникальныйИдентификатор(),ТаблицаЗаписейОснования);
	
	СтруктураПараметров.Вставить("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата);
	
	Возврат ТаблицаЗаписейОснования;
	
КонецФункции// ПолучитьТаблицуЗаписейОснованияВозврата()



Процедура ЗаполнитьЗапросПоВозвратуУпр(Запрос)

Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.СтатусПартии,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям
			   |
               |УПОРЯДОЧИТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям"
			   

КонецПроцедуры // ЗаполнитьЗапросПоВозвратуУпр(Запрос)()

// Корректирует таблицу основания с учетом ранее проведенных возвратов
// Таблица основания корректируется либо по документу поступления, либо по документу реализации
// Ситуация, когда есть возвраты и по документу поступления и по документу реализации не обслуживается
//
Функция ПодготовитьТаблицуЗаписейОснования(ТаблицаЗаписейОснования, СтруктураШапкиДокумента, ДокументПартии, СтрУчет)
	
	ЗапросПоВозвратам = Новый Запрос;
	
	ЗапросПоВозвратам.Текст = "ВЫБРАТЬ
	                          |	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	                          |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                          |	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
							  |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	                          |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.Количество
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.Количество
	                          |	КОНЕЦ КАК Количество,
	                          |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.Стоимость
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.Стоимость
	                          |	КОНЕЦ КАК Стоимость,
	                          |	ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	                          |ИЗ
	                          |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	                          |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	                          |			ПО СписанныеТовары.Регистратор = ПартииТоваровНаСкладах.Регистратор
	                          |				И (СписанныеТовары.ДокументПартии = &ДокументПартии)
	                          |				И СписанныеТовары.НомерСтроки = ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	                          |		ПО ПартииТоваровНаСкладах.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	                          |ГДЕ
	                          |	ВозвратТоваровОтПокупателя.Товары.ДокументПартии = &ДокументПартии
	                          |	И ВозвратТоваровОтПокупателя.МоментВремени > &МоментНач
	                          |	И ВозвратТоваровОтПокупателя.МоментВремени < &МоментКон";
	
	ЗапросПоВозвратам.УстановитьПараметр("ДокументПартии",ДокументПартии);
	
	СтруктураРеквизитовДокумента = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(ДокументПартии, СтруктураРеквизитовДокумента);
	МоментНач = Новый МоментВремени(СтруктураРеквизитовДокумента.Дата,ДокументПартии);
	МоментКон = Новый МоментВремени(СтруктураШапкиДокумента.Период,СтруктураШапкиДокумента.Регистратор);
	
	ЗапросПоВозвратам.УстановитьПараметр("МоментНач",МоментНач);
	ЗапросПоВозвратам.УстановитьПараметр("МоментКон",МоментКон);
	ЗапросПоВозвратам.УстановитьПараметр("ВозвратТекущегоМесяца", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц);
	
	// Изменим текст запроса, если учет отличается от управленческого
	Если СтрУчет <> "Управленческий" тогда
		ЗапросПоВозвратам.Текст = СтрЗаменить(ЗапросПоВозвратам.Текст,".ПартииТоваровНаСкладах",".ПартииТоваровНаСкладах"+СтрУчет+"Учет");
	КонецЕсли;
	
	РезультатЗапроса = ЗапросПоВозвратам.Выполнить();
	Если Не РезультатЗапроса.Пустой() тогда
		
		ТаблицаВозвратов = РезультатЗапроса.Выгрузить();
		// Уменьшим количество и стоимость в таблице основания
		Для каждого Строка Из ТаблицаЗаписейОснования цикл
			
			// Отберем строки
			СтруктураОтбора = Новый Структура;

			СтруктураОтбора.Вставить("Номенклатура",               Строка.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
			СтруктураОтбора.Вставить("СерияНоменклатуры", Строка.СерияНоменклатуры);
			СтруктураОтбора.Вставить("ДокументОприходования", Строка.ДокументОприходования);
						
			НайденныеСтроки = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбора);
			
			// Дополнительно отберем строки с пустыми сериями 
			Если Строка.СерияНоменклатуры <> Справочники.СерииНоменклатуры.ПустаяСсылка() тогда
				
				СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
					
				НайденныеСтрокиСПустымиСериями = ТаблицаВозвратов.НайтиСтроки(СтруктураОтбора);
						
				Для каждого Элемент из НайденныеСтрокиСПустымиСериями Цикл
					НайденныеСтроки.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;

			Для каждого НайденнаяСтрока из НайденныеСтроки цикл
				Строка.Количество = Строка.Количество - НайденнаяСтрока.Количество;
				Строка.Стоимость  = Строка.Стоимость - НайденнаяСтрока.Стоимость;
				
				НайденнаяСтрока.Количество = 0;
				НайденнаяСтрока.Стоимость = 0;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗаписейОснования;
	
КонецФункции // ПодготовитьТаблицуЗаписейОснования

// Выполняет движения документа возврат товаров от покупателя
//
Процедура ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
									ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания)
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
	
	КачествоНовый = Справочники.Качество.Новый;

	// Свойства
	Движение.Период      = СтрокаДокумента.Период;
	Движение.Регистратор = СтрокаДокумента.Регистратор;
	Движение.Активность = Истина;
	
	// Возврат текущего месяца может быть с неизвестной стоимостью
	// например, если возвращается продукция
	// в этом случае он учитывается как сторно расхода 
	// и обрабатывается корректировкой стоимости списания как расход
	ВозвратТекущегоМесяца = КонецМесяца(ДокументПартии.Дата) = КонецМесяца(СтруктураПараметров.Период);
	Если ВозвратТекущегоМесяца тогда
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		КоэффициентСторно    = -1;
		ТипЗаписи = "Прямая";
	Иначе	
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		КоэффициентСторно    = 1;
		ТипЗаписи = "Сторно";
	КонецЕсли;
	
	// Измерения
	Если ВестиПУПоСкладам Тогда
		
		Движение.Склад	= СтрокаДокумента.Склад;
		
		// Если задан новый склад поступления, подставляем его
		Если  ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель) Тогда
			Движение.Склад	= СтрокаДокумента.СкладПолучатель;
			
		КонецЕсли;
		
	Иначе
		
		Движение.Склад      = Неопределено;
	КонецЕсли;
	
	Движение.Номенклатура	= СтрокаДокумента.Номенклатура;
	
	Движение.СтатусПартии = Строка.СтатусПартии;
	
	Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;
	
	// Если партионный учет по сериям не ведется - серии в регистре "партии товаров на складах" нет
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям тогда
		Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;
	КонецЕсли;
	
	Движение.ДокументОприходования	= Строка.ДокументОприходования;
	
	Движение.Качество = СтрокаДокумента.Качество;
	
	Если НЕ ЗначениеЗаполнено(Движение.Качество) Тогда
		Движение.Качество = КачествоНовый;
	КонецЕсли;
	
	// Ресурсы
	ПогашаемоеКоличество = Окр(Строка.Количество * КоэффСписания,3,1);
	ПогашаемаяСтоимость  = Окр(Строка.Стоимость * КоэффСписания,2,1);
	Движение.Количество  = КоэффициентСторно*ПогашаемоеКоличество;
	Движение.Стоимость   = КоэффициентСторно*ПогашаемаяСтоимость;
	
	// Реквизиты
	Если ВозвратТекущегоМесяца тогда
		Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц;
	Иначе
		Движение.КодОперации = СтрокаДокумента.КодОперацииПартииТоваров;
	КонецЕсли;
	
	Если ПогашаемоеКоличество < КоличествоОсталосьПогасить Тогда
		КоэффПоступления = ПогашаемоеКоличество / КоличествоОсталосьПогасить;
	Иначе
		КоэффПоступления = 1;
	КонецЕсли;
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		// Сумма выручки в валюте документа - для отчета комитенту
		Движение.СуммаВыручки = КоэффициентСторно*Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);
		// Валюты и курсы - для пересчета
		Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;
		Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;
		Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;
	ИначеЕсли СтрокаДокумента.ОтражатьВБухгалтерскомУчете Или СтрокаДокумента.ОтражатьВНалоговомУчете тогда
		// Сумма выручки и сумма НДС  - для учета НДС
		Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);
		Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);
		Движение.ВалютнаяСуммаЗадолженностиБУ   = Окр(СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ*КоэффПоступления, 2);
				
		// Уменьшим сумму в исх. строке
		СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;
		СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;
		СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ - Движение.ВалютнаяСуммаЗадолженностиБУ;
	КонецЕсли;
	
	СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;
	
	КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
	
	Строка.Количество = Строка.Количество - ПогашаемоеКоличество;
	Строка.Стоимость  = Строка.Стоимость  - ПогашаемаяСтоимость;
	
	// Номер строки, по которой списана партия
	// Используется при возврате товаров от покупателя, ордерной схеме поступления,
	// механизмом корректировки стоимости списания 
	Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;
	
	// Списание на себестоимость продаж (сторно)
	Если ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж" Тогда
		
		Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
			СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьСвязанныеСоСписаниемДвижения(СтрокаДокумента, СтруктураПараметров, Движение, КоэффСписания, КоэффПоступления);
	
	СписаниеПринятыхНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Движение, ИмяРегистраПартии);
	
Конецпроцедуры//ВыполнитьДвиженияВозврата

Процедура СписаниеПринятыхНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Движение, ИмяРегистраПартии)

	// Спишем партии, находящиеся на ответственном хранении
	Если СтрокаДокумента.ОтражатьВУправленческомУчете тогда
		
		СтрУчет = "Управленческий";
		
	Иначе
		Возврат;
		
	КонецЕсли; 
	
	ТаблицаПартийПринятыхНаОтветственноеХранение = Неопределено;
	
	Если СтруктураПараметров.Свойство("ТаблицаПартийПринятыхНаОтветственноеХранение"+СтрУчет,ТаблицаПартийПринятыхНаОтветственноеХранение) Тогда
		
		СтруктураИзмерений = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Заказ, Качество");
		ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);
		СтруктураИзмерений.Вставить("СтатусПартии");
		Если Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
			СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
		Иначе
			СтруктураИзмерений.СтатусПартии = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
		КонецЕсли;
		
		МассивСтрок = ТаблицаПартийПринятыхНаОтветственноеХранение.НайтиСтроки(СтруктураИзмерений);
		
		КоличествоОсталосьПогасить = Движение.Количество;
		Для Каждого Строка Из МассивСтрок Цикл
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество <=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);

			ЗаполнитьЗначенияСвойств(Движение,Строка);
			
			Движение.Период 		= СтрокаДокумента.Период;
			Движение.Регистратор 	= СтрокаДокумента.Регистратор;
			Движение.Активность 	= Истина;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			
			Движение.Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
			Движение.Стоимость	= Окр(Строка.Стоимость  * КоэффСписания,2,1);
			
		КонецЦикла;

	КонецЕсли; 

КонецПроцедуры // СписаниеПринятыхНаОтветственноеХраниние()

// Поступление товаров по возврату от покупателя
//
Процедура ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров)
	
	ДокументПартии = СтрокаДокумента.ДокументПартии;
	
	// Возврат без указания документа партии обрабатывается в модуле документа
	Если НЕ ЗначениеЗаполнено(ДокументПартии) Тогда
		Возврат;
	КонецЕсли;

	ИмяРегистраПартии = Неопределено;
	СтрУчет			  = Неопределено;
	ВестиПУПоСкладам  = Неопределено;
	НаборОснование	  = Неопределено;
	
	ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование);
	
	ТаблицаЗаписейОснования = ПолучитьТаблицуЗаписейОснованияВозврата (СтрокаДокумента,
																	  СтруктураПараметров,
																	  ДокументПартии,
																	  НаборОснование,
																	  СтрУчет,
																	  ИмяРегистраПартии);
	
	НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");
			
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если КоличествоОсталосьПогасить <=0 Тогда
			Прервать;
		КонецЕсли;
			
		Если Строка.Количество <=0 Тогда
			Продолжить;
		КонецЕсли;
			
		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
		
		ВыполнитьДвиженияВозврата(СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
									ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания);
			
	КонецЦикла;


	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
		+ СтруктураПараметров.СтрокаСообщенияНеНайдено + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
		+ СтруктураПараметров.СтрокаСообщенияДокументПартии + ДокументПартии);
			
		СтруктураПараметров.Вставить("Отказ", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Снятие резерва по заказам покупателей при закрытии заказов
//
Процедура СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров)
	
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";
		ВестиПУПоСкладам =УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров);
		СтрУчет="Управленческий";
		
	КонецЕсли;
	
	// Партии для данного учета
	ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистраПартии];
	ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраПартии + "ТаблицаОстатков"];
	СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");
	СтруктураИзмерений = СтруктураПараметров[ИмяРегистраПартии + "СтруктураИзмерений"];
	
	Если СтрокаДереваПартий <> Неопределено Тогда
		
		Для Каждого СтрокаПартииРаспределения ИЗ СтрокаДереваПартий.Строки Цикл
			
			СтрокаПартии = ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий);
			
			// 1. Списание
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,СтрокаПартии);
			
			// Свойства
			Движение.Период			= СтрокаДокумента.Период;
			Движение.Регистратор	= СтрокаДокумента.Регистратор;
			Движение.Активность		= Истина;
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
			
			// Реквизиты
			// Специфические разрезы для разных видов учета
			Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				Движение.Подразделение = СтрокаДокумента.Подразделение;
			КонецЕсли;
			
			Движение.КодОперации	= СтрокаДокумента.КодОперацииПартииТоваров;
			
			СтрокаПартии.Количество = 0;
			СтрокаПартии.Стоимость  = 0;
			
			Строка   = Движение;
			
			// 2. Поступление
			Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);
			
			ЗаполнитьЗначенияСвойств(Движение,Строка);
			
			// Свойства
			Движение.ВидДвижения  = ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.Заказ		  = Неопределено;
			
			Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистраПартии];
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СнятиеРезервовПоЗаказамПокупателей()

Функция ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров) Экспорт

	ТаблицыСписанияРасходнымОрдером = Неопределено;
	ТаблицаСписанияРасходнымОрдером = Неопределено;
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		СтрУчет = "Упр";
	Иначе
		// Строка документа не отражается ни в одном учете
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицаСписанияРасходнымОрдером = ТаблицыСписанияРасходнымОрдером.Получить(СтрУчет);
		Если ТаблицаСписанияРасходнымОрдером <> Неопределено тогда
			Возврат ТаблицаСписанияРасходнымОрдером;
		КонецЕсли;
	КонецЕсли;
	
	// Сначала получим таблицу исходного документа
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером1"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	Регистратор=&Регистратор
	|";
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВУправленческомУчете)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);
	
	ТаблицаСписанияРасходнымОрдером=Запрос.Выполнить().Выгрузить();
	
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	
	СтруктураПараметров.Вставить("ОсновнойДокумент",СтрокаДокумента.ОсновнойДокумент);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером2"" КАК QuieryId,
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	СУММА(Строки.Количество) КАК Количество,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|ГДЕ
	|	Строки.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Строки.ОсновнойДокумент = &ОсновнойДокумент
	|	И Строки.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад";
	
	// Отборы по видам учета
	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВУправленческомУчете) И ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", ТаблицаСписанияРасходнымОрдером[0].Период);
	Запрос.УстановитьПараметр("ДатаКон", СтрокаДокумента.Период);
	Запрос.УстановитьПараметр("ОсновнойДокумент", СтрокаДокумента.ОсновнойДокумент);
	Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);
	
	ТаблицаОрдеров = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.Период, "Период");
	
	// Пересчет сумм, уже списанных другими расходными ордерами
	Для каждого СтрокаСписания Из ТаблицаСписанияРасходнымОрдером Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, Склад",
										СтрокаСписания.Номенклатура,
										СтрокаСписания.СерияНоменклатуры,
										СтрокаСписания.ХарактеристикаНоменклатуры,
										СтрокаСписания.Склад
										);
		МассивСтрокОрдеров = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
			
		// Серия может быть указана в документе реализации и в ордере или только в ордере
		Если СтрокаДокумента.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
				
			СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
			МассивСтрокСПустойСерией = ТаблицаОрдеров.НайтиСтроки(СтруктураПоиска);
				
			Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
				
				МассивСтрокОрдеров.Добавить(Элемент);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого СтрокаОрдера Из МассивСтрокОрдеров Цикл
			
			Если СтрокаОрдера.Количество <=0  Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			// В накладной и в ордере один и тот же товар может быть в разных строках
			Если СтрокаСписания.Количество > СтрокаОрдера.Количество Тогда
				// полностью списали количество по строке ордера
				КоэффСписания = СтрокаОрдера.Количество/СтрокаСписания.Количество;
				КоэффСписанияОрдера = 1;
			Иначе
				// полностью списали количество по строке накладной
				КоэффСписанияОрдера = СтрокаСписания.Количество/СтрокаОрдера.Количество;
				КоэффСписания = 1;
			КонецЕсли;
			
			КоличествоСписанияОрдера = Окр(КоэффСписанияОрдера * СтрокаОрдера.Количество,3);

			СтрокаСписания.Количество = СтрокаСписания.Количество - КоличествоСписанияОрдера;
			СтрокаОрдера.Количество   = СтрокаОрдера.Количество - КоличествоСписанияОрдера;
	
			СтрокаСписания.СуммаНДС                 = СтрокаСписания.СуммаНДС -Окр(СтрокаСписания.СуммаНДС *КоэффСписания,2);
			СтрокаСписания.СуммаЗадолженностиБУ     = СтрокаСписания.СуммаЗадолженностиБУ - Окр(КоэффСписания * СтрокаСписания.СуммаЗадолженностиБУ, 2);
			СтрокаСписания.СуммаЗадолженности       = СтрокаСписания.СуммаЗадолженности -Окр(СтрокаСписания.СуммаЗадолженности *КоэффСписания,2);
			СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ = СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ -Окр(СтрокаСписания.КорВалютнаяСуммаЗадолженностиБУ*КоэффСписания,2);
			СтрокаСписания.СтоимостьПоступление   = СтрокаСписания.СтоимостьПоступление - Окр(КоэффСписания * СтрокаСписания.СтоимостьПоступление, 2);
			СтрокаСписания.СтоимостьПоступлениеБУ = СтрокаСписания.СтоимостьПоступлениеБУ - Окр(КоэффСписания * СтрокаСписания.СтоимостьПоступлениеБУ, 2);
		
		КонецЦикла;
	
	КонецЦикла;
	
	Если НЕ СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером) тогда
		ТаблицыСписанияРасходнымОрдером = Новый Соответствие;
	КонецЕсли;
	
	ТаблицыСписанияРасходнымОрдером.Вставить(СтрУчет,ТаблицаСписанияРасходнымОрдером);
	
	СтруктураПараметров.Вставить("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером);
	
	Возврат ТаблицаСписанияРасходнымОрдером;

КонецФункции // ПолучитьТаблицуСписанияРасходнымОрдером()

// Списание партий ордерного склада
// Обслуживаются документы:
// 1.Расходный ордер на товары
// 2 Приходный ордер на товары с видом операции "перемещение"
// 3 Поступление товаров и услуг в НТТ с видом операции "перемещение"
// Параметры СтрокаДокумента - 
// СтруктураПараметров - структура, хранящая основные переменные
Процедура СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров)
	
	// Отложенная отгрузка отражается только в бухгалтерском и управленческом учете
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары")И
	   НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером И
	   НЕ (СтрокаДокумента.ОтражатьВУправленческомУчете ИЛИ СтрокаДокумента.ОтражатьВБухгалтерскомУчете) Тогда
	   
	   Возврат;
	КонецЕсли;
	
	ТаблицаСписанияРасходнымОрдером = ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров);
	
	// Если записей по исх. документу нет
	Если ТаблицаСписанияРасходнымОрдером = Неопределено Или ТаблицаСписанияРасходнымОрдером.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры",
									СтрокаДокумента.Номенклатура,
									СтрокаДокумента.СерияНоменклатуры,
									СтрокаДокумента.ХарактеристикаНоменклатуры
									);
									
	// В расходном ордере склад должен совпадать со складом в табличной части основного документа
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда

		СтруктураПоиска.Вставить("Склад", СтрокаДокумента.Склад);

	КонецЕсли;

	МассивСтрокСписания = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
	
	// Серия может быть указана в документе реализации или в ордере
	Если СтрокаДокумента.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)Тогда
		
		СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
		МассивСтрокСПустойСерией = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Элемент Из МассивСтрокСПустойСерией Цикл
		
			МассивСтрокСписания.Добавить(Элемент);
		
		КонецЦикла;
	
	КонецЕсли;
	
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
	
	Для Каждого Строка Из МассивСтрокСписания Цикл
		
		Если КоличествоОсталосьПогасить <=0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Строка.Количество <=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;

		// Заполнение параметров
		// Список свойств, не заполняющихся в строке ордера по строке реализации
		СписокИсключаемыхСвойств = "СерияНоменклатуры, Количество, ОсновнойДокумент, ВидТабличнойЧасти,
									  |НомерСтрокиДокумента, Период, Регистратор";

		Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары") тогда
			СписокИсключаемыхСвойств = СписокИсключаемыхСвойств +",Склад";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Строка,,СписокИсключаемыхСвойств);
		
		ПогашаемоеКоличество = Окр(КоэффСписания * Строка.Количество, 3);
		
		СтрокаДокумента.СуммаНДС               = Окр(КоэффСписания * Строка.СуммаНДС, 2);
		СтрокаДокумента.СуммаЗадолженности     = Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		СтрокаДокумента.СуммаЗадолженностиБУ     = Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ = Окр(КоэффСписания * Строка.КорВалютнаяСуммаЗадолженностиБУ, 2);
		СтрокаДокумента.СтоимостьПоступление   = Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
		СтрокаДокумента.СтоимостьПоступлениеБУ = Окр(КоэффСписания * Строка.СтоимостьПоступлениеБУ, 2);
		СтрокаДокумента.Количество = ПогашаемоеКоличество;
		
		Если НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
		   И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту) Тогда
			
			СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
			
			Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
				
				Для СчетчикСтатуса =1 По 4 Цикл
					Если СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
						СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
					Иначе
						СтрокаДокумента["ДопустимыйСтатус"+СчетчикСтатуса] = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
					КонецЕсли; 
				КонецЦикла; 
				
			КонецЕсли; 
		КонецЕсли; 
		
		СписаниеПартий(СтрокаДокумента, СтруктураПараметров, "НаСкладах");
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;
		
		Строка.Количество             = Строка.Количество - ПогашаемоеКоличество;
		Строка.СуммаНДС               = Строка.СуммаНДС - Окр(КоэффСписания * Строка.СуммаНДС, 2);
		Строка.СуммаЗадолженности     = Строка.СуммаЗадолженности - Окр(КоэффСписания * Строка.СуммаЗадолженности, 2);
		Строка.СуммаЗадолженностиБУ   = Строка.СуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.СуммаЗадолженностиБУ, 2);
		
		Строка.КорВалютнаяСуммаЗадолженностиБУ = Строка.КорВалютнаяСуммаЗадолженностиБУ - Окр(КоэффСписания * Строка.КорВалютнаяСуммаЗадолженностиБУ, 2);
		Строка.СтоимостьПоступление   = Строка.СтоимостьПоступление - Окр(КоэффСписания * Строка.СтоимостьПоступление, 2);
		Строка.СтоимостьПоступлениеБУ = Строка.СтоимостьПоступлениеБУ - Окр(КоэффСписания * Строка.СтоимостьПоступлениеБУ, 2);
		
	КонецЦикла;
	
	// Товара не хватило
	Если (КоличествоОсталосьПогасить > 0) Тогда
		СтрУчет = "Упр";
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + Символы.ПС
		+ "Не найдено в документе списания "+ СтрокаДокумента.ОсновнойДокумент+ " "+ КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, ""));
			
		СтруктураПараметров.Вставить("Отказ", Истина);
		
	КонецЕсли;
	
	// Теперь отметим все выполненные движения как принадлежащие документу реализации:
	СтруктураРеквизитовДокумента = Новый Структура("Дата");
	ПолучитьРеквизитыОбъекта(СтрокаДокумента.ОсновнойДокумент, СтруктураРеквизитовДокумента);
		
	Для Каждого Элемент Из СтруктураПараметров Цикл
				
		// В каждой таблице движений заполним реквизиты ДокументДвижения и ДокументДвиженияПериод
		Если Лев(Элемент.Ключ,15) = "ТаблицаДвижений" Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
				Если Элемент.Значение.Колонки.Найти("ДокументДвижения")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтрокаДокумента.ОсновнойДокумент, "ДокументДвижения");
				КонецЕсли;
				Если Элемент.Значение.Колонки.Найти("ДокументДвиженияПериод")<>Неопределено Тогда
					Элемент.Значение.ЗаполнитьЗначения(СтруктураРеквизитовДокумента.Дата, "ДокументДвиженияПериод");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры // СписаниеПартийОрдерныйСклад()

// НДС

// Процедура производит списания по регистру "НДС партии товаров".
//
Процедура СписаниеНДСПартииТоваров(ДатаНач, ДатаКон, ПроводитьДокументыВыбранногоПериода) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписанныеТовары.Регистратор КАК Регистратор,
	|	СписанныеТовары.Период
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|ГДЕ
	|	СписанныеТовары.ОтражатьВБухгалтерскомУчете
	|	И (НЕ СписанныеТовары.Регистратор ССЫЛКА Документ.КорректировкаКачестваТоваров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписанныеТовары.Период,
	|	СписанныеТовары.Регистратор.МоментВремени";
	
	Если ПроводитьДокументыВыбранногоПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписанныеТовары.ОтражатьВБухгалтерскомУчете","СписанныеТовары.ОтражатьВБухгалтерскомУчете
		| И СписанныеТовары.Период МЕЖДУ &ДатаНач И &ДатаКон");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНач",       ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",       КонецДня(ДатаКон));
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	УчетНДС.ДвижениеНДС(ТаблицаДокументов);
	
КонецПроцедуры // СписаниеНДСПартииТоваров()

// Общие

// Возвращает таблицу документов
//
// Параметры
//ДокументСписания 
//Упр 
//Бух 
//Нал 
// Возвращаемое значение:
//   Таблица строк документа
//
Функция ПолучитьТаблицуСтрокДокументов(ДокументСписания=Неопределено, Упр = Истина, Бух = Истина, Нал = Истина) Экспорт
	
	// Общая часть запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);
		
	Запрос.УстановитьПараметр("ВозвратОтКомиссионера", Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);
	Запрос.УстановитьПараметр("РеализацияКомиссия", Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия);
	
	Запрос.УстановитьПараметр("Упр", Упр);
	Запрос.УстановитьПараметр("Бух", Бух);
	Запрос.УстановитьПараметр("Нал", Нал);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";
	
	Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		Запрос.Текст = 	Запрос.Текст + ",
		|	"+ Ресурс.Имя;
		
	КонецЦикла; 
	
	Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	НомерСтрокиДокумента,
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|	КОГДА
	|	КодОперацииПартииТоваров = &ВозвратОтКомиссионера
	|	ИЛИ КодОперацииПартииТоваров = &РеализацияКомиссия
	|	ТОГДА ""Переданные""
	|	ИНАЧЕ
	|	""НаСкладах""
	|	КОНЕЦ КАК ИсточникПоКодуОперации
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки";
	
	Если ДокументСписания <> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст+ "
		|ГДЕ
		|	Строки.Регистратор = &ДокументСписания";
	
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВУправленческомУчете", "(ОтражатьВУправленческомУчете И &Упр) КАК ОтражатьВУправленческомУчете");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "(ОтражатьВБухгалтерскомУчете И &Бух) КАК ОтражатьВБухгалтерскомУчете");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВНалоговомУчете", "(ОтражатьВНалоговомУчете И &Нал) КАК ОтражатьВНалоговомУчете");
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();

КонецФункции//ПолучитьТаблицуСтрокДокументов

// Добавление остатков по партионному учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация)
	
	ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон);
	
КонецПроцедуры // ПолучитьОстатки()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Дополнительные движения по результату списания партий
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания)
	
	ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания);
	
	ВыполнитьДопДвиженияПоРезультатуСписанияРегл(СтруктураПараметров, ТаблицаСписания);
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписания()

// Запускает формирование движений по результату списания партий в упр учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		
		// Запись данных о реализованных товаррах
		ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияУпр()

// Запускает формирование движений по результату списания партий в регл учете
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьДопДвиженияПоРезультатуСписанияРегл(СтруктураПараметров, ТаблицаСписания)

	Если СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете Тогда

		Если ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		    Возврат;
		КонецЕсли;

		УчетНДС.ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания);

	КонецЕсли;

КонецПроцедуры // ВыполнитьДопДвиженияПоРезультатуСписанияРегл()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// СтруктураПараметров - основная переменная модуля, передается в бОльшую часть процедур и функций,
// содержит бОльшую часть параметров, нужных для проведения по партиям
Процедура ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("СпособОценкиМПЗУпр", Строка(УчетнаяПолитика("СпособОценкиМПЗ", "Упр", СтруктураПараметров.Организация, СтруктураПараметров)));		
		СтруктураПараметров.Вставить("СтратегияСтатусПартииУпр",  УчетнаяПолитика("СтратегияСписанияПоСтатусам", "Упр", СтруктураПараметров.Организация, СтруктураПараметров));
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамУпр", УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров.Организация, СтруктураПараметров));
	КонецЕсли;
	
	// От значения этой константы зависит будет ли партия списана на забалансовый счет документом списания
	// при списании по ордеру
	СтруктураПараметров.Вставить("СписыватьПартииРасходнымОрдером",Константы.СписыватьПартииРасходнымОрдером.Получить());
	СтруктураПараметров.Вставить("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании",Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить());

КонецПроцедуры//ДополнитьСтруктуруПараметров(СтруктураПараметров)

//
// Параметры 
// ТаблицаСписания - таблица значений полученная из регистра Списанные товары
// МоментКон	   - момент времени проведения документа
// Останавливаться - останавливать проведение по партиям на первом документе, который не провелся по партиям
// ПроведениеОстановлено - признак того что проведение остановлено для обработки проведение по партиям
Процедура ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, МоментКон, Останавливаться = Ложь, ПроведениеОстановлено = Ложь )
	
	Организация = ТаблицаСписания[0].Организация;
	СтруктураПараметров.Вставить("Организация", Организация);
	
	ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания);
	
	СтруктураПараметров.Вставить("КодыОпераций",Перечисления.КодыОперацийПартииТоваров);
	
	Если ЗначениеЗаполнено(ТаблицаСписания[0].ОсновнойДокумент) Тогда
		
		СтруктураПараметров.Вставить("ОсновнойДокумент",ТаблицаСписания[0].ОсновнойДокумент);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
	СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете")<>Неопределено);
	
	// Подготовка наборов записей
	ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина);
	
	СтруктураПараметров.Вставить("ТипЗначенияРегистратора", ТипЗнч(ТаблицаСписания[0].Регистратор));
	
	// Для закрытия заказов покупателей дерево остатков партий должно получаться особым способом
	Если СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда
		СтруктураПараметров.Вставить("ЗакрытиеЗаказовПокупателей");
	КонецЕсли;
	
	// В некоторых случаях получать остатки не нужно
	ТребуетсяПолучитьОстатки = Истина;
	
	// Ордерная схема поступления
	Если СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.АвансовыйОтчет")
		Тогда
		
		ТребуетсяПолучитьОстатки = Ложь;
		
	// Возврат товаров от покупателя (возврат от комиссионера обрабатывается основным алгоритмом списания
	// фактически являясь частным случаем перемещения товаров)
	ИначеЕсли СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		Тогда
		
		ТребуетсяПолучитьОстатки = НЕ ТаблицаСписания[0].КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя;
		//СтруктураПараметров.Вставить("Покупатель",ТаблицаСписания[0].Покупатель);
	//ИначеЕсли СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	//	ИЛИ СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.КорректировкаРеализации")
	//	Тогда
	//	СтруктураПараметров.Вставить("Покупатель",ТаблицаСписания[0].Покупатель);
	КонецЕсли;

	Если ТребуетсяПолучитьОстатки Тогда
	
		// Добавление в структуру остатков по партионному учету
		ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);
	
	КонецЕсли;
	
	ОбрабатываемыйДокумент = Неопределено;
	
	СтруктураВидовУчета = Новый Структура("ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете");
	
	СтрокаДокумента = Новый Структура;
	Для Каждого Колонка ИЗ ТаблицаСписания.Колонки Цикл
		СтрокаДокумента.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыСписания Из ТаблицаСписания Цикл
		
		ОбрабатываемыйДокумент = СтрокаТаблицыСписания.Регистратор;
		
		// Строка не обрабатывается при списании
		Если НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером И 
			( СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаТаблицыСписания.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту)
		   Тогда
			// Для документа "Реализация товаров и услуг" реализована возможность списывать партии при 
			// проведении документа, даже если вид передачи = "по ордеру"
			// В этом случае партия списывается за баланс и окончательное списание осуществляется ордером
			НеСписывать = Ложь;
		Иначе
			НеСписывать = СтрокаТаблицыСписания.НеСписывать;
		КонецЕсли;
		
		Если НеСписывать Тогда
			Продолжить;
		КонецЕсли;
		
		// Сумма НДС и сумма задолженности распределяются на строки списанных партий
		// Однако они впоследствии нужны подсистеме НДС
		СуммаНДС = СтрокаТаблицыСписания.СуммаНДС;
		СуммаЗадолженностиБУ = СтрокаТаблицыСписания.СуммаЗадолженностиБУ;
		
		// Номер строки, по которой списана партия
		// Используется при возврате товаров от покупателя, ордерной схеме поступления,
		// механизмом корректировки стоимости списания 
		СтруктураПараметров.Вставить("НомерСтрокиСписанныхТоваров",СтрокаТаблицыСписания.НомерСтроки);
		
		ЗаполнитьЗначенияСвойств(СтруктураВидовУчета, СтрокаТаблицыСписания);
		
		//Для Каждого КлючИЗначение ИЗ СтруктураВидовУчета Цикл
		//	Если КлючИЗначение.Значение Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицыСписания);
				
				//Шаблон = Новый Структура("ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете", Ложь, Ложь, Ложь);
				//Шаблон[КлючИЗначение.Ключ] = ИСТИНА;
				//ЗаполнитьЗначенияСвойств(СтрокаДокумента, Шаблон);
				
				Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете
				   И НЕ СтруктураПараметров.Свойство("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации")
				   И (СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Реализация
				   Или СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.РеализацияКомиссия) тогда
					
					СтруктураПараметров.Вставить("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации");
					
				КонецЕсли;
				
				// Специфические случаи списания :
				
				// 1. Возврат от покупателя
				Если СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтПокупателя Тогда
					
					ПоступлениеВозвратОтПокупателя(СтрокаДокумента, СтруктураПараметров);
					
					// 2. Поступление товаров по ордеру: корректировка предыдущих списаний
				ИначеЕсли  ЗначениеЗаполнено(СтрокаДокумента.ПоступлениеПриходныйОрдер) Тогда
					
					Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
						ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметров);
					КонецЕсли;
					
					// 3. Закрытие заказов
				ИначеЕсли ТипЗнч(СтрокаДокумента.Регистратор)=Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей") Тогда
					
					СнятиеРезервовПоЗаказамПокупателей(СтрокаДокумента, СтруктураПараметров);
					
					// 4. Документ, в котором указываются данные, которых нет в документе списания:
					// - Списание партий по расходному ордеру
					// - Перемещение партий по приходному ордеру
				ИначеЕсли  ЗначениеЗаполнено(СтрокаДокумента.ОсновнойДокумент) Тогда
					
					СписаниеПартийОрдерныйСклад(СтрокаДокумента, СтруктураПараметров);
					
					// Общий случай списания
				Иначе
					
					// Сначала обрабатывается списание
					СписаниеПартий(СтрокаДокумента, СтруктураПараметров, СтрокаДокумента.ИсточникПоКодуОперации);
					
				КонецЕсли;
				
			//КонецЕсли;
		//КонецЦикла;
		
		// Восстановим сумму НДС и сумму задолженности 
		СтрокаДокумента.СуммаНДС = СуммаНДС;
		СтрокаДокумента.СуммаЗадолженностиБУ = СуммаЗадолженностиБУ;
		
	КонецЦикла; 
	
	Если СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером") тогда
		СтруктураПараметров.Удалить("ТаблицыСписанияРасходнымОрдером");
	КонецЕсли;
	
	Если Не ОбрабатываемыйДокумент = Неопределено Тогда
		
		// Дополнительные движения по результату списания документом определенных партий
		ВыполнитьДопДвиженияПоРезультатуСписания(СтруктураПараметров, ТаблицаСписания);
		
		// Если задан параметр останавливаться при нехватке партий и партий не хватило - прекратим проведение
		
		Если Останавливаться И СтруктураПараметров.Отказ тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Проведение по партиям остановлено ",СтруктураПараметров.Отказ);
			ПроведениеОстановлено = Истина;
			Возврат;
			
		КонецЕсли;
		
		ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);
		
		#Если Клиент Тогда
			Состояние("Проведен документ " + ОбрабатываемыйДокумент);
		#КонецЕсли
	КонецЕсли;
	
	
КонецПроцедуры//ВыполнитьСписание()

// Сдвиг ГП партионного учета назад, используемый в неоперативных документах.
//
Процедура СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация = Неопределено) Экспорт
	
	МассивУчетов = Новый Массив;
	МассивУчетов.Добавить("Упр");
	
	Для каждого Учет Из МассивУчетов Цикл
		
		ИмяПоследовательности = "ПартионныйУчет";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартионныйУчетГраницы.МоментВремени
		|ИЗ
		|	Последовательность."+ИмяПоследовательности+".Границы КАК ПартионныйУчетГраницы
		| ";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МоментВремениДокумента = Новый МоментВремени(Ссылка.Дата, Ссылка);
		
		Если Выборка.Следующий() Тогда
			
			// Граница переносится назад, если документ проводится задним числом
			Если МоментВремениДокумента.Сравнить(Выборка.МоментВремени) = -1 Тогда
				
				Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремениДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры//СдвигГраницыПоследовательностиПартионногоУчетаНазад

// Устанавливает ГП на последний документ в последней секунде месяца
// (при необходимости)
// Параметры 
// Дата - Последняя секунда месяца
// Учет - Строка вида учета
// Организация 
// Вызывается из модулей объектов документов "Коректировка стоимости списания",
// "Расчет себестоимости выпуска"
Процедура РегламентнаяУстановкаГП(Дата, Учет, Организация = Неопределено) Экспорт
	
	// При записи набора записей регламентного документа граница последовательности 
	// может быть смещена назад
	// В последней секунде месяца кроме регламентных корректировки стоимости списания и расчета 
	// себестоимости выпуска могут находиться движения по регистрам партий и других документов
	// и их моменты времени могут быть больше моментов времени регламентных документов
		
	// Сдвиг ГП вперед нужен только если ГП находится в последней секунде месяца и не стоит на
	// последнем документе в этой секунде
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартионныйУчетГраницы.МоментВремени
	               |ИЗ
	               |	Последовательность.ПартионныйУчет.Границы КАК ПартионныйУчетГраницы
	               |ГДЕ
	               |	ПартионныйУчетГраницы.Период >= &ПериодНач
	               |	И ПартионныйУчетГраницы.Период < &ПериодКон";
	
	Запрос.УстановитьПараметр("ПериодНач", Дата);
	Запрос.УстановитьПараметр("ПериодКон", Дата+1);
	
	ИмяПоследовательности = "ПартионныйУчет";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МоментВремениГП = Выборка.МоментВремени;
	
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
	              |	ПартионныйУчет.МоментВремени КАК МоментВремени
	              |ИЗ
	              |	Последовательность.ПартионныйУчет КАК ПартионныйУчет
	              |ГДЕ
	              |	ПартионныйУчет.Период < &ПериодКон
	              |	И ПартионныйУчет.Период >= &ПериодНач
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	МоментВремени УБЫВ";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МоментВремениПоследнегоДокумента = Выборка.МоментВремени;
	
	Если МоментВремениПоследнегоДокумента.Сравнить(МоментВремениГП) = 1 Тогда
		
		Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремениПоследнегоДокумента);
	
	КонецЕсли;

КонецПроцедуры//РегламентнаяУстановкаГП


// 
//
Функция ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Учет, Отбор = Неопределено) Экспорт
	
	// Границу последовательности можно сдвигать вперед только если между границей
	// и документом нет других документов в последовательности
	// Исключения - регламентные документы
	// Регламентные документы могут располагаться в последней секунде месяца
	// одновременно с другими документами и иметь момент времени меньше,
	// чем документы списания, находящиеся в той же секунде
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Последовательность.Регистратор
	               |ИЗ
	               |	Последовательность.ПартионныйУчет КАК Последовательность
	               |ГДЕ
	               |	Последовательность.МоментВремени > &Граница
	               |	И Последовательность.МоментВремени < &Документ
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров)";
	
	ГраницаМоментВремени = Последовательности.ПартионныйУчет.ПолучитьГраницу();

	Запрос.УстановитьПараметр("Граница", ГраницаМоментВремени);
	Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПОСТУПЛЕНИЯ НЕОТФАКТУРОВАННЫХ ТОВАРОВ

Процедура ПоступлениеТоваровПоОрдеруУпр(СтрокаДокумента, СтруктураПараметров)
	
	Если НЕ СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	КодыОпераций = Перечисления.КодыОперацийПартииТоваров;
	
	Ссылка = СтрокаДокумента.Регистратор;

	ПриходныйОрдер = СтрокаДокумента.ПоступлениеПриходныйОрдер;
	
	Если Не ТипЗнч(ПриходныйОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДатаОрдера = Новый Запрос("ВЫБРАТЬ Дата ИЗ Документ.ПриходныйОрдерНаТовары ГДЕ Ссылка = &Ссылка");
	ЗапросДатаОрдера.УстановитьПараметр("Ссылка", ПриходныйОрдер);
	Выборка = ЗапросДатаОрдера.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Дата начала обработки
	ДатаНач = Выборка.Дата;
	
	// Дата конца обработки
	ДатаКон = СтрокаДокумента.Период;
	
	// Партии, поступившие по накладной
	ЗапросПартии = Новый Запрос;
	
	ЗапросПартии.УстановитьПараметр("Регистратор", Ссылка);
	ЗапросПартии.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	ЗапросПартии.УстановитьПараметр("ПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК КоличествоДляВозврата,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК СтоимостьДляВозврата,
	|	ПартииТоваровНаСкладах.Качество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
	|	И ПартииТоваровНаСкладах.СтатусПартии <> &ПоОрдеру
	|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Дата";
	
	ТабПартий = ЗапросПартии.Выполнить().Выгрузить();
	
	МассивНоменклатуры = ТабПартий.ВыгрузитьКолонку("Номенклатура");
	
	МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	// Пустая таблица
	ТабПартийПеред = Новый ТаблицаЗначений;
	ТабПартийПеред.Колонки.Добавить("Номенклатура");
	ТабПартийПеред.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТабПартийПеред.Колонки.Добавить("ДокументОприходования");
	ТабПартийПеред.Колонки.Добавить("ДокументОприходованияДата");
	ТабПартийПеред.Колонки.Добавить("ДоговорКонтрагента");
	ТабПартийПеред.Колонки.Добавить("ДокументПередачи");
	ТабПартийПеред.Колонки.Добавить("СтатусПартии");
	ТабПартийПеред.Колонки.Добавить("СтатусПередачи");
	ТабПартийПеред.Колонки.Добавить("Количество");
	ТабПартийПеред.Колонки.Добавить("Стоимость");
	
	
	// Запрос для определения количества строк в регистре партий:
	
	Если СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = 0 Тогда
	
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(ПартииТоваровНаСкладах.НомерСтроки) КАК НомерСтроки
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = Выборка.НомерСтроки;
		КонецЕсли;
	КонецЕсли;	
	
	// Запрос по списанию партий ордеров:
	
	Запрос = Новый Запрос;
	
	МассивРеализация = Новый Массив;
	МассивРеализация.Добавить(КодыОпераций.Реализация);
	МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);
	МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);
	МассивРеализация.Добавить(КодыОпераций.ВозвратОтПокупателяТекущийМесяц);
	Запрос.УстановитьПараметр("КодыСписаниеНаСебестоимость", МассивРеализация);
	
	МассивСписаниеНаПереданные = Новый Массив;
	МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаНаКомиссию);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаПереданные",МассивСписаниеНаПереданные);
	
	Запрос.УстановитьПараметр("КодыСписаниеНаЗатраты", КодыОпераций.СписаниеНаЗатраты);
	
	МассивПеремещениеСклад= Новый Массив;
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПеремещениеМеждуСкладами);
	МассивПеремещениеСклад.Добавить(КодыОпераций.ПереоценкаПринятыхНаКомиссию);
	МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаСерийИХарактеристик);
	МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаКачества);
	МассивПеремещениеСклад.Добавить(КодыОпераций.РезервированиеПодЗаказ);
	МассивПеремещениеСклад.Добавить(КодыОпераций.СнятиеРезерваПодЗаказ);
	
	Запрос.УстановитьПараметр("КодыПеремещениеСклад", МассивПеремещениеСклад);
	
	МассивСписаниеНаСклад = Новый Массив;
	МассивСписаниеНаСклад.Добавить(КодыОпераций.ВозвратОтКомиссионера);
	Запрос.УстановитьПараметр("КодыСписаниеНаСклад", МассивСписаниеНаСклад);
	
	Запрос.УстановитьПараметр("МассивДокументовОприходования", ПриходныйОрдер);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("КодОперацииСписаниеПоОрдеру", Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру);
	
	Запрос.УстановитьПараметр("КодКомплектация", КодыОпераций.Комплектация);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Период КАК Период,
	|	Источник.Регистратор КАК Регистратор,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	Источник.КодОперации,
	|	Переданные.СтатусПередачи,
	|	Переданные.ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации КАК КодОперацииПартииТоваровПереданные,
	|	НаСкладахПоступление.Склад КАК СкладПолучатель,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
	|	НаСкладахПоступление.СерияНоменклатуры КАК СерияНоменклатурыНовая,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL )
	|			ТОГДА НаСкладахПоступление.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	0 КАК СтоимостьПоступление,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество КАК КачествоНовое,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходованияНовый,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0) КАК КоличествоПоступление,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.НоменклатураКомплекта КАК НоменклатураКомплекта,
	|	СписанныеТовары.ВалютаДокумента КАК ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента КАК КурсДокумента,
	|	СписанныеТовары.КратностьДокумента КАК КратностьДокумента,
	|	СписанныеТовары.ХарактеристикаКомплекта КАК ХарактеристикаКомплекта,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ СписанныеТовары.Количество = 0
	|			ТОГДА СписанныеТовары.КоличествоКомплекта*Источник.Количество/СписанныеТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоКомплекта
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные КАК Переданные
	|		ПО Источник.Регистратор = Переданные.Регистратор
	|			И Источник.НомерКорСтроки = Переданные.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаПереданные))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаЗатраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладахПоступление
	|		ПО Источник.Регистратор = НаСкладахПоступление.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладахПоступление.НомерСтроки
	|			И (Источник.КодОперации В (&КодыПеремещениеСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ИсточникДляКомплектации
	|		ПО Источник.Регистратор = ИсточникДляКомплектации.Регистратор
	|			И Источник.НомерКорСтроки = ИсточникДляКомплектации.НомерСтроки
	|			И (Источник.КодОперации В (&КодКомплектация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И (Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки)
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации <> &КодОперацииСписаниеПоОрдеру
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	Переданные.СтатусПередачи,
	|	Переданные.ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации,
	|	НаСкладахПоступление.Склад,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры,
	|	НаСкладахПоступление.СерияНоменклатуры,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL )
	|			ТОГДА НаСкладахПоступление.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество,
	|	Источник.ДокументОприходования.Дата,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0),
	|	Источник.НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.НоменклатураКомплекта,
	|	СписанныеТовары.ХарактеристикаКомплекта,
	|	СписанныеТовары.ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента,
	|	СписанныеТовары.КратностьДокумента,	
	|	Источник.КодОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Номенклатура,
	|	НаСкладах.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	НаСкладах.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.ДокументОприходования.Дата,
	|	Источник.СтатусПартии,
	|	НаСкладах.Заказ,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	Источник.КодОперации,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,	
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	NULL,
	|	NULL,
	|	Себестоимость.Подразделение,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
	|		ПО Источник.Регистратор = НаСкладах.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладах.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Номенклатура,
	|	Источник.ДоговорКонтрагента,
	|	Источник.ДокументПередачи,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	НаСкладах.Склад,
	|	НаСкладах.СерияНоменклатуры,
	|	НаСкладах.Заказ,
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.КодОперации,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Себестоимость.Подразделение,
	|	Источник.ДокументОприходования.Дата,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
	|	И Источник.ДокументОприходования В (&МассивДокументовОприходования) И ");
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Пустые колонки для совместимости со структурой регистра СписанныеТовары
	ТаблицаЗапроса.Колонки.Добавить("Организация");
	ТаблицаЗапроса.Колонки.Добавить("Проект");
	ТаблицаЗапроса.Колонки.Добавить("СтатусПартииНовый");
	ТаблицаЗапроса.Колонки.Добавить("ВедениеУчетаПоПроектам",       Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВБухгалтерскомУчете",  Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ОтражатьВНалоговомУчете",      Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ВидТабличнойЧасти");
	ТаблицаЗапроса.Колонки.Добавить("ЗаказПартии");
	
	ТаблицаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");

	ТаблицаЗапроса.Колонки.Добавить("ИзменитьСерию", Новый ОписаниеТипов("Булево"));
	ТаблицаЗапроса.Колонки.Добавить("ИзменитьХарактеристику", Новый ОписаниеТипов("Булево"));
	
	Если ТаблицаЗапроса.Количество() = 0 тогда
		Возврат;
	КонецЕсли;

	// Таблицы остатков партий
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладах"+"Упр", ТабПартий);
	СтруктураПараметров.Вставить("ТаблицаПартииТоваровПереданные"+"Упр", ТабПартийПеред);
	
	НачНомерНаСкладах = 0;
	Если Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровНаСкладахУпр",НачНомерНаСкладах) тогда
		НачНомерНаСкладах = СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр;
		СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровНаСкладахУпр", НачНомерНаСкладах);
	КонецЕсли;
	
	НачНомерПереданные = 0;
	Если Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровПереданныеУпр",НачНомерПереданные) тогда
		НачНомерПереданные = СтруктураПараметров.ТекНомерСтрокиПартииТоваровПереданныеУпр;
		СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровПереданныеУпр", НачНомерПереданные);
	КонецЕсли;
	
	Для Каждого ВыборкаДвижений ИЗ ТаблицаЗапроса Цикл
	
		// Сторно списания по ордеру
		Если ВыборкаДвижений.СписаноИз = "НаСкладах" Тогда
			
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Заказ, Качество",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.СерияНоменклатуры,
			ВыборкаДвижений.Заказ,
			ВыборкаДвижений.Качество
			);
			Если УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров) Тогда
				СтруктураПоиска.Вставить("Склад",ВыборкаДвижений.Склад);
			КонецЕсли;
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровНаСкладах"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ВыборкаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц тогда
					
					Количество = Строка.КоличествоДляВозврата;
					Стоимость  = Строка.СтоимостьДляВозврата;

				Иначе

					Количество = Строка.Количество;
					Стоимость  = Строка.Стоимость;

				КонецЕсли;
				
				Если Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
		
				Если Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);

				ЗаполнитьЗначенияСвойств(Движение, ВыборкаДвижений);
				
				Движение.Период = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				
				НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат);
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "Переданные" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр[Движение.НомерКорСтроки -1- НачНомерПереданные];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
				// Новое движение
				Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение, ВыборкаДвижений);
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				Движение.Период       = СтрокаДокумента.Период;
				
				Если НЕ УчетнаяПолитика("ВестиПартионныйУчетПоСкладам", "Упр", СтрокаДокумента.Организация, СтруктураПараметров) Тогда
					Движение.Склад = Неопределено;
				КонецЕсли;				
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				Движение.СтатусПартии = Строка.СтатусПартии;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Если ВыборкаДвижений.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц тогда

					Строка.КоличествоДляВозврата = Строка.КоличествоДляВозврата - Движение.Количество;
					Строка.СтоимостьДляВозврата  = Строка.СтоимостьДляВозврата  - Движение.Стоимость;

				Иначе
					
					Строка.Количество = Строка.Количество - Движение.Количество;
					Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
					
				КонецЕсли;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("НаСкладах", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "Переданные" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр[Движение.НомерКорСтроки -1- НачНомерПереданные];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
					// Если движение привело к поступлению в партии товаров переданные - надо увеличить остаток с соответствующим статусом партии
					НоваяСтрокаПереданных = СтруктураПараметров["ТаблицаПартииТоваровПереданные"+"Упр"].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПереданных,ВыборкаДвижений);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПереданных,Движение);
				КонецЕсли;
			
			КонецЦикла;
			
		ИначеЕсли ВыборкаДвижений.СписаноИз = "Переданные" Тогда	
			
			СтруктураПоиска = Новый Структура(
			"Номенклатура, ХарактеристикаНоменклатуры, ДоговорКонтрагента, ДокументПередачи, СтатусПередачи",
			ВыборкаДвижений.Номенклатура,
			ВыборкаДвижений.ХарактеристикаНоменклатуры,
			ВыборкаДвижений.ДоговорКонтрагента,
			ВыборкаДвижений.ДокументПередачи,
			ВыборкаДвижений.СтатусПередачи,
			);
			
			СтруктураПоиска.Вставить("СтатусПередачи", ВыборкаДвижений.СтатусПередачи);
			
			НайденныеСтроки = СтруктураПараметров["ТаблицаПартииТоваровПереданные"+"Упр"].НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = ВыборкаДвижений.Количество;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
		
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				// Ресурсы 
				Количество	= Окр(Строка.Количество * КоэффСписания,3,1);
				Стоимость	= Окр(Строка.Стоимость  * КоэффСписания,2,1);
				
				// Сторно старого движения
				Движение              = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаДвижений);
				
				Движение.Период       = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.Количество   = -Количество;
				Движение.Стоимость    = 0;
				
				// Код операции партии товаров должен совпадать с кодом операции
				ВыборкаДвижений.КодОперацииПартииТоваров = ВыборкаДвижений.КодОперации;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				НаправлениеСписания = ПолучитьНаправлениеСписанияПоКодуОперации(ВыборкаДвижений.КодОперации, ВыборкаДвижений.СтатьяЗатрат);
				ВыполнитьКорДвижениеУпр("Переданные",НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "НаСкладах" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр[Движение.НомерКорСтроки -1- НачНомерНаСкладах];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
				// Новое движение
				Движение              = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+"Упр", СтруктураПараметров);
				
				ЗаполнитьЗначенияСвойств(Движение,ВыборкаДвижений);
				
				Движение.Период       = СтрокаДокумента.Период;
				Движение.ВидДвижения  = ВидДвиженияНакопления.Расход;
				
				// Сведения о документе списания
				Движение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
				Движение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				
				Движение.ДокументОприходования = Строка.ДокументОприходования;
				Движение.СтатусПартии  = Строка.СтатусПартии;
				
				Движение.Количество   = Количество;
				Движение.Стоимость    = Стоимость;
				
				// Уменьшение погашаемого количества
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Движение.Количество;
				
				Строка.Количество = Строка.Количество - Движение.Количество;
				Строка.Стоимость  = Строка.Стоимость  - Движение.Стоимость;
				
				// Аналогичную корректировку выполним для корреспондирующего движения
				ВыполнитьКорДвижениеУпр("Переданные", НаправлениеСписания, ВыборкаДвижений, СтруктураПараметров, Движение);
				
				// Заполним в КорДвижении дополнительные поля
				Если НаправлениеСписания = "НаСкладах" тогда
					КорДвижение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр[Движение.НомерКорСтроки -1- НачНомерНаСкладах];
					КорДвижение.ДокументДвижения        = ВыборкаДвижений.Регистратор;
					КорДвижение.ДокументДвиженияПериод  = ВыборкаДвижений.Период;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПоступлениеТоваровПоОрдеруУпр

// Процедура-вход для всех документов. Проводит переданный документ по учету партий товаров
//
// Параметры
//  ОбрабатываемыйДокумент - проводимый документ
//
Процедура ДвижениеПартийТоваров(ОбрабатываемыйДокумент, ТаблицаСписания = Неопределено,
								КоличествоСтрокВДокументе = 0, Упр = Истина,
								Бух = Истина, Нал = Истина,
								Останавливаться = Ложь, ПроведениеОстановлено = Ложь,
								ДокументМоментВремени = Неопределено, СписаниеВыполняетсяОбработкой = Ложь,
								СтруктураНаборовЗаписей = Неопределено) Экспорт
								
	
	// Если не переданы строки документа, выбираем из базы.
	Если ТаблицаСписания = Неопределено Тогда
		
		// Таблица строк документов списания
		ТаблицаСписания = ПолучитьТаблицуСтрокДокументов(ОбрабатываемыйДокумент, Упр, Бух, Нал);
	КонецЕсли;
	УчетНДС.ДополнитьСписанныеТоварыДаннымиПоКомиссии(ОбрабатываемыйДокумент, ТаблицаСписания);
	
	КоличествоСтрокВДокументе = ТаблицаСписания.Количество();
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураДата = Новый Структура();
	СтруктураДата.Вставить("Дата");
	СтруктураДата.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Если ТаблицаСписания.Колонки.Найти("Покупатель") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	
	ПолучитьРеквизитыОбъекта(ОбрабатываемыйДокумент, СтруктураДата);
	СтруктураПараметров.Вставить("Покупатель", СтруктураДата.Контрагент);
	
	Если ДокументМоментВремени = Неопределено Тогда
		ДокументМоментВремени = Новый МоментВремени(СтруктураДата.Дата, ОбрабатываемыйДокумент);
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(ДокументМоментВремени));
	
	Если КоличествоСтрокВДокументе > 0 Тогда
		
		СтруктураПараметров.Вставить("ТекстСообщений", "");
		
		СтруктураПараметров.Вставить("Отказ", Ложь);
		
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);
		СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете")<>Неопределено);
		
		СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладам", УчетнаяПолитика("ВестиПартионныйУчетПоСкладам","Упр",,СтруктураПараметров));
		
		Если НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
			Возврат;
		КонецЕсли;	
		
		Если СтруктураНаборовЗаписей = Неопределено Тогда
		
			// Движения - наборы записей по регистрам
			СоздатьНаборыЗаписей(СтруктураПараметров);
			
		Иначе
			
			Для каждого Элемент Из СтруктураНаборовЗаписей Цикл

				СтруктураПараметров.Вставить(Элемент.Ключ, Элемент.Значение);
	
			КонецЦикла;
		
		КонецЕсли; 
		
		
		ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Упр, Бух, Нал);

		Строка0 = ТаблицаСписания[0];
		
		Если НЕ ЗначениеЗаполнено(Строка0.Регистратор) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(ОбрабатываемыйДокумент, "Регистратор");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка0.Период) Тогда
			ТаблицаСписания.ЗаполнитьЗначения(СтруктураДата.Дата, "Период");
		КонецЕсли;
		
		ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, ДокументМоментВремени, Останавливаться, ПроведениеОстановлено);
		
	КонецЕсли;
	
	// Сдвиг границы последовательности осуществляется только при онлайновом списании партий
	// либо из обработки проведение по партиям.
	ЗакрытиеЗаказовПокупателей = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей");
		
	Если СписаниеВыполняетсяОбработкой Или СтруктураПараметров.УчетнаяПолитика[0].СписыватьПартииПриПроведенииДокументовУпр Тогда
		
		Если Упр Тогда
			
			СдвигатьГраницу = ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени,"Упр");
			
			Если СдвигатьГраницу Тогда
				Последовательности.ПартионныйУчет.УстановитьГраницу(ДокументМоментВремени);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПартийТоваров()

Функция ПолучитьСписокДокументовПоПоследовательности(ИмяПоследовательности,МоментВремениНачало, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке=1000, Организация=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоДокументовВВыборке,"ЧГ=") + "
	                      |	ТаблицаПоследовательности.Период КАК Дата,
						  |	ТаблицаПоследовательности.Регистратор КАК Ссылка
	                      |ИЗ
	                      |	Последовательность." + ИмяПоследовательности + " КАК ТаблицаПоследовательности
						  |ГДЕ
						  |	ТаблицаПоследовательности.Период <= &ДатаКон
						  |	И ТаблицаПоследовательности.Период > &Период
						  |	ИЛИ ((ТаблицаПоследовательности.Период = &Период) И (ТаблицаПоследовательности.Регистратор > &Регистратор))");
	Если  ЗначениеЗаполнено(Организация) Тогда 					  
		Запрос.Текст = Запрос.Текст + "
	                      |	И ТаблицаПоследовательности.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация",Организация);
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст + "						  
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТаблицаПоследовательности.Период,
						  |	ТаблицаПоследовательности.Регистратор";
	Запрос.УстановитьПараметр("ДатаКон",ДатаОкончания);					  
	Запрос.УстановитьПараметр("Период",МоментВремениНачало.Дата);					  
	Запрос.УстановитьПараметр("Регистратор",МоментВремениНачало.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ТЕХНОЛОГИЧЕСКИЕ

Процедура ЗаписатьДокументНаСервере(ДокументСсылка, РежимЗаписи) Экспорт

	Попытка
	
		ДокументСсылка.ПолучитьОбъект().Записать(РежимЗаписи);
	
	Исключение
	
	КонецПопытки; 

КонецПроцедуры//ЗаписатьДокументНаСервере

////////////////////////////////////////////////////////////////////////////////
// ПРОВОДКИ ПО БУХ УЧЕТУ, ЗАВИСЯЩИЕ ОТ ТОГО, КАКИЕ ПАРТИИ СПИСАНЫ

Процедура ОприходоватьТоварПринятыйНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Строка)

	ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Строка);
	
КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение

Процедура ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Строка)

	Если СтрокаДокумента.ОтражатьВУправленческомУчете Тогда
		
		Учет = "Упр";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(Движение,Строка);
	
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	
	Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;
	
	Если Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
		
		Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;
	Иначе
			
		Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка;
	КонецЕсли;

КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение


////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ

// Упр

Процедура ЗаполнитьЗапросПартийНаСкладахУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат,
	|		Номенклатура В
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Номенклатура
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	ДокументОприходованияДата" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";
	

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахУпр()

Процедура ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(Запрос)

	Запрос.Текст ="ВЫБРАТЬ
	              |	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	              |	ПартииТоваровНаСкладах.Номенклатура,
	              |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	              |	ПартииТоваровНаСкладах.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	              |	ПартииТоваровНаСкладах.Склад,
	              |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	              |	ПартииТоваровНаСкладах.СерияНоменклатуры,
	              |	ПартииТоваровНаСкладах.Качество,
	              |	ПартииТоваровНаСкладах.Заказ,
	              |	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	              |	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	              |	ПартииТоваровНаСкладах.СтатусПартии
	              |ИЗ
	              |	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	              |		&Дат,
	              |		Номенклатура В
	              |		    (ВЫБРАТЬ
	              |		        РегистрСведений.СписанныеТовары.Номенклатура
	              |		    ИЗ
	              |		        РегистрСведений.СписанныеТовары
	              |		    ГДЕ
	              |		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	              |		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	              |			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	              |			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	              |			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	              |ГДЕ
	              |	СписанныеТовары.Регистратор = &Ссылка
	              |ИТОГИ ПО
	              |	НомерСтрокиДокумента";
	

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахУпрДляЗакрытияЗаказовПокупателей()

Процедура ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр(Запрос, ВестиПартионныйУчетПоСкладам)

	Запрос.Текст ="ВЫБРАТЬ
	              |	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	              |	ПартииТоваровНаСкладах.Номенклатура,
	              |	ПартииТоваровНаСкладах.Склад,
	              |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	              |	ПартииТоваровНаСкладах.СерияНоменклатуры,
				  |	ПартииТоваровНаСкладах.ДокументОприходования,
	              |	ПартииТоваровНаСкладах.Качество,
	              |	ПартииТоваровНаСкладах.Заказ,
	              |	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	              |	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	              |	ПартииТоваровНаСкладах.СтатусПартии
	              |ИЗ
	              |	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	              |		&Дат,
	              |		Номенклатура В
	              |		        (ВЫБРАТЬ
	              |		            РегистрСведений.СписанныеТовары.Номенклатура
	              |		        ИЗ
	              |		            РегистрСведений.СписанныеТовары
	              |		        ГДЕ
	              |		            РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент)
	              |" + ?(ВестиПартионныйУчетПоСкладам, "
	              |		И (Склад В 
	              |		    (ВЫБРАТЬ
	              |		        РегистрСведений.СписанныеТовары.Склад
	              |		    ИЗ
	              |		        РегистрСведений.СписанныеТовары
	              |		    ГДЕ
	              |		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	              |		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	              |			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	              |			И (ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	              |				ИЛИ СписанныеТовары.Качество = &ПустоеКачество)
	              |			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	              |			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	              |				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	              |			И (ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииВозвратнаяТараОтложеннаяОтгрузка
				  |				ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииКупленныйОтложеннаяОтгрузка)
				  |ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
				  |ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
				  |И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
				  |И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры "
				  + ?(ВестиПартионныйУчетПоСкладам,"
				  |И (ВЫБОР
				  |	КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
				  |		ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
				  |	ИНАЧЕ ИСТИНА
				  |КОНЕЦ) ","")+"
				  |И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
				  |	ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
				  
				  |ГДЕ
	              |	СписанныеТовары.Регистратор = &ОсновнойДокумент
	              |ИТОГИ ПО
	              |	СписанныеТоварыОрдера.НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("СтатусПартииВозвратнаяТараОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка);
	Запрос.УстановитьПараметр("СтатусПартииКупленныйОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка);

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр()

Процедура ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр(Запрос,ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат,
	|		Номенклатура В
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Номенклатура
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент) ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (СписанныеТоварыОрдера.Качество = СписанныеТовары.Качество
	|				ИЛИ СписанныеТоварыОрдера.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|				ИЛИ СписанныеТовары.Качество = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка))
	|			И (ВЫБОР
	|				КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	ДокументОприходованияДата" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";

КонецПроцедуры // ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр()

Функция ПолучитьДеревоПартийНаСкладахУпр (МоментКон, СтруктураПараметров)

	Запрос = Новый Запрос;
	
	ОсновнойДокумент = Неопределено;
	СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);
	
	Регистратор = СтруктураПараметров.Регистратор;
	СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗУпр;
	СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииУпр;
	ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамУпр;

	// Для повышения быстродействия остатки партий получаются различными способами 
	Если СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей") Тогда
		ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(Запрос);
		
	ИначеЕсли ОсновнойДокумент <> Неопределено И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером
		И ТипЗнч(ОсновнойДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")тогда
		// Списание расходным ордером товара реализованного и принятого на ответственное хранение (отложенная отгрузка)
		ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр(Запрос, ВестиПартионныйУчетПоСкладам);
	
	ИначеЕсли ОсновнойДокумент <> Неопределено тогда
		// Списание партий по ордерной схеме: 
		// - Списание партий по расходному ордеру
		// - Перемещение партий по приходному ордеру
		// - Перемещение партий поступлением товаров и услуг в НТТ
		// Движения реализации выполняет расходный ордер, движения перемещения выполняет приходный ордер
		ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		
	Иначе
		// Общий случай списания
		ЗаполнитьЗапросПартийНаСкладахУпр(Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ);
		Если НЕ СтруктураПараметров.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры",
			"ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
			|ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &КодРезервирование");
			Запрос.УстановитьПараметр("КодРезервирование" , СтруктураПараметров.КодыОпераций.РезервированиеПодЗаказ)
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);	
	Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());
	Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	Если  ОсновнойДокумент <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);
	Иначе
		Запрос.УстановитьПараметр("ОсновнойДокумент", Регистратор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дат", МоментКон);
	
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции//ПолучитьДеревоПартийНаСкладахУпр

Функция ПолучитьДеревоПартийПереданныеУпр(МоментКон, Регистратор, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии)

	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.ДокументОприходования.Дата КАК ДокументОприходованияДата,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СтатусПартии,
	|	ПартииТоваровПереданные.СтатусПередачи,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        РегистрСведений.СписанныеТовары.Номенклатура
	|																					    ИЗ
	|																					        РегистрСведений.СписанныеТовары
	|																					    ГДЕ
	|																					        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" +
																						?(ДоговорКонтрагента = Неопределено, "", "
	|																					 	И ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СтатусПартии = &ПустойСтатус
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = &СтатусПартииПоОрдеру
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	ДокументОприходованияДата" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Дат", МоментКон);
	Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);	
	Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);
	Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
 
КонецФункции


// Упр

// Остатки партий на складах по упр.учету
//
// Параметры:
//	СтруктураПараметров
//	МоментКон
//
Процедура ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		
		СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахУпр", 
			ПолучитьДеревоПартийНаСкладахУпр (МоментКон,СтруктураПараметров));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийНаСкладахУпр()

Процедура ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон, ДоговорКонтрагента)
	
	Если СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете Тогда
		СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеУпр", ПолучитьДеревоПартийПереданныеУпр(МоментКон, СтруктураПараметров.Регистратор, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗУпр, СтруктураПараметров.СтратегияСтатусПартииУпр));
		
		СтруктураИзмерений = Новый Структура;
		ТаблицаОстатковПартий = Новый ТаблицаЗначений;
		Для Каждого Измерение ИЗ Метаданные.РегистрыНакопления.ПартииТоваровПереданные.Измерения Цикл
			СтруктураИзмерений.Вставить(Измерение.Имя);
			ТаблицаОстатковПартий.Колонки.Добавить(Измерение.Имя);
		КонецЦикла;
		ТаблицаОстатковПартий.Колонки.Добавить("Количество");
		ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");
		
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "СтруктураИзмерений", СтруктураИзмерений);
		СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);
	
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиПартийПереданныхУпр()

// Получение остатков по упр. учету
//
// Параметры:
//	Нет.
//
Процедура ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон)
	
	// По партионному учету остатки берутся из двух регистров
		
	Если СтруктураПараметров.ЕстьНаСкладах Тогда
		
		ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЕстьПереданные Тогда
		
		ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон,ТаблицаСписания[0].ДоговорКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОстаткиУпр()

Функция ПолучитьСтрокуОстатковПартий(СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий)
	
	ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаПартииРаспределения);
	МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТаблицы = ТаблицаОстатковПартий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПартииРаспределения);
	Иначе
		СтрокаТаблицы = МассивСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
		
Конецфункции

// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ
////////////////////////////////////////////////////////////////////////////////

Процедура ВыполнитьВосстановлениеНаСервере (ДатаКонцаОбработки,
										   Организация,
										   ОтражатьВУправленческомУчете,
										   ОтражатьВБухгалтерскомУчете,
										   ОтражатьВНалоговомУчете,
										   Останавливаться,
										   МаксимальноеКоличествоДокументовВТранзакции,
										   МаксимальноеКоличествоСтрокВТранзакции) Экспорт

	ЗаполнениеДокументов.ВыполнитьВосстановление (ДатаКонцаОбработки,
						Организация,
						ОтражатьВУправленческомУчете,
						ОтражатьВБухгалтерскомУчете,
						ОтражатьВНалоговомУчете,
						Останавливаться,
						МаксимальноеКоличествоДокументовВТранзакции,
						МаксимальноеКоличествоСтрокВТранзакции);

КонецПроцедуры //ВыполнитьВосстановлениеНаСервере


////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ ДОП РАСХОДОВ НА ПРИОБРЕТЕНИЕ

// Распределение за период доп расходов на поступление товаров
//
// Параметры:
//	Нет.
//
Процедура ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки, СтОтборОстатков = Неопределено, Документ=Неопределено, ДатаДокумента=Неопределено) Экспорт
	
	// Остатки нераспределенных доп.расходов
	Если ТипЗнч(СтОтборОстатков) = Тип("Структура") Тогда
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки, СтОтборОстатков);
	Иначе
		ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки);
	КонецЕсли;
	
	// Поступление партий
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	СУММА(Парт.Количество) КАК Количество,
	//|	СУММА(Парт.Стоимость) КАК Стоимость,
	|	Парт.Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Парт
	|
	|ГДЕ
	|	Парт.КодОперации В(&СписокКодыОперации) И
	|	Парт.ВидДвижения = &ВидДвижения И
	|	Парт.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Парт.Номенклатура В(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	Парт.Регистратор");
	
	
	СписокКодыОперации = Новый Массив;
	СписокКодыОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаВосстановления);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонцаОбработки);
	Запрос.УстановитьПараметр("СписокКодыОперации", СписокКодыОперации);
	Запрос.УстановитьПараметр("Номенклатура", ТабОстатков.ВыгрузитьКолонку("Номенклатура"));
	
	ТабПоступлений = Запрос.Выполнить().Выгрузить();
	ТабПоступлений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	СоотвДокументов = Новый Соответствие;
	
	Для Каждого СтрокаОстатка Из ТабОстатков Цикл
		
		НайдСтроки = ТабПоступлений.НайтиСтроки(Новый Структура(
		"Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры", 
		СтрокаОстатка.Номенклатура, 
		СтрокаОстатка.ХарактеристикаНоменклатуры,
		СтрокаОстатка.СерияНоменклатуры));
		
		// База распределения - количество
		ВсегоКоличество = 0;
		Для Каждого Строка Из НайдСтроки Цикл
			ВсегоКоличество = ВсегоКоличество + Строка.Количество;
		КонецЦикла;
		
		СуммаРаспределить  = СтрокаОстатка.Сумма;
		КоличествоосталосьПогасить = ВсегоКоличество;
		
		Для Каждого Строка Из НайдСтроки Цикл
			
			Если НЕ (КоличествоосталосьПогасить > 0) Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = 1;
			Иначе
				КоэффСписания = Строка.Количество/КоличествоосталосьПогасить;
			КонецЕсли;
			
			Строка.Стоимость = СуммаРаспределить * КоэффСписания;
			
			КоличествоосталосьПогасить = КоличествоосталосьПогасить - Строка.Количество;
			
			СуммаРаспределить = СуммаРаспределить - Строка.Стоимость;
			
			СоотвДокументов.Вставить(Строка.Регистратор);
		КонецЦикла;
		
	КонецЦикла;
	
	// Запись в регистр
	Если Документ<>Неопределено Тогда
		
		// Партии
		НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьПриход();
		
		НаборЗаписей.Записать();
		
		// Доп расходы
		НаборЗаписей = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		
		// Стоимостью является сумма
		ТабПоступлений.Колонки.Стоимость.Имя = "Сумма";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);
		
		НаборЗаписей.мПериод = ДатаДокумента;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		
		НаборЗаписей.ВыполнитьРасход();
		
		НаборЗаписей.Записать();
	КонецЕсли;

	
КонецПроцедуры // ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки)
