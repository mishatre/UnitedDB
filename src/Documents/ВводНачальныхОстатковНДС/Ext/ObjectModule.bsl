Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяНУПолитикаПоДатам Экспорт; 

Перем мУчетнаяПолитикаПоДатам Экспорт; 

Перем мУдалятьДвижения;

Перем мПодчиненныеДокументы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

Процедура ЗаполнитьРасчетыСКонтрагентами() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		СтрокиКУдалению = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Ложь));
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокиКУдалению = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Истина));
	Иначе 
		СтрокиКУдалению = Неопределено;
	КонецЕсли;
	
	Если СтрокиКУдалению <> Неопределено Тогда
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПолучитьТаблицуРасчетов(), РасчетыСКонтрагентами);
	
	РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента,Сделка, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, Аванс, РасчетыСБюджетом",
	                               "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	
	//Удаление строк с нулевой суммой
	
	Если СтрокиКУдалению = Неопределено Тогда							   
		СтрокиКУдалению = Новый Массив;
	Иначе
		СтрокиКУдалению.Очистить();
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из РасчетыСКонтрагентами Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСФРасчетыСКонтрагентами() Экспорт
	
	ТаблицаРасчетов = ПолучитьТаблицуРасчетов();
	ТаблицаРасчетов.Индексы.Добавить("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом");
	
	ТаблицаРасчетов.Колонки.Добавить("ДатаСФ", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для Каждого СтрокаТЧ Из ТаблицаРасчетов Цикл
		Если СтрокаТЧ.Аванс Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОплаты) Тогда
				СтрокаТЧ.ДатаСФ = СтрокаТЧ.ДокументОплаты.Дата;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
				СтрокаТЧ.ДатаСФ = СтрокаТЧ.СчетФактура.Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТаблицаРасчетов.Сортировать("ДатаСФ");
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	КолонкаСФ = ?(ЭтоАванс, "ДокументОплаты", "СчетФактура");
	
	СтрокиРасчетов = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	
	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом");
	
	Для Каждого СтрокаРасчетов Из СтрокиРасчетов Цикл
		
		СтрокаРасчетов.СчетФактура = Неопределено;
		
		РасчетыВВалюте = ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.ДоговорКонтрагента), Ложь, 
							(Не СтрокаРасчетов.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) И (СтрокаРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета));
		
		Если (Не РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаРасчетов.СуммаВзаиморасчетов)) Или 
			  (РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Контрагент 				= СтрокаРасчетов.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента 		= СтрокаРасчетов.ДоговорКонтрагента;
		Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.Сделка) Тогда
			СтруктураОтбора.Удалить("Сделка");
		Иначе
			СтруктураОтбора.Вставить("Сделка",СтрокаРасчетов.Сделка);
		КонецЕсли; 
		
		СтруктураОтбора.ВалютаВзаиморасчетов 	= СтрокаРасчетов.ВалютаВзаиморасчетов;
		СтруктураОтбора.Аванс					= СтрокаРасчетов.Аванс;
		СтруктураОтбора.РасчетыСБюджетом		= СтрокаРасчетов.РасчетыСБюджетом;
		
		СтрокиСФ = ТаблицаРасчетов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаСФ Из СтрокиСФ Цикл
			Если ЗначениеЗаполнено(СтрокаРасчетов[КолонкаСФ]) Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаСФ[КолонкаСФ]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если РасчетыВВалюте и Не СтрокаРасчетов.РасчетыСБюджетом Тогда
				Если  НЕ ЗначениеЗаполнено(СтрокаСФ.ВалютнаяСуммаВзаиморасчетов) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов > СтрокаСФ.ВалютнаяСуммаВзаиморасчетов Тогда
					НоваяСтрока = РасчетыСКонтрагентами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
					НоваяСтрока[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					НоваяСтрока.ВалютнаяСуммаВзаиморасчетов = СтрокаСФ.ВалютнаяСуммаВзаиморасчетов;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.КурсВзаиморасчетов) Тогда
						НоваяСтрока.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.КратностьВзаиморасчетов) Тогда
						НоваяСтрока.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.ВалютнаяСуммаВзаиморасчетов, 
															НоваяСтрока.ВалютаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															НоваяСтрока.КурсВзаиморасчетов, 1,
															НоваяСтрока.КратностьВзаиморасчетов, 1);
					СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов - НоваяСтрока.ВалютнаяСуммаВзаиморасчетов;
					СтрокаРасчетов.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, 
															СтрокаРасчетов.ВалютаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов), 1, СтрокаРасчетов.КурсВзаиморасчетов), 1,
															?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов), 1, СтрокаРасчетов.КратностьВзаиморасчетов), 1);
					СтрокаСФ.ВалютнаяСуммаВзаиморасчетов = 0;
				Иначе
					СтрокаРасчетов[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов) Тогда
						СтрокаРасчетов.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов) Тогда
						СтрокаРасчетов.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
					КонецЕсли;
					СтрокаРасчетов.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, 
															СтрокаРасчетов.ВалютаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															СтрокаРасчетов.КурсВзаиморасчетов, 1,
															СтрокаРасчетов.КратностьВзаиморасчетов, 1);
															
					СтрокаСФ.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов - СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
			Иначе
				Если  НЕ ЗначениеЗаполнено(СтрокаСФ.СуммаВзаиморасчетов) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРасчетов.СуммаВзаиморасчетов > СтрокаСФ.СуммаВзаиморасчетов Тогда
					НоваяСтрока = РасчетыСКонтрагентами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
					НоваяСтрока[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					НоваяСтрока.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов;
					СтрокаРасчетов.СуммаВзаиморасчетов = СтрокаРасчетов.СуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетов;
					СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															СтрокаРасчетов.ВалютаВзаиморасчетов, 
															1, ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов), 1, СтрокаРасчетов.КурсВзаиморасчетов),
															1, ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов), 1, СтрокаРасчетов.КратностьВзаиморасчетов));
					Если Не СтрокаРасчетов.РасчетыСБюджетом Тогда
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.КурсВзаиморасчетов) Тогда
							НоваяСтрока.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.КратностьВзаиморасчетов) Тогда
							НоваяСтрока.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
						КонецЕсли;
						НоваяСтрока.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаВзаиморасчетов, 
																мВалютаРегламентированногоУчета,
																НоваяСтрока.ВалютаВзаиморасчетов, 
																1, НоваяСтрока.КурсВзаиморасчетов, 
																1, НоваяСтрока.КратностьВзаиморасчетов);
					КонецЕсли;
					СтрокаСФ.СуммаВзаиморасчетов = 0;
				Иначе
					СтрокаРасчетов[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					Если Не СтрокаРасчетов.РасчетыСБюджетом Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов) Тогда
							СтрокаРасчетов.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов) Тогда
							СтрокаРасчетов.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
						КонецЕсли;
						СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаВзаиморасчетов, 
																мВалютаРегламентированногоУчета,
																СтрокаРасчетов.ВалютаВзаиморасчетов, 
																1, СтрокаРасчетов.КурсВзаиморасчетов, 
																1, СтрокаРасчетов.КратностьВзаиморасчетов);
																
					КонецЕсли;
					СтрокаСФ.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов - СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента,Сделка, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, Аванс, РасчетыСБюджетом",
	                               "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	
КонецПроцедуры

Функция ПолучитьТаблицуРасчетов() Экспорт
	
	ТаблицаРезультатов = Новый ТаблицаЗначений();
		
	КолонкиТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.РасчетыСКонтрагентами.Реквизиты;
	
	Для Каждого Колонка Из КолонкиТЧ Цикл
		ТаблицаРезультатов.Колонки.Добавить(Колонка.Имя, Колонка.Тип);
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
 
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			ТекущаяВалютаВзаиморасчетов = СтрокаСФ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			РасчетыВУсловныхЕдиницах = СтрокаСФ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
			
			КурсКратностьНаДатуВНО = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, Дата);
			КурсКратностьНаДатуВНО.Курс     	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуВНО.Курс), 1, КурсКратностьНаДатуВНО.Курс);
			КурсКратностьНаДатуВНО.Кратность	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуВНО.Кратность), 1, КурсКратностьНаДатуВНО.Кратность);
			
			Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			     КурсКратностьНаДатуСФ = Новый Структура("Курс,Кратность");
				 ЗаполнитьЗначенияСвойств(КурсКратностьНаДатуСФ,КурсКратностьНаДатуВНО);
			Иначе
				КурсКратностьНаДатуСФ = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, СтрокаСФ.СчетФактура.Дата);
				Если Не ЗначениеЗаполнено(КурсКратностьНаДатуСФ.Курс) Тогда
					ЗаполнитьЗначенияСвойств(КурсКратностьНаДатуСФ ,КурсКратностьНаДатуВНО);
				Иначе
					КурсКратностьНаДатуСФ.Курс     	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуСФ.Курс), КурсКратностьНаДатуВНО.Курс, КурсКратностьНаДатуСФ.Курс);
					КурсКратностьНаДатуСФ.Кратность	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуСФ.Кратность), КурсКратностьНаДатуВНО.Кратность, КурсКратностьНаДатуСФ.Кратность);
				КонецЕсли; 
			КонецЕсли; 
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс						= Ложь;
				СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
				СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
				СтрокаРасчетовСКонтрагентами.Сделка 					= СтрокаСФ.Сделка;
				СтрокаРасчетовСКонтрагентами.СчетФактура 				= СтрокаСФ.СчетФактура;
				
				Если ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда
					Или ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества 
					Или ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= ДополнительнаяСтрока.СуммаБезНДС - ДополнительнаяСтрока.СуммаБезНДСОплата;
				Иначе
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС - (ДополнительнаяСтрока.СуммаБезНДСОплата + ДополнительнаяСтрока.НДСОплата);
				КонецЕсли;

				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов 		= ТекущаяВалютаВзаиморасчетов;
				СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     	= КурсКратностьНаДатуСФ.Курс;
				СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= КурсКратностьНаДатуСФ.Кратность;
				
				СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов, 
																		мВалютаРегламентированногоУчета,
																		СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов, 
																		1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
																		1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
				
				Если ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда Или
					 ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
					 
					СтрокаРасчетовСКонтрагентами 					= ТаблицаРезультатов.Добавить();
					СтрокаРасчетовСКонтрагентами.Аванс				= Ложь;
					СтрокаРасчетовСКонтрагентами.Контрагент 		= СтрокаСФ.Контрагент;
					СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента = СтрокаСФ.ДоговорКонтрагента;
					СтрокаРасчетовСКонтрагентами.Сделка 			= СтрокаСФ.Сделка;
					СтрокаРасчетовСКонтрагентами.СчетФактура 		= СтрокаСФ.СчетФактура;
					СтрокаРасчетовСКонтрагентами.РасчетыСБюджетом	= Истина;
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов= ДополнительнаяСтрока.НДС - ДополнительнаяСтрока.НДСОплата;
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			ТекущаяВалютаВзаиморасчетов = СтрокаСФ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			РасчетыВУсловныхЕдиницах = СтрокаСФ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
			
			КурсКратностьНаДатуВНО = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, Дата);
			КурсКратностьНаДатуВНО.Курс     	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуВНО.Курс), 1, КурсКратностьНаДатуВНО.Курс);
			КурсКратностьНаДатуВНО.Кратность	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуВНО.Кратность), 1, КурсКратностьНаДатуВНО.Кратность);
			
			Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			     КурсКратностьНаДатуСФ = Новый Структура("Курс,Кратность");
				 ЗаполнитьЗначенияСвойств(КурсКратностьНаДатуСФ,КурсКратностьНаДатуВНО);
			Иначе
				КурсКратностьНаДатуСФ = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущаяВалютаВзаиморасчетов, СтрокаСФ.СчетФактура.Дата);
				Если Не ЗначениеЗаполнено(КурсКратностьНаДатуСФ.Курс) Тогда
					ЗаполнитьЗначенияСвойств(КурсКратностьНаДатуСФ ,КурсКратностьНаДатуВНО);
				Иначе
					КурсКратностьНаДатуСФ.Курс     	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуСФ.Курс), КурсКратностьНаДатуВНО.Курс, КурсКратностьНаДатуСФ.Курс);
					КурсКратностьНаДатуСФ.Кратность	= ?(Не ЗначениеЗаполнено(КурсКратностьНаДатуСФ.Кратность), КурсКратностьНаДатуВНО.Кратность, КурсКратностьНаДатуСФ.Кратность);
				КонецЕсли; 
			КонецЕсли; 
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс						= Истина;
				СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
				СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
				СтрокаРасчетовСКонтрагентами.Сделка 					= СтрокаСФ.Сделка;
				СтрокаРасчетовСКонтрагентами.ДокументОплаты				= СтрокаСФ.СчетФактура;
				СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов		= ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС - (ДополнительнаяСтрока.СуммаБезНДСОплата + ДополнительнаяСтрока.НДСОплата);
				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов		= ТекущаяВалютаВзаиморасчетов;
				Если СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов = СтрокаСФ.ВалютаАванса Тогда
					СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов			= ?(ДополнительнаяСтрока.ВалютнаяСуммаСНДС = 0, 1, (ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС)/ДополнительнаяСтрока.ВалютнаяСуммаСНДС);
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= 1;
				Иначе
					СтруктураКурсаВзаиморасчетов 							= МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов, Дата);
					СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     	= КурсКратностьНаДатуСФ.Курс;
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= КурсКратностьНаДатуСФ.Кратность;
					
				КонецЕсли; 
				СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов,
																			мВалютаРегламентированногоУчета, СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов,
																			1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
																			1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выводит сообщение об ошибке 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения не вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  СтатусСообщения
//
Процедура СообщитьОбОшибкеБезОстановкиПроведения(ТекстСообщения, Заголовок = "",Статус)

	#Если не ВнешнееСоединение Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
		
	#КонецЕсли

КонецПроцедуры // ОбщегоНазначения.СообщитьОбОшибке()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтрРекв = "Организация";
					
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(СтрРекв), Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "Контрагент, ДоговорКонтрагента";
	//Проверка основной таблицы
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ОбязательныеРеквизиты = ОбязательныеРеквизиты+", ДатаСФ, НомерСФ, ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента,ВалютаАванса"; 
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		ОбязательныеРеквизиты = ОбязательныеРеквизиты+", ДатаСФ, НомерСФ"; 
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
	КонецЕсли;
	СтруткураОбязательныхРеквизитов = Новый Структура(ОбязательныеРеквизиты);
	СтруткураОбязательныхРеквизитов.Вставить("СчетФактура","Не заполнено значение реквизита ""Документ-основание (поступление и др.)"". Для создания документов используйте кнопку ""Заполнить|Сформировать счета-фактуры"".");
	
	//Проверка заполнения обязательных реквизитов
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоСФ", СтруткураОбязательныхРеквизитов, Отказ, Заголовок);

	//Проверка заполнения реквизитов в зависимости от заполнения строки 
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	""Исправление"" КАК ИдентификаторОшибки,
		|	1 КАК Порядок
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
		|ГДЕ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка = &ТекущийДокумент
		|	И ВводНачальныхОстатковНДСДанныеПоСФ.Исправление = ИСТИНА
		|	И (ВводНачальныхОстатковНДСДанныеПоСФ.НомерИсправления = 0
		|			ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.ДатаИсправления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	""КорректировочныйСчетФактура"",
		|	2
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
		|ГДЕ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка = &ТекущийДокумент
		|	И ВводНачальныхОстатковНДСДанныеПоСФ.КорректировочныйСчетФактура = ИСТИНА
		|	И (ВводНачальныхОстатковНДСДанныеПоСФ.НомерИсходногоДокумента ПОДОБНО """"
		|			ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.ДатаИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	""УчитыватьИсправлениеИсходногоДокумента"",
		|	3
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
		|ГДЕ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка = &ТекущийДокумент
		|	И ВводНачальныхОстатковНДСДанныеПоСФ.УчитыватьИсправлениеИсходногоДокумента = ИСТИНА
		|	И (ВводНачальныхОстатковНДСДанныеПоСФ.НомерИсправленияИсходногоДокумента = 0
		|			ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.ДатаИсправленияИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	Порядок";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() <> 0 Тогда
			Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
				Если СтрокаЗапроса.ИдентификаторОшибки = "Исправление" Тогда
					СтрокаРеквизитов = """Номер исправления"" или ""Дата исправления""";
				ИначеЕсли СтрокаЗапроса.ИдентификаторОшибки = "КорректировочныйСчетФактура" Тогда
					СтрокаРеквизитов = """Номер корректируемого счета-фактуры"" или ""Дата корректируемого счета-фактуры""";
				ИначеЕсли СтрокаЗапроса.ИдентификаторОшибки = "УчитыватьИсправлениеИсходногоДокумента" Тогда
					СтрокаРеквизитов = """Номер исправления исходного документа"" или ""Дата исправления исходного документа""";
				КонецЕсли;
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗапроса.НомерСтроки) +
				""" табличной части: ";
				СтрокаСообщения = "Не заполнено значение реквизита " + СтрокаРеквизитов + "!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверка таблицы дополнительных сведений
	ОбязательныеРеквизиты = "ВидЦенности, СтавкаНДС";

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДополнительныеСведения", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиДополнительныеСведения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

// Процедура проверяет корректность заполнения реквизитов таб. части "ДополнительныеСведения" документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДополнительныеСведения(СтруктураШапкиДокумента, Отказ, Заголовок)

	Для Каждого СтрокаТЧ Из ДополнительныеСведения Цикл
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным И
			СтрокаТЧ.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 И
			НЕ ЗначениеЗаполнено(СтрокаТЧ.ДокументОтгрузки)
			и не (СтрокаТЧ.СуммаБезНДСОплата = 0 и СтрокаТЧ.НДСОплата = 0 
			и СтрокаТЧ.СуммаБезНДСПодтверждено0 = 0 и СтрокаТЧ.НДСПодтверждено0 = 0
			и СтрокаТЧ.СуммаБезНДСНеПодтверждено0 = 0 и СтрокаТЧ.НДСНеПодтверждено0 = 0
			и СтрокаТЧ.СуммаБезНДСПредъявлено0 = 0 и СтрокаТЧ.НДСПредъявлено0 = 0
			и СтрокаТЧ.СуммаБезНДСПредъявленоНеПодтверждено0 = 0 и СтрокаТЧ.НДСПредъявленоНеПодтверждено0 = 0)
			Тогда

			ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ должна быть заполнена колонка ""Документ отгрузки""!", , Заголовок);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Процедура проверяет корректность заполнения реквизитов таб. части "РасчетыСКонтрагентами" документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Для Каждого СтрокаТЧ Из РасчетыСКонтрагентами Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Расчеты с контрагентами"": ";
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Контрагент""!", Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Договор контрагента""!", Отказ, Заголовок);
		КонецЕсли;
		Если СтрокаТЧ.Аванс Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДокументОплаты) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Документ оплаты""!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Счет-фактура""!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СуммаВзаиморасчетов) Тогда
			СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Сумма расчетов, руб.""!",Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если Не СтрокаТЧ.РасчетыСБюджетом Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВалютаВзаиморасчетов) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Валюта взаиморасчетов""!", Отказ, Заголовок);
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КурсВзаиморасчетов) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Курс взаиморасчетов""!", Отказ, Заголовок);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВалютнаяСуммаВзаиморасчетов) Тогда
					СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Сумма взаиморасчетов, вал.""!",Заголовок,СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРасчетов = ПолучитьТаблицуРасчетов();
	ТаблицаРасчетов.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, Аванс, РасчетыСБюджетом",
	                         "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	//Удаление строк с нулевой суммой
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаРасчетов.Колонки.Добавить( "ФлагУдалить", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.ЗаполнитьЗначения( Ложь, "ФлагУдалить");
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	КолонкаСФ = ?(ЭтоАванс, "ДокументОплаты", "СчетФактура");
	
	СтрокиРасчетов = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом, " + КолонкаСФ);
	ТаблицаРасчетов.Индексы.Добавить("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом, " + КолонкаСФ);
	
	ПровереноСтрок = 0;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаРасчетов Из СтрокиРасчетов Цикл
		РасчетыВВалюте = ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.ДоговорКонтрагента), Ложь, 
		(Не СтрокаРасчетов.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) И (СтрокаРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета) И СтрокаРасчетов.Аванс);
						
		СуммаВзаиморасчетов = ?(РасчетыВВалюте, СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, СтрокаРасчетов.СуммаВзаиморасчетов);
		Если НЕ ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда
			ПровереноСтрок = ПровереноСтрок + 1;
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Контрагент 				= СтрокаРасчетов.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента 		= СтрокаРасчетов.ДоговорКонтрагента;
		СтруктураОтбора.ВалютаВзаиморасчетов 	= СтрокаРасчетов.ВалютаВзаиморасчетов;
		СтруктураОтбора.Аванс					= СтрокаРасчетов.Аванс;
		СтруктураОтбора.РасчетыСБюджетом		= СтрокаРасчетов.РасчетыСБюджетом;
		СтруктураОтбора[КолонкаСФ]				= СтрокаРасчетов[КолонкаСФ];
		
		СтрокиОсновныеДанные = ТаблицаРасчетов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОсновныеДанные Из СтрокиОсновныеДанные Цикл
			Если (РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов)) Или
				(Не РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.СуммаВзаиморасчетов)) Тогда
				СтрокаОсновныеДанные.ФлагУдалить = Истина;
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда 
				ПровереноСтрок = ПровереноСтрок + 1;
				Прервать;
			КонецЕсли;
			
			Если РасчетыВВалюте Тогда
				Если СуммаВзаиморасчетов > СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов Тогда
					СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов;
					СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов = 0;
				Иначе
					СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов = СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов - СуммаВзаиморасчетов;
					СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				Если СуммаВзаиморасчетов > СтрокаОсновныеДанные.СуммаВзаиморасчетов Тогда
					СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаОсновныеДанные.СуммаВзаиморасчетов ;
					СтрокаОсновныеДанные.СуммаВзаиморасчетов = 0;
				Иначе
					СтрокаОсновныеДанные.СуммаВзаиморасчетов = СтрокаОсновныеДанные.СуммаВзаиморасчетов - СуммаВзаиморасчетов;
					СуммаВзаиморасчетов = 0;
				КонецЕсли;
			КонецЕсли;
			Если (РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов)) Или
				(Не РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.СуммаВзаиморасчетов)) Тогда
				СтрокаОсновныеДанные.ФлагУдалить = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда
			ПровереноСтрок = ПровереноСтрок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаРасчетов.Количество() - 1;
	Индекс = ВсегоСтрок;
	Пока Индекс >= 0 Цикл
		Если ТаблицаРасчетов[Индекс].ФлагУдалить Тогда
			ТаблицаРасчетов.Удалить(ТаблицаРасчетов[Индекс]);
			ВсегоСтрок = ВсегоСтрок - 1;
			Индекс = Мин(Индекс, ВсегоСтрок);
		Иначе
			Индекс = Индекс - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРасчетов.Количество() > 0 Или ПровереноСтрок < СтрокиРасчетов.Количество() Тогда
		Сообщить("Информация о задолженности на закладке """ + ?(ЭтоАванс, "авансы", "расчеты с контрагентами") + """ не соответствует основным данным по остаткам", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос и выгружает таблицу в развороте по событиям для отражения в регистре НДС.
//
// Параметры: 
//  РезультатЗапросаПоСтрокам - результат запроса по табличной части "ДанныеПоСФ",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
	
	СоответствиеСобытияИколонки  = новый Соответствие();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,	"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСОплачен,				"НДСОплата");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,		"НДСВключеноВСтоимость");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,	"НДССтавка0");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, 	"НДСПредъявлено");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0,	"НДСПредъявлено0");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Реализация,				"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Оплата,					"НДСОплата");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.ПолученАванс,				"НДС");
	КонецЕсли; 
	
	Счетчик = 0;
	ТекстЗапроса = "";
	Для каждого Событие из СоответствиеСобытияИколонки Цикл
		Если Счетчик>0 Тогда
		     ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Событие.Ключ);
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПокупки") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Событие.Ключ));
		ИначеЕсли ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПродажи.Индекс(Событие.Ключ));
		Иначе
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Счетчик);
		КонецЕсли; 
		
		
		ТекстЗапроса = ТекстЗапроса +
		 "ВЫБРАТЬ
		 |	&Организация как Организация,
		 |	&Параметр"+Счетчик+" как Событие,
		 |	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		 |	ОсновныеДанные.Контрагент,
		 |	ОсновныеДанные.ДоговорКонтрагента,
		 |	ОсновныеДанные.ПредъявленСФ,";
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
			 ПустыеВалюты = новый массив();
			 ПустыеВалюты.Добавить(Справочники.Валюты.ПустаяСсылка());
			 ПустыеВалюты.Добавить(Неопределено);
			 Запрос.УстановитьПараметр("ПустыеВалюты",ПустыеВалюты);
			 Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
 			 ТекстЗапроса = ТекстЗапроса +"
			 |	(выбор когда ОсновныеДанные.ВалютнаяСуммаСНДС = 0 или (ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютаАванса = &мВалютаРегламентированногоУчета) тогда Расшифровка.СуммаБез"+Событие.Значение+" + Расшифровка."+Событие.Значение+" иначе Расшифровка.ВалютнаяСуммаСНДС конец) как ВалютнаяСуммаСНДС,
			 |	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютнаяСуммаСНДС = 0 тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ВалютаДокумента,
			 |	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ОргигинальнаяВалютаАванса,
			 |	СвязанныйСФ.СчетФактура,";
		 Иначе
			ТекстЗапроса = ТекстЗапроса +"
			|	ОсновныеДанные.СчетФактура,";
		 КонецЕсли;
		 ТекстЗапроса = ТекстЗапроса +"
		 |	Расшифровка.ВидЦенности,
		 |	Расшифровка.СтавкаНДС,";
		 
		 ТекстЗапроса = ТекстЗапроса +"
		 |	Расшифровка.СуммаБез"+Событие.Значение+" как СуммаБезНДС,
		 |	Расшифровка."+Событие.Значение+" как НДС,
		 |	Расшифровка.Номенклатура,
		 |	ОсновныеДанные.КлючСтроки,
		 |	Расшифровка.НомерСтроки";
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям  
			 Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей	
			 тогда
				 Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.НДСОплачен 
					 или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Оплата 
					 тогда
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Выбор когда Расшифровка.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура иначе Расшифровка.ДокументОплаты Конец как ДокументОплаты
					 |	, Выбор когда Расшифровка.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура.дата иначе Расшифровка.ДокументОплаты.дата Конец как ДатаСобытия
					 |	";
				 ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком 
					 или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Реализация 
					 тогда
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Неопределено как ДокументОплаты
					 |	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
					 |	";
				 ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
					тогда
					 //Заполнение даты события далее
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Неопределено как ДокументОплаты
					 |	";
					
				 Иначе
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Неопределено как ДокументОплаты
					 |	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
					 |	";
				 КонецЕслИ;
		 Иначе
			Если Событие.Ключ = Перечисления.СобытияПоНДСПродажи.ПолученАванс тогда
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				 |	";
			Иначе
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				 |	";
			КонецЕслИ;
				 
		 КонецЕсли; 
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям тогда
			 Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				 тогда
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, Выбор когда Расшифровка.ДокументОтгрузки = Неопределено тогда ОсновныеДанные.Ссылка.дата иначе Расшифровка.ДокументОтгрузки.дата Конец как ДатаСобытия
				 |	, Расшифровка.ДокументОтгрузки как ДокументОтгрузки";

			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0
				 тогда
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, Расшифровка.ДокументОтгрузки как ДокументОтгрузки";
			 Иначе
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, Неопределено как ДокументОтгрузки";
			КонецЕслИ;	 
			 
		 КонецЕсли; 
		 ТекстЗапроса = ТекстЗапроса +"
		 |ИЗ
		 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
		 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки";
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
			ТекстЗапроса = ТекстЗапроса +"
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
			|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		    |	
			|ГДЕ
			|	(СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)) КАК СвязанныйСФ
			|	ПО ОсновныеДанные.ДоговорКонтрагента = СвязанныйСФ.ДоговорКонтрагента И ОсновныеДанные.СчетФактура = СвязанныйСФ.ДокументОснование
			|	";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		 |
		 |ГДЕ
		 |	ОсновныеДанные.Ссылка = &Ссылка И
		 |	Расшифровка.Ссылка = &Ссылка и
		 |	(Расшифровка.СуммаБез"+Событие.Значение+" <> 0 или Расшифровка."+Событие.Значение+" <> 0)";
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если Счетчик>0 Тогда
		     ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
		Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура));
		
		ТекстЗапроса = ТекстЗапроса +
		 "ВЫБРАТЬ
		 |	&Организация как Организация,
		 |	&Параметр"+Счетчик+" как Событие,
		 |	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		 |	ОсновныеДанные.Контрагент,
		 |	ОсновныеДанные.ДоговорКонтрагента,
		 |	ОсновныеДанные.ПредъявленСФ,
		 |	ОсновныеДанные.СчетФактура,
		 |	Расшифровка.ВидЦенности,
		 |	Расшифровка.СтавкаНДС,
		 |	Расшифровка.СуммаБезНДС,
		 |	Расшифровка.НДС,
		 |	Расшифровка.Номенклатура,
		 |	ОсновныеДанные.КлючСтроки,
		 |	Расшифровка.НомерСтроки
		 |	, Неопределено как ДокументОплаты
		 |	, ОсновныеДанные.СчетФактура.Дата как ДатаСобытия
		 |	, Неопределено как ДокументОтгрузки
		 |ИЗ
		 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
		 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
		 |
		 |ГДЕ
		 |	ОсновныеДанные.Ссылка = &Ссылка И
		 |	Расшифровка.Ссылка = &Ссылка и
		 |	(Расшифровка.СуммаБезНДС <> 0 или Расшифровка.НДС <> 0)
		 |	и ОсновныеДанные.ПредъявленСФ = Истина ";
	КонецЕсли; 
	Если Счетчик = 0  Тогда
	    Возврат новый ТаблицаЗначений();
	КонецЕсли; 
	Запрос.Текст = ТекстЗапроса + "
	|	УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.КлючСтроки,
	|	Расшифровка.НомерСтроки,
	|	ПорядокСобытия";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();

	Возврат ТаблицаДокумента;

КонецФункции // ПодготовитьТаблицуРазвернутуюПоСобытиям()

// Формирует запрос и выгружает таблицу для формирования проводок по расчетам с контрагентами.
Функция ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",	'00010101');
	Запрос.УстановитьПараметр("ВедениеВзаиморасчетовПоДоговоруВЦелом",	Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыСКонтрагентами.Ссылка.Организация,
	|	РасчетыСКонтрагентами.Контрагент,
	|	РасчетыСКонтрагентами.ДоговорКонтрагента,
	|	РасчетыСКонтрагентами.СчетФактура,
	|	РасчетыСКонтрагентами.ДокументОплаты,
	|	РасчетыСКонтрагентами.СуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ВалютаВзаиморасчетов,
	|	РасчетыСКонтрагентами.ВалютнаяСуммаВзаиморасчетов,
	|	РасчетыСКонтрагентами.РасчетыСБюджетом,
	|	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки,
	|	РасчетыСКонтрагентами.Аванс КАК Аванс,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
	|	ЕСТЬNULL(РасчетыСКонтрагентами.ДокументОплаты.Дата, &ПустаяДата) КАК ДокументОплатыДата,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентами.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ВедениеВзаиморасчетовПоДоговоруВЦелом
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РасчетыСКонтрагентами.Сделка
	|	КОНЕЦ КАК Сделка
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|ГДЕ
	|	РасчетыСКонтрагентами.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции  //ПодготовитьТаблицуПоРасчетам()

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС по приобретенным ценностям"
//
Функция ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент КАК Поставщик,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	Расшифровка.ВидЦенности,
	 |	СУММА(Расшифровка.НДС) КАК НДС,
	 |	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	 |	СУММА(Расшифровка.НДСВключеноВСтоимость) КАК НДСВключеноВСтоимость,
	 |	СУММА(Расшифровка.НДССтавка0) КАК НДССтавка0,
	 |	СУММА(Расшифровка.НДСПредъявлено) КАК НДСПредъявлено,
	 |	СУММА(Расшифровка.НДСПредъявлено0) КАК НДСПредъявлено0,
	 |	СУММА(Расшифровка.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	 |	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	 |	СУММА(Расшифровка.НДССтавка0 - Расшифровка.НДСПредъявлено0) КАК НДСНаСчет0,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	Расшифровка.ДокументОтгрузки,
	 |	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	 |	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	 |	СУММА(Расшифровка.СуммаБезНДСВключеноВСтоимость) КАК СуммаБезНДСВключеноВСтоимость,
	 |	СУММА(Расшифровка.СуммаБезНДССтавка0) КАК СуммаБезНДССтавка0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	 |	Расшифровка.СтавкаНДС,
	 |	СУММА(ОсновныеДанные.Сумма) КАК Сумма,
	 |	СУММА(ОсновныеДанные.СуммаВзаиморасчетов) КАК ВалютнаяСумма,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	 |	Расшифровка.ДокументОплаты,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	 |	Расшифровка.ДокументОплаты.Дата КАК ДокументОплатыДата,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	 |	ОсновныеДанные.КодВидаОперации
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ВидЦенности,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.КлючСтроки,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.ДокументОплаты,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	ОсновныеДанные.Ссылка.Дата,
	 |	ОсновныеДанные.СчетФактура.Дата,
	 |	Расшифровка.ДокументОплаты.Дата,
	 |	Расшифровка.ДокументОтгрузки.Дата,
	 |	ОсновныеДанные.КодВидаОперации
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки";
		 
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС неоплаченный покупателями"
//
Функция ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент КАК Покупатель,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	Расшифровка.ВидЦенности,
	 |	СУММА(Расшифровка.НДС) КАК НДС,
	 |	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	Расшифровка.ДокументОтгрузки,
	 |	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	 |	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	 |	Расшифровка.СтавкаНДС,
	 |	СУММА(ОсновныеДанные.Сумма) КАК Сумма,
	 |	СУММА(ОсновныеДанные.СуммаВзаиморасчетов) КАК ВалютнаяСумма,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	 |	Расшифровка.ДокументОплаты,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	 |	Расшифровка.ДокументОплаты.Дата КАК ДокументОплатыДата,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	Расшифровка.Номенклатура,
	 |	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	 |	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	 |	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	 |	Расшифровка.СтавкаНДСНеПодтверждена0,
	 |	ОсновныеДанные.КодВидаОперации
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ВидЦенности,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.КлючСтроки,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.ДокументОплаты,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	Расшифровка.Номенклатура,
	 |	ОсновныеДанные.Ссылка.Дата,
	 |	Расшифровка.СтавкаНДСНеПодтверждена0,
	 |	ОсновныеДанные.СчетФактура.Дата,
	 |	Расшифровка.ДокументОтгрузки.Дата,
	 |	Расшифровка.ДокументОплаты.Дата,
	 |	ОсновныеДанные.КодВидаОперации
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки";
		 
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС по авансам полученным"
//
Функция ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент КАК Покупатель,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	Расшифровка.ВидЦенности,
	 |	СУММА(Расшифровка.НДС) КАК НДС,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	 |	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	 |	Расшифровка.СтавкаНДС,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	 |	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	 |	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	 |	СУММА(Расшифровка.НДСПредъявлено) КАК НДСПредъявлено,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	 |	СУММА(Расшифровка.НДСПредъявлено0) КАК НДСПредъявлено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	 |	ОсновныеДанные.ВалютаАванса,
	 |	СУММА(Расшифровка.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	 |	ОсновныеДанные.СчетФактура КАК СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДатаОплаты,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	 |	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	 |	СУММА(ВЫБОР
	 |			КОГДА Расшифровка.ВалютнаяСуммаСНДС = 0
	 |				ТОГДА 1
	 |			ИНАЧЕ (Расшифровка.СуммаБезНДС + Расшифровка.НДС) / Расшифровка.ВалютнаяСуммаСНДС
	 |		КОНЕЦ) КАК КурсАванса,
	 |	ОсновныеДанные.КодВидаОперации КАК КодВидаОперации
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Расшифровка.ВидЦенности,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.КлючСтроки,
	 |	Расшифровка.СтавкаНДС,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	ОсновныеДанные.ВалютаАванса,
	 |	Расшифровка.ВалютнаяСуммаСНДС,
	 |	ОсновныеДанные.СчетФактура,
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ДокументОтгрузки.Дата,
	 |	ОсновныеДанные.Ссылка.Дата,
	 |	ОсновныеДанные.СчетФактура.Дата,
	 |	Расшифровка.ДокументОтгрузки.Дата,
	 |	ОсновныеДанные.КодВидаОперации
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки";
		 
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаРасчетов, ТаблицаПоДвижениям, Отказ,Заголовок)

	Если ТаблицаДокумента.Количество() = 0 И ТаблицаРасчетов.Количество() = 0 И ТаблицаПоДвижениям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		Если СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ, Заголовок);
		КонецЕсли; 
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);

		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
		Если СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ, Заголовок);
		КонецЕсли;
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		Если СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами Тогда
			СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок);
		КонецЕсли;
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
	КонецЕсли;
	
	РегистрацияСчетовФактур(СтруктураШапкиДокумента,Отказ,Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из обработчика события "ПослеЗаписи".
// Осуществляет обновление ссылок на текущий документ у документов
// "Отражение поступления товаров и услуг для НДС", "Отражение 
// реализации товаров и услуг для НДС" и "Счет-фактура выданный"
// выбранных в табличной части.
//
Процедура ОбновитьСсылкиВПодчиненныхДокументах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура.ДокументОснование
	|		КОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|				ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|			ТОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура.РасчетныйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОснованиеСФ,
	|	ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура
	|ИЗ
	|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
	|ГДЕ
	|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка = &ТекущийДокумент
	|	И (НЕ ВЫБОР
	|				КОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура.ДокументОснование = &ТекущийДокумент
	|				КОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
	|						ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
	|					ТОГДА ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура.РасчетныйДокумент = &ТекущийДокумент
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)";

	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
    НекорректныеОснования = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для Каждого СтрокаСчета Из НекорректныеОснования Цикл
		
		ТекСФ = СтрокаСчета.СчетФактура;
		
		Если ТекСФ <> Неопределено Тогда
			ТекСФ = ТекСФ.ПолучитьОбъект(); 
			
			Если ТипЗнч(ТекСФ) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
				ТекСФ.ДокументОснование = Ссылка;
			ИначеЕсли ТипЗнч(ТекСФ) = Тип("ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС") Тогда
				ТекСФ.РасчетныйДокумент = Ссылка;
			ИначеЕсли ТипЗнч(ТекСФ) = Тип("ДокументОбъект.ОтражениеПоступленияТоваровИУслугНДС") Тогда
				ТекСФ.РасчетныйДокумент = Ссылка;
			КонецЕсли;
		
			ТекСФ.Записать();
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования движения по НДС предъявленному постащиком
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок)
	
	ДвиженияНДСПредъявленный = Движения.НДСПредъявленный;
	
	ТаблицаДвиженийНДСПредъявленный = ДвиженияНДСПредъявленный.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьПриход();
		
	КонецЕсли;	
	
	// НДС включенный в стоимость
	ТаблицаДвиженийНДСПредъявленный.Очистить();
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
	ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "Событие");
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьРасход();
		
	КонецЕсли;	
	
	// НДС принятый к вычету
	ТаблицаДвиженийНДСПредъявленный.Очистить();

	ТаблицаКВычету = ТаблицаПоДвижениям.Скопировать();
	ТаблицаКВычету.Свернуть("Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДатаСобытия",
							"СуммаБезНДСПредъявлено, НДСПредъявлено
							|, СуммаБезНДСПредъявлено0, НДСПредъявлено0
							|, СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0");
							
	// НДС принятый к вычету						
	ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
	ТаблицаКВычету.Колонки.НДСПредъявлено.Имя = "НДС";
	ТаблицаКВычету.Колонки.Добавить("Событие");
	ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	
	// НДС по ставке 0% принятый к вычету
	ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
	ТаблицаКВычету.Колонки.Удалить("НДС");
	ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
	ТаблицаКВычету.Колонки.НДСПредъявлено0.Имя = "НДС";
	ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	
	// НДС по ставке 0% принятый к вычету (не подтверждено)
	ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
	ТаблицаКВычету.Колонки.Удалить("НДС");
	ТаблицаКВычету.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
	ТаблицаКВычету.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
	ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьРасход();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС включенному в стоимость
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость;
	
	ТаблицаДвиженийНДСВключенныйВСтоимость = ДвиженияНДСВключенныйВСтоимость.ВыгрузитьКолонки();
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСВключенныйВСтоимость);
	Если Не Отказ Тогда
		
		ДвиженияНДСВключенныйВСтоимость.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвиженийНДСВключенныйВСтоимость;
		ДвиженияНДСВключенныйВСтоимость.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС расчеты с поставщиками
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей_НДСРасчетыСПоставщиками = Движения.НДСРасчетыСПоставщиками;
	
	ТаблицаДвижений_НДСРасчетыСПоставщиками = НаборЗаписей_НДСРасчетыСПоставщиками.Выгрузить();
	// Долг перед поставщиком
	ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();

	СтрокиРасчетов = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Ложь));
	
	Для Каждого СтрокаТаблицы из СтрокиРасчетов Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация			= СтрокаТаблицы.Организация;
		СтрокаДвижения.Поставщик			= СтрокаТаблицы.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента	= СтрокаТаблицы.ДоговорКонтрагента;
		СтрокаДвижения.ВалютаРасчетов		= СтрокаТаблицы.ВалютаВзаиморасчетов;
		СтрокаДвижения.ВалютнаяСумма		= СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
		СтрокаДвижения.Документ				= СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.Сделка				= СтрокаТаблицы.Сделка;
		СтрокаДвижения.РасчетыСБюджетом		= СтрокаТаблицы.РасчетыСБюджетом;
		СтрокаДвижения.Сумма				= СтрокаТаблицы.СуммаВзаиморасчетов;
		СтрокаДвижения.ДатаСобытия			= СтрокаТаблицы.СчетФактураДата;
																		
	КонецЦикла;
	
	// Удаление строк с пустой суммой
	Счетчик = ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвижений_НДСРасчетыСПоставщиками[Счетчик].Сумма = 0) Тогда
			ТаблицаДвижений_НДСРасчетыСПоставщиками.Удалить(ТаблицаДвижений_НДСРасчетыСПоставщиками[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() = 0 Тогда
		
		НаборЗаписей_НДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		НаборЗаписей_НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		НаборЗаписей_НДСРасчетыСПоставщиками.ВыполнитьПриход();
		
	КонецЕсли;
	
	ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
	
	// Движения по авансам выданным
	СтрокиАванса = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Истина));
	Для Каждого СтрокаТаблицы Из СтрокиАванса Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
		СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
		СтрокаДвижения.Поставщик = СтрокаТаблицы.Контрагент;
		СтрокаДвижения.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		СтрокаДвижения.Документ = СтрокаТаблицы.ДокументОплаты;
		СтрокаДвижения.Сделка = СтрокаТаблицы.Сделка;
		СтрокаДвижения.РасчетыСБюджетом = Ложь;
		СтрокаДвижения.ВалютаРасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
		СтрокаДвижения.Сумма = СтрокаТаблицы.СуммаВзаиморасчетов;
		СтрокаДвижения.ВалютнаяСумма = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
		СтрокаДвижения.ДатаСобытия = СтрокаТаблицы.ДокументОплатыДата;
		
	КонецЦикла;
	
	Если Не ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество() = 0 Тогда
		
		НаборЗаписей_НДСРасчетыСПоставщиками.мПериод = СтруктураШапкиДокумента.Дата;
		НаборЗаписей_НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		НаборЗаписей_НДСРасчетыСПоставщиками.ВыполнитьРасход();
		
	КонецЕсли;
	
	// Распределенный НДС
	НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам;
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.Выгрузить();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();
	
	Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
		СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
		СтрокаДвижения.СчетФактура = СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.ДокументОплаты = ?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты), СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
		
		Если СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			
			СтрокаДвижения.РасчетыСБюджетом = Истина;
			РаспределеннаяСумма = СтрокаТаблицы.НДСОплата;
			
		Иначе
											
			СтрокаДвижения.РасчетыСБюджетом = Ложь;
			РаспределеннаяСумма = СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата;
			
		КонецЕсли;
		
		СтрокаДвижения.РаспределеннаяСумма = РаспределеннаяСумма;
		
		СтрокаДвижения.ДатаСобытия = ?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты), 
										СтрокаТаблицы.СчетФактураДата, 
										СтрокаТаблицы.ДокументОплатыДата);
																		
	КонецЦикла;
	
	// Удаление строка с пустой распределенной суммой
	Счетчик = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[Счетчик].РаспределеннаяСумма = 0) Тогда
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Удалить(ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество() = 0 Тогда
		
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьПриход();
		
	КонецЕсли;
	
	// НДС к вычету
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();
	
	Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
		
		Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
		СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
		СтрокаДвижения.СчетФактура = СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.ДокументОплаты = ?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты), СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
		
		Если Не СтрокаТаблицы.ДоговорКонтрагента.УчетАгентскогоНДС Тогда
			СтрокаДвижения.РасчетыСБюджетом = Ложь;
			РаспределеннаяСумма = СтрокаТаблицы.СуммаБезНДСПредъявлено + СтрокаТаблицы.НДСПредъявлено + 
							СтрокаТаблицы.СуммаБезНДСПредъявлено0 + СтрокаТаблицы.НДСПредъявлено0 + 
							СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0 + СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
		Иначе
			СтрокаДвижения.РасчетыСБюджетом = Истина;
			РаспределеннаяСумма = СтрокаТаблицы.НДСПредъявлено + 
												СтрокаТаблицы.НДСПредъявлено0 + 
												СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
		КонецЕсли;
		
		СтрокаДвижения.РаспределеннаяСумма = РаспределеннаяСумма;
		СтрокаДвижения.ДатаСобытия = СтруктураШапкиДокумента.Дата;
																	
	КонецЦикла;
	// Удаление строка с пустой распределенной суммой
	Счетчик = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[Счетчик].РаспределеннаяСумма = 0) Тогда
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Удалить(ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество() = 0 Тогда
		
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьРасход();
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура формирования движения по НДС предъявленный, реализация 0%
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0;
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = ДвиженияНДСПредъявленныйРеализация0.ВыгрузитьКолонки(); 
			
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтавка0;
			СтрокаТаблицы.НДС			= СтрокаТаблицы.НДССтавка0;
			СтрокаТаблицы.ДатаСобытия 	= ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
											СтруктураШапкиДокумента.Дата, 
											СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным  Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСОплата;
			СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
											СтруктураШапкиДокумента.Дата, 
											СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	КонецЕсли;							
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	Если Не Отказ Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
			
	КонецЕсли;
		
	// Движение по НДС по ставке 0% подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
										СтруктураШапкиДокумента.Дата, 
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0, "Событие");
		
	Если Не Отказ Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
			
	КонецЕсли;	
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
		
	Если Не Отказ Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
			
	КонецЕсли;	
		
	// Движение по НДС по ставке 0% не подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
										СтруктураШапкиДокумента.Дата, 
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0, "Событие");
		
	Если Не Отказ Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
			
	КонецЕсли;	
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
		
	Если Не Отказ Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
			
	КонецЕсли;	
		
	// Движение по НДС по ставке 0% предъявлена к вычету

	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявлено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявлено0;
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		
	Если Не Отказ Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
			
	КонецЕсли;
	// Движение по НДС по ставке 0% не подтверждено предъявлена к вычету

	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		
	Если Не Отказ Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС записи книги покупок
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок;
	
	ТаблицаДвиженийНДСЗаписиКнигиПокупок = ДвиженияНДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ТаблицаЗаписей = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки.Покупатель.Имя = "Поставщик";
	КонецЕсли;
	
	КолонкиГруппировки 	= "";
	КолонкиСуммирования	= "СуммаБезНДСПредъявлено0, НДСПредъявлено0, СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0";
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, КодВидаОперации, СтавкаНДС, Поставщик, ДокументОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСПредъявлено, НДСПредъявлено"; 
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки["ДоговорКонтрагента"].Имя = "ДоговорАванса";
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДоговорАванса";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСОплата, НДСОплата";
	КонецЕсли;
	
	ТаблицаЗаписей.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	ТаблицаЗаписей.Колонки.Добавить("Событие");
	
	Если не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявлено.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		
	Иначе
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСОплата.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСОплата.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
		Для каждого СтрокаЗаписи Из ТаблицаЗаписей Цикл
			Если не СтрокаЗаписи.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 
				и не (СтрокаЗаписи.СуммаБезНДС = 0 и СтрокаЗаписи.НДС = 0)
				Тогда
				СтрокаКниги = ТаблицаДвиженийНДСЗаписиКнигиПокупок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКниги,СтрокаЗаписи);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	// НДС по ставке 0% принятый к вычету
	ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
	ТаблицаЗаписей.Колонки.Удалить("НДС");
	ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
	ТаблицаЗаписей.Колонки.НДСПредъявлено0.Имя = "НДС";
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	// НДС по ставке 0% (не подтверждено) принятый к вычету
	ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
	ТаблицаЗаписей.Колонки.Удалить("НДС");
	ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
	ТаблицаЗаписей.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки["ДоговорАванса"].Имя = "ДоговорКонтрагента";
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСЗаписиКнигиПокупок.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПокупок;
		ДвиженияНДСЗаписиКнигиПокупок.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС записи книги покупок
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж;
	
	ТаблицаДвиженийНДСЗаписиКнигиПродаж = ДвиженияНДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ТаблицаПоДвижениям.Колонки["ДоговорКонтрагента"].Имя = "ДоговорАванса";
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		ТаблицаПоДвижениям.Колонки["ДоговорАванса"     ].Имя = "ДоговорКонтрагента";
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			
			СтрокаДвижения.ДокументОплаты 	= СтрокаДвижения.СчетФактура;
			СтрокаДвижения.ДатаОплаты		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
			СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПолученАванс;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			ОшибкаПолученияУчетнойПолитики = Ложь;
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактура.Дата), ОшибкаПолученияУчетнойПолитики, СтруктураШапкиДокумента.Организация, "Нал");
			
			Если ОшибкаПолученияУчетнойПолитики Тогда
				// По умолчанию - по отгрузке. 
				// Сообщение об ошибке при получении учетной политики выданется пользователю из тела процедуры получения.
				МоментОпределенияНалоговойБазыНДСДляСФ = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
			Иначе
				МоментОпределенияНалоговойБазыНДСДляСФ = УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС;
			КонецЕсли; 
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС 				= СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС 		= СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОплатыДата);
				СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактураДата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				
				СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				СтрокаДвижения.КодВидаОперации	= СтрокаТаблицы.КодВидаОперации;
				
			Иначе
				
				Если МоментОпределенияНалоговойБазыНДСДляСФ = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
					СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
					СтрокаДвижения.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДСОплата;
					СтрокаДвижения.НДС 				= СтрокаТаблицы.НДСОплата;
					СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОплатыДата);
					СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактураДата;
					СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				Иначе
					СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
					СтрокаДвижения.СуммаБезНДС 		= СтрокаДвижения.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСОплата;
					СтрокаДвижения.НДС 				= СтрокаДвижения.НДС - СтрокаТаблицы.НДСОплата;
					Если ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты) Тогда
						Если СтрокаТаблицы.СчетФактураДата < СтрокаТаблицы.ДокументОплатыДата Тогда
							СтрокаДвижения.ДокументОплаты = Неопределено;
						КонецЕсли;  
					КонецЕсли; 
					СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактураДата;
					СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				КонецЕсли;
				СтрокаДвижения.КодВидаОперации = СтрокаТаблицы.КодВидаОперации;
				
			КонецЕсли;
		
        КонецЦикла;
			
	КонецЕсли;
			
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПродаж);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСЗаписиКнигиПродаж.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПродаж;
		ДвиженияНДСЗаписиКнигиПродаж.ДобавитьДвижение();
		
	КонецЕсли;	
		
	
КонецПроцедуры

// Процедура формирования движения по НДС начисленный
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
    ДвиженияНДСНачисленный = Движения.НДСНачисленный;
	
	ТаблицаДвиженийНДСНачисленный = ДвиженияНДСНачисленный.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		// Авансы
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		ТаблицаДвижений.Колонки["ДоговорКонтрагента"].Имя = "ДоговорАванса";
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвижений.Колонки["ДоговорАванса"     ].Имя = "ДоговорКонтрагента";
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСсАвансов, "ВидНачисления");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные , "ВидЦенности");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПолученАванс, "Событие");
		Если Не Отказ и ТаблицаДвиженийНДСНачисленный.Количество()>0 Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;
	Иначе
		// Продажа
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСНачисленный);
		// Начислние по факту реализации
		Для Каждого СтрокаДвижения из ТаблицаДвиженийНДСНачисленный Цикл
			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			ИначеЕсли СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			Иначе
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
			КонецЕсли;	
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
		КонецЦикла;
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		// Не подтверждение 0%
		ТаблицаДвиженийНДСНачисленный.Очистить();
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		СтрокиКУдалению = Новый Массив();
				
		Для Каждого СтрокаТаблицы из ТаблицаДвижений Цикл
			Если (Не СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Или (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 = 0) Или 
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.СуммаБезНДС = - (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0);
				СтрокаТаблицы.НДС = 0;
				СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),
														СтрокаТаблицы.СчетФактура.Дата,
														СтрокаТаблицы.ДокументОплаты.Дата);
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
				
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);

		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл;
			СтрокаТаблицы.СуммаБезНДС	= СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаТаблицы.НДС 			= СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаТаблицы.СтавкаНДС		= СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.Реализация0, "ВидНачисления");
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
	
		// Списание начисления по факту подтверждения или по другим причинам
		ТаблицаДвиженийНДСНачисленный.Очистить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			ОшибкаПолученияУчетнойПолитики = Ложь;
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактура.Дата), ОшибкаПолученияУчетнойПолитики, СтруктураШапкиДокумента.Организация, "Нал");
			
			Если ОшибкаПолученияУчетнойПолитики Тогда
				// По умолчанию - по отгрузке. 
				// Сообщение об ошибке при получении учетной политики выданется пользователю из тела процедуры получения.
				МоментОпределенияНалоговойБазыНДСДляСФ = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
			Иначе
				МоментОпределенияНалоговойБазыНДСДляСФ = УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС;
			КонецЕсли; 
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС		= СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС				= СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС		= СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ВидНачисления	= Перечисления.НДСВидНачисления.Реализация0;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС		= СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС				= СтрокаТаблицы.НДСПодтверждено0;
				СтрокаДвижения.ВидНачисления	= Перечисления.НДСВидНачисления.Реализация0;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				
			ИначеЕсли МоментОпределенияНалоговойБазыНДСДляСФ = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС		= СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС				= СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ВидНачисления	= ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				                                Перечисления.НДСВидНачисления.РеализацияБезНДС,
												Перечисления.НДСВидНачисления.РеализацияСНДС);
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Оплата;
			Иначе
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				                                Перечисления.НДСВидНачисления.РеализацияБезНДС,
												Перечисления.НДСВидНачисления.РеализацияСНДС);
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
			КонецЕсли;
		
        КонецЦикла;
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		
		Если Не Отказ Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС реализация 0%
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
    ДвиженияНДСРеализация0 = Движения.НДСРеализация0;
	
	ТаблицаДвиженийНДСРеализация0 = ДвиженияНДСРеализация0.ВыгрузитьКолонки();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Счетчик = ТаблицаДвижений.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если ТаблицаДвижений[Счетчик].СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Или 
			(ТаблицаДвижений[Счетчик].СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(ТаблицаДвижений[Счетчик].СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			ТаблицаДвижений.Удалить(ТаблицаДвижений[Счетчик]);
		Иначе	
			ТаблицаДвижений[Счетчик].ДатаСобытия = ?(НЕ ЗначениеЗаполнено(ТаблицаДвижений[Счетчик].ДокументОтгрузки),
														СтруктураШапкиДокумента.Дата,
														ТаблицаДвижений[Счетчик].ДокументОтгрузки);
		КонецЕсли;
	КонецЦикла;
	
	// Ожидается подтверждение ставки 0%
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	Если Не Отказ Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
										СтруктураШапкиДокумента.Дата,
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% не подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.НДС = 0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
										СтруктураШапкиДокумента.Дата,
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
										СтруктураШапкиДокумента.Дата,
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не Отказ Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС	= СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаДвижения.НДС			= СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаДвижения.СтавкаНДС	= СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			СтрокаДвижения.Состояние	= Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС	= СтрокаТаблицы.СуммаБезНДСПодтверждено0;
			СтрокаДвижения.НДС			= СтрокаТаблицы.НДСПодтверждено0;
			СтрокаДвижения.Состояние	= Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
			СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				
		КонецЕсли;
		
	КонецЦикла;
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
		
	Если Не Отказ Тогда
			
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
			
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС расчеты с покупателями
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПокупателями(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок)
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ДвиженияНДСРасчетыСПокупателями = Движения.НДСРасчетыСПокупателями;
	
	ТаблицаДвиженийНДСРасчетыСПокупателями = ДвиженияНДСРасчетыСПокупателями.Выгрузить();
	
	// Долг покупателя
	ТаблицаДвиженийНДСРасчетыСПокупателями.Очистить();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокиАванса = ТаблицаРасчетов.НайтиСтроки(Новый Структура("Аванс", Истина));
		
		Для Каждого СтрокаТаблицы из СтрокиАванса Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
			СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
			СтрокаДвижения.Покупатель = СтрокаТаблицы.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
			СтрокаДвижения.Документ = СтрокаТаблицы.ДокументОплаты;
			СтрокаДвижения.Сделка = СтрокаТаблицы.Сделка;
			СтрокаДвижения.ВалютаРасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
			СтрокаДвижения.Сумма = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаДвижения.ВалютнаяСумма = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
			СтрокаДвижения.ДатаСобытия = ?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),
										СтруктураШапкиДокумента.Дата,
										СтрокаТаблицы.ДокументОплатыДата);
			
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы из ТаблицаРасчетов Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРасчетыСПокупателями.Добавить();
			СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
			СтрокаДвижения.Покупатель = СтрокаТаблицы.Контрагент;
			СтрокаДвижения.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
			СтрокаДвижения.Документ = СтрокаТаблицы.СчетФактура;
			СтрокаДвижения.Сделка = СтрокаТаблицы.Сделка;
			СтрокаДвижения.ВалютаРасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
			СтрокаДвижения.Сумма = СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаДвижения.ВалютнаяСумма = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
			СтрокаДвижения.ДатаСобытия = СтрокаТаблицы.СчетФактураДата;
			
		КонецЦикла;
	КонецЕсли;
	
	// Удаление строк с пустой суммой
	Счетчик = ТаблицаДвиженийНДСРасчетыСПокупателями.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик].Сумма = 0) Тогда
			ТаблицаДвиженийНДСРасчетыСПокупателями.Удалить(ТаблицаДвиженийНДСРасчетыСПокупателями[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаДвиженийНДСРасчетыСПокупателями.Количество() = 0 Тогда
		
		ДвиженияНДСРасчетыСПокупателями.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвиженийНДСРасчетыСПокупателями;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			ДвиженияНДСРасчетыСПокупателями.ВыполнитьРасход();
		Иначе
			ДвиженияНДСРасчетыСПокупателями.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
	
	// Распределенный НДС
	Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей;
		
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
		
		Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
			СтрокаДвижения.СчетФактура = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.ДокументОтгрузки, СтрокаТаблицы.СчетФактура);
			СтрокаДвижения.ДокументОплаты = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
			СтрокаДвижения.РаспределеннаяСумма = СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата;
			СтрокаДвижения.ДатаСобытия = ?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),СтрокаТаблицы.СчетФактураДата,СтрокаТаблицы.ДокументОплатыДата);
			
		КонецЦикла;
		
		// Удаление строк с пустой распределенной суммой
		Счетчик = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество();
		Пока Счетчик <> 0 Цикл
			Счетчик = Счетчик - 1;
			Если (ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей[Счетчик].РаспределеннаяСумма = 0) Тогда
				ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Удалить(ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей[Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество() = 0 Тогда
			
			НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
			НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
			НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей.ВыполнитьПриход();
			
		КонецЕсли;
		
		// НДС принятый к вычету (подтвержденный и неподтвержденный)
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
		
		Для Каждого СтрокаТаблицы из ТаблицаПоДвижениям Цикл
			
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
			СтрокаДвижения.СчетФактура = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.ДокументОтгрузки, СтрокаТаблицы.СчетФактура);
			СтрокаДвижения.ДокументОплаты = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.СчетФактура, СтрокаТаблицы.ДокументОплаты);
			Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей) И
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 и Не (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"))) Тогда
				РаспределеннаяСумма = (СтрокаТаблицы.СуммаБезНДСПодтверждено0 + СтрокаТаблицы.НДСПодтверждено0) +
				(СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0);
			Иначе
				РаспределеннаяСумма = СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата;
			КонецЕсли;
			СтрокаДвижения.РаспределеннаяСумма = РаспределеннаяСумма;
			СтрокаДвижения.ДатаСобытия = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, 
											?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
											СтрокаТаблицы.СчетФактураДата,
											СтрокаТаблицы.ДокументОтгрузкиДата), 
											?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),
											СтрокаТаблицы.СчетФактураДата,
											СтрокаТаблицы.ДокументОплатыДата));
			
			Если Не ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей) И
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 и Не (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")))) Тогда
				
				УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(Не ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактураДата), Отказ, СтруктураШапкиДокумента.Организация, "Нал",СтрокаТаблицы.СчетФактура);
				
				Если УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
					СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
					СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
					СтрокаДвижения.СчетФактура = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаблицы.ДокументОтгрузки, СтрокаТаблицы.СчетФактура);
					СтрокаДвижения.РаспределеннаяСумма  = (СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС) - (СтрокаТаблицы.СуммаБезНДСОплата + СтрокаТаблицы.НДСОплата);
					СтрокаДвижения.ДатаСобытия = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, 
													?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
													СтрокаТаблицы.СчетФактураДата,
													СтрокаТаблицы.ДокументОтгрузкиДата), 
													?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),
													СтрокаТаблицы.СчетФактураДата,
													СтрокаТаблицы.ДокументОплатыДата));
				КонецЕсли;			
			КонецЕсли;	
		КонецЦикла;
		
		// Удаление строка с пустой распределенной суммой
		Счетчик = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество();
		Пока Счетчик <> 0 Цикл
			Счетчик = Счетчик - 1;
			Если (ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей[Счетчик].РаспределеннаяСумма = 0) Тогда
				ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Удалить(ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей[Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество() = 0 Тогда
			
			НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
			НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
			НаборЗаписей_НДСУчетРаспределенныхОплатПокупателей.ВыполнитьРасход();
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура формирования движения по НДС с авансов
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	ДвиженияНДСсАвансов = Движения.НДСсАвансов;
	
	ТаблицаДвиженийНДСсАвансов = ДвиженияНДСсАвансов.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
	
	// НДС с аванса к вычету
	ТаблицаДвиженийНДСсАвансов.Очистить();
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	
	Для Каждого	СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		СтрокаТаблицы.СуммаБезНДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
									СтрокаТаблицы.СуммаБезНДСПредъявлено0 + СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0, 
									СтрокаТаблицы.СуммаБезНДСОплата);
		СтрокаТаблицы.НДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
									СтрокаТаблицы.НДСПредъявлено0 + СтрокаТаблицы.НДСПредъявленоНеПодтверждено0, 
									СтрокаТаблицы.НДСОплата);
		СтрокаТаблицы.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС,
																	мВалютаРегламентированногоУчета,
																	СтрокаТаблицы.ВалютаАванса,
																	1, СтрокаТаблицы.КурсАванса,
																	1, 1);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не Отказ Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьРасход();
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура переименовывает колонки ТЧ СуммаБезНДС и НДС и замещает их другими колонками
// Параметры:
//  ТаблицаДвижений - таблица, колонки которой требуется переименовать
//  ИмяСуммаБезНДС  - имя колонки, которая помещается в колонку СуммаБезНДС
//  ИмяНДС			- имя колонки, которая помещается в колонку НДС
//  Заменить		- если Истина, тогда колонки СуммаБезНДС и НДС замещаются, Ложь - отмена замещения
Процедура ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, ИмяСуммаБезНДС, ИмяНДС, Заменить = Истина)
	
	Если Заменить Тогда
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = "УдалитьСуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.НДС.Имя = "УдалитьНДС";
		ТаблицаПоДвижениям.Колонки[ИмяСуммаБезНДС].Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки[ИмяНДС].Имя = "НДС";
	Иначе
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = ИмяСуммаБезНДС;
		ТаблицаПоДвижениям.Колонки.НДС.Имя = ИмяНДС;
		ТаблицаПоДвижениям.Колонки.УдалитьСуммаБезНДС.Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.УдалитьНДС.Имя = "НДС";
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет из таблицы строки, в которых СуммаБезНДС и НДС равны 0
//
Процедура УдалитьПустыеДвижения(ТаблицаПоДвижениям)

	Счетчик = ТаблицаПоДвижениям.Количество();
	
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		
		Если (ТаблицаПоДвижениям[Счетчик].СуммаБезНДС = 0) И (ТаблицаПоДвижениям[Счетчик].НДС = 0) Тогда
			
			ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияСчетовФактур(СтруктураШапкиДокумента,Отказ,Заголовок)
	
	Если мПодчиненныеДокументы = Неопределено Тогда
		СформироватьСчетаФактуры(Ложь, Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.УстановитьПараметр("Таблица", мПодчиненныеДокументы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	| Поместить ПодчиненныеДокументы
	|ИЗ
	|	&Таблица КАК ПодчиненныеДокументы ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Синхронизация состояния не требуется
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодчиненныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
	|ГДЕ
	|	(ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.СчетФактураПолученный
	|			ИЛИ ПодчиненныеДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный)
	|	И ПодчиненныеДокументы.Использован";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЖурналУчетаСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
	ДвиженияЖурналУчетаСчетовФактур.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийДокумент = Выборка.Ссылка;
	
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Если ТекущийДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				ОснованияТекущегоДокумента = ТекущийДокумент.Ссылка.ДокументыОснования;
				Для Каждого СтрокаОснования ИЗ ОснованияТекущегоДокумента Цикл
					
					СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
					
					СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
					СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
					СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
					СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
					СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
					СтрокаДвижения.ЧастьЖурнала    = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
					СтрокаДвижения.ИндексСтроки    = ОснованияТекущегоДокумента.Индекс(СтрокаОснования);
					СтрокаДвижения.КодВидаОперации = ТекущийДокумент.КодВидаОперации;
					
					СтрокаДвижения.НомерСчетаФактуры = СтрокаОснования.НомерИсходногоДокумента;
					СтрокаДвижения.ДатаСчетаФактуры  = СтрокаОснования.ДатаИсходногоДокумента;
					
					СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ТекущийДокумент.НомерВходящегоДокумента;
					СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = ТекущийДокумент.ДатаВходящегоДокумента;
					
					Если ТекущийДокумент.Исправление Тогда
						СтрокаДвижения.НомерИсправленияКорректировочногоСчетаФактуры = ТекущийДокумент.НомерИсправления;
						СтрокаДвижения.ДатаИсправленияКорректировочногоСчетаФактуры  = ТекущийДокумент.ДатаИсправления;
					КонецЕсли;
					
					Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
						СтрокаДвижения.НомерИсправления = СтрокаОснования.НомерИсправленияИсходногоДокумента;
						СтрокаДвижения.ДатаИсправления  = СтрокаОснования.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
				
				СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
				СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
				СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
				СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
				СтрокаДвижения.ЧастьЖурнала    = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
				СтрокаДвижения.ИндексСтроки    = 0;
				СтрокаДвижения.КодВидаОперации = ТекущийДокумент.КодВидаОперации;
				
				СтрокаДвижения.НомерСчетаФактуры   = ТекущийДокумент.НомерВходящегоДокумента;
				СтрокаДвижения.ДатаСчетаФактуры    = ТекущийДокумент.ДатаВходящегоДокумента;
				
				Если ТекущийДокумент.Исправление Тогда
					СтрокаДвижения.НомерИсправления = ТекущийДокумент.НомерИсправления;
					СтрокаДвижения.ДатаИсправления  = ТекущийДокумент.ДатаИсправления;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			Если ТекущийДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				
				ОснованияТекущегоДокумента = ТекущийДокумент.Ссылка.ДокументыОснования;
				Для Каждого СтрокаОснования ИЗ ОснованияТекущегоДокумента Цикл
					
					СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
					
					СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
					СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
					СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
					СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
					СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
					СтрокаДвижения.КодВидаОперации = ТекущийДокумент.КодВидаОперации;
					
					Если НЕ ЗначениеЗаполнено(ТекущийДокумент.Контрагент) Тогда 
						СтрокаДвижения.Контрагент = ТекущийДокумент.Организация;
					КонецЕсли;
					
					СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
					СтрокаДвижения.ИндексСтроки = ОснованияТекущегоДокумента.Индекс(СтрокаОснования);
					
					СтрокаДвижения.НомерСчетаФактуры = СтрокаОснования.НомерИсходногоДокумента;
					СтрокаДвижения.ДатаСчетаФактуры  = СтрокаОснования.ДатаИсходногоДокумента;
					
					Если ТекущийДокумент.Исправление Тогда
						СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ТекущийДокумент.НомерИсправляемогоКорректировочногоДокумента;
						СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = ТекущийДокумент.ДатаИсправляемогоКорректировочногоДокумента;
						СтрокаДвижения.НомерИсправленияКорректировочногоСчетаФактуры = ТекущийДокумент.НомерИсправления;
						СтрокаДвижения.ДатаИсправленияКорректировочногоСчетаФактуры  = ТекущийДокумент.Дата;
					Иначе
						СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущийДокумент);
						СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = ТекущийДокумент.Дата;
					КонецЕсли;
					
					Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
						СтрокаДвижения.НомерИсправления = СтрокаОснования.НомерИсправленияИсходногоДокумента;
						СтрокаДвижения.ДатаИсправления  = СтрокаОснования.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
				
				СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
				СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
				СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
				СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
				СтрокаДвижения.КодВидаОперации = ТекущийДокумент.КодВидаОперации;
				
				Если НЕ ЗначениеЗаполнено(ТекущийДокумент.Контрагент) Тогда 
					СтрокаДвижения.Контрагент = ТекущийДокумент.Организация;
				КонецЕсли;
				
				СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
				СтрокаДвижения.ИндексСтроки = 0;
				
				Если ТекущийДокумент.Исправление Тогда
					СтрокаДвижения.НомерСчетаФактуры = ТекущийДокумент.НомерИсходногоДокумента;
					СтрокаДвижения.ДатаСчетаФактуры  = ТекущийДокумент.ДатаИсходногоДокумента;
					СтрокаДвижения.НомерИсправления  = ТекущийДокумент.НомерИсправления;
					СтрокаДвижения.ДатаИсправления   = ТекущийДокумент.Дата;
				Иначе				
					СтрокаДвижения.НомерСчетаФактуры   = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущийДокумент);
					СтрокаДвижения.ДатаСчетаФактуры    = ТекущийДокумент.Дата;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДвиженияЖурналУчетаСчетовФактур.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ

Процедура СформироватьСчетаФактуры(СоздаватьПодчиненныеДокументыОснования = Истина, ОбновитьСодержаниеПодчиненныхДокументов = Истина) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ИспользоватьДокументыРасчетов = Истина;
	Иначе
		ИспользоватьДокументыРасчетов = Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("ДанныеПоСФ", ДанныеПоСФ);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВНО_НДСДанныеПоСФ.Контрагент КАК Контрагент,
		|	ВНО_НДСДанныеПоСФ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ПредъявленСФ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПредъявленСФ,
		|	ВЫБОР
		|		КОГДА ВНО_НДСДанныеПоСФ.Исправление
		|			ТОГДА ВНО_НДСДанныеПоСФ.ДатаИсправления
		|		ИНАЧЕ ВНО_НДСДанныеПоСФ.ДатаСФ
		|	КОНЕЦ КАК ДатаСФ,
		|	ВНО_НДСДанныеПоСФ.НомерСФ КАК НомерСФКакУказан,
		|	ВНО_НДСДанныеПоСФ.ДатаПлатежноРасчетногоДокумента КАК ДатаВходящего,
		|	ВНО_НДСДанныеПоСФ.НомерПлатежноРасчетногоДокумента КАК НомерВходящегоКакУказан,
		|	ВНО_НДСДанныеПоСФ.СчетФактура КАК ТекущийДокумент,
		|	ВНО_НДСДанныеПоСФ.Сделка КАК Сделка,
		|	ВНО_НДСДанныеПоСФ.НомерСтроки КАК НомерСтроки,
		|	ВНО_НДСДанныеПоСФ.СуммаБезНДС КАК Сумма,
		|	ВНО_НДСДанныеПоСФ.НДС КАК СуммаНДС,
		|	ВНО_НДСДанныеПоСФ.КлючСтроки,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютаАванса
		|		ИНАЧЕ &ВалютаРегламентированногоУчета
		|	КОНЕЦ КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютнаяСуммаСНДС
		|		ИНАЧЕ ВНО_НДСДанныеПоСФ.СуммаБезНДС + ВНО_НДСДанныеПоСФ.НДС
		|	КОНЕЦ КАК СуммаДокумента,
		|	ВНО_НДСДанныеПоСФ.Исправление,
		|	ВНО_НДСДанныеПоСФ.НомерИсправления,
		|	ВНО_НДСДанныеПоСФ.ДатаИсправления,
		|	ВНО_НДСДанныеПоСФ.КорректировочныйСчетФактура,
		|	ВНО_НДСДанныеПоСФ.НомерИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.ДатаИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.НомерИсправленияИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.ДатаИсправленияИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.УчитыватьИсправлениеИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.ДатаСФ КАК ДатаСФВх,
		|	ВНО_НДСДанныеПоСФ.КодВидаОперации КАК КодВидаОперации
		|ПОМЕСТИТЬ ПараметрыДокументов
		|ИЗ
		|	&ДанныеПоСФ КАК ВНО_НДСДанныеПоСФ";
	Запрос.Выполнить();
	
	Запрос.Текст ="Выбрать * из ПараметрыДокументов 		
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	ПараметрыДокументов.Индексы.Добавить("ТекущийДокумент");
	
	ИспользоватьПрефиксыПриОтработкеНомеров = Не ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям;
	ПрефиксОрганизации = ?(ЗначениеЗаполнено(Организация.Префикс),Организация.Префикс,"0");
	СписокПрефиксов = новый СписокЗначений();
	
	Если ИспользоватьПрефиксыПриОтработкеНомеров Тогда
		МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		Если ВидОперации = перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			//Дополняем префиксом "А" + префикс организации
			МассивПрефиксов.Добавить("А"+ПрефиксОрганизации);
		КонецЕсли; 
		СписокПрефиксов.ЗагрузитьЗначения(МассивПрефиксов);
	КонецЕсли; 
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	КонецЦикла; 
	
	ПодчиненныеДокументы = ПолучитьТаблицуПодчиненныхДокументов(Ссылка, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	
	ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы);
	
	СокращеннаяТаблица = ПараметрыДокументов.Скопировать();
	СокращеннаяТаблица.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, Сделка, КодВидаОперации","");
	СокращеннаяТаблица.Колонки.Добавить("МассивОснований");
	СокращеннаяТаблица.Колонки.Добавить("СчетФактура");
	

	СтруктураПоискаОснования= Новый Структура("Контрагент, ДоговорКонтрагента, ДатаВходящего, НомерВходящего");//, ПредъявленСФ, ДатаСФ, НомерСФ");
	СтруктураПоискаСФ		= Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ");
	
	Для каждого СтрокаПараметров Из СокращеннаяТаблица Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего) и ПустаяСтрока(СтрокаПараметров.НомерВходящего) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСФ, СтрокаПараметров);
			СтрокиОснований = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаСФ);
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОснования, СтрокаПараметров);
			СтрокиОснований = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаОснования);
		КонецЕсли; 
		
		МассивОснований = новый Массив();
		//НоваяСтрокаОснования = Неопределено;
		Если СтрокиОснований.Количество() = 0 Тогда
			Если СоздаватьПодчиненныеДокументыОснования Тогда
		
				// Ничего не найдено. Создаем новый документ;
				Если ИспользоватьДокументыРасчетов Тогда
					ОснованиеСФ = СоздатьДокументРасчетов(СтрокаПараметров, Ссылка);
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
					Тогда
					ОснованиеСФ = СоздатьДокументОтражениеПоступленияТоваровИУслугНДС(СтрокаПараметров, Ссылка);
				Иначе
					ОснованиеСФ = СоздатьДокументОтражениеРеализацииТоваровИУслугНДС(СтрокаПараметров, Ссылка);
				КонецЕсли; 
				ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
				МассивОснований.Добавить(ОснованиеСФ.Ссылка);
				
				// Дополнит таблицу документов оснований.
				// При поиске по следующим строкам созданный документ будет использоваться
				// как прочие подчиненные
				
				НоваяСтрокаОснования = ПодчиненныеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, СтрокаПараметров);
				НоваяСтрокаОснования.ДатаСФ	= "";
				НоваяСтрокаОснования.НомерСФ= "";
				НоваяСтрокаОснования.ДокументОснование = ОснованиеСФ.Ссылка;
			КонецЕсли; 
		Иначе
			Для каждого СтрокаОснования Из СтрокиОснований Цикл
				МассивОснований.Добавить(СтрокаОснования.ДокументОснование);
			КонецЦикла; 
		КонецЕсли; 
		
		СтрокаПараметров.МассивОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОснований,Истина);
		
		Если СтрокаПараметров.ПредъявленСФ тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСФ, СтрокаПараметров);
			СтрокиСФ = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаСФ);
			Если СтрокиСФ.Количество() = 0 Тогда
				Если не СоздаватьПодчиненныеДокументыОснования и не ОбновитьСодержаниеПодчиненныхДокументов Тогда
					// Это вызов в режиме поведения или подобном ему режиме,
					// когда починенные документы не модифицируются.
					// Не создаем подчиненные счета-фактуры
				ИначеЕсли СтрокаПараметров.МассивОснований.Количество()>0 Тогда
					// Ничего не найдено.
					Если  ВидОперации = перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
						Тогда
						ОснованиеСФ = СоздатьДокументСчетФактураПолученный(СтрокаПараметров);
						ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
					Иначе
						ОснованиеСФ = СоздатьДокументСчетФактураВыданный(СтрокаПараметров, ПрефиксОрганизации);
						
						Попытка
							ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							Попытка
								Если не ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ Тогда
									ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ;
									ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
								Иначе
									ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
									ОснованиеСФ = Неопределено;
								КонецЕсли; 
							Исключение
								ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
								ОснованиеСФ = Неопределено;
							КонецПопытки; 
						КонецПопытки;
					КонецЕсли; 
					СтрокаПараметров.СчетФактура = ?(ОснованиеСФ = Неопределено, Неопределено,ОснованиеСФ.Ссылка);
					
					Если не НоваяСтрокаОснования = Неопределено Тогда
						НоваяСтрокаОснования = ПодчиненныеДокументы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, СтрокаПараметров);
					КонецЕсли;
				КонецЕсли; 
			Иначе
				СтрокаПараметров.СчетФактура = СтрокиСФ[0].СчетФактура;
			КонецЕсли;
			
			Если не НоваяСтрокаОснования = Неопределено Тогда
				НоваяСтрокаОснования.ДатаСФ	= СтрокаПараметров.ДатаСФ;
				НоваяСтрокаОснования.НомерСФ= СтрокаПараметров.НомерСФ;
				НоваяСтрокаОснования.СчетФактура = СтрокаПараметров.СчетФактура;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего");
	
	ПараметрыДокументов.Колонки.Добавить("НовоеОснование");
	ПараметрыДокументов.Колонки.Добавить("НовыйСчетФактура");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПараметров);
		СтрокиОснований = СокращеннаяТаблица.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаОснований ИЗ СтрокиОснований Цикл
			
			// Не более чем одна строка
			Если СтрокаОснований.МассивОснований.Количество() = 0 Тогда
				// Ничего не найдено.
			Иначе
				Если ЗначениеЗаполнено(СтрокаПараметров.ТекущийДокумент) Тогда
					//Ищем в массиве выбранное ранее основание. Если есть - используем его, чтобы не подменять ссылки.
					Для каждого ЭлементМассика Из СтрокаОснований.МассивОснований Цикл
						Если СтрокаПараметров.ТекущийДокумент = ЭлементМассика Тогда
							СтрокаПараметров.НовоеОснование = СтрокаПараметров.ТекущийДокумент;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
				Если Не ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) и СоздаватьПодчиненныеДокументыОснования Тогда
					СтрокаПараметров.НовоеОснование = СтрокаОснований.МассивОснований[0];
				КонецЕсли;
				СтрокаПараметров.НовыйСчетФактура = СтрокаОснований.СчетФактура;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Если ОбновитьСодержаниеПодчиненныхДокументов Тогда
		#Если Клиент Тогда
		ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования);
		#КонецЕсли
	КонецЕсли;
	
	мПодчиненныеДокументы = Новый ТаблицаЗначений();
	мПодчиненныеДокументы.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(ПодчиненныеДокументы.Колонки.ДокументОснование.ТипЗначения,ПодчиненныеДокументы.Колонки.СчетФактура.ТипЗначения.Типы()));
	мПодчиненныеДокументы.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	мПодчиненныеДокументы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ИспользуемыеПодчиненныеДокументы = Новый списокЗначений();
	ИспользуемыеПодчиненныеДокументы.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовоеОснование"),Истина));
	
	ИспользуемыеСчетаФактуры = Новый списокЗначений();
	ИспользуемыеСчетаФактуры.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовыйСчетФактура"),Истина));
	
	ВсеПодчиненныеДокументы = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("ДокументОснование"),Истина);
	Для каждого Документ Из ВсеПодчиненныеДокументы Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеПодчиненныеДокументы.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
	
	ВсеПодчиненныеСчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого Документ Из ВсеПодчиненныеСчетаФактуры Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеСчетаФактуры.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#Если Клиент Тогда
Процедура ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования) Экспорт
		
	//Обновление документов-оснований
	ДеревоДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовоеОснование","СуммаДокумента, Сумма, СуммаНДС");
	ЗаголовокДокумента = СокрЛП("Ввод начальных остатков НДС "+Номер+" от "+Формат(Дата,"ДЛФ =Д"));
	
	РасшифровкаСФ = Неопределено;
	Для каждого СтрокаДокументаОснования Из ДеревоДокументов.Строки Цикл
		Если не ЗначениеЗаполнено(СтрокаДокументаОснования.НовоеОснование) Тогда
			Если СоздаватьПодчиненныеДокументыОснования Тогда
				Для каждого СтрокаДАнных Из СтрокаДокументаОснования.Строки Цикл
					ДанныеПоСФ[СтрокаДанных.НомерСтроки-1].СчетФактура = Неопределено;
				КонецЦикла; 
			КонецЕсли; 
			
			Продолжить;
		КонецЕсли; 
		
		ОснованиеОбъект = СтрокаДокументаОснования.НовоеОснование.ПолучитьОбъект();
		СтрокаПараметров = СтрокаДокументаОснования.Строки[0];
		Если не ОснованиеОбъект.Организация = Организация Тогда
			ОснованиеОбъект.Номер = "";
		КонецЕсли; 
		
		ОснованиеОбъект.Организация				= Организация;
		
		СтараяДата = ОснованиеОбъект.Дата;
		ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,Дата));
		РаботаСДиалогами.ПроверитьНомерДокумента(ОснованиеОбъект, СтараяДата);			
		
		ОснованиеОбъект.Контрагент				= СтрокаПараметров.Контрагент;
		ОснованиеОбъект.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
		ОснованиеОбъект.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
		ОснованиеОбъект.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	
		ОснованиеОбъект.СуммаДокумента			= СтрокаДокументаОснования.СуммаДокумента;
		ОснованиеОбъект.ВалютаДокумента			= СтрокаПараметров.ВалютаДокумента;
		ОснованиеОбъект.Комментарий				= "Создан автоматически документом <"+ЗаголовокДокумента+">";
		ОснованиеОбъект.ПометкаУдаления			= Ложь;	
		
		Если ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
			или ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			ОснованиеОбъект.РасчетныйДокумент		= Ссылка;
			ОснованиеОбъект.ТоварыИУслуги.Очистить();
		Иначе
			ОснованиеОбъект.ДокументОснование		= Ссылка;
		КонецЕсли;
			
		Для каждого СтрокаПараметров Из СтрокаДокументаОснования.Строки Цикл
			Если СоздаватьПодчиненныеДокументыОснования Тогда
				ДанныеПоСФ[СтрокаПараметров.НомерСтроки-1].СчетФактура = СтрокаДокументаОснования.НовоеОснование;
			КонецЕсли; 
			Если ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
				ИЛИ ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
				Если РасшифровкаСФ= Неопределено Тогда
					РасшифровкаСФ = ДополнительныеСведения.Выгрузить(); 
					РасшифровкаСФ.Индексы.Добавить("КлючСтроки");
				КонецЕсли;
				
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки( Новый структура("КлючСтроки",СтрокаПараметров.КлючСтроки));
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					Если СтрокаРасшифровки.СуммаБезНДС = 0 и СтрокаРасшифровки.НДС = 0 тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаТУ = ОснованиеОбъект.ТоварыИУслуги.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТУ ,СтрокаРасшифровки);
					НоваяСтрокаТУ.Сумма = СтрокаРасшифровки.СуммаБезНДС;
					НоваяСтрокаТУ.СуммаНДС = СтрокаРасшифровки.НДС;
				КонецЦикла; 

			КонецЕсли;
		КонецЦикла; 
		Попытка
		    ОснованиеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Для каждого СтрокаТабличнойЧасти Из СтрокаДокументаОснования.Строки Цикл
				ОбщегоНазначения.СообщитьОбОшибке("Для строки №" + СтрокаТабличнойЧасти.НомерСтроки + " не удалось обновить параметры документа-основания счета-фактуры.");
			КонецЦикла; 
		Конецпопытки;
		
	КонецЦикла;
	
	//Обновление счетов-фаткур
	ПараметрыДокументов.Свернуть("НовыйСчетФактура,Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ,ДатаСФВх, НомерСФ,НовоеОснование, ВалютаДокумента,НомерСтроки, КлючСтроки, ДатаВходящего, НомерВходящего, Сделка, КорректировочныйСчетФактура, НомерИсходногоДокумента, ДатаИсходногоДокумента, Исправление, НомерИсправления, ДатаИсправления, УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента", "Сумма, СуммаНДС, СуммаДокумента");
  	ДеревоДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовыйСчетФактура","СуммаДокумента, Сумма, СуммаНДС");

	Для каждого СтрокаДокументаОснования Из ДеревоДокументов.Строки Цикл
		Если не СтрокаДокументаОснования.Строки[0].ПредъявленСФ 
			или не ЗначениеЗаполнено(СтрокаДокументаОснования.НовыйСчетФактура) Тогда
			Продолжить;
		КонецЕсли; 
		
		
		ОснованиеОбъект = СтрокаДокументаОснования.НовыйСчетФактура.ПолучитьОбъект();
		СтрокаПараметров = СтрокаДокументаОснования.Строки[0];
		
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			ОснованиеОбъект.Организация				= Организация;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
		Иначе
			Если не ОснованиеОбъект.Организация = Организация Тогда
				ОснованиеОбъект.Номер = "";
			КонецЕсли; 
			
			ОснованиеОбъект.Организация				= Организация;
			СтараяДата = ОснованиеОбъект.Дата;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
			РаботаСДиалогами.ПроверитьНомерДокумента(ОснованиеОбъект, СтараяДата);
		КонецЕсли; 
		
		ОснованиеОбъект.Контрагент				= СтрокаПараметров.Контрагент;
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) <> Тип("ДокументСсылка.СчетФактураПолученный") тогда
			ОснованиеОбъект.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
		КонецЕсли;
	
		ОснованиеОбъект.СуммаДокумента			= СтрокаДокументаОснования.СуммаДокумента;
		ОснованиеОбъект.ВалютаДокумента			= СтрокаПараметров.ВалютаДокумента;
		ОснованиеОбъект.Комментарий				= "Создан автоматически документом <"+ЗаголовокДокумента+">";
		ОснованиеОбъект.ПометкаУдаления			= Ложь;
		
		ОснованиеОбъект.СформированПриВводеНачальныхОстатковНДС = Истина;
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ОснованиеОбъект.ВидСчетаФактуры = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
															, Перечисления.ВидСчетаФактурыВыставленного.НаАванс
															, Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
			
			Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
				ОснованиеОбъект.Сумма		= СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;
				ОснованиеОбъект.СуммаНДС	= СтрокаДокументаОснования.СуммаНДС;
				
				ОснованиеОбъект.Авансы.Очистить();
				
				Если РасшифровкаСФ = Неопределено Тогда
					РасшифровкаСФ = ДополнительныеСведения.Выгрузить(); 
					РасшифровкаСФ.Индексы.Добавить("КлючСтроки");
				КонецЕсли;
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки( Новый структура("КлючСтроки",СтрокаДокументаОснования.Строки[0].КлючСтроки));
				Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ОснованиеОбъект.ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаРасшифровки.СуммаБезНДС + СтрокаРасшифровки.НДС, 
																	СтрокаРасшифровки.НДС, 
																	СтрокаРасшифровки.СтавкаНДС, СтрокаДокументаОснования.Строки[0].Сделка),
																	ОснованиеОбъект.Авансы);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОснованиеОбъект.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФВх;
			ОснованиеОбъект.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
		КонецЕсли; 
		//ОснованиеОбъект.ДокументыОснования.Очистить();
		//
		//Для каждого СтрокаПараметров Из СтрокаДокументаОснования.Строки Цикл
		//	Если ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) 
		//		и ОснованиеОбъект.ДокументыОснования.Найти(СтрокаПараметров.НовоеОснование, "ДокументОснование") = неопределено Тогда
		//		ОснованиеОбъект.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.НовоеОснование;
		//	КонецЕсли; 
		//КонецЦикла; 
		
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			
			ОснованиеОбъект.ДатаНомерДокументовОплаты.Очистить();
			ОснованиеОбъект.ДатаНомерДокументовОплаты.Добавить();
			
			Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
				ОснованиеОбъект.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = СтрокаПараметров.ДатаВходящего;
				ОснованиеОбъект.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = СтрокаПараметров.НомерВходящего;
				
				ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= СтрокаПараметров.ДатаВходящего;
				ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= СтрокаПараметров.НомерВходящего;
			Иначе
				ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= Неопределено;
				ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		ОснованиеОбъект.Исправление		 = СтрокаПараметров.Исправление;
		ОснованиеОбъект.НомерИсправления = СтрокаПараметров.НомерИсправления;
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ОснованиеОбъект.ДатаИсправления = СтрокаПараметров.ДатаИсправления;
			Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			Иначе
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
			
			Если НЕ ОснованиеОбъект.Исправление Тогда
				ОснованиеОбъект.НомерИсправления = 0;
				ОснованиеОбъект.ДатаИсправления = "";				
			КонецЕсли;
		Иначе
			Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				
				ОснованиеОбъект.ДатаИсправляемогоКорректировочногоДокумента  =  СтрокаПараметров.ДатаСФ;
				ОснованиеОбъект.НомерИсправляемогоКорректировочногоДокумента =  СтрокаПараметров.НомерСФ;
			Иначе
				ОснованиеОбъект.ВидСчетаФактуры = 
					?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным,
					Перечисления.ВидСчетаФактурыВыставленного.НаАванс, Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
					
				ОснованиеОбъект.НомерИсходногоДокумента		 = СтрокаПараметров.НомерСФ;
				ОснованиеОбъект.ДатаИсходногоДокумента		 = СтрокаПараметров.ДатаСФВх;
			КонецЕсли;	
			
			Если НЕ ОснованиеОбъект.Исправление Тогда
				ОснованиеОбъект.НомерИсправления = 0;
			КонецЕсли;
			
		КонецЕсли;
				
		
		Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
			Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				 				 
				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
					ОснованиеОбъект.СуммаДокумента = 0;
					ОснованиеОбъект.СуммаНДСДокумента = 0;
					ОснованиеОбъект.СуммаУвеличение = 0;
					ОснованиеОбъект.СуммаНДСУвеличение = 0;
					ОснованиеОбъект.СуммаУменьшение = СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСУменьшение = СтрокаДокументаОснования.СуммаНДС;
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
					ОснованиеОбъект.СуммаДокумента = 0;
					ОснованиеОбъект.СуммаНДСДокумента = 0;
					ОснованиеОбъект.СуммаУвеличение = СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСУвеличение = СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУменьшение = 0;
					ОснованиеОбъект.СуммаНДСУменьшение = 0;
				Иначе
					ОснованиеОбъект.СуммаДокумента		= СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСДокумента	= СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУвеличение = 0;
					ОснованиеОбъект.СуммаНДСУвеличение = 0;
					ОснованиеОбъект.СуммаУменьшение = 0;
					ОснованиеОбъект.СуммаНДСУменьшение = 0;
				КонецЕсли;				
			Иначе
				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
					ОснованиеОбъект.СуммаДокумента = 0;
					ОснованиеОбъект.СуммаНДСДокумента = 0;
					ОснованиеОбъект.СуммаУвеличение = СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСУвеличение = СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУменьшение = 0;
					ОснованиеОбъект.СуммаНДСУменьшение = 0;
				Иначе
					ОснованиеОбъект.СуммаДокумента		= СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСДокумента	= СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУвеличение = 0;
					ОснованиеОбъект.СуммаНДСУвеличение = 0;
					ОснованиеОбъект.СуммаУменьшение = 0;
					ОснованиеОбъект.СуммаНДСУменьшение = 0;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			ОснованиеОбъект.СуммаДокумента		= СтрокаДокументаОснования.СуммаДокумента;
			ОснованиеОбъект.СуммаНДСДокумента	= СтрокаДокументаОснования.СуммаНДС;
			ОснованиеОбъект.СуммаУвеличение = 0;
			ОснованиеОбъект.СуммаНДСУвеличение = 0;
			ОснованиеОбъект.СуммаУменьшение = 0;
			ОснованиеОбъект.СуммаНДСУменьшение = 0;
		КонецЕсли;
		
		ОснованиеОбъект.ДокументыОснования.Очистить();
		
		Для каждого СтрокаПараметров Из СтрокаДокументаОснования.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) Тогда
				
				Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
					
					НоваяСтрока                    = ОснованиеОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование  = СтрокаПараметров.НовоеОснование;
					НоваяСтрока.НомерИсходногоДокумента = СтрокаПараметров.НомерИсходногоДокумента;
					НоваяСтрока.ДатаИсходногоДокумента  = СтрокаПараметров.ДатаИсходногоДокумента;
					НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента = СтрокаПараметров.УчитыватьИсправлениеИсходногоДокумента;
					Если СтрокаПараметров.УчитыватьИсправлениеИсходногоДокумента Тогда
						НоваяСтрока.НомерИсправленияИсходногоДокумента = СтрокаПараметров.НомерИсправленияИсходногоДокумента;
						НоваяСтрока.ДатаИсправленияИсходногоДокумента  = СтрокаПараметров.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
					Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
						Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
							НоваяСтрока.СуммаУменьшение    		= СтрокаПараметров.Сумма + СтрокаПараметров.СуммаНДС;
							НоваяСтрока.СуммаНДСУменьшение 		= СтрокаПараметров.СуммаНДС;
						ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
							НоваяСтрока.СуммаУвеличение    		= СтрокаПараметров.Сумма + СтрокаПараметров.СуммаНДС;
							НоваяСтрока.СуммаНДСУвеличение 		= СтрокаПараметров.СуммаНДС;
						КонецЕсли;				
					Иначе
						Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
							НоваяСтрока.СуммаУвеличение    		= СтрокаПараметров.Сумма + СтрокаПараметров.СуммаНДС;
							НоваяСтрока.СуммаНДСУвеличение		= СтрокаПараметров.СуммаНДС;
						КонецЕсли;	
					КонецЕсли;
					
				Иначе
					
					ОснованиеОбъект.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.НовоеОснование;
					
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла; 
		
		КолонкиГруппировок	= "ДокументОснование,НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправленияИсходногоДокумента,
		|ДатаИсправленияИсходногоДокумента,УчитыватьИсправлениеИсходногоДокумента";
		КолонкиСуммирования	= "СуммаУвеличение,СуммаУменьшение,СуммаНДСУвеличение,СуммаНДСУменьшение";
        ОснованиеОбъект.ДокументыОснования.Свернуть(КолонкиГруппировок,КолонкиСуммирования);

		//////////////////////////////////////////////////////////////////////////////////////////////////
		Попытка
			ОснованиеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Для каждого СтрокаТабличнойЧасти Из СтрокаДокументаОснования.Строки Цикл
				ОбщегоНазначения.СообщитьОбОшибке("Для строки №" + СтрокаТабличнойЧасти.НомерСтроки + " не удалось обновить параметры документа-основания счета-фактуры.");
			КонецЦикла; 
		Конецпопытки;

	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли

Функция ПолучитьТаблицуПодчиненныхДокументов(ДокументОснование, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов) экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",ДокументОснование);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодчиненныеДокументы.Контрагент,
		|	ПодчиненныеДокументы.ДоговорКонтрагента,
		|	ПодчиненныеДокументы.ДатаВходящегоДокумента КАК ДатаВходящего,
		|	ПодчиненныеДокументы.НомерВходящегоДокумента КАК НомерВходящегоКакУказан,
		|	ВЫБОР
		|		КОГДА СчетаФактуры.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПредъявленСФ,
		|	ЕСТЬNULL(СчетаФактуры.ДатаСФ, НЕОПРЕДЕЛЕНО) КАК ДатаСФ,
		|	ЕСТЬNULL(СчетаФактуры.НомерСФ, НЕОПРЕДЕЛЕНО) КАК НомерСФКакУказан,
		|	ПодчиненныеДокументы.Ссылка КАК ДокументОснование,
		|	СчетаФактуры.Ссылка КАК СчетФактура
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка КАК Ссылка,
		|		ПодчиненныйДокумент.Контрагент КАК Контрагент,
		|		ПодчиненныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ПодчиненныйДокумент.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|		ПодчиненныйДокумент.НомерВходящегоДокумента КАК НомерВходящегоДокумента
		|	ИЗ
		|		Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Контрагент,
		|		ПодчиненныйДокумент.ДоговорКонтрагента,
		|		ПодчиненныйДокумент.ДатаВходящегоДокумента,
		|		ПодчиненныйДокумент.НомерВходящегоДокумента
		|	ИЗ
		|		Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Контрагент,
		|		ПодчиненныйДокумент.ДоговорКонтрагента,
		|		ПодчиненныйДокумент.ДатаВходящегоДокумента,
		|		ПодчиненныйДокумент.НомерВходящегоДокумента
		|	ИЗ
		|		Документ.ДокументРасчетовСКонтрагентом КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.ДокументОснование = &ВНО_НДС) КАК ПодчиненныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОснованияСФ.Ссылка КАК Ссылка,
		|			НАЧАЛОПЕРИОДА(ОснованияСФ.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
		|			ОснованияСФ.Ссылка.Номер КАК НомерСФ,
		|			ОснованияСФ.ДокументОснование КАК ДокументОснование
		|		ИЗ
		|			Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеРеализацииТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ОснованияСФ.Ссылка,
		|			ВЫБОР
		|				КОГДА ОснованияСФ.Ссылка.Исправление
		|					ТОГДА ОснованияСФ.Ссылка.Дата
		|				ИНАЧЕ ОснованияСФ.Ссылка.ДатаВходящегоДокумента
		|			КОНЕЦ,
		|			ОснованияСФ.Ссылка.НомерВходящегоДокумента,
		|			ОснованияСФ.ДокументОснование
		|		ИЗ
		|			Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеПоступленияТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК СчетаФактуры
		|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактуры.ДокументОснование";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	КонецЦикла; 
	ПараметрыДокументов.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ДокументОснование, СчетФактура","");
	
	Возврат ПараметрыДокументов;
	
КонецФункции

Функция ПолучитьТаблицуИспользуемыхПодчиненныхДокументов() экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ДанныеПоСФ", ДанныеПоСФ);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ДанныеПоСФ.СчетФактура, НЕОПРЕДЕЛЕНО) КАК ДокументОснованиеНовый,
		|	ПодчиненныеДокументы.Ссылка КАК ДокументОснование,
		|	СчетаФактуры.Ссылка КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА ДанныеПоСФ.СчетФактура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	ПодчиненныеДокументы.Проведен,
		|	ПодчиненныеДокументы.ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА ДанныеПоСФ.СчетФактура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|					КОГДА СчетаФактуры.Ссылка ЕСТЬ NULL 
		|						ТОГДА ЛОЖЬ
		|					КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям)
		|							И СчетаФактуры.Ссылка ССЫЛКА Документ.СчетФактураПолученный
		|						ТОГДА ИСТИНА
		|					КОГДА (НЕ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям))
		|							И СчетаФактуры.Ссылка ССЫЛКА Документ.СчетФактураВыданный
		|						ТОГДА ВЫБОР
		|								КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|										И СчетаФактуры.НаАванс = ИСТИНА
		|									ТОГДА ИСТИНА
		|								КОГДА (НЕ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным))
		|										И (НЕ СчетаФактуры.НаАванс = ИСТИНА)
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И ДанныеПоСФ.ПредъявленСФ
		|	КОНЕЦ КАК СФИспользуется,
		|	ЕСТЬNULL(СчетаФактуры.Проведен, ЛОЖЬ) КАК СФПроведен,
		|	ЕСТЬNULL(СчетаФактуры.ПометкаУдаления, ЛОЖЬ) КАК СФПометкаУдаления,
		|	ДанныеПоСФ.Контрагент,
		|	ДанныеПоСФ.ДоговорКонтрагента,
		|	ДанныеПоСФ.НомерСтроки,
		|	ДанныеПоСФ.Сумма,
		|	ДанныеПоСФ.СуммаНДС,
		|	ДанныеПоСФ.КлючСтроки,
		|	ДанныеПоСФ.ВалютаДокумента,
		|	ДанныеПоСФ.СуммаДокумента,
		|	СчетаФактуры.ДатаСФ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка КАК Ссылка,
		|		ПодчиненныйДокумент.Проведен КАК Проведен,
		|		ПодчиненныйДокумент.ПометкаУдаления КАК ПометкаУдаления
		|	ИЗ
		|		Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Проведен,
		|		ПодчиненныйДокумент.ПометкаУдаления
		|	ИЗ
		|		Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Проведен,
		|		ПодчиненныйДокумент.ПометкаУдаления
		|	ИЗ
		|		Документ.ДокументРасчетовСКонтрагентом КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.ДокументОснование = &ВНО_НДС) КАК ПодчиненныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОснованияСФ.Ссылка КАК Ссылка,
		|			НАЧАЛОПЕРИОДА(ОснованияСФ.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
		|			ОснованияСФ.ДокументОснование КАК ДокументОснование,
		|			ВЫБОР
		|				КОГДА ОснованияСФ.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ КАК НаАванс,
		|			ОснованияСФ.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|			ОснованияСФ.Ссылка.Проведен КАК Проведен
		|		ИЗ
		|			Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеРеализацииТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ОснованияСФ.Ссылка,
		|			ОснованияСФ.Ссылка.ДатаВходящегоДокумента,
		|			ОснованияСФ.ДокументОснование,
		|			ВЫБОР
		|				КОГДА ОснованияСФ.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ,
		|			ОснованияСФ.Ссылка.ПометкаУдаления,
		|			ОснованияСФ.Ссылка.Проведен
		|		ИЗ
		|			Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеПоступленияТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК СчетаФактуры
		|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактуры.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВНО_НДСДанныеПоСФ.Контрагент КАК Контрагент,
		|			ВНО_НДСДанныеПоСФ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям)
		|					ТОГДА ВНО_НДСДанныеПоСФ.ПредъявленСФ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ КАК ПредъявленСФ,
		|			ВНО_НДСДанныеПоСФ.ДатаСФ КАК ДатаСФ,
		|			ВНО_НДСДанныеПоСФ.НомерСФ КАК НомерСФКакУказан,
		|			ВНО_НДСДанныеПоСФ.ДатаПлатежноРасчетногоДокумента КАК ДатаВходящего,
		|			ВНО_НДСДанныеПоСФ.НомерПлатежноРасчетногоДокумента КАК НомерВходящегоКакУказан,
		|			ВНО_НДСДанныеПоСФ.СчетФактура КАК СчетФактура,
		|			ВНО_НДСДанныеПоСФ.НомерСтроки КАК НомерСтроки,
		|			ВНО_НДСДанныеПоСФ.СуммаБезНДС КАК Сумма,
		|			ВНО_НДСДанныеПоСФ.НДС КАК СуммаНДС,
		|			ВНО_НДСДанныеПоСФ.КлючСтроки КАК КлючСтроки,
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|					ТОГДА ВНО_НДСДанныеПоСФ.ВалютаАванса
		|				ИНАЧЕ &ВалютаРегламентированногоУчета
		|			КОНЕЦ КАК ВалютаДокумента,
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|					ТОГДА ВНО_НДСДанныеПоСФ.ВалютнаяСуммаСНДС
		|				ИНАЧЕ ВНО_НДСДанныеПоСФ.СуммаБезНДС + ВНО_НДСДанныеПоСФ.НДС
		|			КОНЕЦ КАК СуммаДокумента
		|		ИЗ
		|			Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВНО_НДСДанныеПоСФ
		|		ГДЕ
		|			ВНО_НДСДанныеПоСФ.Ссылка = &ВНО_НДС) КАК ДанныеПоСФ
		|		ПО ПодчиненныеДокументы.Ссылка = ДанныеПоСФ.СчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование,
		|	СФПометкаУдаления,
		|	СФПроведен УБЫВ,
		|	СчетаФактуры.ДатаСФ";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	//ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	//ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	//ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	//
	//Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
	//	СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
	//	СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	//КонецЦикла; 
	//ПараметрыДокументов.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ДокументОснование, СчетФактура","");
	
	Возврат ПараметрыДокументов;
	
КонецФункции

Процедура ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы)
	
	НаборТекущихДокументов = ПараметрыДокументов.Скопировать();
	НаборТекущихДокументов.Свернуть("ДатаВходящего,НомерВходящего,ТекущийДокумент, ДатаСФ, НомерСФ");
	
	НаборТекущихДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(НаборТекущихДокументов, "ТекущийДокумент");
	
	Для каждого СтрокаДокумента Из НаборТекущихДокументов.Строки Цикл
		Если не ЗначениеЗаполнено(СтрокаДокумента.ТекущийДокумент) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаНовогоНомера = Неопределено;
		// По одному документу разные номера. Это недопустимо.
		// Необходимо затереть ссылки на текущий документ в таблице параметров.
		Для каждого СтрокаДаты_Номера Из СтрокаДокумента.Строки Цикл
			СтруктураПоиска = Новый Структура ("ДокументОснование, ДатаВходящего, НомерВходящего"
							, СтрокаДаты_Номера.ТекущийДокумент,СтрокаДаты_Номера.ДатаВходящего,СтрокаДаты_Номера.НомерВходящего);
			СтрокиПодчиненныхДокументов = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПодчиненныхДокументов.Количество() > 0 Тогда
				// Это старый номер. Оставляем его у основания, Затираем ссылки на текущий документ по строкам таблицы параметров.
				СтрокаНовогоНомера = СтрокаДаты_Номера;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
			 
		Если СтрокаНовогоНомера = Неопределено Тогда
			// Ни один из номеров не соотвествует введенному ранее. 
			// Берем номер из первой строки
			СтрокаНовогоНомера = СтрокаДокумента.Строки[0];
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Истина;
		Иначе
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Ложь;
		КонецЕсли; 
		
		Если ЗаменитьНомерВТаблицеПодчиненныхДокументов Тогда
			СтрокиДляЗамены = ПодчиненныеДокументы.НайтиСтроки(Новый Структура("ДокументОснование",СтрокаНовогоНомера.ТекущийДокумент));
			Для каждого СтрокаДляЗаменыНомера Из СтрокиДляЗамены Цикл
				СтрокаДляЗаменыНомера.ДатаВходящего		= СтрокаНовогоНомера.ДатаВходящего;
				СтрокаДляЗаменыНомера.НомерВходящего	= СтрокаНовогоНомера.НомерВходящего;
			КонецЦикла; 
		КонецЕсли; 
		
		Если СтрокаДокумента.Строки.Количество()>1 Тогда
			СтрокиТаблицыПараметров = ПараметрыДокументов.НайтиСтроки(Новый Структура("ТекущийДокумент",СтрокаДокумента.ТекущийДокумент));
			Для каждого СтрокаТаблицыПараметров Из СтрокиТаблицыПараметров Цикл
				Если СтрокаТаблицыПараметров.ДатаВходящего = СтрокаНовогоНомера.ДатаВходящего
					и СтрокаТаблицыПараметров.НомерВходящего = СтрокаНовогоНомера.НомерВходящего
				 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыПараметров.ТекущийДокумент = Неопределено;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
// Создает документ вида ДокументыРасчетовСКонтрагентами
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.ДокументыРасчетовСКонтрагентами (не записан)
//
Функция СоздатьДокументРасчетов(СтрокаПараметров, ДокументОснование) Экспорт
	
	НовыйДокумент = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,ДокументОснование.Дата));
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= ДокументОснование;
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида ОтражениеПоступленияТоваровИУслугНДС
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.ОтражениеПоступленияТоваровИУслугНДС (не записан)
//
Функция СоздатьДокументОтражениеПоступленияТоваровИУслугНДС(СтрокаПараметров, ДокументОснование) Экспорт
	НовыйДокумент = Документы.ОтражениеПоступленияТоваровИУслугНДС.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,ДокументОснование.Дата));
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.РасчетныйДокумент			= ДокументОснование;
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	НовыйДокумент.КодВидаОперации			= СтрокаПараметров.КодВидаОперации;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида ОтражениеРеализацииТоваровИУслугНДС
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС (не записан)
//
Функция СоздатьДокументОтражениеРеализацииТоваровИУслугНДС(СтрокаПараметров, ДокументОснование) Экспорт
	НовыйДокумент = Документы.ОтражениеРеализацииТоваровИУслугНДС.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,ДокументОснование.Дата));
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.РасчетныйДокумент			= ДокументОснование;
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	НовыйДокумент.КодВидаОперации			= СтрокаПараметров.КодВидаОперации;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида СчетФактураПолученный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураПолученный (не записан)
//
Функция СоздатьДокументСчетФактураПолученный(СтрокаПараметров) Экспорт
	
	НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ, Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
	НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	НовыйДокумент.КодВидаОперации = СтрокаПараметров.КодВидаОперации;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида СчетФактураВыданный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураПолученный (не записан)
//
Функция СоздатьДокументСчетФактураВыданный(СтрокаПараметров, ПрефиксОрганизации) Экспорт
	
	НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ, Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	//НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	//НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	НовыйДокумент.ВидСчетаФактуры = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
													 				, Перечисления.ВидСчетаФактурыВыставленного.НаАванс
																	, Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	
	// Установка номера формируемого документа
	НовыйДокумент.Номер = УстановитьНомерСФсУчетомПрефикса(СтрокаПараметров.НомерСФ, ПрефиксОрганизации, НовыйДокумент.Метаданные().ДлинаНомера);
	НовыйДокумент.КодВидаОперации = СтрокаПараметров.КодВидаОперации;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Вормирует номер документа с учетом префиксов с указанной значащей частью
Функция УстановитьНомерСФсУчетомПрефикса(НомерСФ, Префикс,ДлинаНомераДок)
	
	ЧистыйНомер = СокрЛП(НомерСФ);
	НовыйНомер = Префикс;
	
	Если СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) > ДлинаНомераДок Тогда
		Возврат ЧистыйНомер;
	КонецЕсли;		
	
	Пока СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) < ДлинаНомераДок Цикл
		НовыйНомер = НовыйНомер + "0";
	КонецЦикла;
	
	Возврат НовыйНомер+ЧистыйНомер;

КонецФункции

// Сокращает номер документа - удаляет префиксы и лидирующие 0
//
// Возвращаемое значение:
//   Строка   – <описание возвращаемого значения>
//
Функция ПолучитьНомерДляСравнения(Знач Номер, ИспользоватьПрефиксы = Ложь, СписокПрефиксов = Неопределено)
	
	Если не ЗначениеЗаполнено(Номер) Тогда
	    Возврат "";
	КонецЕсли; 
	
	Если ИспользоватьПрефиксы Тогда
		//Список префиксов определен ранее	
	Иначе
		СписокПрефиксов = Новый СписокЗначений();
	КонецЕсли;
	
	Если СписокПрефиксов.Количество() = 0 Тогда
		СписокПрефиксов.Добавить("");
	КонецЕсли;
	
	Для Каждого ЭлементСписка ИЗ СписокПрефиксов Цикл
		
		ТекущийПрефикс = ЭлементСписка.Значение;
		
		// удаление префикса из номера документа
		Если Найти(Номер, ТекущийПрефикс)=1 Тогда 
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;

	Возврат СокрЛП(Номер);

КонецФункции // СократитьНомерДокумента()

Процедура СинхронизацияСостоянияПодчиненныхДокументов()
	
	Если мПодчиненныеДокументы = Неопределено Тогда
		 СформироватьСчетаФактуры(Ложь, Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.УстановитьПараметр("Таблица", мПодчиненныеДокументы);
	Запрос.УстановитьПараметр("ПометкаУдаления",ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", 		Проведен и не ПометкаУдаления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ *
		| Поместить ПодчиненныеДокументы
		|ИЗ
		|	&Таблица КАК ПодчиненныеДокументы ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Синхронизация состояния не требуется
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст ="Выбрать 
		|	ПодчиненныеДокументы.Ссылка КАК Ссылка,
		|	ПодчиненныеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	ПодчиненныеДокументы.Ссылка.Проведен КАК Проведен,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|			 ТОГДА ЛОЖЬ
		|		КОГДА ПодчиненныеДокументы.Использован
		|			 ТОГДА &Проведен 
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Провести,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Использован
		|			ТОГДА &ПометкаУдаления
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПометитьНаУдаление
		|ИЗ
		|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА не Использован
		|				ТОГДА (НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления)
		|			КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|				ТОГДА НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления
		|			ИНАЧЕ (НЕ(ПодчиненныеДокументы.Ссылка.Проведен = &Проведен
		|							И ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления))
		|		КОНЕЦ
		|	Упорядочить По НомерСтроки " + ?(ПометкаУдаления," Убыв","");
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если не ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
			Если Результат.ПометитьНаУдаление Тогда
			 	ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ИначеЕсли Результат.Провести тогда
				Если Результат.ПометкаУдаления тогда
					ДокументОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);				
			ИначеЕсли Результат.Проведен тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);  
			Иначе
			 	ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли; 
		Исключение
		    // Не удалось обновить документ. Он сам об этом расскажет.
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ
////////////////////////////////////////////////////////////////////////////////

// Получение учетной политики на дату. При повторном получении считывает ранее полученную учетную политику.
Функция ПолучитьПараметрыУчетнойПолитикиЛокально(КонДата, Отказ, ОбрабатываемаяОрганизация, Учет = "Бух", СчетФактура = Неопределено)
	
	Если мУчетнаяНУПолитикаПоДатам = Неопределено тогда 
		мУчетнаяНУПолитикаПоДатам = новый Соответствие;
	КонецЕсли;
	Если мУчетнаяПолитикаПоДатам = Неопределено тогда 
		мУчетнаяПолитикаПоДатам = новый Соответствие;
	КонецЕсли;
	
	Если Учет = "Нал" Тогда
		УчетнаяПолитика = мУчетнаяНУПолитикаПоДатам[?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура)];
	Иначе
		УчетнаяПолитика = мУчетнаяПолитикаПоДатам[?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура)];
	КонецЕсли; 
	
	Если УчетнаяПолитика = Неопределено Тогда
		ОшибкаПолученияУчетнойПолитики = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонДата, ОшибкаПолученияУчетнойПолитики, ОбрабатываемаяОрганизация, Учет);
		
		Если ОшибкаПолученияУчетнойПолитики тогда
			Если Учет = "Нал" тогда
				ОбщегоНазначения.СообщитьОбОшибке("При формировании движений по НДС "+?(НЕ ЗначениеЗаполнено(СчетФактура),"на "+Формат(КонДата, "ДФ=dd.MM.yyyy"),"для документа <"+строка(СчетФактура)+">")+" 
				| используется момент определения налоговой базы ""по отгрузке"".",,,СтатусСообщения.Информация); 
				УчетнаяПолитика = Новый Структура("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
				мУчетнаяНУПолитикаПоДатам.Вставить(?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если Учет = "Нал" тогда
				мУчетнаяНУПолитикаПоДатам.Вставить(?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			Иначе
				мУчетнаяПолитикаПоДатам.Вставить(?(НЕ ЗначениеЗаполнено(СчетФактура),КонДата,СчетФактура),УчетнаяПолитика);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат УчетнаяПолитика;

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПоСобытиям = ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами Тогда
		// Получим необходимые данные для отражения расчетов с контрагентами
	    ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ТаблицаПоРасчетам = Новый ТаблицаЗначений();
	КонецЕсли; 
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок);		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоСобытиям, ТаблицаПоРасчетам, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СинхронизацияСостоянияПодчиненныхДокументов();					
			
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	СинхронизацияСостоянияПодчиненныхДокументов();
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Для каждого Строка Из ДанныеПоСФ Цикл
		Строка.СчетФактура = Неопределено;	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	ОбновитьСсылкиВПодчиненныхДокументах();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда 
		
		СинхронизацияСостоянияПодчиненныхДокументов();
		
	КонецЕсли;

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

