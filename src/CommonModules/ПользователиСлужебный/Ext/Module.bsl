////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Объявление служебных событий, к которым можно подключать обработчики БСП.

// Объявляет служебные события подсистемы Пользователи:
//
// Серверные события:
//   ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора,
//   ПриЗаписиАдминистратора.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Переопределяет стандартный способ установки ролей пользователям ИБ.
	//
	// Параметры:
	//  Запрет - Булево. Если установить Истина, изменение ролей
	//           блокируется (в том числе для администратора).
	//
	// Синтаксис:
	// Процедура ПриОпределенииЗапретаРедактированияРолей(Запрет) Экспорт
	//
	// (То же, что ПользователиПереопределяемый.ИзменитьЗапретРедактированияРолей).
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Пользователи\ПриОпределенииЗапретаРедактированияРолей");
	
	// Переопределяет поведение формы пользователя, формы внешнего пользователя и
	// формы группы внешних пользователей.
	//
	// Параметры:
	//  Ссылка - СправочникСсылка.Пользователи,
	//           ссылка на пользователя при создании формы.
	//
	//  ДействияВФорме - Структура (со свойствами типа Строка):
	//           Роли                   = "", "Просмотр",     "Редактирование"
	//           СвойстваПользователяИБ = "", "ПросмотрВсех", "РедактированиеВсех", РедактированиеСвоих"
	//           СвойстваЭлемента       = "", "Просмотр",     "Редактирование"
	//           
	// Синтаксис:
	// Процедура ПриОпределенииДействийВФорме(Ссылка, ДействияВФорме) Экспорт
	//
	// (То же, что ПользователиПереопределяемый.ИзменитьДействияВФорме).
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Пользователи\ПриОпределенииДействийВФорме");
	
	// Переопределяет текст вопроса перед записью первого администратора.
	//  Вызывается из обработчика ПередЗаписью формы пользователя.
	//  Вызов выполняется если установлен ЗапретРедактированияРолей() и
	// количество пользователей информационной базы равно нулю.
	// 
	// Синтаксис:
	// Процедура ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора(ТекстВопроса) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.Пользователи\ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора");
	
	// Доопределяет действия при записи пользователя, когда он записывается
	// совместно с пользователем ИБ, у которого есть роль ПолныеПрава.
	// 
	// Параметры:
	//  Пользователь - СправочникСсылка.Пользователи (изменение объекта запрещено).
	//
	// Синтаксис:
	// Процедура ПриЗаписиАдминистратора(Пользователь) Экспорт
	//
	СерверныеСобытия.Добавить("СтандартныеПодсистемы.Пользователи\ПриЗаписиАдминистратора");
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииОбработчиковУстановкиПараметровСеанса"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ПользователиСлужебный");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных"].Добавить(
			"ПользователиСлужебный");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтПодчиненного"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПослеПолученияДанныхОтГлавного"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"ПользователиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена"].Добавить(
		"ПользователиСлужебный");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"ПользователиСлужебный");
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции.

// Заполняет параметр сеанса ТекущийПользователь или ТекущийВнешнийПользователь
// значением пользователя, найденному по пользователю информационной базы
// под которым запущен сеанс.
//  Если пользователь не найден, то при наличии административных прав
// создается новый пользователь в справочнике, иначе вызывается исключение.
// 
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийПользователь"
	   И ИмяПараметра <> "ТекущийВнешнийПользователь" Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ВызватьИсключение
			НСтр("ru = 'Недопустимое получение параметра сеанса ТекущийПользователь
			           |в сеансе без указания всех разделителей.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ПользовательНеНайден = Ложь;
		СоздатьПользователя  = Ложь;
		СсылкаНового         = Неопределено;
		
		ТекущийПользователь        = Неопределено;
		ТекущийВнешнийПользователь = Неопределено;
		
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
		ЭтоНеразделенныйПользователь = ОбщегоНазначенияПовтИсп.РазделениеВключено()
		                             И ТекущийПользовательИБ.РазделениеДанных.Количество() = 0;
		
		Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
			
			ТекущийВнешнийПользователь = "";
			
			СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
			
			ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
			ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
			СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
			
			Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
				ПользовательНеНайден = Истина;
				СоздатьПользователя  = Истина;
				ИдентификаторПользователяИБ = "";
			Иначе
				ТекущийПользователь = СвойстваНеуказанногоПользователя.Ссылка;
			КонецЕсли;
		Иначе
			ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
			
			Пользователи.НайтиНеоднозначныхПользователейИБ(, ИдентификаторПользователяИБ);
			
			Запрос = Новый Запрос;
			Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
			РезультатПользователи = Запрос.Выполнить();
			
			ТекущийВнешнийПользователь = "";
			
			Если РезультатПользователи.Пустой() Тогда
				//Если ЭтоНеразделенныйПользователь
				//	ИЛИ Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
					
					ИмяПользователя             = ТекущийПользовательИБ.Имя;
					ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
					
					Если ЭтоНеразделенныйПользователь Тогда
						// ПолноеИмяПользователя заполняется ниже в транзакции.
						ПользовательПоНаименованию  = Неопределено;
					Иначе
						ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;
						ПользовательПоНаименованию  = СсылкаПользователяПоПолномуНаименованию(ПолноеИмяПользователя);
					КонецЕсли;
					
					Если ПользовательПоНаименованию = Неопределено Тогда
						ПользовательНеНайден = Истина;
						СоздатьПользователя  = Истина;
					Иначе
						ТекущийПользователь = ПользовательПоНаименованию;
						ТекущийПользовательОбъект = ТекущийПользователь.ПолучитьОбъект();
						ТекущийПользовательОбъект.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
						ТекущийПользовательОбъект.Записать();
					КонецЕсли;
				//Иначе
				//	ПользовательНеНайден = Истина;
				//	ИмяПользователя = ТекущийПользовательИБ.Имя;
				//КонецЕсли;
			Иначе
				Выборка = РезультатПользователи.Выбрать();
				Выборка.Следующий();
				ТекущийПользователь = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СоздатьПользователя Тогда
			
			ЗарегистрироватьНеразделенногоПользователя();
			
			НачатьТранзакцию();
			Попытка
				Если ЭтоНеразделенныйПользователь И НЕ ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
					ПолноеИмяПользователя = Пользователи.ПолноеИмяСлужебногоПользователя(
						ИдентификаторПользователяИБ);
				КонецЕсли;
				
				Если СсылкаНового = Неопределено Тогда
					СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
				КонецЕсли;
				
				ТекущийПользователь = СсылкаНового;
				
				НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
				НовыйПользователь.Наименование = ПолноеИмяПользователя;
				НовыйПользователь.Код = ИмяПользователя;
				НовыйПользователь.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
				НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
				
				Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
					
					ОписаниеПользователяИБ = Новый Структура;
					ОписаниеПользователяИБ.Вставить("Действие", "Записать");
					ОписаниеПользователяИБ.Вставить(
						"УникальныйИдентификатор", ИдентификаторПользователяИБ);
					
					НовыйПользователь.ДополнительныеСвойства.Вставить(
						"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
				КонецЕсли;
				
				НовыйПользователь.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
					           |Пользователь: %1 не найден в справочнике ""Пользователи"".
					           |
					           |При попытке добавления пользователя в справочник возникла ошибка:
					           |""%2"".
					           |
					           |Обратитесь к администратору.'"),
					ИмяПользователя,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
				
				ВызватьИсключение ТекстСообщенияОбОшибке;
			КонецПопытки;
			
		ИначеЕсли ПользовательНеНайден Тогда
			ВызватьИсключение ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТекущийПользователь = Неопределено
	 ИЛИ ТекущийВнешнийПользователь = Неопределено Тогда
		
		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя) +
			НСтр("ru = '
			           |Возникла внутренняя ошибка при поиске пользователя.'");
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь        = ТекущийПользователь;
	ПараметрыСеанса.ТекущийВнешнийПользователь = ТекущийВнешнийПользователь;
	
	УстановленныеПараметры.Добавить("ТекущийПользователь");
	УстановленныеПараметры.Добавить("ТекущийВнешнийПользователь");
	
КонецПроцедуры

// Вызывается при начале работы системы, чтобы проверить возможность выполнения авторизации и
// вызвать заполнение значений параметров сеанса ТекущийПользователь и ТекущийВнешнийПользователь.
// Также вызывается при входе в область данных.
//
// Возвращаемое значение:
//  Строка - пустая строка   - авторизация выполнена успешно.
//           непустая строка - описание ошибки.
//                             При начале работы системы следует
//                             завершить работу 1С:Предприятия.
//
Функция АвторизоватьТекущегоПользователя(ПриНачалеРаботыСистемы = Ложь) Экспорт
	
	Если НЕ ПриНачалеРаботыСистемы Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	Иначе
		// Программное заполнение списка пользователей.
		Перезапустить = Ложь;
		ДополнительныеПараметрыКоманднойСтроки = "";
		
		ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(
			Перезапустить, ДополнительныеПараметрыКоманднойСтроки);
		
		Если Перезапустить Тогда
			Возврат Новый Структура(
				"ДополнительныеПараметрыКоманднойСтроки",
				ДополнительныеПараметрыКоманднойСтроки);
		КонецЕсли;
		
		// Проверка возможности продолжения.
		ТекстОшибки = ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(Истина);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ПроверитьПраваПользователя(ТекущийПользовательИБ);
	
	ЗарегистрироватьНеразделенногоПользователя();
	
	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Авторизуется пользователь по умолчанию
		Возврат "";
	КонецЕсли;
	
	ЭтоНеразделенныйПользователь = ОбщегоНазначенияПовтИсп.РазделениеВключено()
	                             И ТекущийПользовательИБ.РазделениеДанных.Количество() = 0;
	
	НайденныйПользователь = Неопределено;
	Если ПользовательПоИдентификаторуСуществует(
	       ТекущийПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь) Тогда
		// ПользовательИБ найден в справочнике.
		
		Если ПриНачалеРаботыСистемы
		   И Пользователи.ЭтоПолноправныйПользователь(ТекущийПользовательИБ, , Ложь)
		   И НЕ ЭтоНеразделенныйПользователь Тогда
			
			ПриАвторизацииАдминистратораПриНачалеРаботыСистемы(НайденныйПользователь);
		КонецЕсли;
		
		Возврат "";
	КонецЕсли;
	
	Если ЭтоНеразделенныйПользователь Тогда
		// Это неразделенный пользователь, требуется создать элемент в текущей области.
		НачатьТранзакцию();
		Попытка
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательОбъект.Наименование = Пользователи.ПолноеИмяСлужебногоПользователя(
				ТекущийПользовательИБ.УникальныйИдентификатор);
			
			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить(
				"УникальныйИдентификатор", ТекущийПользовательИБ.УникальныйИдентификатор);
			
			ПользовательОбъект.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			
			ПользовательОбъект.Записать();
		
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		Возврат "";
	КонецЕсли;
	
	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
	ТекстСообщенияОбОшибке = "";
	ТребуетсяСоздатьАдминистратора = Ложь;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если ПользователиИБ.Количество() = 1 Или Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		// Авторизуется администратор, созданный в конфигураторе.
		ТребуетсяСоздатьАдминистратора = Истина;
	Иначе
		// Авторизуется обычный пользователь, созданный в конфигураторе.
		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользовательИБ.Имя);
	КонецЕсли;
	
	Если ТребуетсяСоздатьАдминистратора Тогда
		
		Если РольДоступна(Метаданные.Роли.ПолныеПрава)
			И (РольДоступна(Пользователи.РольАдминистратораСистемы())
			   ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено() ) Тогда
			
			Пользователь = Пользователи.СоздатьАдминистратора(ТекущийПользовательИБ);
			
			Комментарий =
				НСтр("ru = 'Выполняется запуск от имени пользователя с ролью ""Полные права"",
				           |который не зарегистрирован в списке пользователей.
				           |Выполнена автоматическая регистрация в списке пользователей.
				           |
				           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
				           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
			
			ПослеЗаписиАдминистратораПриАвторизации(Комментарий);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Администратор зарегистрирован в справочнике Пользователи'"),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.Пользователи,
				Пользователь,
				Комментарий);
		Иначе
			ТекстСообщенияОбОшибке =
				НСтр("ru = 'Запуск от имени пользователя с правом Администрирование невозможен,
				           |так как он не зарегистрирован в списке пользователей.
				           |
				           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
				           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2";
	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьИдентификаторыПользователей";
	
КонецПроцедуры

// Определяет, что используется нестандартный способ установки ролей пользователям ИБ.
Функция ЗапретРедактированияРолей() Экспорт
	
	Запрет = Ложь;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.Пользователи\ПриОпределенииЗапретаРедактированияРолей");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОпределенииЗапретаРедактированияРолей(Запрет);
	КонецЦикла;
	
	ПользователиПереопределяемый.ИзменитьЗапретРедактированияРолей(Запрет);
	
	Возврат Запрет = Истина;
	
КонецФункции

// Устанавливает начальные настройки для пользователя информационной базы.
//
// Параметры:
//  ИмяПользователя - строка, имя пользователя информационной базы, для которого сохраняются настройки.
//
Процедура УстановитьНачальныеНастройки(Знач ИмяПользователя) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.17.0") > 0 Тогда
		
		НастройкиКлиента = Новый НастройкиКлиентскогоПриложения();
		НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
		НастройкиКлиента.ОтображатьПанельРазделов = Истина;
		НастройкиКлиента.РежимОткрытияФормПриложения = Вычислить("РежимОткрытияФормПриложения.Закладки");
		
		НастройкиИнтерфейса = Новый НастройкиКомандногоИнтерфейса();
		НастройкиИнтерфейса.ОтображениеПанелиРазделов = Вычислить("ОтображениеПанелиРазделов.Текст");
		
		ПользователиПереопределяемый.ПриУстановкеНачальныхНастроек(
			НастройкиКлиента,
			НастройкиИнтерфейса
		);
		
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "",
			НастройкиКлиента, , ИмяПользователя);
		
		ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "",
			НастройкиИнтерфейса, , ИмяПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей в управляемой форме

// Только для внутреннего использования
//
Процедура ОбработатьИнтерфейсРолей(Действие, Параметры) Экспорт
	
	Если Действие = "УстановитьТолькоПросмотрРолей" Тогда
		УстановитьТолькоПросмотрРолей(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЗагрузкеНастроек" Тогда
		НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриСозданииФормы" Тогда
		НастроитьИнтерфейсРолейПриСозданииФормы(Параметры);
		
	ИначеЕсли Действие = "ТолькоВыбранныеРоли" Тогда
		ТолькоВыбранныеРоли(Параметры);
		
	ИначеЕсли Действие = "ГруппировкаПоПодсистемам" Тогда
		ГруппировкаПоПодсистемам(Параметры);
		
	ИначеЕсли Действие = "ОбновитьДеревоРолей" Тогда
		ОбновитьДеревоРолей(Параметры);
		
	ИначеЕсли Действие = "ОбновитьСоставРолей" Тогда
		ОбновитьСоставРолей(Параметры);
		
	ИначеЕсли Действие = "ЗаполнитьРоли" Тогда
		ЗаполнитьРоли(Параметры);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в процедуре ПользователиСлужебный.ОбработатьИнтерфейсРолей()
			           |Неверное значение параметра Действие: ""%1"".'"),
			Действие);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и фукнции общего назначения

// Возвращает таблицу значений имен всех ролей конфигурации.
//
// Параметры:
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура со свойствами:
//      Массив          - ФиксированныйМассив имен ролей.
//      Соответствие    - ФиксированноеСоответствие имен ролей со значением Истина.
//      ТаблицаЗначений - ТаблицаЗначений с колонками:
//                        Имя - Строка - имя роли.
//
Функция ВсеРоли() Экспорт
	
	Возврат ПользователиСлужебныйПовтИсп.Параметры().ВсеРоли;
	
КонецФункции

// Возвращает недоступные роли для указанного типа пользователей.
//
// Параметры:
//  ТипПользователей - ПеречислениеСсылка.ТипыПользователей.
//
// Возвращаемое значение:
//  ФиксированноеСоответствие, где Ключ - имя роли, а Значение - Истина.
//
Функция НедоступныеРолиПоТипуПользователей(ТипПользователей) Экспорт
	
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.Параметры(
		).НедоступныеРолиПоТипамПользователей;
	
	Возврат НедоступныеРоли.Получить(ТипПользователей);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Истина);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Ложь);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Истина);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Ложь);
	
КонецПроцедуры

// Процедура-обработчик события после получения данных в главном узле от подчиненного узла распределенной ИБ.
// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и записаны в ИБ.
// 
//  Параметры:
// Отправитель – ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
// если данные были загружены порциями.
//
Процедура ПослеПолученияДанныхОтПодчиненного(Отправитель, Отказ) Экспорт
	
	ПослеПолученияДанных(Отправитель, Отказ, Истина);
	
КонецПроцедуры

// Процедура-обработчик события после получения данных в подчиненном узле от главного узла распределенной ИБ.
// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и записаны в ИБ.
// 
//  Параметры:
// Отправитель – ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
// если данные были загружены порциями.
//
Процедура ПослеПолученияДанныхОтГлавного(Отправитель, Отказ) Экспорт
	
	ПослеПолученияДанных(Отправитель, Отказ, Ложь);
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта]
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Добавление.Организации
//                           Документ.ПриходнаяНакладная.Добавление.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Добавление.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Добавление.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Добавление.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал, его нет в предопределенных элементах
//                 ПланыВидовХарактеристик.ВидыДоступа. Этот вид доступа используется в шаблонах ограничений доступа,
//                 как "ссылка" на другой объект, по которому ограничивается таблица.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц, которые используются
//                 для этого вида доступа. Т.е. перечислить типы, которые соответствующие полю,
//                 использованному в шаблоне ограничения доступа в паре с видом доступа "Объект".
//                 При перечислении типов по виду доступа "Объект" нужно перечислить только те типы поля,
//                 которые есть у поля РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + 
	"
	|Справочник.ГруппыПользователей.Чтение.Пользователи
	|Справочник.Пользователи.Чтение.Пользователи
	|Справочник.Пользователи.Изменение.Пользователи
	|";
	
КонецПроцедуры

// Используется для получения объектов метаданных обязательных для плана обмена.
// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбязательныхОбъектовПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		Объекты.Добавить(Метаданные.Константы.ПараметрыРаботыПользователей);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые не следует включать в состав плана обмена.
// Если подсистема имеет объекты метаданных, которые не следует включать в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые не следует включать в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов-исключений плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбъектовИсключенийПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Константы.ПараметрыРаботыПользователей);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с пользователями

// Проверяет возможность запуска с пустым списком пользователей для клиентских соединений.
//
// Для фоновых заданий, внешних соединений, вызовов веб-сервисов запуск с
// пустым списком пользователей всегда возможен - для пустого пользователя ИБ
// всегда используется пользователь <Не указан> справочника Пользователи.
//
// В случае, когда основная роль пустого пользователя не обеспечивает
// требуемых прав в обработчике фонового задания или веб-сервиса,
// привилегированный режим устанавливается прямо в обработчике.
// Для внешних соединений можно использовать запуск в привилегированном
// режиме (параметр командной строки "/UsePrivilegedMode").
//
Функция ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(ВернутьТекстОшибки = Ложь) Экспорт
	
	Если ПривилегированныйРежим() Тогда
		// Выполнен запуск в привилегированном режиме
		// (параметр командной строки "/UsePrivilegedMode").
		//
		// В этом режиме пользователь имеет все права,
		// первого администратора не требуется создавать.
		Возврат "";
	КонецЕсли;
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ТекущийПользовательИБ.Имя) Тогда
		// Список пользователей ИБ не пустой.
		Возврат "";
	КонецЕсли;
	
	ОсновнаяРоль = Метаданные.ОсновнаяРоль;
	
	Если ОсновнаяРоль = Неопределено Тогда
		// Основная роль не назначена, поэтому пустой пользователь
		// имеет права, соответствующие привилегированному режиму.
		Возврат "";
	КонецЕсли;
	
	Если ПравоДоступа("Администрирование", Метаданные, ОсновнаяРоль) Тогда
		// Когда основная роль имеет право Администрирование предполагается,
		// что она содержит все права необходимые для администрирования.
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ) Тогда
		// Список пользователей не пустой.
		//
		// Когда основная роль не содержит право Администрирование,
		// а пустой текущий пользователь содержит право Администрирование,
		// то оно было добавлено принудительно, что возможно только при пустом
		// списке пользователей информационной базы.
		Возврат "";
	КонецЕсли;
	
	ТекстОшибки =
		НСтр("ru = 'Запуск с пустым списком пользователей информационной базы невозможен.
		           |Необходимо добавить администратора системы с двумя ролями
		           |""Администратор системы"", ""Полные права"" и повторить запуск программы от его имени.
		           |
		           |Для перехода к списку пользователей информационной базы необходимо открыть
		           |Конфигуратор и воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
	
	Если НЕ ВернутьТекстОшибки Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Возвращает сохраняемое значение пароля для указанного пароля.
//
// Параметры:
//  Пароль                      - Строка - пароль для которого нужно получить сохраняемое значение.
//
//  ИдентификаторПользователяИБ - УникальныйИдентификатор - пользователя ИБ для которого нужно
//                                сравнить сохраняемое значение с полученным и результат поместить
//                                в следующий параметр Совпадает.
//
//  Совпадает                   - Булево (возвращаемое значение) - см. комментарий к параметру
//                                ИдентификаторПользователяИБ.
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля.
//
Функция СохраняемоеЗначениеСтрокиПароля(Знач Пароль,
                                        Знач ИдентификаторПользователяИБ = Неопределено,
                                        Совпадает = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		ВременныйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ВременныйПользовательИБ.АутентификацияСтандартная = Истина;
		ВременныйПользовательИБ.Пароль = Пароль;
		
		ВременныйПользовательИБ.Имя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Временный пользователь (%1)'"),
			Новый УникальныйИдентификатор);
		
		ВременныйПользовательИБ.Записать();
		
		ВременныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ВременныйПользовательИБ.УникальныйИдентификатор);
		
		СохраняемоеЗначениеПароля = ВременныйПользовательИБ.СохраняемоеЗначениеПароля;
		ОтменитьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ИдентификаторПользователяИБ);
		
		Если ТипЗнч(ПользовательИБ) = Тип("ПользовательИнформационнойБазы") Тогда
			Совпадает = (СохраняемоеЗначениеПароля = ПользовательИБ.СохраняемоеЗначениеПароля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраняемоеЗначениеПароля;
	
КонецФункции

// Возвращает текущий уровень доступа на изменение свойств пользователя ИБ.
// 
// Параметры:
//  ДляВнешнегоПользователя - Булево.
//
// Возвращаемое значение:
// Строка. Возможные значения:
//  "ПолныйДоступ"      - любое изменение свойств пользователя.
//  "УправлениеСписком" - управление списком пользователей, без возможности
//                        изменения прав.
//  "ИзменениеТекущего" - изменение свойств текущего пользователя "Имя",
//                        "Пароль" и "Язык".
//  "НетДоступа"        - права на изменение пользователей отсутствуют.
//
Функция УровеньДоступаКСвойствамПользователяИБ() Экспорт
	
	Если ПривилегированныйРежим()
	 ИЛИ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		Возврат "ПолныйДоступ";
		
	Иначе
		Если ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи) И
			 ПравоДоступа("Удаление", Метаданные.Справочники.Пользователи) Тогда
			Возврат "УправлениеСписком";
		
		ИначеЕсли ПравоДоступа("Изменение", Метаданные.Справочники.Пользователи) Тогда
			Возврат "ИзменениеТекущего";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "НетДоступа";
	
КонецФункции

// Вызывается ПередЗаписью Пользователя.
Процедура НачатьОбработкуПользователяИБ(ПользовательОбъект,
                                        ПараметрыОбработки,
                                        УдалениеПользователяИзСправочника = Ложь) Экспорт
	
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ЗаписьАдминистратора", Ложь);
	ПараметрыОбработки.Вставить("УдалениеПользователяИзСправочника", УдалениеПользователяИзСправочника);
	
	Если ДополнительныеСвойства.Свойство("ЗначениеКопирования")
	   И ЗначениеЗаполнено(ДополнительныеСвойства.ЗначениеКопирования)
	   И ТипЗнч(ДополнительныеСвойства.ЗначениеКопирования) = ТипЗнч(ПользовательОбъект.Ссылка) Тогда
		
		ПараметрыОбработки.Вставить("ЗначениеКопирования", ДополнительныеСвойства.ЗначениеКопирования);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбработкаСообщенияКаналаУдаленногоАдминистрирования") Тогда
		
		// Проверка прав.
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ВызватьИсключение НСтр("ru = 'Обновление пользователя по сообщению
			                             |канала удаленного администрирования
			                             |доступно только неразделенным пользователям.'");
		КонецЕсли;
		
		ПараметрыОбработки.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
		
	КонецЕсли;
	
	СтарыеСвойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПользовательОбъект.Ссылка,
		"ИдентификаторПользователяИБ");
	
	Если НЕ ЗначениеЗаполнено(СтарыеСвойства.ИдентификаторПользователяИБ) Тогда
		СтарыеСвойства.ИдентификаторПользователяИБ =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	// Идентификаторы для дальнейшего использования при обработке пользователя.
	ПараметрыОбработки.Вставить("СтарыйИдентификаторПользователяИБ",
		СтарыеСвойства.ИдентификаторПользователяИБ);
	
	// Новые значения полей для контроля при записи элемента справочника Пользователи.
	ПараметрыОбработки.Вставить("НовыйИдентификаторПользователяИБ",
		СтарыеСвойства.ИдентификаторПользователяИБ);
		
	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
		Возврат;
	КонецЕсли;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	Если НЕ ОписаниеПользователяИБ.Свойство("Действие") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ не указано свойство Действие.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие <> "Записать"
	   И ОписаниеПользователяИБ.Действие <> "Удалить" Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |В параметре ОписаниеПользователяИБ указано
			           |неверное значение ""%2"" свойства Действие.'"),
			ПользовательОбъект.Ссылка,
			ОписаниеПользователяИБ.Действие);
	КонецЕсли;
	ПараметрыОбработки.Вставить("Действие", ОписаниеПользователяИБ.Действие);
	
	Если ЗначениеЗаполнено(ПараметрыОбработки.СтарыйИдентификаторПользователяИБ)
	   И ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И Пользователи.ЭтоНеразделенныйПользователь(
	         ПараметрыОбработки.СтарыйИдентификаторПользователяИБ) Тогда
		
		ВызватьИсключение ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена();
		
	ИначеЕсли ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	        И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	        И ОбщегоНазначенияПовтИсп.РазделениеВключено()
	        И Пользователи.ЭтоНеразделенныйПользователь(
	              ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
		
		ПараметрыОбработки.Вставить("ЭтоНеразделенныйПользовательИБ");
		
		Если ОписаниеПользователяИБ.Количество() > 2
		 ИЛИ ОписаниеПользователяИБ.Действие = "Удалить" Тогда
			
			ВызватьИсключение ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена();
		КонецЕсли;
	КонецЕсли;
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователяИБ();
	ТекстСообщения = НСтр("ru = 'Недостаточно прав для изменения пользователя информационной базы.'");
	
	Если УровеньДоступа = "НетДоступа" Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеСтарогоПользователяИБ = Неопределено;
	Если Пользователи.ПрочитатьПользователяИБ(
	         ПараметрыОбработки.СтарыйИдентификаторПользователяИБ,
	         ОписаниеСтарогоПользователяИБ) Тогда
		
		ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", Истина);
	Иначе
		ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", Ложь);
	КонецЕсли;
	ПараметрыОбработки.Вставить(
		"ОписаниеСтарогоПользователяИБ", ОписаниеСтарогоПользователяИБ);
		
	Если УровеньДоступа <> "ПолныйДоступ"
	   И УровеньДоступа <> "УправлениеСписком"
	   И ( НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует
	        И ОписаниеПользователяИБ.Действие = "Записать"
		  ИЛИ ПараметрыОбработки.СтарыйПользовательИБСуществует
		     И ОписаниеПользователяИБ.Действие = "Удалить" ) Тогда
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие = "Записать"
	   И ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
		
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
		
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя связать пользователя ИБ с пользователем
				           |справочника для которого уже задан пользователь ИБ.'"),
				ПользовательОбъект.Наименование);
			
		ИначеЕсли ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		              ОписаниеПользователяИБ.УникальныйИдентификатор) = Неопределено Тогда
			
			Если НЕ ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ") Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при записи пользователя ""%1"".
					           |Нельзя связать несуществующего пользователя ИБ
					           |с пользователем справочника.'"),
					ПользовательОбъект.Наименование);
			КонецЕсли;
		КонецЕсли;
		
		НайденныйПользователь = Неопределено;
		
		Если ПользовательПоИдентификаторуСуществует(
			ОписаниеПользователяИБ.УникальныйИдентификатор,
			ПользовательОбъект.Ссылка,
			НайденныйПользователь) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя связать с этим пользователем справочника
				           |пользователя ИБ уже связанного с другим пользователем
				           |справочника ""%2"".'"),
				НайденныйПользователь,
				ПользовательОбъект.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ") Тогда
		
		ПользовательОбъект.ИдентификаторПользователяИБ =
			ОписаниеПользователяИБ.УникальныйИдентификатор;
		
		// Обновление значения реквизита контролируемого при записи.
		ПараметрыОбработки.НовыйИдентификаторПользователяИБ =
			ПользовательОбъект.ИдентификаторПользователяИБ;
		
		Возврат;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие = "Записать" Тогда
		// Проверка попытки изменения недоступных свойств.
		
		Если УровеньДоступа = "УправлениеСписком" Тогда
			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		ИначеЕсли УровеньДоступа = "ИзменениеТекущего" Тогда
			
			ВсеСвойства = Пользователи.НовоеОписаниеПользователяИБ();
			
			ДопустимыеСвойства = Новый Массив;
			ДопустимыеСвойства.Добавить("Пароль");
			ДопустимыеСвойства.Добавить("Язык");
			
			Для каждого КлючИЗначение Из ОписаниеПользователяИБ Цикл
				
				Если ВсеСвойства.Свойство(КлючИЗначение.Ключ)
				   И ДопустимыеСвойства.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	Иначе
		УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	// Обновление значения реквизита контролируемого при записи.
	ПараметрыОбработки.НовыйИдентификаторПользователяИБ =
		ПользовательОбъект.ИдентификаторПользователяИБ;
	
	ОписаниеНовогоПользователяИБ = Неопределено;
	Если Пользователи.ПрочитатьПользователяИБ(
	         ПользовательОбъект.ИдентификаторПользователяИБ,
	         ОписаниеНовогоПользователяИБ) Тогда
		
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Истина);
	Иначе
		ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", Ложь);
	КонецЕсли;
	ПараметрыОбработки.Вставить(
		"ОписаниеНовогоПользователяИБ", ОписаниеНовогоПользователяИБ);
	
	ПараметрыОбработки.Вставить("СоздатьПользователяСервиса", Ложь);
	
КонецПроцедуры

// Вызывается ПриЗаписи Пользователя или Внешнего пользователя.
Процедура ЗавершитьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки) Экспорт
	
	Если ПараметрыОбработки.НовыйИдентификаторПользователяИБ
	     <> ПользовательОбъект.ИдентификаторПользователяИБ Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит ИдентификаторПользователяИБ не допускается изменять.
			           |Обновление реквизита выполняется автоматически.'"),
			ПользовательОбъект.Ссылка);
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
	   И ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи")
	   И НЕ ПараметрыОбработки.Свойство("ОбработкаСообщенияКаналаУдаленногоАдминистрирования")
	   И НЕ ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ")
	   И ОписаниеПользователяИБ.Свойство("РезультатДействия") Тогда
		
		Если ОписаниеПользователяИБ.РезультатДействия = "УдаленПользовательИБ" Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			АннулироватьДоступПользователяСервиса(ПользовательОбъект);
			УстановитьПривилегированныйРежим(Ложь);
			
		Иначе // ДобавленПользовательИБ или ИзмененПользовательИБ
			ОбновитьПользователяСервиса(
				ПользовательОбъект,
				ПараметрыОбработки.СоздатьПользователяСервиса);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОбработки.ЗаписьАдминистратора Тогда
		ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
			"СтандартныеПодсистемы.Пользователи\ПриЗаписиАдминистратора");
		
		УстановитьПривилегированныйРежим(Истина);
		Для каждого Обработчик Из ОбработчикиСобытия Цикл
			Обработчик.Модуль.ПриЗаписиАдминистратора(ПользовательОбъект.Ссылка);
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("УстановкаПользователяИБ")
	   И НЕ ПараметрыОбработки.Свойство("ОбработкаСообщенияКаналаУдаленногоАдминистрирования")
	   И НЕ ПараметрыОбработки.Свойство("ЭтоНеразделенныйПользовательИБ") Тогда
		
		ПарольПользователяСервиса = Неопределено;
		Если ПользовательОбъект.ДополнительныеСвойства.Свойство("ПарольПользователяСервиса") Тогда
			ПарольПользователяСервиса = ПользовательОбъект.ДополнительныеСвойства.ПарольПользователяСервиса;
		КонецЕсли;
		
		ПослеУстановкиПользователяИБ(ПользовательОбъект.Ссылка, ПарольПользователяСервиса);
	КонецЕсли;
	
	СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	
КонецПроцедуры

Процедура ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	Если ОписаниеПользователяИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНовогоПользователяИБ = Ложь;
	
	Если ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор) Тогда
		
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработки.СтарыйИдентификаторПользователяИБ) Тогда
		ИдентификаторПользователяИБ = ПараметрыОбработки.СтарыйИдентификаторПользователяИБ;
		СоздатьНовогоПользователяИБ = НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует;
	Иначе
		ИдентификаторПользователяИБ = Неопределено;
		СоздатьНовогоПользователяИБ = Истина;
	КонецЕсли;
	
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПользовательОбъект.Наименование);
	
	// Попытка записи пользователя ИБ.
	ОписаниеОшибки = "";
	ПользовательИБ = Неопределено;
	Если НЕ Пользователи.ЗаписатьПользователяИБ(
	         ИдентификаторПользователяИБ,
	         ОписаниеПользователяИБ,
	         СоздатьНовогоПользователяИБ,
	         ОписаниеОшибки,
	         ПользовательИБ) Тогда
		
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		ПараметрыОбработки.Вставить("ЗаписьАдминистратора", Истина);
	КонецЕсли;
	
	Если СоздатьНовогоПользователяИБ Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ДобавленПользовательИБ");
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ИзмененПользовательИБ");
	КонецЕсли;
	
	ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
	
	ОписаниеПользователяИБ.Вставить(
		"УникальныйИдентификатор",
		ИдентификаторПользователяИБ);
	
КонецПроцедуры

Функция УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	// Очистка идентификатора пользователя ИБ.
	ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
	
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОписаниеОшибки = "";
		ПользовательИБ = Неопределено;
		Если Пользователи.УдалитьПользователяИБ(
		         ПараметрыОбработки.СтарыйИдентификаторПользователяИБ,
		         ОписаниеОшибки,
		         ПользовательИБ) Тогда
			
			// Установка идентификатора удаляемого пользователя ИБ, как результата действия Удалить.
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",
				ПараметрыОбработки.СтарыйИдентификаторПользователяИБ);
			
			ОписаниеПользователяИБ.Вставить("РезультатДействия", "УдаленПользовательИБ");
		Иначе
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработки.СтарыйИдентификаторПользователяИБ) Тогда
		
		ОписаниеПользователяИБ.Вставить(
			"РезультатДействия", "ОчищенаСвязьСНесуществующимПользователемИБ");
	Иначе
		ОписаниеПользователяИБ.Вставить(
			"РезультатДействия", "НеТребуетсяУдалениеПользовательИБ");
	КонецЕсли;
	
КонецФункции

// Нельзя вызвать из фоновых заданий с пустым пользователем.
Функция ТребуетсяСоздатьПервогоАдминистратора(Знач ОписаниеПользователяИБ,
                                              Текст = Неопределено) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользовательИБ.Имя) Тогда
		
		Если ТипЗнч(ОписаниеПользователяИБ) = Тип("Структура") Тогда
			// Проверка перед записью обычного пользователя или пользователя ИБ.
			
			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
				Роли = ОписаниеПользователяИБ.Роли;
			Иначе
				Роли = Новый Массив;
			КонецЕсли;
			
			Если ЗапретРедактированияРолей()
				ИЛИ Роли.Найти("ПолныеПрава") = Неопределено
				ИЛИ Роли.Найти(Пользователи.РольАдминистратораСистемы().Имя) = Неопределено Тогда
				
				// Подготовка текста вопроса при записи первого администратора.
				Текст = НСтр("ru = 'В список пользователей программы добавляется первый пользователь,
				                   |поэтому ему автоматически будет назначена роль ""Полные права"".
				                   |Продолжить?'");
				
				ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
					"СтандартныеПодсистемы.Пользователи\ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора");
				
				Для каждого Обработчик Из ОбработчикиСобытия Цикл
					Обработчик.Модуль.ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора(Текст);
				КонецЦикла;
				
				Возврат Истина;
			КонецЕсли;
		Иначе
			// Проверка перед записью внешнего пользователя.
			Текст = НСтр("ru = 'Первый пользователь информационной базы должен иметь полные права.
			                   |Внешний пользователь не может быть полноправным.
			                   |Сначала создайте обычного пользователя-администратора.'");
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает свойства пользователя для пользователя ИБ с пустым именем.
Функция СвойстваНеуказанногоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = Новый Структура;
	
	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю.
	Свойства.Вставить("Ссылка", Неопределено);
	
	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи.
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));
	
	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя.
	Свойства.Вставить("ПолноеИмя", Пользователи.ПолноеИмяНеуказанногоПользователя());
	
	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", НСтр("ru = '<Не указан>'"));
	
	// Поиск по уникальному идентификатору.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	
	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмя";
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Свойства;
	
КонецФункции

// Проверяет корректность заполнения структуры описания пользователя ИБ.
// В случае нахождения ошибок устанавливает параметр Отказ в Истина и
// отправляет сообщения об ошибках.
//
// Параметры:
//  ОписаниеПользователяИБ - Структура - описание пользователя ИБ
//                 заполнение которого требуется проверить.
//
//  Отказ        - Булево - флаг отказа от выполнения операции.
//                 Устанавливается в случае ошибки.
//
// Возвращаемое значение:
//  Булево - если Истина, ошибок не найдено.
//
Функция ПроверитьОписаниеПользователяИБ(Знач ОписаниеПользователяИБ, Отказ) Экспорт
	
	Если ОписаниеПользователяИБ.Свойство("Имя") Тогда
		Имя = ОписаниеПользователяИБ.Имя;
		
		Если ПустаяСтрока(Имя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено Имя (для входа).'"),
				,
				"Имя",
				,
				Отказ);
			
		ИначеЕсли СтрДлина(Имя) > 64 Тогда
			// Хранилище настроек использует только первые 64 символа имени пользователя ИБ.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Имя (для входа) превышает 64 символа.'"),
				,
				"Имя",
				,
				Отказ);
			
		ИначеЕсли Найти(Имя, ":") > 0 Тогда
			// Аутентификация через web использует символ ":",
			// как разделитель имени и пароля пользователя.
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Имя (для входа) содержит запрещенный символ "":"".'"),
				,
				"Имя",
				,
				Отказ);
				
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ПользовательИБ <> Неопределено
			   И ПользовательИБ.УникальныйИдентификатор
			     <> ОписаниеПользователяИБ.ИдентификаторПользователяИБ Тогда
				
				НайденныйПользователь = Неопределено;
				ПользовательПоИдентификаторуСуществует(
					ПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь);
				
				Если НайденныйПользователь = Неопределено Тогда
					ТекстОшибки = НСтр("ru = 'Имя (для входа) уже занято.'");
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Имя (для входа) уже занято для пользователя ""%1"".'"),
						Строка(НайденныйПользователь));
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки, , "Имя", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("Пароль") Тогда
		
		Если ОписаниеПользователяИБ.Пароль <> Неопределено
			И ОписаниеПользователяИБ.Пароль
			  <> ОписаниеПользователяИБ.ПодтверждениеПароля Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Пароль и подтверждение пароля не совпадают.'"),
				,
				"Пароль",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("ПользовательОС") Тогда
		
		Если НЕ ПустаяСтрока(ОписаниеПользователяИБ.ПользовательОС) Тогда
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.ПользовательОС = ОписаниеПользователяИБ.ПользовательОС;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Пользователь ОС должен быть в формате
					           |""\\ИмяДомена\ИмяПользователя"".'"),
					,
					"ПользовательОС",
					,
					Отказ);
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Записывает указанного Пользователя ИБ с учетом режима разделения данных.
//  Если режим разделения данных включен, тогда перед записью проверяются
// права записываемого пользователя.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - объект, который требуется записать.
//
Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если Пользователи.ЭтоНеразделенныйПользователь(
		         ПользовательИБ.УникальныйИдентификатор) Тогда
			
			ВызватьИсключение ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена();
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьПраваПользователя(ПользовательИБ);
	
	ОбновлениеИнформационнойБазы.УстановитьФлагОтображенияОписанийДляНовогоПользователя(ПользовательИБ.Имя);
	
	ПользовательИБ.Записать();

КонецПроцедуры

// Проверяет существование пользователя информационной базы.
//
// Параметры:
//  Идентификатор  - Строка - имя пользователя ИБ,
//                   УникальныйИдентификатор - идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет наличие элемента в справочнике Пользователи
// по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки наличия связи пользователяИБ только
// с одним элементом справочников Пользователи.
//
// Параметры:
//  УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  СсылкаНаТекущего - СправочникСсылка.Пользователи - исключить
//                       указанную ссылку из поиска.
//                     Неопределено - искать среди всех элементов справочников.
//
//  НайденныйПользователь (Возвращаемое значение):
//                     Неопределено - пользователь не существует.
//                     СправочникСсылка.Пользователи, если найден.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор,
                                               СсылкаНаТекущего = Неопределено,
                                               НайденныйПользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И Пользователи.Ссылка <> &СсылкаНаТекущего
	|";
	
	Результат = Ложь;
	НайденныйПользователь = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НайденныйПользователь = Выборка.Пользователь;
			Результат = Истина;
			Пользователи.НайтиНеоднозначныхПользователейИБ(, УникальныйИдентификатор);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками пользователя информационной базы

// Копирует настройки от пользователя источника пользователю приемнику. При значении
// параметра Переносить = Истина, настройки у пользователя источника удаляются.
//
// Параметры
// ИмяПользователяИсточник - Строка - Имя пользователя ИБ от которого будет производиться копирование настроек
//
// ИмяПользователяПриемник - Строка - Имя пользователя ИБ которому будут записаны настройки
//
// Переносить              - Булево - Если Истина - настройки переносятся от одного пользователя другому,
//                           если Ложь - копируются новому
//
Процедура СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
	
	// Перенос пользовательских настроек отчетов.
	СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек внешнего вида.
	СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос произвольных настроек пользователей.
	СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек данных форм.
	СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек быстрого доступа дополнительных отчетов и обработок.
	Если Не Переносить Тогда
		СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции перемещения пользователей между группами

// Перемещает пользователя из одной группы в другую.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//
// ВозвращаемоеЗначение:
//  Строка - Сообщение о результате переноса.
//
Функция ПеремещениеПользователяВНовуюГруппу(МассивПользователей, ГруппаИсточник,
												ГруппаПриемник, Перемещение) Экспорт
	
	Если ГруппаПриемник = Неопределено
		Или ГруппаПриемник = ГруппаИсточник Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивПеремещенныхПользователей = Новый Массив;
	МассивНеПеремещенныхПользователей = Новый Массив;
	
	Для Каждого ПользовательСсылка Из МассивПользователей Цикл
		
		Если ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Тогда
			МассивНеПеремещенныхПользователей.Добавить(ПользовательСсылка);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ИмяКолонкиСостава = "Пользователь";
		Иначе
			ИмяКолонкиСостава = "ВнешнийПользователь";
		КонецЕсли;
		
		// Если переносимый пользователь не входит в новую группу, то переносим
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			
			Если Перемещение Тогда
				УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;
			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
			
		ИначеЕсли ГруппаПриемник.Состав.Найти(ПользовательСсылка, ИмяКолонкиСостава) = Неопределено Тогда
			
			ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ИмяКолонкиСостава);
			
			// Удаление пользователя из старой группы
			Если Перемещение Тогда
				УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
			КонецЕсли;
			
			МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	СообщениеПользователю = ФормированиеСообщенияПользователю(
		МассивПеремещенныхПользователей, ГруппаПриемник, Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник);
	
	Если МассивПеремещенныхПользователей.Количество() = 0 И МассивНеПеремещенныхПользователей.Количество() = 0 Тогда
		Если МассивПользователей.Количество() = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Пользователь ""%1"" уже включен в группу ""%2"".'");
			ИмяПеремещаемогоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивПользователей[0], "Наименование");
		Иначе
			ТекстСообщения = НСтр("ru = 'Все выбранные пользователи уже включены в группу ""%2"".'");
			ИмяПеремещаемогоПользователя = "";
		КонецЕсли;
		НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
		СообщениеПользователю.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ИмяПеремещаемогоПользователя, НаименованиеГруппы);
		СообщениеПользователю.ЕстьОшибки = Истина;
		Возврат СообщениеПользователю;
	КонецЕсли;
	
	Возврат СообщениеПользователю;
	
КонецФункции

// Проверяет возможность включения внешнего пользователя в группу.
//
// Параметры:
//  ГруппыПриемник     - СправочникСсылка.ГруппыПользователей, группа, в которую
//                       добавляется пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//
// Возвращаемое значение:
//  Булево             - Ложь, если добавление пользователя в группу невозможно.
//
Функция ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Добавляет пользователя в группу.
//
// Параметры:
//  ГруппаПриемник     - СправочникСсылка.ГруппыПользователей - группа, в которую переносится
//                       пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//  ТипПользователя    - Строка - ВнешнийПользователь или Пользователь.
//
Процедура ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ТипПользователя) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ГруппаПриемникОбъект = ГруппаПриемник.ПолучитьОбъект();
		СтрокаСостава = ГруппаПриемникОбъект.Состав.Добавить();
		Если ТипПользователя = "ВнешнийПользователь" Тогда
			СтрокаСостава.ВнешнийПользователь = ПользовательСсылка;
		Иначе
			СтрокаСостава.Пользователь = ПользовательСсылка;
		КонецЕсли;
		
		ГруппаПриемникОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет пользователя из группы.
//
// Параметры:
//  ГруппаПриемник     - СправочникСсылка.ГруппыПользователей - группа, из которой удаляется
//                       пользователь.
//  ПользовательСсылка - СправочникСсылка.Пользователь - пользователь, которого необходимо
//                       добавить в группу.
//  ТипПользователя    - Строка - ВнешнийПользователь или Пользователь.
//
Процедура УдалитьПользователяИзГруппы(ГруппаВладелец, ПользовательСсылка, ТипПользователя) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ГруппаВладелецОбъект = ГруппаВладелец.ПолучитьОбъект();
		Если ГруппаВладелецОбъект.Состав.Количество() <> 0 Тогда
			ГруппаВладелецОбъект.Состав.Удалить(ГруппаВладелецОбъект.Состав.Найти(ПользовательСсылка, ТипПользователя));
			ГруппаВладелецОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует окончание предмета исчисления.
//
// Параметры:
//  ПреобразуемоеЧисло          - Число - число, для которого нужно получить окончание
//                                предмета исчисления.
//
Функция ФормированиеОкончанияСлова(ПреобразуемоеЧисло, ПараметрыПредметаИсчисления = Неопределено) Экспорт
	
	Если ПараметрыПредметаИсчисления = Неопределено Тогда
		ПараметрыПредметаИсчисления = НСтр("ru = 'пользователь,пользователя,пользователей,,,,,,0'");
	КонецЕсли;
	
	ПрописьЧисла = ЧислоПрописью(
		ПреобразуемоеЧисло,
		"Л = ru_RU",
		НСтр("ru = ',,,,,,,,0'"));
	ПрописьЧислаИПредмета = ЧислоПрописью(
		ПреобразуемоеЧисло,
		"Л = ru_RU",
		ПараметрыПредметаИсчисления);
	ПрописьПредмета = СтрЗаменить(
		ПрописьЧислаИПредмета,
		ПрописьЧисла,
		Формат(ПреобразуемоеЧисло, "ЧДЦ=0") + " ");
		
	Возврат ПрописьПредмета;
КонецФункции

// Формирует сообщение о результатах переноса пользователя.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//
// ВозвращаемоеЗначение:
//  Строка - Сообщение пользователю.
//
Функция ФормированиеСообщенияПользователю(МассивПользователей, ГруппаПриемник,
											Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник = Неопределено) Экспорт
	
	КоличествоПользователей = МассивПользователей.Количество();
	НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
	СообщениеПользователю = Неопределено;
	КоличествоНеПеремещенныхПользователей = МассивНеПеремещенныхПользователей.Количество();
	
	УведомлениеПользователя = Новый Структура;
	УведомлениеПользователя.Вставить("Сообщение");
	УведомлениеПользователя.Вставить("ЕстьОшибки");
	УведомлениеПользователя.Вставить("Пользователи");
	
	Если КоличествоНеПеремещенныхПользователей > 0 Тогда
		
		Если КоличествоНеПеремещенныхПользователей = 1 Тогда
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивНеПеремещенныхПользователей[0], "Наименование");
			ТипПользователяСовпадаетСГруппой = (ТипЗнч(МассивНеПеремещенныхПользователей[0].ОбъектАвторизации) = 
												ТипЗнч(ГруппаПриемник.ТипОбъектовАвторизации));
			УведомлениеПользователя.Пользователи = Неопределено;
			СообщениеПользователю = НСтр("ru = 'Пользователь ""%1"" не может быть включен в группу ""%2"",'");
			СообщениеПользователю = СообщениеПользователю + Символы.ПС + 
									?(Не ТипПользователяСовпадаетСГруппой, 
									НСтр("ru = 'т.к. в состав ее участников входят только %3.'"),
									НСтр("ru = 'т.к. у группы стоит признак ""Все пользователи заданного типа"".'"));
		Иначе
			Предмет = "";
			УведомлениеПользователя.Пользователи = СтроковыеФункцииКлиентСервер.
				ПолучитьСтрокуИзМассиваПодстрок(МассивНеПеремещенныхПользователей, Символы.ПС);
			СообщениеПользователю = НСтр("ru = 'Не все пользователи могут быть включены в группу ""%2"",
									|т.к. в состав ее участников входят только %3
									|или у группы стоит признак ""Все пользователи заданного типа"".'");
		КонецЕсли;
		
		ЭлементПредставленияТипаОбъектаАвторизации = Метаданные.НайтиПоТипу(ТипЗнч(ГруппаПриемник.ТипОбъектовАвторизации)).Синоним;
		
		НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
		СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеПользователю, Предмет, НаименованиеГруппы, НРег(ЭлементПредставленияТипаОбъектаАвторизации));
		
		УведомлениеПользователя.Сообщение = СообщениеПользователю;
		УведомлениеПользователя.ЕстьОшибки = Истина;
		
		Возврат УведомлениеПользователя;
		
	ИначеЕсли КоличествоПользователей = 1 Тогда
		
		СтрокаОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивПользователей[0], "Наименование");
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			СтрокаДействие = НСтр("ru = 'исключен из группы'");
			НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
		ИначеЕсли Перемещение Тогда
			СтрокаДействие = НСтр("ru = 'перемещен в группу'");
		Иначе
			СтрокаДействие = НСтр("ru = 'включен в группу'");
		КонецЕсли;
		
		СообщениеПользователю = НСтр("ru = '""%1"" %2 ""%3""'");
	ИначеЕсли КоличествоПользователей > 1 Тогда
		
		СтрокаОбъект = ФормированиеОкончанияСлова(КоличествоПользователей);
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			СтрокаДействие = НСтр("ru = 'исключены из группы'");
			НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
		ИначеЕсли Перемещение Тогда
			СтрокаДействие = НСтр("ru = 'перемещены в группу'");
		Иначе
			СтрокаДействие = НСтр("ru = 'включены в группу'");
		КонецЕсли;
		СообщениеПользователю = НСтр("ru = '%1 %2 ""%3""'");
	КонецЕсли;
	
	Если СообщениеПользователю <> Неопределено Тогда
		СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеПользователю, СтрокаОбъект, СтрокаДействие, НаименованиеГруппы);
	КонецЕсли;
	
	УведомлениеПользователя.Сообщение = СообщениеПользователю;
	УведомлениеПользователя.ЕстьОшибки = Ложь;
	
	Возврат УведомлениеПользователя;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

// Возвращает несовпадающие значения в колонке таблиц значений.
//
// Параметры:
//  ИмяКолонки - Строка - имя сравниваемой колонки.
//  Таблица1   - ТаблицаЗначений.
//  Таблица2   - ТаблицаЗначений.
//
// Возвращаемое значение:
//  Массив значений, которые есть только в колонке только одной из таблиц.
// 
Функция РазличияЗначенийКолонки(ИмяКолонки, Таблица1, Таблица2) Экспорт
	
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений")
	   И ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица2.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;
	
	Если ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица1.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;
	
	Таблица11 = Таблица1.Скопировать(, ИмяКолонки);
	Таблица11.Свернуть(ИмяКолонки);
	
	Таблица22 = Таблица2.Скопировать(, ИмяКолонки);
	Таблица22.Свернуть(ИмяКолонки);
	
	Для каждого Строка Из Таблица22 Цикл
		НоваяСтрока = Таблица11.Добавить();
		НоваяСтрока[ИмяКолонки] = Строка[ИмяКолонки];
	КонецЦикла;
	
	Таблица11.Колонки.Добавить("Признак");
	Таблица11.ЗаполнитьЗначения(1, "Признак");
	
	Таблица11.Свернуть(ИмяКолонки, "Признак");
	
	Отбор = Новый Структура("Признак", 1);
	Таблица = Таблица11.Скопировать(Таблица11.НайтиСтроки(Отбор));
	
	Возврат Таблица.ВыгрузитьКолонку(ИмяКолонки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Обновляет вспомогательные данные, которые зависят только
// от конфигурации.
// Записывает изменения этих данных по версиям конфигурации
// (если изменения есть), чтобы использовать эти изменения
// при обновлении остальных вспомогательных данных, например,
// в обработчике ОбновитьВспомогательныеДанныеПриОбновленииИБ.
//
Процедура ОбновитьПараметрыРаботыПользователей(ЕстьИзменения = Неопределено, ТолькоПроверка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТолькоПроверка ИЛИ МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыРаботыПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().ОбновитьОбщиеПараметры(ЕстьИзменения, ТолькоПроверка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при обновлении конфигурации на версию 1.0.5.2
// Выполняет попытку сопоставления / заполнения реквизита "ИдентификаторПользователяИБ"
// для каждого элемента справочника Пользователи.
//
Процедура ЗаполнитьИдентификаторыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователи.НайтиНеоднозначныхПользователейИБ();
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") );
	
	Запрос.УстановитьПараметр("НеуказанныйПользователь",
		СвойстваНеуказанногоПользователя().Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка <> &НеуказанныйПользователь
	|	И Пользователи.ИдентификаторПользователяИБ = &ПустойИдентификатор";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗанятыеИдентификаторы = РезультатыЗапроса[0].Выгрузить();
	ЗанятыеИдентификаторы.Индексы.Добавить("ИдентификаторПользователяИБ");
	
	ДлинаПолногоИмени = Метаданные.Справочники.Пользователи.ДлинаНаименования;
	СвободныеПользователи = РезультатыЗапроса[1].Выгрузить();
	СвободныеПользователи.Индексы.Добавить("Наименование");
	
	Для каждого Строка Из СвободныеПользователи Цикл
		Строка.Наименование = ВРег(СокрЛП(Строка.Наименование));
	КонецЦикла;
	
	Для каждого ПользовательИБ Из ПользователиИБ Цикл
		
		Если ЗанятыеИдентификаторы.Найти(
		      ПользовательИБ.УникальныйИдентификатор,
		      "ИдентификаторПользователяИБ") <> Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяПользователя = ВРег(СокрЛП(Лев(ПользовательИБ.ПолноеИмя, ДлинаПолногоИмени)));
		
		ОписаниеПользователя = СвободныеПользователи.Найти(ПолноеИмяПользователя, "Наименование");
		Если ОписаниеПользователя <> Неопределено Тогда
			
			ОбъектПользователь = ОписаниеПользователя.Ссылка.ПолучитьОбъект();
			ОбъектПользователь.ОбменДанными.Загрузка = Истина;
			ОбъектПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			ОбъектПользователь.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Переопределяет текст комментария при авторизации пользователя ИБ,
// созданного в конфигураторе с административными правами.
//  Вызывается из Пользователи.АвторизоватьТекущегоПользователя().
//  Комментарий записывается в журнал регистрации.
// 
// Параметры:
//  Комментарий  - Строка - начальное значение задано.
//
Процедура ПослеЗаписиАдминистратораПриАвторизации(Комментарий) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступомСлужебный");
		Модуль.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет действие перед авторизацией пользователя,
// выполняемой при начале работы системы (в процессе получения
// параметров работы клиента при запуске).
//
// Можно заполнить состав пользователей и выполнить перезапуск.
// 
// Требуется, например, при настройке автономного рабочего места.
// 
// Параметры:
//  Перезапустить - Булево, начальное значение Ложь. Если указать
//                  Истина, тогда работа системы будет прекращена.
//
//  ДополнительныеПараметрыКоманднойСтроки - Строка, которая может
//                  быть заполнена для передачи во второй параметр
//                  метода ПрекратитьРаботуСистемы.
//
Процедура ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(
		Перезапустить,
		ДополнительныеПараметрыКоманднойСтроки) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АвтономнаяРаботаСлужебный");
		Модуль.ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(Перезапустить);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет действие при авторизации администратора локальной ИБ
// или администратора области данных.
//
Процедура ПриАвторизацииАдминистратораПриНачалеРаботыСистемы(Администратор) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступомСлужебный");
		Модуль.ПриАвторизацииАдминистратораПриНачалеРаботыСистемы(Администратор);
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос на изменение адреса электронной почты пользователя сервиса.
//
// Параметры:
//  НоваяПочта                - Строка - новый адрес электронной почты пользователя.
//  Пользователь              - СправочникСсылка.Пользователи - пользователь, которому требуется изменить
//                                                              адрес электронной почты.
//  ПарольПользователяСервиса - Строка - пароль текущего пользователя для доступа к менеджеру сервиса.
//
Процедура ПриСозданииЗапросаНаСменуПочты(Знач НоваяПочта, Знач Пользователь, Знач ПарольПользователяСервиса) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		Модуль.СоздатьЗапросНаСменуПочты(НоваяПочта, Пользователь, ПарольПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает доступные текущему пользователю действия с указанным пользователем сервиса.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, доступные
//   действия с которым требуется получить. Если параметр не указан, проверяются
//   доступные действия с текущим пользователем.
//  ПарольПользователяСервиса - Строка - пароль текущего пользователя для
//   доступа в сервис.
//  
Процедура ПриПолученииДействийСПользователемСервиса(ДоступныеДействия, Знач Пользователь = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДоступныеДействия = Модуль.ПолучитьДействияСПользователемСервиса(Пользователь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчики записи пользователей и групп пользователей.

// Доопределяет действия, необходимые после добавления или изменения пользователя,
// группы пользователей, внешнего пользователя, группы внешних пользователей.
//
// Параметры:
//  Ссылка     - СправочникСсылка.Пользователи.
//             - СправочникСсылка.ГруппыПользователей.
//
//  ЭтоНовый   - Булево, если Истина, объект был добавлен, иначе изменен.
//
Процедура ПослеДобавленияИзмененияПользователяИлиГруппы(Ссылка, ЭтоНовый) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступомСлужебный");
		Модуль.ПослеДобавленияИзмененияПользователяИлиГруппы(Ссылка, ЭтоНовый);
	КонецЕсли;
	
КонецПроцедуры

// Доопределяет действия, необходимые после установки пользователя
// информационной базы у пользователя или внешнего пользователя,
// т.е. при изменении реквизита ИдентификаторПользователяИБ на не пустой.
//
// Например, можно обновить роли.
// 
// Параметры:
//  Ссылка - СправочникСсылка.Пользователи.
//
Процедура ПослеУстановкиПользователяИБ(Ссылка, ПарольПользователяСервиса) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступом");
		Модуль.ОбновитьРолиПользователей(Ссылка, ПарольПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Для поддержки работы в модели сервиса.

// Обработчик, вызываемый перед записью пользователя.
Процедура ОбновитьОписаниеWebСервисаМенеджераСервиса() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		Модуль.ОбновитьОписаниеWebСервисаМенеджераСервиса();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый при записи пользователя.
Процедура ОбновитьПользователяСервиса(ПользовательОбъект, СоздатьПользователяСервиса) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		Модуль.ОбновитьПользователяСервиса(ПользовательОбъект, СоздатьПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Снимает у пользователя права доступа в приложение, в записях
// менеджера сервиса.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи - пользователь,
//   для которого требуется аннулировать доступ.
//
Процедура АннулироватьДоступПользователяСервиса(ПользовательОбъект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		Модуль.АннулироватьДоступПользователяСервиса(ПользовательОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый при получении формы справочника Пользователи
//
// Параметры:
//  См. параметры платформенного обработчика ОбработкаПолученияФормы
//
Процедура ОбработкаПолученияФормыПользователя(ВидФормы,
                                              Параметры,
                                              ВыбраннаяФорма,
                                              ДополнительнаяИнформация,
                                              СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		Модуль.ОбработкаПолученияФормыПользователя(
			ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет содержится ли пользователь ИБ с заданным идентификатором
// в списке неразделенных пользователей.
//
// Параметры:
//  ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор
//   пользователя ИБ принадлежность которого к неразделенным пользователям
//   требуется проверить.
//  ПользовательНеразделенный   - Булево - если Истина - пользователь разделенный. Возвращаемый параметр.
//
Процедура ЭтоНеразделенныйПользовательИБ(Знач ИдентификаторПользователяИБ, ПользовательНеразделенный) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ПользовательНеразделенный = Модуль.ЭтоНеразделенныйПользовательИБ(ИдентификаторПользователяИБ);
	Иначе
		ПользовательНеразделенный = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// При работе в модели сервиса, заносит текущего пользователя в список неразделенных,
// если у него не установлено использование разделителей.
//
Процедура ЗарегистрироватьНеразделенногоПользователя() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		Модуль.ЗарегистрироватьНеразделенногоПользователя();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает флаг доступности действий изменения пользователей.
//
// Возвращаемое значение:
// Булево - Истина, если изменение пользователей доступно, иначе Ложь.
//
Процедура ПриОпределенииДоступностиИзмененияПользователей(ДоступноИзменениеПользователей) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДоступноИзменениеПользователей = Модуль.ДоступноИзменениеПользователей();
	Иначе
		ДоступноИзменениеПользователей = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Пользовательские настройки вариантов отчетов.

// Получает варианты переданного отчета и их представления
//
// Параметры:
//  ОтчетМетаданные                - Объект метаданных - отчет, для которого получаются варианты отчета.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы.
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которую сохраняется информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура ПриПолученииПользовательскихВариантовОтчетов(ОтчетМетаданные, ПользовательИнформационнойБазы, СведенияОВариантахОтчетов, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВариантыОтчетов");
		Модуль.ПользовательскиеВариантыОтчетов(ОтчетМетаданные, ПользовательИнформационнойБазы,
			СведенияОВариантахОтчетов, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет переданный вариант отчета из хранилища вариантов отчетов
//
// Параметры:
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которой сохранена информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы у которого очищается вариант отчета
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура ПриУдаленииПользовательскихВариантовОтчета(СведенияОВариантеОтчета, ПользовательИнформационнойБазы, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВариантыОтчетов");
		Модуль.УдалитьПользовательскийВариантОтчета(СведенияОВариантеОтчета,
			ПользовательИнформационнойБазы, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Прочие пользовательские настройки.

// Получает список прочих пользовательских настроек у переданного пользователя справочника
//
// Параметры:
//  ПользовательСсылка     - СправочникСсылка.Пользователи - пользователь, у которого нужно получить настройки.
//  Настройки              - Структура - прочие пользовательские настройки.
//     |-НазваниеНастройки - Строка - название, которое будет отображаться в дереве настроек обработки.
//     |-КартинкаНастройки - Картинка - картинка, которая будет отображаться в дереве обработки.
//     |-СписокНастроек    - СписокЗначений - список полученных настроек
//
Процедура ПриПолученииПрочихПользовательскихНастроек(ПользовательСсылка, Настройки) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		Модуль.ПолучитьНастройкиДополнительныхОтчетовИОбработок(ПользовательСсылка, Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет прочие пользовательские настройки переданным пользователям справочника
//
// Параметры:
//  Настройки              - СписокЗначений - список ключей сохраняемых настроек
//  ПользователиПолучатели - Массив - элемент массива - СправочникСсылка.Пользователи - пользователи,
//                           которым нужно скопировать настройки
//
Процедура ПриСохраненииПрочихПользовательскихНастроек(Настройки, ПользователиПолучатели) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		Модуль.ДобавитьКомандыВСписокБыстрогоДоступа(Настройки, ПользователиПолучатели);
	КонецЕсли;
	
КонецПроцедуры

// Очищает прочие пользовательские настройки переданному пользователю справочника
//
// Параметры:
//  Настройки              - СписокЗначений - список ключей очищаемых настроек
//  ОчищаемыйПользователь  - СправочникСсылка.Пользователи - пользователь, у
//                           которого нужно очистить настройки
//
Процедура ПриУдаленииПрочихПользовательскихНастроек(Настройки, ОчищаемыйПользователь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		Модуль.УдалитьКомандыИзСпискаБыстрогоДоступа(Настройки, ОчищаемыйПользователь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	
	ТекстСообщенияОбОшибке = НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
	                                    |
	                                    |Пользователь ""%1"" не найден в справочнике ""Пользователи"".
	                                    |
	                                    |Обратитесь к администратору.'");
	
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ИмяПользователя);
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &ПолноеИмя";
	
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	Результат = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если НЕ Пользователи.ПользовательИБЗанят(Выборка.ИдентификаторПользователяИБ) Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСсылкиВИерархииРодителя(Знач Родитель, Знач ТекущийРодитель, Знач СсылкиРодителей, Знач СсылкиВИерархииРодителей)
	
	СсылкиРодителя = СсылкиРодителей.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));
	
	Для каждого ОписаниеСсылки Из СсылкиРодителя Цикл
		НоваяСтрока = СсылкиВИерархииРодителей.Добавить();
		НоваяСтрока.Родитель = Родитель;
		НоваяСтрока.Ссылка   = ОписаниеСсылки.Ссылка;
		
		ЗаполнитьСсылкиВИерархииРодителя(Родитель, ОписаниеСсылки.Ссылка, СсылкиРодителей, СсылкиВИерархииРодителей);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет права указанного Пользователя ИБ в режиме разделения данных.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы.
//
Процедура ПроверитьПраваПользователя(ПользовательИБ)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ПользовательИБ.РазделениеДанных.Количество() > 0 Тогда
			
			НедоступныеРоли = НедоступныеРолиПоТипуПользователей(
				Перечисления.ТипыПользователей.ПользовательОбластиДанных);
			
			НайденныеНедоступныеРоли = Новый Массив;
			
			Для каждого Роль Из ПользовательИБ.Роли Цикл
				ИмяРоли = Роль.Имя;
				
				СвойстваНедоступнойРоли = НедоступныеРоли.Получить(ИмяРоли);
				Если СвойстваНедоступнойРоли <> Неопределено Тогда
					НайденныеНедоступныеРоли.Добавить(Роль);
					
					Если СвойстваНедоступнойРоли.Свойство("ИзменяемыеНеразделенныеДанные") Тогда
						Запись = Новый ЗаписьXML;
						Запись.УстановитьСтроку();
						СериализаторXDTO.ЗаписатьXML(Запись, СвойстваНедоступнойРоли.ИзменяемыеНеразделенныеДанные);
						ТаблицаСтрокой = Запись.Закрыть();
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Пользователи.Ошибка при установке ролей пользователю ИБ'"),
							УровеньЖурналаРегистрации.Ошибка,
							,
							ПользовательИБ,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Разделенному пользователю назначена роль
								           |""%1"",
								           |предоставляющая права на изменение общих данных:
								           |""%2"".'"),
								Роль.Представление(),
								ТаблицаСтрокой) );
					КонецЕсли;
					
					Если СвойстваНедоступнойРоли.Свойство("Права") Тогда
						
						Для каждого Право Из СвойстваНедоступнойРоли.Права Цикл
							ЗаписьЖурналаРегистрации(
								НСтр("ru = 'Пользователи.Ошибка при установке ролей пользователю ИБ'"),
								УровеньЖурналаРегистрации.Ошибка,
								,
								ПользовательИБ,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Разделенному пользователю назначена роль
									           |""%1"",
									           |предоставляющая право ""%2"".'"),
									Роль.Представление(),
									Право));
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныеНедоступныеРоли.Количество() > 0 Тогда
				
				Если НайденныеНедоступныеРоли.Количество() = 1 Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Разделенным пользователям не может быть назначена роль
						           |""%1"".'"),
						НайденныеНедоступныеРоли[0].Представление());
				Иначе
					Роли = "";
					Для каждого Роль Из НайденныеНедоступныеРоли Цикл
						Роли = "
						|" + Роль.Представление();
					КонецЦикла;
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Разделенным пользователям не могут быть назначены роли:%1.'"),
						Роли);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстИсключенияЗаписьНеразделенныхПользователейЗапрещена()
	
	Возврат
		НСтр("ru = 'Запись неразделенных пользователей
		           |при включенном использовании разделителей запрещена.'");
КонецФункции

Функция СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователяИБ);
	
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пропустить = Ложь;
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция СледующаяНастройка(ВыборкаНастроек, Пропустить) 
	
	Попытка 
		Пропустить = Ложь;
		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
	
	ТаблицаНастроек = СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);
	
	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастроек = Настройка.КлючНастроек;
		Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
		ОписаниеНастроек = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
			ОписаниеНастроек, ИмяПользователяПриемник);
		Если Переносить Тогда
			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник)
	
	ПользовательИсточникСсылка = Пользователи.НайтиПоИмени(ИмяПользователяИсточник);
	ПользовательПриемникСсылка = Пользователи.НайтиПоИмени(ИмяПользователяПриемник);
	ПользователиПолучатели = Новый Массив;
	ПользователиПолучатели.Добавить(ПользовательПриемникСсылка);
	
	Настройки = Неопределено;
	ПриПолученииПрочихПользовательскихНастроек(ПользовательИсточникСсылка, Настройки);
	Если Настройки <> Неопределено Тогда
		
		СписокНастроек = Новый СписокЗначений;
		Для Каждого Элемент Из Настройки.СписокНастроек Цикл
			СписокНастроек.Добавить(Элемент.Объект, Элемент.Идентификатор);
		КонецЦикла;
		
		ПриСохраненииПрочихПользовательскихНастроек(СписокНастроек, ПользователиПолучатели);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	Если НЕ ПараметрыОбработки.Свойство("ЗначениеКопирования")
	 ИЛИ НЕ ПараметрыОбработки.НовыйПользовательИБСуществует Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяНовогоПользователя = ПараметрыОбработки.ОписаниеНовогоПользователяИБ.Имя;
	
	ИдентификаторКопируемогоПользователяИБ =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыОбработки.ЗначениеКопирования, "ИдентификаторПользователяИБ");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторКопируемогоПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКопируемогоПользователяИБ = Неопределено;
	Если НЕ Пользователи.ПрочитатьПользователяИБ(
	         ИдентификаторКопируемогоПользователяИБ,
	         ОписаниеКопируемогоПользователяИБ) Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяКопируемогоПользователяИБ = ОписаниеКопируемогоПользователяИБ.Имя;
	
	// Копирование настроек.
	СкопироватьНастройкиПользователя(ИмяКопируемогоПользователяИБ, ИмяНовогоПользователя, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Переопределяет стандартное поведение при выгрузке данных.
// Реквизит ИдентификаторПользователяИБ не переносится.
//
Процедура ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Подчиненному)
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
	 ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартная обработка не переопределяется.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи") Тогда
		
		ЭлементДанных.ИдентификаторПользователяИБ =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет стандартное поведение при загрузке данных.
// Реквизит ИдентификаторПользователяИБ не переносится, т.к. всегда
// связан с пользователем текущей базы или не связан с пользователем.
//
Процедура ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, ОтПодчиненного)
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартная обработка не переопределяется.
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
	      ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		
		Если ОтПодчиненного И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			// Получение данных из автономного рабочего места пропускается, а для соответствия
			// данных в узлах, текущие данные отправляются обратно в автономное рабочее место.
			ОтправкаНазад = Истина;
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи") Тогда
			
			ЭлементДанных.ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ЭлементДанных.Ссылка, "ИдентификаторПользователяИБ");
			
		ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
			
			Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
				
				ОбъектПолучен = Ложь;
				Попытка
					Объект = ЭлементДанных.Ссылка.ПолучитьОбъект();
				Исключение
					ОбъектПолучен = Истина;
				КонецПопытки;
				
				Если ОбъектПолучен Тогда
					Объект.ОбщиеДействияПередУдалениемВОбычномРежимеИПриОбмененДанными();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет поведение после получения данных в распределенной ИБ.
Процедура ПослеПолученияДанных(Отправитель, Отказ, ОтПодчиненного)
	

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для процедуры ОбработатьИнтерфейсРолей

Процедура ЗаполнитьРоли(Параметры)
	
	ПрочитанныеРоли = Параметры.ОсновнойПараметр;
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	
	КоллекцияРолей.Очистить();
	
	Если ТипЗнч(ПрочитанныеРоли) = Тип("Массив") Тогда
		Для каждого Роль Из ПрочитанныеРоли Цикл
			КоллекцияРолей.Добавить().Роль = Роль;
		КонецЦикла;
	Иначе
		Для каждого Строка Из ПрочитанныеРоли Цикл
			КоллекцияРолей.Добавить().Роль = Строка.Роль;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура НастроитьИнтерфейсРолейПриСозданииФормы(Параметры)
	
	Форма    = Параметры.Форма;
	Элементы = Форма.Элементы;
	
	// Установка начальных значений перед загрузкой данных из настроек на сервере
	// для случая, когда данные ещё не были записаны и не загружаются.
	ПоказатьПодсистемыРолей = Истина;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	
	// Для нового элемента показать все роли, для существующего - только выбранные роли.
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Параметры.ОсновнойПараметр;
	КонецЕсли;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры)
	
	Настройки = Параметры.ОсновнойПараметр;
	Форма     = Параметры.Форма;
	Элементы  = Форма.Элементы;
	
	ПоказатьПодсистемыРолей = Форма.ПоказатьПодсистемыРолей;
	
	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
		Форма.ПоказатьПодсистемыРолей = Ложь;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	Иначе
		Форма.ПоказатьПодсистемыРолей = Истина;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	КонецЕсли;
	
	Если ПоказатьПодсистемыРолей <> Форма.ПоказатьПодсистемыРолей Тогда
		ОбновитьДеревоРолей(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотрРолей(Параметры)
	
	Элементы               = Параметры.Форма.Элементы;
	ТолькоПросмотрРолей    = Параметры.ОсновнойПараметр;
	
	Если ТолькоПросмотрРолей <> Неопределено Тогда
		
		Элементы.Роли.ТолькоПросмотр              =    ТолькоПросмотрРолей;
		
		Если Элементы.Найти("РолиУстановитьФлажки") <> Неопределено Тогда
			Элементы.РолиУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;
		Если Элементы.Найти("РолиСнятьФлажки") <> Неопределено Тогда
			Элементы.РолиСнятьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТолькоВыбранныеРоли(Параметры)
	
	Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка =
		НЕ Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура ГруппировкаПоПодсистемам(Параметры)
	
	Параметры.Форма.ПоказатьПодсистемыРолей = НЕ Параметры.Форма.ПоказатьПодсистемыРолей;
	Параметры.Форма.Элементы.РолиПоказатьПодсистемыРолей.Пометка = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

Процедура ОбновитьДеревоРолей(Параметры)
	
	Форма            = Параметры.Форма;
	Элементы         = Форма.Элементы;
	Роли             = Форма.Роли;
	ТипПользователей = Параметры.ТипПользователей;
	КоллекцияРолей   = Параметры.КоллекцияРолей;
	
	СкрытьРольПолныеПрава = Параметры.Свойство("СкрытьРольПолныеПрава")
	                      И Параметры.СкрытьРольПолныеПрава = Истина;
	
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
			Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		КонецЕсли;
		ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	Иначе
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;
	
	ПоказатьПодсистемыРолей     = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	// Запоминание текущей строки.
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";
	
	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "", ТекущиеДанные.ПолучитьРодителя().Имя);
			ТекущаяРоль       = ТекущиеДанные.Имя;
		Иначе
			ТекущаяПодсистема = ТекущиеДанные.Имя;
			ТекущаяРоль       = "";
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРолей = ПользователиСлужебныйПовтИсп.ДеревоРолей(
		ПоказатьПодсистемыРолей, ТипПользователей).Скопировать();
	
	ДобавитьИменаНесуществующихРолей(Параметры, ДеревоРолей);
	
	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, Параметры.КоллекцияРолей);
	
	Параметры.Форма.ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
	
	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	
	// Восстановление текущей строки
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема), Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];
		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеПодсистемы).Получить(ИндексПодсистемы);
		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль), Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];
			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИменаНесуществующихРолей(Параметры, ДеревоРолей)
	
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	
	// Добавление несуществующих ролей.
	Для каждого Строка Из КоллекцияРолей Цикл
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, Строка.Роль);
		Если ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина).Количество() = 0 Тогда
			СтрокаДерева = ДеревоРолей.Строки.Вставить(0);
			СтрокаДерева.ЭтоРоль       = Истина;
			СтрокаДерева.Имя           = Строка.Роль;
			СтрокаДерева.Синоним       = "? " + Строка.Роль;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли, КоллекцияРолей)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли, КоллекцияРолей);
		
		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава
			   И (    ВРег(Строка.Имя) = ВРег("ПолныеПрава")
			      ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")) Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 7;
				Строка.Пометка = КоллекцияРолей.НайтиСтроки(
					Новый Структура("Роль", Строка.Имя)).Количество() > 0;
				
				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 6;
				Строка.Пометка = Строка.Строки.НайтиСтроки(
					Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено, СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(СтрокаДереваЗначений.Родитель);
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево, СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат ДанныеФормыКоллекцияЭлементовДерева;
	
КонецФункции

Процедура ОбновитьСоставРолей(Параметры)
	
	Роли                        = Параметры.Форма.Роли;
	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	ТипПользователей            = Параметры.ТипПользователей;
	
	ВсеРоли         = ВсеРоли().Массив;
	НедоступныеРоли = НедоступныеРолиПоТипуПользователей(ТипПользователей);
	
	Если Параметры.ОсновнойПараметр = "ВключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Истина;
		
	ИначеЕсли Параметры.ОсновнойПараметр = "ИсключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Ложь;
	Иначе
		ИдентификаторСтроки = Параметры.Форма.Элементы.Роли.ТекущаяСтрока;
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		БылУстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
			Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
		
		// Обработка всех.
		КоллекцияРолей = Параметры.КоллекцияРолей;
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			Для каждого Роль Из ВсеРоли Цикл
				
				Если НедоступныеРоли.Получить(Роль) = Неопределено
				   И ВРег(Лев(Роль, СтрДлина("Удалить"))) <> ВРег("Удалить")
				   И Роль <> "ПолныеПрава"
				   И Роль <> "АдминистраторСистемы" Тогда
					
					КоллекцияРолей.Добавить().Роль = Роль;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
		Если Параметры.Свойство("ЗапретИзмененияАдминистративногоДоступа")
			И Параметры.ЗапретИзмененияАдминистративногоДоступа Тогда
			
			УстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
				Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
			
			Если УстановленАдминистративныйДоступ И НЕ БылУстановленАдминистративныйДоступ Тогда
				Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", "ПолныеПрава")).Удалить(0);
			ИначеЕсли БылУстановленАдминистративныйДоступ И НЕ УстановленАдминистративныйДоступ Тогда
				КоллекцияРолей.Добавить().Роль = "ПолныеПрава";
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей(Параметры);
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			// Возврат
			Возврат;
			// Возврат
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, ТекущиеДанные.Имя, ТекущиеДанные.Пометка);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПометкуВыбранныхРолей(Параметры, Роли.ПолучитьЭлементы());
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДобавитьУдалитьРоль(Параметры, Знач Роль, Знач Добавить)
	
	НайденныеРоли = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Роль));
	
	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Параметры.КоллекцияРолей.Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			Параметры.КоллекцияРолей.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУдалитьРолиПодсистемы(Параметры, Знач Коллекция, Знач Добавить)
	
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, Строка.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПометкуВыбранныхРолей(Параметры, Знач Коллекция)
	
	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		Если Строка.ЭтоРоль Тогда
			Строка.Пометка = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Параметры, Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

