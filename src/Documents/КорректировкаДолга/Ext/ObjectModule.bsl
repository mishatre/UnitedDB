Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаБух;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УвеличениеДолга", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("УменьшениеДолга", Перечисления.ВидыЗадолженности.Дебиторская);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка.Номер                               КАК Номер,
	|	Ссылка.Дата                                КАК Дата,
	|	Ссылка.КонтрагентДебитор                   КАК Получатель,
	|	Ссылка.Организация                         КАК Поставщик,
	|	Ссылка.Организация                         КАК Организация,
	|	НомерСтроки,
	|	ДоговорКонтрагента                         КАК ДоговорВзаиморасчетов,
	|	ДоговорКонтрагента.Представление           КАК ПредставлениеДоговора,
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов    КАК Валюта,
	|	Сделка                                     КАК Сделка,
	|	Сделка.Представление                       КАК ПредставлениеСделки,
	|	ВЫБОР КОГДА ВидЗадолженности = &УвеличениеДолга ТОГДА Сумма ИНАЧЕ 0 КОНЕЦ КАК УвеличениеДолгаКонтрагента,
	|	ВЫБОР КОГДА ВидЗадолженности = &УменьшениеДолга ТОГДА Сумма ИНАЧЕ 0 КОНЕЦ КАК УменьшениеДолгаКонтрагента
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|ИТОГИ ПО
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов";


	Шапка = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_КорректировкаДолга";

	Макет = ПолучитьМакет("КорректировкаДолга");

	// Выводим шапку накладной
	ЗаголовокВыведен = Ложь;
	НомерПП = 0;
	
	ВыборкаВалют       = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалют.Следующий() Цикл
		
		ИтогоВПлюс  = 0;
		ИтогоВМинус = 0;
		ВыборкаСтрокТовары = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗаголовокВыведен Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ВыборкаСтрокТовары, "Корректировка долга");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Организация, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаСтрокТовары.Получатель, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ЗаголовокВыведен = Истина;
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьМакета);

			ИтогоВПлюс  = ИтогоВПлюс  + ВыборкаСтрокТовары.УвеличениеДолгаКонтрагента;
			ИтогоВМИнус = ИтогоВМИнус + ВыборкаСтрокТовары.УменьшениеДолгаКонтрагента;

		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ИтогоВПлюс  = ИтогоВПлюс;
		ОбластьМакета.Параметры.ИтогоВМИнус = ИтогоВМИнус;
		ОбластьМакета.Параметры.Валюта      = ВыборкаВалют.Валюта;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаДолга" Тогда		
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками дебиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
	 |		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаРеглОстаток, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ КАК СуммаРеглОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыСКонтрагентами
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И УпрУчет = ИСТИНА
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыПоДокументам
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
	 |			И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |ГДЕ
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) > 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.Сумма                         = Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл                     = Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ остатками кредиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);
	Иначе
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.ДокументРасчетовСКонтрагентом, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетовСКонтрагентом,
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	 |			ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток)
	 |		КОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаРеглОстаток, 0) = 0
	 |			ТОГДА ВЫБОР
	 |					КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	 |							ИЛИ КурсыВалютСрезПоследних.Кратность = 0
	 |						ТОГДА ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0)
	 |					ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	 |				КОНЕЦ
	 |		ИНАЧЕ ВзаиморасчетыПоДокументам.СуммаРеглОстаток
	 |	КОНЕЦ КАК СуммаРеглОстаток,
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК КурсВзаиморасчетов,
	 |	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) КАК КратностьВзаиморасчетов
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыСКонтрагентами
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
	 |		,
	 |		Контрагент = &Контрагент
	 |		    И Организация = &Организация
	 |		    И УпрУчет = ИСТИНА
	 |		    И (ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаДокумента
	 |		        ИЛИ &ВалютаДокумента = &ВалютаРегламентированногоУчета
	 |		            И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах = ИСТИНА)) КАК ВзаиморасчетыПоДокументам
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ВзаиморасчетыПоДокументам.ДоговорКонтрагента
	 |			И ВзаиморасчетыСКонтрагентами.Сделка = ВзаиморасчетыПоДокументам.Сделка
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	 |		ПО ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	 |ГДЕ
	 |	ЕСТЬNULL(ВзаиморасчетыПоДокументам.СуммаВзаиморасчетовОстаток, ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток) < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		НоваяСтрока.КурсВзаиморасчетов            = Выборка.КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов       = Выборка.КратностьВзаиморасчетов;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
		НоваяСтрока.Сумма                         = - Выборка.СуммаВзаиморасчетовОстаток;
		НоваяСтрока.СуммаРегл                     = - Выборка.СуммаРеглОстаток;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ПодготовитьТаблицуСуммДолгаУпр(ТаблицаРасчетов,  СтруктураШапкиДокумента);
	ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента);
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолга()

Процедура ПодготовитьТаблицуСуммДолгаУпр(ТаблицаРасчетов, СтруктураШапкиДокумента)

	ТаблицаРасчетов.Колонки.Добавить("УвеличениеДолгаКонтрагента", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("УменьшениеДолгаКонтрагента", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("УвеличениеДолгаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("УменьшениеДолгаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		
		Если СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом = Истина
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаВзаиморасчеты = Неопределено;
		КонецЕсли;

		СтрокаТаблицы.УвеличениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаТаблицы.Сумма);
		СтрокаТаблицы.УменьшениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаТаблицы.Сумма);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.УвеличениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 0,
		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтрокаТаблицы.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтрокаТаблицы.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));

		СтрокаТаблицы.УменьшениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, 
		                                 МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
		                                 СтрокаТаблицы.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтрокаТаблицы.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтрокаТаблицы.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета));

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента)

	ТаблицаРасчетов.Колонки.Вставить(1, "Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.Колонки.Добавить("ВидРасчетовСКонтрагентом", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасчетовСКонтрагентами"));
	ТаблицаРасчетов.Колонки.Добавить("УвеличениеДолгаКонтрагентаРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасчетов.Колонки.Добавить("УменьшениеДолгаКонтрагентаРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор, "Контрагент");
	ТаблицаРасчетов.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентами.Прочее, "ВидРасчетовСКонтрагентом");
	
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		СтрокаРасчетов.УвеличениеДолгаКонтрагентаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаРасчетов.СуммаРегл);
		СтрокаРасчетов.УменьшениеДолгаКонтрагентаРегл = ?(СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаРасчетов.СуммаРегл);
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
			И СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			
			СтрокаРасчетов.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
			
		КонецЕсли;
			
		Если СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			ИЛИ СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			Тогда
			
			СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
			СтрокаРасчетов.ЭтоВозврат               = СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
			
		ИначеЕсли СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			Тогда
			
			СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
			СтрокаРасчетов.ЭтоВозврат               = СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуСуммДолгаРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента");
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Дебитор""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Кредитор""!");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		
	Иначе //.ПереносЗадолженности Тогда
	
		СтруктураОбязательныхПолей.Вставить("КонтрагентДебитор", "Не заполнено значение реквизита ""Контрагент""!");
		СтруктураОбязательныхПолей.Вставить("КонтрагентКредитор", "Не заполнено значение реквизита ""Получатель""!");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента", "Не заполнено значение реквизита ""Договор""!");
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
			Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", "Не заполнено значение реквизита ""Сделка""!");
		КонецЕсли;
	
	КонецЕсли;
	
	//Организация в документе должна совпадать с организацией, указанной в договоре для переноса долга
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЗадолженности, ДоговорКонтрагента, Сумма, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	ЭтоВалютныйДокумент = СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)  Тогда
			Продолжить;
		КонецЕсли;
		
        СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                                 """ табличной части ""Суммы долга"": ";

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда


			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " выбран договор, взаиморасчеты по которому ведутся по заказам.
				                    |Необходимо заполнить сделку!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента Тогда
			Если ЭтоВалютныйДокумент ИЛИ НЕ СтрокаТаблицы.РасчетыВУсловныхЕдиницах Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " выбран договор с несоответствующей документу валютой взаиморасчетов.
									|Необходимо выбрать договор с валютой " + СтруктураШапкиДокумента.ВалютаДокумента
									+ ?(ЭтоВалютныйДокумент, "", " или договор в условных единицах"), Отказ, Заголовок);

			КонецЕсли; 
		КонецЕсли;

	КонецЦикла;
	
	// Если проведение взаимозачета - проверим на совпадение суммы дебиторской и кредиторской задолженности. 
	// Взаимозачет проводится только при полном совпадении сумм
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если ЭтоВалютныйДокумент Тогда
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаКонтрагента");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаКонтрагента");
		Иначе
			СуммаДеб  = ТаблицаПоСуммамДолга.Итог("УменьшениеДолгаКонтрагентаРегл");
			СуммаКред = ТаблицаПоСуммамДолга.Итог("УвеличениеДолгаКонтрагентаРегл");
		КонецЕсли;
		
		Разница = СуммаДеб - СуммаКред;
		
		Если Разница <> 0  Тогда
			ТекстСообщения = "Не совпадают суммы дебиторской и кредиторской задолженности при проведении взаимозачета. 
			                 |Взаимозачет не может быть проведен.";
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Дебиторская задолженность: "  + Формат(СуммаДеб, "ЧЦ=15; ЧДЦ=2")  + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			ТекстСообщения = ТекстСообщения + Символы.ПС+
							 "Разница: " + Формат(Разница, "ЧЦ=15; ЧДЦ=2") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

// Функция возвращает таблицу значений, не содержащую строк источника со значением Ложь в колонке "ВестиПоДокументамРасчетовСКонтрагентом"
//
// Параметры:
// ТаблицаИсточник		- <ТаблицаЗначений> исходная таблица. 
//							Обязательно должна содержать колонку "ВестиПоДокументамРасчетовСКонтрагентом"
//
Функция ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаИсточник)
	
	ТаблицаРезультат = ТаблицаИсточник.Скопировать();
	СтрокиНеПоДокументам = ТаблицаРезультат.НайтиСтроки(Новый Структура("ВестиПоДокументамРасчетовСКонтрагентом", Ложь));
	Для каждого СтрокаНеПоДокументам Из СтрокиНеПоДокументам Цикл
		ТаблицаРезультат.Удалить(СтрокаНеПоДокументам);
	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции // ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения,  СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, 
	                                             ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                                             ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);

	ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ТаблицаУвеличениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		ТаблицаУменьшениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУвеличениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУвеличениеДолга.Получить(Счетчик);
			Если СтрокаТаблицы.УвеличениеДолгаКонтрагента = 0 Тогда
				ТаблицаУвеличениеДолга.Удалить(СтрокаТаблицы);
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУменьшениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУменьшениеДолга.Получить(Счетчик);
			
			Если СтрокаТаблицы.УменьшениеДолгаКонтрагента = 0 Тогда
				ТаблицаУменьшениеДолга.Удалить(СтрокаТаблицы);
			Иначе 
				Счетчик= Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаУвеличениеДолга.Количество() > 0 Тогда
			
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаУпр.Имя         = "СуммаУпр";
			ТаблицаУвеличениеДолга.Колонки.СделкаВзаиморасчеты.Имя        = "Сделка";
			
			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
			// ПО РЕГИСТРУ РасчетыСКонтрагентами.
			НаборДвижений = Движения.РасчетыСКонтрагентами;
			ТаблицаУвеличениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			ТаблицаУвеличениеДолгаРасчеты = ТаблицаУвеличениеДолга.Скопировать();
			ТаблицаУвеличениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

			ТаблицаКомитентов = ТаблицаУвеличениеДолга.Скопировать();
			Счетчик = 0;
			Пока Счетчик < ТаблицаКомитентов.Количество() Цикл

				СтрокаТаблицы = ТаблицаКомитентов.Получить(Счетчик);

				Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
				 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
					ТаблицаКомитентов.Удалить(СтрокаТаблицы);
				Иначе 
					Счетчик= Счетчик + 1;
				КонецЕсли;

			КонецЦикла;

			Если ТаблицаКомитентов.Количество() > 0 Тогда

				НаборДвижений = Движения.ДенежныеСредстваКомитента;
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

				// Заполним таблицу движений.
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.ДенежныеСредстваКомитента.ВыполнитьРасход();

			КонецЕсли;

		КонецЕсли;

		Если ТаблицаУменьшениеДолга.Количество() > 0 Тогда

			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаУпр.Имя = "СуммаУпр";
			ТаблицаУменьшениеДолга.Колонки.СделкаВзаиморасчеты.Имя = "Сделка";

			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

			НаборДвижений = Движения.РасчетыСКонтрагентами;
			ТаблицаУменьшениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			ТаблицаУменьшениеДолгаРасчеты = ТаблицаУменьшениеДолга.Скопировать();
			ТаблицаУменьшениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолгаРасчеты, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

			ТаблицаКомиссионеров = ТаблицаУменьшениеДолга.Скопировать();
			Счетчик = 0;
			Пока Счетчик < ТаблицаКомиссионеров.Количество() Цикл

				СтрокаТаблицы = ТаблицаКомиссионеров.Получить(Счетчик);

				Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
				 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
					ТаблицаКомиссионеров.Удалить(СтрокаТаблицы);
				Иначе 
					Счетчик= Счетчик + 1;
				КонецЕсли;

			КонецЦикла;

			Если ТаблицаКомиссионеров.Количество() > 0 Тогда

				НаборДвижений = Движения.ДенежныеСредстваКомиссионера;
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

				// Заполним таблицу движений.
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолга, ТаблицаДвижений);

				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Движения.ДенежныеСредстваКомиссионера.ВыполнитьРасход();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента, 
	                                                   ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                                                   ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность)
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	ДатаДвижений = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата, Дата);
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;

	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежей = ПодготовитьТаблицуПлатежейОперативныхВзаиморасчетов(ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	Если ТаблицаПлатежей.Количество() > 0 Тогда
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, ТаблицаПлатежей, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Используется при проведении документа "Корректировка долга" с операцией "Перенос задолженности".
// Формирует движения регистров по контрагенту, на которого переносится долг.
//
Процедура ДвиженияПоПереносуЗадолженности(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Возврат;
	КонецЕсли;
	
	ПереносДолгаНаДругогоКонтрагента = СтруктураШапкиДокумента.КонтрагентДебитор <> СтруктураШапкиДокумента.КонтрагентКредитор;
	
	ФормироватьДвиженияВзаиморасчетовПоДокументам = СтруктураШапкиДокумента.ДоговорКонтрагентаВестиПоДокументамРасчетовСКонтрагентом;
	
	Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
		
		ВидРасчетовСКонтрагентом = 
			?(СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
			Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации, Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
			
	КонецЕсли;
			
	// Движения регистров ВзаиморасчетыСКонтрагентами, РасчетыСКонтрагентами, ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
	
	Для каждого СтрокаДолга Из ТаблицаПоСуммамДолга Цикл
		
		ВидДвижения = ?(СтрокаДолга.УвеличениеДолгаКонтрагента > 0, 
			ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		
		// ВзаиморасчетыСКонтрагентами 
		
		Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
		
		Движение.ВидДвижения = ВидДвижения;
		Движение.Период      = СтруктураШапкиДокумента.Дата;
		Движение.Активность  = Истина;
		
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
		Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Движение.Сделка             = СтруктураШапкиДокумента.Сделка;
		
		НоваяСуммаВзаиморасчетов    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаДолга.Сумма,
			СтрокаДолга.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов,
			СтрокаДолга.КурсВзаиморасчетов, СтруктураШапкиДокумента.ДоговорКонтрагентаКурсВзаиморасчетов,
			СтрокаДолга.КратностьВзаиморасчетов, СтруктураШапкиДокумента.ДоговорКонтрагентаКратностьВзаиморасчетов);
		СуммаУпр = ?(ВидДвижения = ВидДвиженияНакопления.Расход, СтрокаДолга.УвеличениеДолгаУпр, СтрокаДолга.УменьшениеДолгаУпр);
		
		Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
		Движение.СуммаУпр            = СуммаУпр;
		
		// РасчетыСКонтрагентами 
		
		Движение = Движения.РасчетыСКонтрагентами.Добавить();
		
		Движение.ВидДвижения = ВидДвижения;
		Движение.Период      = СтруктураШапкиДокумента.Дата;
		Движение.Активность  = Истина;
		
		Движение.Организация        = СтруктураШапкиДокумента.Организация;
		Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
		Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
		Движение.Сделка             = СтруктураШапкиДокумента.Сделка;
		Движение.РасчетыВозврат     = Перечисления.РасчетыВозврат.Расчеты;
		
		Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
		Движение.СуммаУпр            = СуммаУпр;
		
		// ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов
		
		Если ФормироватьДвиженияВзаиморасчетовПоДокументам Тогда
			
			Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
			
			Движение.ВидДвижения = ВидДвижения;
			Движение.Период      = СтруктураШапкиДокумента.Дата;
			Движение.Активность  = Истина;
			
			Движение.Организация        = СтруктураШапкиДокумента.Организация;
			Движение.Контрагент         = СтруктураШапкиДокумента.КонтрагентКредитор;
			Движение.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			Движение.Сделка             = СтруктураШапкиДокумента.Сделка;
			
			НовыйДокументРасчетов = ?(НЕ ЗначениеЗаполнено(СтрокаДолга.ДокументРасчетовСКонтрагентом) ИЛИ ПереносДолгаНаДругогоКонтрагента, 
				СтруктураШапкиДокумента.Ссылка, СтрокаДолга.ДокументРасчетовСКонтрагентом);
				
			Движение.ДокументРасчетовСКонтрагентом = НовыйДокументРасчетов;
			Движение.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
			Движение.УпрУчет                       = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
			
			Движение.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
			Если СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				Движение.СуммаРегл = СтрокаДолга.СуммаРегл;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	// Получим таблицы значений, совпадающие со струкутрой набора записей регистра.
	ТаблицаДвижений_НДСРасчетыСПокупателями	= Движения.НДСРасчетыСПокупателями.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПокупателями.Очистить();

	ТаблицаДвижений_НДСРасчетыСПоставщиками	= Движения.НДСРасчетыСПоставщиками.Выгрузить();
	ТаблицаДвижений_НДСРасчетыСПоставщиками.Очистить();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
		И (СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		Тогда
		
		Если СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ТаблицаПереноса = ТаблицаДвижений_НДСРасчетыСПоставщиками.СкопироватьКолонки();
		ИначеЕсли СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ТаблицаПереноса = ТаблицаДвижений_НДСРасчетыСПокупателями.СкопироватьКолонки();
		КонецЕсли;
		
		СохранятьДокументРасчетов = (СтруктураШапкиДокумента.КонтрагентДебитор = СтруктураШапкиДокумента.КонтрагентКредитор);
		
	Иначе
		ТаблицаПереноса = Неопределено;
	КонецЕсли;
	
	// Разобьем на таблицы по договорам с покупателями и поставщиками,
	// договора типа "Прочее" по взаиморасчетам для целей НДС не проводим.
	// Корректировки долга с комитентами и комиссионерами тоже не отражаем,
	// потому что в документе недостаточно информации о причине корректировки.
	Для каждого СтрокаТаблицыДолгов Из ТаблицаПоСуммамДолга Цикл
	
		СтрокаТаблицыДвижений = Неопределено;
		Если СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ (СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			И СтрокаТаблицыДолгов.ВидЗадолженности = перечисления.ВидыЗадолженности.Дебиторская)
			Тогда
			
            ТекущаяТаблица = ТаблицаДвижений_НДСРасчетыСПокупателями;
			Если СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Покупатель         = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Приход;
				
			КонецЕсли;

			Если СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Покупатель         = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Расход;

			КонецЕсли;

		ИначеЕсли СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			ИЛИ (СтрокаТаблицыДолгов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			И СтрокаТаблицыДолгов.ВидЗадолженности = перечисления.ВидыЗадолженности.Кредиторская)
			Тогда

            ТекущаяТаблица = ТаблицаДвижений_НДСРасчетыСПоставщиками;
			Если СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Поставщик          = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;

			Если СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента <> 0 Тогда

				СтрокаТаблицыДвижений = ТекущаяТаблица.Добавить();

				СтрокаТаблицыДвижений.Организация        = СтруктураШапкиДокумента.Организация;
				СтрокаТаблицыДвижений.Поставщик          = СтрокаТаблицыДолгов.Контрагент;
				СтрокаТаблицыДвижений.ДоговорКонтрагента = СтрокаТаблицыДолгов.ДоговорКонтрагента;
				СтрокаТаблицыДвижений.Сделка             = СтрокаТаблицыДолгов.СделкаВзаиморасчеты;

				СтрокаТаблицыДвижений.ВалютаРасчетов     = СтрокаТаблицыДолгов.ВалютаВзаиморасчетов;
				СтрокаТаблицыДвижений.Сумма 			 = СтрокаТаблицыДолгов.СуммаРегл;
				СтрокаТаблицыДвижений.ВалютнаяСумма		 = СтрокаТаблицыДолгов.УменьшениеДолгаКонтрагента;
				СтрокаТаблицыДвижений.Документ			 = ?(Не ЗначениеЗаполнено(СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом), СтруктураШапкиДокумента.Ссылка,
																				СтрокаТаблицыДолгов.ДокументРасчетовСКонтрагентом);
				СтрокаТаблицыДвижений.ВидДвижения		 = ВидДвиженияНакопления.Приход;

			КонецЕсли;

		КонецЕсли;
		Если Не СтрокаТаблицыДвижений = Неопределено Тогда
			Если Не ТаблицаПереноса = Неопределено тогда
				
				СтрокаПереноса = ТаблицаПереноса.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПереноса,СтрокаТаблицыДвижений, "Организация, ВалютаРасчетов,Сумма,ВалютнаяСумма");
				
				Если СохранятьДокументРасчетов 
					И СтрокаТаблицыДолгов.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента
					Тогда
					СтрокаПереноса.Документ = СтрокаТаблицыДвижений.Документ;
				Иначе
					СтрокаПереноса.Документ = СтруктураШапкиДокумента.Ссылка;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов <> СтрокаТаблицыДолгов.ВалютаВзаиморасчетов Тогда
					СтрокаПереноса.ВалютнаяСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПереноса.ВалютнаяСумма, 
																									СтрокаТаблицыДолгов.ВалютаВзаиморасчетов,  
																									СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, 
																									СтрокаТаблицыДолгов.КурсВзаиморасчетов, 
																									СтруктураШапкиДокумента.ДоговорКонтрагентаКурсВзаиморасчетов, 
																									СтрокаТаблицыДолгов.КратностьВзаиморасчетов, 
																									СтруктураШапкиДокумента.ДоговорКонтрагентаКратностьВзаиморасчетов);
																								КонецЕсли;
																								
				
				СтрокаПереноса.ВидДвижения = ?((не СтрокаТаблицыДолгов.УвеличениеДолгаКонтрагента = 0)  
											= (СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем),
											ВидДвиженияНакопления.Расход,
											ВидДвиженияНакопления.Приход);
				
			КонецЕсли; 
		КонецЕсли;
	
	КонецЦикла;
	
	Если не ТаблицаПереноса = Неопределено Тогда
		ТаблицаПереноса.Свернуть("Организация,ДоговорКонтрагента,Сделка,Документ,ВалютаРасчетов,ВидДвижения","Сумма, ВалютнаяСумма");
		Если СтруктураШапкиДокумента.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			КолонкаКонтрагента = ТаблицаПереноса.Колонки.Добавить("Поставщик");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор, КолонкаКонтрагента.Имя);
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, "ВалютаРасчетов");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПереноса, ТаблицаДвижений_НДСРасчетыСПоставщиками);
			
		Иначе
			КолонкаКонтрагента = ТаблицаПереноса.Колонки.Добавить("Покупатель");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор, КолонкаКонтрагента.Имя);
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаПереноса.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, "ВалютаРасчетов");
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПереноса, ТаблицаДвижений_НДСРасчетыСПокупателями);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТаблицаДвижений_НДСРасчетыСПоставщиками.Количество()>0 Тогда
		Движения.НДСРасчетыСПоставщиками.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПоставщиками.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
		Движения.НДСРасчетыСПоставщиками.ДобавитьДвижение();
	КонецЕсли; 	
	
	Если ТаблицаДвижений_НДСРасчетыСПокупателями.Количество() > 0 Тогда
		Движения.НДСРасчетыСПокупателями.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();
	КонецЕсли;
	
Конецпроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
    Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация", "ДоговорОрганизация");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора" , "ДоговорКонтрагентаВидДоговора");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом" , "ДоговорКонтрагентаВестиПоДокументамРасчетовСКонтрагентом");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов", "ДоговорКонтрагентаВалютаВзаиморасчетов");
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
    Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		Если СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаДокумента Тогда
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКурсВзаиморасчетов",      СтруктураШапкиДокумента.КурсДокумента);
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКратностьВзаиморасчетов", СтруктураШапкиДокумента.КратностьДокумента);
		Иначе
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ДоговорКонтрагентаВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата);
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКурсВзаиморасчетов",      СтруктураКурса.Курс);
			СтруктураШапкиДокумента.Вставить("ДоговорКонтрагентаКратностьВзаиморасчетов", СтруктураКурса.Кратность);
		КонецЕсли;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "СуммыДолга".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом"  , "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ДоговорВид"                              , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("Организация"                      , "ДоговорКонтрагента.Организация");

	СтруктураПолей.Вставить("КонтролироватьДенежныеСредстваКомитента" , "ДоговорКонтрагента.КонтролироватьДенежныеСредстваКомитента");
	СтруктураПолей.Вставить("СделкаВзаиморасчеты"                     , "Сделка");
	СтруктураПолей.Вставить("СделкаРасчеты"                           , "Сделка");
	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"           , "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("Сумма"                                   , "Сумма");
	СтруктураПолей.Вставить("СуммаРегл"                               , "СуммаРегл");
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
	
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ДоговорКонтрагентаПредставление"            , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента)");
	СтруктураСложныхПолей.Вставить("СделкаПредставление"                        , "ПРЕДСТАВЛЕНИЕ(Док.Сделка)");
	СтруктураСложныхПолей.Вставить("ДокументРасчетовСКонтрагентомПредставление" , "ПРЕДСТАВЛЕНИЕ(Док.ДокументРасчетовСКонтрагентом)");
	СтруктураСложныхПолей.Вставить("ВалютаВзаиморасчетовПредставление"          , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов)");
	
	РезультатЗапросаПоСуммамДолга = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			Тогда
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			тогда
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская
			тогда
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе 
			Счетчик= Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			или не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская
			Тогда
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ОрганизацияДебитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентДебитор);
		Если НЕ ЗначениеЗаполнено(ОрганизацияДебитор) Тогда
			ОрганизацияКредитор = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентКредитор);
			Если ЗначениеЗаполнено(ОрганизацияКредитор) Тогда
				Организация        = ОрганизацияКредитор;
				КонтрагентДебитор  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
				КонтрагентКредитор = Основание.КонтрагентДебитор;  
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Организация = ОрганизацияДебитор;
			КонтрагентКредитор = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
			КонтрагентДебитор  = Основание.КонтрагентКредитор;  
		КонецЕсли;
		
		Для каждого СтрокаОснования Из Основание.СуммыДолга Цикл
			НоваяСтрока = СуммыДолга.Добавить();
			НоваяСтрока.ВидЗадолженности        = ?(СтрокаОснования.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, Перечисления.ВидыЗадолженности.Кредиторская, Перечисления.ВидыЗадолженности.Дебиторская);			
			
			ТекКонтрагент =  ?(НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, КонтрагентДебитор, КонтрагентКредитор);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент",   ТекКонтрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
				
			Запрос.Текст = "
			|ВЫБРАТЬ 
			|	Ссылка 
			|ИЗ Справочник.ДоговорыКонтрагентов
			|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Контрагент
			|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяСтрока.ДоговорКонтрагента = Выборка.Ссылка;
			Иначе 
				ОбщегоНазначения.СообщитьОбОшибке("У контрагента " + ТекКонтрагент + " отсутствует договор на поставку с организацией " + Организация + ".");
			КонецЕсли;
			
			НоваяСтрока.КурсВзаиморасчетов      = СтрокаОснования.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = СтрокаОснования.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                   = СтрокаОснования.Сумма;
			
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	      ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	      ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	                            ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                            ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

