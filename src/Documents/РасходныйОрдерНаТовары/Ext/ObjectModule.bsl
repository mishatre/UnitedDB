Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУдалятьДвижения;
Перем мУказаниеСкладовВТЧ Экспорт;
Перем мСклад Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьПриходныйОрдерНаТовары и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиРасходногоОрдераНаТовары() Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Артикул");
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Код");
		ТекстКодАртикул = "Код";
	Иначе
		ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "");
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Контрагент,
	|	Организация,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление      КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ХарактеристикаНоменклатуры          КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();
	
	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Расходный ордер на товары"));

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ПредставлениеОрганизации);
	ПараметрыПечати.Вставить("Поставщик", Шапка.Организация);

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ПредставлениеКонтрагента);
	ПараметрыПечати.Вставить("Получатель", Шапка.Контрагент);
	
	Позиции = Новый Массив;
	
	Ном           = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		

		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);
		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));
		ПараметрыПозиции.Вставить("КоличествоМест", ВыборкаСтрокТовары.КоличествоМест);
		ПараметрыПозиции.Вставить("ЕдиницаИзмеренияМест", ВыборкаСтрокТовары.ЕдиницаИзмеренияМест);
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);

		Если ПараметрыПечати.ВыводитьКоды Тогда			
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТовары.КодАртикул);
		КонецЕсли;

		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		

		Ном = Ном + 1;

		ПараметрыПозиции.Вставить("НомерСтроки", Ном);
		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТара.Товар + " (возвратная тара)");
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТара.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТара.ЕдиницаИзмерения);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТара.КодАртикул);
		КонецЕсли;

		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Сумму прописью
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ВыборкаСтрокТовары.Количество());
	
	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли
	
	Возврат ПараметрыПечати;

КонецФункции //ПолучитьДанныеДляПечатиРасходногоОрдераНаТовары()

#Если Клиент Тогда

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРасходныйОрдерНаТовары()

	ПараметрыПечати = ПолучитьДанныеДляПечатиРасходногоОрдераНаТовары();
	
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйОрдерНаТовары_Накладная";

	//Определим, нужно ли печатать количество мест.
	//Выводить будем, если есть строки с количеством мест, отличным от нуля
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КоличествоМест", 0);
	ВыводитьКоличествоМест = Товары.Количество() > Товары.НайтиСтроки(СтруктураОтбора).Количество();

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	Если ВыводитьКоличествоМест Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки + "|Товар");
	КонецЕсли;

	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = ПараметрыПечати.ИмяКолонкиКодов;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	Если ВыводитьКоличествоМест Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки + "|Количество");
		ТабДокумент.Присоединить(ОбластьМакета);

		ОбластьМакета    = Макет.ПолучитьОбласть(ОбластьСтроки + "|Товар");
		ДопОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки + "|Количество");
	КонецЕсли;

	// Товары и тара
	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);

		ТабДокумент.Вывести(ОбластьМакета);
		Если Не ВыводитьКоличествоМест Тогда
			ДопОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ДопОбластьМакета);
		КонецЕсли;

	КонецЦикла;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРасходныйОрдерНаТовары()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()
	
	Если НачалоДня(Дата) >= Дата(2012, 03, 13) Тогда
		ОбработкаПечати = Обработки.ПечатьТТН1208.ПолучитьФорму("Форма");
	Иначе
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");
	КонецЕсли;
	
	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Ордер" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРасходныйОрдерНаТовары();
	ИначеЕсли ИмяМакета = "1Т" Или ИмяМакета = "_1Т" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Ордер", "Расходный ордер");
	СтруктураМакетов.Вставить("_1Т",   "Бланки ТТН");
	СтруктураМакетов.Вставить("Бланк", "Бланк товарного наполнения");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ" , "Расход с розничных складов в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет, можно ли заполнить табличную часть по документу передачи.
//	Очищает	текущее содержимое табличной части. Если табличная часть не пуста,
//	то в интерактивном режиме запрашивает подтверждение пользователя на очистку.
//
// Параметры
//  ИмяТабЧасти  				– строка - содержащая имя табличной части
//                 
//  ПодтверждатьОчисткуСтрок	– булево – Истина, если необходимо запрашивать 
//									подтверждение пользователя на очистку текущего содержимого
//									таб.части, иначе Ложь
//
// Возвращаемое значение:
//   булево   					– Истина, если заполнение возможно, иначе Ложь
//
Функция ПроверитьИПодготовитьТабЧастьКЗаполнению(ИмяТабЧасти, ПодтверждатьОчисткуСтрок)

	ЗаполнятьТабличнуюЧасть = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДокументПередачи) Тогда
		ТекстПредупреждения = "Не выбран документ передачи.
		                       |Заполнение невозможно.";

	ИначеЕсли Не ДокументПередачи.Проведен Тогда

		ПредставлениеДокументПередачи = СокрЛП(ДокументПередачи.Метаданные().Представление());
		ТекстПредупреждения = """" + ПредставлениеДокументПередачи + """ не проведен.
		                      |Заполнение невозможно.";
	Иначе

		ЗаполнятьТабличнуюЧасть = Истина;

	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
	#Если Клиент Тогда
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
	#Иначе 
		ВызватьИсключение ТекстПредупреждения;
	#КонецЕсли
	КонецЕсли;
	
	ТабЧасть = ЭтотОбъект[ИмяТабЧасти];
	
	Если ТабЧасть.Количество() > 0 Тогда
		
		Если ПодтверждатьОчисткуСтрок Тогда			
	#Если Клиент Тогда			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли; 		
	#КонецЕсли		
		КонецЕсли;
		
		ТабЧасть.Очистить();

	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьИПодготовитьТабЧастьКЗаполнению()
                                                    
// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
// Параметры
//  ПодтверждатьОчисткуСтрок	– булево – Истина, если необходимо запрашивать 
//									подтверждение пользователя на очистку текущего содержимого
//									таб.части, иначе Ложь
Процедура ЗаполнитьТовары(ПодтверждатьОчисткуСтрок) Экспорт

	Если Не ПроверитьИПодготовитьТабЧастьКЗаполнению("Товары", ПодтверждатьОчисткуСтрок) Тогда	
		Возврат;	
	КонецЕсли; 

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад",             Склад);
	Запрос.УстановитьПараметр("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);
	Запрос.УстановитьПараметр("ДатаОстатков",      ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ТекстЗапросаПоПриходномуОрдеру =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                                     КАК Номенклатура,
	|	Остатки.Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
	|	Остатки.СерияНоменклатуры                                КАК СерияНоменклатуры,
	|	Остатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	Остатки.Качество                                         КАК Качество,
	|	Неопределено                                             КАК ДокументРезерва,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Остатки.КоличествоОстаток                                КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаОстатков, ДокументПолучения = &ДокументОснование 
	|                                                      И Склад        = &Склад
	|                                                      И СтатусПартии = &СтатусПартии) КАК Остатки
	|";

	ТекстЗапросаПоНакладной =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура                                     КАК Номенклатура,
	|	Остатки.Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
	|	Остатки.СерияНоменклатуры                                КАК СерияНоменклатуры,
	|	Остатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	Остатки.Качество                                         КАК Качество,
	|	Остатки.ДокументРезерва                                  КАК ДокументРезерва,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Остатки.КоличествоОстаток                                КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
	|";

	ВидыОперацийРасходныйОрдер = Перечисления.ВидыОперацийРасходныйОрдер;

	ЗначениеДокументРезерва = Неопределено;
	Если ВидОперации = ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Запрос.Текст = ТекстЗапросаПоПриходномуОрдеру;
	Иначе
		Запрос.Текст = ТекстЗапросаПоНакладной;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Количество = Выборка.КоличествоОстаток;
		Если Количество = 0 ИЛИ Количество = NULL Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;
		СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;

		СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада = Ложь;
		Если НЕ ЗначениеЗаполнено(Выборка.СерияНоменклатуры) Тогда
			Если (Выборка.Номенклатура.ВестиУчетПоСериям) И (НЕ Выборка.Номенклатура.ВестиПартионныйУчетПоСериям) Тогда
				СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада = Истина;
			КонецЕсли;	
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
// Параметры
//  ПодтверждатьОчисткуСтрок	– булево – Истина, если необходимо запрашивать 
//									подтверждение пользователя на очистку текущего содержимого
//									таб.части, иначе Ложь
Процедура ЗаполнитьВозвратнуюТару(ПодтверждатьОчисткуСтрок) Экспорт

	Если Не ПроверитьИПодготовитьТабЧастьКЗаполнению("ВозвратнаяТара", ПодтверждатьОчисткуСтрок) Тогда	
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"    , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПартии",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ТекстЗапросаПоПриходномуОрдеру =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Неопределено КАК ДокументРезерва,
	|	Остатки.КоличествоОстаток    КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование 
	|                                                      И Склад        = &Склад
	|                                                      И СтатусПартии = &СтатусПартии) КАК Остатки
	|";

	ТекстЗапросаПоНакладной =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.ДокументРезерва,
	|	Остатки.КоличествоОстаток    КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, ДокументПередачи = &ДокументОснование И Склад = &Склад И СтатусПартии = &СтатусПартии) КАК Остатки
	|";
	
	ВидыОперацийРасходныйОрдер = Перечисления.ВидыОперацийРасходныйОрдер;

	ЗначениеДокументРезерва = Неопределено;
	Если ВидОперации = ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		Запрос.Текст = ТекстЗапросаПоПриходномуОрдеру;
	Иначе
		Запрос.Текст = ТекстЗапросаПоНакладной;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Количество = Выборка.КоличествоОстаток;
		Если Количество = 0 ИЛИ Количество = NULL Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ДокументРезерва            = Выборка.ДокументРезерва;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьВозвратнуюТару()

// Выполняет необходимые действия при изменении реквизита ДокументПеремещения
//
Процедура ПриИзмененииДокументаПередачи() Экспорт
	
	Если ЗначениеЗаполнено(ДокументПередачи) Тогда
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ДокументПередачи.Организация ;
		КонецЕсли;

		Если ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ДокументПередачи.Склад;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Контрагент = ДокументПередачи.Контрагент;
			КонецЕсли;			
		Иначе			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ДокументПередачи.СкладОтправитель;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииДокументаПередачи()	

// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого
//
Процедура ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт

	#Если Клиент Или ВнешнееСоединение Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Покупка", ПараметрОбъектКопирования, ПараметрОснование);
	#КонецЕсли

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
	КонецЕсли;

КонецПроцедуры // ИнициализироватьНовыйДокумент()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей =  Новый Структура("ВидОперации, Организация, Склад, ДокументПередачи");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть оформлен на НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Если СтруктураШапкиДокумента.Склад <> СтруктураШапкиДокумента.СкладОтправитель Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Склад документа должен соответствовать складу-отправителю документа перемещения!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;		

	Если ЗначениеЗаполнено(ДокументПередачи) Тогда
		Если ДокументПередачи.Дата >= Дата Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата документа передачи должна быть раньше даты текущего документа!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Качество");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Вызовем общую процедуру для проверки проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОпределитьПринадлежностьКВидамУчета(УпрУчет = Ложь, БухУчет = Ложь, НалУчет = Ложь)

	// Расходный ордер отражается в тех учетах, в которых ДокументПередачи, или только в управленческом
	// в документе передачи может не быть ни одного флажка если это приходный ордер на товары
	// по умолчанию всегда управленческий учет
			
	Если НЕ ЗначениеЗаполнено(ДокументПередачи) или 
		ДокументПередачи.Метаданные().Имя = "ПриходныйОрдерНаТовары" Тогда
		УпрУчет = Истина;
	Иначе
		МД = Метаданные.НайтиПоТипу(ТипЗнч(ДокументПередачи));
		ТекстПризнакиУчета = "";
		Если МД.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВУправленческомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВУправленческомУчете";
		КонецЕсли;
		Если МД.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВБухгалтерскомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВБухгалтерскомУчете";
		КонецЕсли;
		Если МД.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", ОтражатьВНалоговомУчете";
		Иначе
			ТекстПризнакиУчета = ТекстПризнакиУчета + ", Ложь КАК ОтражатьВНалоговомУчете";
		КонецЕсли;
				
		Запрос = Новый Запрос("Выбрать "+Сред(ТекстПризнакиУчета, 2)+" ИЗ Документ."+МД.Имя+" ГДЕ Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ДокументПередачи);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УпрУчет = Выборка.ОтражатьВУправленческомУчете;
			БухУчет = Выборка.ОтражатьВБухгалтерскомУчете;
			НалУчет = Выборка.ОтражатьВНалоговомУчете;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОпределитьПринадлежностьКВидамУчета

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											ТаблицаПоТаре, Отказ, Заголовок, РежимПроведения);

	// ТОВАРЫ ТАРА ПО РЕГИСТРУ СписанныеТовары. (для списания партий товаров)
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда
		
		// Если партии были оприходованы с правом перепродажи, то нужно списывать партии
		Если НЕ СтруктураШапкиДокумента.СниматьРезерв Тогда
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			// Недостающие поля.
			Инд = 0;
			Для каждого Строка Из ТаблицаДвижений Цикл

				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				Строка.ДокументПартии = ДокументПередачи;
				Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
				
				СтрокаТаблицыТоваров = ТаблицаПоТоварам.Получить(Инд-1);
				Если СтрокаТаблицыТоваров.СерияУказываетсяПриОтпускеСоСклада Тогда
					Строка.СерияНоменклатуры = Неопределено;
				КонецЕсли;					
				
			КонецЦикла;
			
			// Если ПУ по складам
			Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			КонецЕсли;
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус2");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			
			// Документ передачи для списания по реализации
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,"ОсновнойДокумент");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");
			
			УпрУчет = Ложь;
			БухУчет = Ложь;
			НалУчет = Ложь;
			
			ОпределитьПринадлежностьКВидамУчета(УпрУчет, БухУчет , НалУчет );
			
			ТаблицаДвижений.ЗаполнитьЗначения(УпрУчет,"ОтражатьВУправленческомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(БухУчет,"ОтражатьВБухгалтерскомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(НалУчет,"ОтражатьВНалоговомУчете");
			
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
			
			
			// ТАРА ПО РЕГИСТРУ СписанныеТовары.
			
			НаборДвижений = Движения.СписанныеТовары;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
			
			// Недостающие поля.
			Для каждого Строка Из ТаблицаДвижений Цикл

				Инд = Инд+1;
				Строка.НомерСтрокиДокумента = Инд;
				Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

			КонецЦикла;

			// Если ПУ по складам
			Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
			КонецЕсли;
			
			// Документ передачи для списания по реализации
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи,"ОсновнойДокумент");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
			
			Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной Тогда
			
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
				
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру,"КодОперацииПартииТоваров");				
			
			КонецЕсли; 
			
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");

			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			ТаблицаДвижений.ЗаполнитьЗначения(УпрУчет,"ОтражатьВУправленческомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(БухУчет,"ОтражатьВБухгалтерскомУчете");
			ТаблицаДвижений.ЗаполнитьЗначения(НалУчет,"ОтражатьВНалоговомУчете");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.СписанныеТовары.ВыполнитьДвижения();
			КонецЕсли;
			
			Если Движения.СписанныеТовары.Модифицированность() Тогда
				Движения.СписанныеТовары.Записать(Истина);
			КонецЕсли;				
			
			УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
			
			Если ТаблицаПоТоварам.Количество() + ТаблицаПоТаре.Количество() > 0 тогда
				
				// Зарегистрируем в последовательности УУ
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период      = Дата;
			КонецЕсли;

			Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
				
				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистуСписанныеТовары

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре,
	Отказ, Заголовок);

	// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		НаборДвижений = Движения.ТоварыВРознице;
	Иначе
		НаборДвижений = Движения.ТоварыНаСкладах;
	КонецЕсли;

	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",    Склад);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");
		
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоТоварам"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ТаблицаПоЦенам);
			
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента["ТаблицаПоТаре"].ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента["ТаблицаПоТаре"], ТаблицаПоЦенам);
		КонецЕсли;
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	КонецЕсли;

	Если (ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение
	 Или СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов)
	   И СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов
		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
		
			// Если в табличной части установлен флаг "Серия указывается при отпуске со склада",
			// то по данному регистру необходимо списывать пустую серию
			ТаблицаПоТоварамКПередаче = ТаблицаПоТоварам.Скопировать();
			Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварамКПередаче Цикл
				Если СтрокаТаблицы.СерияУказываетсяПриОтпускеСоСклада Тогда
					СтрокаТаблицы.СерияНоменклатуры = Неопределено;
				КонецЕсли;
			КонецЦикла;
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПередаче);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);
							
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",            Склад);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", ДокументПередачи);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоТоварам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

		Если ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций
			Если СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда

				// Проверка остатков при оперативном проведении.
				НаборДвижений = Движения.ТоварыКПередачеОрганизаций;
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;

				Если Не Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамКПередаче);

					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвижений, СтруктТаблицДокумента);

					Если НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
						ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
					КонецЕсли;

					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", ДокументПередачи);

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады
		
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументПолучения");
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           "Склад");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПолучатель, "Склад");
		КонецЕсли;
 		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		   И ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады

		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
 
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументПолучения");
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Склад,           "Склад");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СкладПолучатель, "Склад");
		КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,            "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		   И ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;
		
		// Если поступление по приходному ордеру было без права продажи, то надо снять резерв
		Если СтруктураШапкиДокумента.СниматьРезерв Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументРезерва");
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

			ТаблицаДвижений.Очистить();
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(ДокументПередачи, "ДокументРезерва");
			ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам,
	                          ТаблицаПоТаре, Отказ, Заголовок,РежимПроведения);
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру;

		ДокументПередачи = Основание;

		
		Если Основание.Проведен Тогда

			ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной;

		ДокументПередачи = Основание;
#Если КЛИЕНТ Тогда
		// Выбор склада
		Если мУказаниеСкладовВТЧ Тогда
		
			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары",         "Склад");
			СтруктТабЧастей.Вставить("ВозвратнаяТара", "Склад");
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "Склад");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
		ИначеЕсли НЕ мСклад = Неопределено И ТипЗнч(мСклад) = Тип("СправочникСсылка.Склады") Тогда
			Склад = мСклад;
		КонецЕсли;
#КонецЕсли


		Если Основание.Проведен Тогда

			ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение;
		Склад = Основание.СкладОтправитель;
		ДокументПередачи = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику;

		ДокументПередачи = Основание;
#Если КЛИЕНТ Тогда
		// Выбор склада
		Если мУказаниеСкладовВТЧ Тогда
		
			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары",         "Склад");
			СтруктТабЧастей.Вставить("ВозвратнаяТара", "Склад");
			
			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "Склад");
			
			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);
			
		КонецЕсли;
#КонецЕсли


		Если Основание.Проведен Тогда

			ЗаполнитьТовары(Ложь);
			ЗаполнитьВозвратнуюТару(Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда

		//Если без права продажи, то документ резерва - приходный ордер.
		Если ДокументПередачи.БезПраваПродажи Тогда

			Для Каждого СтрокаТЧ Из Товары Цикл
				СтрокаТЧ.ДокументРезерва = ДокументПередачи;
			КонецЦикла;

			Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
				СтрокаТЧ.ДокументРезерва = ДокументПередачи;
			КонецЦикла;

		Иначе

			ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
			ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");

		КонецЕсли;

	Иначе

		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.Товары, "ДокументРезерва");
		ОбработкаТабличныхЧастей.ОчиститьРеквизитТЧ(ЭтотОбъект.ВозвратнаяТара, "ДокументРезерва");

	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	
		//Амбер 101 09022009
		Попытка
			Номер = ДокументПередачи.Организация.Префикс+"СК"+Прав(ДокументПередачи.Номер,8);
			Грузополучатель = ДокументПередачи.Грузополучатель;
			ДатаОтгрузки = ТекущаяДата();
		Исключение				
		КонецПопытки;	
		
		//)Амбер 101 09022009

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураШапкиДокумента.Вставить("СниматьРезерв", Ложь); // инициализация значения
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		
		ЗапросПоШапке = Новый Запрос;
		ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументПередачи);
		
		ЗапросПоШапке.Текст = "ВЫБРАТЬ БезПраваПродажи 
							|ИЗ Документ.ПриходныйОрдерНаТовары
							|ГДЕ Документ.ПриходныйОрдерНаТовары.Ссылка = &ДокументОснование";
							
		ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
		Если ВыборкаПоШапке.Следующий() Тогда
			СтруктураШапкиДокумента.Вставить("СниматьРезерв", ВыборкаПоШапке.БезПраваПродажи);
		КонецЕсли;
		
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",            "ВидСклада",                                  "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",      "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи", "СкладОтправитель",                           "СкладОтправитель");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДокументПередачи", "СкладПолучатель",                            "СкладПолучатель");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                        , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("СерияНоменклатуры"                 , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"        , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ДокументРезерва"                   , "ДокументРезерва");
	СтруктураПолей.Вставить("Качество"                          , "Качество");
	СтруктураПолей.Вставить("СерияУказываетсяПриОтпускеСоСклада", "СерияУказываетсяПриОтпускеСоСклада");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                          , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Склад"                             , "Ссылка.Склад");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ДокументРезерва");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);
							
	 //Амбер 101 23 января 2009
	 Если Товары.Количество() = 0 тогда
		Отказ = истина;
		Предупреждение("Пустой расходный ордер нельзя провести!");
	 КонецЕсли;	 
										 
										 
									 
	//Обработка  установки галки на реализацию
	Если не отказ тогда
	Объект =ДокументПередачи.Ссылка.ПолучитьОбъект();
	    Попытка
     	Объект.ОрдерСформирован= Истина;
		Объект.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру;

	Исключение
	КонецПопытки;

	Объект.Записать(РежимЗаписиДокумента.Проведение);	
	КонецЕсли;
	//)Амбер 101 23 января 2009


	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()


Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
  //Амбер 101 23 января 2009
  Если не отказ тогда
	//Обработка  установки галки на реализацию
	Объект =ДокументПередачи.Ссылка.ПолучитьОбъект();
	    Попытка
     	Объект.ОрдерСформирован= Ложь;
		Объект.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру;

	Исключение
	КонецПопытки;

	Объект.Записать(РежимЗаписиДокумента.Проведение);	
	КонецЕсли;
	//)Амбер 101 23 января 2009
	
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации
                  ИЛИ УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации;
