// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем мУдалятьДвижения;

#Если Клиент Тогда

// Функция формирует печатную форму М-11
//
Функция ПечатьМ11()
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номер 	КАК Номер,
	|	Дата	КАК ДатаДокумента,
	|	Дата	КАК ДатаСоставления,
	|	Организация,
	|	Склад,
	|	Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК МатериалНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК НоменклатурныйНомер,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки
	|ИЗ 
	|	(
	|	ВЫБРАТЬ
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры	КАК Характеристика,
	|		СерияНоменклатуры           КАК Серия,
	|		СУММА(Количество)           КАК Количество,
	|		МИНИМУМ(НомерСтроки) 		КАК НомерСтроки
	|	ИЗ
	|		Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладная
	|	ГДЕ
	|		ТребованиеНакладная.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры
	|
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки ВОЗР
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_М11";
	
	// Вывод заголовка
	Макет = ПолучитьОбщийМакет("М11");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заголовок     = "ТРЕБОВАНИЕ-НАКЛАДНАЯ № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	Область.Параметры.Заполнить(Шапка);
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	Область.Параметры.КодОКПО = СведенияОбОрганизации.КодПоОКПО;
	Область.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	
	ТабДокумент.Вывести(Область);
	
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.МатериалНаименование = СокрЛП(ВыборкаПоСтрокам.МатериалНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		
		ТабДокумент.Вывести(Область);

	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Область);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ11()

// Функция формирует печатную форму документа
//
Функция ПечатьТребованиеНакладная()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад,
	|	Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки КАК НомПП,
	|	Номенклатура.Код КАК Код,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Имя,
	|	ХарактеристикаНоменклатуры       	 КАК Характеристика,
	|	СерияНоменклатуры                	 КАК Серия,
	|	Номенклатура.ЕдиницаХраненияОстатков КАК ЕдИзмМест,
	|	ЕдиницаИзмерения КАК ЕдИзм,
	|	Количество КАК Количество,
	|	КоличествоМест КАК КоличествоМест
	|
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладная
	|
	|ГДЕ
	|	ТребованиеНакладная.Ссылка = &ТекущийДокумент
	|";

	ЗапросПоНоменклатуре = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТребованиеНакладная_ТН";
	
	// Вывод заголовка
	Макет = ПолучитьМакет("ТребованиеНакладная");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка, "Требование-накладная");
	Область.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(Область);

	ФлагПечатиМест = (Материалы.Итог("КоличествоМест") > 0);
	Область        = Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ФлагПечатиМест, "Мест", ""));
	ТабДокумент.Вывести(Область);

	Область          = Макет.ПолучитьОбласть("Строка" + ?(ФлагПечатиМест, "Мест", ""));
	ВыборкаПоСтрокам = ЗапросПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл

		Область.Параметры.Заполнить(ВыборкаПоСтрокам);
		Область.Параметры.Имя = СокрЛП(ВыборкаПоСтрокам.Имя) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаПоСтрокам);
		ТабДокумент.Вывести(Область);

	КонецЦикла;

	// Вывод подвала
	Область = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(Область);

	Возврат ТабДокумент;

КонецФункции // ПечатьТребованиеНакладная()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьТребованиеНакладная();
	ИначеЕсли ИмяМакета = "М11" Тогда
		ТабДокумент = ПечатьМ11();
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер,
		ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка));
	
КонецПроцедуры // Печать()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("Накладная", "Требование-накладная");
	СтруктураМакетов.Вставить("М11", "М-11 (Требование накладная)");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ" , "Расход с розничных складов в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	МатериалыТабличнойЧасти = Материалы.Выгрузить();
	МатериалыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Материалы.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");

	МассивНоменклатуры   = МатериалыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	
	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество, Склад");

	МатериалыТабличнойЧасти = Материалы.Выгрузить();
	Материалы.Очистить();

	КолонкиТабЧасти = МатериалыТабличнойЧасти.Колонки;
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ МатериалыТабличнойЧасти Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтруктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);

		ЗаполнятьИзРезервов = ложь;
		Если ТипЗнч(ИсходнаяСтрока.ЗаказРезерв) = Тип("ДокументСсылка.ЗаказПокупателя") 
		   И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда

			Если ИсходнаяСтрока.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтруктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ЗаказРезерв);
				ЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;

		Если ЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент 
			                                           / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			
			НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество        = СписанноеКоличество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если Не ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);

				НоваяСтрока.Количество = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры //ЗаполнитьПоСериям()

// Функция возращает качество для номенклатуры. Для услуг возвращается пустое значение
//
//		Параметры: Номенклатура - элемент номенклатуры
//
//		Возврат: качество для элемента номенклатуры
//
Функция ПолучитьКачество(Номенклатура) Экспорт

	Если НЕ ЗначениеЗаполнено(Номенклатура) ИЛИ Номенклатура.Услуга Тогда
		Возврат Справочники.Качество.ПустаяСсылка();

	Иначе
		Возврат Справочники.Качество.Новый;

	КонецЕсли;

КонецФункции // ПолучитьКачество()

Процедура ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти) Экспорт

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда

		СтрокаТабличнойЧасти.СтатьяЗатрат         = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Дополняет список обязательных параметров шапки
// упр. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ")
			  + "Подразделение";
КонецПроцедуры

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ нельзя оформлять на НТТ!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "Организация";
	Если НЕ мУказаниеСкладовВТЧ Тогда
		ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ", Склад";
	КонецЕсли;
	//ОбязательныеРеквизитыШапки = "Организация, Склад";
	ДополнитьОбязательныеРеквизитыШапкиУпр(ОбязательныеРеквизитыШапки);

	СтруктураОбязательныхПолей = 
	Новый Структура(ОбязательныеРеквизитыШапки);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитовТЧ(Отказ, Заголовок, ТаблицаМатериалов) Экспорт

	РеквизитыТабМат = "Номенклатура, ЕдиницаИзмерения, Количество, СтатьяЗатрат, Качество";
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	РеквизитыТабМат = РеквизитыТабМат + ", Склад";


	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМат), Отказ, Заголовок);

	// Складов с видом НТТ здесь быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок, "ВидСклада");

	// Проверим что нет услуг
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Материалы", ТаблицаМатериалов, Отказ, Заголовок);

	Для Каждого Строка Из ТаблицаМатериалов Цикл
		Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табличной части "" Материалы "": ";

			Если Строка.ВнутреннийЗаказ.ВидЗаказа <> Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
				//неправильный внутренний заказ
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ с видом заказа """+Строка.ВнутреннийЗаказ.ВидЗаказа+""". Может быть указан только заказ с видом ""В подразделение"" " , Отказ, Заголовок);
			КонецЕсли;
			Если Строка.ВнутреннийЗаказ.Заказчик <> Подразделение Тогда
				// неправильное подразделение
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указан Внутренний заказ, в котором подразделение-заказчик отличается от подразделения, указанного в шапке документа" , Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверкаРеквизитов()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки     =  Не мУказаниеСкладовВТЧ;

	Для каждого СтрокаТЧ из Материалы Цикл
		Если СкладИзШапки Тогда
			СтрокаТЧ.Склад = Склад;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
				СтрокаТЧ.Склад = Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Проводить по партиям сразу нужно если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов.
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	Если ТаблицаПоТоварам.Количество()>0 Тогда
	
		// Зарегистрируем в последовательности УУ
		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период      = Дата;
		КонецЕсли;
	КонецЕсли;

	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		

	Иначе
		
		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

	Если Не РезультатЗапроса.Пустой() Тогда
	
		НаборДвижений = Движения.ТоварыНаСкладах;
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", РезультатЗапроса.Выгрузить());
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
		КонецЕсли;
		
	КонецЕсли;

	РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

	Если Не РезультатЗапроса.Пустой() Тогда
		НаборДвижений = Движения.ТоварыВРознице;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", РезультатЗапроса.Выгрузить());
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если есть списание из резерва, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
			 ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
		
	Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
	
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("Материалы", ТаблицаПоТоварамИзРезерва);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяТабЧасти",     "Материалы");
	ДопПараметры.Вставить("СтатусПартии",    Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить("РежимПроведения", РежимПроведения);
	ДопПараметры.Вставить("ИмяРеквизитаЗаказ", "ВнутреннийЗаказ");
	ДопПараметры.Вставить("ЗаказВШапке",       Ложь);
	ТабИсходная = ТаблицаПоТоварам.Скопировать();
		
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)
	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВнутреннийЗаказ)  // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ВнутреннийЗаказ.Заказчик = Подразделение Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ВнутреннийЗаказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   СтрокаТаблицы.ХарактеристикаНоменклатуры,
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формирование движений по регистру "Товары организаций".
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Если НЕ СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// Заполнение реквизитов управленческого учета регистра СписанныеТовары.
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

// Формирование движений по регистру СписанныеТовары.
//
Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.СписаниеНаЗатраты, "КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ВидСклада",                                  "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",     "ОтражатьВРегламентированномУчете" ,          "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СтатьяЗатрат"              , "СтатьяЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"      , "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Заказ"                     , "Заказ");
	СтруктураПолей.Вставить("ДокументРезерва"           , "ЗаказРезерв");
	СтруктураПолей.Вставить("ЗаказСписания"             , "Заказ");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ЗаказПартии"               , "ЗаказРезерв");
	СтруктураПолей.Вставить("ВнутреннийЗаказ"           , "ВнутреннийЗаказ");

	ТаблицаМатериалов = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();

	ПроверкаРеквизитовТЧ(Отказ, Заголовок, ТаблицаМатериалов);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(ТаблицаМатериалов, СтруктураШапкиДокумента);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры	// ОбработкаПроведения()

// Заполнение на основании ПоступлениеТоваровУслуг, реквизиты шапки, упр.
//
Процедура ОбработкаЗаполненияПоПоступлениюТоваровУслугШапкаУпр(Основание)
	Подразделение = Основание.Подразделение;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)

	ДокументОснование = Основание;

	ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
	ОтражатьВБухгалтерскомУчете  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
	ОтражатьВНалоговомУчете      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете")
		И ОтражатьВБухгалтерскомУчете;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполнение шапки
		Организация                  = Основание.Организация;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Склад                        = Основание.СкладОрдер;
		
		ОбработкаЗаполненияПоПоступлениюТоваровУслугШапкаУпр(Основание);
		
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.СтатьяЗатрат               = ТекСтрокаТовары.Номенклатура.СтатьяЗатрат;
			НоваяСтрока.Качество                   = Справочники.Качество.Новый;
			Если Не Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Если ТипЗнч(ТекСтрокаТовары.Заказ) <> Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
					НоваяСтрока.Заказ       = ТекСтрокаТовары.Заказ;
				КонецЕсли;

				НоваяСтрока.ЗаказРезерв = ТекСтрокаТовары.Заказ;
			КонецЕсли;
			Если мУказаниеСкладовВТЧ Тогда
				НоваяСтрока.Склад       = ТекСтрокаТовары.Склад;
			КонецЕсли;

			ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(НоваяСтрока);

		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
			Возврат;
		КонецЕсли;
	
		Если Основание.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Возврат;
		КонецЕсли;

		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;

		Подразделение = Основание.Заказчик;
		Организация   = Основание.Организация;
		Комментарий   = Основание.Комментарий;
		Склад         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		
		ТабОстатки = ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов(Основание, Дата);
		ЗаполнитьМатериалыПоВнутреннемуЗаказу(ТабОстатки);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		// Заполнение шапки
		Организация = Основание.Организация;
		Склад       = Основание.Склад;

		Для Каждого СтрокаТЧ Из Основание.Товары Цикл

			Недостача = СтрокаТЧ.КоличествоУчет - СтрокаТЧ.Количество;
			Если Недостача <= 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Склад                        = Основание.Склад;
			НоваяСтрока.Номенклатура                 = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения             = СтрокаТЧ.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест         = СтрокаТЧ.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                  = СтрокаТЧ.Коэффициент;
			НоваяСтрока.Качество                     = СтрокаТЧ.Качество;
			НоваяСтрока.СерияНоменклатуры            = СтрокаТЧ.СерияНоменклатуры;
			НоваяСтрока.НоменклатурнаяГруппа         = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
			НоваяСтрока.СтатьяЗатрат                 = НоваяСтрока.Номенклатура.СтатьяЗатрат;
			НоваяСтрока.Количество                   = Недостача;
			НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаТЧ.ХарактеристикаНоменклатуры;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект);

		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Организация              = Основание.Организация;
		Подразделение            = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");

		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;

		Для Каждого СтрокаТЧ Из Основание.Товары Цикл

			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = СтрокаТЧ.СерияНоменклатуры;

			НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
			НоваяСтрока.КоличествоМест             = СтрокаТЧ.КоличествоМест;
			НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = СтрокаТЧ.ЕдиницаИзмеренияМест;
			НоваяСтрока.Склад                      = Основание.СкладПолучатель;

			НоваяСтрока.Заказ                      = СтрокаТЧ.ДокументРезерва;
			НоваяСтрока.Качество                   = СтрокаТЧ.Качество;

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ЭтотОбъект);

			ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(НоваяСтрока);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов( Заказ, Знач КонДата) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 															 КАК Источник,
	|	ВнутренниеЗаказыОстатки.Номенклатура                         КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток          			 КАК КолОстаток,
	|	ВнутренниеЗаказыОстатки.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	ВнутренниеЗаказыОстатки.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияКоэффициент,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ                      КАК ВнутреннийЗаказ,
	|	0 															 КАК КолРезерв,
	|	NULL 														 КАК Склад
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&КонДата, ВнутреннийЗаказ = &Заказ ) КАК ВнутренниеЗаказыОстатки
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 
	|	2 													КАК Источник,
	|	РезервыОстатки.Номенклатура                         КАК Номенклатура,
	|	РезервыОстатки.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	0          			 								КАК КолОстаток,
	|	NULL                     							КАК ЕдиницаИзмерения,
	|	РезервыОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	1         											КАК Коэффициент,
	|	РезервыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияКоэффициент,
	|	РезервыОстатки.ДокументРезерва                      КАК ВнутреннийЗаказ,
	|	РезервыОстатки.КоличествоОстаток          			КАК КолРезерв,
	|	РезервыОстатки.Склад 								КАК Склад
	|ИЗ
    |	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&КонДата,ДокументРезерва = &Заказ %Условие_Склад%)  КАК РезервыОстатки
	|УПОРЯДОЧИТЬ ПО Источник
	|ИТОГИ
	|	СУММА(КолОстаток),
	|	СУММА(КолРезерв)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Если не мУказаниеСкладовВТЧ и ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"%Условие_Склад%","И Склад = &Склад");
		Запрос.УстановитьПараметр( "Склад",   Склад);
	Иначе
		ТекстЗапроса = стрЗаменить(ТекстЗапроса,"%Условие_Склад%","");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить();
	
КонецФункции // ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов()

Процедура ЗаполнитьМатериалыПоВнутреннемуЗаказу(РезультатЗапроса) Экспорт
	СоотвСтрок     = Новый Соответствие;
	МассивОстатков = Новый Массив;

	ОбходНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходНоменклатура.Следующий() Цикл
		ОбходХарактеристика = ОбходНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходХарактеристика.Следующий() Цикл
		
			МассивОстатков.Очистить();
			
			Обход = ОбходХарактеристика.Выбрать();
			Пока Обход.Следующий() Цикл
				
				Если Обход.Источник = 1 Тогда // Это строка с остатком. Добавляем в документ
					
					НоваяСтрока = Материалы.Добавить();
					НоваяСтрока.Номенклатура = Обход.Номенклатура;
					
					НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения = Обход.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      = Обход.Коэффициент;
					НоваяСтрока.Количество 		 = Обход.КолОстаток * Обход.ЕдиницаХраненияКоэффициент / НоваяСтрока.Коэффициент;
					НоваяСтрока.Качество 		 = Справочники.Качество.Новый;
					НоваяСтрока.ВнутреннийЗаказ	 = Обход.ВнутреннийЗаказ;
					
					МассивОстатков.Добавить(НоваяСтрока);
					СоотвСтрок.Вставить(НоваяСтрока);
					
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 

				Иначе
				
					НадоРазместить = Обход.КолРезерв;
					
					Пока НадоРазместить > 0 И МассивОстатков.Количество() > 0 Цикл
						Если не мУказаниеСкладовВТЧ Тогда
							Если ЗначениеЗаполнено(Склад) Тогда
								Если Склад<>Обход.Склад Тогда
									Прервать;
								КонецЕсли;	
							Иначе
								Склад = Обход.Склад;
							КонецЕсли;
						КонецЕсли;
						
						НадоРазместить = НадоРазместить * МассивОстатков[0].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / МассивОстатков[0].Коэффициент;
						
						МожноРазместить = Мин( Макс(МассивОстатков[0].Количество, 0), НадоРазместить);
						
						НоваяСтрока = Материалы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивОстатков[0]);
						СоотвСтрок.Вставить(НоваяСтрока);
						
						НоваяСтрока.Количество         = МожноРазместить;
						НоваяСтрока.ЗаказРезерв 	   = Обход.ВнутреннийЗаказ;
						НоваяСтрока.Склад 			   = Обход.Склад;
						
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 

						// Скорректируем исходную строку на размещенное количество
						МассивОстатков[0].Количество = МассивОстатков[0].Количество - МожноРазместить;
						Если МассивОстатков[0].Количество <= 0 Тогда
							СоотвСтрок.Удалить(МассивОстатков[0]);
							Материалы.Удалить(МассивОстатков[0]);
							МассивОстатков.Удалить(0);
						КонецЕсли;
						
						НадоРазместить = НадоРазместить - МожноРазместить;
					
					КонецЦикла;
					
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьСкладыВТЧ();

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

