// Функция возвращает возможность проведения платежного документа без указания ссылки
// на заявку.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПроводитьБезЗаявки() Экспорт

	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПроведениеПлатежаБезЗаявки, Истина);

	Возврат НЕ СписокФильтров.НайтиПоЗначению(Истина) = Неопределено;

КонецФункции // ЕстьРазрешениеПроводитьБезЗаявки()

// Функция возвращает возможность проведения платежного документа, сумма которого превышает
// текущий остаток свободных денежных средств.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно проводить, иначе Ложь.
//
Функция ЕстьРазрешениеПревышатьСвободныйОстатокДС() Экспорт

	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеСвободногоОстаткаДС, Истина);

	Возврат НЕ СписокФильтров.НайтиПоЗначению(Истина) = Неопределено;

КонецФункции // ЕстьРазрешениеПроводитьБезЗаявки()

// Проверяет остатки по регистрам "ЗаявкиНаРасходованиеСредств" и "ДенежныеСредстваВРезерве"
// по переданной в параметре заявке и управляет значением отказа в проведении платежного документа
//
// Параметры
//  ЗаявкаНаРасходованиеСредств	:Документ.ЗаявкаНаРасходованиеСредств  – заявка, для которой формируются остатки
//  Дата						:Дата –дата, на которую формируются остатки
//  Отказ						:Булево –отказ в проведении документа
//  Заголовок					:Строка –представление документа при проведении
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  СуммаДокумента				:Число - сумма денежных средств к списанию
//  СуммаВзаиморасчетов			:Число - сумма взаиморасчетов по документу
//
Процедура ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
			БанковскийСчетКасса,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение) Экспорт
			
	ТабДоговорыЗаявки = ТаблицаПлатежейУпр.Скопировать();
	ТабДоговорыЗаявки.Свернуть("ДоговорКонтрагента,Сделка,ДокументПланированияПлатежа","СуммаВзаиморасчетов");
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов в ТЧ заявки
	
	Для Каждого Платеж Из ТабДоговорыЗаявки Цикл
		
		Если ЕстьРазрешение И НЕ ЗначениеЗаполнено(Платеж.ДокументПланированияПлатежа) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЕстьРазрешение И НЕ ЗначениеЗаполнено(Платеж.ДокументПланированияПлатежа) Тогда
			
			ТекстСообщения = "Договор: " + Платеж.ДоговорКонтрагента 
			+ ", сделка: " + ?(ЗначениеЗаполнено(Платеж.Сделка), Платеж.Сделка, "не указана")
			+ ": не указана заявка.";
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);	
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ЕстьРазрешение И НЕ Платеж.ДокументПланированияПлатежа.Проведен Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(Строка(Платеж.ДокументПланированияПлатежа)+" не проведена.", Отказ, Заголовок);	
			
			Продолжить;
			
		КонецЕсли;
			
		Запрос = Новый Запрос;
		
		ТекстУсловия = "ЗаявкаНаРасходование = &ДокументЗаявка";
		
		Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
			ТекстУсловия = ТекстУсловия + "
			|И ДоговорКонтрагента = &ДоговорКонтрагента";
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Платеж.ДоговорКонтрагента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Платеж.Сделка) Тогда
			ТекстУсловия = ТекстУсловия + "
			|И (Сделка = &Сделка ИЛИ Сделка=Неопределено)";
			Запрос.УстановитьПараметр("Сделка", Платеж.Сделка);
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
					   |	
		               |ИЗ
		               |	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, " + ТекстУсловия + " ) КАК ЗаявкиНаРасходованиеСредствОстатки";
		
		Запрос.УстановитьПараметр("ДокументЗаявка", Платеж.ДокументПланированияПлатежа);
				
		РезультатЗапроса = Запрос.Выполнить();
		ВыбраннаяЗаявка  = РезультатЗапроса.Выбрать();
		
		Если НЕ ВыбраннаяЗаявка.Следующий() Тогда
			ОстатокПоЗаявке = 0;
		Иначе
			ОстатокПоЗаявке = ?(ВыбраннаяЗаявка.СуммаВзаиморасчетовОстаток = NULL, 0, ВыбраннаяЗаявка.СуммаВзаиморасчетовОстаток);
		КонецЕсли;
		
		Если ОстатокПоЗаявке < Платеж.СуммаВзаиморасчетов Тогда
			
			Если Платеж.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				
				ВалютаПлатежа = Платеж.ДокументПланированияПлатежа.ВалютаДокумента;
				
				ТекстОшибки="Сумма платежа превышает остаток по заявке.
				|Текущий остаток = " + Формат(ОстатокПоЗаявке, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаПлатежа + "
				|Сумма платежа = " + Формат(Платеж.СуммаВзаиморасчетов, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаПлатежа;
				
			Иначе
				
				ВалютаРасчетовЗаявки = Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				ТекстОшибки = "Договор: " + Платеж.ДоговорКонтрагента + ", сделка: " + ?(ЗначениеЗаполнено(Платеж.Сделка), Платеж.Сделка, "не указана") + "
				|Сумма взаиморасчетов превышает остаток по заявке.
				|Текущий остаток = " + Формат(ОстатокПоЗаявке, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаРасчетовЗаявки + "
				|Сумма взаиморасчетов = "+Формат(Платеж.СуммаВзаиморасчетов, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаРасчетовЗаявки;
				
			КонецЕсли;	
			
			Если ЕстьРазрешение Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, , Заголовок, СтатусСообщения.Информация);
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
			КонецЕсли;
	
		КонецЕсли;
					
	КонецЦикла;
		
КонецПроцедуры // ПроверитьОстаткиПоЗаявке()

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен
//
// Параметры
//  Счет				-	Текущее значение счета
//  ВладелецСчета  		–	<СправочникСсылка.Контрагенты (.Организации)> 
//							Контрагент (организация), счет которого нужно получить
//  Валюта  			–	<СправочникСсылка.Валюты>
//							Валюта регламентированного учета
//  СовпадениеВалюты	–	<Булево>
//                          признак совпадения нужной вылюты с указанной, либо исключения ее из поиска
//							По умолчанию ищем счет с указанной валютой.
//
// Возвращаемое значение:
//   <СправочникСсылка.БанковскиеСчета> – найденный счет или пустая ссылка
//
Функция УстановитьБанковскийСчет(Счет,ВладелецСчета, Валюта, СовпадениеВалюты = Истина) Экспорт
	
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|				И &СовпадениеВалюты = ИСТИНА
	|			ИЛИ (НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта)
	|				И &СовпадениеВалюты = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",   ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта", 		 Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты",СовпадениеВалюты);
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Счет <> НовыйСчет 
		И ((НЕ ЗначениеЗаполнено(Счет))
			ИЛИ (ТипЗнч(Счет) = Тип("СправочникСсылка.БанковскиеСчета") 
				И Счет.Владелец <> ВладелецСчета)) Тогда
		
		Счет = НовыйСчет;
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчет()

// Сравнивается реквизит в документе с переданным в качестве параметра
//
// Параметры
//  ДокументСсылка			– <ДокументСсылка> – документ, в котором проверяется реквизит
//  ИмяРеквизита			– <Строка> – имя реквизита документа
//  ЗначениеДляСравнения	– <произвольное> – значение, с которым сравнивается реквизит документа
//  ИмяТаблицыДокумента		– <Строка> – можно передать имя таблицы документа в явном виде, 
//								чтобы избежать обращения к метаданным (необязательный параметр)
//
// Возвращаемое значение:
//   <Булево>   – <Истина> - реквизиты совпали, <Ложь> - реквизиты разные
//					для пустой ссылки считается, что проверка закончилась успешно
//					если к реквизитам документа нет прав на чтение - считается, что реквизиты разные
//
Функция ПроверитьЗначениеРеквизитаДокумента(ДокументСсылка, ИмяРеквизита, ЗначениеДляСравнения, ИмяТаблицыДокумента = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяТаблицыДокумента = "" Тогда
		ИмяТаблицыДокумента = ДокументСсылка.Метаданные().Имя;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1
	|ИЗ
	|	Документ." + ИмяТаблицыДокумента + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка 
	|		И Док." + ИмяРеквизита + " = &ЗначениеДляСравнения");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЗначениеДляСравнения", ЗначениеДляСравнения);
	Результат = Запрос.Выполнить();
	
	РеквизитыСовпали = НЕ Результат.Пустой();
	Возврат РеквизитыСовпали;

КонецФункции // ПроверитьЗначениеРеквизитаДокумента()

// Возвращает свободный остаток денежных средств (текущий остаток за вычетом сумм, уже предназначенных
// к списанию, и зарезервированных).
//
// Параметры
//  БанковскийСчетКасса			:Банковский счет, касса - место списания денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//  МассивЗаявки				:Массив заявок, резервы по которым не должны учитываться при расчете 
//								 свободного остатка.
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату по выбранному счету (кассе)
//
Функция ПолучитьСвободныйОстатокДС(БанковскийСчетКасса,Дата, МассивЗаявки) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваВРезервеОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваВРезервеОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		- ВЫБОР КОГДА НЕ((ДенежныеСредстваКСписаниюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКСписаниюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ 
	|		+ ВЫБОР КОГДА НЕ((ДенежныеСредстваКПолучениюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|				ТОГДА ДенежныеСредстваКПолучениюОстатки.СуммаОстаток 
	|				ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса) КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса И (НЕ ДокументРезервирования В (&МассивЗаявки))) КАК ДенежныеСредстваВРезервеОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса) КАК ДенежныеСредстваКСписаниюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(&Дата, БанковскийСчетКасса = &БанковскийСчетКасса) КАК ДенежныеСредстваКПолучениюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса";
	
	Запрос.УстановитьПараметр("БанковскийСчетКасса",БанковскийСчетКасса);
	Запрос.УстановитьПараметр("Дата",Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивЗаявки",МассивЗаявки);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток=NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьСвободныйОстатокДС() 
	
// Возвращает остаток денежных средств в планируемых поступлениях, еще не размещенных по другим заявкам
// к списанию, и зарезервированных).
//
// Параметры
//  ДокументПланировани			:Документ планируемого поступления денежных средств
//  Дата						:Дата –дата, на которую формируются остатки
//
// Возвращаемое значение:
//   Свободный остаток			:число - свободный остаток на дату выбранному документу
//
Функция ПолучитьНеразмещенныйостаток(ДокументПланирования,Дата, ЗаявкаНаРасходованиеСредств) Экспорт

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток - ВЫБОР КОГДА НЕ((РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток) ЕСТЬ NULL ) ТОГДА РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток
	             |ИЗ
	             |	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(&Дата, ДокументПланирования = &ДокументПланирования) КАК ПланируемыеПоступленияДенежныхСредствОстатки
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, НЕ(ДокументРезервирования = &ТекущаяЗаявка)) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	             |		ПО ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования = РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования";
	
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументПланирования);
	Запрос.УстановитьПараметр("Дата",Новый Граница( КонецДня(Дата),  ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТекущаяЗаявка",ЗаявкаНаРасходованиеСредств);
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() И (НЕ РезультатЗапроса.СвободныйОстаток=NULL) Тогда
		Возврат РезультатЗапроса.СвободныйОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // ПолучитьСвободныйОстатокДС()

// Возвращает остаток и валюту остатка по ресурсу "Сумма" регистра "ЗаявкиНаРасходованиеСредств" по выбранной заявке
// на указанную дату
Функция ПолучитьОстатокПоЗаявке(ЗаявкаНаРасходование,Дата) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(&Дата, ЗаявкаНаРасходование=&ЗаявкаНаРасходование) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("Дата",Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЗаявкаНаРасходование",ЗаявкаНаРасходование);
	
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() И (НЕ Результат.СуммаОстаток=NULL)Тогда
		Возврат Результат.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьОстатокПоЗаявке()

// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Функция ПолучитьТаблицуПлатежейУпр(ДатаДокумента,ВалютаДокумента,Документ, ВидПлатежногоДокумента) Экспорт
	
	ВыбиратьДокументРасчетовСКонтрагентом = (	ВидПлатежногоДокумента = "ПлатежноеПоручениеВходящее"
											ИЛИ ВидПлатежногоДокумента = "ПлатежноеПоручениеИсходящее"
											ИЛИ ВидПлатежногоДокумента = "РасходныйКассовыйОрдер"
											ИЛИ ВидПлатежногоДокумента = "ПриходныйКассовыйОрдер"
											ИЛИ ВидПлатежногоДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств"
											ИЛИ ВидПлатежногоДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств"
											ИЛИ ВидПлатежногоДокумента = "ПлатежноеТребованиеВыставленное"
											ИЛИ ВидПлатежногоДокумента = "ПлатежноеТребованиеПолученное"
											ИЛИ ВидПлатежногоДокумента = "ИнкассовоеПоручениеПолученное"
											ИЛИ ВидПлатежногоДокумента = "ИнкассовоеПоручениеПереданное"
											ИЛИ ВидПлатежногоДокумента = "АккредитивПереданный"
											ИЛИ ВидПлатежногоДокумента = "АккредитивПолученный");
	
	КонтролироватьЗадолженности=(	ВидПлатежногоДокумента = "ПлатежноеПоручениеИсходящее"
											ИЛИ ВидПлатежногоДокумента = "РасходныйКассовыйОрдер"
											ИЛИ ВидПлатежногоДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств"
											ИЛИ ВидПлатежногоДокумента = "ПлатежноеТребованиеПолученное"
											ИЛИ ВидПлатежногоДокумента = "ИнкассовоеПоручениеПолученное"
											ИЛИ ВидПлатежногоДокумента = "АккредитивПереданный");										
											
	Запрос=Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасшифровкаПлатежаДок.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьДенежныеСредстваКомитента КАК КонтролироватьДенежныеСредстваКомитента,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,";
	Если КонтролироватьЗадолженности Тогда
		Запрос.Текст=Запрос.Текст+"
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежаДок.Ссылка.Оплачено
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьСуммуЗадолженности
		|	КОНЕЦ КАК КонтролироватьСуммуЗадолженности,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежаДок.Ссылка.Оплачено
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
		|	КОНЕЦ КАК КонтролироватьЧислоДнейЗадолженности,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежаДок.Ссылка.Оплачено
		|			ТОГДА 0
		|		ИНАЧЕ РасшифровкаПлатежаДок.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности
		|	КОНЕЦ КАК ДопустимаяСуммаЗадолженности,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежаДок.Ссылка.Оплачено
		|			ТОГДА 0
		|		ИНАЧЕ РасшифровкаПлатежаДок.ДоговорКонтрагента.ПроцентПредоплаты
		|	КОНЕЦ КАК ПроцентПредоплаты,";
	Иначе
		Запрос.Текст=Запрос.Текст+"
		|	ЛОЖЬ КАК КонтролироватьСуммуЗадолженности,
		|	ЛОЖЬ КАК КонтролироватьЧислоДнейЗадолженности,
		|	0 КАК ДопустимаяСуммаЗадолженности,
		|	0 КАК ПроцентПредоплаты,";
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"
	|	ВЫБОР КОГДА НЕ РасшифровкаПлатежаДок.ДоговорКонтрагента=&ПустойДоговор 
	|		Тогда РасшифровкаПлатежаДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|		Иначе ЛОЖЬ КОНЕЦ КАК ВестиПоДокументамРасчетовСКонтрагентом,	
	|	РасшифровкаПлатежаДок.Сделка КАК Сделка," + ?(ВыбиратьДокументРасчетовСКонтрагентом, "
	|	РасшифровкаПлатежаДок.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,", "") + "
	|	РасшифровкаПлатежаДок.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежаДок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
	|	РасшифровкаПлатежаДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
	|	РасшифровкаПлатежаДок.Проект КАК Проект,
	|	РасшифровкаПлатежаДок.СуммаПлатежаПлан КАК СуммаПлатежаПлан,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА РасшифровкаПлатежаДок.СуммаПлатежа
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
	|			РасшифровкаПлатежаДок.СуммаПлатежа*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
	|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА &ВалютаДокумента=&ВалютаРеглУчета ТОГДА РасшифровкаПлатежаДок.СуммаПлатежа
	|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
	|		КОГДА &ВалютаДокумента<>&ВалютаРеглУчета И КурсыДокумента.Курс <>0 ТОГДА
	|			РасшифровкаПлатежаДок.СуммаПлатежа*КурсыДокумента.Курс
	|			/ КурсыДокумента.Кратность
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
	|	ВЫБОР
	|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета,
	|	ЕСТЬNULL(ОстаткиВзаиморасчетовПоДокументам.СуммаВзаиморасчетовОстаток, ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаВзаиморасчетовОстаток,
	|	ВЫБОР КОГДА ОстаткиВзаиморасчетовПоДокументам.СуммаВзаиморасчетовОстаток ЕСТЬ NULL 
	|		ТОГДА
	|			ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаУпрОстаток, 0) 
	|		КОГДА ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаУпрОстаток, 0) 
	|		ИНАЧЕ
	|			ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаУпрОстаток, 0) * ЕСТЬNULL(ОстаткиВзаиморасчетовПоДокументам.СуммаВзаиморасчетовОстаток, 0) / ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток
	|	КОНЕЦ КАК СуммаУпрОстаток
	|ИЗ
	|	Документ."+ВидПлатежногоДокумента+".РасшифровкаПлатежа КАК РасшифровкаПлатежаДок
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,ДоговорКонтрагента В (
	|																			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|																				РасшифровкаПлатежаДокВнутр.ДоговорКонтрагента
	|																			ИЗ
	|																			Документ."+ВидПлатежногоДокумента+".РасшифровкаПлатежа КАК РасшифровкаПлатежаДокВнутр
	|																				ГДЕ РасшифровкаПлатежаДокВнутр.Ссылка = &Ссылка)
	|															) КАК ОстаткиВзаиморасчетов
	|	ПО РасшифровкаПлатежаДок.ДоговорКонтрагента = ОстаткиВзаиморасчетов.ДоговорКонтрагента
	|		И ВЫБОР КОГДА РасшифровкаПлатежаДок.Сделка В (&ПустыеСделки) ТОГДА Неопределено ИНАЧЕ РасшифровкаПлатежаДок.Сделка КОНЕЦ = ОстаткиВзаиморасчетов.Сделка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(,ДоговорКонтрагента В (
	|																			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|																				РасшифровкаПлатежаДокВнутр.ДоговорКонтрагента
	|																			ИЗ
	|																			Документ."+ВидПлатежногоДокумента+".РасшифровкаПлатежа КАК РасшифровкаПлатежаДокВнутр
	|																				ГДЕ РасшифровкаПлатежаДокВнутр.Ссылка = &Ссылка)
	|															) КАК ОстаткиВзаиморасчетовПоДокументам
	|	ПО РасшифровкаПлатежаДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА 
	|		И РасшифровкаПлатежаДок.ДоговорКонтрагента = ОстаткиВзаиморасчетовПоДокументам.ДоговорКонтрагента
	|		И ВЫБОР КОГДА РасшифровкаПлатежаДок.Сделка В (&ПустыеСделки) ТОГДА Неопределено ИНАЧЕ РасшифровкаПлатежаДок.Сделка КОНЕЦ = ОстаткиВзаиморасчетовПоДокументам.Сделка" + ?(ВыбиратьДокументРасчетовСКонтрагентом, "
	|		И ВЫБОР КОГДА РасшифровкаПлатежаДок.ДокументРасчетовСКонтрагентом В (&ПустыеРасчетныеДокументы) ТОГДА Неопределено ИНАЧЕ РасшифровкаПлатежаДок.ДокументРасчетовСКонтрагентом КОНЕЦ = ОстаткиВзаиморасчетовПоДокументам.ДокументРасчетовСКонтрагентом", "") + "
	|ГДЕ
	|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
	
	// Получим ссылки пустых документов:
	ТипыСделок = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.Сделка.Тип.Типы();
	МассивПустыхСделок = Новый Массив;
	Для каждого Элемент Из ТипыСделок Цикл
		МассивПустыхСделок.Добавить(Новый(Элемент));
	КонецЦикла;
	
	ТипыРасчетныхДокументов = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Измерения.ДокументРасчетовСКонтрагентом.Тип.Типы();
	МассивПустыхРасчетныхДокументов = Новый Массив;
	Для каждого Элемент Из ТипыРасчетныхДокументов Цикл
		МассивПустыхРасчетныхДокументов.Добавить(Новый(Элемент));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеСделки",МассивПустыхСделок);
	Запрос.УстановитьПараметр("ПустыеРасчетныеДокументы",МассивПустыхРасчетныхДокументов);
	
	Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаРеглУчета",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("Ссылка",Документ);
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПлатежей()

Функция ПолучитьДатуДвижений(ДатаДокумента,ДатаОплаты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаОплаты) Тогда
		
		ДатаДвижений=ДатаДокумента;
		
	ИначеЕсли КонецДня(ДатаДокумента)=КонецДня(ДатаОплаты) Тогда
		
		Отказ = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаДокумента, Отказ);
		
		Если Отказ Тогда
			
			ДатаДвижений = КонецДня(ДатаОплаты);
			
		Иначе
			
			СпособОпределения=УчетнаяПолитика.ОпределениеВремениПроведенияПлатежногоДокумента;
			
			Если СпособОпределения=Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента Тогда
				
				ДатаДвижений=ДатаДокумента;
				
			Иначе
				
				ДатаДвижений = КонецДня(ДатаОплаты);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДатаДвижений=КонецДня(ДатаОплаты);
		
	КонецЕсли;
	
	Возврат ДатаДвижений;
	
КонецФункции // ПолучитьДатуДвижений()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "КонтрагентыВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,Коэффициент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	
	ТекстУсловия="";
	
	Если НЕ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		Запрос.УстановитьПараметр("Сделка", СтрокаПлатеж.Сделка);
		ТекстУсловия=ТекстУсловия+" И Сделка=&Сделка";
	КонецЕсли;
	
	Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		Запрос.УстановитьПараметр("ДокументРасчетовСКонтрагентом", СтрокаПлатеж.ДокументРасчетовСКонтрагентом);
		ТекстУсловия=ТекстУсловия+" И ДокументРасчетовСКонтрагентом = &ДокументРасчетовСКонтрагентом
		|И УпрУчет";
		ТекстРегистр="ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов";
	Иначе
		ТекстРегистр="ВзаиморасчетыСКонтрагентами";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сделка КАК Сделка,
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления."+ТекстРегистр+".Остатки(,
	|	                                                    ДоговорКонтрагента = &ДоговорКонтрагента
	|	                                                   "+ТекстУсловия+")
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток "+?(Коэффициент=1,">0","<0");

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаДолга*Коэффициент;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеУпр(ДокументОбъект,ДокументОснование,мТекущийПользователь) Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.Контрагент КАК Контрагент,
	|	ЗаявкиНаРасходованиеСредствОстатки.Контрагент.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДокументРасчетовСКонтрагентом,
	|   ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|   ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовРаботника,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокументРаботника,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	|   ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
	|	
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь,"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств 
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			
			СтрокаПлатеж   = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			ДокументОбъект.Контрагент=Выборка.Контрагент;
						
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику 
			ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			СтрокаПлатеж   = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			
			Если ДокументОбъект.ВалютаДокумента = Выборка.ВалютаВзаиморасчетовРаботника Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
			Иначе
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетовРаботника,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (ДокументОбъект.КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * ДокументОбъект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / ДокументОбъект.КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОбъект.ФизЛицо                       = Выборка.Получатель;
			ДокументОбъект.РасчетныйДокументРаботника    = Выборка.РасчетныйДокументРаботника;
			ДокументОбъект.ВалютаВзаиморасчетовРаботника = Выборка.ВалютаВзаиморасчетовРаботника;
			
		Иначе
			
			ДокументОбъект.Контрагент = Выборка.Контрагент;
			
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				ДокументОбъект.СчетКонтрагента = Выборка.СчетКонтрагента;
			КонецЕсли;
						
			СтрокаПлатеж=ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ДокументОбъект.ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (ДокументОбъект.КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * ДокументОбъект.КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / ДокументОбъект.КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;	
			
			СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
			СтрокаПлатеж.Сделка=Выборка.Сделка;
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом	 = Выборка.ДокументРасчетовСКонтрагентом;
			СтрокаПлатеж.ДоговорКонтрагента=Выборка.ДоговорКонтрагента;
			
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа=Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
		
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры // ЗаполнитьПоЗаявкеУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по планируемому поступлению в регистре "ПланируемыеПоступленияДенежныхСредств"
//
Процедура ЗаполнитьПоПланируемомуПоступлениюУпр(РасшифровкаПлатежа,ДокументОснование,СтавкаНДС,ВалютаДокумента,КурсДокумента,КратностьДокумента,ВидОперации) Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланируемоеПоступлениеОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ПланируемоеПоступлениеОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ПланируемоеПоступлениеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПланируемоеПоступлениеОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПланируемоеПоступлениеОстатки.Сделка КАК Сделка,
	|	ПланируемоеПоступлениеОстатки.ДокументРасчетовСКонтрагентом,
	|   ПланируемоеПоступлениеОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|   ПланируемоеПоступлениеОстатки.Проект КАК Проект,
	|   ПланируемоеПоступлениеОстатки.ДокументПланирования.Ссылка КАК ДокументПланирования
	|	
	|ИЗ
	|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(, ДокументПланирования = &ДокументПланирования) КАК ПланируемоеПоступлениеОстатки";
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументОснование);
	РасшифровкаПлатежа.Очистить();
		
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
										
		Иначе
									
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=СтрокаПлатеж.КурсВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			
		КонецЕсли;
		
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		СтрокаПлатеж.ДоговорКонтрагента=Выборка.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа=Выборка.ДокументПланирования;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЦикла;
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДокументПланированияПлатежа=ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаявкеУпр()

// Заполняет входящий платежный документ на основании исходящего (для расчетов между собственными организациями)
//
Процедура ЗаполнитьПоПлатежномуДокументу(ДокументОбъект,Основание)
	
	ОпределитьВидОперацииПоПлатежномуДокументу(Основание.ВидОперации, ДокументОбъект.ВидОперации);	
	
	// Получим преобразованный номер документа
	ПреобразованныйНомер = СокрЛП(Основание.Номер);

	Префикс = "";
	МетаданныеДокумента = Основание.Метаданные();

	Если ЗначениеЗаполнено(Основание.Организация) Тогда
		Префикс = СокрЛП(Основание.Организация.Префикс);
	КонецЕсли;

	// удаление префикса из номера документа
	Если Найти(ПреобразованныйНомер, Префикс)=1 Тогда 
		ПреобразованныйНомер = Сред(ПреобразованныйНомер, СтрДлина(Префикс)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(ПреобразованныйНомер, 1) = "-" Тогда
		ПреобразованныйНомер = Сред(ПреобразованныйНомер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(ПреобразованныйНомер, 1)="0" Цикл
		ПреобразованныйНомер=Сред(ПреобразованныйНомер, 2);
	КонецЦикла;
	
	ДокументОбъект.НомерВходящегоДокумента = ПреобразованныйНомер;
	ДокументОбъект.ДатаВходящегоДокумента  = Основание.Дата;
	
	// Поменяем организацию и контрагента местами.	
	ДокументОбъект.Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
	ДокументОбъект.Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
	
	ДокументОбъект.СчетОрганизации=Основание.СчетКонтрагента;
	ДокументОбъект.СчетКонтрагента=Основание.СчетОрганизации;
	
	ДокументОбъект.ВалютаДокумента=Основание.ВалютаДокумента;
	
	Если ДокументОбъект.Организация = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента.Организация Тогда
		ДоговорКонтрагента = ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента;
	Иначе
		ДоговорКонтрагента=Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;	
	
	// Получим список договоров между собственными организациями
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	             |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	             |ИЗ
	             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	             |
	             |ГДЕ
	             |	ДоговорыКонтрагентов.Владелец = &Владелец И
	             |	ДоговорыКонтрагентов.Организация = &Организация";
				 
	Запрос.УстановитьПараметр("Владелец",ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
	ТабДоговоры=Запрос.Выполнить().Выгрузить();
	ТабДоговоры.Индексы.Добавить("ВалютаВзаиморасчетов,ДоговорКонтрагента");
	
	ВидДокумента=Основание.Метаданные().Имя;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПлатежныйДокументРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.СуммаПлатежа,
	|	ПлатежныйДокументРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ПлатежныйДокументРасшифровкаПлатежа.СтавкаНДС,
	|	ПлатежныйДокументРасшифровкаПлатежа.СуммаНДС,
	|	ПлатежныйДокументРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ПлатежныйДокументРасшифровкаПлатежа.Проект,
	|	ПлатежныйДокументРасшифровкаПлатежа.Ссылка.СуммаДокумента,
	|	КурсыВалютСрезПоследних.Курс КАК КурсДокумента,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьДокумента
	|ИЗ
	|	Документ."+ВидДокумента+".РасшифровкаПлатежа КАК ПлатежныйДокументРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО ПлатежныйДокументРасшифровкаПлатежа.Ссылка.ВалютаДокумента = КурсыВалютСрезПоследних.Валюта
	|
	|ГДЕ
	|	ПлатежныйДокументРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Основание);
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументОбъект.СуммаДокумента=Выборка.СуммаДокумента;
		ДокументОбъект.КурсДокумента=Выборка.КурсДокумента;
		ДокументОбъект.КратностьДокумента=Выборка.КратностьДокумента;
		Выборка.Сбросить();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПлатеж=ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		СтруктураПоискаДоговор=Новый Структура;
		СтруктураПоискаДоговор.Вставить("ДоговорКонтрагента",ДоговорКонтрагента);
		СтруктураПоискаДоговор.Вставить("ВалютаВзаиморасчетов",Выборка.ВалютаВзаиморасчетов);
		
		МассивДоговор=ТабДоговоры.НайтиСтроки(СтруктураПоискаДоговор);
		
		Если МассивДоговор.Количество()=1 Тогда
			СтрокаПлатеж.ДоговорКонтрагента=ДоговорКонтрагента;
		Иначе
			СтруктураПоискаВалюта=Новый Структура;
			СтруктураПоискаВалюта.Вставить("ВалютаВзаиморасчетов",Выборка.ВалютаВзаиморасчетов);
			
			МассивВалюта=ТабДоговоры.НайтиСтроки(СтруктураПоискаВалюта);
			Если МассивВалюта.Количество()>0 Тогда
				СтрокаПлатеж.ДоговорКонтрагента=МассивВалюта[0].ДоговорКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПлатеж.КурсВзаиморасчетов=Выборка.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов=Выборка.КратностьВзаиморасчетов;
		СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
		СтрокаПлатеж.СуммаПлатежа=Выборка.СуммаПлатежа;
		СтрокаПлатеж.СтавкаНДС=Выборка.СтавкаНДС;
		СтрокаПлатеж.СуммаНДС=Выборка.СуммаНДС;	
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект=Выборка.Проект;
		
	КонецЦикла;
				 	
КонецПроцедуры // ЗаполнитьПриходПоПлатежномуДокументу()

// Процедура выполняет заполнение суммы документа и суммы взаиморасчетов по регистру расчетов с подотчетными лицами
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(ДокументОбъект, СтрокаПлатеж) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ФизЛицо",              ДокументОбъект.ФизЛицо);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    ДокументОбъект.РасчетныйДокументРаботника);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			Организация = &Организация
	|				И ФизЛицо = &ФизЛицо
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		
		СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
		    ДокументОбъект.ВалютаВзаиморасчетовРаботника, ДокументОбъект.ВалютаДокумента,
		    СтрокаПлатеж.КурсВзаиморасчетов, ДокументОбъект.КурсДокумента,
		    СтрокаПлатеж.КратностьВзаиморасчетов, ДокументОбъект.КратностьДокумента);
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(ДокументОбъект, СтрокаПлатеж)

	ДокументОбъект.КурсДокумента         = ?(ДокументОбъект.КурсДокумента = 0, 1, ДокументОбъект.КурсДокумента);
	ДокументОбъект.КратностьДокумента    = ?(ДокументОбъект.КратностьДокумента = 0, 1, ДокументОбъект.КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Стандартная процедура ввода расходного платежного документа на основании. Применяется ко всем документам,
// кроме исходящего платежного поручения и расходного кассового ордера.
//
Процедура ЗаполнитьРасходПоОснованию(ДокументОбъект, Основание, ПользовательДокумента) Экспорт
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПользовательДокумента, "ОсновнаяСтавкаНДС");
		
	СпособЗаполнения = "Не заполнять";
	ДокументОбъект.ВалютаДокумента  = мВалютаРегламентированногоУчета;
		
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		 
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
			
			Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница)
				И ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = Основание.СтруктурнаяЕдиница;
			КонецЕсли;
			
			Если НЕ ДокументОбъект.Касса.ВалютаДенежныхСредств.Пустая() Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			Иначе
				ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница)
				И ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.СчетОрганизации = Основание.СтруктурнаяЕдиница;
			Иначе
				ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
			
			Если НЕ ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств.Пустая() Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
			Иначе
				ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
			КонецЕсли;

			Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента Тогда
				ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
			КонецЕсли;
			
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, );
		
		ВалютаОснования = Основание.ВалютаДокумента;
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, );
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Док.Сделка КАК Сделка,
		|	Док.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(Док.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.Ссылка.ДокументОснование КАК Сделка,
		|		ВЫБОР
		|			КОГДА Товары.Ссылка.СуммаВключаетНДС
		|				ТОГДА Товары.Сумма
		|			ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|		КОНЕЦ КАК Сумма,
		|		Товары.СтавкаНДС КАК СтавкаНДС
		|	ИЗ
		|		Документ.СчетНаОплатуПоставщика.Товары КАК Товары
		|	ГДЕ
		|		Товары.Ссылка = &Основание
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Услуги.Ссылка.ДокументОснование,
		|		ВЫБОР
		|			КОГДА Услуги.Ссылка.СуммаВключаетНДС
		|				ТОГДА Услуги.Сумма
		|			ИНАЧЕ Услуги.Сумма + Услуги.СуммаНДС
		|		КОНЕЦ,
		|		Услуги.СтавкаНДС
		|	ИЗ
		|		Документ.СчетНаОплатуПоставщика.Услуги КАК Услуги
		|	ГДЕ
		|		Услуги.Ссылка = &Основание) КАК Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Сделка,
		|	Док.СтавкаНДС";
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.СчетНаОплатуПоставщика", "Документ.ЗаказПоставщику");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.Ссылка.ДокументОснование", "Товары.Ссылка");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Услуги.Ссылка.ДокументОснование", "Услуги.Ссылка");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Основание", Основание);
		ТаблицаОснования = Новый ТаблицаЗначений;
		ТаблицаОснования.Колонки.Добавить("Сделка",    Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика, ДокументСсылка.ЗаказПоставщику"));
		ТаблицаОснования.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаОснования.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число"));
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаОснования);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТаблицаОснования.ЗаполнитьЗначения(Основание, "Сделка");
				
			Иначе
				
				Для каждого СтрокаОснования Из ТаблицаОснования Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаОснования.Сделка) Тогда
						СтрокаОснования.Сделка = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаОснования.Свернуть("Сделка, СтавкаНДС", "Сумма");
			
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
			|	-РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК ОстатокВзаиморасчетов
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Основание) КАК РасчетыСКонтрагентамиОстатки
			|ГДЕ
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0";
				
			Запрос.УстановитьПараметр("Основание", Основание);
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Коэффициент = 0;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ОстатокВзаиморасчетов = Выборка.ОстатокВзаиморасчетов;
				СуммаВзаиморасчетовОснования = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					ТаблицаОснования.Итог("Сумма"),
					ВалютаОснования, ВалютаВзаиморасчетов,
					СтруктураКурсаОснования.Курс, СтруктураКурсаВзаиморасчетов.Курс,
					СтруктураКурсаОснования.Кратность, СтруктураКурсаВзаиморасчетов.Кратность);
				Коэффициент = ?(ОстатокВзаиморасчетов < СуммаВзаиморасчетовОснования, ОстатокВзаиморасчетов / СуммаВзаиморасчетовОснования, 1);
			КонецЕсли;
			
		Иначе
			
			Коэффициент = 1;
			
		КонецЕсли;
		
		Если Коэффициент > 0 Тогда
		
			Для каждого СтрокаОснования Из ТаблицаОснования Цикл
			
				СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				
				СтрокаПлатеж.ДоговорКонтрагента  = ДоговорКонтрагента;
				СтрокаПлатеж.Сделка              = СтрокаОснования.Сделка;
				
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					Окр(СтрокаОснования.Сумма * Коэффициент, 2),
					ВалютаОснования, ВалютаВзаиморасчетов,
					СтруктураКурсаОснования.Курс, СтрокаПлатеж.КурсВзаиморасчетов,
					СтруктураКурсаОснования.Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					
				СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетов, ДокументОбъект.ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, ДокументОбъект.КурсДокумента,
					СтрокаПлатеж.КратностьВзаиморасчетов, ДокументОбъект.КратностьДокумента);
					
				СтрокаПлатеж.СтавкаНДС = СтрокаОснования.СтавкаНДС;
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств; 
				УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ДокументОбъект.ВидОперации);
				Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
					СтрокаПлатеж.Проект = ДоговорКонтрагента.ОсновнойПроект;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли; 
		 
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		  	или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		  	или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
			
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
			Иначе
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			КонецЕсли;
		Иначе
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
			Иначе
				ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПлатеж=ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		ДокументОбъект.Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			СтрокаПлатеж.Проект                   = Основание.Проект;
		КонецЕсли;

		СтрокаПлатеж.Сделка = ?(ЗначениеЗаполнено(Основание.Сделка), Основание.Сделка, Неопределено);
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		ДокументОбъект.СчетОрганизации              = ДокументОбъект.Организация.ОсновнойБанковскийСчет;	
		
		Если НЕ ДокументОбъект.СчетОрганизации.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
			
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
		
		СтрокаПлатеж.СтавкаНДС=СтавкаНДС;
						
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда
		
		Если Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Заявка оформлена на расходование наличных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ОпределитьОперациюПоОснованиюУпр(ДокументОбъект.ВидОперации, Основание.ВидОперации);
		
		ДокументОбъект.Организация = Основание.Организация;
		ДокументОбъект.ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
			ДокументОбъект.СчетОрганизации = Основание.БанковскийСчетКасса;
		ИначеЕсли ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетОрганизации= ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		ДокументОбъект.ДокументОснование = Основание.Ссылка;
		
		Если ДокументОбъект.ВалютаДокумента.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		ДокументОбъект.Подразделение = Основание.ЦФО;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		ЗаполнитьПоЗаявкеУпр(ДокументОбъект,Основание, ПользовательДокумента);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") Тогда
		
		ЗаполнитьПоПлатежномуДокументу(ДокументОбъект,Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику;
		КонецЕсли;
		ДокументОбъект.ФизЛицо                       = Основание.ФизЛицо;
		ДокументОбъект.РасчетныйДокументРаботника    = Основание;
		ДокументОбъект.ВалютаВзаиморасчетовРаботника = Основание.ВалютаДокумента;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(
			ДокументОбъект.ВалютаВзаиморасчетовРаботника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";

	КонецЕсли;
	
	Если СпособЗаполнения = "По взаиморасчетам" Тогда
		
		ЗаполнитьПоВзаиморасчетамУпр(ДокументОбъект.ВалютаДокумента,ДокументОбъект.КурсДокумента,ДокументОбъект.КратностьДокумента,СтрокаПлатеж,-1);
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		
		ПроверкаКурсовВалют(ДокументОбъект, СтрокаПлатеж);
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(ДокументОбъект, СтрокаПлатеж);
		
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			ОснованиеСуммаДокумента, 
			Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсОснования, Основание.КурсВзаиморасчетов, 
			КратностьОснования, Основание.КратностьВзаиморасчетов);
		СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.ВалютаДокумента, 
			СтрокаПлатеж.КурсВзаиморасчетов, ДокументОбъект.КурсДокумента, 
			СтрокаПлатеж.КратностьВзаиморасчетов, ДокументОбъект.КратностьДокумента);
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ДокументОбъект.СуммаДокумента     = ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ДокументОбъект.ОтраженоВОперУчете = Истина;
	ДокументОбъект.ДокументОснование  = Основание;
	
КонецПроцедуры // ЗаполнитьРасходПоОснованию

// Процедура стандартного заполнения входящего платежного документа при вводе на основании. Применима ко всем документам,
// кроме приходного кассового ордера.
//
Процедура ЗаполнитьПриходПоОснованию(ДокументОбъект, Основание, ПользовательДокумента) Экспорт
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПользовательДокумента,"ОсновнаяСтавкаНДС");
	
	СпособЗаполнения = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой") Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			
			Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) 
				И ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
				ДокументОбъект.Касса = Основание.СтруктурнаяЕдиница;
			КонецЕсли;
			
			Если НЕ ДокументОбъект.Касса.ВалютаДенежныхСредств.Пустая() Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			Иначе
				ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой") Тогда
			
			Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) 
				И ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ДокументОбъект.СчетОрганизации = Основание.СтруктурнаяЕдиница;
			Иначе
				ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
			
			Если НЕ ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств.Пустая() Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
			Иначе
				ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
			КонецЕсли;

			Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.ВалютаДокумента Тогда
				ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
			КонецЕсли;

		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой") Тогда
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
			ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
		
		ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, );
		
		ВалютаОснования = Основание.ВалютаДокумента;
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОснования, );
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Док.Сделка КАК Сделка,
		|	Док.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(Док.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.ЗаказПокупателя КАК Сделка,
		|		ВЫБОР
		|			КОГДА Товары.Ссылка.СуммаВключаетНДС
		|				ТОГДА Товары.Сумма
		|			ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
		|		КОНЕЦ КАК Сумма,
		|		Товары.СтавкаНДС КАК СтавкаНДС
		|	ИЗ
		|		Документ.СчетНаОплатуПокупателю.Товары КАК Товары
		|	ГДЕ
		|		Товары.Ссылка = &Основание
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Услуги.ЗаказПокупателя,
		|		ВЫБОР
		|			КОГДА Услуги.Ссылка.СуммаВключаетНДС
		|				ТОГДА Услуги.Сумма
		|			ИНАЧЕ Услуги.Сумма + Услуги.СуммаНДС
		|		КОНЕЦ,
		|		Услуги.СтавкаНДС
		|	ИЗ
		|		Документ.СчетНаОплатуПокупателю.Услуги КАК Услуги
		|	ГДЕ
		|		Услуги.Ссылка = &Основание) КАК Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Сделка,
		|	Док.СтавкаНДС";
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.СчетНаОплатуПокупателю", "Документ.ЗаказПокупателя");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.ЗаказПокупателя", "Товары.Ссылка");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Услуги.ЗаказПокупателя", "Услуги.Ссылка");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Основание", Основание);
		ТаблицаОснования = Новый ТаблицаЗначений;
		ТаблицаОснования.Колонки.Добавить("Сделка",    Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.ЗаказПокупателя"));
		ТаблицаОснования.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаОснования.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число"));
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаОснования);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТаблицаОснования.ЗаполнитьЗначения(Основание, "Сделка");
				
			Иначе
				
				Если ЗначениеЗаполнено(Основание.ЗаказПокупателя) Тогда
					Сделка = Основание.ЗаказПокупателя;
				Иначе
					Сделка = Неопределено;
				КонецЕсли;
			
				Для каждого СтрокаОснования Из ТаблицаОснования Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаОснования.Сделка) Тогда
						СтрокаОснования.Сделка = Сделка;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаОснования.Свернуть("Сделка, СтавкаНДС", "Сумма");
			
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") И Основание.Проведен Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК ОстатокВзаиморасчетов
			|ИЗ
			|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Основание) КАК РасчетыСКонтрагентамиОстатки
			|ГДЕ
			|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0";
				
			Запрос.УстановитьПараметр("Основание", Основание);
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Коэффициент = 0;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ОстатокВзаиморасчетов = Выборка.ОстатокВзаиморасчетов;
				СуммаВзаиморасчетовОснования = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					ТаблицаОснования.Итог("Сумма"),
					ВалютаОснования, ВалютаВзаиморасчетов,
					СтруктураКурсаОснования.Курс, СтруктураКурсаВзаиморасчетов.Курс,
					СтруктураКурсаОснования.Кратность, СтруктураКурсаВзаиморасчетов.Кратность);
				Коэффициент = ?(ОстатокВзаиморасчетов < СуммаВзаиморасчетовОснования, ОстатокВзаиморасчетов / СуммаВзаиморасчетовОснования, 1);
			КонецЕсли;
			
		Иначе
			
			Коэффициент = 1;
			
		КонецЕсли;
		
		Если Коэффициент > 0 Тогда
		
			Для каждого СтрокаОснования Из ТаблицаОснования Цикл
			
				СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
				
				СтрокаПлатеж.ДоговорКонтрагента  = ДоговорКонтрагента;
				СтрокаПлатеж.Сделка              = СтрокаОснования.Сделка;
				
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					Окр(СтрокаОснования.Сумма * Коэффициент, 2),
					ВалютаОснования, ВалютаВзаиморасчетов,
					СтруктураКурсаОснования.Курс, СтрокаПлатеж.КурсВзаиморасчетов,
					СтруктураКурсаОснования.Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					
				СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетов, ДокументОбъект.ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, ДокументОбъект.КурсДокумента,
					СтрокаПлатеж.КратностьВзаиморасчетов, ДокументОбъект.КратностьДокумента);
					
				СтрокаПлатеж.СтавкаНДС = СтрокаОснования.СтавкаНДС;
				ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств; 
				УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ДокументОбъект.ВидОперации);
				Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
					СтрокаПлатеж.Проект = ДоговорКонтрагента.ОсновнойПроект;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли; 
			
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда

		СтрокаПлатеж     = ДокументОбъект.РасшифровкаПлатежа.Добавить(); 
		 
		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, );
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		СтрокаПлатеж.Проект                  = Основание.Проект;

		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если ЗначениеЗаполнено(Основание.БанковскийСчетОрганизации) Тогда
				ДокументОбъект.СчетОрганизации = Основание.БанковскийСчетОрганизации;
			Иначе
				ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
			
		Иначе
			
			ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
			
		КонецЕсли;
		
		Если НЕ ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		СтрокаПлатеж.Сделка = ?(ЗначениеЗаполнено(Основание.Сделка), Основание.Сделка, Неопределено);
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе;
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		СтрокаПлатеж.СтавкаНДС  = СтавкаНДС;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		или ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда

		СтрокаПлатеж     = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		ДокументОбъект.Контрагент  = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, );
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		СтрокаПлатеж.Проект                  = Основание.Проект;

		ДокументОбъект.СчетОрганизации     = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		
		Если НЕ ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента=ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ДокументОбъект.ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		Если ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		СтрокаПлатеж.СтавкаНДС  = СтавкаНДС;
		
	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		Если (НЕ Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные) 
			ИЛИ Основание.ВидОперации=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда
			Сообщить("Документом планировалось поступление наличных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ВидОперацииПоступление = Основание.ВидОперации;
		
		ОпределитьОперациюПоОснованиюУпр(ДокументОбъект.ВидОперации,ВидОперацииПоступление);
		
		ДокументОбъект.Организация = Основание.Организация;
		ДокументОбъект.ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
			ДокументОбъект.СчетОрганизации = Основание.БанковскийСчетКасса;
		ИначеЕсли ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.СчетОрганизации= ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		ДокументОбъект.Ответственный     = Основание.Ответственный;
		
		Если ДокументОбъект.ВалютаДокумента.Пустая() Тогда
			ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,);
		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		Если ДокументОбъект.ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			ДокументОбъект.Контрагент=Основание.КассаККМ;
		Иначе
			ДокументОбъект.Контрагент=Основание.Контрагент;
		КонецЕсли;
		
		ЗаполнитьПоПланируемомуПоступлениюУпр(ДокументОбъект.РасшифровкаПлатежа,
							Основание,
							СтавкаНДС, 
							ДокументОбъект.ВалютаДокумента,
							ДокументОбъект.КурсДокумента,
							ДокументОбъект.КратностьДокумента,
							ДокументОбъект.ВидОперации);
				
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АккредитивПереданный")
		 или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")) Тогда
		 			
			ЗаполнитьПоПлатежномуДокументу(ДокументОбъект,Основание);
			
	КонецЕсли;

	ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	
	Если СпособЗаполнения = "По взаиморасчетам" Тогда

		ЗаполнитьПоВзаиморасчетамУпр(ДокументОбъект.ВалютаДокумента,ДокументОбъект.КурсДокумента,ДокументОбъект.КратностьДокумента,СтрокаПлатеж,1);
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования           = СтруктураКурсаОснования.Курс;
		КратностьОснования      = СтруктураКурсаОснования.Кратность;

		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ОснованиеСуммаДокумента = ОснованиеСуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			ОснованиеСуммаДокумента, 
			Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсОснования, Основание.КурсВзаиморасчетов, 
			КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.ВалютаДокумента, 
			СтрокаПлатеж.КурсВзаиморасчетов, ДокументОбъект.КурсДокумента, 
			СтрокаПлатеж.КратностьВзаиморасчетов,ДокументОбъект.КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;

	ДокументОбъект.СуммаДокумента     = ДокументОбъект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ДокументОбъект.ДокументОснование  = Основание;
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой") Тогда
		ДокументОбъект.ОтраженоВОперУчете = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПриходПоОснованию()
 
// Возвращает структуру с курсами и кратностями для валют, переданных в качестве параметра
//
// Параметры
//  СтруктураГруппаВалют: Структура - Структура, содержащее валюты, для которых необходимо получить курсы
//	ДатаКурса: Дата - дата, на которую необходимо получить курсы.
//
// Возвращаемое значение:
//   СтруктураКурсыВалют: структура - структура, содержащая курсы для указанных валют.
//
Функция ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,ДатаКурса) Экспорт
	
	Запрос=Новый Запрос;
	СписокВалют=Новый СписокЗначений;
	
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
	
		СписокВалют.Добавить(Валюта.Значение);
	
	КонецЦикла; 
	
	Запрос.Текст="ВЫБРАТЬ
	             |	КурсыВалютСрезПоследних.Курс КАК Курс,
	             |	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	             |	КурсыВалютСрезПоследних.Валюта.Код КАК КодВалюты,
	             |	КурсыВалютСрезПоследних.Валюта.Ссылка КАК Валюта
	             |ИЗ
	             |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта.Код В (&СписокВалют)) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКурса",ДатаКурса);
	Запрос.УстановитьПараметр("СписокВалют",СписокВалют);
	
	СтруктураКурсыВалют=Новый Структура;

	Результат=Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("КодВалюты");
		
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
		
		СтрокаВалюта=Результат.Найти(Валюта.Значение,"КодВалюты");
		
		Если НЕ СтрокаВалюта=Неопределено Тогда
		   	СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",СтрокаВалюта.Курс);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",СтрокаВалюта.Кратность);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,СтрокаВалюта.Валюта);
		Иначе
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,Новый(Тип("СправочникСсылка.Валюты")));
		КонецЕсли;
		
	КонецЦикла; 		
	
	Возврат СтруктураКурсыВалют;

КонецФункции // ПолучитьКурсыДляГруппыВалют()
	
// Определяет сделку, по которой надо сделать движение по строке ТЧ платежного документа 
//
// Параметры: 
//  ДокументОбъект          	- объект проводимого документа, 
//  СтрокаТЧ				 	- строка табличной части документа, для которой надо определить сделку.
//  ИмяРеквизитаСделка      	- необязательный параметр, имя реквизита "сделка".
//
// Возвращаемое значение:
//  Ссылка на документ или Неопределно, т.е. значение, которое надо записать в измерение Сделка регистра.
//
Функция ОпределитьСделкуСтрокиТЧ (ДокументОбъект,СтрокаТЧ, ИмяРеквизитаСделка = "Сделка", ИмяРеквизитаДоговор="ДоговорКонтрагента") Экспорт

	// Возвращаемое значение.
	Сделка = Неопределено;
	
	ВедениеВзаиморасчетов=СтрокаТЧ[ИмяРеквизитаДоговор].ВедениеВзаиморасчетов; 
	
	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

		Сделка = СтрокаТЧ[ИмяРеквизитаСделка];

	КонецЕсли;

	Возврат Сделка;

КонецФункции // ОпределитьСделкуСтрокиТЧ()

// Процедура контролирует остаток регистра "Взаиморасчеты с контрагентами" по сделкам
// и договорам переданной табличной части платежного документа.
//
// Параметры:
//  РасшифровкаПлатежа    - табличная часть платежного документа 
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольОстатковПоТЧ(ДатаПлатежа, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат=Неопределено, ВходящийПлатеж=Ложь) Экспорт
	
	РасшифровкаДоговор=ТаблицаПлатежейУпр.Скопировать();
	РасшифровкаСделка=ТаблицаПлатежейУпр.Скопировать();
	
	РасшифровкаДоговор.Свернуть("ДоговорКонтрагента,КонтролироватьСуммуЗадолженности,ВалютаВзаиморасчетов,ДопустимаяСуммаЗадолженности","СуммаВзаиморасчетов");
	РасшифровкаСделка.Свернуть("ДоговорКонтрагента,ВестиПоДокументамРасчетовСКонтрагентом,ДокументРасчетовСКонтрагентом,Сделка,ПроцентПредоплаты,ВедениеВзаиморасчетов,ВалютаВзаиморасчетов,КонтролироватьЧислоДнейЗадолженности","СуммаВзаиморасчетов");
	
	Для Каждого Платеж ИЗ РасшифровкаДоговор Цикл
			
		ДоговорКонтрагента = Платеж.ДоговорКонтрагента;
		
		Если Платеж.КонтролироватьСуммуЗадолженности Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			
			Запрос.Текст = "
			|ВЫБРАТЬ // Для контроля суммы задолженности по расчетному документу (ведение взаиморасчетов - по расчетным документам)
			|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток
			|ИЗ
			|	 РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
			|	 ДоговорКонтрагента = &ДоговорКонтрагента
			|	 ) КАК ВзаиморасчетыПоДоговору
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
				
				СуммаВзаиморасчетовПоПлатежу = Платеж.СуммаВзаиморасчетов;
				
				Валюта = ?(Платеж.ВалютаВзаиморасчетов = NULL, "", Платеж.ВалютаВзаиморасчетов);
				Если (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоПлатежу) > Платеж.ДопустимаяСуммаЗадолженности Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Сумма задолженности по договору " + ДоговорКонтрагента + 
					" с учетом документа превышает допустимую сумму задолженности." + Символы.ПС +
					Символы.Таб + "Сумма задолженности с учетом документа: " + (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоПлатежу) + " " + Валюта + 
					", допустимая сумма задолженности: " + Платеж.ДопустимаяСуммаЗадолженности + " " + Валюта + 
					", превышение: " + (Формат(СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоПлатежу - Платеж.ДопустимаяСуммаЗадолженности, "ЧЦ=15;ЧДЦ=2")) + " " + Валюта, Отказ, Заголовок);
				КонецЕсли;															
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Платеж Из РасшифровкаСделка Цикл
		
		ДоговорКонтрагента = Платеж.ДоговорКонтрагента;
		Сделка = Платеж.Сделка;
		
		Если Платеж.ПроцентПредоплаты > 0 И (НЕ РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Сделка",                Сделка);
			
			Запрос.Текст = "
			|ВЫБРАТЬ // Для контроля суммы задолженности по расчетному документу (ведение взаиморасчетов - по расчетным документам)
			|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовПриход   КАК СуммаЗаказа,
			|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовРасход   КАК СуммаОплаты
			|ИЗ
			|	 РегистрНакопления.РасчетыСКонтрагентами.Обороты(,,,
			|	 ДоговорКонтрагента = &ДоговорКонтрагента
			|	 И Сделка              = &Сделка
			|	 ) КАК ВзаиморасчетыПоДоговору
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СуммаЗаказа = ?(Выборка.СуммаЗаказа = NULL, 0, Выборка.СуммаЗаказа);
				СуммаОплаты = ?(Выборка.СуммаОплаты = NULL, 0, Выборка.СуммаОплаты);
				ПроцентПредоплаты = Платеж.ПроцентПредоплаты;
				ПроцентСовершеннойПредоплаты = ?(СуммаЗаказа = 0, 100, СуммаОплаты / СуммаЗаказа * 100);
				
				Если ПроцентСовершеннойПредоплаты < ПроцентПредоплаты Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Недостаточна предоплата по заказу " + Сделка + 
				Символы.ПС + Символы.Таб + " По договору """ + ДоговорКонтрагента + 
				""" требуется предоплата в размере " + ПроцентПредоплаты + "% ; Поступила предоплата  в размере " 
				+ Окр(ПроцентСовершеннойПредоплаты, 2, 1) + "%", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Контроль числа дней задолженности
		Если Платеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			Если Платеж.КонтролироватьЧислоДнейЗадолженности И (НЕ (РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат ИЛИ ВходящийПлатеж)) Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

				Запрос.Текст =
				"ВЫБРАТЬ	// Выбирает даты самых ранних сделок по договорам, указанным в т.ч. 
				|		МИНИМУМ(ДокументРасчетовСКонтрагентом.Дата) КАК ДатаПервойСделки,
				|		ДоговорКонтрагента
				|	ИЗ	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(, 
				|		ДоговорКонтрагента = &ДоговорКонтрагента)
				|	ГДЕ СуммаВзаиморасчетовОстаток > 0	// Дебиторская задолженность больше 0
				|		И УпрУчет
				|		И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
				|	СГРУППИРОВАТЬ ПО ДоговорКонтрагента";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() И НЕ Выборка.ДатаПервойСделки=NULL Тогда
					ДопустимоеЧислоДнейЗадолженности = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
					РазницаДатВСекундах = (ДатаПлатежа - Выборка.ДатаПервойСделки);

					РазницаДней = Цел(РазницаДатВСекундах/(24 * 60 * 60));
					Если РазницаДней > ДопустимоеЧислоДнейЗадолженности Тогда

						ОбщегоНазначения.СообщитьОбОшибке("Превышено допустимое число дней задолженности по договору " + ДоговорКонтрагента + 
						Символы.ПС + Символы.Таб +
						" Допустимое число дней задолженности: " + ДопустимоеЧислоДнейЗадолженности + 
						", дата самой старой задолженности: " + Выборка.ДатаПервойСделки + 
						", превышение: " + 
						РазницаДней + " дней",
						Отказ, Заголовок);
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КонтрольОстатковПоТЧ()

Функция НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации = неопределено) Экспорт

	Если ЗначениеЗаполнено(ВидОперации) тогда

		ВозвратПоВидуОпераций = Новый Массив;

		ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
		
        ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
		
		ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
			
		ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
		
		ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
		
		ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю);
		
		ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком);
		
		ВозвратПоВидуОпераций.Добавить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю);
		
		Если ВозвратПоВидуОпераций.Найти(ВидОперации) = Неопределено Тогда
			Возврат Перечисления.РасчетыВозврат.Расчеты;
		Иначе
			Возврат Перечисления.РасчетыВозврат.Возврат;
		КонецЕсли;
		
	Иначе
		
		Возврат Перечисления.РасчетыВозврат.Расчеты;
		
	Конецесли;
		
КонецФункции

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации=Неопределено) Экспорт
	
	Если ВидОперации=Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами
		
	КонецЕсли;
	
КонецФункции // ЕстьРасчетыСКонтрагентами()

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации=Неопределено) Экспорт
	
	Если ВидОперации=Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам
	
	КонецЕсли;
	
КонецФункции // ЕстьРасчетыПоКредитам()

// Определяет вид операции расчетного документа по виду операции заявки на расходование средств
// или планируемого поступления денежных средств
//
Процедура ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииОснование) Экспорт
	
	Если ВидОперацииОснование.Метаданные().Имя="ВидыОперацийЗаявкиНаРасходование" Тогда
		
		Если  ВидОперации.Метаданные().Имя="ВидыОперацийСписаниеБезналичныхДенежныхСредств" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
			   ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
			   ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		ИначеЕсли ВидОперации.Метаданные().Имя="ВидыОперацийППИсходящее" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		ИначеЕсли ВидОперации.Метаданные().Имя="ВидыОперацийРКО" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ВидОперацииОснование.Метаданные().Имя="ВидыОперацийПланируемоеПоступлениеДС" Тогда
		
		Если  ВидОперации.Метаданные().Имя="ВидыОперацийПоступлениеБезналичныхДенежныхСредств" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
			КонецЕсли;
			
		ИначеЕсли  ВидОперации.Метаданные().Имя="ВидыОперацийПКО" Тогда
			
			Если ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда
				ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
			Иначе
				ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;			

КонецПроцедуры // ОпределитьОперациюПоОснованиюУпр()

Функция ОпределитьВидОперацииПлан(ВидОперацииДокумент) Экспорт;
	
	Если ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
		ИЛИ ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда	 
		
		ВидОперацииПлан=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда	
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		ВидОперацииПлан=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств;
		
	Иначе
		
		ВидОперацииПлан=Неопределено;
		
	КонецЕсли;
	
	Возврат ВидОперацииПлан;
	
КонецФункции // ОпределитьВидОперацииПлан()

Процедура УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперацииДокумент) Экспорт;
	
	Если НЕ СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка() Тогда
		Возврат;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствКассеККМ;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствПодотчетнику;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПеречислениеНалога;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами;
				
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда	 
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасходыДенежныхСредств;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда	
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам ИЛИ 
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств ИЛИ
		ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеПоступленияДенежныхСредств;
		
	ИначеЕсли ВидОперацииДокумент=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПодотчетником;
		
	КонецЕсли;
		
КонецПроцедуры // УстановитьСтатьюДДСПоУмолчанию()

// Определяет вид операции документа поступления по документу расхода - основанию
//
Процедура ОпределитьВидОперацииПоПлатежномуДокументу(ВидОперацииОснование,ВидОперацииДокумент)
	
	Если  ВидОперацииДокумент.Метаданные().Имя="ВидыОперацийПоступлениеБезналичныхДенежныхСредств" Тогда
		
		Если ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ 
			ВидОперацииОснование=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			
		Иначе
			
			ВидОперацииДокумент=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперацииДокумент.Метаданные().Имя="ВидыОперацийСписаниеБезналичныхДенежныхСредств" Тогда
		
		Если ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ВидОперацииОснование=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		Иначе
			ВидОперацииДокумент=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьВидОперацииПоПлатежномуДокументу()

// Возвращает параметры для выбора сделки по виду операции.
//
Функция ОпределитьПараметрыВыбораСделки(ВидОперации=Неопределено) Экспорт
	
	ЗаказПокупателяПриход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПокупателя"); // Расход по регистру взаиморасчетов
    ЗаказПокупателяРасход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПокупателя"); // Приход по регистру взаиморасчетов
    ЗаказПоставщикуПриход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Расход","ЗаказПоставщику"); // Расход по регистру взаиморасчетов
	ЗаказПоставщикуРасход =  Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Приход","ЗаказПоставщику"); // Приход по регистру взаиморасчетов
		
	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ПараметрыСделкиПоВидуОпераций = Новый Соответствие();

		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ЗаказПокупателяПриход);
        ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
			
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,ЗаказПоставщикуРасход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
				
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,ЗаказПоставщикуПриход);
		
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,ЗаказПокупателяПриход);
		ПараметрыСделкиПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,ЗаказПокупателяРасход);
		
		Если Не ПараметрыСделкиПоВидуОпераций[ВидОперации]=Неопределено Тогда
			Возврат ПараметрыСделкиПоВидуОпераций[ВидОперации];
		Иначе
			Возврат Новый Структура("ВидДвиженияРасчеты,ТипЗаказа","Прочие","Прочие");
		КонецЕсли;
		
	Иначе
		
		Возврат ЗаказПокупателяПриход;
		
	Конецесли;
	
КонецФункции // ОпределитьПараметрыВыбораСделки()

// Для переданной организации получаем флаги отражения по умолчанию документов в бух. и налог. учете
// (для пустой организации все признаки имеют значение "Ложь")
//
// Параметры
//  Организация		– <СправочникСсылка.Организации> – организация, для которой нужно получить признаки отражения в БУ и НУ 
//  ФлагБУ			– <Булево> – возвращается флаг отражения в БУ по умолчанию
//  ФлагНУ			– <Булево> – возвращается флаг отражения в НУ по умолчанию
//  ФлагРеглУчет	– <Булево> – возвращается признак отражения организации в регл.учете (необязательный параметр)
//
Процедура ПолучитьПризнакиОтраженияВРеглУчете(Организация, ФлагБУ, ФлагНУ, ФлагРеглУчет = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ФлагРеглУчет    = Организация.ОтражатьВРегламентированномУчете;
		ТекПользователь = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
		ФлагБУ = ФлагРеглУчет И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
		ФлагНУ = ФлагБУ И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
		
	Иначе
		
		ФлагРеглУчет    = Ложь;
		ФлагБУ = Ложь;
		ФлагНУ = Ложь;
		
	КонецЕсли;

КонецПроцедуры // ПолучитьПризнакиОтраженияВРеглУчете()

Функция ВидОперацииДокументаПеречисленияВБюджет(КБК) Экспорт
	
	Если ПлатежиВБюджетКлиентСервер.ЭтоНалоговыеДоходы(КБК) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами");
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов


// Формирует надпись при частичной оплате расчетного документа.
// Параметры: Расчетный документ - документ, для которого формируется надпись
//            ИмяРегистра: регистр, по которому проверяются остатки.
//			  Измерение: имя измерения регистра (ДокументПолучения или ДокументСписания)
// Возвращаемое значение:
// 			  ТекстНадписи
//
Функция СформироватьТекстЧастичнаяОплата(РасчетныйДокумент, ИмяРегистра, Измерение) Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОперативноеДвижение.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления."+ИмяРегистра+".Остатки(, "+Измерение+" = &РасчетныйДокумент) КАК ОперативноеДвижение";
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() И (НЕ Результат.СуммаОстаток = NULL) Тогда
		ТекстНадписи = ?(Результат.СуммаОстаток = 0, "Оплата произведена полностью.", ("Частичная оплата. Остаток " + Формат(Результат.СуммаОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+"."));
	Иначе
		ТекстНадписи = "Оплата произведена полностью.";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьТекстЧастичнаяОплата()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

// Проставляет реквизиты, необходимые для проведения по регламентированному учету
// 
Процедура ЗаполнитьРеквизитыРеглУчета(ДокументОбъект,СтрокаПлатеж,НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете=Истина) Экспорт
	
	//Пересчитываем сумму НДС
	
	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС=НДСПоУмолчанию;
	КонецЕсли;				
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
					
КонецПроцедуры // ЗаполнитьРеквизитыРеглУчета()
	 

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, 
											РасшифровкаПлатежа, ПараметрОбъектКопирования = Неопределено) Экспорт

	Перем ТипЦен;
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
			ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
		КонецЕсли;
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
		
		ДокументОбъект.ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами;
		ДокументОбъект.ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить()
	Иначе	
		СтрокаПлатеж=РасшифровкаПлатежа[0];
	КонецЕсли;
	
	Если НЕ ПараметрОбъектКопирования = Неопределено Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДокументОснование", МетаданныеДокумента) Тогда
			ДокументОбъект.ДокументОснование = неопределено;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		
		ДокументОбъект.ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВУправленческомУчете");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтраженоВОперУчете", МетаданныеДокумента) Тогда
		ДокументОбъект.ОтраженоВОперУчете=Истина
	КонецЕсли;
	
	Если МетаданныеДокумента.Имя="ПриходныйКассовыйОрдер" ИЛИ МетаданныеДокумента.Имя="РасходныйКассовыйОрдер" Тогда
		ДокументОбъект.Оплачено=Истина
	КонецЕсли;		
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("АвтоРезервирование", МетаданныеДокумента) Тогда
		ДокументОбъект.АвтоРезервирование = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРезервирование");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("АвтоРазмещение", МетаданныеДокумента) Тогда
		ДокументОбъект.АвтоРазмещение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "АвтоРазмещение");
	КонецЕсли;
	
	ЕстьРеквизитОрганизация = ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента);
	
	Если ЕстьРеквизитОрганизация Тогда
	  	Если (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		    СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ОсновнойБанковскийСчет");
			СписокПолей.Добавить("ОсновнойБанковскийСчет.ВалютаДенежныхСредств", "ОсновнойБанковскийСчетВалютаДенежныхСредств");
			СписокПолей.Добавить("ОтражатьВРегламентированномУчете");

		  	ДанныеОрганизация =  УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнаяОрганизация", СписокПолей);

			ДокументОбъект.Организация = ДанныеОрганизация.Значение;
		Иначе
			ДанныеОрганизация = новый Структура;
			ДанныеОрганизация.Вставить("Значение", ДокументОбъект.Организация);
			ДанныеОрганизация.Вставить("ОсновнойБанковскийСчет", ДокументОбъект.Организация.ОсновнойБанковскийСчет);
			ДанныеОрганизация.Вставить("ОсновнойБанковскийСчетВалютаДенежныхСредств", ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств);
			ДанныеОрганизация.Вставить("ОтражатьВРегламентированномУчете", ДокументОбъект.Организация.ОтражатьВРегламентированномУчете);
		КонецЕсли;
	
	КонецЕсли;

	// Флаги БУ и НУ взаимосвязаны, невозможна ситуация, когда флаг НУ "истина", а флаг БУ "ложь".
	// Если организация не отражается в регл.учете, флаги БУ и НУ всегда "ложь"
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		
		ДокументОбъект.ОтражатьВБухгалтерскомУчете = ЕстьРеквизитОрганизация
			И ЗначениеЗаполнено(ДокументОбъект.Организация)
			И ДанныеОрганизация.ОтражатьВРегламентированномУчете 
			И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
			
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
			ДокументОбъект.ОтражатьВНалоговомУчете = ДокументОбъект.ОтражатьВБухгалтерскомУчете
				И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
		КонецЕсли;
		
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Подразделение)) Тогда
		ДокументОбъект.Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделение");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидВыдачиДенежныхСредств", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидВыдачиДенежныхСредств)) Тогда
		ДокументОбъект.ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ФормаОплаты", МетаданныеДокумента) 
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты) ИЛИ ДокументОбъект.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетКасса", МетаданныеДокумента)
			И (НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКасса)) Тогда
			СписокПолей = новый СписокЗначений;
			СписокПолей.Добавить("ВалютаДенежныхСредств");
            ДанныеКасса =  УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнаяКасса", СписокПолей);

			БанковскийСчетКасса = ДанныеКасса.Значение;
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) ИЛИ ДанныеКасса.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда		
				
				ДокументОбъект.БанковскийСчетКасса = ДанныеКасса.Значение;
				ДокументОбъект.ВалютаДокумента = ДанныеКасса.ВалютаДенежныхСредств;
				
			Иначе
				
				ДокументОбъект.БанковскийСчетКасса=Справочники.Кассы.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты) Тогда
			ДокументОбъект.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента)
		И (НЕ ЗначениеЗаполнено(ДокументОбъект.Касса))Тогда
		СписокПолей = новый СписокЗначений;
		СписокПолей.Добавить("ВалютаДенежныхСредств");
        ДанныеКасса =  УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнаяКасса", СписокПолей);

		КассаПоУмолчанию=ДанныеКасса.Значение;
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда	
			
			ДокументОбъект.Касса = КассаПоУмолчанию;
			ДокументОбъект.ВалютаДокумента = ДанныеКасса.ВалютаДенежныхСредств;
			
		ИначеЕсли КассаПоУмолчанию.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			
			ДокументОбъект.Касса = КассаПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КассаККМ", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КассаККМ)) Тогда
		ДокументОбъект.КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКассаККМ");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
		И (ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		
		СчетПоУмолчанию=ДанныеОрганизация.ОсновнойБанковскийСчет;
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда	
			
			ДокументОбъект.СчетОрганизации =  СчетПоУмолчанию;
			ДокументОбъект.ВалютаДокумента =  ДанныеОрганизация.ОсновнойБанковскийСчетВалютаДенежныхСредств;
			
			
		ИначеЕсли  СчетПоУмолчанию.ВалютаДенежныхСредств=ДокументОбъект.ВалютаДокумента Тогда
			
			ДокументОбъект.СчетОрганизации =  СчетПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;

	ПараметрДвижения=ОпределитьПараметрыВыбораСделки(ДокументОбъект.ВидОперации);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		флВыполнитьЗаполнениеСтруктуры = ложь;

		СписокПолей = новый СписокЗначений;
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента");
		СписокПолей.Добавить("ОсновнойБанковскийСчет");
		СписокПолей.Добавить("ОсновнойБанковскийСчет.ВалютаДенежныхСредств", "ОсновнойБанковскийСчетВалютаДенежныхСредств");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.Организация", "ОсновнойДоговорКонтрагентаОрганизация");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.ВидДоговора", "ОсновнойДоговорКонтрагентаВидДоговора");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов", "ОсновнойДоговорКонтрагентаВалютаВзаиморасчетов");
		СписокПолей.Добавить("ОсновнойДоговорКонтрагента.ТипЦен", "ОсновнойДоговорКонтрагентаТипЦен");
		СписокПолей.Добавить("ОсновноеКонтактноеЛицо");

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ПараметрДвижения.ВидДвиженияРасчеты="Приход" Тогда  // Приход по регистру "ВзаиморасчетыСКонтрагентами"
				ДанныеКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнойПоставщик", СписокПолей);
				ДокументОбъект.Контрагент = ДанныеКонтрагент.Значение;

			ИначеЕсли ПараметрДвижения.ВидДвиженияРасчеты="Расход" Тогда
				ДанныеКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюСДополнительнымиПолями(ТекПользователь, "ОсновнойПокупатель", СписокПолей);
				ДокументОбъект.Контрагент = ДанныеКонтрагент.Значение;
			Иначе
				флВыполнитьЗаполнениеСтруктуры = истина;
				текКонтрагент =  Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		Иначе
			флВыполнитьЗаполнениеСтруктуры = истина;
			текКонтрагент =  ДокументОбъект.Контрагент;
		КонецЕсли;
		Если флВыполнитьЗаполнениеСтруктуры Тогда
			ДанныеКонтрагент = новый Структура();
			ДанныеКонтрагент.Вставить("Значение", текКонтрагент);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагента", текКонтрагент.ОсновнойДоговорКонтрагента);
			ДанныеКонтрагент.Вставить("ОсновнойБанковскийСчет", текКонтрагент.ОсновнойБанковскийСчет);
			ДанныеКонтрагент.Вставить("ОсновнойБанковскийСчетВалютаДенежныхСредств", текКонтрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаОрганизация", текКонтрагент.ОсновнойДоговорКонтрагента.Организация);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаВидДоговора",текКонтрагент.ОсновнойДоговорКонтрагента.ВидДоговора);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаВалютаВзаиморасчетов", текКонтрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов);
			ДанныеКонтрагент.Вставить("ОсновнойДоговорКонтрагентаТипЦен",текКонтрагент.ОсновнойДоговорКонтрагента.ТипЦен); 
			ДанныеКонтрагент.Вставить("ОсновноеКонтактноеЛицо",текКонтрагент.ОсновноеКонтактноеЛицо);
		КонецЕсли;
		
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетКонтрагента", МетаданныеДокумента)
			И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетКонтрагента)
			И ЗначениеЗаполнено(ДанныеКонтрагент.ОсновнойБанковскийСчет) 
			И ДанныеКонтрагент.ОсновнойБанковскийСчетВалютаДенежныхСредств=ДанныеОрганизация.ОсновнойБанковскийСчетВалютаДенежныхСредств Тогда
			ДокументОбъект.СчетКонтрагента          = ДанныеКонтрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)  Тогда 
					
					Если НЕ УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ДанныеКонтрагент.ОсновнойДоговорКонтрагентаВидДоговора)=Неопределено Тогда
						//требуется оптимизация: нет смысла для каждой строки документа определять пустая ли организация в документе
						Если ДокументОбъект.Организация.Пустая() Тогда
							СтрокаПлатеж.ДоговорКонтрагента = ДанныеКонтрагент.ОсновнойДоговорКонтрагента;
							Организация=ДанныеКонтрагент.ОсновнойДоговорКонтрагентаОрганизация;
						//если организация заполнена, проверяем соответствует ли она основному договору	
						ИначеЕсли ДанныеКонтрагент.ОсновнойДоговорКонтрагентаОрганизация.Пустая()
							ИЛИ ДанныеКонтрагент.ОсновнойДоговорКонтрагентаОрганизация=ДокументОбъект.Организация Тогда
							СтрокаПлатеж.ДоговорКонтрагента = ДанныеКонтрагент.ОсновнойДоговорКонтрагента;
						КонецЕсли;
						
					КонецЕсли;
					
					Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)) И СтрокаПлатеж.КурсВзаиморасчетов=0 Тогда
						
						СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДанныеКонтрагент.ОсновнойДоговорКонтрагентаВалютаВзаиморасчетов, ТекущаяДата());
						СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;
						СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
			И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
			ДокументОбъект.ВалютаДокумента = ДанныеКонтрагент.ОсновнойДоговорКонтрагентаВалютаВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли; // Контрагент
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента) Тогда
	    СтруктураКурсаДокумента      = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаОплаты)) Тогда
		ДокументОбъект.ДатаОплаты = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЧастичнаяОплата", МетаданныеДокумента) Тогда
		ДокументОбъект.ЧастичнаяОплата = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаРасхода", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаРасхода)) Тогда
		ДокументОбъект.ДатаРасхода = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаПоступления", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаПоступления)) Тогда
		ДокументОбъект.ДатаПоступления = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Состояние", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(ДокументОбъект.Состояние))Тогда
		ДокументОбъект.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, "РасшифровкаПлатежа") 
			И (НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС)) Тогда
			СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ

// Стандартная отработка события изменения контрагента в платежных документах
//
// Параметры
//   ДокументОбъект – ДокументОбъект – Документ, у которого изменился контрагент
//
Процедура ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж) Экспорт

	ВосстанавливатьРеквизиты = (ДокументОбъект.РасшифровкаПлатежа.Количество() = 1);
	СтараяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	Проект = СтрокаПлатеж.Проект;
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) ИЛИ НЕ ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	Иначе
		СписокДопустимыхВидовДоговоров          = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации);
		СтруктураПараметровДляПолученияДоговора = Новый Структура ("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтрокаПлатеж.ДоговорКонтрагента         = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(
			ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа = ДокументОбъект.СуммаДокумента;

	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтараяСтатьяДДС;
		СтрокаПлатеж.СтавкаНДС = СтараяСтавкаНДС;
		СтрокаПлатеж.Проект = Проект;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагентаВПлатежномДокументе()

// Выполнение перед записью платежных документов общих для всех документов действий 
//
// Параметры
//  <ДокументОбъект>  	– <ДокументОбъект.ххх> – записываемый платежный документ
//                 <продолжение описания параметра>
//  <СтруктураДействий> – <Структура> – структура, ключи которой содержат возможные действия
//						Возможные ключи:
//						"ПроверитьНомер"	- проверить, что 3 последних знака номера не "000"
//						"УстановитьДоговор"	- установить договор шапки документа тот же, что и в расшифровке платежа
//							договор в шапке используется справочно, устанавливается если во всех строках расшифровки договор одинаковый
//  <Отказ> 			– <Булево> – отказ от записи документа
//  <РежимЗаписи>		– <РежимЗаписиДокумента>
//  <РежимПроведения> 	– <РежимПроведенияДокумента>
//
Процедура ВыполнитьДействияПередЗаписьюПлатежногоДокумента(ДокументОбъект, СтруктураДействий, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если СтруктураДействий.Свойство("ПроверитьНомер") Тогда
		
		НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект);
		
		Если Прав(НомерПечать, 3) = "000"
			И ?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПлатежноеТребованиеВыставленное")
				ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнкассовоеПоручениеПереданное")
				ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее")
				ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АккредитивПереданный"), // Если
				ДокументОбъект.Дата < '20120709', // Тогда
				Истина) // Иначе
			Тогда
			Заголовок = Строка(ДокументОбъект);
			ТекстОшибки = 
			"Номер платежного документа не может оканчиваться на ""000""!" + Символы.ПС
			+ "	(Положение Банка России ""О безналичных расчетах в Российской Федерации"""  + Символы.ПС
			+ "	от 3 октября 2002 г. No. 2-П в ред. Указания ЦБ РФ от 03.03.2003 No. 1256-У)";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьДоговор") Тогда
		
		МассивДоговоров = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента");
		МассивДоговоров = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
		Если МассивДоговоров.Количество() = 1 Тогда
			ДокументОбъект.ДоговорКонтрагента = МассивДоговоров[0];
		Иначе
			ДокументОбъект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияПередЗаписьюПлатежногоДокумента()


#Если Клиент Тогда

// Устанавливает текст надписи сделки на форме документа
//
// Параметры:
//  ДокументОбъект - объект документа, 
//  ФормаДокумента - форма документа.
// ЗаказПокупателя - признак заказа покупателю/поставщику
//
Процедура УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ФормаДокумента, ВидОперации) Экспорт

	НадписьСделка = "Сделка:";

	ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	ТипЗаказа = ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа;

	Если Не (Не ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ ТипЗаказа="Прочие")  Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			НадписьСделка = "Заказ "+?(ТипЗаказа="ЗаказПокупателя","покупателя:", "поставщику:");

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда

			НадписьСделка = "Счет "+?(ТипЗаказа="ЗаказПокупателя","покупателю:", "поставщика:");

		КонецЕсли;
		
	КонецЕсли;

	ФормаДокумента.ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

КонецПроцедуры // РаботаСДиалогами.УстановитьНадписьСделки()

Процедура ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Организация.Пустая() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект=Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	ОбработкаОбъект.КурсДокумента				=СтруктураПараметров.КурсДокумента;
	ОбработкаОбъект.КратностьДокумента			=СтруктураПараметров.КратностьДокумента;
	ОбработкаОбъект.ТипЗадолженности			=СтруктураПараметров.ТипЗадолженности;
	ОбработкаОбъект.Контрагент					=СтруктураПараметров.Контрагент;
	ОбработкаОбъект.ФормаОплаты					=СтруктураПараметров.ФормаОплаты;
	ОбработкаОбъект.ИмяРегистраПлан				=СтруктураПараметров.ИмяРегистраПлан;
	ОбработкаОбъект.ВидОперацииПлан				=СтруктураПараметров.ВидОперацииПлан;
	ОбработкаОбъект.БанковскийСчетКасса			=СтруктураПараметров.БанковскийСчетКасса;
	ОбработкаОбъект.Организация					=СтруктураПараметров.Организация;
	ОбработкаОбъект.ВалютаДокумента				=СтруктураПараметров.ВалютаДокумента;
	ОбработкаОбъект.ДатаДок						=СтруктураПараметров.ДатаДок;
	ОбработкаОбъект.ВидОперацииДок				=СтруктураПараметров.ВидОперацииДок;
	ОбработкаОбъект.РасшифровкаПлатежаДок		=СтруктураПараметров.РасшифровкаПлатежа;
	ОбработкаОбъект.СуммаДляПодбора				=СтруктураПараметров.СуммаДокумента;
	ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов	=СтруктураПараметров.ПлатежПоСуммеВзаиморасчетов;
	СтруктураПараметров.Свойство("СсылкаНаДокумент", ОбработкаОбъект.ДокументСсылка);
	ОбработкаОбъект.ЕстьПодбор					=Ложь;
		
	Если СтруктураПараметров.Интерактивно Тогда
		
		ТекстВидОперации=СтруктураПараметров.ВидОперацииДок.Метаданные().Имя;
		
		Если ТекстВидОперации="ВидыОперацийЗаявкиНаРасходование"
			ИЛИ ТекстВидОперации="ВидыОперацийПланируемоеПоступлениеДС" Тогда
			ФормаНастройки=ОбработкаОбъект.ПолучитьФорму("ПараметрыЗаполненияПлан");
			
		Иначе	
			ФормаНастройки=ОбработкаОбъект.ПолучитьФорму("ПараметрыЗаполнения");
		КонецЕсли;
		
		ФормаНастройки.ОткрытьМодально();
		
	Иначе
		
		СтруктураПараметровАвто=СтруктураПараметров.СтруктураПараметровАвто;
		
		ОбработкаОбъект.УчитыватьФактическиеЗадолженности=СтруктураПараметровАвто.УчитыватьФактическиеЗадолженности;
		ОбработкаОбъект.УчитыватьОперативныеЗадолженности=СтруктураПараметровАвто.УчитыватьОперативныеЗадолженности;
		ОбработкаОбъект.ПодбиратьСумму=СтруктураПараметровАвто.ПодбиратьСумму;
		ОбработкаОбъект.СпособЗаполнения=СтруктураПараметровАвто.СпособЗаполнения;
		ОбработкаОбъект.СуммаДляПодбора=СтруктураПараметровАвто.СуммаДляПодбора;
		ОбработкаОбъект.ПоЗаявкам=СтруктураПараметровАвто.ПоЗаявкам;
		ОбработкаОбъект.ПодбиратьПланируемыеДвижения=СтруктураПараметровАвто.ПодбиратьПланируемыеДвижения;
		ОбработкаОбъект.НеПревышатьЗапланированныхЗначений=СтруктураПараметровАвто.НеПревышатьЗапланированныхЗначений;
		ОбработкаОбъект.ВключенныеВПлатежныйКалендарь=СтруктураПараметровАвто.ВключенныеВПлатежныйКалендарь;
		
		Если СтруктураПараметровАвто.Свойство("ОтборПоДоговорам") Тогда
			ОбработкаОбъект.ПостроительОтбораДоговоров.УстановитьНастройки(СтруктураПараметровАвто.ОтборПоДоговорам, Истина, Ложь, Ложь, Ложь, Ложь)
		КонецЕсли;
		
		Если СтруктураПараметровАвто.ПоЗаявкам Тогда
			ОбработкаОбъект.ЗаполнитьРасшифровкуПоПланам();
		Иначе
			ОбработкаОбъект.ЗаполнитьРасшифровкуПоДолгам(СтруктураПараметровАвто.ПодборПоСуммеПлатежа,Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодборЗадолженностей(СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	// Открываем форму подбора.
	
	ОбработкаОбъект=Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	ОбработкаОбъект.ДокументСсылка					=СтруктураПараметров.ДокументСсылка;
	ОбработкаОбъект.КурсДокумента					=СтруктураПараметров.КурсДокумента;
	ОбработкаОбъект.КратностьДокумента				=СтруктураПараметров.КратностьДокумента;
	ОбработкаОбъект.ТипЗадолженности				=СтруктураПараметров.ТипЗадолженности;
	ОбработкаОбъект.Контрагент						=СтруктураПараметров.Контрагент;
	ОбработкаОбъект.ФормаОплаты						=СтруктураПараметров.ФормаОплаты;
	ОбработкаОбъект.ИмяРегистраПлан					=СтруктураПараметров.ИмяРегистраПлан;
	ОбработкаОбъект.ВидОперацииПлан					=СтруктураПараметров.ВидОперацииПлан;
	ОбработкаОбъект.БанковскийСчетКасса				=СтруктураПараметров.БанковскийСчетКасса;
	ОбработкаОбъект.Проект							=СтруктураПараметров.Проект;
	ОбработкаОбъект.СтатьяДвиженияДенежныхСредств	=СтруктураПараметров.СтатьяДвиженияДенежныхСредств;
	ОбработкаОбъект.Организация						=СтруктураПараметров.Организация;
	ОбработкаОбъект.ВалютаДокумента					=СтруктураПараметров.ВалютаДокумента;
	ОбработкаОбъект.ДатаДок							=СтруктураПараметров.ДатаДок;
	ОбработкаОбъект.ВидОперацииДок					=СтруктураПараметров.ВидОперацииДок;
	ОбработкаОбъект.СуммаДляПодбора					=СтруктураПараметров.СуммаДокумента;
	ОбработкаОбъект.РасшифровкаПлатежаДок			=СтруктураПараметров.РасшифровкаПлатежаДок;
	ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов		=СтруктураПараметров.ПлатежПоСуммеВзаиморасчетов;
	ОбработкаОбъект.ОтражатьВБухгалтерскомУчете		=СтруктураПараметров.ОтражатьВБухгалтерскомУчете;
	ОбработкаОбъект.ЕстьПодбор						= НЕ СтруктураПараметров.ЗакрыватьПриВыборе;
	
	ФормаПодбора = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораЗадолженностей", СтруктураПараметров.ФормаДокумента, "ФормаПодбораЗадолженностейДляПлатежа");
	
	ФормаПодбора.РежимВыбора=Истина;
	ФормаПодбора.ЗакрыватьПриВыборе=СтруктураПараметров.ЗакрыватьПриВыборе;
	
	ФормаПодбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПодборДокументовПланирования(СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ФормаОплаты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана форма оплаты.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ВалютаДокумента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана валюта документа.");
		Возврат;
	КонецЕсли;
	
	// Открываем форму подбора.
	
	ОбработкаОбъект=Обработки.ПодборПараметровРасшифровкиПлатежа.Создать();
	
	СтруктураПараметров.Свойство("ФормаОплаты",ОбработкаОбъект.ФормаОплаты);
	СтруктураПараметров.Свойство("ВалютаДокумента",ОбработкаОбъект.ВалютаДокумента);
	СтруктураПараметров.Свойство("КурсДокумента",ОбработкаОбъект.КурсДокумента);
    СтруктураПараметров.Свойство("КратностьДокумента",ОбработкаОбъект.КратностьДокумента);
    СтруктураПараметров.Свойство("ДатаДок",ОбработкаОбъект.ДатаДок);
	СтруктураПараметров.Свойство("ИмяРегистра",ОбработкаОбъект.ИмяРегистраПлан);
	СтруктураПараметров.Свойство("СуммаДокумента",ОбработкаОбъект.СуммаДляПодбора);
    СтруктураПараметров.Свойство("ВидОперации",ОбработкаОбъект.ВидОперацииПлан);
	СтруктураПараметров.Свойство("БанковскийСчетКасса",ОбработкаОбъект.БанковскийСчетКасса);
	СтруктураПараметров.Свойство("Организация",ОбработкаОбъект.Организация);
	СтруктураПараметров.Свойство("Проект",ОбработкаОбъект.Проект);
	СтруктураПараметров.Свойство("СтатьяДвиженияДенежныхСредств",ОбработкаОбъект.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Свойство("Контрагент",ОбработкаОбъект.Контрагент);
	СтруктураПараметров.Свойство("ДоговорКонтрагента",ОбработкаОбъект.ДоговорКонтрагента);
	СтруктураПараметров.Свойство("Сделка",ОбработкаОбъект.Сделка);
	СтруктураПараметров.Свойство("ДокументРасчетовСКонтрагентом",ОбработкаОбъект.ДокументРасчетовСКонтрагентом);
    СтруктураПараметров.Свойство("ПлатежПоСуммеВзаиморасчетов",ОбработкаОбъект.ПлатежПоСуммеВзаиморасчетов);
	СтруктураПараметров.Свойство("РасшифровкаПлатежаДок",ОбработкаОбъект.РасшифровкаПлатежаДок);
	СтруктураПараметров.Свойство("ОтражатьВБухгалтерскомУчете",ОбработкаОбъект.ОтражатьВБухгалтерскомУчете);
	СтруктураПараметров.Свойство("ВалютаДокумента",ОбработкаОбъект.ВалютаДокумента);
	СтруктураПараметров.Свойство("ДокументСсылка",ОбработкаОбъект.ДокументСсылка);	
	
	ОбработкаОбъект.ЕстьПодбор = НЕ СтруктураПараметров.ЗакрыватьПриВыборе;
	
	Если СтруктураПараметров.Свойство("МножественныйВыбор") Тогда
		МножественныйВыбор= СтруктураПараметров.МножественныйВыбор;
	Иначе
		МножественныйВыбор=Ложь;
	КонецЕсли;
	
	ОбработкаОбъект.МножественныйВыбор=МножественныйВыбор; 
	
	ФормаПодбора = ОбработкаОбъект.ПолучитьФорму("ФормаПодбораПланируемыхДвижений", СтруктураПараметров.ФормаДокумента, "ФормаПодбораПланируемыхПлатежей");
	
	ФормаПодбора.РежимВыбора=Истина;
	ФормаПодбора.ЗакрыватьПриВыборе=СтруктураПараметров.ЗакрыватьПриВыборе;
	
	ФормаПодбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(Документ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Документ.ЕстьРасчетыСКонтрагентами = Неопределено Тогда // Запись в форме без ее открытия
		Документ.ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(Документ.ВидОперации);
		Документ.ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам(Документ.ВидОперации);
	КонецЕсли;
	
	Если (РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение)
		И (Документ.ЕстьРасчетыСКонтрагентами ИЛИ Документ.ЕстьРасчетыПоКредитам)
		И НЕ Документ.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Документ.СуммаДокумента Тогда
		
		Ответ = Вопрос("Не совпадают сумма документа ("+Документ.СуммаДокумента+") и ее расшифровка ("+Документ.РасшифровкаПлатежа.Итог("СуммаПлатежа")+"). Пересчитать сумму документа?",
				РежимДиалогаВопрос.ДаНет,
				,
				КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Документ.СуммаДокумента = Документ.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(Документ, Отказ, РежимЗапси, РежимПроведения)

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПОДСИСТЕМЫ ДЕНЕЖНЫХ СРЕДСТВ


Процедура ПровестиСписаниеДенежныхСредствУпр(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок) Экспорт
	
	РасчетыВозврат    = СтруктураПараметров.РасчетыВозврат;
	КоэффициентСторно = ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, -1, 1);
	
	РасчетыСКонтрагентами = СтруктураПараметров.ЕстьРасчетыСКонтрагентами ИЛИ СтруктураПараметров.ЕстьРасчетыПоКредитам;
	ОтраженоВОперУчете    = СтруктураШапкиДокумента.ОтраженоВОперУчете;
	Оплачено              = СтруктураШапкиДокумента.Оплачено;
	
	Дата         = СтруктураШапкиДокумента.Дата;
	ДатаДвижений = СтруктураПараметров.ДатаДвижений;
	
	Организация         = СтруктураШапкиДокумента.Организация;
	ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредств;
	СуммаДокумента      = СтруктураШапкиДокумента.СуммаДокумента;
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	Ссылка              = СтруктураШапкиДокумента.Ссылка;
	БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКасса;
	ВидОперации         = СтруктураШапкиДокумента.ВидОперации;
	Контрагент          = СтруктураШапкиДокумента.Контрагент;
	
	ПоОбъявлениюНаВзносНаличными = СтруктураПараметров.Свойство("ПоОбъявлениюНаВзносНаличными") 
		И СтруктураПараметров.ПоОбъявлениюНаВзносНаличными;
	
	ПоРасчетномуДокументу = СтруктураПараметров.Свойство("ПоРасчетномуДокументу") 
		И СтруктураПараметров.ПоРасчетномуДокументу;

	ДвиженияПоСтатьям      = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоЗаявкам      = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву      = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоКонтрагентам = ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоЗаявкам.Свернуть("ДокументПланированияПлатежа,ВключатьВПлатежныйКалендарь,ДоговорКонтрагента,ВедениеВзаиморасчетов,ВестиПоДокументамРасчетовСКонтрагентом,Сделка,ДокументРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	
	Если РасчетыСКонтрагентами Тогда
		ДвиженияПоКонтрагентам.Свернуть("ДоговорКонтрагента,ВедениеВзаиморасчетов,ВестиПоДокументамРасчетовСКонтрагентом,Сделка,ДокументРасчетовСКонтрагентом,ВидДоговора, КонтролироватьДенежныеСредстваКомитента,Проект","СуммаВзаиморасчетов,СуммаУпр,СуммаРегл,СуммаВзаиморасчетовОстаток,СуммаУпрОстаток");
	КонецЕсли;

	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежаПлан");
	
	Если Оплачено Тогда
		
		ТаблицаДенежныеСредства          = Движения.ДенежныеСредства.ВыгрузитьКолонки();
		ТаблицаДенежныеСредстваКСписанию = Движения.ДенежныеСредстваКСписанию.ВыгрузитьКолонки();
		
		// По регистру "Денежные средства" - расход
		
		СтрокаКурсыВалют = ТаблицаПлатежейУпр[0];
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаДокумента, 
			ВалютаДокумента, глЗначениеПеременной("ВалютаУправленческогоУчета"), 
			СтрокаКурсыВалют.КурсДокумента, СтрокаКурсыВалют.КурсУпрУчета, 
			СтрокаКурсыВалют.КратностьДокумента, СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДенежныеСредства.Добавить();
		
		СтрокаДвиженийОстатки.БанковскийСчетКасса = БанковскийСчетКасса;
		СтрокаДвиженийОстатки.Организация 		  = Организация;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = ВидДенежныхСредств;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		
		// По регистру "Денежные средства к списанию" - расход
		
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийСписание = ТаблицаДенежныеСредстваКСписанию.Добавить();
			
			СтрокаДвиженийСписание.БанковскийСчетКасса = БанковскийСчетКасса;
			СтрокаДвиженийСписание.Организация 		   = Организация;
			СтрокаДвиженийСписание.ВидДенежныхСредств  = ВидДенежныхСредств;
			СтрокаДвиженийСписание.Сумма               = СтрокаДвижение.СуммаПлатежа;
			Если ПоОбъявлениюНаВзносНаличными Тогда
				СтрокаДвиженийСписание.ДокументСписания = СтруктураШапкиДокумента.ОбъявлениеНаВзносНаличными;
			ИначеЕсли ПоРасчетномуДокументу Тогда
				СтрокаДвиженийСписание.ДокументСписания = СтруктураШапкиДокумента.РасчетныйДокумент;
			Иначе
				СтрокаДвиженийСписание.ДокументСписания = Ссылка;
			КонецЕсли;
			СтрокаДвиженийСписание.СтатьяДвиженияДенежныхСредств = СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			
		КонецЦикла;
		
		Движения.ДенежныеСредства.мПериод          = ДатаДвижений;
		Движения.ДенежныеСредства.мТаблицаДвижений = ТаблицаДенежныеСредства;
		Движения.ДенежныеСредства.ВыполнитьРасход();
		
		Движения.ДенежныеСредстваКСписанию.мПериод          = ДатаДвижений;
		Движения.ДенежныеСредстваКСписанию.мТаблицаДвижений = ТаблицаДенежныеСредстваКСписанию;
		Движения.ДенежныеСредстваКСписанию.ВыполнитьРасход();
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И НЕ ПоОбъявлениюНаВзносНаличными) Тогда
			
			// По регистру "Денежные средства" - приход
			
			ТаблицаДенежныеСредства.Очистить();
			
			СтрокаДвиженийОстатки = ТаблицаДенежныеСредства.Добавить();
			
			СтрокаДвиженийОстатки.БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКассаПолучатель;
			СтрокаДвиженийОстатки.Организация 		  = Организация;
			СтрокаДвиженийОстатки.ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредствПолучатель;
			СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
			СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
			
			Движения.ДенежныеСредства.мПериод          = ДатаДвижений;
			Движения.ДенежныеСредства.мТаблицаДвижений = ТаблицаДенежныеСредства;
			Движения.ДенежныеСредства.ВыполнитьПриход();
			
			// По регистру "Денежные средства к получению" - расход
			
			ТаблицаДенежныеСредстваКПолучению = Движения.ДенежныеСредстваКПолучению.ВыгрузитьКолонки();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийПолучение = ТаблицаДенежныеСредстваКПолучению.Добавить();
				
				СтрокаДвиженийПолучение.БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКассаПолучатель;
				СтрокаДвиженийПолучение.Организация 		= Организация;
				СтрокаДвиженийПолучение.ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредствПолучатель;
				СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийПолучение.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийПолучение.ДокументПолучения   = Ссылка;
				СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств = СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				
			КонецЦикла;
			
			Движения.ДенежныеСредстваКПолучению.мПериод          = ДатаДвижений;
			Движения.ДенежныеСредстваКПолучению.мТаблицаДвижений = ТаблицаДенежныеСредстваКПолучению;
			Движения.ДенежныеСредстваКПолучению.ВыполнитьРасход();
			
		КонецЕсли;
		
	КонецЕсли;

	Если ОтраженоВОперУчете И НЕ ПоРасчетномуДокументу И НЕ ПоОбъявлениюНаВзносНаличными Тогда

		// По регистру "Денежные средства к списанию" - приход
		
		ТаблицаДенежныеСредстваКСписанию = Движения.ДенежныеСредстваКСписанию.ВыгрузитьКолонки();
		
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийДС = ТаблицаДенежныеСредстваКСписанию.Добавить();
			
			СтрокаДвиженийДС.БанковскийСчетКасса = БанковскийСчетКасса;
			СтрокаДвиженийДС.Организация 		 = Организация;
			СтрокаДвиженийДС.ВидДенежныхСредств  = ВидДенежныхСредств;
			СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийДС.ДокументСписания    = Ссылка;
			СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств = СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			
		КонецЦикла;
		
		Движения.ДенежныеСредстваКСписанию.мПериод          = ?(Оплачено, Мин(ДатаДвижений, Дата), Дата);
		Движения.ДенежныеСредстваКСписанию.мТаблицаДвижений = ТаблицаДенежныеСредстваКСписанию;
		Движения.ДенежныеСредстваКСписанию.ВыполнитьПриход();
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			// По регистру "Денежные средства к получению" - приход
			
			ТаблицаДенежныеСредстваКПолучению = Движения.ДенежныеСредстваКПолучению.ВыгрузитьКолонки();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДенежныеСредстваКПолучению.Добавить();
				
				СтрокаДвиженийДС.БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКассаПолучатель;
				СтрокаДвиженийДС.Организация 		 = Организация;
				СтрокаДвиженийДС.ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредствПолучатель;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийДС.ДокументПолучения   = Ссылка;
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств=СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				
			КонецЦикла;
			
			Движения.ДенежныеСредстваКПолучению.мПериод          = ?(Оплачено, Мин(ДатаДвижений,Дата), Дата);
			Движения.ДенежныеСредстваКПолучению.мТаблицаДвижений = ТаблицаДенежныеСредстваКПолучению;
			Движения.ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
		КонецЕсли;
		
		ЕстьРезерв     = Ложь;
		ЕстьРазмещение = Ложь;
		
		// По регистру "Денежные средства в резерве" - расход
		
		ТаблицаДенежныеСредстваВРезерве = Движения.ДенежныеСредстваВРезерве.ВыгрузитьКолонки();
		
		// По регистру "Размещение заявок на расходование средств" - расход
		ТаблицаРазмещениеЗаявокНаРасходованиеСредств = Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыгрузитьКолонки();
		
		// По регистру "Заявки на расходование средств" - расход
		ТаблицаЗаявкиНаРасходованиеСредств = Движения.ЗаявкиНаРасходованиеСредств.ВыгрузитьКолонки();
		
		// Проверим необходимость списания суммы платежного поручения по заявкам из регистра "ДенежныеСредстваРезерв"
		Для Каждого СтрокаЗаявка Из ДвиженияПоРезерву Цикл
			
			Если НЕ СтрокаЗаявка.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчетКасса);
				Запрос.УстановитьПараметр("ВидДенежныхСредств", ВидДенежныхСредств);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ДокументРезервирования", СтрокаЗаявка.ДокументПланированияПлатежа);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ
				|	РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(
				|			,
				|			БанковскийСчетКасса = &БанковскийСчетКасса
				|				И ВидДенежныхСредств = &ВидДенежныхСредств
				|				И ДокументРезервирования = &ДокументРезервирования
				|				И Организация = &Организация) КАК ДенежныеСредстваВРезервеОстатки
				|ГДЕ
				|	ДенежныеСредстваВРезервеОстатки.СуммаОстаток ЕСТЬ НЕ NULL 
				|
				|ДЛЯ ИЗМЕНЕНИЯ
				|	РегистрНакопления.ДенежныеСредстваВРезерве.Остатки";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					СтрокаДвижений = ТаблицаДенежныеСредстваВРезерве.Добавить();
					СтрокаДвижений.БанковскийСчетКасса = БанковскийСчетКасса;
					СтрокаДвижений.Организация 		   = Организация;
					СтрокаДвижений.ВидДенежныхСредств  = ВидДенежныхСредств;
					СтрокаДвижений.Сумма               = Мин(Выборка.СуммаОстаток, СтрокаЗаявка.СуммаПлатежаПлан);
					СтрокаДвижений.ДокументРезервирования = СтрокаЗаявка.ДокументПланированияПлатежа;
					
					ЕстьРезерв = Истина;
					
				КонецЕсли;
				
				// Ранжируем планируемые поступления для закрытия. Первыми закрываются размещения по планируемым поступлениям,
				// у которых совпадает счет, затем форма оплаты, затем организация.
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
				|	РазмещениеЗаявок.СуммаОстаток КАК СуммаОстаток,
				|	(ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.БанковскийСчетКасса = &БанковскийСчетКасса
				|		Тогда 4
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.ФормаОплаты = &ВидДенежныхСредств
				|		Тогда 2
				|	Иначе 0
				|	Конец
				|  + ВЫБОР КОГДА РазмещениеЗаявок.ДокументПланирования.Организация = &Организация
				|		Тогда 1
				|	Иначе 0
				|	Конец) КАК Релевантность,
				|	РазмещениеЗаявок.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
				|ИЗ
				|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, ДокументРезервирования = &ДокументРезервирования) КАК РазмещениеЗаявок
				|
				|ДЛЯ ИЗМЕНЕНИЯ
				|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки
				|
				|УПОРЯДОЧИТЬ ПО
				|	Релевантность Убыв,
				|	ДатаПоступления Возр";
				
				Запрос.УстановитьПараметр("БанковскийСчетКасса",    БанковскийСчетКасса);
				Запрос.УстановитьПараметр("ВидДенежныхСредств",     ВидДенежныхСредств);
				Запрос.УстановитьПараметр("Организация",            Организация);
				Запрос.УстановитьПараметр("ДокументРезервирования", СтрокаЗаявка.ДокументПланированияПлатежа);
				
				ТабРазмещение = Запрос.Выполнить().Выгрузить();
				
				СуммаКСписанию = СтрокаЗаявка.СуммаПлатежаПлан;
				
				Для Каждого Строка Из ТабРазмещение Цикл
					
					ЕстьРазмещение = Истина;
					
					СтрокаДвижение = ТаблицаРазмещениеЗаявокНаРасходованиеСредств.Добавить();
					СтрокаДвижение.ДокументПланирования   = Строка.ДокументПланирования;
					СтрокаДвижение.ДокументРезервирования = СтрокаЗаявка.ДокументПланированияПлатежа;
					
					Если Строка.СуммаОстаток >= СуммаКСписанию Тогда
						
						СтрокаДвижение.Сумма = СуммаКСписанию;
						Прервать;
						
					Иначе
						
						СтрокаДвижение.Сумма = Строка.СуммаОстаток;
						СуммаКСписанию       = СуммаКСписанию - Строка.СуммаОстаток;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРезерв тогда
			
			Движения.ДенежныеСредстваВРезерве.мПериод          = Дата;
			Движения.ДенежныеСредстваВРезерве.мТаблицаДвижений = ТаблицаДенежныеСредстваВРезерве;	
			Движения.ДенежныеСредстваВРезерве.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ЕстьРазмещение Тогда
			
			Движения.РазмещениеЗаявокНаРасходованиеСредств.мПериод          = Дата;
			Движения.РазмещениеЗаявокНаРасходованиеСредств.мТаблицаДвижений = ТаблицаРазмещениеЗаявокНаРасходованиеСредств;	
			Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		// По регистру ""Расчеты с контрагентами"" - расход при возврате, иначе приход
		
		ТаблицаРасчетыСКонтрагентами = Движения.РасчетыСКонтрагентами.ВыгрузитьКолонки();
		
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоЗаявкам Цикл
			
			ЕстьЗаявка  = Ложь;
			ЕстьРасчеты = Ложь;
			
			ТекущаяСделка = УправлениеВзаиморасчетами.ОпределитьСделку(СтрокаПлатеж, СтрокаПлатеж);
			
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
				
				СуммаПлатежа = СтрокаПлатеж.СуммаПлатежаПлан;
				
				СтрокаДвиженийЗаявки = ТаблицаЗаявкиНаРасходованиеСредств.Добавить();
				
				СтрокаДвиженийЗаявки.СуммаУпр						= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма							= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ЗаявкаНаРасходование			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект							= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Организация					= Организация;
				Если ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
					И ВидОперации <> Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику
					Тогда
					СтрокаДвиженийЗаявки.Контрагент	= Контрагент;
				КонецЕсли;
				СтрокаДвиженийЗаявки.Сделка							= СтрокаПлатеж.Сделка;
				Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом = СтрокаПлатеж.ДокументРасчетовСКонтрагентом;
				КонецЕсли;
				
				ЕстьЗаявка = Истина;
				
				Если НЕ СтрокаПлатеж.ВключатьВПлатежныйКалендарь Тогда // Документ не был проведен по оперативным взаиморасчетам
					ЕстьРасчеты = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ((Не ЕстьЗаявка) ИЛИ ЕстьРасчеты) И РасчетыСКонтрагентами Тогда // Первое упоминание о планируемом платеже в системе
				
				СтрокаДвиженийКонтрагенты = ТаблицаРасчетыСКонтрагентами.Добавить();
				
				СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийКонтрагенты.Контрагент  		  = Контрагент;
				СтрокаДвиженийКонтрагенты.Организация  	   	  = Организация;
				СтрокаДвиженийКонтрагенты.РасчетыВозврат      = РасчетыВозврат;
				СтрокаДвиженийКонтрагенты.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(СтрокаПлатеж, СтрокаПлатеж, , Истина);
				СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов * КоэффициентСторно;
				СтрокаДвиженийКонтрагенты.СуммаУпр            = СтрокаПлатеж.СуммаУпр * КоэффициентСторно;
				СтрокаДвиженийКонтрагенты.Период			  = Дата;
				СтрокаДвиженийКонтрагенты.ВидДвижения		  = ?(КоэффициентСторно = 1, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
				СтрокаДвиженийКонтрагенты.Активность		  = Истина;

				ЕстьРасчеты = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаЗаявкиНаРасходованиеСредств.Количество() > 0 Тогда
			
			Движения.ЗаявкиНаРасходованиеСредств.мПериод          = Дата;
			Движения.ЗаявкиНаРасходованиеСредств.мТаблицаДвижений = ТаблицаЗаявкиНаРасходованиеСредств;
			Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ТаблицаРасчетыСКонтрагентами.Количество() > 0 Тогда
			
			Движения.РасчетыСКонтрагентами.мТаблицаДвижений	= ТаблицаРасчетыСКонтрагентами;
			Движения.РасчетыСКонтрагентами.ВыполнитьДвижения();
			
		КонецЕсли;
		
	КонецЕсли;

	Если Оплачено И (ОтраженоВОперУчете ИЛИ ПоРасчетномуДокументу) Тогда  // Проводим по фактическим взаиморасчетам

		// По регистру "Движения денежных средств"
		
		ТаблицаДвиженияДенежныхСредств = Движения.ДвиженияДенежныхСредств.ВыгрузитьКолонки();
		
		ДвиженияДенежныхСредств = ТаблицаПлатежейУпр.Скопировать();
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект", "СуммаПлатежа,СуммаУпр");
			ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя = "Сумма";
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств, Неопределено, ДатаДвижений, "ДенежныеСредстваСписание", Ссылка);
			
		Иначе
			
			ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств", "СуммаПлатежа,СуммаУпр");
			ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя="Сумма";
			
			Для каждого СтрокаПлатеж Из ДвиженияДенежныхСредств Цикл
				
				УправлениеПроектами.ОпределитьРасчетныйДокумент(СтрокаПлатеж, Ссылка);
				
			КонецЦикла; 
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		// Недостающие поля.
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(ВидДенежныхСредств, "ВидДенежныхСредств");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Расход, "ПриходРасход");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(БанковскийСчетКасса, "БанковскийСчетКасса");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Ссылка, "ДокументДвижения");
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И НЕ ПоОбъявлениюНаВзносНаличными) 
			Тогда
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Организация, "Контрагент");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику
			Тогда
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицо, "Контрагент");
		Иначе
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Контрагент, "Контрагент");
		КонецЕсли;
		
		Движения.ДвиженияДенежныхСредств.мПериод          = ДатаДвижений;
		Движения.ДвиженияДенежныхСредств.мТаблицаДвижений = ТаблицаДвиженияДенежныхСредств;
		Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И НЕ ПоОбъявлениюНаВзносНаличными) 
			Тогда
			
			ТаблицаДвиженияДенежныхСредств.Очистить();
			
			// Заполним таблицу движений.
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств, Неопределено, Дата, "ДенежныеСредства");
			Иначе
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств);
			КонецЕсли;
			
			// Недостающие поля.
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(СтруктураПараметров.ВидДенежныхСредствПолучатель,  "ВидДенежныхСредств");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Приход,      "ПриходРасход");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(СтруктураПараметров.БанковскийСчетКассаПолучатель, "БанковскийСчетКасса");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Организация, "Организация");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Ссылка,      "ДокументДвижения");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Организация, "Контрагент");
			
			Движения.ДвиженияДенежныхСредств.мПериод          = ДатаДвижений;
			Движения.ДвиженияДенежныхСредств.мТаблицаДвижений = ТаблицаДвиженияДенежныхСредств;
			
			Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
		КонецЕсли;
	
		Если РасчетыСКонтрагентами Тогда

			// По регистру "ВзаиморасчетыСКонтрагентами" - расход при возврате, иначе приход
			
			ТаблицаВзаиморасчетыСКонтрагентами = Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();
			
			// По регистру "ДенежныеСредстваКомитента"  - приход при возврате, иначе расход
			
			ТаблицаДенежныеСредстваКомитента = Движения.ДенежныеСредстваКомитента.ВыгрузитьКолонки();
			ЕстьРасчетыСКомитентом           = Ложь;
		
			Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл

				ТекущаяСделка = УправлениеВзаиморасчетами.ОпределитьСделку(СтрокаПлатеж, СтрокаПлатеж);
				
				СтрокаДвижений = ТаблицаВзаиморасчетыСКонтрагентами.Добавить();
				
				СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвижений.Контрагент  		   = Контрагент;
				СтрокаДвижений.Организация  	   = Организация;

				СтрокаДвижений.Сделка              = ТекущаяСделка;
				
				СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов * КоэффициентСторно;
				СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр * КоэффициентСторно;
				
				Если СтрокаПлатеж.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
					И СтрокаПлатеж.КонтролироватьДенежныеСредстваКомитента Тогда
					
					СтрокаДвиженийКомитент = ТаблицаДенежныеСредстваКомитента.Добавить();
					
					СтрокаДвиженийКомитент.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийКомитент.Организация  	   = Организация;
					СтрокаДвиженийКомитент.Контрагент  		   = Контрагент;

					СтрокаДвиженийКомитент.Сделка              = ТекущаяСделка;
					СтрокаДвиженийКомитент.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов*КоэффициентСторно;
					СтрокаДвиженийКомитент.СуммаУпр            = СуммаУпр*КоэффициентСторно;
					
					ЕстьРасчетыСКомитентом = Истина;
					
				КонецЕсли;
				
			КонецЦикла;

			Движения.ВзаиморасчетыСКонтрагентами.мПериод          = ДатаДвижений;
			Движения.ВзаиморасчетыСКонтрагентами.мТаблицаДвижений = ТаблицаВзаиморасчетыСКонтрагентами;
			Если КоэффициентСторно = 1 Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			Иначе
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;
			
			Если ЕстьРасчетыСКомитентом Тогда
				
				Движения.ДенежныеСредстваКомитента.мПериод          = ДатаДвижений;
				Движения.ДенежныеСредстваКомитента.мТаблицаДвижений = ТаблицаДенежныеСредстваКомитента;
				Если КоэффициентСторно = 1 Тогда
					Движения.ДенежныеСредстваКомитента.ВыполнитьРасход();
				Иначе
					Движения.ДенежныеСредстваКомитента.ВыполнитьПриход();
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			// По регистру "ВзаиморасчетыСПодотчетнымиЛицами" - приход
			
			СтрокаПлатеж = ТаблицаПлатежейУпр[0];
			
			ТаблицаВзаиморасчетыСПодотчетнымиЛицами = Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыгрузитьКолонки();
			
			СтрокаДвижений = ТаблицаВзаиморасчетыСПодотчетнымиЛицами.Добавить();
			
			СтрокаДвижений.Организация         	= Организация;
			// Физ.лицо и расчетный документ берем из структуры параметров
			СтрокаДвижений.ФизЛицо             	= СтруктураПараметров.ФизЛицо;
			Если НЕ ЗначениеЗаполнено(СтруктураПараметров.РасчетныйДокументРаботника) Тогда
				СтрокаДвижений.РасчетныйДокумент = Ссылка;
			Иначе
				СтрокаДвижений.РасчетныйДокумент = СтруктураПараметров.РасчетныйДокументРаботника;
			КонецЕсли;
			СтрокаДвижений.Валюта              	= СтруктураШапкиДокумента.ВалютаВзаиморасчетовРаботника;
			СтрокаДвижений.СуммаВзаиморасчетов 	= СтрокаПлатеж.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр    		   	= СтрокаПлатеж.СуммаУпр;
			
			Движения.ВзаиморасчетыСПодотчетнымиЛицами.мПериод          = Дата;
			Движения.ВзаиморасчетыСПодотчетнымиЛицами.мТаблицаДвижений = ТаблицаВзаиморасчетыСПодотчетнымиЛицами;
			Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьПриход();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
			
			// По регистру "Розничная выручка" - приход
			
			ТаблицаРозничнаяВыручка = Движения.РозничнаяВыручка.ВыгрузитьКолонки();
			
			СтрокаДвижений = ТаблицаРозничнаяВыручка.Добавить();
			
			СтрокаДвижений.РозничнаяТочка = Контрагент;
			СтрокаДвижений.Подразделение  = СтруктураШапкиДокумента.Подразделение;
			СтрокаДвижений.Сумма          = СуммаДокумента;
			
			Движения.РозничнаяВыручка.мПериод          = Дата;
			Движения.РозничнаяВыручка.мТаблицаДвижений = ТаблицаРозничнаяВыручка;
			Движения.РозничнаяВыручка.ВыполнитьПриход();
			
		КонецЕсли

	КонецЕсли;

КонецПроцедуры //ПровестиСписаниеДенежныхСредствУпр

Процедура ПровестиПоступлениеДенежныхСредствУпр(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок) Экспорт

	РасчетыСКонтрагентами = СтруктураПараметров.ЕстьРасчетыСКонтрагентами ИЛИ СтруктураПараметров.ЕстьРасчетыПоКредитам;
	ОтраженоВОперУчете    = СтруктураШапкиДокумента.ОтраженоВОперУчете;
	Оплачено              = СтруктураШапкиДокумента.Оплачено;
	
	Дата         = СтруктураШапкиДокумента.Дата;
	ДатаДвижений = СтруктураПараметров.ДатаДвижений;
	
	Организация         = СтруктураШапкиДокумента.Организация;
	ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредств;
	СуммаДокумента      = СтруктураШапкиДокумента.СуммаДокумента;
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	Ссылка              = СтруктураШапкиДокумента.Ссылка;
	БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКасса;
	ВидОперации         = СтруктураШапкиДокумента.ВидОперации;
	Контрагент          = СтруктураШапкиДокумента.Контрагент;
	
	РасчетыВозврат    = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно = ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, -1, 1);
	
	ПоДенежномуЧеку = СтруктураПараметров.Свойство("ПоДенежномуЧеку") 
		И СтруктураПараметров.ПоДенежномуЧеку;
		
	ПоРасчетномуДокументу = СтруктураПараметров.Свойство("ПоРасчетномуДокументу") 
		И СтруктураПараметров.ПоРасчетномуДокументу;

	ДвиженияПоСтатьям             = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоПланируемымПлатежам = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоРезерву             = ТаблицаПлатежейУпр.Скопировать();
	ДвиженияПоКонтрагентам        = ТаблицаПлатежейУпр.Скопировать();
	
	ДвиженияПоПланируемымПлатежам.Свернуть("ДокументПланированияПлатежа,ВключатьВПлатежныйКалендарь,ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,ВедениеВзаиморасчетов,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект","СуммаПлатежа,СуммаВзаиморасчетов,СуммаПлатежаПлан,СуммаУпр");
	ДвиженияПоКонтрагентам.Свернуть("ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,ВидДоговора,ВедениеВзаиморасчетов,КонтролироватьДенежныеСредстваКомитента,Проект","СуммаВзаиморасчетов,СуммаУпр,СуммаРегл,СуммаВзаиморасчетовОстаток,СуммаУпрОстаток");
	ДвиженияПоСтатьям.Свернуть("СтатьяДвиженияДенежныхСредств","СуммаПлатежа,СуммаУпр");
	ДвиженияПоРезерву.Свернуть("ДокументПланированияПлатежа","СуммаПлатежа");
	
	Если Оплачено Тогда
		
		// По регистру "Денежные средства" - приход
		ТаблицаДенежныеСредства	= Движения.ДенежныеСредства.ВыгрузитьКолонки();
		
		СтрокаКурсыВалют=ТаблицаПлатежейУпр[0];
		
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаДокумента, 
			ВалютаДокумента, глЗначениеПеременной("ВалютаУправленческогоУчета"), 
			СтрокаКурсыВалют.КурсДокумента, СтрокаКурсыВалют.КурсУпрУчета, 
			СтрокаКурсыВалют.КратностьДокумента, СтрокаКурсыВалют.КратностьУпрУчета);
		
		СтрокаДвиженийОстатки = ТаблицаДенежныеСредства.Добавить();
		
		СтрокаДвиженийОстатки.БанковскийСчетКасса = БанковскийСчетКасса;
		СтрокаДвиженийОстатки.Организация 		  = Организация;
		СтрокаДвиженийОстатки.ВидДенежныхСредств  = ВидДенежныхСредств;
		СтрокаДвиженийОстатки.Сумма               = СуммаДокумента;
		СтрокаДвиженийОстатки.СуммаУпр            = СуммаУпр;
		
		Движения.ДенежныеСредства.мПериод          = ДатаДвижений;
		Движения.ДенежныеСредства.мТаблицаДвижений = ТаблицаДенежныеСредства;
		Движения.ДенежныеСредства.ВыполнитьПриход();
		
		// По регистру "Денежные средства к получению" - расход
		
		ТаблицаДенежныеСредстваКПолучению = Движения.ДенежныеСредстваКПолучению.ВыгрузитьКолонки();
		
		Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
			
			СтрокаДвиженийПолучение = ТаблицаДенежныеСредстваКПолучению.Добавить();
			
			СтрокаДвиженийПолучение.БанковскийСчетКасса = БанковскийСчетКасса;
			СтрокаДвиженийПолучение.Организация 		= Организация;
			СтрокаДвиженийПолучение.ВидДенежныхСредств  = ВидДенежныхСредств;
			СтрокаДвиженийПолучение.Сумма               = СтрокаДвижение.СуммаПлатежа;
			СтрокаДвиженийПолучение.СуммаУпр            = СтрокаДвижение.СуммаУпр;
			Если ПоДенежномуЧеку Тогда
				СтрокаДвиженийПолучение.ДокументПолучения = ?(НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДенежныйЧек), Ссылка, СтруктураШапкиДокумента.ДенежныйЧек);
			Иначе
				СтрокаДвиженийПолучение.ДокументПолучения = Ссылка;
			КонецЕсли;
			СтрокаДвиженийПолучение.СтатьяДвиженияДенежныхСредств = СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
			
		КонецЦикла;
		
		Движения.ДенежныеСредстваКПолучению.мПериод          = ДатаДвижений;
		Движения.ДенежныеСредстваКПолучению.мТаблицаДвижений = ТаблицаДенежныеСредстваКПолучению;
		Движения.ДенежныеСредстваКПолучению.ВыполнитьРасход();
		
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ ПоДенежномуЧеку Тогда
			
			// По регистру "Денежные средства" - расход
			
			ТаблицаДенежныеСредства = Движения.ДенежныеСредства.ВыгрузитьКолонки();
			
			СтрокаДвижений = ТаблицаДенежныеСредства.Добавить();
			
			СтрокаДвижений.БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКассаОтправитель;
			СтрокаДвижений.Организация 		   = Организация;
			СтрокаДвижений.ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредствОтправитель;
			СтрокаДвижений.Сумма               = СуммаДокумента;
			СтрокаДвижений.СуммаУпр            = СуммаУпр;
			
			Движения.ДенежныеСредства.мПериод          = ДатаДвижений;
			Движения.ДенежныеСредства.мТаблицаДвижений = ТаблицаДенежныеСредства;
			Движения.ДенежныеСредства.ВыполнитьРасход();
			
			// По регистру "Денежные средства к списанию" - расход
			
			ТаблицаДенежныеСредстваКСписанию = Движения.ДенежныеСредстваКСписанию.ВыгрузитьКолонки();
			
			СтрокаДвижений = ТаблицаДенежныеСредстваКСписанию.Добавить();
			
			СтрокаДвижений.БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКассаОтправитель;
			СтрокаДвижений.Организация 		   = Организация;
			СтрокаДвижений.ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредствОтправитель;
			СтрокаДвижений.ДокументСписания    = Ссылка;
			СтрокаДвижений.СтатьяДвиженияДенежныхСредств = ДвиженияПоСтатьям[0].СтатьяДвиженияДенежныхСредств;

			СтрокаДвижений.Сумма               = СуммаДокумента;
			
			Движения.ДенежныеСредстваКСписанию.мПериод          = ДатаДвижений;
			Движения.ДенежныеСредстваКСписанию.мТаблицаДвижений = ТаблицаДенежныеСредстваКСписанию;
			Движения.ДенежныеСредстваКСписанию.ВыполнитьРасход();

		КонецЕсли;
		
		// Резервируем денежные средства, если приход планировался и по нему размещались заявки
		Для Каждого СтрокаРезерв ИЗ ДвиженияПоРезерву Цикл
			
			Если НЕ СтрокаРезерв.ДокументПланированияПлатежа.Пустая() Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования КАК Заявка,
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаОстаток,
				|	РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументРезервирования.ДатаРасхода КАК ДокументРезервированияДатаРасхода
				|ИЗ
				|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, 
				|		ДокументПланирования = &ДокументПланирования) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
				|
				|ДЛЯ ИЗМЕНЕНИЯ
				|	РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДокументРезервированияДатаРасхода";
				
				Запрос.УстановитьПараметр("ДокументПланирования", СтрокаРезерв.ДокументПланированияПлатежа);
				
				Результат = Запрос.Выполнить();
				
				Если НЕ Результат.Пустой() Тогда
					
					СуммаРезерв = СтрокаРезерв.СуммаПлатежа;	
					
					ТаблицаРазмещениеЗаявокНаРасходованиеСредств = Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыгрузитьКолонки();
					
					ТаблицаДенежныеСредстваВРезерве = Движения.ДенежныеСредстваВРезерве.ВыгрузитьКолонки();
					
					Выборка=Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						
						Если Выборка.СуммаОстаток >= СуммаРезерв Тогда
							
							СтрокаРазмещение = ТаблицаРазмещениеЗаявокНаРасходованиеСредств.Добавить();
							
							СтрокаРазмещение.ДокументПланирования   = СтрокаРезерв.ДокументПланированияПлатежа;
							СтрокаРазмещение.ДокументРезервирования = Выборка.Заявка;
							СтрокаРазмещение.Сумма = СуммаРезерв;
							
							СтрокаРезерв = ТаблицаДенежныеСредстваВРезерве.Добавить();
							
							СтрокаРезерв.БанковскийСчетКасса    = БанковскийСчетКасса;
							СтрокаРезерв.Организация            = Организация;
							СтрокаРезерв.ВидДенежныхСредств     = ВидДенежныхСредств;
							СтрокаРезерв.ДокументРезервирования = Выборка.Заявка;
							СтрокаРезерв.Сумма = СуммаРезерв;
							
							Прервать;
							
						Иначе
							
							СтрокаРазмещение = ТаблицаРазмещениеЗаявокНаРасходованиеСредств.Добавить();
							
							СтрокаРазмещение.ДокументПланирования   = СтрокаРезерв.ДокументПланированияПлатежа;
							СтрокаРазмещение.ДокументРезервирования = Выборка.Заявка;
							СтрокаРазмещение.Сумма = Выборка.СуммаОстаток;
							
							СтрокаРезерв = ТаблицаДенежныеСредстваВРезерве.Добавить();
							
							СтрокаРезерв.БанковскийСчетКасса    = БанковскийСчетКасса;
							СтрокаРезерв.Организация            = Организация;
							СтрокаРезерв.ВидДенежныхСредств     = ВидДенежныхСредств;
							СтрокаРезерв.ДокументРезервирования = Выборка.Заявка;
							СтрокаРезерв.Сумма = Выборка.СуммаОстаток;
							
							СуммаРезерв = СуммаРезерв - Выборка.СуммаОстаток;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Движения.РазмещениеЗаявокНаРасходованиеСредств.мПериод          = ДатаДвижений;
					Движения.РазмещениеЗаявокНаРасходованиеСредств.мТаблицаДвижений = ТаблицаРазмещениеЗаявокНаРасходованиеСредств;
					Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьРасход();
					
					Движения.ДенежныеСредстваВРезерве.мПериод          = ДатаДвижений;
					Движения.ДенежныеСредстваВРезерве.мТаблицаДвижений = ТаблицаДенежныеСредстваВРезерве;
					Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтраженоВОперУчете И НЕ ПоРасчетномуДокументу Тогда 
		
		Если НЕ ПоДенежномуЧеку Тогда
			
			// По регистру "Денежные средства к получению" - приход
			
			ТаблицаДенежныеСредстваКПолучению = Движения.ДенежныеСредстваКПолучению.ВыгрузитьКолонки();
			
			Для Каждого СтрокаДвижение Из ДвиженияПоСтатьям Цикл
				
				СтрокаДвиженийДС = ТаблицаДенежныеСредстваКПолучению.Добавить();
				
				СтрокаДвиженийДС.БанковскийСчетКасса = БанковскийСчетКасса;
				СтрокаДвиженийДС.Организация 		 = Организация;
				СтрокаДвиженийДС.ВидДенежныхСредств  = ВидДенежныхСредств;
				СтрокаДвиженийДС.Сумма               = СтрокаДвижение.СуммаПлатежа;
				СтрокаДвиженийДС.СуммаУпр            = СтрокаДвижение.СуммаУпр;
				СтрокаДвиженийДС.ДокументПолучения   = Ссылка;
				СтрокаДвиженийДС.СтатьяДвиженияДенежныхСредств = СтрокаДвижение.СтатьяДвиженияДенежныхСредств;
				
			КонецЦикла;
			
			Движения.ДенежныеСредстваКПолучению.мПериод          = ?(Оплачено, Мин(ДатаДвижений, Дата), Дата);
			Движения.ДенежныеСредстваКПолучению.мТаблицаДвижений = ТаблицаДенежныеСредстваКПолучению;
			Движения.ДенежныеСредстваКПолучению.ВыполнитьПриход();
			
			Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
				
				// По регистру "Денежные средства к списанию" - приход
				
				ТаблицаДенежныеСредстваКСписанию = Движения.ДенежныеСредстваКСписанию.ВыгрузитьКолонки();
				
				СтрокаДвижений = ТаблицаДенежныеСредстваКСписанию.Добавить();
				
				СтрокаДвижений.БанковскийСчетКасса = СтруктураПараметров.БанковскийСчетКассаОтправитель;
				СтрокаДвижений.Организация 		   = Организация;
				СтрокаДвижений.ВидДенежныхСредств  = СтруктураПараметров.ВидДенежныхСредствОтправитель;
				СтрокаДвижений.ДокументСписания    = Ссылка;
				СтрокаДвижений.СтатьяДвиженияДенежныхСредств = ДвиженияПоСтатьям[0].СтатьяДвиженияДенежныхСредств;
				СтрокаДвижений.Сумма               = СуммаДокумента;
				
				Движения.ДенежныеСредстваКСписанию.мПериод          = Дата;
				Движения.ДенежныеСредстваКСписанию.мТаблицаДвижений = ТаблицаДенежныеСредстваКСписанию;
				Движения.ДенежныеСредстваКСписанию.ВыполнитьПриход();
				
			КонецЕсли;
			
		КонецЕсли;
				
		// По регистру "Планируемые поступления денежных средств" - расход
		
		ТаблицаПланируемыеПоступленияДенежныхСредств = Движения.ПланируемыеПоступленияДенежныхСредств.ВыгрузитьКолонки();
		
		// По регистру "Расчеты с контрагентами"
		ТаблицаРасчетыСКонтрагентами = Движения.РасчетыСКонтрагентами.ВыгрузитьКолонки();
		
		// По строкам табличной части
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоПланируемымПлатежам Цикл
			
			ЕстьПланПоступление = Ложь;
			ЕстьРасчеты         = Ложь;
			
			ТекущаяСделка = УправлениеВзаиморасчетами.ОпределитьСделку(СтрокаПлатеж, СтрокаПлатеж);
			
			Если НЕ СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
				
				СуммаПлатежа = СтрокаПлатеж.СуммаПлатежаПлан;
				
				СтрокаДвиженийЗаявки = ТаблицаПланируемыеПоступленияДенежныхСредств.Добавить();
				
				СтрокаДвиженийЗаявки.СуммаУпр            			= СтрокаПлатеж.СуммаУпр;
				СтрокаДвиженийЗаявки.Сумма                			= СтрокаПлатеж.СуммаПлатежаПлан;
				СтрокаДвиженийЗаявки.СуммаВзаиморасчетов  			= СтрокаПлатеж.СуммаВзаиморасчетов;
				СтрокаДвиженийЗаявки.ДокументПланирования 			= СтрокаПлатеж.ДокументПланированияПлатежа;
				СтрокаДвиженийЗаявки.СтатьяДвиженияДенежныхСредств 	= СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
				СтрокаДвиженийЗаявки.Проект						 	= СтрокаПлатеж.Проект;
				СтрокаДвиженийЗаявки.ДоговорКонтрагента				= СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийЗаявки.Организация					= Организация;
				СтрокаДвиженийЗаявки.Контрагент						= Контрагент;
				СтрокаДвиженийЗаявки.Сделка							= СтрокаПлатеж.Сделка;
				Если СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом = ?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументРасчетовСКонтрагентом),
						Ссылка, СтрокаПлатеж.ДокументРасчетовСКонтрагентом);
				КонецЕсли;
				
				ЕстьПланПоступление = Истина;
				
				Если НЕ СтрокаПлатеж.ВключатьВПлатежныйКалендарь Тогда // Документ не был проведен по оперативным взаиморасчетам
					ЕстьРасчеты = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если (НЕ ЕстьПланПоступление ИЛИ ЕстьРасчеты) 
				И (РасчетыСКонтрагентами 
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
				Тогда // Первое упоминание о планируемом платеже в системе
				
				// По регистру "Расчеты с контрагентами"
				
				СтрокаДвиженийКонтрагенты = ТаблицаРасчетыСКонтрагентами.Добавить();
				
				СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвиженийКонтрагенты.Контрагент  		  = Контрагент;
				СтрокаДвиженийКонтрагенты.Организация  	   	  = Организация;
				СтрокаДвиженийКонтрагенты.РасчетыВозврат      = РасчетыВозврат;
				СтрокаДвиженийКонтрагенты.Сделка              = ?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.Сделка), ТекущаяСделка,СтрокаПлатеж.Сделка);
				СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов * КоэффициентСторно;
				СтрокаДвиженийКонтрагенты.СуммаУпр            = СтрокаПлатеж.СуммаУпр * КоэффициентСторно;
				СтрокаДвиженийКонтрагенты.Период			  = Дата;
				СтрокаДвиженийКонтрагенты.ВидДвижения		  = ?(КоэффициентСторно = 1, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
				СтрокаДвиженийКонтрагенты.Активность		  = Истина;
				
				ЕстьРасчеты = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам 
				ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам)
			И СтруктураШапкиДокумента.СуммаУслуг <> 0 Тогда
			
			СуммаУпрУслуга = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтруктураШапкиДокумента.СуммаУслуг, 
				ВалютаДокумента, глЗначениеПеременной("ВалютаУправленческогоУчета"), 
				СтрокаКурсыВалют.КурсДокумента, СтрокаКурсыВалют.КурсУпрУчета, 
				СтрокаКурсыВалют.КратностьДокумента, СтрокаКурсыВалют.КратностьУпрУчета);
			
			СтрокаДвиженийКонтрагенты = ТаблицаРасчетыСКонтрагентами.Добавить();
			
			СтрокаДвиженийКонтрагенты.ВидДвижения		  = ВидДвиженияНакопления.Расход;
			СтрокаДвиженийКонтрагенты.Активность		  = Истина;
			СтрокаДвиженийКонтрагенты.Период			  = Дата;
			СтрокаДвиженийКонтрагенты.Организация         = Организация;
			СтрокаДвиженийКонтрагенты.Контрагент          = Контрагент;
			СтрокаДвиженийКонтрагенты.ДоговорКонтрагента  = ДвиженияПоКонтрагентам[0].ДоговорКонтрагента;
			СтрокаДвиженийКонтрагенты.РасчетыВозврат      = РасчетыВозврат;
			СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов = СтруктураШапкиДокумента.СуммаУслуг;
			СтрокаДвиженийКонтрагенты.СуммаУпр            = СуммаУпрУслуга;
					
		КонецЕсли;
		
		Если ТаблицаПланируемыеПоступленияДенежныхСредств.Количество() > 0 Тогда
			
			Движения.ПланируемыеПоступленияДенежныхСредств.мПериод          = Дата;
			Движения.ПланируемыеПоступленияДенежныхСредств.мТаблицаДвижений = ТаблицаПланируемыеПоступленияДенежныхСредств;
			Движения.ПланируемыеПоступленияДенежныхСредств.ВыполнитьРасход();
			
		КонецЕсли;
		
		Если ТаблицаРасчетыСКонтрагентами.Количество() > 0 Тогда
			
			Движения.РасчетыСКонтрагентами.мТаблицаДвижений	= ТаблицаРасчетыСКонтрагентами;
			Движения.РасчетыСКонтрагентами.ВыполнитьДвижения();
			
		КонецЕсли;
		
	КонецЕсли;

	Если Оплачено И ОтраженоВОперУчете Тогда  // Проводим по фактическим взаиморасчетам
			
		// По регистру "Движения денежных средств"
		ТаблицаДвиженияДенежныхСредств = Движения.ДвиженияДенежныхСредств.ВыгрузитьКолонки();
			
		ДвиженияДенежныхСредств = ТаблицаПлатежейУпр.Скопировать();
			
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
			ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект",
				"СуммаПлатежа,СуммаУпр");
			ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя = "Сумма";
				
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств, Неопределено, Дата, "ДенежныеСредстваПоступление", Ссылка);
				
		Иначе
				
			ДвиженияДенежныхСредств.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,ВестиПоДокументамРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств",
				"СуммаПлатежа,СуммаУпр");
			ДвиженияДенежныхСредств.Колонки["СуммаПлатежа"].Имя = "Сумма";
				
			Для каждого СтрокаПлатеж Из ДвиженияДенежныхСредств Цикл
				УправлениеПроектами.ОпределитьРасчетныйДокумент(СтрокаПлатеж,Ссылка);
			КонецЦикла; 
				
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств);
				
		КонецЕсли;
			
		// Недостающие поля.
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(ВидДенежныхСредств,  "ВидДенежныхСредств");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(БанковскийСчетКасса, "БанковскийСчетКасса");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Организация,         "Организация");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Ссылка,              "ДокументДвижения");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Контрагент,          "Контрагент");
		ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Приход, "ПриходРасход");
			
		Движения.ДвиженияДенежныхСредств.мПериод          = ДатаДвижений;
		Движения.ДвиженияДенежныхСредств.мТаблицаДвижений = ТаблицаДвиженияДенежныхСредств;
		Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
			
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке И НЕ ПоДенежномуЧеку Тогда
				
			// По регистру "Движения денежных средств"
			
			ТаблицаДвиженияДенежныхСредств = Движения.ДвиженияДенежныхСредств.ВыгрузитьКолонки();
				
			// Заполним таблицу движений.
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств, Неопределено, Дата, "ДенежныеСредства");
			Иначе
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияДенежныхСредств, ТаблицаДвиженияДенежныхСредств);
			КонецЕсли;
				
			// Недостающие поля.
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(СтруктураПараметров.ВидДенежныхСредствОтправитель,  "ВидДенежныхСредств");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Перечисления.ВидыДвиженийПриходРасход.Расход,       "ПриходРасход");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(СтруктураПараметров.БанковскийСчетКассаОтправитель, "БанковскийСчетКасса");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Организация,                                        "Организация");
			ТаблицаДвиженияДенежныхСредств.ЗаполнитьЗначения(Ссылка,                                             "ДокументДвижения");
				
			Движения.ДвиженияДенежныхСредств.мПериод          = Дата;
			Движения.ДвиженияДенежныхСредств.мТаблицаДвижений = ТаблицаДвиженияДенежныхСредств;
			Движения.ДвиженияДенежныхСредств.ВыполнитьДвижения();
				
		КонецЕсли;
			
		Если РасчетыСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
				
			// По регистру "Взаиморасчеты с контрагентами" - расход при возврате, иначе приход
			
			ТаблицаВзаиморасчетыСКонтрагентами = Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();
				
			// По регистру "ДенежныеСредстваКомитента" - расход при возврате, иначе приход
				
			ЕстьРасчетыСКомиссионером = Ложь;
			ТаблицаДенежныеСредстваКомиссионера = Движения.ДенежныеСредстваКомиссионера.ВыгрузитьКолонки();
				
			Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
					
				ТекущаяСделка = УправлениеВзаиморасчетами.ОпределитьСделку(СтрокаПлатеж, СтрокаПлатеж);
					
				СтрокаДвижений = ТаблицаВзаиморасчетыСКонтрагентами.Добавить();
				
				СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
				СтрокаДвижений.Контрагент  		   = Контрагент;
				СтрокаДвижений.Организация  	   = Организация;
				СтрокаДвижений.Сделка              = ТекущаяСделка;
				СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов * КоэффициентСторно;
				СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр * КоэффициентСторно;
					
				Если СтрокаПлатеж.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
					И СтрокаПлатеж.КонтролироватьДенежныеСредстваКомитента Тогда
						
					СтрокаДвиженийКомиссионер = ТаблицаДенежныеСредстваКомиссионера.Добавить();
					
					СтрокаДвиженийКомиссионер.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
					СтрокаДвиженийКомиссионер.Организация		  = Организация;
					СтрокаДвиженийКомиссионер.Контрагент		  = Контрагент;
					СтрокаДвиженийКомиссионер.Сделка              = ТекущаяСделка;
					СтрокаДвиженийКомиссионер.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов * КоэффициентСторно;
					СтрокаДвиженийКомиссионер.СуммаУпр            = СуммаУпр * КоэффициентСторно;
						
					ЕстьРасчетыСКомиссионером = Истина;
						
				КонецЕсли;
					
			КонецЦикла;
				
			Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам 
					ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам)
				И СтруктураШапкиДокумента.СуммаУслуг <> 0 Тогда
				
				СуммаУпрУслуга = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтруктураШапкиДокумента.СуммаУслуг, 
					ВалютаДокумента, глЗначениеПеременной("ВалютаУправленческогоУчета"), 
					СтрокаКурсыВалют.КурсДокумента, СтрокаКурсыВалют.КурсУпрУчета, 
					СтрокаКурсыВалют.КратностьДокумента, СтрокаКурсыВалют.КратностьУпрУчета);
				
				СтрокаДвижений = ТаблицаВзаиморасчетыСКонтрагентами.Добавить();
				
				СтрокаДвижений.ДоговорКонтрагента = ДвиженияПоКонтрагентам[0].ДоговорКонтрагента;
				СтрокаДвижений.Организация        = Организация;
				СтрокаДвижений.Контрагент         = Контрагент;
				
				СтрокаДвижений.СуммаВзаиморасчетов = СтруктураШапкиДокумента.СуммаУслуг;
				СтрокаДвижений.СуммаУпр            = СуммаУпрУслуга;
				
			КонецЕсли;
			
			Движения.ВзаиморасчетыСКонтрагентами.мПериод          = ДатаДвижений;
			Движения.ВзаиморасчетыСКонтрагентами.мТаблицаДвижений = ТаблицаВзаиморасчетыСКонтрагентами;
			Если КоэффициентСторно = 1 Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			Иначе
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
				
			Если ЕстьРасчетыСКомиссионером Тогда
					
				Движения.ДенежныеСредстваКомиссионера.мПериод          = Дата;
				Движения.ДенежныеСредстваКомиссионера.мТаблицаДвижений = ТаблицаДенежныеСредстваКомиссионера;
				Если КоэффициентСторно = 1 Тогда
					Движения.ДенежныеСредстваКомиссионера.ВыполнитьРасход();
				Иначе
					Движения.ДенежныеСредстваКомиссионера.ВыполнитьПриход();
				КонецЕсли;
					
			КонецЕсли;
				
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				
			СтрокаПлатеж=ДвиженияПоКонтрагентам[0];
				
			// По регистру "Взаиморасчеты с подотчетными лицами" - расход
			
			ТаблицаВзаиморасчетыСПодотчетнымиЛицами = Движения.ВзаиморасчетыСПодотчетнымиЛицами.Выгрузить();
				
			СтрокаДвижений = ТаблицаВзаиморасчетыСПодотчетнымиЛицами.Добавить();
			СтрокаДвижений.Организация         = Организация;
			СтрокаДвижений.ФизЛицо             = Контрагент;
			Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.РасчетныйДокумент) Тогда
				СтрокаДвижений.РасчетныйДокумент = Ссылка;
			Иначе
				СтрокаДвижений.РасчетныйДокумент = СтруктураШапкиДокумента.РасчетныйДокумент;
			КонецЕсли;
			СтрокаДвижений.Валюта              = СтруктураШапкиДокумента.ВалютаВзаиморасчетовРаботника;
			СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаУпр;
				
			Движения.ВзаиморасчетыСПодотчетнымиЛицами.мПериод          = Дата;
			Движения.ВзаиморасчетыСПодотчетнымиЛицами.мТаблицаДвижений = ТаблицаВзаиморасчетыСПодотчетнымиЛицами;
			Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();
				
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
				
			// По регистру "Розничная выручка"
			
			ТаблицаРозничнаяВыручка = Движения.РозничнаяВыручка.Выгрузить();
				
			СтрокаДвижений = ТаблицаРозничнаяВыручка.Добавить();
			
			СтрокаДвижений.РозничнаяТочка  = Контрагент;
			СтрокаДвижений.Подразделение   = СтруктураШапкиДокумента.Подразделение;
			СтрокаДвижений.Сумма           = СуммаДокумента;
				
			Движения.РозничнаяВыручка.мПериод          = Дата;
			Движения.РозничнаяВыручка.мТаблицаДвижений = ТаблицаРозничнаяВыручка;
			Движения.РозничнаяВыручка.ВыполнитьРасход();
				
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //ПровестиПоступлениеДенежныхСредствУпр


//Амбер
  Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации=Неопределено) Экспорт
	
	СПоставщиком  	= Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	СПокупателем  	= Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Прочее  		= Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ВидДоговораПоВидуОпераций = Новый Соответствие();

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,Прочее);
        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
			
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам,Прочее);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю,СПокупателем);
		
		ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];
		
		Если НЕ ВидДоговора = Неопределено Тогда
			
			Возврат ВидДоговора;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	Конецесли;
	
КонецФункции // ОпределитьВидДоговораСКонтрагентом()

///Амбер