Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге документа
// Реализует алгоритм автоматического заполнения табличной части.
//
Процедура ЗаполнитьСтрокиДокумента() Экспорт
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация, "Нал");
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазделРеализация(УчетнаяПолитикаНУ);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Заполняет раздел "Реализация"
Процедура ЗаполнитьРазделРеализация(УчетнаяПолитикаНУ) Экспорт
	
	ТаблицаРезультатов = Реализация.ВыгрузитьКолонки();
	
	Если Реализация0 Тогда
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0();
	Иначе	
		Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный();
	КонецЕсли; 
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		Реализация.Очистить();
		Возврат;
	КонецЕсли;

	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	//НаличиеОплатыНеТребуется = не (УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС  = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате) ;

	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур);
	
	Если не Реализация0 = УчетнаяПолитикаНУ.НДСИспользованиеОплатПокупателя_Приоритет0 Тогда
		// В учетная политике приоритет в распределении оплат установлен по НДС 0%, отрабатывается НДС по прочим ставкам 
		// или наоборот - приоритет по прочим ставкам, отрабатывается 0%.
		// В этом случае суммы сначала распределяются на начисления, которые не отражаются данным документом,
		// лишь затем на начисления, которые могут быть отражены данным документом.
		Если Реализация0 Тогда
			ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур);
		Иначе	
			ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(Истина, СписокСчетовФактур);
		КонецЕсли; 
		
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Истина);

	Реализация.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (за вычетом реализации 0%)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур = неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрНачислений.СчетФактура КАК СчетФактура,
		|	РеестрНачислений.СчетФактураДата КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА РеестрНачислений.СчетФактураДата >= &Начало2006Года
		|			ТОГДА &МоментОпределения_ПоОтгрузке
		|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
		|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
		|	РеестрНачислений.ВидЦенности,
		|	РеестрНачислений.СтавкаНДС,
		|	РеестрНачислений.Покупатель,
		|	РеестрНачислений.СуммаБезНДС КАК СуммаБезНДС,
		|	РеестрНачислений.СуммаНДС КАК СуммаНДС,
		|	РеестрНачислений.СуммаСНДС КАК СуммаСНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
		|		ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|		НДСНачисленныйОстатки.ВидЦенности КАК ВидЦенности,
		|		НДСНачисленныйОстатки.СтавкаНДС КАК СтавкаНДС,
		|		НДСНачисленныйОстатки.Покупатель КАК Покупатель,
		|		СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК СуммаБезНДС,
		|		СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаНДС,
		|		СУММА(ЕСТЬNULL(НДСНачисленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0)) КАК СуммаСНДС
		|	ИЗ
		|		РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериодаГраница,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &ОтборПоСпискуСФ
		|						ТОГДА СчетФактура В (&СписокСчетовФактур)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И (НЕ ВидНачисления В (&ИсключаемыеВидыНачисления))) КАК НДСНачисленныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСРеализация0.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСРеализация0Остатки
		|			ПО НДСНачисленныйОстатки.СчетФактура = НДСРеализация0Остатки.СчетФактура
		|				И НДСНачисленныйОстатки.ВидЦенности = НДСРеализация0Остатки.ВидЦенности
		|				И НДСНачисленныйОстатки.СтавкаНДС = НДСРеализация0Остатки.СтавкаНДС
		|				И НДСНачисленныйОстатки.Покупатель = НДСРеализация0Остатки.Покупатель
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НДСНачисленныйОстатки.ВидЦенности,
		|		НДСНачисленныйОстатки.СчетФактура,
		|		НДСНачисленныйОстатки.СтавкаНДС,
		|		НДСНачисленныйОстатки.Покупатель,
		|		ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода)) КАК РеестрНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО (УчетнаяПолитикаНалоговыйУчет.Организация = &Организация)
		|			И (ВЫБОР
		|				КОГДА &ОтборПоСпискуСФ
		|					ТОГДА РеестрНачислений.СчетФактура В (&СписокСчетовФактур)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					РеестрНачислений.СчетФактураДата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И УчетнаяПолитикаНалоговыйУчет.Организация = &Организация))
		|ГДЕ
		|	(НЕ РеестрНачислений.СуммаСНДС = 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата,
		|	СчетФактура
		|ИТОГИ
		|	МИНИМУМ(СчетФактураДата),
		|	СУММА(СуммаБезНДС),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаСНДС)
		|ПО
		|	СчетФактура";


	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыНачисления = Новый СписокЗначений;
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);		// не отражается в книге продаж
	
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСНачисленКУплате);	// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);			// Отражается отдельно
	ИсключаемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);		// Отражается отдельно
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыНачисления", ИсключаемыеВидыНачисления);
	
	Запрос.УстановитьПараметр("ОтборПоСпискуСФ", (не СписокСчетовФактур = Неопределено));
	Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Вызывается из процедуры ЗаполнитьРазделРеализация.
// Заполняет ТЧ Реализация по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(ВключитьОжиданиеПодтверждения = ложь, СписокСчетовФактур = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Остатки.Организация,
		|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
		|			ТОГДА &МоментОпределения_ПоОтгрузке
		|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
		|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
		|	НДСРеализация0Остатки.ВидЦенности,
		|	НДСРеализация0Остатки.СтавкаНДС,
		|	НДСРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСРеализация0Остатки.НДСОстаток КАК СуммаНДС,
		|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК СуммаСНДС,
		|	НДСРеализация0Остатки.Состояние,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС_НачисленоВсего,
		|	ВЫБОР
		|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток < НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток
		|				И (НЕ НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток < 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяКорректировка
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|		&КонецПериодаГраница,
		|		Организация = &Организация
		|			И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСРеализация0Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО УчетнаяПолитикаНалоговыйУчет.Организация = НДСРеализация0Остатки.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ЕСТЬNULL(НДСРеализация0Остатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И УчетнаяПолитикаНалоговыйУчет.Организация = НДСРеализация0Остатки.Организация))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСНачисленный.Остатки(&КонецПериодаГраница, Организация = &Организация) КАК НДСНачисленныйОстатки
		|		ПО НДСРеализация0Остатки.СчетФактура = НДСНачисленныйОстатки.СчетФактура
		|			И НДСРеализация0Остатки.ВидЦенности = НДСНачисленныйОстатки.ВидЦенности
		|			И НДСРеализация0Остатки.СтавкаНДС = НДСНачисленныйОстатки.СтавкаНДС
		|ГДЕ
		|	(НДСРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(СуммаБезНДС),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаСНДС),
		|	МАКСИМУМ(ТребуетсяКорректировка)
		|ПО
		|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);

	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	Если ВключитьОжиданиеПодтверждения Тогда
		ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	Если не СписокСчетовФактур = Неопределено Тогда
	   Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация"," 
			|		Организация = &Организация
			|		    И СчетФактура В (&СписокСчетовФактур)
			|");
		Запрос.УстановитьПараметр("СписокСчетовФактур",СписокСчетовФактур);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СФДляКорректировки = РезультатЗапроса.Строки.НайтиСтроки(Новый Структура("ТребуетсяКорректировка", Истина));
	Для каждого СтрокаСФ Из СФДляКорректировки Цикл
		Для каждого СтрокаРасшифровки Из СтрокаСФ.Строки Цикл
			Если СтрокаРасшифровки.ТребуетсяКорректировка Тогда
				СтрокаРасшифровки.СуммаНДС = (СтрокаРасшифровки.СуммаНДС*СтрокаРасшифровки.СуммаСНДС_НачисленоВсего/СтрокаРасшифровки.СуммаСНДС);
				СтрокаРасшифровки.СуммаСНДС = СтрокаРасшифровки.СуммаСНДС_НачисленоВсего;
				СтрокаРасшифровки.СуммаБезНДС = СтрокаРасшифровки.СуммаСНДС - СтрокаРасшифровки.СуммаНДС;
			КонецЕсли; 
		КонецЦикла; 
		
		СтрокаСФ.СуммаНДС = СтрокаСФ.Строки.Итог("СуммаНДС");
		СтрокаСФ.СуммаСНДС = СтрокаСФ.Строки.Итог("СуммаСНДС");
		СтрокаСФ.СуммаБезНДС = СтрокаСФ.Строки.Итог("СуммаБезНДС");
	КонецЦикла; 
	
	Возврат РезультатЗапроса;

КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСРеализация0()

// Заполняет раздел "Авансы"
Процедура ЗаполнитьРазделАвансы() Экспорт
	
	ТаблицаРезультатов = Авансы.ВыгрузитьКолонки();
	
	Таблица_НДСcАвансов = ЗаполнитьНДСНачисленныйДаннымиПоАвансам();
	
	Если Таблица_НДСcАвансов.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Авансы.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСcАвансов,ТаблицаРезультатов);

	Авансы.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделАвансы.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС с авансов)
Функция ЗаполнитьНДСНачисленныйДаннымиПоАвансам()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	&Событие_НДСсАвансов КАК Событие,
	|	НДСНачисленныйОстатки.ДоговорАванса,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА НДСНачисленныйОстатки.СчетФактура.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|			&КонецПериодаГраница,
	|			Организация = &Организация
	|				И ВидНачисления = &НДСВидНачисления_НДСсАвансов) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	не (НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|			И НДСНачисленныйОстатки.НДСОстаток = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСсАвансов", Перечисления.НДСВидНачисления.НДСсАвансов);
	Запрос.УстановитьПараметр("Событие_НДСсАвансов", Перечисления.СобытияПоНДСПродажи.ПолученАванс);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "НачисленКУплате"
Процедура ЗаполнитьРазделНачисленКУплате() Экспорт
	
	ТаблицаРезультатов = НачисленКУплате.ВыгрузитьКолонки();
	
	Таблица_НДСНачисленКУплате = ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате();
	
	Если Таблица_НДСНачисленКУплате.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		НачисленКУплате.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_НДСНачисленКУплате,ТаблицаРезультатов);

	НачисленКУплате.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСНачисленномуКУплате()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления_НДСНачисленКУплате) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления_НДСНачисленКУплате", Перечисления.НДСВидНачисления.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "Восстановлен"
Процедура ЗаполнитьРазделВосстановлен() Экспорт
	
	ТаблицаРезультатов = Восстановлен.ВыгрузитьКолонки();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		Восстановлен.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен,ТаблицаРезультатов);

	Восстановлен.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНачисленКУплате.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленному()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	НДСНачисленныйОстатки.ИсправленныйСчетФактура,
	|	НДСНачисленныйОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК НДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления = &НДСВидНачисления) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НДСВидНачисления", 	 Перечисления.НДСВидНачисления.НДСВосстановлен);
	
	НДСкВосстановлению = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Если НДСкВосстановлению.Количество() = 0 Тогда
		Возврат НДСкВосстановлению;
	КонецЕсли; 
	
	Возврат НДСкВосстановлению;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "Восстановлен по авансам"
Процедура ЗаполнитьРазделВосстановленПоАвансам(ОтменитьПроведение = Ложь) Экспорт
	
	Если Проведен Тогда
		Если ОтменитьПроведение Тогда
			Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультатов = ВосстановленПоАвансам.ВыгрузитьКолонки();
	
	Таблица_Восстановлен = ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам();
	
	Если Таблица_Восстановлен.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть отражен в книге.
		ВосстановленПоАвансам.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Таблица_Восстановлен, ТаблицаРезультатов);

	ВосстановленПоАвансам.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделВосстановленПоАвансам.
// Заполняет ТЧ Реализация по данным регистра НДС начисленный (по НДС начисленному к уплате)
Функция ЗаполнитьНДСНачисленныйДаннымиПоНДСВосстановленномуПоАвансам()

	ТаблицаВосстановлен = ВосстановленПоАвансам .ВыгрузитьКолонки();
	
	// Восстановление НДС по авансам выданным
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСсАвансовОстатки.Организация,
	               |	НДСсАвансовОстатки.СчетФактура,
	               |	НДСсАвансовОстатки.Покупатель КАК Поставщик,
	               |	НДСсАвансовОстатки.ДоговорКонтрагента,
	               |	НДСсАвансовОстатки.СтавкаНДС,
	               |	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	               |	НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) КАК НДС,
	               |	НДСсАвансовОстатки.ВидЦенности,
				   |	НДСсАвансовОстатки.ИсправленныйСчетФактура
	               |ИЗ
	               |	РегистрНакопления.НДСсАвансов.Остатки(
	               |			&КонецПериодаГраница,
	               |			Организация = &Организация
	               |				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСсАвансовОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
	               |				&КонецПериодаГраница,
	               |				Организация = &Организация
	               |					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки
	               |		ПО НДСсАвансовОстатки.Организация = НДСПредъявленныйОстатки.Организация
	               |			И НДСсАвансовОстатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
	               |			И НДСсАвансовОстатки.Покупатель = НДСПредъявленныйОстатки.Поставщик
	               |			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСПредъявленныйОстатки.ДоговорКонтрагента
	               |			И НДСсАвансовОстатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
	               |			И НДСсАвансовОстатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
	               |ГДЕ
	               |	НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) > 0
	               |	И НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) > 0";
				   
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ТаблицаВосстановлен;
	КонецЕсли;

	ТаблицаНДССАвансов = Результат.Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНДССАвансов", ТаблицаНДССАвансов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаНДССАвансов.СчетФактура КАК СчетФактура
	               |ПОМЕСТИТЬ ТаблицаНДССАвансов
	               |ИЗ
	               |	&ТаблицаНДССАвансов КАК ТаблицаНДССАвансов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НДСРасчетыСПоставщикамиОстатки.Поставщик,
	               |	НДСРасчетыСПоставщикамиОстатки.ДоговорКонтрагента,
	               |	НДСРасчетыСПоставщикамиОстатки.Документ КАК СчетФактура,
	               |	-1 * НДСРасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.НДСРасчетыСПоставщиками.Остатки(
	               |			&КонецПериодаГраница,
	               |			Организация = &Организация
	               |				И Документ В
	               |					(ВЫБРАТЬ
	               |						ТаблицаНДССАвансов.СчетФактура
	               |					ИЗ
	               |						ТаблицаНДССАвансов КАК ТаблицаНДССАвансов)) КАК НДСРасчетыСПоставщикамиОстатки
	               |ГДЕ
	               |	-1 * НДСРасчетыСПоставщикамиОстатки.СуммаОстаток > 0";
				   
	ТаблицаНезачтенныхАвансов = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура");
	МассивРаспределения = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНезачтенныхАвансов Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		СтрокиОтбора = ТаблицаНДССАвансов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			Если (СтрокаОтбора.СуммаБезНДС = 0
				И СтрокаОтбора.НДС = 0) Или СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаРаспределения = Мин(СтрокаТаблицы.Сумма, СтрокаОтбора.СуммаБезНДС + СтрокаОтбора.НДС);
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - СуммаРаспределения;
			МассивРаспределения.Очистить();
			
			МассивРаспределения.Добавить(СтрокаОтбора.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаОтбора.НДС);
			
			ИтогРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаРаспределения, МассивРаспределения);
			
			СтрокаОтбора.СуммаБезНДС = СтрокаОтбора.СуммаБезНДС - ИтогРаспределения[0];
			СтрокаОтбора.НДС = СтрокаОтбора.НДС - ИтогРаспределения[1];
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для	Каждого СтрокаТаблицыНДССАвансов Из ТаблицаНДССАвансов Цикл
		Если СтрокаТаблицыНДССАвансов.СуммаБезНДС = 0
			И СтрокаТаблицыНДССАвансов.НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицыНДССАвансов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНДССАвансов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДССАвансов, ТаблицаВосстановлен);
	
	Возврат ТаблицаВосстановлен;
		
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Заполняет раздел "НеОтражаетсяВКниге"
Процедура ЗаполнитьРазделНеОтражаетсяВКниге(УчетнаяПолитикаНУ) Экспорт
	
	ТаблицаРезультатов = НеОтражаетсяВКниге.ВыгрузитьКолонки();
	ТаблицаРезультатов.Колонки.Добавить("ЗаписьДополнительногоЛиста",новый ОписаниеТипов("Булево"));
	ТаблицаРезультатов.Колонки.Добавить("КорректируемыйПериод");
	
	Дерево_НДСНачисленный = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые();
	
	Если Дерево_НДСНачисленный.Строки.Количество()=0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		НеОтражаетсяВКниге.Очистить();
		Возврат;
	КонецЕсли;

	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСНачисленный.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	//НаличиеОплатыНеТребуется = не (УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС  = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате) ;

	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур);
	
	// Заблокировать оплаты, зарегистрированные по счетам-фактурам,
	// которые могут быть использованы для погашения отражаемых в книге начислений.
	ДеревоНДС_ВычетЗаблокирован = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный(СписокСчетовФактур);
	ДеревоНДС_ВычетЗаблокирован0 = ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСРеализация0(Истина, СписокСчетовФактур);
	
	Если ДеревоНДС_ВычетЗаблокирован.Строки.Количество()>0 Тогда
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	Если ДеревоНДС_ВычетЗаблокирован0.Строки.Количество()>0 Тогда
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован0, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	// Отражаем только оплаченные записи вне азвисимости от учетной политики - необходимо погасить запись в регистре начисления и в регистре оплат.
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов,СписокСчетовФактур,РаспределенныеОплаты, Истина, Истина);

	НеОтражаетсяВКниге.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьОсновнойРаздел()

// Вызывается из процедуры ЗаполнитьРазделНеОтражаетсяВКниге.
// Заполняет ТЧ НеОтражаетсяВКниге по данным регистра НДС начисленный (по реализации ЕНВД)
Функция ЗаполнитьНДСНачисленныйПоДаннымРегистраНДСНачисленный_Неотражаемые()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСНачисленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОстатки.ВидЦенности,
	|	НДСНачисленныйОстатки.СтавкаНДС,
	|	НДСНачисленныйОстатки.Покупатель,
	|	ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= &Начало2006Года
	|			ТОГДА &МоментОпределения_ПоОтгрузке
	|		ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС, &МоментОпределения_ПоОтгрузке)
	|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСНачисленныйОстатки.НДСОстаток КАК СуммаНДС,
	|	НДСНачисленныйОстатки.СуммаБезНДСОстаток + НДСНачисленныйОстатки.НДСОстаток КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА НДСНачисленныйОстатки.СуммаБезНДСОстаток < 0
	|				ИЛИ НДСНачисленныйОстатки.НДСОстаток < 0
	|			ТОГДА &Событие_Скорректирован
	|		ИНАЧЕ &Событие_НДСНачисленКУплате
	|	КОНЕЦ КАК Событие,
	|	НДСНачисленныйОстатки.ВидНачисления
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|		    И ВидНачисления В (&НДСВидыНачисления_Неотражаемые)) КАК НДСНачисленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация
	|			И (УчетнаяПолитикаНалоговыйУчет.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|				ГДЕ
	|					ЕСТЬNULL(НДСНачисленныйОстатки.СчетФактура.Дата, &КонецПериода) >= УчетнаяПолитикаНалоговыйУчет.Период
	|					И
	|					УчетнаяПолитикаНалоговыйУчет.Организация = НДСНачисленныйОстатки.Организация))
	|ГДЕ
	|	(НЕ(НДСНачисленныйОстатки.СуммаБезНДСОстаток = 0
	|				И НДСНачисленныйОстатки.НДСОстаток = 0))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата,
	|	СчетФактура
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаСНДС)
	|ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Дата),ВидГраницы.Включая));

	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
	НДСВидыНачисления_Неотражаемые = новый массив();
	НДСВидыНачисления_Неотражаемые.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	Запрос.УстановитьПараметр("НДСВидыНачисления_Неотражаемые", 	 НДСВидыНачисления_Неотражаемые);
	Запрос.УстановитьПараметр("Событие_НДСНачисленКУплате", 		 Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("Событие_Скорректирован", 			 Перечисления.СобытияПоНДСПродажи.НДССкорректирован);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСНачисленный()

// Процедура вызывается из ЗаполнитьРазделРеализация.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.Организация,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.СчетФактура,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты,
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.РаспределеннаяСуммаОстаток КАК РаспределеннаяОплата,
	|	ВЫБОР
	|		КОГДА НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты = НЕОПРЕДЕЛЕНО
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокИспользования,
	|	ВЫБОР
	|		КОГДА НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты.ДатаОплаты ЕСТЬ NULL 
	|			ТОГДА НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты.Дата
	|		КОГДА НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты.ДатаОплаты = &ПустаяДата
	|			ТОГДА НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты.Дата
	|		ИНАЧЕ НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСУчетРаспределенныхОплатПокупателей.Остатки(
	|		&КонецПериодаГраница,
	|		Организация = &Организация
	|			И СчетФактура В (&СписокСчетовФактур)) КАК НДСУчетРаспределенныхОплатПокупателейОстатки
	|ГДЕ
	|	НДСУчетРаспределенныхОплатПокупателейОстатки.РаспределеннаяСуммаОстаток <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокИспользования,
	|	ДатаОплаты";
	
	Запрос.УстановитьПараметр("КонецПериодаГраница",Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПустаяДата",'00010101');
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	РаспределенныеОплаты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	РаспределенныеОплаты.Колонки.Добавить("QuieryId", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));

	Если РаспределенныеОплаты.Количество()>0 Тогда
		QuieryId = Новый Массив(РаспределенныеОплаты.Количество());
		Для Счетчик=0 По РаспределенныеОплаты.Количество()-1 Цикл
			QuieryId[Счетчик] = Счетчик;
		КонецЦикла; 
		РаспределенныеОплаты.ЗагрузитьКолонку(QuieryId,"QuieryId");
	КонецЕсли; 
	
	Возврат РаспределенныеОплаты;	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()
 
// Процедура вызывается из тела процедуры "ЗаполнитьРазделРеализация".
// В процессе работы процедуры общая сумма НДС, которая может быть признана
// в качестве вычета распределяется по конкретным событиям оплаты, для того
// чтобы сопоставить факт признания вычета по НДС и факт оплаты поставщику, связанный
// с этим признанием.
Процедура РаспределитьОплатыПоДеревуСФ(Дерево_НДСНачисленный, ТаблицаРезультатов, СписокСчетовФактур, РаспределенныеОплаты, ОтражатьВРеестре = Истина, ОтражатьВидНачисления = Ложь )
	
	НДСНалоговыйПериод = Неопределено;
	
	Построитель_РаспределенныеОплаты = Новый построительЗапроса();
	Построитель_РаспределенныеОплаты.ИсточникДанных = Новый ОписаниеИсточникаДанных(РаспределенныеОплаты);
	
	// Подготовка структуры отбора
	Отбор = Построитель_РаспределенныеОплаты.Отбор;
	Отбор.Добавить("СчетФактура");
	Отбор.СчетФактура.Использование = Истина;
	Отбор.Добавить("РаспределеннаяОплата");
	Отбор.РаспределеннаяОплата.ВидСравнения = ВидСравнения.Больше;
	Отбор.РаспределеннаяОплата.Значение = 0;
	Отбор.РаспределеннаяОплата.Использование = Истина;
	
	Построитель_РаспределенныеОплаты.Порядок.Добавить("ДатаОплаты");
	
	ТаблицаОплат = Новый ТаблицаЗначений();
	ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаОплат.Колонки.Добавить("ДатаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаОплат.Колонки.Добавить("СуммаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаИсточникаПостроителя = Построитель_РаспределенныеОплаты.ИсточникДанных.ИсточникДанных;
	МоментОпределения_ПоОтгрузке = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
	
	Для каждого СтрокаСФ Из Дерево_НДСНачисленный.Строки Цикл
		
		НаличиеОплатыНеТребуется = (СтрокаСФ.Строки[0].МоментОпределенияНалоговойБазыНДС = МоментОпределения_ПоОтгрузке) Или Дата >= '20080101';
		ТаблицаОплат.Очистить();
		Отбор = Построитель_РаспределенныеОплаты.Отбор;
		Отбор.СчетФактура.Значение = СтрокаСФ.СчетФактура;
		Отбор.РаспределеннаяОплата.ВидСравнения = ?(СтрокаСФ.СуммаСНДС>0,ВидСравнения.Больше,ВидСравнения.Меньше);
		
		Построитель_РаспределенныеОплаты.Выполнить();
		Если Построитель_РаспределенныеОплаты.Результат.Пустой() и не НаличиеОплатыНеТребуется и СтрокаСФ.СуммаСНДС	>= 0 Тогда
			// Оплата не обнаружена
			Продолжить;
		КонецЕсли; 
		
		ВыборкаОплат = Построитель_РаспределенныеОплаты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			
		СуммаКПогашению = СтрокаСФ.СуммаСНДС;

		Для каждого СтрокаРаспределеннойОплаты Из ВыборкаОплат Цикл
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.ДокументОплаты = СтрокаРаспределеннойОплаты.ДокументОплаты;
			СтрокаОплаты.ДатаОплаты = СтрокаРаспределеннойОплаты.ДатаОплаты;
			Если СтрокаСФ.СуммаСНДС>0 Тогда
				СтрокаОплаты.СуммаОплаты = Мин(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
			Иначе
				СтрокаОплаты.СуммаОплаты = Макс(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
			КонецЕсли; 
			
			СуммаКПогашению = СуммаКПогашению - СтрокаОплаты.СуммаОплаты;
			ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата = ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата - СтрокаОплаты.СуммаОплаты;
			
			Если СуммаКПогашению = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		Если ТаблицаОплат.Количество() = 0  Тогда
			Если НаличиеОплатыНеТребуется или СтрокаСФ.СуммаСНДС < 0 Тогда
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС;
			Иначе
				Продолжить;	
			КонецЕсли;
		ИначеЕсли ТаблицаОплат.Итог("СуммаОплаты")<> СтрокаСФ.СуммаСНДС и НаличиеОплатыНеТребуется тогда
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС - ТаблицаОплат.Итог("СуммаОплаты");
		ИначеЕсли СтрокаСФ.СуммаСНДС < 0 тогда
			СтрокаОплаты = ТаблицаОплат.Добавить();
			СтрокаОплаты.СуммаОплаты = СтрокаСФ.СуммаСНДС - ТаблицаОплат.Итог("СуммаОплаты");
		КонецЕсли; 
			
		Если не ОтражатьВРеестре тогда
			// Оплаты заблокированы, дальнейшая обработка не требуется
			Продолжить;
		КонецЕсли;
			
		Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
			
			Если СтрокаСФ.Строки.Итог("СуммаСНДС") = 0 Тогда
				Прервать;
			КонецЕсли;
			
			МассивБазиса =  СтрокаСФ.Строки.ВыгрузитьКолонку("СуммаСНДС");
			КРаспределениюНДС = 0;
			Массив_НДС =  СтрокаСФ.Строки.ВыгрузитьКолонку("СуммаНДС");
			Для НомерЭлемента = 0 по Массив_НДС.Количество()-1 Цикл
				КРаспределениюНДС = КРаспределениюНДС + Массив_НДС[НомерЭлемента];
			КонецЦикла; 
			КРаспределениюНДС = Окр(КРаспределениюНДС * СтрокаОплаты.СуммаОплаты /СтрокаСФ.Строки.Итог("СуммаСНДС"),2);
			
			МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(СтрокаОплаты.СуммаОплаты, МассивБазиса);
			
			Если КРаспределениюНДС<>0 Тогда
				МассивРезультата_НДС = ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюНДС,Массив_НДС);
			КонецЕсли; 
			
			НомерСтроки = 0;
			Для каждого СтрокаЗадолжености Из СтрокаСФ.Строки Цикл
				Если МассивРезультата[НомерСтроки] = 0 И ?(КРаспределениюНДС=0, Истина, МассивРезультата_НДС[НомерСтроки] = 0) Тогда
					НомерСтроки = НомерСтроки + 1;
					Продолжить;
				КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаЗадолжености);
				
				СтрокаРезультата.ДокументОплаты	= СтрокаОплаты.ДокументОплаты;
				СтрокаРезультата.ДатаОплаты		= СтрокаОплаты.ДатаОплаты;
				
				СтрокаРезультата.СуммаБезНДС	= МассивРезультата[НомерСтроки]- ?(КРаспределениюНДС=0,0,МассивРезультата_НДС[НомерСтроки]);
				СтрокаРезультата.НДС			= МассивРезультата[НомерСтроки]- СтрокаРезультата.СуммаБезНДС; //?(СтрокаСФ.ПорядокОплаты = 1,0,);
				
				СтрокаЗадолжености.СуммаБезНДС = СтрокаЗадолжености.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
				СтрокаЗадолжености.СуммаНДС = СтрокаЗадолжености.СуммаНДС - СтрокаРезультата.НДС;
				СтрокаЗадолжености.СуммаСНДС = СтрокаЗадолжености.СуммаСНДС - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
				Если Реализация0 Тогда
					Если СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
					ИначеЕсли СтрокаЗадолжености.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
					КонецЕсли; 
				Иначе
					Если СтрокаСФ.Строки[0].МоментОпределенияНалоговойБазыНДС = МоментОпределения_ПоОтгрузке Тогда
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
					Иначе
						СтрокаРезультата.Событие = Перечисления.СобытияПоНДСПродажи.Оплата;
					КонецЕсли;
				КонецЕсли;
				Если (Реализация0 И СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) Тогда
					Если Дата >= '20060530' Тогда
						Если НДСНалоговыйПериод = Неопределено Тогда
							УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Неопределено, Организация, "Нал");
							Если УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") Тогда
								Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
									НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
								Иначе
									НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
								КонецЕсли;
							Иначе
								НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
							КонецЕсли;
						КонецЕсли;
						СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
						Если Реализация0 Тогда
							СтрокаРезультата.КорректируемыйПериод = Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата);
						Иначе 
							СтрокаРезультата.КорректируемыйПериод = ?(НаличиеОплатыНеТребуется, СтрокаЗадолжености.СчетФактураДата, 
																	Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.СчетФактураДата));
						КонецЕсли;
						Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
								КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Дата),
								КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Дата)) Тогда
							СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
							СтрокаРезультата.КорректируемыйПериод = '00010101';
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки+1;
			КонецЦикла; 
			
		КонецЦикла; 
			
    КонецЦикла; 
	
	РаспределенныеОплаты = ТаблицаИсточникаПостроителя.Скопировать();
	
КонецПроцедуры // РаспределитьОплатыПоДеревуСФ()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ВидНачисления_Реализация0", Перечисления.НДСВидНачисления.Реализация0);
	
	// Виды ценностей расчеты по которым не отражаются в расчетах с покупателями
	ВидаЦенностиБезОплаты = Новый Массив();
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидаЦенностиБезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидаЦенностиБезОплаты", ВидаЦенностиБезОплаты);
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ КАК КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Реализация0 КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	ТаблицаЗаписей.Состояние,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""По реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
		|			ТОГДА УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.НДСНалоговыйПериод
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|	КОНЕЦ КАК НДСНалоговыйПериодДополнительногоЛиста
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
	иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата) КАК СчетФактураДата,
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ КАК КорректируемыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ КАК ДатаОплаты,
		|	ТаблицаЗаписей.Событие,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_БезНДС
		|			ТОГДА &ВидНачисления_РеализацияБезНДС
		|		КОГДА ТаблицаЗаписей.СтавкаНДС = &СтавкаНДС_0
		|			ТОГДА &ВидНачисления_Реализация0
		|		ИНАЧЕ &ВидНачисления_РеализацияСНДС
		|	КОНЕЦ КАК ВидНачисления,
		|	ИСТИНА КАК ОтражатьВКниге,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""По реализации"" КАК НазваниеТаблицы,
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВлияетНаРасчеты,
		|	НЕОПРЕДЕЛЕНО КАК ДоговорАванса,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.КорректируемыйПериод < ДАТАВРЕМЯ(2008, 1, 1)
		|			ТОГДА УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.НДСНалоговыйПериод
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|	КОНЕЦ КАК НДСНалоговыйПериодДополнительногоЛиста,
		|	NULL КАК ИсправленныйСчетФактура,
		|	"""" КАК КодВидаОперации
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Реализация КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода
		|		ПО (ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА)
		|			И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Организация
		|			И (УчетнаяПолитикаНалоговыйУчетКорректируемогоПериода.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.КорректируемыйПериод >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
		|			ТОГДА ТаблицаЗаписей.СчетФактура.ДокументОснование
		|		ИНАЧЕ ТаблицаЗаписей.СчетФактура
		|	КОНЕЦ,
		|	ТаблицаЗаписей.ЗаписьДополнительногоЛиста,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ЗаписьДополнительногоЛиста = ИСТИНА
		|			ТОГДА ТаблицаЗаписей.КорректируемыйПериод
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ,
		|	ТаблицаЗаписей.СчетФактура.Дата,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_Авансы,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""С авансов"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	ТаблицаЗаписей.ДоговорАванса,
		|	NULL,
		|	NULL,
		|	""""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Авансы КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	&ВидНачисления_НачисленКУплате,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""Начислен к уплате"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	NULL,
		|	NULL,
		|	""""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НачисленКУплате КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	ТаблицаЗаписей.ДокументОплаты,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ДатаОплаты = &ПустаяДата
		|			ТОГДА ТаблицаЗаписей.ДокументОплаты.Дата
		|		ИНАЧЕ ТаблицаЗаписей.ДатаОплаты
		|	КОНЕЦ,
		|	ТаблицаЗаписей.Событие,
		|	ТаблицаЗаписей.ВидНачисления,
		|	ЛОЖЬ,
		|	УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС,
		|	""Не отражается в книге"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаЗаписей.ВидЦенности В (&ВидаЦенностиБезОплаты)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	NULL,
		|	NULL,
		|	NULL,
		|	""""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.НеОтражаетсяВКниге КАК ТаблицаЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					ТаблицаЗаписей.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И ТаблицаЗаписей.Ссылка.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.Ссылка.Организация,
		|	ТаблицаЗаписей.ВидЦенности,
		|	ТаблицаЗаписей.Покупатель,
		|	ТаблицаЗаписей.СчетФактура,
		|	ЕСТЬNULL(ТаблицаЗаписей.СчетФактура.Дата, &ПустаяДата),
		|	ТаблицаЗаписей.СтавкаНДС,
		|	ТаблицаЗаписей.СуммаБезНДС,
		|	ТаблицаЗаписей.НДС,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	&ПустаяДата,
		|	&Событие_НДСВосстановлен,
		|	&ВидНачисления_Восстановлен,
		|	ИСТИНА,
		|	НЕОПРЕДЕЛЕНО,
		|	""Восстановление по другим операциям"",
		|	ТаблицаЗаписей.НомерСтроки,
		|	ЛОЖЬ,
		|	NULL,
		|	NULL,
		|	ТаблицаЗаписей.ИсправленныйСчетФактура,
		|	""21""
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж.Восстановлен КАК ТаблицаЗаписей
		|ГДЕ
		|	ТаблицаЗаписей.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("СтавкаНДС_БезНДС", Перечисления.СтавкиНДС.БезНДС);
		Запрос.УстановитьПараметр("СтавкаНДС_0", Перечисления.СтавкиНДС.НДС0);
		
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияБезНДС", Перечисления.НДСВидНачисления.РеализацияБезНДС);
		Запрос.УстановитьПараметр("ВидНачисления_РеализацияСНДС",	Перечисления.НДСВидНачисления.РеализацияСНДС);
		Запрос.УстановитьПараметр("ВидНачисления_Авансы", 			Перечисления.НДСВидНачисления.НДСсАвансов);
		Запрос.УстановитьПараметр("ВидНачисления_НачисленКУплате",	Перечисления.НДСВидНачисления.НДСНачисленКУплате);
		Запрос.УстановитьПараметр("ВидНачисления_Восстановлен",		Перечисления.НДСВидНачисления.НДСВосстановлен);
		Запрос.УстановитьПараметр("Событие_НДСВосстановлен",		Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	ТаблицаЗаписей = Результат.Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	
	Для каждого СтрокаТаблицы из ТаблицаЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = '00010101';
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		Иначе
			СтрокаТаблицы.ДатаСобытия = Макс(СтрокаТаблицы.ДатаОплаты,СтрокаТаблицы.СчетФактураДата);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаЗаписей;

КонецФункции // ПодготовитьТаблицуПоОплатам()

Функция ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШапкиДокумента)
	
	ТаблицаПоВосстановлениюПоАвансам = РезультатЗапросаПоВосстановлениюПоАвансам.Выгрузить();
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные, "ВидЦенности");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.НДСВидНачисления"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСВосстановлен, "ВидНачисления");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(Перечисления.Периодичность.Квартал, "НДСНалоговыйПериодДополнительногоЛиста");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДатаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаОплаты");
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("ДокументОплаты", Новый ОписаниеТипов(ТаблицаПоВосстановлениюПоАвансам.Колонки.СчетФактура.ТипЗначения));
	
	ТаблицаПоВосстановлениюПоАвансам.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	
	Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
		ТаблицаПоВосстановлениюПоАвансам.ЗаполнитьЗначения("21", "КодВидаОперации");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаСчетаФактуры;
		СтрокаТаблицы.ДокументОплаты = СтрокаТаблицы.СчетФактура;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоВосстановлениюПоАвансам;
	
КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС"); 
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Реализация", СтруктураОбязательныхПолей, Отказ, Заголовок);
	

	Если НЕ СтруктураШапкиДокумента.Реализация0 Тогда
		
		// Для НДС начисленного к уплате может быть не щаполнен покупатель по СМР пдрядным и внутреннему потреблению
		
		// Вызовем общую процедуру для проверки проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НачисленКУплате", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		//СтруктураОбязательныхПолей.Вставить("ДокументОплаты");
		// Вызовем общую процедуру для проверки проверки.
		// Для НДС начисленного к уплате может быть не щаполнен покупатель по СМР пдрядным и внутреннему потреблению
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НеОтражаетсяВКниге", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Восстановлен", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		СтруктураОбязательныхПолей.Удалить("ВидЦенности");
		СтруктураОбязательныхПолей.Вставить("Поставщик");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		// Для НДС восстановленного должен быть заполнен счет учета НДС для формирования проводки
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВосстановленПоАвансам", СтруктураОбязательныхПолей, Отказ, Заголовок);
	КонецЕсли;                                          
	
	// Проверка полей на логическое соответствие
	//СтрокаСообщенияДатаОплаты = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияПокупатель = "Не заполнено значение реквизита ""Покупатель""!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";
	СтрокаСообщенияДоговор = "Не заполнено значение реквизита ""Договор контрагента""!";
	Для каждого СтрокаТаблицы из ТаблицаПоНачислению Цикл
		Если ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
			ИЛИ (ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И НЕ СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные) тогда
			// По рознице покупатель не указывается
			СтрокаТаблицы.Покупатель = Неопределено;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Покупатель) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			Если СтрокаТаблицы.НазваниеТаблицы = "Восстановление по другим операциям" Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПоставщик,Отказ,Заголовок);
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияПокупатель,Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли; 
		
		Если (СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			И ТипЗнч(СтрокаТаблицы.СчетФактура) <> Тип("ДокументСсылка.СчетФактураВыданный")) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорАванса) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияДоговор, Отказ, Заголовок);
		КонецЕсли;	
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части """ + СтрокаТаблицы.НазваниеТаблицы + """:";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод,Отказ,Заголовок);		
		КонецЕсли;
		
	КонецЦикла; 

	Для Каждого СтрокаТаблицы Из ТаблицаПоВосстановлениюПоАвансам Цикл
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Восстановление по авансам"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, Отказ ,Заголовок);		
		КонецЕсли;
	КонецЦикла; 
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	
	ДвиженияПоРегистрамНачисления(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок);
	ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШапкиДокумента, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамНачисления(СтруктураШапкиДокумента, ТаблицаПоНачислению, Отказ, Заголовок)
	
	Если ТаблицаПоНачислению.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру "НДС начисленный"
	ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСНачисленный);
	ТаблицаДвижений_НДСНачисленный.Свернуть("Период,Активность,Организация,СчетФактура,ИсправленныйСчетФактура,ВидЦенности,СтавкаНДС,Покупатель,ДоговорАванса,ДатаСобытия,Событие,ВидНачисления","СуммаБезНДС,НДС");
		
	Движения.НДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
	Движения.НДСНачисленный.ВыполнитьРасход();
		
	// Отражение по регистру взаиморасчетов
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
	
	Для каждого СтрокаВычета Из ТаблицаПоНачислению Цикл
		Если не СтрокаВычета.ВлияетНаРасчеты Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРасчетов = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
		СтрокаРасчетов.Организация = СтрокаВычета.Организация;
		СтрокаРасчетов.СчетФактура = СтрокаВычета.СчетФактура;
		СтрокаРасчетов.ДокументОплаты = СтрокаВычета.ДокументОплаты;
		//СтрокаРасчетов.РасчетыСБюджетом = Ложь;
		СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.СуммаБезНДС+СтрокаВычета.НДС;

	КонецЦикла;

	ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты,ДатаСобытия","РаспределеннаяСумма");
	
	Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
	Движения.НДСУчетРаспределенныхОплатПокупателей.ВыполнитьРасход();

	// Отражение по регистру НДСЗаписиКнигиПродаж
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("ОтражатьВКниге",Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("СчетФактураДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПродаж Цикл
		Если не СтрокаЗаписи.ОтражатьВКниге Тогда
			СтрокиКУдалению.Добавить(СтрокаЗаписи);
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.Реализация0 и СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
			Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
				СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.СчетФактураДата);
			Иначе				
				СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
			КонецЕсли; 
			СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
		КонецЕсли;
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	    ТаблицаДвижений_НДСЗаписиКнигиПродаж.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.ОтражатьВКниге);
	
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Состояние);
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СчетФактураДата);
	КонецЕсли;
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период, Активность, Организация, СчетФактура, ИсправленныйСчетФактура, ДокументОплаты, 
		|ДатаОплаты, СтавкаНДС, Покупатель, ДоговорАванса, ДатаСобытия, Событие, ВидЦенности, ЗаписьДополнительногоЛиста, 
		|КорректируемыйПериод, СторнирующаяЗаписьДопЛиста, КодВидаОперации","СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
	Если СтруктураШапкиДокумента.Реализация0 Тогда
		// Отражение по регистру НДСРеализация0
		ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНачислению,ТаблицаДвижений_НДСРеализация0);
		ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");

		Движения.НДСРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
		Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
		Движения.НДСРеализация0.ДобавитьДвижение(Ложь);

	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамВосстановлениеПоАвансам(СтруктураШапкиДокумента, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок)
	
	Если ТаблицаПоВосстановлениюПоАвансам.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру НДСПредъявленный
	ТаблицаДвижений_НДСсАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСсАвансов);
	ТаблицаДвижений_НДСсАвансов.Свернуть("Период, Активность, Организация, СчетФактура, ИсправленныйСчетФактура, 
		|ВидЦенности, СтавкаНДС, Покупатель, ДоговорКонтрагента, ДатаСобытия", "СуммаБезНДС, НДС");
		
	Движения.НДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДСсАвансов;
	Движения.НДСсАвансов.ВыполнитьРасход();
		
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.ВыгрузитьКолонки();
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Добавить("НДСНалоговыйПериодДополнительногоЛиста");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВосстановлениюПоАвансам, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	                                                                                                                                                                                                                                           
	ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДСНалоговыйПериодДополнительногоЛиста);
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Свернуть("Период, Активность, Организация, СчетФактура, ИсправленныйСчетФактура, 
		|ДокументОплаты, ДатаОплаты, СтавкаНДС, Покупатель, ДатаСобытия, Событие, ВидЦенности, ЗаписьДополнительногоЛиста, 
		|КорректируемыйПериод, СторнирующаяЗаписьДопЛиста, ДоговорАванса, КодВидаОперации", "СуммаБезНДС, НДС");
		
	Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПродаж;
	Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
	
КонецПроцедуры

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(СтруктураШапкиДокумента, ТаблицаДвижений_НДСЗаписиКнигиПродаж)
	
	ТаблицаДвижений_НДСЗаписиКнигиПродаж.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	
	Если ТаблицаДвижений_НДСЗаписиКнигиПродаж.Найти( Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений_НДСЗаписиКнигиПродаж.Скопировать();
	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фаткура)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0)
			Тогда
			ТекущаяСтрока.СтавкаНДС = Неопределено;
		КонецЕсли; 
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждуй
		// договор отдельный счет-фаткура или отдельное лист декларации)
		Если Не (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			или ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент)
			Тогда
			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фаткура)
			ТекущаяСтрока.ДоговорАванса = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("СчетФактура,СтавкаНДС,ДоговорАванса, ЗаписьДополнительногоЛиста,КорректируемыйПериод,НДСНалоговыйПериодДополнительногоЛиста","СуммаБезНДС,НДС");
	СвернутаяТаблицаЗаписейДопЛиста.Индексы.Добавить("ЗаписьДополнительногоЛиста");
	
	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));
	
	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорАванса");
	ОтработанныеСФпоПериодам.Индексы.Добавить("СчетФактура,НалоговыйПериод");
	
	Для Каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл
		НачалоНалоговогоПериодаКорректировки = ?(СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал, НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод),НачалоМесяца(СтрокаДопЛиста.КорректируемыйПериод));
		ОтборОтработанныхЗаписей = новый Структура("СчетФактура,НалоговыйПериод",СтрокаДопЛиста.СчетФактура,НачалоНалоговогоПериодаКорректировки);
		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорАванса) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорАванса", СтрокаДопЛиста.ДоговорАванса);
		КонецЕсли; 
		
		Если не (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорАванса
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(&НачалоПериода, &КонецПериодаГраница, Месяц, СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорАванса = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорАванса = &ДоговорАванса
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("СтавкаНДС", ?(ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорАванса", ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорАванса), СтрокаДопЛиста.ДоговорАванса, Неопределено));
		
		Если СтрокаДопЛиста.НДСНалоговыйПериодДополнительногоЛиста = Перечисления.Периодичность.Квартал Тогда
			Запрос.Текст = СтрЗаменить(Нрег(Запрос.Текст),"месяц","квартал");
		КонецЕсли; 
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			ТаблицаЗаписей = Результат.Выгрузить();
			
			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
			
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДС.Имя = "НДССторно";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений_НДСЗаписиКнигиПродаж.Колонки.НДССторно.Имя = "НДС";
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ТаблицаПоНачислению = 			ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по восстановлению по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Покупатель",		 "Поставщик");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорАванса","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	СтруктураПолей.Вставить("ИсправленныйСчетФактура",		"ИсправленныйСчетФактура");
	
	РезультатЗапросаПоВосстановлениюПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВосстановленПоАвансам", СтруктураПолей);
	ТаблицаПоВосстановлениюПоАвансам = ПодготовитьТаблицуПоВосстановлениюПоАвансам(РезультатЗапросаПоВосстановлениюПоАвансам, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНачислению, ТаблицаПоВосстановлениюПоАвансам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

