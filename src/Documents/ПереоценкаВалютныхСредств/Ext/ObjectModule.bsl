Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	
	Если СтруктураШапкиДокумента.ПоВсемОрганизациям Тогда
		Возврат;
	КонецЕсли;

	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура РассчитатьРазницуДляСуммыУпр(ТаблицаОстатков, СтруктураШапкиДокумента)

	СтрокиДляУдаления = Новый Массив;

	Для каждого СтрокаТаблицы из ТаблицаОстатков Цикл

		СтрокаТаблицы.СуммаУпр = 
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетовОстаток, 
				СтрокаТаблицы.Валюта, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				СтрокаТаблицы.КурсВалютыДенежныхСредств, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтрокаТаблицы.КратностьВалютыДенежныхСредств, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) 
			- СтрокаТаблицы.СуммаУпрОстаток;
												
		Если СтрокаТаблицы.СуммаУпр = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Элемент Из СтрокиДляУдаления Цикл
		ТаблицаОстатков.Удалить(Элемент);
	КонецЦикла;

КонецПроцедуры // РассчитатьРазницуДляСуммыУпр(ТаблицаОстатков)

// Формирует таблицу данных с итогами по подотчетникам
//
Функция ПодготовитьТаблицуПоПодотчетникам(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|			ИЛИ &ПоВсемОрганизациям) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО КурсыВалютСрезПоследних.Валюта = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта
	|ГДЕ
	|	КурсыВалютСрезПоследних.Курс ЕСТЬ НЕ NULL 
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

	ТаблицаРезультата.Колонки.Добавить("СуммаУпр");

	РассчитатьРазницуДляСуммыУпр(ТаблицаРезультата, СтруктураШапкиДокумента);

	Возврат ТаблицаРезультата;

КонецФункции

// Формирует таблицу данных с итогами по взаиморасчетам
//
Функция ПодготовитьТаблицуПоВзаиморасчетам(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетысКонтрагентамиОстатки.Организация,
	|	ВзаиморасчетысКонтрагентамиОстатки.Контрагент,
	|	ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетысКонтрагентамиОстатки.Сделка,
	|	ВзаиморасчетысКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ВзаиморасчетысКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|		&ДатаДокумента,
	|		Организация = &Организация
	|			ИЛИ &ПоВсемОрганизациям) КАК ВзаиморасчетысКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО КурсыВалютСрезПоследних.Валюта = ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ГДЕ
	|	КурсыВалютСрезПоследних.Курс ЕСТЬ НЕ NULL 
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки";

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

	ТаблицаРезультата.Колонки.Добавить("СуммаУпр");

	РассчитатьРазницуДляСуммыУпр(ТаблицаРезультата, СтруктураШапкиДокумента);

	Возврат ТаблицаРезультата;

КонецФункции

// Формирует таблицу данных с итогами по расчетам
//
Функция ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетысКонтрагентамиОстатки.Организация,
	|	РасчетысКонтрагентамиОстатки.Контрагент,
	|	РасчетысКонтрагентамиОстатки.ДоговорКонтрагента,
	|	РасчетысКонтрагентамиОстатки.Сделка,
	|	РасчетысКонтрагентамиОстатки.РасчетыВозврат,
	|	РасчетысКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	РасчетысКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	РасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(&ДатаДокумента, Организация = &Организация ИЛИ &ПоВсемОрганизациям) КАК РасчетысКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО КурсыВалютСрезПоследних.Валюта = РасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ГДЕ
	|	КурсыВалютСрезПоследних.Курс ЕСТЬ НЕ NULL 
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

	ТаблицаРезультата.Колонки.Добавить("СуммаУпр");

	РассчитатьРазницуДляСуммыУпр(ТаблицаРезультата, СтруктураШапкиДокумента);

	Возврат ТаблицаРезультата;

КонецФункции

// Формирует таблицу данных с итогами по денежным средствам
//
Функция ПодготовитьТаблицуПоДенежнымСредствам(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
	Запрос.УстановитьПараметр("ДенежныеСредстваВКассах", ДенежныеСредстваВКассах);
	Запрос.УстановитьПараметр("ДенежныеСредстваНаБанковскихСчетах", ДенежныеСредстваНаБанковскихСчетах);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстатки.Организация,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса,
	|	ДенежныеСредстваОстатки.ВидДенежныхСредств,
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ДенежныеСредстваОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|		&ДатаДокумента,
	|		(Организация = &Организация
	|			ИЛИ &ПоВсемОрганизациям)
	|			И (&ДенежныеСредстваВКассах
	|					И БанковскийСчетКасса ССЫЛКА Справочник.Кассы
	|				ИЛИ &ДенежныеСредстваНаБанковскихСчетах
	|					И БанковскийСчетКасса ССЫЛКА Справочник.БанковскиеСчета)) КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО КурсыВалютСрезПоследних.Валюта = ДенежныеСредстваОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств
	|ГДЕ
	|	КурсыВалютСрезПоследних.Курс ЕСТЬ НЕ NULL 
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ДенежныеСредства.Остатки";

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

	ТаблицаРезультата.Колонки.Добавить("СуммаУпр");

	СтрокиДляУдаления = Новый Массив;

	Для каждого СтрокаТаблицы из ТаблицаРезультата Цикл

		СтрокаТаблицы.СуммаУпр = 
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаОстаток, 
				СтрокаТаблицы.ВалютаДенежныхСредств, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				СтрокаТаблицы.КурсВалютыДенежныхСредств, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтрокаТаблицы.КратностьВалютыДенежныхСредств, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) 
			- СтрокаТаблицы.СуммаУпрОстаток;
	
		Если СтрокаТаблицы.СуммаУпр = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Элемент Из СтрокиДляУдаления Цикл
		ТаблицаРезультата.Удалить(Элемент);
	КонецЦикла;

	Возврат ТаблицаРезультата;

КонецФункции

// Формирует таблицу данных с итогами по денежным средствам
//
Функция ПодготовитьТаблицуПоДенежнымСредствамКПолучению(СтруктураШапкиДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
	Запрос.УстановитьПараметр("ДенежныеСредстваВКассах", ДенежныеСредстваВКассах);
	Запрос.УстановитьПараметр("ДенежныеСредстваНаБанковскихСчетах", ДенежныеСредстваНаБанковскихСчетах);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПолучениюОстатки.Организация,
	|	ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса,
	|	ДенежныеСредстваКПолучениюОстатки.ВидДенежныхСредств,
	|	ДенежныеСредстваКПолучениюОстатки.ДокументПолучения,
	|	ДенежныеСредстваКПолучениюОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ДенежныеСредстваКПолучениюОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(
	|		&ДатаДокумента,
	|		(Организация = &Организация
	|			ИЛИ &ПоВсемОрганизациям)
	|			И (&ДенежныеСредстваВКассах
	|					И БанковскийСчетКасса ССЫЛКА Справочник.Кассы
	|				ИЛИ &ДенежныеСредстваНаБанковскихСчетах
	|					И БанковскийСчетКасса ССЫЛКА Справочник.БанковскиеСчета)) КАК ДенежныеСредстваКПолучениюОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО КурсыВалютСрезПоследних.Валюта = ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств
	|ГДЕ
	|	КурсыВалютСрезПоследних.Курс ЕСТЬ НЕ NULL 
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ДенежныеСредстваКПолучению.Остатки";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

	ТаблицаРезультата.Колонки.Добавить("СуммаУпр");

	СтрокиДляУдаления = Новый Массив;

	Для каждого СтрокаТаблицы из ТаблицаРезультата Цикл

		СтрокаТаблицы.СуммаУпр = 
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаОстаток, 
				СтрокаТаблицы.ВалютаДенежныхСредств, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				СтрокаТаблицы.КурсВалютыДенежныхСредств, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтрокаТаблицы.КратностьВалютыДенежныхСредств, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) 
			- СтрокаТаблицы.СуммаУпрОстаток;
													
		Если СтрокаТаблицы.СуммаУпр = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Элемент Из СтрокиДляУдаления Цикл
		ТаблицаРезультата.Удалить(Элемент);
	КонецЦикла;

	Возврат ТаблицаРезультата;

КонецФункции

Процедура ДвиженияПорегистрамВзаиморасчетыСПодотчетнымиЛицамиУпр(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоПодотчетникам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ВзаиморасчетыСПодотчетнымиЛицами Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПодотчетникам, ТаблицаДвижений);

	НаборДвижений.мПериод = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПорегистрамВзаиморасчетыСПодотчетнымиЛицамиУпр()

Процедура ДвиженияПорегистрамВзаиморасчетыСКонтрагентамиУпр(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоВзаиморасчетам,ТаблицаПоРасчетам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ВзаиморасчетыСКонтрагентами Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВзаиморасчетам, ТаблицаДвижений);

	НаборДвижений.мПериод = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;

	НаборДвижений = Движения.РасчетыСКонтрагентами;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);

	НаборДвижений.мПериод = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПорегистрамВзаиморасчетыСКонтрагентамиУпр()

// Формирует движения по денежным средствам
//
Процедура ДвиженияПорегистрамДенежныеСредстваУпр(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоДенежнымСредствам,ТаблицаПоДенежнымСредствамКПолучению, Отказ, Заголовок)

	Если НЕ (СтруктураШапкиДокумента.ДенежныеСредстваВКассах ИЛИ СтруктураШапкиДокумента.ДенежныеСредстваНаБанковскихСчетах) Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.ДенежныеСредства;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДенежнымСредствам, ТаблицаДвижений);

	НаборДвижений.мПериод = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ДенежныеСредства.ВыполнитьПриход();
	КонецЕсли;

	НаборДвижений = Движения.ДенежныеСредстваКПолучению;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДенежнымСредствамКПолучению, ТаблицаДвижений);

	НаборДвижений.мПериод = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ДенежныеСредстваКПолучению.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПорегистрамДенежныеСредстваУпр()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоПодотчетникам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
							ТаблицаПоДенежнымСредствам, ТаблицаПоДенежнымСредствамКПолучению, Отказ, Заголовок)

	ДвиженияПорегистрамВзаиморасчетыСПодотчетнымиЛицамиУпр(
		РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПодотчетникам, 
		Отказ, Заголовок);

	ДвиженияПорегистрамВзаиморасчетыСКонтрагентамиУпр(
		РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам,ТаблицаПоРасчетам, 
		Отказ, Заголовок);

	ДвиженияПорегистрамДенежныеСредстваУпр(
		РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоДенежнымСредствам, ТаблицаПоДенежнымСредствамКПолучению, 
		Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимЗаписи, РежимПроведения) 

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(
		ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ВзаиморасчетыСПодотчетнымиЛицами Тогда
		ТаблицаПоПодотчетникам = ПодготовитьТаблицуПоПодотчетникам(СтруктураШапкиДокумента);
	КонецЕсли;

	Если ВзаиморасчетыСКонтрагентами Тогда
		ТаблицаПоВзаиморасчетам = ПодготовитьТаблицуПоВзаиморасчетам(СтруктураШапкиДокумента);
		ТаблицаПоРасчетам       = ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента);
	КонецЕсли;

	Если ДенежныеСредстваВКассах ИЛИ ДенежныеСредстваНаБанковскихСчетах Тогда
		ТаблицаПоДенежнымСредствам           = ПодготовитьТаблицуПоДенежнымСредствам(СтруктураШапкиДокумента);
		ТаблицаПоДенежнымСредствамКПолучению = ПодготовитьТаблицуПоДенежнымСредствамКПолучению(СтруктураШапкиДокумента);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоПодотчетникам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
			ТаблицаПоДенежнымСредствам, ТаблицаПоДенежнымСредствамКПолучению, 
			Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
