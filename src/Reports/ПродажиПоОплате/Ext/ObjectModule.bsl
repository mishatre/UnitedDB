#Если Клиент Тогда

Перем мВалютаУправленческогоУчета;
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ // РАЗРЕШЕННЫЕ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//УПОРЯДОЧИТЬ_СВОЙСТВА
	//	//УПОРЯДОЧИТЬ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	
	ТекстВрмТбл = "	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Период,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	|	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход
	|ПОМЕСТИТЬ
	|	ВзаиморасчетыСКонтрагентамиОборотыНаДатуКон
	|ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, &ДатаКон, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, Контрагент.* КАК Покупатель}) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ НЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ  
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Период,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	|	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход
	|ПОМЕСТИТЬ
	|	ВзаиморасчетыСКонтрагентамиОборотыНаДатуНач
	|ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, &ДатаНач, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, Контрагент.* КАК Покупатель}) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ НЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|;			
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыПоДок.Регистратор,
	|	ВзаиморасчетыПоДок.Период,
	|	ВзаиморасчетыПоДок.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДок.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДок.СуммаВзаиморасчетовПриход
	|ПОМЕСТИТЬ
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуКон
	|ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Обороты(, &ДатаКон, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, Контрагент.* КАК Покупатель}) КАК ВзаиморасчетыПоДок
	|ГДЕ ВзаиморасчетыПоДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВзаиморасчетыПоДок.Регистратор,
	|	ВзаиморасчетыПоДок.Период,
	|	ВзаиморасчетыПоДок.ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыПоДок.ДоговорКонтрагента,
	|	ВзаиморасчетыПоДок.СуммаВзаиморасчетовПриход
	|ПОМЕСТИТЬ
	|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуНач
	|ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Обороты(, &ДатаНач, Регистратор, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, Контрагент.* КАК Покупатель}) КАК ВзаиморасчетыПоДок
	|ГДЕ ВзаиморасчетыПоДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|;";		

	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуКон = "
	|ВЫБРАТЬ
		// собственно, этот запрос и отвечает за то, чтобы для всех договоров,
		// по которым есть начальное или конечное сальдо,
		// извлечь "крайнего" регистратора.
	|	ВзаиморасчетыОиО.ДоговорКонтрагента,
	|	ВзаиморасчетыОиО.Сделка,
	|	ВзаиморасчетыОиО.Период,
	|	МИНИМУМ(ВзаиморасчетыОиО.Регистратор) КАК ПервыйРегистратор
	|ПОМЕСТИТЬ НеоплаченныеНаДатуКон
	|ИЗ
	|	(	ВЫБРАТЬ   ВзаиморасчетыОиО.Регистратор
	|				, ВзаиморасчетыОиО.ДоговорКонтрагента
	|				, ВзаиморасчетыОиО.Сделка
	|				, ВзаиморасчетыОиО.Период
	|		ИЗ ВзаиморасчетыСКонтрагентамиОборотыНаДатуКон КАК ВзаиморасчетыОиО
	|		ОБЪЕДИНИТЬ
	|		ВЫБРАТЬ   ВзаиморасчетыПоДок.Регистратор
	|				, ВзаиморасчетыПоДок.ДоговорКонтрагента
	|				, ВзаиморасчетыПоДок.ДокументРасчетовСКонтрагентом
	|				, ВзаиморасчетыПоДок.Период
	|		ИЗ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуКон КАК ВзаиморасчетыПоДок
	|	) КАК ВзаиморасчетыОиО
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		(
	|		ВЫБРАТЬ
	|			ДоговорКонтрагента, 
	|			Сделка, 
	|			МИНИМУМ(ПериодКон) КАК Период, 
	|			СуммаВалОстаток
	|		ИЗ
	|		(ВЫБРАТЬ
				// этот запрос выбирает Договоры-сделки, Регистраторы и их периоды,
				// которые являются оплаченными на ДатаНач или на ДатаКон
				// Критерий того, что регистратор является оплаченным:
				// Сумма движений регистра "приход" после него больше,
				// чем конечное сальдо по тому же набору измерений,
				// или равно ему.
				// Вышележащий запрос обеспечивает извлечение первого такого регистратора
				// и его период
	|			ВзаиморасчетыОиО.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ВзаиморасчетыОиО.Сделка КАК Сделка,
	|			МИНИМУМ(ВзаиморасчетыОиО.Период) КАК ПериодКон,
	|			ВзаиморасчетыО.СуммаВалОстаток
	|		ИЗ
	|			(	ВЫБРАТЬ   ВзаиморасчетыОиО.Регистратор
	|						, ВзаиморасчетыОиО.ДоговорКонтрагента
	|						, ВзаиморасчетыОиО.Сделка
	|						, ВзаиморасчетыОиО.Период
	|				ИЗ ВзаиморасчетыСКонтрагентамиОборотыНаДатуКон КАК ВзаиморасчетыОиО
	|				ОБЪЕДИНИТЬ
	|				ВЫБРАТЬ   ВзаиморасчетыПоДок.Регистратор
	|						, ВзаиморасчетыПоДок.ДоговорКонтрагента
	|						, ВзаиморасчетыПоДок.ДокументРасчетовСКонтрагентом
	|						, ВзаиморасчетыПоДок.Период
	|				ИЗ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуКон КАК ВзаиморасчетыПоДок
	|			) КАК ВзаиморасчетыОиО
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ
					//этот подзапрос извлекает все договоры-сделки, по которым есть задолжнность
					//контрагента на ДатаНач или ДатаКон
					//Здесь работает во внутреннем соединении как фильтр, заодно извлекает конечное сальдо
					//Его псевдоним - ВзаиморасчетыО
	|					ВзаиморасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|					ВзаиморасчетыОстатки.Сделка КАК Сделка,
	|					ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВалОстаток
	|				ИЗ
	|					(	ВЫБРАТЬ   ВзаиморасчетыОстатки.ДоговорКонтрагента
	|								, ВзаиморасчетыОстатки.Сделка
	|								, ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток
	|						ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКонОст, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, Контрагент.* КАК Покупатель}) КАК ВзаиморасчетыОстатки
	|						ГДЕ НЕ ВзаиморасчетыОстатки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|						ОБЪЕДИНИТЬ 
	|						ВЫБРАТЬ   ВзаиморасчетыОстаткиПоДок.ДоговорКонтрагента
	|								, ВзаиморасчетыОстаткиПоДок.ДокументРасчетовСКонтрагентом
	|								, ВзаиморасчетыОстаткиПоДок.СуммаВзаиморасчетовОстаток
	|						ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаКонОст, {ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, Контрагент.* КАК Покупатель}) КАК ВзаиморасчетыОстаткиПоДок
	|						ГДЕ ВзаиморасчетыОстаткиПоДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					) КАК ВзаиморасчетыОстатки
	|				ГДЕ
	|				(ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток > 0)) КАК ВзаиморасчетыО
	|			ПО ВзаиморасчетыО.ДоговорКонтрагента = ВзаиморасчетыОиО.ДоговорКонтрагента
	|				И ВзаиморасчетыО.Сделка = ВзаиморасчетыОиО.Сделка
	|			// теперь остались только те договоры-сделки, по которым сальдо на
	|			// конец периода положительно
	|			ЛЕВОЕ СОЕДИНЕНИЕ
				//Это левое соединение "подтягивает" к периодам из вышележащего запроса
				//регистраторов, которые на оси времени лежат позже,
				//а заодно достает их движения "приход".
				//Движения "приход" в дальнейшем пригодятся для того, чтобы
				//отобрать только те периоды вышележащего запроса, приход после которых
				//больше, чем конечное сальдо по регистратору-сделке из ВзаиморасчетыО
				//все делается именно так из-за того, что возможно существование регистраторов
				//с одинаковым Периодом.
	|			(	ВЫБРАТЬ   ВзаиморасчетыОиО2.Регистратор
	|						, ВзаиморасчетыОиО2.Период
	|						, ВзаиморасчетыОиО2.Сделка
	|						, ВзаиморасчетыОиО2.ДоговорКонтрагента
	|						, ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход
	|				ИЗ ВзаиморасчетыСКонтрагентамиОборотыНаДатуКон КАК ВзаиморасчетыОиО2
	|				ОБЪЕДИНИТЬ
	|				ВЫБРАТЬ   ВзаиморасчетыПоДок.Регистратор
	|						, ВзаиморасчетыПоДок.Период
	|						, ВзаиморасчетыПоДок.ДокументРасчетовСКонтрагентом
	|						, ВзаиморасчетыПоДок.ДоговорКонтрагента
	|						, ВзаиморасчетыПоДок.СуммаВзаиморасчетовПриход
	|				ИЗ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуКон КАК ВзаиморасчетыПоДок
	|			) КАК ВзаиморасчетыОиО2
	|			ПО ВзаиморасчетыОиО.ДоговорКонтрагента = ВзаиморасчетыОиО2.ДоговорКонтрагента
	|				И ВзаиморасчетыОиО.Сделка = ВзаиморасчетыОиО2.Сделка
	|				И (ВзаиморасчетыОиО.Период < ВзаиморасчетыОиО2.Период 
	|					ИЛИ ВзаиморасчетыОиО.Период = ВзаиморасчетыОиО2.Период И ВзаиморасчетыОиО.Регистратор < ВзаиморасчетыОиО2.Регистратор)
	|					И ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход > 0
	|		СГРУППИРОВАТЬ ПО
	|			ВзаиморасчетыОиО.ДоговорКонтрагента,
	|			ВзаиморасчетыОиО.Сделка,
	|			ВзаиморасчетыОиО.Регистратор,
	|			ВзаиморасчетыО.СуммаВалОстаток
	|		ИМЕЮЩИЕ
	|			СУММА(ВЫБОР
	|				КОГДА (ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход) ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход
	|			КОНЕЦ) < ВзаиморасчетыО.СуммаВалОстаток
	|		) КАК ПервыеПериодыПромежуточный
	|		СГРУППИРОВАТЬ ПО
	|			ДоговорКонтрагента, 
	|			Сделка, 
	|			СуммаВалОстаток
	|		) КАК ПервыеПериоды
	|	ПО ПервыеПериоды.Период = ВзаиморасчетыОиО.Период
	|	И ПервыеПериоды.Сделка = ВзаиморасчетыОиО.Сделка
	|	И ПервыеПериоды.ДоговорКонтрагента = ВзаиморасчетыОиО.ДоговорКонтрагента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		(	ВЫБРАТЬ   ВзаиморасчетыОиО2.Регистратор
	|					, ВзаиморасчетыОиО2.ДоговорКонтрагента
	|					, ВзаиморасчетыОиО2.Сделка
	|					, ВзаиморасчетыОиО2.Период
	|					, ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход
	|			ИЗ ВзаиморасчетыСКонтрагентамиОборотыНаДатуКон КАК ВзаиморасчетыОиО2
	|			ОБЪЕДИНИТЬ
	|			ВЫБРАТЬ   ВзаиморасчетыПоДок.Регистратор
	|					, ВзаиморасчетыПоДок.ДоговорКонтрагента
	|					, ВзаиморасчетыПоДок.ДокументРасчетовСКонтрагентом
	|					, ВзаиморасчетыПоДок.Период
	|					, ВзаиморасчетыПоДок.СуммаВзаиморасчетовПриход
	|			ИЗ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуКон КАК ВзаиморасчетыПоДок
	|		) КАК ВзаиморасчетыОиО2
	|		ПО ВзаиморасчетыОиО2.Сделка = ВзаиморасчетыОиО.Сделка
	|		И ВзаиморасчетыОиО2.ДоговорКонтрагента = ВзаиморасчетыОиО.ДоговорКонтрагента
	|		И (//ВзаиморасчетыОиО.Период < ВзаиморасчетыОиО2.Период ИЛИ
	|		ВзаиморасчетыОиО.Период = ВзаиморасчетыОиО2.Период И ВзаиморасчетыОиО.Регистратор < ВзаиморасчетыОиО2.Регистратор)
	|		И ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход > 0
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыОиО.ДоговорКонтрагента,
	|	ВзаиморасчетыОиО.Сделка,
	|	ВзаиморасчетыОиО.Период,
	|	ПервыеПериоды.СуммаВалОстаток
	|	ИМЕЮЩИЕ
	|СУММА(ВЫБОР
	|	КОГДА (ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход) ЕСТЬ NULL 
	|		ТОГДА 0
	|	ИНАЧЕ ВзаиморасчетыОиО2.СуммаВзаиморасчетовПриход
	|	КОНЕЦ) < ПервыеПериоды.СуммаВалОстаток
	|;
	|";

	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач = СтрЗаменить(ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуКон, "ВзаиморасчетыСКонтрагентамиОборотыНаДатуКон", "ВзаиморасчетыСКонтрагентамиОборотыНаДатуНач");
	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач = СтрЗаменить(ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач, "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуКон", "ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОборотыНаДатуНач");
	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач = СтрЗаменить(ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач, "&ДатаКонОст", "&ДатаНачОст");
	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач = СтрЗаменить(ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач, "НеоплаченныеНаДатуКон", "НеоплаченныеНаДатуНач");

	ТекстЗапроса =
	ТекстВрмТбл +
	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуКон +
	ТекстВложенногоЗапросаПоНеоплаченнымДокументамНаДатуНач +"
	|
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот КАК СуммаПродажи,
	|	ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот КАК КоличествоОборот,
	|	ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот * ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК КоличествоЕдиницДляОтчетовОборот,
	|	ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот КАК Себестоимость,
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот КАК Маржа,
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот КАК ЧистаяМаржа,
	|	0 КАК СуммаЗатрат,
	|	РСЦеныКомпании.Цена * ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот * ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент * РСКурсыВалютыЦен.Курс / РСКурсыВалютыЦен.Кратность * РСКурсыВалютыУпрУчета.Кратность / РСКурсыВалютыУпрУчета.Курс * &КоэффициентОтБазовогоТипа КАК ПлановаяСебестоимость,
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - РСЦеныКомпании.Цена * ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот * ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент * РСКурсыВалютыЦен.Курс / РСКурсыВалютыЦен.Кратность * РСКурсыВалютыУпрУчета.Кратность / РСКурсыВалютыУпрУчета.Курс * &КоэффициентОтБазовогоТипа КАК ПлановаяПрибыль,
	|	ПродажиСДатамиЦенИДатамиКурсов.Регистратор КАК ДокументРеализации,
	|	ПродажиСДатамиЦенИДатамиКурсов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПродажиСДатамиЦенИДатамиКурсов.Подразделение КАК Подразделение,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя КАК ДоговорВзаиморасчетовПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.Контрагент.ОсновнойМенеджерПокупателя КАК Ответственный,
	|	ПродажиСДатамиЦенИДатамиКурсов.Номенклатура КАК Номенклатура,
	|	ПродажиСДатамиЦенИДатамиКурсов.Контрагент КАК Покупатель
	|{ВЫБРАТЬ
	|	СуммаПродажи,
	|	КоличествоОборот,
	|	КоличествоЕдиницДляОтчетовОборот,
	|	Себестоимость,
	|	Маржа,
	|	ЧистаяМаржа,
	|	СуммаЗатрат,
	|	ПлановаяСебестоимость,
	|	ПлановаяПрибыль,
	|	ДокументРеализации.*,
	|	ХарактеристикаНоменклатуры.*,
	|	ЗаказПокупателя.*,
	|	Ответственный.*,
	|	ДоговорВзаиморасчетовПокупателя.*,
	|	Покупатель.*,
	|	Подразделение.*,
	|	Номенклатура.*,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДокументПродажи.*}
	|ИЗ (
	|ВЫБРАТЬ
	|	ПродажиОбороты.СтоимостьОборот*ДопКоэффициент КАК СуммаПродажиОборот,
	|	(ВЫБОР КОГДА (ПродажиСебестоимостьОбороты.СтоимостьОборот) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьОбороты.СтоимостьОборот КОНЕЦ + ВЫБОР КОГДА (ПродажиСебестоимостьКорректировка.Стоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьКорректировка.Стоимость КОНЕЦ)*ДопКоэффициент КАК СебестоимостьОборот,
	|	ПродажиОбороты.КоличествоОборот*ДопКоэффициент КАК КоличествоОборот,
	|	ПродажиОбороты.Регистратор,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	|	ПродажиОбороты.ДоговорКонтрагента КАК ДоговорВзаиморасчетовПокупателя,
	|	ПродажиОбороты.Контрагент,
	|	ПродажиОбороты.ЗаказПокупателя,
	|	ПродажиОбороты.Подразделение,
	|	ПродажиОбороты.ДокументПродажи,
	|	СписокРегистраторов.ДатаКурсаВалютыУпрУчета,
	|	МАКСИМУМ(РСЦеныКомпании.Период) КАК ДатаЦены,
	|	МАКСИМУМ(РСКурсыВалют.Период) КАК ДатаКурсаВалютыЦены
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, &ДатаКон, Регистратор, 
	|		{Номенклатура.*, ХарактеристикаНоменклатуры.*, ЗаказПокупателя.*, Подразделение.*, ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя, Контрагент.* КАК Покупатель, ДокументПродажи.*}
	|                                    ) КАК ПродажиОбороты

// Ниже пошел запрос, отвечающий за передачу Продажам только тех регистраторов, которые оплатились
// в течение периода отчета.
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ОсновнаяТаблица.Регистратор,
	|			ВЫБОР	КОГДА ОсновнаяТаблица.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ ОсновнаяТаблица.Сделка
	|			КОНЕЦ КАК Сделка,
	|			МАКСИМУМ(ВЫБОР КОГДА
	|				ВЫБОР //документ не был оплаченным на ДатаНач
	|					КОГДА НеоплаченныеНаДатуКон.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|						ОсновнаяТаблица.Период < НеоплаченныеНаДатуКон.Период
	|						ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуКон.Период 
	|							И ОсновнаяТаблица.Регистратор<НеоплаченныеНаДатуКон.ПервыйРегистратор
	|					ИНАЧЕ
	|						ОсновнаяТаблица.Период <= &КонДата
	|				КОНЕЦ
	|				И
	|				ВЫБОР //и стал оплаченным на ДатаКон
	|					КОГДА НеоплаченныеНаДатуНач.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|						ОсновнаяТаблица.Период > НеоплаченныеНаДатуНач.Период
	|						ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуНач.Период 
	|							И ОсновнаяТаблица.Регистратор>=НеоплаченныеНаДатуНач.ПервыйРегистратор
	|					ИНАЧЕ
	|						ОсновнаяТаблица.Период >= &НачДата
	|				КОНЕЦ ТОГДА 1
	|			ИНАЧЕ -1 КОНЕЦ) КАК ДопКоэффициент,
	|			МАКСИМУМ(РСКВ.Период) КАК ДатаКурсаВалютыУпрУчета //это даты курсов
	|		ИЗ
	|			(	ВЫБРАТЬ   ОсновнаяТаблица.Регистратор
	|						, ОсновнаяТаблица.ДоговорКонтрагента
	|						, ОсновнаяТаблица.Сделка
	|						, ОсновнаяТаблица.Период
	|				ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ОсновнаяТаблица
	|				ГДЕ НЕ ОсновнаяТаблица.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|				ОБЪЕДИНИТЬ
	|				ВЫБРАТЬ   ОсновнаяТаблицаДок.Регистратор
	|						, ОсновнаяТаблицаДок.ДоговорКонтрагента
	|						, ОсновнаяТаблицаДок.ДокументРасчетовСКонтрагентом
	|						, ОсновнаяТаблицаДок.Период
	|				ИЗ
	|					РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов КАК ОсновнаяТаблицаДок
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ НеоплаченныеНаДатуКон.ПервыйРегистратор ИЗ НеоплаченныеНаДатуКон) КАК НеоплаченныеНаДатуКон
	|				ПО
	|					НеоплаченныеНаДатуКон.ПервыйРегистратор = ОсновнаяТаблицаДок.Регистратор
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ НеоплаченныеНаДатуНач.ПервыйРегистратор ИЗ НеоплаченныеНаДатуНач) КАК НеоплаченныеНаДатуНач
	|				ПО
	|					НеоплаченныеНаДатуНач.ПервыйРегистратор = ОсновнаяТаблицаДок.Регистратор
	|				ГДЕ
	|					ОсновнаяТаблицаДок.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					И
	|					ВЫБОР	КОГДА НЕ НеоплаченныеНаДатуКон.ПервыйРегистратор ЕСТЬ NULL И НЕ НеоплаченныеНаДатуНач.ПервыйРегистратор ЕСТЬ NULL
	|							ТОГДА ЛОЖЬ
	|							КОГДА НЕ НеоплаченныеНаДатуКон.ПервыйРегистратор ЕСТЬ NULL
	|							ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			) КАК ОсновнаяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКВ
	|				ПО РСКВ.Валюта = &ВалютаУпрУчета И РСКВ.Период<=ОсновнаяТаблица.Период

	|			ЛЕВОЕ СОЕДИНЕНИЕ НеоплаченныеНаДатуКон КАК НеоплаченныеНаДатуКон
	|				ПО НеоплаченныеНаДатуКон.ДоговорКонтрагента = ОсновнаяТаблица.ДоговорКонтрагента
	|				И НеоплаченныеНаДатуКон.Сделка = ОсновнаяТаблица.Сделка

	|			ЛЕВОЕ СОЕДИНЕНИЕ НеоплаченныеНаДатуНач КАК НеоплаченныеНаДатуНач
	|				ПО НеоплаченныеНаДатуНач.ДоговорКонтрагента = ОсновнаяТаблица.ДоговорКонтрагента
	|				И НеоплаченныеНаДатуНач.Сделка = ОсновнаяТаблица.Сделка

	|		ГДЕ
	|			ВЫБОР //документ не был оплаченным на ДатаНач
	|				КОГДА НеоплаченныеНаДатуКон.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период < НеоплаченныеНаДатуКон.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуКон.Период 
	|						И ОсновнаяТаблица.Регистратор<НеоплаченныеНаДатуКон.ПервыйРегистратор
	|				ИНАЧЕ
	|					ОсновнаяТаблица.Период <= &КонДата
	|			КОНЕЦ
	|			И
	|			ВЫБОР //и стал оплаченным на ДатаКон
	|				КОГДА НеоплаченныеНаДатуНач.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период > НеоплаченныеНаДатуНач.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуНач.Период 
	|						И ОсновнаяТаблица.Регистратор>=НеоплаченныеНаДатуНач.ПервыйРегистратор
	|				ИНАЧЕ
	|					ОсновнаяТаблица.Период >= &НачДата
	|			КОНЕЦ
	|			ИЛИ
	|			ВЫБОР //документ был оплаченным на ДатаНач, т.е. находился левее границы
	|				КОГДА НеоплаченныеНаДатуНач.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период < НеоплаченныеНаДатуНач.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуНач.Период 
	|						И ОсновнаяТаблица.Регистратор<НеоплаченныеНаДатуНач.ПервыйРегистратор
	|				ИНАЧЕ
	|					ОсновнаяТаблица.Период < &НачДата
	|			КОНЕЦ
	|			И
	|			ВЫБОР //и стал НЕоплаченным на ДатаКон, т.е находится правее границы
	|				КОГДА НеоплаченныеНаДатуКон.ДоговорКонтрагента ЕСТЬ НЕ NULL ТОГДА
	|					ОсновнаяТаблица.Период > НеоплаченныеНаДатуКон.Период
	|					ИЛИ ОсновнаяТаблица.Период = НеоплаченныеНаДатуКон.Период 
	|						И ОсновнаяТаблица.Регистратор>=НеоплаченныеНаДатуКон.ПервыйРегистратор
	|				ИНАЧЕ
	|					Ложь //этот вариант предполагает, что появились неоплаченные документы
	|			КОНЕЦ
	|		СГРУППИРОВАТЬ ПО
	|			ОсновнаяТаблица.Регистратор,
	|			ВЫБОР	КОГДА ОсновнаяТаблица.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ ОсновнаяТаблица.Сделка
	|			КОНЕЦ
	|	) КАК СписокРегистраторов
	|	ПО ПродажиОбороты.Регистратор = СписокРегистраторов.Регистратор
	|		И	ВЫБОР	КОГДА ПродажиОбороты.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
	|					ТОГДА ИСТИНА
	|					КОГДА ПродажиОбороты.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
	|					ТОГДА ПродажиОбороты.ЗаказПокупателя = СписокРегистраторов.Сделка
	|					ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	// Себестоимость продаж, списываемая сразу
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	 (ВЫБРАТЬ СУММА(СтоимостьОборот) КАК СтоимостьОборот, Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, Регистратор 
	|		ИЗ РегистрНакопления.ПродажиСебестоимость.Обороты(,&ДатаКон,Регистратор) КАК ПродажиСебестоимость 
	|	СГРУППИРОВАТЬ ПО Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, Регистратор) ПродажиСебестоимостьОбороты 
	|	ПО ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор 
	|	И ПродажиОбороты.Номенклатура = ПродажиСебестоимостьОбороты.Номенклатура 
	|	И ПродажиОбороты.ХарактеристикаНоменклатуры = ПродажиСебестоимостьОбороты.ХарактеристикаНоменклатуры 
	|	И ПродажиОбороты.ЗаказПокупателя = ПродажиСебестоимостьОбороты.ЗаказПокупателя 
	// Себестоимость продаж, списываемая при корректировке
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ СУММА(Стоимость) КАК Стоимость, Номенклатура, ДокументДвижения, ХарактеристикаНоменклатуры, ЗаказПокупателя, Подразделение 
	|		ИЗ РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
	|//		ГДЕ ПродажиСебестоимость.ДокументДвижения <> Неопределено
	|		СГРУППИРОВАТЬ ПО                         Номенклатура, ДокументДвижения, ХарактеристикаНоменклатуры, ЗаказПокупателя, Подразделение
	|		) ПродажиСебестоимостьКорректировка
	|		ПО ПродажиСебестоимостьКорректировка.Номенклатура = ПродажиОбороты.Номенклатура
	|		И ПродажиСебестоимостьКорректировка.ХарактеристикаНоменклатуры = ПродажиОбороты.ХарактеристикаНоменклатуры
	|		И ПродажиСебестоимостьКорректировка.ДокументДвижения = ПродажиОбороты.Регистратор
	|		И ПродажиСебестоимостьКорректировка.ЗаказПокупателя = ПродажиОбороты.ЗаказПокупателя
	|		И ПродажиСебестоимостьКорректировка.Подразделение = ПродажиОбороты.Подразделение
	// ...
	// Цены для плановой себестоимости
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК РСЦеныКомпании
	|		ПО РСЦеныКомпании.ТипЦен = &ТипЦенПлановойСебестоимости
	|		И ПродажиОбороты.Номенклатура = РСЦеныКомпании.Номенклатура
	|		И ПродажиОбороты.ХарактеристикаНоменклатуры = РСЦеныКомпании.ХарактеристикаНоменклатуры
	|		И РСЦеныКомпании.Период<=ПродажиОбороты.Период
	// Курсы валют для плановой себестоимости
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКурсыВалют
	|		ПО РСКурсыВалют.Валюта = РСЦеныКомпании.Валюта
	|		И РСКурсыВалют.Период<=РСЦеныКомпании.Период
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.СтоимостьОборот*ДопКоэффициент,
	|	(ВЫБОР КОГДА (ПродажиСебестоимостьОбороты.СтоимостьОборот) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьОбороты.СтоимостьОборот КОНЕЦ + ВЫБОР КОГДА (ПродажиСебестоимостьКорректировка.Стоимость) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ПродажиСебестоимостьКорректировка.Стоимость КОНЕЦ)*ДопКоэффициент,
	|	ПродажиОбороты.КоличествоОборот*ДопКоэффициент,
	|	ПродажиОбороты.Регистратор,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.ХарактеристикаНоменклатуры,
	|	ПродажиОбороты.Контрагент,
	|	ПродажиОбороты.ДоговорКонтрагента,
	|	ПродажиОбороты.ЗаказПокупателя,
	|	ПродажиОбороты.Подразделение,
	|	ПродажиОбороты.ДокументПродажи,
	|	СписокРегистраторов.ДатаКурсаВалютыУпрУчета
	|) КАК ПродажиСДатамиЦенИДатамиКурсов
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК РСЦеныКомпании
	|	ПО РСЦеныКомпании.ТипЦен = &ТипЦенПлановойСебестоимости
	|	И РСЦеныКомпании.Период = ПродажиСДатамиЦенИДатамиКурсов.ДатаЦены
	|	И РСЦеныКомпании.Номенклатура = ПродажиСДатамиЦенИДатамиКурсов.Номенклатура
	|	И РСЦеныКомпании.ХарактеристикаНоменклатуры = ПродажиСДатамиЦенИДатамиКурсов.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКурсыВалютыУпрУчета
	|	ПО РСКурсыВалютыУпрУчета.Период = ПродажиСДатамиЦенИДатамиКурсов.ДатаКурсаВалютыУпрУчета
	|	И РСКурсыВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК РСКурсыВалютыЦен
	|	ПО РСКурсыВалютыЦен.Валюта = РСЦеныКОмпании.Валюта
	|	И РСКурсыВалютыЦен.Период = ПродажиСДатамиЦенИДатамиКурсов.ДатаКурсаВалютыЦены
	|{ГДЕ 
	|	ПродажиСДатамиЦенИДатамиКурсов.Подразделение.* КАК Подразделение,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя.Ответственный.* КАК Ответственный,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.Владелец.* КАК Покупатель,
	|	ПродажиСДатамиЦенИДатамиКурсов.ДоговорВзаиморасчетовПокупателя.* КАК ДоговорВзаиморасчетовПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.ЗаказПокупателя.* КАК ЗаказПокупателя,
	|	ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.* КАК Номенклатура,
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот КАК СуммаПродажи,
	|	ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот КАК КоличествоОборот,
	|	ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот * ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК КоличествоЕдиницДляОтчетовОборот,
	|	ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот КАК Себестоимость,
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот КАК Маржа,
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - ПродажиСДатамиЦенИДатамиКурсов.СебестоимостьОборот КАК ЧистаяМаржа,
	|	0 КАК СуммаЗатрат,
	|	РСЦеныКомпании.Цена * ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот * ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент * РСКурсыВалютыЦен.Курс / РСКурсыВалютыЦен.Кратность * РСКурсыВалютыУпрУчета.Кратность / РСКурсыВалютыУпрУчета.Курс * &КоэффициентОтБазовогоТипа КАК ПлановаяСебестоимость,
	|	ПродажиСДатамиЦенИДатамиКурсов.СуммаПродажиОборот - РСЦеныКомпании.Цена * ПродажиСДатамиЦенИДатамиКурсов.КоличествоОборот * ПродажиСДатамиЦенИДатамиКурсов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / РСЦеныКомпании.ЕдиницаИзмерения.Коэффициент * РСКурсыВалютыЦен.Курс / РСКурсыВалютыЦен.Кратность * РСКурсыВалютыУпрУчета.Кратность / РСКурсыВалютыУпрУчета.Курс * &КоэффициентОтБазовогоТипа КАК ПлановаяПрибыль
	
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	0 КАК СуммаПродажи,
	|	0 КАК КоличествоОборот,
	|	0 КАК КоличествоЕдиницДляОтчетовОборот,
	|	0 КАК Себестоимость,
	|	0 КАК МАРЖА,
	|	-ЗатратыОбороты.СуммаОборот КАК ЧистаяМаржа,
	|	ЗатратыОбороты.СуммаОборот КАК СуммаЗатрат,
	|	0 КАК ПлановаяСебестоимость,
	|	0 КАК ПлановаяПрибыль,
	|	ЗатратыОбороты.Регистратор КАК ДокументРеализации,
	|	NULL КАК ХарактеристикаНоменклатуры,
	|	ЗатратыОбороты.Подразделение КАК Подразделение,
	|	ЗатратыОбороты.Заказ КАК ЗаказПокупателя,
	|	ЗатратыОбороты.Заказ.ДоговорКонтрагента КАК ДоговорВзаиморасчетовПокупателя,
	|	ЗатратыОбороты.Заказ.Ответственный КАК Ответственный,
	|	ЗатратыОбороты.СтатьяЗатрат КАК Номенклатура,
	|	ЗатратыОбороты.Заказ.Контрагент КАК Покупатель
	|{ВЫБРАТЬ
	|	СуммаПродажи,
	|	КоличествоОборот,
	|	КоличествоЕдиницДляОтчетовОборот,
	|	Себестоимость,
	|	Маржа,
	|	ЧистаяМаржа,
	|	СуммаЗатрат,
	|	ПлановаяСебестоимость,
	|	ПлановаяПрибыль,
	|	ДокументРеализации.*,
	|	ХарактеристикаНоменклатуры.*,
	|	Покупатель.*,
	|	ЗаказПокупателя.*,
	|	ДоговорВзаиморасчетовПокупателя,
	|	Ответственный.*,
	|	Подразделение.*,
	|	Номенклатура.*}
	|ИЗ РегистрНакопления.Затраты.Обороты(&ДатаНач, &ДатаКон, Регистратор {&Периодичность}, Заказ <> НЕОПРЕДЕЛЕНО) КАК ЗатратыОбороты
	|{ГДЕ 
	|	ЗатратыОбороты.Подразделение.* КАК Подразделение,
	|	ЗатратыОбороты.Заказ.Ответственный.* КАК Ответственный,
	|	ЗатратыОбороты.Заказ.Контрагент.* КАК Покупатель,
	|	ЗатратыОбороты.Заказ.ДоговорКонтрагента.* КАК ДоговорВзаиморасчетовПокупателя,
	|	ЗатратыОбороты.Заказ.* КАК ЗаказПокупателя,
	|	ЗатратыОбороты.СтатьяЗатрат КАК Номенклатура,
	|	0 КАК СуммаПродажи,
	|	0 КАК КоличествоОборот,
	|	0 КАК КоличествоЕдиницДляОтчетовОборот,
	|	0 КАК Себестоимость,
	|	0 КАК МАРЖА,
	|	-ЗатратыОбороты.СуммаОборот КАК ЧистаяМаржа,
	|	ЗатратыОбороты.СуммаОборот КАК СуммаЗатрат,
	|	0 КАК ПлановаяСебестоимость,
	|	0 КАК ПлановаяПрибыль
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО 
	|	ЗаказПокупателя.*,
	|	Подразделение.*,
	|	Покупатель.*,
	|	Ответственный.*,
	|	Номенклатура.*,
	|	СуммаПродажи,
	|	КоличествоОборот,
	|	КоличествоЕдиницДляОтчетовОборот,
	|	Себестоимость,
	|	Маржа,
	|	ЧистаяМаржа,
	|	СуммаЗатрат,
	|	ПлановаяСебестоимость,
	|	ПлановаяПрибыль
	|	//СВОЙСТВА
	|}
	|ИТОГИ
	|	СУММА(СуммаПродажи),
	|	СУММА(КоличествоОборот),
	|	СУММА(КоличествоЕдиницДляОтчетовОборот),
	|	СУММА(Себестоимость),
	|	СУММА(Маржа),
	|	СУММА(ЧистаяМаржа),
	|	СУММА(СуммаЗатрат),
	|	СУММА(ПлановаяСебестоимость),
	|	СУММА(ПлановаяПрибыль)
	|
	|ПО ОБЩИЕ
	|
	|{ИТОГИ ПО
	|	ЗаказПокупателя.*,
	|	Подразделение.*,
	|	Покупатель.*,
	|	Ответственный.*,
	|	Номенклатура.*
	|	//СВОЙСТВА
	|}
		|";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		
		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаПродажи",          "Сумма продажи");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоОборот",      "Количество (в ед. хранения)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоЕдиницДляОтчетовОборот", "Количество (в ед. для отчетов)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Себестоимость",         "Стоимость");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Маржа",                 "Прибыль");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаЗатрат",           "Сумма затрат");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЧистаяМаржа",           "Чистая прибыль");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПлановаяСебестоимость", "Плановая себестоимость");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПлановаяПрибыль",       "Плановая прибыль");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорВзаиморасчетовПокупателя", "Договор с покупателем");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказПокупателя",                 "Заказ покупателя");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументРеализации",              "Регистратор (Документ реализации)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументОприходования",           "Документ поставки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументПродажи",                 "Документ продажи");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры",      "Характеристика номенклатуры");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Ответственный",                   "Основной менеджер контрагента");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаПродажи",          "Сумма продажи",          Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоОборот",      "Количество (в ед. хранения)",               Ложь, "ЧЦ=15; ЧДЦ=3");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоЕдиницДляОтчетовОборот", "Количество (в ед. для отчетов)", Ложь, "ЧЦ=15; ЧДЦ=3");
	УниверсальныйОтчет.ДобавитьПоказатель("Себестоимость",         "Стоимость",              Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("Маржа",                 "Прибыль",                Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗатрат",           "Сумма затрат",           Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ЧистаяМаржа",           "Чистая прибыль",         Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ПлановаяСебестоимость", "Плановая себестоимость", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ПлановаяПрибыль",       "Плановая прибыль",       Истина, "ЧЦ=15; ЧДЦ=2");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Покупатель");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПокупателя");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");


	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Подразделение");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	УниверсальныйОтчет.ДобавитьОтбор("Покупатель");
	УниверсальныйОтчет.ДобавитьОтбор("ЗаказПокупателя");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("КоличествоЕдиницДляОтчетовОборот", "Номенклатура");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("КоличествоОборот", "Номенклатура");
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	Если Не ЗначениеЗаполнено(УниверсальныйОтчет.ДатаНач)
	 ИЛИ Не ЗначениеЗаполнено(УниверсальныйОтчет.ДатаКон) Тогда
		Предупреждение("Не задан период отчета!");
		Возврат;
	КонецЕсли;
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("КонДата",    КонецДня(Дата(УниверсальныйОтчет.ДатаКон)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("НачДата",    Дата(УниверсальныйОтчет.ДатаНач));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКонОст", Новый Граница(КонецДня(УниверсальныйОтчет.ДатаКон), ВидГраницы.Включая));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНачОст", УниверсальныйОтчет.ДатаНач);
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаУпрУчета", мВалютаУправленческогоУчета);
	
	Если Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить().Рассчитывается Тогда
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить().БазовыйТипЦен);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("КоэффициентОтБазовогоТипа",   Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить().ПроцентСкидкиНаценки/100+1);
	Иначе
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("КоэффициентОтБазовогоТипа", 1);
	КонецЕсли;
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

#КонецЕсли