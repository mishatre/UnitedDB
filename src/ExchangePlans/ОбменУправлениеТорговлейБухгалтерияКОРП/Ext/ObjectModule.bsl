
Перем мМонопольныйРежимПередЗаписью;
Перем мТипУдалениеДанных;
Перем мРегистрСведенийОтветственныеЛицаОрганизации;
Перем мРегистрСведенийКонтактнаяИнформация;
Перем мРегистрСведенийФИОФизЛиц;
Перем мЭтоНовыйЭлемент;

Перем мТаблицаОрганизацийДляВыгрузкиПередЗаписью;
Перем мТаблицаСкладовДляВыгрузкиПередЗаписью;
Перем мТаблицаПодразделенийДляВыгрузкиПередЗаписью;

Перем мОтборПоБухУчету;
Перем мОтборПоДатеДокумента;
Перем мСтарыйПрефикс;
Перем мВариантСписанияСебестоимости;

Перем мИнформацияОНаличиеОрганизацииВРегистре;
Перем мИнформацияОБазовыхТипах;

Перем мКоличествоОрганизацийВУзле;
Перем мСоответствиеОрганизацийИУзлов;
Перем мСоответствиеСкладовИУзлов;
Перем мСоответствиеПодразделенийИУзлов;

Перем мСтарыйТипОбъектаОтправки;
Перем мИмяСтарогоБазовогоТипа;



Функция СообщитьИнформациюПользователюПослеСозданияНовогоУзла() Экспорт
	
	НужноПерезапуститьВсеПодключенияКИБ = Ложь;
	
	Если мЭтоНовыйЭлемент 
		И НЕ ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия
		И НЕ мМонопольныйРежимПередЗаписью Тогда
		
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
		
	КонецЕсли;
	
	Если мОтборПоБухУчету <> ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете
		ИЛИ мВариантСписанияСебестоимости <> ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия
		ИЛИ мОтборПоДатеДокумента <> ДатаНачалаВыгрузкиДокументов Тогда 
		
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
		
	КонецЕсли;
	
	ЕстьОтличияВТабличнойЧасти = ОпределитьЕстьОтличияВТабличнойЧасти();
	Если ЕстьОтличияВТабличнойЧасти Тогда
		НужноПерезапуститьВсеПодключенияКИБ = Истина;
	КонецЕсли;
	
	Если НужноПерезапуститьВсеПодключенияКИБ Тогда
		
		Если мМонопольныйРежимПередЗаписью Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными();
			Возврат "";
			
		Иначе	
			
			Возврат "Для корректной работы механизма обмена данными необходимо завершить работу всех пользователей и перезапустить текущий сеанс работы 1С:Предприятия.";	
			
		КонецЕсли;
		
	Иначе
		
		Если мЭтоНовыйЭлемент Тогда
			
			ПолныеПрава.ОпределитьПараметрыСеансаДляОбменаДанными();	
			
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция СравнитьТаблицыПоПолю(Таблица1, Таблица2, ИмяПоля)
	
	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
		
	Для Номер = 0 По Таблица1.Количество() - 1 Цикл
		
		Если Таблица1[Номер][ИмяПоля] <> Таблица2[Номер][ИмяПоля] Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
	
КонецФункции

Функция ОпределитьЕстьОтличияВТабличнойЧасти()
	
	Если мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Неопределено
		ИЛИ мТаблицаСкладовДляВыгрузкиПередЗаписью = Неопределено
		ИЛИ мТаблицаПодразделенийДляВыгрузкиПередЗаписью = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	НаличиеОтличий = СравнитьТаблицыПоПолю(Организации, мТаблицаОрганизацийДляВыгрузкиПередЗаписью, "Организация")
		ИЛИ СравнитьТаблицыПоПолю(Склады, мТаблицаСкладовДляВыгрузкиПередЗаписью, "Склад")
		ИЛИ СравнитьТаблицыПоПолю(Подразделения, мТаблицаПодразделенийДляВыгрузкиПередЗаписью, "Подразделение");
		
	Возврат НаличиеОтличий;
	
КонецФункции


Процедура ПередЗаписью(Отказ)
	
	мЭтоНовыйЭлемент = ЭтоНовый();
	
	Если Не ЗначениеЗаполнено(ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия) Тогда
		ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить;
	КонецЕсли;
	
	мМонопольныйРежимПередЗаписью = ОбщегоНазначения.ОпределитьТекущийРежимРаботыМонопольный();
			
	Если Не мЭтоНовыйЭлемент Тогда
		
		мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Ссылка.Организации.Выгрузить();
		мТаблицаСкладовДляВыгрузкиПередЗаписью = Ссылка.Склады.Выгрузить();
		мТаблицаПодразделенийДляВыгрузкиПередЗаписью = Ссылка.Подразделения.Выгрузить();
		
		мОтборПоБухУчету = Ссылка.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете;
		мОтборПоДатеДокумента = Ссылка.ДатаНачалаВыгрузкиДокументов;
		мВариантСписанияСебестоимости = Ссылка.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия;
		
	Иначе
		
		мТаблицаОрганизацийДляВыгрузкиПередЗаписью = Неопределено;
		мТаблицаСкладовДляВыгрузкиПередЗаписью = Неопределено;
		мТаблицаПодразделенийДляВыгрузкиПередЗаписью = Неопределено;
		мОтборПоБухУчету = Неопределено;
		мОтборПоДатеДокумента = Неопределено;
		мВариантСписанияСебестоимости = Неопределено;
		мСтарыйПрефикс = "";
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	СтрокаСообщенияПользователю = СообщитьИнформациюПользователюПослеСозданияНовогоУзла();
	
	#Если Клиент Тогда
	Сообщить(СтрокаСообщенияПользователю);
	#КонецЕсли


КонецПроцедуры


Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта) Экспорт
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
	
		Возврат "РегистрыСведений";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Документы";
		
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Справочники";	
		
	Иначе
	   
		Возврат "";
		
	КонецЕсли;
			
КонецФункции

Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных, ИмяИзмеренияДляОтбора = "Организация")
	
	// режем по организации
	ТекущаяОрганизация = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		Если СтрокаНабора[ИмяИзмеренияДляОтбора] <> ТекущаяОрганизация Тогда
			
			ТекущаяОрганизация = СтрокаНабора[ИмяИзмеренияДляОтбора];
			ТекущееРешение = (ЭтотОбъект.Организации.Найти(ТекущаяОрганизация, "Организация") <> Неопределено); 
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	

КонецПроцедуры

Процедура УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, ИмяИзмеренияДляОтбора)
	
	// режем по организации
	ТекущийОбъект = Неопределено;
	ТекущееРешение = Ложь;
	
	Позиция = ЭлементДанных.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		
		СтрокаНабора = ЭлементДанных[Позиция];
		Если СтрокаНабора[ИмяИзмеренияДляОтбора] <> ТекущийОбъект Тогда
			
			ТекущийОбъект = СтрокаНабора[ИмяИзмеренияДляОтбора];
			
			ВыгружатьДляВсехУзлов = Ложь;
		
			МассивУзловДляПереноса = ПроцедурыОбменаТорговляБухгалтерияКОРП.ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(ТекущийОбъект, 
				"Справочники", , , ВыгружатьДляВсехУзлов, Ложь, мСоответствиеОрганизацийИУзлов, мСоответствиеСкладовИУзлов, 
					мСоответствиеПодразделенийИУзлов, Истина);
				
			// если нужно для всех узлов выгружать - то ничего проверять не нужно
			Если ВыгружатьДляВсехУзлов Тогда
				ТекущееРешение = Истина;
				Продолжить;
			КонецЕсли;
				
			ТекущееРешение = (МассивУзловДляПереноса.Найти(ЭтотОбъект.Ссылка) <> Неопределено);			 
			
		КонецЕсли;
		
		Если НЕ ТекущееРешение Тогда
			ЭлементДанных.Удалить(Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;	

КонецПроцедуры

Процедура ОпределитьТипОтправкиДанных(ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	ТипОбъекта = ТипЗнч(ЭлементДанных);
	
	Если ТипОбъекта = мТипУдалениеДанных Тогда
		
		// удаление объекта просто отсылаем как есть
		Возврат;
		
	КонецЕсли;
	
	Если мСоответствиеОрганизацийИУзлов = Неопределено Тогда
			
		мСоответствиеОрганизацийИУзлов = ПроцедурыОбменаТорговляБухгалтерияКОРП.ПолучитьСоответствиеУзловИОрганизаций();
		
	КонецЕсли;
	
	Если мСоответствиеСкладовИУзлов = Неопределено Тогда
			
		мСоответствиеСкладовИУзлов = ПроцедурыОбменаТорговляБухгалтерияКОРП.ПолучитьСоответствиеУзловИСкладов();
		
	КонецЕсли;
	
	Если мСоответствиеПодразделенийИУзлов = Неопределено Тогда
			
		мСоответствиеПодразделенийИУзлов = ПроцедурыОбменаТорговляБухгалтерияКОРП.ПолучитьСоответствиеУзловИПодразделений();
		
	КонецЕсли;
	
	Если мСтарыйТипОбъектаОтправки = ТипОбъекта Тогда
		
		ИмяБазовогоТипа = мИмяСтарогоБазовогоТипа;
		
	Иначе	
	
		ИмяБазовогоТипа = мИнформацияОБазовыхТипах.Получить(ТипОбъекта);
		
		Если ИмяБазовогоТипа = Неопределено Тогда
		
			ИмяБазовогоТипа = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта);
			мИнформацияОБазовыхТипах.Вставить(ТипОбъекта, ИмяБазовогоТипа);
		
		КонецЕсли;
		
		мИмяСтарогоБазовогоТипа = ИмяБазовогоТипа;
		мСтарыйТипОбъектаОтправки = ТипОбъекта;
	
	КонецЕсли;
	
	Если ИмяБазовогоТипа = "Справочники"
		ИЛИ ИмяБазовогоТипа = "Документы" Тогда
		
		ВыгружатьДляВсехУзлов = Ложь;
		
		МассивУзловДляПереноса = ПроцедурыОбменаТорговляБухгалтерияКОРП.ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(ЭлементДанных, 
			ИмяБазовогоТипа, ТипОбъекта, , ВыгружатьДляВсехУзлов, Ложь, мСоответствиеОрганизацийИУзлов, мСоответствиеСкладовИУзлов, 
			мСоответствиеПодразделенийИУзлов, Ложь);
			
		// если нужно для всех узлов выгружать - то ничего проверять не нужно
		Если ВыгружатьДляВсехУзлов Тогда
			// просто присваиваем фиктивный не пустой номер
			НомерВМассиве = 1;
		Иначе
			НомерВМассиве = МассивУзловДляПереноса.Найти(ЭтотОбъект.Ссылка);	
		КонецЕсли;
			
		Если НомерВМассиве = Неопределено Тогда
			
			// передаем информацию об удалении
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			
		Иначе
			
			// объект должен ехать, нужно определить удовлетворяет ли он ограничениям по дате
			Если ИмяБазовогоТипа = "Документы"
				И ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов)
				И ЭлементДанных.Дата < ДатаНачалаВыгрузкиДокументов Тогда
				
				// просто не выгружаем этот документ и все - игнорируем при выгрузке
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;	
				
			КонецЕсли;
			
		КонецЕсли;
						
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда
		
		Если мКоличествоОрганизацийВУзле = Неопределено Тогда
			
			мКоличествоОрганизацийВУзле = ЭтотОбъект.Организации.Количество();
			
		КонецЕсли;
		
		Если мКоличествоОрганизацийВУзле = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// нужно вычистить те строки которые для которых нужная организация не переносится
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			
			Если ТипОбъекта = мРегистрСведенийОтветственныеЛицаОрганизации Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных, "СтруктурнаяЕдиница");
				
			ИначеЕсли ТипОбъекта = мРегистрСведенийКонтактнаяИнформация Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "Объект");
				
			ИначеЕсли ТипОбъекта = мРегистрСведенийФИОФизЛиц Тогда
				
				УбратьИзРегистраДанныеНеНужныеДляПереносаПоРеквизиту(ЭлементДанных, "ФизЛицо");				
				
			Иначе
				
			 	НаличиеОрганизации = мИнформацияОНаличиеОрганизацииВРегистре.Получить(ТипОбъекта);
				
				Если НаличиеОрганизации = Неопределено Тогда
					
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);					
					НаличиеОрганизации = (МетаданныеОбъекта.Измерения.Найти("Организация") <> Неопределено);
					мИнформацияОНаличиеОрганизацииВРегистре.Вставить(ТипОбъекта, НаличиеОрганизации);
					
				КонецЕсли;
				
				Если НаличиеОрганизации Тогда
						
					УбратьИзРегистраДанныеНеНужныеДляПереносаПоОрганизации(ЭлементДанных);
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
						
	КонецЕсли;	
	
КонецПроцедуры


мТипУдалениеДанных = Тип("УдалениеОбъекта");
мРегистрСведенийОтветственныеЛицаОрганизации = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизации");
мРегистрСведенийКонтактнаяИнформация = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация");
мРегистрСведенийФИОФизЛиц = Тип("РегистрСведенийНаборЗаписей.ФИОФизЛиц");

мИнформацияОНаличиеОрганизацииВРегистре = Новый Соответствие;
мИнформацияОБазовыхТипах = Новый Соответствие;
мСтарыйТипОбъектаОтправки = Неопределено;
мСоответствиеОрганизацийИУзлов = Неопределено;
