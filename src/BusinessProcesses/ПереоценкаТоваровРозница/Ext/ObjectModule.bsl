
////////////////////////////////////////////////////////////////////////////////
//ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет принудительное завершение бизнес-процесса.
//
Процедура ВыполнитьЗавершениеБизнесПроцесса() Экспорт

	// Сначала завершим все вложенные бизнес-процессы.
	ЗапросБизнесПроцессы = Новый Запрос;
	ЗапросБизнесПроцессы.УстановитьПараметр("БизнесПроцесс", Ссылка);
	ЗапросБизнесПроцессы.Текст = 
	"ВЫБРАТЬ
	|	ПереоценкаТоваровАТТ.Ссылка КАК БизнесПроцесс
	|ИЗ
	|	БизнесПроцесс.ПереоценкаТоваровАТТ КАК ПереоценкаТоваровАТТ
	|ГДЕ
	|	  ПереоценкаТоваровАТТ.Стартован = ИСТИНА
	|	И ПереоценкаТоваровАТТ.Завершен  = ЛОЖЬ
	|	И ПереоценкаТоваровАТТ.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс";

	ВыборкаБизнесПроцессы = ЗапросБизнесПроцессы.Выполнить().Выбрать();
	РазмерВыборки         = ВыборкаБизнесПроцессы.Количество();
	СчетчикВыборки        = 0;

	НачатьТранзакцию();

	Пока ВыборкаБизнесПроцессы.Следующий() Цикл
		#Если Клиент Тогда
		Состояние("Обработка: " + СчетчикВыборки + " из " + РазмерВыборки);
		#КонецЕсли

		СчетчикВыборки = СчетчикВыборки + 1;
		Попытка
	
			БизнесПроцессОбъект = ВыборкаБизнесПроцессы.БизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.ВыполнитьЗавершениеБизнесПроцесса(Ложь);

		Исключение

			ВызватьИсключение "Ошибка при завершении бизнес-процесса:" + Строка(ВыборкаБизнесПроцессы.БизнесПроцесс)
								+ Символы.ПС + "По причине: " + ОписаниеОшибки();
		КонецПопытки;

	КонецЦикла;

	// Пометим все задачи как выполненные.
	ЗапросЗадачи       = Новый Запрос;
	ЗапросЗадачи.УстановитьПараметр("БизнесПроцесс", Ссылка);
	ЗапросЗадачи.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка КАК ЗадачаПользователя
	|ИЗ
	|	Задача.ЗадачиПользователя КАК Задачи
	|ГДЕ
	|	Задачи.БизнесПроцесс = &БизнесПроцесс
	|	И Задачи.Выполнена = ЛОЖЬ";

	Выборка        = ЗапросЗадачи.Выполнить().Выбрать();
	РазмерВыборки  = Выборка.Количество();
	СчетчикВыборки = 0;

	Пока Выборка.Следующий() Цикл

		#Если Клиент Тогда
		Состояние("Обработка: " + СчетчикВыборки + " из " + РазмерВыборки);
		#КонецЕсли

		СчетчикВыборки = СчетчикВыборки + 1;
		Попытка

			ЗадачаОбъект = Выборка.ЗадачаПользователя.ПолучитьОбъект();
			ЗадачаОбъект.Выполнена = Истина;
			ЗадачаОбъект.Записать();

		Исключение

			ВызватьИсключение "Ошибка при выполнении задачи:" + Строка(Выборка.ЗадачаПользователя)
								+ Символы.ПС + "По причине: " + ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	ДатаЗавершения        = ТекущаяДата();
	Завершен              = Истина;
	ЗавершенПринудительно = Истина;

	Попытка

		Записать();

	Исключение

		ВызватьИсключение "Ошибка при записи бизнес-процесса:" + Строка(Ссылка)
							+ Символы.ПС + "По причине: " + ОписаниеОшибки();
	КонецПопытки;

	ЗафиксироватьТранзакцию();

КонецПроцедуры // ВыполнитьЗавершениеБизнесПроцесса()

////////////////////////////////////////////////////////////////////////////////
//СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура вызывается в точке вложенного бизнес-процесса перед выполнением задач.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачиПользователя.
//  Отказ - булево, флаг отказа от выполнения задачи.
//
Процедура ПроверитьВозможностьВыполненияЗадач(Задача, Отказ)

	//Проверим, что вложенные бизнес-процессы по задаче завершены.
	Заголовок = "Выполнение задачи:" + Задача;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВедущаяЗадача", Задача);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПереоценкаТоваровАТТ.Ссылка) КАК БизнесПроцессПредставление
	|ИЗ
	|	БизнесПроцесс.ПереоценкаТоваровАТТ КАК ПереоценкаТоваровАТТ
	|ГДЕ
	|	ПереоценкаТоваровАТТ.ВедущаяЗадача = &ВедущаяЗадача
	|	И ПереоценкаТоваровАТТ.Завершен    = ЛОЖЬ
	|	И ПереоценкаТоваровАТТ.Стартован   = Истина";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ОбщегоНазначения.СообщитьОбОшибке(
		"Существует незавершенный бизнес-процесс:" + Выборка.БизнесПроцессПредставление + " 
		| Задача будет выполнена при завершени бизнес-процесса.", Отказ, Заголовок);

	КонецЦикла;

КонецПроцедуры // ПроверитьВозможностьВыполненияЗадач()

// Функция проверяет существование розничных складов в типами цен документа
//"Установка цен номенклатуры".
// Параметры:
//  МассивСкладов - Произвольный. В данный параметр возвращается 
//					найденные склады.Если складов нет, то возвращается пустой масив.
//  Заголовок - строка, заголовок сообщения об ошибке.
//
Функция ПроверитьНаличиеРозничныхСкладовПоТипамЦенДокумента(МассивСкладов = Неопределено, Заголовок = "")

	МассивСкладов = ПолучитьРозничныеСкладыПоТипамЦенДокумента(УстановкаЦенНоменклатуры);
	Результат = (Не МассивСкладов.Количество() = 0);
	Возврат Результат;

КонецФункции //ПроверитьНаличиеРозничныхСкладовПоТипамЦенДокумента()

// Процедура проверяет наличие незваершенных бизнес-процессов по документу "УстановкаЦенНоменклатуры"".
//
// Параметры:
//  ДокументУстановкаЦенНоменклатуры - ДокументСсылка.УстановкаЦенНоменклатуры.
//  Отказ - булево, флаг отказа.
//  Заголовок - строка, заголовок сообщения об ошибке.
//
Процедура ПровертьНаличиеАктивныхБизнесПроцессовПереоценки(ДокументУстановкаЦенНоменклатуры,
															Отказ,
															Заголовок)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(ПереоценкаТоваровРозница.Ссылка) Как БизнесПроцесс
	|ИЗ
	|	БизнесПроцесс.ПереоценкаТоваровРозница КАК ПереоценкаТоваровРозница
	|ГДЕ
	|	ПереоценкаТоваровРозница.УстановкаЦенНоменклатуры = &УстановкаЦенНоменклатуры
	|	И ПереоценкаТоваровРозница.Завершен = ЛОЖЬ
	|	И ПереоценкаТоваровРозница.Ссылка <> &Ссылка
	|	И ПереоценкаТоваровРозница.Стартован = ИСТИНА");

	Запрос.УстановитьПараметр("УстановкаЦенНоменклатуры", ДокументУстановкаЦенНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка",                   Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		ОбщегоНазначения.СообщитьОбОшибке(
		"По документу """ + УстановкаЦенНоменклатуры + """ существует незавершенный бизнес-процесс
		|" + Выборка.БизнесПроцесс + "
		|Выполнение бизнес-процесса не требуется.", Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПровертьНаличиеАктивныхБизнесПроцессовПереоценки()

// Процедура проверяет возможность старта бизнес-процесса.
//
// Параметры:
//  Отказ - булево, отказ от старта.
//  Заголовок - строка, заголовок сообщения об ошибке.
//
Процедура ПроверитьВозможностьСтарта(Отказ, Заголовок)

	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Настройка");
	СтруктураПолей.Вставить("УстановкаЦенНоменклатуры");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,
															СтруктураПолей,
															Отказ,
															Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Отказ = Не ПроверитьНаличиеРозничныхСкладовПоТипамЦенДокумента( ,Заголовок);
	Если Отказ Тогда

		ОбщегоНазначения.СообщитьОбОшибке(
		"Не удалось определить ни одного розничного склада для переоценки по выбранным документе типам цен.
		|Выполнение бизнес-процесса не требуется.",, Заголовок);
		Возврат;
	КонецЕсли;

	ПровертьНаличиеАктивныхБизнесПроцессовПереоценки(УстановкаЦенНоменклатуры,
													 Отказ,
													 Заголовок);

КонецПроцедуры // ПроверитьВозможностьСтарта()

// Функция формирует массив розничных складов по указанным в документе типам цен.
//
// Параметры:
//  УстановкаЦенНоменклатуры - документ "УстановкаЦенНоменклатуры".
// Возвращаемое значение:
//  Массив складов
//
Функция ПолучитьРозничныеСкладыПоТипамЦенДокумента(УстановкаЦенНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УстановкаЦенНоменклатуры", УстановкаЦенНоменклатуры);
	Запрос.УстановитьПараметр("ВидСкладаРозничный",       Перечисления.ВидыСкладов.Розничный);
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.ТипыЦен КАК ТипыЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ТипыЦен.ТипЦен = Склады.ТипЦенРозничнойТорговли
	|ГДЕ
	|	ТипыЦен.Ссылка = &УстановкаЦенНоменклатуры
	|	И Склады.ВидСклада = &ВидСкладаРозничный
	|	И Склады.ПометкаУдаления = Ложь";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");

КонецФункции // ПолучитьРозничныеСкладыПоТипамЦенДокумента()

// Функция возвращает настройку для вложенного бизнес-процесса.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцесса.
//  Настройка     - СправочникСсылка.НастройкиБизнесПроцессов, настройка, из 
//					которой нужно получить параметры.
//
Функция ПолучитьНастройкуБизнесПроцесса(ТочкаМаршрута, Настройка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	Запрос.УстановитьПараметр("Настройка",     Настройка);
	Запрос .Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Параметры.Настройка КАК Настройка,
	|	Параметры.Выполнять КАК Выполнять
	|ИЗ
	|	Справочник.НастройкиБизнесПроцессов.ПараметрыТочекМаршрута КАК Параметры
	|ГДЕ
	|	Параметры.Ссылка = &Настройка
	|	И Параметры.ТочкаМаршрута = &ТочкаМаршрута";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Настройка;
	Иначе
		Возврат Справочники.НастройкиБизнесПроцессов.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьНастройкуБизнесПроцесса

// Процедура формирует массив задач для точки маршрута.
//
//Параметры:
//  ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцесса.
//  ФормируемыеЗадачи           - пустой массив для задач.
//  СтандартнаяОбработка        - булево,флаг выполнения стандартной обработки.
//
Процедура СформироватьЗадачиТочкиМаршрута(ТочкаМаршрутаБизнесПроцесса,
										  ФормируемыеЗадачи, 
										  СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ВыборкаПараметры = РаботаСБизнесПроцессами.ПолучитьПараметрыТочкиМаршрута(
							Настройка,
							ТочкаМаршрутаБизнесПроцесса);

	Если Не ВыборкаПараметры.Следующий() Тогда
		Возврат;
	КонецЕсли;

	Если Не ВыборкаПараметры.Выполнять Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗадач = РаботаСБизнесПроцессами.СформироватьПараметрыШапкиЗадач(ВыборкаПараметры);
	ПараметрыЗадач.Вставить("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	ПараметрыЗадач.Вставить("Исполнитель",   Инициатор);
	ПараметрыЗадач.Вставить("БизнесПроцесс", Ссылка);

	ФормируемыеЗадачи.Добавить(РаботаСБизнесПроцессами.УстановитьПараметрыЗадачи(ПараметрыЗадач));

КонецПроцедуры // СформироватьЗадачиТочкиМаршрута()

// Процедура формирует бизнес-процессы "ПереоценкаТоваровАТТ" для складов.
//
//  Параметры:
//  ТочкаМаршрута- ТочкаМаршрутаБизнесПроцесса.
//  ФормируемыеБизнесПроцессы - массив, элементами которого являются бизнес процессы.
//  Отказ - булево, флаг отказа от создания бизнес-процессов.
//
Процедура СформироватьБизнесПроцессыПереоценкаАТТ(ТочкаМаршрута,ФормируемыеБизнесПроцессы, Отказ)
	Перем МассивСкладов;

	Отказ = Не ПроверитьНаличиеРозничныхСкладовПоТипамЦенДокумента(МассивСкладов);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	НастройкаВложенногоПроцесса = ПолучитьНастройкуБизнесПроцесса(ТочкаМаршрута, Настройка);
	ТекДата = ТекущаяДата();
	Для Каждого ТекСклад Из МассивСкладов Цикл

		БизнесПроцесс = БизнесПроцессы.ПереоценкаТоваровАТТ.СоздатьБизнесПроцесс();
		БизнесПроцесс.Дата                     = ТекДата;
		БизнесПроцесс.Склад                    = ТекСклад;
		БизнесПроцесс.УстановкаЦенНоменклатуры = УстановкаЦенНоменклатуры;
		БизнесПроцесс.Настройка                = НастройкаВложенногоПроцесса;
		БизнесПроцесс.Инициатор                = Инициатор;
		ФормируемыеБизнесПроцессы.Добавить(БизнесПроцесс);

	КонецЦикла;

КонецПроцедуры // СформироватьБизнесПроцессыПереоценкаАТТ()

// Процедура вызывается перед стартом бизнес-процесса для выполнения проверок и
//заполнения реквизитов.
//
// Параметры:
//  Отказ - булево, флаг отказа.
//
Процедура ПередСтартомБизнесПроцесса(Отказ)

	ПроверитьВозможностьСтарта(Отказ, "Старт бизнес-процесса: " + Ссылка);

	Если Не Отказ Тогда
		ОбработатьСтартБизнесПроцесса();
	КонецЕсли;

КонецПроцедуры // ПередСтартомБизнесПроцесса()

// Процедура вызывается перед стартом бизнес-процесса для заполнения реквизитов.
//
Процедура ОбработатьСтартБизнесПроцесса()

	Если Инициатор.Пустая() Тогда
		Инициатор = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;

	ДатаСтарта = ТекущаяДата();

КонецПроцедуры // ОбработатьСтартБизнесПроцесса()

// Процедура устанавливает реквизиты бизнес-процесса перед завершением.
//
Процедура ОбработатьЗавершениеБизнесПроцесса()

	ДатаЗавершения = ТекущаяДата();

КонецПроцедуры // ОбработатьЗавершениеБизнесПроцесса()

// Процедура вызывается при создании задач переоценки склада АТТ.
//
// Параметры:
//  ТочкаМаршрута     - ТочкамаршрутаБизнесПроцесса.
//  ФормируемыеЗадачи - массив задач.
//  Отказ - булево, флаг отказа от создания задач.
//
Процедура ПриСозданииЗадачПереоценкаСкладаАТТ(ТочкаМаршрута, ФормируемыеЗадачи, Отказ)

	Если ФормируемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВыборкаПараметры = РаботаСБизнесПроцессами.ПолучитьПараметрыТочкиМаршрута(
						Настройка,
						ТочкаМаршрута);

	Если Не ВыборкаПараметры.Следующий() Тогда
		Возврат;
	КонецЕсли;

	Если Не ВыборкаПараметры.Выполнять Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗадач = РаботаСБизнесПроцессами.СформироватьПараметрыШапкиЗадач(ВыборкаПараметры);
	ПараметрыЗадач.Вставить("ТочкаМаршрута", ТочкаМаршрута);
	ПараметрыЗадач.Вставить("БизнесПроцесс", Ссылка);

	Для Каждого ЗадачаПользователя Из ФормируемыеЗадачи Цикл

		РаботаСБизнесПроцессами.УстановитьПараметрыЗадачи(ПараметрыЗадач, ЗадачаПользователя);

	КонецЦикла;
	
КонецПроцедуры // ПриСозданииЗадачПереоценкаСкладаАТТ()

////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ ТОЧЕК МАРШРУТА
//

// Процедура - обработчик события ПриЗавершении точки маршрута ПереоценкаОсуществлена.
//
Процедура ПереоценкаОсуществленаПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)

	ОбработатьЗавершениеБизнесПроцесса();

КонецПроцедуры // ПереоценкаОсуществленаПриЗавершении()

// Процедура - обработчик события ПередСтартом точки маршрута ПередСтартом.
//
Процедура НачатьПереоценкуПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)

	ПередСтартомБизнесПроцесса(Отказ)

КонецПроцедуры // НачатьПереоценкуПередСтартом()

// Процедура - обработчик события ПриСозданииЗадач точки маршрута "ПереоценкаСкладаАТТ".
//
Процедура ПереоценкаСкладаАТТПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса,
											  ФормируемыеЗадачи,
											  Отказ)

	ПриСозданииЗадачПереоценкаСкладаАТТ(ТочкаМаршрутаБизнесПроцесса,
										ФормируемыеЗадачи, 
										Отказ);

КонецПроцедуры // ПереоценкаСкладаАТТПриСозданииЗадач()

// Процедура - обработчик события ПередСозданиемВложенныхБизнесПроцессов точки
//маршрута "ПереоценкаСкладаАТТ".
//
Процедура ПереоценкаСкладаАТТПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса,
																	ФормируемыеБизнесПроцессы,
																	Отказ)

	СформироватьБизнесПроцессыПереоценкаАТТ(ТочкаМаршрутаБизнесПроцесса,
											ФормируемыеБизнесПроцессы,
											Отказ);

КонецПроцедуры // ПереоценкаСкладаАТТПередСозданиемВложенныхБизнесПроцессов()

// Процедура - обработчик события "ПередВыполнением" точки маршрута "ПереоценкаСкладаАТТ".
//
Процедура ПереоценкаСкладаАТТПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)

	ПроверитьВозможностьВыполненияЗадач(Задача, Отказ);

КонецПроцедуры // ПереоценкаСкладаАТТПередВыполнением()

// Процедура - обработчик события "ПередСозданиемЗадач" точки маршрута "ПроконтролироватьПереоценку".
//
Процедура ПроконтролироватьПереоценкуПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса,
														 ФормируемыеЗадачи, 
														 СтандартнаяОбработка)

	СформироватьЗадачиТочкиМаршрута(ТочкаМаршрутаБизнесПроцесса,
									ФормируемыеЗадачи,
									СтандартнаяОбработка);

КонецПроцедуры // ПроконтролироватьПереоценкуПередСозданиемЗадач()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА
//

// Процедура - обработчик события ПриКопировании
//
Процедура ПриКопировании(ОбъектКопирования)

	УстановкаЦенНоменклатуры = Документы.УстановкаЦенНоменклатуры.ПустаяСсылка();
	ЗавершенПринудительно = Ложь;
	ДатаЗавершения = Дата(1,1,1);
	ДатаСтарта     = Дата(1,1,1);

КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		УстановкаЦенНоменклатуры = Основание.Ссылка;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()


