#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И НАСТРОЙКИ ОТБОРА ДЛЯ ЭКСПОРТА

// Процедура установки отбора по бизнес-процессу.
//
// Параметры
//  БизнесПроцесс - БизнесПроцессСсыкал.СогласованиеЗаказаПокупателя.
//
Процедура УстановитьБыстрыйОтборПоБизнесПроцессу(БизнесПроцесс) Экспорт

	ОтборПоБизнесПроцессу = УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("БизнесПроцесс");
	Если ОтборПоБизнесПроцессу = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтборПоБизнесПроцессу.Установить(БизнесПроцесс);

	Если ЗначениеЗаполнено(УниверсальныйОтчет.ДатаНач) И УниверсальныйОтчет.ДатаНач > БизнесПроцесс.Дата Тогда

		УниверсальныйОтчет.ДатаНач = НачалоДня(БизнесПроцесс.Дата);

	КонецЕсли;

КонецПроцедуры // УстановитьБыстрыйОтборПоБизнесПроцессу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	УниверсальныйОтчет.ОтрицательноеКрасным = Ложь;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Задача КАК Задача,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Задача),
	|	Данные.Задача.Исполнитель КАК Исполнитель,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Задача.Исполнитель) КАК ИсполнительПредставление,
	|	Данные.Результат КАК Виза,
	|	Данные.Рецензия КАК Рецензия,
	|	Данные.БизнесПроцесс КАК БизнесПроцесс,
	|	ПРЕДСТАВЛЕНИЕ(Данные.БизнесПроцесс),
	|	Данные.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ПРЕДСТАВЛЕНИЕ(Данные.ТочкаМаршрута),
	|	Данные.БизнесПроцесс.СостояниеСогласования КАК СостояниеСогласования,
	|	Данные.НомерЦикла КАК НомерЦикла
	|{ВЫБРАТЬ
	|	БизнесПроцесс.*,
	|	Задача.*,
	|	Исполнитель.*,
	|	Виза,
	|	Рецензия,
	|	ТочкаМаршрута.*,
	|	СостояниеСогласования}
	|ИЗ
	|	РегистрСведений.Рецензии КАК Данные
	|ГДЕ
	|	Данные.Задача.Выполнена = ИСТИНА
	|	И Данные.БизнесПроцесс.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|{ГДЕ
	|	Данные.БизнесПроцесс.*,
	|	Данные.ТочкаМаршрута.*,
	|	Данные.Задача.Исполнитель.*}
	|{УПОРЯДОЧИТЬ ПО
	|	БизнесПроцесс.*,
	|	Задача.*,
	|	Исполнитель.*,
	|	Виза.*,
	|	ТочкаМаршрута.*}
	|ИТОГИ
	|	""№ "" + ПРЕДСТАВЛЕНИЕ(НомерЦикла) КАК НомерЦикла
	|ПО
	|	БизнесПроцесс,
	|	НомерЦикла,
	|	ТочкаМаршрута
	|{ИТОГИ ПО
	|	БизнесПроцесс.*,
	|	НомерЦикла,
	|	ТочкаМаршрута.*}
	|АВТОУПОРЯДОЧИВАНИЕ";
	

	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("БизнесПроцесс",         "Бизнес-процесс");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Задача",                "Задача пользователя");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТочкаМаршрута",         "Точка маршрута");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СостояниеСогласования", "Состояние");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НомерЦикла",            "Цикл согласования");

	УниверсальныйОтчет.мСтруктураФорматаПолей.Вставить("РезультатСогласования", "БЛ=Не согласован; БИ=Согласован");
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	//УниверсальныйОтчет.ДобавитьПоказатель("ЗначениеТочкиЗаказа", "Ед. хранения", Истина, "ЧЦ=15; ЧДЦ=3", "ЗначениеТочкиЗаказа", "Значение" + Символы.ПС + "точки заказа");
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("БизнесПроцесс");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("БизнесПроцесс");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	УниверсальныйОтчет.ВыводитьОбщиеИтоги            = Ложь;
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи       = Истина;
	УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Исполнитель", ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Виза",        ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Рецензия",    ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("СостояниеСогласования",   ТипРазмещенияРеквизитовИзмерений.Отдельно);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт

	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТекущаяДата", ТекущаяДата());
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПустаяДата", Дата( 1 , 1 , 1));
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТочкиМаршрута", РаботаСБизнесПроцессами.ПолучитьТочкиСогласованияЗаказа());

	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;
УниверсальныйОтчет.мРежимВводаПериода = 0;

#КонецЕсли
