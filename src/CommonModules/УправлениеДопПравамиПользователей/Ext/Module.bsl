// Функция возвращает право печатать непроведенные документы.
//
// Параметры:
//  Проведен     - признак проведен ли документ (если документ не проводной,
//                 то либо параметр опускается, либо равен Истина)
//
// Возвращаемое значение:
//  Истина - если можно печатать, иначе Ложь.
//
Функция РазрешитьПечатьНепроведенныхДокументов(Проведен = Истина) Экспорт

	Если Проведен Тогда
		Возврат Истина;
	КонецЕсли;

	РазрешеноПечатать = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПечатьНепроведенныхДокументов, Ложь);
	Если РазрешеноПечатать.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли РазрешеноПечатать.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПечатать[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьПечатьНепроведенныхДокументов()

// Функция возвращает право проводить документы в рознице с нулевой ценой
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно проводить документы в рознице с нулевой ценой
//
Функция РазрешитьНулевыеЦеныВРознице() Экспорт

	РазрешеноПроводить = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВРознице, Ложь);
	Если РазрешеноПроводить.Количество() = 0 Тогда
		Возврат ложь;
	ИначеЕсли РазрешеноПроводить.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПроводить[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьНулевыеЦеныВРознице()

// Функция возвращает право закрывать смену в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно закрывать смену в рознице.
//
Функция РазрешитьЗакрытиеСмены(Пользователь = Неопределено) Экспорт

	РазрешеноЗакрытиеСмены = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗакрытиеСмены, Ложь);
	Если (РазрешеноЗакрытиеСмены.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноЗакрытиеСмены.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноЗакрытиеСмены[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьЗакрытиеСмены()

// Функция возвращает право аннулировать чеки в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно аннулировать чеки в рознице.
//
Функция РазрешитьАннулированиеЧека(Пользователь = Неопределено) Экспорт

	РазрешеноАннулировать = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека, Ложь);
	Если (РазрешеноАннулировать.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноАннулировать.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноАннулировать[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьАннулированиеЧека()

// Функция возвращает право получать отчет о смене без гашения в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно получать отчет о смене без гашения в рознице.
//
Функция РазрешитьОтчетОСменеБезГашения(Пользователь = Неопределено) Экспорт

	РазрешеноПолучениеОтчетаОСменеБезГашения = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь);
	Если (РазрешеноПолучениеОтчетаОСменеБезГашения.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноПолучениеОтчетаОСменеБезГашения.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПолучениеОтчетаОСменеБезГашения[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьОтчетОСменеБезГашения()

// Функция возвращает право создания чека возврата в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьЧекВозврата(Пользователь = Неопределено) Экспорт

	РазрешенЧекВозврата = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата, Ложь);
	Если (РазрешенЧекВозврата.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешенЧекВозврата.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешенЧекВозврата[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьЧекВозврата()

// Функция возвращает право назначения ручных скидок в рознице
//
// Параметры:
//  Пользователь - пользователь, для которого определяется список доступных ролей.
//
// Возвращаемое значение:
//  Истина - если можно создавать чек возврата в рознице.
//
Функция РазрешитьНазначениеРучныхСкидок(Пользователь = Неопределено) Экспорт

	РазрешеноНазначениеРучныхСкидок = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок, Ложь);
	Если (РазрешеноНазначениеРучныхСкидок.Количество() = 0) Тогда
		Возврат Ложь;
	ИначеЕсли (РазрешеноНазначениеРучныхСкидок.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноНазначениеРучныхСкидок[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьНазначениеРучныхСкидок()

// Функция возвращает право проводить документы "Реализация товаров" с нулевой ценой
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно проводить документ "Реализация товаров" с нулевой ценой
//
Функция РазрешитьНулевыеЦеныВОпте() Экспорт

	РазрешеноПроводить = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНулевыеЦеныВОпте, Ложь);
	Если РазрешеноПроводить.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли РазрешеноПроводить.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПроводить[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьНулевыеЦеныВОпте()

// Функция возвращает признак защищать таблицу от редактирования или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
//
Функция ЗащитаТаблиц() Экспорт

	РазрешеноРедактирование = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеТаблиц, Ложь);

	Если (РазрешеноРедактирование.Количество() = 0)
	 ИЛИ (РазрешеноРедактирование.Количество() > 1) Тогда
		Возврат Ложь;
	Иначе
		Возврат НЕ РазрешеноРедактирование[0].Значение;
	КонецЕсли;

КонецФункции // ЗащитаТаблиц()

// Функция возвращает признак можно ли пользователю изменять цены в расходных накладных или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно менять цены, иначе Ложь.
//
Функция РазрешитьРедактированиеЦенВДокументах() Экспорт

	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеЦенВДокументах, Ложь);

	Если СписокФильтров.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли СписокФильтров.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьРедактированиеЦенВДокументах()

// Функция возвращает нужно ли рассчитывать долг при открытии форм.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если нужно рассчитывать, иначе Ложь.
//
Функция РассчитыватьДолгПриОткрытииФорм() Экспорт

	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РассчитыватьДолгПриОткрытииФорм, Истина);

	Если СписокФильтров.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли СписокФильтров.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // РассчитыватьДолгПриОткрытииФорм()

// Функция возвращает право редактировать КИ в списке
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно редактировать КИ в списке
//
Функция РазрешитьРедактированиеКИвСписке(Пользователь = Неопределено) Экспорт

	Разрешено = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактированиеКИвСписке, Ложь);
	Если Разрешено.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли Разрешено.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Разрешено[0].Значение;
	КонецЕсли;

КонецФункции // ЗапретитьРедактированиеКИвСписке()

// Функция возвращает признак можно ли превышать остаток товаров по организации при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
// Функция возвращает признак можно ли превышать остаток товаров по организации при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОстаткаТоваровОрганизации(Организация = Неопределено) Экспорт

	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровОрганизации, Ложь);

	Если (СписокФильтров.Количество() = 0)
	 ИЛИ (СписокФильтров.Количество() > 1) Тогда
		ПравоПревышатьОстаток = Истина;
	Иначе
		ПравоПревышатьОстаток = СписокФильтров[0].Значение;
	КонецЕсли;

	ОтражатьВРеглУчете = ?(НЕ ЗначениеЗаполнено(Организация), Ложь, Организация.ОтражатьВРегламентированномУчете);

	Возврат ПравоПревышатьОстаток ИЛИ НЕ ОтражатьВРеглУчете;

КонецФункции // РазрешеноПревышениеОстаткаТоваровОрганизации()

// Процедура проверяет цены товаров (услуг) на допустимость для данного пользователя
//
// Параметры:
//  ДокументОбъект     - документ; 
//  ИмяТабличнойЧасти  - строка, имя табличной части, которую надо проверять, 
//  Отказ              - признак отказа от проведения документа
//
Процедура ПроверитьДопустимостьЦенОтпуска(ДокументОбъект, ИмяТабличнойЧасти, Отказ) Экспорт

	Запрос = Новый Запрос;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ИмяДокумента = МетаданныеДокумента.Имя;
	ЕстьХарактеристикаНоменклатуры = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти);

	ДополнительныеПоля         = "";
	ЛевоеСоединение            = "";
	ПоляДляОбъединенияЗапросов = "";

	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа, Неопределено);
	НомерТипаЦен = 0;
	Для Каждого ТипЦены Из СписокФильтров Цикл
		Если НЕ ЗначениеЗаполнено(ТипЦены.Значение) Тогда

			// Если хотя бы для одного набора прав не задан тип цен, ниже которого нельзя продавать,
			// то значит можно продавать по любой цене.
			Возврат;
		КонецЕсли;

		НомерТипаЦен = НомерТипаЦен + 1;

		Запрос.УстановитьПараметр("ДатаСреза", ДокументОбъект.Ссылка.Дата);
		Запрос.УстановитьПараметр("ЦенаВключаетНДС" + НомерТипаЦен, ТипЦены.Значение.ЦенаВключаетНДС);

		Если ТипЦены.Значение.Рассчитывается Тогда
			Запрос.УстановитьПараметр("ТипЦен" + НомерТипаЦен, ТипЦены.Значение.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенДинамический" + НомерТипаЦен, ТипЦены.Значение);
			Запрос.УстановитьПараметр("Коэффициент" + НомерТипаЦен, ТипЦены.Значение.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен" + НомерТипаЦен, ТипЦены.Значение);
			Запрос.УстановитьПараметр("Коэффициент" + НомерТипаЦен, 0);
		КонецЕсли;

		ЛевоеСоединение = ЛевоеСоединение + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦен" + НомерТипаЦен + " И (Номенклатура" + ?(ЕстьХарактеристикаНоменклатуры, ", ХарактеристикаНоменклатуры", "") + ") В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.Номенклатура " + ?(ЕстьХарактеристикаНоменклатуры, ", Док.ХарактеристикаНоменклатуры", "")+ " ИЗ Документ." + ИмяДокумента + "."+ИмяТабличнойЧасти+" КАК Док ГДЕ Док.Ссылка = &ДокументСсылка)) КАК ЦеныКомпании" + НомерТипаЦен + "
		|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = Док.Номенклатура";
		Если ЕстьХарактеристикаНоменклатуры Тогда
			Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры" , Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ЛевоеСоединение = ЛевоеСоединение + "
			|	И
			|	ЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦен" + НомерТипаЦен + " И (Номенклатура, ХарактеристикаНоменклатуры) В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.Номенклатура , ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры ИЗ Документ." + ИмяДокумента + "."+ИмяТабличнойЧасти+" КАК Док ГДЕ Док.Ссылка = &ДокументСсылка)) КАК ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + "
			|	ПО ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Номенклатура = Док.Номенклатура
			|	И
			|	ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = &ПустаяХарактеристикаНоменклатуры
			|";

			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	&ЦенаВключаетНДС" + НомерТипаЦен +" КАК ЦенаВключаетНДС" + НомерТипаЦен +",
			|	&Коэффициент" + НомерТипаЦен +" КАК ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен +",
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Цена 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".Цена КОНЕЦ  КАК Цена" + НомерТипаЦен;
			Если ТипЦены.Значение.Рассчитывается Тогда
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
				|		ВложенныйЗапросБезХарактеристики" + НомерТипаЦен +".ПроцентСкидкиНаценкиБезХарактеристики
				|	ИНАЧЕ ВложенныйЗапрос" + НомерТипаЦен +".ПроцентСкидкиНаценки КОНЕЦ  КАК ПроцентСкидкиНаценки" + НомерТипаЦен;
			КонецЕсли;
			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Валюта 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".Валюта КОНЕЦ КАК Цена" + НомерТипаЦен + "Валюта,
			|	ВЫБОР КОГДА ЦеныКомпании" + НомерТипаЦен + ".Цена ЕСТЬ NULL ТОГДА
			|		ЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ЕдиницаИзмерения 
			|	ИНАЧЕ ЦеныКомпании" + НомерТипаЦен + ".ЕдиницаИзмерения КОНЕЦ КАК Цена" + НомерТипаЦен + "Единица
			|";

		Иначе
			ДополнительныеПоля = ДополнительныеПоля + "," + "
			|	&ЦенаВключаетНДС" + НомерТипаЦен +" КАК ЦенаВключаетНДС" + НомерТипаЦен;

			Если ТипЦены.Значение.Рассчитывается Тогда
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ЦеныКомпании" + НомерТипаЦен + ".Цена * (1 + ВложенныйЗапрос" + НомерТипаЦен +".ПроцентСкидкиНаценки / 100) КАК Цена"   + НомерТипаЦен + ",
				|	ЦеныКомпании" + НомерТипаЦен + ".Валюта КАК Цена" + НомерТипаЦен + "Валюта,
				|	ЦеныКомпании" + НомерТипаЦен + ".ЕдиницаИзмерения КАК Цена" + НомерТипаЦен + "Единица";
			Иначе
				ДополнительныеПоля = ДополнительныеПоля + "," + "
				|	ЦеныКомпании" + НомерТипаЦен + ".Цена КАК Цена"   + НомерТипаЦен + ",
				|	ЦеныКомпании" + НомерТипаЦен + ".Валюта КАК Цена" + НомерТипаЦен + "Валюта,
				|	ЦеныКомпании" + НомерТипаЦен + ".ЕдиницаИзмерения КАК Цена" + НомерТипаЦен + "Единица";
			КонецЕсли;

		КонецЕсли;
		Если ТипЦены.Значение.Рассчитывается Тогда
			ЛевоеСоединение = ЛевоеСоединение + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".Номенклатура КАК Номенклатура";
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + ",
				|		ДинамическиеЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры";
			КонецЕсли;
			ЛевоеСоединение = ЛевоеСоединение + "
			|		ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦенДинамический" + НомерТипаЦен + " И (Номенклатура" + ?(ЕстьХарактеристикаНоменклатуры, ", ХарактеристикаНоменклатуры", "") + ") В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.Номенклатура " + ?(ЕстьХарактеристикаНоменклатуры, ", Док.ХарактеристикаНоменклатуры", "")+ " ИЗ Документ." + ИмяДокумента + "."+ИмяТабличнойЧасти+" КАК Док ГДЕ Док.Ссылка = &ДокументСсылка)
			|		) КАК ДинамическиеЦеныКомпании" + НомерТипаЦен;

			ЛевоеСоединение = ЛевоеСоединение + "
			|	)КАК ВложенныйЗапрос" + НомерТипаЦен +"
			|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = ВложенныйЗапрос" + НомерТипаЦен +".Номенклатура";
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + "
				|	И ЦеныКомпании" + НомерТипаЦен + ".ХарактеристикаНоменклатуры = ВложенныйЗапрос" + НомерТипаЦен +".ХарактеристикаНоменклатуры";
			КонецЕсли;
			Если ЕстьХарактеристикаНоменклатуры Тогда
				ЛевоеСоединение = ЛевоеСоединение + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|		ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".Номенклатура КАК Номенклатура,
				|		ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен + ".ПроцентСкидкиНаценки
				|		КАК ПроцентСкидкиНаценкиБезХарактеристики
				|		ИЗ
				|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ТипЦен = &ТипЦенДинамический" + НомерТипаЦен + " И (Номенклатура, ХарактеристикаНоменклатуры) В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.Номенклатура , ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры ИЗ Документ." + ИмяДокумента + "."+ИмяТабличнойЧасти+" КАК Док ГДЕ Док.Ссылка = &ДокументСсылка)
				|		) КАК ДинамическиеЦеныКомпанииБезХарактеристики" + НомерТипаЦен;

				ЛевоеСоединение = ЛевоеСоединение + "
				|	)КАК ВложенныйЗапросБезХарактеристики" + НомерТипаЦен +"
				|	ПО ЦеныКомпании" + НомерТипаЦен + ".Номенклатура = ВложенныйЗапрос" + НомерТипаЦен +".Номенклатура";
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	"+?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти),"Док.ЕдиницаИзмерения", "Док.Номенклатура.ЕдиницаХраненияОстатков")+" КАК ЕдиницаИзмерения,
	|	"+?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),"Док.СтавкаНДС,", "")+"
	|	ВЫБОР КОГДА Количество = 0 ТОГДА Док.Цена ИНАЧЕ Док.Сумма/Док.Количество КОНЕЦ КАК Цена,
	|	"+?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента),"Док.Ссылка.ВалютаДокумента", "&ВалютаРеглУчета")
	+" КАК ВалютаДокумента,
	|	Док.НомерСтроки
	|" + ДополнительныеПоля + "
	|
	|ИЗ 
	|	Документ." + ИмяДокумента + "."+ИмяТабличнойЧасти+" КАК Док
	|" + ЛевоеСоединение + "
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	ПроверилиНаличиеЦенВЗапросе = Ложь;

	СоответствиеКурсыВалют = Новый Соответствие;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 

		Если НЕ ПроверилиНаличиеЦенВЗапросе Тогда
			Если РезультатЗапроса.Колонки.Найти("Цена") <> Неопределено Тогда

				ПроверилиНаличиеЦенВЗапросе = Истина;

			Иначе

				Возврат;

			КонецЕсли;
		КонецЕсли;

		НомерТипаЦен = 1;

		ЦенаТовара   = ?(НЕ ЗначениеЗаполнено(Выборка.Цена), 0, Окр(Выборка.Цена,2));
		ВалютаТовара = Выборка.ВалютаДокумента;

		Если СоответствиеКурсыВалют[ВалютаТовара] = Неопределено Тогда
			СтруктураКурсаЦеныТовара             = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаТовара, ДокументОбъект.Дата);
			КурсЦеныТовара                       = СтруктураКурсаЦеныТовара.Курс;
			КратностьЦеныТовара                  = СтруктураКурсаЦеныТовара.Кратность;
			СоответствиеКурсыВалют[ВалютаТовара] = СтруктураКурсаЦеныТовара;
		Иначе
			СтруктураКурсаЦеныТовара = СоответствиеКурсыВалют[ВалютаТовара];
			КурсЦеныТовара           = СтруктураКурсаЦеныТовара.Курс;
			КратностьЦеныТовара      = СтруктураКурсаЦеныТовара.Кратность;
		КонецЕсли;

		МинимальнаяЦена = 0;

		Пока НомерТипаЦен <> 0 Цикл

			Если РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен) <> Неопределено
			   И РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен + "Валюта") <> Неопределено
			   И РезультатЗапроса.Колонки.Найти("Цена" + НомерТипаЦен + "Единица") <> Неопределено Тогда

				ЦенаПроверки    = Выборка["Цена" + НомерТипаЦен];
				ВалютаПроверки  = Выборка["Цена" + НомерТипаЦен + "Валюта"];
				ЕдиницаПроверки = Выборка["Цена" + НомерТипаЦен + "Единица"];
				ЦенаВключаетНДС = Выборка["ЦенаВключаетНДС" + НомерТипаЦен];

				// Считаем, что если не задана цена или валюта цены
				// (нет цены данного типа для данной номенклатуры), то
				// проверка прошла
				Если НЕ ЗначениеЗаполнено(ВалютаПроверки)
				 Или НЕ ЗначениеЗаполнено(ЦенаПроверки) Тогда
					МинимальнаяЦена = 0;
					Прервать; 
				КонецЕсли;

				Если РезультатЗапроса.Колонки.Найти("ПроцентСкидкиНаценки" + НомерТипаЦен) <> Неопределено Тогда
					ПроцентСкидкиНаценки = Выборка["ПроцентСкидкиНаценки" + НомерТипаЦен];
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПроцентСкидкиНаценки)
				   И РезультатЗапроса.Колонки.Найти("ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен) <> Неопределено Тогда
					ПроцентСкидкиНаценки = Выборка["ПроцентСкидкиНаценкиИзСправочника" + НомерТипаЦен];
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПроцентСкидкиНаценки) Тогда
					ПроцентСкидкиНаценки = 0;
				КонецЕсли;

				ЦенаПроверки = Окр(ЦенаПроверки * (1 + ПроцентСкидкиНаценки / 100), 2);

				Если СоответствиеКурсыВалют[ВалютаПроверки] = Неопределено Тогда
					СтруктураКурсаЦеныПроверки             = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПроверки, ДокументОбъект.Дата);
					КурсЦеныПроверки                       = СтруктураКурсаЦеныПроверки.Курс;
					КратностьЦеныПроверки                  = СтруктураКурсаЦеныПроверки.Кратность;
					СоответствиеКурсыВалют[ВалютаПроверки] = СтруктураКурсаЦеныПроверки;
				Иначе
					СтруктураКурсаЦеныПроверки = СоответствиеКурсыВалют[ВалютаПроверки];
					КурсЦеныПроверки           = СтруктураКурсаЦеныПроверки.Курс;
					КратностьЦеныПроверки      = СтруктураКурсаЦеныПроверки.Кратность;
				КонецЕсли;

				ЦенаПроверки = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(ЦенаПроверки, ЕдиницаПроверки, Выборка.ЕдиницаИзмерения);

				ПересчитаннаяЦенаПроверки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЦенаПроверки,
																	   ВалютаПроверки,        ВалютаТовара,
																	   КурсЦеныПроверки,      КурсЦеныТовара,
																	   КратностьЦеныПроверки, КратностьЦеныТовара);

				ПересчитаннаяЦенаПроверки = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ПересчитаннаяЦенаПроверки,
																					 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
																					// ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
																					 ЦенаВключаетНДС,
																					 ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС",МетаданныеДокумента) 
																					 И ДокументОбъект.УчитыватьНДС, 
																					 ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС",МетаданныеДокумента) 
																					 И ДокументОбъект.СуммаВключаетНДС, 
																					 ?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС",МетаданныеДокумента, ИмяТабличнойЧасти),
																					 УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС),0));

				ПересчитаннаяЦенаПроверки = Окр(ПересчитаннаяЦенаПроверки, 2);

				МинимальнаяЦена = ?(НомерТипаЦен = 1, ПересчитаннаяЦенаПроверки, Мин(МинимальнаяЦена, ПересчитаннаяЦенаПроверки));

				Если МинимальнаяЦена = 0 Тогда
					НомерТипаЦен = 0;
				Иначе
					НомерТипаЦен = НомерТипаЦен + 1;
				КонецЕсли;

			Иначе

				НомерТипаЦен = 0;

			КонецЕсли;

		КонецЦикла;

		Если МинимальнаяЦена > ЦенаТовара Тогда
			ТекстСообщения = "Строка "      + Выборка.НомерСтроки + ": "
					+ "Для товара " + Выборка.Номенклатура
					+ Символы.ПС + "    цена за единицу ниже порогового значения (цена: "
					+ Формат(ЦенаТовара, "ЧДЦ=2; ЧН=0") + " " + ВалютаТовара
					+ ", минимальное значение: "
					+ Формат(МинимальнаяЦена, "ЧДЦ=2; ЧН=0") + " " + ВалютаТовара
					+ ")";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьДопустимостьЦенОтпуска()

// Функция возвращает признак можно ли превышать остаток товаров на складе при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОстаткаТоваровНаСкладе() Экспорт

	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровНаСкладе, Ложь);

	Если СписокФильтров.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли СписокФильтров.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат СписокФильтров[0].Значение;
	КонецЕсли;

КонецФункции // РазрешеноПревышениеОстаткаТоваровНаСкладе()

// Функция возвращает признак можно ли превышать объем заказа при отпуске товаров.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если разрешено превышать остаток, иначе Ложь.
//
Функция РазрешеноПревышениеОбъемаЗаказаПриОтгрузке() Экспорт

	СписокПрав = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьПревышениеОбъемЗаказаПриОтгрузке,
		Ложь);

	Если СписокПрав.Количество() = 0 Тогда
		НуженКонтроль = Ложь;
	ИначеЕсли СписокПрав.Количество() > 1 Тогда
		НуженКонтроль = Истина;
	Иначе
		НуженКонтроль = СписокПрав[0].Значение;
	КонецЕсли;
		
	Возврат НЕ НуженКонтроль;

КонецФункции // РазрешеноПревышениеОбъемаЗаказаПриОтгрузке()


