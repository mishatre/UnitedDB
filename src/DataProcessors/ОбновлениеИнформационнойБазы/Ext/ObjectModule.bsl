//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Перем мСоответствиеИмен;

// Процедура устанавливает значения полей регистра КоллизииПриОбмене при обновлении на 10.3.5.1
Процедура ПровестиУстановкуПолейРегистраКоллизииПриОбмене()
	
	ЗаголовокСообщения = "Не удалось обновить регистр КоллизииПриОбмене!";
	Выборка = РегистрыСведений.КоллизииПриОбмене.Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.КоллизииПриОбмене.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = Выборка.СсылкаНаОбъект;
		МенеджерЗаписи.УзелОбмена = Выборка.УзелОбмена;
		МенеджерЗаписи.ДатаКоллизии = Выборка.ДатаКоллизии;
		
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
		МенеджерЗаписи.РезультатРассмотренияКоллизии = Перечисления.РезультатРассмотренияКоллизии.ОбъектЗамененНаВерсиюПоступившуюПриОбмене;
		МенеджерЗаписи.КоллизияРассмотрена = Истина;
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(("Ошибка при записи информации о коллизии для объекта """ + Строка(Выборка.СсылкаНаОбъект) + """ по причине: " + ОписаниеОшибки()),, ЗаголовокСообщения);
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура устанавливает значения новых реквизитов платежных поручений при обновлении на 10.3.10
Процедура ОбновитьПлатежныеПорученияНаПеречислениеНалогов()

	#Если Клиент Тогда
		Состояние("Обновление платежных поручений на перечисление налогов");
	#КонецЕсли
	
	НачатьТранзакцию();
	
	// Перед обновлением требуется отключить использование даты запрета редактирования для полных прав
	ПрименятьДатуЗапретаДляПолныхПрав = Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить();
	Если ПрименятьДатуЗапретаДляПолныхПрав Тогда
		Константы.ПрименятьДатуЗапретаДляПолныхПрав.Установить(Ложь);
	КонецЕсли;
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ) КАК ДеньДаты,
	|	Док.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК Док
	|ГДЕ
	|	Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеНалога)
	|	И (Док.ПеречислениеВБюджет = ЛОЖЬ
	|			ИЛИ Док.ВидПеречисленияВБюджет = ЗНАЧЕНИЕ(Перечисление.ВидыПеречисленийВБюджет.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДеньДаты
	|ИТОГИ ПО
	|	ДеньДаты";
	Результат = Запрос.Выполнить();
	
	ВыборкаПоДатам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДеньДаты");
	Пока ВыборкаПоДатам.Следующий() Цикл
		
		#Если Клиент Тогда
			Состояние("Обновление платежных поручений на перечисление налогов за " + ВыборкаПоДатам.ДеньДаты);
		#КонецЕсли
	
		Выборка = ВыборкаПоДатам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокОбъект.ПеречислениеВБюджет = Истина;
			ДокОбъект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
			
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ДокОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
	
	КонецЦикла;

	// Вернуть использование даты запрета изменения данных для полных прав
	Если ПрименятьДатуЗапретаДляПолныхПрав Тогда
		Константы.ПрименятьДатуЗапретаДляПолныхПрав.Установить(Истина);
	КонецЕсли;                                                       
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	ЗафиксироватьТранзакцию();
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// Процедура выполняет заполнение ресурса "Подключено" регистра сведений "ТорговоеОборудование",
//
Процедура ВыполнитьОбновлениеРегистраСведенийТорговоеОборудование()

	РегТО = РегистрыСведений.ТорговоеОборудование;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РегТО.Идентификатор,
	|	РегТО.Модель.ОбработкаОбслуживания.Вид КАК Вид
	|ИЗ
	|	РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|	НЕ РегТО.Подключено
	|	ИЛИ РегТО.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыТорговогоОборудования.ПустаяСсылка)
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МЗ = РегТО.СоздатьМенеджерЗаписи();

		МЗ.Идентификатор = Выборка.Идентификатор;

		МЗ.Прочитать();

		МЗ.Подключено = Истина;
		МЗ.Вид        = Выборка.Вид;

		Попытка
			МЗ.Записать(Истина);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры // ВыполнитьОбновлениеРегистраСведенийТорговоеОборудование()

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки
//
Функция ПолучитьНомерРелиза(НомерВерсии)
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для х = 1 По СтрДлина(НомерВерсии) Цикл
	
		Если Сред(НомерВерсии, х, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = х - 1;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()


// В документ добавлена новая т.ч. Покупатели, в неё необходимо добавить одну строку.
// В колонку Покупатель пишем контрагента-комиссионера из шапки
//
Процедура ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах()
	
	#Если Клиент Тогда
	//Обновление документов "Отчет комиссионера о продажах", добавление строки в табличную часть Покупатели
	Состояние("Выполняется обновление документов ""Отчет комиссионера о продажах""");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|ПОМЕСТИТЬ ВТ_ОтчетыКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтчетКомиссионераОПродажах.Покупатели.НомерСтроки) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК ОтчетКомиссионера,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Проведен
	|			ТОГДА 2
	|		КОГДА СчетФактураВыданный.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_СчетФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ПО СчетФактураВыданный.ДокументОснование = ВТ_ОтчетыКомиссионера.Ссылка
	|			И (СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СчетФактуры.ОтчетКомиссионера КАК ОтчетКомиссионера,
	|	МАКСИМУМ(ВТ_СчетФактуры.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СчетФактуры.ОтчетКомиссионера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК Ссылка,
	|	ВТ_ОтчетыКомиссионера.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ВТ_СчетФактуры.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВыставленСФ,
	|	ВТ_СчетФактуры.Дата КАК ДатаСФ,
	|	ВТ_СчетФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ВТ_Приоритет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|			ПО ВТ_Приоритет.ОтчетКомиссионера = ВТ_СчетФактуры.ОтчетКомиссионера
	|				И ВТ_Приоритет.Приоритет = ВТ_СчетФактуры.Приоритет
	|		ПО ВТ_ОтчетыКомиссионера.Ссылка = ВТ_Приоритет.ОтчетКомиссионера";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтчетКомиссионера = Выборка.Ссылка.ПолучитьОбъект();
			СтрокаТЧ = ОтчетКомиссионера.Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
						
			Попытка
				ОтчетКомиссионера.ОбменДанными.Загрузка = Истина;
				ОтчетКомиссионера.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// Процедура производит установку даты применения Постановления 1137 в значение 01.04.2012
//
Процедура УстановитьДатуПримененияПостановления1137() 
	
	НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();
	
	Если НЕ ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		ИЛИ НачалоПримененияИсправленныхСчетовФактур > '20120401' Тогда
		
		Константы.НачалоПримененияИсправленныхСчетовФактур.Установить('20120401');
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт

	// Подготовка к выводу формы описания обновлений.
	#Если Клиент Тогда
	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();

	ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь;
	#КонецЕсли


	// Обновление информационной базы.
	
	// Проверим, возможно ли обновление.
	ПервыйЗапуск = (Константы.НомерВерсииКонфигурации.Получить() = "");
	ТекущаяВерсияИБ    = Константы.НомерВерсииКонфигурации.Получить();
	ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	ВозможныеВерсииДляПерехода = """10.2.13""";
	Для Сч = 1 По 32 Цикл
		ОчереднаяВерсия = ", ""10.3."+Формат(Строка(Сч),"ЧГ=0")+"""";
		ВозможныеВерсииДляПерехода = ВозможныеВерсииДляПерехода + ОчереднаяВерсия;
	КонецЦикла;
	Если Не ПервыйЗапуск 
	   И Найти(ВозможныеВерсииДляПерехода,ТекущийНомерРелиза) = 0 Тогда
		ТекстСообщения = "Переход с версии """ + ТекущийНомерРелиза + """ на версию """ + Метаданные.Версия + 
		               """ конфигурации ""Управление торговлей, редакция 10.3""
		               |Не поддерживается!
		               |Переход возможен только с версий: "+ ВозможныеВерсииДляПерехода + ".
		               |Предварительно нужно обновиться на одну из перечисленных версий.";
		#Если Клиент Тогда
		Предупреждение(ТекстСообщения);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		#КонецЕсли
		Возврат;

	КонецЕсли;
	
	// Последовательно вызываются функции для обновления с соответствующей версии.

	//Вызов функций заполнения данных для пустой информационной базы
	Если ПервыйЗапуск Тогда
		#Если Клиент Тогда
		Отказ = Ложь;
		ОбновлениеИнформационнойБазыКлиент.ОбновитьИнформационнуюБазу(Отказ, Истина);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ФормаСтартовогоПомощника = Обработки.СтартовыйПомощник.ПолучитьФорму("Форма");
		ФормаСтартовогоПомощника.ПервыйЗапуск = Истина;
		ФормаСтартовогоПомощника.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Максимизированное;
		ФормаСтартовогоПомощника.Открыть();
		Если ФормаСтартовогоПомощника.Открыта() Тогда
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапуск.Видимость = Истина;
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапуск.Значение = 
				"Пожалуйста, подождите...";
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапускДополнительная.Видимость = Истина;
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапускДополнительная.Значение = 
				"Выполняется начальное заполнение информационной базы.
				|Это может занять несколько минут.";
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьВперед.Доступность = Ложь;
		КонецЕсли;
		НачатьТранзакцию();

		Если НЕ ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда 
			                                                       		
			ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
		КонецЕсли;
		Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Установить('20090609');
		Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = Метаданные.Версия Тогда
			Если ФормаСтартовогоПомощника.Открыта() Тогда
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапускДополнительная.Видимость = Ложь;
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапуск.Значение = 
				"Начальное заполнение информационной базы выполнено успешно. 
				|Для продолжения работы нажмите кнопку ""Далее"".";
				ФормаСтартовогоПомощника.ЭлементыФормы.НадписьВперед.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
			ФормаОписаниеОбновлений.Открыть(); // для заполнения справочников при первом запуске.
		КонецЕсли;
		#Иначе
			ТекстСообщения = "Начальное заполнение информационной базы в режиме внешнего соединения не поддерживается.";
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		#КонецЕсли
		Возврат;

	КонецЕсли;

	#Если Клиент Тогда
	// В редакции 10.3 поддерживается переход только с двух последних релизов редакции 10.2.
	НоваяВерсияИБ      = "10.3.1.17";
	НовыйНомерРелиза   = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии       = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки        = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");

	Если ТекущийНомерРелиза = "10.2.13"
	 Или (ТекущийНомерРелиза = "10.3.1" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		Если ТекущийНомерРелиза = "10.2.13" Тогда
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;

			ВключитьРежимПолнотекстовогоПоиска();

			СообщитьОСостоянииОбновления("Нормативно-справочная информация общего назначения","Заполнение реквизита ""Вид номенклатуры"" в справочнике ""Номенклатура"".");
			ВыполнитьЗаполнениеРеквизитаВидНоменклатурыВСправочникеНоменклатура();

			СообщитьОСостоянииОбновления("Нормативно-справочная информация общего назначения","Обновление регистра сведений ""Штрихкоды"".");
			ВыполнитьОбновлениеРегистраСведенийШтрихКоды();

			СообщитьОСостоянииОбновления("Нормативно-справочная информация общего назначения","Заполнение реквизита ""Отражать в регламентированном учете"" в справочнике ""Организации"".");
			УстановитьПризнакОтраженияВРеглУчете();

			// для классификатора единиц измерения устанавливаем международное сокращение
			СообщитьОСостоянииОбновления("Нормативно-справочная информация общего назначения","Обновление справочника ""Классификатор единиц измерения"".");
			ОбновитьКлассификаторЕдиницИзмерения();

			СообщитьОСостоянииОбновления("Нормативно-справочная информация общего назначения","Обновление настроек пользователей.");
			ОбновитьНастройкиПользователей();

			// Почта
			СообщитьОСостоянииОбновления("Подсистема электронной почты","Обновление параметров доступа.");
			ПеренестиПраваДоступаКУчетнымЗаписям();
			СообщитьОСостоянииОбновления("Подсистема электронной почты","Обновление предметов электронных писем.");
			ОбновитьПредметыЭлектронныхПисем();

			// CRM
			СообщитьОСостоянииОбновления("Подсистема CRM","Обновление справочника ""Контрагенты"".");
			ЗаполнитьМенеджеровПокупателя();
			СообщитьОСостоянииОбновления("Подсистема CRM","Заполнение личных контактов.");
			ПеренестиЛичныеКонтакты();
			СообщитьОСостоянииОбновления("Подсистема CRM","Заполнение нового справочника ""Контактные лица контрагентов"" на основании данных из справочника ""Контактные лица"".");
			ЗаполнитьКонтактныеЛицаКонтрагентов();
			СообщитьОСостоянииОбновления("Подсистема CRM","Заполнение нового регистра сведений ""Источник информации при обращении"".");
			ЗаполнитьРегистрСведенийИсточникИнформацииПриОбращении();
			СообщитьОСостоянииОбновления("Подсистема CRM","Обновление документов ""Событие"": заполнение реквизита ""Контактное лицо"" элементом справочника ""Контактные лица контрагентов"".");
			ЗаполнитьКонтактныеЛица();

			СообщитьОСостоянииОбновления("Подсистема CRM","Обновление документов ""Событие"": установка нового признака наличия вложений.");
			УстановитьРеквизитНаличияФайловУСобытий();
			СообщитьОСостоянииОбновления("Подсистема CRM","Обновление документов ""Электронное письмо"": заполнение новой табличной части ""Объекты переписки"".");
			ЗаполнитьОбъектыПисем();
			
			СообщитьОСостоянииОбновления("Подсистема CRM","Перенос данных о напоминаниях из реквизитов документов в данные объекта ""Задачи""");
			ЗаполнитьЗадачиНапоминаниями();
			
			СообщитьОСостоянииОбновления("Подсистема CRM","Перекодирование предопределенных элементов плана видов характеристик ""Настройки пользователей"", ""Вопросы для анкетирования"", которые стали неуникальными");
			// Список предопределенных элементов, коды которых могли стать неуникальны
			СписокПредопределенныхЭлементов = Новый СписокЗначений;
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);

			УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);

			СписокПредопределенныхЭлементов = Новый СписокЗначений;
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ИспользоватьПомощникВводаНовыхКонтрагентов);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКодСтраныТелефона);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКодГородаТелефона);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойРазмерПредоплатыПоЗаказуПокупателя);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеУсловиеПродаж);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновныеРасчетыПоДокументамСКонтрагентами);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОперацииДокументаОтчетОРозничныхПродажах);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.РасширеннаяФормаНастройкиОтчетов);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.РежимРабочегоСтолаДляМенеджераКонтактов);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОплатыЧекаККМ);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ЗагружатьАктуальныеКурсыВалютПриЗапускеСистемы);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойДоговорЭквайринга);
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НастройкиПользователей.ВыполнятьПоискДублейПередЗаписьюНовогоКонтрагента);
			УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);

			Параметр = ПланыВидовХарактеристик.НастройкиПользователей.УдалитьИзменениеПользователяВКалендареПользователя;
			ОчиститьНастройкиПользователяПоПараметру(Параметр);

			СообщитьОСостоянииОбновления("Прочее","Изменение значения константы ИспользоватьВозвратнуюТару если возвратная тара не используется");
			УстановитьЗначениеКонстантыИспользоватьВозвратнуюТару();
			
			//ДЕНЕЖНЫЕ СРЕДСТВА
			НаборЗаписейУчетнойПолитики = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
			НаборЗаписейУчетнойПолитики.Прочитать();
			Для каждого ЗаписьУчетнойПолитики Из НаборЗаписейУчетнойПолитики Цикл
				ЗаписьУчетнойПолитики.ОпределениеВремениПроведенияПлатежногоДокумента = Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента;
			КонецЦикла;
			НаборЗаписейУчетнойПолитики.Записать();

			//УПРАВЛЕНИЕ ТОРГОВЛЕЙ

			// Корректировка справочника "КлассификаторСтранМира"
			СообщитьОСостоянииОбновления("Подсистема Управление торговлей","Обновление справочника ""Классификатор стран мира"".");
			КорректировкаСправочникаКлассификаторСтранМираРоссия();
			НачальноеЗаполениеСправочникаКлассификаторСтранМира();

			// предопределенный элемент Торговая марка у свойств номенклатуры
			СообщитьОСостоянииОбновления("Подсистема Управление торговлей","Заполнение предопределенного элемента ""Торговая марка"" плана видов характеристик ""Свойства объектов"".");

			// Список предопределенных элементов, коды которых могли стать неуникальны
			СообщитьОСостоянииОбновления("Подсистема Управление торговлей","Перекодирование предопределенных элементов плана видов характеристик ""Свойства объектов"", ""Назначения свойств категорий объектов"".");
			СписокПредопределенныхЭлементов = Новый СписокЗначений;
			СписокПредопределенныхЭлементов.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
			УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);

			СообщитьОСостоянииОбновления("Подсистема Управление торговлей","Удаление помеченных на удаление элементов плана видов характеристик ""Настройки пользователей"".");
			УдалитьЛишниеНастройкиПользователей();

			//Учет по проектам
			СообщитьОСостоянииОбновления("Подсистема Управление торговлей","Заполнение регистра сведений ""Установка проектов для номенклатуры"" по данным регистра ""Продажи""");

			СообщитьОСостоянииОбновления("Подсистема Управление торговлей","Заполнение реквизитов справочника ""Виды контактной информации"" для новых предопределенных элементов");
			ЗаполнитьСправочникВидыКонтактнойИнформации();

			СписокПредопределенныхЭлементов = Новый СписокЗначений;
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);

			СообщитьОСостоянииОбновления("Подсистема Управление торговлей","Перекодирование предопределенных элементов справочника ""Виды контактной информации""");
			УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);

			// Установить флаг УчитыватьНДС в документах Оприходование товаров.
			СообщитьОСостоянииОбновления("Регламентированный учет","Обновление документов ""Оприходование товаров"": установка флага ""Учитывать НДС"".");
			УстановитьРеквизитДокумента( "ОприходованиеТоваров", "УчитыватьНДС", Истина);

			// Установка значения константы "Списывать партии расходным ордером"
			СообщитьОСостоянииОбновления("Регламентированный учет","Установка значения константы ""Списывать партии расходным ордером"".");
			Если НЕ Константы.СписыватьПартииРасходнымОрдером.Получить() Тогда

				Константы.СписыватьПартииРасходнымОрдером.Установить(Истина);

			КонецЕсли;

			// Очистка записей РС "Настройки пользователей" для помеченных на удаление настроек ПВХ "Настройки пользователей"
			Выборка = ПланыВидовХарактеристик.НастройкиПользователей.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ПометкаУдаления Тогда
					ОчиститьНастройкиПользователяПоПараметру(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;

			ОчиститьСправочникТорговоеОборудование();
		КонецЕсли; // Если ЭтоПереходСРедакции102 Тогда
		
		//Зафиксируемномер версии.
		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ЗафиксироватьТранзакцию();
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			//Вывод строк описания обновлений.
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;

	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.2.11";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.1.17"
	 ИЛИ (НомерРелиза = "10.3.2" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		// установка у категорий обмена с сайтом принадлежности
		УстановитьУКатегорииНазначение(Справочники.КатегорииОбъектов.ЗаказСWEBСайта, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
		УстановитьУКатегорииНазначение(Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОплачен, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
		УстановитьУКатегорииНазначение(Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеДоставкаРазрешена, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
		УстановитьУКатегорииНазначение(Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеЗавершен, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
		УстановитьУКатегорииНазначение(Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОтменен, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);

		// Устанавливает настройкам обмена типы узлов планов обмена
		УстановитьТипыУзловОбмена();

		УстановитьОрганизациюВДвиженияхДенежныхДокументов();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ЗафиксироватьТранзакцию();

		УстановитьЗаказВТоварыПереданные();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			//Вывод строк описания обновлений.
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.3.3";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.2.11"
	 ИЛИ (НомерРелиза = "10.3.3" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;

	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.4.14";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.3.3"
	 ИЛИ (НомерРелиза = "10.3.4" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);

		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
		                         "Выполнено " + СтрСообщения);

		ИмяКаталога    = РаботаСФайлами.ПолучитьИмяКаталога();
		ПолноеИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, "\temp.epf");

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбработкиОбслуживанияТО КАК Спр
		|ГДЕ
		|	Спр.ВерсияAPI = 0 ИЛИ Спр.ВерсияAPI = 2.1
		|");

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбъектСпр = Выборка.Ссылка.ПолучитьОбъект();

			Попытка
				ОбъектСпр.Обработка.Получить().Записать(ПолноеИмяФайла);

				ОбрОбслуживания = ВнешниеОбработки.Создать(ПолноеИмяФайла);

				ОбъектСпр.ВерсияAPI = ?(ОбрОбслуживания.ПолучитьВерсиюAPI() <> 2.1, ОбрОбслуживания.ПолучитьВерсиюAPI(),2.01);
				ОбъектСпр.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;

		ЗаполнитьУП2008_НДСНалоговыйПериод();
		
		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		КонецЕсли;

	КонецЕсли;
	#КонецЕсли
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.5.1";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.4.14"
	 ИЛИ (НомерРелиза = "10.3.5" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();
		
		// обновление регистра сведений коллизии при обмене
		// установка значений для новых полей
		ПровестиУстановкуПолейРегистраКоллизииПриОбмене();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// сообщение об успешном обновлении информационной базы.
			#Если Клиент Тогда
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
		КонецЕсли;

	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.6.8";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.5.1"
	 ИЛИ (НомерРелиза = "10.3.6" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполняется " + СтрСообщения);
		#КонецЕсли
		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		// Процесс обновления регистра сведений "ТорговоеОборудование"
		ВыполнитьОбновлениеРегистраСведенийТорговоеОборудование();

		// Процесс обновления имен файлов обработок обслуживания
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК ОбработкаОбслуживания
		|ИЗ
		|	Справочник.ОбработкиОбслуживанияТО КАК Спр
		|");

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ОбъектСпр = Выборка.ОбработкаОбслуживания.ПолучитьОбъект();
				НовоеИмяФайла = мСоответствиеИмен[ОбъектСпр.ИмяФайла];

				Если ЗначениеЗаполнено(НовоеИмяФайла) И ОбъектСпр.ИмяФайла <> НовоеИмяФайла Тогда
					ОбъектСпр.ИмяФайла = мСоответствиеИмен[ОбъектСпр.ИмяФайла];
					ОбъектСпр.Записать();
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			
			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;

	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.7.8";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.6.8" Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполняется " + СтрСообщения);
		#КонецЕсли
		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		выборкаУзловОбмена = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерия.Выбрать();
		Пока выборкаУзловОбмена.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(выборкаУзловОбмена.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
				УзелПланаОбменаОбъект = выборкаУзловОбмена.ПолучитьОбъект();
				УзелПланаОбменаОбъект.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать;
				Попытка УзелПланаОбменаОбъект.Записать(); Исключение КонецПопытки;
			КонецЕсли;
		КонецЦикла;

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
		КонецЕсли;

	КонецЕсли;
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.7.9";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");

	Если (НомерРелиза = "10.3.7" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();

		Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Установить('20090609');
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент ТОгда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

			// сообщение об успешном обновлении информационной базы.
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
		КонецЕсли;

	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.8.7";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.7.9" Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		// Программный код который необходимо выполнить при переходе с версии 10.3.7.9 на версию 10.3.8.7
		//

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;

	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.8.9";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если НомерРелиза = "10.3.8" И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		// Программный код который необходимо выполнить при переходе с версии 10.3.8.9 на версию 10.3.8.9
		//

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;

	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.9.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.8.9")
	 ИЛИ (НомерРелиза = "10.3.9" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();
		// Обновление контактной информации
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Поле1,
		|	КонтактнаяИнформация.Поле2,
		|	КонтактнаяИнформация.Поле3,
		|	КонтактнаяИнформация.Поле4,
		|	КонтактнаяИнформация.Поле5,
		|	КонтактнаяИнформация.Поле6,
		|	КонтактнаяИнформация.Поле7,
		|	КонтактнаяИнформация.Поле8,
		|	КонтактнаяИнформация.Поле9,
		|	КонтактнаяИнформация.Поле10,
		|	КонтактнаяИнформация.Комментарий,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|ДЛЯ ИЗМЕНЕНИЯ РегистрСведений.КонтактнаяИнформация
		|";
		ВыборкаАдресов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаАдресов.Следующий() Цикл
			Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
			Запись.Объект = ВыборкаАдресов.Объект;
			Запись.Тип = ВыборкаАдресов.Тип;
			Запись.Вид = ВыборкаАдресов.Вид;
			Запись.Представление = ВыборкаАдресов.Представление;
			Запись.Поле1 = ВыборкаАдресов.Поле1;
			Запись.Поле2 = ВыборкаАдресов.Поле2;
			Запись.Поле3 = ВыборкаАдресов.Поле3;
			Запись.Поле4 = ВыборкаАдресов.Поле4;
			Запись.Поле5 = ВыборкаАдресов.Поле5;
			Запись.Поле6 = ВыборкаАдресов.Поле6;
			Запись.Поле7 = ВыборкаАдресов.Поле7;
			Запись.Поле8 = ВыборкаАдресов.Поле8;
			Запись.Поле9 = ВыборкаАдресов.Поле9;
			Запись.Поле10 = ВыборкаАдресов.Поле10;
			Запись.Комментарий = ВыборкаАдресов.Комментарий;
			Запись.ЗначениеПоУмолчанию = ВыборкаАдресов.ЗначениеПоУмолчанию;
			Запись.ТипДома = Перечисления.ТипыДомов.Дом;
			Запись.ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
			Запись.ТипКвартиры = Перечисления.ТипыКвартир.Квартира;
			Запись.Записать();
		КонецЦикла;

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		// Программный код который необходимо выполнить при переходе с версии 10.3.8.9 на версию 10.3.9
		//

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;

	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.10.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.9.4")
	 ИЛИ (НомерРелиза = "10.3.10" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		// Программный код который необходимо выполнить при переходе с версии 10.3.9 на версию 10.3.10
		//
		ОбновитьПлатежныеПорученияНаПеречислениеНалогов();

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;

	КонецЕсли;

	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.11.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.10.4")
	 ИЛИ (НомерРелиза = "10.3.11" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();

		ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();
		ОбъектПредупреждатьОРазницеВремениССервером = ПланыВидовХарактеристик.НастройкиПользователей.ПредупреждатьОРазницеВремениССервером.ПолучитьОбъект();
		ОбъектПредупреждатьОРазницеВремениССервером.УстановитьНовыйКод();
		ОбъектПредупреждатьОРазницеВремениССервером.Записать();

		ВыполнитьОбновлениеРСШтрихкоды();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.12.3";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.11.4")
	 ИЛИ (НомерРелиза = "10.3.12" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.12
		//
		//
		
		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;
	КонецЕсли;

	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.13.2";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.12.3")
	 ИЛИ (НомерРелиза = "10.3.13" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.13
		//
		//
		
		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.14.3";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.13.2" Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.14.3
		//
		//
		
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза     = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ = "10.3.14.5";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
	
	Если (НомерРелиза = "10.3.14" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда

		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли

		НачатьТранзакцию();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);

		// Программный код который необходимо выполнить при переходе с версии 10.3.14.4 на версию 10.3.14.5
		//

		ЗафиксироватьТранзакцию();

		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли

		КонецЕсли;

	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.15.9";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.14.5")
	 ИЛИ (НомерРелиза = "10.3.15" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.15
		//
		//
		
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.16.1";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.15.9")
	 ИЛИ (НомерРелиза = "10.3.16" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.16
		//
		//
		
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.17.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.16.1")
	 ИЛИ (НомерРелиза = "10.3.17" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.17
		//
		//
		ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах();
		
		// Установка даты применения Постановления 1137
		УстановитьДатуПримененияПостановления1137();	
				
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.18.3";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.17.4")
	 ИЛИ (НомерРелиза = "10.3.18" И ТекущаяВерсияИБ <> НоваяВерсияИБ  И (ТекущаяВерсияИБ <> "10.3.18.4" И ТекущаяВерсияИБ <> "10.3.18.5")) Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.18
		//
		//
		РегламентированнаяОтчетность.ПеренестиВыходныеДни(Год(ТекущаяДата()));
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.18.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.18.3") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.18.4
		//
		//
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.18.5";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.18.4") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.18.4
		//
		//
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.19.2";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.18.5" Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.19
		//
		//
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
		ПроцедурыОбменаССайтом.ВыполнитьОбновлениеНастроекОбменаССайтом();
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;

	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.19.3";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.19.2") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.19.3
		//
		//
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
		ПроцедурыОбменаССайтом.ВыполнитьОбновлениеНастроекОбменаССайтом();
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.19.4";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
	
	Если ТекущаяВерсияИБ = "10.3.19.3" Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.19.3
		//
		//
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
		ПроцедурыОбменаССайтом.ВыполнитьОбновлениеНастроекОбменаССайтом();
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.20.2";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.19.4")
		ИЛИ (НомерРелиза = "10.3.20" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.20
		//
		//
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияИБ  = Константы.НомерВерсииКонфигурации.Получить();
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НоваяВерсияИБ    = "10.3.21.2";
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если (ТекущаяВерсияИБ = "10.3.20.2")
		ИЛИ (НомерРелиза = "10.3.21" И ТекущаяВерсияИБ <> НоваяВерсияИБ) Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		НачатьТранзакцию();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА РЕЛИЗ 10.3.21
		//
		//
		ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур();
		
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
			ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
			ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
			ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
			Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	мОбработчики = Новый Массив;
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.УстановкаПризнаковИспользованияОбменовЭД");
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.ЗаполнениеРеквизитовУчетныхЗаписейЭП");
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.22.2", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.22.2", мОбработчики);
	#КонецЕсли
	
	мОбработчики = Новый Массив;
	мОбработчики.Добавить("ОбменДаннымиСервер.ОбновитьКонстантуНастройкаПодчиненногоУзлаРИБЗавершена");
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.ОбработатьКорректировочныеСчетаФактурыФЗ39");
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.ОбработатьЖурналУчетаСчетовФактур");
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.ПеренестиПрефиксВРегистр");
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.23.3", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.23.3", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.24.1", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.24.1", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	мОбработчики.Добавить("ОбменДаннымиСервер.ОбновитьКонстантуНастройкаПодчиненногоУзлаРИБЗавершена");
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.25.1", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.25.1", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.26.2", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.26.2", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.27.2", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.27.2", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.28.1", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.28.1", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.29.1", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.29.1", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.ОбновитьРегионы");
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.30.1", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.30.1", мОбработчики);
	#КонецЕсли

	мОбработчики = Новый Массив;
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.УстановитьРеквизитКорректироватьНДСКорректировкаРеализации");
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.УстановитьРеквизитКорректироватьНДСКорректировкаПоступления");
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.30.2", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.30.2", мОбработчики);
	#КонецЕсли
	
	мОбработчики = Новый Массив;
	мОбработчики.Добавить("ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными");
	мОбработчики.Добавить("Обработки.ОбновлениеИнформационнойБазы.ЗаполнитьТабличныеЧастиВСчетахФактурахПолученных");
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.31.3", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.31.3", мОбработчики, , , Истина);
	#КонецЕсли

	мОбработчики = Новый Массив;
	мОбработчики.Добавить("Документы.СчетФактураВыданный.УстановитьКодВидаОперацииСводныйКомиссионный");
	мОбработчики.Добавить("Документы.СчетФактураПолученный.УстановитьКодВидаОперацииСводныйКомиссионный");
	мОбработчики.Добавить("Документы.ФормированиеЗаписейКнигиПокупок.УстановитьКодВидаОперации");
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.32.1", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений, Истина);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.32.1", мОбработчики, , , Истина);
	#КонецЕсли

	мОбработчики = Новый Массив;
	#Если Клиент Тогда
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.32.2", мОбработчики, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	#Иначе
		ВыполнитьОбновлениеНаНовыйРелиз("10.3.32.2", мОбработчики);
	#КонецЕсли

//////////////////////////////////////////////////////////////////////////
	#Если Клиент Тогда
	// Вывод формы дополнительной обработки.
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ФормаОписаниеОбновлений.Открыть();
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаНаУТ11","ПоказыватьПомощникПереходаНаУТ11ПриНачалеРаботы", Истина);
	
	СписокИсключений = "10.3.4";
	ВерсииДляЗапускаПакетаОбработокОбновления = "10.3.2";
	Для Сч = 1 По 32 Цикл
		ОчереднаяВерсия = "10.3."+Формат(Строка(Сч),"ЧГ=0");
		Если Не Найти(СписокИсключений, ОчереднаяВерсия) > 0 Тогда
			ВерсииДляЗапускаПакетаОбработокОбновления = ВерсииДляЗапускаПакетаОбработокОбновления + ", " + ОчереднаяВерсия;
		КонецЕсли;
	КонецЦикла;

	Если Найти(ВерсииДляЗапускаПакетаОбработокОбновления, ТекущийНомерРелиза) <> 0 Тогда
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;
	КонецЕсли;

	Если ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации Тогда
		
		ТекстВопроса = "При обновлении версии конфигурации " + 
		"для обеспечения корректной работы системы необходимо выполнение ряда дополнительных действий. " + 
		"Автоматический последовательный запуск этих действий может быть осуществлен при помощи обработки ""Запуск пакета обработок обновления конфигурации"". " +
		"Перед запуском этой обработки рекомендуется ознакомиться с описанием во встроенной справке обработки." +
		"
		|
		|Выполнение действий в пакетном режиме может занять продолжительное время, поэтому предоставляется возможность выполнить дополнительные действия позже: 
		| 1) Вызов обработки ""Запуск пакета обработок обновления конфигурации"" производится из формы обработки "+
		"""Обновление информационной базы"" (меню ""Справка - Дополнения к описанию""), по нажатию кнопки командной панели.
		| 2) Интерактивный запуск каждой отдельной процедуры. Ссылки на эти процедуры находятся в окне описания обновлений (меню ""Справка - Дополнения к описанию""). " +
		"
		|
		|Открыть обработку   ""Запуск пакета обработок обновления конфигурации""  сейчас?";	

		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма = ПолучитьФорму("ЗапускПакетаОбработокОбновленияКонфигурации");
			Форма.Открыть();
			Если НомерРелиза <> "10.2.13" Тогда
				Корень = Форма.ЭлементыФормы.СписокОбработок.Значение.Строки[0];
				Корень.Пометка = Ложь;
				МассивПомеченных = Корень.Строки.НайтиСтроки(Новый Структура("Пометка", Истина),Истина);
				Для Каждого Строка Из МассивПомеченных Цикл
					Строка.Пометка = Ложь;
				КонецЦикла;
				Форма.ЭлементыФормы.СписокОбработок.Свернуть(Корень);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

Процедура ВыполнитьОбновлениеНаНовыйРелиз(НоваяВерсияИБ, мОбработчики, ДокументОписаниеОбновлений = "", МакетОписаниеОбновлений = "", ОбновлениеЗавершено = Ложь)
	
	ТекущаяВерсияИБ  = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
	НомерРелиза      = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	НовыйНомерРелиза = ПолучитьНомерРелиза(НоваяВерсияИБ);
	СтрокаВерсии     = "Версия" + СтрЗаменить(НовыйНомерРелиза, ".", "");
	СтрокаШапки      = "Шапка"  + СтрЗаменить(НовыйНомерРелиза, ".", "");
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы(НоваяВерсияИБ) Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		#Если Клиент Тогда
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
		#КонецЕсли
		
		// ПРОГРАММНЫЙ КОД ВЫПОЛНЯЮЩИЙ ОБНОВЛЕНИЕ ПРИ ПЕРЕХОДЕ НА НОВЫЙ РЕЛИЗ
		
		Отказ = Ложь;
		#Если Клиент Тогда
			ОбновлениеИнформационнойБазыКлиент.ОбновитьИнформационнуюБазу(Отказ, Истина);
		#КонецЕсли
		
		Если Не Отказ Тогда
		
			НачатьТранзакцию();
			
			// Установка номера версии информационной базы
			ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(Метаданные.Имя, НоваяВерсияИБ);
			// Выполнение обработчиков обновления УТ
			Для Каждого ИмяОбработчика Из мОбработчики Цикл
				ОбщегоНазначения.ВыполнитьБезопасно(ИмяОбработчика);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		
		КонецЕсли;
		
		Если ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя) = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			//Вывод строк описания обновлений.
			#Если Клиент Тогда
				Если Не НовыйНомерРелиза = НомерРелиза ИЛИ ОбновлениеЗавершено Тогда
					// Для нескольких сборок одно описание
					ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
					ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
					ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
					ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
					ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
				КонецЕсли;
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			// сообщение об успешном обновлении информационной базы.
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура устанавливает тип узла обмена в стравочнике настроек обмена данными при обновлении на 10.3.3
Процедура УстановитьТипыУзловОбмена()
	
	ЗаголовокСообщения = "Не удалось обновить настройки обмена!";
	Выборка = Справочники.НастройкиОбменаДанными.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ТипУзлаИнформационнойБазы = Новый(ТИпЗнч(Объект.УзелИнформационнойБазы));
		Попытка
			Объект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(("Ошибка при записи настройки """ + Строка(Объект) + """ по причине: " + ОписаниеОшибки()),, ЗаголовокСообщения);
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура устанавливает назначение у категории при обновлении на 10.3.3
Процедура УстановитьУКатегорииНазначение(СсылкаНаКатегорию, НазначениеКатегории)
	
	Если ЗначениеЗаполнено(СсылкаНаКатегорию.НазначениеКатегории)
		ИЛИ СсылкаНаКатегорию.НазначениеКатегории = НазначениеКатегории Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		ОбъектКатегории = СсылкаНаКатегорию.ПолучитьОбъект();
		ОбъектКатегории.НазначениеКатегории = НазначениеКатегории;
		ОбъектКатегории.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Произошла ошибка при установке назначения """ + НазначениеКатегории + """ у категории """ + ОбъектКатегории + """
		|" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Процедура устанавливает значение константы "ИспользоватьВозвратнуюТару".
//  Значение "Истина" устанавливается, если есть хотя бы одна запись в табличных частях "ВозвратнаяТара" в тех
// документах, где есть такая табличная часть. Иначе устанавливается значение "Ложь".
//
Процедура УстановитьЗначениеКонстантыИспользоватьВозвратнуюТару()
	
	ЕстьДокументыСВозвратнойТарой = Ложь;
	
	ТекстЗапроса = "";
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
	
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ВозвратнаяТара") <> Неопределено Тогда
			
			Если ТекстЗапроса = "" Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	1 КАК Результат
				|ИЗ
				|(
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		1 КАК Результат
			|	ИЗ
			|		Документ." + МетаданныеДокумента.Имя + ".ВозвратнаяТара КАК ВозвратнаяТара
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстЗапроса <> "" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|) КАК ВсеТабличныеЧастиВозвратнаяТара";
	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ЕстьДокументыСВозвратнойТарой = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКонстанту("ИспользоватьВозвратнуюТару", ЕстьДокументыСВозвратнойТарой);
	
КонецПроцедуры // УстановитьЗначениеКонстантыИспользоватьВозвратнуюТару()

Процедура УдалитьЛишниеНастройкиПользователей()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Ссылка КАК НастройкиПользователей
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.ПометкаУдаления
	|	И (НЕ НастройкиПользователей.ЭтоГруппа)";
	
	МассивСсылок = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСсылок.Добавить(Выборка.НастройкиПользователей);
	КонецЦикла;
	
	ТаблицаПоиска = НайтиПоСсылкам(МассивСсылок);
	
	СписокИсключений = Новый СписокЗначений;
	
	// Поищем, нет ли где ссылок кроме регистра сведений НастройкиПользователей
	Для каждого СтрокаТаблицы Из ТаблицаПоиска Цикл
		Если ТипЗнч(СтрокаТаблицы[1]) <> Тип("РегистрСведенийКлючЗаписи.НастройкиПользователей") Тогда
			СписокИсключений.Добавить(СтрокаТаблицы[0]);
		КонецЕсли; 
	КонецЦикла;
	
	Для а=0 По МассивСсылок.ВГраница() Цикл
		Если СписокИсключений.НайтиПоЗначению(МассивСсылок[а]) = Неопределено Тогда
			Попытка
				ОбъектДляУдаления = МассивСсылок[а].ПолучитьОбъект();
				ОбъектДляУдаления.Удалить();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось удалить элемент ПВХ настроек пользователя - " + СокрЛП(МассивСсылок[а]));
			КонецПопытки;
		Иначе
			Сообщить("Не удалился элемент ПВХ настроек пользователя - " + СокрЛП(МассивСсылок[а]));
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// процедура обновляет классификатор единиц измерения
// для международного сокращения записывается значение
Процедура ОбновитьКлассификаторЕдиницИзмерения()
	
	Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	ОбластьКодЧисловой         = Макет.Области.КодЧисловой;
	ОбластьМеждународноеСокращение = Макет.Области.МеждународноеСокращение;

	// пробегаем по всему адресному классификатору и заполняем международное сокращение
	Для Сч = 2 По Макет.ВысотаТаблицы Цикл
		
		КодЧисловой = Макет.Область(Сч, ОбластьКодЧисловой.Лево, Сч, ОбластьКодЧисловой.Право).Текст;
		МеждународноеСокращение = Макет.Область(Сч, ОбластьМеждународноеСокращение.Лево, Сч, ОбластьМеждународноеСокращение.Право).Текст;
		
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(КодЧисловой);
				
		Если Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;

		Объект = Ссылка.ПолучитьОбъект();
		
		Объект.МеждународноеСокращение = МеждународноеСокращение;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьКлассификаторЕдиницИзмерения()

// Процедура обновляет значения флагов ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете и ОтражатьВНалоговомУчете
//
Процедура ОбновитьНастройкиПользователей()
	
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	
	Набор.Отбор.Настройка.Использование = Истина;
	Набор.Отбор.Настройка.ВидСравнения  = ВидСравнения.Равно;
	Набор.Отбор.Настройка.Значение      = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВУправленческомУчете;
	
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Запись.Значение = ?(Запись.Значение = Истина, Ложь, Истина);
	КонецЦикла;
	
	Набор.Записать();
	
	Набор.Отбор.Настройка.Значение = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВБухгалтерскомУчете;
	
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Запись.Значение = ?(Запись.Значение = Истина, Ложь, Истина);
	КонецЦикла;
	
	Набор.Записать();
	
	Набор.Отбор.Настройка.Значение = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВНалоговомУчете;
	
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Запись.Значение = ?(Запись.Значение = Истина, Ложь, Истина);
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры // ОбновитьНастройкиПользователей()

// Процедура заполняет пустые значения измерения "Организация" движений регистров документов:
// "Денежный чек", "Объявление на взнос наличными", "Внутреннее перемещение наличных денежных средств"
// значением владельца кассы.
//
Процедура УстановитьОрганизациюВДвиженияхДенежныхДокументов()
	
	МассивТиповРегистров = Новый Массив;
	МассивТиповРегистров.Добавить("ДенежныеСредства");
	МассивТиповРегистров.Добавить("ДенежныеСредстваКПолучению");
	МассивТиповРегистров.Добавить("ДенежныеСредстваКСписанию");
	МассивТиповРегистров.Добавить("ДвиженияДенежныхСредств");
	
	Для каждого ТипРегистра Из МассивТиповРегистров Цикл
		
		НаборЗаписей = РегистрыНакопления[ТипРегистра].СоздатьНаборЗаписей();
		
		Состояние("Заполнение организации в регистре " + НаборЗаписей.Метаданные().Представление() + " по денежным чекам, объявлениям на взнос наличными, внутренним перемещениям ден.средств");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистратор,
		|	БанковскийСчетКасса.Владелец КАК Организация
		|ИЗ
		|	РегистрНакопления." + ТипРегистра + "
		|ГДЕ
		|	(Регистратор ССЫЛКА Документ.ДенежныйЧек
		|		ИЛИ Регистратор ССЫЛКА Документ.ОбъявлениеНаВзносНаличными
		|		ИЛИ Регистратор ССЫЛКА Документ.ВнутреннееПеремещениеНаличныхДенежныхСредств)
		|	И Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			ТаблицаДвижений.ЗаполнитьЗначения(Выборка.Организация, "Организация");
			НаборЗаписей.Загрузить(ТаблицаДвижений);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	Параметры               = МакетОписаниеОбновлений.Параметры;

	// Заполнение параметров расшифровок макета описания обновлений,
	Параметры.ФормаКонвертацияПравДоступаПользователей = ПолучитьФорму("КонвертацияПравДоступаПользователей");

	Параметры.ФормаПодбораВалют                = Справочники.Валюты.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаВалют                 = Справочники.Валюты.ПолучитьФормуСписка();
	Параметры.ФормаЗагрузкиКурсов              = Обработки.КурсыВалютРБК.ПолучитьФорму();
	Параметры.ФормаПодбораЕдиниц               = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаЕдиниц                = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуСписка();
	Параметры.ФормаЗагрузкиБанков              = Обработки.ЗагрузкаБанков.ПолучитьФорму();

	Параметры.ФормаСпискаКонтрагентов          = Справочники.Контрагенты.ПолучитьФормуСписка();
	Параметры.ФормаСпискаНоменклатуры          = Справочники.Номенклатура.ПолучитьФормуСписка();
	Параметры.ФормаСпискаТиповЦенНоменклатуры  = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуСписка();
	Параметры.ФормаСпискаТиповСкидокНаценок    = Справочники.ТипыСкидокНаценок.ПолучитьФормуСписка();
	
	Параметры.ФормаПодчинениеКассОрганизациям = Обработки.ОбновлениеИнформационнойБазы.ПолучитьФорму("ПодчинениеКассИККМОрганизациям");

	Параметры.ФормаЗапускПакетаОбработокОбновленияКонфигурации					= ПолучитьФорму("ЗапускПакетаОбработокОбновленияКонфигурации");
	Параметры.ФормаЗаполнениеСтраныРоссия 										= ПолучитьФорму("ЗаполнениеСтраныРоссия");
	Параметры.ФормаЗаполнениеРеквизитовДокументовЦенообразования 				= ПолучитьФорму("ЗаполнениеРеквизитовДокументовЦенообразования");
	Параметры.ФормаОбновлениеДокументовКорректировкаДолга 						= ПолучитьФорму("ОбновлениеДокументовКорректировкаДолга");
	Параметры.ФормаОбновлениеДанныхДокументовПрочиеЗатраты = ПолучитьФорму("ОбновлениеДанныхДокументовПрочиеЗатраты");
	Параметры.ФормаЗаполнениеНовыхИзмеренийКонтрагентОрганизацияВРегистрахНакопления = ПолучитьФорму("ЗаполнениеНовыхИзмеренийКонтрагентОрганизацияВРегистрахНакопления");
	Параметры.ФормаОбновлениеДанныхНДСРасчеты 									= ПолучитьФорму("ОбновлениеДанныхНДСРасчеты");
	Параметры.ФормаЗаполнениеРесурсаНДСВРегистреПродажи 						= ПолучитьФорму("ЗаполнениеРесурсаНДСВРегистреПродажи");
	Параметры.ФормаОбновлениеДанныхПоВзаиморасчетамВРазрезеДокументовРасчетов 	= ПолучитьФорму("ОбновлениеДанныхПоВзаиморасчетамВРазрезеДокументовРасчетов");
	Параметры.ФормаАнализСостоянияВзаиморасчетовПослеПереходаНаРедакцию10_3		= Отчеты.АнализСостоянияВзаиморасчетовПослеПереходаНаРедакцию10_3.ПолучитьФорму("Форма");
	Параметры.ФормаИзменениеВидаСкладаСРозничногоНаОптовый                      = ПолучитьФорму("ИзменениеВидаСкладаСРозничногоНаОптовый");
	Параметры.ФормаЗаполнениеРегистраОбъектыДоступаДокументов				    = ПолучитьФорму("ЗаполнениеРегистраОбъектыДоступаДокументов");
	Параметры.ФормаКонвертацияСправочникаДополнительныеПечатныеФормы            = ПолучитьФорму("КонвертацияСправочникаДополнительныеПечатныеФормы");
	Параметры.ФормаОбновлениеНомеровДокументов            						= ПолучитьФорму("ОбновлениеНомеровДокументов");
	Параметры.ФормаЗаполнениеРесурсаСтоимостьБезСкидокВРегистреПродажиДляУслуг	= ПолучитьФорму("ЗаполнениеРесурсаСтоимостьБезСкидокВРегистреПродажиДляУслуг");
	Параметры.ФормаОбновлениеДанныхРегистраНДСПартииТоваров                     = ПолучитьФорму("ОбновлениеДанныхРегистраНДСПартииТоваров");
	Параметры.ФормаУстановкаСоответствияПроектовНоменклатуре      				= ПолучитьФорму("УстановкаСоответствияПроектовНоменклатуре");
	Параметры.ФормаОбновлениеТипаЭлементаВАдресномКлассификаторе				= ПолучитьФорму("ОбновлениеТипаЭлементаВАдресномКлассификаторе");
	Параметры.ФормаЗаполнениеРесурсаНДСВРегистреЗакупки                         = ПолучитьФорму("ЗаполнениеРесурсаНДСВРегистреЗакупки");
	Параметры.ФормаОбновлениеДанныхКорректировкаЗаказаПокупателя                = ПолучитьФорму("ОбновлениеДанныхКорректировкаЗаказаПокупателя");
	Параметры.ФормаОбновлениеДанныхКорректировкаЗаказаПоставщику                = ПолучитьФорму("ОбновлениеДанныхКорректировкаЗаказаПоставщику");
	Параметры.ФормаОбновлениеДокументовЗакрытиеЗаказовПокупателей               = ПолучитьФорму("ОбновлениеДокументовЗакрытиеЗаказовПокупателей");
	Параметры.ФормаСписокДокументовРеализацииБракаИзРезерва                		= ПолучитьФорму("СписокДокументовРеализацияБракИзРезерва");
	Параметры.ФормаЗаполнениеРеквизитаВнутрЗаказВДокументеПеремещениеТоваров    = ПолучитьФорму("ЗаполнениеРеквизитаВнутрЗаказВДокументеПеремещениеТоваров");
	Параметры.ФормаЗаполнениеРеквизитаВнутрЗаказВДокументеТребованиеНакладная   = ПолучитьФорму("ЗаполнениеРеквизитаВнутрЗаказВДокументеТребованиеНакладная");
	Параметры.ФормаЗаполнениеНДСВСтоимостиТоваровВДокументах   					= ПолучитьФорму("ЗаполнениеНДСВСтоимостиТоваровВДокументах");

	Параметры.ФормаЗаполнениеНовогоИзмеренияОрганизацияВРегистреВзаиморасчетыСПодотчетнымиЛицами = ПолучитьФорму("ЗаполнениеНовогоИзмеренияОрганизацияВРегистреВзаиморасчетыСПодотчетнымиЛицами");

	Организации = Справочники.Организации.Выбрать();
	Организация = Неопределено;
	
	Если Организации.Следующий() Тогда
		Организация = Организации.ПолучитьОбъект();
	КонецЕсли;

	Если Организация = Неопределено Тогда
		Параметры.ФормаНовойОрганизации            = "ФормаНовойОрганизации";
	Иначе
		Параметры.ФормаНовойОрганизации            = Организация.ПолучитьФорму();
	КонецЕсли;

	Параметры.ФормаСпискаОрганизаций           = Справочники.Организации.ПолучитьФормуСписка();
	Параметры.ФормаСпискаПодразделений         = Справочники.Подразделения.ПолучитьФормуСписка();
	Параметры.ФормаСпискаСкладов               = Справочники.Склады.ПолучитьФормуСписка();
	Параметры.ФормаСпискаКасс                  = Справочники.Кассы.ПолучитьФормуСписка();
	Параметры.ФормаСпискаКассККМ               = Справочники.КассыККМ.ПолучитьФормуСписка();
	Параметры.ФормаКонстант                    = Константы.ПолучитьФорму();

	Параметры.ФормаСпискаПользователей         = Справочники.Пользователи.ПолучитьФормуСписка();
	Параметры.ФормаПользователя                = глЗначениеПеременной("глТекущийПользователь");

	Параметры.Перейти = "Перейти";

	Возврат МакетОписаниеОбновлений;

КонецФункции // ПодготовитьМакетОписаниеОбновлений()

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";

	Сообщить(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

Процедура ОбновитьПредметыЭлектронныхПисем()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЭлектронноеПисьмо.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ВсегоПисем = Выборка.Количество;
	
	ВыборкаПисем = Документы.ЭлектронноеПисьмо.Выбрать();
	Счетчик = 0;
	Пока ВыборкаПисем.Следующий() Цикл
		Счетчик = Счетчик + 1;
		Состояние("Обрабатывается " + Счетчик + " из " + ВсегоПисем);
		Объект = ВыборкаПисем.ПолучитьОбъект();
		Если ТипЗнч(Объект.УдалитьПредмет) = Тип("Строка") Тогда
			Объект.Предмет = Объект.УдалитьПредмет;
		ИначеЕсли ТипЗнч(Объект.УдалитьПредмет) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Объект.Предмет = Строка(Объект.УдалитьПредмет);
		Иначе
			Продолжить;
		КонецЕсли;
		Попытка
			Объект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПеренестиПраваДоступаКУчетнымЗаписям()
	
	Выборка = Справочники.УчетныеЗаписиЭлектроннойПочты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Для каждого СтрокаТЧ Из Объект.ДоступКУчетнойЗаписи Цикл
			СтрокаТЧ.Запись = СтрокаТЧ.УдалитьОтправка ИЛИ СтрокаТЧ.УдалитьТранспорт;
		КонецЦикла;
		Попытка
			Объект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "hline@1c.ru";

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Устанавливает реквизиты элемента ПВХ "ВопросыДляАнкетирования"
//
Процедура УстановитьРеквизитыВопроса(Вопрос, ПолнаяФормулировка, ТипОтветаНаВопросАнкеты, БолееОдногоОтвета = Ложь, КоличествоСтрок = 0, ВидКонтактнойИнформации = 0, ТипЗначения = Неопределено, Длина = 0)
	
	Объект = Вопрос.ПолучитьОбъект();
	
	Объект.ПолнаяФормулировка			= ПолнаяФормулировка;
	Объект.ТипОтветаНаВопрос			= ТипОтветаНаВопросАнкеты;
	Объект.КоличествоСтрокТаблицы		= КоличествоСтрок;
	Объект.ВидКонтактнойИнформации		= ВидКонтактнойИнформации;
	Объект.Длина						= Длина;
	
	Объект.Записать();
	
КонецПроцедуры

// Записываем реквизиты предопределенных вопросов
//
// Параметры
//  нет
//
Процедура ЗаполнитьРеквизитыВопросов(ЗаполнятьТабличныеВопросы = Истина)


	Менеджер		= ПланыВидовХарактеристик.ВопросыДляАнкетирования;
	ВВидеЧисла		= Перечисления.ТипыОтветаНаВопросАнкеты.Число;
	ВВидеСтроки		= Перечисления.ТипыОтветаНаВопросАнкеты.Строка;
	ВВидеДаты		= Перечисления.ТипыОтветаНаВопросАнкеты.Дата;
	ТабличныйВопрос	= Перечисления.ТипыОтветаНаВопросАнкеты.Табличный;
	ВВидеБулево		= Перечисления.ТипыОтветаНаВопросАнкеты.Булево;
	ВВидеКИ			= Перечисления.ТипыОтветаНаВопросАнкеты.КонтактнаяИнформация;
	ВВидеСсылки		= Перечисления.ТипыОтветаНаВопросАнкеты.Ссылка;
	
	// Описание типов
	КЧ = Новый КвалификаторыЧисла(15, 2);
	КС = Новый КвалификаторыСтроки(1000);
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	ОписаниеТиповЧисло	= Новый ОписаниеТипов("Число", КЧ);
	ОписаниеТиповСтрока	= Новый ОписаниеТипов("Строка", , КС);
	ОписаниеТиповДата	= Новый ОписаниеТипов("Дата", , , КД);
	ОписаниеТиповБулево	= Новый ОписаниеТипов("Булево");
	ОписаниеТиповВОТ	= Новый ОписаниеТипов("СправочникСсылка.ВариантыОтветовОпросов");
	
	// Общие вопросы
	УстановитьРеквизитыВопроса(Менеджер.Имя,			"Имя",			ВВидеСтроки,,,,	ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.Отчество,		"Отчество",		ВВидеСтроки,,,,	ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.Фамилия,		"Фамилия",		ВВидеСтроки,,,,	ОписаниеТиповСтрока, 50);
	УстановитьРеквизитыВопроса(Менеджер.ДатаРождения,	"Дата рождения",ВВидеДаты,,,,	ОписаниеТиповДата);
	УстановитьРеквизитыВопроса(Менеджер.Фамилия,		"ИНН",			ВВидеСтроки,,,, ОписаниеТиповСтрока, 12);

	// Контактное лицо
	УстановитьРеквизитыВопроса(Менеджер.Должность,		"Должность",	ВВидеСтроки,,,, ОписаниеТиповСтрока, 100);
	УстановитьРеквизитыВопроса(Менеджер.Роль,			"Роль",			ВВидеСсылки,,,,	Новый ОписаниеТипов("СправочникСсылка.РолиКонтактныхЛиц"));

	// Контрагент
	УстановитьРеквизитыВопроса(Менеджер.НаименованиеКонтрагента,	"Наименование",				ВВидеСтроки,,,, ОписаниеТиповСтрока, 100);
	УстановитьРеквизитыВопроса(Менеджер.ТипКонтрагента,				"Тип",						ВВидеСсылки,,,,	Новый ОписаниеТипов("ПеречислениеСсылка.ЮрФизЛицо"));
	УстановитьРеквизитыВопроса(Менеджер.ИННГоловногоКонтрагента,	"ИНН головной организации",	ВВидеСтроки,,,, ОписаниеТиповСтрока, 12);
	УстановитьРеквизитыВопроса(Менеджер.ВидДеятельностиКонтрагента,	"Вид деятельности",			ВВидеСсылки,,,,	Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельностиКонтрагентов"));
	
	// табличные вопросы
	УстановитьРеквизитыВопроса(Менеджер.ТВидыДеятельностиКонтрагента,	"Виды деятельности контрагента",	ТабличныйВопрос,, 4,, ОписаниеТиповСтрока, 200);
	
	Если ЗаполнятьТабличныеВопросы Тогда
		// табличный вопрос трудовая деятельность
		ОбъектПВХВопросыДляАнкетирования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ТВидыДеятельностиКонтрагента.ПолучитьОбъект();
		НоваяКолонка = ОбъектПВХВопросыДляАнкетирования.КолонкиТаблицы.Добавить();
		НоваяКолонка.КолонкаТаблицы = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ВидДеятельностиКонтрагента;
		ОбъектПВХВопросыДляАнкетирования.КоличествоСтрокТаблицы = 4;
		ОбъектПВХВопросыДляАнкетирования.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыВопросов()

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // укЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()

// процедура производит обновление элемента справочника виды контактной информации
Процедура УстановитьпараметрыВидаКонтаткнойИнформации(СсылкаВидыКонтактнойИнформации, Знач Тип, Знач ВидОбъектаКонтактнойИнформации)
	
	Если Не ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Тип;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
	
		ОбъектВидКонтактнойИнформации.Записать();
		
	Исключение
		Сообщить("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");
	КонецПопытки;

	
КонецПроцедуры

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	Состояние("Обновление справочника ""Виды контаткной информации""");

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = Истина
	|	И (ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|		ИЛИ ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ПустойВидОбъектаКонтактнойИнформации)
	|";
	
	Запрос.УстановитьПараметр("ПустойТип"                           , Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
									
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
					
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица Тогда
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента Тогда				
			
			УстановитьпараметрыВидаКонтаткнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
		КонецЕсли; 
	
	КонецЦикла; 
	
	Состояние("");

КонецПроцедуры

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  МеждународноеСокращение   - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное, МеждународноеСокращение) Экспорт

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.МеждународноеСокращение   = МеждународноеСокращение;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);		
		Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = Справочники[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыСчетов[МетаданныеТипа.Имя];	
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовРасчета[МетаданныеТипа.Имя];
		Иначе
			МенеджерТекущегоТипа = Неопределено;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда				
				ЕСли МетаданныеТипа.ДлинаКода <> 0 И МенеджерТекущегоТипа <> Неопределено Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;				
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);				
			КонецЕсли;			
		КонецЦикла;
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();			
			Объект.УстановитьНовыйКод();			
			Если МенеджерТекущегоТипа.НайтиПоКоду(Объект.Код).Пустая() Тогда
				
				// Поскольку меняем только код элемента, проверку корректности заполнения
				// дополнительных реквизитов объекта не выполняем.
				Объект.ОбменДанными.Загрузка = Истина;
				
				Объект.Записать();
			КонецЕсли;			
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

//УПРАВЛЕНИЕ ТОРГОВЛЕЙ

// Заполнение реквизитов справочника "Виды оплат чека ККМ"
//
Процедура ЗаполнитьСправочникВидыОплатЧекаККМ()

	ОбъектВидОплатыЧекаККМ                    = Справочники.ВидыОплатЧекаККМ.Наличные.ПолучитьОбъект();
	ОбъектВидОплатыЧекаККМ.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
	ОбъектВидОплатыЧекаККМ.Записать();

КонецПроцедуры // ЗаполнитьСправочникВидыОплатЧекаККМ()

// Корректировка справочника "КлассификаторСтранМира".
//
Процедура КорректировкаСправочникаКлассификаторСтранМираРоссия()

	Россия = Справочники.КлассификаторСтранМира.Россия;

	// Обработка справочника "КлассификаторСтранМира".
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторСтранМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	(КлассификаторСтранМира.Код = ""643""
	|	ИЛИ КлассификаторСтранМира.Наименование = ""РОССИЯ"")
	|	И НЕ КлассификаторСтранМира.Предопределенный
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СтранаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтранаОбъект.УстановитьПометкуУдаления(Истина);
		СтранаОбъект.Записать();
	КонецЦикла;

КонецПроцедуры // КорректировкаСправочникаКлассификаторСтранМираРоссия()

// Начальное заполнение справочника "КлассификаторСтранМира".
//
Процедура НачальноеЗаполениеСправочникаКлассификаторСтранМира()

	Россия = Справочники.КлассификаторСтранМира.Россия;

	// Заполнение полного наименования предопределенного элемента.
	РоссияОбъект                    = Россия.ПолучитьОбъект();
	РоссияОбъект.НаименованиеПолное = "Российская Федерация";
	РоссияОбъект.Записать();

КонецПроцедуры // НачальноеЗаполениеСправочникаКлассификаторСтранМира()

//ЗАГРУЗКА КЛАССИФИКАТОРА БАНКОВ
//
Процедура ЗагрузитьКлассификаторБанков()
	
	СоответствиеТипГорода = новый соответствие;
	СоответствиеТипГорода.Вставить("1","Г.");  // ГОРОД
	СоответствиеТипГорода.Вставить("2","П.");  // ПОСЕЛОК
	СоответствиеТипГорода.Вставить("3","С.");  // СЕЛО
	СоответствиеТипГорода.Вставить("4","ПГТ.");// ПОСЕЛОК ГОРОДСКОГО ТИПА
	СоответствиеТипГорода.Вставить("5","СТ-ЦА.");// СТАНИЦА
	СоответствиеТипГорода.Вставить("6","АУЛ."); // АУЛ
	СоответствиеТипГорода.Вставить("7","РП.");   //  РАБОЧИЙ ПОСЕЛОК
	СоответствиеТипГорода.Вставить("0","");  // 
	СоответствиеТипГорода.Вставить("","");  // 
	
	Разделитель = Символы.Таб;
	СпрБанки = Справочники.Банки;
	СпРегионов = Новый СписокЗначений;

	мТекстГруппы = Справочники.Банки.ПолучитьМакет("Группы");
	КолСтрок = мТекстГруппы.КоличествоСтрок();

	//Составим список регионов
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстГруппы.ПолучитьСтроку(к);

		Если (Лев(Стр,2) = "//") или (ПустаяСтрока(Стр)) Тогда
			Продолжить;
		КонецЕсли;
		НомПоля = 1;
		Пока (ПустаяСтрока(Стр) = 0) Цикл	//	пока не обработали всю шапку
	        Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда	//	не нашли
				НазваниеОдногоПоля = Стр;
				Стр = "";
			Иначе
				//	вырезаем очередное поля
				НазваниеОдногоПоля = Лев(Стр,Поз-1);
				Стр = Прав(Стр,СтрДлина(Стр)-Поз);
			КонецЕсли;

			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			//	добавляем входное поле в таблицу
			Если НомПоля = 1 Тогда
				Симвл1 = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 2 Тогда
				Симвл2 = СокрЛП(НазваниеОдногоПоля);
			КонецЕсли; 

			НомПоля = НомПоля + 1;
			Если НомПоля > 2 Тогда 
				Прервать;  // Завершить просмотр строки, т.к. обработаны все необходимые поля, но есть еще что-то.
			КонецЕсли; 
		КонецЦикла;	
		
		СпРегионов.Добавить(Симвл1,Симвл2);
	КонецЦикла;	

	мТекстКлассификатора = Справочники.Банки.ПолучитьМакет("Классификатор");
	КолСтрок = мТекстКлассификатора.КоличествоСтрок();
	Коэф = 100/КолСтрок; 
	Процент=0;
	
	//Читаем реквизиты банка и сохраняем в справочник
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстКлассификатора.ПолучитьСтроку(к);
		//1
		Поз = Найти(Стр,Разделитель);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//2
		Поз = Найти(Стр,Разделитель);
		ЗнПункт =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//3
		Поз = Найти(Стр,Разделитель);
		ЗнТипПункта = СоответствиеТипГорода.Получить(Лев(Стр,Поз-1));
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//4
		Поз = Найти(Стр,Разделитель);
		ЗнНаименование =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//5
		Поз = Найти(Стр,Разделитель);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//6
		Поз = Найти(Стр,Разделитель);
		ЗнБИК =Лев(Стр,Поз-1);
		Стр = Прав(Стр,СтрДлина(Стр)-Поз);
		//7
		Поз = Найти(Стр,Разделитель);
		ЗнКорСчет =Стр;
		
		КодРег          = Сред(ЗнБИК,3,2);
		НайденныйРегион = СпРегионов.НайтиПоЗначению(КодРег);
		Если НайденныйРегион = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗагрузитьКлассификаторБанков_Запись(СпрБанки,ЗнНаименование,ЗнБИК,ЗнКорСчет,ЗнТипПункта+" "+ЗнПункт,НайденныйРегион.Значение,НайденныйРегион.Представление);
		
		Если Процент<к*Коэф Тогда
			Состояние("Загрузка классификатора банков: "+Процент+"%");
			Процент=Процент+1;
		КонецЕсли;
	КонецЦикла;	
	
	Сообщить("Загружен классификатор банков", СтатусСообщения.Обычное);
	
КонецПроцедуры // ЗагрузитьКлассификаторБанков()

Процедура ЗагрузитьКлассификаторБанков_Запись(СпрБанки,Наименование,БИК,КоррСчет,Город,ТекОКАТО,ТекРегион)
	
	РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);
	Если РодительЭл = СпрБанки.ПустаяСсылка() Тогда
		НоваяГр              = СпрБанки.СоздатьГруппу();
		НоваяГр.Код          = ТекОКАТО;
		НоваяГр.Наименование = ТекРегион;
		НоваяГр.Записать();
		РодительЭл = НоваяГр.Ссылка;
	КонецЕсли;	
	НовыйЭл = СпрБанки.СоздатьЭлемент();
	НовыйЭл.Родитель     = РодительЭл;
	НовыйЭл.Код          = БИК;
	НовыйЭл.Наименование = Наименование;
	НовыйЭл.КоррСчет     = КоррСчет;
	НовыйЭл.Город        = Город;
	НовыйЭл.Адрес        = ", ";
	НовыйЭл.Телефоны     = ""; 		
	НовыйЭл.ОбменДанными.Загрузка = истина;
	НовыйЭл.Записать();
	
КонецПроцедуры // ЗагрузитьКлассификаторБанков_Запись()


// Управление денежными средствами и бюджетирование

// Процедура заполняет новую табличную часть Менеджеры справочника Контрагенты
//
Процедура ЗаполнитьМенеджеровПокупателя()
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПустойМенеджер", Справочники.Пользователи.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ГДЕ
	|	Контрагенты.Покупатель = ИСТИНА И Контрагенты.ОсновнойМенеджерПокупателя <> &ПустойМенеджер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Контрагент.ПолучитьОбъект();
		
		Если Объект.МенеджерыПокупателя.Найти(Объект.ОсновнойМенеджерПокупателя) = Неопределено Тогда
			Строка = Объект.МенеджерыПокупателя.Добавить();
			Строка.МенеджерПокупателя = Объект.ОсновнойМенеджерПокупателя;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура переносит личные контакты и связанную информацию
// из справочника КонтактныеЛица в новый справочник ЛичныеКонтакты
Процедура ПеренестиЛичныеКонтакты()
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
	|ИЗ
   	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
   	|
   	|ГДЕ
   	|	КонтактныеЛица.УдалитьВидКонтактногоЛица = &ВидКонтактногоЛица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонтактноеЛицо = Выборка.КонтактноеЛицо;
		
		Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КонтактноеЛицо.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;	
		
		Объект = Справочники.ЛичныеКонтакты.СоздатьЭлемент();
		Объект.Наименование 							= КонтактноеЛицо.Наименование;
		Объект.ДатаРождения 							= КонтактноеЛицо.ДатаРождения;
		Объект.Имя 										= КонтактноеЛицо.Имя;
		Объект.КоличествоДнейДоНапоминания 				= КонтактноеЛицо.КоличествоДнейДоНапоминания;
		Объект.НапоминатьОДнеРождения 					= КонтактноеЛицо.НапоминатьОДнеРождения;
		Объект.Описание 								= КонтактноеЛицо.Описание;
		Объект.Отчество 								= КонтактноеЛицо.Отчество;
		Объект.Фамилия = КонтактноеЛицо.Фамилия;
		Объект.Записать();
		
		// СВОЙСТВА
		НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(КонтактноеЛицо);
		НаборЗаписей.Прочитать();
		
		НаборДляКопирования = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборДляКопирования.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда
			Для каждого Запись из НаборЗаписей Цикл
				
				 НоваяЗапись = НаборДляКопирования.Добавить();
				 НоваяЗапись.Объект 	= Объект.Ссылка;
				 НоваяЗапись.Свойство 	= Запись.Свойство;
				 НоваяЗапись.Значение 	= Запись.Значение;
				
			КонецЦикла;
			
			НаборДляКопирования.Записать();
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли; 
		
		// КАТЕГОРИИ
		НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(КонтактноеЛицо);
		НаборЗаписей.Прочитать();
		
		НаборДляКопирования = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
		НаборДляКопирования.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда
			Для каждого Запись из НаборЗаписей Цикл
				
				 НоваяЗапись = НаборДляКопирования.Добавить();
				 НоваяЗапись.Объект 	= Объект.Ссылка;
				 НоваяЗапись.Категория 	= Запись.Категория;
				
			КонецЦикла;
			
			НаборДляКопирования.Записать();
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли; 

		// КОНТАКТНАЯ ИНФОРМАЦИЯ
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(КонтактноеЛицо);
		НаборЗаписей.Прочитать();
		
		НаборДляКопирования = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборДляКопирования.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда
			Для каждого Запись из НаборЗаписей Цикл
				
				НоваяЗапись = НаборДляКопирования.Добавить();
				НоваяЗапись.Объект 	= Объект.Ссылка;
				НоваяЗапись.Тип 	= Запись.Тип;
				НоваяЗапись.Вид 	= Запись.Вид;
				
				НоваяЗапись.Представление 	= Запись.Представление;
				НоваяЗапись.Поле1 	= Запись.Поле1;
				НоваяЗапись.Поле2 	= Запись.Поле2;
				НоваяЗапись.Поле3 	= Запись.Поле3;
				НоваяЗапись.Поле4 	= Запись.Поле4;
				НоваяЗапись.Поле5 	= Запись.Поле5;
				НоваяЗапись.Поле6 	= Запись.Поле6;
				НоваяЗапись.Поле7 	= Запись.Поле7;
				НоваяЗапись.Поле8 	= Запись.Поле8;
				НоваяЗапись.Поле9 	= Запись.Поле9;
				НоваяЗапись.Поле10 	= Запись.Поле10;
				НоваяЗапись.Комментарий 	= Запись.Комментарий;
				НоваяЗапись.ЗначениеПоУмолчанию 	= Запись.ЗначениеПоУмолчанию;

			КонецЦикла;
			
			НаборДляКопирования.Записать();
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли; 

		// ГРУППА РАССЫЛКИ
		НаборЗаписей = РегистрыСведений.СоставГруппРассылкиЭлектроннойПочты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРассылки.Установить(КонтактноеЛицо);
		НаборЗаписей.Прочитать();
		
		НаборДляКопирования = РегистрыСведений.СоставГруппРассылкиЭлектроннойПочты.СоздатьНаборЗаписей();
		НаборДляКопирования.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда
			Для каждого Запись из НаборЗаписей Цикл
				
				 НоваяЗапись = НаборДляКопирования.Добавить();
				 НоваяЗапись.ОбъектРассылки 	= Объект.Ссылка;
				 НоваяЗапись.ГруппаРассылки 	= Запись.ГруппаРассылки;
				
			КонецЦикла;
			
			НаборДляКопирования.Записать();
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли; 

		// СОБЫТИЯ
		ВыборкаСобытий = Документы.Событие.Выбрать(,,Новый Структура("КонтактноеЛицо",КонтактноеЛицо));
		Пока ВыборкаСобытий.Следующий() Цикл
			ОбъектСобытие = ВыборкаСобытий.ПолучитьОбъект();
			ОбъектСобытие.КонтактноеЛицо = Объект.Ссылка;
			ОбъектСобытие.Записать();
		КонецЦикла;
		
		ОбъектКонтактноеЛицо = КонтактноеЛицо.ПолучитьОбъект();
		ОбъектКонтактноеЛицо.УстановитьПометкуУдаления(Истина,Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новый регистр сведений КонтактныеЛицаКонтрагентов на основании данных
// из справочника КонтактныеЛица
Процедура ЗаполнитьКонтактныеЛицаКонтрагентов()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидКонтактногоЛицаЛичный", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);	
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка                    КАК КонтактноеЛицо,
	|	КонтактныеЛица.УдалитьВидКонтактногоЛица КАК УдалитьВидКонтактногоЛица,
	|	КонтактныеЛица.УдалитьОбъектВладелец     КАК УдалитьОбъектВладелец,
	|	КонтактныеЛица.УдалитьДолжность          КАК УдалитьДолжность,
	|	КонтактныеЛица.УдалитьРоль               КАК УдалитьРоль,
	|	КонтактныеЛицаКонтрагентов.Ссылка        КАК КонтактноеЛицоКонтрагента
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|		ПО КонтактныеЛицаКонтрагентов.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|			И КонтактныеЛицаКонтрагентов.Владелец = КонтактныеЛица.УдалитьОбъектВладелец
	|ГДЕ
	|	КонтактныеЛица.УдалитьВидКонтактногоЛица <> &ВидКонтактногоЛицаЛичный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.УдалитьВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента
			И ТипЗнч(Выборка.УдалитьОбъектВладелец) =  Тип("СправочникСсылка.Контрагенты") Тогда
			
			Состояние(Выборка.КонтактноеЛицо);
			
			Если Не ЗначениеЗаполнено(Выборка.КонтактноеЛицоКонтрагента) Тогда
				КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
			Иначе
				КонтактноеЛицоКонтрагента = Выборка.КонтактноеЛицоКонтрагента.ПолучитьОбъект(); 
			КонецЕсли;
			
			КонтактноеЛицоКонтрагента.Владелец            = Выборка.УдалитьОбъектВладелец;
			КонтактноеЛицоКонтрагента.КонтактноеЛицо      = Выборка.КонтактноеЛицо; 
			КонтактноеЛицоКонтрагента.Наименование        = Выборка.КонтактноеЛицо;
			КонтактноеЛицоКонтрагента.Должность           = Выборка.УдалитьДолжность;
			КонтактноеЛицоКонтрагента.РольКонтактногоЛица = Выборка.УдалитьРоль;
			КонтактноеЛицоКонтрагента.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новый регистр сведений ИсточникИнформацииПриОбращении на основании данных
// из документа Событие
Процедура ЗаполнитьРегистрСведенийИсточникИнформацииПриОбращении()
	
	События = Документы.Событие;
	Выборка = События.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИсточникИнформацииПриОбращении) И ТипЗнч(Выборка.Контрагент)= Тип("СправочникСсылка.Контрагенты") Тогда
			
			НаборЗаписей = РегистрыСведений.ИсточникИнформацииПриОбращении.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Ссылка;
			НаборЗаписей.Отбор.Регистратор.Использование = Истина;
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Движение = НаборЗаписей.Добавить();
			Движение.Период             = Выборка.Дата;
			Движение.Контрагент         = Выборка.Контрагент;
			Движение.ИсточникИнформации = Выборка.ИсточникИнформацииПриОбращении;
			Движение.Регистратор        = Выборка.Ссылка;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает регистр сведений НастройкиПользователя по переданной настройке
// 
Процедура ОчиститьНастройкиПользователяПоПараметру(Настройка)
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры

// Заполнить контактные лица в документах
//
Процедура ЗаполнитьКонтактныеЛица()
	
	// шапка документы Событие
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Событие.Ссылка КАК Событие,
	|	КонтактныеЛицаКонтрагентов.Ссылка КАК КонтактноеЛицоКонтрагента
	|ИЗ
	|	Документ.Событие КАК Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|		ПО Событие.КонтактноеЛицо = КонтактныеЛицаКонтрагентов.КонтактноеЛицо
	|		И  Событие.Контрагент = КонтактныеЛицаКонтрагентов.Владелец
	|ГДЕ
	|	Событие.КонтактноеЛицо ССЫЛКА Справочник.КонтактныеЛица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Событие.ПолучитьОбъект();
		Объект.КонтактноеЛицоБезКонтрагента = Объект.КонтактноеЛицо;
		Объект.КонтактноеЛицо = Выборка.КонтактноеЛицоКонтрагента;
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Не записано контактное лицо, " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	ЗапросПоКЛК = Новый Запрос;
	
	// таблица контактных лиц контрагентов
	ЗапросПоКЛК.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаКонтрагентов.Ссылка,
	|   КонтактныеЛицаКонтрагентов.Владелец КАК Контрагент,
	|   КонтактныеЛицаКонтрагентов.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов";

	КонтактныеЛицаКонтрагентов = ЗапросПоКЛК.Выполнить().Выгрузить();
	
	// ТЧ СторонниеЛица документа Событие
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытиеСторонниеЛица.Ссылка КАК Событие
	|ИЗ
	|	Документ.Событие.СторонниеЛица КАК СобытиеСторонниеЛица
	|ГДЕ
	|	СобытиеСторонниеЛица.Лицо ССЫЛКА Справочник.КонтактныеЛица
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Событие.ПолучитьОбъект();
		
		Для каждого Строка из Объект.СторонниеЛица Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Контрагент) ИЛИ Не ЗначениеЗаполнено(Строка.Лицо) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапросПоКЛК = Новый Запрос;
			ЗапросПоКЛК.УстановитьПараметр("Контрагент",Строка.Контрагент);
			ЗапросПоКЛК.УстановитьПараметр("КонтактноеЛицо",Строка.Лицо);
			
			Структура = Новый Структура("Контрагент,КонтактноеЛицо",Строка.Контрагент,Строка.Лицо);
			Строки = КонтактныеЛицаКонтрагентов.НайтиСтроки(Структура);
			
			Если Строки.Количество()>0 И ЗначениеЗаполнено(Строки[0].Ссылка) Тогда
				Строка.Лицо = Строки[0].Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Не записан документ событие, " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	//Шапки документов  ЗаказПокупателя, ЗаказПоставщику, СчетНаОплатуПокупателю, СчетНаОплатуПоставщика
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустоеКонтактноеЛицо",Справочники.КонтактныеЛица.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.Ссылка,
	|	КонтактныеЛицаКонтрагентов.Ссылка КАК КонтактноеЛицоКонтрагента
	|ИЗ
	|	(
	|	ВЫБРАТЬ 
	|		ЗаказПокупателя.Ссылка                КАК Ссылка,
	|		ЗаказПокупателя.УдалитьКонтактноеЛицо КАК УдалитьКонтактноеЛицо,
	|		ЗаказПокупателя.Контрагент            КАК Контрагент
	|	ИЗ 
	|		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ 
	|		ЗаказПоставщику.Ссылка                КАК Ссылка,
	|		ЗаказПоставщику.УдалитьКонтактноеЛицо КАК УдалитьКонтактноеЛицо,
	|		ЗаказПоставщику.Контрагент            КАК Контрагент
	|	ИЗ 
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ 
	|		СчетНаОплатуПокупателю.Ссылка                КАК Ссылка,
	|		СчетНаОплатуПокупателю.УдалитьКонтактноеЛицо КАК УдалитьКонтактноеЛицо,
	|		СчетНаОплатуПокупателю.Контрагент            КАК Контрагент
	|	ИЗ 
	|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|	ОБЪЕДИНИТЬ
	|	ВЫБРАТЬ 
	|		СчетНаОплатуПоставщика.Ссылка                КАК Ссылка,
	|		СчетНаОплатуПоставщика.УдалитьКонтактноеЛицо КАК УдалитьКонтактноеЛицо,
	|		СчетНаОплатуПоставщика.Контрагент            КАК Контрагент
	|	ИЗ 
	|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|	) КАК Документы
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ПО 
	|	Документы.УдалитьКонтактноеЛицо ССЫЛКА Справочник.КонтактныеЛица
	|	И Документы.УдалитьКонтактноеЛицо = КонтактныеЛицаКонтрагентов.КонтактноеЛицо
	|	И Документы.Контрагент ССЫЛКА Справочник.Контрагенты
	|	И Документы.Контрагент = КонтактныеЛицаКонтрагентов.Владелец
	|	И Документы.УдалитьКонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.КонтактноеЛицоКонтрагента = Выборка.КонтактноеЛицоКонтрагента;
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Не записан документ (" + Строка(Объект) + "), " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить задачи из данных документов о напоминаниях
//
Процедура ЗаполнитьЗадачиНапоминаниями()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВнутреннийЗаказ.Ссылка                  КАК Объект,
	|	ВнутреннийЗаказ.Ответственный           КАК Ответственный,
	|	ВнутреннийЗаказ.УдалитьВремяНапоминания КАК ВремяНапоминания
	|ИЗ
	|	Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
	|ГДЕ
	|	ВнутреннийЗаказ.УдалитьНапомнитьОСобытии = ИСТИНА
	|	И ВнутреннийЗаказ.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.Ответственный,
	|	ЗаказПокупателя.УдалитьВремяНапоминания
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.УдалитьНапомнитьОСобытии = ИСТИНА
	|	И ЗаказПокупателя.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Ответственный,
	|	ЗаказПоставщику.УдалитьВремяНапоминания
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.УдалитьНапомнитьОСобытии = ИСТИНА
	|	И ЗаказПоставщику.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Событие.Ссылка,
	|	Событие.Ответственный,
	|	Событие.УдалитьВремяНапоминания
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.УдалитьНапомнитьОСобытии = ИСТИНА
	|	И Событие.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетПокупателю.Ссылка,
	|	СчетПокупателю.Ответственный,
	|	СчетПокупателю.УдалитьВремяНапоминания
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетПокупателю
	|ГДЕ
	|	СчетПокупателю.УдалитьНапомнитьОСобытии = ИСТИНА
	|	И СчетПокупателю.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетПоставщика.Ссылка,
	|	СчетПоставщика.Ответственный,
	|	СчетПоставщика.УдалитьВремяНапоминания
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетПоставщика
	|ГДЕ
	|	СчетПоставщика.УдалитьНапомнитьОСобытии = ИСТИНА
	|	И СчетПоставщика.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим есть ли задачи: если хотя бы одна запись-задача существует, то
	// нужно принимать решение о том, что обновление ИБ ранее производилось. 
	
	ЗапросЗадачи = Новый Запрос;
	ЗапросЗадачи.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 *
	|ИЗ
	|	Задача.ЗадачиПользователя
	|";
	
	СписокЗадач = ЗапросЗадачи.Выполнить();
	
	Если (НЕ РезультатЗапроса.Пустой())
		И (СписокЗадач.Пустой()) Тогда
		
		// Для записи задач применяем транзакцию: если при записи хотя бы одной из задач
		// возникнет ошибка - отменяем запись всех задач без исключения.
		НачатьТранзакцию();
		
		ДанныеНапоминаний = РезультатЗапроса.Выбрать();
		Пока ДанныеНапоминаний.Следующий() Цикл
	
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			
			НоваяЗадача.Исполнитель    = ДанныеНапоминаний.Ответственный;
			НоваяЗадача.Дата           = ТекущаяДата();
			НоваяЗадача.Наименование   = Строка(ДанныеНапоминаний.Объект);
			НоваяЗадача.СрокИсполнения = ДанныеНапоминаний.ВремяНапоминания;
			НоваяЗадача.Объект         = ДанныеНапоминаний.Объект;
			
			Попытка
				НоваяЗадача.Записать();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура находит документы События у которых есть вложенные файлы
// у устанавливает им реквизит ЕстьВложения в ИСТИНА
Процедура УстановитьРеквизитНаличияФайловУСобытий()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.Объект
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект ССЫЛКА Документ.Событие";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Объект.ПолучитьОбъект();
		Объект.ЕстьВложения = Истина;
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет у документа ЭлектронноеПисьмо новую табличную часть
// ОбъектыПисем по адресам электронной почты
Процедура ЗаполнитьОбъектыПисем()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмо.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Состояние(Выборка.Ссылка);

		Письмо = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		
		Если ЗначениеЗаполнено(Письмо.УдалитьПредмет) И Не ЗначениеЗаполнено(Письмо.ПредметКонтакта) Тогда
			Письмо.ПредметКонтакта = Строка(Письмо.УдалитьПредмет);
			ЕстьИзменения = Истина;
		КонецЕсли; 
		
		// если предмет был физическое лицо - добавим в объекты
		Если ТипЗнч(Письмо.УдалитьПредмет) = Тип("СправочникСсылка.ФизическиеЛица") И Письмо.УдалитьПредмет <> Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			СтрокаПисьма = Письмо.ОбъектыПисем.Найти(Письмо.УдалитьПредмет);
			Если СтрокаПисьма = Неопределено Тогда
				СтрокаПисьма = Письмо.ОбъектыПисем.Добавить();
				СтрокаПисьма.Объект = Письмо.УдалитьПредмет;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьИзменения  Тогда
			Письмо.Записать();
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура прописывает в реквизит "ИмяРеквизита" значение "ЗначРеквизита"
// для всех документов вида "ВидДок"
//
Процедура УстановитьРеквизитДокумента( ВидДок, ИмяРеквизита, ЗначРеквизита)

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Док.Ссылка КАК ДокСсылка
		|ИЗ
		|	Документ." + ВидДок + " КАК Док
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		ДокОбъект = Обход.ДокСсылка.ПолучитьОбъект();
		ДокОбъект[ИмяРеквизита] = ЗначРеквизита;
		ДокОбъект.Записать( РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
КонецПроцедуры // УстановитьРеквизитДокумента()

// Процедура для всех организаций устанавливает признак отражения в регл.учете
Процедура УстановитьПризнакОтраженияВРеглУчете()

	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() цикл
		Если Выборка.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		ОбъектОрганизация = Выборка.ПолучитьОбъект();
		ОбъектОрганизация.ОтражатьВРегламентированномУчете = Истина;
		ОбъектОрганизация.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОСостоянииОбновления(Подсистема, Действие, Комментарий="", Уровень=0) Экспорт

	СтрокаТабуляций = "";
	Для ш = 1 По Уровень Цикл
		СтрокаТабуляций = СтрокаТабуляций + Символы.Таб;
	КонецЦикла;

	Сообщить(СтрокаТабуляций + Подсистема + ": " + Действие + ?(Комментарий = "","","(" + Комментарий + ")"),СтатусСообщения.Информация);
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ."+Подсистема, УровеньЖурналаРегистрации.Информация, , ,
	                         Действие + ?(Комментарий = "","","(" + Комментарий + ")"));

КонецПроцедуры	

// Функция для проверки возможности открытия форм - обработчиков обновления
//
Функция ПолучитьРазрешениеНаОткрытиеФормы() Экспорт

	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;

	Предупреждение("Форму обработки может открывать только пользователь с ролью ""Полные права""");

	Возврат Ложь;

КонецФункции

// Процедура выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
Процедура ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт

	// Обязательное начальное заполнение информационной базы.

	// Заполнение настроек упр. учета
	Набор  = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(НачалоМесяца('19800101'));
	Запись = Набор.Добавить();

	Запись.Период                                   = НачалоМесяца('19800101');
	Запись.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
	Запись.СтратегияСписанияПартийТоваровПоСтатусам = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаСобственныеПотомПринятые;
	Запись.ВестиПартионныйУчетПоСкладам = Истина;

	Набор.Записать();

	ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();

	ВключитьРежимПолнотекстовогоПоиска();

	// Заполнение данных для механизма контактной информации.
	ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
	ЗаполнитьСправочникВидыКонтактнойИнформации();
	
	// Заполняем ПВХ ВопросыДляАнкетирования, а именно предопределенные вопросы.
	ЗаполнитьРеквизитыВопросов();
	

	// Заполняем предопределенный элемент справочника "Виды оплат чека ККМ".
	ЗаполнитьСправочникВидыОплатЧекаККМ();
	
	// Заполним константы.
	УстановитьКонстанту("ИнтервалПроверкиНапоминанийВСекундах"    , 60);
	УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
	УстановитьКонстанту("ИспользоватьСерииНоменклатуры"           , Истина);
	УстановитьКонстанту("ИспользоватьВнутренниеЗаказы"            , Истина);
	УстановитьКонстанту("ПрефиксВесовогоТовара"                   , "1");
	УстановитьКонстанту("ПрефиксШтучногоТовара"                   , "0");
	УстановитьКонстанту("ДлинаКодаВесовогоТовара"                 , 5);
	УстановитьКонстанту("ПорядокПрисвоенияPLU"                    , Перечисления.ПорядокПрисвоенияPLU.ПоПорядку);
	УстановитьКонстанту("ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре", '20090609');
	ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();

	НачальноеЗаполениеСправочникаКлассификаторСтранМира();
	
	// Заполнение справочника Банки.
	ЗагрузитьКлассификаторБанков();

	//Необязательное начальное заполнение.
	ТекстВопроса = "Произвести первоначальное заполнение информационной базы?
	               |Начальное заполнение не рекомендуется производить в том случае,
	               |если вы ранее вели учет в другой конфигурации
	               |и хотите перенести накопленные данные.
	               |";

	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Заполнение справочника Валюты.
		ВалютаРегламентированногоУчета = 
		НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		ВалютаУправленческогоУчета = 
		НайтиСоздатьВалюту("840", "USD", "Доллар США",       "доллар, доллара, долларов, м, цент, цента, центов, м, 2");

		// Заполнение справочника КлассификаторЕдиницИзмерения.
		ЕдиницаИзмеренияВеса =
		НайтиСоздатьЕдиницу("166", "кг", "Килограмм", "KGM");
		НайтиСоздатьЕдиницу("796", "шт", "Штука", "PCE");
		
		// Заполнение констант.
		УстановитьКонстанту("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
		УстановитьКонстанту("ВалютаУправленческогоУчета",     ВалютаУправленческогоУчета);
		УстановитьКонстанту("ЕдиницаИзмеренияВеса",           ЕдиницаИзмеренияВеса);

		// Вывод строк описания обновлений.
		//ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ШапкаЗаполнениеПустойИБ"));
		//ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой ИБ");
		//ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
		//ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
		//ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

	КонецЕсли;
	
	УстановитьДатуПримененияПостановления1137();
	
КонецПроцедуры // ЗаполнитьПустуюИБ()

Процедура ВыполнитьЗаполнениеРеквизитаВидНоменклатурыВСправочникеНоменклатура() Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.Набор КАК Набор,
	|	СпрНоменклатура.Услуга КАК Услуга
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	Не СпрНоменклатура.ЭтоГруппа
	|	И СпрНоменклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|");

	КэшВидовНоменклатуры = Новый Соответствие;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Услуга Тогда
			НаименованиеВидаНоменклатуры = "Услуга";
			ТипВидаНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		ИначеЕсли Выборка.Набор Тогда
			НаименованиеВидаНоменклатуры = "Набор-пакет";
			ТипВидаНоменклатуры = Перечисления.ТипыНоменклатуры.Набор;
		Иначе
			НаименованиеВидаНоменклатуры = "Товар";
			ТипВидаНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		КонецЕсли;

		ТекВидНоменклатуры = КэшВидовНоменклатуры[НаименованиеВидаНоменклатуры];
		Если ТекВидНоменклатуры = Неопределено Тогда
			ТекВидНоменклатуры = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
			ТекВидНоменклатуры.Наименование = НаименованиеВидаНоменклатуры;
			ТекВидНоменклатуры.ТипНоменклатуры = ТипВидаНоменклатуры;
			ТекВидНоменклатуры.Записать();
			ТекВидНоменклатуры = ТекВидНоменклатуры.Ссылка;

			КэшВидовНоменклатуры.Вставить(НаименованиеВидаНоменклатуры, ТекВидНоменклатуры);
		КонецЕсли;

		ОбъектНоменклатуры = Выборка.Номенклатура.ПолучитьОбъект();
		ОбъектНоменклатуры.ВидНоменклатуры = ТекВидНоменклатуры;
		ОбъектНоменклатуры.Записать();
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет заполнение новых измерений регистра сведений "Штрихкоды",
// которые раньше были ресурсами.
//
Процедура ВыполнитьОбновлениеРегистраСведенийШтрихКоды()

	РегШтрихКоды = РегистрыСведений.Штрихкоды;
	КачествоНовый = Справочники.Качество.Новый;
	ТипНоменклатура = Тип("СправочникСсылка.Номенклатура");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РегШтрихКоды.УдалитьКод,
	|	РегШтрихКоды.Владелец,
	|	РегШтрихКоды.ШтрихКод,
	|	РегШтрихКоды.ТипШтрихКода,
	|	РегШтрихКоды.ЕдиницаИзмерения,
	|	РегШтрихКоды.ХарактеристикаНоменклатуры,
	|	РегШтрихКоды.СерияНоменклатуры,
	|	РегШтрихКоды.Качество,
	|	РегШтрихКоды.УдалитьВладелец,
	|	РегШтрихКоды.УдалитьШтрихКод,
	|	РегШтрихКоды.УдалитьТипШтрихКода,
	|	РегШтрихКоды.УдалитьЕдиницаИзмерения,
	|	РегШтрихКоды.УдалитьХарактеристикаНоменклатуры,
	|	РегШтрихКоды.УдалитьСерияНоменклатуры,
	|	РегШтрихКоды.УдалитьКачество
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК РегШтрихКоды
	|ГДЕ
	|	РегШтрихКоды.ТипШтрихКода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихКодов.ПустаяСсылка)
	|	И РегШтрихКоды.УдалитьТипШтрихКода <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихКодов.ПустаяСсылка)
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МЗ = РегШтрихКоды.СоздатьМенеджерЗаписи();

		ЗаполнитьЗначенияСвойств(МЗ, Выборка);

		МЗ.Прочитать();

		МЗ.Владелец                   = Выборка.УдалитьВладелец;
		МЗ.ШтрихКод                   = Выборка.УдалитьШтрихКод;
		МЗ.ТипШтрихКода               = Выборка.УдалитьТипШтрихКода;
		МЗ.ЕдиницаИзмерения           = Выборка.УдалитьЕдиницаИзмерения;
		МЗ.ХарактеристикаНоменклатуры = Выборка.УдалитьХарактеристикаНоменклатуры;
		МЗ.СерияНоменклатуры          = Выборка.УдалитьСерияНоменклатуры;

		Если ТипЗнч(МЗ.Владелец) = ТипНоменклатура И Не ЗначениеЗаполнено(Выборка.УдалитьКачество) Тогда
			МЗ.Качество = КачествоНовый;
		Иначе
			МЗ.Качество = Выборка.УдалитьКачество;
		КонецЕсли;

		Попытка
			МЗ.Записать(Истина);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры // ВыполнитьОбновлениеРегистраСведенийШтрихКоды()

// Процедура выполняет включение режима полнотекстового поиска.
//
Процедура ВключитьРежимПолнотекстовогоПоиска()

	флПоискВключен = Ложь;
	Попытка
		ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
		флПоискВключен = Истина;
	Исключение
	КонецПопытки;

	Пока Не флПоискВключен Цикл
		ТекстВопроса =
		"Обнаружено два соединения с информационной базой, от чего не удалось подключить средства полнотекстового поиска.
		|Закройте связанный с этой информационной базой Конфигуратор и повторите попытку подключения.
		|
		|Включить полнотекстовый поиск еще раз?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Попытка
				ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
				флПоискВключен = Истина;
			Исключение
			КонецПопытки;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВключитьРежимПолнотекстовогоПоиска()

// Процедура выполняет удаление старых элементов справочника "ТорговоеОборудование".
//
Процедура ОчиститьСправочникТорговоеОборудование()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТорговоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
	|ГДЕ
	|	ТорговоеОборудование.ОбработкаОбслуживания = ЗНАЧЕНИЕ(Справочник.ОбработкиОбслуживанияТО.ПустаяСсылка)
	|	И ТорговоеОборудование.Модель = """"
	|");

	УдалитьОбъекты(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

КонецПроцедуры // ОчиститьСправочникТорговоеОборудование()

// Процедура выполняет корректировку движений, в которых документом "Реализация товаров и услуг"
// ошибочно не записан заказа покупателя в случае использования заказов в табличных частях.
//
Процедура УстановитьЗаказВТоварыПереданные()

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;

	УказаниеЗаказов = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();

	Если УказаниеЗаказов <> Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации
	   И УказаниеЗаказов <> Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = РегистрыНакопления.ТоварыПереданные.СоздатьНаборЗаписей();

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|	И Док.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И Док.Ссылка.Проведен
	|	И Док.ЗаказПокупателя <> Док.Ссылка.Сделка
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();

		ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведенияДокумента.Неоперативный);

		ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);

		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);

		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			КопияТовары = ТаблицаПоТоварам.Скопировать();

			КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";

			СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
		КонецЕсли;

		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборЗаписей, СтруктТаблицДокумента);

		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         ДокументОбъект.Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        ДокументОбъект.Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
		КонецЕсли;

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборЗаписей, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, ДокументОбъект.Дата);

		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры // УстановитьЗаказВТоварыПереданные()

Процедура ЗаполнитьУП2008_НДСНалоговыйПериод()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Организация,
	               |	УчетнаяПолитикаНалоговыйУчет.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА УчетнаяПолитикаНалоговыйУчет.Период = ДАТАВРЕМЯ(2008, 1, 1)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьПолитика20080101
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			УчетнаяПолитикаНалоговыйУчет.Организация КАК Организация,
	               |			УчетнаяПолитикаНалоговыйУчет.Период КАК Период,
	               |			ВЫБОР
	               |				КОГДА УчетнаяПолитикаНалоговыйУчет.НДСНалоговыйПериод = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ КАК КорректироватьЗапись
	               |		ИЗ
	               |			РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	               |		ГДЕ
	               |			УчетнаяПолитикаНалоговыйУчет.Период >= ДАТАВРЕМЯ(2008, 1, 1)) КАК УчетнаяПолитикаНалоговыйУчет
	               |		ПО (УчетнаяПолитикаНалоговыйУчет.Организация = Организации.Ссылка)
	               |ГДЕ
	               |	(УчетнаяПолитикаНалоговыйУчет.КорректироватьЗапись
	               |			ИЛИ УчетнаяПолитикаНалоговыйУчет.Период ЕСТЬ NULL )
	               |ИТОГИ ПО
	               |	Организация";
			 
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Организация");
	
	ВыборкаОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		Выборка = ВыборкаОрганизации.Выбрать();
		
		ТребуетсяСоздатьЗапись20080101 = Истина;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Период <> Null Тогда
				
				Если Выборка.ЕстьПолитика20080101 Тогда
					ТребуетсяСоздатьЗапись20080101 = Ложь;
				КонецЕсли;
				
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьМенеджерЗаписи();
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.Период = Выборка.Период;
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.Организация = Выборка.Организация;
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.Прочитать();
				Если УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
					УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
				КонецЕсли;
					
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.Записать();
				
			ИначеЕсли Выборка.Количество() <> 1 Тогда
				ТребуетсяСоздатьЗапись20070101 = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяСоздатьЗапись20080101 Тогда
			
			СтруктураОтбора.Организация = ВыборкаОрганизации.Организация;
			УчетнаяПолитикаОрганизацийНУСрезПоследних = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних('20080101', СтруктураОтбора);
			Если УчетнаяПолитикаОрганизацийНУСрезПоследних.Количество() <> 0 Тогда
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(УчетнаяПолитикаОрганизацийНУМенеджерЗаписи, УчетнаяПолитикаОрганизацийНУСрезПоследних[0]);
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.Период = '20080101';
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.Организация = ВыборкаОрганизации.Организация;
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
				
				УчетнаяПолитикаОрганизацийНУМенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецЕсли

// В регистр сведений "ЖурналУчетаСчетовФактур" добавлен новый ресурс КППКонтрагента 
//
Процедура ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.Контрагент.КПП КАК КППКонтрагента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.КППКонтрагента = """"
	|	И ЖурналУчетаСчетовФактур.Контрагент.КПП <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.КППКонтрагента	= Выборка.КППКонтрагента;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеРСШтрихкоды()

	РегШК = РегистрыСведений.Штрихкоды;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР	КОГДА МАКСИМУМ(Штрихкоды.Владелец) ССЫЛКА Справочник.Номенклатура
	|			ТОГДА	ВЫБОР	КОГДА МАКСИМУМ(Штрихкоды.Качество) = ЗНАЧЕНИЕ(Справочник.Качество.ПустаяСсылка)
	|							ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|	КОНЕЦ              КАК ФлагПроверкаКачества
	|ПОМЕСТИТЬ ВременнаяШтрихКоды
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Штрихкод
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) <= 1
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод                   КАК Штрихкод,
	|	Штрихкоды.Владелец                   КАК Владелец,
	|	Штрихкоды.ТипШтрихкода               КАК ТипШтрихкода,
	|	Штрихкоды.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Штрихкоды.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	Штрихкоды.Качество                   КАК Качество,
	|	Штрихкоды.УдалитьКод                 КАК УдалитьКод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ВременнаяШтрихКоды КАК ВременнаяШтрихКоды
	|ПО
	|	ВременнаяШтрихКоды.Штрихкод = Штрихкоды.Штрихкод
	|ГДЕ
	|	Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN128)
	|	И Штрихкоды.ПредставлениеШтрихкода = """"
	|	И ВременнаяШтрихКоды.ФлагПроверкаКачества = ИСТИНА
	|");

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		МЗ = РегШК.СоздатьМенеджерЗаписи();

		МЗ.Штрихкод                   = Выборка.Штрихкод;
		МЗ.Владелец                   = Выборка.Владелец;
		МЗ.ТипШтрихкода               = Выборка.ТипШтрихкода;
		МЗ.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		МЗ.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		МЗ.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		МЗ.Качество                   = Выборка.Качество;
		МЗ.УдалитьКод                 = Выборка.УдалитьКод;

		МЗ.Прочитать();

		Если МЗ.Владелец = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		МЗ.ПредставлениеШтрихкода = МЗ.Штрихкод;
		МЗ.Штрихкод               = СтрЗаменить(МЗ.Штрихкод, "(", "");
		МЗ.Штрихкод               = СтрЗаменить(МЗ.Штрихкод, ")", "");

		Попытка
			МЗ.Записать(Истина);
		Исключение
			#Если Клиент Тогда
			Сообщить(ОписаниеОшибки());
			ВызватьИсключение ОписаниеОшибки();
			#Иначе
			ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
			ВызватьИсключение ОписаниеОшибки();
			#КонецЕсли
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

// Соответствие старых и новых имен файлов обработок обслуживания для автоматического обновления ИБ
мСоответствиеИмен = Новый Соответствие;
мСоответствиеИмен.Вставить("1CFPEmulator_v2.epf",        "1CFPEmulator_v2.epf");
мСоответствиеИмен.Вставить("ACOMNetsDataLoader_v2.epf",  "ACOMNetsScaleOffline_v2.epf");
мСоответствиеИмен.Вставить("AlfaBankES_v2.epf",          "AlfaBankES_v2.epf");
мСоответствиеИмен.Вставить("ATOLBarcodeMSR_v2.epf",      "ATOLBarcodeMSR_v2.epf");
мСоответствиеИмен.Вставить("ATOLBarcodeScan_v2.epf",     "ATOLBarcodeScan_v2.epf");
мСоответствиеИмен.Вставить("ATOLCashDesk_v2.epf",        "ATOLCashierECROffline_v2.epf");
мСоответствиеИмен.Вставить("ATOLCustDisp_v2.epf",        "ATOLCustomerDisplay_v2.epf");
мСоответствиеИмен.Вставить("ATOLGenECR_v2.epf",          "ATOLFiscalPrinters_v2.epf");
мСоответствиеИмен.Вставить("ATOLPDT_v2.epf",             "ATOLPDT_v2.epf");
мСоответствиеИмен.Вставить("ATOLScale_v2.epf",           "ATOLScale_v2.epf");
мСоответствиеИмен.Вставить("ECRA200Online_v2.epf",       "VersionTA200ECROnline_v2.epf");
мСоответствиеИмен.Вставить("FiscalOPOS_v2.epf",          "1CMoebiusFP_v2.epf");
мСоответствиеИмен.Вставить("FTCES_v2.epf",               "FTCES_v2.epf");
мСоответствиеИмен.Вставить("IncotexMercuryFP_v2.epf",    "IncotexMercuryFP_v2.epf");
мСоответствиеИмен.Вставить("KKSSparkFP_v2.epf",          "KKSSparkFP_v2.epf");
мСоответствиеИмен.Вставить("OKALadogaECR_v2.epf",        "OKALadogaECROffline_v2.epf");
мСоответствиеИмен.Вставить("SberBankES_v2.epf",          "SberBankES_v2.epf");
мСоответствиеИмен.Вставить("ScanCityCipherLab_v2.epf",   "ScanCityCipherLabPDT_v2.epf");
мСоответствиеИмен.Вставить("ScanCodeCipherLab_v2.epf",   "ScanCodeCipherLabPDT_v2.epf");
мСоответствиеИмен.Вставить("ScanOPOSMSR_v2.epf",         "1CScanOPOSMSR_v2.epf");
мСоответствиеИмен.Вставить("ScanOPOSScan_v2.epf",        "1CScanOPOSScan_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMCash_v2.epf",         "ShtrihMCashierECROffline_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMFP_v2.epf",           "ShtrihMFiscalPrinters_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMMemoLite_v2.epf",     "ShtrihMMemoPlusECROffline_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMPDT_v2.epf",          "ShtrihMPDT_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMScaleOffline_v2.epf", "ShtrihMScaleOffline_v2.epf");


