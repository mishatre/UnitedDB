
#Если Клиент Тогда

// процедура сохраняет настройки пользователя	
Процедура СохранитьНастройки() Экспорт
	
	СохранитьЗначение(ПрефиксПутиСохраненияНастроекПользователя + ".НастройкаОтбораДанных", НастройкаОтбораДанных);
	СохранитьЗначение(ПрефиксПутиСохраненияНастроекПользователя + ".НаименованиеПоследнегоОтбораДанных", НаименованиеПоследнегоОтбораДанных);
	СохранитьЗначение(ПрефиксПутиСохраненияНастроекПользователя + ".НаименованиеПоследнегоДействияПоиска", НаименованиеПоследнегоДействияПоиска);
	СохранитьЗначение(ПрефиксПутиСохраненияНастроекПользователя + ".ПользовательНастройкиОбмена", ПользовательНастройкиОбмена);	
		
КонецПроцедуры	

// процедура сохраняет настройки пользователя	
Процедура ВосстановитьНастройки(Знач ПолеВыбора) Экспорт
	
	// восстанавливаем последнее значение НаименованиеПоследнегоОтбораДанных
	НастройкаОтбораДанных = ВосстановитьЗначение(ПрефиксПутиСохраненияНастроекПользователя + ".НастройкаОтбораДанных");
	НаименованиеПоследнегоОтбораДанных = ВосстановитьЗначение(ПрефиксПутиСохраненияНастроекПользователя +  ".НаименованиеПоследнегоОтбораДанных");
	НаименованиеПоследнегоДействияПоиска = ВосстановитьЗначение(ПрефиксПутиСохраненияНастроекПользователя + ".НаименованиеПоследнегоДействияПоиска");
	ПользовательНастройкиОбмена = ВосстановитьЗначение(ПрефиксПутиСохраненияНастроекПользователя + ".ПользовательНастройкиОбмена");
	
	// по представлению попробуем найти ту настройку по которой был выполнен поиск данных
	Если НаименованиеПоследнегоДействияПоиска = "ВыполнитьОтборПоПоследнейНастройкеПоиска"
		ИЛИ НаименованиеПоследнегоДействияПоиска = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(НаименованиеПоследнегоОтбораДанных) Тогда
		
		НастройкаОтбораДанных = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОтбораДанных) Тогда
		
		НайденаСтрока = Ложь;
		Для Каждого СтрокаСписка Из ПолеВыбора.СписокВыбора Цикл
			
			Если СтрокаСписка.Представление = НастройкаОтбораДанных Тогда
				
				// нам нужно проверить, что бы процедуры поиска для этих элементов совпадали ...
				ТипПоиска = ОпределитьТипПоискаДанных(СтрокаСписка.Значение);
				
				Если ((ТипПоиска = 1) И (НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных"))
					ИЛИ ((ТипПоиска = 2) И (НаименованиеПоследнегоДействияПоиска = "ПроизвестиПоискПоВсемВидимымПолям"))
					ИЛИ ((ТипПоиска = 3) И (НаименованиеПоследнегоДействияПоиска = "ПроизвестиОтборПоНастройке")) Тогда
				
					НайденаСтрока = Истина;
					ПолеВыбора.Значение = СтрокаСписка.Значение;
					Прервать;
				
				КонецЕсли;
				
			КонецЕсли;				
			
		КонецЦикла;
		
	Иначе
		
		НайденаСтрока = Ложь;
			
	КонецЕсли;		
			
	Если НЕ НайденаСтрока 
		ИЛИ НЕ ЗначениеЗаполнено(НастройкаОтбораДанных) Тогда
		
		ПолеВыбора.Значение = "Реквизит" + СписокБыстрыхОтборовПоРеквизитам[0].Значение;
		НастройкаОтбораДанных = СписокБыстрыхОтборовПоРеквизитам[0].Представление;		
		НаименованиеПоследнегоОтбораДанных = СписокБыстрыхОтборовПоРеквизитам[0].Значение;
		НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных";
		
	КонецЕсли;
	
КонецПроцедуры
	
// процедура производит отбор по заданым ограничениям
Процедура ПроизвестиОтборДанных(ЗначениеОтбора, Знач ПредлагатьСнятьИерархическийПросмотр = Ложь, 
		Знач МаксимальноеКоличествоНайденныхОбъектов = 0, Знач ИмяОтбораДанных, Знач ИмяНастройкаОтбораДанных, 
		Знач УстановитьБыструюНастройкуОтбора = Ложь, Знач ВыполнитьПоискПоВсемВидимымПолям = Ложь,
		Знач ВыполнитьПоискПоПоследнейНастройке = Ложь) Экспорт
			
	УниверсальныеМеханизмы.ОчиститьОтборыПоискаПоПолям(Список, СписокБыстрыхОтборовПоРеквизитам, СписокВидимыхДляПоискаПолей);
	
	ЕстьОтборПоСтрокеПоиска = ЗначениеЗаполнено(ЗначениеОтбора);
		
	// в зависимости от вида отбора выполняем действия
	Если УстановитьБыструюНастройкуОтбора Тогда
			
		Если НЕ ЕстьОтборПоСтрокеПоиска Тогда
			Возврат;		
		КонецЕсли;
		
		УниверсальныеМеханизмы.УстановитьБыстрыйОтборДанных(Список, ЗначениеОтбора, ИмяОтбораДанных);
		
		// добавляем строку поиска
		РаботаСДиалогами.ДобавитьВСписокЗначенийУнивер(СписокЗначенийОтбораДанных, ПрефиксНазванияСпискаДляСохранения + ИмяНастройкаОтбораДанных, ОбъектФормыЗначениеОтбораСпискаДанных, ЗначениеОтбора);
			
	Иначе
			
		Если (МаксимальноеКоличествоНайденныхОбъектов = -1) Тогда
			Возврат;
		КонецЕсли;
							
		// отбор по всем видимым полям
		ОбработкаУниверсальногоПоиска = Обработки.УниверсальныйПоискОбъектов.Создать();
			
		Если ВыполнитьПоискПоВсемВидимымПолям Тогда
				
			Если НЕ ЕстьОтборПоСтрокеПоиска Тогда
				Возврат;		
			КонецЕсли;
				
			// поиск по всем видимым полям
			СписокВидимыхДляПоискаПолей = ОбработкаУниверсальногоПоиска.СформироватьСписокПолейПоиска(ОбъектФормыСписок, ТипОбъектовПоиска);
				
			СписокНайденныхОбъектов = ОбработкаУниверсальногоПоиска.ВыполнитьПрограммныйПоискОбъектовПоСпискуПолей(ТипОбъектовПоиска, 
				СписокВидимыхДляПоискаПолей, ЗначениеОтбора, МаксимальноеКоличествоНайденныхОбъектов, Список.Отбор, ПоказыватьФормуХодаВыполненияПоискаДанных);
				
			// добавляем строку поиска
			РаботаСДиалогами.ДобавитьВСписокЗначенийУнивер(СписокЗначенийОтбораДанных, ПрефиксНазванияСпискаДляСохранения + ИмяНастройкаОтбораДанных, ОбъектФормыЗначениеОтбораСпискаДанных, ЗначениеОтбора);	
			
		Иначе
			
			// последняя настройка для поиска данных
			ПоследняяНастройкаПоиска = Неопределено;
			
			Если ВыполнитьПоискПоПоследнейНастройке Тогда
				
				ПоследняяНастройкаПоиска = ПоследняяНастройкаПоискаДанных;
				
			Иначе
				
				// нужно получить настройку поиска по имени
				СтруктураНастройки = УниверсальныеМеханизмы.ПолучитьПараметрыНастройкиПоискаПоИмени(СоответсвиеИмяКнопокИОтборов, ТипОбъектовПоиска, ИмяОтбораДанных,
						ПользовательНастройкиОбмена, НастройкаОтбораДанных);
						
				Если СтруктураНастройки <> Неопределено Тогда
							
					ПоследняяНастройкаПоиска = СтруктураНастройки.СохраненнаяНастройка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// если пустая настройка поиска, то тоже ничего не делаем
			Если ПоследняяНастройкаПоиска <> Неопределено Тогда
						
				Если НЕ ВыполнитьПоискПоПоследнейНастройке Тогда
					
					ПользовательНастройкиОбмена = СтруктураНастройки.Пользователь;
					
				КонецЕсли;
						
			КонецЕсли;
			
			// надо проверить можно ли выполнять отбор если не заполнена строка поиска
			Если НЕ ЕстьОтборПоСтрокеПоиска Тогда
				
				// смотрим нужно ли производить отбор или нет
				МожноВыполнитьПоиск = ОбработкаУниверсальногоПоиска.ОпределитьВозможностьПроведенияПоискаДанных(ТипОбъектовПоиска, ПоследняяНастройкаПоиска, ЗначениеОтбора);
				
				Если МожноВыполнитьПоиск <> Истина Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
				
			СписокНайденныхОбъектов = ОбработкаУниверсальногоПоиска.ВыполнитьПрограммныйПоискОбъектовПоНастройкеПоиска(ТипОбъектовПоиска, 
				ПоследняяНастройкаПоиска, ЗначениеОтбора, МаксимальноеКоличествоНайденныхОбъектов, Список.Отбор, ПоказыватьФормуХодаВыполненияПоискаДанных);
				
			// добавляем строку поиска
			РаботаСДиалогами.ДобавитьВСписокЗначенийУнивер(СписокЗначенийОтбораДанных, ПрефиксНазванияСпискаДляСохранения + ИмяНастройкаОтбораДанных, ОбъектФормыЗначениеОтбораСпискаДанных, ЗначениеОтбора);	
				
		КонецЕсли;
		
		Если СписокНайденныхОбъектов = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		Состояние("Установка ограничения на список");
		
		Список.Отбор.Ссылка.Использование = Истина;
		Список.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
		Список.Отбор.Ссылка.Значение = СписокНайденныхОбъектов;
				
		Состояние("");
		
		ОбъектФормыСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
					   	    		
	КонецЕсли;
	
	Если ПредлагатьСнятьИерархическийПросмотр Тогда
		
		Если ЗначениеЗаполнено(ЗначениеОтбора) 
			И ОбъектФормыСписок.ИерархическийПросмотр Тогда
			
			ОтветНаВопрос = Вопрос("Для удобства поиска рекомендуется снять режим иерархического просмотра. Снять?", РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				ОбъектФормыСписок.ИерархическийПросмотр = Ложь;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Список.Обновить();
	
КонецПроцедуры

// обработчик при выводе строки списка отбора данных
Процедура СписокПриВыводеСтрокиСпискаОтбораДанных(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если СписокВидимыхДляПоискаПолей = Неопределено
		ИЛИ (Список.Отбор.Ссылка.Использование = Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолеСписка из СписокВидимыхДляПоискаПолей Цикл
		
		ОформлениеСтроки.Ячейки[ПолеСписка.Значение].ЦветФона =  ЦветаСтиля.ЦветФонаФормы;
				
	КонецЦикла;
	
КонецПроцедуры

//Процедура заполняет список значений для отображения отборов данных
Процедура ЗаполнитьСписокЗначенийОтборовДанных(СписокЗначений) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Очистить();
	
	Для Каждого ЭлементСписка Из СписокБыстрыхОтборовПоРеквизитам Цикл
		
		СписокЗначений.Добавить("Реквизит" + ЭлементСписка.Значение, ЭлементСписка.Представление, , БиблиотекаКартинок.ПоискПоРеквизиту);
		
	КонецЦикла;
		
	СписокЗначений.Добавить("ОтборВсеВидимыеПоля", "Все видимые поля", , БиблиотекаКартинок.ПоискПоВидимымПолям);
	
	ИмяОбъектаНастройки = УниверсальныеМеханизмы.ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска);
				
	Если НЕ ПустаяСтрока(ИмяОбъектаНастройки) Тогда
		
		СтруктураНастройки = Новый Структура();
		СтруктураНастройки.Вставить("ИмяОбъекта", ИмяОбъектаНастройки);
		
		ТаблицаНастроекОтбораПользователя = УниверсальныеМеханизмы.ПолучитьНастройки(СтруктураНастройки, Истина, Истина, Истина);
		
		Для Каждого СтрокаНастройки Из ТаблицаНастроекОтбораПользователя Цикл
			
			СоответсвиеИмяКнопокИОтборов = Новый Соответствие;
			
			ГУИД = Строка(Новый УникальныйИдентификатор());
			ГУИД = СтрЗаменить(ГУИД, "-", "");
			ГУИД = "D" + ГУИД;
				
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("Пользователь", СтрокаНастройки.Пользователь); 
			СтруктураДанных.Вставить("ИмяНастройки", СтрокаНастройки.НаименованиеНастройки);
				
			// добавляем данные в соответсвие
			СоответсвиеИмяКнопокИОтборов.Вставить(ГУИД, СтруктураДанных);
				
			СписокЗначений.Добавить(ГУИД, СтрокаНастройки.НаименованиеНастройки, , БиблиотекаКартинок.ПоискПоНастройке);
			
		КонецЦикла;
		
		СписокЗначений.Добавить("ПоследняяНастройкаОтбораДанных", "Настроить новый отбор ...");
				
	Иначе
		
		СоответсвиеИмяКнопокИОтборов = Неопределено;
	
	КонецЕсли;	
	
КонецПроцедуры

//Функция определяет тип поиска и возвращает значение списка поиска
Функция ОпределитьТипПоискаДанных(Знач ЗначениеЭлементаПоиска, ПриведенноеЗначениеЭлементаПоиска = "")
	
	ТипПоиска = 0;
	
	Если ЗначениеЭлементаПоиска = "ОтборВсеВидимыеПоля" Тогда
		
		ТипПоиска = 2;
		ПриведенноеЗначениеЭлементаПоиска = ЗначениеЭлементаПоиска;
		
	ИначеЕсли ЗначениеЭлементаПоиска = "ПоследняяНастройкаОтбораДанных" Тогда
		
		ТипПоиска = 4;
		ПриведенноеЗначениеЭлементаПоиска = ЗначениеЭлементаПоиска;
		
	Иначе
		
		ПозицияРеквизита = Найти(ЗначениеЭлементаПоиска, "Реквизит");
		
		Если ПозицияРеквизита = 1 Тогда
			
			// поиск по реквизиту
			ТипПоиска = 1;
			ПриведенноеЗначениеЭлементаПоиска = Сред(ЗначениеЭлементаПоиска, СтрДлина("Реквизит") + 1);
			
		Иначе
			// поиск по произвольной настройке поиска
			ТипПоиска = 3;
			ПриведенноеЗначениеЭлементаПоиска = ЗначениеЭлементаПоиска;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат ТипПоиска;
	
КонецФункции

// обработка выбора типа ограничения из списка
Процедура ОбработатьВыборТипаОграниченияИзСписка(ФормаВладелец, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЗначениеПоиска) Экспорт
	
	Если ВыбранноеЗначение = Неопределено
		ИЛИ ВыбранноеЗначение = "" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПредставлениеНастройкиОтбора = "";
	СтрокаВыбора = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если СтрокаВыбора <> Неопределено Тогда
		ПредставлениеНастройкиОтбора = СтрокаВыбора.Представление;
	КонецЕсли;
	
	// надо определить, что это за тип поиска и вызвать соответствующую процедуру
	ПриведенноеЗначениеЭлементаПоиска = "";
	ТипПоиска = ОпределитьТипПоискаДанных(ВыбранноеЗначение, ПриведенноеЗначениеЭлементаПоиска);
	
	Если ТипПоиска = 1 Тогда
		
		ВыполнитьБыстрыйОтборДанныхДляСпискаВыбора(ЗначениеПоиска, ПриведенноеЗначениеЭлементаПоиска, ПредставлениеНастройкиОтбора);	
		
	ИначеЕсли ТипПоиска = 2 Тогда
		
		ВыполнитьПоискПоВсемВидимымПолямДляСпискаВыбора(ЗначениеПоиска, ПриведенноеЗначениеЭлементаПоиска, ПредставлениеНастройкиОтбора);	
		
	ИначеЕсли ТипПоиска = 3 Тогда
		
		ВыполнитьОтборПоНастройкеДляСпискаВыбора(ЗначениеПоиска, ПриведенноеЗначениеЭлементаПоиска, ПредставлениеНастройкиОтбора);	
		
	ИначеЕсли ТипПоиска = 4 Тогда
		
		ВыполнитьОтборПоПоследнейНастройкеПоискаДляСпискаВыбора(ЗначениеПоиска, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтборПоПоследнейНастройкеПоискаДляСпискаВыбора(Знач ЗначениеОтбораДанных, Знач ФормаВладелец = Неопределено) Экспорт
	
	РезультирующаяНастройкаПоиска = Неопределено;
		
	РезультатПоиска = УниверсальныеМеханизмы.ВыполнитьИнтерактивныйПоискОбъектовВСписке(ТипОбъектовПоиска, 
		Список, ОбъектФормыСписок, СписокБыстрыхОтборовПоРеквизитам, ПоследняяНастройкаПоискаДанных, РезультирующаяНастройкаПоиска,
		ЗначениеОтбораДанных, ФормаВладелец);
		
	Если РезультатПоиска Тогда
			
		СписокВидимыхДляПоискаПолей = Неопределено;
		ПоследняяНастройкаПоискаДанных = РезультирующаяНастройкаПоиска;
		ОбъектФормыЗначениеОтбораСпискаДанных.Значение = ЗначениеОтбораДанных;
		
		НастройкаОтбораДанных = "Отбор пользователя";
		НаименованиеПоследнегоОтбораДанных = "ПоследняяНастройкаОтбораДанных"; 
		НаименованиеПоследнегоДействияПоиска = "ВыполнитьОтборПоПоследнейНастройкеПоиска";
		
	КонецЕсли;
	
КонецПроцедуры


// процедура выполняет отбор по настройке поиска
Процедура ВыполнитьОтборПоНастройке(ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
	
	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных);
    	
КонецПроцедуры

// процедура выполняет отбор по настройке поиска
Процедура ВыполнитьОтборПоПоследнейНастройке(ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
	
	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных, Ложь, Ложь, Истина);
    	
КонецПроцедуры

// процедура устанавливает быстрый отбор данных
Процедура ВыполнитьБыстрыйОтборДанных(Знач ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
	
	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных, Истина);
	
КонецПроцедуры

// процедура производит поиск по всем видимым полям
Процедура ВыполнитьПоискПоВсемВидимымПолям(ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
	
	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных, Ложь, Истина);
    	
КонецПроцедуры

// процедура устанавливает быстрый отбор данных
Процедура ВыполнитьОтборПоНастройкеДляСпискаВыбора(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора) Экспорт
	
	// списки восстанивливаем
	РаботаСДиалогами.ВосстановитьСписокЗначенийУнивер(СписокЗначенийОтбораДанных, ПрефиксНазванияСпискаДляСохранения + ПредставлениеНастройкиОтбора, ОбъектФормыЗначениеОтбораСпискаДанных.СписокВыбора);	
	
	ВыполнитьОтборПоНастройке(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора);	
	
	НастройкаОтбораДанных = ПредставлениеНастройкиОтбора;
	НаименованиеПоследнегоОтбораДанных = ИмяОтбораДанных; 
	НаименованиеПоследнегоДействияПоиска = "ПроизвестиОтборПоНастройке";	
		
КонецПроцедуры

//Процедура восстанавливает список отбора данных
Процедура ВосстановитьСписокОтбораДанных() Экспорт
	
	РаботаСДиалогами.ВосстановитьСписокЗначенийУнивер(СписокЗначенийОтбораДанных, ПрефиксНазванияСпискаДляСохранения + НастройкаОтбораДанных, ОбъектФормыЗначениеОтбораСпискаДанных.СписокВыбора);
	
КонецПроцедуры

// процедура устанавливает быстрый отбор данных
Процедура ВыполнитьБыстрыйОтборДанныхДляСпискаВыбора(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора) Экспорт
	
	// списки восстанивливаем
	РаботаСДиалогами.ВосстановитьСписокЗначенийУнивер(СписокЗначенийОтбораДанных, ПрефиксНазванияСпискаДляСохранения + ПредставлениеНастройкиОтбора, ОбъектФормыЗначениеОтбораСпискаДанных.СписокВыбора);	
	
	ВыполнитьБыстрыйОтборДанных(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора);
	
	НастройкаОтбораДанных = ПредставлениеНастройкиОтбора;
	НаименованиеПоследнегоОтбораДанных = ИмяОтбораДанных; 
	НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных";
		
КонецПроцедуры

// процедура устанавливает быстрый отбор данных
Процедура ВыполнитьПоискПоВсемВидимымПолямДляСпискаВыбора(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора) Экспорт
	
	// списки восстанивливаем
	РаботаСДиалогами.ВосстановитьСписокЗначенийУнивер(СписокЗначенийОтбораДанных, ПрефиксНазванияСпискаДляСохранения + ПредставлениеНастройкиОтбора, ОбъектФормыЗначениеОтбораСпискаДанных.СписокВыбора);	
	
	ВыполнитьПоискПоВсемВидимымПолям(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора);
	
	НастройкаОтбораДанных = ПредставлениеНастройкиОтбора;
	НаименованиеПоследнегоОтбораДанных = ИмяОтбораДанных; 
	НаименованиеПоследнегоДействияПоиска = "ПроизвестиПоискПоВсемВидимымПолям";
		
КонецПроцедуры

// при начале редактирования настройки поиска
Процедура НастройкаОтбораДанныхОткрытие(ЗначениеОтбораДанных, Элемент, СтандартнаяОбработка, Знач ФормаВладелец = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// проверия является ли отбор настраиваемым
	ВозможностьРедактированияНастройки = ПолучитьВозможностьОрганизацииПросмотраТекущих();
	// можно ли редактировать настройку или нет
	Если НЕ ВозможностьРедактированияНастройки Тогда
				
		Возврат;
		
	КонецЕсли;
	
	Если НаименованиеПоследнегоДействияПоиска = "ВыполнитьОтборПоПоследнейНастройкеПоиска" Тогда
		
		ВыполнитьОтборПоПоследнейНастройкеПоискаДляСпискаВыбора(ЗначениеОтбораДанных);	
		
	Иначе
	
		СтруктураНастройки = УниверсальныеМеханизмы.ПолучитьПараметрыНастройкиПоискаПоИмени(СоответсвиеИмяКнопокИОтборов, ТипОбъектовПоиска,
			НаименованиеПоследнегоОтбораДанных,	ПользовательНастройкиОбмена, НастройкаОтбораДанных);
			
		ЗначениеСтрокиТекущегоПоиска = ОбъектФормыЗначениеОтбораСпискаДанных.Значение;
				
		// надо открыть обработку универсального поиска с установленной настройкой поиска
		РезультатПоиска = УниверсальныеМеханизмы.ВыполнитьИнтерактивныйПоискОбъектовВСписке(ТипОбъектовПоиска, 
			Список, ОбъектФормыСписок, СписокБыстрыхОтборовПоРеквизитам, СтруктураНастройки, , ЗначениеСтрокиТекущегоПоиска,
			ФормаВладелец);
			
		Если РезультатПоиска Тогда
				
			СписокВидимыхДляПоискаПолей = Неопределено;
			ОбъектФормыЗначениеОтбораСпискаДанных.Значение = ЗначениеСтрокиТекущегоПоиска;
			
		КонецЕсли;	
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события АвтоПодборТекста элемента управления 
//
Процедура АвтоПодборТекстаПоиска(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	// только быстые отборы автоматим дополняем
	Если НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных" Тогда
		
		ВыполнитьБыстрыйОтборДанных(Текст, НаименованиеПоследнегоОтбораДанных, НастройкаОтбораДанных);
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента управления.
//
Процедура ЗначениеОтбораПоискаданныхПриИзменении(Элемент, Знач ЗначениеПоискаДанных) Экспорт
	
	// не производим повторный поиск если до этого был произведен поиск по части текста с таким же типом выбора
	Если НаименованиеПоследнегоДействияПоиска = "ПроизвестиОтборПоНастройке" Тогда
		
		ВыполнитьОтборПоНастройке(ЗначениеПоискаДанных, НаименованиеПоследнегоОтбораДанных, НастройкаОтбораДанных);
		
	ИначеЕсли НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных" Тогда
		
		ВыполнитьБыстрыйОтборДанных(ЗначениеПоискаДанных, НаименованиеПоследнегоОтбораДанных, НастройкаОтбораДанных);
		
	ИначеЕсли НаименованиеПоследнегоДействияПоиска = "ПроизвестиПоискПоВсемВидимымПолям" Тогда	
		
		ВыполнитьПоискПоВсемВидимымПолям(ЗначениеПоискаДанных, НаименованиеПоследнегоОтбораДанных, НастройкаОтбораДанных);
		
	ИначеЕсли НаименованиеПоследнегоДействияПоиска = "ВыполнитьОтборПоПоследнейНастройкеПоиска" Тогда
		
		ВыполнитьОтборПоПоследнейНастройке(ЗначениеПоискаДанных, НаименованиеПоследнегоОтбораДанных, НастройкаОтбораДанных);
				
	КонецЕсли;
		
КонецПроцедуры

//Функция возвращает можно ли организовать просмотр настройки поиска данных
Функция ПолучитьВозможностьОрганизацииПросмотраТекущих() Экспорт
	
    Если НЕ (НаименованиеПоследнегоДействияПоиска = "ПроизвестиОтборПоНастройке"
		ИЛИ НаименованиеПоследнегоДействияПоиска = "ВыполнитьОтборПоПоследнейНастройкеПоиска")
		
		ИЛИ НЕ ЗначениеЗаполнено(НаименованиеПоследнегоОтбораДанных) Тогда
				
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;	
		
	КонецЕсли;	
	
КонецФункции

#КонецЕсли

ПоследняяНастройкаПоискаДанных = Неопределено;
СоответсвиеИмяКнопокИОтборов = Неопределено;
СписокЗначенийОтбораДанных = Новый СписокЗначений;
ПоказыватьФормуХодаВыполненияПоискаДанных = Истина;
