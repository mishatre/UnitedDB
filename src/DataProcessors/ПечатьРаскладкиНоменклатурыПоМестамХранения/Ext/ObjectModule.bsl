#Если Клиент Тогда

Перем мТабДок;

Перем мКоличествоГруппировок;

Перем мКоличествоДопПолейПосле;
Перем мКоличествоДопПолейДо;
Перем мКоличествоДопПолейВместе;

Перем мСоответствиеГруппировок;

Перем мСоответствиеДопПолейДо;
Перем мСоответствиеДопПолейПосле;
Перем мСоответствиеДопПолейВместе;

Перем мСписокПоложенийДляПечати Экспорт;

Перем мСписокНачало;
Перем мСписокНоменклатура;
Перем мСписокДопПоле;

Перем мСписокГруппаНачало;
Перем мСписокГруппаНоменклатура;
Перем мСписокГруппаДопПоле;

Перем мСпециальныеПоля;

Перем мИмяРеквизитаСклад;
Перем мСклад;

Перем мИмяМакета Экспорт;

Перем мМакет;

Перем мИнициализироватьНастройкиПриОткрытии Экспорт;

Перем мТекущаяНастройка Экспорт;

Перем мНомерСтроки;

Перем мИзмеренияСтроки;

Перем мЕдиницаИзмеренияВеса;

Перем мПоляСПредставлениями;

Перем мВесВведенНеДляВсехТоваров;
Перем мИтогВес;

// Процедура осуществляет вызов формирования печатной формы из документа.
//
// Параметры:
//  
//
Процедура НапечататьИзДокумента(Док, ИмяМакета = Неопределено, ПечататьТолькоНеотсканированные = Неопределено, НаПринтер = Ложь) Экспорт

	Если ИмяМакета <> Неопределено Тогда
		мИмяМакета = ИмяМакета;
	КонецЕсли;

	Если ПечататьТолькоНеотсканированные <> Неопределено Тогда
		ТолькоНеотсканированныйТовар = ПечататьТолькоНеотсканированные;
	КонецЕсли;

	ВидДокументов = Док.Метаданные().Имя;
	Документ = Док;
	ВосстановитьНастройкиПриОткрытии();

	Если ПоказыватьФорму Тогда
		мИнициализироватьНастройкиПриОткрытии = Ложь;

		ПолучитьФорму().Открыть();
	Иначе
		Печать(НаПринтер);
	КонецЕсли;

КонецПроцедуры // НапечататьИзДокумента()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт

	СтруктураСНастройками = Новый Структура;
	СтруктураСНастройками.Вставить("НастройкиПостроителя"                , ПостроительОтчета.ПолучитьНастройки());
	СтруктураСНастройками.Вставить("ТаблицаНастройкиПолейПечать"         , ТаблицаНастройкиПолейПечать);
	СтруктураСНастройками.Вставить("СписокСкладов"                       , СписокСкладов);
	СтруктураСНастройками.Вставить("ВыводитьЗаголовок"                   , ВыводитьЗаголовок);
	СтруктураСНастройками.Вставить("ПоказыватьФорму"                     , ПоказыватьФорму);
	СтруктураСНастройками.Вставить("ИспользоватьСвойства"                , ИспользоватьСвойства);
	СтруктураСНастройками.Вставить("КоличествоУровнейМестХранения"       , КоличествоУровнейМестХранения);
	СтруктураСНастройками.Вставить("ПредставленияПриоритетовМестХранения", ПредставленияПриоритетовМестХранения);


КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Процедура открывает форму настройки из документа.
//
// Параметры:
//  ТекДок - Ссылка на документ, из которого открыта форма.
//
Процедура ОткрытьФормуНастройкиИзДокумента(Док) Экспорт

	ВидДокументов = Док.Метаданные().Имя;
	Документ = Док;
	ВосстановитьНастройкиПриОткрытии();
	мИнициализироватьНастройкиПриОткрытии = Ложь;
	ПолучитьФорму().Открыть();

КонецПроцедуры // ОткрытьФормуНастройкиИзДокумента()

// Функция выводит поле в шапку отчета. Возвращает количество выведенных полей.
//
// Параметры:
//  ДопПоле - поле, которое нужно вывести.
//  РезультатЗапроса - результат запроса.
//  Секция - выводимая секция.
//
// Возвращаемое значение:
//  Число - количество выведенных полей.
//
Функция ВывестиПолеВШапку(ДопПоле, РезультатЗапроса, Знач Секция)

	КоличествоПолей = 0;

	Если мСпециальныеПоля[ДопПоле.Имя] = 0 Тогда // "МестоХранения"
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Приоритет", "Все");
		Пока Выборка.Следующий() Цикл
			СтрокаПредставленияПриоритета = ПредставленияПриоритетовМестХранения.Найти(Выборка.Приоритет, "Приоритет");
			Если СтрокаПредставленияПриоритета = Неопределено Тогда
				НазваниеКолонки = ДопПоле.Псевдоним + ?(Выборка.Количество() = 1, "", " " + (Выборка.Приоритет));
			Иначе
				НазваниеКолонки = СтрокаПредставленияПриоритета.Псевдоним;
			КонецЕсли;

			Секция.Параметры.ДопПоле = НазваниеКолонки;
			мТабДок.Присоединить(Секция);

			КоличествоПолей = КоличествоПолей + 1;
		КонецЦикла;
	ИначеЕсли мСпециальныеПоля[ДопПоле.Имя] = 1 Тогда // "Остаток"
		Секция = мМакет.ПолучитьОбласть("Шапка|ДопПолеОстаток");

		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад", "Все");
		Пока Выборка.Следующий() Цикл
			НазваниеКолонки = СокрЛП(Выборка.СкладПредставление);
			Если Не ПустаяСтрока(ДопПоле.Псевдоним) Тогда
				НазваниеКолонки = НазваниеКолонки + Символы.ПС + ДопПоле.Псевдоним;
			КонецЕсли;

			Секция.Параметры.ДопПоле = НазваниеКолонки;
			мТабДок.Присоединить(Секция);

			КоличествоПолей = КоличествоПолей + 1;
		КонецЦикла;
	Иначе
		Секция.Параметры.ДопПоле = ДопПоле.Псевдоним;
		мТабДок.Присоединить(Секция);

		КоличествоПолей = КоличествоПолей + 1;
	КонецЕсли;

	Возврат КоличествоПолей;

КонецФункции // ВывестиПолеВШапку()

// Процедура выводит поле в отчет.
//
// Параметры:
//  ДопПоле - поле, которое нужно вывести.
//  РезультатЗапроса - результат запроса.
//  Секция - выводимая секция.
//
Процедура ВывестиПолеВОтчет(ДопПоле, Выборка, Знач Секция)

	Если мСпециальныеПоля[ДопПоле] = 0 Тогда // "МестоХранения"
		ВыборкаДопПоле = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Приоритет", "Все");
		Пока ВыборкаДопПоле.Следующий() Цикл
			Секция.Параметры.ЗначениеДопПоля = ВыборкаДопПоле[ДопПоле];
			Секция.ТекущаяОбласть.ГоризонтальноеПоложение = ТаблицаНастройкиПолейПечать.Найти(ДопПоле, "Имя").Выравнивание;
			мТабДок.Присоединить(Секция);
		КонецЦикла;
	ИначеЕсли мСпециальныеПоля[ДопПоле] = 1 Тогда // "Остаток"
		Секция = мМакет.ПолучитьОбласть("Список|ДопПолеОстаток");

		ВыборкаДопПоле = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад", "Все");
		Пока ВыборкаДопПоле.Следующий() Цикл
			Секция.Параметры.ЗначениеДопПоля = ВыборкаДопПоле.Остаток;
			Секция.ТекущаяОбласть.ГоризонтальноеПоложение = ТаблицаНастройкиПолейПечать.Найти(ДопПоле, "Имя").Выравнивание;
			мТабДок.Присоединить(Секция);
		КонецЦикла;
	Иначе
		Если мПоляСПредставлениями[ДопПоле] = Неопределено Тогда
			ПредставлениеПоля = Выборка[ДопПоле];
		Иначе
			ПредставлениеПоля = Выборка[ДопПоле + "Представление"];
		КонецЕсли;

		Секция.Параметры.ЗначениеДопПоля = ПредставлениеПоля;
		Секция.ТекущаяОбласть.ГоризонтальноеПоложение = ТаблицаНастройкиПолейПечать.Найти(ДопПоле, "Имя").Выравнивание;
		мТабДок.Присоединить(Секция);
	КонецЕсли;

КонецПроцедуры // ВывестиПолеВОтчет()

// Процедура выводит пустое поле в отчет.
//
// Параметры:
//  ДопПоле - поле, которое нужно вывести.
//  РезультатЗапроса - результат запроса.
//  Секция - выводимая секция.
//
Процедура ВывестиПустоеПолеВОтчет(ДопПоле, Выборка, Знач Секция)

	Если мСпециальныеПоля[ДопПоле] = 0 Тогда // "МестоХранения"
		ВыборкаДопПоле = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Приоритет", "Все");
		Пока ВыборкаДопПоле.Следующий() Цикл
			Секция.Параметры.ЗначениеДопПоля = "";
			мТабДок.Присоединить(Секция);
		КонецЦикла;
	ИначеЕсли мСпециальныеПоля[ДопПоле] = 1 Тогда // "Остаток"
		Секция = мМакет.ПолучитьОбласть("СписокГруппа|ДопПолеОстаток");

		ВыборкаДопПоле = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад", "Все");
		Пока ВыборкаДопПоле.Следующий() Цикл
			Секция.Параметры.ЗначениеДопПоля = "";
			мТабДок.Присоединить(Секция);
		КонецЦикла;
	Иначе
		Секция.Параметры.ЗначениеДопПоля = "";
		мТабДок.Присоединить(Секция);
	КонецЕсли;

КонецПроцедуры // ВывестиПустоеПолеВОтчет()

// Процедура устанавливает ширину колонок полей.
//
// Параметры:
//  ДопПоле - поле, которое нужно вывести.
//  РезультатЗапроса - результат запроса.
//  Секция - выводимая секция.
//
Функция УстановитьШиринуПолей(ДопПоле, РезультатЗапроса, ТекКолонка)

	Если мСпециальныеПоля[ДопПоле] = 0 Тогда // "МестоХранения"
		КоличествоПолей = 0;
		ВыборкаДопПоле = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Приоритет", "Все");
		Пока ВыборкаДопПоле.Следующий() Цикл
			мТабДок.Область(, ТекКолонка + КоличествоПолей, , ТекКолонка + КоличествоПолей).ШиринаКолонки = ТаблицаНастройкиПолейПечать.Найти(ДопПоле).Ширина;

			КоличествоПолей = КоличествоПолей + 1;
		КонецЦикла;
	ИначеЕсли мСпециальныеПоля[ДопПоле] = 1 Тогда // "Остаток"
		КоличествоПолей = 0;
		ВыборкаДопПоле = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад", "Все");
		Пока ВыборкаДопПоле.Следующий() Цикл
			мТабДок.Область(, ТекКолонка + КоличествоПолей, , ТекКолонка + КоличествоПолей + 1).ШиринаКолонки = ТаблицаНастройкиПолейПечать.Найти(ДопПоле).Ширина;

			КоличествоПолей = КоличествоПолей + 1;
		КонецЦикла;
	Иначе
		мТабДок.Область(, ТекКолонка, , ТекКолонка).ШиринаКолонки = ТаблицаНастройкиПолейПечать.Найти(ДопПоле).Ширина;

		КоличествоПолей = 1;
	КонецЕсли;

	Возврат КоличествоПолей;

КонецФункции // УстановитьШиринуПолей()

// Процедура обновляет построитель отчета.
// Установленные настройки при этом не изменяются.
//
Процедура ОбновитьПостроительОтчета() Экспорт

	Настройки = ПостроительОтчета.ПолучитьНастройки();

	ЗаполнитьПостроительОтчета();

	ПостроительОтчета.УстановитьНастройки(Настройки);

КонецПроцедуры // ОбновитьПостроительОтчета()

// Проверяет корректность установленных пользователем настроек.
//
// Параметры:
//  Отказ - в этот параметр возвращается значение Истина, если обнаружены ошибки.
//
Процедура ПроверитьКорректностьНастроек(Отказ)

	Если Не ЗначениеЗаполнено(Документ) Тогда
		Предупреждение("Не выбран документ для печати!");
		Отказ = Истина;

		Возврат;
	КонецЕсли;

	//Если СписокСкладов.Количество() = 0 Тогда
	//	Предупреждение("Не выбраны склады!");
	//	Отказ = Истина;

	//	Возврат;
	//КонецЕсли;

	Если КоличествоУровнейМестХранения = 0 Тогда
		Предупреждение("Не указано количество уровней мест хранения!");
		Отказ = Истина;

		Возврат;
	КонецЕсли;

	КоличествоИзмерений = ПостроительОтчета.ИзмеренияСтроки.Количество() - 1;

	ИзмерениеНоменклатура = ПостроительОтчета.ИзмеренияСтроки.Найти("Номенклатура");

	Если ИзмерениеНоменклатура = Неопределено Тогда
		Предупреждение("Отсутствует обязательная группировка но номенклатуре!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Индекс = ПостроительОтчета.ИзмеренияСтроки.Индекс(ИзмерениеНоменклатура);

	Если Индекс <> КоличествоИзмерений Тогда
		Предупреждение ("Группировка: ""Номенклатура"" должна быть последней в измерениях строк.");
		ПостроительОтчета.ИзмеренияСтроки.Сдвинуть(ИзмерениеНоменклатура, КоличествоИзмерений - Индекс);
	КонецЕсли;

	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаПостроителя Из ПостроительОтчета.ИзмеренияСтроки Цикл
		Если СоответствиеСтрок[СтрокаПостроителя.ПутьКДанным] = Неопределено Тогда
			СоответствиеСтрок.Вставить(СтрокаПостроителя.ПутьКДанным, СтрокаПостроителя);
		Иначе
			Предупреждение("Повторяющаяся группировка " + СтрокаПостроителя.Представление + "." + Символы.ПС +
			"Нельзя использовать одинаковые поля группировки строк!");

			Отказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьКорректностьНастроек()

// В текст для построителя отчета вставляет свойства.
// Скопирована из общего модуля и изменена.
Процедура ДобавитьВТекстСвойстваЛокально(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
	                                          СтруктураПараметры, ТекстИсточникиСведений="", ТекстПоляКатегорий="", 
	                                          ТекстПоляСвойств="", ТекстПоляСгруппироватьПо = "", 
	                                          ЗаменятьСвойства = "//СВОЙСТВА", ЗаменятьКатегории = "//КАТЕГОРИИ", 
	                                          ЗаменятьСоединения = "//СОЕДИНЕНИЯ", ЗаменятьСгруппироватьПо = "//СГРУППИРОВАТЬПО",
	                                          ИдентификаторыПараметровДляОтборовПоКатегориям = "", ЗаменятьИтоги = "//ИТОГИ",
	                                          ЗаменятьПредставления = "//ПРЕДСТАВЛЕНИЯ_СВОЙСТВА") Экспорт

	// Добавляемые фрагменты запроса.
	ТекстПоляСвойствДляГруппировки = "";
	ТекстИсточникиСведений ="";
	ТекстПоляСвойств = "";
	ТекстПоляСвойствИтоги = "";
	ТекстПоляСвойствПредставления = "";

	Индекс = 0;

	СвойстваОбъектов = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать();

	Пока СвойстваОбъектов.Следующий() Цикл
		Если СвойстваОбъектов.ЭтоГруппа ИЛИ СвойстваОбъектов.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;

		Поля = ТаблицаПолей.НайтиСтроки(Новый Структура("Назначение", СвойстваОбъектов.НазначениеСвойства));

		Для Каждого Поле из Поля Цикл

			// Для списка всех полей.
			ТекстПоляСвойств = ТекстПоляСвойств + ",
			|	Свойство" + Индекс + ".Значение" + " КАК " + "Свойство" + Индекс + "Значение";

			ТекстПоляСвойствИтоги = ТекстПоляСвойствИтоги + ",
			|	МИНИМУМ(Свойство" + Индекс + ".Значение)";

			ТекстПоляСвойствПредставления = ТекстПоляСвойствПредставления + ",
			|	Свойство" + Индекс + ".Значение.Представление" + " КАК " + "Свойство" + Индекс + "ЗначениеПредставление";

			ТекстПоляСвойствДляГруппировки = ТекстПоляСвойствДляГруппировки + ",
			|	Свойство" + Индекс + ".Значение";

			// Источник для свойств.
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойство" + Индекс + "
			|ПО Свойство" + Индекс + ".Объект = " + Поле.ПутьКДанным + "
			|И  Свойство" + Индекс + ".Свойство = &ПараметрСвойство" + Индекс + "}";

			СтруктураПараметры.Вставить("ПараметрСвойство" + Индекс, СвойстваОбъектов.Ссылка);

			СтруктураПредставлениеПолей.Вставить("Свойство" + Индекс + "Значение", СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")");

			мСоответствиеНазначений.Вставить(СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")", СвойстваОбъектов.Ссылка);

			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;

	Текст = СтрЗаменить(Текст, ЗаменятьСвойства, ТекстПоляСвойств);
	Текст = СтрЗаменить(Текст, ЗаменятьИтоги, ТекстПоляСвойствИтоги);
	Текст = СтрЗаменить(Текст, ЗаменятьПредставления, ТекстПоляСвойствПредставления);
	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);
	Текст = СтрЗаменить(Текст, ЗаменятьСгруппироватьПо, ТекстПоляСвойствДляГруппировки);

КонецПроцедуры // ДобавитьВТекстСвойстваЛокально()

// Производит рекурсивный обход выборки,
// выводит в макет строки из текущей выборки.
//
//  Параметры:
//   Выборка - текущая выборка.
//   НомерГруппировки - текущий номер группировки строк.
//
Процедура ВывестиСтроку(Выборка, НомерГруппировки)

	// Обойдем в цикле переданную выборку.
	Пока Выборка.Следующий() Цикл
		НазваниеГруппировки = Выборка.Группировка();

		ЗначениеГруппировки = Выборка[НазваниеГруппировки];

		Уровень = Выборка.Уровень();
		ЭтоНеИтогПоИерархии = (Выборка.ТипЗаписи() <> ТипЗаписиЗапроса.ИтогПоИерархии);

		ЭтоНижнийУровень = (НазваниеГруппировки = "Номенклатура" И ЭтоНеИтогПоИерархии);

		Если мПоляСПредставлениями[НазваниеГруппировки] = Неопределено Тогда
			ПредставлениеГруппировки = Выборка[НазваниеГруппировки];
		Иначе
			ПредставлениеГруппировки = Выборка[НазваниеГруппировки + "Представление"];
		КонецЕсли;

		// Если тип записи - это итог по иерархии,
		// то для вывода будем использовать секции, предназначенные для иерархии.
		Если ЭтоНижнийУровень Тогда
			мНомерСтроки = мНомерСтроки + 1;

			СекцияНачало = мСписокНачало;

			СекцияНачало.Параметры.НомерСтроки = мНомерСтроки;

			СекцияНоменклатура = мСписокНоменклатура;
			СекцияДопПоле = мСписокДопПоле;
		Иначе
			СекцияНачало = мСписокГруппаНачало;
			СекцияНоменклатура = мСписокГруппаНоменклатура;
			СекцияДопПоле = мСписокГруппаДопПоле;
		КонецЕсли;

		СекцияНоменклатура.Параметры.Измерение = ПредставлениеГруппировки;

		Если ЭтоНеИтогПоИерархии Тогда
			СекцияНоменклатура.Параметры.Расшифровка = ЗначениеГруппировки;
		КонецЕсли;

		// Если выведены все группировки верхних уровней,
		// то выведем доп. поля.
		Если ЭтоНижнийУровень Тогда
			ВыборкаЕдиницыИзмерения = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЕдиницаИзмерения");
			Пока ВыборкаЕдиницыИзмерения.Следующий() Цикл
				мТабДок.Вывести(СекцияНачало, Уровень, , Истина);

				Если ВыборкаЕдиницыИзмерения.Вес = 0 Тогда
					мВесВведенНеДляВсехТоваров = Истина;
				Иначе
					мИтогВес = мИтогВес + ВыборкаЕдиницыИзмерения.Вес;
				КонецЕсли;

				Для Тмп = 1 По мСоответствиеДопПолейДо.Количество() Цикл
					ВывестиПолеВОтчет(мСоответствиеДопПолейДо[Тмп], ВыборкаЕдиницыИзмерения, СекцияДопПоле);
				КонецЦикла;

				СтрокаДопПолейВместе = "";
				Для Тмп = 1 По мКоличествоДопПолейВместе Цикл
					Если Не ПустаяСтрока(Строка(ВыборкаЕдиницыИзмерения[мСоответствиеДопПолейВместе[Тмп]])) Тогда
						Если ПустаяСтрока(СтрокаДопПолейВместе) Тогда
							СтрокаДопПолейВместе = СтрокаДопПолейВместе + " (" + ВыборкаЕдиницыИзмерения[мСоответствиеДопПолейВместе[Тмп]];
						Иначе
							СтрокаДопПолейВместе = СтрокаДопПолейВместе + ", " + ВыборкаЕдиницыИзмерения[мСоответствиеДопПолейВместе[Тмп]];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				Если Не ПустаяСтрока(СтрокаДопПолейВместе) Тогда
					СекцияНоменклатура.Параметры.Измерение = Строка(СекцияНоменклатура.Параметры.Измерение) + СтрокаДопПолейВместе + ")";
				КонецЕсли;

				мТабДок.Присоединить(СекцияНоменклатура);

				Для Тмп = 1 По мСоответствиеДопПолейПосле.Количество() Цикл
					ВывестиПолеВОтчет(мСоответствиеДопПолейПосле[Тмп], ВыборкаЕдиницыИзмерения, СекцияДопПоле);
				КонецЦикла;
			КонецЦикла;
		Иначе
			мТабДок.Вывести(СекцияНачало, Уровень, , Истина);

			// Для группировок верхних уровней и иерархии выведем
			// пустые ячейки доп. полей.
			Для Тмп = 1 По мСоответствиеДопПолейДо.Количество() Цикл
				ВывестиПустоеПолеВОтчет(мСоответствиеДопПолейДо[Тмп], Выборка, СекцияДопПоле);
			КонецЦикла;

			мТабДок.Присоединить(СекцияНоменклатура);

			Для Тмп = 1 По мСоответствиеДопПолейПосле.Количество() Цикл
				ВывестиПустоеПолеВОтчет(мСоответствиеДопПолейПосле[Тмп], Выборка, СекцияДопПоле);
			КонецЦикла;

			// Если тип записи не итог по иерархии,
			// то нужно выбрать следующую группировку.
			Если ЭтоНеИтогПоИерархии Тогда
				ВывестиСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, мСоответствиеГруппировок[НомерГруппировки + 1]), НомерГруппировки + 1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ВывестиСтроку()

Функция ВосстановитьНастройки() Экспорт

	Перем СохраненнаяНастройка;

	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь"         , глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта"           , Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));

	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	Если Результат <> Неопределено Тогда
		мТекущаяНастройка = Результат;

		ВосстановитьНастройкиИзСтруктуры(мТекущаяНастройка.СохраненнаяНастройка);
	Иначе
		мТекущаяНастройка = СтруктураНастройки;
	КонецЕсли;

	ОбновитьСохраненныеНастройки();

КонецФункции // ВосстановитьНастройки()

// Процедура восстанавливает сохраненные настройки при открытии обработки.
//
Процедура ВосстановитьНастройкиПриОткрытии() Экспорт

	ЗаполнитьПостроительОтчета();

	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта"  , Строка(ЭтотОбъект));

	Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
		мТекущаяНастройка = СтруктураНастройки;
		ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
	КонецЕсли;

	ОбновитьСохраненныеНастройки();

КонецПроцедуры // ВосстановитьНастройкиПриОткрытии()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт

	Перем ТекНастройка;

	Если СтруктураСНастройками.Свойство("НастройкиПостроителя", ТекНастройка) Тогда
		ПостроительОтчета.УстановитьНастройки(ТекНастройка);
	КонецЕсли;

	СтруктураСНастройками.Свойство("ТаблицаНастройкиПолейПечать"         , ТаблицаНастройкиПолейПечать);
	СтруктураСНастройками.Свойство("СписокСкладов"                       , СписокСкладов);
	СтруктураСНастройками.Свойство("ВыводитьЗаголовок"                   , ВыводитьЗаголовок);
	СтруктураСНастройками.Свойство("ПоказыватьФорму"                     , ПоказыватьФорму);
	СтруктураСНастройками.Свойство("ИспользоватьСвойства"                , ИспользоватьСвойства);
	СтруктураСНастройками.Свойство("КоличествоУровнейМестХранения"       , КоличествоУровнейМестХранения);
	СтруктураСНастройками.Свойство("ПредставленияПриоритетовМестХранения", ПредставленияПриоритетовМестХранения);

КонецФункции // ВосстановитьНастройкиИзСтруктуры()

Процедура СохранитьНастройки() Экспорт

	Перем СохраненнаяНастройка;

	СохраненнаяНастройка = Новый Структура;
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);

	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);

	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);

	Если Результат <> Неопределено Тогда
		мТекущаяНастройка = Результат;
	Иначе
		мТекущаяНастройка = СтруктураНастройки;
	КонецЕсли;

КонецПроцедуры // СохранитьНастройки()

// Процедура добавляет колонку в таблицу значений, если ее там нет.
// Параметры:
//  ТЗ - таблица значений, в которую нужно добавить колонку;
//  ИмяКолонки - имя колонки, которую нужно добавить.
Процедура ДобавитьКолонкуВТЗ(ТЗ, ИмяКолонки, ЗначениеПоУмолчанию = Неопределено)

	Если ТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТЗ.Колонки.Добавить(ИмяКолонки);
		ТЗ.ЗаполнитьЗначения(ЗначениеПоУмолчанию, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры // ДобавитьКолонкуВТЗ()

// Процедура обновляет настройки после их восстановления.
//
Процедура ОбновитьСохраненныеНастройки()

	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Поле");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Псевдоним");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "ВыводитьНаПечать");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Положение");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Имя");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "ПутьКДанным");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Ширина");
	ДобавитьКолонкуВТЗ(ТаблицаНастройкиПолейПечать, "Выравнивание", ГоризонтальноеПоложение.Авто);

	ДобавитьКолонкуВТЗ(ПредставленияПриоритетовМестХранения, "Приоритет");
	ДобавитьКолонкуВТЗ(ПредставленияПриоритетовМестХранения, "Псевдоним");

	ОбновитьНастройкиПечати();

КонецПроцедуры // ОбновитьСохраненныеНастройки()

// Обновляет таблицу с настройками вывода доп. полей на печать.
//
Процедура ОбновитьНастройкиПечати() Экспорт

	КоличествоСтрок = ТаблицаНастройкиПолейПечать.Количество() - 1;
	Для Тмп = 0 По КоличествоСтрок Цикл
		СтрокаНастройки = ТаблицаНастройкиПолейПечать[КоличествоСтрок - Тмп];
		Если ПостроительОтчета.ВыбранныеПоля.Найти(СтрокаНастройки.Имя) = Неопределено Тогда
			ТаблицаНастройкиПолейПечать.Удалить(СтрокаНастройки);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Поле Из ПостроительОтчета.ВыбранныеПоля Цикл
		Если ТаблицаНастройкиПолейПечать.Найти(Поле.Имя, "Имя") = Неопределено Тогда
			НоваяСтрока = ТаблицаНастройкиПолейПечать.Добавить();
			НоваяСтрока.Поле = Поле.Представление;
			НоваяСтрока.Псевдоним = Поле.Представление;
			НоваяСтрока.ВыводитьНаПечать = Истина;
			НоваяСтрока.Имя = Поле.Имя;
			НоваяСтрока.ПутьКДанным = Поле.ПутьКДанным;
			НоваяСтрока.Ширина = 14;
			НоваяСтрока.Выравнивание = ГоризонтальноеПоложение.Авто;

			НоваяСтрока.Положение = мСписокПоложенийДляПечати[0].Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбновитьНастройкиПечати()

// Процедура формирует печатную форму в соответствии с заданными настройками.
//
// Параметры:
//  
//
Процедура Печать(НаПринтер = Ложь) Экспорт

	Отказ = Ложь;

	ПроверитьКорректностьНастроек(Отказ);

	Если Отказ Тогда
		ФормаНастройки = ПолучитьФорму();
		Если Не ФормаНастройки.Открыта() Тогда
			мИнициализироватьНастройкиПриОткрытии = Ложь;
			ФормаНастройки.Открыть();
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса = ВыполнитьЗапрос(Новый Структура("НоменклатураПредставление, ЕдиницаИзмеренияПредставление, СкладПредставление"));

	мТабДок = Новый ТабличныйДокумент;
	мТабДок.ИмяПараметровПечати = "Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения";

	мМакет = ПолучитьМакет("Макет");

	Если ВыводитьЗаголовок Тогда // выведем заголовок
		Секция = мМакет.ПолучитьОбласть("Заголовок");

		Секция.Параметры.ТекстЗаголовка = СокрЛП(Документ);
		Секция.Параметры.Склад = СокрЛП(мСклад);
		мТабДок.Вывести(Секция);
	КонецЕсли;

	Секция = мМакет.ПолучитьОбласть("ВремяПечати");
	Секция.Параметры.ВремяПечати = "Дата и время печати: " + ТекущаяДата() + ". Пользователь: " + СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
	мТабДок.Вывести(Секция);

	Секция = мМакет.ПолучитьОбласть("Шапка|Начало");
	мТабДок.Вывести(Секция);

	Секция = мМакет.ПолучитьОбласть("Шапка|ДопПоле");

	мКоличествоДопПолейДо = 0;
	мСоответствиеДопПолейДо = Новый Соответствие;

	// Выведем доп. поля, которые нужно выводить ДО номенклатуры, в шапку.
	// Заодно посчитаем их количество и запомним соответствие имен.
	ТекДопПоле = 0;
	Для Каждого ДопПоле Из ТаблицаНастройкиПолейПечать Цикл
		Если ДопПоле.ВыводитьНаПечать И ДопПоле.Положение = "До номенклатуры" Тогда
			ТекДопПоле = ТекДопПоле + 1;
			мСоответствиеДопПолейДо.Вставить(ТекДопПоле, ДопПоле.Имя);

			мКоличествоДопПолейДо = мКоличествоДопПолейДо + ВывестиПолеВШапку(ДопПоле, РезультатЗапроса, Секция);
		КонецЕсли;
	КонецЦикла;

	мКоличествоДопПолейВместе = 0;
	мСоответствиеДопПолейВместе = Новый Соответствие;

	// Посчитаем количество доп. полей, которые должны выводиться вместе с номенклатурой
	// и запомним соответствие имен.
	Для Каждого ДопПоле Из ТаблицаНастройкиПолейПечать Цикл
		Если ДопПоле.ВыводитьНаПечать И ДопПоле.Положение = "Вместе с номенклатурой" Тогда
			мКоличествоДопПолейВместе = мКоличествоДопПолейВместе + 1;
			мСоответствиеДопПолейВместе.Вставить(мКоличествоДопПолейВместе, ДопПоле.Имя);
		КонецЕсли;
	КонецЦикла;

	мКоличествоГруппировок = - 1;
	мСоответствиеГруппировок = Новый Соответствие;

	// Посчитаем группировок количество и запомним соответствие имен.
	ТекстГруппировок = "";
	Для Каждого ГруппировкаСтрок Из мИзмеренияСтроки Цикл
		мКоличествоГруппировок = мКоличествоГруппировок + 1;
		мСоответствиеГруппировок.Вставить(мКоличествоГруппировок, ГруппировкаСтрок.Ключ);
	КонецЦикла;

	Секция = мМакет.ПолучитьОбласть("Шапка|Номенклатура");
	мТабДок.Присоединить(Секция);

	Секция = мМакет.ПолучитьОбласть("Шапка|ДопПоле");

	мКоличествоДопПолейПосле = 0;
	мСоответствиеДопПолейПосле = Новый Соответствие;

	// Выведем доп. поля, которые нужно выводить ПОСЛЕ номенклатуры, в шапку.
	// Заодно посчитаем их количество и запомним соответствие имен.
	ТекДопПоле = 0;
	Для Каждого ДопПоле Из ТаблицаНастройкиПолейПечать Цикл
		Если ДопПоле.ВыводитьНаПечать И ДопПоле.Положение = "После номенклатуры" Тогда
			ТекДопПоле = ТекДопПоле + 1;
			мСоответствиеДопПолейПосле.Вставить(ТекДопПоле, ДопПоле.Имя);

			мКоличествоДопПолейПосле = мКоличествоДопПолейПосле + ВывестиПолеВШапку(ДопПоле, РезультатЗапроса, Секция);
		КонецЕсли;
	КонецЦикла;

	мСписокНачало = мМакет.ПолучитьОбласть("Список|Начало");
	мСписокНоменклатура = мМакет.ПолучитьОбласть("Список|Номенклатура");
	мСписокДопПоле = мМакет.ПолучитьОбласть("Список|ДопПоле");

	мСписокГруппаНачало = мМакет.ПолучитьОбласть("СписокГруппа|Начало");
	мСписокГруппаНоменклатура = мМакет.ПолучитьОбласть("СписокГруппа|Номенклатура");
	мСписокГруппаДопПоле = мМакет.ПолучитьОбласть("СписокГруппа|ДопПоле");

	мНомерСтроки = 0;

	МетаданныеДокумента = Метаданные.Документы[ВидДокументов];

	ЕстьСоставНабора = ОбщегоНазначения.ЕстьТабЧастьДокумента("СоставНабора", МетаданныеДокумента);

	мИтогВес = 0;
	мВесВведенНеДляВсехТоваров = Ложь;

	ВывестиСтроку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, мСоответствиеГруппировок[0]), 0);

	ШиринаНоменклатура = мМакет.ПолучитьОбласть("Номенклатура").ШиринаТаблицы;
	ШиринаНачало = мМакет.ПолучитьОбласть("Начало").ШиринаТаблицы;

	ТекКолонка = ШиринаНачало + 1;
	Для Тмп = 1 По мСоответствиеДопПолейДо.Количество() Цикл
		ТекКолонка = ТекКолонка + УстановитьШиринуПолей(мСоответствиеДопПолейДо[Тмп], РезультатЗапроса, ТекКолонка);
	КонецЦикла;

	ТекКолонка = ШиринаНачало + 1 + ШиринаНоменклатура + мКоличествоДопПолейДо;
	Для Тмп = 1 По мСоответствиеДопПолейПосле.Количество() Цикл
		ТекКолонка = ТекКолонка + УстановитьШиринуПолей(мСоответствиеДопПолейПосле[Тмп], РезультатЗапроса, ТекКолонка);
	КонецЦикла;

	Секция = мМакет.ПолучитьОбласть("ИтогоВес");
	Секция.Параметры.ИтогВес = "Общий вес товаров: " + мИтогВес + " " + мЕдиницаИзмеренияВеса + "."
	+ ?(мВесВведенНеДляВсехТоваров, " Вес введен не для всех товаров.", "");
	мТабДок.Вывести(Секция);

	УниверсальныеМеханизмы.НапечататьДокумент(мТабДок, , НаПринтер, "Бланк товарного наполнения", Документ);

КонецПроцедуры // Печать()

// Сохраняет настройки построителя, добавляет служебные поля, получает результат,
// восстанавливает настройки.
//
// Параметры:
//  СлужебныеПоля - структура со служебными полями.
//
// Возвращаемое значение - РезультатЗапроса.
//
Функция ВыполнитьЗапрос(СлужебныеПоля)

	Настройки = ПостроительОтчета.ПолучитьНастройки();

	ЗаполнитьПостроительОтчета();
	ПостроительОтчета.УстановитьНастройки(Настройки);

	Для Каждого Поле Из СлужебныеПоля Цикл
		ПостроительОтчета.ДоступныеПоля.Найти(Поле.Ключ).Поле = Истина;
		ПостроительОтчета.ВыбранныеПоля.Добавить(Поле.Ключ);
	КонецЦикла;

	ПостроительОтчета.ДоступныеПоля.Склад.Измерение            = Истина;
	ПостроительОтчета.ДоступныеПоля.Приоритет.Измерение        = Истина;
	ПостроительОтчета.ДоступныеПоля.ЕдиницаИзмерения.Измерение = Истина;

	ПостроительОтчета.ИзмеренияКолонки.Очистить();
	ПостроительОтчета.ИзмеренияКолонки.Добавить("Приоритет"       , ,ТипИзмеренияПостроителяОтчета.Элементы);
	ПостроительОтчета.ИзмеренияКолонки.Добавить("Склад"           , ,ТипИзмеренияПостроителяОтчета.Элементы);
	ПостроительОтчета.ИзмеренияКолонки.Добавить("ЕдиницаИзмерения", ,ТипИзмеренияПостроителяОтчета.Элементы);

	мИзмеренияСтроки = Новый Структура;
	Для Каждого ИзмерениеСтроки Из ПостроительОтчета.ИзмеренияСтроки Цикл
		мИзмеренияСтроки.Вставить(ИзмерениеСтроки.Имя);
	КонецЦикла;

	РезультатЗапроса = ПостроительОтчета.Результат;

	ПостроительОтчета.УстановитьНастройки(Настройки);

	ПостроительОтчета.ДоступныеПоля.Склад.Измерение            = Ложь;
	ПостроительОтчета.ДоступныеПоля.Приоритет.Измерение        = Ложь;
	ПостроительОтчета.ДоступныеПоля.ЕдиницаИзмерения.Измерение = Ложь;

	Для Каждого Поле Из СлужебныеПоля Цикл
		ПостроительОтчета.ДоступныеПоля.Найти(Поле.Ключ).Поле = Ложь;
	КонецЦикла;

	Возврат РезультатЗапроса;

КонецФункции // ВыполнитьЗапрос()

// Функция возвращает массив складов для вывода остатков товаров.
//
// Возвращаемое значение:
//  Массив - Массив складов для вывода остатков товаров.
//
Функция ПолучитьМассивСкладов()

	МассивСкладов = СписокСкладов.ВыгрузитьЗначения();
	Если МассивСкладов.Найти(мСклад) = Неопределено Тогда
		МассивСкладов.Добавить(мСклад);
	КонецЕсли;

	Возврат МассивСкладов;

КонецФункции // ПолучитьМассивСкладов()

// Процедура заполняет построитель отчета.
//
// Параметры:
//  ИмяМакета -Название макета, в который выводится печатная форма.
//
Процедура ЗаполнитьПостроительОтчета(НеЗаполнятьНастройки = Ложь) Экспорт

	МетаданныеДокумента = Метаданные.Документы[ВидДокументов];

	ИмяДокумента = МетаданныеДокумента.Имя;

	Если мИмяМакета = Неопределено И ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОтправитель", МетаданныеДокумента) Тогда
		мИмяМакета = "БланкОтправитель";
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		мИмяРеквизитаСклад = "Склад";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
		мИмяРеквизитаСклад = "СкладОрдер";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("СкладГруппа", МетаданныеДокумента) Тогда
		мИмяРеквизитаСклад = "СкладГруппа";
	ИначеЕсли мИмяМакета = "БланкОтправитель"
		    И ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОтправитель", МетаданныеДокумента) Тогда
		мИмяРеквизитаСклад = "СкладОтправитель";
	ИначеЕсли мИмяМакета = "БланкПолучатель"
		    И ОбщегоНазначения.ЕстьРеквизитДокумента("СкладПолучатель", МетаданныеДокумента) Тогда
		мИмяРеквизитаСклад = "СкладПолучатель";
	КонецЕсли;

	мСклад = Документ[мИмяРеквизитаСклад];

	ЕстьСкладВТабЧасти = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", МетаданныеДокумента, "Товары");
	ЕстьСоставНабора   = ОбщегоНазначения.ЕстьТабЧастьДокумента("СоставНабора", МетаданныеДокумента);

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументРезерва = Документ.Сделка;
	Иначе
		ДокументРезерва = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;

	ПостроительОтчета.Параметры.Вставить("ТекДокумент"    , Документ);
	ПостроительОтчета.Параметры.Вставить("МассивСклады"   , ПолучитьМассивСкладов());
	ПостроительОтчета.Параметры.Вставить("ДокументРезерва", ДокументРезерва);

	// Текст запроса для отбора по номенклатуре.
	ТекстЗапросаНоменклатура = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|";

	Если ЕстьСоставНабора Тогда
		ТекстЗапросаНоменклатура = ТекстЗапросаНоменклатура + "
		|	ЕСТЬNULL(ДокСостав.Номенклатура, Док.Номенклатура) КАК Номенклатура
		|";
	Иначе
		ТекстЗапросаНоменклатура = ТекстЗапросаНоменклатура + "
		|	Док.Номенклатура КАК Номенклатура
		|";
	КонецЕсли;

	ТекстЗапросаНоменклатура = ТекстЗапросаНоменклатура + "
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК Док
	|";

	Если ЕстьСоставНабора Тогда
		ТекстЗапросаНоменклатура = ТекстЗапросаНоменклатура + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ." + ИмяДокумента + ".СоставНабора КАК ДокСостав
		|ПО
		|	ДокСостав.Ссылка = Док.Ссылка
		|	И ДокСостав.КлючСтроки = Док.КлючСтроки
		|";
	КонецЕсли;

	ТекстЗапросаНоменклатура = ТекстЗапросаНоменклатура + "
	|ГДЕ
	|	Док.Ссылка = &ТекДокумент
	|	" + ?(ТолькоНеотсканированныйТовар, "И Док.Количество <> Док.КоличествоОтсканированного", "") + "
	|";

	ТекстРодительМестаХранения = "";
	Для Тмп = 1 По КоличествоУровнейМестХранения - 1 Цикл
		ТекстРодительМестаХранения = ТекстРодительМестаХранения + ".Родитель";
	КонецЦикла;

	ДокументПроведен = Документ.Проведен;

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапросАдрес.*
	|//СВОЙСТВА
	|//ПРЕДСТАВЛЕНИЯ_СВОЙСТВА
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновнаяТаблица.Номенклатура КАК Номенклатура,
	|		ОсновнаяТаблица.Номенклатура.Наименование КАК НоменклатураПредставление,
	|		ОсновнаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ОсновнаяТаблица.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПредставление,
	|		ОсновнаяТаблица.ЕдиницаИзмерения.Вес * ОсновнаяТаблица.Количество КАК Вес,
	|		ОсновнаяТаблица.Склад КАК СкладОтгрузкиОприходования,
	|		ОсновнаяТаблица.Количество КАК Количество,
	|		ЕСТЬNULL(РегМестаХраненияОсновной.МестоХранения" + ТекстРодительМестаХранения + ", """") КАК МестоХраненияРодитель,
	|		ЕСТЬNULL(РегМестаХранения.МестоХранения.Наименование, """") КАК МестоХранения,
	|		ЕСТЬNULL(РегМестаХранения.Приоритет, 0) КАК Приоритет,
	|		СпрСклады.Ссылка КАК Склад,
	|		СпрСклады.Наименование КАК СкладПредставление,
	|		ВЫРАЗИТЬ(((ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0)
	|		   - ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0)
	|		   - ЕСТЬNULL(ТоварыКПередачеСоСкладов.КоличествоОстаток, 0)
	|		   + ЕСТЬNULL(РезервыПоЗаказу.КоличествоОстаток, 0)
	|" + ?(ДокументПроведен, "
	// Движения по документу.
	|		   + ЕСТЬNULL(ТоварыНаСкладахПоДокументу.Количество, 0)
	|		   - ЕСТЬNULL(ТоварыВРезервеНаСкладахПоДокументу.Количество, 0)
	|		   - ЕСТЬNULL(ТоварыКПередачеСоСкладовПоДокументу.Количество, 0)", "") + "
	|		   ) * ОсновнаяТаблица.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		   / ОсновнаяТаблица.ЕдиницаИзмерения.Коэффициент) КАК ЧИСЛО(15, 3)) КАК Остаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокИсточникПервичный.Склад КАК Склад,
	|			ДокИсточникПервичный.Номенклатура КАК Номенклатура,
	|			ДокИсточникПервичный.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ДокИсточникПервичный.Количество КАК Количество,
	|			МИНИМУМ(ЕСТЬNULL(РегМестаХранения.Приоритет, 0)) КАК МинПриоритет
	|		ИЗ
	|			(ВЫБРАТЬ
	|				" + ?(ЕстьСкладВТабЧасти, "ТЧТовары.Склад", "Документ." + мИмяРеквизитаСклад) + " КАК Склад,";

	Если ЕстьСоставНабора Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|				ЕСТЬNULL(ТЧСоставНабора.Номенклатура, ТЧТовары.Номенклатура) КАК Номенклатура,
	|				ЕСТЬNULL(ТЧСоставНабора.ЕдиницаИзмерения, ТЧТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|				СУММА(ЕСТЬNULL(ТЧСоставНабора.Количество * ТЧТовары.Количество" 
								+ ?(ТолькоНеотсканированныйТовар, " - ТЧСоставНабора.КоличествоОтсканированного", "") 
								+ ", ТЧТовары.Количество" + ?(ТолькоНеотсканированныйТовар, " - ТЧТовары.КоличествоОтсканированного", "") + ")) КАК Количество
	|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
	|				ТЧТовары.Номенклатура КАК Номенклатура,
	|				ТЧТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|				СУММА(ТЧТовары.Количество" + ?(ТолькоНеотсканированныйТовар, " - ТЧТовары.КоличествоОтсканированного", "") + ") КАК Количество
	|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|			ИЗ
	|				Документ." + ИмяДокумента + " КАК Документ
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + ".Товары КАК ТЧТовары
	|					ПО ТЧТовары.Ссылка = Документ.Ссылка";
	
	
	Если ЕстьСоставНабора Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|					ЛЕВОЕ СОЕДИНЕНИЕ Документ." + ИмяДокумента + ".СоставНабора КАК ТЧСоставНабора
	|					ПО ТЧСоставНабора.Ссылка = Документ.Ссылка
	|						И ТЧСоставНабора.КлючСтроки = ТЧТовары.КлючСтроки
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|					ПО (СправочникНоменклатура.Ссылка = ТЧТовары.Номенклатура)";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|					ПО (СправочникНоменклатура.Ссылка = ТЧТовары.Номенклатура)";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|			ГДЕ
	|				Документ.Ссылка В(&ТекДокумент)
	|			" + ?(ТолькоНеотсканированныйТовар, "И ТЧТовары.Количество <> ТЧТовары.КоличествоОтсканированного", "") + "	
	|			
	|			СГРУППИРОВАТЬ ПО
	|				" + ?(ЕстьСкладВТабЧасти, "ТЧТовары.Склад", "Документ." + мИмяРеквизитаСклад) + ",";

	Если ЕстьСоставНабора Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|				ЕСТЬNULL(ТЧСоставНабора.Номенклатура, ТЧТовары.Номенклатура),
	|				ЕСТЬNULL(ТЧСоставНабора.ЕдиницаИзмерения, ТЧТовары.ЕдиницаИзмерения)) КАК ДокИсточникПервичный";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
	|				"""",
	|				ТЧТовары.Номенклатура,
	|				ТЧТовары.ЕдиницаИзмерения) КАК ДокИсточникПервичный";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК РегМестаХранения
	|				ПО РегМестаХранения.Номенклатура = ДокИсточникПервичный.Номенклатура
	|					И РегМестаХранения.Склад = ДокИсточникПервичный.Склад
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокИсточникПервичный.Склад,
	|			ДокИсточникПервичный.Номенклатура,
	|			ДокИсточникПервичный.ЕдиницаИзмерения,
	|			ДокИсточникПервичный.Количество) КАК ОсновнаяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК РегМестаХранения
	|			ПО РегМестаХранения.Номенклатура = ОсновнаяТаблица.Номенклатура
	|				И РегМестаХранения.Склад = ОсновнаяТаблица.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК РегМестаХраненияОсновной
	|			ПО РегМестаХраненияОсновной.Номенклатура = ОсновнаяТаблица.Номенклатура
	|				И РегМестаХраненияОсновной.Склад = ОсновнаяТаблица.Склад
	|				И РегМестаХраненияОсновной.Приоритет = ОсновнаяТаблица.МинПриоритет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|			ПО (СпрСклады.Ссылка В (&МассивСклады))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад В (&МассивСклады)
	|			   И Номенклатура В (" + ТекстЗапросаНоменклатура + ")) КАК ТоварыНаСкладах
	|			ПО ТоварыНаСкладах.Склад = СпрСклады.Ссылка
	|				И ТоварыНаСкладах.Номенклатура = ОсновнаяТаблица.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Склад В (&МассивСклады)
	|			   И Номенклатура В (" + ТекстЗапросаНоменклатура + ")) КАК ТоварыВРезервеНаСкладах
	|			ПО ТоварыВРезервеНаСкладах.Склад = СпрСклады.Ссылка
	|				И ТоварыВРезервеНаСкладах.Номенклатура = ОсновнаяТаблица.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Склад В (&МассивСклады)
	|			   И Номенклатура В (" + ТекстЗапросаНоменклатура + ")) КАК ТоварыКПередачеСоСкладов
	|			ПО ТоварыКПередачеСоСкладов.Склад = СпрСклады.Ссылка
	|				И ТоварыКПередачеСоСкладов.Номенклатура = ОсновнаяТаблица.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,
	|			   ДокументРезерва = &ДокументРезерва) КАК РезервыПоЗаказу
	|			ПО РезервыПоЗаказу.Номенклатура = ОсновнаяТаблица.Номенклатура
	|				И РезервыПоЗаказу.Склад = СпрСклады.Ссылка
	|" + ?(ДокументПроведен, "
	// Движения по документу.
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				(ВЫБРАТЬ
	|					ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|					ТоварыНаСкладах.Склад КАК Склад,
	|					СУММА(ВЫБОР КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|						-ТоварыНаСкладах.Количество
	|					ИНАЧЕ
	|						ТоварыНаСкладах.Количество
	|					КОНЕЦ) КАК Количество
	|				ИЗ
	|					РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|				ГДЕ
	|					ТоварыНаСкладах.Регистратор = &ТекДокумент
	|				СГРУППИРОВАТЬ ПО
	|					ТоварыНаСкладах.Номенклатура,
	|					ТоварыНаСкладах.Склад
	|				) КАК ТоварыНаСкладахПоДокументу
	|			ПО ТоварыНаСкладахПоДокументу.Склад = СпрСклады.Ссылка
	|				И ТоварыНаСкладахПоДокументу.Номенклатура = ОсновнаяТаблица.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				(ВЫБРАТЬ
	|					ТоварыВРезервеНаСкладах.Номенклатура КАК Номенклатура,
	|					ТоварыВРезервеНаСкладах.Склад КАК Склад,
	|					СУММА(ВЫБОР КОГДА ТоварыВРезервеНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|						-ТоварыВРезервеНаСкладах.Количество
	|					ИНАЧЕ
	|						ТоварыВРезервеНаСкладах.Количество
	|					КОНЕЦ) КАК Количество
	|				ИЗ
	|					РегистрНакопления.ТоварыВРезервеНаСкладах КАК ТоварыВРезервеНаСкладах
	|				ГДЕ
	|					ТоварыВРезервеНаСкладах.Регистратор = &ТекДокумент
	|				СГРУППИРОВАТЬ ПО
	|					ТоварыВРезервеНаСкладах.Номенклатура,
	|					ТоварыВРезервеНаСкладах.Склад
	|				) КАК ТоварыВРезервеНаСкладахПоДокументу
	|			ПО ТоварыВРезервеНаСкладахПоДокументу.Склад = СпрСклады.Ссылка
	|				И ТоварыВРезервеНаСкладахПоДокументу.Номенклатура = ОсновнаяТаблица.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ
	|				(ВЫБРАТЬ
	|					ТоварыКПередачеСоСкладов.Номенклатура КАК Номенклатура,
	|					ТоварыКПередачеСоСкладов.Склад КАК Склад,
	|					СУММА(ВЫБОР КОГДА ТоварыКПередачеСоСкладов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|						-ТоварыКПередачеСоСкладов.Количество
	|					ИНАЧЕ
	|						ТоварыКПередачеСоСкладов.Количество
	|					КОНЕЦ) КАК Количество
	|				ИЗ
	|					РегистрНакопления.ТоварыКПередачеСоСкладов КАК ТоварыКПередачеСоСкладов
	|				ГДЕ
	|					ТоварыКПередачеСоСкладов.Регистратор = &ТекДокумент
	|				СГРУППИРОВАТЬ ПО
	|					ТоварыКПередачеСоСкладов.Номенклатура,
	|					ТоварыКПередачеСоСкладов.Склад
	|				) КАК ТоварыКПередачеСоСкладовПоДокументу
	|			ПО ТоварыКПередачеСоСкладовПоДокументу.Склад = СпрСклады.Ссылка
	|				И ТоварыКПередачеСоСкладовПоДокументу.Номенклатура = ОсновнаяТаблица.Номенклатура", "") + "
	|) КАК ЗапросАдрес
	|//СОЕДИНЕНИЯ
	|УПОРЯДОЧИТЬ ПО
	|	МестоХраненияРодитель,
	|	Приоритет,
	|	МестоХранения
	|ИТОГИ
	//|	МИНИМУМ(ЕдиницаИзмерения),
	|	СРЕДНЕЕ(Вес),
	|	СРЕДНЕЕ(Количество),
	|	МИНИМУМ(МестоХранения),
	|	СРЕДНЕЕ(Остаток),
	|	МИНИМУМ(НоменклатураПредставление),
	|	МИНИМУМ(ЕдиницаИзмеренияПредставление),
	|	МИНИМУМ(СкладПредставление)
	|//ИТОГИ
	|ПО
	|	СкладОтгрузкиОприходования,
	|	МестоХраненияРодитель,
	|	Номенклатура,
	|	Склад,
	|	Приоритет,
	|	ЕдиницаИзмерения
	|//ОБЩИЕ_СВОЙСТВА
	|АВТОУПОРЯДОЧИВАНИЕ";

	// Соответствие имен полей в запросе и их представлений в отчете.
	СтруктураПредставлениеПолей = Новый Структура(
	"Номенклатура, ЕдиницаИзмерения, Остаток, МестоХранения , МестоХраненияРодитель, СкладОтгрузкиОприходования",
	"Номенклатура", "Ед. изм.", "Cвободный остаток", "Место хранения", "Родитель мест хранения", "Склад отгрузки (оприходования)");

	Если ИспользоватьСвойства Тогда
		ТекстПоляСвойств = "";

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства. Используется в условии соединения с регистром сведений, хранящим значения свойств.
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства.
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств объектов для данного поля.
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства. Используется, если не установлено назначение.

		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;

		ТекСоответствиеНазначений = Новый Соответствие;

		ДобавитьВТекстСвойстваЛокально(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей,
		   ТекСоответствиеНазначений, ПостроительОтчета.Параметры, , , ТекстПоляСвойств);

		УправлениеОтчетами.ДобавитьВТекстСВойстваОбщие(ТекстЗапроса, ТекстПоляСвойств, "//ОБЩИЕ_СВОЙСТВА");
	КонецЕсли;

	ПостроительОтчета.Текст = ТекстЗапроса;

	Если НеЗаполнятьНастройки Тогда
		Возврат;
	КонецЕсли;

	ПостроительОтчета.ЗаполнитьНастройки();

	// Создадим список полей, доступных для выбора.
	СоответствиеДоступныхПолей = Новый Соответствие;
	СоответствиеДоступныхПолей.Вставить("ЕдиницаИзмерения", 0);
	СоответствиеДоступныхПолей.Вставить("Остаток"         , 0);
	СоответствиеДоступныхПолей.Вставить("МестоХранения"   , 0);
	СоответствиеДоступныхПолей.Вставить("Количество"      , 0);
	СоответствиеДоступныхПолей.Вставить("Вес"             , 0);
	СоответствиеДоступныхПолей.Вставить("Номенклатура"    , 0);

	Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
		Если СоответствиеДоступныхПолей[ДоступноеПоле.Имя] = Неопределено
		   И Найти(ДоступноеПоле.Имя, "Свойство") = 0 Тогда
			ДоступноеПоле.Поле = Ложь;
		Иначе
			ДоступноеПоле.Поле = Истина;
		КонецЕсли;
	КонецЦикла;

	ПостроительОтчета.ДоступныеПоля.Склад.Измерение = Ложь;
	ПостроительОтчета.ДоступныеПоля.Приоритет.Измерение = Ложь;
	ПостроительОтчета.ДоступныеПоля.ЕдиницаИзмерения.Измерение = Ложь;

	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.ИзмеренияСтроки.Добавить("СкладОтгрузкиОприходования", ,ТипИзмеренияПостроителяОтчета.Элементы);
	ПостроительОтчета.ИзмеренияСтроки.Добавить("МестоХраненияРодитель", ,ТипИзмеренияПостроителяОтчета.Элементы);
	ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура", ,ТипИзмеренияПостроителяОтчета.Элементы);

	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("Количество");
	ПостроительОтчета.ВыбранныеПоля.Добавить("ЕдиницаИзмерения");
	ПостроительОтчета.ВыбранныеПоля.Добавить("МестоХранения");
	ПостроительОтчета.ВыбранныеПоля.Добавить("Остаток");
	ПостроительОтчета.ВыбранныеПоля.Добавить("Вес");

	Если ИспользоватьСвойства Тогда
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, , ТекстПоляСвойств, ТекСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;

	// Вызовем стандартную процедуру заполнения представлений.
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);

КонецПроцедуры // ЗаполнитьПостроительОтчета()

мТекущаяНастройка = Новый Структура;
мТекущаяНастройка.Вставить("ИмяОбъекта"             , Строка(ЭтотОбъект));
мТекущаяНастройка.Вставить("Пользователь"           , глЗначениеПеременной("глТекущийПользователь"));
мТекущаяНастройка.Вставить("НаименованиеНастройки"  , "");
мТекущаяНастройка.Вставить("ИспользоватьПриОткрытии", Ложь);
мТекущаяНастройка.Вставить("СохранятьАвтоматически" , Ложь);
мТекущаяНастройка.Вставить("СохраненнаяНастройка"   , Неопределено);

мСпециальныеПоля = Новый Соответствие;
мСпециальныеПоля.Вставить("МестоХранения", 0);
мСпециальныеПоля.Вставить("Остаток"      , 1);

мИнициализироватьНастройкиПриОткрытии = Истина;

мСписокПоложенийДляПечати = Новый СписокЗначений;
мСписокПоложенийДляПечати.Добавить("После номенклатуры");
мСписокПоложенийДляПечати.Добавить("До номенклатуры");
мСписокПоложенийДляПечати.Добавить("Вместе с номенклатурой");

мЕдиницаИзмеренияВеса = СокрЛП(Константы.ЕдиницаИзмеренияВеса.Получить());

мПоляСПредставлениями = Новый Соответствие;
мПоляСПредставлениями.Вставить("Номенклатура"    , 0);
мПоляСПредставлениями.Вставить("ЕдиницаИзмерения", 1);
мПоляСПредставлениями.Вставить("Склад"           , 2);

#КонецЕсли
