Перем мПериод          Экспорт; // Период движений
Перем мТаблицаДвижений Экспорт; // Таблица движений

// Выполняет приход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьПриход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Приход);

КонецПроцедуры // ВыполнитьПриход()

// Выполняет расход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьРасход() Экспорт

	ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Расход);

КонецПроцедуры // ВыполнитьРасход()

// Выполняет движения по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьДвижения() Экспорт

	Загрузить(мТаблицаДвижений);

КонецПроцедуры // ВыполнитьДвижения()

// Процедура контролирует остаток по данному регистру по переданному документу
// и его табличной части. В случае недостатка товаров выставляется флаг отказа и 
// выдается сообщение.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - строка, имя табличной части, которая проводится по регистру, 
//  СтруктураШапкиДокумента - структура, содержащая значения "через точку" ссылочных реквизитов по шапке документа,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольОстатков(ДокументОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяСуммы = "СуммаПлатежа", Знак="") Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	
	ИмяТаблицы          = ИмяДокумента + "." + СокрЛП(ИмяТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ДокументыРасчетовСКонтрагентом" Тогда
		ЕстьДоговорКонтрагента = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
		ЕстьДоговорСделка         = ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента);
		
		Если ЕстьДоговорКонтрагента Тогда
			
			ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
			
			Если СтруктураШапкиДокумента.КонтролироватьСуммуЗадолженности Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				
				Запрос.Текст = "
				|ВЫБРАТЬ // Для контроля суммы задолженности по договору (любой вариант ведения взаиморасчетов)
				|    " + Знак + "ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
				|ИЗ
				|	 РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
				|	 ДоговорКонтрагента = &ДоговорКонтрагента
				|	 ) КАК ВзаиморасчетыПоДоговору
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
					
					СуммаВзаиморасчетовПоДокументу = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект,СтруктураШапкиДокумента.ВалютаРегламентированногоУчета),
																СтруктураШапкиДокумента.КурсВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета),
																СтруктураШапкиДокумента.КратностьВзаиморасчетов);
																
					Валюта = ?(СтруктураШапкиДокумента.ВалютаВзаиморасчетов = NULL, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
					Если (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу) > СтруктураШапкиДокумента.ДопустимаяСуммаЗадолженности Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Сумма задолженности по договору " + ДоговорКонтрагента + 
						" с учетом документа превышает допустимую сумму задолженности." + Символы.ПС +
						Символы.Таб + "Сумма задолженности с учетом документа: " + (СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу) +
						" " + Валюта + ", допустимая сумма задолженности: " + СтруктураШапкиДокумента.ДопустимаяСуммаЗадолженности + " " + Валюта + 
						", превышение: " + (ОбщегоНазначения.ФорматСумм(СуммаВзаиморасчетовОстаток + СуммаВзаиморасчетовПоДокументу - 
						СтруктураШапкиДокумента.ДопустимаяСуммаЗадолженности)) + " " + Валюта, Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Сделка = СтруктураШапкиДокумента.Сделка;
			
			Если Знак ="" И СтруктураШапкиДокумента.ПроцентПредоплаты > 0 
				И (СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
				ИЛИ ЗначениеЗаполнено(Сделка)) Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				
				Если НЕ ЗначениеЗаполнено(Сделка) Тогда
					Запрос.УстановитьПараметр("Сделка",                Неопределено);
				Иначе
					Запрос.УстановитьПараметр("Сделка",                Сделка);
				КонецЕсли;
				
				Запрос.Текст = "
				|ВЫБРАТЬ // Для контроля процента предоплаты (указана сделка, любой вариант ведения взаиморасчетов)
				|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовПриход   КАК СуммаЗаказа,
				|    ВзаиморасчетыПоДоговору.СуммаВзаиморасчетовРасход   КАК СуммаОплаты
				|ИЗ
				|	 РегистрНакопления.РасчетыСКонтрагентами.Обороты(,,,
				|	 ДоговорКонтрагента = &ДоговорКонтрагента
				|	 И Сделка              = &Сделка
				|	 ) КАК ВзаиморасчетыПоДоговору
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СуммаЗаказа = ?(Выборка.СуммаЗаказа = NULL, 0, Выборка.СуммаЗаказа);
					СуммаОплаты = ?(Выборка.СуммаОплаты = NULL, 0, Выборка.СуммаОплаты);
					ПроцентПредоплаты = СтруктураШапкиДокумента.ПроцентПредоплаты;
					ПроцентСовершеннойПредоплаты = ?(СуммаЗаказа = 0, 100, СуммаОплаты / СуммаЗаказа * 100);
					
					Если ПроцентСовершеннойПредоплаты < ПроцентПредоплаты Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Недостаточна предоплата по заказу " + Сделка + 
					Символы.ПС + Символы.Таб + " По договору """ + ДоговорКонтрагента + 
					""" требуется предоплата в размере " + ПроцентПредоплаты + "% ; Поступила предоплата  в размере " 
					+ Окр(ПроцентСовершеннойПредоплаты, 2, 1) + "%", Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
            Если Знак ="" Тогда

				// Контроль числа дней задолженности
				Если СтруктураШапкиДокумента.КонтролироватьЧислоДнейЗадолженности Тогда
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

					Запрос.Текст =
					"ВЫБРАТЬ	// Выбирает даты самых ранних документов по договорам, указанным в т.ч. 
					|		МИНИМУМ(ДокументРасчетовСКонтрагентом.Дата) КАК ДатаПервогоДокумента,
					|		ДоговорКонтрагента
					|	ИЗ	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(, 
					|		ДоговорКонтрагента = &ДоговорКонтрагента)
					|	ГДЕ СуммаВзаиморасчетовОстаток > 0	// Дебиторская задолженность больше 0
					|		И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
					|		И ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности
					|	СГРУППИРОВАТЬ ПО ДоговорКонтрагента";
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						ДопустимоеЧислоДнейЗадолженности = СтруктураШапкиДокумента.ДопустимоеЧислоДнейЗадолженности;
						
						Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
							РазницаДатВСекундах = (СтруктураШапкиДокумента.Дата - Выборка.ДатаПервогоДокумента);

							РазницаДней = Цел(РазницаДатВСекундах/(24 * 60 * 60));
						Иначе
							РазницаДней = ЗаполнениеДокументов.ЧислоРабочихДней(Выборка.ДатаПервогоДокумента, СтруктураШапкиДокумента.Дата);
						КонецЕсли;
						
						Если РазницаДней > ДопустимоеЧислоДнейЗадолженности Тогда

							ОбщегоНазначения.СообщитьОбОшибке("Превышено допустимое число дней задолженности по договору " + ДоговорКонтрагента + 
							Символы.ПС + Символы.Таб +
							" Допустимое число дней задолженности: " + ДопустимоеЧислоДнейЗадолженности + 
							", дата самой старой задолженности: " + Выборка.ДатаПервогоДокумента + 
							", превышение: " + 
							(РазницаДней - ДопустимоеЧислоДнейЗадолженности) + " дней",
							Отказ, Заголовок);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка",        ДокументОбъект.Ссылка);
		
		Запрос.Текст = "
		|ВЫБРАТЬ // Для контроля суммы задолженности по расчетному документу (ведение взаиморасчетов - по расчетным документам)
		|   Док.ДоговорКонтрагента,
		|   Док.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|   Док.ДокументРасчетовСКонтрагентом,
		|   Док."+ ИмяСуммы + " КАК СуммаДокумента,
		|   Док.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|   Взаиморасчеты.СуммаВзаиморасчетовОстаток
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК Док
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	 РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(,
		|	 ДоговорКонтрагента В (ВЫБРАТЬ РАЗЛИЧНЫЕ ДоговорКонтрагента ИЗ Документ." + ИмяТаблицы +"
		|							ГДЕ Документ." + ИмяТаблицы + ".Ссылка = &ДокументСсылка)
		|	 ) КАК Взаиморасчеты
		|ПО
		|	Док.ДоговорКонтрагента       = Взаиморасчеты.ДоговорКонтрагента
		|	И Док.ДокументРасчетовСКонтрагентом = Взаиморасчеты.ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	Док.Ссылка = &ДокументСсылка
		|	И Док.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументРасчетовСКонтрагентом) Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаВзаиморасчетовОстаток = ?(Выборка.СуммаВзаиморасчетовОстаток= NULL, 0, ?(Выборка.СуммаВзаиморасчетовОстаток > 0, 1, -1) * Выборка.СуммаВзаиморасчетовОстаток);
			
			СуммаВзаиморасчетовПоДокументу = Выборка.СуммаДокумента;

			Валюта = Выборка.ВалютаВзаиморасчетов;
			Если СуммаВзаиморасчетовОстаток < СуммаВзаиморасчетовПоДокументу Тогда
				УправлениеЗапасами.ОшибкаНетОстатка("Сумма по документу превышает текущую задолженность по расчетному документу " + Выборка.ДокументРасчетовСКонтрагентом + ".",
				СуммаВзаиморасчетовОстаток, СуммаВзаиморасчетовПоДокументу, Валюта, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
   КонецЕсли;
	
КонецПроцедуры // КонтрольОстатков()


