////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Объект") Тогда
		ЗначениеВРеквизитФормы(Параметры.Объект.ПолучитьОбъект(), "Объект");
	КонецЕсли;
		
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СтатусДокумента = Перечисления.СтатусыЭД.НеОтправлен;
		Объект.Направление     = Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Если НЕ Объект.Прочитан И НЕ Объект.Ссылка.Пустая()
		И Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.Прочитан = Истина;
		Документ.Записать();
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ИзмененСтатус = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстДокументОснование = ЗаполнитьТекстДокументаОснования(Объект.ДокументОснование);
	КонецЕсли;
	СопроводительнаяЗаписка = Объект.Текст;
	ТребуетсяПодтверждение = Объект.ТребуетсяПодтверждение;
	ОбновитьДанныеОВложении();
	
	ЭДОтклонен = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОтклоненПолучателем
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОшибкаПередачи);
	
	ПерезаполнитьКомментарии();
	
	ОбновитьИнформациюПодвала();
	УстановитьДоступностьЭлементов();
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы();
	УстановитьДоступностьЭлементов();
	ОбновитьИнформациюПодвала();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьДействияПередЗаписьюНаСервере(Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУдалениеВложения()
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		УдалитьЛишниеПрисоединенныеФайлы();
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПодтверждениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьСтатусСостояниеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭЦПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Поле.Имя, "ЭЦПКомуВыданСертификат")>0 Тогда
		ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
			ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭЦППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ЭЦП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Функция ДокументПодписан()
	
	Подписан = Ложь;
	
	// Ограничение - в таблице Вложения не может быть больше одной строки.
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) И ДокументЗаписан() Тогда
		МассивСтруктурСертификатов = "";
		КОНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
		Если Не КОНаСервере Тогда
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		КонецЕсли;
		
		Соответствие = СоответствиеДоступныхСертификатовИПараметров(МассивСтруктурСертификатов);
		
		ВидОперации = НСтр("ru = 'Подписание электронных документов'");
		Если ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(Соответствие, ВидОперации, ЭлектронныйДокументСсылка)
			И Соответствие.Количество() > 0 Тогда
			
			Для Каждого КлючИЗначение Из Соответствие Цикл
				ПараметрыСертификата = КлючИЗначение.Значение;
				Если КОНаСервере Тогда
					ПодписатьДокументНаСервере(ПараметрыСертификата, Подписан);
				Иначе
					ПодписатьДокументНаКлиенте(ПараметрыСертификата, Подписан);
				КонецЕсли;
				Прервать;
			КонецЦикла;
			
			Прочитать();
			ТекстСостояния = НСтр("ru = 'Подписано: (0)'");
			ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
			Если Подписан Тогда
				ПараметрыДокумента = Новый Структура;
				ПараметрыДокумента.Вставить("Подписан", Истина);
				
				ОбновитьСтатусДокумента(ПараметрыДокумента);
				
				Прочитать();
				УстановитьДоступностьЭлементов();
				
				ТекстСостояния = НСтр("ru = 'Подписано: (1)'");
			КонецЕсли;
			ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подписан;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() И ДокументПодписан() Тогда
		Отказ = Ложь;
		ПараметрыДокумента = ПолучитьМассивЭДДляОтправки(Отказ);
		Если Не Отказ Тогда
			ОбработатьВыбранныеДокументы(ПараметрыДокумента);
			ОбновитьСтатусДокумента(ПараметрыДокумента);
			Оповестить("ОбновитьСостояниеЭД");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если ДокументПодписан() Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Если ОбработатьОтклонениеЭД() Тогда
		ЭДОтклонен = Истина;
		ИзменитьСтатусОтклонить();
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтклонение(Команда)
	
	Если ОбработатьОтменуОтклоненияЭД() Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭлектронныйДокументСсылка, Истина);
		Иначе
			ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(ЭлектронныйДокументСсылка);
		КонецЕсли;
		
		ОбновитьОтображениеДанных();
		ЗаполнитьТаблицуЭЦП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки, Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ЭЦП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		СтруктураПараметров = Новый Структура("Описание", Комментарий);
		ИзменитьЗначенияРеквизитовНаСервере(ЭлектронныйДокументСсылка, СтруктураПараметров);
		Комментарий = "";
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) И ДокументЗаписан() Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ЭлектронныйДокументСсылка);
		ЭлектронныеДокументыСлужебныйКлиент.ИзменитьОтветственного(МассивЭД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	Если ЗначениеЗаполнено(Объект.Текст) Тогда
		СопроводительнаяЗаписка = "";
		Модифицированность = Истина;
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

// ДокументОснование

&НаКлиенте
Процедура НадписьДокументОснованиеОтсутствуетНажатие(Элемент)
	
	ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены по выбранному основанию.
		|Продолжить?'");
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыбранныйДокумент = ОткрытьФормуМодально("Документ.ПроизвольныйЭД.ФормаВыбора", , ЭтаФорма);
		Если ЗначениеЗаполнено(ВыбранныйДокумент) И ВыбранныйДокумент <> Объект.Ссылка Тогда
			Объект.ДокументОснование = ВыбранныйДокумент;
			ЗаполнитьПоДокументуОснованию();
			ОбновитьИнтерфейс();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОткрытьЗначение(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументОснование(Команда)
	
	ТекстВопроса = НСтр("ru = 'Убрать документ-основание?'");
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = Неопределено;
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

// Вложение

&НаКлиенте
Процедура ГиперссылкаДобавитьФайлНажатие(Элемент)
	
	Если ПроверитьЗаполнение() И ДокументЗаписан() Тогда
		// Ограничение оператора Такском на количество пересылаемых вложений.
		Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
			ТекстСообщения = НСтр("ru = 'Операция отменена. Добавить возможно только одно вложение.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			АдресВХранилище = Неопределено;
			ВыбранныйФайл   = "";
			
			ФайлПомещен = ПоместитьФайл(АдресВХранилище, ЭлектронныйДокументИмяФайла, ВыбранныйФайл, Истина, УникальныйИдентификатор);
			
			Если ФайлПомещен Тогда
				СтруктураФайла  = Новый Структура;
				МассивСтруктур  = Новый Массив;
				СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);
				СтруктураФайла.Вставить("ФайлБезРасширения",         СтруктураФайла.ИмяБезРасширения);
				СтруктураФайла.Вставить("ФайлРасширение",            СтруктураФайла.Расширение);
				СтруктураФайла.Вставить("АдресВоВременномХранилище", АдресВХранилище);
				МассивСтруктур.Добавить(СтруктураФайла);
				ДобавитьПрисоединенныеФайлыКСообщению(МассивСтруктур);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВложениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		// Откроем вложение по стандартному механизму
		ДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭлектронныйДокументСсылка, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьВложение(Команда)
	
	ТекстВопроса = НСтр("ru = 'Удалить вложение из документа?'");
	Если ЭЦП.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'При удалении вложения будут удалены установленные подписи.'") + Символы.ПС + ТекстВопроса;
	КонецЕсли;
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭлектронныйДокументСсылка      = Неопределено;
		ЭлектронныйДокументИмяФайла    = "";
		ЭлектронныйДокументРасширение  = "";
		ЭлектронныйДокументПиктограмма = 0;
		
		ОбработатьУдалениеВложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВФайл(Команда)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		ДанныеФайла = ПолучитьДанныеФайла(ЭлектронныйДокументСсылка, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.СохранитьВместеСЭЦП(ЭлектронныйДокументСсылка, ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ЭлектронныйДокументСсылка, УникальныйИдентификатор)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлектронныйДокументСсылка, УникальныйИдентификатор);
	
КонецФункции



&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ВыполнитьДействияПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	Если НЕ ЕстьСоглашение(ТекущийОбъект) Тогда
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьТребуетсяПодтверждениеПоСоглашению();
	КонецЕсли;
	ТекущийОбъект.Текст = СокрЛП(СопроводительнаяЗаписка);
	ТекущийОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	НаправлениеИсходящий = (Объект.Направление = Перечисления.НаправленияЭД.Исходящий);
	СтатусГотов = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Подписан);
	СтатусНеГотов = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Получен
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.НеОтправлен);
	СтатусПередан = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПереданОператору
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отправлен
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПолученоПодтверждение
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ОтправленоПодтверждение
		ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ДоставленоПодтверждение);
	ЕстьВложения = ЗначениеЗаполнено(ЭлектронныйДокументСсылка);
	ТребуетсяПодтверждение = Объект.ТребуетсяПодтверждение;
	
	ДОЗакрыт = ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.Ссылка);
	
	Элементы.Подписать.Доступность             = (НЕ (СтатусПередан ИЛИ ЭДОтклонен Или ДОЗакрыт) И ЕстьВложения И (НаправлениеИсходящий ИЛИ ТребуетсяПодтверждение));
	Элементы.ПодписатьИОтправитьЭД.Доступность = ((НЕ (СтатусПередан ИЛИ ЭДОтклонен Или ДОЗакрыт) ИЛИ СтатусГотов)
													И ЕстьВложения И (НаправлениеИсходящий ИЛИ ТребуетсяПодтверждение));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НаправлениеИсходящий
		И (Объект.СтатусДокумента = Перечисления.СтатусыЭД.НеОтправлен
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Подписан
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке) И НЕ ЭДОтклонен Тогда
		МожноРедактироватьПередаваемыеПараметры = Истина;
		Элементы.КонтекстноеМенюОчиститьВложение.Доступность = ЕстьВложения;
	Иначе
		МожноРедактироватьПередаваемыеПараметры = НЕ ЗначениеЗаполнено(Объект.Ссылка); // Если документ еще не записан, то можно редактировать.
		Элементы.КонтекстноеМенюОчиститьВложение.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ (НаправлениеИсходящий ИЛИ ЗначениеЗаполнено(ЭлектронныйДокументСсылка)) Тогда
		// Вложение было удалено или перепривязано к другому владельцу
		Элементы.ВложенияСтраницы.ТекущаяСтраница = Элементы.ВложенияСтраницаОтсутствуетФайл;
	Иначе
		Элементы.ВложенияСтраницы.ТекущаяСтраница = ?(ЕстьВложения, Элементы.ВложенияСтраницаОтобразитьФайл, Элементы.ВложенияСтраницаДобавитьФайл);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснованиеСтраницы.ТекущаяСтраница = Элементы.ДокументОснованиеСтраницаОтобразитьДокумент;
		Элементы.КонтекстноеМенюОчиститьДокументОснование.Доступность = МожноРедактироватьПередаваемыеПараметры;
	Иначе
		Элементы.ДокументОснованиеСтраницы.ТекущаяСтраница = Элементы.ДокументОснованиеСтраницаДобавить;
		Элементы.НадписьДокументОснованиеОтсутствует.Доступность = МожноРедактироватьПередаваемыеПараметры;
	КонецЕсли;
	
	Элементы.ТребуетсяПодтверждение.ТолькоПросмотр = НЕ МожноРедактироватьПередаваемыеПараметры;
	Элементы.ТекстВложение.ТолькоПросмотр = НЕ МожноРедактироватьПередаваемыеПараметры;
	Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ МожноРедактироватьПередаваемыеПараметры;
	Элементы.ОчиститьЗаписку.Доступность = МожноРедактироватьПередаваемыеПараметры;
	Элементы.ФормаПеренаправить.Доступность = ЕстьВложения;
	Элементы.ГруппаПодвалСтраницыКомментарии.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(ВсеКомментарии);
	Элементы.ГруппаКомментарииГоризонтальная.Доступность = ЕстьВложения;
	Элементы.ГруппаПодвалСтраницыЗаписка.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(СопроводительнаяЗаписка);
	
	Элементы.ФормаОтменитьОтклонение.Видимость = НаправлениеИсходящий;
	
	Если ЭДОтклонен Тогда
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = ЭлектронныйДокументСсылка.ПричинаОтклонения;
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтраницаОтклонение;
		Элементы.ФормаОтклонить.Доступность = Ложь;
		Элементы.ФормаОтменитьОтклонение.Доступность = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен);
	Иначе
		ПричиныОтклонения.Очистить();
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтатусовИСостояния;
		Элементы.ФормаОтклонить.Доступность = ?(СтатусПередан ИЛИ НЕ ЕстьВложения Или ДОЗакрыт, Ложь, Истина);
		Элементы.ФормаОтменитьОтклонение.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ФормаОбработкаЭлектронныеДокументыПечатьЭД.Заголовок = НСтр("ru = 'Печать карточки электронного документа'");
	
	Элементы.Организация.ТолькоПросмотр = ЕстьВложения;
	Элементы.Контрагент.ТолькоПросмотр = ЕстьВложения;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстЗаголовка = НСтр("ru = 'Исходящий документ %1 от %2'");
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗаголовка, Объект.Номер, Объект.Дата);
		Иначе
			Заголовок = НСтр("ru = 'Исходящий документ (создание)'");
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Входящий документ %1 от %2'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка, Объект.Номер, Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДокументЗаписан()
	
	ФлагЗаписи = Истина;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ФлагЗаписи = Ложь;
		
		ТекстВопроса = НСтр("ru = 'Для продолжения операции необходимо записать документ.
			|Записать документ?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьНовыйДокумент(ФлагЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФлагЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНовыйДокумент(ФлагЗаписи)
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Если ЕстьСоглашение(ОбъектДокумент) Тогда
		Отказ = Ложь;
		ВыполнитьДействияПередЗаписьюНаСервере(Отказ, ОбъектДокумент);
		Если НЕ Отказ Тогда
			ОбъектДокумент.Дата = ТекущаяДатаСеанса();
			ОбъектДокумент.Записать();
			ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
			ОбновитьИнформациюПодвала();
			Модифицированность = Ложь;
			ФлагЗаписи = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныеФайлыКСообщению(МассивСтруктур)
	
	МассивВозврата = Новый Массив;
	ПараметрыСоглашения = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.Ссылка);
	Если ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
		ИдентификаторОрганизации = ПараметрыСоглашения.ИдентификаторОрганизации;
		ИдентификаторКонтрагента = ПараметрыСоглашения.ИдентификаторКонтрагента;
		СоглашениеЭД             = ПараметрыСоглашения.СоглашениеЭД;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) И НЕ ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураФайла Из МассивСтруктур Цикл
		ФайлБезРасширения = Неопределено;
		ФайлРасширение = Неопределено;
		АдресВоВременномХранилище = Неопределено;
		Если НЕ СтруктураФайла.Свойство("ФайлБезРасширения", ФайлБезРасширения)
			ИЛИ НЕ СтруктураФайла.Свойство("ФайлРасширение", ФайлРасширение)
			ИЛИ НЕ СтруктураФайла.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			Продолжить;
		КонецЕсли;
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка,
														   ФайлБезРасширения,
														   ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ФайлРасширение),
														   ТекущаяДатаСеанса(),
														   ТекущаяДатаСеанса(),
														   АдресВоВременномХранилище,
														   ,
														   ,
														   Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
		МассивВозврата.Добавить(ДобавленныйФайл);
		
		НомерДокумента = ЭлектронныеДокументыВнутренний.ВернутьИдЭД(
			ДобавленныйФайл, ИдентификаторОрганизации, Неопределено);
		НомерДокументаОтправителя = ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(Объект.Номер);
		СтруктураДокумента =  Новый Структура(
			"Автор, ВладелецЭД, Организация, Контрагент,
			|ВидЭД, НаправлениеЭД, НомерЭД, УникальныйИД,
			|Отправитель, Получатель, НомерДокументаОтправителя, ДатаДокументаОтправителя, НомерВерсииЭД, ПрофильНастроекЭДО, СоглашениеЭД,
			|ТипЭлементаВерсииЭД, СтатусЭД, НаименованиеФайла",
			Пользователи.АвторизованныйПользователь(), Объект.Ссылка, Объект.Организация, Объект.Контрагент,
			Перечисления.ВидыЭД.ПроизвольныйЭД, Перечисления.НаправленияЭД.Исходящий, НомерДокумента, НомерДокумента,
			ИдентификаторОрганизации, ИдентификаторКонтрагента, НомерДокументаОтправителя, Объект.Дата, 0, ПрофильНастроекЭДО, СоглашениеЭД,
			Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД, Перечисления.СтатусыЭД.НеОтправлен, ФайлБезРасширения);
			
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураДокумента);
	КонецЦикла;
	
	Прочитать();
	ОбновитьДанныеОВложении();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОВложении()
	
	ЗапросВложений = Новый Запрос;
	ЗапросВложений.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	ЗапросВложений.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЭДПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Результат = ЗапросВложений.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ЭлектронныйДокументСсылка      = Результат.Ссылка;
		ЭлектронныйДокументРасширение  = СокрЛП(Результат.Расширение);
		ЭлектронныйДокументИмяФайла    = СокрЛП(Результат.ИмяФайла) + "." + ЭлектронныйДокументРасширение;
		ЭлектронныйДокументПиктограмма = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Результат.Расширение);
		Элементы.ТекстВложение.Ширина = СтрДлина(ЭлектронныйДокументИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусДокумента(ПараметрыДокумента)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ПараметрыДокумента.Свойство("МассивНаОтправку") И ПараметрыДокумента.МассивНаОтправку.Количество() > 0 Тогда
		ЭД = ПараметрыДокумента.МассивНаОтправку[0];
		ДокументОбъект.СтатусДокумента = ЭД.СтатусЭД;
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("Подписан") И ПараметрыДокумента.Подписан Тогда
		Если ДокументОбъект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			ДокументОбъект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленоПодтверждение;
		Иначе
			ДокументОбъект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке;
		КонецЕсли;
	КонецЕсли;
	
	Если (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД))
		ИЛИ (НЕ СоглашениеОпределялось И ЕстьСоглашение(ДокументОбъект)) Тогда
		ДокументОбъект.Записать();
		ОбновитьИнформациюПодвала();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Прочитать();
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбранныеДокументы(ПараметрыПодписи)
	
	СтруктураРезультата = ЭлектронныеДокументыСлужебныйКлиент.ПодготовитьИОтправитьПЭД(ПараметрыПодписи.МассивНаОтправку, Ложь);
	
	Прочитать();
	
	Если СтруктураРезультата.КолОтправленных > 0 Тогда
		ТекстСостояния = НСтр("ru = 'Отправлено: (%1)'");
		Количество = СтруктураРезультата.КолОтправленных;
	Иначе
		ТекстСостояния = НСтр("ru = 'Подготовлено к отправке: (%1)'");
		Количество = СтруктураРезультата.КолПодготовленных;
	КонецЕсли;
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, Количество);
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишниеПрисоединенныеФайлы()
	
	ПараметрыВыборки = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(ПараметрыВыборки);
	
	Пока ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Цикл
		Если ВыборкаПрисоединенныхФайлов.Ссылка <> ЭлектронныйДокументСсылка Тогда
			ВыборкаПрисоединенныхФайлов.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Если ЕстьСоглашение(ОбъектДокумент) Тогда
		ОбновитьСтатусСостояниеЭД();
		ЗаполнитьТаблицуЭЦП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСоглашение(ОбъектДокумент)
	
	ВыводитьСообщение = НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность;
	НастройкиЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДокумент, ВыводитьСообщение);
	СоглашениеОпределялось = Истина;
	Если ЗначениеЗаполнено(НастройкиЭД) Тогда
		ОбъектДокумент.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		СоглашениеЭД = НастройкиЭД.СоглашениеЭД;
		ПрофильНастроекЭДО = НастройкиЭД.ПрофильНастроекЭДО;
		Возврат Истина;
	Иначе
		СоглашениеЭД = Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
		ПрофильНастроекЭДО = Справочники.ПрофилиНастроекЭДО.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьТребуетсяПодтверждениеПоСоглашению()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД";
	
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТребуетсяПодтверждение = Выборка.ИспользоватьЭЦП;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтпечаткиОжидаемыхСертификатов(ТекущееСоглашение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Организация = &Организация
	|	И СертификатыЭЦП.Отозван = ЛОЖЬ
	|	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Ссылка = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("Организация", ТекущееСоглашение.Организация);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", ТекущееСоглашение);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЭЦП()
	
	Если НЕ ЗначениеЗаполнено(СоглашениеЭД)
		ИЛИ НЕ СоглашениеЭД.ПроверятьСертификатыПодписей Тогда
		
		ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
		ТаблицаЭЦП.Очистить();
		Для Каждого ТекСтрока Из ЭлектронныйДокументСсылка.ЭлектронныеЦифровыеПодписи Цикл
			НоваяСтрока = ТаблицаЭЦП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковОжидаемыхСертификатов = ПолучитьОтпечаткиОжидаемыхСертификатов(СоглашениеЭД);
	
	ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
	ТаблицаЭЦП.Очистить();
	
	Для Каждого ТекСтрока Из ЭлектронныйДокументСсылка.ЭлектронныеЦифровыеПодписи Цикл
		НоваяСтрока = ТаблицаЭЦП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
			НоваяСтрока.ОтсутствуетВСписке = Истина;
			НоваяСтрока.ВыводКартинки = 1;
		Иначе
			НоваяСтрока.ВыводКартинки = 0;
		КонецЕсли;
		ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВерна = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВерна = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусСостояниеЭД()
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовЭД(Объект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "СтатусыЭД");
	КонецЕсли;
	
	// Отображаем только статус "Закрыт принудительно".
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.Ссылка) Тогда
		Элементы.СостояниеЭД.Заголовок = НСтр("ru = 'Состояние'");
		ТекстСостояния = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	Иначе
		// Если документ не "Закрыть принудительно" отображаем заголовок т.ч. Статусы.
		Элементы.СостояниеЭД.Заголовок = НСтр("ru = 'Статусы'");
		ТекстСостояния = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД);
	ПризнакПройден = ЗначениеЗаполнено(Объект.Ссылка); // При записи объекта происходит установка начального статуса, до этого все статусы устанавливаем непройденными
	Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл
		ТекСтрока.Пройден = ПризнакПройден;
		Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
			И (ЭД.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусДокумента = Перечисления.СтатусыЭД.ОтклоненПолучателем) Тогда
			ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
			Прервать;
		КонецЕсли;
		Если ЭД.СтатусДокумента = ТекСтрока.Статус Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД)
	
	ПараметрыЭД = Новый Структура("ВидЭД, НаправлениеЭД, ВерсияРегламентаЭДО, Организация, Контрагент, СоглашениеЭД",
		Перечисления.ВидыЭД.ПроизвольныйЭД, Объект.Направление, Перечисления.ВерсииРегламентаОбмена1С.Версия20,
		Объект.Организация, Объект.Контрагент, СоглашениеЭД);
	
	НастройкиСтатусов = Новый ТаблицаЗначений;
	НастройкиСтатусов.Колонки.Добавить("СпособОбмена");
	НастройкиСтатусов.Колонки.Добавить("Направление");
	НастройкиСтатусов.Колонки.Добавить("ВидЭД");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьПодпись");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьКвитанции");
	НастройкиСтатусов.Колонки.Добавить("ИспользуетсяНесколькоПодписей");
	НастройкиСтатусов.Колонки.Добавить("ВерсияРегламентаЭДО");
	НастройкиСтатусов.Колонки.Добавить("ПрограммаБанка");
	НастройкиСтатусов.Колонки.Добавить("ТребоватьПодтверждения");
	ИспользуетсяЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеЦифровыеПодписи");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭД",           ПараметрыЭД.ВидЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД",   ПараметрыЭД.НаправлениеЭД);
	Запрос.УстановитьПараметр("Контрагент",      ПараметрыЭД.Контрагент);
	Запрос.УстановитьПараметр("Организация",     ПараметрыЭД.Организация);
	Запрос.УстановитьПараметр("ИспользуетсяЭЦП", ИспользуетсяЭЦП);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ИспользуетсяЭЦП
		|			ТОГДА Соглашение.ИспользоватьПодпись
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользоватьПодпись,
		|	Соглашение.ИспользоватьКвитанции,
		|	Соглашение.ВидЭД,
		|	Соглашение.Направление,
		|	Соглашение.СпособОбмена,
		|	Соглашение.ВерсияФорматаПакета,
		|	Соглашение.ПрограммаБанка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Истина КАК ИспользоватьПодпись,
		|		Истина КАК ИспользоватьКвитанции,
		|		ВЫБОР
		|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|		КОНЕЦ КАК Направление,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбмена,
		|		0 КАК Приоритет,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПрограммаБанка КАК ПрограммаБанка
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|		И Не СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления) КАК Соглашение";
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		НоваяСтрока = НастройкиСтатусов.Добавить();
		НоваяСтрока.СпособОбмена          = Результат.СпособОбмена;
		НоваяСтрока.Направление           = Результат.Направление;
		НоваяСтрока.ВидЭД                 = Результат.ВидЭД;
		НоваяСтрока.ИспользоватьПодпись   = Результат.ИспользоватьПодпись;
		НоваяСтрока.ИспользоватьКвитанции = Результат.ИспользоватьКвитанции;
		НоваяСтрока.ТребоватьПодтверждения = Объект.ТребуетсяПодтверждение;

		НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
		НоваяСтрока.ПрограммаБанка        = Результат.ПрограммаБанка;
	КонецЕсли;
	
	Если НастройкиСтатусов.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиСтатусов);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПодвала()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД)) Тогда
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ЕстьСоглашение = ЕстьСоглашение(ДокументОбъект);
		Иначе
			ЕстьСоглашение = Истина;
		КонецЕсли;
		Если ЕстьСоглашение Тогда
			ОбновитьСтатусСостояниеЭД();
			ЗаполнитьТаблицуЭЦП();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МожноОтклонитьДокумент()
	
	МожноОтклонить = Истина;
	
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий
		И НЕ (Объект.СтатусДокумента = Перечисления.СтатусыЭД.НеОтправлен
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
		МожноОтклонить = Ложь;
	КонецЕсли;
	
	Возврат МожноОтклонить;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	ТекущийСтатус = ?(ЭДОтклонен, Перечисления.СтатусыЭД.Отклонен, Перечисления.СтатусыЭД.НеОтправлен);
	СтруктураПараметров = Новый Структура("СтатусЭД", ТекущийСтатус);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокументСсылка, СтруктураПараметров, Ложь);
	Объект.СтатусДокумента = ТекущийСтатус;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьПодписатьЭДУведомлениеОбУточнении(СсылкаНаЭД, ТекстУточнения)
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаЭД);
	ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.УведомлениеОбУточнении");
	
	ЭДСформирован = ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД,
		ТекстУточнения);
	
	Возврат ЭДСформирован;
	
КонецФункции

&НаСервере
Процедура ПоместитьТекстУточненияВОбъект(ТекстУточнения)
	
	ЭлектронныйДокумент = ЭлектронныйДокументСсылка.ПолучитьОбъект();
	ЭлектронныйДокумент.ПричинаОтклонения = ТекстУточнения;
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Очистить();
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	
КонецПроцедуры

&НаСервере
Функция ОтменитьОтклонениеНаСервере()
	
	ЭДОтклонен = Ложь;
	ИзменитьСтатусОтклонить();
	ПоместитьТекстУточненияВОбъект("");
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбработатьОтклонениеЭД()
	
	ВозвращаемоеЗначение = Ложь;
	Если ДокументЗаписан() И НЕ ЭДОтклонен И ЗначениеЗаполнено(ЭлектронныйДокументСсылка) И МожноОтклонитьДокумент() Тогда
		// Нельзя снять отклонение документа.
		ТекстВопроса = НСтр("ru = 'Для отклонения документа необходимо указать причину отклонения.
			|Отклонить документ?'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,  НСтр("ru = 'Отклонить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не отклонять'"));
		Ответ = Вопрос(ТекстВопроса, СписокКнопок, 60,
			КодВозвратаДиалога.Нет, НСтр("ru = 'Отклонение электронного документа...'"));
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТекстУточнения = "";
			УточнениеВведено = ВвестиСтроку(ТекстУточнения, НСтр("ru = 'Укажите причины отклонения документа'"), , Истина);
			
			Если УточнениеВведено И ЗначениеЗаполнено(ТекстУточнения) Тогда
				Текст = НСтр("ru = '%1, %2:
				|%3'");
				ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Объект.Организация,
					ПользователиКлиентСервер.ТекущийПользователь(), ТекстУточнения);
				Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий")
					// Для входящего документа, необходимо сформировать ЭД Уведомление об уточнении.
					ИЛИ СформироватьПодписатьЭДУведомлениеОбУточнении(ЭлектронныйДокументСсылка, ТекстУточнения) Тогда
					
					ВозвращаемоеЗначение = Истина;
					ПоместитьТекстУточненияВОбъект(ТекстУточнения);
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Для отклонения документа необходимо указать причину отклонения!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Функция ОбработатьОтменуОтклоненияЭД()
	
	ВозвращаемоеЗначение = Ложь;
	Если ДокументЗаписан() И ЭДОтклонен И ОтменитьОтклонениеНаСервере() Тогда
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подписание и отправка документа

&НаСервере
Функция ПолучитьМассивЭДДляОтправки(Отказ)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Модифицированность И ЕстьСоглашение(ДокументОбъект) Тогда
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(ПрофильНастроекЭДО.СпособОбменаЭД)
		И ЭЦП.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена. Необходимо подписать вложение.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	СтруктураВозврата = "";
	Если Не Отказ Тогда
		МассивВложений = Новый Массив;
		МассивВложений.Добавить(ЭлектронныйДокументСсылка);
		ЭтоИсходящийДокумент = Объект.Направление = Перечисления.НаправленияЭД.Исходящий;
		
		СтруктураВозврата = Новый Структура("МассивНаОтправку, ЭтоИсходящийДокумент", МассивВложений, ЭтоИсходящийДокумент);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПодписатьДокументНаКлиенте(СтруктураПараметровПодписи, Подписан)
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(
											СтруктураПараметровПодписи.Отпечаток);
	СтруктураПараметровПодписи.Вставить("Сертификат", Сертификат);
	
	ВключатьСертификатСубъекта = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	МенеджерКриптографии.ВключениеСертификатовВПодпись = ВключатьСертификатСубъекта;
	
	ДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭлектронныйДокументСсылка);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	// В БСП используется сокращеное имя параметра "Пароль" вместо "ПарольПользователя".
	СтруктураПараметровПодписи.Вставить("Пароль", СтруктураПараметровПодписи.ПарольПользователя);
	ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
													МенеджерКриптографии,
													ЭлектронныйДокументСсылка,
													ДвоичныеДанныеФайла,
													СтруктураПараметровПодписи);
		
	ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ЭлектронныйДокументСсылка, ДанныеПодписи);
	ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(ЭлектронныйДокументСсылка);
	Подписан = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументНаСервере(Знач СтруктураДанныхПодписи, Подписан)
	
	Попытка
		МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	ВключатьСертификатСубъекта = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	МенеджерКриптографии.ВключениеСертификатовВПодпись = ВключатьСертификатСубъекта;
	
	Сертификат = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСертификатПоОтпечатку(
														СтруктураДанныхПодписи.Отпечаток);
	СтруктураДанныхПодписи.Вставить("Сертификат", Сертификат);
	
	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭлектронныйДокументСсылка);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДанныеПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьДанныеПодписи(МенеджерКриптографии,
																						ЭлектронныйДокументСсылка,
																						ДвоичныеДанныеФайла,
																						СтруктураДанныхПодписи);
	ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ЭлектронныйДокументСсылка, ДанныеПодписи);
	ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ЭлектронныйДокументСсылка);
	Подписан = Истина;
	
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВсеКомментарии = "";
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
			|	ЖурналСобытийЭД.Дата КАК Дата,
			|	ЖурналСобытийЭД.СтатусЭД,
			|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
			|	ЖурналСобытийЭД.Комментарий
			|ИЗ
			|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
			|ГДЕ
			|	ЖурналСобытийЭД.ВладелецЭД = &Ссылка
			|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
			|%5'");
		ПредыдущийКоммент = "";
		ПервыйКоммент = Истина;
		Массив = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ТекущийКоммент = СокрЛП(Выборка.Комментарий);
			Если ПредыдущийКоммент = ТекущийКоммент Тогда
				Продолжить;
			КонецЕсли;
			ПредыдущийКоммент = ТекущийКоммент;
			СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
					Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКоммент);
			Массив.Добавить(СтрокаКомментария);
			ПервыйКоммент = Ложь;
		КонецЦикла;
		Если Массив.Количество() > 0 Тогда
			ПервыйКоммент = Истина;
			Для Сч = -Массив.Количество() + 1 По 0 Цикл
				СтрокаКомментария = Массив[-Сч];
				ВсеКомментарии = ВсеКомментарии
					+ СтрокаКомментария
					+ ?(ПервыйКоммент, Символы.ПС + "------------------------------------", "")
					+ Символы.ПС
					+ Символы.ПС;
				ПервыйКоммент = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
	ЗаполнитьТаблицуЭЦП();
	ОбновитьСтатусСостояниеЭД();
	ПерезаполнитьКомментарии();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция СоответствиеДоступныхСертификатовИПараметров(МассивСтруктурСертификатов)

	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
	КонецЕсли;
	
	// Получим настройки соглашения
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.Ссылка, Ложь);
	ПрофильНастроекЭДО = Неопределено;
	Если ЗначениеЗаполнено(НастройкиОбмена) И НастройкиОбмена.Свойство("СоглашениеЭД") Тогда
		ПрофильНастроекЭДО = НастройкиОбмена.ПрофильНастроекЭДО;
	КонецЕсли;
	
	МассивПараметровДоступныхСертификатов = ЭлектронныеДокументыСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
		МассивСтруктурСертификатов, ПрофильНастроекЭДО);
	
	МассивОтпечатковИсключения = Новый Массив;
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		Для Каждого Элемент Из ЭлектронныйДокументСсылка.ЭлектронныеЦифровыеПодписи Цикл
			МассивОтпечатковИсключения.Добавить(Элемент.Отпечаток);
		КонецЦикла;
	КонецЕсли;
	
	Соответствие = Новый Соответствие;
	Для Каждого СтруктураСертификата Из МассивПараметровДоступныхСертификатов Цикл
		Если МассивОтпечатковИсключения.Найти(СтруктураСертификата.Отпечаток) = Неопределено Тогда
			Соответствие.Вставить(СтруктураСертификата.Сертификат, СтруктураСертификата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	СсылкаНаХранилищеДанныхСертификата = Неопределено;
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		ДвоичныеДанныеСертификата = ЭлектронныйДокументСсылка.ЭлектронныеЦифровыеПодписи[НомерСтроки-1].Сертификат.Получить();
		СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сертификат не найден.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.СертификатЭЦП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД)) ИЛИ НЕ ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		Возврат ;
	КонецЕсли;
	
	НайденнаяСтрока = ЭлектронныйДокументСсылка.ЭлектронныеЦифровыеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = СоглашениеЭД.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда
		Текст = НСтр("ru = 'Добавить сертификат %1 в список ожидаемых сертификатов контрагента?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеПодписи.КомуВыданСертификат);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки,Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
			Возврат;
		КонецЕсли;
		
		// Добавим сертификат в Соглашение.
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭЦП();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("Описание") И ЗначениеЗаполнено(Ссылка.Ответственный) Тогда
		СтруктураПараметров.Вставить("Ответственный", Ссылка.Ответственный);
	КонецЕсли;
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованию()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстДокументОснование = ЗаполнитьТекстДокументаОснования(Объект.ДокументОснование);
		ЗаполнитьЗначенияСвойств(Объект, Объект.ДокументОснование, "Контрагент, Организация, ТребуетсяПодтверждение, ТипДокумента");
		Объект.Направление = Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьТекстДокументаОснования(ДокументОснование)
	
	ТекстДокументОснование = ПредставлениеДокументаОснования(ДокументОснование);
	
	Возврат ТекстДокументОснование;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеДокументаОснования(ДокументОснование)
	
	Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Номер, Дата");
	ТекстДокументОснование = НСтр("ru = '№%1 от %2'");
	ТекстДокументОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДокументОснование,
		СокрЛП(Структура.Номер), Формат(Структура.Дата, "ДЛФ=D"));
	
	Возврат ТекстДокументОснование;
	
КонецФункции
