Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по регистру 
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоЗаказамПокупателейУпр(СписокЗаказов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента,
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.СтатусПартии, 
	|	ЗаказыПокупателейОстатки.Цена,
	|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.ПроцентСкидкиНаценки,
	|	ЗаказыПокупателейОстатки.ПроцентАвтоматическихСкидок,
	|	ЗаказыПокупателейОстатки.УсловиеАвтоматическойСкидки,
	|	ЗаказыПокупателейОстатки.ЗначениеУсловияАвтоматическойСкидки,
	|	ЗаказыПокупателейОстатки.СтавкаНДС,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток          КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток            КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментДокумента, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателейОстатки
	|Упорядочить по
	|	ДоговорКонтрагента,
	|	ЗаказПокупателя,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СтатусПартии, 
	|	Цена,
	|	ЕдиницаИзмерения,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок,
	|	УсловиеАвтоматическойСкидки,
	|	ЗначениеУсловияАвтоматическойСкидки,
	|	СтавкаНДС
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  ВыборкаПоШапкеДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоТоварам, ВыборкаПоШапкеДокумента, 
	                                              Отказ, Заголовок)


	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПокупателя");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заказы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим даты Заказов, они не должны быть больше даты документа
	Для Каждого СтрокаТЧ Из Заказы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда  //Заполнение заказа проверили раньше
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.ЗаказПокупателя.Дата > Дата Тогда
			СтрокаСообщения = "Дата и время Заказа в строке " + СокрЛП(СтрокаТЧ.НомерСтроки) + " больше даты и времени документа!";			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок)
								
	ДвиженияПоРегистрамУпр(РежимПроведения, ВыборкаПоШапкеДокумента,	ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок);
								
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, ТаблицаПоЗаказамПокупателей, Отказ, Заголовок);
	
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	// Заполним таблицу регистрации в последовательностях по регл учету
	ТаблицаОтраженияВПоследовательностяхРегл = Новый ТаблицаЗначений;
	ТаблицаОтраженияВПоследовательностяхРегл.Колонки.Добавить("Организация");
	
	Для Каждого Строка Из ТаблицаПоЗаказамПокупателей Цикл
		Если ЗначениеЗаполнено(Строка.Организация) Тогда
			
			НайдСтрока = ТаблицаОтраженияВПоследовательностяхРегл.Найти(Строка.Организация, "Организация");
			Если НайдСтрока=Неопределено Тогда
				СтрокаРегистрации=ТаблицаОтраженияВПоследовательностяхРегл.Добавить();
				СтрокаРегистрации.Организация = Строка.Организация;
			Иначе
				СтрокаРегистрации=НайдСтрока;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Зарегистрируем в последовательности по УУ
	ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
	ЗаписьРегистрации.Период = Дата;
		
	
	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		
	Иначе
		
		УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Неопределено);
		
		Для каждого Строка Из ТаблицаОтраженияВПоследовательностяхРегл Цикл
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Строка.Организация);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, ТаблицаЗакрываемыеЗаказы, Отказ, Заголовок)
	Если ТаблицаЗакрываемыеЗаказы.Найти(истина,"ОбособленныйУчетТоваровПоЗаказамПокупателей")=неопределено Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.СписанныеТовары;
	
	Сч=0;
	
	ТаблицаСРаздельнымУчетом = ТаблицаЗакрываемыеЗаказы.Скопировать();
	ТаблицаСРаздельнымУчетом.Свернуть("ОбособленныйУчетТоваровПоЗаказамПокупателей,Номенклатура,ХарактеристикаНоменклатуры,Организация,ЗаказПокупателя");
	
	Для каждого ВыборкаЗакрываемыеЗаказы Из ТаблицаСРаздельнымУчетом Цикл
		Если не ВыборкаЗакрываемыеЗаказы.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.НомерСтрокиДокумента=Сч;
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Номенклатура = ВыборкаЗакрываемыеЗаказы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаЗакрываемыеЗаказы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ОтражатьВУправленческомУчете = Истина;
		НоваяСтрока.Организация             = ВыборкаЗакрываемыеЗаказы.Организация;
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ;

		НоваяСтрока.ЗаказПартии = ВыборкаЗакрываемыеЗаказы.ЗаказПокупателя;
		Сч=Сч+1;
	КонецЦикла;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок)
								
	Если ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов Тогда
	
		Если ТаблицаПоЗаказамПокупателей.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ЗаказыПокупателей;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоЗаказамПокупателей);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;	
		//Движения по причинам закрытия
		ТаблицаПричинЗакрытия = УправлениеЗаказами.ПодготовитьТаблицуПричинЗакрытияЗаказов(Заголовок, Ссылка, "ЗаказПокупателя","ЗакрытиеЗаказовПокупателей",ТаблицаПоЗаказамПокупателей);
		Если ТаблицаПричинЗакрытия.Количество() > 0 Тогда
			НаборДвижений = Движения.ПричиныЗакрытияЗаказов;
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоПричинамЗакрытия", ТаблицаПричинЗакрытия);
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;

		Если ТаблицаПоРасчетам.Количество() > 0 Тогда
			
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоРасчетам", ТаблицаПоРасчетам);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ТаблицаПоРазмещению.Количество() > 0 Тогда
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоРазмещению", ТаблицаПоРазмещению);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;
	
	Если ТаблицаПоРезервам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоРезервам);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// Заполнение шапки
		Ответственный = Основание.Ответственный;
		Подразделение = Основание.Подразделение;
		ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов;

		// Заполнение строки
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПокупателя = Основание.Ссылка;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",        "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//проверка наличия внутренних заказов в табличной части
	Для каждого Строка из Заказы цикл
		Если ТипЗнч(Строка.ЗаказПокупателя)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			СтрокаСообщения = "В строке " + СокрЛП(Строка.НомерСтроки) + " указан внутренний заказ. Перепроводить такие документы запрещено!"+Символы.ПС+"Воспользуйтесь обработкой 'Обновление документов Закрытие заказов покупателей', входящей в состав обработок обновления информационной базы";			
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоЗаказамПокупателей = ПодготовитьТаблицуПоЗаказамПокупателейУпр(СписокЗаказов);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоЗаказамПокупателей, СтруктураШапкиДокумента, 
											Отказ, Заголовок);

	
	// Движения по документу
	Если Не Отказ Тогда
		ТаблицаПоРазмещению = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРазмещения(Ссылка,МоментВремени(),СписокЗаказов,ложь,истина);
		
		ТаблицаПоРезервам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРезервов(Ссылка,МоментВремени(),СписокЗаказов);
		
		ТаблицаПоРасчетам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРасчетов(МоментВремени(),СписокЗаказов,-1);
		

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению,
							ТаблицаПоРеЗервам, ТаблицаПоРасчетам, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
