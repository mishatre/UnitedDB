Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция ПечатьПоступлениеДопРасходов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	Содержание,
	|	СуммаДокумента КАК СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	СтавкаНДС,
	|	ВложенныйЗапрос.СуммаНДСТовары + СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаДенег                КАК СуммаДенег,
	|	ВложенныйЗапрос.Количество                КАК Количество
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов,
	|	(ВЫБРАТЬ
	|		СУММА(ПоступлениеДопРасходовТовары.Сумма)             КАК СуммаДенег,
	|		СУММА(ПоступлениеДопРасходовТовары.СуммаНДС)          КАК СуммаНДСТовары,
	|		КОЛИЧЕСТВО(ПоступлениеДопРасходовТовары.Номенклатура) КАК Количество
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ТекущийДокумент) КАК ВложенныйЗапрос
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДопРасходов_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Доп. расходы");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	СуммаВсего = Шапка.СуммаДокумента - ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	СуммаИтого = СуммаВсего;

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.НомерСтроки = 1;
	ОбластьМакета.Параметры.Товар       = Шапка.Содержание;
	ОбластьМакета.Параметры.Цена        = СуммаВсего;
	ОбластьМакета.Параметры.Количество  = 1;
	ОбластьМакета.Параметры.Сумма       = СуммаВсего;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаИтого);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Шапка.СуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = СуммаВсего + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + 1
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеДопРасходов()

// Функция осуществляет распределение дополнительных расходов и подготавливает табличный документ для печати. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  Нет
// Возвращаемое значение
// ТабДокумент - Табличный документ
Функция ПечатьПоступлениеРаспределенныхДопРасходов()
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамДляВзаиморасчетов;
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведенияДокумента.Оперативный);
	СтруктураШапкиДокумента.ВалютаВзаиморасчетов           = ВалютаДокумента;
	СтруктураШапкиДокумента.ВалютаРегламентированногоУчета = ВалютаДокумента;
	СтруктураШапкиДокумента.ВалютаУправленческогоУчета     = ВалютаДокумента;
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамДляВзаиморасчетов);
	ТаблицаПоТоварам.Сортировать("НомерСтроки");

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("НакладнаяРаспределеннаяСумма");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Распределенная сумма доп. расходов");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = СтруктураШапкиДокумента.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = СтруктураШапкиДокумента.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.СпособРаспределения = СтруктураШапкиДокумента.СпособРаспределения;
	ОбластьМакета.Параметры.СуммаРасхода = Формат(СтруктураШапкиДокумента.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.") + " " + СтруктураШапкиДокумента.ВалютаДокумента;
	ТабДокумент.Вывести(ОбластьМакета);

	СуммаВсего = СтруктураШапкиДокумента.СуммаДокумента - ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, ТаблицаПоТоварам.Итог("НДСВал"));
	СуммаИтого = СуммаВсего;

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для каждого СтрокаТаблицыТовары Из ТаблицаПоТоварам Цикл
		ОбластьМакета.Параметры.НомерСтроки = СтрокаТаблицыТовары.НомерСтроки;
		ОбластьМакета.Параметры.Номенклатура = СтрокаТаблицыТовары.Номенклатура;
		ОбластьМакета.Параметры.ДокументОприходования = СтрокаТаблицыТовары.ДокументОприходования;
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
			ОбластьМакета.Параметры.СуммаДополнительныхРасходов = СтрокаТаблицыТовары.СуммаУпр;
			ОбластьМакета.Параметры.СуммаРаспределения = СтрокаТаблицыТовары.СуммаУпрРаспределения;
			ОбластьМакета.Параметры.Стоимость = СтрокаТаблицыТовары.СуммаУпрРаспределения + СтрокаТаблицыТовары.СуммаДополнительныхРасходов;
		Иначе
			ОбластьМакета.Параметры.СуммаДополнительныхРасходов = СтрокаТаблицыТовары.СуммаДополнительныхРасходов;
			СуммаРаспределения = СтрокаТаблицыТовары.СуммаВзаиморасчетовРаспределения;
			Если НЕ СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
				СуммаРаспределения = СуммаРаспределения - (СтрокаТаблицыТовары.НДСВал - СтрокаТаблицыТовары.НДСУпр);
			КонецЕсли;
			ОбластьМакета.Параметры.СуммаРаспределения = СуммаРаспределения;
			ОбластьМакета.Параметры.Стоимость = СуммаРаспределения + СтрокаТаблицыТовары.СуммаДополнительныхРасходов;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаИтого);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ТаблицаПоТоварам.Итог("НДСВал"));
		ОбластьМакета.Параметры.НДС = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = СуммаВсего + ?(НЕ СтруктураШапкиДокумента.УчитыватьНДС ИЛИ СтруктураШапкиДокумента.СуммаВключаетНДС, 0, ТаблицаПоТоварам.Итог("НДСВал"));
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ТаблицаПоТоварам.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, СтруктураШапкиДокумента.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, СтруктураШапкиДокумента.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеРаспределенныхДопРасходов()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеДопРасходов();
	ИначеЕсли ИмяМакета = "НакладнаяРаспределеннаяСумма" Тогда
		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеРаспределенныхДопРасходов();
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная, НакладнаяРаспределеннаяСумма","Доп. расходы", "Распреденные доп. расходы");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование, ТабЧасть) Экспорт

	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КурсОснования      = ЗаполнениеДокументов.КурсДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьОснования = ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, мВалютаРегламентированногоУчета);
	Запрос = Новый Запрос;

	
	ИмяДокумента = ДокументОснование.Метаданные().Имя;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	ДополнительныеПоляРегл = "";

	ИмяТабЧасти = "Товары";

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	" + ?(ИмяДокумента = "ПоступлениеТоваровУслуг" И ТабЧасть = Товары, "Док.Заказ,",      "") + "
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры"+
		ДополнительныеПоляРегл+"
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабЧасти  + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Табчасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументОснование;

		Если ИмяДокумента = "ПоступлениеТоваровУслуг"
		   И ТабЧасть = Товары Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Выборка.Заказ;
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0), Выборка.ВалютаДокумента,
		                                   ВалютаДокумента, КурсОснования,
		                                   КурсДокумента,
		                                   КратностьОснования,
		                                   КратностьДокумента);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("Качество");
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если (ТаблицаТоваров.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено) тогда
		ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("СтатусПартии");
	ТаблицаТоваров.Колонки.Добавить("Заказ");
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

		// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.Количество = NULL Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;

		Если СтрокаТаблицы.Вес = NULL Тогда
			СтрокаТаблицы.Вес = 0;
		КонецЕсли;

		СтрокаТаблицы.Вес = СтрокаТаблицы.Вес * СтрокаТаблицы.Количество;

		// Склад указан либо в документе поступления, либо в приходном ордере
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.СкладОрдера;
		КонецЕсли;

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтоимостьСНДС, 
				СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
				СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		КонецЕсли;

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтоимостьСНДС, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		                                 
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Стоимость, 
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			СтрокаТаблицы.Заказ = СтрокаТаблицы.ЗаказПокупателя;
		КонецЕсли;

		Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
		Иначе
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Процедура добавляет в таблицы данные о суммах распределения.
//
Процедура ДобавитьРаспределение( ТаблицаПоТоварам, СтруктураШапкиДокумента)

	Если ТаблицаПоТоварам.Колонки.Найти("СуммаУпрРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаУпрРаспределения", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	Если ТаблицаПоТоварам.Колонки.Найти("НДСУпрРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("НДСУпрРаспределения", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
		
	// Сумма к распределению
	Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
		СуммаВсего = Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СуммаНДС, 0);
	Иначе
		//СуммаВсего = Сумма - ?(УчитыватьНДС И НЕ СуммаВключаетНДС, 0, СуммаНДС);
		СуммаВсего = Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, 0, СуммаНДС);
	КонецЕсли;
	СуммаВсегоСНДС = Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СуммаНДС, 0);
		
	СуммаВсегоУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаВсего, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
	СуммаВсегоСНДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаВсегоСНДС, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
	СуммаВсегоНДСУпр  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаНДС, 
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КолКоэф    = ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу, "Вес",
			     ?(СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "СуммаТовара"));
	МассивКоэф = ТаблицаПоТоварам.ВыгрузитьКолонку(КолКоэф);

	МассивСумм     = ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоУпр, МассивКоэф, 2);
	МассивСуммСНДС = ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоСНДСУпр, МассивКоэф, 2);
	МассивНДСУпр   = ОбщегоНазначения.РаспределитьПропорционально( СуммаВсегоНДСУпр,  МассивКоэф, 2,ЛОЖЬ);
		
	Если Не МассивСумм = Неопределено Тогда
		СтрокТоваров = ТаблицаПоТоварам.Количество() - 1;
		Для К = 0 По СтрокТоваров Цикл
			//ТаблицаПоТоварам[К].Стоимость             = ТаблицаПоТоварам[К].Стоимость + МассивСумм[К];
			ТаблицаПоТоварам[К].Стоимость             = ТаблицаПоТоварам[К].Стоимость + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость,МассивСумм[К],МассивСуммСНДС[К]);
			ТаблицаПоТоварам[К].СуммаУпрРаспределения = ТаблицаПоТоварам[К].СуммаУпрРаспределения + МассивСуммСНДС[К];
			ТаблицаПоТоварам[К].НДСУпрРаспределения   = ТаблицаПоТоварам[К].НДСУпр    + МассивНДСУпр[К];
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаВзаиморасчетовРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаВзаиморасчетовРаспределения", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	Если ТаблицаПоТоварам.Колонки.Найти("СуммаРеглРаспределения") = Неопределено тогда
		ТаблицаПоТоварам.Колонки.Добавить("СуммаРеглРаспределения", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;

	// Сумма к распределению
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);
	
	//СуммаРегл нужна не только для БУ, но и для взаиморасчетов по документам расчетов
	СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		Сумма - ?(СуммаВключаетНДС, СуммаНДС, 0),
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),	Данные.Курс,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Кратность);

	СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаНДС,
		СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
		ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Курс,
		ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), Данные.Кратность);

	КолКоэф    = ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу,       "Вес",
			     ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "СуммаТовара"));
	МассивКоэф = ТаблицаПоТоварам.ВыгрузитьКолонку(КолКоэф);

	МассивСуммРегл = ОбщегоНазначения.РаспределитьПропорционально( СуммаРегл,     МассивКоэф, 2);
	МассивНДСРегл  = ОбщегоНазначения.РаспределитьПропорционально( СуммаНДСРегл,  МассивКоэф, 2);
	МассивСумм     = ОбщегоНазначения.РаспределитьПропорционально( Сумма,     МассивКоэф, 2);
	МассивНДС      = ОбщегоНазначения.РаспределитьПропорционально( СуммаНДС,  МассивКоэф, 2);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		СуммаРасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтруктураШапкиДокумента.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС,0, СтруктураШапкиДокумента.СуммаНДС),
			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВзаиморасчетов,
			ЗаполнениеДокументов.КратностьДокумента( ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВзаиморасчетов);

		МассивРасчеты = ОбщегоНазначения.РаспределитьПропорционально( СуммаРасчетов, МассивКоэф, 2);
	Иначе
		МассивРасчеты = Неопределено
	КонецЕсли;

	СтрокТоваров = ТаблицаПоТоварам.Количество() - 1;
	Для К = 0 По СтрокТоваров Цикл
		Если Не МассивРасчеты = Неопределено Тогда
			ТаблицаПоТоварам[К].СуммаВзаиморасчетовРаспределения = ТаблицаПоТоварам[К].СуммаВзаиморасчетовРаспределения + МассивРасчеты[К];
		КонецЕсли;
		Если Не МассивСумм = Неопределено Тогда
			ТаблицаПоТоварам[К].Сумма = ТаблицаПоТоварам[К].Сумма + МассивСумм[К];
		КонецЕсли;
		Если Не МассивНДС = Неопределено Тогда
			ТаблицаПоТоварам[К].НДС = ТаблицаПоТоварам[К].НДС + МассивНДС[К];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ДобавитьРаспределение()

Процедура РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, СтатусПартии, Отказ, Заголовок)
	
	ДопСтроки = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаПоТоварам.Колонки Цикл
		ДопСтроки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		// В таблице распределения по складам могут быть записи с любыми комбинациями 
		// ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры
		// Отберем нужные
		СтруктураПоиска = Новый Структура ("ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, СтатусПартии",
											Строка.ДокументОприходования,
											Строка.Номенклатура,
											Строка.СерияНоменклатуры,
											Строка.ХарактеристикаНоменклатуры,
											СтатусПартии);
		МассивСтрокРаспределения = ТаблицаРаспределенияПоСкладам.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокРаспределения.Количество() = 0 тогда
			ТекстСообщения = "Не найден в документе "+ Строка.ДокументОприходования
			+ " товар " + Строка.Номенклатура
			+ ?(Строка.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + Строка.ХарактеристикаНоменклатуры, "")
			+ ?(Строка.Номенклатура.ВестиУчетПоСериям, ", серия: " + Строка.СерияНоменклатуры, "");
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		ИтогоКоличество = 0;
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			ИтогоКоличество = ИтогоКоличество + Элемент.Количество;
		КонецЦикла;
		
		РаспределяемаяСумма 							= Строка.Стоимость;
		РаспределяемаяСуммаВзаиморасчетов 				= Строка.СуммаВзаиморасчетов;
		
		РаспределяемаяСуммаРег 							= Строка.Сумма;
		РаспределяемаяНДСРег 							= Строка.НДС;
		
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			
			Если ИтогоКоличество<=0 Тогда         
				Прервать;
			КонецЕсли;
			
			Если Элемент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДопСтрока = ДопСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ДопСтрока,Строка);
			
			ДопСтрока.Склад = Элемент.Склад;
			
			Если Элемент.Количество<ИтогоКоличество Тогда
				КоэффРаспред = Элемент.Количество/ИтогоКоличество;
			Иначе
				КоэффРаспред = 1;
			КонецЕсли;
			
			ДопСтрока.Стоимость 						= Окр(РаспределяемаяСумма * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.СуммаВзаиморасчетов 				= Окр(РаспределяемаяСуммаВзаиморасчетов * КоэффРаспред,2,РежимОкругления.Окр15как20);
			
			ДопСтрока.Сумма 							= Окр(РаспределяемаяСуммаРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.НДС 								= Окр(РаспределяемаяНДСРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			
			РаспределяемаяСумма 							= РаспределяемаяСумма - ДопСтрока.Стоимость;
			РаспределяемаяСуммаВзаиморасчетов 				= РаспределяемаяСуммаВзаиморасчетов - ДопСтрока.СуммаВзаиморасчетов;
				
			РаспределяемаяСуммаРег 							= РаспределяемаяСуммаРег - ДопСтрока.Сумма;
			РаспределяемаяНДСРег 							= РаспределяемаяНДСРег - ДопСтрока.НДС;
			
			ИтогоКоличество = ИтогоКоличество - Элемент.Количество;
			
		КонецЦикла;
		// Исходная строка будет с 0 суммой
		Строка.Стоимость = 0;
		
	КонецЦикла;
	
	// Теперь доп строки добавим в таблицу по товарам
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДопСтрока);
	КонецЦикла;
			
	// После обработки удалим строки с нулевыми суммами
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].Стоимость=0 Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд = Инд+1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры//РаспределитьПоСкладам

Процедура РаспределитьДопРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЗапросРаспределенияПоСкладам = Новый Запрос;
	ЗапросРаспределенияПоСкладам.Текст = "ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка КАК ДокументОприходования,
	                                     |	ДокументОприходованияТовары.Склад КАК Склад,
	                                     |	ДокументОприходованияТовары.Номенклатура КАК Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент КАК Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма) КАК Сумма,
	                                     |	СУММА(ДокументОприходованияТовары.Количество) КАК Количество,
	                                     |	&СтатусПартии КАК СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Ссылка.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.АвансовыйОтчет.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ОприходованиеТоваров.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад";

	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Ссылка", ТаблицаПоТоварам.ВыгрузитьКолонку("ДокументОприходования"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Номенклатура", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СерияНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	
	ТаблицаРаспределенияПоСкладам = ЗапросРаспределенияПоСкладам.Выполнить().Выгрузить();
	
	РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, Перечисления.СтатусыПартийТоваров.Купленный, Отказ, Заголовок);

КонецПроцедуры//РаспределитьДопРасходыТоваровПоСкладам

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
	                                 |КурсВзаиморасчетов, КратностьВзаиморасчетов");
	КонецЕсли;

	Если Сумма = 0 Тогда
		СтруктураОбязательныхПолей.Удалить("СпособРаспределения");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		                      "По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
		                       |Заполните поле ""Заказ поставщику""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
    Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли; 
КонецПроцедуры

// Процедура проверяется необходимые поля для заполнения, анализируя способ распределения.
//
Процедура ПроверитьПолеВесСумму(ТаблицаПоТоварам, Отказ, Заголовок)

	СуммаДополнительныхРасходов = ТаблицаПоТоварам.Итог("СуммаДополнительныхРасходов");
	Если Сумма = 0 И СуммаДополнительныхРасходов = 0 Тогда
		ТекстСообщения = "Не указаны суммы для распределения!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		возврат;
	КонецЕсли;
	Если Сумма > 0 И СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
		Если ТаблицаПоТоварам.Итог("Вес") = 0 Тогда
			ТекстСообщения = "Суммарный вес всех позиций номенклатуры равен нулю!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
	ИначеЕсли Сумма > 0 И СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		Если ТаблицаПоТоварам.Итог("СуммаТовара") = 0 Тогда
			ТекстСообщения = "Сумма всех позиций номенклатуры равна нулю!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет нет ли среди документов партии поступлений товаров на комиссию
//
Процедура ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок)
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части ""Товары"" в качестве документа партии выбрано поступление на комиссию.",
							   Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяТабЧасти)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьПолеВесСумму(ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ,Заголовок,РежимПроведения)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	                       ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок, РежимПроведения);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицаАвансов = Новый ТаблицаЗначений();
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ);
	КонецЕсли; 
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                             Отказ, Заголовок, СтруктураШапкиДокумента);

КонецПроцедуры

// Формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам,
                                 ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок, РежимПроведения)
	
	Если не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	

		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		        мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		        ВидДвиженияНакопления.Расход, Отказ, Заголовок);


		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ТабПартий = ТаблицаПоТоварам.Скопировать();
		
		// Из таблицы по товарам выделим строки, для которых заполнен документ оприходования
		Инд=0;
		Пока Инд<ТабПартий.Количество() Цикл
			
			Если Не ЗначениеЗаполнено(ТабПартий[Инд].ДокументОприходования) Тогда
				ТабПартий.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПартий, ТаблицаДвижений);

		Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТабПартий.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
			
			// Если партионный учет по сериям не ведется, то надо очистить серию
			Если НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
				СтрокаДвижений.СерияНоменклатуры = Неопределено;
			КонецЕсли;
			
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");

		// Если нет парт. учета по складам, склад не заполняется
		Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
			
		КонецЕсли;
		
		// При учете по-средней документ оприходования не пишется
		Если СтруктураШапкиДокумента.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДокументОприходования");
		КонецЕсли;
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ доп.расходов для последующего распределения
		
		НаборДвижений = Движения.ДопРасходыНаПриобретениеТоваров;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ТабЗатрат = ТаблицаПоТоварам.Скопировать();
		
		// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
		Инд=0;
		Пока Инд<ТабЗатрат.Количество() Цикл
			
			Если ЗначениеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
				ТабЗатрат.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
			ТабЗатрат.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабЗатрат, ТаблицаДвижений);

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДопРасходыНаПриобретениеТоваров.ВыполнитьПриход();
		КонецЕсли;
		
		Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
			// ТОВАРЫ ПО РЕГИСТРУ Закупки.
			
			НаборДвижений = Движения.Закупки;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
			ТаблицаДвиженийЗакупки.Очистить();
			ТаблицаПоЗакупкам = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоЗакупкам.Колонки.ДокументОприходования.Имя = "ДокументЗакупки";
			
			Для каждого СтрокаЗакупки из ТаблицаПоЗакупкам цикл
				СтрокаЗакупки.Стоимость = СтрокаЗакупки.СуммаУпр + СтрокаЗакупки.СуммаУпрРаспределения;
			КонецЦикла;

			ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗакупкам, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, 		  "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, 		  "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(0,                  "Количество");
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			 ИЛИ (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			   И  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом) Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПоставщику");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.Закупки.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()	

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
		Возврат;
	КонецЕсли;

	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;

	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

// Вызывается из тела процедуры "ДвиженияПоРегистрам" в процедуре формируются движения, отражающие
// поступление доп. расходов в подсистеме учета НДС
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС И Не СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134 Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;
			
		Если ТабЧасть.Количество()> 0 Тогда 
				
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, СтруктураШапкиДокумента.УчетАгентскогоНДС, ТаблицаАвансов, УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
			
			Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
				
				ТаблицаНачисления = ТабЧасть.Скопировать();
				СтрокиКУдалению = Новый Массив();
				
				Для каждого СтрокаНачисления Из ТаблицаНачисления Цикл
					Если СтрокаНачисления.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом тогда
						 СтрокиКУдалению.Добавить(СтрокаНачисления);
					ИначеЕсли СтрокаНачисления.СуммаБезНДС=0 и  СтрокаНачисления.НДС=0 тогда
						 СтрокиКУдалению.Добавить(СтрокаНачисления);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				    ТаблицаНачисления.удалить(СтрокаКУдалению);
				КонецЦикла;
				
				ТаблицаНачисления.Свернуть("СтавкаНДС,Услуга,ВидЦенности","СуммаБезНДС,НДС");
				УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаНачисления, ИдТабЧасти, Движения, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
		
		// На данный момент все наборы движений записаны.
		// Необходимо прочитать состояние набора "НДСПредъявленный"
		Движения_НДСПредъявленный = ОбщегоНазначения.ПолучитьНаборЗаписейПоСсылке(СтруктураШапкиДокумента.Ссылка,РегистрыНакопления.НДСПредъявленный, Истина).Выгрузить();
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента, Движения_НДСПредъявленный, Движения);
	КонецЕсли; 

	// при необходимости отражаем в регистре партионного учета для НДС
    ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
			
		ТабЧасть   = ТаблицаДокумента.Значение;
		Если ТабЧасть.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		ТаблицаДляНДСПартии = ОбщегоНазначения.СформироватьТаблицуЗначений(ТабЧасть
			, Новый Структура("ДокументОприходования, ВидДоговораПартии, Склад, ВидЦенности,Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Услуга,НДС,СуммаБезНДС,Количество","Партия"));
		
		СтрокиКУдалению = Новый массив();
		Для каждого СтрокаТаблицыТоваров Из ТаблицаДляНДСПартии Цикл
			Если СтрокаТаблицыТоваров.Услуга Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицыТоваров);
			ИначеЕсли СтрокаТаблицыТоваров.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицыТоваров);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДляНДСПартии.Удалить(СтрокаКУдалению);
		КонецЦикла;
			
		ТаблицаДляНДСПартии.ЗаполнитьЗначения(Истина,"Услуга");
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
			
	КонецЦикла; 

КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()	

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА
// (кроме таблицы по таре)

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"        , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"     , "РасчетыВУсловныхЕдиницах");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"         , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                  , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                  , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"            , "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора"        , "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом", "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации"         , "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам" , "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СпособОценкиМПЗ"              , "СпособОценкиМПЗ");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий", "НеВключатьНДСВСтоимостьПартий");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности"    , Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты"                   , 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамДляВзаиморасчетов, Отказ = Ложь, Заголовок = "") Экспорт

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("СтавкаНДС"                                  , "Ссылка.СтавкаНДС");
	СтруктураПолей.Вставить("СуммаДополнительныхРасходов"                , "Сумма");
	СтруктураПолей.Вставить("Набор"                                      , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                                   , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"                            , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Вес"                                        , "ЕдиницаИзмерения.Вес");
	СтруктураПолей.Вставить("СуммаТовара"                                , "СуммаТовара");
	СтруктураПолей.Вставить("ДокументОприходования"                      , "ДокументПартии");
	СтруктураПолей.Вставить("Склад"                                      , "ДокументПартии.СкладОрдер"); // склад в документе поступления
	СтруктураПолей.Вставить("СкладОрдера"                                , "ДокументПартии.СкладОрдер.Склад"); // склад в ордере
	СтруктураПолей.Вставить("ВидДоговораПартии"                          , "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДокументПартииВидОперации"                  , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления"               , "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                      , "ЗаказПокупателя.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"                , "Номенклатура.ВестиПартионныйУчетПоСериям");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров     (РезультатЗапросаПоТоварам,      СтруктураШапкиДокумента);

	ДобавитьРаспределение(ТаблицаПоТоварам, СтруктураШапкиДокумента);
	
	ТаблицаПоТоварамДляВзаиморасчетов = ТаблицаПоТоварам.Скопировать();

	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		РаспределитьДопРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварамДляВзаиморасчетов, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);

КонецПроцедуры // ПодготовитьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Основание = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		возврат;
	КонецЕсли;

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;

	ЗаполнитьТоварыПоПоступлениюТоваров(Основание, Товары);
	
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамДляВзаиморасчетов, 
		ТаблицаПоОборудованию, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Если шапка не заполнена корректна то дальше лучше не идти, поскольку возможны ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамДляВзаиморасчетов, Отказ, Заголовок);
	
	ПроводитьПоВзаиморасчетам = (ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары", ТаблицаПоТоварамДляВзаиморасчетов);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
	                                                Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, "Товары");

	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ,Заголовок,РежимПроведения);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Сумма + Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, (Товары      .Итог("СуммаНДС") + СуммаНДС));

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);

