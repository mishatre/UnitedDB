#Если Клиент Тогда

Перем мНазваниеОтчета Экспорт;

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

// Структура, содержащая представления полей
Перем СтруктураПредставлениеПолей;

Перем мОписаниеТиповЧисло;
Перем мОписаниеТиповБулево;
Перем мОписаниеТиповДата;

////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьПоказатели(ИмяПоля, ПредставлениеПоля, ВклПоУмолчанию, ФорматнаяСтрока, Формула = "")

	СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

	// Показатели заносятся в специальную таблицу и добавляются в список
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = ИмяПоля;
	СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
	СтрПоказатели.ВклПоУмолчанию    = ВклПоУмолчанию;
	СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;

	Показатель = Показатели.Добавить();
	Показатель.Имя           = ИмяПоля;
	Показатель.Представление = ПредставлениеПоля;
	Показатель.Использование = ВклПоУмолчанию;
	Показатель.Формула       = Формула;

КонецПроцедуры

Функция ПолучитьНаименованиеКолонки(Дата, НомерКолонки)

	Если НомерКолонки = 1 Тогда
		ТекстВозврата = "На начало периода";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""гггг 'г.'""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""к 'квартал' гггг 'г.'""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""ММММ гггг 'г.'""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТекстВозврата = "Неделя с" + Символы.ПС + Формат(Дата, "ДФ = ""дд ММММ гггг""");
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ТекстВозврата = Формат(Дата, "ДФ = ""дд ММММ гггг""");
	КонецЕсли;

	Возврат ТекстВозврата;
КонецФункции

// Функция определяет начало периода по дате окончания периода и типу периода
//
// Параметры
//  нет
//
// Возвращаемое значение:
//  Дата
//
Функция ОпределитьДатуНачала()

	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	КонецЕсли;

	Если Периодичность = Перечисления.Периодичность.День Тогда
		ДатаНач = НачалоДня(ДатаНачала);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ДатаНач = НачалоНедели(ДатаНачала);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаНач = НачалоМесяца(ДатаНачала);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаНач = НачалоКвартала(ДатаНачала);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ДатаНач = НачалоГода(ДатаНачала);
	КонецЕсли;

	Возврат ДатаНач;

КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьТекстЗапроса(Тип)

	ТекстЗапроса = "ВЫБРАТЬ Период,";
	
	ПериодичностьДляЗапроса = Строка(Периодичность);
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления.Периодичность.ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Синоним = Строка(Периодичность) Тогда
			ПериодичностьДляЗапроса = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Если Тип="ДляДенежныхСредств" Тогда

		ТекстЗапроса = ТекстЗапроса + "
			|	СуммаУпрНачальныйОстаток    КАК НачальныйОстаток,
			|	СуммаУпрКонечныйОстаток     КАК КонечныйОстаток
			|ИЗ
			|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьДляЗапроса+") КАК ДенежныеСредства
			|
			|ИТОГИ
			|	СУММА(НачальныйОстаток), СУММА(КонечныйОстаток)
			|ПО
			|	Период ПЕРИОДАМИ("+ПериодичностьДляЗапроса+", &ДатаНачала, &ДатаКонца)
			|";

	ИначеЕсли Тип="ДляЗадолженностей" Тогда

		ТекстЗапроса = ТекстЗапроса + "
			|	ДоговорКонтрагента,
			|	Сделка,
			|	СуммаУпрНачальныйОстаток КАК НачальныйОстаток,
			|	СуммаУпрКонечныйОстаток  КАК КонечныйОстаток
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьДляЗапроса+") КАК ВзаиморасчетыСКонтрагентами
			|
			|ИТОГИ
			|	СУММА(НачальныйОстаток), СУММА(КонечныйОстаток)
			|ПО
			|	ДоговорКонтрагента,
			|	Сделка,
			|	Период ПЕРИОДАМИ("+ПериодичностьДляЗапроса+", &ДатаНачала, &ДатаКонца)
			|";

	ИначеЕсли Тип="ДляЗадолженностейПодотчетныхЛиц" Тогда

		ТекстЗапроса = ТекстЗапроса + "
			|	ФизЛицо,
			|	РасчетныйДокумент,
			|	СуммаУпрНачальныйОстаток КАК НачальныйОстаток,
			|	СуммаУпрКонечныйОстаток  КАК КонечныйОстаток
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьДляЗапроса+") КАК ВзаиморасчетыСПодотчетнымиЛицами
			|
			|ИТОГИ
			|	СУММА(НачальныйОстаток), СУММА(КонечныйОстаток)
			|ПО
			|	ФизЛицо,
			|	РасчетныйДокумент,
			|	Период ПЕРИОДАМИ("+ПериодичностьДляЗапроса+", &ДатаНачала, &ДатаКонца)
			|";

	ИначеЕсли Тип="ДляОстатковТМЦ" Тогда

		ТекстЗапроса = ТекстЗапроса + "
			|	СтатусПартии,
			|	СтоимостьНачальныйОстаток  КАК НачальныйОстаток,
			|	СтоимостьКонечныйОстаток   КАК КонечныйОстаток
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьДляЗапроса+",, СтатусПартии <> &ПризнакКомиссии) КАК ПартииТоваровНаСкладах
			|
			|ИТОГИ
			|	СУММА(НачальныйОстаток), СУММА(КонечныйОстаток)
			|ПО
			|	СтатусПартии,
			|	Период ПЕРИОДАМИ("+ПериодичностьДляЗапроса+", &ДатаНачала, &ДатаКонца)
			|";

	ИначеЕсли Тип="ДляОстатковТМЦОтданные" Тогда

		ТекстЗапроса = ТекстЗапроса + "
			|	СтатусПартии,
			|	СтоимостьНачальныйОстаток  КАК НачальныйОстаток,
			|	СтоимостьКонечныйОстаток   КАК КонечныйОстаток
			|ИЗ
			|	РегистрНакопления.ПартииТоваровПереданные.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьДляЗапроса+",, СтатусПартии <> &ПризнакКомиссии) КАК ПартииТоваровПереданные
			|
			|ИТОГИ
			|	СУММА(НачальныйОстаток), СУММА(КонечныйОстаток)
			|ПО
			|	СтатусПартии,
			|	Период ПЕРИОДАМИ("+ПериодичностьДляЗапроса+", &ДатаНачала, &ДатаКонца)";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Процедура ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, НазваниеПараметра, Параметр, ФорматПоказателя, Формула, Отступ)

	Секция = Макет.ПолучитьОбласть("Строка|ОтступКолонка");
	ДокументРезультат.Вывести(Секция,1,"Показатели");
	Секция = Макет.ПолучитьОбласть("Строка|ОсновнаяКолонка");
	Секция.Параметры.Измерение = НазваниеПараметра + ?(ВыводитьФормулы, Символы.ПС+"( "+Формула+" )", "");
	Секция.Область(1,1).Отступ = Отступ;
	ДокументРезультат.Присоединить(Секция,1,"Показатели");
	Секция = Макет.ПолучитьОбласть("Строка|КолонкаДанные");
	Для Каждого Строка Из СтруктураПоказателейРасчета Цикл
		Если ФорматПоказателя <> "" Тогда
			Секция.Параметры.КолонкаДанные = Формат(Строка[Параметр], ФорматПоказателя);
		Иначе
			Секция.Параметры.КолонкаДанные = Строка[Параметр];
		КонецЕсли;
		ДокументРезультат.Присоединить(Секция,1,"Показатели");
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ЗаполнитьНачальныеНастройки() Экспорт

	мТаблицаПоказатели.Очистить();
	СтруктураПредставлениеПолей = Новый Структура;

	ЗаполнитьПоказатели("Показатели"     , "Показатели",
	                    ЛОЖЬ,   "ЧЦ = 15; ЧДЦ = 2");
	ЗаполнитьПоказатели("КАбсЛиквидности", "Коэффициент абсолютной ликвидности",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 5", "ДС / КЗ");
	ЗаполнитьПоказатели("КСрЛиквидности" , "Коэффициент срочной ликвидности",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 5", "(ДС + ДЗ) / КЗ");
	ЗаполнитьПоказатели("КТекЛиквидности", "Коэффициент текущей ликвидности",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 5", "(ДС + ДЗ + CCТ) / КЗ");
	ЗаполнитьПоказатели("ОборотныеАктивы", "Чистые оборотные активы",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 2", "(ДС + ДЗ + ССТ) - КЗ");
	ЗаполнитьПоказатели("ОбеспечСобствОК", "Обеспеченность собственным оборотным капиталом",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 5", "((ДС + ДЗ + ССТ) - КЗ) / (ДС + ДЗ + ССТ)");
	ЗаполнитьПоказатели("КМаневренности" , "Коэффициент маневренности собственного оборотного капитала",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 5", "ССТ / ((ДС + ДЗ + ССТ) - КЗ)");
	ЗаполнитьПоказатели("ДоляТАвОбА"     , "Доля труднореализуемых активов в общей величине оборотных активов",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 5", "ССТ / (ДС + ДЗ + ССТ)");
	ЗаполнитьПоказатели("Соотношение"    , "Соотношение труднореализуемых и легкореализуемых активов",
	                    ИСТИНА, "ЧЦ = 15; ЧДЦ = 5", "ССТ / (ДС + ДЗ)");

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	ДатаНачала = ОпределитьДатуНачала();
	Макет = ПолучитьМакет("Макет");

	МассивЦветаИзмерений = Новый Массив;
	ТабДокЦветаИзмерений = Макет.ПолучитьОбласть("ЦветаИзмерений");
	Для Сч = 1 По ТабДокЦветаИзмерений.ВысотаТаблицы Цикл
		МассивЦветаИзмерений.Добавить(ТабДокЦветаИзмерений.Область(Сч,2).ЦветФона);
	КонецЦикла;

	ДокументРезультат.Очистить();

	Секция = Макет.ПолучитьОбласть("ШапкаВерх|ОтступКолонка");
	ДокументРезультат.Вывести(Секция);
	Секция = Макет.ПолучитьОбласть("ШапкаВерх|ОсновнаяКолонка");
	Секция.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
	Секция.Параметры.Период          = "" + СокрЛП(Формат(ДатаНачала, "ДФ=dd.MM.yyyy")) + " - " + СокрЛП(Формат(ДатаКонца,  "ДФ=dd.MM.yyyy"));
	ДокументРезультат.Присоединить(Секция);

	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Управление заголовком
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Если ТолькоЗаголовок ИЛИ НЕ ЗначениеЗаполнено(Периодичность) Тогда
		ДокументРезультат.Показать();
		Возврат;
	КонецЕсли;

	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ОтступКолонка");
	ДокументРезультат.Вывести(Секция);
	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|ОсновнаяКолонка");
	ДокументРезультат.Присоединить(Секция);
	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаДанные");

	СтруктураПоказателейРасчета = Новый ТаблицаЗначений;
	СтруктураПоказателейРасчета.Колонки.Добавить("Период"                   , мОписаниеТиповДата );
	СтруктураПоказателейРасчета.Колонки.Добавить("ДенежныеСредства"         , мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("ДебиторскаяЗадолженность" , мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("ДебиторскаяЗадолженностьКонтрагентов" , мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("ДебиторскаяЗадолженностьПодотчетников" , мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("КредиторскаяЗадолженность", мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("КредиторскаяЗадолженностьКонтрагентов", мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("КредиторскаяЗадолженностьПодотчетников", мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("ТМЦ"                      , мОписаниеТиповЧисло);

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("ДляДенежныхСредств");
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца" , КонецДня(ДатаКонца) );
	ВыборкаПериодов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");

	ПервыйЭлементВыборки = Истина;
	Пока ВыборкаПериодов.Следующий() Цикл
		Если ВыборкаПериодов.Период = NULL Тогда
			Продолжить;
		КонецЕсли;

		Если ПервыйЭлементВыборки Тогда
			Строка = СтруктураПоказателейРасчета.Добавить();
			Строка.Период           = ДатаНачала - 60*60*24;
			Строка.ДенежныеСредства = ВыборкаПериодов.НачальныйОстаток;

			ПервыйЭлементВыборки = Ложь;
		КонецЕсли;

		Строка = СтруктураПоказателейРасчета.Добавить();
		Строка.Период           = ВыборкаПериодов.Период;
		Строка.ДенежныеСредства = ВыборкаПериодов.КонечныйОстаток;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("ДляЗадолженностей");
	Запрос.УстановитьПараметр("ДатаНачала"    , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца"     , КонецДня(ДатаКонца));

	ВыборкаДоговоров = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДоговорКонтрагента");
	Пока ВыборкаДоговоров.Следующий() Цикл
		ВыборкаСделка = ВыборкаДоговоров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сделка");
		Пока ВыборкаСделка.Следующий() Цикл
			ВыборкаПериодов = ВыборкаСделка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");

			ПервыйЭлементВыборки = Истина;
			Пока ВыборкаПериодов.Следующий() Цикл
				Если ВыборкаПериодов.Период = NULL Тогда
					Продолжить;
				КонецЕсли;

				Если ПервыйЭлементВыборки Тогда
					Строка = СтруктураПоказателейРасчета.Добавить();
					Строка.Период = ДатаНачала - 60*60*24;
					Если ВыборкаПериодов.НачальныйОстаток > 0 Тогда
						Строка.ДебиторскаяЗадолженность  = ВыборкаПериодов.НачальныйОстаток;
						Строка.ДебиторскаяЗадолженностьКонтрагентов  = ВыборкаПериодов.НачальныйОстаток;
					Иначе
						Строка.КредиторскаяЗадолженность = - ВыборкаПериодов.НачальныйОстаток;
						Строка.КредиторскаяЗадолженностьКонтрагентов = - ВыборкаПериодов.НачальныйОстаток;
					КонецЕсли;

					ПервыйЭлементВыборки = Ложь;
				КонецЕсли;

				Строка = СтруктураПоказателейРасчета.Добавить();
				Строка.Период = ВыборкаПериодов.Период;
				Если ВыборкаПериодов.КонечныйОстаток > 0 Тогда
					Строка.ДебиторскаяЗадолженность  = ВыборкаПериодов.КонечныйОстаток;
					Строка.ДебиторскаяЗадолженностьКонтрагентов  = ВыборкаПериодов.КонечныйОстаток;
				Иначе
					Строка.КредиторскаяЗадолженность = - ВыборкаПериодов.КонечныйОстаток;
					Строка.КредиторскаяЗадолженностьКонтрагентов = - ВыборкаПериодов.КонечныйОстаток;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("ДляЗадолженностейПодотчетныхЛиц");
	Запрос.УстановитьПараметр("ДатаНачала"    , ДатаНачала   );
	Запрос.УстановитьПараметр("ДатаКонца"     , КонецДня(ДатаКонца));

	ВыборкаФизЛиц = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФизЛицо");
	Пока ВыборкаФизЛиц.Следующий() Цикл
		ВыборкаДокументОтчета = ВыборкаФизЛиц.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РасчетныйДокумент");
		Пока ВыборкаДокументОтчета.Следующий() Цикл
			ВыборкаПериодов = ВыборкаДокументОтчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");

			ПервыйЭлементВыборки = Истина;
			Пока ВыборкаПериодов.Следующий() Цикл
				Если ВыборкаПериодов.Период = NULL Тогда
					Продолжить;
				КонецЕсли;

				Если ПервыйЭлементВыборки Тогда
					Строка = СтруктураПоказателейРасчета.Добавить();
					Строка.Период = ДатаНачала - 60*60*24;
					Если ВыборкаПериодов.НачальныйОстаток > 0 Тогда
						Строка.ДебиторскаяЗадолженность  = ВыборкаПериодов.НачальныйОстаток;
						Строка.ДебиторскаяЗадолженностьПодотчетников  = ВыборкаПериодов.НачальныйОстаток;
					Иначе
						Строка.КредиторскаяЗадолженность = - ВыборкаПериодов.НачальныйОстаток;
						Строка.КредиторскаяЗадолженностьПодотчетников = - ВыборкаПериодов.НачальныйОстаток;
					КонецЕсли;

					ПервыйЭлементВыборки = Ложь;
				КонецЕсли;

				Строка = СтруктураПоказателейРасчета.Добавить();
				Строка.Период = ВыборкаПериодов.Период;
				Если ВыборкаПериодов.КонечныйОстаток > 0 Тогда
					Строка.ДебиторскаяЗадолженность  = ВыборкаПериодов.КонечныйОстаток;
					Строка.ДебиторскаяЗадолженностьПодотчетников  = ВыборкаПериодов.КонечныйОстаток;
				Иначе
					Строка.КредиторскаяЗадолженность = - ВыборкаПериодов.КонечныйОстаток;
					Строка.КредиторскаяЗадолженностьПодотчетников = - ВыборкаПериодов.КонечныйОстаток;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("ДляОстатковТМЦ");
	Запрос.УстановитьПараметр("ДатаНачала"     , ДатаНачала   );
	Запрос.УстановитьПараметр("ДатаКонца"      , КонецДня(ДатаКонца)    );
	Запрос.УстановитьПараметр("ПризнакКомиссии", Перечисления.СтатусыПартийТоваров.НаКомиссию);

	ВыборкаСтатусовПартий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатусПартии");
	Пока ВыборкаСтатусовПартий.Следующий() Цикл
		Если ВыборкаСтатусовПартий.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
			Продолжить;
		КонецЕсли;

		ВыборкаПериодов = ВыборкаСтатусовПартий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");

		ПервыйЭлементВыборки = Истина;
		Пока ВыборкаПериодов.Следующий() Цикл
			Если ВыборкаПериодов.Период = NULL Тогда
				Продолжить;
			КонецЕсли;

			Если ПервыйЭлементВыборки Тогда
				Строка = СтруктураПоказателейРасчета.Добавить();
				Строка.Период = ДатаНачала - 60*60*24;
				Строка.ТМЦ    = ВыборкаПериодов.НачальныйОстаток;

				ПервыйЭлементВыборки = Ложь;
			КонецЕсли;

			Строка = СтруктураПоказателейРасчета.Добавить();
			Строка.Период = ВыборкаПериодов.Период;
			Строка.ТМЦ    = ВыборкаПериодов.КонечныйОстаток;
		КонецЦикла;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса("ДляОстатковТМЦОтданные");
	Запрос.УстановитьПараметр("ДатаНачала"    , ДатаНачала   );
	Запрос.УстановитьПараметр("ДатаКонца"     , КонецДня(ДатаКонца));
	Запрос.УстановитьПараметр("ПризнакКомиссии", Перечисления.СтатусыПартийТоваров.НаКомиссию);
	
	ВыборкаПериодов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");

	ПервыйЭлементВыборки = Истина;
	Пока ВыборкаПериодов.Следующий() Цикл
		Если ВыборкаПериодов.Период = NULL Тогда
			Продолжить;
		КонецЕсли;

		Если ПервыйЭлементВыборки Тогда
			Строка = СтруктураПоказателейРасчета.Добавить();
			Строка.Период = ДатаНачала - 60*60*24;
			Строка.ТМЦ    = ВыборкаПериодов.НачальныйОстаток;

			ПервыйЭлементВыборки = Ложь;
		КонецЕсли;

		Строка = СтруктураПоказателейРасчета.Добавить();
		Строка.Период = ВыборкаПериодов.Период;
		Строка.ТМЦ    = ВыборкаПериодов.КонечныйОстаток;
	КонецЦикла;

	СтруктураПоказателейРасчета.Свернуть("Период","ДенежныеСредства,ДебиторскаяЗадолженность,ДебиторскаяЗадолженностьКонтрагентов,ДебиторскаяЗадолженностьПодотчетников,КредиторскаяЗадолженность,КредиторскаяЗадолженностьКонтрагентов,КредиторскаяЗадолженностьПодотчетников,ТМЦ");
	СтруктураПоказателейРасчета.Сортировать("Период");

	СтруктураПоказателейРасчета.Колонки.Добавить("КАбсЛиквидности", мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("КСрЛиквидности" , мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("КТекЛиквидности", мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("ОборотныеАктивы", мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("ОбеспечСобствОК", мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("КМаневренности" , мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("ДоляТАвОбА"     , мОписаниеТиповЧисло);
	СтруктураПоказателейРасчета.Колонки.Добавить("Соотношение"    , мОписаниеТиповЧисло);

	КоличествоКолонок=0;
	Для Каждого Строка Из СтруктураПоказателейРасчета Цикл
		КоличествоКолонок = КоличествоКолонок + 1;
		Секция = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаДанные");
		Секция.Параметры.Период = ПолучитьНаименованиеКолонки(Строка.Период, КоличествоКолонок);
		ДокументРезультат.Присоединить(Секция);

		// формула: ДС/КЗ
		// Знаменатель = ДС
		Знаменатель = Строка.ДенежныеСредства;
		Строка.КАбсЛиквидности = ?(Строка.КредиторскаяЗадолженность = 0, 0, Знаменатель / Строка.КредиторскаяЗадолженность);

		// формула: (ДС+ДЗ)/КЗ
		// Знаменатель = ДС+ДЗ
		Знаменатель = Знаменатель + Строка.ДебиторскаяЗадолженность;
		Строка.КСрЛиквидности  = ?(Строка.КредиторскаяЗадолженность = 0, 0, Знаменатель / Строка.КредиторскаяЗадолженность);

		// формула: (ДС+ДЗ+ТМЦ)/КЗ
		// Знаменатель = ДС+ДЗ+ТМЦ
		Знаменатель = Знаменатель + Строка.ТМЦ;
		Строка.КТекЛиквидности = ?(Строка.КредиторскаяЗадолженность = 0, 0, Знаменатель / Строка.КредиторскаяЗадолженность);

		// формула: (ДС+ДЗ+ТМЦ)-КЗ
		// Знаменатель = ДС+ДЗ+ТМЦ
		Строка.ОборотныеАктивы = Знаменатель - Строка.КредиторскаяЗадолженность;

		// формула: ((ДС+ДЗ+ТМЦ)-КЗ)/(ДС+ДЗ+ТМЦ)
		// Знаменатель = ДС+ДЗ+ТМЦ
		Строка.ОбеспечСобствОК = ?(Знаменатель = 0, 0, (Знаменатель - Строка.КредиторскаяЗадолженность) / Знаменатель);

		// формула: ТМЦ/((ДС+ДЗ+ТМЦ)-КЗ)
		// Знаменатель = ДС+ДЗ+ТМЦ
		Строка.КМаневренности  = ?(Знаменатель - Строка.КредиторскаяЗадолженность = 0, 0, Строка.ТМЦ / (Знаменатель - Строка.КредиторскаяЗадолженность));

		// формула: ТМЦ/(ДС+ДЗ+ТМЦ)
		// Знаменатель = ДС+ДЗ+ТМЦ
		Строка.ДоляТАвОбА      = ?(Знаменатель = 0, 0, Строка.ТМЦ / Знаменатель);

		// формула: ТМЦ/(ДС+ДЗ)
		// Знаменатель = ДС+ДЗ
		Знаменатель = Строка.ДенежныеСредства + Строка.ДебиторскаяЗадолженность;
		Строка.Соотношение     = ?(Знаменатель = 0, 0, Строка.ТМЦ / Знаменатель);
	КонецЦикла;

	ДокументРезультат.Область(2, 2, ВысотаЗаголовка, ДокументРезультат.ШиринаТаблицы).ПоВыделеннымКолонкам = Истина;

	// Фиксация шапки
	ВысотаФиксации = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСверху = ВысотаФиксации;

	Для Каждого Показатель Из Показатели Цикл

		Если Показатель.Использование = Истина Тогда
			ИмяПоказателя    = Показатель.Имя;
			Формула          = Показатель.Формула;
			ЭлементТаблицы   = мТаблицаПоказатели.Найти(Показатель.Имя);
			Если ЭлементТаблицы <> Неопределено Тогда
				ФорматПоказателя        = ЭлементТаблицы.ФорматнаяСтрока;
				ПредставлениеПоказателя = ЭлементТаблицы.ПредставлениеПоля;
			Иначе
				ФорматПоказателя        = "";
				ПредставлениеПоказателя = Показатель.Представление;
			КонецЕсли;

			Если ИмяПоказателя = "Показатели" Тогда

				Секция = Макет.ПолучитьОбласть("СтрокаИерархии|ОтступКолонка");
				ДокументРезультат.Вывести(Секция,1,"Показатели");
				Секция = Макет.ПолучитьОбласть("СтрокаИерархии|ОсновнаяКолонка");
				Секция.Параметры.Измерение = ПредставлениеПоказателя;
				ДокументРезультат.Присоединить(Секция,1,"Показатели");
				Секция = Макет.ПолучитьОбласть("СтрокаИерархии|КолонкаДанные");

				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Объединить();
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).ЦветФона = МассивЦветаИзмерений[МассивЦветаИзмерений.Количество()-1];
				ДокументРезультат.НачатьГруппуСтрок("Показатели", Истина);

				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Денежные средства"                                          , "ДенежныеСредства"         , ФорматПоказателя, "ДС", 1);
				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Дебиторская задолженность"                                  , "ДебиторскаяЗадолженность" , ФорматПоказателя, "ДЗ", 1);
				ДокументРезультат.НачатьГруппуСтрок("ДебиторскаяЗадолженность", Ложь);
				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Дебиторская задолженность контрагентов"                     , "ДебиторскаяЗадолженностьКонтрагентов" , ФорматПоказателя, "", 2);
				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Дебиторская задолженность подотчетных лиц"                  , "ДебиторскаяЗадолженностьПодотчетников" , ФорматПоказателя, "", 2);
				ДокументРезультат.ЗакончитьГруппуСтрок();
				
				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Кредиторская задолженность"                                 , "КредиторскаяЗадолженность", ФорматПоказателя, "КЗ", 1);
				ДокументРезультат.НачатьГруппуСтрок("КредиторскаяЗадолженность", Ложь);
				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Кредиторская задолженность контрагентов"                    , "КредиторскаяЗадолженностьКонтрагентов", ФорматПоказателя, "", 2);
				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Кредиторская задолженность подотчентых лиц"                 , "КредиторскаяЗадолженностьПодотчетников", ФорматПоказателя, "", 2);
				ДокументРезультат.ЗакончитьГруппуСтрок();
				
				ДобавитьПараметр(Макет, ДокументРезультат, СтруктураПоказателейРасчета, "Себестоимость товаров (за исключением принятых на комиссию)", "ТМЦ"                      , ФорматПоказателя, "ССТ", 1);

				ДокументРезультат.ЗакончитьГруппуСтрок();

			Иначе

				Секция = Макет.ПолучитьОбласть("Строка|ОтступКолонка");
				ДокументРезультат.Вывести(Секция);
				Секция = Макет.ПолучитьОбласть("Строка|ОсновнаяКолонка");
				Секция.Параметры.Измерение = ПредставлениеПоказателя + ?(ВыводитьФормулы, Символы.ПС+"( "+Формула+" )", "");
				ДокументРезультат.Присоединить(Секция);
				Секция = Макет.ПолучитьОбласть("Строка|КолонкаДанные");

				Для Каждого Строка Из СтруктураПоказателейРасчета Цикл
					Если ФорматПоказателя <> "" Тогда
						Секция.Параметры.КолонкаДанные = Формат(Строка[ИмяПоказателя], ФорматПоказателя);
					Иначе
						Секция.Параметры.КолонкаДанные = Строка[ИмяПоказателя];
					КонецЕсли;
					ДокументРезультат.Присоединить(Секция);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ЛеваяЛинияТаблицы = ДокументРезультат.Область(ВысотаФиксации, 2).ГраницаСлева;

	ДокументРезультат.Область(ВысотаФиксации, 2, ДокументРезультат.ВысотаТаблицы, 2).ГраницаСлева  = Новый Линия(ЛеваяЛинияТаблицы.ТипЛинии, ЛеваяЛинияТаблицы.Толщина);
	ДокументРезультат.Область(ВысотаФиксации, 2, ДокументРезультат.ВысотаТаблицы, 2).ГраницаСправа = Новый Линия(ЛеваяЛинияТаблицы.ТипЛинии, ЛеваяЛинияТаблицы.Толщина);
	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).ГраницаСнизу = Новый Линия(ЛеваяЛинияТаблицы.ТипЛинии, ЛеваяЛинияТаблицы.Толщина);
	ДокументРезультат.Область(ВысотаФиксации, ДокументРезультат.ШиринаТаблицы, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).ГраницаСправа = Новый Линия(ЛеваяЛинияТаблицы.ТипЛинии, ЛеваяЛинияТаблицы.Толщина);

	ДокументРезультат.Показать();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
мОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 5));

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
мОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));

МассивСтрока = Новый Массив;
МассивСтрока.Добавить(Тип("Строка"));
КвалификаторСтроки  = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
мОписаниеТиповСтрока = Новый ОписаниеТипов(МассивСтрока, , КвалификаторСтроки);

// Инициализация таблиц всех возможных показателей, группировок,  фильтров
мТаблицаПоказатели = Новый ТаблицаЗначений;
мТаблицаПоказатели.Колонки.Добавить("ИмяПоля",           мОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", мОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ОписаниеПоля",      мОписаниеТиповСтрока);
мТаблицаПоказатели.Колонки.Добавить("ВклПоУмолчанию",    мОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("Пометка",           мОписаниеТиповБулево);
мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока",   мОписаниеТиповСтрока);

мНазваниеОтчета = "Структура оборотных средств + финансовый анализ";

#КонецЕсли