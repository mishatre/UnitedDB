#Если Клиент Тогда
	
Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
	
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Владелец),
	|	ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента),
	|	ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
	|	ЗаказыПокупателейОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.Номенклатура),
	|	ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры),
	|	ЗаказыПокупателейОстаткиИОбороты.СтатусПартии КАК СтатусПартии,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.СтатусПартии),
	|	ЗаказыПокупателейОстаткиИОбороты.Цена КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.Цена),
	|	ЗаказыПокупателейОстаткиИОбороты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыПокупателейОстаткиИОбороты.ЕдиницаИзмерения),
	|	ВЫБОР
	|		КОГДА СводЗаказыПокупателейОстаткиИОбороты.КоличествоПриход = СводЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|			ТОГДА ""Не отгружено""
	|		КОГДА ЕСТЬNULL(СводЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0) <= 0
	|			ТОГДА ""Отгружено полностью""
	|		ИНАЧЕ ""Отгружено частично""
	|	КОНЕЦ КАК СостояниеОтгрузки,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0
	|				ИЛИ РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL 
	|			ТОГДА ""Не оплачено""
	|		КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|			ТОГДА ""Оплачено полностью""
	|		ИНАЧЕ ""Оплачено частично""
	|	КОНЕЦ КАК СостояниеОплаты,
	|	РасчетыСКонтрагентами.СуммаУпрПриход КАК СуммаЗаказа,
	|	РасчетыСКонтрагентами.СуммаУпрКонечныйОстаток КАК ОсталосьОплатить,
	|	ВЫБОР
	|		КОГДА
	|			РасчетыСКонтрагентами.СуммаУпрПриход * (РасчетыСКонтрагентами.ДоговорКонтрагента.ПроцентПредоплаты / 100) - РасчетыСКонтрагентами.СуммаУпрРасход <= 0 
	|		ТОГДА
	|			0
	|		ИНАЧЕ
	|			РасчетыСКонтрагентами.СуммаУпрПриход * (РасчетыСКонтрагентами.ДоговорКонтрагента.ПроцентПредоплаты / 100) - РасчетыСКонтрагентами.СуммаУпрРасход
	|		КОНЕЦ КАК Предоплата,
	|	ЗаказыПокупателейОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК ОсталосьОтгрузитьСуммаВзаиморасчетов,
	|	ЗаказыПокупателейОстаткиИОбороты.СуммаУпрКонечныйОстаток 			КАК ОсталосьОтгрузитьСуммаУпр,
	// Количество в ед. хранения
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Запланировано,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить,
	|	ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0) 
	|	+ ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток, 0) 
	|	- ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток, 0) 
	|												КАК СоСклада,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0)
	|	- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0)
	|	- ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток, 0) 
	|	+ ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток, 0) 
	|	- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток, 0) КАК ОсталосьОбеспечить,
	
	// Количество в баз. единицах
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент                   КАК ЗапланированоБазовыхЕд,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент          КАК ОсталосьОтгрузитьБазовыхЕд,
	|	ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток * ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток * РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток * РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|																																КАК СоСкладаБазовыхЕд,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент                      КАК ЗаказаноБазовыхЕд,
	|	ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток                * ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток                       * РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток                      * РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток           * РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0) КАК ОсталосьОбеспечитьБазовыхЕд,
	
	// Количество в ед. отчетов
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход
	|		* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК ЗапланированоЕдиницОтчетов,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|		* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК ОсталосьОтгрузитьЕдиницОтчетов,
	|	ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток
	|		* ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток
	|		* РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПередаче.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток
	|		* РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПолучению.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|																					КАК СоСкладаЕдиницОтчетов,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток
	|		* РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаДляОтчетов.Коэффициент     КАК ЗаказаноЕдиницОтчетов,
	
	|	ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|		* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток
	|		* ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток
	|		* РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПередаче.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток
	|		* РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПолучению.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток
	|		* РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0) КАК ОсталосьОбеспечитьЕдиницОтчетов
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	
	|{ВЫБРАТЬ
	|	ДоговорКонтрагентаВладелец.*,
	|	ДоговорКонтрагента.*,
	|	ЗаказПокупателя.*,
	|	Номенклатура.*,
	|	ХарактеристикаНоменклатуры.*,
	|	СтатусПартии,
	|	Цена,
	|	ЕдиницаИзмерения.*,
	|	СостояниеОтгрузки,
	|	СостояниеОплаты,
	|	Предоплата,
	|	СуммаЗаказа,
	|	ОсталосьОплатить,
	|	ОсталосьОтгрузитьСуммаВзаиморасчетов,
	|	ОсталосьОтгрузитьСуммаУпр,
	
	|	Запланировано,
	|	ОсталосьОтгрузить,
	|	СоСклада,
	|	Заказано,
	|	ОсталосьОбеспечить,
	
	|	ЗапланированоБазовыхЕд,
	|	ОсталосьОтгрузитьБазовыхЕд,
	|	СоСкладаБазовыхЕд,
	|	ЗаказаноБазовыхЕд,
	|	ОсталосьОбеспечитьБазовыхЕд,
	
	|	ЗапланированоЕдиницОтчетов,
	|	ОсталосьОтгрузитьЕдиницОтчетов,
	|	СоСкладаЕдиницОтчетов,
	|	ЗаказаноЕдиницОтчетов,
	|	ОсталосьОбеспечитьЕдиницОтчетов
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}

	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя {ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец, ДоговорКонтрагента.* КАК ДоговорКонтрагента, ВЫРАЗИТЬ(ЗаказПокупателя КАК Документ.ЗаказПокупателя).* КАК ЗаказПокупателя, Номенклатура.* КАК Номенклатура, ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры}) КАК ЗаказыПокупателейОстаткиИОбороты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаКон, ДокументРезерва ССЫЛКА Документ.ЗаказПокупателя {ВЫРАЗИТЬ(ДокументРезерва КАК Документ.ЗаказПокупателя).* КАК ЗаказПокупателя, Номенклатура.* КАК Номенклатура, ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры}) КАК ТоварыВРезервеНаСкладах
	|		ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = ТоварыВРезервеНаСкладах.ДокументРезерва
	|			И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура
	|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаКон, ДокументРезерва ССЫЛКА Документ.ЗаказПокупателя {ВЫРАЗИТЬ(ДокументРезерва КАК Документ.ЗаказПокупателя).* КАК ЗаказПокупателя, Номенклатура.* КАК Номенклатура, ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры}) КАК РезервыКПередаче
	|		ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = РезервыКПередаче.ДокументРезерва
	|			И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыКПередаче.Номенклатура
	|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РезервыКПередаче.ХарактеристикаНоменклатуры}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(&ДатаКон, ДокументРезерва ССЫЛКА Документ.ЗаказПокупателя {ВЫРАЗИТЬ(ДокументРезерва КАК Документ.ЗаказПокупателя).* КАК ЗаказПокупателя, Номенклатура.* КАК Номенклатура, ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры}) КАК РезервыКПолучению
	|		ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = РезервыКПолучению.ДокументРезерва
	|			И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РезервыКПолучению.Номенклатура
	|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РезервыКПолучению.ХарактеристикаНоменклатуры}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаКон, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя {ВЫРАЗИТЬ(ЗаказПокупателя КАК Документ.ЗаказПокупателя).* КАК ЗаказПокупателя, Номенклатура.* КАК Номенклатура, ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры}) КАК РазмещениеЗаказовПокупателей
	|		ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = РазмещениеЗаказовПокупателей.ЗаказПокупателя
	|			И ЗаказыПокупателейОстаткиИОбороты.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура
	|			И ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Сделка ССЫЛКА Документ.ЗаказПокупателя {ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец, ДоговорКонтрагента.* КАК ДоговорКонтрагента, ВЫРАЗИТЬ(Сделка КАК Документ.ЗаказПокупателя).* КАК ЗаказПокупателя}) КАК РасчетыСКонтрагентами
	|		ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = РасчетыСКонтрагентами.Сделка
	|			И ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента = РасчетыСКонтрагентами.ДоговорКонтрагента}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(&ДатаНач, &ДатаКон,,, ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя {ДоговорКонтрагента.Владелец.* КАК ДоговорКонтрагентаВладелец, ДоговорКонтрагента.* КАК ДоговорКонтрагента, ВЫРАЗИТЬ(ЗаказПокупателя КАК Документ.ЗаказПокупателя).* КАК ЗаказПокупателя}) КАК СводЗаказыПокупателейОстаткиИОбороты
	|		ПО ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя = СводЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя}

	|	//СОЕДИНЕНИЯ
	|{ГДЕ
	|	ЗаказыПокупателейОстаткиИОбороты.СтатусПартии.* КАК СтатусПартии,
	|	ЗаказыПокупателейОстаткиИОбороты.Цена.* КАК Цена,
	|	ЗаказыПокупателейОстаткиИОбороты.ЕдиницаИзмерения.* КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|			КОГДА СводЗаказыПокупателейОстаткиИОбороты.КоличествоПриход = СводЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|				ТОГДА ""Не отгружено""
	|			КОГДА ЕСТЬNULL(СводЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0) <= 0
	|				ТОГДА ""Отгружено полностью""
	|			ИНАЧЕ ""Отгружено частично""
	|		КОНЕЦ КАК СостояниеОтгрузки,
	|	ВЫБОР
	|			КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход = 0
	|					ИЛИ РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход ЕСТЬ NULL 
	|				ТОГДА ""Не оплачено""
	|			КОГДА РасчетыСКонтрагентами.СуммаВзаиморасчетовРасход >= РасчетыСКонтрагентами.СуммаВзаиморасчетовПриход
	|				ТОГДА ""Оплачено полностью""
	|			ИНАЧЕ ""Оплачено частично""
	|		КОНЕЦ КАК СостояниеОплаты,
	|	ВЫБОР
	|		КОГДА
	|			РасчетыСКонтрагентами.СуммаУпрПриход * (РасчетыСКонтрагентами.ДоговорКонтрагента.ПроцентПредоплаты / 100) - РасчетыСКонтрагентами.СуммаУпрРасход <= 0 
	|		ТОГДА
	|			0
	|		ИНАЧЕ
	|			РасчетыСКонтрагентами.СуммаУпрПриход * (РасчетыСКонтрагентами.ДоговорКонтрагента.ПроцентПредоплаты / 100) - РасчетыСКонтрагентами.СуммаУпрРасход
	|		КОНЕЦ КАК Предоплата,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход КАК Запланировано,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток КАК ОсталосьОтгрузить,
	|	ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0) 
	|	+ ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток, 0) 
	|	- ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток, 0) 
	|												КАК СоСклада,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток КАК Заказано,
	|	ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток, 0)
	|	- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0)
	|	- ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток, 0) 
	|	+ ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток, 0) 
	|	- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток, 0) КАК ОсталосьОбеспечить,
	|	ЗаказыПокупателейОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток КАК ОсталосьОтгрузитьСуммаВзаиморасчетов,
	|	ЗаказыПокупателейОстаткиИОбороты.СуммаУпрКонечныйОстаток 			КАК ОсталосьОтгрузитьСуммаУпр,
	
	// Количество в баз. единицах
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент                   КАК ЗапланированоБазовыхЕд,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент          КАК ОсталосьОтгрузитьБазовыхЕд,
	|	ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток * ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток * РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток * РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|																																КАК СоСкладаБазовыхЕд,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент                      КАК ЗаказаноБазовыхЕд,
	|	ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток * ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток                * ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток                       * РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток                      * РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0)
	|	- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток           * РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 0) КАК ОсталосьОбеспечитьБазовыхЕд,
	
	// Количество в ед. отчетов
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоПриход
	|		* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК ЗапланированоЕдиницОтчетов,
	|	ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|		* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК ОсталосьОтгрузитьЕдиницОтчетов,
	|	ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток
	|		* ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток
	|		* РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПередаче.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток
	|		* РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПолучению.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|																					КАК СоСкладаЕдиницОтчетов,
	|	РазмещениеЗаказовПокупателей.КоличествоОстаток
	|		* РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаДляОтчетов.Коэффициент     КАК ЗаказаноЕдиницОтчетов,
	
	|	ЕСТЬNULL(ЗаказыПокупателейОстаткиИОбороты.КоличествоКонечныйОстаток
	|		* ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ЗаказыПокупателейОстаткиИОбороты.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток
	|		* ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ ТоварыВРезервеНаСкладах.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(РезервыКПередаче.КоличествоОстаток
	|		* РезервыКПередаче.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПередаче.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	+ ЕСТЬNULL(РезервыКПолучению.КоличествоОстаток
	|		* РезервыКПолучению.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РезервыКПолучению.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0)
	|	- ЕСТЬNULL(РазмещениеЗаказовПокупателей.КоличествоОстаток
	|		* РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		/ РазмещениеЗаказовПокупателей.Номенклатура.ЕдиницаДляОтчетов.Коэффициент, 0) КАК ОсталосьОбеспечитьЕдиницОтчетов,
	|	РасчетыСКонтрагентами.СуммаУпрПриход КАК СуммаЗаказа,
	|	РасчетыСКонтрагентами.СуммаУпрКонечныйОстаток КАК ОсталосьОплатить
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}

	
	|{УПОРЯДОЧИТЬ ПО
	|	ДоговорКонтрагентаВладелец.*,
	|	ДоговорКонтрагента.*,
	|	ЗаказПокупателя.*,
	|	Номенклатура.*,
	|	ХарактеристикаНоменклатуры.*,
	|	СтатусПартии,
	|	Цена,
	|	ЕдиницаИзмерения.*,
	|	СостояниеОтгрузки,
	|	СостояниеОплаты,
	|	Предоплата,
	|	Запланировано,
	|	СоСклада,
	|	Заказано,
	|	ОсталосьОтгрузить,
	|	ОсталосьОплатить,
	|	ОсталосьОбеспечить,
	|	СуммаЗаказа,
	|	ОсталосьОплатить
	|	ОсталосьОтгрузитьСуммаВзаиморасчетов,
	|	ОсталосьОтгрузитьСуммаУпр,
	
	|	ЗапланированоБазовыхЕд,
	|	ОсталосьОтгрузитьБазовыхЕд,
	|	СоСкладаБазовыхЕд,
	|	ЗаказаноБазовыхЕд,
	|	ОсталосьОбеспечитьБазовыхЕд,
	
	|	ЗапланированоЕдиницОтчетов,
	|	ОсталосьОтгрузитьЕдиницОтчетов,
	|	СоСкладаЕдиницОтчетов,
	|	ЗаказаноЕдиницОтчетов,
	|	ОсталосьОбеспечитьЕдиницОтчетов
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|
	|ИТОГИ
	|	МАКСИМУМ(СостояниеОтгрузки) КАК СостояниеОтгрузки,
	|	МАКСИМУМ(СостояниеОплаты) КАК СостояниеОплаты,
	|	ВЫБОР
	|		КОГДА Номенклатура ЕСТЬ НЕ NULL 
	|			ТОГДА 0
	|		КОГДА ЗаказПокупателя ЕСТЬ НЕ NULL 
	|			ТОГДА СУММА(Предоплата) / КОЛИЧЕСТВО(Номенклатура)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Предоплата,
	
	|	ВЫБОР
	|		КОГДА Номенклатура ЕСТЬ НЕ NULL 
	|			ТОГДА 0
	|		КОГДА ЗаказПокупателя ЕСТЬ НЕ NULL 
	|			ТОГДА СУММА(СуммаЗаказа) / КОЛИЧЕСТВО(Номенклатура)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЗаказа,
	|	ВЫБОР
	|		КОГДА Номенклатура ЕСТЬ НЕ NULL 
	|			ТОГДА 0
	|		КОГДА ЗаказПокупателя ЕСТЬ НЕ NULL 
	|			ТОГДА СУММА(ОсталосьОплатить) / КОЛИЧЕСТВО(Номенклатура)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсталосьОплатить,
	|	СУММА(ОсталосьОтгрузитьСуммаВзаиморасчетов),
	|	СУММА(ОсталосьОтгрузитьСуммаУпр),
	
	|	СУММА(Запланировано),
	|	СУММА(ОсталосьОтгрузить),
	|	СУММА(СоСклада),
	|	СУММА(Заказано),
	|	СУММА(ОсталосьОбеспечить),
	
	|	СУММА(ЗапланированоБазовыхЕд),
	|	СУММА(ОсталосьОтгрузитьБазовыхЕд),
	|	СУММА(СоСкладаБазовыхЕд),
	|	СУММА(ЗаказаноБазовыхЕд),
	|	СУММА(ОсталосьОбеспечитьБазовыхЕд),
	
	|	СУММА(ЗапланированоЕдиницОтчетов),
	|	СУММА(ОсталосьОтгрузитьЕдиницОтчетов),
	|	СУММА(СоСкладаЕдиницОтчетов),
	|	СУММА(ЗаказаноЕдиницОтчетов),
	|	СУММА(ОсталосьОбеспечитьЕдиницОтчетов)
	|
	|ПО
	|	ОБЩИЕ,
	|	ДоговорКонтрагентаВладелец,
	|	ДоговорКонтрагента,
	|	ЗаказПокупателя,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Цена,
	|	ЕдиницаИзмерения,
	|	СтатусПартии
	|{ИТОГИ ПО
	|	СостояниеОтгрузки,
	|	СостояниеОплаты,
	|	ДоговорКонтрагентаВладелец.*,
	|	ДоговорКонтрагента.*,
	|	ЗаказПокупателя.*,
	|	Номенклатура.*,
	|	ХарактеристикаНоменклатуры.*,
	|	Цена.*,
	|	ЕдиницаИзмерения.*,
	|	СтатусПартии
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}";

	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента.Владелец", "ДоговорКонтрагентаВладелец", "Контрагент",                  ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПокупателейОстаткиИОбороты.ДоговорКонтрагента",          "ДоговорКонтрагента",         "Договор контрагента",         ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПокупателейОстаткиИОбороты.Номенклатура",                "Номенклатура",               "Номенклатура",                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПокупателейОстаткиИОбороты.ХарактеристикаНоменклатуры",  "ХарактеристикаНоменклатуры", "Характеристика номенклатуры", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя",             "ЗаказПокупателя",            "Заказ покупателя",            ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ЗаказыПокупателейОстаткиИОбороты.ЗаказПокупателя",             "ЗаказПокупателя",            "Заказ покупателя",            ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);

		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагентаВладелец", "Контрагент");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказПокупателя", "Заказ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Номенклатура", "Номенклатура");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатусПартии", "Статус партии");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Цена", "Цена");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЕдиницаИзмерения", "Единица измерения");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СостояниеОтгрузки", "Состояние отгрузки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СостояниеОплаты", "Состояние оплаты");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаЗаказа", "Запланировано оплатить");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОплатить", "Осталось оплатить");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузитьСуммаВзаиморасчетов", "Осталось отгрузить (сумма в валюте взаиморасчетов)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузитьСуммаУпр", "Осталось отгрузить (сумма в валюте упр. учета)");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Запланировано",      "Запланировано отгрузить (в ед. хранения)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузить",  "Осталось отгрузить (в ед. хранения)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СоСклада",           "Отгрузить со склада (в ед. хранения)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Заказано",           "Размещено в заказах (в ед. хранения)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОбеспечить", "Осталось обеспечить (в ед. хранения)");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗапланированоБазовыхЕд",      "Запланировано отгрузить (в базовых ед.)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузитьБазовыхЕд",  "Осталось отгрузить (в базовых ед.)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СоСкладаБазовыхЕд",           "Отгрузить со склада (в базовых ед.)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказаноБазовыхЕд",           "Размещено в заказах (в базовых ед.)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОбеспечитьБазовыхЕд", "Осталось обеспечить (в базовых ед.)");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗапланированоЕдиницОтчетов",      "Запланировано отгрузить (в ед. отчетов)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОтгрузитьЕдиницОтчетов",  "Осталось отгрузить (в ед. отчетов)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СоСкладаЕдиницОтчетов",           "Отгрузить со склада (в ед. отчетов)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЗаказаноЕдиницОтчетов",           "Размещено в заказах (в ед. отчетов)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОсталосьОбеспечитьЕдиницОтчетов", "Осталось обеспечить (в ед. отчетов)");
	
	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",        "Запланировано",     Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОплатить",   "Осталось оплатить", Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	УниверсальныйОтчет.ДобавитьПоказатель("Предоплата",         "Предоплата",        Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьСуммаУпр",			 "Осталось отгрузить "+Символы.ПС+ "(в валюте упр. учета)",	   Ложь, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьСуммаВзаиморасчетов","Осталось отгрузить "+Символы.ПС+ "(в валюте взаиморасчетов)",Ложь, "ЧЦ=15; ЧДЦ=2");
	
	УниверсальныйОтчет.ДобавитьПоказатель("Запланировано",      "Запланировано",       Истина, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузить",  "Осталось отгрузить",  Истина, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	УниверсальныйОтчет.ДобавитьПоказатель("СоСклада",           "Со склада",           Истина, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	УниверсальныйОтчет.ДобавитьПоказатель("Заказано",           "Размещено в заказах", Истина, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОбеспечить", "Осталось обеспечить", Истина, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	
	УниверсальныйОтчет.ДобавитьПоказатель("ЗапланированоБазовыхЕд",      "Запланировано",       Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Отгрузка (в базовых ед.)");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьБазовыхЕд",  "Осталось отгрузить",  Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Отгрузка (в базовых ед.)");
	УниверсальныйОтчет.ДобавитьПоказатель("СоСкладаБазовыхЕд",           "Со склада",           Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Отгрузка (в базовых ед.)");
	УниверсальныйОтчет.ДобавитьПоказатель("ЗаказаноБазовыхЕд",           "Размещено в заказах", Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Отгрузка (в базовых ед.)");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОбеспечитьБазовыхЕд", "Осталось обеспечить", Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаБазовыхЕд", "Отгрузка (в базовых ед.)");
	
	УниверсальныйОтчет.ДобавитьПоказатель("ЗапланированоЕдиницОтчетов",      "Запланировано",        Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Отгрузка (в ед. отчетов)");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьЕдиницОтчетов",  "Осталось отгрузить",   Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Отгрузка (в ед. отчетов)");
	УниверсальныйОтчет.ДобавитьПоказатель("СоСкладаЕдиницОтчетов",           "Со склада",            Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Отгрузка (в ед. отчетов)");
	УниверсальныйОтчет.ДобавитьПоказатель("ЗаказаноЕдиницОтчетов",           "Размещено в заказах",  Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Отгрузка (в ед. отчетов)");
	УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОбеспечитьЕдиницОтчетов", "Осталось обеспечить",  Ложь, "ЧЦ=15; ЧДЦ=3", "ОтгрузкаЕдиницОтчетов", "Отгрузка (в ед. отчетов)");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагентаВладелец");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПокупателя");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагентаВладелец");
	УниверсальныйОтчет.ДобавитьОтбор("ЗаказПокупателя");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Ложь;
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Ложь;
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СостояниеОтгрузки", "ЗаказПокупателя");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СостояниеОплаты", "ЗаказПокупателя");	
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Истина;
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Истина;
	
	ОтборСостояниеОтгрузкиПоЗаказуСписок = Новый СписокЗначений;
	
	Если НеОтгружено = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Не отгружено");
		
	КонецЕсли;
	
	Если ОтгруженоЧастично = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Отгружено частично");
		
	КонецЕсли;
	
	Если ОтгруженоПолностью = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Отгружено полностью");
		
	КонецЕсли;
	
	ОтборСостояниеОплатыПоЗаказуСписок = Новый СписокЗначений;
		
	Если НеОплачено = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Не оплачено");
		
	КонецЕсли;
	
	Если ОплаченоЧастично = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Оплачено частично");
		
	КонецЕсли;
	
	Если ОплаченоПолностью = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Оплачено полностью");
		
	КонецЕсли;
		
	УниверсальныйОтчет.ДобавитьОтбор("СостояниеОтгрузки", СостояниеОтгрузкиПоЗаказу, ВидСравнения.ВСписке, ОтборСостояниеОтгрузкиПоЗаказуСписок);
	УниверсальныйОтчет.ДобавитьОтбор("СостояниеОплаты", СостояниеОплатыПоЗаказу, ВидСравнения.ВСписке, ОтборСостояниеОплатыПоЗаказуСписок);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	
	УниверсальныйОтчет.ПостроительОтчета.Отбор.Удалить(УниверсальныйОтчет.ПостроительОтчета.Отбор.Индекс(УниверсальныйОтчет.ПостроительОтчета.Отбор["СостояниеОтгрузки"]));
	УниверсальныйОтчет.ПостроительОтчета.Отбор.Удалить(УниверсальныйОтчет.ПостроительОтчета.Отбор.Индекс(УниверсальныйОтчет.ПостроительОтчета.Отбор["СостояниеОплаты"]));
	
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Ложь;
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Ложь;

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

Процедура ПоказатьЗаказПоставщику(ЗаказПоставщику, Форма)
	
	ФормаЗаказа = ЗаказПоставщику.ПолучитьФорму("ФормаДокумента", Форма);
	ФормаЗаказа.Открыть();
	
	СтруктураВозвращаемыхЗначений = Новый Структура();
	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьЦеныПоТипу", Истина);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйТипЦен", ЗаказПоставщику.ТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ПересчитатьЦеныПоВалюте", Истина);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйВалютаДокумента", ЗаказПоставщику.ВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсВзаиморасчетов", ЗаказПоставщику.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсДокумента", ЗаказПоставщику.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУчитыватьНДС", ЗаказПоставщику.УчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйСуммаВключаетНДС", ЗаказПоставщику.СуммаВключаетНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьВзаиморасчетов", ЗаказПоставщику.КратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьДокумента", ЗаказПоставщику.КратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийУчитыватьНДС", ЗаказПоставщику.УчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьНаценкиПоУсловиямПродаж", Ложь);
	
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийТипЦен"						, ЗаказПоставщику.ТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаДокумента"				, ЗаказПоставщику.ВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсВзаиморасчетов"			, ЗаказПоставщику.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсДокумента"				, ЗаказПоставщику.КурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийУчитыватьНДС"				, ЗаказПоставщику.УчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийСуммаВключаетНДС"			, ЗаказПоставщику.СуммаВключаетНДС);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьВзаиморасчетов"		, ЗаказПоставщику.КратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьДокумента"			, ЗаказПоставщику.КратностьВзаиморасчетов);
	
	СтруктураРеквизитовДокумента = Новый Структура();
	СтруктураРеквизитовДокумента.Вставить("ТипЦен");
	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента"); 
	СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов"); 
	СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов"); 
	СтруктураРеквизитовДокумента.Вставить("УчитыватьНДС"); 
	СтруктураРеквизитовДокумента.Вставить("СуммаВключаетНДС"); 

	ЗаполнениеДокументов.ИзменитьЦеныВалюту(ФормаЗаказа.ЭтотОбъект, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, СтруктураРеквизитовДокумента,, "Товары", мВалютаРегламентированногоУчета, , СтруктураВозвращаемыхЗначений);
	
	СтруктураРеквизитовДокумента = Новый Структура();
	СтруктураРеквизитовДокумента.Вставить("ТипЦен");
	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента"); 
	СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов"); 
	СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов"); 
	ЗаполнениеДокументов.ИзменитьЦеныВалюту(ФормаЗаказа.ЭтотОбъект, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, СтруктураРеквизитовДокумента,, "ВозвратнаяТара", мВалютаРегламентированногоУчета, , СтруктураВозвращаемыхЗначений);
	
КонецПроцедуры // ПоказатьЗаказПоставщику()

Процедура СформироватьЗаказПоставщику(Выборка, Поставщик, ФормаПрогрессора, Форма,флЕстьЗаполненныеЗаказы)

	ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
	ЗаказПоставщику.Контрагент = Поставщик;
	
	ВыборкаНоменклатуры = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
	
	ФормаПрогрессора.МаксимальноеЗначение = ВыборкаНоменклатуры.Количество();
	ФормаПрогрессора.Значение = 0;
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
		
		Если ВыборкаНоменклатуры.ОсталосьОбеспечить <= 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаНоменклатуры.Номенклатура) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВыборкаНоменклатуры.Номенклатура.Услуга ИЛИ ВыборкаНоменклатуры.Номенклатура.Комплект Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаХарактеристикаНоменклатуры = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ХарактеристикаНоменклатуры");
		
		Пока ВыборкаХарактеристикаНоменклатуры.Следующий() Цикл
			
			Если ВыборкаХарактеристикаНоменклатуры.ОсталосьОбеспечить <= 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВыборкаСтатусПартии = ВыборкаХарактеристикаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатусПартии");
			
			Пока ВыборкаСтатусПартии.Следующий() Цикл
				
				Если ВыборкаСтатусПартии.ОсталосьОбеспечить <= 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаСтатусПартии.СтатусПартии) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ВыборкаСтатусПартии.СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
					
					ТЧДокумента = ЗаказПоставщику.Товары;
					
				Иначе
					
					ТЧДокумента = ЗаказПоставщику.ВозвратнаяТара;
					
				КонецЕсли;
				
				ВыборкаЗаказПокупателя = ВыборкаСтатусПартии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЗаказПокупателя");
				
				Пока ВыборкаЗаказПокупателя.Следующий() Цикл
					
					Если ВыборкаЗаказПокупателя.ОсталосьОбеспечить <= 0 Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					НоваяСтрока = ТЧДокумента.Добавить();
					НоваяСтрока.Номенклатура = ВыборкаЗаказПокупателя.Номенклатура;
					
					Если ВыборкаСтатусПартии.СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
						
						НоваяСтрока.СтавкаНДС = ВыборкаЗаказПокупателя.Номенклатура.СтавкаНДС;
						НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаЗаказПокупателя.ХарактеристикаНоменклатуры;
						НоваяСтрока.ЕдиницаИзмерения = ВыборкаЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков;
						НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаЗаказПокупателя.ЗаказПокупателя) Тогда
						
						НоваяСтрока.Заказ = ВыборкаЗаказПокупателя.ЗаказПокупателя;
						
					КонецЕсли;
					
					НоваяСтрока.Количество = ВыборкаЗаказПокупателя.ОсталосьОбеспечить;
					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ЗаказПоставщику);
					
				КонецЦикла; 
				
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЦикла; 
	
	Если НЕ (ЗаказПоставщику.Товары.Количество() = 0 И ЗаказПоставщику.ВозвратнаяТара.Количество() = 0 И ЗаказПоставщику.Услуги.Количество() = 0) Тогда
		флЕстьЗаполненныеЗаказы = истина;
		ПоказатьЗаказПоставщику(ЗаказПоставщику, Форма);
		ФормаПрогрессора.Активизировать();
		
	КонецЕсли;

КонецПроцедуры // СформироватьЗаказПоставщику()

Процедура ЗаказПоставщику(ПоОсновномуПоставщику = Ложь, Форма) Экспорт
	
	СохраненныеНастройки = УниверсальныйОтчет.ПостроительОтчета.ПолучитьНастройки();
	
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.Порядок.Очистить();
	
	Если ПоОсновномуПоставщику Тогда
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура.ОсновнойПоставщик",, ТипИзмеренияПостроителяОтчета.Элементы);
		
	КонецЕсли;
	
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура",, ТипИзмеренияПостроителяОтчета.Элементы);
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("ХарактеристикаНоменклатуры",, ТипИзмеренияПостроителяОтчета.Элементы);
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("СтатусПартии",, ТипИзмеренияПостроителяОтчета.Элементы);
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("ЗаказПокупателя",, ТипИзмеренияПостроителяОтчета.Элементы);
	
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Истина;
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Истина;

	ОтборСостояниеОтгрузкиПоЗаказуСписок = Новый СписокЗначений;
	
	Если НеОтгружено = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Не отгружено");
		
	КонецЕсли;
	
	Если ОтгруженоЧастично = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Отгружено частично");
		
	КонецЕсли;
	
	Если ОтгруженоПолностью = Истина Тогда
		
		ОтборСостояниеОтгрузкиПоЗаказуСписок.Добавить("Отгружено полностью");
		
	КонецЕсли;
	
	ОтборСостояниеОплатыПоЗаказуСписок = Новый СписокЗначений;
		
	Если НеОплачено = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Не оплачено");
		
	КонецЕсли;
	
	Если ОплаченоЧастично = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Оплачено частично");
		
	КонецЕсли;
	
	Если ОплаченоПолностью = Истина Тогда
		
		ОтборСостояниеОплатыПоЗаказуСписок.Добавить("Оплачено полностью");
		
	КонецЕсли;
	
	ЭлементОтбора = УниверсальныйОтчет.ПостроительОтчета.Отбор.Добавить("СостояниеОтгрузки");
	ЭлементОтбора.Использование = СостояниеОтгрузкиПоЗаказу;
	ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
	ЭлементОтбора.Значение = ОтборСостояниеОтгрузкиПоЗаказуСписок;
	
	ЭлементОтбора = УниверсальныйОтчет.ПостроительОтчета.Отбор.Добавить("СостояниеОплаты");
	ЭлементОтбора.Использование = СостояниеОплатыПоЗаказу;
	ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
	ЭлементОтбора.Значение = ОтборСостояниеОплатыПоЗаказуСписок;
	
	УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить("ОсталосьОбеспечить");
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНач", ?(УниверсальныйОтчет.ДатаНач = Дата('00010101000000'), УниверсальныйОтчет.ДатаНач, Новый Граница(НачалоДня(УниверсальныйОтчет.ДатаНач), ВидГраницы.Включая)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКон", ?(УниверсальныйОтчет.ДатаКон = Дата('00010101000000'), УниверсальныйОтчет.ДатаКон, Новый Граница(КонецДня(УниверсальныйОтчет.ДатаКон), ВидГраницы.Включая)));
	
	
	РезультатЗапроса = УниверсальныйОтчет.ПостроительОтчета.ПолучитьЗапрос().Выполнить();
	
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОтгрузки.Отбор = Ложь;
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.СостояниеОплаты.Отбор = Ложь;
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаПрогрессора.Открыть();
	
	Если ПоОсновномуПоставщику Тогда
		
		КоличествоОбработанныхПоставщиков = 0;
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Формируются заказы поставщикам";
		ВыборкаПоставщиков = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатураОсновнойПоставщик");
		флЕстьЗаполненныеЗаказы = ложь;

		Пока ВыборкаПоставщиков.Следующий() Цикл
			
			КоличествоОбработанныхПоставщиков = КоличествоОбработанныхПоставщиков + 1;
			ФормаПрогрессора.КомментарийЗначения = "Обработывается " + КоличествоОбработанныхПоставщиков + " поставщик из " + ВыборкаПоставщиков.Количество() + "";
			СформироватьЗаказПоставщику(ВыборкаПоставщиков, ВыборкаПоставщиков.НоменклатураОсновнойПоставщик, ФормаПрогрессора, Форма,флЕстьЗаполненныеЗаказы);
			
		КонецЦикла;
		
	Иначе
		флЕстьЗаполненныеЗаказы = ложь;
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Формируется заказ поставщику";
		СформироватьЗаказПоставщику(РезультатЗапроса, Справочники.Контрагенты.ПустаяСсылка(), ФормаПрогрессора, Форма,флЕстьЗаполненныеЗаказы);
		
	КонецЕсли; 
	Если не флЕстьЗаполненныеЗаказы Тогда
		Сообщить("Данных для добавления в заказ поставщику не обнаружено", СтатусСообщения.Информация);
	КонецЕсли;

	ФормаПрогрессора.Закрыть();
	
	УниверсальныйОтчет.ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки);
	
КонецПроцедуры // ЗаказПоставщику()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

#КонецЕсли
