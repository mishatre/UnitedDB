#Если Клиент Тогда

// СписокЗначений, имена обязательных отборов
Перем мСписокОтборов Экспорт;

// Число, количество строк выведенных в заголовке отчета
Перем мКоличествоВыведенныхСтрокЗаголовка;

// Настройка периода
Перем НП Экспорт;

// Функция формирует отбор по документу условий для таблиц с договором контрагента.
//
// Параметры
//  ИмяПоляТаблицы - Строка, имя поля таблицы запроса
//  Запрос - Запрос
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПроизводныйОтборОтДокументаУсловий(ИмяПоляТаблицы, Запрос)

	СтрокаВозврата = "";
	
	Для каждого ЭлементОтбора Из Отбор Цикл
	
		Если ЭлементОтбора.ПутьКДанным <> "ДокументУсловий" ИЛИ НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		ОтборПоДокументуУсловий = ЭлементОтбора;
		
		Если ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.Равно Тогда
			Запрос.УстановитьПараметр("ЗначениеОтбораДоговорДокументаУсловий", ОтборПоДокументуУсловий.Значение.ДоговорКонтрагента);
			СтрокаВозврата = СтрокаВозврата + "
			|И
			|" + УправлениеОтчетами.ПолучитьСтрокуОтбора(ВидСравнения.Равно, "&ЗначениеОтбораДоговорДокументаУсловий", ИмяПоляТаблицы) + "
			|";
		ИначеЕсли ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.НеРавно Тогда
			Запрос.УстановитьПараметр("ЗначениеОтбораДоговорДокументаУсловий", ОтборПоДокументуУсловий.Значение.ДоговорКонтрагента);
			СтрокаВозврата = СтрокаВозврата + "
			|И
			|" + УправлениеОтчетами.ПолучитьСтрокуОтбора(ВидСравнения.НеРавно, "&ЗначениеОтбораДоговорДокументаУсловий", ИмяПоляТаблицы) + "
			|";
		ИначеЕсли ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.ВСписке
			  ИЛИ ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
			  ИЛИ ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.ВИерархии Тогда
			СписокОтбора = Новый СписокЗначений;
			Если ТипЗнч(ОтборПоДокументуУсловий.Значение) = Тип("СписокЗначений") Тогда
				Для каждого ЭлементСписка Из ОтборПоДокументуУсловий.Значение Цикл
					СписокОтбора.Добавить(ЭлементСписка.Значение.ДоговорКонтрагента);
				КонецЦикла; 
			Иначе
				СписокОтбора.Добавить(ОтборПоДокументуУсловий.Значение.ДоговорКонтрагента);
			КонецЕсли;
			Запрос.УстановитьПараметр("ЗначениеОтбораДоговорДокументаУсловий", СписокОтбора);
			СтрокаВозврата = СтрокаВозврата + "
			|И
			|" + УправлениеОтчетами.ПолучитьСтрокуОтбора(ВидСравнения.ВСписке, "&ЗначениеОтбораДоговорДокументаУсловий", ИмяПоляТаблицы) + "
			|";
		ИначеЕсли НЕ (ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.ВСписке
			  ИЛИ ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
			  ИЛИ ОтборПоДокументуУсловий.ВидСравнения = ВидСравнения.ВИерархии) Тогда
			СписокОтбора = Новый СписокЗначений;
			Если ТипЗнч(ОтборПоДокументуУсловий.Значение) = Тип("СписокЗначений") Тогда
				Для каждого ЭлементСписка Из ОтборПоДокументуУсловий.Значение Цикл
					СписокОтбора.Добавить(ЭлементСписка.Значение.ДоговорКонтрагента);
				КонецЦикла; 
			Иначе
				СписокОтбора.Добавить(ОтборПоДокументуУсловий.Значение.ДоговорКонтрагента);
			КонецЕсли;
			Запрос.УстановитьПараметр("ЗначениеОтбораДоговорДокументаУсловий", СписокОтбора);
			СтрокаВозврата = СтрокаВозврата + "
			|И
			|" + УправлениеОтчетами.ПолучитьСтрокуОтбора(ВидСравнения.НеВСписке, "&ЗначениеОтбораДоговорДокументаУсловий", ИмяПоляТаблицы) + "
			|";
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат СтрокаВозврата;

КонецФункции

// Функция формирует струку для запроса отбора по датам.
//
// Параметры
//  ИмяПоляТаблицы - Строка, имя поля таблицы запроса, для установки отбора
//  Запрос - Запрос
//
// Возвращаемое значение:
//   Строка
//
Функция ОтборПоДатам(ИмяПоляТаблицы, Запрос)

	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат "ИСТИНА = ИСТИНА";
	ИначеЕсли Не ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
		Возврат ("" + ИмяПоляТаблицы + " <= &ДатаОкончания");
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
		Возврат ("" + ИмяПоляТаблицы + " >= &ДатаНачала");
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
		Запрос.УстановитьПараметр("ДатаНачала"   , НачалоДня(ДатаНачала));
		Возврат ("" + ИмяПоляТаблицы + " >= &ДатаНачала И " + ИмяПоляТаблицы + " <= &ДатаОкончания");
	КонецЕсли; 
	
КонецФункции // ОтборПоДатам()

// Функция формирует строку отборов для запроса
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция СформироватьОтборы(СтруктураОтборов, Запрос, УказыватьПервоеИ = Истина)
	
	СтрокаВозврата = "";
	
	Для каждого ЭлементСтруктуры Из СтруктураОтборов Цикл
		
		Для каждого ЭлементОтбора Из Отбор Цикл
		
			Если ЭлементОтбора.ПутьКДанным <> ЭлементСтруктуры.Ключ ИЛИ НЕ ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли; 
		
			НайденныйОтбор = ЭлементОтбора;
			
			Если ПустаяСтрока(СтрокаВозврата) Тогда
				Если УказыватьПервоеИ Тогда
					СтрокаВозврата = СтрокаВозврата + "
					|И
					|";
				КонецЕсли; 
			Иначе
				СтрокаВозврата = СтрокаВозврата + "
				|И
				|";
			КонецЕсли; 
			
			СтрокаВозврата = СтрокаВозврата + "
			|" + УправлениеОтчетами.ПолучитьСтрокуОтбора(НайденныйОтбор.ВидСравнения, ("&ЗначениеОтбора" + ЭлементСтруктуры.Ключ), ЭлементСтруктуры.Значение, ("&ЗначениеОтбора" + ЭлементСтруктуры.Ключ + "С"), ("&ЗначениеОтбора" + ЭлементСтруктуры.Ключ + "По"), НайденныйОтбор.Значение, НайденныйОтбор.ЗначениеС, НайденныйОтбор.ЗначениеПо) + "
			|";
			
			Запрос.УстановитьПараметр(("ЗначениеОтбора" + ЭлементСтруктуры.Ключ), НайденныйОтбор.Значение);
			Запрос.УстановитьПараметр(("ЗначениеОтбора" + ЭлементСтруктуры.Ключ + "С"), НайденныйОтбор.ЗначениеС);
			Запрос.УстановитьПараметр(("ЗначениеОтбора" + ЭлементСтруктуры.Ключ + "По"), НайденныйОтбор.ЗначениеПо);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат СтрокаВозврата;

КонецФункции

// Процедура меняет видимость заголовка поля табличного документа
// 
// Параметры
//  Таб - табличный документ
//
// Возвращаемые значения
//  НЕТ
Процедура ИзменитьВидимостьЗаголовка(Таб) Экспорт

	ОбластьВидимости = Таб.Область(1,,мКоличествоВыведенныхСтрокЗаголовка,);
	ОбластьВидимости.Видимость = ПоказыватьЗаголовок;

КонецПроцедуры

// Функция формирует строку представления периода отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений - список имен группировок
//
Функция СформироватьСтрокуПериода()

	ОписаниеПериода = "";
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНачала = '00010101000000' И ДатаОкончания = '00010101000000' Тогда
		ОписаниеПериода     = ОписаниеПериода + "Период анализа не установлен";
	Иначе
		Если ДатаНачала = '00010101000000' ИЛИ ДатаОкончания = '00010101000000' Тогда
			ОписаниеПериода = ОписаниеПериода + "Период анализа: " + Формат(ДатаНачала, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаОкончания, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		Иначе
			Если ДатаНачала <= ДатаОкончания Тогда
				ОписаниеПериода = ОписаниеПериода + "Период анализа: " + ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаОкончания), "ФП = Истина");
			Иначе
				ОписаниеПериода = ОписаниеПериода + "Неправильно задан период анализа!"
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ОписаниеПериода;
	
КонецФункции

// Процедура передает построителю отчета запрос
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Функция СобратьТекстЗапросаУсловий(ЗапросУсловий)

	ОтборПоНоменклатуре = Ложь;
	ОтборКонтрагент     = Ложь;
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если (ЭлементОтбора.ПутьКДанным = "Номенклатура" ИЛИ ЭлементОтбора.ПутьКДанным = "ХарактеристикаНоменклатуры") И ЭлементОтбора.Использование Тогда
			ОтборПоНоменклатуре = Истина;
		КонецЕсли; 
		Если ЭлементОтбора.ПутьКДанным = "Контрагент" И ЭлементОтбора.Использование Тогда
			ОтборКонтрагент = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	// Группировки левой таблицы
	
	СписокГруппировок = Новый СписокЗначений;
	
	СтрокаГруппировок = "";
	Если ГруппировкаОсновнойМенеджерПокупателя Тогда
		СтрокаГруппировок = Символы.ПС + СтрокаГруппировок + "ОсновнойМенеджерПокупателя" + ", ";
		СписокГруппировок.Добавить("ОсновнойМенеджерПокупателя", "Основной менеджер покупателя");
	КонецЕсли; 
	Если ГруппировкаКонтрагент Тогда
		СтрокаГруппировок = Символы.ПС + СтрокаГруппировок + "Контрагент" + ", ";
		СписокГруппировок.Добавить("Контрагент", "Контрагент");
	КонецЕсли; 
	Если ГруппировкаДоговорКонтрагента Тогда
		СтрокаГруппировок = Символы.ПС + СтрокаГруппировок + "ДоговорКонтрагента" + ", ";
		СписокГруппировок.Добавить("ДоговорКонтрагента", "Договор контрагента");
	КонецЕсли; 
	Если ГруппировкаДокументУсловий Тогда
		СтрокаГруппировок = Символы.ПС + СтрокаГруппировок + "ДокументУсловий" + ", ";
		СписокГруппировок.Добавить("ДокументУсловий", "Документ условий");
	КонецЕсли; 
	Если ГруппировкаНоменклатураУсловий Тогда
		СписокГруппировок.Добавить("НоменклатураУсловий", "Номенклатура");
	КонецЕсли; 
	Если ГруппировкаДокументВыполненияУсловий Тогда
		СписокГруппировок.Добавить("ДокументВыполненияУсловий", "Документ выполнения условий");
	КонецЕсли; 
	
	СтрокаГруппировок = Сред(СтрокаГруппировок, 1, (СтрДлина(СтрокаГруппировок) - 2));
	
	// Соберем данные по условиям выполнения договоров взаиморасчетов, левая таблица
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента                      КАК ДоговорКонтрагента,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента.Владелец             КАК Контрагент,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Период                                  КАК Период,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.СуммаВзаиморасчетов                     КАК СуммаВзаиморасчетов,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Периодичность                           КАК Периодичность,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор                             КАК ДокументУсловий,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.ДатаОкончания                           КАК ДатаОкончания,
	|	ВЫРАЗИТЬ(УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор КАК Документ.УсловияПоставокПоДоговорамКонтрагентов).НоменклатураДоговора КАК НоменклатураУсловий,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщие.СуммаУпрУчета                           КАК СуммаУпрУчета,
	|	ИСТИНА                                                                              КАК ДетальнаяЗапись
	|
	|ИЗ
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовОбщие КАК УсловияПоставокПоДоговорамКонтрагентовОбщие
	|";
	
	Если ОтборПоНоменклатуре Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		*,
		|		НоменклатураДоговораТЧ.Ссылка КАК ДокументУсловияПоставокПоДоговорамКонтрагентов
		|	ИЗ
		|		Документ.УсловияПоставокПоДоговорамКонтрагентов.НоменклатураДоговора КАК НоменклатураДоговораТЧ
		|	ГДЕ
		|		" + СформироватьОтборы(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", "НоменклатураДоговораТЧ.Номенклатура", "НоменклатураДоговораТЧ.ХарактеристикаНоменклатуры"), ЗапросУсловий, Ложь) + "
		|	) КАК УсловияПоставокПоДоговорамКонтрагентов
		|
		|ПО
		|	УсловияПоставокПоДоговорамКонтрагентов.ДокументУсловияПоставокПоДоговорамКонтрагентов = УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор
		|
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|" + ОтборПоДатам("УсловияПоставокПоДоговорамКонтрагентовОбщие.Период", ЗапросУсловий) + "
	|" + СформироватьОтборы(Новый Структура("Контрагент, ДоговорКонтрагента, ДокументУсловий", "УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента.Владелец", "УсловияПоставокПоДоговорамКонтрагентовОбщие.ДоговорКонтрагента", "УсловияПоставокПоДоговорамКонтрагентовОбщие.Регистратор"), ЗапросУсловий) + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.ДоговорКонтрагента                      КАК ДоговорКонтрагента,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.ДоговорКонтрагента.Владелец             КАК Контрагент,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджерПокупателя,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.Период                                  КАК Период,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.СуммаВзаиморасчетов                     КАК СуммаВзаиморасчетов,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.Периодичность                           КАК Периодичность,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.Регистратор                             КАК ДокументУсловий,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.ДатаОкончания                           КАК ДатаОкончания,
	|	ВЫРАЗИТЬ(УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.Регистратор КАК Документ.УсловияПоставокПоДоговорамКонтрагентов).НоменклатураДоговора        КАК НоменклатураУсловий,
	|	УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.СуммаУпрУчета                           КАК СуммаУпрУчета,
	|	ИСТИНА                                                                                           КАК ДетальнаяЗапись
	|
	|ИЗ
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовОбщие.СрезПоследних(&ДатаНачала, " + СформироватьОтборы(Новый Структура("ДоговорКонтрагента, ДокументУсловий", "ДоговорКонтрагента", "Регистратор"), ЗапросУсловий, Ложь) + ") КАК УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних
	|";
	
	Если ОтборПоНоменклатуре Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		*,
		|		НоменклатураДоговораТЧ.Ссылка КАК ДокументУсловияПоставокПоДоговорамКонтрагентов
		|	ИЗ
		|		Документ.УсловияПоставокПоДоговорамКонтрагентов.НоменклатураДоговора КАК НоменклатураДоговораТЧ
		|	ГДЕ
		|		" + СформироватьОтборы(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", "НоменклатураДоговораТЧ.Номенклатура", "НоменклатураДоговораТЧ.ХарактеристикаНоменклатуры"), ЗапросУсловий, Ложь) + "
		|	) КАК УсловияПоставокПоДоговорамКонтрагентов
		|
		|ПО
		|	УсловияПоставокПоДоговорамКонтрагентов.ДокументУсловияПоставокПоДоговорамКонтрагентов = УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.Регистратор
		|
		|";
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|" + СформироватьОтборы(Новый Структура("Контрагент", "УсловияПоставокПоДоговорамКонтрагентовОбщиеСрезПоследних.ДоговорКонтрагента.Владелец"), ЗапросУсловий, Ложь) + "
		|";
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИТОГИ ПО
	|	" + СтрокаГруппировок + "
	|";

	ЗапросУсловий.Текст = ТекстЗапроса;
	
	Возврат СписокГруппировок;
	
КонецФункции

// Процедура переформировывает строки дерева под структуру отчета
//
// Параметры
//  СтрокаРодитель                                          - СтрокаДереваЗначений
//  ИндексСтроки                                            - Число, индекс текущей строки дерева значений
//  СписокГруппировок                                       - СписокЗначений, с именами группировок отчета
//  ТаблицаЗапроса                                          - ТаблицаЗначений, данные основного запроса с условиями договоров
//  ТаблицаЗапросаВыполненияУсловий                         - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров
//  ТаблицаЗапросаВыполненияУсловийНоменклатуры             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре
//  ТаблицаЗапросаВыполненияУсловийБезДокумента             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров без детализации по документам поставки товаров
//  ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре, без детализации по документам поставки товаров
//
// Возвращаемое значение
//  НЕТ
//
Процедура ПеределатьСтрокиДерева(СтрокаРодитель, ИндексСтроки, СписокГруппировок, ТаблицаЗапроса, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента)

	Если ИндексСтроки > СписокГруппировок.Количество() - 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппировки = СписокГруппировок[ИндексСтроки].Значение;
	
	Если ИмяГруппировки = "НоменклатураУсловий" Тогда
		ЗаполнитьНоменклатуруУсловийДоговораВзаиморасчетов(СтрокаРодитель, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
	ИначеЕсли ИмяГруппировки = "ДокументВыполненияУсловий" Тогда
		ЗаполнитьДокументыВыполненияУсловий(СтрокаРодитель, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, Истина);
	Иначе
		Для каждого СтрокаДерева Из СтрокаРодитель.Строки Цикл
			
			СтрокаДерева.ЗначениеГруппировки = СтрокаДерева[ИмяГруппировки];
			
			Если (ИмяГруппировки = "ДоговорКонтрагента" И СписокГруппировок.НайтиПоЗначению("ДокументУсловий") = Неопределено) ИЛИ (ИмяГруппировки = "ДокументУсловий") Тогда
				ЗаполнитьПериодыДоговораВзаиморасчетов(СтрокаДерева, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
			Иначе
				ПеределатьСтрокиДерева(СтрокаДерева, ИндексСтроки + 1, СписокГруппировок, ТаблицаЗапроса, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
				Если ТипЗнч(СтрокаРодитель) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаРодитель.СуммаОбязательств = СтрокаРодитель.СуммаОбязательств + СтрокаДерева.СуммаОбязательств;
					СтрокаРодитель.СуммаВыполнения = СтрокаРодитель.СуммаВыполнения + СтрокаДерева.СуммаВыполнения;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура дополняет дерево данными о выполнении условий по договорам взаиморасчетов
//
// Параметры
//  СтрокаДерева                                            - СтрокаДереваЗначений
//  ТаблицаЗапроса                                          - ТаблицаЗначений, данные основного запроса с условиями договоров
//  ИндексСтроки                                            - Число, индекс текущей строки дерева значений
//  СписокГруппировок                                       - СписокЗначений, с именами группировок отчета
//  ТаблицаЗапросаВыполненияУсловий                         - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров
//  ТаблицаЗапросаВыполненияУсловийНоменклатуры             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре
//  ТаблицаЗапросаВыполненияУсловийБезДокумента             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров без детализации по документам поставки товаров
//  ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре, без детализации по документам поставки товаров
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьДокументыВыполненияУсловий(СтрокаДерева, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, Знач ТаблицаДатВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ФлагВыводитьСтроки)

	Если ТипЗнч(СтрокаДерева.ЗначениеГруппировки) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТекущейДаты = СтрокаДерева.Родитель;
	Иначе
		СтрокаТекущейДаты = СтрокаДерева;
	КонецЕсли;
	
	ДоговорДерева = Неопределено;
	РодительСтрокСДатами = Неопределено;
	СтрокаАнализа = СтрокаДерева;
	Пока Истина Цикл
		
		Если СтрокаАнализа = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		
		Если ТипЗнч(СтрокаАнализа.ЗначениеГруппировки) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И ДоговорДерева = Неопределено Тогда
			ДоговорДерева = СтрокаАнализа.ЗначениеГруппировки;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаАнализа.ЗначениеГруппировки) = Тип("Строка") И РодительСтрокСДатами = Неопределено Тогда
			РодительСтрокСДатами = СтрокаАнализа.Родитель;
		КонецЕсли; 
		
		СтрокаАнализа = СтрокаАнализа.Родитель;
	
	КонецЦикла;
	
	Если ДоговорДерева = Неопределено ИЛИ РодительСтрокСДатами = Неопределено Тогда
		Сообщить("Ошибка обработки");
		Возврат;
	КонецЕсли; 
		
	Если ФлагВыводитьСтроки Тогда
	
		Если ТипЗнч(СтрокаДерева.ЗначениеГруппировки) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(СтрокаДерева.ЗначениеГруппировки) Тогда
			СтрокиДоговораВыполнения = ТаблицаДатВыполненияУсловийНоменклатуры.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", ДоговорДерева, СтрокаДерева.ЗначениеГруппировки, СтрокаДерева.ХарактеристикаНоменклатуры));
		Иначе
			ТаблицаДатВыполненияУсловийНоменклатурыТемп = ТаблицаДатВыполненияУсловийНоменклатуры.Скопировать();;
			ТаблицаДатВыполненияУсловийНоменклатурыТемп.Свернуть("ДоговорКонтрагента, ДокументВыполненияОбязательств, ДатаВыполненияОбязательств", "Стоимость");
			СтрокиДоговораВыполнения = ТаблицаДатВыполненияУсловийНоменклатурыТемп.НайтиСтроки(Новый Структура("ДоговорКонтрагента", ДоговорДерева));
		КонецЕсли; 
	
		Для каждого СтрокиДоговораВыполнения Из СтрокиДоговораВыполнения Цикл
		
			Если НЕ (СтрокиДоговораВыполнения.ДатаВыполненияОбязательств >= СтрокаТекущейДаты.ДатаНачалаДоговора И СтрокиДоговораВыполнения.ДатаВыполненияОбязательств <= СтрокаТекущейДаты.ДатаОкончанияДоговора) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДокументаВыполнения = СтрокаДерева.Строки.Добавить();
			СтрокаДокументаВыполнения.ЗначениеГруппировки  = СтрокиДоговораВыполнения.ДокументВыполненияОбязательств;
			Если ТипЗнч(СтрокаДерева.ЗначениеГруппировки) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(СтрокаДерева.ЗначениеГруппировки) Тогда
				СтрокаДокументаВыполнения.КоличествоВыполнения = СтрокиДоговораВыполнения.Количество;
			КонецЕсли;
			СтрокаДокументаВыполнения.СуммаВыполнения = СтрокиДоговораВыполнения.Стоимость;
			
			Если ГруппировкаНоменклатураУсловий Тогда
				СтрокаДерева.СуммаВыполнения = СтрокаДерева.СуммаВыполнения + СтрокиДоговораВыполнения.Стоимость;
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаДатВыполненияУсловий = ТаблицаЗапросаВыполненияУсловийБезДокумента.Скопировать();
		СтрокиДоговора = ТаблицаДатВыполненияУсловий.НайтиСтроки(Новый Структура("ДоговорКонтрагента", ДоговорДерева));
		
		Для каждого СтрокаДоговора Из СтрокиДоговора Цикл
			Если НЕ (СтрокаДоговора.ДатаВыполненияОбязательств >= СтрокаТекущейДаты.ДатаНачалаДоговора И СтрокаДоговора.ДатаВыполненияОбязательств <= СтрокаТекущейДаты.ДатаОкончанияДоговора) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТекущейДаты.СуммаВыполнения = СтрокаТекущейДаты.СуммаВыполнения + СтрокаДоговора.СуммаВзаиморасчетов;
		КонецЦикла;
		Если ТипЗнч(СтрокаДерева.ЗначениеГруппировки) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(СтрокаДерева.ЗначениеГруппировки) Тогда
			РодительСтрокСДатами.СуммаВыполнения = РодительСтрокСДатами.СуммаВыполнения + СтрокаТекущейДаты.СуммаВыполнения;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура дополняет дерево данными о номенклатуре по условиям договоров взаиморасчетов
//
// Параметры
//  СтрокаДерева                                            - СтрокаДереваЗначений
//  ТаблицаЗапроса                                          - ТаблицаЗначений, данные основного запроса с условиями договоров
//  ИндексСтроки                                            - Число, индекс текущей строки дерева значений
//  СписокГруппировок                                       - СписокЗначений, с именами группировок отчета
//  ТаблицаЗапросаВыполненияУсловий                         - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров
//  ТаблицаЗапросаВыполненияУсловийНоменклатуры             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре
//  ТаблицаЗапросаВыполненияУсловийБезДокумента             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров без детализации по документам поставки товаров
//  ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре, без детализации по документам поставки товаров
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьНоменклатуруУсловийДоговораВзаиморасчетов(СтрокаДерева, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента)
	
	ТаблицаНеобходимойНомеклатуры = ТаблицаЗапроса.Скопировать();
	
	ТаблицаНоменклатуры = СтрокаДерева.НоменклатураУсловий;
	
	Если ГруппировкаДокументУсловий Тогда
		Договор = СтрокаДерева.Родитель.Родитель.ЗначениеГруппировки;
	Иначе
		Договор = СтрокаДерева.Родитель.ЗначениеГруппировки;
	КонецЕсли; 
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.ЗначениеГруппировки        = Справочники.Номенклатура.ПустаяСсылка();
		
		ПеределатьСтрокиДерева(НоваяСтрока, ИндексСтроки + 1, СписокГруппировок, ТаблицаЗапроса, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
		
	Иначе
		
		Для каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
			
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.ЗначениеГруппировки        = СтрокаТаблицы.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			НоваяСтрока.КоличествоОбязательств     = СтрокаТаблицы.Количество;
			
			СтрокиВыполненияНоменклатуры = ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента.НайтиСтроки(Новый Структура("ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", Договор, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры));
			Для каждого СтрокаВыполненияНоменклатуры Из СтрокиВыполненияНоменклатуры Цикл
				Если НЕ (СтрокаВыполненияНоменклатуры.ДатаВыполненияОбязательств >= СтрокаДерева.ДатаНачалаДоговора И СтрокаВыполненияНоменклатуры.ДатаВыполненияОбязательств <= СтрокаДерева.ДатаОкончанияДоговора) Тогда
					Продолжить;
				КонецЕсли; 
				НоваяСтрока.КоличествоВыполнения = НоваяСтрока.КоличествоВыполнения + СтрокаВыполненияНоменклатуры.Количество;
			КонецЦикла; 
			
			ПеределатьСтрокиДерева(НоваяСтрока, ИндексСтроки + 1, СписокГруппировок, ТаблицаЗапроса, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
			
		КонецЦикла;
		
	КонецЕсли; 
	

КонецПроцедуры

// Процедура дополняет дерево данными о интервалах времени по договорам взаиморасчетов
//
// Параметры
//  СтрокаДерева                                            - СтрокаДереваЗначений
//  ТаблицаЗапроса                                          - ТаблицаЗначений, данные основного запроса с условиями договоров
//  ИндексСтроки                                            - Число, индекс текущей строки дерева значений
//  СписокГруппировок                                       - СписокЗначений, с именами группировок отчета
//  ТаблицаЗапросаВыполненияУсловий                         - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров
//  ТаблицаЗапросаВыполненияУсловийНоменклатуры             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре
//  ТаблицаЗапросаВыполненияУсловийБезДокумента             - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров без детализации по документам поставки товаров
//  ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента - ТаблицаЗначений, данные вспомогательного запроса по выполнению договоров по номенклатуре, без детализации по документам поставки товаров
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьПериодыДоговораВзаиморасчетов(СтрокаДерева, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента)

	ДоговорКонтрагента = СтрокаДерева.ДоговорКонтрагента;
	
	ТаблицаЗапросаОбщихУсловийДоговора = ТаблицаЗапроса.Скопировать();
	
	Индекс = 0;
	Пока Истина Цикл
		Если Индекс > ТаблицаЗапросаОбщихУсловийДоговора.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаЗапросаОбщихУсловийДоговора[Индекс];
		Если СтрокаТаблицы.ДоговорКонтрагента <> ДоговорКонтрагента ИЛИ СтрокаТаблицы.ДетальнаяЗапись <> Истина Тогда
			ТаблицаЗапросаОбщихУсловийДоговора.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ТаблицаЗапросаОбщихУсловийДоговора.Сортировать("Период ВОЗР");
	
	СтрокаДерева.Строки.Очистить();
	
	ПоследняяДатаОкончания = '00010101000000';
	Для каждого СтрокаТаблицы Из ТаблицаЗапросаОбщихУсловийДоговора Цикл
		Если СтрокаТаблицы.ДатаОкончания = '00010101' Тогда
			СтрокаТаблицы.ДатаОкончания = ?(ДатаОкончания = '00010101000000', КонецДня(ТекущаяДата()), КонецДня(ДатаОкончания));
		КонецЕсли; 
		Если ТаблицаЗапросаОбщихУсловийДоговора.Индекс(СтрокаТаблицы) = 0 Тогда
			ДатаНачальнойГраницы = ДатаНачала;
		КонецЕсли; 
		Если ТаблицаЗапросаОбщихУсловийДоговора.Индекс(СтрокаТаблицы) = ТаблицаЗапросаОбщихУсловийДоговора.Количество() - 1 Тогда
			ДатаКонечнойГраницы = ?(ДатаОкончания = '00010101000000', КонецДня(ТекущаяДата()), КонецДня(ДатаОкончания));
		Иначе
			ДатаКонечнойГраницы = НачалоДня(ТаблицаЗапросаОбщихУсловийДоговора[ТаблицаЗапросаОбщихУсловийДоговора.Индекс(СтрокаТаблицы) + 1].Период);
		КонецЕсли;
		Если ДатаКонечнойГраницы > СтрокаТаблицы.ДатаОкончания Тогда
			ДатаКонечнойГраницы = СтрокаТаблицы.ДатаОкончания;
		КонецЕсли; 
		ДатаНачалаДоговора = НачалоДня(СтрокаТаблицы.Период);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Периодичность) Тогда
			а = 1;
			ДатаОкончанияДоговора = КонецДня(СтрокаТаблицы.ДатаОкончания);
			ЗаписыватьСтроку = Ложь;
			Если ДатаНачалаДоговора >= ДатаНачальнойГраницы Тогда
				Если ТипЗнч(СтрокаДерева.ЗначениеГруппировки) = Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
					Если СтрокаДерева.ЗначениеГруппировки = СтрокаТаблицы.ДокументУсловий Тогда
						ЗаписыватьСтроку = Истина;
					КонецЕсли; 
				Иначе
					ЗаписыватьСтроку = Истина;
				КонецЕсли; 
			КонецЕсли;
			Если ЗаписыватьСтроку Тогда
				
				НоваяСтрока = СтрокаДерева.Строки.Добавить();
				НоваяСтрока.ЗначениеГруппировки = Формат(ДатаНачалаДоговора, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаОкончанияДоговора, "ДФ=dd.MM.yyyy");
				НоваяСтрока.ДатаНачалаДоговора    = ДатаНачалаДоговора;
				НоваяСтрока.ДатаОкончанияДоговора = ДатаОкончанияДоговора;
				НоваяСтрока.ДокументУсловий = СтрокаТаблицы.ДокументУсловий;
				НоваяСтрока.НоменклатураУсловий = СтрокаТаблицы.НоменклатураУсловий;
				НоваяСтрока.СуммаОбязательств = СтрокаТаблицы.СуммаУпрУчета;
				СтрокаДерева.СуммаОбязательств = СтрокаДерева.СуммаОбязательств + СтрокаТаблицы.СуммаУпрУчета;
				
				ЗаполнитьДокументыВыполненияУсловий(НоваяСтрока, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, Ложь);
				
				Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаДерева.СуммаВыполнения = СтрокаДерева.СуммаВыполнения + НоваяСтрока.СуммаВыполнения;
				КонецЕсли;
				
				ПеределатьСтрокиДерева(НоваяСтрока, ИндексСтроки + 1, СписокГруппировок, ТаблицаЗапроса, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
				
			КонецЕсли;
		Иначе
			Пока Истина Цикл
				Если ДатаНачалаДоговора >= ДатаКонечнойГраницы Тогда
					Прервать;
				КонецЕсли; 
				ДатаОкончанияДоговора = ОбщегоНазначения.ПолучитьДатуНачалаПериодаПоДатеОкончанияКоличествуПериодов(ДатаНачалаДоговора, СтрокаТаблицы.Периодичность, -1);
				ЗаписыватьСтроку = Ложь;
				Если ДатаНачалаДоговора >= ДатаНачальнойГраницы Тогда
					Если ТипЗнч(СтрокаДерева.ЗначениеГруппировки) = Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
						Если СтрокаДерева.ЗначениеГруппировки = СтрокаТаблицы.ДокументУсловий Тогда
							ЗаписыватьСтроку = Истина;
						КонецЕсли;
					Иначе
						ЗаписыватьСтроку = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗаписыватьСтроку Тогда
					
					НоваяСтрока = СтрокаДерева.Строки.Добавить();
					НоваяСтрока.ЗначениеГруппировки   = Формат(ДатаНачалаДоговора, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаОкончанияДоговора, "ДФ=dd.MM.yyyy");
					НоваяСтрока.ДатаНачалаДоговора    = ДатаНачалаДоговора;
					НоваяСтрока.ДатаОкончанияДоговора = ДатаОкончанияДоговора;
					НоваяСтрока.ДокументУсловий       = СтрокаТаблицы.ДокументУсловий;
					НоваяСтрока.НоменклатураУсловий   = СтрокаТаблицы.НоменклатураУсловий;
					НоваяСтрока.СуммаОбязательств     = СтрокаТаблицы.СуммаУпрУчета;
					СтрокаДерева.СуммаОбязательств    = СтрокаДерева.СуммаОбязательств + СтрокаТаблицы.СуммаУпрУчета;
					
					ЗаполнитьДокументыВыполненияУсловий(НоваяСтрока, ТаблицаЗапроса, ИндексСтроки, СписокГруппировок, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, Ложь);
					
					Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
						СтрокаДерева.СуммаВыполнения = СтрокаДерева.СуммаВыполнения + НоваяСтрока.СуммаВыполнения;
					КонецЕсли;
					
					ПеределатьСтрокиДерева(НоваяСтрока, ИндексСтроки + 1, СписокГруппировок, ТаблицаЗапроса, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
					
				КонецЕсли;
				ДатаНачалаДоговора = ДатаОкончанияДоговора + 1;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 

	Если ТипЗнч(СтрокаДерева.Родитель) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаДерева.Родитель.СуммаОбязательств = СтрокаДерева.Родитель.СуммаОбязательств + СтрокаДерева.СуммаОбязательств;
		СтрокаДерева.Родитель.СуммаВыполнения = СтрокаДерева.Родитель.СуммаВыполнения + СтрокаДерева.СуммаВыполнения;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет данными поле табличного документа отчета
//
// Параметры
//  Таб - ПолеТабличногоДокумента
//
// Возвращаемое значение
//  НЕТ
//
Процедура СформироватьОтчет(Таб) Экспорт
	
	Таб.Очистить();
	
	ЗапросУсловий = Новый Запрос;
	ЗапросВыполненияУсловий = Новый Запрос;
	
	СписокГруппировок = СобратьТекстЗапросаУсловий(ЗапросУсловий);
	
	ЗапросУсловий.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	ЗапросУсловий.УстановитьПараметр("ДатаОкончания", ?(ДатаОкончания = '00010101000000', ДатаОкончания, КонецДня(ДатаОкончания)));
	ЗапросУсловий.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	Попытка
		РезультатЗапросаУсловий = ЗапросУсловий.Выполнить();
	Исключение
		Сообщить("" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗапросВыполненияУсловий.Текст = "
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииТоваровНаСкладах.ДокументОприходования                                         КАК ДокументВыполненияОбязательств,
	|	ПартииТоваровНаСкладах.Регистратор                                                   КАК ДокументРегистратор,
	|	ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента                      КАК ДоговорКонтрагента,
	|	ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПартииТоваровНаСкладах.Номенклатура                                                  КАК Номенклатура,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры                                    КАК ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.Период                                                        КАК ДатаВыполненияОбязательств,
	|	ВЫБОР КОГДА ПартииТоваровНаСкладах.ВидДвижения = &Приход Тогда 1 ИНАЧЕ -1 КОНЕЦ *
	|	ПартииТоваровНаСкладах.Количество                                                    КАК Количество,
	|	ВЫБОР КОГДА ПартииТоваровНаСкладах.ВидДвижения = &Приход Тогда 1 ИНАЧЕ -1 КОНЕЦ *
	|	ПартииТоваровНаСкладах.Стоимость                                                     КАК Стоимость,
	|	Истина                                                                               КАК ВВалютеВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|
	|ГДЕ
	|" + ОтборПоДатам("ПартииТоваровНаСкладах.Период", ЗапросВыполненияУсловий) + "
	|	И
	|	((ПартииТоваровНаСкладах.ВидДвижения = &Приход) ИЛИ (ПартииТоваровНаСкладах.ВидДвижения = &Расход и ПартииТоваровНаСкладах.КодОперации в (&КодыОперацийВозврат))) 
	|	И
	|	СтатусПартии В(&СтатусыПартий)
	|	И НЕ ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|	" + СформироватьОтборы(Новый Структура("Контрагент, ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", "ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента.Владелец", "ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента", "ПартииТоваровНаСкладах.Номенклатура", "ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры"), ЗапросВыполненияУсловий) + "
	|	" + ПолучитьПроизводныйОтборОтДокументаУсловий("ПартииТоваровНаСкладах.ДокументОприходования.ДоговорКонтрагента", ЗапросВыполненияУсловий) + "
	| 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Продажи.ДокументПродажи,
	|	Продажи.Регистратор,
	|	Продажи.ДоговорКонтрагента,
	|	Продажи.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	Продажи.Номенклатура,
	|	Продажи.ХарактеристикаНоменклатуры,
	|	Продажи.Период,
	|	Продажи.Количество,
	|	Продажи.Стоимость,
	|	Ложь
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|" + ОтборПоДатам("Продажи.Период", ЗапросВыполненияУсловий) + "
	|	И
	|	(Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	ИЛИ
	|	Продажи.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	ИЛИ
	|	Продажи.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
	|	" + СформироватьОтборы(Новый Структура("Контрагент, ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры", "Продажи.Контрагент", "Продажи.ДоговорКонтрагента", "Продажи.Номенклатура", "Продажи.ХарактеристикаНоменклатуры"), ЗапросВыполненияУсловий) + "
	|	" + ПолучитьПроизводныйОтборОтДокументаУсловий("Продажи.ДоговорКонтрагента", ЗапросВыполненияУсловий) + "
	|";
	
	СтатусыПартий = Новый СписокЗначений;
	СтатусыПартий.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
	СтатусыПартий.Добавить(Перечисления.СтатусыПартийТоваров.НаКомиссию);
	ЗапросВыполненияУсловий.УстановитьПараметр("СтатусыПартий", СтатусыПартий);
	ЗапросВыполненияУсловий.УстановитьПараметр("Приход"       , ВидДвиженияНакопления.Приход);
	ЗапросВыполненияУсловий.УстановитьПараметр("Расход"       , ВидДвиженияНакопления.Расход);
	СписКодовОпераций = новый СписокЗначений;
	СписКодовОпераций.Добавить(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику);
	ЗапросВыполненияУсловий.УстановитьПараметр("КодыОперацийВозврат", СписКодовОпераций);
	ЗапросВыполненияУсловий.УстановитьПараметр("ДатаНачала"   , НачалоДня(ДатаНачала));
	ЗапросВыполненияУсловий.УстановитьПараметр("ДатаОкончания", ?(ДатаОкончания = '00010101000000', '00010101000000', КонецДня(ДатаОкончания)));
	ЗапросВыполненияУсловий.УстановитьПараметр("ПустаяДата"   , '00010101000000');

	РезультатЗапросаВыполненияУсловий = ЗапросВыполненияУсловий.Выполнить();

	ТаблицаЗапросаВыполненияУсловий = РезультатЗапросаВыполненияУсловий.Выгрузить();
	ТаблицаЗапросаВыполненияУсловий.Свернуть("ДокументВыполненияОбязательств, ДоговорКонтрагента, ВалютаВзаиморасчетов, ДатаВыполненияОбязательств, ВВалютеВзаиморасчетов", "Стоимость");
	ТаблицаЗапросаВыполненияУсловий.Колонки.Стоимость.Имя = "СуммаВзаиморасчетов";
	
	ТаблицаЗапросаВыполненияУсловий.Свернуть("ДокументВыполненияОбязательств, ДоговорКонтрагента, ДатаВыполненияОбязательств", "СуммаВзаиморасчетов");
	
	ТаблицаЗапросаВыполненияУсловийБезДокумента = ТаблицаЗапросаВыполненияУсловий.Скопировать();
	ТаблицаЗапросаВыполненияУсловийБезДокумента.Свернуть("ДоговорКонтрагента, ДатаВыполненияОбязательств", "СуммаВзаиморасчетов");
	
	
	ТаблицаЗапросаВыполненияУсловийНоменклатуры = РезультатЗапросаВыполненияУсловий.Выгрузить();
	ТаблицаЗапросаВыполненияУсловийНоменклатуры.Свернуть("ДокументВыполненияОбязательств, ДоговорКонтрагента, ВалютаВзаиморасчетов, Номенклатура, ХарактеристикаНоменклатуры, ДатаВыполненияОбязательств", "Количество, Стоимость");
	
	ТаблицаЗапросаВыполненияУсловийНоменклатуры.Свернуть("ДокументВыполненияОбязательств, ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры, ДатаВыполненияОбязательств", "Количество, Стоимость");
	ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента = ТаблицаЗапросаВыполненияУсловийНоменклатуры.Скопировать();
	ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента .Свернуть("ДоговорКонтрагента, Номенклатура, ХарактеристикаНоменклатуры, ДатаВыполненияОбязательств", "Количество, Стоимость");
	
	ДеревоУсловий = РезультатЗапросаУсловий.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаЗапроса = РезультатЗапросаУсловий.Выгрузить();
	
	ДеревоУсловий.Колонки.Вставить(0, "ЗначениеГруппировки");
	ДеревоУсловий.Колонки.Вставить(1, "СуммаОбязательств"         , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ДеревоУсловий.Колонки.Вставить(2, "СуммаВыполнения"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ДеревоУсловий.Колонки.Вставить(3, "КоличествоОбязательств"    , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(20,3));
	ДеревоУсловий.Колонки.Вставить(4, "КоличествоВыполнения"      , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(20,3));
	ДеревоУсловий.Колонки.Вставить(5, "ДатаНачалаДоговора"        , Новый ОписаниеТипов("Дата"));
	ДеревоУсловий.Колонки.Вставить(6, "ДатаОкончанияДоговора"     , Новый ОписаниеТипов("Дата"));
	ДеревоУсловий.Колонки.Вставить(7, "ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	// Отберем тамличные части документов, в соответствии с отборами по номенклатуре
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Использование И ЭлементОтбора.ПутьКДанным = "Номенклатура" ИЛИ ЭлементОтбора.Использование И ЭлементОтбора.ПутьКДанным = "ХарактеристикаНоменклатуры" Тогда
			Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
				ТаблицаДоговора = СтрокаТаблицы.НоменклатураУсловий;
				Если ТипЗнч(ТаблицаДоговора) = Тип("ТаблицаЗначений") И ТаблицаДоговора.Количество() > 0 Тогда
					ИндексСтроки = 0;
					Пока Истина Цикл
					
						Если ИндексСтроки > ТаблицаДоговора.Количество() - 1 Тогда
							Прервать;
						КонецЕсли;
						
						СтрокаТаблицы = ТаблицаДоговора[ИндексСтроки];
						
						Если (ЭлементОтбора.ВидСравнения = ВидСравнения.Равно И СтрокаТаблицы[ЭлементОтбора.ПутьКДанным] <> ЭлементОтбора.Значение)
							 ИЛИ (ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно И СтрокаТаблицы[ЭлементОтбора.ПутьКДанным] = ЭлементОтбора.Значение) Тогда
							ТаблицаДоговора.Удалить(СтрокаТаблицы);
							Продолжить;
						ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке ИЛИ ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
							Найден = Ложь;
							Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
								Если ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
									Найден = (ЭлементСписка.Значение = СтрокаТаблицы[ЭлементОтбора.ПутьКДанным]);
								Иначе
									Найден = (СтрокаТаблицы[ЭлементОтбора.ПутьКДанным].ПринадлежитЭлементу(ЭлементСписка.Значение) ИЛИ ЭлементСписка.Значение = СтрокаТаблицы[ЭлементОтбора.ПутьКДанным]);
								КонецЕсли;
								Если Найден Тогда
									Прервать;
								КонецЕсли; 
							КонецЦикла;
							Если НЕ Найден Тогда
								ТаблицаДоговора.Удалить(СтрокаТаблицы);
								Продолжить;
							КонецЕсли; 
						ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке ИЛИ ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
							Найден = Ложь;
							Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
								Если ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
									Найден = (ЭлементСписка.Значение = СтрокаТаблицы[ЭлементОтбора.ПутьКДанным]);
								Иначе
									Найден = (СтрокаТаблицы[ЭлементОтбора.ПутьКДанным].ПринадлежитЭлементу(ЭлементСписка.Значение) ИЛИ ЭлементСписка.Значение = СтрокаТаблицы[ЭлементОтбора.ПутьКДанным]);
								КонецЕсли;
								Если Найден Тогда
									Прервать;
								КонецЕсли; 
							КонецЦикла;
							Если Найден Тогда
								ТаблицаДоговора.Удалить(СтрокаТаблицы);
								Продолжить;
							КонецЕсли; 
						КонецЕсли; 
						
						ИндексСтроки = ИндексСтроки + 1;
						
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

	ПеределатьСтрокиДерева(ДеревоУсловий, 0, СписокГруппировок, ТаблицаЗапроса, ТаблицаЗапросаВыполненияУсловий, ТаблицаЗапросаВыполненияУсловийНоменклатуры, ТаблицаЗапросаВыполненияУсловийБезДокумента, ТаблицаЗапросаВыполненияУсловийНоменклатурыБезДокумента);
	
	// Теперь собственно заполним табличное поле отчета данными
	
	Макет = ПолучитьМакет("Макет");
	
	Таб.Очистить();
	
	Секция = Макет.ПолучитьОбласть("ШапкаВерх");
	Таб.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ШапкаИнтервал");
	Секция.Параметры.СтрокаИнтервал = СформироватьСтрокуПериода();
	Таб.Вывести(Секция);
	мКоличествоВыведенныхСтрокЗаголовка = 4;
	
	Если СписокГруппировок.Количество() > 0 Тогда
		
		Секция = Макет.ПолучитьОбласть("ШапкаГруппировки");
		
		СтрокаГруппировок = "";
		Для каждого Группировка Из СписокГруппировок Цикл
			Если НЕ ПустаяСтрока(СтрокаГруппировок) Тогда
				СтрокаГруппировок = СтрокаГруппировок + ", ";
			КонецЕсли; 
			СтрокаГруппировок = СтрокаГруппировок + Группировка.Представление;
		КонецЦикла; 
		
		Секция.Параметры.СтрокаГруппировок = "Группировки строк: " + СтрокаГруппировок;
		Таб.Вывести(Секция);
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
		
	КонецЕсли;
	
	СтрокаОтборов = УправлениеОтчетами.СформироватьСтрокуОтборов(Отбор);
	Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаОтбор");
		Секция.Параметры.СтрокаОтборов = "Отбор: " + СтрокаОтборов;
		Таб.Вывести(Секция);
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 
	
	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Секция.Параметры.ПредставлениеСумма = "Сумма, " + СокрЛП(глЗначениеПеременной("ВалютаУправленческогоУчета"));
	Таб.Вывести(Секция);
	
	Таб.НачатьАвтогруппировкуСтрок();
	
	ВывестиСтроки(Таб, Макет, ДеревоУсловий, 0, СписокГруппировок);
	
	Таб.ЗакончитьАвтогруппировкуСтрок();
	
	Таб.ФиксацияСверху = мКоличествоВыведенныхСтрокЗаголовка + 3;
	Таб.ФиксацияСлева = 2;
	
	ИзменитьВидимостьЗаголовка(Таб);
	
	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();
	
КонецПроцедуры

// Процедура выводит строки группировок в табличный документа
//
// Парамтеры
//  Таб - поле табличного документа, в которое выводятся данные отчета
//  Макет - макет отчета
//  СтрокаПрошлогоУровня - строка дерева значений, данные из строк которой надо обработать и отобразить
//
// Возвращаемое значение
//  НЕТ
//
Процедура ВывестиСтроки(Таб, Макет, СтрокаПрошлогоУровня, ИндексГруппировки, СписокГруппировок)

	Для каждого СтрокаТекущегоУровня Из СтрокаПрошлогоУровня.Строки Цикл
		
		Если ИндексГруппировки > СписокГруппировок.Количество() Тогда
			Продолжить;
		КонецЕсли; 
		
		ТекущийЦвет = Новый Цвет;
		Если РаскрашиватьГруппировки Тогда
			Если ИндексГруппировки <> СписокГруппировок.Количество() Тогда
				ИндексЦвета = ИндексГруппировки;
				Если ИндексЦвета >= 10 Тогда
					ИндексЦвета = (ИндексГруппировки/10 - Цел(ИндексГруппировки/10))*10;
				КонецЕсли; 
				ТекущийЦвет = Макет.Области["Цвет"+СокрЛП(ИндексЦвета)].ЦветФона;
			Иначе
				ТекущийЦвет = Новый Цвет;
			КонецЕсли; 
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТекущегоУровня.ЗначениеГруппировки) Тогда
			
			СтрокаГруппировки = "<...>";
			
		Иначе
			
			СтрокаГруппировки = Строка(СтрокаТекущегоУровня.ЗначениеГруппировки);
			
			Если ТипЗнч(СтрокаТекущегоУровня.ЗначениеГруппировки) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И НЕ ГруппировкаКонтрагент Тогда
				СтрокаГруппировки = СтрокаГруппировки + " (" + Строка(СтрокаТекущегоУровня.ЗначениеГруппировки.Владелец) + ")";
			ИначеЕсли ТипЗнч(СтрокаТекущегоУровня.ЗначениеГруппировки) = Тип("СправочникСсылка.Номенклатура") И СтрокаТекущегоУровня.ЗначениеГруппировки.ВестиУчетПоХарактеристикам Тогда
				СтрокаГруппировки = СтрокаГруппировки + " (" + ?(Не ЗначениеЗаполнено(СтрокаТекущегоУровня.ХарактеристикаНоменклатуры), "Характеристика не указана", СтрокаТекущегоУровня.ХарактеристикаНоменклатуры) + ")";
			КонецЕсли; 
			
		КонецЕсли; 
		
		Секция = Макет.ПолучитьОбласть("СтрокаГруппировки");
		Секция.Параметры.ЗначениеГруппировки    = СтрокаГруппировки;
		Секция.Параметры.СуммаОбязательств      = Формат(СтрокаТекущегоУровня.СуммаОбязательств, "ЧЦ=15; ЧДЦ=2");
		Секция.Параметры.СуммаВыполнения        = Формат(СтрокаТекущегоУровня.СуммаВыполнения, "ЧЦ=15; ЧДЦ=2");
		Секция.Параметры.КоличествоОбязательств = Формат(СтрокаТекущегоУровня.КоличествоОбязательств, "ЧЦ=15; ЧДЦ=3");
		Секция.Параметры.КоличествоВыполнения   = Формат(СтрокаТекущегоУровня.КоличествоВыполнения, "ЧЦ=15; ЧДЦ=3");
		
		Секция.Области.ЗначениеГруппировки.Расшифровка = СтрокаТекущегоУровня.ЗначениеГруппировки;
		Секция.Области.ЗначениеГруппировки.Отступ = ИндексГруппировки;
		
		Секция.Области.ЗначениеГруппировки.ЦветФона    = ТекущийЦвет;
		Секция.Области.СуммаОбязательств.ЦветФона      = ТекущийЦвет;
		Секция.Области.СуммаВыполнения.ЦветФона        = ТекущийЦвет;
		Секция.Области.КоличествоОбязательств.ЦветФона = ТекущийЦвет;
		Секция.Области.КоличествоВыполнения.ЦветФона   = ТекущийЦвет;
		Таб.Вывести(Секция, ИндексГруппировки);
		
		ВывестиСтроки(Таб, Макет, СтрокаТекущегоУровня, ИндексГруппировки + 1, СписокГруппировок);
		
	КонецЦикла; 
	
КонецПроцедуры

// Заполним доступные поля отбора
ДоступныеПоляОтбора = Отбор.ПолучитьДоступныеПоля();

Поле = ДоступныеПоляОтбора.Добавить("Контрагент", "Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
Поле.Отбор = Истина;

Поле = ДоступныеПоляОтбора.Добавить("ДоговорКонтрагента", "Договор контрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
Поле.Отбор = Истина;

Поле = ДоступныеПоляОтбора.Добавить("ДокументУсловий", "Документ условий", Новый ОписаниеТипов("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов"));
Поле.Отбор = Истина;

Поле = ДоступныеПоляОтбора.Добавить("Номенклатура", "Номенклатура условий", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
Поле.Отбор = Истина;

Поле = ДоступныеПоляОтбора.Добавить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры условий", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
Поле.Отбор = Истина;

Отбор.УстановитьДоступныеПоля(ДоступныеПоляОтбора);

ГруппировкаДоговорКонтрагента = Истина;

мКоличествоВыведенныхСтрокЗаголовка = 0;

// Формируем список обязательных отборов
мСписокОтборов = Новый СписокЗначений;
мСписокОтборов.Добавить("Контрагент");
мСписокОтборов.Добавить("ДоговорКонтрагента");

НП = Новый НастройкаПериода;
#КонецЕсли
