
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
//Добавим движения заказных позиций.	
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		// регистр амбЗаявкиНаПоставку Расход
		Движение = Движения.амбЗаявкиНаПоставку.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.МенеджерНаправления = МенеджерНаправления;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Менеджер = Менеджер;
		Движение.Заявка = Ссылка;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;
 //Проверим обоснование приоритета
	Если Приоритет<9 и не ЗначениеЗаполнено(ОбоснованиеПриоритета) тогда
		Отказ = Истина;
		Предупреждение("Нельзя повысить приоритет без заполнения поля ОБОСНОВАНИЕ ПРИОРИТЕТА!!!");
	КонецЕсли;
	// Проверка на заполнение обязателных полей
	Если Не ЗначениеЗаполнено(МенеджерНаправления) тогда
		Сообщить("Необходимо указать менеджера направления...",СтатусСообщения.Важное);
		Отказ = Истина;   		
	КонецЕсли;
	
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	амбМенеджерыНаправлений.Ссылка
	                 |ИЗ
	                 |	Справочник.амбМенеджерыНаправлений КАК амбМенеджерыНаправлений
	                 |ГДЕ
	                 |	амбМенеджерыНаправлений.МенеджерНаправления = &МенеджерНаправления
	                 |	И амбМенеджерыНаправлений.УказыватьПолучателя = ИСТИНА";
	  
	  Запрос.УстановитьПараметр("МенеджерНаправления", МенеджерНаправления );
	  
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  
	  Если Выборка.Следующий()Тогда
		  
		Если Не ЗначениеЗаполнено(ПодОрганизацию) тогда
		Сообщить("Необходимо указать контрагента, под которого идет заказ...",СтатусСообщения.Важное);
		Отказ = Истина;   		
		КонецЕсли; 	
	  
	  КонецЕсли;

	Если Товары.Количество()=0 тогда
		Сообщить("Необходимо заполнить таблицу товары",СтатусСообщения.Важное);
		Отказ = Истина;   		
	КонецЕсли;
	//Проверим, возможно заказываемый товар есть на складе в требуемом количестве.
	    Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0)) КАК Остаток,
		               |	СУММА(ЕСТЬNULL(амбЗаявкаНаПоставкуТовары.Количество, 0)) КАК Количество,
		               |	амбЗаявкаНаПоставкуТовары.Номенклатура КАК Номенклатура
		               |ИЗ
		               |	Документ.амбЗаявкаНаПоставку.Товары КАК амбЗаявкаНаПоставкуТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		               |			СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)) КАК Остаток
		               |		ИЗ
		               |			РегистрНакопления.ТоварыНаСкладах.Остатки(
		               |					&Дата,
		               |					Номенклатура В
		               |							(ВЫБРАТЬ
		               |								амбЗаявкаНаПоставкуТовары.Номенклатура КАК Номенклатура
		               |							ИЗ
		               |								Документ.амбЗаявкаНаПоставку.Товары КАК амбЗаявкаНаПоставкуТовары
		               |							ГДЕ
		               |								амбЗаявкаНаПоставкуТовары.Ссылка = &Ссылка)
		               |						И Склад.амбИспользоватьОбособленныйУчетСроковГодности = ЛОЖЬ) КАК ТоварыНаСкладахОстатки
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
		               |						&Дата,
		               |						Номенклатура В
		               |								(ВЫБРАТЬ
		               |									амбЗаявкаНаПоставкуТовары.Номенклатура КАК Номенклатура
		               |								ИЗ
		               |									Документ.амбЗаявкаНаПоставку.Товары КАК амбЗаявкаНаПоставкуТовары
		               |								ГДЕ
		               |									амбЗаявкаНаПоставкуТовары.Ссылка = &Ссылка)
		               |							И Склад.амбИспользоватьОбособленныйУчетСроковГодности = ЛОЖЬ) КАК ТоварыВРезервеНаСкладахОстатки
		               |				ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(
		               |						&Дата,
		               |						Номенклатура В
		               |								(ВЫБРАТЬ
		               |									амбЗаявкаНаПоставкуТовары.Номенклатура КАК Номенклатура
		               |								ИЗ
		               |									Документ.амбЗаявкаНаПоставку.Товары КАК амбЗаявкаНаПоставкуТовары
		               |								ГДЕ
		               |									амбЗаявкаНаПоставкуТовары.Ссылка = &Ссылка)
		               |							И Склад.амбИспользоватьОбособленныйУчетСроковГодности = ЛОЖЬ) КАК ТоварыКПередачеСоСкладовОстатки
		               |				ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ТоварыНаСкладахОстатки.Номенклатура) КАК ВложенныйЗапрос
		               |		ПО амбЗаявкаНаПоставкуТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
		               |ГДЕ
		               |	амбЗаявкаНаПоставкуТовары.Номенклатура <> &ПустаяНоменклатура
		               |	И амбЗаявкаНаПоставкуТовары.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	амбЗаявкаНаПоставкуТовары.Номенклатура";
		
		Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка() );
		Запрос.УстановитьПараметр("Ссылка", Ссылка );
        Запрос.УстановитьПараметр("Дата", ТекущаяДата() );
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Остаток >= Выборка.Количество тогда
				 Сообщить(Строка(Выборка.Номенклатура) + " есть в достаточном количестве на складе, остаток="+Строка(Выборка.Остаток), СтатусСообщения.ОченьВажное);
				 Если НеКонтролироватьПревышениеОстатка() Тогда 
				 Отказ = Истина;
				 КонецЕсли;
			КонецЕсли;		
		КонецЦикла;

	//Если Проводит менеджер тогда формируем задачу 
	Если Менеджер = ПараметрыСеанса.ТекущийПользователь и не отказ тогда
		 Если Задачи.амбЗадачиПользователя.НайтиПоРеквизиту("Заявка", Ссылка) = Задачи.амбЗадачиПользователя.ПустаяСсылка() тогда;		
		 ЗадачаДляМенеджера = Задачи.амбЗадачиПользователя.СоздатьЗадачу();
		 ЗадачаДляМенеджера.Дата = ТекущаяДата();
		 ЗадачаДляМенеджера.Инициатор = Менеджер;
		 ЗадачаДляМенеджера.Исполнитель = МенеджерНаправления;
		 ЗадачаДляМенеджера.Наименование = "Поступила заявка на поставку товара: "+ Ссылка;
		 ЗадачаДляМенеджера.Заявка = Ссылка;
		 ЗадачаДляМенеджера.ВидЗадачи = Перечисления.амбВидыЗадач.Заявка;
		 ЗадачаДляМенеджера.Записать();
		 КонецЕсли;
	КонецЕсли;	

КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если Проведен и не (МенеджерНаправления = ПараметрыСеанса.ТекущийПользователь или РольДоступна("СуперПользователь")) Тогда
		Отказ = ИСТИНА;
		Предупреждение("Вы уже провели заявку и она поступила в обработку. Изменение невозможно!!!");
	КонецЕсли;	

КонецПроцедуры


Процедура ОбработкаЗаполнения(Основание)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// Заполнение шапки
		ПодОрганизацию = Основание.Контрагент;
		Контрагент = Основание.Контрагент;
		ПодСчетПокупателя = Основание.Ссылка;
		ДляЗаказа = Основание.Ссылка;
		//Сформируем таблицу товары за минусом отгруженного товара по счету покупателя.
		Запрос = Новый Запрос;
		Запрос.Текст ="";
		
		    ЗАпросОст = Новый Запрос;
			ЗапросОст.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                  |	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0)) КАК Остаток,
			                  |	СУММА(ЕСТЬNULL(ЗаказПокупателяТовары.Количество, 0)) КАК Количество,
			                  |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
			                  |	ЗаказПокупателяТовары.ЕдиницаИзмерения,
			                  |	ЗаказПокупателяТовары.НомерСтроки
			                  |ИЗ
			                  |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			                  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			                  |			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
			                  |			СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеОрганизацийОстатки.КоличествоОстаток, 0)) КАК Остаток
			                  |		ИЗ
			                  |			РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Номенклатура В (&ТоварСсылка)) КАК ТоварыНаСкладахОстатки
			                  |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата, Номенклатура В (&ТоварСсылка)) КАК ТоварыВРезервеНаСкладахОстатки
			                  |				ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
			                  |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеОрганизаций.Остатки(&Дата, Номенклатура В (&ТоварСсылка)) КАК ТоварыКПередачеОрганизацийОстатки
			                  |				ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыКПередачеОрганизацийОстатки.Номенклатура
			                  |		
			                  |		СГРУППИРОВАТЬ ПО
			                  |			ТоварыНаСкладахОстатки.Номенклатура) КАК ВложенныйЗапрос
			                  |		ПО ЗаказПокупателяТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
			                  |ГДЕ
			                  |	ЗаказПокупателяТовары.Номенклатура <> &ПустаяНоменклатура
			                  |	И ЗаказПокупателяТовары.Ссылка = &Ссылка
			                  |
			                  |СГРУППИРОВАТЬ ПО
			                  |	ЗаказПокупателяТовары.Номенклатура,
			                  |	ЗаказПокупателяТовары.ЕдиницаИзмерения,
			                  |	ЗаказПокупателяТовары.НомерСтроки
			                  |
			                  |УПОРЯДОЧИТЬ ПО
			                  |	ЗаказПокупателяТовары.НомерСтроки";
		ЗапросОст.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка() );
		ЗапросОст.УстановитьПараметр("Ссылка", Основание.Ссылка );
        ЗапросОст.УстановитьПараметр("Дата", ТекущаяДата() );
		ЗапросОст.УстановитьПараметр("ТоварСсылка", Основание.Товары.ВыгрузитьКолонку("Номенклатура"));
		
		ВыборкаОст = ЗАпросОст.Выполнить().Выбрать();

		//Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
		//	НоваяСтрока = Товары.Добавить();
		//	НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
		//	НоваяСтрока.Количество = ТекСтрокаТовары.Количество;			
		//	НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		//	
		//КонецЦикла;
		Пока ВыборкаОст.Следующий() Цикл
			Если (ВыборкаОст.Количество-ВыборкаОст.Остаток)>0 тогда

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаОст.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ВыборкаОст.Количество-ВыборкаОст.Остаток;			
			НоваяСтрока.Номенклатура = ВыборкаОст.Номенклатура;
			КонецЕсли;

		КонецЦИкла;	
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		// Заполнение шапки
		Комментарий = Основание.Комментарий;
		Контрагент = Основание.Контрагент;
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Контракт") тогда
		//Заполним по контакту.
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

// Если текущий пользователь отличен от создателя объекта копирования тогда подставим этого нового пользователя
Процедура ПриКопировании(ОбъектКопирования)
	Если не ОбъектКопирования.Менеджер = ПараметрыСеанса.ТекущийПользователь тогда
		      Менеджер = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
КонецПроцедуры

//ФункцияПроверяет, возможне не требуется контроль остатка товара на складе...
Функция НеКонтролироватьПревышениеОстатка()
	Если Елисеев.ЭтоСуперпользователь() тогда
		Возврат Ложь;
	КонецЕсли;	
	
	
	Если Товары.Количество() > 0 тогда
		ГруппаН = Товары[0].Номенклатура.Родитель.Ссылка;
	Иначе	
		ГруппаН =  Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	амбМенеджерыНаправлений.Ссылка
               |ИЗ
               |	Справочник.амбМенеджерыНаправлений КАК амбМенеджерыНаправлений
               |ГДЕ
               |	амбМенеджерыНаправлений.Направление = &Направление
               |	И амбМенеджерыНаправлений.НеУчитыватьОстаток = ИСТИНА";

Запрос.УстановитьПараметр("Направление",ГруппаН );


Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если  Выборка.Следующий() Тогда 
     Возврат Ложь;
 Иначе
//Если текущий пользователь является менеджером направления, тогда он может списать в минус
  Если  МенеджерНаправления = ПараметрыСеанса.ТекущийПользователь Тогда 
				 Возврат Ложь;
  Иначе
				 Возврат Истина;				 
  КонецЕсли;  
КонецЕсли;	
		
КонецФункции	