#Если Клиент Тогда
	
Перем КоличествоПоля Экспорт;
Перем КоличествоОстатки Экспорт;
Перем КоличествоПродажи Экспорт;
Перем КоличествоЦены Экспорт;

Перем мТаблицаПолей;
Перем мСтруктураПредставлениеПолей;
Перем мСоответствиеНазначений;

Перем мСвойстваВыбранныхПолей Экспорт;

Перем мСтруктураФорматаПолей;

Перем мТекущаяНастройка Экспорт;

Процедура ИнициализацияПостроителяОтчета() Экспорт
	
	Периодичность = Строка(ПериодичностьПродаж);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураЦеныОстаткиПродажи.Номенклатура,
	|	НоменклатураЦеныОстаткиПродажи.НоменклатураДляПолей,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_01,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_02,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_03,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_04,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_05,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_06,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_07,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_08,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_09,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_10,
	|	0 КАК ОстаткиИтог,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_01,
	|	0 КАК ПродажиПроцент_01,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_02,
	|	0 КАК ПродажиПроцент_02,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_03,
	|	0 КАК ПродажиПроцент_03,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_04,
	|	0 КАК ПродажиПроцент_04,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_05,
	|	0 КАК ПродажиПроцент_05,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_06,
	|	0 КАК ПродажиПроцент_06,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_07,
	|	0 КАК ПродажиПроцент_07,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_08,
	|	0 КАК ПродажиПроцент_08,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_09,
	|	0 КАК ПродажиПроцент_09,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_10,
	|	0 КАК ПродажиПроцент_10,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_11,
	|	0 КАК ПродажиПроцент_11,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_12,
	|	0 КАК ПродажиПроцент_12,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_13,
	|	0 КАК ПродажиПроцент_13,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_14,
	|	0 КАК ПродажиПроцент_14,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_15,
	|	0 КАК ПродажиПроцент_15,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_16,
	|	0 КАК ПродажиПроцент_16,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_17,
	|	0 КАК ПродажиПроцент_17,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_18,
	|	0 КАК ПродажиПроцент_18,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_19,
	|	0 КАК ПродажиПроцент_19,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_20,
	|	0 КАК ПродажиПроцент_20,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_21,
	|	0 КАК ПродажиПроцент_21,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_22,
	|	0 КАК ПродажиПроцент_22,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_23,
	|	0 КАК ПродажиПроцент_23,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_24,
	|	0 КАК ПродажиПроцент_24,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_25,
	|	0 КАК ПродажиПроцент_25,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_26,
	|	0 КАК ПродажиПроцент_26,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_27,
	|	0 КАК ПродажиПроцент_27,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_28,
	|	0 КАК ПродажиПроцент_28,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_29,
	|	0 КАК ПродажиПроцент_29,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_30,
	|	0 КАК ПродажиПроцент_30,
	|	НоменклатураЦеныОстаткиПродажи.Цена_01,
	|	НоменклатураЦеныОстаткиПродажи.Цена_02,
	|	НоменклатураЦеныОстаткиПродажи.Цена_03,
	|	НоменклатураЦеныОстаткиПродажи.Цена_04,
	|	НоменклатураЦеныОстаткиПродажи.Цена_05,
	|	НоменклатураЦеныОстаткиПродажи.Цена_06,
	|	НоменклатураЦеныОстаткиПродажи.Цена_07,
	|	НоменклатураЦеныОстаткиПродажи.Цена_08,
	|	НоменклатураЦеныОстаткиПродажи.Цена_09,
	|	НоменклатураЦеныОстаткиПродажи.Цена_10,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_01,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_02,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_03,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_04,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_05,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_06,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_07,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_08,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_09,
	|	НоменклатураЦеныОстаткиПродажи.ВалютаЦены_10,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК МестаХранения,
	|	Штрихкоды.Штрихкод,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента,
	|	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента,
	|	НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента,
	|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента,
	|	НоменклатураКонтрагентов.ЕдиницаНоменклатурыКонтрагента,
	|	УстановкаПроектовДляНоменклатуры.Проект,
	|	ЦеныНоменклатурыКонтрагентов.Цена КАК ЦенаПоставщика,
	|	ЦеныНоменклатурыКонтрагентов.Валюта КАК ВалютаЦеныПоставщика,
	|	ЗаказыПоставщикам.КоличествоОстаток КАК ЗаказаноПоставщикам
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	|{ВЫБРАТЬ
	|	НоменклатураДляПолей.*,
	|	Остатки_01,
	|	Остатки_02,
	|	Остатки_03,
	|	Остатки_04,
	|	Остатки_05,
	|	Остатки_06,
	|	Остатки_07,
	|	Остатки_08,
	|	Остатки_09,
	|	Остатки_10,
	|	Продажи_01,
	|	Продажи_02,
	|	Продажи_03,
	|	Продажи_04,
	|	Продажи_05,
	|	Продажи_06,
	|	Продажи_07,
	|	Продажи_08,
	|	Продажи_09,
	|	Продажи_10,
	|	Продажи_11,
	|	Продажи_12,
	|	Продажи_13,
	|	Продажи_14,
	|	Продажи_15,
	|	Продажи_16,
	|	Продажи_17,
	|	Продажи_18,
	|	Продажи_19,
	|	Продажи_20,
	|	Продажи_21,
	|	Продажи_22,
	|	Продажи_23,
	|	Продажи_24,
	|	Продажи_25,
	|	Продажи_26,
	|	Продажи_27,
	|	Продажи_28,
	|	Продажи_29,
	|	Продажи_30,
	|	Цена_01,
	|	Цена_02,
	|	Цена_03,
	|	Цена_04,
	|	Цена_05,
	|	Цена_06,
	|	Цена_07,
	|	Цена_08,
	|	Цена_09,
	|	Цена_10,
	|	ВалютаЦены_01,
	|	ВалютаЦены_02,
	|	ВалютаЦены_03,
	|	ВалютаЦены_04,
	|	ВалютаЦены_05,
	|	ВалютаЦены_06,
	|	ВалютаЦены_07,
	|	ВалютаЦены_08,
	|	ВалютаЦены_09,
	|	ВалютаЦены_10,
	|	МестаХранения,
	|	Штрихкод,
	|	КодНоменклатурыКонтрагента,
	|	АртикулНоменклатурыКонтрагента,
	|	НаименованиеНоменклатурыКонтрагента,
	|	ШтрихКодНоменклатурыКонтрагента,
	|	ЕдиницаНоменклатурыКонтрагента,
	|	Проект,
	|	ЦенаПоставщика,
	|	ВалютаЦеныПоставщика,
	|	ЗаказаноПоставщикам
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	|}
	|ИЗ
	|	(ВЫБРАТЬ
	|		НоменклатураЦеныОстаткиПродажиОбъединение.Номенклатура КАК Номенклатура,
	|		НоменклатураЦеныОстаткиПродажиОбъединение.Номенклатура КАК НоменклатураДляПолей,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_01) КАК Остатки_01,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_02) КАК Остатки_02,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_03) КАК Остатки_03,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_04) КАК Остатки_04,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_05) КАК Остатки_05,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_06) КАК Остатки_06,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_07) КАК Остатки_07,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_08) КАК Остатки_08,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_09) КАК Остатки_09,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Остатки_10) КАК Остатки_10,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_01) КАК Продажи_01,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_02) КАК Продажи_02,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_03) КАК Продажи_03,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_04) КАК Продажи_04,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_05) КАК Продажи_05,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_06) КАК Продажи_06,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_07) КАК Продажи_07,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_08) КАК Продажи_08,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_09) КАК Продажи_09,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_10) КАК Продажи_10,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_11) КАК Продажи_11,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_12) КАК Продажи_12,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_13) КАК Продажи_13,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_14) КАК Продажи_14,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_15) КАК Продажи_15,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_16) КАК Продажи_16,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_17) КАК Продажи_17,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_18) КАК Продажи_18,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_19) КАК Продажи_19,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_20) КАК Продажи_20,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_21) КАК Продажи_21,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_22) КАК Продажи_22,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_23) КАК Продажи_23,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_24) КАК Продажи_24,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_25) КАК Продажи_25,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_26) КАК Продажи_26,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_27) КАК Продажи_27,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_28) КАК Продажи_28,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_29) КАК Продажи_29,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Продажи_30) КАК Продажи_30,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_01) КАК Цена_01,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_02) КАК Цена_02,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_03) КАК Цена_03,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_04) КАК Цена_04,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_05) КАК Цена_05,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_06) КАК Цена_06,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_07) КАК Цена_07,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_08) КАК Цена_08,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_09) КАК Цена_09,
	|		СУММА(НоменклатураЦеныОстаткиПродажиОбъединение.Цена_10) КАК Цена_10,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_01) КАК ВалютаЦены_01,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_02) КАК ВалютаЦены_02,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_03) КАК ВалютаЦены_03,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_04) КАК ВалютаЦены_04,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_05) КАК ВалютаЦены_05,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_06) КАК ВалютаЦены_06,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_07) КАК ВалютаЦены_07,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_08) КАК ВалютаЦены_08,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_09) КАК ВалютаЦены_09,
	|		МАКСИМУМ(НоменклатураЦеныОстаткиПродажиОбъединение.ВалютаЦены_10) КАК ВалютаЦены_10
	|	ИЗ
	|	(ВЫБРАТЬ
	|		СправочникНоменклатура.Ссылка КАК Номенклатура,
	|		0 КАК Остатки_01,
	|		0 КАК Остатки_02,
	|		0 КАК Остатки_03,
	|		0 КАК Остатки_04,
	|		0 КАК Остатки_05,
	|		0 КАК Остатки_06,
	|		0 КАК Остатки_07,
	|		0 КАК Остатки_08,
	|		0 КАК Остатки_09,
	|		0 КАК Остатки_10,
	|		0 КАК Продажи_01,
	|		0 КАК Продажи_02,
	|		0 КАК Продажи_03,
	|		0 КАК Продажи_04,
	|		0 КАК Продажи_05,
	|		0 КАК Продажи_06,
	|		0 КАК Продажи_07,
	|		0 КАК Продажи_08,
	|		0 КАК Продажи_09,
	|		0 КАК Продажи_10,
	|		0 КАК Продажи_11,
	|		0 КАК Продажи_12,
	|		0 КАК Продажи_13,
	|		0 КАК Продажи_14,
	|		0 КАК Продажи_15,
	|		0 КАК Продажи_16,
	|		0 КАК Продажи_17,
	|		0 КАК Продажи_18,
	|		0 КАК Продажи_19,
	|		0 КАК Продажи_20,
	|		0 КАК Продажи_21,
	|		0 КАК Продажи_22,
	|		0 КАК Продажи_23,
	|		0 КАК Продажи_24,
	|		0 КАК Продажи_25,
	|		0 КАК Продажи_26,
	|		0 КАК Продажи_27,
	|		0 КАК Продажи_28,
	|		0 КАК Продажи_29,
	|		0 КАК Продажи_30,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_01
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_01,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_02
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_02,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_03
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_03,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_04
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_04,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_05
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_05,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_06
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_06,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_07
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_07,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_08
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_08,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_09
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_09,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_10
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена_10,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_01
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_01,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_02
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_02,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_03
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_03,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_04
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_04,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_05
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_05,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_06
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_06,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_07
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_07,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_08
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_08,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_09
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_09,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен_10
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВалютаЦены_10
	|	ИЗ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦены, ТипЦен В (&МассивТипыЦен) {Номенклатура.* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних
	|	ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	|	ГДЕ
	|		СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ
	|	
	|	{ГДЕ
	|		СправочникНоменклатура.Ссылка.* КАК Номенклатура}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ	
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_01
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_01,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_02
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_02,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_03
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_03,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_04
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_04,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_05
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_05,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_06
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_06,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_07
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_07,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_08
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_08,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_09
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_09,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.Склад = &Склад_10
	|				ТОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Остатки_10,
	|		0 КАК Продажи_01,
	|		0 КАК Продажи_02,
	|		0 КАК Продажи_03,
	|		0 КАК Продажи_04,
	|		0 КАК Продажи_05,
	|		0 КАК Продажи_06,
	|		0 КАК Продажи_07,
	|		0 КАК Продажи_08,
	|		0 КАК Продажи_09,
	|		0 КАК Продажи_10,
	|		0 КАК Продажи_11,
	|		0 КАК Продажи_12,
	|		0 КАК Продажи_13,
	|		0 КАК Продажи_14,
	|		0 КАК Продажи_15,
	|		0 КАК Продажи_16,
	|		0 КАК Продажи_17,
	|		0 КАК Продажи_18,
	|		0 КАК Продажи_19,
	|		0 КАК Продажи_20,
	|		0 КАК Продажи_21,
	|		0 КАК Продажи_22,
	|		0 КАК Продажи_23,
	|		0 КАК Продажи_24,
	|		0 КАК Продажи_25,
	|		0 КАК Продажи_26,
	|		0 КАК Продажи_27,
	|		0 КАК Продажи_28,
	|		0 КАК Продажи_29,
	|		0 КАК Продажи_30,
	|		0 КАК Цена_01,
	|		0 КАК Цена_02,
	|		0 КАК Цена_03,
	|		0 КАК Цена_04,
	|		0 КАК Цена_05,
	|		0 КАК Цена_06,
	|		0 КАК Цена_07,
	|		0 КАК Цена_08,
	|		0 КАК Цена_09,
	|		0 КАК Цена_10,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_01,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_02,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_03,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_04,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_05,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_06,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_07,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_08,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_09,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_10
	|	ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатки, Склад В (&МассивСклады) {Номенклатура.* КАК Номенклатура}) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПродажиОбороты.Номенклатура КАК Номенклатура,
	|		0 КАК Остатки_01,
	|		0 КАК Остатки_02,
	|		0 КАК Остатки_03,
	|		0 КАК Остатки_04,
	|		0 КАК Остатки_05,
	|		0 КАК Остатки_06,
	|		0 КАК Остатки_07,
	|		0 КАК Остатки_08,
	|		0 КАК Остатки_09,
	|		0 КАК Остатки_10,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_01 И &ПериодКон_01
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_01,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_02 И &ПериодКон_02
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_02,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_03 И &ПериодКон_03
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_03,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_04 И &ПериодКон_04
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_04,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_05 И &ПериодКон_05
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_05,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_06 И &ПериодКон_06
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_06,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_07 И &ПериодКон_07
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_07,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_08 И &ПериодКон_08
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_08,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_09 И &ПериодКон_09
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_09,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_10 И &ПериодКон_10
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_10,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_11 И &ПериодКон_11
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_11,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_12 И &ПериодКон_12
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_12,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_13 И &ПериодКон_13
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_13,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_14 И &ПериодКон_14
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_14,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_15 И &ПериодКон_15
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_15,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_16 И &ПериодКон_16
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_16,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_17 И &ПериодКон_17
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_17,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_18 И &ПериодКон_18
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_18,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_19 И &ПериодКон_19
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_19,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_20 И &ПериодКон_20
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_20,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_21 И &ПериодКон_21
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_21,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_22 И &ПериодКон_22
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_22,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_23 И &ПериодКон_23
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_23,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_24 И &ПериодКон_24
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_24,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_25 И &ПериодКон_25
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_25,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_26 И &ПериодКон_26
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_26,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_27 И &ПериодКон_27
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_27,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_28 И &ПериодКон_28
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_28,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_29 И &ПериодКон_29
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_29,
	|		ВЫБОР
	|			КОГДА ПродажиОбороты.Период МЕЖДУ &ПериодНач_30 И &ПериодКон_30
	|				ТОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Продажи_30,
	|		0 КАК Цена_01,
	|		0 КАК Цена_02,
	|		0 КАК Цена_03,
	|		0 КАК Цена_04,
	|		0 КАК Цена_05,
	|		0 КАК Цена_06,
	|		0 КАК Цена_07,
	|		0 КАК Цена_08,
	|		0 КАК Цена_09,
	|		0 КАК Цена_10,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_01,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_02,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_03,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_04,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_05,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_06,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_07,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_08,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_09,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаЦены_10
	|	ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачПродажи, &ДатаКонПродажи, День, {Номенклатура.* КАК Номенклатура, ДоговорКонтрагента.Организация.* КАК Организация}) КАК ПродажиОбороты) КАК НоменклатураЦеныОстаткиПродажиОбъединение
	|	СГРУППИРОВАТЬ ПО
	|	НоменклатураЦеныОстаткиПродажиОбъединение.Номенклатура,
	|	НоменклатураЦеныОстаткиПродажиОбъединение.Номенклатура) КАК НоменклатураЦеныОстаткиПродажи
	|	
	|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|	ПО НоменклатураКонтрагентов.Номенклатура = НоменклатураЦеныОстаткиПродажи.Номенклатура
	|		И НоменклатураКонтрагентов.Контрагент = НоменклатураЦеныОстаткиПродажи.Номенклатура.ОсновнойПоставщик}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&ДатаОстатки, ) КАК УстановкаПроектовДляНоменклатуры
	|	ПО УстановкаПроектовДляНоменклатуры.НоменклатураПроекта = НоменклатураЦеныОстаткиПродажи.Номенклатура}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаЦены, ) КАК ЦеныНоменклатурыКонтрагентов
	|	ПО ЦеныНоменклатурыКонтрагентов.Номенклатура = НоменклатураЦеныОстаткиПродажи.Номенклатура
	|		И ЦеныНоменклатурыКонтрагентов.ТипЦен.Владелец = НоменклатураЦеныОстаткиПродажи.Номенклатура.ОсновнойПоставщик
	|		И ЦеныНоменклатурыКонтрагентов.ТипЦен.ТипЦеныНоменклатуры = &ТипЦеныНоменклатуры}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		Штрихкоды.Владелец КАК Номенклатура,
	|		МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|	ИЗ
	|		РегистрСведений.Штрихкоды КАК Штрихкоды
	|	ГДЕ
	|		Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Штрихкоды.Владелец) КАК Штрихкоды
	|	ПО НоменклатураЦеныОстаткиПродажи.Номенклатура = Штрихкоды.Номенклатура}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатки) КАК ЗаказыПоставщикам
	|	ПО ЗаказыПоставщикам.Номенклатура = НоменклатураЦеныОстаткиПродажи.Номенклатура}
	|
	|	//СОЕДИНЕНИЯ
	|
	|{ГДЕ
	|	НоменклатураЦеныОстаткиПродажи.Остатки_01,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_02,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_03,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_04,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_05,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_06,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_07,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_08,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_09,
	|	НоменклатураЦеныОстаткиПродажи.Остатки_10,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_01,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_02,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_03,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_04,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_05,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_06,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_07,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_08,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_09,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_10,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_11,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_12,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_13,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_14,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_15,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_16,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_17,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_18,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_19,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_20,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_21,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_22,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_23,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_24,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_25,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_26,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_27,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_28,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_29,
	|	НоменклатураЦеныОстаткиПродажи.Продажи_30,
	|	НоменклатураЦеныОстаткиПродажи.Цена_01,
	|	НоменклатураЦеныОстаткиПродажи.Цена_02,
	|	НоменклатураЦеныОстаткиПродажи.Цена_03,
	|	НоменклатураЦеныОстаткиПродажи.Цена_04,
	|	НоменклатураЦеныОстаткиПродажи.Цена_05,
	|	НоменклатураЦеныОстаткиПродажи.Цена_06,
	|	НоменклатураЦеныОстаткиПродажи.Цена_07,
	|	НоменклатураЦеныОстаткиПродажи.Цена_08,
	|	НоменклатураЦеныОстаткиПродажи.Цена_09,
	|	НоменклатураЦеныОстаткиПродажи.Цена_10	
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО
	|	Номенклатура.*
	|}";
	
	мСтруктураПредставлениеПолей.Вставить("НоменклатураДляПолей", "Номенклатура");
	мСтруктураПредставлениеПолей.Вставить("МестаХранения", "Места хранения");
	мСтруктураПредставлениеПолей.Вставить("Организация", "Организация");
	мСтруктураПредставлениеПолей.Вставить("Штрихкод", "Штрихкод");
	мСтруктураПредставлениеПолей.Вставить("КодНоменклатурыКонтрагента", "Код поставщика");
	мСтруктураПредставлениеПолей.Вставить("АртикулНоменклатурыКонтрагента", "Артикул поставщика");
	мСтруктураПредставлениеПолей.Вставить("НаименованиеНоменклатурыКонтрагента", "Наименование поставщика");
	мСтруктураПредставлениеПолей.Вставить("ШтрихКодНоменклатурыКонтрагента", "Штрихкод поставщика");
	мСтруктураПредставлениеПолей.Вставить("ЕдиницаНоменклатурыКонтрагента", "Единица поставщика");
	мСтруктураПредставлениеПолей.Вставить("Проект", "Проект");
	мСтруктураПредставлениеПолей.Вставить("ЦенаПоставщика", "Цена поставщика");
	мСтруктураПредставлениеПолей.Вставить("ВалютаЦеныПоставщика", "Валюта цены поставщика");
	мСтруктураПредставлениеПолей.Вставить("ЗаказыПоставщикамБольшиеТиражи", "Заказано поставщикам (большие тиражи)");
	мСтруктураПредставлениеПолей.Вставить("ЗаказаноПоставщикам", "Заказано поставщикам");

	ДобавитьСвойстваИКатегорииДляПоля("НоменклатураЦеныОстаткиПродажи.Номенклатура", "Номенклатура", "Номенклатура", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);
	ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);

	ПостроительОтчета.Текст = ТекстЗапроса;
	
	УстановитьТипыЗначенийСвойствДляОтбора();
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	УстановитьДоступностьПолей("Остатки_", КоличествоОстатки, Ложь);
	УстановитьДоступностьПолей("Продажи_", КоличествоПродажи, Ложь);
	УстановитьДоступностьПолей("ПродажиПроцент_", КоличествоПродажи, Ложь);
	УстановитьДоступностьПолей("Цена_", КоличествоЦены, Ложь);
	УстановитьДоступностьПолей("ВалютаЦены_", КоличествоЦены, Ложь);
	
КонецПроцедуры // ИнициализацияПостроителяОтчета()

Процедура ДобавитьСвойстваИКатегорииДляПоля(ПутьКДанным, ИмяИзмерения, Представление, Назначение, НетКатегорий = Ложь, ТаблицаПолей = Неопределено) Экспорт
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолей;
		
	КонецЕсли;
	
	СтрокаТаблицыПолей = ТаблицаПолей.Добавить();
		
	СтрокаТаблицыПолей.ПутьКДанным = ПутьКДанным;
	СтрокаТаблицыПолей.ИмяИзмерения = ИмяИзмерения;
	СтрокаТаблицыПолей.Представление = Представление;
	СтрокаТаблицыПолей.Назначение = Назначение;
	СтрокаТаблицыПолей.НетКатегорий = НетКатегорий;
	
КонецПроцедуры // ДобавитьСвойстваИКатегорииДляПоля()

Процедура ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса, ТаблицаПолей = Неопределено, СтруктураПредставлениеПолей = Неопределено, СоответствиеНазначений = Неопределено, Параметры = Неопределено, СоответствиеСвойствКатегорийИИзмерений = Неопределено, СтруктураЗаменять = Неопределено) Экспорт

	// Добавляемые фрагменты запроса
	Если ТипЗнч(СтруктураЗаменять) = Тип("Структура") И СтруктураЗаменять.Количество() > 0 Тогда
		
		ЗаменятьПоляСвойства = ?(СтруктураЗаменять.Свойство("ПоляСвойства"), СтруктураЗаменять.ПоляСвойства, "//ПОЛЯ_СВОЙСТВА");
		ЗаменятьПоляКатегории = ?(СтруктураЗаменять.Свойство("ПоляКатегории"), СтруктураЗаменять.ПоляКатегории, "//ПОЛЯ_КАТЕГОРИИ");
		ЗаменятьСоединения = ?(СтруктураЗаменять.Свойство("Соединения"), СтруктураЗаменять.Соединения, "//СОЕДИНЕНИЯ");
		
	Иначе
		
		ЗаменятьПоляСвойства = "//ПОЛЯ_СВОЙСТВА";
		ЗаменятьПоляКатегории = "//ПОЛЯ_КАТЕГОРИИ";
		ЗаменятьСоединения = "//СОЕДИНЕНИЯ";
		
	КонецЕсли;
	
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = мТаблицаПолей;
		
	КонецЕсли;
	
	Если СтруктураПредставлениеПолей = Неопределено Тогда
		
		СтруктураПредставлениеПолей = мСтруктураПредставлениеПолей;
		
	КонецЕсли;
	
	Если СоответствиеНазначений = Неопределено Тогда
		
		СоответствиеНазначений = мСоответствиеНазначений;
		
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		
		Параметры = ПостроительОтчета.Параметры;
		
	КонецЕсли;
	
	ТекстПоляСвойства = "";
	ТекстПоляКатегории = "";
	ТекстСоединения = "";
	
	Если ТипЗнч(СоответствиеСвойствКатегорийИИзмерений) <> Тип("Соответствие") Тогда
		
		СоответствиеСвойствКатегорийИИзмерений = Новый Соответствие;
		
	КонецЕсли;

	Для каждого Поле из ТаблицаПолей Цикл
		
		СвойстваОбъектов = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать(, Новый Структура("НазначениеСвойства", Поле.Назначение));
		
		Пока СвойстваОбъектов.Следующий() Цикл

			Если СвойстваОбъектов.ЭтоГруппа ИЛИ СвойстваОбъектов.ПометкаУдаления Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СвойстваОбъектов.ТипЗначения.Типы().Количество() > 1 Тогда
				
				ПараметрПустоеЗначениеСвойства = "Неопределено";
				
			Иначе
				
				ТипСвойства = СвойстваОбъектов.ТипЗначения.Типы()[0];
				ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
				
				ИндексТекущегоВозможногоТипа = 1;
				
				Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
					
					Если ВозможныйТипСвойства = ТипСвойства Тогда
						
						_ИндексТекущегоВозможногоТипа = Формат(ИндексТекущегоВозможногоТипа, "ЧГ=0");
						ПараметрПустоеЗначениеСвойства = "&ПараметрПустоеЗначениеСвойства" + _ИндексТекущегоВозможногоТипа;
						
					КонецЕсли;
					
					ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ИмяСвойства = Поле.ИмяИзмерения + "Свойство" + СтрЗаменить(Строка(СвойстваОбъектов.Ссылка.УникальныйИдентификатор()), "-", "");

			// Поля
			ТекстПоляСвойства = ТекстПоляСвойства + ",
			|	ЕСТЬNULL (" + ИмяСвойства + ".Значение, " + ПараметрПустоеЗначениеСвойства + ") КАК " + ИмяСвойства + "Значение";
				
			// Соединения
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК " + ИмяСвойства + "
			|	ПО " + ИмяСвойства + ".Объект = " + Поле.ПутьКДанным + "
			|	И " + ИмяСвойства + ".Свойство = &Параметр" + ИмяСвойства + "}";

			Параметры.Вставить("Параметр" + ИмяСвойства, СвойстваОбъектов.Ссылка);
			СтруктураПредставлениеПолей.Вставить(ИмяСвойства + "Значение", СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")");
			СоответствиеНазначений.Вставить(СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")", СвойстваОбъектов.Ссылка);
			СоответствиеСвойствКатегорийИИзмерений.Вставить(ИмяСвойства + "Значение", Поле.ИмяИзмерения);
			
		КонецЦикла;
		
		Если Поле.НетКатегорий = Истина Тогда
					
			Продолжить;
					
		КонецЕсли;
		
		КатегорииОбъектов = Справочники.КатегорииОбъектов.Выбрать(,, Новый Структура("НазначениеКатегории", Поле.Назначение));
		
		Пока КатегорииОбъектов.Следующий() Цикл

			Если КатегорииОбъектов.ЭтоГруппа ИЛИ КатегорииОбъектов.ПометкаУдаления Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИмяКатегории = Поле.ИмяИзмерения + "Категория" + СтрЗаменить(Строка(КатегорииОбъектов.Ссылка.УникальныйИдентификатор()), "-", "");
				
			// Поля
			ТекстПоляКатегории = ТекстПоляКатегории + ",
			|	ВЫБОР КОГДА " + ИмяКатегории + ".Категория ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК " + ИмяКатегории + "Категория";
				
			// Источник для категорий
			ТекстСоединения = ТекстСоединения + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК " + ИмяКатегории + "
			|	ПО " + ИмяКатегории + ".Объект = " + Поле.ПутьКДанным + "
			|	И " + ИмяКатегории + ".Категория = &Параметр" + ИмяКатегории + "}";

			Параметры.Вставить("Параметр" + ИмяКатегории, КатегорииОбъектов.Ссылка);
			СтруктураПредставлениеПолей.Вставить(ИмяКатегории + "Категория", КатегорииОбъектов.Наименование + " (категория " + Поле.Представление + ")");
			СоответствиеСвойствКатегорийИИзмерений.Вставить(ИмяКатегории + "Категория", Поле.ИмяИзмерения);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляСвойства, ТекстПоляСвойства);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьПоляКатегории, ТекстПоляКатегории);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменятьСоединения, ТекстСоединения);
	
	мТаблицаПолей.Очистить();

КонецПроцедуры // ДобавитьВТекстЗапросаСвойстваИКатегории()

Процедура УстановитьТипыЗначенийСвойствДляОтбора(НастраиваемыйПостроительОтчета = Неопределено, СоответствиеНазначений = Неопределено, СтруктураПредставлениеПолей = Неопределено) Экспорт
	
	Если НастраиваемыйПостроительОтчета = Неопределено Тогда
		
		НастраиваемыйПостроительОтчета = ПостроительОтчета;
		
	КонецЕсли;
	
	Если СоответствиеНазначений = Неопределено Тогда
		
		СоответствиеНазначений = мСоответствиеНазначений;
		
	КонецЕсли;
	
	Если СтруктураПредставлениеПолей = Неопределено Тогда
		
		СтруктураПредставлениеПолей = мСтруктураПредставлениеПолей;
		
	КонецЕсли;
	
	Для каждого Поле из СтруктураПредставлениеПолей Цикл
		
		Назначение = СоответствиеНазначений[Поле.Значение];
			
		Если Назначение <> Неопределено Тогда
					
			ДоступноеПоле = НастраиваемыйПостроительОтчета.ДоступныеПоля.Найти(Поле.Ключ);
				
			Если ДоступноеПоле <> Неопределено И ДоступноеПоле.Отбор Тогда
					
				ДоступноеПоле.ТипЗначения = Назначение.ТипЗначения;
					
			КонецЕсли;

		КонецЕсли;
			
	КонецЦикла;
	
	ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
	
	ИндексТекущегоВозможногоТипа = 1;
			
	Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
				
		_ИндексТекущегоВозможногоТипа = Формат(ИндексТекущегоВозможногоТипа, "ЧГ=0");
		
		НастраиваемыйПостроительОтчета.Параметры.Вставить("ПараметрПустоеЗначениеСвойства" + _ИндексТекущегоВозможногоТипа, ОбщегоНазначения.ПустоеЗначениеТипа(ВозможныйТипСвойства));
		ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
	КонецЦикла;
	
КонецПроцедуры // УстановитьТипыЗначенийСвойствДляОтбора()

Процедура УстановитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета) Экспорт

	СтруктураКоллекцийПостроителяОтчета = Новый Структура("ДоступныеПоля, ВыбранныеПоля, ИзмеренияКолонки, ИзмеренияСтроки, Отбор, Порядок");
	
	Для каждого ЭлементСтруктуры Из СтруктураКоллекцийПостроителяОтчета Цикл
		
		Для Индекс = 0 По ПостроительОтчета[ЭлементСтруктуры.Ключ].Количество() - 1 Цикл
			
			Если ПустаяСтрока(ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].Имя) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтруктураПредставлениеПолей.Свойство(ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].Имя) Тогда
				
				ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].Представление = СтруктураПредставлениеПолей[ПостроительОтчета[ЭлементСтруктуры.Ключ][Индекс].Имя];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры // УстановитьПредставленияПолей()

Процедура НастроитьПостроительОтчета() Экспорт
	
	МассивСклады = Новый Массив;
	МассивТипыЦен = Новый Массив;
	
	НастройкиПостроителяОтчета = ПостроительОтчета.ПолучитьНастройки();
	ИнициализацияПостроителяОтчета();
	ПостроительОтчета.УстановитьНастройки(НастройкиПостроителяОтчета);
	
	Для Индекс = 1 по КоличествоОстатки Цикл
		
		Если Склады.Количество() < Индекс Тогда
			
			Склад = Справочники.Склады.ПустаяСсылка();
			ВключатьВИтог = 0;
			
		Иначе
			
			Склад = Склады.Получить(Индекс - 1).Склад;
			МассивСклады.Добавить(Склад);
			ВключатьВИтог = ?(Склады.Получить(Индекс - 1).ВключатьВИтог = Истина, 1, 0);
			
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить("Склад_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), Склад);
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоЦены Цикл
		
		Если ТипыЦен.Количество() < Индекс Тогда
			
			ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
			
		Иначе
			
			ТипЦен = ТипыЦен.Получить(Индекс - 1).ТипЦен;
			МассивТипыЦен.Добавить(ТипЦен);
			
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить("ТипЦен_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), ТипЦен);
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПродажи Цикл
		
		Если КоличествоПериодов < Индекс Тогда
			
			ПериодНачало = Дата('00010101');
			ПериодОкончание = Дата('00010101');
			
		Иначе
			
			ПериодНачало = ДатаФормирования;
			ПериодОкончание = ДатаФормирования;
			
			Если НаправлениеСортировкиПериодов = НаправлениеСортировки.Возр Тогда
				
				УстановитьПериод(ПериодНачало, ПериодОкончание, ПериодичностьПродаж, Индекс - КоличествоПериодов - 1, КоличествоРабочихДней);
				
			Иначе
				
				УстановитьПериод(ПериодНачало, ПериодОкончание, ПериодичностьПродаж, - Индекс, КоличествоРабочихДней);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НаправлениеСортировкиПериодов = НаправлениеСортировки.Возр Тогда
		
			Если Индекс = 1 Тогда
				
				ПостроительОтчета.Параметры.Вставить("ДатаНачПродажи", ?(ПериодНачало = Дата('00010101000000'), ПериодНачало, Новый Граница(НачалоДня(ПериодНачало), ВидГраницы.Включая)));
				
			КонецЕсли;
				
			Если Индекс = КоличествоПериодов Тогда
				
				ПостроительОтчета.Параметры.Вставить("ДатаКонПродажи", ?(ПериодОкончание = Дата('00010101000000'), ПериодОкончание, Новый Граница(КонецДня(ПериодОкончание), ВидГраницы.Включая)));
				
			КонецЕсли;
			
		Иначе
			
			Если Индекс = 1 Тогда
				
				ПостроительОтчета.Параметры.Вставить("ДатаКонПродажи", ?(ПериодОкончание = Дата('00010101000000'), ПериодОкончание, Новый Граница(КонецДня(ПериодОкончание), ВидГраницы.Включая)));
				
			КонецЕсли;
				
			Если Индекс = КоличествоПериодов Тогда
				
				ПостроительОтчета.Параметры.Вставить("ДатаНачПродажи", ?(ПериодНачало = Дата('00010101000000'), ПериодНачало, Новый Граница(НачалоДня(ПериодНачало), ВидГраницы.Включая)));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить("ПериодНач_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), ?(ПериодНачало = Дата('00010101000000'), ПериодНачало, НачалоДня(ПериодНачало)));
		ПостроительОтчета.Параметры.Вставить("ПериодКон_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), ?(ПериодОкончание = Дата('00010101000000'), ПериодОкончание, КонецДня(ПериодОкончание)));
		
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("ДатаЦены", ДатаФормирования);
	ПостроительОтчета.Параметры.Вставить("ДатаОстатки", ?(ДатаФормирования = Дата('00010101000000'), ДатаФормирования, Новый Граница(КонецДня(ДатаФормирования), ВидГраницы.Включая)));
	
	ПостроительОтчета.Параметры.Вставить("МассивСклады", ?(МассивСклады.Количество() > 0, МассивСклады, Неопределено));
	ПостроительОтчета.Параметры.Вставить("МассивТипыЦен", ?(МассивТипыЦен.Количество() > 0, МассивТипыЦен, Неопределено));
	
	ПостроительОтчета.Параметры.Вставить("ТипЦеныНоменклатуры", ТипЦеныНоменклатуры);
	
КонецПроцедуры // НастроитьПостроительОтчета()

Процедура ВывестиРезультат() Экспорт
	
	МассивДобавленныеПоля = Новый Массив;
	
	УстановитьДоступностьПолей("Остатки_", КоличествоОстатки, Истина);
	УстановитьДоступностьПолей("Продажи_", КоличествоПродажи, Истина);
	УстановитьДоступностьПолей("ПродажиПроцент_", КоличествоПродажи, Истина);
	УстановитьДоступностьПолей("Цена_", КоличествоЦены, Истина);
	УстановитьДоступностьПолей("ВалютаЦены_", КоличествоЦены, Истина);
	
	Для Индекс = 1 по Склады.Количество() Цикл
		
		МассивДобавленныеПоля.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить("Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")));
		
	КонецЦикла;
	
	Для Индекс = 1 по ТипыЦен.Количество() Цикл
		
		МассивДобавленныеПоля.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить("Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")));
		МассивДобавленныеПоля.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить("ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")));
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПериодов Цикл
		
		МассивДобавленныеПоля.Добавить(ПостроительОтчета.ВыбранныеПоля.Добавить("Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")));
		
	КонецЦикла;
	
	ПостроительОтчета.Выполнить();

	ТаблицаРезультат = ПостроительОтчета.Результат.Выгрузить();
	
	Для каждого ДобавленноеПоле из МассивДобавленныеПоля Цикл
		
		ПостроительОтчета.ВыбранныеПоля.Удалить(ДобавленноеПоле);
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПоля Цикл
		
		Если Индекс <= ПостроительОтчета.ВыбранныеПоля.Количество() Тогда
			
			ВыбранноеПоле = ПостроительОтчета.ВыбранныеПоля.Получить(Индекс - 1);
			
			Если ВыбранноеПоле <> Неопределено Тогда
				
				НайденнаяКолонка = ТаблицаРезультат.Колонки.Найти(ВыбранноеПоле.Имя);
				
				Если НайденнаяКолонка <> Неопределено Тогда
					
					НайденнаяКолонка.Имя = "Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяКолонкиМестаХранения = Неопределено;
	
	Для каждого Колонка из ТаблицаРезультат.Колонки Цикл
		
		Если Колонка.Заголовок = "МестаХранения" Тогда
			
			ИмяКолонкиМестаХранения = Колонка.Имя;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для каждого СтрокаРезультат из ТаблицаРезультат Цикл
		
		ОстаткиИтог = 0;
			
		Для Индекс = 1 по Склады.Количество() Цикл
				
			Если Склады.Получить(Индекс - 1).ВключатьВИтог Тогда
				
				ОстаткиИтог = ОстаткиИтог + СтрокаРезультат["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")];
				
			КонецЕсли;
				
		КонецЦикла;
		
		СтрокаРезультат.ОстаткиИтог = ОстаткиИтог;
		
		Если ВыводитьПроцент Тогда
			
			Для Индекс = 1 по КоличествоПериодов Цикл
				
				Продажи = СтрокаРезультат["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")];
				
				Если ОстаткиИтог <= 0 И Продажи > 0 Тогда
					
					СтрокаРезультат["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")] = -1000;
					
				ИначеЕсли ОстаткиИтог > 0 И Продажи > 0 Тогда
					
					СтрокаРезультат["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")] = ОстаткиИтог * 100 / Продажи;
					
				Иначе
					
					СтрокаРезультат["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")] = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИмяКолонкиМестаХранения <> Неопределено Тогда
			
			СтрокаРезультат[ИмяКолонкиМестаХранения] = ПолучитьМестаХранения(СтрокаРезультат.Номенклатура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Товары.Загрузить(ТаблицаРезультат);
	
	УстановитьДоступностьПолей("Остатки_", КоличествоОстатки, Ложь);
	УстановитьДоступностьПолей("Продажи_", КоличествоПродажи, Ложь);
	УстановитьДоступностьПолей("ПродажиПроцент_", КоличествоПродажи, Ложь);
	УстановитьДоступностьПолей("Цена_", КоличествоЦены, Ложь);
	УстановитьДоступностьПолей("ВалютаЦены_", КоличествоЦены, Ложь);
	
КонецПроцедуры // ВывестиРезультат()

Процедура УстановитьДоступностьПолей(ПрефиксИмениПоля, КоличествоПолей, Доступность)
	
	Для Индекс = 1 по КоличествоПолей Цикл
		
		ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(ПрефиксИмениПоля + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"));
		
		Если ДоступноеПоле <> Неопределено Тогда
			
			ДоступноеПоле.Поле = Доступность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьПолей()

Процедура УстановитьДоступностьОтборов() Экспорт
	
	Для Индекс = 1 по КоличествоОстатки Цикл
		
		ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти("Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"));
		
		Если ДоступноеПоле <> Неопределено Тогда
			
			ДоступноеПоле.Отбор = Индекс <= Склады.Количество();
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоЦены Цикл
		
		ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти("Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"));
		
		Если ДоступноеПоле <> Неопределено Тогда
			
			ДоступноеПоле.Отбор = Индекс <= ТипыЦен.Количество();
			
		КонецЕсли;
		
		ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти("ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"));
		
		Если ДоступноеПоле <> Неопределено Тогда
			
			ДоступноеПоле.Отбор = Индекс <= ТипыЦен.Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПродажи Цикл
		
		ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти("Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"));
		
		Если ДоступноеПоле <> Неопределено Тогда
			
			ДоступноеПоле.Отбор = Индекс <= КоличествоПериодов;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПродажи Цикл
		
		ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти("ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"));
		
		Если ДоступноеПоле <> Неопределено Тогда
			
			ДоступноеПоле.Отбор = Индекс <= КоличествоПериодов;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьОтборов()

Процедура УстановитьПредставленияОтборов() Экспорт
	
	Для Индекс = 1 по КоличествоОстатки Цикл
		
		Если Склады.Количество() < Индекс Тогда
			
			мСтруктураПредставлениеПолей.Вставить("Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), "");
			
		ИначеЕсли ПустаяСтрока(Склады.Получить(Индекс - 1).Представление) Тогда
				
			мСтруктураПредставлениеПолей.Вставить("Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), "Склад: " + Склады.Получить(Индекс - 1).Склад.Наименование);
				
		Иначе
				
			мСтруктураПредставлениеПолей.Вставить("Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), Склады.Получить(Индекс - 1).Представление);
				
		КонецЕсли;
			
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоЦены Цикл
		
		Если ТипыЦен.Количество() < Индекс Тогда
			
			мСтруктураПредставлениеПолей.Вставить("Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), "");
			
		ИначеЕсли ПустаяСтрока(ТипыЦен.Получить(Индекс - 1).Представление) Тогда
			
			мСтруктураПредставлениеПолей.Вставить("Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), "Цена: " + ТипыЦен.Получить(Индекс - 1).ТипЦен.Наименование);
			
		Иначе
			
			мСтруктураПредставлениеПолей.Вставить("Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), ТипыЦен.Получить(Индекс - 1).Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПродажи Цикл
		
		Если КоличествоПериодов < Индекс Тогда
			
			мСтруктураПредставлениеПолей.Вставить("Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), "");
			
		Иначе
			
			ПериодНачало = ДатаФормирования;
			ПериодОкончание = ДатаФормирования;
			
			УстановитьПериод(ПериодНачало, ПериодОкончание, ПериодичностьПродаж, Индекс - КоличествоПериодов - 1, КоличествоРабочихДней);
			
			Если ПериодичностьПродаж = 0 Тогда
				
				мСтруктураПредставлениеПолей.Вставить("Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), "Продажи: с " + Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]) +  " по " + Формат(ПериодОкончание, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]));
				
			Иначе
				
				мСтруктураПредставлениеПолей.Вставить("Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0"), "Продажи: " + Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	
КонецПроцедуры // УстановитьПредставленияОтборов()

Процедура УстановитьПредставленияКолонок(ТабличноеПоле) Экспорт
	
	Колонки = ТабличноеПоле.Колонки;
	
	Для Индекс = 1 по КоличествоОстатки Цикл
		
		Если Склады.Количество() < Индекс Тогда
			
			Колонки["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "";
			
		ИначеЕсли ПустаяСтрока(Склады.Получить(Индекс - 1).Представление) Тогда
				
			Колонки["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "Склад: " + Склады.Получить(Индекс - 1).Склад.Наименование;
				
		Иначе
				
			Колонки["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = Склады.Получить(Индекс - 1).Представление;
				
		КонецЕсли;
			
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоЦены Цикл
		
		Если ТипыЦен.Количество() < Индекс Тогда
			
			Колонки["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки =  "";
			Колонки["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки =  "";
			
		ИначеЕсли ПустаяСтрока(ТипыЦен.Получить(Индекс - 1).Представление) Тогда
			
			Колонки["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "Цена: " + ТипыЦен.Получить(Индекс - 1).ТипЦен.Наименование;
			Колонки["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "Валюта: " + ТипыЦен.Получить(Индекс - 1).ТипЦен.Наименование;
			
		Иначе
			
			Колонки["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = ТипыЦен.Получить(Индекс - 1).Представление;
			Колонки["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "Валюта: " + ТипыЦен.Получить(Индекс - 1).Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПродажи Цикл
		
		Если КоличествоПериодов < Индекс Тогда
			
			Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "";
			Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "";
			
		Иначе
			
			ПериодНачало = ДатаФормирования;
			ПериодОкончание = ДатаФормирования;
			
			Если НаправлениеСортировкиПериодов = НаправлениеСортировки.Возр Тогда
				
				УстановитьПериод(ПериодНачало, ПериодОкончание, ПериодичностьПродаж, Индекс - КоличествоПериодов - 1, КоличествоРабочихДней);
				
			Иначе
				
				УстановитьПериод(ПериодНачало, ПериодОкончание, ПериодичностьПродаж, - Индекс, КоличествоРабочихДней);
				
			КонецЕсли;
			
			Если (ПериодичностьПродаж = 0 И КоличествоРабочихДней = 1) ИЛИ ПериодичностьПродаж = 1 Тогда
				
				Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]);
				Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]);
				
			ИначеЕсли ПериодичностьПродаж < 2 Тогда
				
				Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "С " + Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]) + Символы.ПС + "по " + Формат(ПериодОкончание, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]);
				Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "С " + Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]) + Символы.ПС + "по " + Формат(ПериодОкончание, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]) + "(%)";
				
			Иначе
				
				Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]);
				Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = Формат(ПериодНачало, мСтруктураФорматаПолей["Период" + Строка(ПериодичностьПродаж)]) + "(%)";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПоля Цикл
		
		Если Индекс <= ПостроительОтчета.ВыбранныеПоля.Количество() Тогда
			
			ВыбранноеПоле = ПостроительОтчета.ВыбранныеПоля.Получить(Индекс - 1);
			
			Если ВыбранноеПоле = Неопределено Тогда
				
				Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = "";
				
			Иначе
				
				Представление = ВыбранноеПоле.Представление;
				
				Если Найти(Представление, "(св-во") > 0 Тогда
					
					Представление = СокрЛП(Лев(Представление, Найти(Представление, "(св-во") - 1));
					
				ИначеЕсли Найти(Представление, "(категория") > 0 Тогда
					
					Представление = СокрЛП(Лев(Представление, Найти(Представление, "(категория") - 1));
					
				Иначе
					
					ПутьКДаннымПоСтрокам = СтрЗаменить(ВыбранноеПоле.ПутьКДанным, ".", Символы.ПС);
					
					Поля = ПостроительОтчета.ДоступныеПоля;
					
					Для ИндексСтроки = 1 По СтрЧислоСтрок(ПутьКДаннымПоСтрокам) Цикл
						
						НайденноеПоле = Поля.Найти(СтрПолучитьСтроку(ПутьКДаннымПоСтрокам, ИндексСтроки));
						
						Если НайденноеПоле <> Неопределено Тогда
							
							Представление = НайденноеПоле.Представление;
							
						КонецЕсли;
						
						Поля = НайденноеПоле.Поля;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ТекстШапки = Представление;
				
				ФорматВыбранногоПоля = ПолучитьСвойствоВыбранногоПоля(ВыбранноеПоле.Имя, "Формат");
				
				Если НЕ ПустаяСтрока(ФорматВыбранногоПоля) Тогда
					
					Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Формат = ФорматВыбранногоПоля;
					
				Иначе
					
					Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Формат = "ЧДЦ=0; ДФ=dd.MM.yyyy; БЛ=Нет; БИ=Да";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПредставленияПолей(мСтруктураПредставлениеПолей, ПостроительОтчета);
	
КонецПроцедуры // УстановитьПредставленияКолонок()

Процедура УстановитьПериод(ДатаНач, ДатаКон, Периодичность, КоличествоПериодов, КоличествоРабочихДней) Экспорт
	
	Если Периодичность = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ " + Строка(- КоличествоПериодов * КоличествоРабочихДней) + "
		|	Календарь.ДатаКалендаря КАК ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
		|ГДЕ
		|	Календарь.ДатаКалендаря < &ДатаФормирования
		|	И Календарь.ВидДня В(&МассивВидовРабочихДней)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаКалендаря УБЫВ");
		
		МассивВидовРабочихДней = Новый Массив;
		МассивВидовРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		МассивВидовРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
		Запрос.УстановитьПараметр("МассивВидовРабочихДней", МассивВидовРабочихДней);
			
		
		Запрос.УстановитьПараметр("ДатаФормирования", ДатаФормирования);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
				
			Если Индекс = (- КоличествоПериодов - 1) * КоличествоРабочихДней + 1 Тогда
					
				ДатаКон = Выборка.ДатаКалендаря;
				
			КонецЕсли;
					
			Если Индекс = - КоличествоПериодов * КоличествоРабочихДней Тогда
					
				ДатаНач = Выборка.ДатаКалендаря;
					
			КонецЕсли;
				
			Индекс = Индекс + 1;
				
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли Периодичность = 1 Тогда
		
		ТекущаяПериодичность = "ДЕНЬ";
	
	ИначеЕсли Периодичность = 2 Тогда
		
		ТекущаяПериодичность = "НЕДЕЛЯ";
		
	ИначеЕсли Периодичность = 3 Тогда
		
		ТекущаяПериодичность = "ДЕКАДА";
		
	ИначеЕсли Периодичность = 4 Тогда
		
		ТекущаяПериодичность = "МЕСЯЦ";
		
	ИначеЕсли Периодичность = 5 Тогда
		
		ТекущаяПериодичность = "КВАРТАЛ";
		
	ИначеЕсли Периодичность = 6 Тогда
		
		ТекущаяПериодичность = "ПОЛУГОДИЕ";
		
	ИначеЕсли Периодичность = 7 Тогда
		
		ТекущаяПериодичность = "ГОД";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если ДатаНач = Дата('00010101') Тогда
		
		ДатаНач = ТекущаяДата();
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНач, " + ТекущаяПериодичность + "," + КоличествоПериодов + "), " + ТекущаяПериодичность + ") КАК ДатаНач,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНач, " + ТекущаяПериодичность + "," + КоличествоПериодов + "), " + ТекущаяПериодичность + ") КАК ДатаКон");
		
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
		
	ДатаНач = Выборка.ДатаНач;
	ДатаКон = Выборка.ДатаКон;
	
КонецПроцедуры // УстановитьПериод()

Процедура УправлениеОтображениемКолонок(ТабличноеПоле) Экспорт
	
	Колонки = ТабличноеПоле.Колонки;
	
	Для Индекс = 1 по КоличествоОстатки Цикл
		
		Если Склады.Количество() < Индекс Тогда
			
			Колонки["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Ложь;
			Колонки["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Ложь;
			ТабличноеПоле.НастройкаОтбораСтрок["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Ложь;
			
		Иначе
			
			Колонки["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Истина;
			Колонки["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Истина;
			ТабличноеПоле.НастройкаОтбораСтрок["Остатки_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоЦены Цикл
		
		Если ТипыЦен.Количество() < Индекс Тогда
			
			Колонки["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Ложь;
			Колонки["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Ложь;
			ТабличноеПоле.НастройкаОтбораСтрок["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Ложь;
			
			Колонки["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Ложь;
			Колонки["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Ложь;
			ТабличноеПоле.НастройкаОтбораСтрок["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Ложь;
			
		Иначе
			
			Колонки["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Истина;
			Колонки["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Истина;
			ТабличноеПоле.НастройкаОтбораСтрок["Цена_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Истина;
			
			Колонки["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Истина;
			Колонки["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Истина;
			ТабличноеПоле.НастройкаОтбораСтрок["ВалютаЦены_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПродажи Цикл
		
		Если КоличествоПериодов < Индекс Тогда
			
			Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Ложь;
			Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Ложь;
			ТабличноеПоле.НастройкаОтбораСтрок["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Ложь;
			
			Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Ложь;
			Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Ложь;
			ТабличноеПоле.НастройкаОтбораСтрок["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Ложь;
			
		Иначе
			
			Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Истина;
			Колонки["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Истина;
			ТабличноеПоле.НастройкаОтбораСтрок["Продажи_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Истина;
			
			Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = ВыводитьПроцент;
			Колонки["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = ВыводитьПроцент;
			ТабличноеПоле.НастройкаОтбораСтрок["ПродажиПроцент_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = ВыводитьПроцент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = 1 по КоличествоПоля Цикл
		
		Если ПостроительОтчета.ВыбранныеПоля.Количество() < Индекс Тогда
			
			Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Ложь;
			Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Ложь;
			ТабличноеПоле.НастройкаОтбораСтрок["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Ложь;
			
		Иначе
			
			Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Видимость = Истина;
			Колонки["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].ИзменятьНастройку = Истина;
			ТабличноеПоле.НастройкаОтбораСтрок["Поле_" + Формат(Индекс, "ЧЦ=2; ЧВН=; ЧГ=0")].Доступность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Склады.Количество() = 0 Тогда
		
		Колонки["ОстаткиИтог"].Видимость = Ложь;
		Колонки["ОстаткиИтог"].ИзменятьНастройку = Ложь;
		ТабличноеПоле.НастройкаОтбораСтрок["ОстаткиИтог"].Доступность = Ложь;
		
	Иначе
		
		Колонки["ОстаткиИтог"].Видимость = Истина;
		Колонки["ОстаткиИтог"].ИзменятьНастройку = Истина;
		ТабличноеПоле.НастройкаОтбораСтрок["ОстаткиИтог"].Доступность = Истина;
		
	КонецЕсли;
	
	Если ПериодичностьПродаж = 0 Тогда
		
		ТабличноеПоле.ВысотаШапки = 2;
		
	Иначе
		
		ТабличноеПоле.ВысотаШапки = 1;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеОтображениемКолонок()

Функция ПолучитьМестаХранения(Номенклатура)
	
	Результат = "";
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестаХраненияНоменклатуры.Склад,
	|	МестаХраненияНоменклатуры.МестоХранения
	|ИЗ
	|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|ГДЕ
	|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестаХраненияНоменклатуры.Приоритет");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат = Результат + ?(ПустаяСтрока(Результат), "", "; ") + СокрЛП(Выборка.МестоХранения.Наименование);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьМестаХранения()	

Функция ВосстановитьНастройки(ЭлементыФормы) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
		
		Если Результат.СохраненнаяНастройка.Свойство("НастройкиКолонокТабличноеПолеТовары") Тогда
			
			УстановитьНастройкиКолонок(ЭлементыФормы.ТабличноеПолеТовары, Результат.СохраненнаяНастройка.НастройкиКолонокТабличноеПолеТовары);
			
		КонецЕсли;
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;

КонецФункции // ВосстановитьНастройки()

Процедура СохранитьНастройки(ЭлементыФормы) Экспорт
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	СохраненнаяНастройка.Вставить("НастройкиКолонокТабличноеПолеТовары", ПолучитьНастройкиКолонок(ЭлементыФормы.ТабличноеПолеТовары));
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

Функция ПолучитьНастройкиКолонок(ТабличноеПоле) Экспорт
	
	НастройкаКолонок = Новый Массив;
	
	Для каждого Колонка из ТабличноеПоле.Колонки Цикл
		
		НастройкаКолонок.Добавить(Новый Структура("Имя, Видимость, Ширина", Колонка.Имя, Колонка.Видимость, Колонка.Ширина));
		
	КонецЦикла;
	
	Возврат НастройкаКолонок;
	
КонецФункции // ПолучитьНастройкиКолонок()

Процедура УстановитьНастройкиКолонок(ТабличноеПоле, НастройкиКолонок) Экспорт
	
	Если ТипЗнч(НастройкиКолонок) <> Тип("Массив") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Индекс = 0;
	
	Для каждого НастройкаКолонки из НастройкиКолонок Цикл
		
		НастраиваемаяКолонка = ТабличноеПоле.Колонки.Найти(НастройкаКолонки.Имя);
		
		Если НастраиваемаяКолонка = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТабличноеПоле.Колонки.Сдвинуть(НастраиваемаяКолонка, Индекс - ТабличноеПоле.Колонки.Индекс(НастраиваемаяКолонка));
		НастраиваемаяКолонка.Видимость = НастройкаКолонки.Видимость;
		НастраиваемаяКолонка.Ширина = НастройкаКолонки.Ширина;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьНастройкиКолонок()

Процедура УстановитьСвойствоВыбранногоПоля(ИмяПоля, ИмяСвойства, Значение) Экспорт
	
	Если ПустаяСтрока(ИмяПоля) = Истина Тогда
		
		Возврат;
		
	ИначеЕсли мСвойстваВыбранныхПолей.Свойство(ИмяПоля) = Ложь Тогда
		
		мСвойстваВыбранныхПолей.Вставить(ИмяПоля, Новый Структура(ИмяСвойства, Значение));
		
	ИначеЕсли мСвойстваВыбранныхПолей[ИмяПоля].Свойство(ИмяСвойства) = Ложь Тогда
		
		мСвойстваВыбранныхПолей[ИмяПоля].Вставить(ИмяСвойства, Значение);
		
	Иначе
		
		мСвойстваВыбранныхПолей[ИмяПоля][ИмяСвойства] = Значение;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойствоВыбранногоПоля()

Функция ПолучитьСвойствоВыбранногоПоля(ИмяПоля, ИмяСвойства) Экспорт
	
	ЗначениеСвойства = "";
	
	Если ПустаяСтрока(ИмяПоля) Тогда
		
		Возврат ЗначениеСвойства;
		
	Иначе
		
		СтруктураНастройки = Неопределено;
		
		Если мСвойстваВыбранныхПолей.Свойство(ИмяПоля, СтруктураНастройки) = Ложь Тогда
			
			Возврат ЗначениеСвойства;
			
		ИначеЕсли ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
			
			СтруктураНастройки.Свойство(ИмяСвойства, ЗначениеСвойства);
			Возврат ЗначениеСвойства;
			
		Иначе	
			
			Возврат ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьРазмещениеВыбранногоПоля()

Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	СтруктураСНастройками.Вставить("Склады", Склады.Выгрузить());
	СтруктураСНастройками.Вставить("ТипыЦен", ТипыЦен.Выгрузить());
	СтруктураСНастройками.Вставить("ПериодичностьПродаж", ПериодичностьПродаж);
	СтруктураСНастройками.Вставить("КоличествоПериодов", КоличествоПериодов);
	СтруктураСНастройками.Вставить("КоличествоРабочихДней", КоличествоРабочихДней);
	СтруктураСНастройками.Вставить("ВыводитьПроцент", ВыводитьПроцент);
	СтруктураСНастройками.Вставить("ТипЦеныНоменклатуры", ТипЦеныНоменклатуры);
	СтруктураСНастройками.Вставить("СвойстваВыбранныхПолей", мСвойстваВыбранныхПолей);
	СтруктураСНастройками.Вставить("НаправлениеСортировкиПериодов", НаправлениеСортировкиПериодов);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, Отчет = Неопределено) Экспорт
	
	Перем ТаблицаЗначенийСклады, ТаблицаЗначенийтипыЦен, СвойстваВыбранныхПолей;
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("Склады", ТаблицаЗначенийСклады);
	
	Если ТипЗнч(ТаблицаЗначенийСклады) = Тип("ТаблицаЗначений") Тогда
		
		Склады.Загрузить(ТаблицаЗначенийСклады);
		
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ТипыЦен", ТаблицаЗначенийТипыЦен);
	
	Если ТипЗнч(ТаблицаЗначенийТипыЦен) = Тип("ТаблицаЗначений") Тогда
		
		ТипыЦен.Загрузить(ТаблицаЗначенийТипыЦен);
		
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("ПериодичностьПродаж", ПериодичностьПродаж);
	СтруктураСНастройками.Свойство("КоличествоПериодов", КоличествоПериодов);
	СтруктураСНастройками.Свойство("КоличествоРабочихДней", КоличествоРабочихДней);
	СтруктураСНастройками.Свойство("ВыводитьПроцент", ВыводитьПроцент);
	СтруктураСНастройками.Свойство("ТипЦеныНоменклатуры", ТипЦеныНоменклатуры);
	СтруктураСНастройками.Свойство("СвойстваВыбранныхПолей", СвойстваВыбранныхПолей);
	СтруктураСНастройками.Свойство("НаправлениеСортировкиПериодов", НаправлениеСортировкиПериодов);
	
	Если ТипЗнч(СвойстваВыбранныхПолей) = Тип("Структура") Тогда
		
		мСвойстваВыбранныхПолей = СвойстваВыбранныхПолей;
		
	КонецЕсли;
	
	ИнициализацияПостроителяОтчета();
	
	ПостроительОтчета.УстановитьНастройки(СтруктураСНастройками.НастройкиПостроителя);
	
	Возврат Истина;
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

КоличествоПоля = 40;
КоличествоОстатки = 10;
КоличествоПродажи = 30;
КоличествоЦены = 10;

мТаблицаПолей = Новый ТаблицаЗначений;
мТаблицаПолей.Колонки.Добавить("ПутьКДанным");   // описание поля запроса, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("ИмяИзмерения");  // имя поля запроса, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("Представление"); // представление поля, для которого добавляются свойства и категории
мТаблицаПолей.Колонки.Добавить("Назначение");    // назначение свойств/категорий объектов для данного поля
мТаблицаПолей.Колонки.Добавить("НетКатегорий");  // признак НЕиспользования категорий для объекта

мСтруктураФорматаПолей = Новый Структура;
мСтруктураФорматаПолей.Вставить("Период0", "ДФ = дд.ММ.гггг");
мСтруктураФорматаПолей.Вставить("Период1", "ДФ = дд.ММ.гггг");
мСтруктураФорматаПолей.Вставить("Период2", "ДФ = '""Неделя с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("Период3", "ДФ = '""Декада с"" дд.ММ.гггг '");
мСтруктураФорматаПолей.Вставить("Период4", "ДФ = 'ММММ гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("Период5", "ДФ = 'к ""квартал"" гггг ""г.""'");
мСтруктураФорматаПолей.Вставить("Период6", "ДФ = '""Полугодие с"" дд.ММ.гггг""'");
мСтруктураФорматаПолей.Вставить("Период7", "ДФ = 'гггг ""г.""'");

мСтруктураПредставлениеПолей = Новый Структура;
мСоответствиеНазначений = Новый Соответствие;
мСвойстваВыбранныхПолей = Новый Структура;

#КонецЕсли