Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПорядокСписанияПартий; // (Общ)
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мДокументПоступленияСсылка Экспорт;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мУдалятьДвижения;

Перем мУказаниеСкладовВТЧ Экспорт;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет табличные части документа по основанию
//
Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ЗаполнитьПоПоступлению();
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ЗаполнитьПоДопРасходам();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" 
// по данным документов: ПоступлениеДопРасходов, Корректировка поступления
//
Процедура ЗаполнитьПоДопРасходам()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходовТовары.НомерСтроки                КАК НомерСтроки,
	|	ПоступлениеДопРасходовТовары.Номенклатура               КАК Номенклатура,
	|	ПоступлениеДопРасходовТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ПоступлениеДопРасходовТовары.Коэффициент                КАК Коэффициент,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК Количество,
	|	ПоступлениеДопРасходовТовары.СуммаНДС                   КАК СуммаНДС,
	|	ПоступлениеДопРасходовТовары.СуммаТовара                КАК СуммаТовара,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПоступлениеДопРасходовТовары.ЕдиницаИзмерения.Вес, 0) 
	|		* ПоступлениеДопРасходовТовары.Количество
	|		КАК Число(15,3))                                    КАК ВесТовара,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК КоличествоТовара,
	|	ПоступлениеДопРасходовТовары.Сумма                      КАК Сумма,
	|	ПоступлениеДопРасходовТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеДопРасходовТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	ВЫБОР	КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров ИЛИ ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ 
	|			ТОГДА ДокументПартии.Склад
	|			КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары 
	|			ТОГДА ДокументПартии.СкладОрдер.Склад
	|			ИНАЧЕ ДокументПартии.СкладОрдер 
	|	КОНЕЦ                                                   КАК Склад,
	|	ПоступлениеДопРасходовТовары.ЗаказПокупателя            КАК ЗаказПокупателя,
	|	ПоступлениеДопРасходовТовары.ДокументПартии             КАК ДокументПартии,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС           КАК СтавкаНДС,
	|	ПоступлениеДопРасходовТовары.Количество                 КАК КоличествоДоИзменения,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС           КАК СтавкаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.СуммаНДС                   КАК СуммаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.Сумма                      КАК СуммаДоИзменения,
	|	ИСТИНА                                                  КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ДокументПоступления.Сумма <> 0 тогда
		
		СуммаКРаспределению = ДокументПоступления.Сумма;
		НДСКРаспределению   = ДокументПоступления.СуммаНДС;
		
		// Определим базис распределения
		КолонкаБазиса = "";
		Если ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
			КолонкаБазиса = "КоличествоТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
			КолонкаБазиса = "СуммаТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
			КолонкаБазиса = "ВесТовара";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
			//Не выбран способ распределения
			Возврат;
		ИначеЕсли ТаблицаТоваров.Итог(КолонкаБазиса) = 0 тогда 
			//Базис распределения - пустая колонка!
			Возврат;
		КонецЕсли;
		
		БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
		ИтогРаспределения  = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);
		
		Если НЕ (НДСКРаспределению = 0) тогда
			ИтогРаспределенияНДС = ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
		КонецЕсли;
		
		Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл
			Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
				ТаблицаТоваров[НомерСтрокиТаблицы].Сумма  = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма + ИтогРаспределения[НомерСтрокиТаблицы];
				ТаблицаТоваров[НомерСтрокиТаблицы].СуммаДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма;
			КонецЕсли;
			Если Не(НДСКРаспределению = 0) тогда
				Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС + ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДСДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Товары.Загрузить(ТаблицаТоваров);
	
КонецПроцедуры

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	СвойстваСклада.Вставить("ВидимостьСклада",              КорректироватьБУиНУ И мУказаниеСкладовВТЧ);
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ПолучитьСвойстваЗаказаПоставщикуВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа        = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
		ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам И КорректироватьБУиНУ И УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(Неопределено, ДоговорКонтрагента, "Поступление"));
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
		СвойстваЗаказа.ВидимостьЗаказа И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	Возврат СвойстваЗаказа;
	
КонецФункции

// Процедура заполняет табличные части "Товары" и "Услуги"
// по данным документов: ПоступлениеТоваровУслуг, Корректировка поступления
//
Процедура ЗаполнитьПоПоступлению()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументПоступления.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура               КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест             КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест       КАК ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.Коэффициент                КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество                 КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Цена                       КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма                      КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС                  КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС                   КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Заказ                      КАК Заказ,
	|	ПоступлениеТоваровУслугТовары.Склад                      КАК Склад,
	|	ПоступлениеТоваровУслугТовары.ПриходныйОрдер             КАК ПриходныйОрдер,
	|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику            КАК ЗаказПоставщику,
	|	ПоступлениеТоваровУслугТовары.КлючСвязи                  КАК КлючСвязи,";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПоступлениеТоваровУслугТовары.ДокументПартии            КАК ДокументПартии,
		|	ПоступлениеТоваровУслугТовары.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.ЦенаДоКорректировки       КАК ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаДоКорректировки      КАК СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаНДСДоКорректировки   КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугТовары.Номенклатура               КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры          КАК СерияНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество                 КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Цена                       КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС                  КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС                   КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Сумма                      КАК СуммаДоИзменения,
	|	ИСТИНА                                                   КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|/////////////////////////////////////////////////////////////////////////////
	|;
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура         КАК Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Содержание           КАК Содержание,
	|	ПоступлениеТоваровУслугУслуги.Заказ                КАК Заказ,
	|	ПоступлениеТоваровУслугУслуги.Количество           КАК Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена                 КАК Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма                КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС            КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС             КАК СуммаНДС,
	|	ПоступлениеТоваровУслугУслуги.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПоступлениеТоваровУслугУслуги.Подразделение        КАК Подразделение,
	|	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат         КАК СтатьяЗатрат,
	|	ПоступлениеТоваровУслугУслуги.ЗаказПоставщику      КАК ЗаказПоставщику,
	|";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПоступлениеТоваровУслугУслуги.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.ЦенаДоКорректировки       КАК ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаДоКорректировки      КАК СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДСДоКорректировки   КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Содержание   КАК СодержаниеДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Количество   КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Цена         КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Сумма        КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС    КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС     КАК СуммаНДСДоИзменения,
	|	ИСТИНА                                     КАК ЕстьВДокументеПоступления
	|
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	Результат = Запрос.ВыполнитьПакет();
	
	Товары.Загрузить(Результат[0].Выгрузить());
	Услуги.Загрузить(Результат[1].Выгрузить());
	СерийныеНомера.Загрузить(ДокументПоступления.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

// Процедура заполянет шапку документа по документу поступления 
//
// Параметры:
// 	 ЗаполнятьРедактируемыеРеквизиты - Булево - Признак того, что нужно перезаполнить реквизиты шапки, редактируемые в форме
//
Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	НезаполняемыеРеквизиты = "Дата, Номер, ПометкаУдаления, Проведен, ДокументПоступления, ВидОперации,
		|НомерВходящегоДокумента, ДатаВходящегоДокумента, КорректироватьБУиНУ, КорректироватьНДС,
		|Ответственный, Комментарий, ВидПоступления";
		
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты + ", БанковскийСчетКонтрагента, Грузоотправитель, Грузополучатель, 
			|ВосстановитьНДС";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Получим ссылку на исходный исправляемый документ поступления
	мДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	Если ЗначениеЗаполнено(мДокументПоступленияСсылка) Тогда
		
		// Заполним основные реквизиты шапки по основанию
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументПоступленияСсылка);
		Если ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			ДоговорКонтрагента = мДокументПоступленияСсылка.ДоговорКонтрагента;
			ВалютаДокумента = мДокументПоступленияСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ИначеЕсли ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в документе основания
		МетаданныеДокументаОснования = мДокументПоступленияСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перезаполним шапку по документу поступления
	Если КорректироватьБУиНУ Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументПоступления);
		
		Если ТипЗнч(СтруктураНезаполняемыеРеквизиты.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			И СтруктураНезаполняемыеРеквизиты.ДокументПоступления.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			
			Склад = ДокументПоступления.СкладОрдер.Склад;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);

	ДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
		Иначе	
			ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
	КонецЕсли;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

//// Функция возвращает последний кооректирующий документ
////
//// Возвращаемое значение:
//// 	Ссылка на документ КорректировкаПоступления
////
Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &Ссылка
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
		|	И КорректировкаПоступления.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат ДокументСсылка;
	КонецЕсли;
		
КонецФункции

// Функция возвращает признак возможности корректировки по видам учета
// 
// Возвращаемое значение:
// 	Булево
Функция ДоступнаКорректировкаБУиНУ() Экспорт
	
	Возврат (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И ЗначениеЗаполнено(ДокументПоступления.ДоговорКонтрагента))
		ИЛИ (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") И ДокументПоступления.КорректироватьБУиНУ);
	
КонецФункции

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт

	// Если договор с комитентом, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Услуги.Очистить();

	КонецЕсли;

КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента) 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента)

	ТаблицаТЧ.Индексы.Добавить("НомерСтроки");
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		
		Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			Если СтруктураШапкиДокумента["СкладВТабличнойЧасти"]
			И НЕ ТаблицаТЧ.Колонки.Найти("Склад") = Неопределено Тогда
				Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
					СтрокаДвижений.Склад = СтрокаТЧ.Склад;
				ИначеЕсли ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
					Если СтрокаТЧ.БезПраваПродажи Тогда
						СтрокаДвижений.Склад = СтрокаТЧ.Склад;
					Иначе
						СтрокаДвижений.Склад = СтрокаТЧ.ПриходныйОрдерСклад;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ТипЗнч(СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
					СтрокаДвижений.Склад = СкладОрдер;
				ИначеЕсли ТипЗнч(СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
					Если НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
						СтрокаДвижений.Склад = СтрокаТЧ.ПриходныйОрдерСклад;
					Иначе
						Если СтрокаТЧ.БезПраваПродажи Тогда
							СтрокаДвижений.Склад = СтрокаТЧ.Склад;
						Иначе
							СтрокаДвижений.Склад = СкладОрдер.Склад;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаДвижений.ДокументОприходования = СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления;
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		ОбособленныйУчет = СтрокаТЧ.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет
		    И Не (НЕ ЗначениеЗаполнено(СтрокаТЧ.Заказ)), СтрокаТЧ.Заказ, Неопределено);

		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
			КонецЕсли;

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	
КонецПроцедуры

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийУпрПоступление(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Определим код операции движений по регистру партий
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
	Иначе
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		ОтборСкладОптовый    = Новый Структура("ВидСкладаРазмещения", Перечисления.ВидыСкладов.Оптовый);
		ОтборСкладРозничный  = Новый Структура("ВидСкладаРазмещения", Перечисления.ВидыСкладов.Розничный);
			
		ТаблицаТоварыОпт     = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладОптовый  ).Выгрузить();
		ТаблицаТоварыРозница = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладРозничный).Выгрузить();
			
		СтруктТаблицДокументаОпт = Новый Структура;
		СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам", ТаблицаТоварыОпт);
			
		СтруктТаблицДокументаРозница = Новый Структура;
		СтруктТаблицДокументаРозница.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозница);
			
		ТаблицыДанныхДокументаОпт     = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
		ТаблицыДанныхДокументаРозница = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокументаРозница);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт,     "Качество", Справочники.Качество.Новый);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозница, "Качество", Справочники.Качество.Новый);
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт, Дата);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозница, Дата);
			
	Иначе // Приход по ордеру
		
		Если НЕ Отказ Тогда
				
			// Подготовка таблицы товаров к получению
			ТаблицаТоварыКПолучению = ТаблицаПоТоварам.Скопировать();
			ТаблицаТоварыКПолучению.Колонки.Добавить("ДокументРезерва");
				
			// Документ резерва - приходный ордрер без права продажи.
			Для каждого СтрокаТаблицы из ТаблицаТоварыКПолучению Цикл
				Если СтрокаТаблицы.БезПраваПродажи Тогда
					СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.ДокументПолучения;
				КонецЕсли;
			КонецЦикла;
				
			// Движение по товарам к получению
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаТоварыКПолучению", ТаблицаТоварыКПолучению);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПолучениюНаСклады, СтруктТаблицДокумента);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",     Справочники.Качество.Новый);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаТоварыКПолучению");
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПолучениюНаСклады, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
			
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		
	// Создать таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварамСторно", СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам));
	КонецЕсли;
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ПартииТоваровНаСкладах, СтруктТаблицДокумента);
	
	// Заполнить недостающие поля.
	ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварам, ТаблицыДанныхДокумента["ТаблицаПоТоварам"], ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), СтруктураШапкиДокумента);
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации", КодОперацииПартииТоваров, "ТаблицаПоТоварам");
	
	// Заполнить таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ПоОрдеру,
			"ТаблицаПоТоварамСторно");
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Стоимость", 0,
			"ТаблицаПоТоварамСторно");
				
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации", Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру,
			"ТаблицаПоТоварамСторно");
		
	КонецЕсли;
		
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый);
		
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровНаСкладах, Неопределено, ТаблицыДанныхДокумента, Дата);
	Движения.ПартииТоваровНаСкладах.Записать(Ложь);
	
	// ТОВАРЫ, УСЛУГИ ПО РЕГИСТРУ Закупки.
	КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
	КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
	
	КопияТаблицыУслуги = ТаблицаПоУслугам.Скопировать();
	КопияТаблицыУслуги.ЗагрузитьКолонку(КопияТаблицыУслуги.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

	КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
	
	КопияТаблицыУслуги.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыУслуги.Колонки.НДСУпр.Имя = "НДС";
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
		// В этом случае таблицы документа обрабатываются особым образом
		ТаблицаДвижений = Движения.Закупки.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
		ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
			
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров, ТаблицаДвиженийТовары, Проект, Дата, "Закупки");
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Закупки");
			
		// Вставляем уже подготовленные таблицы движений
		ТаблицыДанныхДокумента = Новый Структура;
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
	Иначе
						
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТаблицыТоваров);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияТаблицыУслуги);

		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Закупки, СтруктТаблицДокумента);
						
	КонецЕсли;
					
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента));
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументЗакупки",    ДокументПоступления);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение, "ТаблицаПоТоварам");
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка);
	КонецЕсли;

	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Закупки, Неопределено, ТаблицыДанныхДокумента, Дата);

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоТоварамОрганизацийВозврат(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
		ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПлюс, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,      "ДокументПередачи");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПередачеОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТоварыПоступление(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок
	)
	
	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить корректировку списания
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		
		МассивПриходныхОрдеров = Новый Массив;
		Для каждого Строка Из ТаблицаПоТоварам Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПриходныхОрдеров);
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем запись с указанием приходного ордера, которая будет обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		Инд = 0;
		Для каждого Элемент Из МассивПриходныхОрдеров Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.ПоступлениеПриходныйОрдер = Элемент;
			Инд = Инд+1;
			НоваяСтрока.НомерСтрокиДокумента = Инд;
			НоваяСтрока.Организация = СтруктураШапкиДокумента.Организация;
		КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТоварыПоступление()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;

	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварамПоступление,
		ТаблицаПоТоварамВозврат,
		ТаблицаПоУслугам,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		Отказ,
		Заголовок
	);

	// ПО РЕГИСТРАМ ВЗАИМОРАСЧЕТОВ.
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(
		ЭтотОбъект,
		СтруктураШапкиДокумента,
		мСтруктураПараметровВзаиморасчетов,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		ВидДвиженияНакопления.Расход,
		Отказ,
		Заголовок
	);
		
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(
		РежимПроведения,
		ТаблицаПоВзаиморасчетам,
		Отказ,
		Заголовок,
		СтруктураШапкиДокумента
	);
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		возврат;
	КонецЕсли;
	
	// Проводить по партиям сразу если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
	
	//////////////////////////////////////////////////////
	// Проводится как поступление товаров от поставщика //
	//////////////////////////////////////////////////////
	Если ТаблицаПоТоварамПоступление.Количество() > 0.00
		ИЛИ ТаблицаПоУслугам.Количество() > 0.00
	Тогда
		
		ДвиженияПоРегистрамУпрПоступление(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварамПоступление,
			ТаблицаПоУслугам,
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			Отказ,
			Заголовок
		);
		ДвиженияПоРегиструСписанныеТоварыПоступление(
			СтруктураШапкиДокумента,
			ТаблицаПоТоварамПоступление,
			Отказ,
			Заголовок
		);
		ДвиженияПоРегиструТоварыОрганизацийРегл(
			РежимПроведения,
			ТаблицаПоТоварамПоступление,
			Отказ,
			Заголовок,
			СтруктураШапкиДокумента
		);
		// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить 
		// корректировку списания
		Если ОтражатьВУправленческомУчете
			И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			Движения.ПартииТоваровНаСкладах.Записать();

			УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

			Если Движения.СписанныеТовары.Количество()>0 Тогда
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период      = Дата;
			КонецЕсли;

			Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

				УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	///////////////////////////////////////////////
	// Проводится как возврат товаров поставщику //
	///////////////////////////////////////////////
	Если ТаблицаПоТоварамВозврат.Количество() > 0.00 Тогда
		ДвиженияПоТоварамОрганизацийВозврат(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамВозврат, Отказ, Заголовок);
		ДвиженияПоРегистрамУпрВозврат(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварамВозврат,
			Отказ,
			Заголовок
		);
		ДвиженияПоРегиструСписанныеТоварыВозврат(СтруктураШапкиДокумента, ТаблицаПоТоварамВозврат, Отказ, Заголовок);
		
		// Зарегистрируем в последовательности УУ
		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период      = Дата;
		КонецЕсли;

		Если ПроводитьПоПартиям Тогда

			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
			
		Иначе

			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковУпрВозврат(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		
		Если НЕ Отказ Тогда
			
			ОтборСкладОптовый   = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			ОтборСкладРозничный = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
				
			ТаблицаТоварыОпт  = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладОптовый).Выгрузить();
			ТаблицаТоварыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладРозничный).Выгрузить();
			
			СтруктТаблицДокументаОпт = Новый Структура;
			СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам", ТаблицаТоварыОпт);
				
			СтруктТаблицДокументаРозн = Новый Структура;
			СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
			
			ТаблицыДанныхДокументаОпт  = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
			ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокументаРозн);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт, Дата);
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице,  ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозн, Дата);
			
		КонецЕсли;
		
	Иначе
	
		// ТОВАРЫ, ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		Если НЕ Отказ Тогда
		
			ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
			ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамПлюс);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ Закупки.
	Если НЕ Отказ Тогда
		
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",    КопияТаблицыТоваров);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.Закупки, СтруктТаблицДокумента);
	
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "ТаблицаПоТоварам");
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		 ИЛИ (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И  СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом) Тогда
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка);
		КонецЕсли;
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Закупки, Неопределено, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

// Функция удаляет из исходной таблицы строки по которым не надо делать резерв товаров под заказ покупателя.
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТабТовары)

	// Если в ТЧ есть ссылки на заказы, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТабТовары.Скопировать();
	ТаблицаПоТоварамИзРезерва.Колонки.Добавить("ДокументРезерва");
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			 ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			СтрокаТаблицы.ДокументРезерва = СтрокаТаблицы.Заказ;
			//для ТЧ Возвратная тара в таблице хранятся положительные количества, для них не требуется изменять знак
			СтрокаТаблицы.Количество = ?(СтрокаТаблицы.Количество>0,СтрокаТаблицы.Количество,-СтрокаТаблицы.Количество);
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамИзРезерва;
	
КонецФункции // УдалитьСтрокиБезРезерваПодЗаказПокупателя()

Процедура ДвиженияПоРегистрамУпрВозврат(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок
	);
		
	///////////////////////////////////////////////
	// Проводится как возврат товаров поставщику //
	///////////////////////////////////////////////
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
		Если ТипЗНЧ(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
			// Движения по заказам поставщикам.
			НаборДвижений = Движения.ЗаказыПоставщикам;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику",    СтруктураШапкиДокумента.Сделка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам");

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		ТоварыИТараПоРегистрамОстатковУпрВозврат(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		ТоварыИТараПоРегистрамОстатковУпрВозврат(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПолученные.
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( Движения.ТоварыПолученные, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);

			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка", СтруктураШапкиДокумента.Сделка);
			КонецЕсли;

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;

	ТаблицаПоТоварамИзРезерва = УдалитьСтрокиБезРезерваПодЗаказПокупателя(ТаблицаПоТоварам);
	
	Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
		
		Если НЕ Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамИзРезерва);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпрПоступление(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		Отказ,
		Заголовок
	);
	
	ТоварыИТараПоРегистрамОстатковИПартийУпрПоступление(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента);
	НаборДвижений = Движения.ТоварыПолученные;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Товары по регистру ТоварыПолученные
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		НаборДвижений = Движения.ТоварыПолученные;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ТаблицаПоТоварамТоварыПолученные = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамТоварыПолученные.Колонки.ЗаказПоставщику.Имя = "Сделка";
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамТоварыПолученные, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПолучения");

		//В случае договора "По счетам" нужно заполнить колонку "Сделка".
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "Сделка");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыПолученные.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;
	
	// ТОВАР ПО РЕГИСТРУ ЗаказыПоставщикам.
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);

	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПоставщикам, СтруктТаблицДокумента);

	ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику");

	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);

	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам");
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоУслугам");

	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПоставщикам, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	// Снятие резерва по приходному ордеру
	Если СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

		// Сначала удалим из таблицы строки, по которым не надо списывать резерв.
		ТаблицаПоТоварамПоОрдерамБезПраваПродажи = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Колонки.ДокументПолучения.Имя = "ДокументРезерва";
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() Цикл

			СтрокаТаблицы = ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Получить(Сч);
			Если Не СтрокаТаблицы.БезПраваПродажи Тогда
				ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;

		КонецЦикла;

		// Если осталась хоть одна строка., то делаем движения.
		Если ТаблицаПоТоварамПоОрдерамБезПраваПродажи.Количество() > 0 Тогда 

			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвиженийРезервы = НаборДвижений.ВыгрузитьКолонки();
			ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПоОрдерамБезПраваПродажи, ТаблицаДвижений);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		ТаблицаДвижений.Очистить();

	КонецЕсли;

	// Резервирование по заказам покупателей

	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит Заказ пуст)
	ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Заказ)
				ИЛИ (ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
				И  СтрокаТаблицы.Заказ.Заказчик = СтрокаТаблицы.Склад)
		Тогда // Резерв в это случае делать не надо.
			ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	// Товары по регистру "Размещение заказов покупателей"
	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Заказ)
				ИЛИ (НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику)
				ИЛИ ТипЗнч(СтрокаТаблицы.ЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику"))
		Тогда
			ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	ТаблицаПОТоварамРазмещение.Колонки.Заказ.Имя = "ЗаказПокупателя";
	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
		
		// По регистру РазмещениеЗаказовПокупателей
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамРазмещение, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		НаборДвижений.мПериод            = Дата;
		
		Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();

	КонецЕсли;
	Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда
		
		Если НЕ Отказ Тогда
			
			ТаблицаПоТоварамЗаказамПокупателей.Колонки.Заказ.Имя = "ДокументРезерва";
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамЗаказамПокупателей);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;
	КонецЕсли;

	// Движения по услугам.
	Если ТаблицаПоУслугам.Количество() > 0 Тогда

		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("ЕстьНДС", Истина);
		УправлениеЗатратами.ДвиженияПоПрочимЗатратамУпр(ЭтотОбъект, ТаблицаПоУслугам, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, СтруктДопПараметры);

	КонецЕсли;

	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
	ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "Заказ");
	ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
	ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
	
	ТабИсходная = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
				И СтрокаТаблицы.Заказ.Заказчик = СтрокаТаблицы.Склад
		Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.Заказ, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   СтрокаТаблицы.ХарактеристикаНоменклатуры,СтрокаТаблицы.ЕдиницаИзмерения, 
																   Перечисления.СтатусыПартийТоваров.Купленный);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрамРегл
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
		И ТипЗнч(СтруктураШапкиДокумента.ДокументПоступленияСсылка) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		// Поступление комиссионных товаров не отражается в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 

			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПоставщиками_Задолженность(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ, СтруктураШапкиДокумента.УчетАгентскогоНДС, ТаблицаАвансов, УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
	
		КонецЕсли; 
	КонецЦикла;
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.ПровестиКорректировкуПоступленияПоРегистрамНДС(СтруктураШапкиДокумента, Ссылка);
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРегиструСписанныеТоварыВозврат(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок
	)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.

	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТоварам.Колонки.Заказ.Имя = "ЗаказПартии";

	// Количество из колонки КоличествоДок
	ТаблицаПоТоварам.Колонки.Удалить("Количество");
	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам[ТаблицаДвижений.Индекс(Строка)];
		Строка.ДокументПартии = СтрокаТЧ.ДокументЗакупки;
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;

	Для каждого СтрокаТоваров из ТаблицаПоТоварам Цикл

		Если ЗначениеЗаполнено (СтрокаТоваров.ЗаказПартии) тогда

			Если СтрокаТоваров.ЗаказПартии.Метаданные().Имя = "ЗаказПокупателя"  тогда
				ТаблицаДвижений[ТаблицаПоТоварам.Индекс(СтрокаТоваров)].ЗаказСписания = СтрокаТоваров.ЗаказПартии;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Если ПУ по складам не ведется - очистим склад
	Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");
	
	// не списываем партии, если по ордеру
	Если СтруктураШапкиДокумента.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру тогда
		 ТаблицаДвижений.ЗаполнитьЗначения(Истина,"НеСписывать");
	КонецЕсли;

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТоварыВозврат()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок) Экспорт

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(Дата);
	
	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");
	
	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////
// Подготовка и проверка структуры шапки документа

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	СтруктураШапкиДокумента.Вставить("ВидПередачи", ?(ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад, Перечисления.ВидыПередачиТоваров.СоСклада, Перечисления.ВидыПередачиТоваров.ПоОрдеру));
	
	// Если есть колонка заказ, то заполнение поля Сделка не обязательно
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(Неопределено, ДоговорКонтрагента, "Поступление");
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	СтруктураШапкиДокумента.Вставить("ИсходныйИсправляемыйДокументПоступления", УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина));
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",                      "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов",                       "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                                "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",                                "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах",                   "РасчетыВУсловныхЕдиницах");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС",                          "УчетАгентскогоНДС");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора",                      "ВидАгентскогоДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом",     "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации",                                "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "СписыватьПартииПриПроведенииДокументов",     "СписыватьПартииПриПроведенииДокументов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "НеВключатьНДСВСтоимостьПартий",              "НеВключатьНДСВСтоимостьПартий");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",           "БезПраваПродажи",                            "БезПраваПродажи");
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "ВидСклада",       "ВидСклада");
	Иначе
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад",           "СкладПриходногоОрдера");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер",       "Склад.ВидСклада", "ВидСклада");
	КонецЕсли;

	
	// Если сделка - Заказ поставщику, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка)
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "ВалютаДокумента",         "ВалютаЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КурсВзаиморасчетов",      "КурсВзаиморасчетовЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КратностьВзаиморасчетов", "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.УчетАгентскогоНДС) тогда 
		СтруктураШапкиДокумента.Вставить("УчетАгентскогоНДС", Ложь);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	ДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	СтруктураШапкиДокумента.Вставить("ДокументПоступленияДата", 	?(ЗначениеЗаполнено(ДокументПоступленияСсылка), ДокументПоступленияСсылка.Дата, Дата));
	СтруктураШапкиДокумента.Вставить("ДокументПоступленияСсылка", 	ДокументПоступленияСсылка);
    СтруктураШапкиДокумента.Вставить("ДокументОснование",	 		ДокументПоступления);
	СтруктураШапкиДокумента.Вставить("ДокументОснованиеДата",	 	?(ЗначениеЗаполнено(ДокументПоступления), ДокументПоступления.Дата, Дата));

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента() 

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("ДокументПоступления", "Не заполнено значение реквизита ""Основание""");
	СтруктураОбязательныхПолей.Вставить("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
		Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ДокументПоступления = &ДокументПоступления
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
		|	И КорректировкаПоступления.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("К документу "+ ДокументПоступления +" введено больше одного корректировочного документа с видом операции ""Исправление первичных документов"". 
			|Каждую последующую корректировку следует вводить на основании предыдущей.", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет заполнение реквизитов документа основания.
// Параметры:
// ДокументОснование - Документ основания
//
Процедура ПроверитьРеквизиты(ДокументОснование)
	
	МетаданныеОснования = ДокументОснование.Метаданные();
	СтрокаПредупреждение = "В документе основания:" + Символы.ПС;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеОснования)
		И НЕ ЗначениеЗаполнено(ДокументОснование.Организация)
	Тогда
		СтрокаПредупреждение = "не заполнена организация" + Символы.ПС;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеОснования)
		И НЕ ЗначениеЗаполнено(ДокументОснование.Контрагент)
	Тогда
		СтрокаПредупреждение = СтрокаПредупреждение + "не заполнен контрагент" + Символы.ПС;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование)<> Тип("ДокументСсылка.СчетФактураПолученный")
		И ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеОснования)
		И НЕ ЗначениеЗаполнено(ДокументОснование.ДоговорКонтрагента)
	Тогда
		СтрокаПредупреждение = СтрокаПредупреждение + "не заполнен договор контрагента";
	КонецЕсли;
	Если СтрЧислоСтрок(СтрокаПредупреждение) > 1.00 Тогда
		ДокументПоступления = Неопределено;
		ВызватьИсключение СтрокаПредупреждение;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРеквизиты()

// Подготовка и проверка структуры шапки документа
////////////////////////////////////////////////////

////////////////////////////////////////////////////
// Подготовка и проверка таблиц документа (кроме таблицы по таре)

// Процедура формирует таблицы документа, вляиющие на состояние расчетов с контрагентами.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам) Экспорт

	СкладИзШапки = Не мУказаниеСкладовВТЧ;
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Регистратор"                          , "Ссылка");
	СтруктураПолей.Вставить("Номенклатура"                         , "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС"                            , "СтавкаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"           , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                    , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"          , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                             , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ"                                , "Заказ");
	СтруктураПолей.Вставить("Склад"                                , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                            , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ДокументПолучения"                    , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения"        , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"                      , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"                  , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("УчетПоСериям"                         , "Номенклатура.ВестиУчетПоСериям");
	СтруктураПолей.Вставить("СтранаПроисхождения"                  , "СерияНоменклатуры.СтранаПроисхождения");
	СтруктураПолей.Вставить("НомерГТД"                             , "СерияНоменклатуры.НомерГТД");
	СтруктураПолей.Вставить("ЗаказПоставщику"                      , "ЗаказПоставщику");
	СтруктураПолей.Вставить("ДокументЗакупки"                      , "Ссылка.ИсправляемыйДокументПоступления");
	СтруктураПолей.Вставить("ДокументОприходования"                , "Ссылка.ИсправляемыйДокументПоступления");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет"                 , "ОтражатьТоварныйУчет");
	
	Если СкладИзШапки и ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		СтруктураПолей.Вставить("Склад"                            , "Ссылка.СкладОрдер");
		СтруктураПолей.Вставить("ВидСкладаРазмещения"              , "Ссылка.СкладОрдер.ВидСклада");
	Иначе
		СтруктураПолей.Вставить("Склад"                            , "Склад");
		СтруктураПолей.Вставить("ВидСкладаРазмещения"              , "Склад.ВидСклада");
	КонецЕсли;

	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество"  , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("Сумма"       , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"         , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("ВидДвижения" , "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
	
	СтруктураСложныхПолей.Вставить("КоличествоДок", "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения)
	|		ИНАЧЕ (Количество - КоличествоДоИзменения)
	|КОНЕЦ * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	
	СтруктураСложныхПолей.Вставить("Качество"           , "ЗНАЧЕНИЕ(Справочник.Качество.Новый)");
	СтруктураСложныхПолей.Вставить("ДокументПоступления", "Ссылка");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
		И Не ЗначениеЗаполнено(Проект)
	Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Регистратор"                       , "Ссылка");
	СтруктураПолей.Вставить("Номенклатура"                      , "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС"                         , "СтавкаНДС");
	СтруктураПолей.Вставить("Содержание"                        , "Содержание");
	СтруктураПолей.Вставить("Услуга"                            , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                             , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                          , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтатьяЗатрат"                      , "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат"                    , "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("ОтнесениеРасходовКДеятельностиЕНВД", "СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД");
	СтруктураПолей.Вставить("Подразделение"                     , "Подразделение");
	СтруктураПолей.Вставить("Заказ"                             , "Заказ");
	СтруктураПолей.Вставить("ЗаказПоставщику"                   , "ЗаказПоставщику");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"              , "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена"                              , "Цена");
	СтруктураПолей.Вставить("ЗаказПоставщику"                   , "ЗаказПоставщику");
	СтруктураПолей.Вставить("ДокументОприходования"             , "Ссылка.ИсправляемыйДокументПоступления");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет"              , "ОтражатьТоварныйУчет");
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество",  "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма",       "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС",         "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаНДС",    "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("ВидДвижения", "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;

	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,СтруктураСложныхПолей);

	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоУслугам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);

КонецПроцедуры // ПодготовитьТаблицыДокумента()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Удалим из таблицы строки, по которым не было изменений
	КоличествоСтрок = ТаблицаТоваров.Количество();
	Для Индекс = 1 по КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаТоваров[КоличествоСтрок - Индекс];
		
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.НДС = 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма"), "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		КонецЕсли;
		
	КонецЦикла;

	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ЕстьЦена = ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСкладаРазмещения");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСкладаРазмещения");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	// Надо рассчитать стоимость без НДС.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Считаем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
											СтрокаТаблицы.Цена,
											ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаЗаказа,
											СтруктураШапкиДокумента.КурсДокумента,
											СтруктураШапкиДокумента.КурсЗаказа,
											СтруктураШапкиДокумента.КратностьДокумента,
											СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий 
			И НЕ (СтруктураШапкиДокумента.НДСВключенВСтоимость) 
			И НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС - СтрокаТаблицы.НДС;
		Иначе
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС;
		КонецЕсли;
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
										СтоимостьДляВзаиморасчетов,
										ВалютаДокумента,
										СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента,
										КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
										СтоимостьДляВзаиморасчетов,
										ВалютаДокумента,
										СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										СтруктураШапкиДокумента.КурсДокумента,
										СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										СтруктураШапкиДокумента.КратностьДокумента,
										СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
										СтрокаТаблицы.НДС,
										ВалютаДокумента,
										СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										СтруктураШапкиДокумента.КурсДокумента,
										СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										СтруктураШапкиДокумента.КратностьДокумента,
										СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
										СтрокаТаблицы.Стоимость,
										СтруктураШапкиДокумента.ВалютаДокумента,
										СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										СтруктураШапкиДокумента.КурсДокумента,
										СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										СтруктураШапкиДокумента.КратностьДокумента,
										СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Цена нужна для проведения по заказам поставщиков, поэтому ее необходимо пересчитать в валюту заказа
		Если ЕстьЦена И ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка)
			И (ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
			ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя"))
		Тогда
			СтруктураКурсаВалютыЗаказа = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаЗаказа, Дата);
			СтрокаТаблицы.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
										СтрокаТаблицы.Цена,
										СтруктураШапкиДокумента.ВалютаДокумента,
										СтруктураШапкиДокумента.ВалютаЗаказа,
										СтруктураШапкиДокумента.КурсДокумента,
										СтруктураКурсаВалютыЗаказа.Курс,
										СтруктураШапкиДокумента.КратностьДокумента,
										СтруктураКурсаВалютыЗаказа.Кратность);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Склад, Номенклатура, ЕдиницаИзмерения");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Складов с видом НТТ здесь быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	Иначе
		УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, , СтруктураОбязательныхПолей);
	КонецЕсли;

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидПоступления, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПоставщику", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Процедура заполняет значение реквизитов до корректировки
//
Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления) 
							И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
							И (ИсправляемыйДокументПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"),       "ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"),      "СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"),   "СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), "КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"),       "ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"),      "СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"),   "СуммаНДСДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТЧ из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		Для Каждого СтрокаТЧ из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовка и проверка таблиц документа (кроме таблицы по таре)
////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ПерезаполнятьДокумент = Истина;
	ИнтерактивноеЗаполнение = Ложь;
	Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("ДокументОснование") Тогда
		ПерезаполнятьДокумент = Основание.ПерезаполнятьДокумент;
		ИнтерактивноеЗаполнение = Основание.ИнтерактивноеЗаполнение;
		Основание = Основание.ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) <> Тип("Структура") Тогда
		Если Ссылка = Основание Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "Нельзя вводить документ корректировки на основании самого себя!";
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов") И Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "Нельзя корректировать документ с видом операции ""внутренний расход""";
		КонецЕсли;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураПолученный") И
			(НЕ ЗначениеЗаполнено(Основание.ДокументОснование) 
			ИЛИ ТипЗнч(Основание.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет")
			ИЛИ Основание.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс)
		Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "В качестве основания можно выбрать только счет-фактуру по поступлению, введенный на основании документа ""Авансовый отчет""!";
		КонецЕсли;
		
		ДокументСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Основание, Ложь);
		ДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		
		#Если Клиент Тогда
		Если Основание <> ДокументОснование
			И Основание.Дата < ДокументОснование.Дата
		Тогда
			Если Вопрос("Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				ДокументОснование = Основание;
			КонецЕсли;
		Иначе
			ДокументОснование = Основание;
		КонецЕсли;
		#КонецЕсли
		
		ПроверитьРеквизиты(ДокументОснование);
		
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ЗначениеЗаполнено(?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"), ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументСсылка.ВалютаДокумента))
			И ?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"), ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументСсылка.ВалютаДокумента) <> мВалютаРегламентированногоУчета
			И ЗначениеЗаполнено(ДокументСсылка.ДоговорКонтрагента)
			И ДокументСсылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
		Тогда
			ДокументПоступления = Неопределено;
			ВызватьИсключение "Для договоров в условных единицах, корректировка документов, оформленных в валюте, не поддерживается.
				|Корректируемый документ должен быть оформлен в рублях.";
		КонецЕсли;
		
	Иначе
		ДокументОснование = Основание;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ИнтерактивноеЗаполнение = Истина Тогда
		ДокументПоступления = ДокументОснование;
		КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
		Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументПоступления) Тогда
			Если Вопрос("Перезаполнить документ по указанному основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ПерезаполнятьДокумент = Истина;
			Иначе
				ПерезаполнятьДокумент = Ложь;
				КорректироватьБУиНУ = Ложь;
			КонецЕсли;
		Иначе
			ПерезаполнятьДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов"))
	Тогда
		ЗаполнитьСвойстваШапки();
	Иначе
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления")
		Тогда
			
			// Заполним реквизиты из стандартного набора по документу основанию.
			Организация = ДокументОснование.Организация;
			ДокументПоступления = ДокументОснование;
			КорректироватьБУиНУ = ?(ИнтерактивноеЗаполнение = Истина, КорректироватьБУиНУ, ДоступнаКорректировкаБУиНУ());
			ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			ЗаполнитьСвойстваШапки();
			Если ПерезаполнятьДокумент = Истина Тогда
				ЗаполнитьПоПоступлению();
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			Организация = ДокументОснование.Организация;
			ДокументПоступления = ДокументОснование;
			КорректироватьБУиНУ = ?(ИнтерактивноеЗаполнение = Истина, КорректироватьБУиНУ, ДоступнаКорректировкаБУиНУ());;
			ЗаполнитьСвойстваШапки();
			Если ПерезаполнятьДокумент = Истина Тогда
				ЗаполнитьПоДопРасходам();
			КонецЕсли;
		КонецЕсли;
		КорректироватьНДС = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОчиститьНенужныеТабличныеЧасти();
	
	ЗаполнитьСвойстваШапки(Ложь);
	
	ОбработатьСуммыДокорректировки();
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);

	Если КорректироватьНДС Тогда
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	Иначе
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
	КонецЕсли;
	
	// Заполнить склад и ордер в табличных частях
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары, ?(ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру, Ложь, Не мУказаниеСкладовВТЧ));
	
	УправлениеЗаказами.ЗаполнитьЗаказПоставщикуВТЧ(неопределено,ЭтотОбъект, "Поступление");

	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");	

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Подготовим структуру шапки документа
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не (КорректироватьБУиНУ ИЛИ КорректироватьНДС) Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);
	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете
		ИЛИ ОтражатьВНалоговомУчете
	Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
											 ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
											 Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											 СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И НЕ Отказ Тогда
		ТаблицыДокумента = Новый Структура();
		ТаблицыДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоТоварам);
		ТаблицыДокумента.Вставить("ТаблицаПоУслугам",ТаблицаПоУслугам);
		
		// Выполнить движения по спецрегистрам подсистемы учета НДС
		ТаблицаАвансов = Неопределено;
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаАвансов, Отказ, Заголовок);
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.КорректироватьБУиНУ И НЕ Отказ Тогда
		
		ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
		
		ТаблицаПоТоварамПоступление = ТаблицаПоТоварам.СкопироватьКолонки();
		ТаблицаПоУслугамПоступление = ТаблицаПоУслугам.СкопироватьКолонки();
		ТаблицаПоТоварамВозврат     = ТаблицаПоТоварам.СкопироватьКолонки();
		
		Для итератор = 0 По Макс(ТаблицаПоТоварам.Количество(), ТаблицаПоУслугам.Количество()) Цикл
			Если итератор <= ТаблицаПоТоварам.Количество() - 1 Тогда
				СтрокаТаблицы = ТаблицаПоТоварам.Получить(итератор);
				Если СтрокаТаблицы.Количество > 0.00 И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
					СтрокаТоваровПоступление = ТаблицаПоТоварамПоступление.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТоваровПоступление, СтрокаТаблицы);
				ИначеЕсли СтрокаТаблицы.Количество < 0.00 И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
					СтрокаТоваровВозврат = ТаблицаПоТоварамВозврат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТоваровВозврат, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
			Если итератор <= ТаблицаПоУслугам.Количество() - 1 Тогда
				СтрокаТаблицы = ТаблицаПоУслугам.Получить(итератор);
				Если СтрокаТаблицы.Количество <> 0.00 И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
					СтрокаУслугПоступление = ТаблицаПоУслугамПоступление.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаУслугПоступление, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
		мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
		УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			ЭтотОбъект,
			мСтруктураПараметровВзаиморасчетов,
			СтруктураШапкиДокумента,
			Отказ,
			Заголовок
		);
		
		// Проверить заполнение ТЧ 
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
		
		// Движения по документу
		Если Не Отказ Тогда
			ДвиженияПоРегистрам(
				РежимПроведения,
				СтруктураШапкиДокумента,
				
				ТаблицаПоТоварамПоступление,
				ТаблицаПоТоварамВозврат,
				
				ТаблицаПоУслугамПоступление,
				
				ТаблицаПоВзаиморасчетам,
				ТаблицаПоРасчетам,
				
				Отказ,
				Заголовок
			);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения

// Функция создает таблицу для формирования сторнирующих движений по рег. Партии товаров на складах, в случае поступления по ордеру
//
Функция СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТабТовары)

	ТаблицаПартииПоОрдерам = ТабТовары.Скопировать();
	Если ТаблицаПартииПоОрдерам.Колонки.Найти("ДокументОприходования") = Неопределено Тогда
	
		ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
	
	КонецЕсли;
		
	Сч = 0;
	Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
	
		СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
		Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
			ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
		Иначе
			// Документ оприходования - приходный ордрер
			СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
			СтрокаТаблицы.Склад                 = СтрокаТаблицы.ПриходныйОрдерСклад;
			СтрокаТаблицы.Количество            = - СтрокаТаблицы.Количество;
			Если НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("Заказ") = Неопределено Тогда
				СтрокаТаблицы.Заказ             = Неопределено;
			КонецЕсли;
			
			// Если партионный учет по сериям не ведется, то надо очистить серию
			Если НЕ СтрокаТаблицы.ВестиПартионныйУчетПоСериям Тогда
				СтрокаТаблицы.СерияНоменклатуры = Неопределено;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПартииПоОрдерам;
	
КонецФункции // СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам)

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПоставщику");

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления);

мИспользоватьОбменЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
