
////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Сохранение на диск Файла
// 
// Параметры
//  ДанныеФайла  - структура с данными файла (ключи структуры: "Расширение, ПолноеНаименование, АдресХранилища");
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла
Функция СохранитьКак(ДанныеФайла) Экспорт
	
	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
			ДанныеФайла.Расширение);
		
		Расширение = ДанныеФайла.Расширение;
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение,
			Расширение);
		ВыборФайла.Фильтр = Фильтр;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = ДанныеФайла.АдресХранилища;
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
				ДанныеФайла.Расширение);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
				|Пожалуйста, подождите.'"), ИмяФайла);
				
			Состояние(ТекстПояснения);
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу,
				ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Сохраним Файл из БД на диск
			Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
				
				// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
				Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
					УдалитьИзВременногоХранилища(АдресФайла);
				КонецЕсли;
				
				НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				
				Состояние(НСтр("ru = 'Файл успешно сохранен.'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			ПутьВыбора = Файл.Путь;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = ДанныеФайла.АдресХранилища;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
																		ДанныеФайла.Расширение);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
			|Пожалуйста, подождите.'"), ИмяФайла);
			
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Только для внутреннего использования
Функция УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Экспорт
	
	УстановитьРасширениеРаботыСКриптографией();
	РасширениеПодключено = ПодключитьРасширениеРаботыСКриптографией();
	
	Если НЕ РасширениеПодключено Тогда
	
		ТекстСообщения = НСтр("ru = 'Для дальнейшей работы необходимо установить ""Расширения для работы с криптографией"", операция прервана.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат РасширениеПодключено;
	
КонецФункции

// Только для внутреннего использования
Функция ПроверитьИспользованиеИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	Если Использование = Неопределено Тогда
		Использование = Ложь;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
				Использование = Истина;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра
//  ВладелецФормы     - управляемая форма
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	
	СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура("Ключ, СсылкаНаМассивСертификатов",
		СсылкаНаЭД, СсылкаНаМассивСертификатов);
	ПараметрыЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ВидИВладелецЭД(СсылкаНаЭД);
	Если ПараметрыЭД.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		ОткрытьЗначение(ПараметрыЭД.ВладелецФайла);
	ИначеЕсли ВладелецФормы = Неопределено Тогда
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, , СсылкаНаЭД);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, ВладелецФормы, СсылкаНаЭД);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы,
				ВладелецФормы, ПараметрыОткрытия.Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает данные по сертификатам, разрешенным для использования для авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов, массив соглашений передается явно в параметрах, либо "вытаскивается"
// из массива ЭД (для передачи которых требуется авторизация на сервере оператора ЭДО).
//
// Параметры:
//  МассивПрофилейНастроекЭДО - массив ссылок - ссылки на Профили настроек ЭДО, по которым требуется определить сертификаты;
//  МассивЭД - массив ссылок - ссылки на ЭД, по профилям настроек ЭДО из которых, требуется определить сертификаты;
//
// Возвращаемое значение:
//  Структура соответствий - ключ - соглашение об обмене ЭД, значение - структура параметров сертификата авторизации.
//
Функция СоотвСоглашенийИСтруктурСертификатовДляАвторизации(МассивПрофилейНастроекЭДО = Неопределено, МассивЭД = Неопределено) Экспорт
	
	ВозврСоответствие = Новый Соответствие;
	Отказ = Ложь;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи") Тогда
		МассивСтруктурСертификатов = Новый Массив;
		ВыполнятьАвторизациюНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
		СтМассивовСтруктурСертификатов = Новый Структура;
		Если Не ВыполнятьАвторизациюНаСервере Тогда
			Попытка
				МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
			Исключение
				МассивСтруктурСертификатов = Новый Массив;
				
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьСоглашенияТребующиеЭЦП() Тогда
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецПопытки;
			
			СтМассивовСтруктурСертификатов.Вставить("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатов);
		КонецЕсли;
		
		СтСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатов(
			МассивПрофилейНастроекЭДО, МассивЭД, СтМассивовСтруктурСертификатов, , Ложь, Истина, СоответствиеСертификатаИПароля);
			
		// Структура соответствий содержит соответствия: соглашений и массива сертификатов подписи,
		// соглашений и массива сертификатов авторизации, сертификатов и структур параметров этих сертификатов
		// (структура параметров сертификатов содержит: ссылку на сертификат,
		// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
		// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
		// На основании соответствия соглашений и сертификатов авторизации и соглашения сертификатов и структур параметров,
		// сформируем соответствие соглашений и структур сертификатов, необходимое для выполнения отправки ЭД через ОЭДО.
		СоотвСертификатовИИхСтруктур = Неопределено;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
		Если СтСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СтСоответствий.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
			И СоотвСоглашенийИМассиваСертификатовАвторизации.Количество() > 0 Тогда
			Если НЕ ВыполнятьАвторизациюНаСервере Тогда
				Попытка
					МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
			Если НЕ Отказ Тогда
				Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
					ПрофильНастроекЭДО = Элемент.Ключ;
					Сертификаты = Элемент.Значение;
					
					// Аутентификация на 1С Логин для сервиса 1С:ЭДО.
					РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
					Если РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
						ПараметрыАутентификации = АутентификацияНаСайте();
						Если ПараметрыАутентификации = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ (ТипЗнч(Сертификаты) = Тип("Массив") И ЗначениеЗаполнено(ПрофильНастроекЭДО))Тогда
						Продолжить;
					КонецЕсли;
					Соответствие = Новый Соответствие;
					Структура = Неопределено;
					Для Каждого Сертификат Из Сертификаты Цикл
						КлючПоискаСертификата = Строка(Сертификат) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
						Структура = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
						Если Структура.ПарольПолучен Тогда
							// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
							// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
							// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
							// диалог выбора сертификата.
							Соответствие = Новый Соответствие;
							Соответствие.Вставить(Сертификат, Структура);
							Прервать;
						КонецЕсли;
						Соответствие.Вставить(Сертификат, Структура);
					КонецЦикла;
					Если НЕ (Соответствие.Количество() = 1 И Структура.ПарольПолучен) Тогда
						Если РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
							ВидОперации = НСтр("ru = 'Аутентификация в сервисе 1С-ЭДО'");
						Иначе
							ВидОперации = НСтр("ru = 'Аутентификация в сервисе 1С-Такском'");
						КонецЕсли;
						
						Если ПарольКСертификатуПолучен(Соответствие, ВидОперации)
							И Соответствие.Количество() > 0 Тогда
							Для Каждого КлючИЗначение Из Соответствие Цикл
								Структура = КлючИЗначение.Значение;
								Прервать;
							КонецЦикла;
						Иначе
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если ТипЗнч(Структура) = Тип("Структура") Тогда
						Если РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
							И Не Структура.Свойство("МаркерРасшифрованный") И Не Структура.Свойство("МаркерЗашифрованный") Тогда
							
							СтруктураПараметровЗапросаМаркера = Структура;
							СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
							СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
							
							Структура.Вставить("МаркерЗашифрованный", ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(
								СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации));
						КонецЕсли;

						Если РасшифроватьМаркерИзСтруктурыСертификата(Структура, ВыполнятьАвторизациюНаСервере) Тогда
							ВозврСоответствие.Вставить(ПрофильНастроекЭДО, Структура);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозврСоответствие;
	
КонецФункции

// Только для внутреннего использования
Функция ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения = Истина, ПараметрыАутентификации = Неопределено) Экспорт
	
	ЗашифрованныйМаркер = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации);
	Если ЗашифрованныйМаркер <> Неопределено Тогда
		МенеджерКриптографииСоздан = Истина;
		Попытка
			НастройкиКриптографии = Неопределено;
			Если СтруктураПараметровЗапросаМаркера.Свойство("НастройкиКриптографии", НастройкиКриптографии) Тогда
				МенеджерКриптографии = Новый МенеджерКриптографии(
													НастройкиКриптографии.ПровайдерЭЦП,
													НастройкиКриптографии.ПутьМодуляКриптографии,
													НастройкиКриптографии.ТипПровайдераЭЦП);
				МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
				МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
				МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
			Иначе
				МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			КонецЕсли;
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровЗапросаМаркера.ПарольПользователя;
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МенеджерКриптографииСоздан = Ложь;
		КонецПопытки;
		Если МенеджерКриптографииСоздан Тогда
			ДанныеРасшифрованы = Истина;
			Попытка
				РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныйМаркер);
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ДанныеРасшифрованы = Ложь;
			КонецПопытки;
			Если ДанныеРасшифрованы Тогда
				Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныеДвоичныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	РезультатТеста = НСтр("ru = 'Не пройден.'");
	ПройденУспешно = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ПройденУспешно = Истина;
	КонецЕсли;
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
	КонецЕсли;

	Возврат ПройденУспешно;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + Строка(Новый УникальныйИдентификатор) + ".test";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ЭлектронныеДокументыСлужебныйВызовСервера.ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ШаблонСообщения = НСтр("ru = 'Указанный каталог ""%1"" не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПутьККаталогу);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Выводит сообщение пользователю о нехватке прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОткрытьИнструкциюПо1СБухфон() Экспорт
	
	ПопытатьсяПерейтиПоНавигационнойСсылке("http://its.1c.ru/db/aboutits#content:750:1");
	
КонецПроцедуры

// Заполняет данные о способах получения технической поддержки по ЭДО.
//
//
Процедура ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки) Экспорт

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-333-9313";
	АдресЭлектроннойПочтыСлужбыПоддержки = "edo@1c.ru";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Выводит результат проверки корректности сертификата криптографии.
//
// Параметры
//  Сертификат - СправочникСсылка.СертификатыЭЦП - ссылка на сертификат;
//  ПараметрыСертификата - структура - перечень параметров сертификата;
//  КонтекстПроверки - Структура, содержащая поля контекста проверки 
//  	* НаКлиенте - Булево - выполнять проверку сертификата на клиенте.
//  	* НаСервере - Булево - выполнять проверку сертификата на сервере.
//  ВыводитьТолькоОшибки - Булево - флаг вывода сообщений только об ошибках или всех событиях.
//  Отказ - Булево - ошибка при тестировании сертификата
//  УникальныйИдентификатор - Уникальный идентификатор формы, для корректного вывода сообщений
//
Процедура ТестНастроекСертификата(
					Сертификат,
					ПараметрыСертификата,
					КонтекстПроверки,
					ВыводитьТолькоОшибки = Ложь,
					Отказ = Ложь,
					УникальныйИдентификатор = Неопределено) Экспорт
	
	ПроверитьСрокДействияСертификата(Сертификат);
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Сертификат, ПараметрыСертификата);
	
	Если Не ПарольКСертификатуПолучен(Соответствие, НСтр("ru = 'Проверка сертификата'")) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НаКлиенте = Ложь;
	НаСервере = Ложь;
	Если НЕ (КонтекстПроверки.Свойство("НаКлиенте", НаКлиенте) И НаКлиенте = Истина) Тогда
		НаКлиенте = Ложь;
	КонецЕсли;
	Если НЕ (КонтекстПроверки.Свойство("НаСервере", НаСервере) И НаСервере = Истина) Тогда
		НаСервере = Ложь;
	КонецЕсли;
	
	ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
	ОтказКлиент = Ложь;
	Если НаКлиенте Тогда
		ТестСертификатаНаКлиенте(ПараметрыСертификата.Отпечаток, ПарольПользователя, ВыводитьТолькоОшибки, ОтказКлиент);
		Если ОтказКлиент И НЕ НаСервере Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	ОтказСервер = Ложь;
	Если НаСервере Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.ТестСертификатаНаСервере(
				ПараметрыСертификата.Отпечаток,
				ПарольПользователя,
				ВыводитьТолькоОшибки,
				ОтказСервер);
		Если ОтказСервер И (ОтказКлиент ИЛИ НЕ НаКлиенте) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет срок действия сертификата
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыЭЦП - ссылка на проверяемый сертификат
//
Процедура ПроверитьСрокДействияСертификата(Сертификат) Экспорт
	
	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
	РазностьДат = РеквизитыСертификата.ДатаОкончания - ОбщегоНазначенияКлиент.ДатаСеанса();
	Если НЕ РеквизитыСертификата.ОповещенОСрокеДействия И РазностьДат > 0 И РазностьДат < 60*60*24*31 Тогда
		ПараметрыФормы = Новый Структура("Сертификат", Сертификат);
		ИдентификаторФормы = Сертификат.УникальныйИдентификатор();
		#Если ВебКлиент Тогда
			Форма = ПолучитьФорму(
				"Справочник.СертификатыЭЦП.Форма.ОповещениеОбОкончанииСрокаДействия", ПараметрыФормы, ИдентификаторФормы);
		#Иначе
			Форма = ПолучитьФорму("Справочник.СертификатыЭЦП.Форма.ОповещениеОбОкончанииСрокаДействия", ПараметрыФормы,
																	ИдентификаторФормы, ВариантОткрытияОкна.ОтдельноеОкно);
		#КонецЕсли
		Форма.Открыть();
		Операция = НСтр("ru = 'Проверка срока действия сертификата'");
		ТекстОшибки = НСтр("ru = 'Заканчивается срок действия сертификата'")+ " " + Сертификат
					+ Символы.ПС + НСтр("ru = 'Необходимо получить новый'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Функция получает пароль пользователя к сертификатам ЭП. Если в СоотвСертификатовИИхПараметров передано несколько
// сертификатов, то после запроса пароля у пользователя в этот параметр вместо списка помещается один выбранный
// сертификат и его параметры.
//
// Параметры:
//  СоотвСертификатовИИхПараметров - Соответствие - содержит соответствие сертификатов и их параметров:
//    * Ключ     - СправочникСсылка.СертификатыЭЦП - сертификат ЭП.
//    * Значение - Структура - содержит параметры сертификата.
//  ВидОперации                    - Строка - вид операции, для выполнения которой запрашивается пароль пользователя.
//  ОбъектыДляОбработки - Массив, СправочникСсылка.ЭДПрисоединенныеФайлы - один или список объектов ИБ для обработки;
//  ДляЗаписиВИБ - Булево - Истина - если запрашивается пароль для сохранения в реквизит справочника.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ПарольКСертификатуПолучен(СоотвСертификатовИИхПараметров, ВидОперации,
	ОбъектыДляОбработки = Неопределено, ДляЗаписиВИБ = Ложь) Экспорт
	
	ПарольПолучен = Ложь;
	
	Если ТипЗнч(СоотвСертификатовИИхПараметров) = Тип("Соответствие") Тогда
		КоличествоСертификатов = СоотвСертификатовИИхПараметров.Количество();
		Соответствие = Новый Соответствие;
		Для Каждого КлючИЗначение Из СоотвСертификатовИИхПараметров Цикл
			Сертификат = КлючИЗначение.Ключ;
			ПараметрыСертификата = КлючИЗначение.Значение;
			ПрограммаБанка = Неопределено;
			Если НЕ ЗначениеЗаполнено(ПараметрыСертификата) Тогда
				ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
			КонецЕсли;
			Если ПараметрыСертификата.Свойство("ПрограммаБанка")
				И ПараметрыСертификата.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
			ПарольПользователя = Неопределено;
			Если НЕ ДляЗаписиВИБ И КоличествоСертификатов = 1
				И (ПараметрыСертификата.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен
				ИЛИ ПарольИзГлобальнойПеременнойПолучен(Сертификат, ПарольПользователя)) Тогда
				Если НЕ ПарольПолучен Тогда
					ПарольПолучен = Истина;
					ПараметрыСертификата.Вставить("ПарольПолучен", ПарольПолучен);
					ПараметрыСертификата.Вставить("ПарольПользователя", ПарольПользователя);
				КонецЕсли;
				Прервать;
			ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
				И НЕ ОбъектыДляОбработки = Неопределено
				И АктуаленКэшПарольСертификатаВДопОбработке(ПараметрыСертификата, ОбъектыДляОбработки) Тогда
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
			// В форме запроса пароля используются 3 параметра из структуры сертификата:
			// ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату. Их и передадим в форму.
			Структура = Новый Структура("ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату");
			ЗаполнитьЗначенияСвойств(Структура, ПараметрыСертификата);
			Соответствие.Вставить(Сертификат, Структура);
		КонецЦикла;
		
		Если Соответствие.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ВидОперации",   ВидОперации);
			ПараметрыФормы.Вставить("ДляЗаписиВИБ",  ДляЗаписиВИБ);
			ПараметрыФормы.Вставить("Соответствие",  Соответствие);
			Если ОбъектыДляОбработки <> Неопределено Тогда
				Если ТипЗнч(ОбъектыДляОбработки) <> Тип("Массив") Тогда
					МассивОбъектов = Новый Массив;
					МассивОбъектов.Добавить(ОбъектыДляОбработки);
				Иначе
					МассивОбъектов = ОбъектыДляОбработки;
				КонецЕсли;
				ПараметрыФормы.Вставить("ОбъектыДляОбработки", МассивОбъектов);
			КонецЕсли;
			СтруктураВозврата = ОткрытьФормуМодально("Справочник.СертификатыЭЦП.Форма.ЗапросПароляДляХранения", ПараметрыФормы);
			ПарольПолучен = Ложь;
			Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
				ВыбранныйСертификат = Неопределено;
				Если СтруктураВозврата.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
					И ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
					ПарольПолучен = Истина;
					ПараметрыСертификата = СоотвСертификатовИИхПараметров[ВыбранныйСертификат];
					ПараметрыСертификата.Вставить("ПарольПолучен", ПарольПолучен);
					ПараметрыСертификата.Вставить("ПарольПользователя", СтруктураВозврата.ПарольПользователя);
					ПараметрыСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
					ПараметрыСертификата.Вставить("Комментарий", СтруктураВозврата.Комментарий);
					СоотвСертификатовИИхПараметров = Новый Соответствие;
					СоотвСертификатовИИхПараметров.Вставить(ВыбранныйСертификат, ПараметрыСертификата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПарольПолучен;
	
КонецФункции

// Процедура добавляет пароль в глобальную переменную "СоответствиеСертификатаИПароля".
//
// Параметры:
//  СертификатЭП       - СправочникСсылка.СертификатыЭЦП - сертификат ЭП.
//  ПарольПользователя - Строка - пароль к сертификату ЭП.
//
Процедура ДобавитьПарольВГлобальнуюПеременную(СертификатЭП, ПарольПользователя) Экспорт
	
	Соответствие = Новый Соответствие;
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие") Тогда
		Для Каждого Элемент Из СоответствиеСертификатаИПароля Цикл
			Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Соответствие.Вставить(СертификатЭП, ПарольПользователя);
	
	СоответствиеСертификатаИПароля = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

// Функция получает пароль из глобальной переменной "СоответствиеСертификатаИПароля".
//
// Параметры:
//  СертификатЭП       - СправочникСсылка.СертификатыЭЦП - сертификат ЭП.
//  ПарольПользователя - Строка - пароль к сертификату ЭП, полученный из глобальной переменной.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ПарольИзГлобальнойПеременнойПолучен(СертификатЭП, ПарольПользователя) Экспорт
	
	ПарольПользователя = Неопределено;
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие") Тогда
		ПарольПользователя = СоответствиеСертификатаИПароля.Получить(СертификатЭП);
	КонецЕсли;
	
	Возврат (ПарольПользователя <> Неопределено);
	
КонецФункции

// Процедура удаляет пароль из глобальной переменной "СоответствиеСертификатаИПароля".
//
// Параметры:
//  СертификатЭП - СправочникСсылка.СертификатыЭЦП - сертификат ЭП.
//
Процедура УдалитьПарольИзГлобальнойПеременной(СертификатЭП) Экспорт
	
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие")
		И СоответствиеСертификатаИПароля.Получить(СертификатЭП) <> Неопределено Тогда
		Соответствие = Новый Соответствие;
		Для Каждого Элемент Из СоответствиеСертификатаИПароля Цикл
			Если Элемент.Ключ <> СертификатЭП Тогда
				Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеСертификатаИПароля = Новый ФиксированноеСоответствие(Соответствие);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Только для внутреннего использования
Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", , ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, НовыйЭД = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	ДопПараметры = Новый Структура;
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
	ДопПараметры.Свойство("НовыйЭД", НовыйЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Элемент ИЗ ПараметрКоманды Цикл
				МассивСсылок.Добавить(Элемент);
			КонецЦикла
	#КонецЕсли
	Иначе // пришла единичная ссылка на объект
		Если ПараметрКоманды.Пустая() Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Только для внутреннего использования
Функция ВыбратьПоместитьФайлЭДВХранилище(АдресВХранилище, Файл, УникальныйИдентификатор) Экспорт
	
	ФайлПомещенВХранилище = Ложь;
	#Если НЕ ВебКлиент Тогда

		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Текст = НСтр("ru = 'XML файл'");
		Фильтр = Текст + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			Если МассивФайлов.Количество() <> 0 Тогда
				Файл = МассивФайлов[0];
				ФайлПомещенВХранилище = ПоместитьФайл(АдресВХранилище,Файл,, Ложь, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		
	#Иначе
		
		ФайлПомещенВХранилище = ПоместитьФайл(АдресВХранилище,, Файл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли
	
	Возврат ФайлПомещенВХранилище;
	
КонецФункции

Функция ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, ПараметрыЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	Если ПараметрыЭД.Отклонить Тогда
		ФормироватьЭД = Ложь;
		ПродолжитьОбработку = ЭлектронныеДокументыСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД, ФормироватьЭД);
		Если ОтклонитьАннулирование Тогда
			Заголовок = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
		Иначе
			
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСчетФактураПолученный(СсылкаНаЭД) Тогда
				Заголовок = НСтр("ru = 'Укажите текст запроса на уточнение'");
			Иначе
				Заголовок = НСтр("ru = 'Укажите причины отклонения документа'");
			КонецЕсли;

		КонецЕсли;
		ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.УведомлениеОбУточнении");
	Иначе
		ФормироватьЭД = Истина;
		ПродолжитьОбработку = ЭлектронныеДокументыСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
		Заголовок = НСтр("ru = 'Укажите причины аннулирования документа'");
		ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПредложениеОбАннулировании");
	КонецЕсли;
	Если ПродолжитьОбработку Тогда
		ТекстУточнения = "";
		УточнениеВведено = ВвестиСтроку(ТекстУточнения, Заголовок, , Истина);
		Если УточнениеВведено Тогда
			Если ЗначениеЗаполнено(ТекстУточнения) Тогда
				Текст = НСтр("ru = '%1, %2:
					|%3'");
				ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПараметрыЭД.Организация,
					ПользователиКлиентСервер.ТекущийПользователь(), ТекстУточнения);
				Если НЕ ФормироватьЭД Тогда
					ЭлектронныеДокументыСлужебныйВызовСервера.ОтклонитьЭДБезФормированияУОУ(СсылкаНаЭД, ТекстУточнения);
					ВозвращаемоеЗначение = Истина;
				ИначеЕсли СформироватьПодписатьСлужебныйЭД(СсылкаНаЭД, ВидСлужебногоЭД, ТекстУточнения) Тогда
					ВозвращаемоеЗначение = Истина;
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Причина не указана, действие отменено.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьПредложениеОбАннулировании(ПервичныйЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	СтруктураЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСсылкиНаЭДДляПОА(ПервичныйЭД);
	СтруктураЭД.Вставить("Отклонить", ОтклонитьАннулирование);
	Если ЗначениеЗаполнено(СтруктураЭД) Тогда
		Если ОтклонитьАннулирование Тогда
			Если ОбработатьОтклонениеАннулированиеЭД(СтруктураЭД.ПОА, СтруктураЭД, ОтклонитьАннулирование) Тогда
				Оповестить("ОбновитьСостояниеЭД");
			КонецЕсли;
		Иначе
			ОтправитьПодтверждениеЭД(СтруктураЭД.ВладелецФайла, СтруктураЭД.ПОА);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПодписатьСлужебныйЭД(СсылкаНаЭД, ВидЭД, ТекстУточнения)
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаЭД);
	
	ЭДСформирован = ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД,
		ТекстУточнения);
	
	Возврат ЭДСформирован;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											Знач СертификатПодписи,
											Знач ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	ФлагИспользованияЭЦП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеЦифровыеПодписи");
	Если НЕ ФлагИспользованияЭЦП Тогда
		Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	ПроверитьСрокДействияСертификата(СертификатПодписи);
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДОпределеннымСертификатом(
																ДобавленныеФайлы,
																СертификатПодписи,
																ПараметрыСертификата,
																МассивНеПодписанныхЭД);
	КонецЕсли;
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка сертификата на корректность'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			Если ЭлектронныеДокументыКлиентПереопределяемый.ЭлектронныйДокументГотовКПодписи(ТекДокумент) Тогда
				СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
					НСтр("ru = 'Подписание электронного документа'"));
				Попытка
					ДвоичныеДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
					ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(МенеджерКриптографии,
						ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
					
					ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
					КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
					ОпределитьСтатусыПодписей(ТекДокумент);
				Исключение
					ШаблонСообщения = НСтр("ru = 'Ошибка подписи. Необходимо провести тест сертификата криптографии для: %1.
					|%2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭЦП'"),
																								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																								ТекстСообщения);
					МассивНеПодписанныхЭД.Добавить(ТекДокумент);
				КонецПопытки;
			Иначе
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭЦП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный  = Неопределено;
		СертификатПодписи    = Неопределено;
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный)
			И СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи) Тогда
			
			МенеджерКриптографии = Неопределено;
			Если Не ВыполнятьАвторизациюНаСервере Тогда
				Попытка
					МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат Ложь;
				КонецПопытки;
				
				ПроверитьСрокДействияСертификата(СертификатПодписи);
				Соответствие = Новый Соответствие;
				Соответствие.Вставить(СертификатПодписи, СтруктураСертификата);
				Если МенеджерКриптографии <> Неопределено
					И ПарольКСертификатуПолучен(Соответствие, НСтр("ru = 'Аутентификация в сервисе ЭДО'"))
					И Соответствие.Количество() > 0 Тогда
					МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураСертификата.ПарольПользователя;
					Попытка
						Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
						Если ЗначениеЗаполнено(Маркер) Тогда
							Расшифрован = Истина;
							СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
			Иначе
				Расшифрован = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(
																									СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка пакетов

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД,
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭЦП
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров
//
Функция ПодготовитьИОтправитьПЭД(ДобавленныеФайлы,
								 ПризнакПодписи,
								 СоотвСоглашенийИПараметровСертификатов = Неопределено) Экспорт
	
	Если СоотвСоглашенийИПараметровСертификатов = Неопределено Тогда
		СоотвСоглашенийИПараметровСертификатов = СоотвСоглашенийИСтруктурСертификатовДляАвторизации(, ДобавленныеФайлы);
	КонецЕсли;
	СтруктураРезультата = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы,
																								ПризнакПодписи,
																								СоотвСоглашенийИПараметровСертификатов);
	Если СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ФайловыеФункцииСлужебныйКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
			Возврат СтруктураРезультата;
		КонецЕсли;

		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
				Возврат СтруктураРезультата;
			КонецЕсли;
		КонецЕсли;
				
		// По концепции БЭД электронный документ в пакете один.
		СоответствиеДанныхПакетов = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДанныхПакетов(
												СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте);
		Для Каждого ЭлементПакет Из СоответствиеДанныхПакетов Цикл
			Для Каждого ДанныеЭД ИЗ ЭлементПакет.Значение Цикл
	
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат СтруктураРезультата;
				КонецПопытки;
				
				МассивСертификатов = Новый Массив;
				Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
					ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
					Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
				НеЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ЗашифрованныеДвоичныеДанные = МенеджерКриптографии.Зашифровать(НеЗашифрованныеДанные, МассивСертификатов);
				ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДвоичныеДанные);
			КонецЦикла;
		КонецЦикла;
		КолОтправленных = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанныхПакетов,
																						СоотвСоглашенийИПараметровСертификатов,
																						КолОтправленных);
		СтруктураРезультата.КолОтправленных = СтруктураРезультата.КолОтправленных + КолОтправленных;
		
	КонецЕсли;
	
	Если СтруктураРезультата.Свойство("ДанныеДляОтправкиСКлиента")
			И СтруктураРезультата.ДанныеДляОтправкиСКлиента.Количество() > 0 Тогда
		КоличествоОтправленныхПакетовЧерезДопОбработку = 0;
		ОтправитьПакетыЧерезДопОбработку(СтруктураРезультата.ДанныеДляОтправкиСКлиента,
		                                 КоличествоОтправленныхПакетовЧерезДопОбработку);
		СтруктураРезультата.КолОтправленных = СтруктураРезультата.КолОтправленных
		                                    + КоличествоОтправленныхПакетовЧерезДопОбработку;
	КонецЕсли;

	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьМассивПакетовЭД(Знач МассивПЭД) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = СоотвСоглашенийИСтруктурСертификатовДляАвторизации(, МассивПЭД);
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	Оповестить("ОбновитьСостояниеЭД");
	
	Возврат Результат;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
Процедура ОпределитьСтатусыПодписей(ЭД) Экспорт
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	СтруктураСодержимогоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	
	РезультатПроверки = Новый Массив;
	
	Для Каждого СтрокаЭЦП Из СтруктураСодержимогоЭД.Подписи Цикл
		СтруктураЗаписи = Новый Структура("НомерСтроки", СтрокаЭЦП.НомерСтроки);
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись;
			МенеджерКриптографии.ПроверитьПодпись(СтруктураСодержимогоЭД.ДанныеЭД, СтрокаЭЦП.Подпись);
			СтруктураЗаписи.Вставить("Результат", Истина);
			РезультатПроверки.Добавить(СтруктураЗаписи);
		Исключение
			СтруктураЗаписи.Вставить("Результат", Ложь);
			РезультатПроверки.Добавить(СтруктураЗаписи);
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка электронной подписи'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(ЭД, РезультатПроверки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  КолСформированных - число, количество сформированных электронных документов,
//  КолПодписанных - число, количество подписанных электронных документов,
//  КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных, КолОтправленных = 0) Экспорт
	
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, "отправлено", "подготовлено к отправке");
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), %4 пакетов: (%5)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, ДопТекст,
						КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), %2 пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, ДопТекст, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = '%1 пакетов: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, КолПодготовленных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
		
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы,
//       если нужно обработать только один ЭД
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект, Действие, ДопПараметры = "", ЭД = Неопределено) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ОшибкаНастройкиКриптографии = Ложь;
	МассивСтруктурСертификатов = Новый Массив;
	Если (ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Подписать")
		ИЛИ ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Отправить"))
		И ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи") Тогда
		
		Попытка
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		Исключение
			ОшибкаНастройкиКриптографии = Истина;
			ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭД) И Не ОшибкаНастройкиКриптографии Тогда
	
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДоступныеСертификаты(МассивСтруктурСертификатов, ЭД) Тогда
			ДопПараметры.Вставить("ОшибкаНастройкиСертификата", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивСсылокНаОбъект.Количество() > 0
		И ТипЗнч(МассивСсылокНаОбъект[0]) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьЭДПрисоединенныеФайлы(МассивСсылокНаОбъект,
																							  МассивСтруктурСертификатов,
																							  Действие,
																							  ДопПараметры,
																							  СоответствиеСертификатаИПароля);
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Результат.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = Результат.КоличествоУтвержденныхЭД;
		КонецЕсли;
	Иначе
		Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
																					МассивСтруктурСертификатов,
																					Действие,
																					ДопПараметры,
																					ЭД,
																					СоответствиеСертификатаИПароля);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьАвторизациюНаСервере = Неопределено;
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	НемедленнаяОтправкаЭД = Неопределено;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Свойство("ВыполнятьАвторизациюНаСервере", ВыполнятьАвторизациюНаСервере);
		Результат.Свойство("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		Результат.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		
		Если НЕ Результат.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
			ИтогКолПодписанных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
			ИтогКолПодготовленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
			ИтогКолОтправленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
			ИтогКолНовыхЭД = 0;
		КонецЕсли;
		
		Если ИтогКолУтвержденныхЭД = 0 И Результат.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = Результат.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		// Подписание ЭД:
		
		СоотвСертификатовИМассивовЭДКПодписи = Новый Соответствие;
		
		МассивЭДКУдалениюИзОтправки = Новый Массив;
		СтруктСтруктурМассивовЭДиСертификатов = Неопределено;
		СоотвЭДиСоглашений = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И Результат.Свойство("СтруктСтруктурМассивовЭДиСертификатов", СтруктСтруктурМассивовЭДиСертификатов)
			И Результат.Свойство("СоотвЭДиСоглашений", СоотвЭДиСоглашений) Тогда
			
			Для Каждого Элемент Из СтруктСтруктурМассивовЭДиСертификатов Цикл
				Структура = Элемент.Значение;
				МассивСертификатов = Структура.МассивСертификатов;
				МассивЭД           = Структура.МассивЭД;
				Соответствие = Новый Соответствие;
				Для Каждого Сертификат Из МассивСертификатов Цикл
					ПроверитьСрокДействияСертификата(Сертификат);
					ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
					Если ТипЗнч(ПараметрыСертификата) = Тип("Структура") Тогда
						Соответствие.Вставить(Сертификат, ПараметрыСертификата);
					КонецЕсли;
				КонецЦикла;
				
				Если ПарольКСертификатуПолучен(Соответствие, НСтр("ru = 'Подписание электронных документов'"), МассивЭД)
					И Соответствие.Количество() > 0 Тогда
					Для Каждого КлючИЗначение Из Соответствие Цикл
						СтруктураСертификата = КлючИЗначение.Значение;
						ПарольПользователя = СтруктураСертификата.ПарольПользователя;
						СертификатПодписи = КлючИЗначение.Ключ;
						СоотвСертификатовИИхСтруктур.Вставить(СертификатПодписи, СтруктураСертификата);
						Прервать;
					КонецЦикла;
				Иначе
					Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
						МассивЭДКУдалениюИзОтправки.Добавить(НеПодписанныйЭД);
					КонецЦикла;
					Продолжить;
				КонецЕсли;
				ДанныеСпецОбработки = Новый Соответствие;
				// Некоторые банки используют собственные средства криптографии.
				ЭлектронныеДокументыСлужебныйВызовСервера.ОтделитьЭДДляСпециальнойОбработки(МассивЭД, ДанныеСпецОбработки);
				КолПодписанныхДокументовБанка = 0;
				Для Каждого ЭлементСоответствия ИЗ ДанныеСпецОбработки Цикл
					ТекущееКоличество = 0;
					Если ЭлементСоответствия.Ключ = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
						Для Каждого СоглашениеИЭД ИЗ ЭлементСоответствия.Значение Цикл
							МассивЭДБанка = СоглашениеИЭД.Значение;
							Если МассивЭДБанка.Количество() > 0 Тогда
								#Если НЕ ВебКлиент Тогда
									ПодписатьЭДСбербанкаОпределеннымСертификатом(МассивЭДБанка,
									                                             СертификатПодписи,
									                                             ТекущееКоличество);
								#Иначе
									ТекстСообщения = Нстр("ru = 'Подписать документы Сбербанка в веб-клиенте невозможно.
									                            |Необходимо использовать режим тонкого или толстого клиента'");
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
									Прервать;
								#КонецЕсли
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ЭлементСоответствия.Ключ = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
						ПодписатьЭДЧерезДопОбработку(ЭлементСоответствия.Значение, СтруктураСертификата, ТекущееКоличество);
					КонецЕсли;
					КолПодписанныхДокументовБанка = КолПодписанныхДокументовБанка + ТекущееКоличество;
				КонецЦикла;
				КолПодписанных = 0;
				Если МассивЭД.Количество() > 0 Тогда
					Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
						КолПодписанных = ПодписатьЭДОпределеннымСертификатом(МассивЭД,
							СертификатПодписи, СтруктураСертификата, МассивЭДКУдалениюИзОтправки);
					Иначе
						Массив = СоотвСертификатовИМассивовЭДКПодписи.Получить(СертификатПодписи);
						Если ТипЗнч(Массив) = Тип("Массив") Тогда
							Для Каждого ТекЭД Из МассивЭД Цикл
								Массив.Добавить(ТекЭД);
							КонецЦикла;
						Иначе
							Массив = МассивЭД;
						КонецЕсли;
						СоотвСертификатовИМассивовЭДКПодписи.Вставить(СертификатПодписи, Массив);
					КонецЕсли;
				КонецЕсли;
				ИтогКолПодписанных = ИтогКолПодписанных + КолПодписанных + КолПодписанныхДокументовБанка;
			КонецЦикла;
			Если ВыполнятьКриптооперацииНаСервере И СоотвСертификатовИМассивовЭДКПодписи.Количество() > 0 Тогда
				РезультатПодписания = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДНаСервере(СоотвСертификатовИМассивовЭДКПодписи,
					СоотвСертификатовИИхСтруктур, МассивЭДКУдалениюИзОтправки);
			КонецЕсли;
		КонецЕсли;
		
		// Отправка ЭД:
		
		СоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
		СоотвСоглашенийИСертификатовАвторизации = Неопределено;
		СоотвСоглашенийИМассивовЭДКОтправке = Неопределено;
		СтруктураКОтправке = Неопределено;
		Если Результат.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
			
			МассивКОтправке = Неопределено;
			Если СтруктураКОтправке.Свойство("БезПодписи", МассивКОтправке) И ТипЗнч(МассивКОтправке) = Тип("Массив")
					И МассивКОтправке.Количество() > 0 Тогда
				СтРезультат = ПодготовитьИОтправитьПЭД(МассивКОтправке, Ложь, Новый Соответствие);
				ИтогКолОтправленных = ИтогКолОтправленных + СтРезультат.КолОтправленных;
				ИтогКолПодготовленных = ИтогКолПодготовленных + СтРезультат.КолПодготовленных;
			КонецЕсли;
			
			Если НЕ (СтруктураКОтправке.Свойство("СПодписью", МассивКОтправке) И ТипЗнч(МассивКОтправке) = Тип("Массив")) Тогда
				МассивКОтправке = Новый Массив;
			ИначеЕсли МассивЭДКУдалениюИзОтправки.Количество() > 0 Тогда
				Для Каждого УдаляемыйЭД Из МассивЭДКУдалениюИзОтправки Цикл
					ТекИндекс = МассивКОтправке.Найти(УдаляемыйЭД);
					Если ТекИндекс <> Неопределено Тогда
						МассивКОтправке.Удалить(ТекИндекс);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ (Результат.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
				И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")) Тогда
				СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
			КонецЕсли;
			
			Если СтруктураКОтправке.Свойство("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке)
				И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие") Тогда
				Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
					СоглашениеЭД = ТекЭл.Ключ;
					МассивЭД = Новый Массив;
					Для Каждого ОтправляемыйЭД Из ТекЭл.Значение Цикл
						Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) = Неопределено Тогда
							МассивЭД.Добавить(ОтправляемыйЭД);
						КонецЕсли;
					КонецЦикла;
					Если МассивЭД.Количество() > 0 Тогда
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(СоглашениеЭД);
						Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(МассивСертификатов) Тогда
							// На клиента массив ЭД к отправке через ОЭДО, может прийти только в том случае,
							// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату)
							Соответствие = Новый Соответствие;
							СертификатАвторизацииОпределен = Ложь;
							Для Каждого Сертификат Из МассивСертификатов Цикл
								ПроверитьСрокДействияСертификата(Сертификат);
								СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
								Если СтруктураСертификата.ПарольПолучен Тогда
									СертификатАвторизацииОпределен = Истина;
									Прервать;
								Иначе
									Соответствие.Вставить(Сертификат, СтруктураСертификата);
								КонецЕсли;
							КонецЦикла;
							Если НЕ СертификатАвторизацииОпределен
								И ПарольКСертификатуПолучен(Соответствие, НСтр("ru = 'Аутентификация в сервисе ЭДО'"))
								И Соответствие.Количество() > 0 Тогда
								Для Каждого КлючИЗначение Из Соответствие Цикл
									СтруктураСертификата = КлючИЗначение.Значение;
									Сертификат = КлючИЗначение.Ключ;
									СертификатАвторизацииОпределен = Истина;
									Прервать;
								КонецЦикла;
							КонецЕсли;
							
							Если СертификатАвторизацииОпределен
								И РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Тогда
								СоотвСоглашенийИСтруктурСертификатов.Вставить(СоглашениеЭД, СтруктураСертификата);
							КонецЕсли;
						КонецЕсли;
						Для Каждого Элемент Из МассивЭД Цикл
							МассивКОтправке.Добавить(Элемент);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтруктураКОтправке.Свойство("САвторизациейЛогинПароль", СоотвСоглашенийИМассивовЭДКОтправке)
				И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие") Тогда
				МассивКОтправкеБезПодписи = Новый Массив;
				Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
					СоглашениеЭД = ТекЭл.Ключ;
					ПараметрыАвторизации = Неопределено;
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКОтправкеБезПодписи, ТекЭл.Значение);
					Если НемедленнаяОтправкаЭД И ПолученыДанныеАвторизации(ТекЭл.Ключ, ПараметрыАвторизации) Тогда
						СоотвСоглашенийИСтруктурСертификатов.Вставить(ТекЭл.Ключ, ПараметрыАвторизации);
					КонецЕсли;
				КонецЦикла;
				Если МассивКОтправкеБезПодписи.Количество() > 0 Тогда
					СтРезультата = ПодготовитьИОтправитьПЭД(МассивКОтправкеБезПодписи, Ложь, СоотвСоглашенийИСтруктурСертификатов);
					ИтогКолПодготовленных = ИтогКолПодготовленных + СтРезультата.КолПодготовленных;
					ИтогКолОтправленных = ИтогКолОтправленных + СтРезультата.КолОтправленных;
				КонецЕсли;
			КонецЕсли;
			
			Если МассивКОтправке.Количество() > 0 Тогда
				СтРезультата = ПодготовитьИОтправитьПЭД(МассивКОтправке, Истина, СоотвСоглашенийИСтруктурСертификатов);
				ИтогКолОтправленных = ИтогКолОтправленных + СтРезультата.КолОтправленных;
				ИтогКолПодготовленных = ИтогКолПодготовленных + СтРезультата.КолПодготовленных;
			КонецЕсли;
		КонецЕсли;
		
		Оповестить("ОбновитьСостояниеЭД");
		
		Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Показать") Тогда
			МассивОбработки = "";
			Если Результат.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
				Для Каждого ТекЭл Из МассивОбработки Цикл
					ОткрытьЭДДляПросмотра(ТекЭл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	Если ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		ВывестиИнформациюОбОбработанныхЭД(
				ИтогКолНовыхЭД,
				ИтогКолУтвержденныхЭД,
				ИтогКолПодписанных,
				ИтогКолПодготовленных,
				ИтогКолОтправленных);
	Иначе
		ДопПараметры.Вставить("ЕстьОбработанныеЭД",
			(ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД + ИтогКолПодписанных + ИтогКолПодготовленных + ИтогКолОтправленных) > 0);
	КонецЕсли;
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СоотвСоглашенийИСтруктурСертификатов = СоотвСоглашенийИСтруктурСертификатовДляАвторизации();
	// Блок обновления статусов настроек ЭДО и получения новых приглашений.
	ТекстСообщения = НСтр("ru = 'Выполняется получение информации о приглашениях. Подождите...'");
	Состояние(НСтр("ru = 'Получение.'"), , ТекстСообщения);
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов);
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Выполняется отправка и получение пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Отправка и получение.'"), , ТекстСообщения);
	
	// Получение и отправка документов.
	
	ТребуетсяПовторитьПолучение = Ложь;
	СтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
																	СоотвСоглашенийИСтруктурСертификатов,
																	ТребуетсяПовторитьПолучение);
																	
	// Если использование маркера превысило 5 минут, его необходимо переполучить.
	Если ТребуетсяПовторитьПолучение Тогда
		НовСоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
		Для Каждого Элемент ИЗ СоотвСоглашенийИСтруктурСертификатов Цикл
			ПрофильНастроекЭДО = Элемент.Ключ;
			СтруктураСертификата = Элемент.Значение;
			
			// Аутентификация на 1С Логин для сервиса 1С-ЭДО.
			РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
			Если РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
				ПараметрыАутентификации = АутентификацияНаСайте();
				Если ПараметрыАутентификации = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
				
				СтруктураСертификата.Вставить("МаркерЗашифрованный", ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(
					СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации));
			КонецЕсли;
			
			СтруктураСертификата.Удалить("МаркерРасшифрованный");
			СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", Истина);
			Если РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, Ложь) Тогда
				НовСоотвСоглашенийИСтруктурСертификатов.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
			КонецЕсли;
		КонецЦикла;
		ДопСтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
																			НовСоотвСоглашенийИСтруктурСертификатов,
																			ТребуетсяПовторитьПолучение);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.НовыеДокументы.МассивВозврата,
				ДопСтруктураВозврата.НовыеДокументы.МассивВозврата);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.НовыеДокументы.ПараметрыРаспаковки,
				ДопСтруктураВозврата.НовыеДокументы.ПараметрыРаспаковки);
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство("ДанныеДляОтправкиЧерезДопОбработку") Тогда
		КоличествоОтправленныхПакетовЧерезДопОбработку = 0;
		ОтправитьПакетыЧерезДопОбработку(СтруктураВозврата.ДанныеДляОтправкиЧерезДопОбработку,
		                                 КоличествоОтправленныхПакетовЧерезДопОбработку);
		СтруктураВозврата.КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов
		                                         + КоличествоОтправленныхПакетовЧерезДопОбработку;
	КонецЕсли;
	
	// Распаковываем принятые пакеты с электронными документами.
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	
	// Распаковываем принятые пакеты с электронными документами.
	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	КоличествоНовыхЭД = НовыеДокументы.МассивВозврата.Количество();
	Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
		СтруктураШифрования = Неопределено;
		СтруктураРаспаковки.Свойство("СтруктураШифрования", СтруктураШифрования);
		Если СтруктураШифрования <> Неопределено Тогда
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(СтруктураШифрования.Сертификат, СтруктураШифрования.ПараметрыСертификата);
			ВидОперации = НСтр("ru = 'Расшифровать пакет электронных документов'");
			Если ПарольКСертификатуПолучен(Соответствие, ВидОперации, СтруктураРаспаковки.ПакетЭД)
				И Соответствие.Количество() > 0 Тогда
				Для Каждого КлючИЗначение Из Соответствие Цикл
					СтруктураШифрования.Вставить("ПарольПользователя", КлючИЗначение.Значение.ПарольПользователя);
					Прервать;
				КонецЦикла;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ДанныеРаспаковки = Неопределено;
		СтруктураРаспаковки.Свойство("ДанныеРаспаковки", ДанныеРаспаковки);
		
		РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, СтруктураШифрования, ДанныеРаспаковки);
	КонецЦикла;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолОтправленныхПакетов,
		КоличествоНовыхЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Аунтификация на пользовательском сайте.

// Возвращает результат авторизации на сайте интернет-поддержки.
//
// Возвращаемое значение:
//   Булево    - результат аунтификации на сайте.
//
Функция АутентификацияНаСайте(ОткрыватьФорму = Ложь) Экспорт
	
	РезультатАутентификации = ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьПараметрыАутентификацииНаСайте();
	Если РезультатАутентификации = Неопределено ИЛИ ОткрыватьФорму Тогда
		РезультатОткрытияФормы = ОткрытьФормуМодально("ОбщаяФорма.АвторизацияНаСайтеПоддержкиПользователей");
		Если РезультатОткрытияФормы = Неопределено ИЛИ РезультатОткрытияФормы = КодВозвратаДиалога.Отмена Тогда
			РезультатАутентификации = Неопределено;
		Иначе
			РезультатАутентификации = РезультатОткрытияФормы;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатАутентификации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен электронными документами с банками

//только для внутреннего использования
Процедура РазобратьЭДВыпискаБанка(ЭД) Экспорт
	
	Перем СсылкаНаХранилище, Организация, СоглашениеЭД, МассивСчетов;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеВыписки(ЭД,
																	СсылкаНаХранилище,
																	МассивСчетов,
																	Организация,
																	СоглашениеЭД);
	Если НЕ ЗначениеЗаполнено(СсылкаНаХранилище) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныеДокументыКлиентПереопределяемый.РазобратьФайлВыписки(ЭД,
																	СсылкаНаХранилище,
																	Организация,
																	МассивСчетов,
																	СоглашениеЭД);
	
КонецПроцедуры

// Проверяет наличие связи с банком и выводит сообщение о результате
//
//
Процедура ПроверитьНаличиеСвязиСБанком(СоглашениеЭД, ИдентификаторНазначения) Экспорт
	
	ПрограммаБанка = ЭлектронныеДокументыСлужебныйВызовСервера.ПрограммаБанка(СоглашениеЭД);
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда
			ТестСоглашенияСбербанк(СоглашениеЭД);
		#КонецЕсли
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ТестСоглашенияЧерезДопОбработку(СоглашениеЭД, ИдентификаторНазначения);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

// Только для внутреннего использования
Процедура РаспаковатьМассивПакетовЭД(МассивПЭД) Экспорт
	
	// Распаковываем принятые пакеты с электронными документами.
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);

	ПараметрыРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьПараметрыРаспаковки(МассивПЭД);
	Если ПараметрыРаспаковки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоРаспакованоЭД = 0;
	Для Каждого СтруктураРаспаковки Из ПараметрыРаспаковки Цикл
		
		СтруктураШифрования = Неопределено;
		СтруктураРаспаковки.Свойство("СтруктураШифрования", СтруктураШифрования);
		Если СтруктураШифрования <> Неопределено Тогда
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(СтруктураШифрования.Сертификат, СтруктураШифрования.ПараметрыСертификата);
			ВидОперации = НСтр("ru = 'Расшифровать пакет электронных документов'");
			Если ПарольКСертификатуПолучен(Соответствие, ВидОперации, СтруктураРаспаковки.ПакетЭД)
				И Соответствие.Количество() > 0 Тогда
				Для Каждого КлючИЗначение Из Соответствие Цикл
					СтруктураШифрования.Вставить("ПарольПользователя", КлючИЗначение.Значение.ПарольПользователя);
					Прервать;
				КонецЦикла;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоРаспакованныхДокументов = РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, СтруктураШифрования);
		Если Не КоличествоРаспакованныхДокументов = Неопределено Тогда
			ВсегоРаспакованоЭД = ВсегоРаспакованоЭД + КоличествоРаспакованныхДокументов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Распаковано электронных документов: (%1)'"), ВсегоРаспакованоЭД);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда

Процедура ТестСоглашенияСбербанк(СоглашениеЭД)
		
	КаналСоздан = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		WSПрокси = WSПроксиСбербанк();
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		СтрокаХМЛ = "Test from 1C";
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
		СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаХМЛ);
			
		ВыбЭл.requests.Добавить(СтрокаЗначение);
		ВыбЭл.Проверить();
		
		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл);
		
		ТекстСообщения = НСтр("ru = 'Тест выполнен успешно !'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	Исключение
		
		ВидОперации = НСтр("ru = 'Тест соединения'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения,
																					1);
		
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет отправку платежных поручений в банк
//
// Параметры
//  <МассивЭД>  - <массив> - массив ссылок на электронные документы к отправке
//  <КолОтправленных>  - <число> - количество отправленных платежных документов
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//
Процедура ОтправитьПлатежныеПорученияСбербанк(МассивЭД, КолОтправленных, СоглашениеЭД) Экспорт

	КаналСоздан = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолОтправленных = 0;
	
	МассивОтправленныхЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		Попытка
		
			WSПрокси = WSПроксиСбербанк();
			
			ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
			СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string");
			ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
			ВремФайл = ПолучитьИмяВременногоФайла();
			ИдентификаторЗапроса = Неопределено;
			ИдентификаторОрганизации = Неопределено;
			СтруктураДанныхЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьФайлПакетаСберБанка(
										ЭД, СоглашениеЭД, ИдентификаторЗапроса, ИдентификаторОрганизации);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураДанныхЭД.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаXML);
			ВыбЭл.requests.Добавить(СтрокаЗначение);
			УдалитьФайлы(ВремФайл);
			
			ВыбЭл.Проверить();
		
			XDTOРезультат = WSПрокси.sendRequests(ВыбЭл);
		
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Отправка платежного поручения'"),
														ТекстСообщения);
		
			XDTOРезультат.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
			ТекстСообщения = Запись.Закрыть();
			Событие = НСтр("ru = 'Получен тикет на отправку платежного поручения'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(СоглашениеЭД, Событие, ТекстСообщения);
			
			МассивИдентификаторов = Новый Массив;
			Для Каждого Ответ Из XDTOРезультат.return Цикл
				Если Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
					ОпределитьОшибкуИСообщитьПользователю(СоглашениеЭД, ЭД, ИдентификаторЗапроса, ИдентификаторОрганизации, Ответ);
				Иначе
					МассивОтправленныхЭД.Добавить(ЭД);
					МассивИдентификаторов.Добавить(Ответ);
					КолОтправленных = КолОтправленных + 1;
				КонецЕсли;
			КонецЦикла;
		
			ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
					МассивИдентификаторов,
					СоглашениеЭД,
					ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение"));
		
		Исключение
		
			ВидОперации = НСтр("ru = 'Отправка платежных поручений в банк'");
			ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
																		ВидОперации,
																		ОписаниеОшибки(),
																		ТекстСообщения,
																		1);
		КонецПопытки;
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусыЭД(
			МассивОтправленныхЭД,
			ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отправлен"));
	
КонецПроцедуры


// Осуществляет отправку запросов состояний обработки документов, находящихся в процессе обработки в банковской системе
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД> - <ПеречислениеСсылка.ВидыЭД> - вид электронного документа
//
Процедура ПолучитьСостоянияЭлектронныхДокументов(СоглашениеЭД, ВидЭД) Экспорт

	МассивЗапросов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивЗапросовСостоянийОбработкиДокументов(
																					СоглашениеЭД, ВидЭД);
	
	Попытка
		
		WSПрокси = WSПроксиСбербанк();
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		
		Для Каждого Элемент ИЗ МассивЗапросов Цикл
			
			ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);

			ВыбЭл.requests.Добавить(Элемент);
			
			ВыбЭл.Проверить();

			XDTOРезультат = WSПрокси.sendRequests(ВыбЭл);
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															Нстр("ru = 'Оправлен запрос статуса документа'"),
															ТекстСообщения);
			
			XDTOРезультат.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															Нстр("ru = 'Получены идентификатор запроса статуса документа'"),
															ТекстСообщения);
			
			МассивИдентификаторов = Новый Массив;
			Для Каждого Ответ Из XDTOРезультат.return Цикл
				МассивИдентификаторов.Добавить(Ответ);
			КонецЦикла;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(МассивИдентификаторов, СоглашениеЭД, ВидЭД);
		КонецЦикла;
	Исключение
		
		ВидОперации = НСтр("ru = 'Получение информации о состоянии электронных документов'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения,
																					1);
		КолОтправленных = 0;
		
	КонецПопытки;

КонецПроцедуры

// Отправляет в банк запрос на ночные выписки
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение
//
Процедура ОтправитьЗапросНаНочныеВыписки(СоглашениеЭД) Экспорт
	
	ПодключитьМенеджерДляРаботыСоСбербанком();
	
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПовторнаяАвторизация = Ложь;
	
	ТекущееСоглашениеЭД = ЗначениеИзКэша("ТекущееСоглашениеЭД");
	Если НЕ СоглашениеЭД = ТекущееСоглашениеЭД И ЗначениеЗаполнено(ТекущееСоглашениеЭД) Тогда
		СессияЗавершена = Ложь;
		ЗавершитьСессиюНаТокене(СессияЗавершена);
		Если НЕ СессияЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ЗначениеИзКэша("ТекущееСоглашениеЭД"))
	         И ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера"))) Тогда
		ДанныеАвторизации = ОткрытьФормуМодально(
									"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАвторизации");
		ПовторнаяАвторизация = Истина;
	КонецЕсли;
	
	Если ПовторнаяАвторизация Тогда
		
		Если ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
			СессияЗавершена = Ложь;
			ЗавершитьСессиюНаТокене(СессияЗавершена);
			Если НЕ СессияЗавершена Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если (ДанныеАвторизации = Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0) Тогда
			Возврат
		КонецЕсли;
		ЗакэшироватьПараметрСбербанка("НомерКонтейнера", ДанныеАвторизации.НомерКонтейнера);
		ЗакэшироватьПараметрСбербанка("ПинКод", ДанныеАвторизации.ПинКод);
		ЗакэшироватьПараметрСбербанка("ТекущееСоглашениеЭД", СоглашениеЭД);
	КонецЕсли;
	НомерКонтейнера = ЗначениеИзКэша("НомерКонтейнера");
	СертификатПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.СертификатИзСоглашенияЭД(СоглашениеЭД, НомерКонтейнера);
	Если Не ЗначениеЗаполнено(СертификатПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	КаналСоздан = ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
		
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	РеквизитыСоглашенияЭД = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСоглашенияЭД(СоглашениеЭД);
	ИдентификаторОрганизации = РеквизитыСоглашенияЭД.ИдентификаторОрганизации;
	СтрокаПодписи = "Incoming" + Символ(10) + "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
					+ "RequestId=" + ИдентификаторЗапроса;

	СтрокаПодписиBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаBase64(СтрокаПодписи);

	Операция = Нстр("ru = 'Формирование запроса на ночную выписку'");
	ЭЦП = "";
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	
	ИдентификаторСертификата = ИдентификаторСертификатаСбербанка(
		ПодключаемыйМодуль, ПараметрыСертификата.ДвоичныеДанныеСертификата);
	Если ПустаяСтрока(ИдентификаторСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Рез = ПодключаемыйМодуль.ПодписатьДанныеЧерезVPNKeyTLS(СтрокаПодписиBase64, ИдентификаторСертификата, ЭЦП);
		Если Рез <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка
										|Подробности в журнале регистрации'");
			ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при подписании вернула код ошибки'") + " " + Рез;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			ОчиститьДанныеАвторизацииСбербанк();
			Возврат;
		КонецЕсли;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка
									|Подробности в журнале регистрации'");
		ТекстОшибки = ОписаниеОшибки();
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;

	СтрокаЗапроса = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(
					ИдентификаторЗапроса, ИдентификаторОрганизации, ЭЦП, СертификатПодписи);
		
	Если Не ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		WSПрокси = WSПроксиСбербанк();
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаЗапроса);
		
		ВыбЭл.requests.Добавить(СтрокаЗначение);

		ВыбЭл.Проверить();

		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл);
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Запрос на ночную выписку отправлен в банк'"),
														ТекстСообщения);
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			Если Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
				ТипЗапроса = Нстр("ru = 'Запрос ночных выписок'");
				ОпределитьОшибкуИСообщитьПользователю(
					СоглашениеЭД, ТипЗапроса, ИдентификаторЗапроса, ИдентификаторОрганизации, Ответ);
			Иначе
				МассивИдентификаторов.Добавить(Ответ);
			КонецЕсли;
		КонецЦикла;
	
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
														МассивИдентификаторов,
														СоглашениеЭД,
														ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки"));
				
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Получен идентификатор отправки запроса на ночную выписку'"),
														ТекстСообщения);
		
	Исключение

		ВидОперации = НСтр("ru = 'Запрос ночной выписки банка'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения,
																					1);
	КонецПопытки;

КонецПроцедуры

// Получает статусы и идентификаторы отправленных платежных документов
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисление.ВидыЭД> - вид электронного документа
//
Процедура ПолучитьРезультатыОбработкиЗапросов(СоглашениеЭД, ВидЭД) Экспорт
		
	СтрокаЗапроса = "";
	ИдентификаторЗапроса = "";
	МассивИдентификаторов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивИдентификаторовЗапроса(СоглашениеЭД, ВидЭД);
		
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор ИЗ МассивИдентификаторов Цикл
	
		Попытка
			
			WSПрокси = WSПроксиСбербанк();
			
			ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "getRequestStatus");
			СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
			ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
			СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип, Идентификатор);

			ВыбЭл.requests.Добавить(СтрокаЗначение);
			
			ВыбЭл.Проверить();
			
			XDTOРезультат = WSПрокси.getRequestStatus(ВыбЭл); 
			
			Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного платежного поручения'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного платежного поручения'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного запроса банковской выписки'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного запроса банковской выписки'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного запроса ночной выписки'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного запроса ночной выписки'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор запроса готовой выписки банка'");
				ОписаниеПолучения = Нстр("ru = 'Получена банковская выписка'");
			КонецЕсли;
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															ОписаниеОтправки,
															ТекстСообщения);
			
			XDTOРезультат.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
			ТекстСообщения = Запись.Закрыть();
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															ОписаниеПолучения,
															ТекстСообщения);
			
			МассивНовыхЭД = Новый Массив;
			
			МассивОтветов = Новый Массив;
			
			Для Каждого Ответ ИЗ XDTOРезультат.Return Цикл
				
				Если Ответ = "<!--NOT PROCESSED YET-->" Тогда
					Продолжить; // Запрос еще не был обработан
				ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" Тогда
					ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, ВидЭД);
					Продолжить; // идентифкатор не найден в базе банка
				КонецЕсли;
				
				МассивОтветов.Добавить(Ответ);
	
			КонецЦикла;
			
			Если МассивОтветов.Количество() > 0 Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОтветыСбербанка(
																	МассивОтветов,
																	СоглашениеЭД,
																	ВидЭД,
																	МассивНовыхЭД,
																	Идентификатор);
			КонецЕсли;
			
			Для Каждого НовыйЭД ИЗ МассивНовыхЭД Цикл
				ОпределитьСтатусыПодписейСбербанка(НовыйЭД);
			КонецЦикла

		Исключение
			
			ВидОперации = НСтр("ru = 'Получение информации о результатах обработки документов'");
			ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																						ОписаниеОшибки(),
																						ТекстСообщения,
																						1);
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;

	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Отправляет в банк запрос на получение готовых  выписок банка
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//
Процедура ОтправитьЗапросНаПолучениеГотовыхВыписок(СоглашениеЭД) Экспорт
	
	Попытка
		
		СтрокаЗначение = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстЗапросаСостоянияЗапросовВыпискиБанка(СоглашениеЭД);
		
		Если ПустаяСтрока(СтрокаЗначение) Тогда
			Возврат;
		КонецЕсли;
		
		WSПрокси = WSПроксиСбербанк();
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		ВыбЭл.requests.Добавить(СтрокаЗначение);
		
		ВыбЭл.Проверить();
		
		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл); 
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														НСтр("ru = 'Оправлен запрос на получение готовой выписки'"),
														ТекстСообщения);
			
		XDTOРезультат.Проверить();
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			МассивИдентификаторов.Добавить(Ответ);
		КонецЦикла;
	
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
														МассивИдентификаторов,
														СоглашениеЭД,
														ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка"));
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														НСтр("ru = 'Получены идентификаторы банковских выписок"),
														ТекстСообщения);
	Исключение
		
		ВидОперации = НСтр("ru = 'Получение банковских выписок'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации,
																					ОписаниеОшибки(),
																					ТекстСообщения,
																					1);
		
	КонецПопытки;
	
КонецПроцедуры

// только для внутреннего использования
Процедура ЗапроситьВыпискуСбербанк(СоглашениеЭД, Организация, ДатаНачала, ДатаОкончания, Ночная = Ложь, ЭД = Неопределено) Экспорт
	
	ЭД = "";
	СтрокаЗапроса = "";
	
	ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДоступныеБанковскиеСертификаты(
													СоглашениеЭД,
													ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки"));
	Если ДоступныеСертификаты.Количество()=0 Тогда
		ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат подписи для организации <%1> и вида документа <Запрос выписки>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьЭДЗапросаВыписки(
															СоглашениеЭД,
															ДатаНачала,
															ДатаОкончания,
															ЭД);
			
	Если Не ЗначениеЗаполнено(ЭД) Тогда
		Возврат;
	КонецЕсли;
		
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ЭД);
	
	КоличествоПодписанных = 0;
	Если ДоступныеСертификаты.Количество()=1 Тогда
		ПодписатьЭДСбербанкаОпределеннымСертификатом(МассивЭД, ДоступныеСертификаты[0], КоличествоПодписанных);
	Иначе
		ПодписатьЭДСбербанкаОпределеннымСертификатом(МассивЭД, Неопределено, КоличествоПодписанных);
	КонецЕсли;
	Если КоличествоПодписанных = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КаналСоздан = ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан);
	
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		WSПрокси = WSПроксиСбербанк();
		
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "sendRequests");
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema","string");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		
		ВремФайл = ПолучитьИмяВременногоФайла();
		ИдентификаторЗапроса = Неопределено;
		ИдентификаторОрганизации = Неопределено;
		СтруктураДанныхЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьФайлПакетаСбербанка(
									ЭД, СоглашениеЭД, ИдентификаторЗапроса, ИдентификаторОрганизации);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураДанныхЭД.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанные.Записать(ВремФайл);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ВремФайл);
		УдалитьФайлы(ВремФайл);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();

		СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип,СтрокаXML);
		
		ВыбЭл.requests.Добавить(СтрокаЗначение);
						
		ВыбЭл.Проверить();
				
		XDTOРезультат = WSПрокси.sendRequests(ВыбЭл); 
	
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Запрос на выписку отправлен в банк'"),
														ТекстСообщения);
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстСообщения = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД,
														Нстр("ru = 'Получен идентификатор отправки запроса на выписку'"),
														ТекстСообщения);
														
		МассивИдентификаторов = Новый Массив;
		ЕстьОшибка = Ложь;
		Для Каждого Ответ Из XDTOРезультат.return Цикл
			Если Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
				ОпределитьОшибкуИСообщитьПользователю(СоглашениеЭД, ЭД, ИдентификаторЗапроса, ИдентификаторОрганизации, Ответ);
				ЕстьОшибка = Истина;
			Иначе
				МассивИдентификаторов.Добавить(Ответ);
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОшибка Тогда
			Возврат;
		КонецЕсли;
				
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
				МассивИдентификаторов,
				СоглашениеЭД,
				ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки"));
						
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусЭД(ЭД, Перечисления.СтатусыЭД.Отправлен);
				
	Исключение
		
		ВидОперации = НСтр("ru = 'Запрос выписки банка'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС + НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ОписаниеОшибки(), ТекстСообщения, 1);
	КонецПопытки;
		
КонецПроцедуры

#КонецЕсли

#Если НЕ ВебКлиент Тогда

// Добавляет подпись для документа сбербанка с использованием токена
//
// Параметры
//  <ДобавленныеФайлы>  - <Массив> - содержит ссылки на электронные документы
//  <СертификатПодписи>  - <СправочникСсылка.СертификатыЭЦП> - ссылка на сертификат подписи
//  <КоличествоПодписанныхЭД>  - <Число> - количество удачно подписанных ЭД
//
Процедура ПодписатьЭДСбербанкаОпределеннымСертификатом(
								ДобавленныеФайлы,
								СертификатПодписи,
								КоличествоПодписанныхЭД) Экспорт
	
	Операция = Нстр("ru = 'Подписание электронного документа'");
	
	ПодключитьМенеджерДляРаботыСоСбербанком();
	
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоглашениеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоглашениеЭД(ДобавленныеФайлы[0]);
	ПовторнаяАвторизация = Ложь;
	
	ТекущееСоглашениеЭД = ЗначениеИзКэша("ТекущееСоглашениеЭД");
	Если НЕ СоглашениеЭД = ТекущееСоглашениеЭД И ЗначениеЗаполнено(ТекущееСоглашениеЭД) Тогда
		СессияЗавершена = Ложь;
		ЗавершитьСессиюНаТокене(СессияЗавершена);
		Если НЕ СессияЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		ПроверитьСрокДействияСертификата(СертификатПодписи);
		НомерКонтейнера = ЭлектронныеДокументыСлужебныйВызовСервера.НомерКонтейнера(СертификатПодписи, СоглашениеЭД);
		Если НЕ НомерКонтейнера = ЗначениеИзКэша("НомерКонтейнера") Тогда
			Параметры = Новый Структура("НомерКонтейнера", НомерКонтейнера);
			ДанныеАвторизации = ОткрытьФормуМодально(
										"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАвторизации",
										Параметры);
			ПовторнаяАвторизация = Истина;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеИзКэша("ТекущееСоглашениеЭД"))
		ИЛИ НЕ ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
		
		ДанныеАвторизации = ОткрытьФормуМодально(
									"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАвторизации");
		ПовторнаяАвторизация = Истина;
	КонецЕсли;
	
	Если ПовторнаяАвторизация Тогда
		
		Если ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
			СессияЗавершена = Ложь;
			ЗавершитьСессиюНаТокене(СессияЗавершена);
			Если НЕ СессияЗавершена Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если (ДанныеАвторизации = Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0) Тогда
			Возврат
		КонецЕсли;
		ЗакэшироватьПараметрСбербанка("НомерКонтейнера", ДанныеАвторизации.НомерКонтейнера);
		ЗакэшироватьПараметрСбербанка("ПинКод", ДанныеАвторизации.ПинКод);
		ЗакэшироватьПараметрСбербанка("ТекущееСоглашениеЭД", СоглашениеЭД);
	КонецЕсли;
	НомерКонтейнера = ЗначениеИзКэша("НомерКонтейнера");
	СертификатПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.СертификатИзСоглашенияЭД(СоглашениеЭД, НомерКонтейнера);
	Если Не ЗначениеЗаполнено(СертификатПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
		
	КаналУстановлен = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналУстановлен);
	Если Не КаналУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = ИдентификаторСертификатаСбербанка(
		ПодключаемыйМодуль, ПараметрыСертификата.ДвоичныеДанныеСертификата);
		
	Если ПустаяСтрока(ИдентификаторСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭД ИЗ ДобавленныеФайлы Цикл
				
		СтрокаПодписиBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
		ЭЦП="";
		
		Попытка
			Рез = ПодключаемыйМодуль.ПодписатьДанныеЧерезVPNKeyTLS(СтрокаПодписиBase64, ИдентификаторСертификата, ЭЦП);
			Если Рез <> 0 Тогда
				ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка'") + Символы.ПС
								+ НСтр("ru = 'Подробности в журнале регистрации'");
				ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при подписании вернула код ошибки'")+ " " + Рез;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
				ОчиститьДанныеАвторизацииСбербанк();
				Возврат;
			КонецЕсли;
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'При подписании ЭЦП произошла ошибка'") + Символы.ПС
							+ НСтр("ru='Подробности в журнале регистрации'");
			ТекстОшибки = ОписаниеОшибки();
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			Возврат;
		КонецПопытки;
		
		ДвоичныеДанныеЭЦП = Base64Значение(ЭЦП);
		
		ДанныеПодписи = Новый Структура("НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи,
										|КомуВыданСертификат, ДвоичныеДанныеСертификата");
		
		ДанныеПодписи.Отпечаток                  = ПараметрыСертификата.Отпечаток;
		ДанныеПодписи.ДатаПодписи                = ОбщегоНазначенияКлиент.ДатаСеанса();
		ДанныеПодписи.ДвоичныеДанныеСертификата  = ПараметрыСертификата.ДвоичныеДанныеСертификата;
		ДанныеПодписи.НоваяПодписьДвоичныеДанные = ДвоичныеДанныеЭЦП;
		ДанныеПодписи.КомуВыданСертификат        = ПараметрыСертификата.Наименование;

		ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ЭД, ДанныеПодписи);
		
		Комментарий = НСтр("ru = 'Выполнение операции: %1.
								|Установил подпись: %2, сертификат: %3'");
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Комментарий, Операция, ПользователиКлиентСервер.АвторизованныйПользователь(), СертификатПодписи);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьВЖурналРегистрации(Комментарий, 1, "Информация", ЭД);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭД);
		
		ОпределитьСтатусыПодписейСбербанка(ЭД);
		
		КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает зашифрованный канал с банком через токен
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <КаналСоздан>  - <Булево> - признак, что канал создан
//
Процедура УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан) Экспорт
	
	КаналСоздан = Ложь;
	Операция = Нстр("ru = 'Установка виртуального канала'");
	
	ПодключитьМенеджерДляРаботыСоСбербанком();
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	Если ПодключаемыйМодуль = Неопределено Тогда
		ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеИзКэша("КаналУстановлен") = Истина И ЗначениеИзКэша("ТекущееСоглашениеЭД") = СоглашениеЭД Тогда
		КаналСоздан = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
		ДанныеАвторизации = ОткрытьФормуМодально(
								"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАвторизации");
		Если ДанныеАвторизации=Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0 Тогда
			ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);
			Возврат;
		КонецЕсли;
		ЗакэшироватьПараметрСбербанка("НомерКонтейнера", ДанныеАвторизации.НомерКонтейнера);
		ЗакэшироватьПараметрСбербанка("ПинКод", ДанныеАвторизации.ПинКод);
		ЗакэшироватьПараметрСбербанка("ТекущееСоглашениеЭД", СоглашениеЭД);
	КонецЕсли;
	
	АвторизацияВыполнена = Ложь;
	АвторизоватьсяНаТокене(СоглашениеЭД, АвторизацияВыполнена);
	Если НЕ АвторизацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	НомерБизнесСистемы = ПолучитьНомерБизнесСистемы();
	
	Если НомерБизнесСистемы = -1 Тогда //не удалось определить бизнес систему
		Возврат;
	КонецЕсли;
	РезультатПодключения = ПодключаемыйМодуль.УстановитьTLSКаналСБизнесСистемой(НомерБизнесСистемы);
	
	Если НЕ РезультатПодключения = 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не удалось установить связь с сервером.'") + Символы.ПС
			+ Нстр("ru = 'Необходимо проверить работу TLS VPN Key.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при установке виртуального канала вернула код ошибки'")
		+ " " + РезультатПодключения;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		ОчиститьДанныеАвторизацииСбербанк();
		Возврат;
	КонецЕсли;
	
	ЗакэшироватьПараметрСбербанка("КаналУстановлен", Истина);
	КаналСоздан = Истина;
	
КонецПроцедуры

// Определяет валидность установленных подписей и сохраняет результат в ЭД
//
// Параметры: 
// <СправочникСсылка.ЭДПрисоединенныеФайлы> - ссылка на электронный документ
//
Процедура ОпределитьСтатусыПодписейСберБанка(ЭД) Экспорт
	
	ПодключитьМенеджерДляРаботыСоСбербанком();
	
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
	
	СоответствиеПодписейИСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеУстановленныхПодписейИСертификатов(ЭД);
	
	СтрокаФорматBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
	
	РезультатПроверки = Новый Массив();
	
	СоглашениеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоглашениеЭД(ЭД);

	КаналУстановлен = Ложь;
	УстановитьВиртуальныйКанал(СоглашениеЭД, КаналУстановлен);
	Если Не КаналУстановлен Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Элемент Из СоответствиеПодписейИСертификатов Цикл
		СтрокаСертификат = Элемент.Значение;
		Подпись = Элемент.Ключ;
		Попытка
			КодВозврата = ПодключаемыйМодуль.ПроверитьПодписьДанныхЧерезVPNKeyTLS(
									СтрокаФорматBase64, Подпись, СтрокаСертификат);
			Если КодВозврата = 0 Тогда
				РезультатПроверки.Добавить(Истина);
			Иначе
				РезультатПроверки.Добавить(Ложь);
			КонецЕсли;
			ТекстДляЖурнала = НСтр("ru = 'Выполнение операции: Проверка подписи.
										|Проверена подпись для электронного документа: %1
										|Результат проверки: подпись %2.'");
			ТекстДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляЖурнала,
				ЭД, ?(КодВозврата = 0, "верна","неверна"));
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьВЖурналРегистрации(ТекстДляЖурнала, 1, "Информация", ЭД);
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Проверка валидности электронной подписи.
								|Во время проверки валидности электронной подписи произошла ошибка.
								|Дополнительное описание:
								|%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьВЖурналРегистрации(ОписаниеОшибки, 1, "Ошибка");
			РезультатПроверки.Добавить(Неопределено);
		КонецПопытки;
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ЗафиксироватьРезультатПроверкиЭЦП(ЭД, РезультатПроверки);

КонецПроцедуры

Функция ИдентификаторСертификатаСбербанка(ПодключаемыйМодуль, ДвоичныеДанныеСертификата)
	
	ИдентификаторСертификата = "";
	Попытка
		СертификатЭП = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		СерийныйНомер = Base64Строка(СертификатЭП.СерийныйНомер);
		ПодключаемыйМодуль.НайтиСертификат(СерийныйНомер, 0, 0, 0, 0, 0, 0, 0, 0, ИдентификаторСертификата);
		Если ПустаяСтрока(ИдентификаторСертификата) Тогда
			Операция = Нстр("ru = 'Поиск сертификата подписи на банковском ключе по серийному номеру'");
			ТекстСообщения = НСтр("ru = 'Не найден сертификат подписи на банковском ключе
										|Подробности в журнале регистрации'");
			ТекстОшибки = НСтр("ru = 'Не найден сертификат подписи на банковском ключе'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
												Операция, ТекстОшибки, ТекстСообщения, 1);
			ОчиститьДанныеАвторизацииСбербанк();
		КонецЕсли;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При поиске сертификата на банковском ключе произошла ошибка
									|Подробности в журнале регистрации'");
		ТекстОшибки = ОписаниеОшибки();
		ОчиститьДанныеАвторизацииСбербанк();
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
	КонецПопытки;

	Возврат ИдентификаторСертификата;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

// Расшифровывает и распаковывает пакет электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, исследуемый пакет электронных документов.
//  СтруктураШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//  ДанныеРаспаковки - Структура, содержит распакованные данные пакета
//
Функция РаспаковатьПакетЭДНаКлиенте(ПакетЭД, СтруктураШифрования, ДанныеРаспаковки = Неопределено)
	
	Перем ПапкаДляРаспаковки;
	МассивВозврата = Новый Массив;
	
	Попытка
		
		Если ДанныеРаспаковки = Неопределено Тогда
			ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД);
		КонецЕсли;
		
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьКриптосредствоНаКлиенте = Ложь;
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				ЕстьКриптосредствоНаКлиенте = Истина;
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		ДанныеРаспаковки.Свойство("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			СтруктураВозврата       = Новый Структура;
			СоответствиеЭДИПодписей = Новый Соответствие;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
																									ПакетЭД,
																									ДанныеРаспаковки,
																									ЕстьКриптосредствоНаКлиенте,
																									СоответствиеЭДИПодписей,
																									СтруктураВозврата);
			МассивДобавленныхФайлов             = СтруктураВозврата.МассивДобавленныхФайлов;
			МассивДобавленныхФайловДляИзвещений = СтруктураВозврата.МассивДобавленныхФайловДляИзвещений;
			МассивВладельцев                    = СтруктураВозврата.МассивВладельцев;
			Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") И МассивДобавленныхФайлов.Количество() > 0
				И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
				И НЕ МенеджерКриптографии = Неопределено Тогда
				
					Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;

			Если КоличествоОбработанныхДокументов > 0 Тогда
				Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивВладельцев);
			КонецЕсли;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
				ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, ВидЭД);
			КонецЕсли;
			
			Возврат КоличествоОбработанныхДокументов;
		КонецЕсли;
		
		МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
		МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
		
		Если МассивДвоичныхДанных.Количество() = 0 Тогда
			МассивЭДИДанныхПодписей = Новый Массив;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(
															ДанныеРаспаковки.СоответствиеФайлПараметры,
															ПакетЭД,
															ДанныеРаспаковки.ФайлыПакета,
															МассивЭДИДанныхПодписей);
			Если МассивЭДИДанныхПодписей.Количество() > 0 Тогда
				Для Каждого Элемент ИЗ МассивЭДИДанныхПодписей Цикл
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Элемент.ДанныеПодписи);
					Если СертификатыПодписи.Количество() <> 0 Тогда
						Сертификат = СертификатыПодписи[0];
						ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.ЭлектронныйДокумент,
															Элемент.ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
															Сертификат.Субъект),
															Сертификат.Выгрузить());
						ОпределитьСтатусыПодписей(Элемент.ЭлектронныйДокумент);
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
			Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
				
				// Обработать пришедшие извещения от оператора
				// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
				МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
					СтруктураДанных.ИмяФайла,
					ДанныеРаспаковки.ФайлыПакета,
					СтруктураДанных.ДвоичныеДанные,
					ДанныеРаспаковки.СоответствиеФайлПараметры,
					Истина);
				
				Если МассивСтруктурПодписей <> Неопределено Тогда
					ФлагОшибки = Ложь;
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
							Попытка
								ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла,
									СтруктураПодписи.ДвоичныеДанныеПодписи);
							Исключение
								ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
								ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									НСтр("ru = 'проверка подписи'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
								ФлагОшибки = Истина;
								Прервать;
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
					
					Если ФлагОшибки Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(ПакетЭД,
																								 МассивСтруктурПодписей,
																								 СтруктураДанных,
																								 ДанныеРаспаковки.СоответствиеФайлПараметры,
																								 ДанныеРаспаковки.ФайлыПакета);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибкаРаспаковки = Ложь;
		
		Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
			Если СтруктураШифрования <> Неопределено Тогда
				Если СтруктураШифрования.Свойство("ПарольПользователя") Тогда
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						РасшифрованныеДвоичныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифрованныеДанные(
																								СтруктураДанных.ДвоичныеДанные,
																								СтруктураШифрования.ПарольПользователя);
						Если РасшифрованныеДвоичныеДанные = Неопределено Тогда
							Возврат Неопределено;
						КонецЕсли;
					Иначе
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольПользователя;
						// Метод расшифровки генерирует исключение в случае ошибки.
						Попытка
							РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(СтруктураДанных.ДвоичныеДанные);
						Исключение
							ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
							ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
																		НСтр("ru = 'расшифровка пакета ЭД'"),
																		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																		ТекстСообщения);
							Возврат Неопределено;
						КонецПопытки;
					КонецЕсли;
					СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
				Иначе
					ШаблонСообщения = НСтр("ru = '%1. Не указан пароль к сертификату расшифровки: %2.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103"), СтруктураШифрования.Сертификат);
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'расшифровка пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																					СтруктураДанных.ИмяФайла,
																					ДанныеРаспаковки.ФайлыПакета,
																					СтруктураДанных.ДвоичныеДанные,
																					ДанныеРаспаковки.СоответствиеФайлПараметры);
			
			СоответствиеЭДИПодписей = Новый Соответствие;
			МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																					ПакетЭД,
																					МассивСтруктурПодписей,
																					СтруктураДанных,
																					ДанныеРаспаковки.СоответствиеФайлПараметры,
																					ДанныеРаспаковки.ФайлыПакета,
																					ЕстьОшибкаРаспаковки,
																					ЕстьКриптосредствоНаКлиенте,
																					СоответствиеЭДИПодписей);
																					
			Если Не МассивДобавленныхФайлов = Неопределено И МассивДобавленныхФайлов.Количество() > 0
				И Не МенеджерКриптографии = Неопределено
				И Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;
			Если Не ЕстьОшибкаРаспаковки Тогда
				Если (ЗначениеЗаполнено(ТипДанных)
						И ДанныеРаспаковки.СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД") = Неопределено
						И Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(
							ЭлектронныеДокументыСлужебныйВызовСервера.СпособОбменаЭД(ПакетЭД)))
						
					Или (ЭлектронныеДокументыСлужебныйВызовСервера.ВерсияФорматаПакета(ПакетЭД)
						= ПредопределенноеЗначение("Перечисление.ВерсииФорматаПакетаЭД.Версия30")) Тогда
					
					ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
					ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайлов, ВидЭД);
				КонецЕсли;
				
				ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
			КонецЕсли;
		КонецЦикла;
			
		Если ЕстьОшибкаРаспаковки Тогда
			Возврат 0;
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД,
			ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат МассивВозврата.Количество();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ТестСертификатаНаКлиенте(Отпечаток, Пароль, ВыводитьТолькоОшибки, Отказ)
									
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на компьютере.'");
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонРезультата,
								ТекстОшибки,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на компьютере.'");
	
	Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если Сертификат <> Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Иначе
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("101");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата на компьютере.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(
									Сертификат,
									РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на компьютере.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭЦП.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП на компьютере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, Сертификат);
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

#Если НЕ ВебКлиент Тогда

// Возвращает закэшированный параметр обмена со сбербанком
//
// Параметры
//  НазваниеПараметра  - Строка - название параметра
//
// Возвращаемое значение:
// Произвольный - значение параметра
//
Функция ЗначениеИзКэша(НазваниеПараметра) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыПодсистемыОбменСБанками) Тогда
		ПараметрыОбменаСбербанк = ПараметрыПодсистемыОбменСБанками.Получить("Сбербанк");
		Если ПараметрыОбменаСбербанк <> Неопределено И ПараметрыОбменаСбербанк.Свойство(НазваниеПараметра) Тогда
			Возврат ПараметрыОбменаСбербанк[НазваниеПараметра];
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Получает сертификат подписи с токена банка
//
// Возвращаемое значение:
//  ДвоичныеДанные - данные сертификата подписи
//
Функция ДанныеСертификатаСТокенаСбербанка() Экспорт
	
	АвторизацияВыполнена = Ложь;
	АвторизоватьсяНаТокене(Неопределено, АвторизацияВыполнена);
	Если НЕ АвторизацияВыполнена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерБизнесСистемы = ПолучитьНомерБизнесСистемы();
	Если НомерБизнесСистемы = -1 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена бизнес система на банковском ключе.'") + Символы.ПС
			+ Нстр("ru = 'Необходимо проверить работу TLS VPN Key.'");
		Операция = Нстр("ru = 'Получение сертификата с токена'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстСообщения, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецЕсли;
	ИдентификаторСертификата = ПолучитьИдентификаторСертификата();
	Если Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата);
	
КонецФункции
	
Процедура ПодключитьМенеджерДляРаботыСоСбербанком()
	
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	Если ПодключаемыйМодуль = Неопределено Тогда
		АдресВнешнейКомпоненты = ЭлектронныеДокументыСлужебныйВызовСервера.АдресВнешнейКомпонентыСбербанка();
		Попытка
			ВнешняяКомпонентаПодключена = ПодключитьВнешнююКомпоненту(
				АдресВнешнейКомпоненты, "CryptoExtension", ТипВнешнейКомпоненты.Native);
			Если НЕ ВнешняяКомпонентаПодключена Тогда
				УстановитьВнешнююКомпоненту(АдресВнешнейКомпоненты);
				ВнешняяКомпонентаПодключена = ПодключитьВнешнююКомпоненту(
					АдресВнешнейКомпоненты, "CryptoExtension", ТипВнешнейКомпоненты.Native);
				Если Не ВнешняяКомпонентаПодключена Тогда
					ОчиститьСообщения();
					ТекстСообщения = НСтр("ru = 'Не удалось подключить компоненту банка.");
					Операция = Нстр("ru = 'Подключение компоненты для работы с банком'");
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
													Операция, ТекстСообщения, ТекстСообщения, 1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ПодключаемыйМодуль = Новый("AddIn.CryptoExtension.VPNKeyTLS");
			ЗакэшироватьПараметрСбербанка("ПодключаемыйМодуль", ПодключаемыйМодуль);
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Не удалось подключить компоненту банка.
										|Подробности в журнале регистрации'");
			Операция = Нстр("ru = 'Подключение компоненты для работы с банком'");
			ТекстОшибки = ОписаниеОшибки();
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
												Операция, ТекстОшибки, ТекстСообщения, 1);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция АдресWSDLСхемыСбербанк(Тестовый = Ложь)
	
	Если Тестовый Тогда
		Возврат "http://localhost:28016/ic46/upg?wsdl";
	КонецЕсли;
	
	Возврат "http://localhost:28016/sbns-upg/upg?wsdl"
	
КонецФункции

// Выполняет процедуру авторизации на банковском ключе
//
// Параметры
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  АвторизацияВыполнена  - Булево - результат выполнения авторизации
//  ПовторнаяАвторизация - Булево - признак устанавливается, если пришлось сначала закрыть предыдущую сессию
//
Процедура АвторизоватьсяНаТокене(СоглашениеЭД, АвторизацияВыполнена, ПовторнаяАвторизация = Ложь)
	
	АвторизацияВыполнена = Ложь;
	ПодключитьМенеджерДляРаботыСоСбербанком();
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера"))
		     И ЗначениеИзКэша("ТекущееСоглашениеЭД") = СоглашениеЭД) Тогда
		ДанныеАвторизации = ОткрытьФормуМодально(
				"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАвторизации");
		Если ДанныеАвторизации = Неопределено ИЛИ ДанныеАвторизации.НомерКонтейнера = 0 Тогда
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
			СессияЗавершена = Ложь;
			ЗавершитьСессиюНаТокене(СессияЗавершена);
			Если НЕ СессияЗавершена Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗакэшироватьПараметрСбербанка("НомерКонтейнера", ДанныеАвторизации.НомерКонтейнера);
		ЗакэшироватьПараметрСбербанка("ПинКод", ДанныеАвторизации.ПинКод);
		ЗакэшироватьПараметрСбербанка("ТекущееСоглашениеЭД", СоглашениеЭД);
	КонецЕсли;
	
	РезультатАвторизации = ПодключаемыйМодуль.ПредъявитьПин(ЗначениеИзКэша("НомерКонтейнера"), ЗначениеИзКэша("ПинКод"));
	Если Не (РезультатАвторизации = 0) Тогда
		Если НЕ ПовторнаяАвторизация И РезультатАвторизации = 24 Тогда
			СессияЗавершена = Ложь;
			Если ЗначениеИзКэша("АвторизацияВыполнена") = Истина Тогда
				ЗавершитьСессиюНаТокене(СессияЗавершена);
			КонецЕсли;
			Если СессияЗавершена Тогда
				АвторизоватьсяНаТокене(СоглашениеЭД, АвторизацияВыполнена, Истина);
			Иначе
				ОчиститьСообщения();
				ТекстСообщения = НСтр("ru = 'Не удалось авторизоваться на токене.'") + Символы.ПС
					+ Нстр("ru = 'Необходимо выполнить перезапуск банковского ключа'");
				ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при авторизации на токене вернула код ошибки'")
					+ " " + РезультатАвторизации;
				Операция = НСтр("ru = 'Авторизация на токене'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
													Операция, ТекстОшибки, ТекстСообщения, 1);
				ОчиститьДанныеАвторизацииСбербанк();
				ЗакэшироватьПараметрСбербанка("АвторизацияВыполнена", Ложь);
			КонецЕсли;
		ИначеЕсли РезультатАвторизации = 28 Тогда
			ШаблонСообщения = Нстр("ru = 'PIN%1 заблокирован'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ЗначениеИзКэша("НомерКонтейнера"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РезультатАвторизации = 27 Тогда
			ШаблонСообщения = Нстр("ru = 'PUK%1 заблокирован'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ЗначениеИзКэша("НомерКонтейнера"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РезультатАвторизации = 25 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Пользователь заблокирован'"));
		ИначеЕсли РезультатАвторизации = 29 ИЛИ РезультатАвторизации = 30 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Неверные данные авторизации'"));
		ИначеЕсли НЕ (ЗначениеИзКэша("АвторизацияВыполнена") = Истина) Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Не удалось авторизоваться на токене.'") + Символы.ПС
				+ Нстр("ru = 'Необходимо выполнить перезапуск банковского ключа'");
			ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при авторизации на токене вернула код ошибки'")
				+ " " + РезультатАвторизации;
			Операция = НСтр("ru = 'Авторизация на токене'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			ОчиститьДанныеАвторизацииСбербанк();
			ЗакэшироватьПараметрСбербанка("АвторизацияВыполнена", Ложь);
		КонецЕсли;
		Возврат
	КонецЕсли;
	ЗакэшироватьПараметрСбербанка("АвторизацияВыполнена", Истина);
	АвторизацияВыполнена = Истина;
	
КонецПроцедуры

Функция ПолучитьНомерБизнесСистемы()
	
	НомерБизнесСистемы = -1;
	НазваниеБизнесСистемы = """УПШ СББОЛ""";
	ПодключитьМенеджерДляРаботыСоСбербанком();
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	БизнесСистемы = "";
	Рез = ПодключаемыйМодуль.ПолучитьСписокБизнесСистемVPNKeyTLS(БизнесСистемы);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка при получении списка бизнес систем.
									|Подробности в журнале регистрации.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка бизнес систем вернула код ошибки %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Рез);
		Операция = НСтр("ru = 'Получение списка бизнес систем.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		ОчиститьДанныеАвторизацииСбербанк();
		Возврат НомерБизнесСистемы;
	КонецЕсли;
	Попытка
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(БизнесСистемы, Символы.ПС);
		Для Каждого Строка из МассивСтрок Цикл
			Если Найти(ВРег(Строка), ВРег(НазваниеБизнесСистемы)) > 0 Тогда
				ПозПервойКавычки = Найти(Строка, """");
				БизнесСистемаСтрокой = Сред(Строка, ПозПервойКавычки + 1);
				ПозВторойКавычки = Найти(БизнесСистемаСтрокой, """");
				БизнесСистемаСтрокой = Сред(БизнесСистемаСтрокой, 1 , ПозВторойКавычки - 1);
				НомерБизнесСистемы = Число(БизнесСистемаСтрокой);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка чтения списка бизнес систем.
									|Подробности в журнале регистрации.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка бизнес систем код ошибки'") + Рез
						+ Символы.ПС + Нстр("ru = 'Содержимое списка возврата:'") + " " + Символы.ПС + БизнесСистемы + "'";
		Операция = НСтр("ru = 'Получение списка бизнес систем.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
	КонецПопытки;

	Если НомерБизнесСистемы = -1 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена бизнес система на банковском ключе.
									|Необходимо проверить работу TLS VPN Key.'");
		Операция = Нстр("ru = 'Поиск бизнес системы на электронном ключе.'");
		ТекстОшибки = Нстр("ru = 'На электронном ключе не найдена бизнес система:'") + " " + НазваниеБизнесСистемы 
					+ Символы.ПС
					+ Нстр("ru = 'Содержимое списка возврата:'") + " " + Символы.ПС + БизнесСистемы + "'";
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
	КонецЕсли;
	
	Возврат НомерБизнесСистемы;
	
КонецФункции

Процедура ОчиститьДанныеАвторизацииСбербанк()
	
	Если ЗначениеЗаполнено(ПараметрыПодсистемыОбменСБанками) Тогда
		ПараметрыПодсистемыОбменСБанками.Удалить("Сбербанк");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьСессиюНаТокене(СессияЗавершена)
	
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	Рез = ПодключаемыйМодуль.ЗавершитьСессию();
	ОчиститьДанныеАвторизацииСбербанк();
	ЕстьОшибка = НЕ (Рез = 0);
	Если ЕстьОшибка Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не удалось завершить сессию на токене.
									|Необходим перезапуск токена'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при завершении сессии на токене вернула код ошибки'") + Рез;
		Операция = НСтр("ru = 'Завершение сессии на токене.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
	Иначе
		ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);
	КонецЕсли;
	
	СессияЗавершена = НЕ ЕстьОшибка;
	
КонецПроцедуры

Функция ПолучитьИдентификаторСертификата()

	ИдентификаторыСертификатов = "";
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	Рез = ПодключаемыйМодуль.ПолучитьСписокИдентСертификатовVPNKeyTLS(0, ИдентификаторыСертификатов);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка получения списка доступных сертификатов.
									|Подробности в журнале регистрации'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка доступных сертификатов вернула код ошибки'")
						+ Рез;
		Операция = НСтр("ru = 'Подписание электронного документа.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		ОчиститьДанныеАвторизацииСбербанк();
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеСертификатов = Новый Соответствие;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИдентификаторыСертификатов);
	Индекс = 2;
	Пока Индекс < ТекстовыйДокумент.КоличествоСтрок() Цикл
		Текст = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Текст = СтрЗаменить(Текст, ",", "");
		Текст = СтрЗаменить(Текст, ";", "");
		СоответствиеСертификатов.Вставить(Текст);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		Возврат ТекстовыйДокумент.ПолучитьСтроку(Индекс - 1)
	КонецЕсли;
	
	Для Каждого Элемент ИЗ СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата);
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СоответствиеСертификатов.Вставить(
										ИдентификаторСертификата,
										ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект));
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Ошибка чтения сертификата.
										|Подробности см. в журнале регистрации.'");
			ТекстОшибки = ОписаниеОшибки();
			Операция = Нстр("ru = 'Чтение данных сертификата.'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			Возврат Неопределено;
		КонецПопытки;
	КонецЦикла;

	СписокСертификатов = Новый СписокЗначений;
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Значение, Элемент.Ключ);
	КонецЦикла;
	СтруктураПараметров = Новый Структура("Сертификаты", СписокСертификатов);
	ИдентификаторСертификата = ОткрытьФормуМодально(
									"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ВыборСертификата",
									СтруктураПараметров);
	Возврат ИдентификаторСертификата;
	
КонецФункции

Функция ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата)
	
	СертификатBase64 = "";
	ПодключаемыйМодуль = ЗначениеИзКэша("ПодключаемыйМодуль");
	Рез = ПодключаемыйМодуль.ПолучитьСертификатVPNKeyTLS(ИдентификаторСертификата, СертификатBase64);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При получении данных сертификата произошла ошибка.
									|Подробности в журнале регистрации'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении сертификата вернула код ошибки'") + Рез;
		Операция = НСтр("ru = 'Получение сертификата криптографии.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецЕсли;
	СертификатBase64 = СтрЗаменить(СертификатBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
	СертификатBase64 = СтрЗаменить(СертификатBase64, Символы.ПС + "-----END CERTIFICATE-----","");
	
	ДвоичныеДанныеСертификата = Base64Значение(СертификатBase64);
	Возврат ДвоичныеДанныеСертификата;

КонецФункции

Процедура ЗакэшироватьПараметрСбербанка(Название, Значение)
	
	Если Не ЗначениеЗаполнено(ПараметрыПодсистемыОбменСБанками) Тогда
		ПараметрыПодсистемыОбменСБанками = Новый Соответствие;
	КонецЕсли;
	
	ПараметрыОбменаСбербанк = ПараметрыПодсистемыОбменСБанками.Получить("Сбербанк");
	
	Если ПараметрыОбменаСбербанк = Неопределено Тогда
		ПараметрыОбменаСбербанк = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбменаСбербанк.Вставить(Название, Значение);
	ПараметрыПодсистемыОбменСБанками.Вставить("Сбербанк", ПараметрыОбменаСбербанк);
	
КонецПроцедуры

#КонецЕсли

#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда

Процедура ОпределитьОшибкуИСообщитьПользователю(СоглашениеЭД, ТипЗапроса, ИдентификаторЗапроса, ИдентификаторОрганизации, Тикет)
	
	Если Тикет = "00000000-0000-0000-0000-000000000000" ИЛИ Тикет = "00000000-0000-0000-0000-000000000006" Тогда
		ТекстСообщения = Нстр("ru = 'Ошибка связи. Сервис банка недоступен. Повторите попытку или обратитесь в свой банк.'");
		Если ТипЗнч(ТипЗапроса) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы")
			И ЭлектронныеДокументыСлужебныйВызовСервера.ВидИВладелецЭД(ТипЗапроса).ВидЭД = ПредопределенноеЗначение(
				"Перечисление.ВидыЭД.ЗапросВыписки") Тогда
			ОшибкаПередачи = ПредопределенноеЗначение("Перечисление.СтатусыЭД.ОшибкаПередачи");
			ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусЭД(ТипЗапроса, ОшибкаПередачи);
		КонецЕсли;
	ИначеЕсли Тикет = "00000000-0000-0000-0000-000000000007" Тогда
		ТекстСообщения = Нстр("ru = 'Неверный идентификатор организации.
									|Проверьте настройки соглашения об использовании прямого обмена с банком или обратитесь в свой банк'");
		Если ТипЗнч(ТипЗапроса) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			ОтклоненБанком = ПредопределенноеЗначение("Перечисление.СтатусыЭД.ОтклоненБанком");
			ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусЭД(ТипЗапроса, ОтклоненБанком);
		КонецЕсли;
	Иначе
		ТекстСообщения = Нстр("ru = 'Сервер банка вернул неизвестный код ошибки.
									|Повторите сеанс связи или обратитесь в свой банк.'");
	КонецЕсли;
	
	ДополнительнаяИнформацияШаблон = НСтр("ru = 'Дополнительная информация для техподдержки:
												|Запрос клиента - %1
												|Идентификатор запроса клиента - %2
												|Идентификатор организации клиента - %3
												|Код ответа банка: %4
												|Сообщение ответа банка: %5'");
												
	
		
												
	Попытка
			
		WSПрокси = WSПроксиСбербанк();
			
		ДокументТип = WSПрокси.ФабрикаXDTO.Тип("http://upg.sbns.bssys.com/", "getRequestStatus");
		СтрокаТип = WSПрокси.ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "string");
		ВыбЭл = WSПрокси.ФабрикаXDTO.Создать(ДокументТип);
		СтрокаЗначение = WSПрокси.ФабрикаXDTO.Создать(СтрокаТип, Тикет);

		ВыбЭл.requests.Добавить(СтрокаЗначение);
		
		ВыбЭл.Проверить();
			
		XDTOРезультат = WSПрокси.getRequestStatus(ВыбЭл);
			
		ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор ошибки'");
		ОписаниеПолучения = Нстр("ru = 'Получено описание ошибки'");
			
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, ВыбЭл);
		ТекстОтвета = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															ОписаниеОтправки,
															ТекстОтвета);
			
		XDTOРезультат.Проверить();
			
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		WSПрокси.ФабрикаXDTO.ЗаписатьXML(Запись, XDTOРезультат);
		ТекстОтвета = Запись.Закрыть();
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
															СоглашениеЭД,
															ОписаниеПолучения,
															ТекстОтвета);
			
		МассивОтветов = Новый Массив;
			
		Для Каждого Ответ ИЗ XDTOРезультат.Return Цикл
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(Ответ);
			ЭД = ФабрикаXDTO.ПрочитатьXML(
						ЧтениеXML,
						ФабрикаXDTO.Тип("http://bssys.com/upg/response", "Response"));
			ЭД.Проверить();
			
			Если Не ЭД.Errors = Неопределено Тогда
				Для Каждого Error Из ЭД.Errors.Error Цикл
					ДополнительнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ДополнительнаяИнформацияШаблон, ТипЗапроса, ИдентификаторЗапроса, ИдентификаторОрганизации,
						Error.Code, Error.Desc);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + Символы.ПС + ДополнительнаяИнформация);
				КонецЦикла;
			КонецЕсли;
					
		КонецЦикла;
	Исключение
			
		ВидОперации = НСтр("ru = 'Получение информации об ошибке'");
		ТекстСообщения = Нстр("ru = 'Ошибка обмена данными с банком
									|Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			ВидОперации, ОписаниеОшибки(), ТекстСообщения, 1);
		
	КонецПопытки;
	
КонецПроцедуры

Функция WSОпределениеСбербанк()
	
	WSОпределение = ЗначениеИзКэша("WSОпределение");
	
	Если WSОпределение = Неопределено Тогда
		АдресСхемыWSDL = АдресWSDLСхемыСбербанк();
		WSОпределение = Новый WSОпределения(АдресСхемыWSDL);
		ЗакэшироватьПараметрСбербанка("WSОпределение", WSОпределение);
	КонецЕсли;
	
	Возврат WSОпределение;
	
КонецФункции

Функция WSПроксиСбербанк()
	
	URI = "http://upg.sbns.bssys.com/";
	ИмяСервиса = "UniversalPaymentGate";
	ИмяТочкиПодключения = "UniversalPaymentGateSbrfImplPort";
	Возврат Новый WSПрокси(WSОпределениеСбербанк(), URI, ИмяСервиса, ИмяТочкиПодключения);
	
КонецФункции

#КонецЕсли

// Выводит оповещение о смене ответственного
Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОтветственного(Знач МассивЭД) Экспорт
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭД", МассивЭД);
	
	ОткрытьФормуМодально("Обработка.ЭлектронныеДокументы.Форма.ПеренаправлениеЭД", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Только для внутреннего использования
Процедура ПопытатьсяПерейтиПоНавигационнойСсылке(Ссылка) Экспорт
	
	ЗапуститьПриложение(Ссылка);
	
КонецПроцедуры

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  ИдентификаторНазначения - УникальныйИдентификатор - к какой форме должно быть "привязано" сообщение
//
Процедура СообщитьПользователю(ТекстСообщенияПользователю, ИдентификаторНазначения);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	Сообщение.Сообщить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен с банком через дополнительную обработку

// Устанавливает пароль для установки соединения с банком
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - Строка - Содержит данные сертификата
//  Пароль  - Строка - пароль сертификата
//
// Возвращаемое значение:
//   Булево   - пароль верный или нет
//
Функция УстановитьПарольСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML, Пароль) Экспорт
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(СертификатXML) = Истина;
	Исключение
		УстановленПарольСертификата = Ложь;
	КонецПопытки;
	
	Если Не УстановленПарольСертификата Тогда
		Попытка
			ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, Пароль);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка установки пароля сертификата.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонОшибки,
																ДеталиОшибки.Код,
																ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Установка пароля сертификата'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																						ПодробноеПредставлениеОшибки,
																						ТекстСообщения,
																						1);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает соединение с банком
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение с банком
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - Строка - Содержит данные сертификата
//
// Возвращаемое значение:
//   Булево   - установлено соединение или нет
//
Функция УстановитьСоединениеЧерезДопОбработку(СоглашениеЭД, ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Попытка
		
		Если НЕ ВнешнийПодключаемыйМодуль.УстановитьСоединение(СертификатXML) Тогда
			ПараметрыРасширеннойАутентификации = Неопределено;
			ТребуетсяРасширеннаяАутентификация = ВнешнийПодключаемыйМодуль.ТребуетсяРасширеннаяАутентификация(
			                                                               СертификатXML,
			                                                               ПараметрыРасширеннойАутентификации);
			Если ТребуетсяРасширеннаяАутентификация Тогда
				Если ПараметрыРасширеннойАутентификации.Способы.Количество() = 0 Тогда
					ВызватьИсключение НСтр("ru = 'Не определены способы расширенной аутентификации.'");
				КонецЕсли;
				Если НЕ ПараметрыРасширеннойАутентификации.Способы.Свойство("SMS") Тогда
					ВызватьИсключение НСтр("ru = 'Расширенная аутентификация по SMS не поддерживается.'");
				КонецЕсли;
				РезультатВводаПароля = Неопределено;
				РасширеннаяАутентификацияЧерезДопОбработку(СоглашениеЭД,
				                                           СертификатXML,
				                                           ПараметрыРасширеннойАутентификации,
				                                           РезультатВводаПароля);
				Если РезультатВводаПароля = Неопределено Тогда // пользователь не ввел одноразовый пароль
					Возврат Ложь;
				КонецЕсли;
				ДанныеРасширеннойАутентификации = Новый Структура("Способ, Сессия, Пароль");
				ДанныеРасширеннойАутентификации.Способ = "SMS";
				ДанныеРасширеннойАутентификации.Сессия = ПараметрыРасширеннойАутентификации.Сессия;
				ДанныеРасширеннойАутентификации.Пароль = РезультатВводаПароля.Пароль;
				ВнешнийПодключаемыйМодуль.РасширеннаяАутентификация(СертификатXML, ДанныеРасширеннойАутентификации);
			Иначе
				ВызватьИсключение НСтр("ru = 'Ошибка установки соединения'");
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки соединения.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка соединения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает PIN код для хранилища
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//
// Возвращаемое значение:
//   Булево   - Истина - пин-код установлен успешно, Ложь - ошибка установки, либо неверный пароль
//
Функция УстановитьПинКодЕслиТребуется(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	ТребуетсяПИН = ТребуетсяУстановкаPINКодаХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
	
	Если ТребуетсяПИН = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановленPINКодХранилища = УстановленPINКодХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
	
	Если УстановленPINКодХранилища = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТребуетсяПИН И НЕ УстановленPINКодХранилища Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторУстройства", ИдентификаторХранилища);
		ПинКод = ОткрытьФормуМодально("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросPINКода", ПараметрыФормы);
		Если ПинКод = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если Не УстановитьPINКодХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, ПинКод) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие уже установленного PIN код для хранилища
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//
// Возвращаемое значение:
//   Булево, Неопределено - Истина - пин-код установлен установлен ранее, Ложь - пин код не установлен,
//                          Неопределено - произошла ошибка
//
Функция УстановленPINКодХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	Попытка
		УстановленPINКодХранилища = ВнешнийПодключаемыйМодуль.УстановленPINКодХранилища(ИдентификаторХранилища);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки установленного PIN-кода.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка наличия установленного PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
		                                                                            1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат УстановленPINКодХранилища;
	
КонецФункции

//Получает внешний интерфейс дополнительной обработки
//
// Параметры:
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение
//
// Возвращаемое значение:
//  Форма - форма внешней обработки
//
Функция ВнешнийПодключаемыйМодуль(СоглашениеЭД) Экспорт

	Перем НоваяВерсияОбработки;
	Перем ИмяОбъекта;
	Перем АдресФайла;
		
	Если ПараметрыПодсистемыОбменСБанками <> Неопределено Тогда
		ПараметрыОбмена = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
		Если ПараметрыОбмена <> Неопределено Тогда
			ОбработкаПодключена = ЭлектронныеДокументыСлужебныйВызовСервера.ПодключитьВнешнююОбработку(СоглашениеЭД,
			                                                                                           ПараметрыОбмена.Версия,
			                                                                                           НоваяВерсияОбработки,
			                                                                                           ИмяОбъекта,
			                                                                                           АдресФайла);
			Если НЕ ОбработкаПодключена Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если ПараметрыОбмена.Версия <> НоваяВерсияОбработки Тогда
				Если Не ИнициализироватьИнтерфейсОбработки(СоглашениеЭД, НоваяВерсияОбработки, ИмяОбъекта, АдресФайла) Тогда
					Возврат Неопределено;
				КонецЕсли;
				ПараметрыОбмена = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
			КонецЕсли;
			Возврат ПараметрыОбмена.ПодключаемыйМодуль;
		КонецЕсли;
	КонецЕсли;
	
	ВнешняяОбработкаПодключена = ЭлектронныеДокументыСлужебныйВызовСервера.ПодключитьВнешнююОбработку(
	                                                                                        СоглашениеЭД,
	                                                                                        Неопределено,
	                                                                                        НоваяВерсияОбработки,
	                                                                                        ИмяОбъекта,
	                                                                                        АдресФайла);
	
	Если Не ВнешняяОбработкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ИнициализироватьИнтерфейсОбработки(СоглашениеЭД, НоваяВерсияОбработки, ИмяОбъекта, АдресФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбмена = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
	
	Возврат ПараметрыОбмена.ПодключаемыйМодуль;
	
КонецФункции

//Получает массив идентификаторов хранилищ, подключенных к компьютеру
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//
// Возвращаемое значение:
//  Массив - идентификаторы хранилищ
//
Функция ПодключенныеХранилища(ВнешнийПодключаемыйМодуль) Экспорт
	
	Попытка
		Устройства = ВнешнийПодключаемыйМодуль.ХранилищаСертификатов();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка при поиске подключенных хранилищ.
		                          |Код ошибки: %1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Поиск хранилищ'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
		                                                                            1);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Устройства.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено ни одного хранилища.
									|Убедитесь, что устройство подключено к компьютеру и повторите операцию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Устройства;
	
КонецФункции

//Предлагает пользователю выбрать хранилище и возвращает результат выбора
//
// Параметры:
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//
// Возвращаемое значение:
//  Строка - идентификатор хранилища
//
Функция ВыбратьХранилище(СоглашениеЭД, ВнешнийПодключаемыйМодуль) Экспорт
	
	Хранилища = ПодключенныеХранилища(ВнешнийПодключаемыйМодуль);
	
	Если Не Хранилища = Неопределено И Хранилища.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура("Хранилища, СоглашениеЭД", Хранилища, СоглашениеЭД);
		ФормаВыбораХранилища = ОткрытьФормуМодально("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ВыборХранилища", СтруктураПараметров);
		Возврат ОткрытьФормуМодально("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ВыборХранилища", СтруктураПараметров);
	КонецЕсли
	
КонецФункции

// Отправляет запрос в банк
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - строка - данные сертификата
//  ТипЗапроса  - Число - тип запроса
//  ДанныеОтправки  - Структура - данные для отправки
//
// Возвращаемое значение:
//  Соответствие или Неопределено -  результат выполнения
//
Функция ОтправитьЗапросЧерезДопОбработку(ВнешнийПодключаемыйМодуль, СертификатXML, ТипЗапроса, ДанныеОтправки) Экспорт

	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, ТипЗапроса, ДанныеОтправки);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки данных.
		                          |Код ошибки: %1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка данных'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
	КонецПопытки;
	
	Возврат Результат

КонецФункции 

// Отправляет запрос в банк
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - Строка - сертифкат в виде строки
//
// Возвращаемое значение:
//  Структура или Неопределено -  Данные сертификата в виде структуры
//
Функция ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Попытка
		ДанныеСертификата = ВнешнийПодключаемыйМодуль.ДанныеСертификата(СертификатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения данных сертификата.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение данных сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеСертификата;
	
КонецФункции

// Осуществляет проверку валидности подписей
//
// Параметры
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//
// Возвращаемое значение:
//  Структура или Неопределено -  Данные сертификата в виде структуры
//
Процедура ОпределитьСтатусыПодписейЧерезДопОбработку(ЭД, ВнешнийПодключаемыйМодуль) Экспорт
	
	СтруктураСодержимогоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	
	ДоступноеХранилище = ДоступноеХранилище(ВнешнийПодключаемыйМодуль);
			
	Если НЕ ЗначениеЗаполнено(ДоступноеХранилище) Тогда
		ДоступноеХранилище = ВыбратьХранилище(СтруктураСодержимогоЭД.СоглашениеЭД, ВнешнийПодключаемыйМодуль);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДоступноеХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = Новый Массив;
	
	Для Каждого СтрокаЭЦП Из СтруктураСодержимогоЭД.Подписи Цикл
		СтруктураЗаписи = Новый Структура("НомерСтроки", СтрокаЭЦП.НомерСтроки);
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись;
			СертификатXML = СтрокаЭЦП.Сертификат;
			ДопПараметры = Новый Структура("ИдентификаторХранилища", ДоступноеХранилище);
			ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(СертификатXML,
			                                                            СтруктураСодержимогоЭД.ДанныеЭД,
			                                                            ДвоичныеДанныеЭЦП,
			                                                            ДопПараметры);
			СтруктураЗаписи.Вставить("Результат", ПодписьВалидна);
			РезультатПроверки.Добавить(СтруктураЗаписи);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
									|Код ошибки: %1
									|%2'");
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			                                                                         ДеталиОшибки.Код,
			                                                                         ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Проверка подписи'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
			                                                                            ПодробноеПредставлениеОшибки,
			                                                                            ТекстСообщения,
			                                                                            1);
		КонецПопытки;
		
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(ЭД, РезультатПроверки);
	
КонецПроцедуры

// Отправляет запрос в банк
//
// Параметры
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение с банком
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//  ПинКод  - Строка - Пин код
//
// Возвращаемое значение:
//  Булево -  пин код установлен успешно или нет
//
Функция УстановитьPINКодХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, ПинКод) Экспорт
	
	ПинКодУстановлен = Истина;
	
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьPINКодХранилища(ИдентификаторХранилища, ПинКод);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки PIN-кода.
		                          |Код ошибки: %1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
		                                                                            1);
		ПинКодУстановлен = Ложь;
	КонецПопытки;
	
	Возврат ПинКодУстановлен;
	
КонецФункции

// Проверяет, нужно ли устанавливать пин-код
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  ИдентификаторХранилища - Строка - идентификатор хранилища
//
// Возвращаемое значение:
//  Булево или Неопределено - нужно установить PIN или Неопределено при возникновении ошибки
//
Функция ТребуетсяУстановкаPINКодаХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	Попытка
		ТребуетсяПИН = ВнешнийПодключаемыйМодуль.ТребуетсяУстановкаPINКодаХранилища(ИдентификаторХранилища);
	Исключение
		ОчиститьСообщения();
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки необходимости ввода PIN-кода.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка необходимости ввода PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
		                                                                            1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТребуетсяПИН;
	
КонецФункции

Функция УстановленПарольСертификата(ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(СертификатXML) = Истина;
	Исключение
		УстановленПарольСертификата = Ложь;
	КонецПопытки;

	Возврат УстановленПарольСертификата;
	
КонецФункции

Функция ДоступноеХранилище(ВнешнийПодключаемыйМодуль)
	
	Хранилища = ПодключенныеХранилища(ВнешнийПодключаемыйМодуль);
	
	Если Хранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ИдентификаторХранилища Из Хранилища Цикл
		
		Если НЕ ТребуетсяУстановкаPINКодаХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища)
			ИЛИ УстановленPINКодХранилища(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Тогда
			
			Возврат ИдентификаторХранилища;
			
		КонецЕсли;
		
	КонецЦикла
	
КонецФункции

Процедура ПодписатьЭДЧерезДопОбработку(СоглашенияИЭД, СтруктураСертификата, КоличествоПодписано)
	
	ПараметрыДоопределения = Новый Структура;
	ПараметрыДоопределения.Вставить("URIПространстваИмен", "urn:1C.ru:ClientBankExchange");
	ПараметрыДоопределения.Вставить("ИмяТипа",             "ClientBankExchange");
	КоличествоПодписано = 0;
	
	Для Каждого КлючЗначение Из СоглашенияИЭД Цикл
	
		ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодуль(КлючЗначение.Ключ);
		
		Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
		                                               СтруктураСертификата.СертификатПодписи);
		
		СертификатXML = РеквизитыСертификата.ДвоичныеДанныеСертификата;
		
		ДанныеСертификата = ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль, СертификатXML);
		
		Если ДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ УстановитьПинКодЕслиТребуется(ВнешнийПодключаемыйМодуль, ДанныеСертификата.ИдентификаторХранилища) Тогда
			Возврат;
		КонецЕсли;
		
		ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль,
		                                                                           СертификатXML,
		                                                                           СтруктураСертификата.ПарольПользователя);
		
		Если НЕ ПарольУстановлен Тогда
			Возврат;
		КонецЕсли;
		
		СоединениеУстановлено = УстановитьСоединениеЧерезДопОбработку(КлючЗначение.Ключ, ВнешнийПодключаемыйМодуль, СертификатXML);
		Если Не СоединениеУстановлено Тогда
			Возврат;
		КонецЕсли;

		ДанныеОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеДляФормированияЭПЧерезДопОбработку(
		                                                                               КлючЗначение.Значение);

		Если ДанныеОбработки.МассивТекстовыхДанныхЭД.Количество() > 0 Тогда
			Попытка
				МассивНовыхСхемДанных = ВнешнийПодключаемыйМодуль.СхемаДанных(СертификатXML,
				                                                              ДанныеОбработки.МассивТекстовыхДанныхЭД);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка получения схемы данных.
				                          |Код ошибки: %1
				                          |%2'");
				ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				                                                                         ДеталиОшибки.Код,
				                                                                         ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Получение схемы данных'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
				                                                                            ПодробноеПредставлениеОшибки,
				                                                                            ТекстСообщения,
				                                                                            1);
				Возврат;
			КонецПопытки;
			ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьСхемыДанных(КлючЗначение.Ключ, ДанныеОбработки.МассивЭДБезСхем,
				МассивНовыхСхемДанных);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеОбработки.МассивДанныхСхем,  МассивНовыхСхемДанных);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеОбработки.МассивЭДСоСхемами, ДанныеОбработки.МассивЭДБезСхем);
		КонецЕсли;
		
		ДанныеПодписей = Новый Соответствие;
		КоличествоЭД = ДанныеОбработки.МассивЭДСоСхемами.Количество();
		ПараметрыПодписи = Новый Структура("Пароль", СтруктураСертификата.ПарольПользователя);
		Попытка
			МассивПодписей = ВнешнийПодключаемыйМодуль.Подписать(СертификатXML,
			                                                     ДанныеОбработки.МассивДанныхСхем,
			                                                     ПараметрыПодписи);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка подписания документов.
			                          |Код ошибки: %1
			                          |%2'");
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			                                                                         ДеталиОшибки.Код,
			                                                                         ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Подписание документов'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
			                                                                            ПодробноеПредставлениеОшибки,
			                                                                            ТекстСообщения,
			                                                                            1);
			Возврат;
		КонецПопытки;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьДанныеПодписей(ДанныеОбработки.МассивЭДСоСхемами,
		                                                                  МассивПодписей,
		                                                                  СтруктураСертификата.СертификатПодписи);

		Для Каждого ТекДокумент Из КлючЗначение.Значение Цикл
			ОпределитьСтатусыПодписейЧерезДопОбработку(ТекДокумент, ВнешнийПодключаемыйМодуль);
		КонецЦикла;

	КонецЦикла;
	
	КоличествоПодписано = КоличествоПодписано + МассивПодписей.Количество();
	
КонецПроцедуры

Функция ИнициализироватьИнтерфейсОбработки(СоглашениеЭД, ВерсияОбработки, ИмяОбъекта, АдресФайла)
	
	Если ЗначениеЗаполнено(АдресФайла) Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ВремФайл = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресФайла);
			ДвоичныеДанныеОбработки.Записать(ВремФайл);
			ПодключаемыйМодуль = ВнешниеОбработки.ПолучитьФорму(ВремФайл);
		#КонецЕсли
	Иначе
		ИмяФормы = "ВнешняяОбработка." + ИмяОбъекта + ".Форма";
		ПодключаемыйМодуль = ПолучитьФорму(ИмяФормы, Новый Структура("РежимЭДО", Истина), , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Попытка
		ПодключаемыйМодуль.Инициализировать();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка инициализации долнительной обработки.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Инициализация внешней обработки'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
			                                                                        1);
		Возврат Ложь;
	КонецПопытки;
	
	Если ПараметрыПодсистемыОбменСБанками = Неопределено Тогда
		ПараметрыПодсистемыОбменСБанками = Новый Соответствие;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	Параметры.Вставить("Версия",             ВерсияОбработки);
	ПараметрыПодсистемыОбменСБанками.Вставить(СоглашениеЭД, Параметры);
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправитьПакетыЧерезДопОбработку(ДанныеОтправки, КоличествоОтправленных)
	
	Для Каждого КлючЗначение Из ДанныеОтправки Цикл
		ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодуль(КлючЗначение.Ключ);
		Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Устройства = ПодключенныеХранилища(ВнешнийПодключаемыйМодуль);
		ПарольУстановлен = Ложь;
	
		СписокВыбораСертификата = Новый Массив;
		
		Если Устройства.Количество() > 0 Тогда
			Для Каждого ДанныеСертификата ИЗ КлючЗначение.Значение.Сертификаты Цикл
			
				Если УстановленПарольСертификата(ВнешнийПодключаемыйМодуль, ДанныеСертификата.ФайлСертификата) Тогда
					ПарольУстановлен = Истина;
					ВыбранныйСертификат = ДанныеСертификата.СертификатСсылка;
					Прервать;
				КонецЕсли;
			
				ДанныеСертификата = ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль,
				                                                       ДанныеСертификата.ФайлСертификата);
				Если Устройства.Найти(ДанныеСертификата.ИдентификаторХранилища) <> Неопределено Тогда
					СписокВыбораСертификата.Добавить(ДанныеСертификата.СертификатСсылка);
				КонецЕсли;
			КонецЦикла
		Иначе
			Возврат;
		КонецЕсли;
	
		Если НЕ ПарольУстановлен Тогда
			Если СписокВыбораСертификата.Количество() = 0 Тогда
				Для Каждого ДанныеСертификата ИЗ ДанныеОтправки.Сертификаты Цикл
					СписокВыбораСертификата.Вставить(ДанныеСертификата.СертификатСсылка);
				КонецЦикла;
			КонецЕсли;
			Соответствие = Новый Соответствие;
			Для Каждого Сертификат Из СписокВыбораСертификата Цикл
				СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
				Соответствие.Вставить(Сертификат, СтруктураСертификата);
			КонецЦикла;
			Если ПарольКСертификатуПолучен(Соответствие, НСтр("ru = 'Авторизация на ресурсе банка'"))
				И Соответствие.Количество() > 0 Тогда
				Для Каждого КлючИЗначение Из Соответствие Цикл
					ПараметрыСертификата = КлючИЗначение.Значение;
					ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
					ВыбранныйСертификат = КлючИЗначение.Ключ;
					Прервать;
				КонецЦикла;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
		Для Каждого ДанныеСертификата ИЗ КлючЗначение.Значение.Сертификаты Цикл
			Если ДанныеСертификата.СертификатСсылка = ВыбранныйСертификат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСертификатаЧерезДопОбработку = ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль,
		                                                                        ДанныеСертификата.ФайлСертификата);
	
		Если ДанныеСертификатаЧерезДопОбработку = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПинКодУстановлен = УстановитьПинКодЕслиТребуется(ВнешнийПодключаемыйМодуль,
		                                                 ДанныеСертификатаЧерезДопОбработку.ИдентификаторХранилища);
		Если Не ПинКодУстановлен Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ПарольУстановлен Тогда
			ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль,
			                                                                           ДанныеСертификата.ФайлСертификата,
			                                                                           ПарольПользователя);
			Если НЕ ПарольУстановлен Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		УстановленоСоединениеСБанком = УстановитьСоединениеЧерезДопОбработку(КлючЗначение.Ключ,
		                                                                     ВнешнийПодключаемыйМодуль,
		                                                                     ДанныеСертификата.ФайлСертификата);
		Если Не УстановленоСоединениеСБанком Тогда
			Возврат;
		КонецЕсли;
	
		ДокументыКОтправке = Новый Массив;
		МассивОтправленныхЭД = Новый Массив;
	
		Для Каждого Документ Из КлючЗначение.Значение.ДанныеПакетов Цикл
			СтруктураОтправки = Новый Структура;
			СтруктураОтправки.Вставить("Ключ",                Документ.Значение.Ключ);
			СтруктураОтправки.Вставить("ЭлектронныйДокумент", Документ.Значение.ПлатежноеПоручение);
			СтруктураОтправки.Вставить("СхемаДанных",         ПолучитьИзВременногоХранилища(Документ.Значение.СлужебныеДанные));
			СтруктураОтправки.Вставить("Подписи",             Новый Массив);
		
			Для Каждого СтрокаДанныеПодписи Из Документ.Значение.Подписи Цикл
				Подпись = ПолучитьИзВременногоХранилища(СтрокаДанныеПодписи.АдресПодписи);
				ДанныеПодписи = Новый Структура("Сертификат, Подпись", СтрокаДанныеПодписи.Сертификат, Подпись);
				СтруктураОтправки.Подписи.Добавить(ДанныеПодписи);
			КонецЦикла;
			ДокументыКОтправке.Добавить(СтруктураОтправки);
		КонецЦикла;
	
		СтруктураОтправки = Новый Структура();
		СтруктураОтправки.Вставить("Документы",         ДокументыКОтправке);
		СтруктураОтправки.Вставить("ВерсияСхемыДанных", "1.07");
	
		Результат = ОтправитьЗапросЧерезДопОбработку(ВнешнийПодключаемыйМодуль,
		                                             ДанныеСертификата.ФайлСертификата,
		                                             3,
		                                             СтруктураОтправки);
		
		Если Результат = Неопределено Тогда
			Возврат
		КонецЕсли;
	
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОтветЧерезДопОбработку(КлючЗначение.Значение.ДанныеПакетов,
		                                                                           Результат,
		                                                                           КоличествоОтправленных);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасширеннаяАутентификацияЧерезДопОбработку(СоглашениеЭД, Знач Сертификат, Знач ПараметрыРасширеннойАутентификации, ДанныеРасширеннойАутентификации)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сертификат",   Сертификат);
	ПараметрыФормы.Вставить("Сессия",       ПараметрыРасширеннойАутентификации.Сессия);
	ПараметрыФормы.Вставить("СоглашениеЭД", СоглашениеЭД);

	ДанныеРасширеннойАутентификации = ОткрытьФормуМодально(
											"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.РасширеннаяАутентификацияПоSMS",
											ПараметрыФормы);

КонецПроцедуры

Процедура ТестСоглашенияЧерезДопОбработку(СоглашениеЭД, ИдентификаторНазначения)
	
	Перем ВерсияОбработки, ИмяОбъекта, АдресФайла;
		
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	// Блок проверки наличия внешней обработки для обмена с банком/
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия внешней обработки для обмена с банком.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ВнешняяОбработкаПодключена = ЭлектронныеДокументыСлужебныйВызовСервера.ПодключитьВнешнююОбработку(СоглашениеЭД,
	                                                                                                  ВерсияОбработки,
	                                                                                                  ВерсияОбработки,
	                                                                                                  ИмяОбъекта,
	                                                                                                  АдресФайла);
	Если Не ВнешняяОбработкаПодключена Тогда
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок инициализации интерфейса.
	ОписаниеТеста = НСтр("ru = 'Тест. Инициализация служебного интерфейса.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	Если Не ИнициализироватьИнтерфейсОбработки(СоглашениеЭД, ВерсияОбработки, ИмяОбъекта, АдресФайла) Тогда
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодуль(СоглашениеЭД);
	
	ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ДоступныеСертификаты(СоглашениеЭД);
	
	Для Каждого Элемент ИЗ ДоступныеСертификаты Цикл
		ПараметрыСертификата = Элемент.Значение;
		
		ТекстСообщения = Нстр("ru = 'Проверка сертификата: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент.Ключ);
		СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(Элемент.Ключ, ПараметрыСертификата);
		
		Если ПарольКСертификатуПолучен(Соответствие, НСтр("ru = 'Авторизация на ресурсе банка'"))
			И Соответствие.Количество() > 0 Тогда
			Для Каждого КлючИЗначение Из Соответствие Цикл
				ПараметрыСертификата = КлючИЗначение.Значение;
				ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
				ВыбранныйСертификат = КлючИЗначение.Ключ;
				Прервать;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не введен пароль для сертификата.
								|Тест прерван.'");
			СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
			Возврат;
		КонецЕсли;
		
		СертификатXML = ПараметрыСертификата.ФайлСертификата;
		
		// Блок чтения данных сертификата.
		ОписаниеТеста = НСтр("ru = 'Тест. Чтение данных сертификата.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		ДанныеСертификата = ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль, СертификатXML);
		Если ДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		
		// Блок проверка наличия установленного PIN-кода.
		ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия PIN-кода на хранилище.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		ТребуетсяПИН = ТребуетсяУстановкаPINКодаХранилища(ВнешнийПодключаемыйМодуль,
		                                                  ДанныеСертификата.ИдентификаторХранилища);
		Если ТребуетсяПИН = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		
		// Блок проверка установки PIN-кода.
		Если ТребуетсяПИН Тогда
			ОписаниеТеста = НСтр("ru = 'Тест. Установка PIN-кода на хранилище.'");
			СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторУстройства", ДанныеСертификата.ИдентификаторХранилища);
			ПинКод = ОткрытьФормуМодально("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросPINКода", ПараметрыФормы);
			Если ПинКод = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Если Не УстановитьPINКодХранилища(СоглашениеЭД, ДанныеСертификата.ИдентификаторХранилища, ПинКод) Тогда
				Возврат;
			КонецЕсли;
			СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		КонецЕсли;
		
		// Блок проверка авторизации на ресурсе банка.
		ОписаниеТеста = НСтр("ru = 'Тест. Авторизация на ресурсе банка.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		ВидОперации = НСтр("ru = 'Авторизация на ресурсе банка'");
		Попытка
			ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, ПарольПользователя);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка авторизации на ресурсе банка.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			                                                                         ДеталиОшибки.Код,
			                                                                         ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Авторизация на ресурсе банка'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
			                                                                            ПодробноеПредставлениеОшибки,
			                                                                            ТекстСообщения,
			                                                                            1);
			Возврат;
		КонецПопытки;
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		
		// Блок проверка установки соединения с банком.
		ОписаниеТеста = НСтр("ru = 'Тест. Установка соединения с банком.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		Если НЕ УстановитьСоединениеЧерезДопОбработку(СоглашениеЭД, ВнешнийПодключаемыйМодуль, СертификатXML) Тогда
			Возврат;
		КонецЕсли;
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		
		// Блок проверка установки подписи для данных.
		ОписаниеТеста = НСтр("ru = 'Тест. Установка подписи.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		ОтпечатокBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаBase64(ПараметрыСертификата.Отпечаток);
		ДвоичныеДанные = Base64Значение(ОтпечатокBase64);
		МассивПодписи = Новый Массив;
		МассивПодписи.Добавить(ДвоичныеДанные);
		ПараметрыПодписи = Новый Структура("Пароль", ПараметрыСертификата.ПарольПользователя);
		Попытка
			МассивПодписей = ВнешнийПодключаемыйМодуль.Подписать(СертификатXML, МассивПодписи, ПараметрыПодписи);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка установки подписи.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонОшибки,
																ДеталиОшибки.Код,
																ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Установка подписии'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																						ПодробноеПредставлениеОшибки,
																						ТекстСообщения,
																						1);
			Возврат;
		КонецПопытки;
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		
		// Блок проверка подписи.
		ОписаниеТеста = НСтр("ru = 'Тест. Проверка подписи.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		Попытка
			ДопПараметры = Новый Структура("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
			ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(СертификатXML,
			                                                            ДвоичныеДанные,
			                                                            МассивПодписей[0],
			                                                            ДопПараметры);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
									|Код ошибки: %1
									|%2'");
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонОшибки,
																ДеталиОшибки.Код,
																ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Проверка подписи'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																						ПодробноеПредставлениеОшибки,
																						ТекстСообщения,
																						1);
			Возврат;
		КонецПопытки;
		Если НЕ ПодписьВалидна Тогда
			СообщитьПользователю(НСтр("ru = 'Подпись не валидна'"), ИдентификаторНазначения);
			Возврат;
		КонецЕсли;
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	КонецЦикла;
	
	Если ДоступныеСертификаты.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Проверка проведена не полностью, т.к. в соглашении отсутствуют сертификаты подписи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Блок проверки отправки тестового запроса.
	ОписаниеТеста = НСтр("ru = 'Тест. Отправка тестового запроса.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		
	Попытка
		ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 1);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки тестового запроса.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка тестового запроса'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
		Возврат;
	КонецПопытки;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
КонецПроцедуры


Функция АктуаленКэшПарольСертификатаВДопОбработке(ДанныеСертификата, МассивЭД)
	
	СоглашениеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоглашениеЭД(МассивЭД[0]);
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодуль(СоглашениеЭД);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
													ДанныеСертификата.СертификатПодписи);
	
	СлужебныеДанныеСертификата = ДанныеСертификатаЧерезДопОбработку(ВнешнийПодключаемыйМодуль,
												РеквизитыСертификата.ДвоичныеДанныеСертификата);
		
	Если СлужебныеДанныеСертификата = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТребуетсяУстановкаPINКодаХранилища = ТребуетсяУстановкаPINКодаХранилища(ВнешнийПодключаемыйМодуль,
													СлужебныеДанныеСертификата.ИдентификаторХранилища);
	Если НЕ ТребуетсяУстановкаPINКодаХранилища = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(
												РеквизитыСертификата.ДвоичныеДанныеСертификата);
		Возврат УстановленПарольСертификата = Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Функция получает пароль пользователя для соглашений. Если в СоотвСертификатовИИхПараметров передано несколько
// сертификатов, то после запроса пароля у пользователя в этот параметр вместо списка помещается один выбранный
// сертификат и его параметры.
//
// Параметры:
//  СоотвСертификатовИИхПараметров - Соответствие - содержит соответствие сертификатов и их параметров:
//    * Ключ     - СправочникСсылка.СертификатыЭЦП - сертификат ЭП.
//    * Значение - Структура - содержит параметры сертификата.
//  ВидОперации                    - Строка - вид операции, для выполнения которой запрашивается пароль пользователя.
//  ОбъектыДляОбработки - Массив, СправочникСсылка.ЭДПрисоединенныеФайлы - один или список объектов ИБ для обработки;
//  ДляЗаписиВИБ - Булево - Истина - если запрашивается пароль для сохранения в реквизит справочника.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ПолученыДанныеАвторизации(СоглашениеЭД, ДанныеАвторизации) Экспорт
	
	Если Не ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоответствиеСертификатаИПароля) Тогда
		ДанныеАвторизации = СоответствиеСертификатаИПароля.Получить(СоглашениеЭД);
		Если ЗначениеЗаполнено(ДанныеАвторизации) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидОперации", Нстр("ru = 'Авторизация на сервере банка'"));
	ПараметрыСоглашения = Новый Соответствие;
	ПараметрыСоглашения.Вставить(СоглашениеЭД);
	ПараметрыФормы.Вставить("Соответствие", ПараметрыСоглашения);
	СтруктураВозврата = ОткрытьФормуМодально("Справочник.СертификатыЭЦП.Форма.ЗапросПароляДляХранения", ПараметрыФормы);
	Если НЕ ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАвторизации = Новый Структура;
	ДанныеАвторизации.Вставить("Пользователь", СтруктураВозврата.Пользователь);
	ДанныеАвторизации.Вставить("Пароль", СтруктураВозврата.ПарольПользователя);
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен электронными документами с банками

// Отправка и получение электронных документов одной командой.
Процедура ВыполнитьОбменСБанком() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Отправка пакетов электронных документов в банк. Подождите...'");
	Состояние(НСтр("ru = 'Отправка.'"), , ТекстСообщения);
		
	СоглашенияЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоглашенияСБанкамиБезКриптографии();
	
	ПараметрыАвторизации = Новый Соответствие;
	Для Каждого СоглашениеЭД ИЗ СоглашенияЭД Цикл
		ДанныеАвторизации = Неопределено;
		Если ПолученыДанныеАвторизации(СоглашениеЭД, ДанныеАвторизации) Тогда
			ПараметрыАвторизации.Вставить(СоглашениеЭД, ДанныеАвторизации);
		КонецЕсли;
	КонецЦикла;
	СтруктураВозврата = Неопределено;
	ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьЭДВБанк(ПараметрыАвторизации, СтруктураВозврата);
		
	Если СтруктураВозврата.Свойство("ДанныеДляОтправкиЧерезДопОбработку") Тогда
		КоличествоОтправленныхПакетовЧерезДопОбработку = 0;
		ОтправитьПакетыЧерезДопОбработку(
			СтруктураВозврата.ДанныеДляОтправкиЧерезДопОбработку, КоличествоОтправленныхПакетовЧерезДопОбработку);
		СтруктураВозврата.КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов
			+ КоличествоОтправленныхПакетовЧерезДопОбработку;
	КонецЕсли;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолОтправленныхПакетов);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

