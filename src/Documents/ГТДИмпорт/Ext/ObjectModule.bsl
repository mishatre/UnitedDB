Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

// Хранит структуру, содержащую параметры для определения рублевого договора, доступного в данном документе:
//    валюта взаиморасчетов;
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговораРегл Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

// Добавляет строку в табличную часть "Разделы"
//
// Возвращаемое значение:
//   строка табличной части, которую добавили.
//
Функция ДобавитьРаздел() Экспорт

#Если Клиент Тогда
	СтавкаПошлины = ВосстановитьЗначение("СтавкаТаможеннойПошлины");
#Иначе
	СтавкаПошлины = 0;
#КонецЕсли

	НовыйРаздел = Разделы.Добавить();
	НовыйРаздел.НДСВВалюте     = Ложь;
	НовыйРаздел.ПошлинаВВалюте = Истина;
	НовыйРаздел.СтавкаНДС      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	НовыйРаздел.СтавкаПошлины  = СтавкаПошлины;
	НовыйРаздел.ТаможеннаяСтоимостьВВалютеРеглУчета = (НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ (ВалютаДокумента = мВалютаРегламентированногоУчета));

	Возврат НовыйРаздел;

КонецФункции // ДобавитьРаздел()

// Вычисляет суммы по данным раздела.
//
// Параметры
//  НомерРаздела   - число, номер раздела по которому надо получить итоги,
//  ВсегоСтоимость - число, в этот параметр будет возвращена сумма фактурной стоимости,
//  ВсегоПошлина   - число, в этот параметр будет возвращена сумма пошлины, 
//  ВсегоНДС       - число, в этот параметр будет возвращена сумма НДС.
//
Процедура ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС)  Экспорт

	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		ВсегоПошлина   = ВсегоПошлина   + ЭлементМассива.СуммаПошлины;
		ВсегоНДС       = ВсегоНДС       + ЭлементМассива.СуммаНДС;
	КонецЦикла;

КонецПроцедуры // ПосчитатьИтогиПоРазделу()

// Заполнение раздела документа "ГТД по импорту" по документам поступления
//
// Параметры
//  ДокументПоступления - ссылка на документ ПоступлениеТоваровУслуг, определяет документ поступления, по которому надо заполнить этот документ,
//  НомерРаздела        - число, номер раздела, который надо заполнить.
//
Процедура ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела) Экспорт

	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")
	   И НЕ ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
			Возврат;
	КонецЕсли;

	ВВалютеРеглУчета         = Разделы[НомерРаздела - 1].ТаможеннаяСтоимостьВВалютеРеглУчета;
	СтруктураВалютыРеглУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	КурсРеглУчета            = СтруктураВалютыРеглУчета.Курс;
	КратностьРеглУчета       = СтруктураВалютыРеглУчета.Кратность;
	ТаблицаЗначенийТовары    = ДокументПоступления.Товары.Выгрузить();

	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийТовары Цикл

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.НомерРаздела               = НомерРаздела;
		НоваяСтрока.ДокументПартии             = ДокументПоступления;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаТаблицыЗначений.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = СтрокаТаблицыЗначений.ЕдиницаИзмеренияМест;
		НоваяСтрока.Количество                 = СтрокаТаблицыЗначений.Количество;
		НоваяСтрока.КоличествоМест             = СтрокаТаблицыЗначений.КоличествоМест;
		НоваяСтрока.Коэффициент                = СтрокаТаблицыЗначений.Коэффициент;
		НоваяСтрока.Номенклатура               = СтрокаТаблицыЗначений.Номенклатура;
		НоваяСтрока.СерияНоменклатуры          = СтрокаТаблицыЗначений.СерияНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыЗначений.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЗаказПокупателя            = СтрокаТаблицыЗначений.Заказ;
		НоваяСтрока.ФактурнаяСтоимость         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицыЗначений.Сумма, ДокументПоступления.ВалютаДокумента,
		                                         ?(ВВалютеРеглУчета, мВалютаРегламентированногоУчета, ВалютаДокумента),
		                                         ЗаполнениеДокументов.КурсДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
		                                         ?(ВВалютеРеглУчета, КурсРеглУчета, КурсДокумента),
		                                         ЗаполнениеДокументов.КратностьДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
		                                         ?(ВВалютеРеглУчета, КратностьРеглУчета, КратностьДокумента));

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоПоступлению()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРазделы(ТаблицаПоРазделам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ТаможеннаяСтоимость, СтавкаНДС");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Разделы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Суммы пошлины и НДС в каждом разделе должны совпадать с итогами по разделу в ТЧ Товары.
	Для каждого Раздел Из ТаблицаПоРазделам Цикл

		ВсегоСтоимость = 0;
		ВсегоПошлина   = 0;
		ВсегоНДС       = 0;
		НомерРаздела = ТаблицаПоРазделам.Индекс(Раздел) + 1;
		ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

		Если ВсегоПошлина <> Раздел.СуммаПошлины Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма пошлины не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;

		Если ВсегоНДС <> Раздел.СуммаНДС Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма НДС не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ФактурнаяСтоимость");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверка номера ГТД.
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Товары"].Представление();
	СтрокаСообщения             = "Номер ГТД в серии не совпадает с номером ГТД документа!";
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И СтрокаТаблицы.Номенклатура.ВестиУчетПоСериям
		   И СтрокаТаблицы.НомерГТД <> НомерГТД  Тогда

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, НомерГТД,
	                             |ВалютаДокумента, КурсДокумента, КратностьДокумента, Контрагент, ДоговорКонтрагентаРегл,
	                             |КурсВзаиморасчетов,КратностьВзаиморасчетов");

	СписокПолейВалютныйДепозит = "";
	Если ТаможенныйСборВал<>0 Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" Таможенный сбор (вал.),";
	КонецЕсли;

	Если ТаможенныйШтрафВал<>0 Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" Таможенный штраф (вал.),";
	КонецЕсли;

	Если Разделы.Найти(истина,"ПошлинаВВалюте")<>неопределено Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" Пошлина в валюте,";
	КонецЕсли;

	Если Разделы.Найти(истина,"НДСВВалюте")<>неопределено Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" НДС в валюте,";
	КонецЕсли;

	Если СписокПолейВалютныйДепозит <> "" Тогда
		СписокПолейВалютныйДепозит = Лев(СписокПолейВалютныйДепозит, стрДлина(СписокПолейВалютныйДепозит)-1);
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента","Не заполнено значение реквизита ""Валютный депозит"" и заполнены реквизиты """+СписокПолейВалютныйДепозит+"""!");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагентаРегл, СтруктураШапкиДокумента.ДоговорОрганизацияРегл, Отказ, Заголовок);

	// С таможней Оба договора должны иметь вид "Прочее" и ведение взаиморасчетов "по договору в целом".
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) Тогда 
		Если СтруктураШапкиДокумента.ВидДоговора<> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Валютный договор с таможней должен иметь вид ""Прочее"".", Отказ, Заголовок);
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Валютный договор должен вестись по договору в целом.", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагентаРегл) Тогда 
		Если СтруктураШапкиДокумента.ВидДоговораРегл <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Рублевый договор с таможней должен иметь вид ""Прочее"".", Отказ, Заголовок);
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Рублевый договор с таможней должен вестись по договору в целом.", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента)

	// Для проведения по взаиморасчетам посчитаем долг таможне по валютному и рублевому договору.
	СуммаВзаиморасчетовВал = ТаможенныйСборВал + ТаможенныйШтрафВал;
	СуммаВзаиморасчетов    = ТаможенныйСбор    + ТаможенныйШтраф;
	Для каждого СтрокаТабличнойЧасти Из Разделы Цикл
	
		Если СтрокаТабличнойЧасти.ПошлинаВВалюте Тогда
			СуммаВзаиморасчетовВал = СуммаВзаиморасчетовВал + СтрокаТабличнойЧасти.СуммаПошлины;
		Иначе
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаПошлины;
		КонецЕсли;
	
		Если СтрокаТабличнойЧасти.НДСВВалюте Тогда
			СуммаВзаиморасчетовВал = СуммаВзаиморасчетовВал + СтрокаТабличнойЧасти.СуммаНДС;
		Иначе
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
	КонецЦикла;

	СтруктураШапкиДокумента.Вставить("СуммаВзаиморасчетовВал", СуммаВзаиморасчетовВал);
	СтруктураШапкиДокумента.Вставить("СуммаВзаиморасчетов",    СуммаВзаиморасчетов);

КонецПроцедуры //ОбработатьТабличнуюЧастьРазделы()

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ФактурнаяСтоимость"), "Сумма");

	ТаблицаТоваров.Колонки.Добавить("НДСВал");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НДС"), "НДСВал");

	ТаблицаТоваров.Колонки.Добавить("Качество");
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");

	Для Каждого Товар Из ТаблицаТоваров Цикл
		ТекРаздел = Разделы.Получить(Товар.НомерРаздела - 1);
		Товар.СтавкаНДС = ТекРаздел.СтавкаНДС;
	КонецЦикла;

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.СкладОрдера;
		КонецЕсли;
	КонецЦикла;

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("Стоимость",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Распределим суммы таможенных сборов пропорционально фактурной стоимости
	МассивКоэф = ТаблицаТоваров.ВыгрузитьКолонку("Сумма");
	МассивТаможенныйСбор    = ОбщегоНазначения.РаспределитьПропорционально(ТаможенныйСбор,    МассивКоэф, 2);
	МассивТаможенныйСборВал = ОбщегоНазначения.РаспределитьПропорционально(ТаможенныйСборВал, МассивКоэф, 2);

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("СтатусПартии");
	ТаблицаТоваров.Колонки.Добавить("НДСУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		ПошлинаВВалюте = Разделы[СтрокаТаблицы.НомерРаздела - 1].ПошлинаВВалюте;
		НДСВВалюте     = Разделы[СтрокаТаблицы.НомерРаздела - 1].НДСВВалюте;

		Если ПошлинаВВалюте Тогда

			СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 СтруктураШапкиДокумента.КурсВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина, СтруктураШапкиДокумента.ВалютаВзаиморасчетовРегл,
			                                 мВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсВзаиморасчетов,      1,
			                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			                                 
			СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				СтруктураШапкиДокумента.КратностьВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
		Иначе
			
			СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина, мВалютаРегламентированногоУчета,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 1,СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = СтрокаТаблицы.Пошлина;
			
			СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 1,СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		Если НДСВВалюте Тогда

			Если НЕ СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий тогда
				
				СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				                                 СтруктураШапкиДокумента.КурсВзаиморасчетов,
				                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов,
				                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			КонецЕсли;
			СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
								 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
								 СтруктураШапкиДокумента.КурсВзаиморасчетов,
								 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
								 СтруктураШапкиДокумента.КратностьВзаиморасчетов,
								 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Иначе

			Если НЕ СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий тогда

				СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
				                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				                                 1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			КонецЕсли;
			СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
											 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
											 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
											 1,СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета)
		КонецЕсли;

		// Учтем таможенные сборы
		Индекс = ТаблицаТоваров.Индекс(СтрокаТаблицы);

		Если МассивТаможенныйСбор <> Неопределено Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(МассивТаможенныйСбор[Индекс], мВалютаРегламентированногоУчета,
			                          СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                          1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                          1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = СтрокаТаблицы.СтоимостьРегл + МассивТаможенныйСбор[Индекс];
		КонецЕсли;

		Если МассивТаможенныйСборВал <> Неопределено Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(МассивТаможенныйСборВал[Индекс], СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                          СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                          СтруктураШапкиДокумента.КурсВзаиморасчетов,
			                          СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                          СтруктураШапкиДокумента.КратностьВзаиморасчетов,
			                          СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = СтрокаТаблицы.СтоимостьРегл + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(МассивТаможенныйСборВал[Индекс], СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                              мВалютаРегламентированногоУчета,
			                              СтруктураШапкиДокумента.КурсВзаиморасчетов,      1,
			                              СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
		КонецЕсли;

		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь Тогда
			СтрокаТаблицы.Заказ = Неопределено;
		КонецЕсли;

		Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
		Иначе
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, СтатусПартии, Отказ, Заголовок)
	
	ДопСтроки = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаПоТоварам.Колонки Цикл
		ДопСтроки.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаПоТоварам Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ДокументОприходования) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		// В таблице распределения по складам могут быть записи с любыми комбинациями 
		// ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры
		// Отберем нужные
		СтруктураПоиска = Новый Структура ("ДокументОприходования, Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры, СтатусПартии",
											Строка.ДокументОприходования,
											Строка.Номенклатура,
											Строка.СерияНоменклатуры,
											Строка.ХарактеристикаНоменклатуры,
											СтатусПартии);
		МассивСтрокРаспределения = ТаблицаРаспределенияПоСкладам.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокРаспределения.Количество() = 0 тогда
			ТекстСообщения = "Не найден в документе "+ Строка.ДокументОприходования
			+ " товар " + Строка.Номенклатура
			+ ?(Строка.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + Строка.ХарактеристикаНоменклатуры, "")
			+ ?(Строка.Номенклатура.ВестиУчетПоСериям, ", серия: " + Строка.СерияНоменклатуры, "");
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		ИтогоКоличество = 0;
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			ИтогоКоличество = ИтогоКоличество + Элемент.Количество;
		КонецЦикла;
		
		РаспределяемаяСумма 							= Строка.Стоимость;
		РаспределяемаяСуммаРег 							= Строка.Сумма;
		РаспределяемаяНДСРег 							= Строка.НДС;
		
		Для Каждого Элемент Из МассивСтрокРаспределения Цикл
			
			Если ИтогоКоличество<=0 Тогда         
				Прервать;
			КонецЕсли;
			
			Если Элемент.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДопСтрока = ДопСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ДопСтрока,Строка);
			
			ДопСтрока.Склад = Элемент.Склад;
			
			Если Элемент.Количество<ИтогоКоличество Тогда
				КоэффРаспред = Элемент.Количество/ИтогоКоличество;
			Иначе
				КоэффРаспред = 1;
			КонецЕсли;
			
			ДопСтрока.Стоимость 						= Окр(РаспределяемаяСумма * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.Сумма 							= Окр(РаспределяемаяСуммаРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			ДопСтрока.НДС 								= Окр(РаспределяемаяНДСРег * КоэффРаспред,2,РежимОкругления.Окр15как20);
			
			РаспределяемаяСумма 							= РаспределяемаяСумма - ДопСтрока.Стоимость;
			РаспределяемаяСуммаРег 							= РаспределяемаяСуммаРег - ДопСтрока.Сумма;
			РаспределяемаяНДСРег 							= РаспределяемаяНДСРег - ДопСтрока.НДС;
			
			ИтогоКоличество = ИтогоКоличество - Элемент.Количество;
			
		КонецЦикла;
		// Исходная строка будет с 0 суммой
		Строка.Стоимость = 0;
		
	КонецЦикла;
	
	// Теперь доп строки добавим в таблицу по товарам
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		НоваяСтрока = ТаблицаПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДопСтрока);
	КонецЦикла;
			
	// После обработки удалим строки с нулевыми суммами
	Инд=0;
	Пока Инд<ТаблицаПоТоварам.Количество() Цикл
		Если ТаблицаПоТоварам[Инд].Стоимость=0 Тогда
			ТаблицаПоТоварам.Удалить(Инд);
		Иначе
			Инд = Инд+1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры//РаспределитьПоСкладам

Процедура РаспределитьРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ЗапросРаспределенияПоСкладам = Новый Запрос;
	ЗапросРаспределенияПоСкладам.Текст = "ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка КАК ДокументОприходования,
	                                     |	ДокументОприходованияТовары.Склад КАК Склад,
	                                     |	ДокументОприходованияТовары.Номенклатура КАК Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент КАК Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма) КАК Сумма,
	                                     |	СУММА(ДокументОприходованияТовары.Количество) КАК Количество,
	                                     |	&СтатусПартии КАК СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Ссылка.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Ссылка.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка
	                                     |
	                                     |ОБЪЕДИНИТЬ ВСЕ
	                                     |
	                                     |ВЫБРАТЬ
	                                     |	ДокументОприходованияТовары.Ссылка,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	СУММА(ДокументОприходованияТовары.Сумма),
	                                     |	СУММА(ДокументОприходованияТовары.Количество),
	                                     |	&СтатусПартии
	                                     |ИЗ
	                                     |	Документ.АвансовыйОтчет.Товары КАК ДокументОприходованияТовары
	                                     |ГДЕ
	                                     |	ДокументОприходованияТовары.Ссылка В(&Ссылка)
	                                     |	И ДокументОприходованияТовары.Склад <> &ПустойСклад
	                                     |	И ДокументОприходованияТовары.Номенклатура В(&Номенклатура)
	                                     |	И ДокументОприходованияТовары.ХарактеристикаНоменклатуры В(&ХарактеристикаНоменклатуры)
	                                     |	И ДокументОприходованияТовары.СерияНоменклатуры В(&СерияНоменклатуры)
	                                     |
	                                     |СГРУППИРОВАТЬ ПО
	                                     |	ДокументОприходованияТовары.Номенклатура,
	                                     |	ДокументОприходованияТовары.Коэффициент,
	                                     |	ДокументОприходованияТовары.Склад,
	                                     |	ДокументОприходованияТовары.СерияНоменклатуры,
	                                     |	ДокументОприходованияТовары.ХарактеристикаНоменклатуры,
	                                     |	ДокументОприходованияТовары.Ссылка";

	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Ссылка", ТаблицаПоТоварам.ВыгрузитьКолонку("ДокументОприходования"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("Номенклатура", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("ХарактеристикаНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СерияНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"));
	ЗапросРаспределенияПоСкладам.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	
	ТаблицаРаспределенияПоСкладам = ЗапросРаспределенияПоСкладам.Выполнить().Выгрузить();
	
	РаспределитьПоСкладам(ТаблицаПоТоварам, ТаблицаРаспределенияПоСкладам, СтруктураШапкиДокумента, Перечисления.СтатусыПартийТоваров.Купленный, Отказ, Заголовок);

КонецПроцедуры//РаспределитьДопРасходыТоваровПоСкладам

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"     , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета" , "КурсВалютыУправленческогоУчета");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ,Заголовок, СтруктураШапкиДокументаРубли, СтруктураШапкиДокументаВалюта)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и СтруктураШапкиДокумента.УчитыватьНДС Тогда
		ТаблицаПоТоварамРубли = Неопределено;
		ТаблицаПоТоварамВалюта = Неопределено;
		
		СформироватьТаблицыПоДокументуДляНДС(СтруктураШапкиДокумента, СтруктураШапкиДокументаРубли, СтруктураШапкиДокументаВалюта, ТаблицаПоТоварамРубли, ТаблицаПоТоварамВалюта);
		
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокументаРубли, ТаблицаПоТоварамРубли, Отказ);
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокументаВалюта, ТаблицаПоТоварамВалюта, Отказ);
	
	КонецЕсли; 

КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами

		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		Если СтруктураШапкиДокумента.СуммаВзаиморасчетовВал <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов = СтруктураШапкиДокумента.СуммаВзаиморасчетовВал;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетовВал, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		Если СтруктураШапкиДокумента.СуммаВзаиморасчетов <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагентаРегл;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетовРегл,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;


		// ПО РЕГИСТРУ РасчетыСКонтрагентами
		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		Если СтруктураШапкиДокумента.СуммаВзаиморасчетовВал <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетовВал;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетовВал, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                            СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                            СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                            СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		Если СтруктураШапкиДокумента.СуммаВзаиморасчетов <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагентаРегл;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетовРегл,
			                            СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                            1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                            1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;


		// ПО РЕГИСТРУ Партии товаров на складах
		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ТабПартий = ТаблицаПоТоварам.Скопировать();
		
		// Из таблицы по товарам выделим строки, для которых заполнен документ оприходования
		Инд=0;
		Пока Инд<ТабПартий.Количество() Цикл
			
			Если Не ЗначениеЗаполнено(ТабПартий[Инд].ДокументОприходования) Тогда
				ТабПартий.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПартий, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");
		
		Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			
			СтрокаТЧ = ТабПартий.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
			
			// Если партионный учет по сериям не ведется, то надо очистить серию
			Если НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
				СтрокаДвижений.СерияНоменклатуры = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если суммовой 
		Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;
		
		// При учете по средней документ оприходования не заполняется 
		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата); 
		Если УчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда 
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДокументОприходования"); 
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// ПО РЕГИСТРУ доп.расходов для последующего распределения
		
		НаборДвижений = Движения.ДопРасходыНаПриобретениеТоваров;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ТабЗатрат = ТаблицаПоТоварам.Скопировать();
		
		// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
		Инд=0;
		Пока Инд<ТабЗатрат.Количество() Цикл
			
			Если ЗначениеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
				ТабЗатрат.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
			ТабЗатрат.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабЗатрат, ТаблицаДвижений);
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДопРасходыНаПриобретениеТоваров.ВыполнитьПриход();
		КонецЕсли;
		
		// ПО РЕГИСТРУ Закупки
		НаборДвижений = Движения.Закупки;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Подготовим таблицу товаров для регистра закупки.
		ТаблицаПоТоварамЗакупки = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамЗакупки.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамЗакупки.Получить(Сч);

			Если СтрокаТаблицы.Стоимость = 0 Тогда
				ТаблицаПоТоварамЗакупки.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним таблицу движений.
		ТаблицаПоТоварамЗакупки.Колонки.НДС   .Имя = "_НДС";
		ТаблицаПоТоварамЗакупки.Колонки.НДСУпр.Имя = "НДС";
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварамЗакупки,      ТаблицаДвижений,       Проект, Дата, "Закупки");
		Иначе		
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗакупки, ТаблицаДвижений);
			
		КонецЕсли;
		
		ТаблицаДвижений.ЗаполнитьЗначения(0,                  "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, 		  "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, 		  "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,             "ДокументЗакупки");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;

	КонецЕсли; // ОтражатьВУправленческомУчете

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура СформироватьТаблицыПоДокументуДляНДС(СтруктураШапкиДокумента, СтруктураШапкиДокументаРубли, СтруктураШапкиДокументаВалюта, ТоварыВРублях, ТоварыВВалюте) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	///////////////////////////////////////////////////
	//Подготовка таблицы по договору расчетов в рублях
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НДС"" КАК Содержание,
	|	2 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки КАК НомерРаздела,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
	|	ГТДИмпортТовары.СерияНоменклатуры,
	|	ГТДИмпортТовары.ЗаказПокупателя,
	|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.СкладОрдер КАК Склад,
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументОприходования,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	0 КАК Сумма,
	|	ГТДИмпортТовары.СуммаНДС как НДС,
	|	0 КАК ФактурнаяСтоимость
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.НДСВВалюте = Ложь) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаНДС > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела Возр,
	|	НомерСтроки Возр,
	|	ПорядокОтражения Возр";
	
	ТоварыВРублях = Запрос.Выполнить().Выгрузить();
	//Подготовка таблицы по договору расчетов в рублях
	///////////////////////////////////////////////////
	
	///////////////////////////////////////////////////
	//Подготовка таблицы по договору расчетов в валюте
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НДС"" КАК Содержание,
	|	2 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки КАК НомерРаздела,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
	|	ГТДИмпортТовары.СерияНоменклатуры,
	|	ГТДИмпортТовары.ЗаказПокупателя,
	|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.СкладОрдер КАК Склад,
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументОприходования,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	0 КАК Сумма,
	|	ГТДИмпортТовары.СуммаНДС как НДС,
	|	0 КАК ФактурнаяСтоимость
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.НДСВВалюте = ИСТИНА) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаНДС > 0)
    |
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела Возр,
	|	НомерСтроки Возр,
	|	ПорядокОтражения Возр";
	
	ТоварыВВалюте = Запрос.Выполнить().Выгрузить();//Подготовка таблицы по таможенному сбору в валюте
	//Подготовка таблицы по договору расчетов в валюте
	///////////////////////////////////////////////////
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТоварыВРублях,  СтруктураШапкиДокументаРубли, Ложь, мВалютаРегламентированногоУчета); //, Разделы
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТоварыВВалюте, СтруктураШапкиДокументаВалюта, Ложь, мВалютаРегламентированногоУчета); //, Разделы
							  
КонецПроцедуры // СформироватьТаблицыПоДокументу(СтруктураШапкиДокумента)()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаРубли, СтруктураШапкиДокументаВалюта) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "ВидДоговора"                   , "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентовРегл", "ВидДоговора"                   , "ВидДоговораРегл");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентовРегл", "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетовРегл");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентовРегл", "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетовРегл");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентовРегл", "Организация"                   , "ДоговорОрганизацияРегл");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов",     "Организация"                   , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       ,   "ВестиПартионныйУчетПоСкладам"  , "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СпособОценкиМПЗ"              , "СпособОценкиМПЗ");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий"           , "НеВключатьНДСВСтоимостьПартий");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по валютному договору
	СтруктураШапкиДокументаВалюта = Новый структура();
	Для каждого Параметр Из СтруктураШапкиДокумента Цикл
		Если Прав(Параметр.Ключ,4) = "Регл" тогда
			//Данные, специфические для договора в рублях не требуются
			Продолжить;
		ИначеЕсли Прав(Параметр.Ключ,3) = "Вал" тогда
			//Необходимо установить данные реквизиты без специфического окончания 
			СтруктураШапкиДокументаВалюта.Вставить(Сред(Параметр.Ключ,1,СтрДлина(Параметр.Ключ)-3),Параметр.Значение);	
		ИначеЕсли СтруктураШапкиДокументаВалюта.Свойство(Параметр.Ключ) Тогда
			// Заполнено ранее, возможно - при переименовании реквизитов с постфиксом "Вал"
			продолжить;
		Иначе
			СтруктураШапкиДокументаВалюта.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
	КонецЦикла; 
	// Устанавливаем валюту документа для данной структуры равной валюте взаиморасчетов
	СтруктураШапкиДокументаВалюта.Вставить("ВалютаДокумента",СтруктураШапкиДокументаВалюта.ВалютаВзаиморасчетов);
	СтруктураШапкиДокументаВалюта.Вставить("КурсДокумента",  СтруктураШапкиДокументаВалюта.КурсВзаиморасчетов);
	СтруктураШапкиДокументаВалюта.Вставить("КратностьДокумента",  СтруктураШапкиДокументаВалюта.КратностьВзаиморасчетов);
	
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по валютному договору
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по рублевому договору
	СтруктураШапкиДокументаРубли = Новый структура();
	Для каждого Параметр Из СтруктураШапкиДокумента Цикл
		Если Прав(Параметр.Ключ,3) = "Вал" тогда
			//Данные, специфические для договора в валюте не требуются
			Продолжить;
		ИначеЕсли Прав(Параметр.Ключ,4) = "Регл" тогда
			//Необходимо установить данные реквизиты без специфического окончания 
			СтруктураШапкиДокументаРубли.Вставить(Сред(Параметр.Ключ,1,СтрДлина(Параметр.Ключ)-4),Параметр.Значение);	
		ИначеЕсли СтруктураШапкиДокументаРубли.Свойство(Параметр.Ключ) Тогда
			// Заполнено ранее, возможно - при переименовании реквизитов с постфиксом "Регл"
			продолжить;
		Иначе
			СтруктураШапкиДокументаРубли.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
	КонецЦикла; 
	// Устанавливаем валюту документа для данной структуры равной валюте регл. учета
	СтруктураШапкиДокументаРубли.Вставить("ВалютаДокумента",мВалютаРегламентированногоУчета);
	СтруктураШапкиДокументаРубли.Вставить("КурсДокумента",  1);
	СтруктураШапкиДокументаРубли.Вставить("КратностьДокумента",  1);
	// Устанавливаем валюту документа для данной структуры равной валюте регл. учета
	СтруктураШапкиДокументаРубли.Вставить("ВалютаВзаиморасчетов",мВалютаРегламентированногоУчета);
	СтруктураШапкиДокументаРубли.Вставить("КурсВзаиморасчетов",  1);
	СтруктураШапкиДокументаРубли.Вставить("КратностьВзаиморасчетов",  1);
	
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по рублевому договору
	///////////////////////////////////////////////////////////////////////////////////////////////

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ = Ложь, Заголовок = "") Экспорт
	
	// Получим необходимые данные для проверки и проведения по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерРаздела"                , "НомерРаздела");
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ФактурнаяСтоимость"          , "ФактурнаяСтоимость");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("Пошлина"                     , "СуммаПошлины");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям" , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("НомерГТД"                    , "СерияНоменклатуры.НомерГТД");

	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ"                       , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ДокументОприходования"       , "ДокументПартии");
	СтруктураПолей.Вставить("ДокументПартииВидОперации"   , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления", "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("Склад"                       , "ДокументПартии.СкладОрдер");
	СтруктураПолей.Вставить("СкладОрдера"                 , "ДокументПартии.СкладОрдер.Склад"); 
	СтруктураПолей.Вставить("ВидДоговораПартии"           , "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

								
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;						
							
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента);

	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		РаспределитьРасходыТоваровПоСкладам(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// Вызывается из тела процедуры "ДвиженияПоРегистрам" в процедуре формируются движения, отражающие
// поступление доп. расходов в подсистеме учета НДС
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если ТаблицаПоТоварам.Количество()= 0 тогда 
		Возврат; 
	КонецЕсли;
	
	ТаблицаДляДвижений = ТаблицаПоТоварам.Скопировать();
	
	// Удалим все строки, не относящиеся непосредственно к НДС
	ТаблицаДляДвижений.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"ВидЦенности");
	
	// Отразим в регистре "НДС предъявленный"
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаДляДвижений, "Товары", Движения, Отказ);
	
	ТаблицаДляНДСПартии = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаДляДвижений
				, Новый Структура("ДокументОприходования, Склад, ВидЦенности, СтавкаНДС, 
						|Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Услуга,НДС,СуммаБезНДС","Партия"));
	ТаблицаДляНДСПартии.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	////////////////////////////////////////////////////////////////////
	// При необходимости  - отражаем в регистре партионного учета для НДС
	
	Если ТаблицаДляНДСПартии.Количество()=0 Тогда
		// ГТД только по услугам, товары не обнаружены
		Возврат;
	КонецЕсли; 
		

	ТаблицаДляНДСПартии.ЗаполнитьЗначения(Истина,"Услуга");
	
    ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	// При необходимости  - отражаем в регистре партионного учета для НДС
	////////////////////////////////////////////////////////////////////

КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ПоступлениеТоваров    = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ПоступлениеТоваровНТТ = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"));

	Если ПоступлениеТоваров
	 ИЛИ ПоступлениеТоваровНТТ Тогда

		Если ПоступлениеТоваровНТТ
		   И Не Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
				Возврат;
		КонецЕсли;

		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Контрагент у нас другой
		Контрагент         = Неопределено;
		ДоговорКонтрагента = Неопределено;
		Сделка             = Неопределено;

		// Заполним Табличную часть
		Раздел = ДобавитьРаздел();
		ЗаполнитьПоПоступлению(Основание, 1);

		ВсегоСтоимость = 0;
		ВсегоПошлина   = 0;
		ВсегоНДС       = 0;
	
		ПосчитатьИтогиПоРазделу(1, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

		Раздел.ТаможеннаяСтоимость = ВсегоСтоимость;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаРубли, СтруктураШапкиДокументаВалюта, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаРубли, СтруктураШапкиДокументаВалюта);
		
	// Подготовим таблицу товаров для проведения.
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРазделы(Разделы, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ,Заголовок, СтруктураШапкиДокументаРубли, СтруктураШапкиДокументаВалюта);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);
мСписокДопустимыхВидовВзаиморасчетов = Новый СписокЗначений();
мСписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовВзаиморасчетов", мСписокДопустимыхВидовВзаиморасчетов);
мСтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора", мВалютаРегламентированногоУчета);
мСтруктураПараметровДляПолученияДоговора.Вставить("ВидСравненияВалютыВзаиморасчетов", "<>");

мСтруктураПараметровДляПолученияДоговораРегл = Новый Структура();
мСтруктураПараметровДляПолученияДоговораРегл.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);
мСтруктураПараметровДляПолученияДоговораРегл.Вставить("СписокДопустимыхВидовВзаиморасчетов", мСписокДопустимыхВидовВзаиморасчетов);
мСтруктураПараметровДляПолученияДоговораРегл.Вставить("ВалютаВзаиморасчетовДоговора", мВалютаРегламентированногоУчета);
мСтруктураПараметровДляПолученияДоговораРегл.Вставить("ВидСравненияВалютыВзаиморасчетов", "=");

