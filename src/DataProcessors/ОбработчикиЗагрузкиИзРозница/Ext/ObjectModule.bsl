#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики загрузки конвертации Розница --> УправлениеТорговлей {917095a0-2a72-11e3-ae07-50465d9e27f9}                                                                                           
// 
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. После отладки рекомендуется
// скопировать текст модуля в буфер обмена и импортировать его в базу
// "Конвертация данных".
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ
// Данный раздел изменять запрещено.

Перем Параметры;
Перем Алгоритмы;
Перем Запросы;
Перем УзелДляОбмена;
Перем ОбщиеПроцедурыФункции;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)
// В данном разделе разрешено изменять реализацию процедур.

Процедура Конвертация_ПередЗагрузкойДанных(ФайлОбмена, Отказ) Экспорт

	Параметры.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

КонецПроцедуры

Процедура Конвертация_ПриПолученииИнформацииОбУдалении(Объект, Отказ) Экспорт

	МетаданныеОбъекта = Объект.Метаданные();
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Отказ = Истина;
		Если НЕ Объект.Предопределенный Тогда
			УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "Справочник");
		КонецЕсли;
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Отказ = Истина;
		Если Объект.Проведен Тогда
			ОтменитьПроведениеОбъектаВИБ(Объект, ТипЗнч(Объект));
		КонецЕсли;
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "Документ");
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Отказ = Истина;
		Если НЕ Объект.Предопределенный Тогда
			УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "ПланВидовХарактеристик");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКО_БанковскиеСчета_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ВалютаДенежныхСредств = Параметры.ВалютаРегламентированногоУчета;

КонецПроцедуры

Процедура ПКО_БанковскиеСчетаКонтрагентов_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ВалютаДенежныхСредств = Параметры.ВалютаРегламентированногоУчета;

КонецПроцедуры

Процедура ПКО_ВидыНоменклатуры_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ Объект.ЭтоНовый()
		И НЕ ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
		Если Ссылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВнутреннийЗаказ_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗаказа) Тогда
		Объект.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратТоваровОтПокупателя_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ДоговорВТабличнойЧасти = Ложь;
	ИмяТабличнойЧасти = "Товары";
	ОбъектПараметр = Объект;
	ДатаПараметр = Объект.Дата;
	ОрганизацияПараметр = Объект.Организация;
	КонтрагентПараметр = Объект.Контрагент;
	ОбработкаШапки (Объект, МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.ВидПоступления) Тогда
		Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	УстановитьПризнакПокупатель (Объект);
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
	
	Если ТипЗнч(Объект.СкладОрдер) = Тип("СправочникСсылка.Склады") 
		И Объект.СкладОрдер.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.Цена,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ЦеныАТТ
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(
	|			&ДатаЦен,
	|			Склад = &Склад
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						Товары КАК Товары)
	|				И Цена <> 0) КАК ЦеныАТТСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(1) КАК Количество,
	|	СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, Товары.Цена)) КАК ЦенаВРознице
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.ХарактеристикаНоменклатуры
	|						ИЗ
	|							Товары КАК Товары)
	|					И ТипЦен = &ТипЦен
	|					И Валюта = &Валюта
	|					И Цена <> 0) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|			И Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ (Товары.Номенклатура, Товары.ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ЦеныАТТ.Номенклатура,
	|					ЦеныАТТ.ХарактеристикаНоменклатуры
	|				ИЗ
	|					ЦеныАТТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры";
	
		Запрос.УстановитьПараметр("Валюта", Объект.ВалютаДокумента);
		Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
		Запрос.УстановитьПараметр("Товары", Объект.Товары);
		Запрос.УстановитьПараметр("Склад", Объект.СкладОрдер);
		Запрос.УстановитьПараметр("ТипЦен", Объект.СкладОрдер.ТипЦенРозничнойТорговли);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Товары = Результат.Выгрузить();
			ДокПереоценка = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
			ДокПереоценка.Дата = Объект.Дата;
			ДокПереоценка.Организация = Объект.Организация;
			ДокПереоценка.УстановитьНовыйНомер();
			ДокПереоценка.Склад = Объект.СкладОрдер;
			ДокПереоценка.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
			ДокПереоценка.Товары.Загрузить(Товары);
			ДокПереоценка.Комментарий = "Создан при обмене с 1С:Розница 8";
			ДокПереоценка.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратТоваровПоставщику_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ДоговорВТабличнойЧасти = Ложь;
	ИмяТабличнойЧасти = "Товары";
	ОбъектПараметр = Объект;
	ОрганизацияПараметр = Объект.Организация;
	КонтрагентПараметр = Объект.Контрагент;
	ДатаПараметр = Объект.Дата;
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	УстановитьПризнакПоставщик (Объект);
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.ВидПередачи) Тогда
		Объект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	КонецЕсли;
	ДокументОснование = ПараметрыОбъекта["ДокументОснование"];
	Если НЕ ДокументОснование.Пустая() Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.ДокументПоступления = ДокументОснование; 
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ДоговорыЭквайринга_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Эквайрер = Объект.Эквайрер;
	Если Объект.ДоговорВзаиморасчетов.Владелец <> Эквайрер Тогда
	ДоговорВзаиморасчетов = Эквайрер.ОсновнойДоговорКонтрагента;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Кассы_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ Объект.ЭтоГруппа И НЕ ОбъектНайден Тогда
		Объект.ВалютаДенежныхСредств = Параметры.ВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_КомплектацияНоменклатуры_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.НДСвСтоимостиТоваров) Тогда
		Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Номенклатура_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ Объект.ЭтоГруппа И НЕ ОбъектНайден Тогда
		Объект.Комплект = Ложь;
		Объект.Набор = Ложь;
		Объект.ВестиУчетПоСериям = Ложь;
	Конецесли;
	Если НЕ Объект.ЭтоГруппа Тогда
		Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаХраненияОстатков;
	КонецЕсли;
	ЗагрузитьСведенияОбАлкогольнойПродукции (Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ПКО_НоменклатурныеГруппы_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ ОбъектНайден И НЕ ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) Тогда
		Объект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОплатаОтПокупателяПлатежнойКартой_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента = Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
		
	//ДоговорКонтрагента в ТЧ
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	КонтрагентПараметр = Объект.Контрагент;
	Если ЗначениеЗаполнено(КонтрагентПараметр) Тогда
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(ВидДоговора);
		СписокВидовВзаиморасчетов = Новый СписокЗначений;
		СписокВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетовДоговора, СписокДопустимыхВидовДоговоров");
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетовДоговора"  , Параметры.ВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
		СтруктураПараметров.Вставить("СписокДопустимыхВидовВзаиморасчетов", СписокВидовВзаиморасчетов);
	
		ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, КонтрагентПараметр, СтруктураПараметров);
		Если ДоговорКонтрагента = Неопределено Тогда
			НовыйДоговор                       = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.ОбменДанными.Загрузка = Истина;
			НовыйДоговор.ВалютаВзаиморасчетов  = Параметры.ВалютаРегламентированногоУчета;
			НовыйДоговор.Владелец              = КонтрагентПараметр;
			НовыйДоговор.ВидДоговора           = ВидДоговора;
			НовыйДоговор.Наименование          = "Договор создан из ""1С:Розница 8""";
			НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
			НовыйДоговор.Организация = Объект.Организация;
			Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(КонтрагентПараметр,"Покупатель") Тогда
				КонтрагентОбъект = КонтрагентПараметр.ПолучитьОбъект();
				Если КонтрагентОбъект<>Неопределено Тогда
					КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
					КонтрагентОбъект.Покупатель            = Истина;
					КонтрагентОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			НовыйДоговор.Записать();
			ДоговорКонтрагента = НовыйДоговор.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Объект.ВалютаДокумента       = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента      = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Объект.Дата);
	
	Для каждого Строка Из Объект.РасшифровкаПлатежа Цикл
		Строка.ДоговорКонтрагента      = ДоговорКонтрагента;
		Строка.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		Строка.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КонецЦикла;
	
	//Договор взаиморасчетов
	Эквайринг = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.ДоговорЭквайринга,"ДоговорВзаиморасчетов,Эквайрер");
	КонтрагентПараметр = Эквайринг.Эквайрер;
	ДоговорКонтрагента = Эквайринг.ДоговорВзаиморасчетов;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)Тогда
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(ВидДоговора);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетовДоговора, СписокДопустимыхВидовДоговоров");
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетовДоговора"  , Параметры.ВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
		ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, КонтрагентПараметр, СтруктураПараметров);
		Если ДоговорКонтрагента = Неопределено Тогда
			НовыйДоговор                       = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.ОбменДанными.Загрузка = Истина;
			НовыйДоговор.ВалютаВзаиморасчетов  = Параметры.ВалютаРегламентированногоУчета;
			НовыйДоговор.Владелец              = Эквайринг.Эквайрер;
			НовыйДоговор.ВидДоговора           = ВидДоговора;
			НовыйДоговор.Наименование          = "Договор создан из ""1С:Розница 8""";
			НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
			НовыйДоговор.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
			НовыйДоговор.Организация = Объект.Организация;
			НовыйДоговор.Записать();
			ДоговорКонтрагента = НовыйДоговор.Ссылка;
			ДоговорЭквайринга = Объект.ДоговорЭквайринга.ПолучитьОбъект();
			Если ДоговорЭквайринга<>Неопределено Тогда
				ДоговорЭквайринга.ОбменДанными.Загрузка = Истина;
				ДоговорЭквайринга.ДоговорВзаиморасчетов = ДоговорКонтрагента;
				ДоговорЭквайринга.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Объект.ДоговорКонтрагента = ДоговорКонтрагента;

КонецПроцедуры

Процедура ПКО_ОприходованиеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	
	Если Объект.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.Цена,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ЦеныАТТ
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(
	|			&ДатаЦен,
	|			Склад = &Склад
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						Товары КАК Товары)
	|				И Цена <> 0) КАК ЦеныАТТСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(1) КАК Количество,
	|	СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, Товары.Цена)) КАК ЦенаВРознице
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.ХарактеристикаНоменклатуры
	|						ИЗ
	|							Товары КАК Товары)
	|					И ТипЦен = &ТипЦен
	|					И Валюта = &Валюта
	|					И Цена <> 0) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|			И Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ (Товары.Номенклатура, Товары.ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ЦеныАТТ.Номенклатура,
	|					ЦеныАТТ.ХарактеристикаНоменклатуры
	|				ИЗ
	|					ЦеныАТТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("Валюта", Параметры.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
	Запрос.УстановитьПараметр("Товары", Объект.Товары);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ТипЦен", Объект.Склад.ТипЦенРозничнойТорговли);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Товары = Результат.Выгрузить();
		ДокПереоценка = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
		ДокПереоценка.Дата = Объект.Дата;
		ДокПереоценка.Организация = Объект.Организация;
		ДокПереоценка.УстановитьНовыйНомер();
		ДокПереоценка.Склад = Объект.Склад;
		ДокПереоценка.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
		ДокПереоценка.Товары.Загрузить(Товары);
		ДокПереоценка.Комментарий = "Создан при обмене с 1С:Розница 8";
		ДокПереоценка.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОприходованиеТоваровПересортица_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	Объект.СуммаДокументаРегл = Объект.Товары.Итог("Сумма");
	
	Если Объект.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.Цена,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ЦеныАТТ
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(
	|			&ДатаЦен,
	|			Склад = &Склад
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						Товары КАК Товары)
	|				И Цена <> 0) КАК ЦеныАТТСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(1) КАК Количество,
	|	СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, Товары.Цена)) КАК ЦенаВРознице
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.ХарактеристикаНоменклатуры
	|						ИЗ
	|							Товары КАК Товары)
	|					И ТипЦен = &ТипЦен
	|					И Валюта = &Валюта
	|					И Цена <> 0) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|			И Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ (Товары.Номенклатура, Товары.ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ЦеныАТТ.Номенклатура,
	|					ЦеныАТТ.ХарактеристикаНоменклатуры
	|				ИЗ
	|					ЦеныАТТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("Валюта", Параметры.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
	Запрос.УстановитьПараметр("Товары", Объект.Товары);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ТипЦен", Объект.Склад.ТипЦенРозничнойТорговли);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Товары = Результат.Выгрузить();
		ДокПереоценка = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
		ДокПереоценка.Дата = Объект.Дата;
		ДокПереоценка.Организация = Объект.Организация;
		ДокПереоценка.УстановитьНовыйНомер();
		ДокПереоценка.Склад = Объект.Склад;
		ДокПереоценка.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
		ДокПереоценка.Товары.Загрузить(Товары);
		ДокПереоценка.Комментарий = "Создан при обмене с 1С:Розница 8";
		ДокПереоценка.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Организации_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ ОбъектНайден Тогда
		Объект.ОтражатьВРегламентированномУчете = Истина;
		Объект.Префикс = ПараметрыОбъекта["Префикс"];
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОтчетОРозничныхПродажах_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорЭквайринга) Тогда
		ЗаполнитьДоговорЭквайринга (Объект);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовЭквайрера) Тогда
		Объект.ДоговорВзаиморасчетовЭквайрера = Объект.ДоговорЭквайринга.ДоговорВзаиморасчетов;
	КонецЕсли;
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);

КонецПроцедуры

Процедура ПКО_ПеремещениеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.НДСвСтоимостиТоваров) Тогда
		Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам;
	
	Если Объект.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.Цена,
	|	Товары.ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ЦеныАТТ
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(
	|			&ДатаЦен,
	|			Склад = &СкладПолучатель
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						Товары КАК Товары)
	|				И Цена <> 0) КАК ЦеныАТТСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА НЕ ЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL 
	|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|			КОГДА Товары.Цена <> 0
	|				ТОГДА Товары.Цена
	|			КОГДА НЕ ЦеныАТТСрезПоследних.Цена ЕСТЬ NULL 
	|				ТОГДА ЦеныАТТСрезПоследних.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаВРознице,
	|	МАКСИМУМ(1) КАК Количество
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				ТипЦен = &ТипЦен
	|					И Валюта = &Валюта
	|					И Цена <> 0
	|					И (Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.ХарактеристикаНоменклатуры
	|						ИЗ
	|							Товары КАК Товары)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|			И Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(
	|				&ДатаЦен,
	|				Склад = &СкладИсточник
	|					И Цена <> 0
	|					И (Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.ХарактеристикаНоменклатуры
	|						ИЗ
	|							Товары КАК Товары)) КАК ЦеныАТТСрезПоследних
	|		ПО Товары.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
	|			И Товары.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
	|ГДЕ
	|	НЕ (Товары.Номенклатура, Товары.ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ЦеныАТТ.Номенклатура,
	|					ЦеныАТТ.ХарактеристикаНоменклатуры
	|				ИЗ
	|					ЦеныАТТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итог.Номенклатура,
	|	Итог.ХарактеристикаНоменклатуры,
	|	Итог.ЦенаВРознице,
	|	Итог.Количество
	|ИЗ
	|	Итог КАК Итог
	|ГДЕ
	|	Итог.ЦенаВРознице <> 0";
	
		Запрос.УстановитьПараметр("СкладИсточник", Объект.СкладОтправитель);
		Запрос.УстановитьПараметр("Валюта", Объект.мВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
		Запрос.УстановитьПараметр("Товары", Объект.Товары);
		Запрос.УстановитьПараметр("СкладПолучатель", Объект.СкладПолучатель);
		Запрос.УстановитьПараметр("ТипЦен", Объект.СкладПолучатель.ТипЦенРозничнойТорговли);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Товары = Результат.Выгрузить();
			ДокПереоценка = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
			ДокПереоценка.Дата = Объект.Дата;
			ДокПереоценка.Организация = Объект.Организация;
			ДокПереоценка.УстановитьНовыйНомер();
			ДокПереоценка.Склад = Объект.СкладПолучатель;
			ДокПереоценка.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
			ДокПереоценка.Товары.Загрузить(Товары);
			ДокПереоценка.Комментарий = "Создан при обмене с 1С:Розница 8";
			ДокПереоценка.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Пользователи_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ ОбъектНайден Тогда
		Объект.Код = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПоступлениеТоваровУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ДоговорВТабличнойЧасти = Ложь;
	ИмяТабличнойЧасти = "Товары";
	ОбъектПараметр = Объект;
	ДатаПараметр = Объект.Дата;
	ОрганизацияПараметр = Объект.Организация;
	КонтрагентПараметр = Объект.Контрагент;
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.ВидПоступления) Тогда
		Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	УстановитьПризнакПоставщик (Объект);
	
	Если ТипЗнч(Объект.СкладОрдер) = Тип("СправочникСсылка.Склады") 
			И Объект.СкладОрдер.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.Цена,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ЦеныАТТ
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(
	|			&ДатаЦен,
	|			Склад = &Склад
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						Товары КАК Товары)
	|				И Цена <> 0) КАК ЦеныАТТСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(1) КАК Количество,
	|	СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, Товары.Цена)) КАК ЦенаВРознице
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.ХарактеристикаНоменклатуры
	|						ИЗ
	|							Товары КАК Товары)
	|					И ТипЦен = &ТипЦен
	|					И Валюта = &Валюта
	|					И Цена <> 0) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|			И Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ (Товары.Номенклатура, Товары.ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ЦеныАТТ.Номенклатура,
	|					ЦеныАТТ.ХарактеристикаНоменклатуры
	|				ИЗ
	|					ЦеныАТТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры";
	
		Запрос.УстановитьПараметр("Валюта", Объект.ВалютаДокумента);
		Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
		Запрос.УстановитьПараметр("Товары", Объект.Товары);
		Запрос.УстановитьПараметр("Склад", Объект.СкладОрдер);
		Запрос.УстановитьПараметр("ТипЦен", Объект.СкладОрдер.ТипЦенРозничнойТорговли);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Товары = Результат.Выгрузить();
			ДокПереоценка = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
			ДокПереоценка.Дата = Объект.Дата;
			ДокПереоценка.Организация = Объект.Организация;
			ДокПереоценка.УстановитьНовыйНомер();    
			ДокПереоценка.Склад = Объект.СкладОрдер;
			ДокПереоценка.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
			ДокПереоценка.Товары.Загрузить(Товары);
			ДокПереоценка.Комментарий = "Создан при обмене с 1С:Розница 8";
			ДокПереоценка.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриходныйКассовыйОрдер_ВозвратОплатыОтПоставщика_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;
	
	ВидДоговора= Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
	ДоговорВТабличнойЧасти = Истина;
	ИмяТабличнойЧасти      = "РасшифровкаПлатежа";
	КонтрагентПараметр = Объект.Контрагент;
	ОрганизацияПараметр = Объект.Организация;
	ДатаПараметр = Объект.Дата;
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ОбъектПараметр = СтрокаРасшифровкиПлатежа;
		УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
		ДоговорВТЧ = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента;
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВТЧ,
			"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом");
		Если ЗначениеЗаполнено(ДоговорВТЧ) Тогда
			Если НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах
				И ДанныеДоговора.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа;
			Иначе
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа
					* СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов/СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВТЧ) 
			И НЕ ДанныеДоговора.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПриходныйКассовыйОрдер_ОплатаОтПокупателя_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;
	
	ВидДоговора                   = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
	
	ДоговорВТабличнойЧасти = Истина;
	ИмяТабличнойЧасти      = "РасшифровкаПлатежа";
	КонтрагентПараметр = Объект.Контрагент;
	ОрганизацияПараметр = Объект.Организация;
	ДатаПараметр = Объект.Дата;
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ОбъектПараметр = СтрокаРасшифровкиПлатежа;
		УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
		ДоговорВТЧ = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента;
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВТЧ,
			"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом");
		Если ЗначениеЗаполнено(ДоговорВТЧ) Тогда
			Если НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах
				И ДанныеДоговора.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа;
			Иначе
			СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа 
				* СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов/СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВТЧ) 
			И НЕ ДанныеДоговора.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПриходныйКассовыйОрдер_ПоступлениеДСИзБанка_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;

КонецПроцедуры

Процедура ПКО_ПриходныйКассовыйОрдер_ПоступлениеДСизККМ_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;
	
	Если НЕ ОбъектНайден Тогда
		Объект.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
		Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.КассыККМ") Тогда
			Объект.Контрагент = Справочники.КассыККМ.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриходныйКассовыйОрдер_ПрочийПриходДС_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;
	
	ВидДоговора                   = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	
	ДоговорВТабличнойЧасти = Истина;
	ИмяТабличнойЧасти      = "РасшифровкаПлатежа";
	КонтрагентПараметр = Объект.Контрагент;
	ОрганизацияПараметр = Объект.Организация;
	ДатаПараметр = Объект.Дата;
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ОбъектПараметр = СтрокаРасшифровкиПлатежа;
		УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
		ДоговорВТЧ = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента;
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВТЧ,
			"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом");
		Если ЗначениеЗаполнено(ДоговорВТЧ) Тогда
			Если НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах
				И ДанныеДоговора.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа;
			Иначе
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа
					* СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов/СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВТЧ) 
			И НЕ ДанныеДоговора.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПриходныйОрдерНаТовары_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Объект.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение;
	
	Если ТипЗнч(Объект.Склад) = Тип("СправочникСсылка.Склады") 
		И Объект.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ЦеныАТТ
	|ИЗ
	|	РегистрСведений.ЦеныАТТ.СрезПоследних(
	|			&ДатаЦен,
	|			Склад = &Склад
	|				И (Номенклатура, ХарактеристикаНоменклатуры) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						Товары КАК Товары)
	|				И Цена <> 0) КАК ЦеныАТТСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(1) КАК Количество,
	|	СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК ЦенаВРознице
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				(Номенклатура, ХарактеристикаНоменклатуры) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.ХарактеристикаНоменклатуры
	|						ИЗ
	|							Товары КАК Товары)
	|					И ТипЦен = &ТипЦен
	|					И Валюта = &Валюта
	|					И Цена <> 0) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|			И Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ (Товары.Номенклатура, Товары.ХарактеристикаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					ЦеныАТТ.Номенклатура,
	|					ЦеныАТТ.ХарактеристикаНоменклатуры
	|				ИЗ
	|					ЦеныАТТ)
	|	И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры";
	
		Запрос.УстановитьПараметр("Валюта", Параметры.ВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("ДатаЦен", Объект.Дата);
		Запрос.УстановитьПараметр("Товары", Объект.Товары);
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		Запрос.УстановитьПараметр("ТипЦен", Объект.Склад.ТипЦенРозничнойТорговли);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Товары = Результат.Выгрузить();
			ДокПереоценка = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
			ДокПереоценка.Дата = Объект.Дата;
			ДокПереоценка.Организация = Объект.Организация;
			ДокПереоценка.УстановитьНовыйНомер();    
			ДокПереоценка.Склад = Объект.Склад;
			ДокПереоценка.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
			ДокПереоценка.Товары.Загрузить(Товары);
			ДокПереоценка.Комментарий = "Создан при обмене с 1С:Розница 8";
			ДокПереоценка.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_РасходныйКассовыйОрдер_ВДругуюКассу_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	Объект.Оплачено = Истина;

КонецПроцедуры

Процедура ПКО_РасходныйКассовыйОрдер_ВзносНаличнымиВБанк_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;

КонецПроцедуры

Процедура ПКО_РасходныйКассовыйОрдер_ВозвратОплатыПокупателю_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;
	
	ВидДоговора                   = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ВозвратДенежныхСредствПокупателю;
	
	ДоговорВТабличнойЧасти = Истина;
	ИмяТабличнойЧасти      = "РасшифровкаПлатежа";
	КонтрагентПараметр = Объект.Контрагент;
	ОрганизацияПараметр = Объект.Организация;
	ДатаПараметр = Объект.Дата;
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ОбъектПараметр = СтрокаРасшифровкиПлатежа;
		УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
		ДоговорВТЧ = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента;
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВТЧ,
			"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом");
		Если ЗначениеЗаполнено(ДоговорВТЧ) Тогда
			Если НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах
				И ДанныеДоговора.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа;
			Иначе
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа 
					* СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов/СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВТЧ)
			И НЕ ДанныеДоговора.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_РасходныйКассовыйОрдер_ОплатаПоставщику_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;
	
	ВидДоговора= Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
	
	ДоговорВТабличнойЧасти = Истина;
	ИмяТабличнойЧасти      = "РасшифровкаПлатежа";
	КонтрагентПараметр = Объект.Контрагент;
	ОрганизацияПараметр = Объект.Организация;
	ДатаПараметр = Объект.Дата;
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ОбъектПараметр = СтрокаРасшифровкиПлатежа;
		УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
		ДоговорВТЧ = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента;
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВТЧ,
			"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом");
		Если ЗначениеЗаполнено(ДоговорВТЧ) Тогда
			Если НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах
				И ДанныеДоговора.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа;
			Иначе
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа*СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов/СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов;							
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВТЧ) 
			И НЕ ДанныеДоговора.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_РасходныйОрдерНаТовары_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Объект.ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение;

КонецПроцедуры

Процедура ПКО_РеализацияТоваровУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ДоговорВТабличнойЧасти = Ложь;
	ИмяТабличнойЧасти = "Товары";
	ОбъектПараметр = Объект;
	ДатаПараметр = Объект.Дата;
	ОрганизацияПараметр = Объект.Организация;
	КонтрагентПараметр = Объект.Контрагент;
	ОбработкаШапки (Объект, МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.ВидПередачи) Тогда
		Объект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	КонецЕсли;
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	УстановитьПризнакПокупатель (Объект);
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);

КонецПроцедуры

Процедура ПКО_РКО_ВыдачаДенежныхСредствВКассуККМ_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;

КонецПроцедуры

Процедура ПКО_РКО_ПрочаяВыдачаНаличныхДенежныхСредств_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;
	
	ВидДоговора                   = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	
	ДоговорВТабличнойЧасти = Истина;
	ИмяТабличнойЧасти      = "РасшифровкаПлатежа";
	КонтрагентПараметр = Объект.Контрагент;
	ОрганизацияПараметр = Объект.Организация;
	ДатаПараметр = Объект.Дата;
	Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ОбъектПараметр = СтрокаРасшифровкиПлатежа;
		УстановитьДоговорПоКонтрагенту (ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента);
		ДоговорВТЧ = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента;
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорВТЧ,
			"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом");
		Если ЗначениеЗаполнено(ДоговорВТЧ) Тогда
			Если НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах
				И ДанныеДоговора.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа;
			Иначе
				СтрокаРасшифровкиПлатежа.СуммаВзаиморасчетов = СтрокаРасшифровкиПлатежа.СуммаПлатежа * 
					СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов/СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорВТЧ)
			И НЕ ДанныеДоговора.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_РКО_ПрочийРасходДС_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	
	Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	Объект.ОтраженоВОперУчете = Истина;
	Объект.Оплачено           = Истина;

КонецПроцедуры

Процедура ПКО_СвойстваОбъектов_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если ПараметрыОбъекта <> Неопределено Тогда
		МассивНаименованийТиповВСтрокеВнутр = ПараметрыОбъекта.Получить("Тип");
		Если МассивНаименованийТиповВСтрокеВнутр <> Неопределено Тогда
			МассивНаименованийТипов = ЗначениеИзСтрокиВнутр(МассивНаименованийТиповВСтрокеВнутр);
			МассивТипов = Новый Массив;
			Для каждого НаименованиеТипа Из МассивНаименованийТипов Цикл
				МассивТипов.Добавить(Тип(НаименованиеТипа));
			КонецЦикла;
			Если МассивТипов.Количество() = 0 Тогда
				МассивТипов.Добавить(Тип("Строка"));
			КонецЕсли;
			Объект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.НазначениеСвойства) Тогда
		Объект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Склады_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ Объект.ЭтоГруппа И НЕ ЗначениеЗаполнено(Объект.ВидСклада) Тогда
		Объект.ВидСклада = Перечисления.ВидыСкладов.Оптовый;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СписаниеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Если НЕ ЗначениеЗаполнено(Объект.НДСвСтоимостиТоваров) Тогда
		Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СписаниеТоваровПересортица_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	МетаданныеДокумента  = Объект.Метаданные();
	ОбработкаШапки (Объект, МетаданныеДокумента);
	ЗаполнитьТЧ (Объект,МетаданныеДокумента);
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	Если НЕ ЗначениеЗаполнено(Объект.НДСвСтоимостиТоваров) Тогда
		Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ТипыЦенНоменклатуры_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ ОбъектНайден Тогда
		Объект.Рассчитывается = Ложь;
		Объект.ВалютаЦены = Параметры.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПорядокОкругления) Тогда
		Объект.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ХарактеристикиНоменклатуры_ПоследовательностьПолейПоиска(НомерВариантаПоиска, СвойстваПоиска, ПараметрыОбъекта, ПрекратитьПоиск,
	СсылкаНаОбъект, УстанавливатьУОбъектаВсеСвойстваПоиска, СтрокаИменСвойствПоиска) Экспорт

	Наименование    = СвойстваПоиска.Получить("Наименование");
	Владелец        = СвойстваПоиска.Получить("Владелец");
	СсылкаНаОбъект  = Неопределено;
	ПрекратитьПоиск = Истина;
	Если ЗначениеЗаполнено(Владелец) Тогда
		СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(Наименование, Истина,, Владелец);
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ХарактеристикиОбщие_ПоследовательностьПолейПоиска(НомерВариантаПоиска, СвойстваПоиска, ПараметрыОбъекта, ПрекратитьПоиск,
	СсылкаНаОбъект, УстанавливатьУОбъектаВсеСвойстваПоиска, СтрокаИменСвойствПоиска) Экспорт

	Наименование    = СвойстваПоиска.Получить("Наименование");
	Владелец        = СвойстваПоиска.Получить("Владелец");
	СсылкаНаОбъект  = Неопределено;
	ПрекратитьПоиск = Истина;
	Если ЗначениеЗаполнено(Владелец) Тогда
		СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(Наименование, Истина,, Владелец);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ГРУПП СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫГРУЗКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЧИСТКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПАРАМЕТРОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ
// Данный раздел разрешено изменять.
// Также допустимо размещать процедуры с алгоритмами в любом из разделов выше.

Процедура ЗагрузитьСведенияОбАлкогольнойПродукции(Объект, ПараметрыОбъекта) Экспорт

	Если Объект.ЭтоНовый() Тогда
		СсылкаНаОбъект = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
	Иначе
		СсылкаНаОбъект = Объект.Ссылка;
	КонецЕсли;
	Если Не Объект.ЭтоГруппа Тогда
		// Получение сведений об алкогольной продукции
		Если ПараметрыОбъекта["АлкогольнаяПродукция"] Тогда
			
			ПроизводительИмпортерАлкогольнойПродукции = ПараметрыОбъекта["ПроизводительИмпортерАлкогольнойПродукции"];
			
			Если ПараметрыОбъекта["ИмпортнаяАлкогольнаяПродукция"] Тогда
				//Объект.Импортер      = ПроизводительИмпортерАлкогольнойПродукции;
				//Объект.Производитель = Неопределено;
			Иначе
				//Объект.Импортер      = Неопределено;
				//Объект.Производитель = ПроизводительИмпортерАлкогольнойПродукции;
			КонецЕсли;
			
			АлкоРСНабор = РегистрыСведений.СведенияОбАлкогольнойПродукции.СоздатьНаборЗаписей();
			АлкоРСНабор.Отбор.Номенклатура.Установить(СсылкаНаОбъект);
			
			АлкоРСЗапись = АлкоРСНабор.Добавить();
			
			АлкоРСЗапись.Номенклатура       = СсылкаНаОбъект;
			АлкоРСЗапись.ВидПродукции       = ПараметрыОбъекта["ВидАлкогольнойПродукции"];
			АлкоРСЗапись.ВидЛицензии        = ПараметрыОбъекта["ВидЛицензии"];
			АлкоРСЗапись.КоэффПересчетаДал  = ПараметрыОбъекта["ОбъемДАЛ"];
			
			ЗаписатьОбъектВИБ(АлкоРСНабор, Тип("РегистрСведенийНаборЗаписей.СведенияОбАлкогольнойПродукции"));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДоговорЭквайринга(Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ДоговорыЭквайринга.Ссылка,
	|   ДоговорыЭквайринга.Эквайрер,
	|   ДоговорыЭквайринга.ДоговорВзаиморасчетов
	|ИЗ
	|   Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|ГДЕ
	|   ДоговорыЭквайринга.ДоговорВзаиморасчетов.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Объект.ДоговорВзаиморасчетовЭквайрера = ВыборкаДетальныеЗаписи.ДоговорВзаиморасчетов;
		Объект.Эквайрер              = ВыборкаДетальныеЗаписи.Эквайрер;
		Объект.ДоговорЭквайринга     = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТЧ(Объект,МетаданныеДокумента) Экспорт

	Для каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ТЧ.Имя);
		ЕстьСкладВШапке = ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента);
		ЕстьСкладОрдерВШапке = ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента);
		ЕстьСклад = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", МетаданныеДокумента, ТЧ.Имя);
		ЕстьСтатусПартии = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтатусПартии", МетаданныеДокумента, ТЧ.Имя);
		ЕстьУсловиеАвтоматическойСкидки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("УсловиеАвтоматическойСкидки", МетаданныеДокумента, ТЧ.Имя) 
		И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ТЧ.Имя);
	
		Для каждого СтрокаТЧ Из Объект[ТЧ.Имя] Цикл
			Если ЕстьКачество И НЕ ЗначениеЗаполнено(СтрокаТЧ.Качество) Тогда
				СтрокаТЧ.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			Если ЕстьСклад И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
				Если ЕстьСкладВШапке Тогда
					СтрокаТЧ.Склад = Объект.Склад;
				ИначеЕсли ЕстьСкладОрдерВШапке Тогда
					СтрокаТЧ.Склад = Объект.СкладОрдер;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьСтатусПартии Тогда
				СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
			КонецЕсли;
			Если ЕстьУсловиеАвтоматическойСкидки И НЕ СтрокаТЧ.ПроцентАвтоматическихСкидок = 0 Тогда
				СтрокаТЧ.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
				СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаШапки(Объект, МетаданныеДокумента) Экспорт

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		Объект.ОтражатьВУправленческомУчете = Истина;
		Объект.ОтражатьВБухгалтерскомУчете = Истина;
		Объект.ОтражатьВНалоговомУчете = Истина;
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДоговорПоКонтрагенту(ОбъектПараметр, КонтрагентПараметр,ОрганизацияПараметр, ДатаПараметр, ВидДоговора, ИмяТабличнойЧасти,ДоговорВТабличнойЧасти, МетаданныеДокумента) Экспорт

	РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОбъектПараметр.ДоговорКонтрагента,"Владелец,Организация");
	Если ЗначениеЗаполнено(КонтрагентПараметр) 
		И (НЕ ЗначениеЗаполнено(ОбъектПараметр.ДоговорКонтрагента) ИЛИ КонтрагентПараметр <> РеквизитыДоговора.Владелец 
		ИЛИ ОрганизацияПараметр <> РеквизитыДоговора.Организация) Тогда
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(ВидДоговора);
		СписокВидовВзаиморасчетов = Новый СписокЗначений;
		СписокВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетовДоговора, СписокДопустимыхВидовДоговоров");
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетовДоговора"  , Параметры.ВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
		СтруктураПараметров.Вставить("СписокДопустимыхВидовВзаиморасчетов", СписокВидовВзаиморасчетов);
	
		ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ОрганизацияПараметр, КонтрагентПараметр, СтруктураПараметров);
	
		Если ДоговорКонтрагента = Неопределено Тогда
			НовыйДоговор                       = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовыйДоговор.ОбменДанными.Загрузка = Истина;
			НовыйДоговор.УстановитьНовыйКод();
			НовыйДоговор.ВалютаВзаиморасчетов  = Параметры.ВалютаРегламентированногоУчета;
			НовыйДоговор.Владелец              = КонтрагентПараметр;
			НовыйДоговор.ВидДоговора           = ВидДоговора;
			НовыйДоговор.Наименование          = "Договор создан из ""1С:Розница 8""";
			НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) И ЗначениеЗаполнено(ОрганизацияПараметр) Тогда
				НовыйДоговор.Организация = ОрганизацияПараметр;
			Иначе
				НовыйДоговор.Организация = Параметры.РазрешеннаяОрганизация;
			КонецЕсли;
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				КонтрагентОбъект = КонтрагентПараметр.ПолучитьОбъект();
				Если КонтрагентОбъект <> Неопределено И НЕ КонтрагентОбъект.Поставщик Тогда
					КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
					КонтрагентОбъект.Поставщик = Истина;
					КонтрагентОбъект.Записать();
				КонецЕсли;
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				КонтрагентОбъект = КонтрагентПараметр.ПолучитьОбъект();
				Если КонтрагентОбъект<>Неопределено И  НЕ КонтрагентОбъект.Покупатель Тогда
					КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
					КонтрагентОбъект.Покупатель = Истина;
					КонтрагентОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			НовыйДоговор.Записать();
			ДоговорКонтрагента = НовыйДоговор.Ссылка;
		КонецЕсли;
		ОбъектПараметр.ДоговорКонтрагента = ДоговорКонтрагента;
		
		Если НЕ ДоговорВТабличнойЧасти Тогда
			СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаПараметр);
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
				ОбъектПараметр.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
				ОбъектПараметр.Проект = ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
			// В некоторых документах курс и кратность документа отсутствуют.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				ОбъектПараметр.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ОбъектПараметр.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				ОбъектПараметр.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ОбъектПараметр.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		Иначе
				СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаПараметр);
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КратностьВзаиморасчетов", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					ОбъектПараметр.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КурсВзаиморасчетов", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					ОбъектПараметр.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПризнакПокупатель(Объект) Экспорт

	Если НЕ Объект.Контрагент.Пустая() И НЕ Объект.Контрагент.Покупатель Тогда
		Контрагент = Объект.Контрагент.ПолучитьОбъект();
		Если Контрагент <> Неопределено Тогда
			Контрагент.Покупатель = Истина;
			Контрагент.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПризнакПоставщик(Объект) Экспорт

	Если НЕ Объект.Контрагент.Пустая() И НЕ Объект.Контрагент.Поставщик Тогда
		Контрагент = Объект.Контрагент.ПолучитьОбъект();
		Если Контрагент <> Неопределено Тогда
			Контрагент.Поставщик = Истина;
			Контрагент.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Данный раздел изменять запрещено.

// Записывает объект в информационную базу.
//
// Параметры:
//	Объект - Записываемый объект.
//	Тип - Строка - Тип объекта строкой.
// 
Процедура ЗаписатьОбъектВИБ(Объект, Тип, ЗаписатьОбъект = Ложь, Знач ОтправкаНазад = Ложь)

	ОбщиеПроцедурыФункции.ЗаписатьОбъектВИБ(Объект, Тип, ЗаписатьОбъект, ОтправкаНазад);
	
КонецПроцедуры

// Отменяет проведение объекта в информационной базе.
//
// Параметры:
//	Объект - Объект для отмены проведения.
//	Тип - Строка - Тип объекта строкой.
//
Процедура ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект = Ложь)

	ОбщиеПроцедурыФункции.ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект);
	
КонецПроцедуры

// Устанавливает пометку удаления.
//
// Параметры:
//	Объект - Объект для установки пометки.
//	ПометкаУдаления - Булево - Флаг пометки удаления.
//	ИмяТипаОбъекта - Строка - Тип объекта строкой.
//
Процедура УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта)
	
	ОбщиеПроцедурыФункции.УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта);
	
КонецПроцедуры

// Служебная. Инициализирует переменные, необходимые для отладки
//
// Параметры:
//  Владелец - Обработка КонвертацияОбъектовИнформационныхБаз
//
Процедура ПодключитьОбработкуДляОтладки(Владелец) Экспорт

	Параметры            	 = Владелец.Параметры;
	ОбщиеПроцедурыФункции	 = Владелец;
	Запросы              	 = Владелец.Запросы;
	УзелДляОбмена		 	 = Владелец.УзелДляОбмена;

КонецПроцедуры

#КонецЕсли
