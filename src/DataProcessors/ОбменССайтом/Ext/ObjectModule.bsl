
Перем ПрефиксУзлаCML;
Перем НачалоЭлементаCML;
Перем КонецЭлементаCML;
Перем ПрефиксАтрибутаCML;

Перем ПараметрЗапросаHTTP_Инициализация;
Перем ПараметрЗапросаHTTP_ПередачаФайла;
Перем ПараметрЗапросаHTTP_ИмпортФайлаСервером;
Перем ПараметрЗапросаHTTP_ПолучитьДанные; 
Перем ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта;

Перем ОтветСервера_ZIPРазрешен;
Перем ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена;
Перем ОтветСервера_УспешноеЗавершениеТекущейОперации;
Перем ОтветСервера_АварийноеЗавершениеТекущейОперации;
Перем ОтветСервера_ВыполнениеТекущейОперации;

Перем ПустаяХарактеристикаСсылка;

Перем НаименованиеНалога;

Перем БулевоЗначениеCML_Истина;
Перем БулевоЗначениеCML_Да;

Перем ТипНоменклатурыCML_Услуга;
Перем ТипНоменклатурыCML_Товар;
Перем ЗначениеCML_ТипНоменклатуры;

Перем мСоответствиеНаименованийКатегорийДокумента;
Перем мСтруктураИнформацииИсторииОбмена;

Перем мВидНоменклатурыУслуга;
Перем мВидНоменклатурыТовар;
Перем мКоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом;

Перем мМассивЗагруженныхДокументов;

Перем мТаблицаКаталогов;

Перем мДатаФормирования;

Перем мОрганизацияВладелец;

Перем мРезультатЗапросаИерархияНоменклатуры;
Перем мРезультатЗапросаСвойстваНоменклатуры;

Перем мКаталогНаДиске;
Перем мПодкаталогФайлов;
Перем мПодкаталогБезопасностиКаталогаВыгрузки;

Перем мУчетнаяПолитика;
Перем мПринудительнаяПолнаяВыгрузка;

Перем мМВТ;

Перем мЗапросПоКартинкам, мЗапросПоФайлам;
Перем мЗапросПоЗначениямСвойствХарактеристик;
Перем мЗапросПоСвойствамНоменклатуры;
Перем мЗапросПоЦенам;
Перем мЗапросПоСкидкам;
Перем мЗапросПоВремениДействияСкидок;
Перем мЗапросПоВариантамЗначенияСвойства;
Перем мЗапросПоШК;

Перем мФорматСумм;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА HTTP


Функция HTTPЗагрузитьССервера(СтруктураПараметровСайта, ТипСоединения, КоличествоОбработанныхДокументов)
	
	Успешно = Истина;
	ОтветСервера = "";
	Соединение = Неопределено;
	КоличествоОбработанныхДокументов = 0;
	
	АдресДляРаботы = СтруктураПараметровСайта.АдресСкрипта + "?type=" + ТипСоединения;
	
	СтрокаСообщенияПользователю = "";
	Успешно = ПроцедурыОбменаССайтом.HTTPВыполнитьАвторизациюДляСоединения(Соединение, СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения);
	Если Не ПустаяСтрока(СтрокаСообщенияПользователю) Тогда
		СообщитьОбОшибкеОбмена(СтрокаСообщенияПользователю, Ложь);
	КонецЕсли;
	
	Если Не Успешно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя      	  = СтрПолучитьСтроку(ОтветСервера,2);
	КукиЗначение 	  = СтрПолучитьСтроку(ОтветСервера,3);
	ЗаголовкиЗапросов = "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ОтобразитьСостояние("Загрузка данных с сервера...");
	
	ИнформацияДляПользователя = "";
	ОтветСервера = ПроцедурыОбменаССайтом.HTTPПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_ПолучитьДанные, ЗаголовкиЗапросов, ИнформацияДляПользователя);
	Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
		СообщитьПользователю(ИнформацияДляПользователя, Ложь);
	КонецЕсли;
	
	Если ОтветСервера = Неопределено Тогда 
		СообщитьОбОшибкеОбмена("Не удалось загрузить данные с сервера.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаCML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		СтрокаCML = РаспаковатьZIPАрхив(ОтветСервера);
	Иначе
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			СтрокаCML = ОтветСервера;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаCML) Тогда
		СообщитьОбОшибкеОбмена("Не удалось прочитать данные, загруженные с сервера.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоДокументов = РазобратьCML(СтрокаCML);
	
	Если ДеревоДокументов = Неопределено Тогда
		СообщитьОбОшибкеОбмена("Не удалось разобрать данные, загруженные с сервера.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	Успешно = ОбработатьДокументы(ДеревоДокументов, КоличествоОбработанныхДокументов);
	
	Если НЕ Успешно Тогда 
		СообщитьОбОшибкеОбмена("Не удалось обработать документы, загруженные с сервера.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ИнформацияДляПользователя = "";
	ПроцедурыОбменаССайтом.HTTPПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта, ЗаголовкиЗапросов, ИнформацияДляПользователя);
	Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
		СообщитьПользователю(ИнформацияДляПользователя, Ложь);
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция HTTPВыгрузитьНаСервер(СтруктураПараметровСайта, 
	МассивПодкаталогов = Неопределено, 
	ОжидатьЗавершенияИмпортаФайловСервером = Ложь,
	ТипСоединения = "catalog")
	
	Успешно = Истина;
	
	ОтветСервера = "";
	Соединение = Неопределено;
	
	АдресДляРаботы = СтруктураПараметровСайта.АдресСкрипта + "?type=" + ТипСоединения; 
	
	СтрокаСообщенияПользователю = "";
	Успешно = ПроцедурыОбменаССайтом.HTTPВыполнитьАвторизациюДляСоединения(Соединение, СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения);
	Если Не ПустаяСтрока(СтрокаСообщенияПользователю) Тогда
		СообщитьОбОшибкеОбмена(СтрокаСообщенияПользователю, Истина);
	КонецЕсли;
	
	Если Не Успешно Тогда
		Возврат Ложь;
	КонецЕсли;
		
	КукиИмя      	  = СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение 	  = СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов = "Cookie: " + КукиИмя + "=" + КукиЗначение;

	ОтобразитьСостояние("Запрос параметров обмена...");
	
	ОтветСервера = ПроцедурыОбменаССайтом.HTTPПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_Инициализация, ЗаголовкиЗапросов);
	
	Если ОтветСервера = Неопределено Тогда 
		СообщитьОбОшибкеОбмена("Не удалось получить параметры обмена с сервера.", Истина);
		Возврат Ложь;
	КонецЕсли;
		
	ZIPФайлыРазрешены = Ложь;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Если СтрЧислоСтрок(ОтветСервера) <> 2 Тогда
		СообщитьОбОшибкеОбмена("Не удалось прочитать ответ сервера. Параметры обмена не получены.", Истина);
		Возврат Ложь;
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) = ОтветСервера_ZIPРазрешен;

	Попытка 
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 2))), ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, ""));
	Исключение
		СообщитьОбИсключительнойОшибке(Истина);
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
	КонецПопытки;
	
	МассивИсходныхCMLФайлов = НайтиФайлы(мКаталогНаДиске, "*.xml");
	СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(МассивПодкаталогов);
	
	Если ZIPФайлыРазрешены Тогда
		ОтобразитьСостояние("Подготовка ZIP-архива...");
		СписокФайловДляОтправки = ПодготовитьZIPАрхивы(СписокФайловДляОтправки);
	КонецЕсли;
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда
		СписокФайловДляОтправки = РазделитьФайлыНаФрагменты(СписокФайловДляОтправки, ОграничениеРазмераФрагментаФайлаОбмена);
	КонецЕсли;
	
	ВсегоФайлов = СписокФайловДляОтправки.Количество();
	
	Для Каждого ТекФайл Из СписокФайловДляОтправки цикл
		
		ОтобразитьСостояние("Идет отправка файла на сервер (" + Строка(СписокФайловДляОтправки.Индекс(ТекФайл) + 1) + " из " + Строка(ВсегоФайлов) + "): " + ТекФайл.Значение);
		
		ОтветСервера = HTTPОтправитьФайлНаСервер(ТекФайл.Значение, Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_ПередачаФайла + ТекФайл.Представление, ЗаголовкиЗапросов);
		
		Если ZIPФайлыРазрешены Тогда
			Попытка
				УдалитьФайлы(ТекФайл.Значение);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ОтветСервера = Неопределено Тогда
			СообщитьОбОшибкеОбмена("Не удалось получить ответ сервера. Файл не отправлен (" + ТекФайл.Значение + ").", Истина);
			Возврат Ложь;
		КонецЕсли;
			
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
		
		Если СостояниеОбмена = ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			СообщитьОбОшибкеОбмена("Произошла ошибка на стороне сервера. Файл не отправлен (" + ТекФайл.Значение + ").", Истина);
			СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
			Возврат Ложь;
			
		ИначеЕсли СостояниеОбмена = ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
				СообщитьПользователю("Получен расширенный статус успешного завершения сеанса", Истина, СтатусСообщения.Информация);
				СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);	
			КонецЕсли;
			
		Иначе
			
			СообщитьОбОшибкеОбмена("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен (" + ТекФайл.Значение + ").", Истина);
			СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмпортУспешноЗавершен = Ложь;
	
	Если ОжидатьЗавершенияИмпортаФайловСервером Тогда
		
		Для Каждого ТекФайл Из МассивИсходныхCMLФайлов Цикл
			
			ИмпортПродолжается = Истина;
			ТекущееСостояние = "";
		
			Пока ИмпортПродолжается Цикл
				
				ИмпортПродолжается = Ложь;
				
				ОтобразитьСостояние("Ожидание окончания загрузки данных сервером: " + ТекущееСостояние);
				ТекущееСостояние = "";
				
				ОтветСервера = ПроцедурыОбменаССайтом.HTTPПолучитьДанныеССервера(Соединение, АдресДляРаботы + ПараметрЗапросаHTTP_ИмпортФайлаСервером + ТекФайл.Имя, ЗаголовкиЗапросов);
				
				Если ОтветСервера = Неопределено Тогда 
					
					Успешно = Ложь;
					СообщитьОбОшибкеОбмена("Не удалось получить текущее состояние процесса обмена. Данные обмена отправлены, но не загружены.", Истина);
					
				ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
					Успешно = Ложь;
					СообщитьОбОшибкеОбмена("Не удалось прочитать данные о текущем состоянии процесса обмена. Данные обмена отправлены, но не загружены.", Истина);	
				Иначе
					
					СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
					Если СостояниеОбмена = ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
						Успешно = Ложь;
						СообщитьОбОшибкеОбмена("Произошла ошибка на стороне сервера.", Истина);
						СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
					ИначеЕсли СостояниеОбмена = ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
						ИмпортУспешноЗавершен = Истина;
					ИначеЕсли СостояниеОбмена = ОтветСервера_ВыполнениеТекущейОперации Тогда
						ТекущееСостояние = ТекущееСостояние + СтрПолучитьСтроку(ОтветСервера, 2);
						ИмпортПродолжается = Истина;
					Иначе
						Успешно = Ложь;
						СообщитьОбОшибкеОбмена("Произошла ошибка на стороне сервера. Получен неизвестный статус импорта.", Истина);
						СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;//Импорт
			
			Если НЕ ИмпортУспешноЗавершен Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция HTTPОтправитьФайлНаСервер(ПолноеИмяФайла, Соединение, ПараметрыЗапроса="", Заголовки="")

	ОтветСервера = Неопределено;
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
		
	Попытка
		Соединение.ОтправитьДляОбработки(ПолноеИмяФайла, СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		СообщитьОбИсключительнойОшибке(Истина, ОписаниеОшибки());
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе
			СообщитьПользователю("Отправка файла на сервер: Получен пустой ответ сервера.", Истина);
		КонецЕсли;
		
	Иначе
		
		СообщитьПользователю("Отправка файла на сервер: Ответ сервера не получен.", Истина);
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ НАСТРОЙКИ ПОСТРОИТЕЛЯ


Процедура ФильтрПостроителяЗапроса(СписокГруппКаталога, МассивИзмененийНоменклатуры = НеОпределено)
	
	ОтборПоКаталогу = "ОтборПоКаталогу";
	ОтборПоИзменениям = "ОтборПоИзменениям";
	
	Пока Истина Цикл
		ЭлементОтбора = ПостроительЗапроса.Отбор.Найти(ОтборПоКаталогу);
		Если ЭлементОтбора = НеОпределено Тогда
			Прервать;
		Иначе
			ПостроительЗапроса.Отбор.Удалить(ПостроительЗапроса.Отбор.Индекс(ЭлементОтбора));
		КонецЕсли;
	КонецЦикла;
	
	Пока Истина Цикл
		ЭлементОтбора = ПостроительЗапроса.Отбор.Найти(ОтборПоИзменениям);
		Если ЭлементОтбора = НеОпределено Тогда
			Прервать;
		Иначе
			ПостроительЗапроса.Отбор.Удалить(ПостроительЗапроса.Отбор.Индекс(ЭлементОтбора));
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(СписокГруппКаталога) = Тип("СписокЗначений") Тогда
		Если СписокГруппКаталога.Количество() > 0 Тогда
			Если КлассифицироватьПоЦеновымГруппам Тогда
				Отбор = ПостроительЗапроса.Отбор.Добавить("Номенклатура.ЦеноваяГруппа", ОтборПоКаталогу);
			Иначе
				Отбор = ПостроительЗапроса.Отбор.Добавить("Номенклатура", ОтборПоКаталогу);
			КонецЕсли;
			Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			Отбор.Значение = СписокГруппКаталога;
			Отбор.Использование = Истина;
		
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ МассивИзмененийНоменклатуры = НеОпределено Тогда
		Если МассивИзмененийНоменклатуры.Количество() > 0 Тогда
			СписокЗначенийОтбора = Новый СписокЗначений;
			СписокЗначенийОтбора.ЗагрузитьЗначения(МассивИзмененийНоменклатуры);
			Отбор = ПостроительЗапроса.Отбор.Добавить("Номенклатура", ОтборПоИзменениям);
			Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			Отбор.Значение = СписокЗначенийОтбора;
			Отбор.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ CML ИЗ СПИСКА ЗНАЧЕНИЙ


Процедура ЗаписатьCMLПоСпискуЗначений(ОбъектCML, СписокЗначений);
	
	Для Каждого Элемент Из СписокЗначений Цикл
		Если Элемент.Представление = КонецЭлементаCML Тогда
			ОбъектCML.ЗаписатьКонецЭлемента();
		ИначеЕсли Элемент.Представление = НачалоЭлементаCML Тогда	
			ОбъектCML.ЗаписатьНачалоЭлемента(Элемент.Значение);
		ИначеЕсли Элемент.Представление = "" Тогда
			ОбъектCML.ЗаписатьТекст(Элемент.Значение);
		ИначеЕсли Найти(Элемент.Представление, ПрефиксУзлаCML) > 0 Тогда
			ИмяУзла = СтрЗаменить(Элемент.Представление, ПрефиксУзлаCML, "");
			Если Элемент.Значение = NULL Тогда
				ЗаписатьТекстовойУзел(ОбъектCML, ИмяУзла, "", Ложь);
			Иначе
				ЗаписатьТекстовойУзел(ОбъектCML, ИмяУзла, Элемент.Значение);
			КонецЕсли;
		ИначеЕсли Найти(Элемент.Представление, ПрефиксАтрибутаCML) > 0 Тогда
			ИмяАтрибута = СтрЗаменить(Элемент.Представление, ПрефиксАтрибутаCML, "");
			ОбъектCML.ЗаписатьАтрибут(ИмяАтрибута, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьУзелCML(СписокЗначений, НаименованиеУзла, Значение);
	СписокЗначений.Добавить(Значение, ПрефиксУзлаCML + НаименованиеУзла);
КонецПроцедуры

Процедура ДобавитьАтрибутCML(СписокЗначений, НаименованиеАтрибута, Значение)
	СписокЗначений.Добавить(Значение, ПрефиксАтрибутаCML + НаименованиеАтрибута);
КонецПроцедуры

Процедура ДобавитьТекстCML(СписокЗначений, Значение)
	СписокЗначений.Добавить(Значение, "");
КонецПроцедуры

Процедура ДобавитьНачалоЭлементаCML(СписокЗначений, НаименованиеЭлемента, ДобавитьПервым = Ложь);
	Если ДобавитьПервым Тогда
		СписокЗначений.Вставить(0, НаименованиеЭлемента, НачалоЭлементаCML); 
	Иначе
		СписокЗначений.Добавить(НаименованиеЭлемента, НачалоЭлементаCML); 
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКонецЭлементаCML(СписокЗначений);
	СписокЗначений.Добавить("", КонецЭлементаCML); 
КонецПроцедуры

Процедура ЗаполнитьСписокЗначенийОсновныхРеквизитовТовара(СписокЗначенийCML, НоменклатураСсылка)
	
	Ид = СформироватьУникальныйИдентификаторОбъекта(НоменклатураСсылка);
	ДобавитьУзелCML(СписокЗначенийCML, "Ид", Ид); 
	
	ШтрихКод = ПолучитьШтрихКод(НоменклатураСсылка);
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		ДобавитьУзелCML(СписокЗначенийCML, "Штрихкод", ШтрихКод);
	КонецЕсли;
	
	ДобавитьУзелCML(СписокЗначенийCML, "Артикул"	  , НоменклатураСсылка.Артикул);
	ДобавитьУзелCML(СписокЗначенийCML, "Наименование" , ФорматНаименованияДляCML(НоменклатураСсылка.Наименование));
	
	ВыгрузитьБазовуюЕдиницу(СписокЗначенийCML, НоменклатураСсылка);
	
КонецПроцедуры

Процедура ВыгрузитьБазовуюЕдиницу(СписокЗначенийCML, НоменклатураСсылка)
	
	ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "БазоваяЕдиница");	
	ДобавитьАтрибутCML(СписокЗначенийCML, "Код", НоменклатураСсылка.БазоваяЕдиницаИзмерения.Код);
	
	Если ЗначениеЗаполнено(НоменклатураСсылка.БазоваяЕдиницаИзмерения.НаименованиеПолное) Тогда
		ДобавитьАтрибутCML(СписокЗначенийCML, "НаименованиеПолное", НоменклатураСсылка.БазоваяЕдиницаИзмерения.НаименованиеПолное);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураСсылка.БазоваяЕдиницаИзмерения.МеждународноеСокращение) Тогда
		ДобавитьАтрибутCML(СписокЗначенийCML, "МеждународноеСокращение", Лев(НоменклатураСсылка.БазоваяЕдиницаИзмерения.МеждународноеСокращение, 3));
	КонецЕсли;
	
	ДобавитьТекстCML(СписокЗначенийCML, Строка(НоменклатураСсылка.БазоваяЕдиницаИзмерения));
	ДобавитьКонецЭлементаCML(СписокЗначенийCML);
	
КонецПроцедуры

Процедура ЗаполнитьСписокЗначенийРеквизитовТовараДляПакетаПредложений(СписокЗначенийCML, НоменклатураСсылка, ХарактеристикаСсылка)
	
	Ид = СформироватьУникальныйИдентификаторОбъекта(НоменклатураСсылка, ХарактеристикаСсылка);
	ДобавитьУзелCML(СписокЗначенийCML, "Ид", Ид); 
	
	//
	
	ШтрихКод = ПолучитьШтрихКод(НоменклатураСсылка, ХарактеристикаСсылка);
	Если ЗначениеЗаполнено(ШтрихКод) Тогда
		ДобавитьУзелCML(СписокЗначенийCML, "Штрихкод", ШтрихКод);
	КонецЕсли;
	
	//
	
	Наименование = НоменклатураСсылка.Наименование;
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		Наименование = Наименование + " (" + ХарактеристикаСсылка + ")";
	КонецЕсли;
	ДобавитьУзелCML(СписокЗначенийCML, "Наименование", ФорматНаименованияДляCML(Наименование));
	
	ВыгрузитьБазовуюЕдиницу(СписокЗначенийCML, НоменклатураСсылка);
	
	//
	
	Если НоменклатураСсылка.ВестиУчетПоХарактеристикам
		И ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
	
		мЗапросПоЗначениямСвойствХарактеристик.УстановитьПараметр("ХарактеристикаСсылка", ХарактеристикаСсылка);
		
		РезультатЗапроса = мЗапросПоЗначениямСвойствХарактеристик.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ЗаписанЗаголовокВыгрузкиХарактеристик = Ложь;
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.СвойствоХарактеристикиСсылка)
					ИЛИ НЕ ЗначениеЗаполнено(Выборка.ЗначениеСвойстваХарактеристики) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если НЕ ЗаписанЗаголовокВыгрузкиХарактеристик Тогда
					
					ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ХарактеристикиТовара");
					ЗаписанЗаголовокВыгрузкиХарактеристик = Истина;
					
				КонецЕсли;
				
				ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ХарактеристикаТовара");
				ДобавитьУзелCML(СписокЗначенийCML, "Наименование", ФорматНаименованияДляCML(Выборка.СвойствоХарактеристикиСсылка));
				ДобавитьУзелCML(СписокЗначенийCML, "Значение"    , Выборка.ЗначениеСвойстваХарактеристики);
				ДобавитьКонецЭлементаCML(СписокЗначенийCML);
				
			КонецЦикла;
			
			Если ЗаписанЗаголовокВыгрузкиХарактеристик Тогда
				ДобавитьКонецЭлементаCML(СписокЗначенийCML);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//
	
	Если НоменклатураСсылка.ПометкаУдаления
		ИЛИ ХарактеристикаСсылка.ПометкаУдаления Тогда
		СтатусУдаления = "Удален";
	КонецЕсли;
	
	ДобавитьУзелCML(СписокЗначенийCML, "Статус", СтатусУдаления);
	
КонецПроцедуры

Процедура ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, Наименование, Значение)
	
	ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ЗначениеРеквизита");
	ДобавитьУзелCML(СписокЗначенийCML, "Наименование", Наименование);
	ДобавитьУзелCML(СписокЗначенийCML, "Значение"    , Значение);
	ДобавитьКонецЭлементаCML(СписокЗначенийCML);
	
КонецПроцедуры

Процедура ЗаполнитьСписокЗначенийРеквизитовТовара(СтруктураИзменений, СписокЗначенийCML, НоменклатураСсылка, ВыгруженоКартинок, ВыгруженоФайлов)
	
	Если КлассифицироватьПоЦеновымГруппам Тогда
		Если ЗначениеЗаполнено(НоменклатураСсылка.ЦеноваяГруппа) Тогда
			ИдГруппы = СформироватьУникальныйИдентификаторОбъекта(НоменклатураСсылка.ЦеноваяГруппа);
			ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "Группы");
			ДобавитьУзелCML(СписокЗначенийCML, "Ид", ИдГруппы);
			ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(НоменклатураСсылка.Родитель) Тогда
			ИдГруппы = СформироватьУникальныйИдентификаторОбъекта(НоменклатураСсылка.Родитель);
			ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "Группы");
			ДобавитьУзелCML(СписокЗначенийCML, "Ид", ИдГруппы);
			ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		КонецЕсли;
	КонецЕсли;
	
	Если НоменклатураСсылка.ДополнительноеОписаниеНоменклатурыВФорматеHTML Тогда
		
		ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ЗначениеРеквизита");
		ДобавитьУзелCML(СписокЗначенийCML, "Наименование", "ОписаниеВФорматеHTML");
		ДобавитьУзелCML(СписокЗначенийCML, "Значение", НоменклатураСсылка.ДополнительноеОписаниеНоменклатуры);
		ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		
	Иначе
		
		ДобавитьУзелCML(СписокЗначенийCML, "Описание", НоменклатураСсылка.ДополнительноеОписаниеНоменклатуры);
		
	КонецЕсли;
	
	ОписаниеФайлов = Новый Соответствие;
	
	Если ВыгружатьКартинки Тогда
		
		мЗапросПоКартинкам.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
		
		РезультатЗапроса = мЗапросПоКартинкам.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаКартинок  = РезультатЗапроса.Выбрать();
			МассивКартинок   = Новый Массив;
			ОсновнаяКартинка = НоменклатураСсылка.ОсновноеИзображение;
			
			Пока ВыборкаКартинок.Следующий() Цикл
				ТекКартинка = ВыборкаКартинок.ХранилищеСсылка;
				Если ВыгружатьТолькоИзменения И НЕ мПринудительнаяПолнаяВыгрузка Тогда
					Если СтруктураИзменений.Файлы.Найти(ТекКартинка) <> Неопределено Тогда
						МассивКартинок.Добавить(ТекКартинка);
					КонецЕсли;
				Иначе
					МассивКартинок.Добавить(ТекКартинка);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ОсновнаяКартинка) Тогда
				ИндексОсновногоИзображения = МассивКартинок.Найти(ОсновнаяКартинка);
				Если ЗначениеЗаполнено(ИндексОсновногоИзображения) Тогда
					Если ИндексОсновногоИзображения > 0 Тогда
						МассивКартинок.Вставить(0, ОсновнаяКартинка);
						МассивКартинок.Удалить(ИндексОсновногоИзображения + 1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого КартинкаДляВыгрузки Из МассивКартинок Цикл
				
				АдресКартинки = ВыгрузитьКартинку(НоменклатураСсылка, КартинкаДляВыгрузки);
				
				Если ЗначениеЗаполнено(АдресКартинки) Тогда
					
					ОписаниеКартинки = СокрЛП(КартинкаДляВыгрузки.Наименование);
					
					ДобавитьУзелCML(СписокЗначенийCML, "Картинка", АдресКартинки);
					
					Если НЕ ПустаяСтрока(ОписаниеКартинки) Тогда
						
						ОписаниеФайлов.Вставить(АдресКартинки, ОписаниеКартинки);
						
					КонецЕсли;
					
					ВыгруженоКартинок = ВыгруженоКартинок + 1;
					
				КонецЕсли;
				
			КонецЦикла; // массив картинок
			
		КонецЕсли; // нет картинок
	КонецЕсли; // не выгружать картинки
	
	Файлы = Новый Массив;
	
	Если ВыгружатьФайлы Тогда 
		
		мЗапросПоФайлам.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
		
		РезультатЗапроса = мЗапросПоФайлам.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаФайлов = РезультатЗапроса.Выбрать();
			МассивФайлов = Новый Массив;
			
			Пока ВыборкаФайлов.Следующий() Цикл
				ТекФайл = ВыборкаФайлов.ХранилищеСсылка;
				Если ВыгружатьТолькоИзменения И НЕ мПринудительнаяПолнаяВыгрузка Тогда
					Если СтруктураИзменений.Файлы.Найти(ТекФайл) <> Неопределено Тогда
						МассивФайлов.Добавить(ТекФайл);
					КонецЕсли;
				Иначе
					МассивФайлов.Добавить(ТекФайл);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ФайлДляВыгрузки Из МассивФайлов Цикл
				
				АдресФайла = ВыгрузитьФайл(НоменклатураСсылка, ФайлДляВыгрузки);
				
				Если ЗначениеЗаполнено(АдресФайла) Тогда
					
					ОписаниеФайла = СокрЛП(ФайлДляВыгрузки.Наименование);
					
					Файлы.Добавить(АдресФайла);
					
					Если НЕ ПустаяСтрока(ОписаниеФайла) Тогда
						
						ОписаниеФайлов.Вставить(АдресФайла, ОписаниеФайла);
						
					КонецЕсли;
					
					ВыгруженоФайлов = ВыгруженоФайлов + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	мЗапросПоСвойствамНоменклатуры.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
	
	РезультатЗапроса = мЗапросПоСвойствамНоменклатуры.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ЗначенияСвойств");
		
		Пока Выборка.Следующий() Цикл
			
			ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ЗначенияСвойства");
			
			Ид = Строка(Выборка.СвойствоНоменклатурыСсылка.УникальныйИдентификатор());
			ДобавитьУзелCML(СписокЗначенийCML, "Ид", Ид);
			
			Если ТипЗначенияСправочник(ТипЗнч(Выборка.Значение)) Тогда
				ИдЗначения = Строка(Выборка.Значение.УникальныйИдентификатор());
				ДобавитьУзелCML(СписокЗначенийCML, "Значение", ИдЗначения);
			Иначе
				ДобавитьУзелCML(СписокЗначенийCML, "Значение", Выборка.Значение);
			КонецЕсли;
			
			ДобавитьКонецЭлементаCML(СписокЗначенийCML);
			
		КонецЦикла;
		
		ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		
	КонецЕсли;
	
	Если НоменклатураСсылка.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
		
		ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "СтавкиНалогов");
		ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "СтавкаНалога");
		ДобавитьУзелCML(СписокЗначенийCML, "Наименование", НаименованиеНалога);
		ДобавитьУзелCML(СписокЗначенийCML, "Ставка"      , ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(НоменклатураСсылка.СтавкаНДС));
		ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		
	КонецЕсли;
	
	ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "ЗначенияРеквизитов");
	
	Для Каждого Файл Из Файлы Цикл
		
		ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "Файл", Файл);
		
	КонецЦикла;
	
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		Файл = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
		
		ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "ОписаниеФайла", Файл + "#" + Описание);
		
	КонецЦикла;
	
	ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "ВидНоменклатуры", НоменклатураСсылка.ВидНоменклатуры);
	ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "ТипНоменклатуры", НоменклатураСсылка.ВидНоменклатуры.ТипНоменклатуры);
	ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "Полное наименование", НоменклатураСсылка.НаименованиеПолное);
	
	Если ЗначениеЗаполнено(НоменклатураСсылка.ЕдиницаХраненияОстатков) Тогда
		ДобавитьЗначениеРеквизитаВСписок(СписокЗначенийCML, "Вес", мКоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом * НоменклатураСсылка.ЕдиницаХраненияОстатков.Вес);
	КонецЕсли;
	
	ДобавитьКонецЭлементаCML(СписокЗначенийCML);
	
	СтатусУдаления = "";
	
	Если НоменклатураСсылка.ПометкаУдаления Тогда
		СтатусУдаления = "Удален";
	КонецЕсли;
	
	ДобавитьУзелCML(СписокЗначенийCML, "Статус", СтатусУдаления);
	
КонецПроцедуры

Процедура ЗаполнитьСписокЗначенийПредложения(СписокЗначенийCML, НоменклатураСсылка, ХарактеристикаСсылка, Остаток)
	
	мЗапросПоЦенам.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
	мЗапросПоЦенам.УстановитьПараметр("ХарактеристикаСсылка", ХарактеристикаСсылка);
	
	РезультатЗапроса = мЗапросПоЦенам.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// если нет цены по характеристике
		
		Если ВыгружатьВсеХарактеристики
			И НоменклатураСсылка.ВестиУчетПоХарактеристикам
			И ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
			
			// смотрим цену БЕЗ характеристики
			
			мЗапросПоЦенам.УстановитьПараметр("ХарактеристикаСсылка", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			
			РезультатЗапроса = мЗапросПоЦенам.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТабЦен = РезультатЗапроса.Выгрузить();
	
	// Удалим лишние цены, которые добавились для номенклатуры без характеристики
	
	Если ВыгружатьВсеХарактеристики И ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		
		Для Каждого СтрокаТЦ Из ТабЦен Цикл
			
			Если СтрокаТЦ.Цена = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Найдено = ТабЦен.НайтиСтроки(Новый Структура(
				"ТипЦенСсылка, ВалютаЦеныСсылка, ЕдиницаИзмеренияЦеныСсылка", 
				СтрокаТЦ.ТипЦенСсылка, СтрокаТЦ.ВалютаЦеныСсылка, СтрокаТЦ.ЕдиницаИзмеренияЦеныСсылка));
				
			Если Найдено.Количество() = 1 Тогда
				
				// только одна цена по типу, как и должно быть
				Продолжить;
				
			КонецЕсли;
			
			// есть несколько строк с ценой по типу
			// лишние добавлены с ценой без характеристики
			// их удаляем (обнуляем цену, чтобы она не выгружалась)
			
			Для Каждого СтрокаНайдено Из Найдено Цикл
				
				Если СтрокаНайдено.ЦенаБезХарактеристики > 0 Тогда
					
					СтрокаНайдено.Цена = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "Цены");
	
	Для Каждого Выборка Из ТабЦен Цикл
		
		Если Выборка.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦенаТовара = Ценообразование.ОкруглитьЦену(Выборка.Цена, Выборка.ТипЦенСсылка.ПорядокОкругления, Выборка.ТипЦенСсылка.ОкруглятьВБольшуюСторону);
		
		ДобавитьНачалоЭлементаCML(СписокЗначенийCML, "Цена");
		
		ИдТипаЦены = Строка(Выборка.ТипЦенСсылка.УникальныйИдентификатор());
		
		ПредставлениеЦены = СокрЛП(ЦенаТовара) + " " + СокрЛП(Выборка.ВалютаЦеныСсылка) + " за " + СокрЛП(Выборка.ЕдиницаИзмеренияЦеныСсылка);
		ДобавитьУзелCML(СписокЗначенийCML, "Представление", ПредставлениеЦены);
		ДобавитьУзелCML(СписокЗначенийCML, "ИдТипаЦены",    ИдТипаЦены);
		ДобавитьУзелCML(СписокЗначенийCML, "ЦенаЗаЕдиницу", ФорматЗначенияДляCML(ЦенаТовара, мФорматСумм));
		ДобавитьУзелCML(СписокЗначенийCML, "Валюта",        ФорматВалютыДляCML(Выборка.ВалютаЦеныСсылка));
		ДобавитьУзелCML(СписокЗначенийCML, "Единица",       Выборка.ЕдиницаИзмеренияЦеныСсылка);
		ДобавитьУзелCML(СписокЗначенийCML, "Коэффициент",   Выборка.ЕдиницаИзмеренияЦеныСсылка.Коэффициент);
		
		ДобавитьКонецЭлементаCML(СписокЗначенийCML);
		
	КонецЦикла;
	
	ДобавитьКонецЭлементаCML(СписокЗначенийCML);
	
	//
	
	Если Остаток > 0 Тогда
		ДобавитьУзелCML(СписокЗначенийCML, "Количество", ФорматЗначенияДляCML(Остаток, мФорматСумм));
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ ДАННЫХ В CML


Функция ПолучитьСтрокуЗаписиДляXML(Значение)
	
	СтрокаЗаписи = Строка(Значение);
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.НПП, "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, ",", ".");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			СтрокаЗаписи = "true";
		Иначе
			СтрокаЗаписи = "false";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаЗаписи;
	
КонецФункции

Процедура ЗаписатьТекстовойУзел(ОбъектXML, Имя, Значение, ОбязательнаяПроверкаНаПустуюСтроку = Истина)
	
	СтрокаЗаписи = ПолучитьСтрокуЗаписиДляXML(Значение);
	
	Если ОбязательнаяПроверкаНаПустуюСтроку
		И НЕ ЗначениеЗаполнено(СтрокаЗаписи) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента(Имя);
	ОбъектXML.ЗаписатьТекст(СтрокаЗаписи);
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьОсновныеРеквизитыСвойстваДляКлассификатора(ОбъектCML, СвойствоНоменклатуры)
	
	Ид = СвойствоНоменклатуры.УникальныйИдентификатор();
	ЗаписатьТекстовойУзел(ОбъектCML, "Ид", Ид);
	
	Наименование = СвойствоНоменклатуры.Наименование;
	ЗаписатьТекстовойУзел(ОбъектCML, "Наименование", ФорматНаименованияДляCML(Наименование));
	
	Типы = СвойствоНоменклатуры.ТипЗначения.Типы();
	
	ТипCML = "Строка";
	
	Если Типы.Количество() <> 1 Тогда
		// По схеме CML можно выгрузить только один тип значений.
		// Выгружаем "Строка", как универсальный тип.
		ЗаписатьТекстовойУзел(ОбъектCML, "ТипЗначений", ТипCML);
		Возврат;
	КонецЕсли;
	
	Тип = Типы[0];
	
	Если Тип = Тип("Число") Тогда
		
		ТипCML = "Число";
		ЗаписатьТекстовойУзел(ОбъектCML, "ТипЗначений", ТипCML);

	ИначеЕсли Тип = Тип("Дата") Тогда
		
		ТипCML = "Время";
		ЗаписатьТекстовойУзел(ОбъектCML, "ТипЗначений", ТипCML);

	Иначе
		
		Если ТипЗначенияСправочник(Тип) Тогда
			
			ТипCML = "Справочник";
			ЗаписатьТекстовойУзел(ОбъектCML, "ТипЗначений", ТипCML);
			
			ОбъектCML.ЗаписатьНачалоЭлемента("ВариантыЗначений");
			
			ВариантыЗначений = ПолучитьВариантыЗначенийСвойстваПоТипу(СвойствоНоменклатуры, Тип);
			
			Для Каждого ВариантЗначения Из ВариантыЗначений Цикл
				
				ОбъектCML.ЗаписатьНачалоЭлемента("Справочник");
				Ид = ВариантЗначения.УникальныйИдентификатор();
				ЗаписатьТекстовойУзел(ОбъектCML, "ИдЗначения", Ид);
				ЗаписатьТекстовойУзел(ОбъектCML, "Значение", ФорматЗначенияДляCML(ВариантЗначения, 1000));
				ОбъектCML.ЗаписатьКонецЭлемента();
				
			КонецЦикла;
			
			ОбъектCML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектCML, "ДляТоваров", Истина);

КонецПроцедуры

Функция ПолучитьВариантыЗначенийСвойстваПоТипу(СвойствоНоменклатуры, Тип)
	
	ВариантыЗначений = Новый Массив;
	
	мЗапросПоВариантамЗначенияСвойства.УстановитьПараметр("СвойствоНоменклатуры", СвойствоНоменклатуры);
	
	РезультатЗапроса = мЗапросПоВариантамЗначенияСвойства.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ВариантыЗначений;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Значение) = Тип Тогда
			ВариантыЗначений.Добавить(Выборка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВариантыЗначений;
КонецФункции

Процедура ВыгрузитьОсновныеРеквизитыГруппыДляКлассификатора(БуферCML, Группа)
	
	Если КлассифицироватьПоЦеновымГруппам Тогда
		
		ИдГруппы = СформироватьУникальныйИдентификаторОбъекта(Группа.ЦеноваяГруппа);
		
		ДобавитьУзелCML(БуферCML, "Ид", ИдГруппы);
		
		ИмяГруппы = Группа.ЦеноваяГруппа.Наименование;
		
		ДобавитьУзелCML(БуферCML, "Наименование", ФорматНаименованияДляCML(ИмяГруппы));

	Иначе
		
		ИдГруппы = СформироватьУникальныйИдентификаторОбъекта(Группа.НоменклатураСсылка);
		
		ДобавитьУзелCML(БуферCML, "Ид", ИдГруппы);
		
		ИмяГруппы = Группа.НоменклатураСсылка.Наименование;
		
		ДобавитьУзелCML(БуферCML, "Наименование", ФорматНаименованияДляCML(ИмяГруппы));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьГруппыРекурсивно(БуферCML, ДеревоГрупп, СписокГрупп, СоздаватьНовыйУровеньГрупп = Истина, ТекущийРодитель = НеОпределено);
	
	ТекущийБуферCML = Новый СписокЗначений;
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если НЕ СтрокаДерева.НоменклатураСсылка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.НоменклатураСсылка = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоГруппаВерхнегоУровня(СтрокаДерева.НоменклатураСсылка, СписокГрупп) Тогда
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ВыгрузитьГруппыРекурсивно(ТекущийБуферCML, СтрокаДерева.Строки, СписокГрупп, Ложь);
			КонецЕсли;
			
		Иначе
			
			ДобавитьНачалоЭлементаCML(ТекущийБуферCML, "Группа");
			
			ВыгрузитьОсновныеРеквизитыГруппыДляКлассификатора(ТекущийБуферCML, СтрокаДерева);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				ВыгрузитьГруппыРекурсивно(ТекущийБуферCML, СтрокаДерева.Строки, СписокГрупп,, СтрокаДерева.НоменклатураСсылка);
				
			КонецЕсли;
			
			ДобавитьКонецЭлементаCML(ТекущийБуферCML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодготовитьCMLКлассификатора(БуферCML, ТекущийБуферCML, СоздаватьНовыйУровеньГрупп);

КонецПроцедуры

Процедура ВыгрузитьГруппыРекурсивноПоЦеновымГруппам(БуферCML, ДеревоГрупп, СписокГрупп, СоздаватьНовыйУровеньГрупп = Истина, ТекущийРодитель = НеОпределено);
	
	ТекущийБуферCML = Новый СписокЗначений;
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если СтрокаДерева.ЦеноваяГруппа = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоГруппаВерхнегоУровня(СтрокаДерева.ЦеноваяГруппа, СписокГрупп) Тогда
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ВыгрузитьГруппыРекурсивноПоЦеновымГруппам(ТекущийБуферCML, СтрокаДерева.Строки, СписокГрупп, Ложь);
			КонецЕсли;
			
		Иначе
			
			ДобавитьНачалоЭлементаCML(ТекущийБуферCML, "Группа");
			
			ВыгрузитьОсновныеРеквизитыГруппыДляКлассификатора(ТекущийБуферCML, СтрокаДерева);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				
				ВыгрузитьГруппыРекурсивноПоЦеновымГруппам(ТекущийБуферCML, СтрокаДерева.Строки, СписокГрупп,, СтрокаДерева.ЦеноваяГруппа);
				
			КонецЕсли;
			
			ДобавитьКонецЭлементаCML(ТекущийБуферCML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПодготовитьCMLКлассификатора(БуферCML, ТекущийБуферCML, СоздаватьНовыйУровеньГрупп);
	
КонецПроцедуры

Процедура ПодготовитьCMLКлассификатора(БуферCML, ТекущийБуферCML, СоздаватьНовыйУровеньГрупп)
	
	Если СоздаватьНовыйУровеньГрупп
		И ТекущийБуферCML.Количество() > 0 Тогда
		
		ДобавитьНачалоЭлементаCML(ТекущийБуферCML, "Группы", Истина);
		ДобавитьКонецЭлементаCML(ТекущийБуферCML);
		
	КонецЕсли;
	
	Для Каждого ЭлементCML Из ТекущийБуферCML Цикл
		НовыйЭлемент = БуферCML.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементCML);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоГруппаВерхнегоУровня(Элемент, СписокГрупп)
	Если ТипЗнч(СписокГрупп) = Тип("СписокЗначений") Тогда
		Для Каждого Группа Из СписокГрупп Цикл
			Если Группа.Значение.ПринадлежитЭлементу(Элемент) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура ВыгрузитьСвойства(ОбъектCML)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЗначенияСвойствНоменклатуры.СвойствоНоменклатурыСсылка
	                      |ИЗ
	                      |	ВремЗначенияСвойствНоменклатуры КАК ЗначенияСвойствНоменклатуры");
	Запрос.МенеджерВременныхТаблиц = мМВТ;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектCML.ЗаписатьНачалоЭлемента("Свойства");
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектCML.ЗаписатьНачалоЭлемента("Свойство");
		ВыгрузитьОсновныеРеквизитыСвойстваДляКлассификатора(ОбъектCML, Выборка.СвойствоНоменклатурыСсылка);
		ОбъектCML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ОбъектCML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОБанке(ОбъектXML, РольБанка, Банк)
	
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента(РольБанка);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "СчетКорреспондентский", Банк.КоррСчет);
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Банк.Наименование);
	
	Если Не ПустаяСтрока(Банк.Адрес) Тогда
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Адрес");
		ЗаписатьТекстовойУзел(ОбъектXML, "Представление", Банк.Адрес);
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектXML, "БИК", Банк.Код);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьБанковскийсчетОрганизации(ОбъектXML, БанковскийСчет)
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет)
		ИЛИ ТипЗнч(БанковскийСчет) <> Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("РасчетныеСчета");
	
	// информация о счете
	ОбъектXML.ЗаписатьНачалоЭлемента("РасчетныйСчет");
	
	ЗаписатьТекстовойУзел(ОбъектXML, "НомерСчета", БанковскийСчет.НомерСчета);
	
	ВыгрузитьИнформациюОБанке(ОбъектXML, "Банк", БанковскийСчет.Банк);
	ВыгрузитьИнформациюОБанке(ОбъектXML, "БанкКорреспондент", БанковскийСчет.БанкДляРасчетов);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
Конецпроцедуры

Процедура ЗаписатьАдресноеПоле(ОбъектXML, ИмяПоля, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("АдресноеПоле");
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Тип", ИмяПоля);
	ЗаписатьТекстовойУзел(ОбъектXML, "Значение", Значение);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьЮрАдресОрганизации(ОбъектXML, Организация)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Поле10,
	               |	КонтактнаяИнформация.Комментарий
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Организация);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОбъектXML.ЗаписатьНачалоЭлемента("ЮридическийАдрес");
		
		ЗаписатьТекстовойУзел(ОбъектXML, "Представление", Выборка.Представление);
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий", Выборка.Комментарий);
		
		АдресРоссийский = Истина;
		
		Если ЗначениеЗаполнено(Выборка.Поле1) Тогда
			
			Попытка
				ЧислоИндекса = Число(Выборка.Поле1);
			Исключение
				АдресРоссийский = Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
		// российский адрес
		Если АдресРоссийский Тогда
			
			//Возможные значения: Почтовый индекс, Страна, Регион, Район, Населенный пункт, Город, Улица, Дом, Корпус, Квартира
			ЗаписатьАдресноеПоле(ОбъектXML, "Почтовый индекс", Выборка.Поле1);
			ЗаписатьАдресноеПоле(ОбъектXML, "Регион", Выборка.Поле2);
			ЗаписатьАдресноеПоле(ОбъектXML, "Район", Выборка.Поле3);
			ЗаписатьАдресноеПоле(ОбъектXML, "Населенный пункт", Выборка.Поле4);
			ЗаписатьАдресноеПоле(ОбъектXML, "Город", Выборка.Поле5);
			ЗаписатьАдресноеПоле(ОбъектXML, "Улица", Выборка.Поле6);
			ЗаписатьАдресноеПоле(ОбъектXML, "Дом", Выборка.Поле7);
			ЗаписатьАдресноеПоле(ОбъектXML, "Корпус", Выборка.Поле8);
			ЗаписатьАдресноеПоле(ОбъектXML, "Квартира", Выборка.Поле9);
			
		Иначе
			
			ЗаписатьАдресноеПоле(ОбъектXML, "Страна", Выборка.Поле1);
			
		КонецЕсли;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пищет в XML-файл информацию о контрагенте при выгрузке документов
//
// Параметры:
//  ОбъектXML  - объект типа ЗаписьXML
//  Контрагент - справочник-ссылка "КОнтрагенты"
//  Роль       - строка - значение тэга "Роль"
//
Процедура ВыгрузитьКонтрагентаДок(ОбъектXML, Контрагент, Роль = Неопределено, СтруктурнаяЕдиница = Неопределено, ИмяГруппыВыгрузки = "Контрагент")
	
	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяГруппыВыгрузки);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Ид",           Строка(Контрагент.УникальныйИдентификатор()));
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Контрагент.Наименование);
	
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "ОфициальноеНаименование", Контрагент.НаименованиеПолное);
		
		// выгрузка юридического адреса
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			ВыгрузитьЮрАдресОрганизации(ОбъектXML, Контрагент);
		КонецЕсли;
		
	Иначе
		ЗаписатьТекстовойУзел(ОбъектXML, "ПолноеНаименование", Контрагент.НаименованиеПолное);
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектXML, "ИНН", Контрагент.ИНН);
	ЗаписатьТекстовойУзел(ОбъектXML, "КПП", Контрагент.КПП);
	ЗаписатьТекстовойУзел(ОбъектXML, "ОКПО", Контрагент.КодПоОКПО);
	
	ВыгрузитьБанковскийсчетОрганизации(ОбъектXML, СтруктурнаяЕдиница);
	
	Если Роль <> Неопределено Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "Роль", Роль);
	КонецЕсли;
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьКлассификатор(ОбъектCML, ПараметрыКаталога)
	
	ОбъектCML.ЗаписатьНачалоЭлемента("Классификатор");
	ЗаписатьТекстовойУзел(ОбъектCML, "Ид", Строка(ПараметрыКаталога.ИдКаталога));
	ЗаписатьТекстовойУзел(ОбъектCML, "Наименование", ФорматНаименованияДляCML("Классификатор (" + ПараметрыКаталога.Каталог + ")"));
	
	ВыгрузитьКонтрагентаДок(ОбъектCML, мОрганизацияВладелец, , мОрганизацияВладелец.ОсновнойБанковскийСчет, "Владелец");
	
	ДеревоГрупп = мРезультатЗапросаИерархияНоменклатуры.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	БуферCML = Новый СписокЗначений; 
	
	Если КлассифицироватьПоЦеновымГруппам Тогда
		ВыгрузитьГруппыРекурсивноПоЦеновымГруппам(БуферCML, ДеревоГрупп.Строки, ПараметрыКаталога.Группы);
	Иначе
		ВыгрузитьГруппыРекурсивно(БуферCML, ДеревоГрупп.Строки, ПараметрыКаталога.Группы);
	КонецЕсли;
	
	ЗаписатьCMLПоСпискуЗначений(ОбъектCML, БуферCML);

	ВыгрузитьСвойства(ОбъектCML);
	
	ОбъектCML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьРеквизитыКонтрагентаВCML(ОбъектCML, Контрагент)
	
	ОбъектCML.ЗаписатьНачалоЭлемента("Контрагенты");
	ВыгрузитьКонтрагентаДок(ОбъектCML, Контрагент, "Покупатель", Контрагент.ОсновнойБанковскийСчет, "Контрагент");
	ОбъектCML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьТоварыУслугиЗаказаВCML(ОбъектCML, Док)
	
	ОбъектCML.ЗаписатьНачалоЭлемента("Товары");
	
	Для Каждого СтрокаТЧ Из Док.Товары Цикл
		ВыгрузитьТоварДляЗаказаВCML(ОбъектCML, Док, СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Док.Услуги Цикл
		ВыгрузитьТоварДляЗаказаВCML(ОбъектCML, Док, СтрокаТЧ, Истина);
	КонецЦикла;
	
	ОбъектCML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьТоварДляЗаказаВCML(ОбъектCML, Док, СтрокаТЧ, ТЧУслуги = Ложь)

	ОбъектCML.ЗаписатьНачалоЭлемента("Товар");
	
	Если ТЧУслуги Тогда
		ИдТовара = СформироватьУникальныйИдентификаторОбъекта(СтрокаТЧ.Номенклатура);
	Иначе
		ИдТовара = СформироватьУникальныйИдентификаторОбъекта(СтрокаТЧ.Номенклатура, СтрокаТЧ.ХарактеристикаНоменклатуры);
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектCML, "Ид"			, ИдТовара);
	ЗаписатьТекстовойУзел(ОбъектCML, "Артикул"		, СтрокаТЧ.Номенклатура.Артикул);
	ЗаписатьТекстовойУзел(ОбъектCML, "Наименование"	, ФорматНаименованияДляCML(СтрокаТЧ.Номенклатура.Наименование));
	
	ОбъектCML.ЗаписатьНачалоЭлемента("БазоваяЕдиница");
	ОбъектCML.ЗаписатьАтрибут("Код"					   , СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения.Код);
	ОбъектCML.ЗаписатьАтрибут("НаименованиеПолное"	   , ФорматНаименованияДляCML(СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное));
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение) Тогда
		ОбъектCML.ЗаписатьАтрибут("МеждународноеСокращение", СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение);
	КонецЕсли;
	
	ОбъектCML.ЗаписатьТекст(Строка(СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения));
	ОбъектCML.ЗаписатьКонецЭлемента();
	
	//
	
	Если СтрокаТЧ.Номенклатура.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
		
		ОбъектCML.ЗаписатьНачалоЭлемента("СтавкиНалогов");
		ОбъектCML.ЗаписатьНачалоЭлемента("СтавкаНалога");
		ЗаписатьТекстовойУзел(ОбъектCML, "Наименование", НаименованиеНалога);
		ЗаписатьТекстовойУзел(ОбъектCML, "Ставка"      , ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтрокаТЧ.Номенклатура.СтавкаНДС));
		ОбъектCML.ЗаписатьКонецЭлемента();
		ОбъектCML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Если НЕ ТЧУслуги
		И ЗначениеЗаполнено(СтрокаТЧ.ХарактеристикаНоменклатуры) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	ЗначенияСвойствОбъектов.Свойство,
					   |	ЗначенияСвойствОбъектов.Значение
					   |ИЗ
					   |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					   |ГДЕ
					   |	ЗначенияСвойствОбъектов.Объект = &Объект";
					   
		Запрос.УстановитьПараметр("Объект", СтрокаТЧ.ХарактеристикаНоменклатуры);
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗаписанЗаголовокВыгрузкиХарактеристик = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.Значение)
					ИЛИ НЕ ЗначениеЗаполнено(ФорматНаименованияДляCML(Выборка.Свойство)) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если НЕ ЗаписанЗаголовокВыгрузкиХарактеристик Тогда
					
					ОбъектCML.ЗаписатьНачалоЭлемента("ХарактеристикиТовара");
					ЗаписанЗаголовокВыгрузкиХарактеристик = Истина;
					
				КонецЕсли;
				
				ОбъектCML.ЗаписатьНачалоЭлемента("ХарактеристикаТовара");
				ЗаписатьТекстовойУзел(ОбъектCML, "Наименование"	, ФорматНаименованияДляCML(Выборка.Свойство));
				ЗаписатьТекстовойУзел(ОбъектCML, "Значение"	    , Выборка.Значение);
				ОбъектCML.ЗаписатьКонецЭлемента();	
				
			КонецЦикла;
			
			Если ЗаписанЗаголовокВыгрузкиХарактеристик Тогда
				ОбъектCML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	//
	
	ОбъектCML.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
	
	ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "ВидНоменклатуры", СтрокаТЧ.Номенклатура.ВидНоменклатуры);
	ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "ТипНоменклатуры", СтрокаТЧ.Номенклатура.ВидНоменклатуры.ТипНоменклатуры);
	
	ОбъектCML.ЗаписатьКонецЭлемента();
	
	//
	
	ЗаписатьТекстовойУзел(ОбъектCML, "ЦенаЗаЕдиницу", ФорматЗначенияДляCML(СтрокаТЧ.Цена, мФорматСумм));
	ЗаписатьТекстовойУзел(ОбъектCML, "Количество"	, ФорматЗначенияДляCML(СтрокаТЧ.Количество, мФорматСумм));
	ЗаписатьТекстовойУзел(ОбъектCML, "Сумма"		, ФорматЗначенияДляCML(СтрокаТЧ.Сумма, мФорматСумм));
	
	Если ТЧУслуги Тогда
		ЗаписатьТекстовойУзел(ОбъектCML, "Единица", СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения);
		ЗаписатьТекстовойУзел(ОбъектCML, "Коэффициент", "1");
	Иначе
		ЗаписатьТекстовойУзел(ОбъектCML, "Единица", СтрокаТЧ.ЕдиницаИзмерения);
		ЗаписатьТекстовойУзел(ОбъектCML, "Коэффициент", СтрокаТЧ.Коэффициент);
	КонецЕсли;
	
	ОбъектCML.ЗаписатьНачалоЭлемента("Налоги");
	ОбъектCML.ЗаписатьНачалоЭлемента("Налог");
	
	ЗаписатьТекстовойУзел(ОбъектCML, "Наименование", НаименованиеНалога);
	ЗаписатьТекстовойУзел(ОбъектCML, "УчтеноВСумме", Док.СуммаВключаетНДС);
	ЗаписатьТекстовойУзел(ОбъектCML, "Сумма"	   , ФорматЗначенияДляCML(СтрокаТЧ.СуммаНДС, мФорматСумм), Ложь);
	ЗаписатьТекстовойУзел(ОбъектCML, "Ставка"      , ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтрокаТЧ.СтавкаНДС));
	
	ОбъектCML.ЗаписатьКонецЭлемента();
	ОбъектCML.ЗаписатьКонецЭлемента();
	
	Если СтрокаТЧ.ПроцентСкидкиНаценки <> 0 Тогда
		
		ОбъектCML.ЗаписатьНачалоЭлемента("Скидки");
		ОбъектCML.ЗаписатьНачалоЭлемента("Скидка");
		ЗаписатьТекстовойУзел(ОбъектCML, "Процент"     , СтрокаТЧ.ПроцентСкидкиНаценки);
		ЗаписатьТекстовойУзел(ОбъектCML, "УчтеноВСумме", Истина);
		ОбъектCML.ЗаписатьКонецЭлемента();
		ОбъектCML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ОбъектCML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьЗаказВCML(ОбъектCML, Док)
	
	ЗаписатьТекстовойУзел(ОбъектCML, "Ид"	, Строка(Док.ЗаказСсылка.УникальныйИдентификатор()));
	ЗаписатьТекстовойУзел(ОбъектCML, "Номер", Док.НомерВходящегоДокументаЭлектронногоОбмена);
	ЗаписатьТекстовойУзел(ОбъектCML, "Дата" , ФорматДатыДляCML(Док.ДатаВходящегоДокументаЭлектронногоОбмена, Истина, Ложь));
	ЗаписатьТекстовойУзел(ОбъектCML, "ХозОперация", "Заказ товара");
	
	ЗаписатьТекстовойУзел(ОбъектCML, "Роль"		  , "Продавец");
	ЗаписатьТекстовойУзел(ОбъектCML, "Валюта"	  , ФорматВалютыДляCML(Док.ВалютаДокумента));
	ЗаписатьТекстовойУзел(ОбъектCML, "Курс"	      , Док.КурсВзаиморасчетов);
	ЗаписатьТекстовойУзел(ОбъектCML, "Сумма"      , ФорматЗначенияДляCML(Док.СуммаДокумента, мФорматСумм));
	
	ВыгрузитьРеквизитыКонтрагентаВCML(ОбъектCML, Док.Контрагент);
	
	ЗаписатьТекстовойУзел(ОбъектCML, "Время", ФорматДатыДляCML(Док.ДатаВходящегоДокументаЭлектронногоОбмена, Ложь, Истина));
	ЗаписатьТекстовойУзел(ОбъектCML, "СрокПлатежа", ФорматДатыДляCML(Док.ДатаОплаты, Истина, Ложь));
	
	ЗаписатьТекстовойУзел(ОбъектCML, "Комментарий", ФорматКомментарияДляCML(Док.Комментарий));
	
	Если Док.УчитыватьНДС Тогда
		
		ОбъектCML.ЗаписатьНачалоЭлемента("Налоги");
		ОбъектCML.ЗаписатьНачалоЭлемента("Налог");
		ЗаписатьТекстовойУзел(ОбъектCML, "Наименование", НаименованиеНалога);
		ЗаписатьТекстовойУзел(ОбъектCML, "УчтеноВСумме", Док.СуммаВключаетНДС);
		ЗаписатьТекстовойУзел(ОбъектCML, "Сумма", ФорматЗначенияДляCML(ПолучитьСуммуНДС(Док), мФорматСумм), Ложь);
		ОбъектCML.ЗаписатьКонецЭлемента();
		ОбъектCML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ВыгрузитьТоварыУслугиЗаказаВCML(ОбъектCML, Док);
	
КонецПроцедуры

Функция СформироватьУникальныйИдентификаторОбъекта(Объект, Характеристика = Неопределено)
	
	Ид = Строка(Объект.УникальныйИдентификатор());
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура")
		И (НЕ Объект.ЭтоГруппа)
		И Объект.ВестиУчетПоХарактеристикам
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	
	Возврат Ид;
	
КонецФункции

Функция ВыгрузитьКартинку(Номенклатура, ХранилищеСсылка)
	
	Результат = НеОпределено;
	
	Если НЕ ЗначениеЗаполнено(ХранилищеСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ХранилищеСсылка.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Картинка = ХранилищеСсылка.Хранилище.Получить();
	
	Если ТипЗнч(Картинка) <> Тип("Картинка") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ФорматКартинкиРазрешен  = Истина;
	РасширениеФайлаКартинки = "";
	
	Попытка
		ФорматКартинкиОбъекта = Картинка.Формат();
	Исключение
		ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат;
	КонецПопытки;
	
	Если ФорматКартинкиОбъекта = ФорматКартинки.НеизвестныйФормат Тогда
		ФорматКартинкиРазрешен = Ложь;
	Иначе
		Если НЕ (ФорматКартинкиОбъекта = ФорматКартинки.GIF
			 ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.JPEG
			 ИЛИ ФорматКартинкиОбъекта = ФорматКартинки.PNG) Тогда
			Попытка
				ФорматКартинкиОбъекта = Картинка.Преобразовать(ФорматКартинки.JPEG);
			Исключение
				СообщитьОбИсключительнойОшибке(Истина, "Не удалось преобразовать формат картинки. Номенклатура: " + Номенклатура + ". Преобразование из " + Строка(ФорматКартинкиОбъекта) + " в JPEG");
				Возврат Результат;
			КонецПопытки;
		КонецЕсли;
		РасширениеФайлаКартинки = Строка(ФорматКартинкиОбъекта);
	КонецЕсли;
	
	Если НЕ ФорматКартинкиРазрешен Тогда
		СообщитьПользователю("Формат основного изображения неизвестен или запрещен. Номенклатура: " + Номенклатура, Истина, СтатусСообщения.Информация);
		Возврат Результат;
	КонецЕсли;
	
	ИмяПоНоменклатуре = Строка(Номенклатура.УникальныйИдентификатор());
	ИмяПоХранилищу    = Строка(ХранилищеСсылка.УникальныйИдентификатор());
	
	ИмяФайлаКартинки = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + НРег(РасширениеФайлаКартинки);
	КаталогПоИмени   = Лев(ИмяПоНоменклатуре, 2);
	КаталогКартинки	 = мКаталогНаДиске + "\" + мПодкаталогФайлов + "\" + КаталогПоИмени;
	
	СоздатьКаталог(КаталогКартинки);
	
	ПолноеИмяФайлаКартинки = КаталогКартинки + "\" + ИмяФайлаКартинки;
	
	Попытка
		Картинка.Записать(ПолноеИмяФайлаКартинки);
	Исключение
		СообщитьОбИсключительнойОшибке(Истина, "Не удалось записать файл картинки на диск. Номенклатура: " + Номенклатура);
		Возврат Результат;
	КонецПопытки;	
	
	Результат = мПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайлаКартинки;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьФайл(Номенклатура, ХранилищеСсылка)
	
	Результат = НеОпределено;
	
	Если НЕ ЗначениеЗаполнено(ХранилищеСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ХранилищеСсылка.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДвоичныеДанные = ХранилищеСсылка.Хранилище.Получить();
	
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Результат;
	КонецЕсли;
	
	РасширениеФайла = ".file";
	
	Файл = Новый Файл(ХранилищеСсылка.ИмяФайла);
	РасширениеФайла = Файл.Расширение;
	
	ИмяПоНоменклатуре = Строка(Номенклатура.УникальныйИдентификатор());
	ИмяПоХранилищу    = Строка(ХранилищеСсылка.УникальныйИдентификатор());
	
	ИмяФайла		 = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + НРег(РасширениеФайла);
	КаталогПоИмени   = Лев(ИмяПоНоменклатуре, 2);
	КаталогФайла	 = мКаталогНаДиске + "\" + мПодкаталогФайлов + "\" + КаталогПоИмени;
	
	СоздатьКаталог(КаталогФайла);
	
	ПолноеИмяФайла = КаталогФайла + "\" + ИмяФайла;
	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
	Исключение
		СообщитьОбИсключительнойОшибке(Истина, "Не удалось записать файл на диск. Номенклатура: " + Номенклатура);
		Возврат Результат;
	КонецПопытки;
	
	Результат = мПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьНовоеЗначениеРеквизита(ОбъектXML, Наименование, Значение, ПустоеЗначение = "", ИмяГруппыЭлементов = "ЗначениеРеквизита")
	
	ЗначениеДляЗаписи = Значение;
	Если ЗначениеДляЗаписи = Null Тогда
		ЗначениеДляЗаписи = ПустоеЗначение;
	КонецЕсли;
	
	Если ЗначениеДляЗаписи = "" Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяГруппыЭлементов);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование",  Наименование, Ложь);
	ЗаписатьТекстовойУзел(ОбъектXML, "Значение",  ЗначениеДляЗаписи, Ложь);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция СформироватьCMLСРанееЗагруженнымиЗаказами(СтрокаCML, МассивИзменений) 
	
	ОтобразитьСостояние("Поиск открытых заказов, загруженных с " + HTTPОбменСервер + "...");
	
	ТаблицаДокументов = ПроцедурыОбменаССайтом.ПолучитьЗаказыСОплатойИОтгрузкойПоКатегориям(МассивИзменений, мМассивЗагруженныхДокументов);
	
	Если ТаблицаДокументов.Количество() = 0 Тогда
		Возврат ТаблицаДокументов;
	КонецЕсли;
	
	ОбъектCML = ПолучитьОбъектДляЗаписиXML("");
	НачатьCML(ОбъектCML);
	
	Для Каждого СтрокаТД Из ТаблицаДокументов Цикл
		
		ОбъектCML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЗаказВCML(ОбъектCML, СтрокаТД);
		
		ОбъектCML.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
		
		ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "Номер по 1С", СтрокаТД.Номер);
		ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "Дата по 1С", ФорматДатыДляCML(СтрокаТД.Дата));
		ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "ПометкаУдаления", СтрокаТД.ПометкаУдаления);
		ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "Проведен", СтрокаТД.Проведен);
		
		Если СтрокаТД.Оплачен Тогда
			ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "Номер оплаты по 1С", СтрокаТД.НомерДокументаОплаты);
			ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "Дата оплаты по 1С", ФорматДатыДляCML(СтрокаТД.ДатаДокументаОплаты));
		КонецЕсли;
		
		Если СтрокаТД.Отгружен Тогда
			ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "Номер отгрузки по 1С", СтрокаТД.НомерДокументаОтгрузки);
			ДобавитьНовоеЗначениеРеквизита(ОбъектCML, "Дата отгрузки по 1С", ФорматДатыДляCML(СтрокаТД.ДатаДокументаОтгрузки));
		КонецЕсли;
		
		ОбъектCML.ЗаписатьКонецЭлемента();
		ОбъектCML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	СтрокаCML = ЗавершитьCML(ОбъектCML);
	
	Возврат ТаблицаДокументов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМАТИРОВАНИЯ ЗНАЧЕНИЙ CML


Функция ФорматКомментарияДляCML(Комментарий)
	Возврат Лев(Комментарий, 3000);
КонецФункции

Функция ФорматНаименованияДляCML(Наименование)
	Возврат Лев(Наименование, 250);
КонецФункции

Функция ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ЗначениеНалога = "Без налога";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеНалога = "0";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеНалога = "10";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеНалога = "10/110";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеНалога = "18";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеНалога = "18/118";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ЗначениеНалога = "20";
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ЗначениеНалога = "20/120";
	Иначе
		ЗначениеНалога = "";
	КонецЕсли;
	
	Возврат ЗначениеНалога;
	
КонецФункции

Функция ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(ЗначениеНалога)
	
	Если ЗначениеНалога = "0" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли ЗначениеНалога = "10" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли ЗначениеНалога = "10/110" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли ЗначениеНалога = "18" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли ЗначениеНалога = "18/118" Тогда
		СтавкаНДС =  Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли ЗначениеНалога = "20" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли ЗначениеНалога = "20/120" Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция ФорматВалютыДляCML(ВалютаСсылка)
	
	ТекстВалюты = "???";
	
	Если ТипЗнч(ВалютаСсылка) = Тип("СправочникСсылка.Валюты") Тогда
		ТекстВалюты = ВалютаСсылка.Наименование;
	КонецЕсли;
	
	Возврат Лев(ТекстВалюты, 3);
	
КонецФункции

Функция ФорматДатыДляCML(ЗначениеДата, ВернутьДату = Истина, ВернутьВремя = Ложь)
	
	ДатаСтрока  = Формат(ЗначениеДата, "ДФ=yyyy-MM-dd");
	ВремяСтрока = Формат(ЗначениеДата, "ДФ=HH:mm:ss");
	Результат   = "";
	
	Если ВернутьДату И ВернутьВремя Тогда
		Результат = ДатаСтрока + "T" + ВремяСтрока;
	ИначеЕсли ВернутьДату И (НЕ ВернутьВремя) Тогда
		Результат = ДатаСтрока;
	ИначеЕсли (НЕ ВернутьДату) И ВернутьВремя Тогда
		Результат = ВремяСтрока;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматЗначенияДляCML(Значение, Формат = НеОпределено)
	
	Результат = "";
	
	Если ТипЗнч(Формат) = Тип("Строка") Тогда
		
		Результат = Формат(Значение, Формат);
		
	ИначеЕсли ТипЗнч(Формат) = Тип("Число") Тогда
		
		Результат = Лев(СокрЛП(Значение), Формат);
		
	Иначе
		
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			
			Результат = Формат(Значение, "ЧРД=.; ЧГ=");
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
			
			Результат = ФорматДатыДляCML(Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВЫГРУЗКОЙ ДАННЫХ


Процедура ВыгрузитьДанные() Экспорт
	
	мПринудительнаяПолнаяВыгрузка = ПроцедурыОбменаССайтом.ПолучитьФлагПринудительнойПолнойВыгрузки(НастройкаСсылка);
	
	мДатаФормирования = ТекущаяДата();
	
	мСтруктураИнформацииИсторииОбмена = ПолучитьСтруктуруИнформацииДляИстории();
	
	мСтруктураИнформацииИсторииОбмена.ДатаНачалаПоследнейВыгрузки = ТекущаяДата();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкаСсылка);
	
	НачалоАдресаСкрипта = НастройкаСсылка.HTTPОбменАдресСайта;
	СтруктураАдреса = ПроцедурыОбменаССайтом.РазобратьАдресСайта(НачалоАдресаСкрипта);
	
	HTTPОбменПорт = СтруктураАдреса.HTTPПорт;
	HTTPОбменСервер = СтруктураАдреса.HTTPСервер;
	HTTPОбменЗащищенноеСоединение = СтруктураАдреса.HTTPЗащищенноеСоединение;
	НачалоАдресаСкрипта = СтруктураАдреса.HTTPАдресСкрипта;
	
	Если ВыгружатьТолькоИзменения Тогда
		СтруктураИзменений = ПолучитьВсеИзмененияИзПланаОбмена();
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		КаталогВыгрузки = КаталогВременныхФайлов();
	Иначе
		ПоследнийСимвол = Сред(КаталогВыгрузки, СтрДлина(КаталогВыгрузки), 1);
		Если ПоследнийСимвол <> "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
	КонецЕсли;
	
	мКаталогНаДиске = КаталогВыгрузки + мПодкаталогБезопасностиКаталогаВыгрузки;
	
	СоздатьКаталог(мКаталогНаДиске);
	
	ОчиститьКаталогНаДиске();
	
	ФайлЗагрузки = мКаталогНаДиске + "\order.xml";
	
	Если ОбменТоварами Тогда 
		
		ТоварыУспешноВыгружены = ВыгрузитьТовары(СтруктураИзменений);
		
		Если ВыгружатьТолькоИзменения
			И ТоварыУспешноВыгружены Тогда
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаТоварами, СтруктураИзменений.НомерСообщенияТовары);
			
		КонецЕсли;
		
	Иначе
		ТоварыУспешноВыгружены = Истина;
	КонецЕсли;
	
	Если ОбменЗаказами Тогда
		
		ЗаказыУспешноВыгружены = ВыполнитьОбменЗаказами(СтруктураИзменений);
		
		Если ВыгружатьТолькоИзменения
			И ЗаказыУспешноВыгружены Тогда
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаЗаказами, СтруктураИзменений.НомерСообщенияЗаказы);
			
		КонецЕсли;
		
	Иначе
		ЗаказыУспешноВыгружены = Истина;
	КонецЕсли;
	
	мСтруктураИнформацииИсторииОбмена.ДатаПоследнейВыгрузки = ТекущаяДата();
	мСтруктураИнформацииИсторииОбмена.РезультатПоследнейВыгрузки = ТоварыУспешноВыгружены И ЗаказыУспешноВыгружены;
	
	ЗаписатьИнформациюВПротоколОбмена(мСтруктураИнформацииИсторииОбмена);
	
	Если мПринудительнаяПолнаяВыгрузка И мСтруктураИнформацииИсторииОбмена.РезультатПоследнейВыгрузки Тогда
		мПринудительнаяПолнаяВыгрузка = Ложь;
		ПроцедурыОбменаССайтом.УстановитьФлагПринудительнойПолнойВыгрузки(НастройкаСсылка, мПринудительнаяПолнаяВыгрузка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьКаталогНаДиске()
	Попытка
		УдалитьФайлы(мКаталогНаДиске, "*.*");
	Исключение
		СообщитьОбИсключительнойОшибке(Истина, "Не удалось очистить каталог обмена! (" + мКаталогНаДиске + ")");
	КонецПопытки;
КонецПроцедуры

Функция ВыгрузитьТовары(СтруктураИзменений)
	
	Если НЕ ОпределитьМожноВыгрузитьТовары() Тогда
		
		СообщитьПользователю("Выгрузка товаров не произведена.", Истина);
		Возврат Истина;
		
	КонецЕсли;
	
	HTTPОбменАдресСкрипта = НачалоАдресаСкрипта;
	
	Если ВыгружатьНаСайт Тогда
		
		Успешно = Ложь;
		ДополнительнаяИнформация = "";
		ТекстСообщенияПользователю = ПроцедурыОбменаССайтом.ВыполнитьТестовоеПодключениеКСерверуHTTP(ЭтотОбъект, ДополнительнаяИнформация, Успешно);
		Если Не Успешно Тогда
			СообщитьПользователю(ДополнительнаяИнформация, Истина);
			СообщитьПользователю(ТекстСообщенияПользователю, Истина);
			СообщитьПользователю("Выгрузка товаров отменена.", Истина);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыгрузитьТоварыВКаталогНаДиске(СтруктураИзменений);
	
	СтруктураРезультата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений", 0, 0, 0, 0);
	
	СообщениеПользователю = "";
	
	Для Каждого СтрокаТК Из мТаблицаКаталогов Цикл
		
		СтруктураРезультата.ВыгруженоТоваров = СтруктураРезультата.ВыгруженоТоваров + СтрокаТК.СтруктураРезультата.ВыгруженоТоваров;
		СтруктураРезультата.ВыгруженоКартинок = СтруктураРезультата.ВыгруженоКартинок + СтрокаТК.СтруктураРезультата.ВыгруженоКартинок;
		СтруктураРезультата.ВыгруженоФайлов = СтруктураРезультата.ВыгруженоФайлов + СтрокаТК.СтруктураРезультата.ВыгруженоФайлов;
		СтруктураРезультата.ВыгруженоПредложений = СтруктураРезультата.ВыгруженоПредложений + СтрокаТК.СтруктураРезультата.ВыгруженоПредложений;
		
		ВыгруженоОбъектовКаталога = СтрокаТК.СтруктураРезультата.ВыгруженоТоваров
								  + СтрокаТК.СтруктураРезультата.ВыгруженоКартинок
								  + СтрокаТК.СтруктураРезультата.ВыгруженоФайлов
								  + СтрокаТК.СтруктураРезультата.ВыгруженоПредложений;
								  
		Если мТаблицаКаталогов.Количество() > 1 Тогда
			Если ВыгруженоОбъектовКаталога > 0 Тогда
				СообщениеПользователю = СообщениеПользователю
					+ "В каталог """ + СтрокаТК.Каталог + """"
					+ " выгружено товаров: " + СтрокаТК.СтруктураРезультата.ВыгруженоТоваров
					+ ", картинок: " + СтрокаТК.СтруктураРезультата.ВыгруженоКартинок
					+ ", файлов: " + СтрокаТК.СтруктураРезультата.ВыгруженоФайлов
					+ ", предложений: " + СтрокаТК.СтруктураРезультата.ВыгруженоПредложений;
			Иначе
				СообщениеПользователю = СообщениеПользователю + "Для каталога """ + СтрокаТК.Каталог + """ изменения товаров не зарегистрированы, выгрузка товаров не произведена.";
			КонецЕсли;
			СообщениеПользователю = СообщениеПользователю + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Если мТаблицаКаталогов.Количество() > 1 Тогда
		СообщитьПользователю(Лев(СообщениеПользователю, СтрДлина(СообщениеПользователю) - 1), Истина);
		СообщениеПользователю = "Итого по всем каталогам:" + Символы.ПС;
	КонецЕсли;
	
	ВыгруженоОбъектов = СтруктураРезультата.ВыгруженоТоваров
					  + СтруктураРезультата.ВыгруженоКартинок
					  + СтруктураРезультата.ВыгруженоФайлов
					  + СтруктураРезультата.ВыгруженоПредложений;
						  
	Если ВыгруженоОбъектов > 0 Тогда
		
		СообщениеПользователю = СообщениеПользователю + "Выгружено товаров: " + СтруктураРезультата.ВыгруженоТоваров;
		
		Если ВыгружатьКартинки Тогда
			СообщениеПользователю = СообщениеПользователю + Символы.ПС + "Выгружено картинок: " + СтруктураРезультата.ВыгруженоКартинок;
		КонецЕсли;
		
		Если ВыгружатьФайлы Тогда
			СообщениеПользователю = СообщениеПользователю + Символы.ПС + "Выгружено файлов: " + СтруктураРезультата.ВыгруженоФайлов;
		КонецЕсли;
		
		СообщениеПользователю = СообщениеПользователю + Символы.ПС + "Выгружено предложений: " + СтруктураРезультата.ВыгруженоПредложений;
		
	Иначе
		
		СообщениеПользователю = "Изменения товаров не зарегистрированы. Выгрузка товаров не произведена.";
		
	КонецЕсли;
	
	СообщитьПользователю(СообщениеПользователю, Истина);
	
	Успешно = Истина;
	
	Если ВыгружатьНаСайт Тогда
		
		Если ВыгруженоОбъектов > 0 Тогда
			
			Успешно = ВыгрузитьКаталогПредложенияНаСайт();
			
		КонецЕсли;
		
		ОчиститьКаталогНаДиске();
		
	КонецЕсли;
	
	Если Успешно Тогда
		
		Если ВыгруженоОбъектов > 0 Тогда
			СообщитьПользователю("Выгрузка товаров успешно завершена", Истина);
		КонецЕсли;
		
	Иначе
		
		СообщитьПользователю("Выгрузка товаров завершена с ошибками!!!", Истина);
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьОбъектДляЗаписиXML(ИмяФайла)
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		ЗаписьXML.УстановитьСтроку("UTF-8");
	Иначе
		ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8"); 
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Возврат ЗаписьXML;
	
КонецФункции

Процедура НачатьCML(ЗаписьXML);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
	ЗаписьXML.ЗаписатьАтрибут("ВерсияСхемы", "2.05");
	ЗаписьXML.ЗаписатьАтрибут("ДатаФормирования", ФорматДатыДляCML(мДатаФормирования, Истина, Истина));
	
КонецПроцедуры

Функция ЗавершитьCML(ЗаписьXML)
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Процедура ВыгрузитьТоварыВКаталогНаДиске(СтруктураИзменений) 
	
	Отказ = Ложь;
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ТекущаяДата(), Отказ, , , Ложь);
	Если Отказ Тогда
		мУчетнаяПолитика = НеОпределено;
	КонецЕсли;
	
	ПроцедурыОбменаССайтом.НастроитьПостроитель(ПостроительЗапроса, КлассифицироватьПоЦеновымГруппам, ВыгружатьВсеХарактеристики, мУчетнаяПолитика);
	
	СтруктураНастроекПостроителя = СохраненныеНастройкиПостроителя.Получить();
	ТаблицаОтбора  = СтруктураНастроекПостроителя.ТаблицаОтбора;
	ТаблицаПорядка = СтруктураНастроекПостроителя.ТаблицаПорядка;
	
	Если ТаблицаОтбора <> Неопределено Тогда 
		ОбщегоНазначения.ЗаполнитьОтборПоТаблицеЗначений(ПостроительЗапроса.Отбор, ТаблицаОтбора);
	КонецЕсли;
	
	Если ТаблицаПорядка <> Неопределено Тогда 
		ПроцедурыОбменаССайтом.ЗаполнитьПорядокПоТаблицеЗначений(ПостроительЗапроса.Порядок, ТаблицаПорядка);
	КонецЕсли;
	
	мОрганизацияВладелец = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		мОрганизацияВладелец = Выборка.Ссылка;
	КонецЕсли;
	
	мТаблицаКаталогов = СохраненнаяТаблицаКаталогов.Получить();
	
	СоздатьТаблицу = Ложь;
	Если ТипЗнч(мТаблицаКаталогов) = Тип("ТаблицаЗначений") Тогда
		Если мТаблицаКаталогов.Количество() = 0 Тогда
			СоздатьТаблицу = Истина;
		КонецЕсли;
	Иначе
		СоздатьТаблицу = Истина;
	КонецЕсли;
	
	Если СоздатьТаблицу Тогда
		мТаблицаКаталогов = ПроцедурыОбменаССайтом.СоздатьТаблицуКаталогов();
	КонецЕсли;
	
	мТаблицаКаталогов.Колонки.Добавить("СтруктураРезультата");
	
	Если ВыгружатьТолькоИзменения И НЕ мПринудительнаяПолнаяВыгрузка Тогда
		МассивИзмененийНоменклатуры = СтруктураИзменений.Товары;
	КонецЕсли;
	
	/////////////////////////////////
	
	ИндексФайлаОбмена = 0;
	ИндексФайлаОбменаСтрокой = "";
	
	Для Каждого СтрокаТаблицыКаталогов Из мТаблицаКаталогов Цикл
		
		Если ИндексФайлаОбмена > 0 Тогда
			ИндексФайлаОбменаСтрокой = Формат(ИндексФайлаОбмена, "ЧГ=");	
		КонецЕсли;
		ИндексФайлаОбмена = ИндексФайлаОбмена + 1;
		
		ИмяФайлаКаталога = мКаталогНаДиске + "\import" + ИндексФайлаОбменаСтрокой + ".xml";
		ИмяФайлаПрайса	 = мКаталогНаДиске + "\offers" + ИндексФайлаОбменаСтрокой + ".xml";
		
		ОбъектCMLКаталог = ПолучитьОбъектДляЗаписиXML(ИмяФайлаКаталога);
		ОбъектCMLПакетПредложений = ПолучитьОбъектДляЗаписиXML(ИмяФайлаПрайса);
		
		СтрокаТаблицыКаталогов.СтруктураРезультата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений", 0, 0, 0, 0);
		ИмяКаталога = СтрокаТаблицыКаталогов.Каталог;
		
		Если ВыгружатьТолькоИзменения И НЕ мПринудительнаяПолнаяВыгрузка Тогда
			Если МассивИзмененийНоменклатуры.Количество() = 0 Тогда
				Продолжить;
			Иначе
				ФильтрПостроителяЗапроса(СтрокаТаблицыКаталогов.Группы, МассивИзмененийНоменклатуры);
			КонецЕсли;
		Иначе
			ФильтрПостроителяЗапроса(СтрокаТаблицыКаталогов.Группы);
		КонецЕсли;
		
		ОтобразитьСостояние("Каталог """ + ИмяКаталога + """: Предварительная обработка данных...");
		
		мМВТ = Новый МенеджерВременныхТаблиц;
		ПодготовитьЗапросы();
		ЗапросПостроителя = ПостроительЗапроса.ПолучитьЗапрос();
		ЗапросПостроителя.МенеджерВременныхТаблиц = мМВТ;
		МассивРезультатовОсновногоЗапроса = ЗапросПостроителя.ВыполнитьПакет(); 
		
		ИдКаталога = СтрокаТаблицыКаталогов.ИдКаталога;
		
		мРезультатЗапросаИерархияНоменклатуры = МассивРезультатовОсновногоЗапроса[МассивРезультатовОсновногоЗапроса.Количество() - 1];
		
		//
		
		НачатьCML(ОбъектCMLКаталог);
		НачатьCML(ОбъектCMLПакетПредложений);
		
		ВыгрузитьКлассификатор(ОбъектCMLКаталог, СтрокаТаблицыКаталогов);
		
		СтрокаТаблицыКаталогов.СтруктураРезультата = СформироватьCMLКаталогаПредложений(СтруктураИзменений, ОбъектCMLКаталог, ОбъектCMLПакетПредложений, СтрокаТаблицыКаталогов);
		
		ЗавершитьCML(ОбъектCMLКаталог);
		ЗавершитьCML(ОбъектCMLПакетПредложений);
		
		ВыгруженоТоваров = 0;
		СтрокаТаблицыКаталогов.СтруктураРезультата.Свойство("ВыгруженоТоваров", ВыгруженоТоваров);
		
		Если ВыгруженоТоваров = 0 Тогда
			
			Попытка
			
				УдалитьФайлы(ИмяФайлаКаталога);
				УдалитьФайлы(ИмяФайлаПрайса);
			
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьКаталогПредложенияНаСайт()
	
	СтруктураПараметровСайта = ПроцедурыОбменаССайтом.ПолучитьСтруктуруПараметровДляСоединения(ЭтотОбъект);
	
	МассивПодкаталогов = Новый Массив;
	Если ВыгружатьКартинки ИЛИ ВыгружатьФайлы Тогда
		МассивПодкаталогов.Добавить(мПодкаталогФайлов);
	КонецЕсли;
	
	Успешно = HTTPВыгрузитьНаСервер(СтруктураПараметровСайта, МассивПодкаталогов, Истина, "catalog");
	
	Возврат Успешно;
	
КонецФункции

Процедура ЗаписатьАтрибутВXML(ОбъектЗаписи, ИмяАтрибута, ЗначениеАтрибута)
	
	СтрокаЗаписи = ПолучитьСтрокуЗаписиДляXML(ЗначениеАтрибута);
	
	ОбъектЗаписи.ЗаписатьАтрибут(ИмяАтрибута, СтрокаЗаписи);
	
КонецПроцедуры

Функция СформироватьCMLКаталогаПредложений(СтруктураИзменений, ОбъектCMLКаталог, ОбъектCMLПакетПредложений, ПараметрыКаталога)
	
	// Заголовок каталога
	ОбъектCMLКаталог.ЗаписатьНачалоЭлемента("Каталог");
	ЗаписатьАтрибутВXML(ОбъектCMLКаталог, "СодержитТолькоИзменения", ВыгружатьТолькоИзменения И НЕ мПринудительнаяПолнаяВыгрузка);
	
	ЗаписатьТекстовойУзел(ОбъектCMLКаталог, "Ид", ПараметрыКаталога.ИдКаталога);
	ЗаписатьТекстовойУзел(ОбъектCMLКаталог, "ИдКлассификатора", ПараметрыКаталога.ИдКаталога);
	ЗаписатьТекстовойУзел(ОбъектCMLКаталог, "Наименование", ПараметрыКаталога.Каталог);
	
	ВыгрузитьКонтрагентаДок(ОбъектCMLКаталог, мОрганизацияВладелец, , мОрганизацияВладелец.ОсновнойБанковскийСчет, "Владелец");
	
	// Заголовок пакета предложений
	ОбъектCMLПакетПредложений.ЗаписатьНачалоЭлемента("ПакетПредложений");
	ЗаписатьАтрибутВXML(ОбъектCMLПакетПредложений, "СодержитТолькоИзменения", ВыгружатьТолькоИзменения И НЕ мПринудительнаяПолнаяВыгрузка);
	ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "Ид", ПараметрыКаталога.ИдКаталога + "#");
	ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "Наименование"	   , "Пакет предложений (" + ПараметрыКаталога.Каталог + ")");
	ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "ИдКаталога"	   , ПараметрыКаталога.ИдКаталога);
	ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "ИдКлассификатора", ПараметрыКаталога.ИдКаталога);
	
	ВыгрузитьКонтрагентаДок(ОбъектCMLПакетПредложений, мОрганизацияВладелец, , мОрганизацияВладелец.ОсновнойБанковскийСчет, "Владелец");
	
	//
	
	ВыгрузитьТипыЦенВПакетПредложений(ОбъектCMLПакетПредложений);
	
	ВыборкаНоменклатуры = мРезультатЗапросаИерархияНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "");
	Всего = ВыборкаНоменклатуры.Количество();
	СтруктураВозврата = Новый Структура("ВыгруженоТоваров,ВыгруженоКартинок,ВыгруженоФайлов,ВыгруженоПредложений", 0, 0, 0, 0);
	
	Если Всего = 0 Тогда
		ОбъектCMLКаталог.ЗаписатьКонецЭлемента();
		ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	ОбъектCMLКаталог.ЗаписатьНачалоЭлемента("Товары");
	
	Пока ВыборкаНоменклатуры.Следующий()  Цикл
		
		СписокЗначенийCML = Новый СписокЗначений;
		ЗаполнитьСписокЗначенийОсновныхРеквизитовТовара(СписокЗначенийCML, ВыборкаНоменклатуры.НоменклатураСсылка);
		ЗаполнитьСписокЗначенийРеквизитовТовара(СтруктураИзменений, СписокЗначенийCML, ВыборкаНоменклатуры.НоменклатураСсылка, СтруктураВозврата.ВыгруженоКартинок, СтруктураВозврата.ВыгруженоФайлов);
		СтруктураВозврата.ВыгруженоТоваров = СтруктураВозврата.ВыгруженоТоваров + 1;
		
		ОбъектCMLКаталог.ЗаписатьНачалоЭлемента("Товар");
		ЗаписатьCMLПоСпискуЗначений(ОбъектCMLКаталог, СписокЗначенийCML);
		ОбъектCMLКаталог.ЗаписатьКонецЭлемента();	
		
		#Если Клиент Тогда
			
		Если  СтруктураВозврата.ВыгруженоТоваров % 100 = 0 Тогда
			
			ОтобразитьСостояние("Каталог """ + ПараметрыКаталога.Каталог + """: Выгружено объектов каталога товаров: " +  СтруктураВозврата.ВыгруженоТоваров + " из " + Всего + ". Выгружается: " + ВыборкаНоменклатуры.НоменклатураСсылка);
			
		КонецЕсли;
		
		#КонецЕсли
		
	КонецЦикла;
	
	ОбъектCMLКаталог.ЗаписатьКонецЭлемента();
	// Завершаем каталог
	ОбъектCMLКаталог.ЗаписатьКонецЭлемента();
	
	//
	
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ВремЗначенияСвойствНоменклатуры");
	Запрос.МенеджерВременныхТаблиц = мМВТ;
	Запрос.Выполнить();
	Запрос.Текст = "УНИЧТОЖИТЬ ВремФайлы";
	Запрос.Выполнить();
	
	//
	
	Если ВыгружатьВсеХарактеристики Тогда
		ВремТаблица = "ВремНоменклатураСХарактеристиками";
	Иначе
		ВремТаблица = "ВремЦены";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВремТаб.НоменклатураСсылка,
	               |	ВремТаб.ХарактеристикаСсылка,
	               |	ВремТаб.Остаток
	               |ИЗ
	               |	&ВремТаблица КАК ВремТаб";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВремТаблица", ВремТаблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
		Возврат СтруктураВозврата;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Всего = Выборка.Количество();
	ОбъектCMLПакетПредложений.ЗаписатьНачалоЭлемента("Предложения");
	
	Пока Выборка.Следующий() Цикл
		
		СписокЗначенийCML = Новый СписокЗначений;
		СтруктураВозврата.ВыгруженоПредложений = СтруктураВозврата.ВыгруженоПредложений + 1;
		
		#Если Клиент Тогда
		Если СтруктураВозврата.ВыгруженоПредложений % 100 = 0 Тогда
			
			ОтобразитьСостояние("Каталог """ + ПараметрыКаталога.Каталог + """: Выгружено объектов пакета предложений: " + СтруктураВозврата.ВыгруженоПредложений + " из " + Всего + ". Выгружается: " + Выборка.НоменклатураСсылка + " " + Выборка.ХарактеристикаСсылка);
			
		КонецЕсли;
		#КонецЕсли
	
		ЗаполнитьСписокЗначенийРеквизитовТовараДляПакетаПредложений(СписокЗначенийCML, Выборка.НоменклатураСсылка, Выборка.ХарактеристикаСсылка);
		ЗаполнитьСписокЗначенийПредложения(СписокЗначенийCML, Выборка.НоменклатураСсылка, Выборка.ХарактеристикаСсылка, Выборка.Остаток);
		
		ОбъектCMLПакетПредложений.ЗаписатьНачалоЭлемента("Предложение");
		ЗаписатьCMLПоСпискуЗначений(ОбъектCMLПакетПредложений, СписокЗначенийCML);
		ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
	
	// Завершаем пакет предложений
	
	ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ВыгрузитьТипыЦенВПакетПредложений(ОбъектCMLПакетПредложений)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Цены.ТипЦенСсылка
	                      |ИЗ
	                      |	ВремЦены КАК Цены");
	Запрос.МенеджерВременныхТаблиц = мМВТ;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбъектCMLПакетПредложений.ЗаписатьНачалоЭлемента("ТипыЦен");
	Пока Выборка.Следующий() Цикл
		
		ОбъектCMLПакетПредложений.ЗаписатьНачалоЭлемента("ТипЦены");
		Ид = Строка(Выборка.ТипЦенСсылка.УникальныйИдентификатор());
		ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "Ид", Ид);
		ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "Наименование", ФорматНаименованияДляCML(Выборка.ТипЦенСсылка.Наименование));
		ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "Валюта",       ФорматВалютыДляCML(Выборка.ТипЦенСсылка.ВалютаЦены));
		
		ОбъектCMLПакетПредложений.ЗаписатьНачалоЭлемента("Налог");
		ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "Наименование", НаименованиеНалога);
		ЗаписатьТекстовойУзел(ОбъектCMLПакетПредложений, "УчтеноВСумме", Выборка.ТипЦенСсылка.ЦенаВключаетНДС);
		
		ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
		ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	ОбъектCMLПакетПредложений.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ПодготовитьЗапросы();
	
	//
	
	мЗапросПоКартинкам = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Изображения.ХранилищеСсылка
		|ИЗ
		|	ВремФайлы КАК Изображения
		|ГДЕ
		|	Изображения.НоменклатураСсылка = &НоменклатураСсылка
		|	И Изображения.ХранилищеСсылка.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)
		|	И НЕ Изображения.ХранилищеСсылка = ЗНАЧЕНИЕ(Справочник.ХранилищеДополнительнойИнформации.ПустаяСсылка)");
		
	мЗапросПоКартинкам.МенеджерВременныхТаблиц = мМВТ;
	
	//
	
	мЗапросПоФайлам = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Файлы.ХранилищеСсылка
		|ИЗ
		|	ВремФайлы КАК Файлы
		|ГДЕ
		|	Файлы.НоменклатураСсылка = &НоменклатураСсылка
		|	И Файлы.ХранилищеСсылка.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Файл)
		|	И НЕ Файлы.ХранилищеСсылка = ЗНАЧЕНИЕ(Справочник.ХранилищеДополнительнойИнформации.ПустаяСсылка)");
		
	мЗапросПоФайлам.МенеджерВременныхТаблиц = мМВТ;

	//
	
	мЗапросПоЗначениямСвойствХарактеристик = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ *
		|ИЗ
		|	ВремЗначенияСвойствХарактеристик КАК ВремЗначенияСвойствХарактеристик
		|ГДЕ
		|	ВремЗначенияСвойствХарактеристик.ХарактеристикаСсылка = &ХарактеристикаСсылка
		|");
	
	мЗапросПоЗначениямСвойствХарактеристик.МенеджерВременныхТаблиц = мМВТ;
	
	//
	
	мЗапросПоСвойствамНоменклатуры = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияСвойствНоменклатуры.СвойствоНоменклатурыСсылка,
		|	ЗначенияСвойствНоменклатуры.Значение
		|ИЗ
		|	ВремЗначенияСвойствНоменклатуры КАК ЗначенияСвойствНоменклатуры
		|ГДЕ
		|	ЗначенияСвойствНоменклатуры.НоменклатураСсылка = &НоменклатураСсылка");
	
	мЗапросПоСвойствамНоменклатуры.МенеджерВременныхТаблиц = мМВТ;
	
	//
	
	мЗапросПоЦенам = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ *
		|ИЗ
		|	ВремЦены КАК ВремЦены
		|ГДЕ
		|	ВремЦены.НоменклатураСсылка = &НоменклатураСсылка
		|	И ВремЦены.ХарактеристикаСсылка = &ХарактеристикаСсылка");
		
	мЗапросПоЦенам.МенеджерВременныхТаблиц = мМВТ;
	
	//

	мЗапросПоСкидкам = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВремСкидки.Условие,
		|	ВремСкидки.ЗначениеУсловия,
		|	ВремСкидки.ПроцентСкидкиНаценки,
		|	ВремСкидки.ОграничениеСкидкиНаценки,
		|	ВремСкидки.ДатаОкончания,
		|	ВремСкидки.ПолучательСкидки,
		|	ВремСкидки.Валюта,
		|	ВремСкидки.Регистратор КАК Регистратор
		|ИЗ
		|	ВремСкидки КАК ВремСкидки
		|ГДЕ
		|	ВремСкидки.НоменклатураСсылка = &НоменклатураСсылка
		|	И ВремСкидки.ХарактеристикаСсылка = &ХарактеристикаСсылка");
	
	мЗапросПоСкидкам.МенеджерВременныхТаблиц = мМВТ;
	
	//
	
	мЗапросПоВремениДействияСкидок = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВремСкидкиВремяДействия.ДеньНедели,
		|	ВремСкидкиВремяДействия.ВремяНачала,
		|	ВремСкидкиВремяДействия.ВремяОкончания
		|ИЗ
		|	ВремСкидкиВремяДействия КАК ВремСкидкиВремяДействия
		|ГДЕ
		|	ВремСкидкиВремяДействия.Регистратор = &Регистратор
		|	И ВремСкидкиВремяДействия.ДеньНедели ЕСТЬ НЕ NULL ");
	
	мЗапросПоВремениДействияСкидок.МенеджерВременныхТаблиц = мМВТ;
	
	//
	
	мЗапросПоВариантамЗначенияСвойства = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияСвойствНоменклатуры.Значение
		|ИЗ
		|	ВремЗначенияСвойствНоменклатуры КАК ЗначенияСвойствНоменклатуры
		|ГДЕ
		|	ЗначенияСвойствНоменклатуры.СвойствоНоменклатурыСсылка = &СвойствоНоменклатуры");
	
	мЗапросПоВариантамЗначенияСвойства.МенеджерВременныхТаблиц = мМВТ;
	
	//
	
	мЗапросПоШК = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихКоды.Штрихкод
		|ИЗ
		|	ВремШтрихКоды КАК ШтрихКоды
		|ГДЕ
		|	ШтрихКоды.НоменклатураСсылка = &НоменклатураСсылка
		|	И ШтрихКоды.ХарактеристикаСсылка = &ХарактеристикаСсылка");
		
	мЗапросПоШК.МенеджерВременныхТаблиц = мМВТ;
	
	//
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ОБМЕНОМ ЗАКЗАМИ


Функция ВыполнитьОбменЗаказами(СтруктураИзменений)
	
	Если НЕ ОпределитьМожноВыгружатьЗаказы() Тогда
		
		СообщитьПользователю("Выгрузка заказов не произведена.", Истина);
		Возврат Истина;
		
	КонецЕсли;
	
	мМассивЗагруженныхДокументов = Новый Массив();
	КоличествоОбработанныхДокументовНаЗагрузке = 0;
	КоличествоОбработанныхДокументовНаВыгрузке = 0;
	
	Если ВыгружатьНаСайт Тогда
		
		HTTPОбменАдресСкрипта = НачалоАдресаСкрипта;
		СтруктураПараметровСайта = ПроцедурыОбменаССайтом.ПолучитьСтруктуруПараметровДляСоединения(ЭтотОбъект);
		
		мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
		
		УспешноЗагружено = HTTPЗагрузитьССервера(СтруктураПараметровСайта, "sale", КоличествоОбработанныхДокументовНаЗагрузке);
		
		мСтруктураИнформацииИсторииОбмена.РезультатПоследнейЗагрузки = УспешноЗагружено;
		мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
		
		УспешноВыгружено = ВыгрузитьЗаказыНаСайт(СтруктураИзменений, СтруктураПараметровСайта, КоличествоОбработанныхДокументовНаВыгрузке);
		
	Иначе
		
		УспешноЗагружено = ЗагрузитьЗаказыИзФайла(КоличествоОбработанныхДокументовНаЗагрузке);
		УспешноВыгружено = ВыгрузитьЗаказыВФайл(СтруктураИзменений, СтруктураПараметровСайта, КоличествоОбработанныхДокументовНаВыгрузке);
		
	КонецЕсли;
	
	Успешно = УспешноЗагружено И УспешноВыгружено;
	
	Если Успешно Тогда
		
		Если КоличествоОбработанныхДокументовНаЗагрузке + КоличествоОбработанныхДокументовНаВыгрузке > 0 Тогда
			СообщитьПользователю("Обмен заказами успешно завершен", Истина);
		КонецЕсли;
		
	Иначе
		СообщитьПользователю("Обмен заказами завершен с ошибками!!!", Истина);
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ВыгрузитьЗаказыНаСайт(СтруктураИзменений, СтруктураПараметровСайта, КоличествоОбработанныхДокументовНаВыгрузке)
	
	КоличествоОбработанныхДокументовНаВыгрузке = 0;
	Успешно = ВыгрузитьЗаказыВФайл(СтруктураИзменений, СтруктураПараметровСайта, КоличествоОбработанныхДокументовНаВыгрузке);
	
	Если Не Успешно Тогда
		Возврат Ложь;
	ИначеЕсли КоличествоОбработанныхДокументовНаВыгрузке = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Успешно = HTTPВыгрузитьНаСервер(СтруктураПараметровСайта, , , "sale");
	
	ОчиститьКаталогНаДиске();
	
	Возврат Успешно;
	
КонецФункции

Функция ЗагрузитьЗаказыИзФайла(КоличествоОбработанныхДокументов)
	
	КоличествоОбработанныхДокументов = 0;
	
	Файл = Новый Файл(ФайлЗагрузки);
	Если НЕ Файл.Существует()
		ИЛИ Файл.ЭтоКаталог() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
	
	ФайлCML = Новый ТекстовыйДокумент;
	ФайлCML.Прочитать(ФайлЗагрузки);
	СтрокаCML = ФайлCML.ПолучитьТекст();
	ДеревоДокументов = РазобратьCML(СтрокаCML);
	
	Если ДеревоДокументов = Неопределено Тогда
		
		мСтруктураИнформацииИсторииОбмена.РезультатПоследнейЗагрузки = Истина;
		мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
		Возврат Истина;
		
	КонецЕсли;
	
	Успешно = ОбработатьДокументы(ДеревоДокументов, КоличествоОбработанныхДокументов);
	Если НЕ Успешно Тогда 
		СообщитьОбОшибкеОбмена("Не удалось обработать документы, загруженные из файла.", Ложь);
	КонецЕсли;
	
	мСтруктураИнформацииИсторииОбмена.РезультатПоследнейЗагрузки = Успешно;
	мСтруктураИнформацииИсторииОбмена.ДатаПоследнейЗагрузки = Текущаядата();
	
	Возврат Успешно;
	
КонецФункции

Функция ВыгрузитьЗаказыВФайл(СтруктураИзменений, СтруктураПараметровСайта, КоличествоВыгруженныхЗаказов = 0)
	
	Успешно = Истина;
	КоличествоВыгруженныхЗаказов = 0;
	
	МассивИзменений   = Новый Массив;
	
	Если ВыгружатьТолькоИзменения И НЕ мПринудительнаяПолнаяВыгрузка Тогда
		
		МассивИзменений = СтруктураИзменений.Заказы;
		
		// из этого массива нужно удалить все только что загруженные заказы
		Для Каждого Эл Из мМассивЗагруженныхДокументов Цикл
			
			ИндексЭлемента = МассивИзменений.Найти(Эл);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивИзменений.Удалить(ИндексЭлемента);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивИзменений.Количество() = 0 Тогда
			
			СообщитьПользователю("Изменения заказов не зарегистрированы. Выгрузка заказов не произведена.", Истина); 
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектCMLСтрока   = "";
	ТаблицаДокументов = СформироватьCMLСРанееЗагруженнымиЗаказами(ОбъектCMLСтрока, МассивИзменений);
	
	КоличествоВыгруженныхЗаказов = ТаблицаДокументов.Количество();
	
	Если КоличествоВыгруженныхЗаказов = 0 Тогда
		
		СообщитьПользователю("Не выгружен ни один заказ.", Истина);
		Возврат Успешно;
		
	КонецЕсли;
	
	ИмяФайлаОбмена = "1cbitrix-" + Строка(Новый УникальныйИдентификатор) + ".xml";
	ПолноеИмяФайлаОбмена = мКаталогНаДиске + "\" + ИмяФайлаОбмена;
	
	ФайлCMLНаДиске = Новый ТекстовыйДокумент;
	ФайлCMLНаДиске.УстановитьТекст(ОбъектCMLСтрока);
	
	Попытка
		ФайлCMLНаДиске.Записать(ПолноеИмяФайлаОбмена, "UTF-8");
	Исключение
		СообщитьОбИсключительнойОшибке(Истина, "Не удалось записать CML файл на диск: " + ПолноеИмяФайлаОбмена + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	СообщитьПользователю("Выгружено заказов: " + ТаблицаДокументов.Количество(), Истина);
	Возврат Истина;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ПРОФИЛЯМИ (НАСТРОЙКАМИ)


Функция ОпределитьМожноВыгрузитьТовары()
	
	ЕстьКаталогВыгрузки   = ЗначениеЗаполнено(КаталогВыгрузки);
	ЕстьСайт			  = ЗначениеЗаполнено(HTTPОбменСервер);
	
	Если ВыгружатьНаСайт Тогда
		Возврат ЕстьСайт;
	Иначе
		Возврат ЕстьКаталогВыгрузки;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМожноВыгружатьЗаказы()
	
	ЕстьФайлЗагрузки 			= ЗначениеЗаполнено(ФайлЗагрузки);
	ЕстьСайт			  		= ЗначениеЗаполнено(HTTPОбменСервер);
	
	ЕстьОрганизация  			= ЗначениеЗаполнено(Организация);
	ЕстьПараметрыИдентификации  = ЗначениеЗаполнено(СпособИдентификацииКонтрагентов);
	ЕстьЕдиницаИзмерения		= ЗначениеЗаполнено(ЕдиницаИзмеренияНовойНоменклатуры);
	
	Если ВыгружатьНаСайт Тогда
		Возврат ЕстьСайт И ЕстьОрганизация И ЕстьПараметрыИдентификации И ЕстьЕдиницаИзмерения;
	Иначе
		Возврат ЕстьФайлЗагрузки;
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ФАЙЛОВ


Функция РаспаковатьZIPАрхив(СтрокаZIP)
	
	СтрокаСодержимого = "ZIP_ERROR";
	
	ИмяФайла    = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	СоздатьКаталог(ИмяКаталога);
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	Попытка
		СтрокаВФайл.Записать(ИмяФайла);
	Исключение
	КонецПопытки;
	
	ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
	ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
	ЧтениеZIP.Закрыть();
	
	РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
	
	Если РаспакованныеФайлы.Количество() = 1 Тогда
		СтрокаИзФайла 	  = Новый ТекстовыйДокумент;
		СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя);
		СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
	Исключение
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции

Функция РазделитьФайлыНаФрагменты(СписокФайлов, ОграничениеРазмераФрагмента)
	
	НовыйСписокФайлов = Новый СписокЗначений;
	Для Каждого ТекФайл Из СписокФайлов цикл
		
		ФайлНаДиске = Новый Файл(ТекФайл.Значение);
		Если ФайлНаДиске.Размер() > ОграничениеРазмераФрагмента Тогда
			МассивФрагментов = РазделитьФайл(ФайлНаДиске.ПолноеИмя, ОграничениеРазмераФрагмента);
			Для Каждого НовыйФайл Из МассивФрагментов Цикл
				НовыйСписокФайлов.Добавить(НовыйФайл, ТекФайл.Представление);
			КонецЦикла;
			УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
		Иначе
			НовыйСписокФайлов.Добавить(ТекФайл.Значение, ТекФайл.Представление);
		КонецЕсли;
		
	КонецЦикла;
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПодготовитьZIPАрхивы(СписокФайлов)
	
	ПолноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьАрхива		 = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	СоздатьКаталог(мКаталогНаДиске);
	
	ЗаписьАрхива.Добавить(мКаталогНаДиске + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ЗаписьАрхива.Записать();
	
	НовыйСписокФайлов = Новый СписокЗначений;
	НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ПолучитьИмяФайла(ПолноеИмяФайлаАрхива));
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПолучитьИмяФайла(ПолноеИмяФайла)
	
	ИмяФайла = "";
	
	ПромТекст = СтрЗаменить(ПолноеИмяФайла, "/", "\");
	ПромТекст = СтрЗаменить(ПолноеИмяФайла, "\", Символы.ПС);
	
	КоличествоЭлементов = СтрЧислоСтрок(ПромТекст);
	Для Счетчик = 1 По КоличествоЭлементов Цикл
		ИмяФайла = СтрПолучитьСтроку(ПромТекст, Счетчик);
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПодготовитьИмяФайлаДляСервера(ФайлОбъект)
	
	ПолноеИмяФайлаДляСервера = "";
	
	Если Найти(ФайлОбъект.Имя, ".xml") > 0 Тогда
		ПолноеИмяФайлаДляСервера = ФайлОбъект.Имя;
	Иначе
		//у картинки надо оставить 2 папки и развернуть слэши
		ПолноеИмяФайлаДляСервера = ФайлОбъект.ПолноеИмя;
		ПутьДляУдаления 		 = мКаталогНаДиске + "\";
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
	КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = УдалитьДополнительныеРасширенияФайла(ПолноеИмяФайлаДляСервера);
	
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции

Функция УдалитьДополнительныеРасширенияФайла(ИсходноеИмяФайла)
	
	ПозицияТочки 			  = Найти(ИсходноеИмяФайла, ".");
	ИмяФайла    			  = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	ПозицияТочки 			  = Найти(ПраваяЧастьИсходногоИмени, ".");
	Расширение 				  = ПраваяЧастьИсходногоИмени;
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);
	КонецЕсли;
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции

Функция ПолучитьСписокФайловДляОтправки(МассивПодкаталогов);
	
	СписокФайлов = Новый СписокЗначений;
	Маска = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(мКаталогНаДиске, Маска);
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			
			ФайлыВПодкаталоге = НайтиФайлы(мКаталогНаДиске + "\" + Подкаталог, Маска);
			Для Каждого ТекФайл Из ФайлыВПодкаталоге Цикл
				
				Если ТекФайл.ЭтоКаталог() Тогда
					
					ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, Маска);
					Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
						
						Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда
							ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					ВсеФайлыДляВыгрузки.Добавить(ТекФайл);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ВсеФайлыДляВыгрузки цикл
		
		Если НЕ ТекФайл.ЭтоКаталог() Тогда
			ПолноеИмяФайлаДляСервера = ПодготовитьИмяФайлаДляСервера(ТекФайл);
			СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОПИСАНИЯ И ВЫВОДА ОШИБОК И СООБЩЕНИЙ


Функция ПолучитьСтруктуруИнформацииДляИстории()
	
	СтруктураДляИстории = Новый Структура("ДатаПоследнейЗагрузки,ДатаПоследнейВыгрузки,ДатаНачалаПоследнейЗагрузки,
		|ДатаНачалаПоследнейВыгрузки,РезультатПоследнейЗагрузки,РезультатПоследнейВыгрузки,
		|КомментарийКЗагрузкеДанных,КомментарийКВыгрузкеДанных");
		
	СтруктураДляИстории.КомментарийКЗагрузкеДанных = "";
	СтруктураДляИстории.КомментарийКВыгрузкеДанных = "";
	
	Возврат СтруктураДляИстории;
	
КонецФункции

Процедура ДобавитьТехническуюИнформацияВСообщение(СокращенноеСообщение, СообщениеСТехИнформацией)
	
	Если СокращенноеСообщение = СообщениеСТехИнформацией Тогда
		Возврат;
	КонецЕсли;
	
	СокращенноеСообщение = СокращенноеСообщение + Символы.ПС + Символы.ПС + "Техническая информация:" + Символы.ПС + СообщениеСТехИнформацией;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВПротоколОбмена(СтруктураИнформации)
	
	ДатаПоследнегоОбмена = ТекущаяДата();
	
	НаборЗаписейИстории = РегистрыСведений.ИсторияОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписейИстории.Отбор.УзелИнформационнойБазы.Установить(НастройкаСсылка);
	НаборЗаписейИстории.Отбор.Период.Установить(ДатаПоследнегоОбмена);
	
	СтрокаИстории = НаборЗаписейИстории.Добавить();
	
	СтрокаИстории.Период = ДатаПоследнегоОбмена;
	СтрокаИстории.УзелИнформационнойБазы = НастройкаСсылка;
	
	Если ЗначениеЗаполнено(СтруктураИнформации.ДатаПоследнейЗагрузки) Тогда
		
		СтрокаИстории.ДатаПоследнейЗагрузки = СтруктураИнформации.ДатаПоследнейЗагрузки;
		СтрокаИстории.ДатаНачалаПоследнейЗагрузки = СтруктураИнформации.ДатаНачалаПоследнейЗагрузки;
		СтрокаИстории.РезультатПоследнейЗагрузки = СтруктураИнформации.РезультатПоследнейЗагрузки;
		
		СтрокаИстории.КомментарийКЗагрузкеДанных = ОбщегоНазначения.СформироватьТекстСообщения(СокрЛП(СтруктураИнформации.КомментарийКЗагрузкеДанных));
		
		Если Не ПустаяСтрока(СтрокаИстории.КомментарийКЗагрузкеДанных)
			И Не ПустаяСтрока(СтруктураИнформации.КомментарийКЗагрузкеДанных) Тогда
			
			ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКЗагрузкеДанных, СтруктураИнформации.КомментарийКЗагрузкеДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураИнформации.ДатаПоследнейВыгрузки) Тогда
		
		СтрокаИстории.ДатаПоследнейВыгрузки = СтруктураИнформации.ДатаПоследнейВыгрузки;	
		СтрокаИстории.ДатаНачалаПоследнейВыгрузки = СтруктураИнформации.ДатаНачалаПоследнейВыгрузки;
		СтрокаИстории.РезультатПоследнейВыгрузки = СтруктураИнформации.РезультатПоследнейВыгрузки;
		
		СтрокаИстории.КомментарийКВыгрузкеДанных = ОбщегоНазначения.СформироватьТекстСообщения(СокрЛП(СтруктураИнформации.КомментарийКВыгрузкеДанных));
		
		Если Не ПустаяСтрока(СтрокаИстории.КомментарийКВыгрузкеДанных)
			И Не ПустаяСтрока(СтруктураИнформации.КомментарийКВыгрузкеДанных) Тогда
			
			ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКВыгрузкеДанных, СтруктураИнформации.КомментарийКВыгрузкеДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		НаборЗаписейИстории.Записать();
		
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке("Возникла ошибка при записи истории обмена данными: " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтобразитьСостояние(ТекстСообщения)
	#Если Клиент Тогда
	Состояние(ТекстСообщения);
	#КонецЕсли
КонецПроцедуры

Процедура ДобавитьТекстКСообщениюДляПользователя(ТекущееСообщение, ДобавляемоеСообщение)
	
	ТекущееСообщение = СокрЛП(ТекущееСообщение + Символы.ПС + ДобавляемоеСообщение);
	
КонецПроцедуры

Процедура СообщитьПользователю(ТекстСообщения, ИнформацияОВыгрузке, Статус = Неопределено)
	
	Если ИнформацияОВыгрузке Тогда
		ДобавитьТекстКСообщениюДляПользователя(мСтруктураИнформацииИсторииОбмена.КомментарийКВыгрузкеДанных, ТекстСообщения);
	Иначе
		ДобавитьТекстКСообщениюДляПользователя(мСтруктураИнформацииИсторииОбмена.КомментарийКЗагрузкеДанных, ТекстСообщения);
	КонецЕсли;
	
	#Если Клиент Тогда
	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Обычное;
	КонецЕсли;
	Сообщить(ТекстСообщения, Статус);
	#КонецЕсли
	
КонецПроцедуры

Процедура СообщитьРасширенноеОписаниеОтветаСервера(ОтветСервера)
	
	ТекстСообщения = "Ответ сервера:" + Символы.ПС;
	
	Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
		Для ТекСтрока = 2 по СтрЧислоСтрок(ОтветСервера) Цикл
			ТекстСообщения = ТекстСообщения + СтрПолучитьСтроку(ОтветСервера, ТекСтрока) + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	СообщитьПользователю(ТекстСообщения, Истина, СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеОбмена(ТекстСообщения, ИнформацияОВыгрузке)
	
	ТекстСообщения = ТекстСообщения + Символы.ПС + "Обмен не выполнен";
	СообщитьПользователю(ТекстСообщения, ИнформацияОВыгрузке, СтатусСообщения.Важное);
	
КонецПроцедуры

Процедура СообщитьОбИсключительнойОшибке(ИнформацияОВыгрузке, ТекстНачалаСообщения =  "", ТекстОкончанияСообщения = "")
	
	РасширеннаяИнформацияОбОшибке = ИнформацияОбОшибке();
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(ТекстНачалаСообщения) Тогда
		ТекстСообщения = ТекстНачалаСообщения + Символы.ПС;
	КонецЕсли;	
	ТекстСообщения = ТекстСообщения
				   + "Произошла ошибка: "
				   + РасширеннаяИнформацияОбОшибке.Описание;
	
	Если НЕ Строка(РасширеннаяИнформацияОбОшибке.Причина) = "ИнформацияОбОшибке" Тогда
		ТекстСообщения = ТекстСообщения
					   + ". По причине: "
					   + РасширеннаяИнформацияОбОшибке.Причина;
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОкончанияСообщения;
	
	СообщитьПользователю(ТекстСообщения, ИнформацияОВыгрузке, СтатусСообщения.Важное);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ЗАГРУЖЕННЫХ ДАННЫХ


Функция ОбработатьНачалоЭлемента(ОбъектCML, Знач ИмяЭлемента, ДеревоДокументов);
	
	Успешно = Истина;
	
	ТекущаяСтрокаДерева  	  = Неопределено;
	ТекущаяСтрокаТоваровУслуг = Неопределено;
	
	КоличествоДокументов 	  = ДеревоДокументов.Строки.Количество();
	Если КоличествоДокументов > 0 Тогда
		
		ТекущаяСтрокаДерева    = ДеревоДокументов.Строки[КоличествоДокументов - 1];
		КоличествоТоваровУслуг = ТекущаяСтрокаДерева.Строки.Количество();
		
		Если КоличествоТоваровУслуг > 0 Тогда
			ТекущаяСтрокаТоваровУслуг = ТекущаяСтрокаДерева.Строки[КоличествоТоваровУслуг - 1];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяЭлемента = "Документ" Тогда
		
		НовыйДокумент 				   = Документы.ЗаказПокупателя.СоздатьДокумент();
		НовыйДокумент.УчитыватьНДС	   = Истина;
		НовыйДокумент.СуммаВключаетНДС = Истина;
		НовСтрокаДерева 			   = ДеревоДокументов.Строки.Добавить();
		НовСтрокаДерева.ДокументОбъект = НовыйДокумент;
		НовСтрокаДерева.СтавкаНДС 	   = Перечисления.СтавкиНДС.БезНДС;
		НовСтрокаДерева.СтруктураДанныхКонтрагента = Новый Структура;
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент" Тогда
		
		ДеревоАдресов = Новый ДеревоЗначений;
		ДеревоАдресов.Колонки.Добавить("ВидАдреса");
		ДеревоАдресов.Колонки.Добавить("Представление");
		ДеревоАдресов.Колонки.Добавить("Комментарий");
		ДеревоАдресов.Колонки.Добавить("ПолеТип");
		ДеревоАдресов.Колонки.Добавить("ПолеЗначение");
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
		
		ТаблицаКонтактов = Новый ТаблицаЗначений;
		ТаблицаКонтактов.Колонки.Добавить("КонтактТип");
		ТаблицаКонтактов.Колонки.Добавить("КонтактЗначение");
		ТаблицаКонтактов.Колонки.Добавить("КонтактКомментарий");
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаКонтактов", ТаблицаКонтактов);
		
		ТаблицаКонтактныхЛиц = Новый ТаблицаЗначений;
		ТаблицаКонтактныхЛиц.Колонки.Добавить("Наименование");
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаКонтактныхЛиц", ТаблицаКонтактныхЛиц);
		
		ТаблицаБанковскихРеквизитов = Новый ТаблицаЗначений;
		ТаблицаБанковскихРеквизитов.Колонки.Добавить("НомерСчета");
		ТаблицаБанковскихРеквизитов.Колонки.Добавить("Комментарий");
		ТаблицаБанковскихРеквизитов.Колонки.Добавить("Банк");
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
		
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.УдостоверениеЛичности" Тогда
	
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.АдресРегистрации" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
		НовСтрокаДерева	= ДеревоАдресов.Строки.Добавить();
		НовСтрокаДерева.ВидАдреса = "АдресРегистрации";
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.АдресРегистрации.АдресноеПоле" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
		СтрокаДерева 	= ДеревоАдресов.Строки.Найти("АдресРегистрации", "ВидАдреса");
		НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
		
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.МестоРаботы.Организация.Контрагент" Тогда
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.МестоРаботы" Тогда
	
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ЮридическийАдрес" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
		НовСтрокаДерева	= ДеревоАдресов.Строки.Добавить();
		НовСтрокаДерева.ВидАдреса = "ЮридическийАдрес";
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ЮридическийАдрес.АдресноеПоле" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
		СтрокаДерева 	= ДеревоАдресов.Строки.Найти("ЮридическийАдрес", "ВидАдреса");
		НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
		НоваяСтрокаТаблицыБанковскихРеквизитов = ТаблицаБанковскихРеквизитов.Добавить();
		
		НоваяСтрокаТаблицыБанковскихРеквизитов.Банк = Новый Структура("
			|	СчетКорреспондентский,
			|	Наименование,
			|	Адрес,
			|	БИК,
			|	SWIFT");
			
		НоваяСтрокаТаблицыБанковскихРеквизитов.Банк.Адрес = Новый Структура;
		НоваяСтрокаТаблицыБанковскихРеквизитов.Банк.Адрес.Вставить("Представление");
		ТаблицаАдресныхПолей = Новый ТаблицаЗначений;
		ТаблицаАдресныхПолей.Колонки.Добавить("ПолеТип");
		ТаблицаАдресныхПолей.Колонки.Добавить("ПолеЗначение");
		НоваяСтрокаТаблицыБанковскихРеквизитов.Банк.Адрес.Вставить("ТаблицаАдресныхПолей", ТаблицаАдресныхПолей);
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
		
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк" Тогда
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.Адрес" Тогда
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.Адрес.АдресноеПоле" Тогда
	
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк" Тогда
	//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.Адрес" Тогда
	
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.Адрес.АдресноеПоле" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
		СтрокаТаблицыБанковскихРеквизитов = ТаблицаБанковскихРеквизитов[ТаблицаБанковскихРеквизитов.Количество() - 1];
		СтруктураДанныхБанка = СтрокаТаблицыБанковскихРеквизитов.Банк;
		СтруктураДанныхБанка.Адрес.ТаблицаАдресныхПолей.Добавить();
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Адрес" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
		НовСтрокаДерева	= ДеревоАдресов.Строки.Добавить();
		НовСтрокаДерева.ВидАдреса = "Адрес";
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Адрес.АдресноеПоле" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
		СтрокаДерева 	= ДеревоАдресов.Строки.Найти("Адрес", "ВидАдреса");
		НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Контакты.Контакт" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаКонтактов", ТаблицаКонтактов);
		ТаблицаКонтактов.Добавить();
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаКонтактов", ТаблицаКонтактов);
		
	ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Представители.Представитель.Контрагент" Тогда
		
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаКонтактныхЛиц", ТаблицаКонтактныхЛиц);
		ТаблицаКонтактныхЛиц.Добавить();
		ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаКонтактныхЛиц", ТаблицаКонтактныхЛиц);
		
	//ИначеЕсли ИмяЭлемента = "Документ.Налоги.Налог" Тогда
	//ИначеЕсли ИмяЭлемента = "Документ.Скидки.Скидка" Тогда
	//ИначеЕсли ИмяЭлемента = "Документ.ДопРасходы.ДопРасход" Тогда
		
	ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар" Тогда
		
		НовСтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.БазоваяЕдиница" Тогда
		
		Пока ОбъектCML.ПрочитатьАтрибут() Цикл
			Если ОбъектCML.Имя = "Код" Тогда
				КодБазовойЕдиницы = ОбъектCML.Значение;
				ТекущаяСтрокаТоваровУслуг.ТоварУслугаБазоваяЕдиницаКод = КодБазовойЕдиницы;
				Прервать;
			КонецЕсли;
		КонецЦикла
		
	ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.ЗначенияРеквизитов.ЗначениеРеквизита" Тогда
		
		ТекущаяСтрокаТоваровУслуг.Строки.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.Скидки.Скидка" Тогда
		
		ТекущаяСтрокаТоваровУслуг.Строки.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Документ.ЗначенияРеквизитов.ЗначениеРеквизита" Тогда
		
		НовСтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ОбработатьЗначениеЭлемента(Знач ИмяЭлемента, Знач ЗначениеЭлемента, ДеревоДокументов);
	
	Успешно 			 		= Истина;
	КоличествоДокументов 		= ДеревоДокументов.Строки.Количество();
	ИмяТекущегоЭлемента  		= ПолучитьИмяЭлементаИзПоследовательности(ИмяЭлемента);
	ДеревоАдресов		 		= Неопределено;
	ТаблицаКонтактов		    = Неопределено;
	ТаблицаКонтактныхЛиц 		= Неопределено;
	ТаблицаБанковскихРеквизитов = НеОпределено;
	
	Если КоличествоДокументов > 0 Тогда
		
		ТекущаяСтрокаДерева       = ДеревоДокументов.Строки[КоличествоДокументов - 1];
		ТекущийДокумент 	      = ТекущаяСтрокаДерева.ДокументОбъект;
		
		ТекущаяСтрокаТоваровУслуг = Неопределено;
		ТекущаяСтрокаСкидок 	  = Неопределено;
		
		КоличествоТоваровУслуг    = ТекущаяСтрокаДерева.Строки.Количество();
		
		Если КоличествоТоваровУслуг > 0 Тогда
			
			ТекущаяСтрокаТоваровУслуг = ТекущаяСтрокаДерева.Строки[КоличествоТоваровУслуг - 1];
			
			КоличествоСкидок    	  = ТекущаяСтрокаТоваровУслуг.Строки.Количество();
			
			Если КоличествоСкидок > 0 Тогда
				ТекущаяСтрокаСкидок = ТекущаяСтрокаТоваровУслуг.Строки[КоличествоСкидок - 1];
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяЭлемента = "Документ.Номер" Тогда
			
			ТекущийДокумент.Организация   = Организация; 
			ТекущийДокумент.Ответственный = Ответственный;
			ТекущийДокумент.Подразделение = Подразделение;
			
			ТекущийДокумент.Комментарий   = "№ " + ЗначениеЭлемента + " " + HTTPОбменСервер;
			
			ТекущийДокумент.НомерВходящегоДокументаЭлектронногоОбмена = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.НомерВходящий = ЗначениеЭлемента;
			
			ОтобразитьСостояние("Обработка документа CML: " + ТекущаяСтрокаДерева.НомерВходящий);
			
		ИначеЕсли ИмяЭлемента = "Документ.Дата" Тогда
			
			ДатаВремя = ОбработатьДатуВремяCML(ЗначениеЭлемента);
			
			Если ЗаписыватьДокументыТекущейДатой Тогда
				ТекущийДокумент.Дата = ТекущаяДата();
			Иначе
				ТекущийДокумент.Дата = ДатаВремя;
			КонецЕсли;
			
			ТекущийДокумент.ДатаВходящегоДокументаЭлектронногоОбмена = ДатаВремя;
			
		ИначеЕсли ИмяЭлемента = "Документ.Время" Тогда
			
			Если НЕ ЗаписыватьДокументыТекущейДатой Тогда
				ТекущийДокумент.Дата = ОбработатьДатуВремяCML(ЗначениеЭлемента, ТекущийДокумент.Дата);
			КонецЕсли;	
			
			ТекущийДокумент.ДатаВходящегоДокументаЭлектронногоОбмена = ОбработатьДатуВремяCML(ЗначениеЭлемента, ТекущийДокумент.ДатаВходящегоДокументаЭлектронногоОбмена);
			
		ИначеЕсли ИмяЭлемента = "Документ.ХозОперация" Тогда
			
			Если НЕ ЗначениеЭлемента = "Заказ товара" Тогда	
				СообщитьОбОшибкеОбмена("Ошибка в значении узла <Документ>.<ХозОперация> документа CML (" + ЗначениеЭлемента + ").", Ложь);
				Успешно = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяЭлемента = "Документ.Валюта" Тогда
			
			ТекущийДокумент.ВалютаДокумента = ОбработатьВалютуCML(ЗначениеЭлемента);
			Если НЕ ЗначениеЗаполнено(ТекущийДокумент.ВалютаДокумента) Тогда
				СообщитьОбОшибкеОбмена("Ошибка в значении узла <Документ>.<Валюта> документа CML (" + ЗначениеЭлемента + ").", Ложь);
				Успешно = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяЭлемента = "Документ.Курс" Тогда
			
			КурсCML = Число(ЗначениеЭлемента);
			ТекущийДокумент.КурсВзаиморасчетов      = КурсCML;
			ТекущийДокумент.КратностьВзаиморасчетов = 1;
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Наименование" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("Наименование", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Комментарий" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("Комментарий", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ПолноеНаименование"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.ОфициальноеНаименование" Тогда

			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("НаименованиеПолное", ЗначениеЭлемента);
			
			Если ИмяЭлемента = "Документ.Контрагенты.Контрагент.ПолноеНаименование" Тогда
				ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
			Иначе
				ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
			КонецЕсли;
			
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Обращение" Тогда
		//Не обрабатываем
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Фамилия" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("Фамилия", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Имя" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("Имя", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Отчество" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("Отчество", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ДатаРождения" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДатаРождения", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.МестоРождения" Тогда	
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("МестоРождения", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Пол" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("Пол", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ИНН" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ИНН", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.КПП" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("КПП", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.УдостоверениеЛичности.ВидДокумента"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.УдостоверениеЛичности.Серия"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.УдостоверениеЛичности.Номер"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.УдостоверениеЛичности.ДатаВыдачи"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.УдостоверениеЛичности.КемВыдан" Тогда		
			
			СохраненноеЗначение = "";
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДокументУдостоверяющийЛичность", СохраненноеЗначение);
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДокументУдостоверяющийЛичность", СохраненноеЗначение + ЗначениеЭлемента + " ");
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.АдресРегистрации.Представление"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.АдресРегистрации.Комментарий" Тогда
			  
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
			СтрокаДерева = ДеревоАдресов.Строки.Найти("АдресРегистрации", "ВидАдреса");
			СтрокаДерева[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.АдресРегистрации.АдресноеПоле.Тип"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.АдресРегистрации.АдресноеПоле.Значение" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
			СтрокаДерева = ДеревоАдресов.Строки.Найти("АдресРегистрации", "ВидАдреса");
			СтрокаАдресногоПоля = СтрокаДерева.Строки[СтрокаДерева.Строки.Количество() - 1];
			СтрокаАдресногоПоля["Поле" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
			
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.МестоРаботы.Организация.Контрагент.Ид" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.МестоРаботы.Организация.Контрагент.Наименование" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.МестоРаботы.Должность" Тогда
		
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ЮридическийАдрес.Представление"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.ЮридическийАдрес.Комментарий" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
			СтрокаДерева = ДеревоАдресов.Строки.Найти("ЮридическийАдрес", "ВидАдреса");
			СтрокаДерева[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ЮридическийАдрес.АдресноеПоле.Тип"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.ЮридическийАдрес.АдресноеПоле.Значение" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
			СтрокаДерева = ДеревоАдресов.Строки.Найти("ЮридическийАдрес", "ВидАдреса");
			СтрокаАдресногоПоля = СтрокаДерева.Строки[СтрокаДерева.Строки.Количество() - 1];
			СтрокаАдресногоПоля["Поле" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.КПП" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("КПП", ЗначениеЭлемента);

		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.ОсновнойВидДеятельности" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ОсновнойВидДеятельности", ЗначениеЭлемента);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.НомерСчета"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Комментарий" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			СтрокаТаблицы = ТаблицаБанковскихРеквизитов[ТаблицаБанковскихРеквизитов.Количество() - 1];
			СтрокаТаблицы[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.СчетКорреспондентский"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.Наименование"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.БИК"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.SWIFT" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			СтрокаТаблицы = ТаблицаБанковскихРеквизитов[ТаблицаБанковскихРеквизитов.Количество() - 1];
			СтрокаТаблицы.Банк[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.Адрес.Представление" Тогда

			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			СтрокаТаблицы = ТаблицаБанковскихРеквизитов[ТаблицаБанковскихРеквизитов.Количество() - 1];
			СтрокаТаблицы.Банк.Адрес[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			
		//ИначеЕсли  ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.Адрес.Комментарий" Тогда
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.Адрес.АдресноеПоле.Тип"	
		      ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.Банк.Адрес.АдресноеПоле.Значение" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			СтрокаТаблицы = ТаблицаБанковскихРеквизитов[ТаблицаБанковскихРеквизитов.Количество() - 1];
			СтрокаАдреса = СтрокаТаблицы.Банк.Адрес.ТаблицаАдресныхПолей[СтрокаТаблицы.Банк.Адрес.ТаблицаАдресныхПолей.Количество() - 1];
			СтрокаАдреса["Поле" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаБанковскихРеквизитов", ТаблицаБанковскихРеквизитов);
			
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.СчетКорреспондентский" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.Наименование" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.БИК" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.SWIFT" Тогда
		//
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.Адрес.Представление" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.Адрес.Комментарий" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.Адрес.АдресноеПоле.Тип" Тогда
		//ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.РасчетныеСчета.РасчетныйСчет.БанкКорреспондент.Банк.Адрес.АдресноеПоле.Значение" Тогда
		
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Адрес.Представление"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.Адрес.Комментарий" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
			СтрокаДерева = ДеревоАдресов.Строки.Найти("Адрес", "ВидАдреса");
			СтрокаДерева[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Адрес.АдресноеПоле.Тип"	
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.Адрес.АдресноеПоле.Значение" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ДеревоАдресов", ДеревоАдресов);
			СтрокаДерева = ДеревоАдресов.Строки.Найти("Адрес", "ВидАдреса");
			СтрокаАдресногоПоля = СтрокаДерева.Строки[СтрокаДерева.Строки.Количество() - 1];
			СтрокаАдресногоПоля["Поле" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ДеревоАдресов", ДеревоАдресов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Контакты.Контакт.Тип" 
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.Контакты.Контакт.Значение"
			  ИЛИ ИмяЭлемента = "Документ.Контрагенты.Контрагент.Контакты.Контакт.Комментарий" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаКонтактов", ТаблицаКонтактов);
			СтрокаТаблицы = ТаблицаКонтактов[ТаблицаКонтактов.Количество() - 1];
			СтрокаТаблицы["Контакт" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаКонтактов", ТаблицаКонтактов);
			
		ИначеЕсли ИмяЭлемента = "Документ.Контрагенты.Контрагент.Представители.Представитель.Контрагент.Наименование" Тогда
			
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Свойство("ТаблицаКонтактныхЛиц", ТаблицаКонтактныхЛиц);
			СтрокаТаблицы = ТаблицаКонтактныхЛиц[ТаблицаКонтактныхЛиц.Количество() - 1];
			СтрокаТаблицы["Наименование"] = ЗначениеЭлемента;
			ТекущаяСтрокаДерева.СтруктураДанныхКонтрагента.Вставить("ТаблицаКонтактныхЛиц", ТаблицаКонтактныхЛиц);
			
		ИначеЕсли ИмяЭлемента = "Документ.Комментарий" Тогда
			
			ТекущийДокумент.Комментарий = ТекущийДокумент.Комментарий + ": " + ЗначениеЭлемента;
			
		//ИначеЕсли ИмяЭлемента = "Документ.Налоги.Налог.Наименование" Тогда
			// Не обрабатываем, это может быть только НДС
		ИначеЕсли ИмяЭлемента = "Документ.Налоги.Налог.УчтеноВСумме" Тогда
			
			ТекущийДокумент.СуммаВключаетНДС = Ложь;
			Если ЗначениеЭлемента = БулевоЗначениеCML_Истина Тогда
				ТекущийДокумент.СуммаВключаетНДС = Истина;
			КонецЕсли;
			
		ИначеЕсли ИмяЭлемента = "Документ.Налоги.Налог.Ставка" Тогда
			
			ТекущийДокумент.УчитыватьНДС = ЗначениеЗаполнено(ЗначениеЭлемента);
			
			Если ТекущийДокумент.УчитыватьНДС Тогда
				
				ТекущаяСтрокаДерева.СтавкаНДС = ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(ЗначениеЭлемента);
				
			КонецЕсли;
			
		ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.СтавкиНалогов.СтавкаНалога.Ставка" Тогда
			
			ТекущийДокумент.УчитыватьНДС = ЗначениеЗаполнено(ЗначениеЭлемента);
			
			Если ТекущийДокумент.УчитыватьНДС Тогда
				
				ТекущаяСтрокаТоваровУслуг.СтавкаНДС = ПолучитьПоЗначениюДляВыгрузкиСтавкуНДС(ЗначениеЭлемента);
				
			КонецЕсли;
			
		//ИначеЕсли ИмяЭлемента = "Документ.Скидки.Скидка.Наименование" Тогда
			// Не обрабатываем, т.к. есть у товара
		ИначеЕсли ИмяЭлемента = "Документ.Скидки.Скидка.Сумма" Тогда
			
			СуммаЧисло = Число(ЗначениеЭлемента);
			ТекущаяСтрокаДерева.СуммаСкидки = СуммаЧисло;
			
		ИначеЕсли ИмяЭлемента = "Документ.Скидки.Скидка.УчтеноВСумме" Тогда
			
			ТекущаяСтрокаДерева.СкидкаВСумме = Ложь;
			Если ЗначениеЭлемента = БулевоЗначениеCML_Истина Тогда
				ТекущаяСтрокаДерева.СкидкаВСумме = Истина;
			КонецЕсли;
			
		ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.Ид"
			  ИЛИ ИмяЭлемента = "Документ.Товары.Товар.БазоваяЕдиница"
		      ИЛИ ИмяЭлемента = "Документ.Товары.Товар.Наименование" Тогда
			
			ТекущаяСтрокаТоваровУслуг["ТоварУслуга" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			
		ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.ЦенаЗаЕдиницу"
			  ИЛИ ИмяЭлемента = "Документ.Товары.Товар.Сумма"
		      ИЛИ ИмяЭлемента = "Документ.Товары.Товар.Количество" Тогда
			
			ТекущаяСтрокаТоваровУслуг["ТоварУслуга" + ИмяТекущегоЭлемента] = Число(ЗначениеЭлемента);
			
		//ИначеЕсли ИмяЭлемента = "Документ.ДопРасходы.ДопРасход.УчтеноВСумме" Тогда
			// Не обрабатываем
		//ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.Скидки.Скидка.Наименование" Тогда
			// Не обрабатываем
			
		ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.ЗначенияРеквизитов.ЗначениеРеквизита.Наименование"
			  ИЛИ ИмяЭлемента = "Документ.Товары.Товар.ЗначенияРеквизитов.ЗначениеРеквизита.Значение" Тогда
			
			ТекущаяСтрокаСкидок["ЗначениеРеквизита" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			
		ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.Скидки.Скидка.Сумма" Тогда
			
			СуммаЧисло = Число(ЗначениеЭлемента);
			ТекущаяСтрокаСкидок.СуммаСкидки = СуммаЧисло;
			
		ИначеЕсли ИмяЭлемента = "Документ.Товары.Товар.Скидки.Скидка.УчтеноВСумме" Тогда
			
			ТекущаяСтрокаСкидок.СкидкаВСумме = Ложь;
			Если ЗначениеЭлемента = БулевоЗначениеCML_Истина Тогда
				ТекущаяСтрокаСкидок.СкидкаВСумме = Истина;
			КонецЕсли;
			
		ИначеЕсли ИмяЭлемента = "Документ.ЗначенияРеквизитов.ЗначениеРеквизита.Наименование"
			  ИЛИ ИмяЭлемента = "Документ.ЗначенияРеквизитов.ЗначениеРеквизита.Значение" Тогда
			
			ТекущаяСтрокаТоваровУслуг["Свойство" + ИмяТекущегоЭлемента] = ЗначениеЭлемента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция РазобратьCML(СтрокаCML)
	
	Успешно = Истина;
	
	ОбъектCML = Новый ЧтениеXML;
	
	Попытка
		ОбъектCML.УстановитьСтроку(СтрокаCML);
	Исключение
		СообщитьОбИсключительнойОшибке(Ложь);
		Возврат Неопределено;
	КонецПопытки;
	
	ПоследовательностьЭлементов = "";
	
	ДеревоДокументов = Новый ДеревоЗначений;
	
	ДеревоДокументов.Колонки.Добавить("ДокументОбъект");
	ДеревоДокументов.Колонки.Добавить("НомерВходящий");
	ДеревоДокументов.Колонки.Добавить("РанееЗагруженныйДокументСсылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ДеревоДокументов.Колонки.Добавить("ЕстьСсылкиНаРанееЗагруженныйДокумент", Новый ОписаниеТипов("Булево"));
	ДеревоДокументов.Колонки.Добавить("СтруктураДанныхКонтрагента");
	ДеревоДокументов.Колонки.Добавить("СтавкаНДС");
	
	// Подчинение документу
	
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаТипНоменклатуры");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаНаименование");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаБазоваяЕдиницаКод");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаБазоваяЕдиница");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаСумма");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаКомментарий");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаЦенаЗаЕдиницу");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаКоличество");
	ДеревоДокументов.Колонки.Добавить("ТоварУслугаИд");
	
	ДеревоДокументов.Колонки.Добавить("СвойствоНаименование");
	ДеревоДокументов.Колонки.Добавить("СвойствоЗначение");
	
	// Подчинение товарам/услугам
	
	ДеревоДокументов.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число"));
	ДеревоДокументов.Колонки.Добавить("СкидкаВСумме", Новый ОписаниеТипов("Булево"));
	
	ДеревоДокументов.Колонки.Добавить("ЗначениеРеквизитаНаименование");
	ДеревоДокументов.Колонки.Добавить("ЗначениеРеквизитаЗначение");
	
	Пока Истина Цикл
		
		ОчереднойУзелCMLПрочитан = Ложь;
		
		Попытка
			ОчереднойУзелCMLПрочитан = ОбъектCML.Прочитать();
		Исключение
			Успешно = Ложь;
			СообщитьОбИсключительнойОшибке(Ложь);
			Прервать;
		КонецПопытки;
		
		Если НЕ ОчереднойУзелCMLПрочитан Тогда
			Прервать;
		КонецЕсли;
		
		ТипУзла = ОбъектCML.ТипУзла;
		ИмяУзла = ОбъектCML.Имя;
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПоследовательностьЭлементов = ДобавитьЭлементКПоследовательности(ПоследовательностьЭлементов, ИмяУзла);
			Успешно = ОбработатьНачалоЭлемента(ОбъектCML, ПоследовательностьЭлементов, ДеревоДокументов);
			Если НЕ Успешно Тогда
				СообщитьПользователю("Не удалось обработать начало элемента (" + ПоследовательностьЭлементов + ").", Ложь);
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ПоследовательностьЭлементов = УдалитьПоследнийЭлементИзПоследовательности(ПоследовательностьЭлементов);
			
		ИначеЕсли ТипУзла = ТипУзлаXML.Текст Тогда	
			
			ЗначениеЭлемента = ОбъектCML.Значение;  
			Успешно = ОбработатьЗначениеЭлемента(ПоследовательностьЭлементов, ЗначениеЭлемента, ДеревоДокументов);
			Если НЕ Успешно Тогда
				СообщитьПользователю("Не удалось обработать значение элемента (" + ПоследовательностьЭлементов + ") = (" + ЗначениеЭлемента + ").", Ложь);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектCML.Закрыть();
	
	Если НЕ Успешно Тогда
		ДеревоДокументов = Неопределено;
	КонецЕсли;
	
	Возврат ДеревоДокументов;
	
КонецФункции

Функция ДобавитьЭлементКПоследовательности(Знач ПоследовательностьЭлементов, Знач ИмяУзла)
	
	ИсключатьИзПоследовательности = Новый Массив;
	ИсключатьИзПоследовательности.Добавить("КоммерческаяИнформация");
	
	Если ИсключатьИзПоследовательности.Найти(ИмяУзла) = Неопределено Тогда
		
		Если НЕ ПоследовательностьЭлементов = "" Тогда
			ПоследовательностьЭлементов = ПоследовательностьЭлементов + ".";
		КонецЕсли;
		ПоследовательностьЭлементов = ПоследовательностьЭлементов + ИмяУзла;
		
	КонецЕсли;
	
	Возврат ПоследовательностьЭлементов;
	
КонецФункции

Функция УдалитьПоследнийЭлементИзПоследовательности(Знач ПоследовательностьЭлементов);
	
	ПромСтрока = СтрЗаменить(ПоследовательностьЭлементов, ".", Символы.ПС);
	КоличествоЭлементов = СтрЧислоСтрок(ПромСтрока);
	
	ПоследовательностьЭлементов = "";
	Если КоличествоЭлементов > 0 Тогда
		КоличествоЭлементов = КоличествоЭлементов - 1;
		Для Счетчик = 1 По КоличествоЭлементов Цикл
			ПоследовательностьЭлементов = ПоследовательностьЭлементов + "." + СтрПолучитьСтроку(ПромСтрока, Счетчик);
		КонецЦикла;
		ПоследовательностьЭлементов = Прав(ПоследовательностьЭлементов, СтрДлина(ПоследовательностьЭлементов) - 1);
	КонецЕсли;
	
	Возврат ПоследовательностьЭлементов;
	
КонецФункции

Функция ПолучитьИмяЭлементаИзПоследовательности(Знач ПоследовательностьЭлементов)
	
	ПромСтрока = СтрЗаменить(ПоследовательностьЭлементов, ".", Символы.ПС);
	КоличествоЭлементов = СтрЧислоСтрок(ПромСтрока);
	
	ИмяПоследнегоЭлемента = "";
	Если КоличествоЭлементов > 0 Тогда
		ИмяПоследнегоЭлемента = СтрПолучитьСтроку(ПромСтрока, КоличествоЭлементов);
	КонецЕсли;
	
	Возврат ИмяПоследнегоЭлемента;
	
КонецФункции

Функция ОбработатьДокументы(ДеревоДокументов, КоличествоОбработанныхДокументов)
	
	Успешно = Истина;
	КоличествоОбработанныхДокументов = 0;
	
	СтруктураСтатистики = Новый Структура;
	СтруктураСтатистики.Вставить("Создано"  , 0);
	СтруктураСтатистики.Вставить("Обновлено", 0);
	СтруктураСтатистики.Вставить("Пропущено", 0);
	СтруктураСтатистики.Вставить("ОплаченСписок", Новый Массив);
	СтруктураСтатистики.Вставить("ДоставкаРазрешенаСписок", Новый Массив);
	СтруктураСтатистики.Вставить("ФинальныйСтатусСписок", Новый Массив);
	
	ОтобразитьСостояние("Поиск ранее загруженных документов...");
	
	ПолучитьРанееЗагруженныеДокументы(ДеревоДокументов);
	
	НачатьТранзакцию();
	
	Успешно = ИдентифицироватьКонтрагентов(ДеревоДокументов); 
	
	Если НЕ Успешно Тогда
		ОтменитьТранзакцию();
		СообщитьПользователю("Не удалось найти/создать контрагента.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	Успешно = ИдентифицироватьНоменклатуру(ДеревоДокументов);
	Если НЕ Успешно Тогда
		ОтменитьТранзакцию();
		СообщитьПользователю("Не удалось найти/создать номенклатуру.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	МассивДокументовДляПроведения = Новый Массив();
	Успешно = СоздатьОбновитьДокументы(ДеревоДокументов, СтруктураСтатистики, МассивДокументовДляПроведения, мМассивЗагруженныхДокументов);	
	Если НЕ Успешно Тогда
		СообщитьПользователю("Не удалось создать/обновить документы.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	МассивОтклоненныхДокументов = Новый Массив();
	Успешно = ЗаписатьСвойстваДокументов(ДеревоДокументов, СтруктураСтатистики, МассивОтклоненныхДокументов);
	Если НЕ Успешно Тогда
		СообщитьПользователю("Не удалось записать свойства документов.", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ОтобразитьСостояние("Проведение загруженных документов...");
	
	// если документы нужно проводить, то попытаемся их провести
	РежимПроведения = ?(ПроводитьДокументыОперативно, РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный);
	Для Каждого ДокументПроведения Из МассивДокументовДляПроведения Цикл
		
		Если МассивОтклоненныхДокументов.Найти(ДокументПроведения.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ДокументПроведения.ПометкаУдаления = Ложь;
			ДокументПроведения.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
			
		Исключение
			
			СообщитьОбИсключительнойОшибке(Ложь, "Ошибка при проведении документа: " + Строка(ДокументПроведения) + Символы.ПС + ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ ДействияСОтмененнымиЗаказами = 3 Тогда // Ничего
		Если ДействияСОтмененнымиЗаказами = 2 Тогда // закрыть
			Информация = "";
			Если ЗакрытьЗаказы(МассивОтклоненныхДокументов, Информация) Тогда
				Если НЕ ПустаяСтрока(Информация) Тогда
					СообщитьПользователю("Сформирован и проведен документ " + Информация, Ложь);
				КонецЕсли;	
			Иначе	
				СообщитьОбИсключительнойОшибке(Ложь, Информация + Символы.ПС + ОписаниеОшибки());
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Для Каждого ДокументПроведения Из МассивОтклоненныхДокументов Цикл
				ДокОбъект = ДокументПроведения.ПолучитьОбъект();
				Если ДействияСОтмененнымиЗаказами = 0 Тогда // Удалять
					Если НЕ ДокОбъект.ПометкаУдаления Тогда
						ДокОбъект.ПометкаУдаления = Истина;
						Попытка
							ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Исключение
							СообщитьОбИсключительнойОшибке(Ложь, "Ошибка при установке пометки на удаление документа: " + Строка(ДокументПроведения) + Символы.ПС + ОписаниеОшибки());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
				Иначе // отменять
					Если ДокОбъект.Проведен Тогда
						Попытка
							ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Исключение
							СообщитьОбИсключительнойОшибке(Ложь, "Ошибка при отмене проведения документа: " + Строка(ДокументПроведения) + Символы.ПС + ОписаниеОшибки());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// не нужно регистрировать изменения для только что загруженных документов
	Если мМассивЗагруженныхДокументов.Количество() <> 0 Тогда
		
		МассивУзлов = ПроцедурыОбменаССайтом.ПолучитьМассивУзловДляРегистрации(Ложь);
		
		Для Каждого СсылкаНаДокумент Из мМассивЗагруженныхДокументов Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, СсылкаНаДокумент);
		КонецЦикла;
		
	КонецЕсли;
	
	Отступ = Символы.НПП + Символы.НПП;
	
	КоличествоОбработанныхДокументов = ДеревоДокументов.Строки.Количество();
	
	Если КоличествоОбработанныхДокументов > 0 Тогда
		
		ТекстСообщения = "Успешно получено и обработано документов: " + Строка(КоличествоОбработанныхДокументов);
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Список обработанных документов: ";
		Для Каждого СтрокаДД Из ДеревоДокументов.Строки Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + СтрокаДД.ДокументОбъект.Ссылка;
		КонецЦикла;
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + "В том числе:";
		Если СтруктураСтатистики.Создано <> 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + "создано новых: " + СтруктураСтатистики.Создано;
		КонецЕсли;
		
		Если СтруктураСтатистики.Обновлено <> 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + "обновлено: " + СтруктураСтатистики.Обновлено;
		КонецЕсли;
		
		Если СтруктураСтатистики.Пропущено <> 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + "пропущено: " + СтруктураСтатистики.Пропущено;
		КонецЕсли;
		
		Если СтруктураСтатистики.ОплаченСписок.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Получено оплаченных документов: " + СтруктураСтатистики.ОплаченСписок.Количество();
			Для Каждого Док Из СтруктураСтатистики.ОплаченСписок Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + Док;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураСтатистики.ДоставкаРазрешенаСписок.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Получено документов с разрешенной доставкой: " + СтруктураСтатистики.ДоставкаРазрешенаСписок.Количество();
			Для Каждого Док Из СтруктураСтатистики.ДоставкаРазрешенаСписок Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + Док;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураСтатистики.ФинальныйСтатусСписок.Количество() > 0 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Получено документов в финальном статусе: " + СтруктураСтатистики.ФинальныйСтатусСписок.Количество();
			Для Каждого Док Из СтруктураСтатистики.ФинальныйСтатусСписок Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + Отступ + Док;
			КонецЦикла;
		КонецЕсли;
		
		СообщитьПользователю(ТекстСообщения, Ложь);
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Функция ЗакрытьЗаказы(МассивДокументов, Информация)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка
	                      |ИЗ
	                      |	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ЗакрытиеЗаказовПокупателейЗаказы
	                      |ГДЕ
	                      |	ЗакрытиеЗаказовПокупателейЗаказы.Ссылка.Проведен
	                      |	И ЗакрытиеЗаказовПокупателейЗаказы.ЗаказПокупателя В(&ЗаказыПокупателя)");
	
	Запрос.УстановитьПараметр("ЗаказыПокупателя", МассивДокументов);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		МассивЗакрытыхЗаказов = Новый Массив;
	Иначе
		МассивЗакрытыхЗаказов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Док = Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();
	Док.ВидОперации=Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов;
	Док.Дата = ТекущаяДата();
	Док.Комментарий = "Создан автоматически при обмене с сайтом";
	Док.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Для Каждого ДокЗаказ Из МассивДокументов Цикл
		
		Если НЕ МассивЗакрытыхЗаказов.Найти(ДокЗаказ) = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = Док.Заказы.Добавить();
		НовСтрока.ЗаказПокупателя = ДокЗаказ;
		
		ПричинаОтмены = ПолучитьПричинуОтменыЗаказа(ДокЗаказ);
		
		Если ПустаяСтрока(ПричинаОтмены) Тогда
			ПричинаЗакрытия = ПричинаЗакрытияЗаказов; // по умолчанию
		Иначе
			ПричинаЗакрытия = ПолучитьПричинуЗакрытияЗаказа(ПричинаОтмены);
		КонецЕсли;
		
		НовСтрока.ПричинаЗакрытияЗаказа = ПричинаЗакрытия;
		
	КонецЦикла;
	
	Если Док.Заказы.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Информация = Строка(Док);
	Исключение
		Информация = "Не удалось провести документ " + Док + " по причине: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Процедура ПолучитьРанееЗагруженныеДокументы(ДеревоДокументов)
	
	МассивНомеров = ДеревоДокументов.Строки.ВыгрузитьКолонку("НомерВходящий");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Категория"	 , Справочники.КатегорииОбъектов.ЗаказСWEBСайта);
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Заказ.Ссылка КАК ДокументСсылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК Заказ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|		ПО (КатегорииОбъектов.Объект = Заказ.Ссылка)
		|			И (КатегорииОбъектов.Категория = ЗНАЧЕНИЕ(Справочник.КатегорииОбъектов.ЗаказСWEBСайта))
		|ГДЕ
		|	Заказ.НомерВходящегоДокументаЭлектронногоОбмена В(&МассивНомеров)";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНайденныхСсылокНаДокументы = Новый Массив();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаДД = ДеревоДокументов.Строки.Найти(Выборка.ДокументСсылка.НомерВходящегоДокументаЭлектронногоОбмена, "НомерВходящий");
		СтрокаДД.РанееЗагруженныйДокументСсылка = Выборка.ДокументСсылка;
		
		МассивНайденныхСсылокНаДокументы.Добавить(Выборка.ДокументСсылка);
		
	КонецЦикла;
	
	// ищем ссылки на ранее загруженные документы
	ТаблицаСсылок = НайтиПоСсылкам(МассивНайденныхСсылокНаДокументы);
	
	Для Каждого СтрокаТС Из ТаблицаСсылок Цикл
		
		Если Метаданные.РегистрыСведений.Содержит(СтрокаТС.Метаданные)
			ИЛИ СтрокаТС.Данные = СтрокаТС.Ссылка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДД = ДеревоДокументов.Строки.Найти(СтрокаТС.Ссылка, "РанееЗагруженныйДокументСсылка");
		СтрокаДД.ЕстьСсылкиНаРанееЗагруженныйДокумент = Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаДД Из ДеревоДокументов.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДД.РанееЗагруженныйДокументСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаДД.РанееЗагруженныйДокументСсылка.ПолучитьОбъект();
		
		Если НЕ СтрокаДД.ЕстьСсылкиНаРанееЗагруженныйДокумент Тогда
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДД.ДокументОбъект, , "Номер");
			ДокументОбъект.Товары.Очистить();
			ДокументОбъект.Услуги.Очистить();
			
		КонецЕсли;
		
		СтрокаДД.ДокументОбъект = ДокументОбъект;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДатуВремяCML(ДатаВремяСтрока, НачальнаяДата = Неопределено)
	
	ДатаВремя = Неопределено;
	
	Если ЗначениеЗаполнено(НачальнаяДата) Тогда
		Время 	  = СтрЗаменить(ДатаВремяСтрока, ":", "");
		ДатаВремя = Дата(Формат(НачальнаяДата, "ДФ=yyyyMMdd") + Время);
	Иначе
		ДатаВремя = Дата(СтрЗаменить(ДатаВремяСтрока, "-", "") + "000000");
	КонецЕсли;
	
	Возврат ДатаВремя;
	
КонецФункции

Функция ОбработатьВалютуCML(КодВалютыСтрока)
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(КодВалютыСтрока);
	Возврат Валюта;
	
КонецФункции

Функция СоздатьОбновитьДокументы(ДеревоДокументов, СтруктураСтатистики, МассивДокументовДляПроведения, МассивЗагруженныхДокументов)
	
	Успешно = Истина;
	
	Для Каждого Док Из ДеревоДокументов.Строки Цикл
		
		НовыйДокумент = Истина;
		
		// если на документ есть ссылки, то он вообще пропускается и не загружается
		Если Док.ЕстьСсылкиНаРанееЗагруженныйДокумент Тогда
			СтруктураСтатистики.Пропущено = СтруктураСтатистики.Пропущено + 1;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.РанееЗагруженныйДокументСсылка) Тогда
			СтруктураСтатистики.Обновлено = СтруктураСтатистики.Обновлено + 1;
			НовыйДокумент = Ложь;
		Иначе
			СтруктураСтатистики.Создано   = СтруктураСтатистики.Создано + 1;
		КонецЕсли;
		
		Попытка
			
			// отдельная работа с комментарием
			
			Если Не ПустаяСтрока(Док.ДокументОбъект.Комментарий) Тогда
				
				Попытка
					СтрокаИмениСайта = Док.Строки.Найти("Сайт", "СвойствоНаименование");
					
					Если СтрокаИмениСайта = Неопределено Тогда
						ИмяСайта = HTTPОбменСервер;
					Иначе
						ИмяСайта = СтрокаИмениСайта.СвойствоЗначение;
					КонецЕсли;
					
					Док.ДокументОбъект.Комментарий   = Док.ДокументОбъект.Комментарий + " " + ИмяСайта;
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			Если НовыйДокумент Тогда
				
				Если ВестиНумерациюЗаказовПоДаннымСайта Тогда
					
					Док.ДокументОбъект.Номер = Док.ДокументОбъект.НомерВходящегоДокументаЭлектронногоОбмена;
					
				КонецЕсли;
				
				Док.ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Иначе
				Если Док.РанееЗагруженныйДокументСсылка.Проведен Тогда
					Док.ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					Док.ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
			
			СсылкаНаДокумент = Док.ДокументОбъект.Ссылка;
			
			МассивЗагруженныхДокументов.Добавить(СсылкаНаДокумент);
			
			Если ПроводитьДокументы 
				ИЛИ Док.ДокументОбъект.Проведен Тогда
				
				МассивДокументовДляПроведения.Добавить(Док.ДокументОбъект);
				
			КонецЕсли;
			
		Исключение
			
			СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

Функция ЗаписатьСвойстваДокументов(ДеревоДокументов, СтруктураСтатистики, МассивОтклоненныхДокументов)
	
	Успешно = Истина;
	
	Для Каждого СтрокаДД Из ДеревоДокументов.Строки Цикл
		
		Успешно = УстановитьКатегориюДокумента(СтрокаДД.ДокументОбъект.Ссылка, Справочники.КатегорииОбъектов.ЗаказСWEBСайта, Истина);
		
		Если НЕ Успешно Тогда
			СообщитьПользователю("Не удалось установить категорию документа ""Заказ с WEB-сайта""", Ложь);
			Прервать;
		КонецЕсли;
		
		Для Каждого ТоварУслугаСвойство Из СтрокаДД.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(ТоварУслугаСвойство.СвойствоНаименование) Тогда
				Продолжить;
			КонецЕсли;
			
			КатегорияСсылка = мСоответствиеНаименованийКатегорийДокумента[ТоварУслугаСвойство.СвойствоНаименование];
			
			Если КатегорияСсылка <> Неопределено Тогда
			 
				ОбъектПринадлежитКатегории = (ТоварУслугаСвойство.СвойствоЗначение = БулевоЗначениеCML_Истина)
					ИЛИ (ТоварУслугаСвойство.СвойствоЗначение = БулевоЗначениеCML_Да);
				
				Успешно = УстановитьКатегориюДокумента(СтрокаДД.ДокументОбъект.Ссылка, КатегорияСсылка, ОбъектПринадлежитКатегории);
				
				Если НЕ Успешно Тогда
					
					СообщитьПользователю("Не удалось установить категорию документа - " + Строка(КатегорияСсылка), Ложь);
					Прервать;
					
				КонецЕсли;
				
				Если ОбъектПринадлежитКатегории Тогда
					
					Если КатегорияСсылка = Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОплачен Тогда
						СтруктураСтатистики.ОплаченСписок.Добавить(СтрокаДД.ДокументОбъект.Ссылка);
					ИначеЕсли КатегорияСсылка = Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеДоставкаРазрешена Тогда
						СтруктураСтатистики.ДоставкаРазрешенаСписок.Добавить(СтрокаДД.ДокументОбъект.Ссылка);
					ИначеЕсли КатегорияСсылка = Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеЗавершен Тогда
						СтруктураСтатистики.ФинальныйСтатусСписок.Добавить(СтрокаДД.ДокументОбъект.Ссылка);
					ИначеЕсли КатегорияСсылка = Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОтменен Тогда
						МассивОтклоненныхДокументов.Добавить(СтрокаДД.ДокументОбъект.Ссылка);
					КонецЕСли;
					
				КонецЕсли;
				
			Иначе
			
				ИмяСвойства      = ТоварУслугаСвойство.СвойствоНаименование;
				ЗначениеСвойства = ТоварУслугаСвойство.СвойствоЗначение;
				
				Если ЗначениеЗаполнено(ИмяСвойства)
				   И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				
					Успешно = НайтиСоздатьУстановитьСвойствоДокумента(СтрокаДД.ДокументОбъект.Ссылка, ИмяСвойства, ЗначениеСвойства);
					
					Если НЕ Успешно Тогда
						СообщитьПользователю("Не удалось установить свойство документа - " + ИмяСвойства, Ложь);
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

Функция УстановитьКатегориюДокумента(ОбъектСсылка, КатегорияСсылка, ОбъектПринадлежитКатегории);
	
	НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	НаборЗаписей.Отбор.Категория.Установить(КатегорияСсылка);
	
	Если ОбъектПринадлежитКатегории Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = ОбъектСсылка;
		Запись.Категория = КатегорияСсылка;
		
	КонецЕсли;
	
	Попытка
		
		НаборЗаписей.Записать();
		
	Исключение
		СообщитьОбИсключительнойОшибке(Ложь, "Не удалось установить/снять категорию """ + КатегорияСсылка.Наименование + """ документу " + Строка(ОбъектСсылка));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиСоздатьУстановитьСвойствоДокумента(ОбъектСсылка, ИмяСвойства, ЗначениеСвойства);
	
	Успешно = Истина;
	
	СвойствоСсылка 	 = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	НазначениеСсылка = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя;
	
	ТипНазначенияСвойств = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Назначение" , НазначениеСсылка);
	Запрос.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвойстваОбъектов.Ссылка Как СвойствоСсылка
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|ГДЕ
		|	СвойстваОбъектов.НазначениеСвойства = &Назначение
		|	И СвойстваОбъектов.Наименование = &ИмяСвойства";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СвойствоСсылка = Выборка.СвойствоСсылка;
	КонецЕсли;
	
	Если СвойствоСсылка = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка() Тогда
		
		НовоеСвойство = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		НовоеСвойство.НазначениеСвойства = НазначениеСсылка;
		НовоеСвойство.Наименование 		 = ИмяСвойства;
		ОписаниеТипов 					 = Новый ОписаниеТипов(Строка(ТипЗнч(ЗначениеСвойства)));
		НовоеСвойство.ТипЗначения 		 = ОписаниеТипов;
		
		Попытка
			НовоеСвойство.Записать();
		Исключение
			СообщитьОбИсключительнойОшибке(Ложь, "Не удалось записать свойство документа " + ИмяСвойства);
			Возврат Ложь;
		КонецПопытки;
		
		СвойствоСсылка = НовоеСвойство.Ссылка;
		
	КонецЕсли;
	
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Значение = ЗначениеСвойства;
	Запись.Объект	= ОбъектСсылка;
	Запись.Свойство = СвойствоСсылка;
	
	Попытка
		Запись.Записать();
	Исключение
		Успешно = Ложь;
		СообщитьОбИсключительнойОшибке(Ложь, "Не удалось записать значение свойства " + ЗначениеСвойства);
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

Функция ИдентифицироватьКонтрагентов(ДеревоДокументов)
	
	Успешно = Истина;
	
	Для Каждого СтрокаДД Из ДеревоДокументов.Строки Цикл
		
		Если СтрокаДД.ЕстьСсылкиНаРанееЗагруженныйДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаДД.СтруктураДанныхКонтрагента.Свойство("Наименование") Тогда
			СообщитьОбИсключительнойОшибке(Ложь, "Ошибка данных входящего CML: Не обнаружено наименование контрагента.");
			Возврат Ложь;
		КонецЕсли;
		
		ОтобразитьСостояние("Идентификация контрагента: " + СтрокаДД.СтруктураДанныхКонтрагента.Наименование);
		
		Запрос = Новый Запрос();
		
		ИНН = "";
		СтрокаДД.СтруктураДанныхКонтрагента.Свойство("ИНН", ИНН);
		Запрос.УстановитьПараметр("Наименование", СтрокаДД.СтруктураДанныхКонтрагента.Наименование);
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка Как Контрагент
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|";
			
		НуженПоискПоИнн = (СпособИдентификацииКонтрагентов = "ИНН") 
			И ЗначениеЗаполнено(ИНН);
			
		Если НуженПоискПоИнн Тогда
			Запрос.Текст = Запрос.Текст + " Контрагенты.ИНН = &ИНН ";
		Иначе
			Запрос.Текст = Запрос.Текст + " Контрагенты.Наименование = &Наименование ";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			КонтрагентСсылка = Выборка.Контрагент;
		Иначе
			КонтрагентСсылка = СоздатьКонтрагента(СтрокаДД.СтруктураДанныхКонтрагента);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			
			Успешно = Ложь;
			Прервать;
			
		КонецЕсли;
		
		АдресДоставки = "";
		ЗаполнитьПодчиненныеДанныеКонтрагента(КонтрагентСсылка, СтрокаДД.СтруктураДанныхКонтрагента, АдресДоставки);
		
		Док = СтрокаДД.ДокументОбъект;
		Док.Контрагент = КонтрагентСсылка;
		
		Если НЕ ПустаяСтрока(АдресДоставки) Тогда
			Док.АдресДоставки = АдресДоставки;
		КонецЕсли;
		
		Успешно = ПроверитьОсновнойДоговорКонтрагента(КонтрагентСсылка, Док);
		
		Если НЕ Успешно Тогда
			Прервать;
		КонецЕсли;
			
		мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();
		
		// нужны только договоры с покупателем и все
		мСтруктураПараметровДляПолученияДоговора.СписокДопустимыхВидовДоговоров.Очистить();
		мСтруктураПараметровДляПолученияДоговора.СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
		СписокДопустимыхВидовВзаиморасчетов = Новый СписокЗначений();
		СписокДопустимыхВидовВзаиморасчетов.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		
		мСтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора", Док.ВалютаДокумента);
		мСтруктураПараметровДляПолученияДоговора.Вставить("ВидСравненияВалютыВзаиморасчетов", "=");
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док, мСтруктураПараметровДляПолученияДоговора);
		
		Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			
			мСтруктураПараметровДляПолученияДоговора.Удалить("ВалютаВзаиморасчетовДоговора");
			мСтруктураПараметровДляПолученияДоговора.Удалить("ВидСравненияВалютыВзаиморасчетов");
			
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док, мСтруктураПараметровДляПолученияДоговора);
			
			Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
				
				Док.ДоговорКонтрагента = СоздатьДоговорПоПараметрам(Док.Контрагент, Док.Организация, Док.ВалютаДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

Функция СоздатьДоговорПоПараметрам(Контрагент, Организация, ВалютаВзаиморасчетов)
	
	НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НайденныйДоговорОбъект.Наименование = "Договор WEB - сайт";
	
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;
	
	НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	НайденныйДоговорОбъект.Организация = Организация;
	НайденныйДоговорОбъект.Владелец           = Контрагент;
	НайденныйДоговорОбъект.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
	
	Попытка
		НайденныйДоговорОбъект.Записать();
	Исключение
		СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки(), "Не удалось записать договор контрагента.");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НайденныйДоговорОбъект.Ссылка;
	
КонецФункции

Функция ПроверитьОсновнойДоговорКонтрагента(КонтрагентСсылка, ДокОбъект)
	
	Успешно = Истина;
	
	Если ЗначениеЗаполнено(КонтрагентСсылка.ОсновнойДоговорКонтрагента) Тогда
		Возврат Успешно;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокОбъект.Организация) Тогда
		
		СообщитьПользователю("Не удалось определить основной договор контрагента (не найдена организация).", Ложь);
		Возврат Ложь;
		
	КонецЕсли;
	
	// ищем договр по контрагенту, организации и валюте
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.ВидВзаиморасчетов = Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
	               |	И ДоговорыКонтрагентов.ВидДоговора = Значение(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
	
	Запрос.УстановитьПараметр("Организация", ДокОбъект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийДоговор = Неопределено;
	
	ВалютаВзаиморасчетов = ДокОбъект.ВалютаДокумента;
	
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийДоговор = Выборка.Ссылка;
		Если Выборка.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекущийДоговор) Тогда
		
		ТекущийДоговор = СоздатьДоговорПоПараметрам(КонтрагентСсылка, ДокОбъект.Организация, ВалютаВзаиморасчетов);
		
		Если Не ЗначениеЗаполнено(ТекущийДоговор) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
		КонтрагентОбъект.ОсновнойДоговорКонтрагента = ТекущийДоговор;
		КонтрагентОбъект.Записать();
		
	Исключение
		СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки(), "Не удалось записать основной договор контрагенту.");
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьПоСтруктуреСтрокиСФИО(СтруктураДанныхКонтрагента)
	
	ТекущаяСтрока = "";
	Фамилия = "";
	Имя = "";
	Отчество = "";
	
	СтруктураДанныхКонтрагента.Свойство("Фамилия", Фамилия);
	СтруктураДанныхКонтрагента.Свойство("Имя", Имя);
	СтруктураДанныхКонтрагента.Свойство("Отчество", Отчество);
	
	Если ЗначениеЗаполнено(Фамилия) Тогда
		ТекущаяСтрока = Фамилия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Имя) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + Имя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчество) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + Отчество);
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

Функция СоздатьКонтрагента(СтруктураДанныхКонтрагента)
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Родитель = ГруппаДляНовыхКонтрагентов;
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, СтруктураДанныхКонтрагента);
	СтрокаФИО = ПолучитьПоСтруктуреСтрокиСФИО(СтруктураДанныхКонтрагента);
	
	Если Не ПустаяСтрока(СтрокаФИО) 
		И СтрокаФИО <> НовыйКонтрагент.НаименованиеПолное
		Тогда
		
		НовыйКонтрагент.НаименованиеПолное = НовыйКонтрагент.НаименованиеПолное + " [" + СтрокаФИО + "]";
		
	КонецЕсли;
	
	НовыйКонтрагент.Покупатель = Истина;
	
	Попытка
		НовыйКонтрагент.Записать();
	Исключение
		СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
	КонецПопытки;
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

Функция ОпределитьВидНоменклатурыПоТипу(ТипНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры
		|";
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].ВидНоменклатуры;
	
КонецФункции

Функция ИнициализироватьВидыНоменкалтуры()
	
	Если ЗначениеЗаполнено(мВидНоменклатурыТовар)
		И ЗначениеЗаполнено(мВидНоменклатурыУслуга) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	мВидНоменклатурыТовар = ОпределитьВидНоменклатурыПоТипу(Перечисления.ТипыНоменклатуры.Товар);
	мВидНоменклатурыУслуга = ОпределитьВидНоменклатурыПоТипу(Перечисления.ТипыНоменклатуры.Услуга);	
	
	Если ЗначениеЗаполнено(мВидНоменклатурыТовар)
		И ЗначениеЗаполнено(мВидНоменклатурыУслуга) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мВидНоменклатурыТовар) Тогда
		
		СообщитьПользователю("Не удалось найти вид номенклатуры: Товар", Ложь);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мВидНоменклатурыУслуга) Тогда
		
		СообщитьПользователю("Не удалось найти вид номенклатуры: Услуга", Ложь);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Распределяет заданную сумму по выбранной колонке 
//
// Параметры: 
//  ИмяКолонки         - cтрока, имя колонки, по которой распределяется сумма ("Количество" или "Сумма");
//  СуммаРаспределения - число, распределяемая сумма
//
//
Процедура РаспределитьСуммуПоКолонке(ДокументОбъект, Товары, ИмяТабЧасти, СуммаРаспределения)	
	
	МассивДанныхКолонки = Товары.ВыгрузитьКолонку("Сумма");
	
	МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаРаспределения, МассивДанныхКолонки);
	
	Если МассивРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Индекс = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + МассивРаспределения[Индекс];
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мТекущийПользователь ,,истина, ,истина, ИмяТабЧасти);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентифицироватьНоменклатуру(ДеревоДокументов)
	
	Успешно = Истина;
	
	Успешно = ИнициализироватьВидыНоменкалтуры();
	
	Если НЕ Успешно Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого СтрокаДД Из ДеревоДокументов.Строки Цикл
		
		Если СтрокаДД.ЕстьСсылкиНаРанееЗагруженныйДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		ОтобразитьСостояние("Идентификация товаров в документе: " + СтрокаДД.ДокументОбъект);
		
		Для Каждого ТоварУслугаСвойство Из СтрокаДД.Строки Цикл
			
			Если ЗначениеЗаполнено(ТоварУслугаСвойство.СвойствоНаименование) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипНоменклатурыCML = "";
			
			Для Каждого ПодчиненнаяСтрокаТовараУслуги Из ТоварУслугаСвойство.Строки Цикл
				
				Если ЗначениеЗаполнено(ПодчиненнаяСтрокаТовараУслуги.ЗначениеРеквизитаНаименование)
					И ПодчиненнаяСтрокаТовараУслуги.ЗначениеРеквизитаНаименование = ЗначениеCML_ТипНоменклатуры Тогда
					
					ТипНоменклатурыCML = ПодчиненнаяСтрокаТовараУслуги.ЗначениеРеквизитаЗначение;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			СтавкаНДСНоменклатуры = ?(ЗначениеЗаполнено(ТоварУслугаСвойство.СтавкаНДС), ТоварУслугаСвойство.СтавкаНДС, СтрокаДД.СтавкаНДС);
			
			Если ТипНоменклатурыCML = ТипНоменклатурыCML_Услуга Тогда	
				
				Номенклатура = НайтиСоздатьНоменклатуру(ТоварУслугаСвойство, мВидНоменклатурыУслуга, СтавкаНДСНоменклатуры);
				
			Иначе
				
				Номенклатура = НайтиСоздатьНоменклатуру(ТоварУслугаСвойство, мВидНоменклатурыТовар, СтавкаНДСНоменклатуры, ХарактеристикаНоменклатуры);
				
			КонецЕсли;
			
			Если Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				
				НовСтрока = СтрокаДД.ДокументОбъект.Услуги.Добавить();
				НовСтрока.Номенклатура = Номенклатура;
				НовСтрока.Содержание   = Номенклатура.НаименованиеПолное;
				НовСтрока.Количество   = ТоварУслугаСвойство.ТоварУслугаКоличество;
				
				Если ЗначениеЗаполнено(ТоварУслугаСвойство.СтавкаНДС) Тогда
					НовСтрока.СтавкаНДС    = ТоварУслугаСвойство.СтавкаНДС;
				Иначе
					НовСтрока.СтавкаНДС    = Номенклатура.СтавкаНДС;
				КонецЕсли;
				
				НовСтрока.Сумма	= РассчитатьСуммуСУчетомСкидок(ТоварУслугаСвойство);
				
				Если ЗначениеЗаполнено(ТоварУслугаСвойство.ТоварУслугаЦенаЗаЕдиницу) Тогда
					НовСтрока.Цена = ТоварУслугаСвойство.ТоварУслугаЦенаЗаЕдиницу;
				Иначе
					Если НовСтрока.Количество > 0 Тогда
						НовСтрока.Цена = НовСтрока.Сумма / НовСтрока.Количество;
					КонецЕсли;
				КонецЕсли;
				
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина, "Услуги");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект);
				
			Иначе
				
				НовСтрока = СтрокаДД.ДокументОбъект.Товары.Добавить();
				НовСтрока.Номенклатура     			 = Номенклатура;
				НовСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				НовСтрока.ЕдиницаИзмерения 		     = Номенклатура.ЕдиницаХраненияОстатков;
				НовСтрока.Количество   	   			 = ТоварУслугаСвойство.ТоварУслугаКоличество;
				НовСтрока.Коэффициент      			 = Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
				
				Если ЗначениеЗаполнено(ТоварУслугаСвойство.СтавкаНДС) Тогда
					НовСтрока.СтавкаНДС    = ТоварУслугаСвойство.СтавкаНДС;
				Иначе
					НовСтрока.СтавкаНДС    = Номенклатура.СтавкаНДС;
				КонецЕсли;
				
				НовСтрока.Сумма	= РассчитатьСуммуСУчетомСкидок(ТоварУслугаСвойство);
				
				Если ЗначениеЗаполнено(ТоварУслугаСвойство.ТоварУслугаЦенаЗаЕдиницу) Тогда
					НовСтрока.Цена = ТоварУслугаСвойство.ТоварУслугаЦенаЗаЕдиницу;
				Иначе
					Если НовСтрока.Количество > 0 Тогда
						НовСтрока.Цена = НовСтрока.Сумма / НовСтрока.Количество;
					КонецЕсли;
				КонецЕсли;
				
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина, "Товары");
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НовСтрока, СтрокаДД.ДокументОбъект);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ СтрокаДД.СкидкаВСумме = Истина Тогда
			
			СуммаСкидки = СтрокаДД.СуммаСкидки;
			
			Если СуммаСкидки <> 0 Тогда
				
				Если СтрокаДД.ДокументОбъект.Товары.Количество() > 0 Тогда
					РаспределитьСуммуПоКолонке(СтрокаДД.ДокументОбъект, СтрокаДД.ДокументОбъект.Товары, "Товары", -СуммаСкидки);
				Иначе
					РаспределитьСуммуПоКолонке(СтрокаДД.ДокументОбъект, СтрокаДД.ДокументОбъект.Услуги, "Услуги", -СуммаСкидки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

Функция РассчитатьСуммуСУчетомСкидок(СтрокаТовара);
	
	Сумма = СтрокаТовара.ТоварУслугаСумма;
	СуммаСкидки = 0;
	
	Для Каждого СтрокаСкидки Из СтрокаТовара.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаСкидки.СуммаСкидки)
			И НЕ СтрокаСкидки.СкидкаВСумме Тогда
			
			СуммаСкидки = СуммаСкидки + СтрокаСкидки.СуммаСкидки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Сумма = Сумма - СуммаСкидки;
	Возврат Сумма;
	
КонецФункции

Функция ПолучитьИдНоменклатуры(Знач Ид)
	
	ПозицияРазделителя = Найти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдНоменклатуры = Лев(Ид, ПозицияРазделителя - 1);
	Иначе
		ИдНоменклатуры = Ид;
	КонецЕсли;
	
	Возврат ИдНоменклатуры;
	
КонецФункции

Функция ПолучитьИдХарактеристики(Знач Ид)
	
	ПозицияРазделителя = Найти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдХарактеристики = Прав(Ид, СтрДлина(Ид) - ПозицияРазделителя);
	Иначе
		ИдХарактеристики = "";
	КонецЕсли;
	
	Возврат ИдХарактеристики;
	
КонецФункции

Функция ВыполнитьПоискНоменклатурыХарактеристикиПоСсылкам(СтрокаТовара, Номенклатура, ХарактеристикаНоменклатуры)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТовара.ТоварУслугаИд) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ИдНоменклатуры = ПолучитьИдНоменклатуры(СтрокаТовара.ТоварУслугаИд);
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда
			// Объект не найден
			СообщитьПользователю("Номенклатура не найдена по уникальному идентификатору: " + ИдНоменклатуры, Ложь);
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ Номенклатура.ВестиУчетПоХарактеристикам Тогда
			Возврат Истина;
		КонецЕсли;
		
		ИдХарактеристики = ПолучитьИдХарактеристики(СтрокаТовара.ТоварУслугаИд);
		Если ПустаяСтрока(ИдХарактеристики) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдХарактеристики));
		
		Если ХарактеристикаНоменклатуры = ПустаяХарактеристикаСсылка Тогда
			Возврат Истина;
		КонецЕсли;
			
		Если ХарактеристикаНоменклатуры.ПолучитьОбъект() = Неопределено Тогда
			СообщитьПользователю("Объект <ХарактеристикаНоменклатуры> не найден: " + Строка(ИдХарактеристики)
				+ ". Будет создан новый объект.", Ложь);
				
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиНоменклатуруПоНаименованиюИВиду(НаименованиеНоменклатуры, ВидНоменклатуры)
	
	// поиск номенклатуры по наименованию и виду
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("Наименование", НаименованиеНоменклатуры);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка Как Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|	И Номенклатура.Наименование = &Наименование";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Номенклатура;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиСоздатьНоменклатуру(СтрокаТовара, Знач ВидНоменклатуры, СтавкаНДС, ХарактеристикаНоменклатуры = Неопределено)
	
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	ХарактеристикаНоменклатуры = Неопределено;
	
	УспешноНайдено = ВыполнитьПоискНоменклатурыХарактеристикиПоСсылкам(СтрокаТовара, Номенклатура, ХарактеристикаНоменклатуры);
	Если УспешноНайдено Тогда
		Возврат Номенклатура;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = Неопределено;
	
	Номенклатура = НайтиНоменклатуруПоНаименованиюИВиду(СтрокаТовара.ТоварУслугаНаименование, ВидНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	КонецЕсли;
	
	ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СтрокаТовара.ТоварУслугаБазоваяЕдиницаКод) Тогда
		ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СтрокаТовара.ТоварУслугаБазоваяЕдиницаКод);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаПоКлассификатору)
		И ЗначениеЗаполнено(СтрокаТовара.ТоварУслугаБазоваяЕдиница) Тогда
		
		ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СтрокаТовара.ТоварУслугаБазоваяЕдиница, Истина);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаПоКлассификатору) Тогда
		
		ЕдиницаПоКлассификатору = ЕдиницаИзмеренияНовойНоменклатуры;
		
	КонецЕсли;
	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницаПоКлассификатору;
	Номенклатура.Родитель				 = ГруппаДляНовойНоменклатуры;
	Номенклатура.ВидНоменклатуры 		 = ВидНоменклатуры;
	Номенклатура.Комментарий 			 = СтрокаТовара.ТоварУслугаКомментарий;
	Номенклатура.Наименование 			 = СтрокаТовара.ТоварУслугаНаименование;
	Номенклатура.НаименованиеПолное		 = СтрокаТовара.ТоварУслугаНаименование;
	Номенклатура.СтавкаНДС 				 = СтавкаНДС;
	Номенклатура.Услуга 				 = ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	
	Попытка
		
		Номенклатура.Записать();
		Если ОбменТоварами
			И ВыгружатьТолькоИзменения Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаТоварами, Номенклатура.Ссылка);
		КонецЕсли;
		
	Исключение
		
		СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
		
	КонецПопытки;
	
	ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	
	ЕдиницаХраненияОстатков.Наименование            = Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
	ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения;
	ЕдиницаХраненияОстатков.Коэффициент             = 1;
	ЕдиницаХраненияОстатков.Владелец                = Номенклатура.Ссылка;
	
	Попытка
		ЕдиницаХраненияОстатков.Записать();
	Исключение
		СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Номенклатура.ЕдиницаХраненияОстатков = ЕдиницаХраненияОстатков.Ссылка;
	Номенклатура.ЕдиницаДляОтчетов 		 = ЕдиницаХраненияОстатков.Ссылка;
	
	Попытка
		Номенклатура.Записать();
	Исключение
		СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Номенклатура.Ссылка;
	
КонецФункции

Функция ОпределитьПоТтипуИмяПоляКонтактнойИнформации(ИмяТипа)
	
	ИмяПоля = "Поле10";
	
	Если ИмяТипа = "Почтовый индекс"
		ИЛИ ИмяТипа = "Страна" Тогда
		ИмяПоля = "Поле1";
	ИначеЕсли ИмяТипа = "Регион" Тогда
		ИмяПоля = "Поле2";
	ИначеЕсли ИмяТипа = "Район" Тогда
		ИмяПоля = "Поле3";
	ИначеЕсли ИмяТипа = "Город" Тогда
		ИмяПоля = "Поле4";
	ИначеЕсли ИмяТипа = "Населенный пункт" Тогда
		ИмяПоля = "Поле5";
	ИначеЕсли ИмяТипа = "Улица" Тогда
		ИмяПоля = "Поле6";
	ИначеЕсли ИмяТипа = "Дом" Тогда
		ИмяПоля = "Поле7";
	ИначеЕсли ИмяТипа = "Корпус" Тогда
		ИмяПоля = "Поле8";
	ИначеЕсли ИмяТипа = "Квартира" Тогда
		ИмяПоля = "Поле9";
	Конецесли;
	
	Возврат ИмяПоля;
	
КонецФункции

Процедура ОпределитьПоданнымТипВидКонтактнойИнформации(КонтактТип, ТипКИ, ВидКИ)
	
	Если КонтактТип = "ТелефонРабочий" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		
	ИначеЕсли КонтактТип = "Почта" Тогда
		
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодчиненныеДанныеКонтрагента(КонтрагентСсылка, СтруктураДанныхКонтрагента, АдресДоставки)
	
	ДеревоАдресов = СтруктураДанныхКонтрагента.ДеревоАдресов;
	
	Для Каждого СтрокаДерева Из ДеревоАдресов.Строки Цикл
		
		Если СтрокаДерева.ВидАдреса = "Адрес" Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ИначеЕсли СтрокаДерева.ВидАдреса = "АдресДоставки" Тогда	
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента;
			АдресДоставки = СтрокаДерева.Представление;
		Иначе	
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КонецЕсли;
		
		НаборКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборКИ.отбор.Объект.Установить(КонтрагентСсылка);
		НаборКИ.отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаборКИ.отбор.Вид.Установить(ВидАдреса);
		
		СтрокаКи = НаборКИ.Добавить();
		СтрокаКи.Объект = КонтрагентСсылка;
		СтрокаКи.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаКи.Вид = ВидАдреса;
		
		СтрокаКи.Комментарий = СтрокаДерева.Комментарий;
		СтрокаКи.Представление = СтрокаДерева.Представление;
		
		Для Каждого СтрокаУточнения Из СтрокаДерева.Строки Цикл
			
			Если СтранаРФ(СтрокаУточнения) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = ОпределитьПоТтипуИмяПоляКонтактнойИнформации(СтрокаУточнения.ПолеТип);
			СтрокаКи[ИмяПоля] = СтрокаУточнения.ПолеЗначение;
			
		КонецЦикла;
		
		НаборКИ.Записать();
		
	КонецЦикла;
	
	//контакты
	ТаблицаКонтактов = СтруктураДанныхКонтрагента.ТаблицаКонтактов;
	Для Каждого СтрокаДерева Из ТаблицаКонтактов Цикл
		
		//КонтактТип
		//КонтактЗначение
		//КонтактКомментарий
		
		ТипКИ = Неопределено;
		ВидКИ = Неопределено;
		
		ОпределитьПоданнымТипВидКонтактнойИнформации(СтрокаДерева.КонтактТип, ТипКИ, ВидКИ);
		
		Если Не ЗначениеЗаполнено(ТипКИ)
			ИЛИ Не ЗначениеЗаполнено(ВидКИ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НаборКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборКИ.отбор.Объект.Установить(КонтрагентСсылка);
		НаборКИ.отбор.Тип.Установить(ТипКИ);
		НаборКИ.отбор.Вид.Установить(ВидКИ);
		
		СтрокаКи = НаборКИ.Добавить();
		СтрокаКи.Объект = КонтрагентСсылка;
		СтрокаКи.Тип = ТипКИ;
		СтрокаКи.Вид = ВидКИ;
		
		СтрокаКи.Комментарий = СтрокаДерева.КонтактКомментарий;
		СтрокаКи.Представление = СтрокаДерева.КонтактЗначение;
		
		НаборКИ.Записать();
		
	КонецЦикла;
	
	// контактные лица
	ТаблицаКонтактныхЛиц = СтруктураДанныхКонтрагента.ТаблицаКонтактныхЛиц;
	ТаблицаКонтактныхЛиц.Свернуть("Наименование");
	Для Каждого СтрокаКЛ Из ТаблицаКонтактныхЛиц Цикл
		
		КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.НайтиПоНаименованию(СтрокаКЛ.Наименование, Истина, , КонтрагентСсылка);
		Если ЗначениеЗаполнено(КонтактноеЛицоКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		Элемент.Владелец = КонтрагентСсылка;
		Элемент.Наименование = СтрокаКЛ.Наименование;
		Элемент.Записать();
		
	КонецЦикла;
	
	//Банк
	ТаблицаБанковскихРеквизитов = СтруктураДанныхКонтрагента.ТаблицаБанковскихРеквизитов;
	Для Каждого СтрокаТаблицыБанковскихРеквизитов Из ТаблицаБанковскихРеквизитов Цикл
		
		НомерСчета = СтрЗаменить(СтрокаТаблицыБанковскихРеквизитов.НомерСчета, " ", "");
		Если ПустаяСтрока(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		БИК = СтрЗаменить(СтрокаТаблицыБанковскихРеквизитов.Банк.БИК, " ", "");
		Если ПустаяСтрока(БИК) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	Банки.Ссылка
		                      |ИЗ
		                      |	Справочник.Банки КАК Банки
		                      |ГДЕ
		                      |	Банки.Код = &БИК");
		Запрос.УстановитьПараметр("БИК", БИК);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			БанкОбъект = Справочники.Банки.СоздатьЭлемент();
			БанкОбъект.Код = БИК;
			БанкОбъект.КоррСчет = СтрЗаменить(СтрокаТаблицыБанковскихРеквизитов.Банк.СчетКорреспондентский, " ", "");
			БанкОбъект.Наименование = СокрЛП(СтрокаТаблицыБанковскихРеквизитов.Банк.Наименование);
			БанкОбъект.Адрес = СокрЛП(СтрокаТаблицыБанковскихРеквизитов.Банк.Адрес.Представление);
			БанкОбъект.Город = ПолучитьГородБанка(СтрокаТаблицыБанковскихРеквизитов.Банк.Адрес.ТаблицаАдресныхПолей);
			Попытка
				БанкОбъект.Записать();
			Исключение
				СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			БанкСсылка = БанкОбъект.Ссылка;
		Иначе
			БанкСсылка = РезультатЗапроса.Выгрузить()[0][0];
		КонецЕсли;
		
		// счет
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	БанковскиеСчета.Ссылка
		                      |ИЗ
		                      |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		                      |ГДЕ
		                      |	БанковскиеСчета.Владелец = &Владелец
		                      |	И БанковскиеСчета.НомерСчета = &НомерСчета
		                      |	И БанковскиеСчета.Банк = &Банк");
		Запрос.УстановитьПараметр("Владелец", КонтрагентСсылка);
		Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
		Запрос.УстановитьПараметр("Банк", БанкСсылка);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СчетОбъект.Банк = БанкСсылка;
		СчетОбъект.ВидСчета = "Расчетный";
		СчетОбъект.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
		СчетОбъект.Владелец = КонтрагентСсылка;
		СчетОбъект.Наименование = БанкСсылка.Наименование + " (" + СчетОбъект.ВидСчета + ")";
		СчетОбъект.НомерСчета = НомерСчета;
		Попытка
			СчетОбъект.Записать();
		Исключение
			СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(КонтрагентСсылка.ОсновнойБанковскийСчет) Тогда
			СчетСсылка = СчетОбъект.Ссылка;
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
			КонтрагентОбъект.ОсновнойБанковскийСчет = СчетСсылка;
			Попытка
				КонтрагентОбъект.Записать();
			Исключение
				СообщитьОбИсключительнойОшибке(Ложь, ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтранаРФ(СтруктураДанных)
	
	Если НЕ СтруктураДанных.ПолеТип = "Страна" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Страна = СокрЛП(ВРег(СтруктураДанных.ПолеЗначение));
	
	Если Страна = "РОССИЯ"
	 ИЛИ Страна = "РФ"
	 ИЛИ Страна = "РОССИЙСКАЯ ФЕДЕРАЦИЯ" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьГородБанка(ТаблицаАдресныхПолей)
	Город = "";
	Найдено = ТаблицаАдресныхПолей.Найти("Город", "ПолеТип");
	Если НЕ Найдено = НеОпределено Тогда
		Город = СокрЛП(Найдено.ПолеЗначение);
	КонецЕсли;
	Возврат Город;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АНАЛИЗА ИЗМЕНЕНИЙ ДАННЫХ


Процедура ЗаполнитьСтруктуруИзмененийДляУзла(УзелПланаОбмена, СтруктураВозврата, ИнформацияОТоварах = Истина)
	
	Если НЕ ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелПланаОбмена);
	
	Если ИнформацияОТоварах Тогда
		СтруктураВозврата.НомерСообщенияТовары = ЗаписьСообщения.НомерСообщения;
	Иначе
		СтруктураВозврата.НомерСообщенияЗаказы = ЗаписьСообщения.НомерСообщения;
	КонецЕсли;
	
	// Получение Изменений
	#Если Клиент Тогда
	ОтобразитьСостояние("Выбор изменений ...");
	Счетчик = 0;
	#КонецЕсли

	Выборка = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
	
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
		Счетчик = Счетчик + 1;
		Если Счетчик % 100 = 0 Тогда
			ОтобразитьСостояние("Обработано объектов: " + Счетчик);
		КонецЕсли;
		#КонецЕсли
		
		Данные 	  = Выборка.Получить();
		ТипДанных = ТипЗнч(Данные);
		
		Если ТипДанных = Тип("СправочникОбъект.Номенклатура") Тогда
			
			СтруктураВозврата.Товары.Добавить(Данные.Ссылка);
			
		ИначеЕсли ТипДанных = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			
			СтруктураВозврата.Заказы.Добавить(Данные.Ссылка);
			
		ИначеЕсли ТипДанных = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации") Тогда
			
			СтруктураВозврата.Файлы.Добавить(Данные.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВсеИзмененияИзПланаОбмена()
	
	СтруктураВозврата = Новый Структура("Товары,Заказы,Файлы,НомерСообщенияТовары,НомерСообщенияЗаказы", 
		Новый Массив(), Новый Массив(), Новый Массив());
		
	Если ОбменТоварами Тогда
		ЗаполнитьСтруктуруИзмененийДляУзла(УзелОбменаТоварами, СтруктураВозврата, Истина);
	КонецЕсли;
	
	Если ОбменЗаказами Тогда
		ЗаполнитьСтруктуруИзмененийДляУзла(УзелОбменаЗаказами, СтруктураВозврата, Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ


Функция ТипЗначенияСправочник(Тип)
	
	ТипЗначенияСправочник = Ложь;
	
	Попытка
		ОбъектПоТипу = Новый(Тип);
		ТипЗначенияСправочник = Метаданные.Справочники.Содержит(ОбъектПоТипу.Метаданные());
	Исключение
	КонецПопытки;
	
	Возврат ТипЗначенияСправочник;
	
КонецФункции

Функция ПолучитьШтрихКод(НоменклатураСсылка, ХарактеристикаСсылка = НеОпределено)
	
	ШтрихКод = НеОпределено;
	
	мЗапросПоШК.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
	
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		мЗапросПоШК.УстановитьПараметр("ХарактеристикаСсылка", ХарактеристикаСсылка);
	Иначе
		мЗапросПоШК.УстановитьПараметр("ХарактеристикаСсылка", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = мЗапросПоШК.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ШтрихКод = РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли;
	
	Возврат ШтрихКод;
	
КонецФункции

Функция ПолучитьСуммуНДС(Док)
	Возврат Док.Товары.Итог("СуммаНДС") + Док.Услуги.Итог("СуммаНДС");
КонецФункции

Функция Версия() Экспорт
	Возврат "УТ 10.3, типовая конфигурация";
КонецФункции

Функция ПолучитьПричинуЗакрытияЗаказа(ПричинаСтрокой)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПричиныЗакрытияЗаказов.Ссылка
	|ИЗ
	|	Справочник.ПричиныЗакрытияЗаказов КАК ПричиныЗакрытияЗаказов
	|ГДЕ
	|	ПричиныЗакрытияЗаказов.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ПричинаСтрокой);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		НоваяПричина = Справочники.ПричиныЗакрытияЗаказов.СоздатьЭлемент();
		НоваяПричина.Наименование = ПричинаСтрокой;
		НоваяПричина.Записать();
		Возврат НоваяПричина.Ссылка;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции // ПолучитьПричинуЗакрытияЗаказа()


Функция ПолучитьПричинуОтменыЗаказа(ДокЗаказ)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Объект", ДокЗаказ);
	Запрос.УстановитьПараметр("Наименование", "Причина отмены");
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат СокрЛП(Выборка.Значение);
	
	КонецЕсли; 
	
	Возврат "";

КонецФункции // ПолучитьПричинуОтменыЗаказа()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


ПрефиксУзлаCML	   = "CMLУзел.";
ПрефиксАтрибутаCML = "CMLАтрибут.";
НачалоЭлементаCML  = "CMLНачалоЭлемента";
КонецЭлементаCML   = "CMLКонецЭлемента";

мПодкаталогФайлов 			 	    	= "import_files";
мПодкаталогБезопасностиКаталогаВыгрузки = "1cbitrix";

ПараметрЗапросаHTTP_Инициализация       	  = "&mode=init";
ПараметрЗапросаHTTP_ПередачаФайла       	  = "&mode=file&filename=";
ПараметрЗапросаHTTP_ИмпортФайлаСервером		  = "&mode=import&filename=";
ПараметрЗапросаHTTP_ПолучитьДанные	    	  = "&mode=query"; 
ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта = "&mode=success";

ОтветСервера_ZIPРазрешен							= "zip=yes";
ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена = "file_limit=";
ОтветСервера_УспешноеЗавершениеТекущейОперации 		= "success";
ОтветСервера_АварийноеЗавершениеТекущейОперации		= "failure";
ОтветСервера_ВыполнениеТекущейОперации 				= "progress";

ПустаяХарактеристикаСсылка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
НаименованиеНалога 			= "НДС";

БулевоЗначениеCML_Истина 	= "true";
БулевоЗначениеCML_Да = "Да";

ТипНоменклатурыCML_Услуга 	= "Услуга";
ТипНоменклатурыCML_Товар  	= "Товар";
ЗначениеCML_ТипНоменклатуры = "ТипНоменклатуры";

мСоответствиеНаименованийКатегорийДокумента = Новый Соответствие;
мСоответствиеНаименованийКатегорийДокумента.Вставить("Заказ оплачен"	 , Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОплачен);
мСоответствиеНаименованийКатегорийДокумента.Вставить("Доставка разрешена", Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеДоставкаРазрешена);
мСоответствиеНаименованийКатегорийДокумента.Вставить("Финальный статус"	 , Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеЗавершен);
мСоответствиеНаименованийКатегорийДокумента.Вставить("Отменен"	         , Справочники.КатегорииОбъектов.СостояниеЗаказаНаWEBСайтеОтменен);

ПостроительЗапроса = Новый ПостроительЗапроса;

мКоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом = Константы.КоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом.Получить();
Если НЕ ЗначениеЗаполнено(мКоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом) Тогда
	мКоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом = 1;
КонецЕсли;

мФорматСумм = "ЧДЦ=2; ЧРД=.; ЧГ=";