//////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ БИЗНЕС-ПРОЦЕССА "СогласованиеЗаказаПокупателя".
//

 // Процедура возвращает информационную надпись о состоянии согласования бизнес-процесса.
//
// Параметры:
//   БизнесПроцесс - БизнесПроцессСсылка.СогласованиеЗаказаПокупателя.
//
Функция ПолучитьСостояниеОбъектаСогласования(БизнесПроцесс) Экспорт

	Возврат Строка(БизнесПроцесс.СостояниеСогласования);

КонецФункции // СостояниеОбъектаСогласования()

// Функция формирует массив исполнителей задачи бизнес-процесса "СогласованиеЗаказаПокупателя".
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиБизнесПроцессов, настройка, которую использует бизнес-процесс.
//  ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцесса, точка маршрута бизнес-процесса,
//  в которой формируется задача.
//
// Возвращаемое значение
//  Массив исполнителей.
//
Функция ПолучитьИсполнителейЗадачТочкиМаршрута(Настройка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка",     Настройка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Исполнители.Исполнитель КАК Исполнитель
	|ИЗ
	|	Справочник.НастройкиБизнесПроцессов.Исполнители КАК Исполнители
	|ГДЕ
	|	Исполнители.Ссылка = &Настройка
	|	И Исполнители.ТочкаМаршрута = &ТочкаМаршрута";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель")
	
КонецФункции // ПолучитьИсполнителейЗадачТочкиМаршрута()

// Функция возвращает значения по умолчанию (результат согласования) для точки маршрута.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСогласованиеЗаказаПокупателя.
//
// Возвращаемое значение
//  ПеречислениеСсылка.РезультатыБизнесПроцессаСогласование.
//
Функция ПолучитьЗначениеРезультатаПоУмолчанию(ТочкаМаршрута)

	Результат = Перечисления.РезультатыБизнесПроцессаСогласование.ПустаяСсылка();
	
	ТочкиМаршрута = БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута;

	Если ТочкаМаршрута = ТочкиМаршрута.Согласовать Или 
		ТочкаМаршрута = ТочкиМаршрута.ПодвестиИтогиСогласования Тогда
	
		Результат = Перечисления.РезультатыБизнесПроцессаСогласование.Утвердить;

	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.ОзнакомитьсяСРезультатами Тогда

		Результат = Перечисления.РезультатыБизнесПроцессаСогласование.ЗавершитьСогласование;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьЗначениеРезультатаПоУмолчанию()

// Процедура устанавливае измерения и ресурсы менеджера записи регистра "Рецензии"
// значениями по умолчанию.
//
// Параметры:
//  Задача – ЗадачаСсылка.ЗадачиПользователя, задача пользователя.
//  МенеджерЗаписи – РегистрСведенийМенеджерЗаписи.Рецензии, менеджер записи для инициализации.
//
Процедура УстановитьЗначениеРесурсовПоУмолчанию(Задача, МенеджерЗаписиРецензии) Экспорт

	Если ТипЗнч(МенеджерЗаписиРецензии) <> Тип("РегистрСведенийМенеджерЗаписи.Рецензии") Или
		МенеджерЗаписиРецензии.Выбран() Тогда
		Возврат;
	КонецЕсли;

	МенеджерЗаписиРецензии.Задача        = Задача;
	МенеджерЗаписиРецензии.ТочкаМаршрута = Задача.ТочкаМаршрута;
	МенеджерЗаписиРецензии.БизнесПроцесс = Задача.БизнесПроцесс;
	МенеджерЗаписиРецензии.НомерЦикла    = Задача.БизнесПроцесс.НомерЦикла;
	МенеджерЗаписиРецензии.Результат     = ПолучитьЗначениеРезультатаПоУмолчанию(Задача.ТочкаМаршрута);

КонецПроцедуры // УстановитьЗначениеРесурсовПоУмолчанию()

// Функция получает данные о результатах согласования по задаче, при необходимости инициализирует
// менеджер записи регистра сведений "Рецензии".
//
// Параметры:
//  Задача – ЗадачаСсылка.ЗадачиПользователя, задача пользователя.
//  МенеджерЗаписи – РегистрСведенийМенеджерЗаписи.Рецензии, менеджер записи для инициализации.
//
// Возвращаемое значение
//  Булево, "Истина" если данные по задаче в регистре найдены.
//
Функция ПолучитьДанныеЗадачи(Задача, МенеджерЗаписиРецензии = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задача", Задача);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Рецензии.Задача          КАК Задача,
	|	Рецензии.БизнесПроцесс   КАК БизнесПроцесс,
	|	Рецензии.НомерЦикла      КАК НомерЦикла,
	|	Рецензии.ТочкаМаршрута   КАК ТочкаМаршрута
	|ИЗ
	|	РегистрСведений.Рецензии КАК Рецензии
	|ГДЕ
	|	Рецензии.Задача = &Задача";
	Выборка   = Запрос.Выполнить().Выбрать();
	Результат = Ложь;

	Если Выборка.Следующий() Тогда

		Результат = Истина;
		Если МенеджерЗаписиРецензии <> Неопределено Тогда

			ЗаполнитьЗначенияСвойств(МенеджерЗаписиРецензии, Выборка);
			МенеджерЗаписиРецензии.Прочитать();

		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьДанныеЗадачи()

// Функция возвращает актуальные (последние) результаты согласования в точке маршрута
//бизнес-процесса "СогласованиеЗаказаПокупателя" 
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка.СогласованиеЗаказаПокупателя.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцесса.
//
// Возвращаемое значение
// Булево, Истина - если результат равен исследуемому результату.
//
Функция ПолучитьРезультатВТочкеМаршрута(БизнесПроцесс,
										ТочкаМаршрута,
										ИсследуемыйРезультат = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Рецензии.Результат КАК Результат
	|ИЗ
	|	РегистрСведений.Рецензии КАК Рецензии
	|ГДЕ
	|	Рецензии.ТочкаМаршрута   = &ТочкаМаршрута
	|	И Рецензии.БизнесПроцесс = &БизнесПроцесс
	|	И Рецензии.НомерЦикла В
	|			(ВЫБРАТЬ
	|				Таб.НомерЦикла КАК НомерЦикла
	|			ИЗ
	|				БизнесПроцесс.СогласованиеЗаказаПокупателя КАК Таб
	|			ГДЕ
	|				Таб.Ссылка = &БизнесПроцесс)";
		
	Выборка = Запрос.Выполнить().Выбрать();

	Если ИсследуемыйРезультат = Неопределено Тогда 
		ИсследуемыйРезультат = Перечисления.РезультатыБизнесПроцессаСогласование.Утвердить;
	КонецЕсли;

	ЕстьНужныйРезультат = Ложь;
	ЕстьИные = Ложь;

	Пока Выборка.Следующий() Цикл

		Если Не ЗначениеЗаполнено(Выборка.Результат) Тогда
			Продолжить;
		КонецЕсли;

		Если Выборка.Результат = ИсследуемыйРезультат Тогда
			ЕстьНужныйРезультат = Истина;
		Иначе
			ЕстьИные = Истина;
		КонецЕсли;

	КонецЦикла;

	Результат = (ЕстьНужныйРезультат И Не ЕстьИные);

	Возврат Результат;

КонецФункции // ПолучитьРезультатВТочкеМаршрута()

// Функция возвращает точки согласования бизнес-процесса "СогласованиеЗаказаПокупателя" 
//
// Возвращаемое значение
//  Массив точек маршрута бизнес процесса.
//
Функция ПолучитьТочкиСогласованияЗаказа() Экспорт

	ТочкиМаршрута = БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута;

	МассивТочекСогласования = Новый Массив();
	МассивТочекСогласования.Добавить(ТочкиМаршрута.Согласовать);
	МассивТочекСогласования.Добавить(ТочкиМаршрута.ПодвестиИтогиСогласования);
	Возврат МассивТочекСогласования;

КонецФункции // ПолучитьТочкиСогласованияЗаказа()

// Функция возвращает "РезультатЗапроса" по актуальным данным согласования 
//бизнес-процесса "СогласованиеЗаказаПокупателя" 
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка.СогласованиеЗаказаПокупателя.
//
// Возвращаемое значение
//  РезультатЗапроса по актуальным (последним) рецензиям.
//
Функция ПолучитьРезультатЗапросаПоСогласованию(БизнесПроцесс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс"          , БизнесПроцесс);
	Запрос.УстановитьПараметр("МассивТочекСогласования", ПолучитьТочкиСогласованияЗаказа());

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Рецензии.Задача.Исполнитель КАК Исполнитель,
	|	Рецензии.ТочкаМаршрута      КАК ТочкаМаршрута,
	|	Рецензии.Результат          КАК Результат,
	|	Рецензии.Рецензия           КАК Рецензия,
	|	Рецензии.Задача             КАК Задача,
	|	ПРЕДСТАВЛЕНИЕ(Рецензии.Задача) КАК ПредставлениеЗадачи
	|ИЗ
	|	РегистрСведений.Рецензии КАК Рецензии
	|ГДЕ
	|	Рецензии.ТочкаМаршрута В(&МассивТочекСогласования)
	|	И Рецензии.БизнесПроцесс = &БизнесПроцесс
	|	И Рецензии.НомерЦикла В
	|			(ВЫБРАТЬ
	|				Таб.НомерЦикла КАК НомерЦикла
	|			ИЗ
	|				БизнесПроцесс.СогласованиеЗаказаПокупателя КАК Таб
	|			ГДЕ
	|				Таб.Ссылка = &БизнесПроцесс)
	|	И Рецензии.Задача.Выполнена = Истина
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задача
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьРезультатЗапросаПоСсгласованию()

//////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ БИЗНЕС-ПРОЦЕССОВ.
//
# Если Клиент Тогда
// Формирует и устанавливает текст заголовка формы бизнес-процесса
//
// Параметры:
//  БизнесПроцессОбъект - объект бизнес-процесса, 
//  ФормаОбъекта - бизнес-процесса.
//
Процедура УстановитьЗаголовокБизнесПроцесса(БизнесПроцессОбъект, ФормаОбъекта) Экспорт

	ФормаОбъекта.АвтоЗаголовок = Ложь;

	Заголовок = БизнесПроцессОбъект.Метаданные().Синоним;

	Если БизнесПроцессОбъект.ЭтоНовый() Тогда

		Заголовок = Заголовок + ". " + "Новый";

	Иначе

		Если БизнесПроцессОбъект.Завершен Тогда

			Заголовок = Заголовок + ". " + "Завершен";

		ИначеЕсли БизнесПроцессОбъект.Стартован Тогда

			Заголовок = Заголовок + ". " + "Стартован";
		Иначе

			Заголовок = Заголовок + ". " + "Записан";
		КонецЕсли;
	КонецЕсли;

	ФормаОбъекта.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокБизнесПроцесса()

// Функция возвращает представление задачи.
//
// Параметры:
//  Задача – ЗадачаПользователя – задача, представление которой нужно получить.
//
// Возвращаемое значение:
//  Строка – представление задачи.
//
Функция ПолучитьПредставлениеЗадачи(Задача)

	Возврат Задача.Наименование + " от " + Задача.Дата

КонецФункции // ПолучитьПредставлениеЗадачи()

// Процедура проверяет заполнение реквизитов задачи 
//бизнес-процесса "СогласованиеЗаказаПокупателя" перед выполнением.
//
// Параметры:
//  Задача – Задачи.ЗадачаПользователя – задача пользователя.
//  Отказ  – Булево, флаг отказа от стандартной обработки.
//
Процедура ПроверитьЗаполнениеРеквизитов(Задача, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(Задача.БизнесПроцесс) Или 
		 Не ЗначениеЗаполнено(Задача.ТочкаМаршрута) Тогда
		Возврат;
	КонецЕсли;

	ТипБизнесПроцесса = ТипЗнч(Задача.БизнесПроцесс);
	ТочкаМаршрута     = Задача.ТочкаМаршрута;
	Заголовок         = "Выполнение задачи: " + ПолучитьПредставлениеЗадачи(Задача);

	Если ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.СогласованиеЗаказаПокупателя") Тогда

		ТочкиМаршрута = БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута;

		// В данных точках необходимо проверить наличие рецензии в регистре "Рецензии"
		Если ТочкаМаршрута = ТочкиМаршрута.Согласовать Или
			 ТочкаМаршрута = ТочкиМаршрута.ПодвестиИтогиСогласования Или
			 ТочкаМаршрута = ТочкиМаршрута.ОзнакомитьсяСРезультатами Тогда

			Если Не ПолучитьДанныеЗадачи(Задача.Ссылка) Тогда

				ОбщегоНазначения.СообщитьОбОшибке(
					"Не заполнен реквизит ""Виза""", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.ПереоценкаТоваровАТТ") Тогда

		ТочкиМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута;

		Если ТочкаМаршрута = ТочкиМаршрута.ПровестиИнвентаризацию Тогда

			Если Не ЗначениеЗаполнено(Задача.Объект) Тогда

				ОбщегоНазначения.СообщитьОбОшибке(
					"Не заполнен реквизит ""Инвентаризация товаров""", Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.УстановитьНовыеЦены Тогда

			Если Не ЗначениеЗаполнено(Задача.Объект) Тогда

				ОбщегоНазначения.СообщитьОбОшибке(
					"Не заполнен реквизит ""Переоценка товаров""", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеРеквизитов()
# КонецЕсли

// Функция возвращает выборку с параметрами точки маршрута из справочника "НастройкиБизнесПроцессов".
//
// Параметры:
//  Настройка –Справочник.НастройкиБизнесПроцессов настройка из которой нужно взять данные.
//  ТочкаМаршрутаБизнесПроцесса – ТочкаМаршрутаБизнесПроцесса точка маршрута для получения отчетов.
//
// Возвращаемое значение
//
//  Выборка – выборка из результата запроса с парамтерами точки маршрута.
//
Функция ПолучитьПараметрыТочкиМаршрута(Настройка, ТочкаМаршрутаБизнесПроцесса) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка",     Настройка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаБизнесПроцесса);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЕСТЬNULL(Т.ПериодВыполненияДн, 0) КАК ПериодВыполненияДн,
	|	ЕСТЬNULL(Т.Выполнять, ЛОЖЬ) КАК Выполнять,
	|	ЕСТЬNULL(Т.Представление, """") КАК Представление,
	|	ЕСТЬNULL(Т.ПериодОповещенияДн, 0) КАК ПериодОповещенияДн,
	|	ЕСТЬNULL(Т.Описание, """") КАК Описание,
	|	ЕСТЬNULL(Т.ПериодВыполненияЧас, 0) КАК ПериодВыполненияЧас,
	|	ЕСТЬNULL(Т.ПериодОповещенияЧас, 0) КАК ПериодОповещенияЧас,
	|	ЕСТЬNULL(Т.ПериодОповещенияМин, 0) КАК ПериодОповещенияМин,
	|	ЕСТЬNULL(Т.ПериодВыполненияМин, 0) КАК ПериодВыполненияМин
	|ИЗ
	|	Справочник.НастройкиБизнесПроцессов.ПараметрыТочекМаршрута КАК Т
	|ГДЕ
	|	Т.ТочкаМаршрута = &ТочкаМаршрута
	|	И Т.Ссылка = &Настройка";

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ПолучитьПараметрыТочкиМаршрута()

// Функция возвращает бизнес-процесс по ведущей задаче.
//
// Параметры:
//  ИмяБизнесПроцесса – Строка имя бизнес-процесса-как оно задано в конфигураторе.
//  ВедущаяЗадача     – ЗадачаСсылка – ведущая задача.
//
// Возвращаемое значение
//
//  БизнесПроцесс – бизнес процесс.
//
Функция ПолучитьВложенныйБизнесПроцесс(ИмяБизнесПроцесса, ВедущаяЗадача) Экспорт

	ПустаяСсылка = БизнесПроцессы[ИмяБизнесПроцесса].ПустаяСсылка();

	Если Не ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВедущаяЗадача",ВедущаяЗадача);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Данные.Ссылка КАК БизнесПроцесс
	|ИЗ
	|	БизнесПроцесс."+ИмяБизнесПроцесса+" КАК Данные
	|ГДЕ
	|	Данные.ВедущаяЗадача = &ВедущаяЗадача";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.БизнесПроцесс;
	Иначе
		Возврат ПустаяСсылка;
	КонецЕсли;

КонецФункции // ПолучитьВложенныйБизнесПроцесс()

//////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ФОРМАМИ ЗАДАЧ.
//
# Если Клиент Тогда
// Процедура открывает необходимую форму задачи бизнес-процесса "ПереоценкаТоваровРозница" в 
//соответствии с точкой маршрута.
//
// Параметры:
//  Задача - задача 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события.
//  Отказ - булево, признак отказа от открытия формы.
//
Процедура ОткрытьФормуВыполненияЗадачиПереоценкаТоваровРозница(Задача, 
																СтандартнаяОбработка = Истина,
																Отказ = Ложь ) Экспорт

	ФормаОткрыта  = Ложь;
	ТочкаМаршрутаЗадачи = Задача.ТочкаМаршрута;
	ТочкиМаршрута       = БизнесПроцессы.ПереоценкаТоваровРозница.ТочкиМаршрута;

	Если ТочкаМаршрутаЗадачи = ТочкиМаршрута.ПроконтролироватьПереоценку Тогда

		НеобходимаяФорма = "ПереоценкаТоваровРозницаВыполнениеЗадачи";

	ИначеЕсли ТочкаМаршрутаЗадачи = ТочкиМаршрута.ПереоценкаСкладаАТТ Тогда
		
		БизнесПроцесс = ПолучитьВложенныйБизнесПроцесс("ПереоценкаТоваровАТТ", Задача);

		Если Не БизнесПроцесс.Пустая() Тогда

			БизнесПроцесс.ПолучитьФорму().Открыть();
			ФормаОткрыта = Истина;
		КонецЕсли;

	Иначе

		Возврат;
	КонецЕсли;
	
	Если Не ФормаОткрыта И НеобходимаяФорма <> Неопределено Тогда 

		ФормаЗадачи = Задача.ПолучитьФорму(НеобходимаяФорма);
		ФормаЗадачи.Открыть();
		ФормаОткрыта = Истина;

	КонецЕсли;

	Если ФормаОткрыта Тогда

		Отказ                = Истина;
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыполненияЗадачи()

// Процедура открывает нужную форму задачи бизнес-процесса "ПереоценкаТоваровАТТ"
//в зависимости от точки маршрута.
//
// Параметры:
//  Задача - задача 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события.
//  Отказ - булево, признак отказа от открытия формы.
//
Процедура ОткрытьФормуВыполненияЗадачиПереоценкаТоваровАТТ(Задача,
															СтандартнаяОбработка = Истина,
															Отказ = Ложь ) Экспорт

	Отказ                = Истина;
	СтандартнаяОбработка = Ложь;
	Задача.ПолучитьФорму("ПереоценкаТоваровАТТВыполнениеЗадачи").Открыть();

КонецПроцедуры // ОткрытьФормуВыполненияЗадачиПереоценкаТоваровАТТ()

// Процедура открывает нужную форму задачи бизнес-процесса "СогласованиеЗаказаПокупателя" 
//в зависимости от точки маршрута.
//
// Параметры:
//  Задача - задача 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события.
//  Отказ - булево, признак отказа от открытия формы.
//
Процедура ОткрытьФормуВыполненияЗадачиСогласованиеЗаказаПокупателя(Задача,
																	СтандартнаяОбработка = Истина,
																	Отказ = Ложь ) Экспорт
	Отказ                = Истина;
	СтандартнаяОбработка = Ложь;
	Задача.ПолучитьФорму("СогласованиеЗаказаПокупателяВыполнениеЗадачи").Открыть();

КонецПроцедуры // ОткрытьФормуВыполненияЗадачиСогласованиеЗаказаПокупателя()

// Процедура открывает нужную форму задачи бизнес-процесса "ПереоценкаТоваровАТТ" в зависимости
//от точки маршрута.
//
// Параметры:
//  Задача - задача, задача, форму которой открывает пользователь.
//  Отказ - булево, признак отказа от открытия формы.
//
Процедура ОткрытьФормуВыполненияЗадачи(Задача, Отказ) Экспорт

	БизнесПроцесс = Задача.БизнесПроцесс;
	Если Не ЗначениеЗаполнено(БизнесПроцесс) 
		Или Не ЗначениеЗаполнено(Задача.ТочкаМаршрута) Тогда
		Возврат;
	КонецЕсли;

	ТипБизнесПроцесса = ТипЗнч(БизнесПроцесс);
	Если ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.СогласованиеЗаказаПокупателя") Тогда

		ОткрытьФормуВыполненияЗадачиСогласованиеЗаказаПокупателя(Задача,, Отказ);

	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.ПереоценкаТоваровРозница") Тогда

		ОткрытьФормуВыполненияЗадачиПереоценкаТоваровРозница(Задача,, Отказ);

	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.ПереоценкаТоваровАТТ") Тогда

		ОткрытьФормуВыполненияЗадачиПереоценкаТоваровАТТ(Задача,, Отказ);

	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыполненияЗадачи()
# КонецЕсли

//////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОТКРЫТИЯ ФОРМ СПИСКОВ БИЗНЕС-ПРОЦЕССОВ ПО ОБЪЕКТАМ
//
# Если Клиент Тогда 
// Процедура открывает список бизнес-процессов "ПереоценкаТоваровРозница" с отбором по реквизиту
// "ДокументУстановкаЦен".
//
// Параметры:
//  ДокументУстановкаЦен - ДокументСсылка.УстановкаЦенНоменклатуры.
//
Процедура ОткрытьСписокПереоценкаТоваровРозницаПоДокументу(ДокументУстановкаЦен) Экспорт

	Если ТипЗнч(ДокументУстановкаЦен) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда

		ФормаСписка = БизнесПроцессы.ПереоценкаТоваровРозница.ПолучитьФормуСписка();
		ФормаСписка.БизнесПроцессСписок.Отбор.УстановкаЦенНоменклатуры.Установить(ДокументУстановкаЦен);
		ФормаСписка.Открыть();

	КонецЕсли;

КонецПроцедуры // ОткрытьСписокПереоценкаТоваровРозницаПоДокументу()

// Процедура открывает список бизнес-процессов "СогласованиеЗаказаПокупателя" с отбором по реквизиту
// "ОбъектСогласования".
//
// Параметры:
//  ДокументЗаказПокупателя - ДокументСсылка.ЗаказПокупателя.
//
Процедура ОткрытьСписокСогласованиеЗаказаПокупателяПоДокументу(ДокументЗаказПокупателя) Экспорт

	Если ТипЗнч(ДокументЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		ФормаСписка = БизнесПроцессы.СогласованиеЗаказаПокупателя.ПолучитьФормуСписка();
		ФормаСписка.БизнесПроцессСписок.Отбор.ОбъектСогласования.Установить(ДокументЗаказПокупателя);
		ФормаСписка.Открыть();

	КонецЕсли;

КонецПроцедуры // ОткрытьСписокСогласованиеЗаказаПокупателяПоДокументу()

//////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОТКРЫТИЯ ФОРМ ОТЧЕТОВ
//

// Процедура открывает Форму отчета "АнализСогласованияЗаказовПокупателей".
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка.СогласованиеЗаказаПокупателя.
//
Процедура ОткрытьАнализСогласованияЗаказа(БизнесПроцесс) Экспорт

	ФормаОтчета = Отчеты.АнализСогласованияЗаказовПокупателей.ПолучитьФорму();
	ФормаОтчета.Открыть();

	ФормаОтчета.ОтчетОбъект.УстановитьБыстрыйОтборПоБизнесПроцессу(БизнесПроцесс);
	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры // ОткрытьАнализСогласованияЗаказа()

// Процедура открывает форму карты маршрута бизнес-процесса.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка.
//
Процедура ОткрытьКартумаршрута(БизнесПроцесс) Экспорт

	КартаМаршрута = Обработки.КартаМаршрутаБизнесПроцесса.ПолучитьФорму();
	КартаМаршрута.БизнесПроцесс = БизнесПроцесс;
	КартаМаршрута.Открыть();

КонецПроцедуры // ОткрытьКартумаршрута()

// Процедура выделяет цветом завершенные бизнес-процессы в списках.
//
// Параметры:
//  ОформленияСтрок - ОформленияСтрок табличного поля бизнес-процессов.
//
Процедура ОтобразитьЗавершенныеБизнесПроцессы(ОформленияСтрок) Экспорт

	Для Каждого ОформленияСтроки Из ОформленияСтрок Цикл

		Если ОформленияСтроки.ДанныеСтроки.Завершен Или 
			Не ОформленияСтроки.ДанныеСтроки.Стартован Тогда

			ОформленияСтроки.ЦветТекста = ЦветаСтиля.ТекстВторостепеннойНадписи;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОтобразитьЗавершенныеБизнесПроцессы()

// Процедура выполняет отбор активных бизнес-процессов.
//
// Параметры:
//  БизнесПроцессСписок - БизнесПроцессСписок.
//  ТолькоАктивные - булево, отбор только по активным (стартованным и незавершенным).
//
Процедура УстановитьОтборАктивныхБизнесПроцессов(БизнесПроцессСписок, ТолькоАктивные) Экспорт

	Если ТолькоАктивные Тогда

		БизнесПроцессСписок.Отбор.Завершен.Установить(Ложь);
		БизнесПроцессСписок.Отбор.Стартован.Установить(Истина);

	Иначе

		БизнесПроцессСписок.Отбор.Завершен.Использование = Ложь;
		БизнесПроцессСписок.Отбор.Стартован.Использование = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьОтборАктивныхБизнесПроцессов()

//////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОТКРЫТИЯ ФОРМИРОВАНИЯ ЗАДАЧ
//

// Функция формирует структуру с параметрыми задачи.
//
// Параметры:
//  ВыборкаПараметры – выборка из результата запроса.
//
// Возвращаемое значение:
//   Структура с параметрами.
//
Функция СформироватьПараметрыШапкиЗадач(ВыборкаПараметры) Экспорт

	ПараметрыЗадач = Новый Структура();
	ПараметрыЗадач.Вставить("Дата", ТекущаяДата());
	ПараметрыЗадач.Вставить("БизнесПроцесс");
	ПараметрыЗадач.Вставить("Исполнитель");
	ПараметрыЗадач.Вставить("Инициатор");

	ПараметрыЗадач.Вставить("Наименование",        ВыборкаПараметры.Представление);
	ПараметрыЗадач.Вставить("ПериодВыполненияДн",  ВыборкаПараметры.ПериодВыполненияДн);
	ПараметрыЗадач.Вставить("ПериодВыполненияЧас", ВыборкаПараметры.ПериодВыполненияЧас);
	ПараметрыЗадач.Вставить("ПериодВыполненияМин", ВыборкаПараметры.ПериодВыполненияМин);
	ПараметрыЗадач.Вставить("ПериодОповещенияДн",  ВыборкаПараметры.ПериодОповещенияДн);
	ПараметрыЗадач.Вставить("ПериодОповещенияЧас", ВыборкаПараметры.ПериодОповещенияЧас);
	ПараметрыЗадач.Вставить("ПериодОповещенияМин", ВыборкаПараметры.ПериодОповещенияМин);
	ПараметрыЗадач.Вставить("Описание",            ВыборкаПараметры.Описание);
	ПараметрыЗадач.Вставить("Объект",              Справочники.Контрагенты.ПустаяСсылка());
	Возврат ПараметрыЗадач;

КонецФункции // СформироватьПараметрыШапкиЗадач()

// Функция устанавливает параметры задачи, при необходимости создает новую задачу.
//
// Параметры:
//  Параметры          - структура параметров шапки задачи.
//  ЗадачаПользователя - задача.
//
// Возвращаемое значение:
//  Задача.
//
Функция УстановитьПараметрыЗадачи(Параметры, ЗадачаПользователя = Неопределено) Экспорт

	Если ЗадачаПользователя = Неопределено Тогда
		ЗадачаПользователя = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	КонецЕсли;

	ЗадачаПользователя.Дата          = Параметры.Дата;
	ЗадачаПользователя.БизнесПроцесс = Параметры.БизнесПроцесс;
	ЗадачаПользователя.ТочкаМаршрута = Параметры.ТочкаМаршрута;
	ЗадачаПользователя.Наименование  = Параметры.Наименование;
	ЗадачаПользователя.Описание      = Параметры.Описание;
	ЗадачаПользователя.Исполнитель   = Параметры.Исполнитель;
	ЗадачаПользователя.Инициатор     = Параметры.Инициатор;
	ЗадачаПользователя.Объект        = Параметры.Объект;

	Если Не ЗначениеЗаполнено(ЗадачаПользователя.Наименование) Тогда
		ЗадачаПользователя.Наименование = Параметры.ТочкаМаршрута.НаименованиеЗадачи;
	КонецЕсли;

	ПериодВыполнения = Параметры.ПериодВыполненияДн * 24 * 60 * 60 + Параметры.ПериодВыполненияЧас * 60 * 60 + Параметры.ПериодВыполненияМин * 60;

	Если ПериодВыполнения > 0 Тогда
		ЗадачаПользователя.СрокИсполнения = ЗадачаПользователя.Дата + ПериодВыполнения;
	КонецЕсли;

	СрокОповещения = Параметры.ПериодОповещенияДн * 24 * 60 * 60 + Параметры.ПериодОповещенияЧас * 60 * 60 + Параметры.ПериодОповещенияМин * 60;

	Если СрокОповещения > 0 И ЗначениеЗаполнено(ЗадачаПользователя.СрокИсполнения - СрокОповещения) Тогда
		ЗадачаПользователя.СрокОповещения = ЗадачаПользователя.СрокИсполнения - СрокОповещения;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗадачаПользователя.СрокОповещения) Тогда
		ЗадачаПользователя.Оповещение = Истина;
	КонецЕсли;

	Возврат ЗадачаПользователя;

КонецФункции // УстановитьПараметрыЗадачи()

// Процедура завершает бизнес-процесс. Вызывается из формы списка.
//
// Параметры:
//  ТекущиеДанные - текущие данные списка.
//
Процедура ЗавершитьБизнесПроцесс(ТекущиеДанные) Экспорт

	Если ТекущиеДанные <> Неопределено Тогда

		БизнесПроцесс = ТекущиеДанные.Ссылка;
		Если БизнесПроцесс.Завершен Или Не БизнесПроцесс.Стартован Тогда
			Возврат;
		КонецЕсли;
		
		Ответ = Вопрос("Принудительное завершение бизнес-процесса используется для прекращения процесса переоценки товаров в случае,
					   |когда по каким-либо причинам дальнейшее выполнение процесса не требуется.
					   |В ходе операции бизнес-процессу будет установлен признак «Завершен», а все невыполненные задачи будут отмечены
					   |как «Выполненные».
					   |Завершить бизнес-процесс?",
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			БизнесПроцесс.ПолучитьОбъект().ВыполнитьЗавершениеБизнесПроцесса();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
# КонецЕсли