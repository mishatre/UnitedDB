
// Обновляет формат сохраненных настроек построителя.
// Вызывается из обработчика обновления ИБ.
//
// Параметры
//  нет
//
Процедура ВыполнитьОбновлениеНастроекОбменаССайтом() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаССайтом.Ссылка,
		|	НастройкиОбменаССайтом.СохраненныеНастройкиПостроителя,
		|	НастройкиОбменаССайтом.КлассифицироватьПоЦеновымГруппам,
		|	НастройкиОбменаССайтом.ВыгружатьВсеХарактеристики
		|ИЗ
		|	Справочник.НастройкиОбменаССайтом КАК НастройкиОбменаССайтом";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаОтбора = Выборка.СохраненныеНастройкиПостроителя.Получить();
		
		Если ТипЗнч(ТаблицаОтбора) = Тип("Структура") Тогда
			// обновлять не требуется
			Продолжить;
		КонецЕсли;
		
		ПостроительОтчета = Новый ПостроительОтчета;
		ПроцедурыОбменаССайтом.НастроитьПостроитель(ПостроительОтчета, Выборка.КлассифицироватьПоЦеновымГруппам, Выборка.ВыгружатьВсеХарактеристики);

		Если ТаблицаОтбора = НеОпределено 
			ИЛИ НЕ ТипЗнч(ТаблицаОтбора) = Тип("ТаблицаЗначений") Тогда
			
			ТаблицаОтбора = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
			
		Иначе
			
			// заменить поле отбора "Свойство" на "СвойствоНоменклатуры"
			Найдено = ТаблицаОтбора.НайтиСтроки(Новый Структура("ПутьКДанным", "Свойство"));
			Для Каждого СтрокаНайдено Из Найдено Цикл
				СтрокаНайдено.ПутьКДанным = "СвойствоНоменклатуры";
				СтрокаНайдено.Имя = "СвойствоНоменклатуры";
				СтрокаНайдено.Представление = "Свойство номенклатуры";
			КонецЦикла;
			
		КонецЕсли;
		
		ТаблицаПорядка = ПроцедурыОбменаССайтом.ПолучитьКопиюПорядкаВТЗ(ПостроительОтчета.Порядок);
		
		СтрукутраНастроекПостроителя = Новый Структура;
		СтрукутраНастроекПостроителя.Вставить("ТаблицаОтбора", ТаблицаОтбора);
		СтрукутраНастроекПостроителя.Вставить("ТаблицаПорядка", ТаблицаПорядка);
		
		НастройкаОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаОбменаОбъект.СохраненныеНастройкиПостроителя = Новый ХранилищеЗначения(СтрукутраНастроекПостроителя);
		НастройкаОбменаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивУзловДляРегистрации(РегистрацияДляТоваров = Истина) Экспорт
	
	МассивУзлов = Новый Массив();
	
	Если РегистрацияДляТоваров Тогда
		
		Для Каждого Элемент Из ПараметрыСеанса.ВсеУзлыДляОбменаССайтомТоварами Цикл
			МассивУзлов.Добавить(Элемент);
		КонецЦикла;
		
	Иначе
		
		Для Каждого Элемент Из ПараметрыСеанса.ВсеУзлыДляОбменаССайтомЗаказами Цикл
			МассивУзлов.Добавить(Элемент);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивУзлов;
	
КонецФункции

Процедура ЗарегистрироватьИзменения(Объект)
	
	Если Не ПараметрыСеанса.НаличиеОбменаССайтом Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	ТипОбъектаДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	// Номенклатура и картинки
	Если ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов") Тогда
		
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
		Для каждого Запись Из Объект Цикл
			
			ТипДанных = ТипЗнч(Запись.Объект);
			
			Если ТипДанных = Тип("СправочникСсылка.Номенклатура") Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Объект);
			ИначеЕсли ТипДанных = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				Если Запись.Объект.ПолучитьОбъект() <> Неопределено Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Объект.Владелец);
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыВРознице")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыВНТТ")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыВРезервеНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыКПередачеСоСкладов")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Номенклатура);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ШтрихКоды") Тогда
		
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Владелец);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации") Тогда
		
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
		
		Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Объект);
			
			// Надо зарегистрировать все изображения (файлы), иначе Битрикс
			// удалит те, что не будут загружены
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ХранилищеДополнительнойИнформации.Ссылка
			|ИЗ
			|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
			|ГДЕ
			|	(НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления)
			|	И ХранилищеДополнительнойИнформации.Объект = &Объект";
			
			Запрос.УстановитьПараметр("Объект", Объект.Объект);
			
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Выборка.Ссылка);
				
			КонецЦикла; 
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.ЕдиницыИзмерения") Тогда			
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда 
			
			МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);	  
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ЦеновыеГруппы") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЦеноваяГруппа В ИЕРАРХИИ(&ЦеноваяГруппа)");
		
		Запрос.УстановитьПараметр("ЦеноваяГруппа", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
		
		Пока Выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Выборка.Ссылка);
			
		КонецЦикла;
		
		// Заказы
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Ложь);
		Для каждого Запись Из Объект Цикл
			
			Если ЗначениеЗаполнено(Запись.ЗаказПокупателя) Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.ЗаказПокупателя);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСКонтрагентами") Тогда
		
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Ложь);
		Для каждого Запись Из Объект Цикл
			
			Если ТипЗнч(Запись.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
				И ЗначениеЗаполнено(Запись.Сделка) Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Запись.Сделка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаДокумент Тогда
		
		МассивУзлов = ПолучитьМассивУзловДляРегистрации(Истина);
		МетаданныеДокумента = Объект.Метаданные();
		
		Если ОбщегоНазначения.ЕстьТабЧастьДокумента("Товары", МетаданныеДокумента) Тогда
			Для каждого СтрокаТЧ Из Объект.Товары Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, СтрокаТЧ.Номенклатура);
			КонецЦикла;
		ИначеЕсли ОбщегоНазначения.ЕстьТабЧастьДокумента("Заказы", МетаданныеДокумента) Тогда
			Для каждого Заказ Из Объект.Заказы Цикл
				Если МетаданныеДокумента.Имя = "ЗакрытиеВнутреннихЗаказов" Тогда
					ИмяРеквизитаТЧ = "ВнутреннийЗаказ";
				Иначе
					ИмяРеквизитаТЧ = "ЗаказПокупателя";
				КонецЕсли;
				Для каждого СтрокаТЧ Из Заказ[ИмяРеквизитаТЧ].Товары Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, СтрокаТЧ.Номенклатура);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьАвтообмен(Настройка, ФлагАвтообмена = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработкаОбмена = Обработки.ОбменССайтом.Создать();
	ОбработкаОбмена.НастройкаСсылка = Настройка;
	ОбработкаОбмена.ВыгрузитьДанные();
	
КонецПроцедуры

Функция ПолучитьФлагПринудительнойПолнойВыгрузки(НастройкаОбмена) Экспорт
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	НастройкиОбменаССайтомСПринудительнойПолнойВыгрузкой.НастройкаОбмена
		|ИЗ
		|	РегистрСведений.НастройкиОбменаССайтомСПринудительнойПолнойВыгрузкой КАК НастройкиОбменаССайтомСПринудительнойПолнойВыгрузкой
		|ГДЕ
		|	НастройкиОбменаССайтомСПринудительнойПолнойВыгрузкой.НастройкаОбмена = &НастройкаОбмена");
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Процедура УстановитьФлагПринудительнойПолнойВыгрузки(НастройкаОбмена, Флаг) Экспорт
	Зап = РегистрыСведений.НастройкиОбменаССайтомСПринудительнойПолнойВыгрузкой.СоздатьМенеджерЗаписи();
	Зап.НастройкаОбмена = НастройкаОбмена;
	Попытка
		Если Флаг Тогда
			Зап.Записать();
		Иначе
			Зап.Удалить();
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ПриЗаписиСправочникаОбменССайтомПриЗаписи(Источник, Отказ) Экспорт
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

Процедура ПриЗаписиРегистраСведенийОбменССайтомПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

Процедура ПриЗаписиРегистраНакопленияОбменССайтомПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

Процедура ПриУдаленииПроведенияДокументовДляОбменаССайтомОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

Функция РазобратьАдресСайта(Знач АдресСайта) Экспорт
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	HTTPСервер		 			= ""; 
	HTTPПорт					= 0;
	HTTPАдресСкрипта 			= "";
	HTTPЗащищенноеСоединение 	= Ложь;
	
	Если ЗначениеЗаполнено(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если ВРег(Лев(АдресСайта, 7)) = "HTTP://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли ВРег(Лев(АдресСайта, 8)) = "HTTPS://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			HTTPЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			HTTPСервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);
			HTTPАдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			HTTPСервер 		 = АдресСайта;
			HTTPАдресСкрипта = "";
		КонецЕсли;	
		ПозицияДвоеточия = Найти(HTTPСервер, ":");
		Если ПозицияДвоеточия > 0 Тогда
			HTTPСерверСПортом = HTTPСервер;
			HTTPСервер		  = Лев(HTTPСерверСПортом, ПозицияДвоеточия - 1);
			HTTPПортСтрока 	  = Прав(HTTPСерверСПортом, СтрДлина(HTTPСерверСПортом) - ПозицияДвоеточия);
		Иначе
			HTTPПортСтрока = "0";
		КонецЕсли;
		
		HTTPПорт = ОбщегоНазначения.ПривестиСтрокуКЧислу(HTTPПортСтрока);
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("HTTPСервер"	  			, HTTPСервер); 
	СтруктураРезультата.Вставить("HTTPПорт"		   			, HTTPПорт);
	СтруктураРезультата.Вставить("HTTPАдресСкрипта"			, HTTPАдресСкрипта);
	СтруктураРезультата.Вставить("HTTPЗащищенноеСоединение"	, HTTPЗащищенноеСоединение);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ВыполнитьТестовоеПодключениеКСерверуHTTP(Объект, СтрокаСообщенияПользователю, 
	РезультатСоединения = Неопределено, ТипСоединения = "catalog") Экспорт
	
	СтруктураПараметровСайта = ПолучитьСтруктуруПараметровДляСоединения(Объект, Объект.HTTPОбменАдресСайта);
	
	Соединение = ПроцедурыОбменаССайтом.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		Возврат "Ошибка при установке соединения с сайтом.";
	КонецЕсли;
	
	ОтветСервера = "";
	РезультатСоединения = HTTPВыполнитьАвторизациюДляСоединения(Соединение, СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения);
	
	Если Не РезультатСоединения Тогда
		Возврат "Соединение с сайтом не установлено.";
	Иначе
		Возврат "Соединение выполнено успешно.";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровДляСоединения(Объект, Знач НачалоАдресаСкрипта = "") Экспорт
	
	СтруктураПараметровСайта = Новый Структура;
	СтруктураПараметровСайта.Вставить("ИмяПользователя", Объект.HTTPОбменИмяПользователя);
	СтруктураПараметровСайта.Вставить("Пароль"		   , Объект.HTTPОбменПароль);
	
	Если Не ПустаяСтрока(НачалоАдресаСкрипта) Тогда
		
		СтруктураАдреса = РазобратьАдресСайта(НачалоАдресаСкрипта);
		
		СтруктураПараметровСайта.Вставить("АдресСкрипта"		, СтруктураАдреса.HTTPАдресСкрипта);
		СтруктураПараметровСайта.Вставить("Сервер"				, СтруктураАдреса.HTTPСервер);
		СтруктураПараметровСайта.Вставить("Порт"				, СтруктураАдреса.HTTPПорт);
		СтруктураПараметровСайта.Вставить("ЗащищенноеСоединение", СтруктураАдреса.HTTPЗащищенноеСоединение);
		
	Иначе
		
		СтруктураПараметровСайта.Вставить("АдресСкрипта"		, Объект.HTTPОбменАдресСкрипта);
		СтруктураПараметровСайта.Вставить("Сервер"				, Объект.HTTPОбменСервер);
		СтруктураПараметровСайта.Вставить("Порт"				, Объект.HTTPОбменПорт);
		СтруктураПараметровСайта.Вставить("ЗащищенноеСоединение", Объект.HTTPОбменЗащищенноеСоединение);
		
	КонецЕсли;
	
	СтруктураПараметровСайта.Вставить("ПроксиСервер"		 , Объект.HTTPОбменПроксиСервер);
	СтруктураПараметровСайта.Вставить("ПроксиПорт"		     , Объект.HTTPОбменПроксиПорт);
	СтруктураПараметровСайта.Вставить("ПроксиИмяПользователя", Объект.HTTPОбменПроксиИмяПользователя);
	СтруктураПараметровСайта.Вставить("ПроксиПароль"		 , Объект.HTTPОбменПроксиПароль);
	СтруктураПараметровСайта.Вставить("ПроксиИспользование"  , Объект.HTTPОбменПроксиИспользование);
	
	Возврат СтруктураПараметровСайта;
	
КонецФункции

Функция HTTPПолучитьДанныеССервера(Соединение, ПараметрыЗапроса="", Заголовки="", СтрокаСообщенияПользователю = "") Экспорт
	
	ОтветСервера   = Неопределено; 
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		СтрокаСообщенияПользователю = "Не удалось получить данные с сервера. Проверьте правильность адреса сервера, порт, имя пользователя и пароль,"
		+ Символы.ПС + "а также настройки подключения к Интернет." + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;	
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Получение данных с сервера: Получен пустой ответ сервера."; 	
		КонецЕсли;
		
	Иначе	
		СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Получение данных с сервера: Ответ сервера не получен."; 
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция HTTPВыполнитьАвторизациюДляСоединения(Соединение, СтруктураПараметровСайта, 
	ОтветСервера, СтрокаСообщенияПользователю, ТипСоединения = "catalog") Экспорт
	
	Успешно    = Истина;
	#Если Клиент Тогда
		Состояние("Установка соединения с сервером...");
	#КонецЕсли
	
	Соединение = ПроцедурыОбменаССайтом.HTTPУстановитьСоединение(СтруктураПараметровСайта);
	
	Если Соединение = Неопределено Тогда
		СтрокаСообщенияПользователю = "Не удалось установить соединение с сервером.";
		Возврат Ложь;
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Проверка имени пользователя и пароля...");
	#КонецЕсли
	
	ОписаниеОшибки = "";
	ОтветСервера = HTTPПолучитьДанныеССервера(Соединение, СтруктураПараметровСайта.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth", , ОписаниеОшибки);
	
	Если ОтветСервера = Неопределено Тогда 
		СтрокаСообщенияПользователю = "Не удалось установить соединение с сервером. Авторизация пользователя не выполнена." + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		СтрокаСообщенияПользователю = "Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль." + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаСообщенияПользователю = ОписаниеОшибки;
	
	Возврат Истина;
	
КонецФункции

Функция HTTPУстановитьСоединение(СтруктураПараметровСайта) Экспорт
	
	Соединение = НеОпределено;
	
	ИнтернетПрокси = НеОпределено;
	
	Если СтруктураПараметровСайта.ПроксиИспользование Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Пользователь = СтруктураПараметровСайта.ПроксиИмяПользователя;
		ИнтернетПрокси.Пароль		= СтруктураПараметровСайта.ПроксиПароль;
		
		ПротоколПрокси = ?(СтруктураПараметровСайта.ЗащищенноеСоединение, "HTTPS", "HTTP");
		
		Если СтруктураПараметровСайта.ПроксиПорт = 0 Тогда
			ИнтернетПрокси.Установить(ПротоколПрокси, СтруктураПараметровСайта.ПроксиСервер);
		Иначе
			ИнтернетПрокси.Установить(ПротоколПрокси, СтруктураПараметровСайта.ПроксиСервер, СтруктураПараметровСайта.ПроксиПорт);
		КонецЕсли;
		
	КонецЕсли;
	
	Порт = ?(ЗначениеЗаполнено(СтруктураПараметровСайта.Порт), СтруктураПараметровСайта.Порт, ?(СтруктураПараметровСайта.ЗащищенноеСоединение, 443, 80));
	
	Попытка
		
		Соединение = Новый HTTPСоединение(СтруктураПараметровСайта.Сервер, Порт, СтруктураПараметровСайта.ИмяПользователя, СтруктураПараметровСайта.Пароль, ИнтернетПрокси, СтруктураПараметровСайта.ЗащищенноеСоединение);
		
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить соединение с сервером " + СтруктураПараметровСайта.Сервер + ":" + Строка(СтруктураПараметровСайта.Порт) + ".
		|Проверьте правильность адреса сервера, порт, имя пользователя и пароль.");
		
		Соединение = Неопределено;
		
	Конецпопытки;
	
	Возврат Соединение;
	
КонецФункции

Процедура НастроитьПостроитель(ПостроительОбъект, КлассифицироватьПоЦеновымГруппам, ВыгружатьВсеХарактеристики, УчетнаяПолитика = НеОпределено) Экспорт
	
	МассивДопустимыхТиповНоменклатуры = Новый Массив;
	МассивДопустимыхТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	МассивДопустимыхТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	МассивДопустимыхТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Комплект);
	
	ПостроительОбъект.Параметры.Вставить("МассивДопустимыхТиповНоменклатуры", МассивДопустимыхТиповНоменклатуры);
	
	ТекДата = ТекущаяДата();
	ПостроительОбъект.Параметры.Вставить("ТекДата", КонецДня(ТекДата));
	
	ПостроительОбъект.Параметры.Вставить("КлассифицироватьПоЦеновымГруппам", КлассифицироватьПоЦеновымГруппам);
	ПостроительОбъект.Параметры.Вставить("ВыгружатьВсеХарактеристики", ВыгружатьВсеХарактеристики);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСХарактеристиками.НоменклатураСсылка КАК НоменклатураСсылка,
		|	НоменклатураСХарактеристиками.ХарактеристикаСсылка КАК ХарактеристикаСсылка,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыВРозницеОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыВНТТОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0) КАК Остаток
		|ПОМЕСТИТЬ ВремНоменклатураСХарактеристиками
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК НоменклатураСсылка,
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаСсылка
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ
		|		НЕ Номенклатура.ЭтоГруппа
		|		И Номенклатура.ВидНоменклатуры.ТипНоменклатуры В(&МассивДопустимыхТиповНоменклатуры)
		|	{ГДЕ
		|		Номенклатура.Ссылка.* КАК Номенклатура}
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ХарактеристикиНоменклатуры.Владелец,
		|		ХарактеристикиНоменклатуры.Ссылка
		|	ИЗ
		|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|	ГДЕ
		|		ХарактеристикиНоменклатуры.Владелец.ВидНоменклатуры.ТипНоменклатуры В(&МассивДопустимыхТиповНоменклатуры)
		|		И ХарактеристикиНоменклатуры.Владелец.ВестиУчетПоХарактеристикам
		|	{ГДЕ
		|		ХарактеристикиНоменклатуры.Владелец.Ссылка.* КАК Номенклатура}) КАК НоменклатураСХарактеристиками
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, {(Склад).*, (Номенклатура).* КАК Номенклатура}) КАК ТоварыНаСкладахОстатки
		|		ПО НоменклатураСХарактеристиками.НоменклатураСсылка = ТоварыНаСкладахОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.ХарактеристикаСсылка = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРознице.Остатки(, {(Склад).*, (Номенклатура).* КАК Номенклатура}) КАК ТоварыВРозницеОстатки
		|		ПО НоменклатураСХарактеристиками.НоменклатураСсылка = ТоварыВРозницеОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.ХарактеристикаСсылка = ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВНТТ.Остатки(, {(Склад).*, (Номенклатура).* КАК Номенклатура}) КАК ТоварыВНТТОстатки
		|		ПО НоменклатураСХарактеристиками.НоменклатураСсылка = ТоварыВНТТОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.ХарактеристикаСсылка = ТоварыВНТТОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, {(Склад).*, (Номенклатура).* КАК Номенклатура}) КАК ТоварыВРезервеНаСкладахОстатки
		|		ПО НоменклатураСХарактеристиками.НоменклатураСсылка = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.ХарактеристикаСсылка = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, {(Склад).*, (Номенклатура).* КАК Номенклатура}) КАК ТоварыКПередачеСоСкладовОстатки
		|		ПО НоменклатураСХарактеристиками.НоменклатураСсылка = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		|			И НоменклатураСХарактеристиками.ХарактеристикаСсылка = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|		ПО НоменклатураСХарактеристиками.НоменклатураСсылка = КатегорииОбъектов.Объект
		|ГДЕ
		|	(НЕ &КлассифицироватьПоЦеновымГруппам
		|			ИЛИ &КлассифицироватьПоЦеновымГруппам
		|				И НЕ НоменклатураСХарактеристиками.НоменклатураСсылка.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
		|{ГДЕ
		|	(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыВРозницеОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыВНТТОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток, 0)) КАК Остаток,
		|	(ЕСТЬNULL(КатегорииОбъектов.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииОбъектов.ПустаяСсылка))).* КАК КатегорияНоменклатуры}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСсылка,
		|	ХарактеристикаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвойстваНоменклатуры.Номенклатура КАК НоменклатураСсылка,
		|	СвойстваНоменклатуры.СвойствоНоменклатуры КАК СвойствоНоменклатурыСсылка,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ ВремЗначенияСвойствНоменклатуры
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВремНоменклатураСХарактеристиками.НоменклатураСсылка КАК Номенклатура,
		|		СвойстваОбъектов.Ссылка КАК СвойствоНоменклатуры
		|	ИЗ
		|		ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками,
		|		ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|	ГДЕ
		|		СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
		|	{ГДЕ
		|		СвойстваОбъектов.Ссылка.* КАК СвойствоНоменклатуры}) КАК СвойстваНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО СвойстваНоменклатуры.Номенклатура = ЗначенияСвойствОбъектов.Объект
		|			И СвойстваНоменклатуры.СвойствоНоменклатуры = ЗначенияСвойствОбъектов.Свойство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСсылка,
		|	СвойствоНоменклатурыСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВремНоменклатураСХарактеристиками.НоменклатураСсылка КАК НоменклатураСсылка,
		|	ВремНоменклатураСХарактеристиками.ХарактеристикаСсылка КАК ХарактеристикаСсылка,
		|	ВремНоменклатураСХарактеристиками.Остаток КАК Остаток,
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦенСсылка,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаЦеныСсылка,
		|	ЦеныНоменклатурыСрезПоследних.Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЦенаБезХарактеристики,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияЦеныСсылка
		|ПОМЕСТИТЬ ВремЦены
		|ИЗ
		|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РасчетныеЦены.Номенклатура КАК Номенклатура,
		|			РасчетныеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			РасчетныеЦены.ТипЦен КАК ТипЦен,
		|			ВЫБОР
		|				КОГДА РасчетныеЦены.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|					ТОГДА РасчетныеЦены.ВалютаТипаЦен
		|				ИНАЧЕ РасчетныеЦены.ВалютаЦеныПоДиапазону
		|			КОНЕЦ КАК Валюта,
		|			ВЫБОР
		|				КОГДА РасчетныеЦены.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
		|					ТОГДА РасчетныеЦены.БазоваяЦена * РасчетныеЦены.КоэффициентПересчетаБазовойЦены * (1 + РасчетныеЦены.ПроцентСкидкиНаценки / 100)
		|				ИНАЧЕ РасчетныеЦены.ЦенаПоДиапазону
		|			КОНЕЦ КАК Цена,
		|			РасчетныеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмерения
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ДинамическиеЦены.Номенклатура КАК Номенклатура,
		|				ДинамическиеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				ДинамическиеЦены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|				ДинамическиеЦены.СпособРасчетаЦены КАК СпособРасчетаЦены,
		|				ДинамическиеЦены.ТипЦен КАК ТипЦен,
		|				ДинамическиеЦены.ТипЦен.ВалютаЦены КАК ВалютаТипаЦен,
		|				ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) КАК КурсВалютыЦены,
		|				ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) КАК КратностьКурсаВалютыЦены,
		|				ДинамическиеЦены.БазоваяЦена КАК БазоваяЦена,
		|				ДинамическиеЦены.ВалютаБазовойЦены КАК ВалютаБазовойЦены,
		|				ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) КАК КурсВалютыБазовойЦены,
		|				ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) КАК КратностьКурсаВалютыБазовойЦены,
		|				ДинамическиеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмеренияБазовойЦены,
		|				ЕСТЬNULL(ДиапазоныЦенДляНаценкиСрезПоследних.Цена, 0) КАК ЦенаПоДиапазону,
		|				ДиапазоныЦенДляНаценкиСрезПоследних.Валюта КАК ВалютаЦеныПоДиапазону,
		|				ВЫБОР
		|					КОГДА ДинамическиеЦены.ТипЦен.ВалютаЦены = ДинамическиеЦены.ВалютаБазовойЦены
		|						ТОГДА 1
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) = 1
		|								ТОГДА ВЫБОР
		|										КОГДА ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) = 0
		|											ТОГДА 0
		|										ИНАЧЕ ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) / ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0)
		|									КОНЕЦ
		|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) <> 1
		|									И ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) = 1
		|								ТОГДА ВЫБОР
		|										КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) = 0
		|											ТОГДА 0
		|										ИНАЧЕ ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) / ЕСТЬNULL(КурсыВалютыЦены.Курс, 0)
		|									КОНЕЦ
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0) = 0
		|										ТОГДА 0
		|									ИНАЧЕ ЕСТЬNULL(КурсыВалютыБазовойЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) / ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) * ЕСТЬNULL(КурсыВалютыБазовойЦены.Кратность, 0)
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ КАК КоэффициентПересчетаБазовойЦены
		|			ИЗ
		|				(ВЫБРАТЬ
		|					БазовыеЦены.ТипЦен КАК ТипЦен,
		|					БазовыеЦены.Номенклатура КАК Номенклатура,
		|					БазовыеЦены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					БазовыеЦены.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|					БазовыеЦены.СпособРасчетаЦены КАК СпособРасчетаЦены,
		|					БазовыеЦены.БазоваяЦена КАК БазоваяЦена,
		|					БазовыеЦены.ВалютаБазовойЦены КАК ВалютаБазовойЦены,
		|					БазовыеЦены.ЕдиницаИзмеренияБазовойЦены КАК ЕдиницаИзмеренияБазовойЦены,
		|					МИНИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница) КАК ВерхняяГраница
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ТипыЦенНоменклатуры.Ссылка КАК ТипЦен,
		|						ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|						ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|						ЦеныНоменклатурыСрезПоследних.Цена КАК БазоваяЦена,
		|						ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаБазовойЦены,
		|						ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовойЦены,
		|						ВЫБОР
		|							КОГДА ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ПроцентСкидкиНаценки ЕСТЬ NULL 
		|								ТОГДА ТипыЦенНоменклатуры.ПроцентСкидкиНаценки
		|							ИНАЧЕ ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ПроцентСкидкиНаценки
		|						КОНЕЦ КАК ПроцентСкидкиНаценки,
		|						ТипыЦенНоменклатуры.СпособРасчетаЦены КАК СпособРасчетаЦены
		|					ИЗ
		|						Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|							ПО (ТипыЦенНоменклатуры.Рассчитывается)
		|								И (ЦеныНоменклатурыСрезПоследних.ТипЦен = ТипыЦенНоменклатуры.БазовыйТипЦен)
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних
		|							ПО (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ТипЦен = ТипыЦенНоменклатуры.Ссылка)
		|								И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
		|								И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры)
		|								И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
		|								И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения)
		|								И (ПроцентыСкидкиНаценкиДинамическихЦенСрезПоследних.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип))
		|					{ГДЕ
		|						ТипыЦенНоменклатуры.Ссылка.* КАК ТипЦен}) КАК БазовыеЦены
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних КАК ДиапазоныЦенДляНаценкиСрезПоследних
		|						ПО БазовыеЦены.БазоваяЦена < ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
		|							И БазовыеЦены.ТипЦен = ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
		|				
		|				СГРУППИРОВАТЬ ПО
		|					БазовыеЦены.ХарактеристикаНоменклатуры,
		|					БазовыеЦены.СпособРасчетаЦены,
		|					БазовыеЦены.ТипЦен,
		|					БазовыеЦены.Номенклатура,
		|					БазовыеЦены.ВалютаБазовойЦены,
		|					БазовыеЦены.ЕдиницаИзмеренияБазовойЦены,
		|					БазовыеЦены.ПроцентСкидкиНаценки,
		|					БазовыеЦены.БазоваяЦена) КАК ДинамическиеЦены
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних КАК ДиапазоныЦенДляНаценкиСрезПоследних
		|					ПО ДинамическиеЦены.БазоваяЦена < ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
		|						И ДинамическиеЦены.ТипЦен = ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен
		|						И ДинамическиеЦены.ВерхняяГраница = ДиапазоныЦенДляНаценкиСрезПоследних.ВерхняяГраница
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютыЦены
		|					ПО ДинамическиеЦены.ТипЦен.ВалютаЦены = КурсыВалютыЦены.Валюта
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютыБазовойЦены
		|					ПО ДинамическиеЦены.ВалютаБазовойЦены = КурсыВалютыБазовойЦены.Валюта) КАК РасчетныеЦены
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|			ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры,
		|			ЦеныНоменклатурыСрезПоследних.ТипЦен,
		|			ЦеныНоменклатурыСрезПоследних.Валюта,
		|			ЦеныНоменклатурыСрезПоследних.Цена,
		|			ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|		ИЗ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, НЕ ТипЦен.Рассчитывается {(ТипЦен).*}) КАК ЦеныНоменклатурыСрезПоследних) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВремНоменклатураСХарактеристиками.НоменклатураСсылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И (ВремНоменклатураСХарактеристиками.ХарактеристикаСсылка = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
		|					И НЕ &ВыгружатьВсеХарактеристики
		|				ИЛИ &ВыгружатьВсеХарактеристики
		|					И (ВремНоменклатураСХарактеристиками.ХарактеристикаСсылка = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
		|						ИЛИ ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСсылка,
		|	ХарактеристикаСсылка,
		|	ТипЦенСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВремНоменклатураСХарактеристиками.ХарактеристикаСсылка КАК ХарактеристикаСсылка,
		|	ЗначенияСвойствОбъектов.Свойство КАК СвойствоХарактеристикиСсылка,
		|	ЗначенияСвойствОбъектов.Значение КАК ЗначениеСвойстваХарактеристики
		|ПОМЕСТИТЬ ВремЗначенияСвойствХарактеристик
		|ИЗ
		|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ВремНоменклатураСХарактеристиками.ХарактеристикаСсылка = ЗначенияСвойствОбъектов.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХарактеристикаСсылка,
		|	СвойствоХарактеристикиСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВремНоменклатураСХарактеристиками.НоменклатураСсылка КАК НоменклатураСсылка,
		|	ВремНоменклатураСХарактеристиками.ХарактеристикаСсылка КАК ХарактеристикаСсылка,
		|	Штрихкоды.Штрихкод
		|ПОМЕСТИТЬ ВремШтрихКоды
		|ИЗ
		|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ПО ВремНоменклатураСХарактеристиками.НоменклатураСсылка = Штрихкоды.Владелец
		|			И ВремНоменклатураСХарактеристиками.ХарактеристикаСсылка = Штрихкоды.ХарактеристикаНоменклатуры
		|			И ВремНоменклатураСХарактеристиками.НоменклатураСсылка.ЕдиницаХраненияОстатков = Штрихкоды.ЕдиницаИзмерения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСсылка,
		|	ХарактеристикаСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВремНоменклатураСХарактеристиками.НоменклатураСсылка КАК НоменклатураСсылка,
		|	ЕСТЬNULL(ХранилищеДополнительнойИнформации.Ссылка, ЗНАЧЕНИЕ(Справочник.ХранилищеДополнительнойИнформации.ПустаяСсылка)) КАК ХранилищеСсылка
		|ПОМЕСТИТЬ ВремФайлы
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
		|		ПО (ВремНоменклатураСХарактеристиками.НоменклатураСсылка = ХранилищеДополнительнойИнформации.Объект)
		|ГДЕ
		|	НЕ ХранилищеДополнительнойИнформации.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ВремЗначенияСвойствНоменклатуры.НоменклатураСсылка,
		|	ВремЗначенияСвойствНоменклатуры.СвойствоНоменклатурыСсылка,
		|	ВремЗначенияСвойствНоменклатуры.Значение
		|ИЗ
		|	ВремЗначенияСвойствНоменклатуры КАК ВремЗначенияСвойствНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ВремЗначенияСвойствХарактеристик.ХарактеристикаСсылка,
		|	ВремЗначенияСвойствХарактеристик.СвойствоХарактеристикиСсылка,
		|	ВремЗначенияСвойствХарактеристик.ЗначениеСвойстваХарактеристики
		|ИЗ
		|	ВремЗначенияСвойствХарактеристик КАК ВремЗначенияСвойствХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ВремЦены.НоменклатураСсылка,
		|	ВремЦены.ХарактеристикаСсылка,
		|	ВремЦены.Остаток,
		|	ВремЦены.ТипЦенСсылка,
		|	ВремЦены.ВалютаЦеныСсылка,
		|	ВремЦены.Цена,
		|	ВремЦены.ЦенаБезХарактеристики,
		|	ВремЦены.ЕдиницаИзмеренияЦеныСсылка
		|ИЗ
		|	ВремЦены КАК ВремЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ВремШтрихКоды.НоменклатураСсылка,
		|	ВремШтрихКоды.ХарактеристикаСсылка,
		|	ВремШтрихКоды.Штрихкод
		|ИЗ
		|	ВремШтрихКоды КАК ВремШтрихКоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ВремФайлы.НоменклатураСсылка,
		|	ВремФайлы.ХранилищеСсылка
		|ИЗ
		|	ВремФайлы КАК ВремФайлы";
	
	
	ТекстЗапросаГруппыНоменклатуры =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремНоменклатураСХарактеристиками.НоменклатураСсылка КАК НоменклатураСсылка
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|{УПОРЯДОЧИТЬ ПО
	|	НоменклатураСсылка КАК Номенклатура}
	|ИТОГИ ПО
	|	НоменклатураСсылка ТОЛЬКО ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстЗапросаЦеновыеГруппы =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремНоменклатураСХарактеристиками.НоменклатураСсылка.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВремНоменклатураСХарактеристиками.НоменклатураСсылка КАК НоменклатураСсылка
	|ИЗ
	|	ВремНоменклатураСХарактеристиками КАК ВремНоменклатураСХарактеристиками
	|{УПОРЯДОЧИТЬ ПО
	|	НоменклатураСсылка.* КАК Номенклатура}
	|ИТОГИ ПО
	|	ЦеноваяГруппа ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Если КлассифицироватьПоЦеновымГруппам Тогда
		ТекстЗапроса = ТекстЗапроса + ";" + ТекстЗапросаЦеновыеГруппы;
	Иначе
		ТекстЗапроса = ТекстЗапроса + ";" + ТекстЗапросаГруппыНоменклатуры;
	КонецЕсли;
	
	ПостроительОбъект.Текст = ТекстЗапроса;
	
КонецПроцедуры

Процедура ЗаполнитьОтборПостроителя(ПостроительОбъект) Экспорт
	
	ОтборКоличество = ПостроительОбъект.Отбор.Количество();
	Для Сч = 1 По ОтборКоличество Цикл
		ПостроительОбъект.Отбор.Удалить(ОтборКоличество - Сч);
	КонецЦикла;
	
	ПостроительОбъект.Отбор.Добавить("Номенклатура", , "Номенклатура");
	
	ПостроительОбъект.Отбор.Добавить("ТипЦен", , "Тип цен");
	ПостроительОбъект.ДоступныеПоля.ТипЦен.Представление = "Тип цен";
	
	ПостроительОбъект.Отбор.Добавить("Склад", , "Остатки по складам");
	ПостроительОбъект.ДоступныеПоля.Склад.Представление = "Остатки по складам";
	
	ПостроительОбъект.Отбор.Добавить("Остаток", , "Остаток");
	ПостроительОбъект.ДоступныеПоля.Остаток.Представление = "Остаток";
	
	ПостроительОбъект.Отбор.Добавить("СвойствоНоменклатуры", , "Свойство номенклатуры");
	ПостроительОбъект.ДоступныеПоля.СвойствоНоменклатуры.Представление = "Свойство номенклатуры";
	
	ПостроительОбъект.Отбор.Добавить("КатегорияНоменклатуры", , "Категория номенклатуры");
	ПостроительОбъект.ДоступныеПоля.КатегорияНоменклатуры.Представление = "Категория номенклатуры";
	
КонецПроцедуры

Процедура ЗаполнитьПорядокПостроителя(ПостроительОбъект) Экспорт
	
	ПорядокКоличество = ПостроительОбъект.Порядок.Количество();
	Для Сч = 1 По ПорядокКоличество Цикл
		ПостроительОбъект.Порядок.Удалить(ПорядокКоличество - Сч);
	КонецЦикла;
	
	ПостроительОбъект.Порядок.Добавить("Номенклатура.Наименование", "НоменклатураНаименование", "Номенклатура.Наименование");
	
КонецПроцедуры

Процедура ЗаданиеОбменССайтом(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиОбменаССайтом.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьАвтообмен(НастройкаОбмена, Истина);
	
КонецПроцедуры

Функция ПолучитьЗаказыСОплатойИОтгрузкойПоКатегориям(МассивИзменений, МассивЗагруженныхДокументов) Экспорт
	
	Запрос = Новый Запрос();
	КоличествоЗаказовОграничения = МассивИзменений.Количество();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка,
	|	ЗаказыОплатаОтгрузка.Отгружен,
	|	ЗаказыОплатаОтгрузка.Оплачен,
	|	ЗаказыОплатаОтгрузка.ДокументОтгрузки.Дата КАК ДатаДокументаОтгрузки,
	|	ЗаказыОплатаОтгрузка.ДокументОтгрузки.Номер КАК НомерДокументаОтгрузки,
	|	ЗаказыОплатаОтгрузка.ДокументОплаты.Дата КАК ДатаДокументаОплаты,
	|	ЗаказыОплатаОтгрузка.ДокументОплаты.Номер КАК НомерДокументаОплаты,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.Номер КАК Номер,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.Дата КАК Дата,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.Проведен КАК Проведен,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.Контрагент КАК Контрагент,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.ДатаВходящегоДокументаЭлектронногоОбмена КАК ДатаВходящегоДокументаЭлектронногоОбмена,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.ДатаОплаты КАК ДатаОплаты,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.Комментарий КАК Комментарий,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.Товары.(
	|		ЗаказСсылка.Товары.Ссылка КАК Ссылка,
	|		ЗаказСсылка.Товары.НомерСтроки КАК НомерСтроки,
	|		ЗаказСсылка.Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказСсылка.Товары.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		ЗаказСсылка.Товары.Количество КАК Количество,
	|		ЗаказСсылка.Товары.КоличествоМест КАК КоличествоМест,
	|		ЗаказСсылка.Товары.Коэффициент КАК Коэффициент,
	|		ЗаказСсылка.Товары.Номенклатура КАК Номенклатура,
	|		ЗаказСсылка.Товары.ПлановаяСебестоимость КАК ПлановаяСебестоимость,
	|		ЗаказСсылка.Товары.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ЗаказСсылка.Товары.Размещение КАК Размещение,
	|		ЗаказСсылка.Товары.СтавкаНДС КАК СтавкаНДС,
	|		ЗаказСсылка.Товары.Сумма КАК Сумма,
	|		ЗаказСсылка.Товары.СуммаНДС КАК СуммаНДС,
	|		ЗаказСсылка.Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказСсылка.Товары.Цена КАК Цена,
	|		ЗаказСсылка.Товары.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказСсылка.Товары.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|		ЗаказСсылка.Товары.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|		ЗаказСсылка.Товары.КлючСтроки КАК КлючСтроки,
	|		ЗаказСсылка.Товары.СерияНоменклатуры КАК СерияНоменклатуры
	|	) КАК Товары,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.Услуги.(
	|		ЗаказСсылка.Услуги.Ссылка КАК Ссылка,
	|		ЗаказСсылка.Услуги.НомерСтроки КАК НомерСтроки,
	|		ЗаказСсылка.Услуги.Содержание КАК Содержание,
	|		ЗаказСсылка.Услуги.Количество КАК Количество,
	|		ЗаказСсылка.Услуги.Цена КАК Цена,
	|		ЗаказСсылка.Услуги.Сумма КАК Сумма,
	|		ЗаказСсылка.Услуги.СтавкаНДС КАК СтавкаНДС,
	|		ЗаказСсылка.Услуги.СуммаНДС КАК СуммаНДС,
	|		ЗаказСсылка.Услуги.Номенклатура КАК Номенклатура,
	|		ЗаказСсылка.Услуги.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ЗаказСсылка.Услуги.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказСсылка.Услуги.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|		ЗаказСсылка.Услуги.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки
	|	) КАК Услуги,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.НомерВходящегоДокументаЭлектронногоОбмена КАК НомерВходящегоДокументаЭлектронногоОбмена,
	|	ЗаказыОплатаОтгрузка.ЗаказСсылка.УчитыватьНДС КАК УчитыватьНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказы.ЗаказСсылка КАК ЗаказСсылка,
	|		Заказы.Отгружен КАК Отгружен,
	|		Заказы.Оплачен КАК Оплачен,
	|		МАКСИМУМ(Заказы.ДокументОтгрузки) КАК ДокументОтгрузки,
	|		МАКСИМУМ(Заказы.ДокументОплаты) КАК ДокументОплаты
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Заказ.Ссылка КАК ЗаказСсылка,
	|			ВЫБОР
	|				КОГДА (НЕ Заказ.Проведен)
	|						ИЛИ ЗаказыПокупателей.Регистратор ЕСТЬ NULL 
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток, 0) <= 0
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ КАК Отгружен,
	|			ВЫБОР
	|				КОГДА (НЕ Заказ.Проведен)
	|						ИЛИ РасчетыСКонтрагентами.Регистратор ЕСТЬ NULL 
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) <= 0
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ КАК Оплачен,
	|			ЗаказыПокупателей.Регистратор КАК ДокументОтгрузки,
	|			РасчетыСКонтрагентами.Регистратор КАК ДокументОплаты
	|		ИЗ
	|			Документ.ЗаказПокупателя КАК Заказ
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|				ПО (КатегорииОбъектов.Объект = Заказ.Ссылка)
	|					И (КатегорииОбъектов.Категория = ЗНАЧЕНИЕ(Справочник.КатегорииОбъектов.ЗаказСWEBСайта))
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, &УсловиеОграниченияПоЗаказамОстатки) КАК ЗаказыПокупателейОстатки
	|				ПО Заказ.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки(, &УсловиеОграниченияПоРасчетамОстатки) КАК РасчетыСКонтрагентамиОстатки
	|				ПО Заказ.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|				ПО Заказ.Ссылка = ЗаказыПокупателей.ЗаказПокупателя
	|					И (ЗаказыПокупателей.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг)
	|					И (ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.расход))
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|				ПО Заказ.Ссылка = РасчетыСКонтрагентами.Сделка
	|					И (РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.АккредитивПолученный
	|						ИЛИ РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ОплатаОтПокупателяПлатежнойКартой
	|						ИЛИ РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|						ИЛИ РасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер)
	|					И (РасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.расход))
	|		ГДЕ
	|			&УсловиеОграниченияПоДокументам) КАК Заказы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Заказы.ЗаказСсылка,
	|		Заказы.Отгружен,
	|		Заказы.Оплачен) КАК ЗаказыОплатаОтгрузка";
	
	
	Если КоличествоЗаказовОграничения > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивДокументовСсылок", МассивИзменений);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграниченияПоДокументам", " Заказ.Ссылка В (&МассивДокументовСсылок)");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграниченияПоЗаказамОстатки", " ЗаказПокупателя В (&МассивДокументовСсылок) ");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграниченияПоРасчетамОстатки", " Сделка В (&МассивДокументовСсылок) ");
		
	Иначе	
		
		Если МассивЗагруженныхДокументов.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивДокументовСсылокНеВыгружать", МассивЗагруженныхДокументов);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграниченияПоДокументам", " НЕ (Заказ.Ссылка В (&МассивДокументовСсылокНеВыгружать))");
		Иначе	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграниченияПоДокументам", "ИСТИНА");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграниченияПоЗаказамОстатки", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграниченияПоРасчетамОстатки", "");
		
	КонецЕсли;
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Процедура ОбработатьСтрокуТаблицыКаталогов(ДанныеСтроки, ОформлениеЯчейки) Экспорт
	
	ГруппыВыбраны = Ложь;
	
	//
	
	Если НЕ ТипЗнч(ДанныеСтроки.Группы) = Тип("СписокЗначений") Тогда
		ДанныеСтроки.Группы = Новый СписокЗначений;
	КонецЕсли;
	
	СписокГрупп = ДанныеСтроки.Группы;
	
	// удалить не группы номенклатуры
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		ТекГруппа = ЭлементСЗ.Значение;
		Если (НЕ ТекГруппа.ЭтоГруппа) И (ТипЗнч(ТекГруппа) = Тип("СправочникСсылка.Номенклатура")) Тогда
			МассивУдалить.Добавить(ЭлементСЗ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		СписокГрупп.Удалить(ЭлементМУ);
	КонецЦикла;
	// удалить подчиненные элементы
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		ТекГруппа = ЭлементСЗ.Значение;
		Для Каждого ЭлементСЗВлож Из СписокГрупп Цикл
			Если ТекГруппа.ПринадлежитЭлементу(ЭлементСЗВлож.Значение) Тогда
				МассивУдалить.Добавить(ЭлементСЗ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		СписокГрупп.Удалить(ЭлементМУ);
	КонецЦикла;
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		Если ЗначениеЗаполнено(ЭлементСЗ.Значение) Тогда
			ГруппыВыбраны = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ИдКаталога) Тогда
		ДанныеСтроки.ИдКаталога = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	//
	
	Если ГруппыВыбраны Тогда
		ОформлениеЯчейки.Шрифт = Новый Шрифт;
	Иначе	
		ОформлениеЯчейки.Текст = "<все>";
		ОформлениеЯчейки.Шрифт = Новый Шрифт(,,,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКаталогов(СохраненнаяТаблицаКаталогов, ТаблицаКаталогов) Экспорт
	СохрТаблицаКаталогов = СохраненнаяТаблицаКаталогов.Получить();
	Если ТипЗнч(СохрТаблицаКаталогов) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаКаталогов.Колонки.Количество() = 0 Тогда
			ТаблицаКаталогов = СохрТаблицаКаталогов.Скопировать();
		Иначе
			ТаблицаКаталогов.Очистить();
			Для Каждого СтрокаСТК Из СохрТаблицаКаталогов Цикл
				НовСтрокаТК = ТаблицаКаталогов.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТК, СтрокаСТК);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьТаблицуКаталогов(СохраненнаяТаблицаКаталогов, ТаблицаКаталогов) Экспорт
	СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталогов);
КонецПроцедуры	

Функция СоздатьТаблицуКаталогов() Экспорт
	
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("Каталог");
	ТаблицаКаталогов.Колонки.Добавить("Группы");
	ТаблицаКаталогов.Колонки.Добавить("ИдКаталога");
	
	НовСтрокаТК = ТаблицаКаталогов.Добавить();
	НовСтрокаТК.Каталог = "Основной каталог товаров";
	НовСтрокаТК.Группы = Новый СписокЗначений;
	НовСтрокаТК.ИдКаталога = Строка(Новый УникальныйИдентификатор);
	
	Возврат ТаблицаКаталогов;
КонецФункции

Функция ГруппыВыбраны(ТаблицаКаталогов) Экспорт
	
	ГруппыВыбраны = Ложь;
	Для Каждого СтрокаТК Из ТаблицаКаталогов Цикл
		Если ТипЗнч(СтрокаТК.Группы) = Тип("СписокЗначений") Тогда
			Для Каждого Группа Из СтрокаТК.Группы Цикл
				Если ЗначениеЗаполнено(Группа.Значение) Тогда
					ГруппыВыбраны = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГруппыВыбраны;
	
КонецФункции

Процедура ЗаполнитьПорядокПоТаблицеЗначений(Порядок, ТЗ) Экспорт

	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокКоличество = Порядок.Количество();
	Для Н = 1 По ПорядокКоличество Цикл
		Порядок.Удалить(ПорядокКоличество - Н);
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Порядок.Добавить(СтрокаТЗ.ПутьКданным, СтрокаТЗ.Имя, СтрокаТЗ.Представление, СтрокаТЗ.Направление);
	КонецЦикла;

КонецПроцедуры 

Функция ПолучитьКопиюПорядкаВТЗ(Порядок) Экспорт

	Копия = Новый ТаблицаЗначений;
	Копия.Колонки.Добавить("Имя");
	Копия.Колонки.Добавить("Представление");
	Копия.Колонки.Добавить("ПутьКДанным");
	Копия.Колонки.Добавить("Направление");
	Копия.Колонки.Добавить("Данные");
	
	Для каждого ЭлементПорядка Из Порядок Цикл
		ЗаполнитьЗначенияСвойств(Копия.Добавить(), ЭлементПорядка);
	КонецЦикла;
	
	Возврат Копия;

КонецФункции
