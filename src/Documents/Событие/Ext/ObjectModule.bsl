Перем мУдалятьДвижения;


Перем мСписокСтарыхПользователей;

Перем мСтараяДатаНачалаСобытия;

Перем мСтараяДатаОкончанияСобытия;

Перем мСписокПользователей;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСписокПользователейДляКалендаря() Экспорт

	СписокПользователей = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Ответственный) Тогда
		СписокПользователей.Добавить(Ответственный);
	Иначе
		СписокПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Возврат СписокПользователей;
	
КонецФункции // ПолучитьСписокПользователейДляКалендаря()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если НЕ Проведен Тогда
		Предупреждение("Документ можно распечатать только после его проведения!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
	КонецЕсли;

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция СформироватьЗапросПоШапке()
   	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаПо", ОкончаниеСобытия - 1);
	Запрос.УстановитьПараметр("Свободно", Перечисления.Занятость.Свободно);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланируемыеВстречи.НачалоСобытия,
		|	ПланируемыеВстречи.Помещение,
		|	ПланируемыеВстречи.ОкончаниеСобытия,
		|	ВЫБОР КОГДА ПланируемаяЗанятостьПомещений.Занятость <> &Свободно ИЛИ ПланируемаяЗанятостьПомещений.Период >= ПланируемыеВстречи.НачалоСобытия ТОГДА ""Нельзя"" ИНАЧЕ ""Можно"" КОНЕЦ КАК ПроверяемоеЗначение,
		|	ПланируемыеВстречи.Ссылка
		|ИЗ
		|	Документ.Событие КАК ПланируемыеВстречи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемаяЗанятостьПомещений.СрезПоследних(&ДатаПо, Помещение = &Помещение) КАК ПланируемаяЗанятостьПомещений
		|		ПО ПланируемыеВстречи.Помещение = ПланируемаяЗанятостьПомещений.Помещение
		|
		|ГДЕ
		|   ПланируемыеВстречи.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Помещение) и ВыборкаПоШапкеДокумента.ПроверяемоеЗначение <> "Можно" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Помещение на указанный период времени ранее уже зарезервировано!", Отказ);
	КонецЕсли;

	Если ВыборкаПоШапкеДокумента.НачалоСобытия = ВыборкаПоШапкеДокумента.ОкончаниеСобытия
		ИЛИ (НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НачалоСобытия)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задана продолжительность встречи!", Отказ);
	ИначеЕсли ВыборкаПоШапкеДокумента.НачалоСобытия > ВыборкаПоШапкеДокумента.ОкончаниеСобытия Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Начало встречи не может быть позже её окончания!", Отказ);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ВвестиЗаписьВРегистр(Дата, НомерНачальнойСтроки, НомерКонечнойСтроки, НаборЗаписейРегистра, ПоПомещению = Ложь)

	Если ПоПомещению Тогда
		
		Если НЕ ЗначениеЗаполнено(Помещение) Тогда
			Возврат;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		
		НоваяЗапись.Событие              = Ссылка;
		НоваяЗапись.Дата                 = Дата;
		НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
		НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
		НоваяЗапись.Пользователь         = Справочники.Пользователи.ПустаяСсылка();
		НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
		НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
		
	Иначе
		
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
	
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
		
			НоваяЗапись.Событие              = Ссылка;
			НоваяЗапись.Дата                 = Дата;
			НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
			НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
			НоваяЗапись.Пользователь         = ЭлементСпискаПользователей.Значение;
			НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
			НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
			НоваяЗапись.Контрагент           = Контрагент;
			НоваяЗапись.КонтактноеЛицо       = КонтактноеЛицо;
			НоваяЗапись.ОписаниеСобытия      = ОписаниеСобытия;
			НоваяЗапись.Важность             = Важность;
			НоваяЗапись.СостояниеСобытия     = СостояниеСобытия;
			НоваяЗапись.ТипСобытия           = ТипСобытия;
			НоваяЗапись.ВидСобытия           = ВидСобытия;
	
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьСтарыеЗначения()

	мСписокСтарыхПользователей = Новый СписокЗначений;
	мСтараяДатаНачалаСобытия = НачалоСобытия;
	мСтараяДатаОкончанияСобытия = ОкончаниеСобытия;
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущееСобытие", Ссылка);
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Пользователь КАК Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие = &ТекущееСобытие
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
	
		ТаблицаПользователей = ТаблицаЗапроса.Скопировать();
		ТаблицаПользователей.Свернуть("Пользователь");
		мСписокСтарыхПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
		
		ТаблицаЗапроса.Свернуть("ДатаСобытия");
		ТаблицаЗапроса.Сортировать("ДатаСобытия ВОЗР");
		
		мСтараяДатаНачалаСобытия = ТаблицаЗапроса[0].ДатаСобытия;
		мСтараяДатаОкончанияСобытия = ТаблицаЗапроса[ТаблицаЗапроса.Количество() - 1].ДатаСобытия;
	
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДокОснование)

	Если ДокОснование = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокОснование)) Тогда
		возврат;
	КонецЕсли;

	ТипСобытия       = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	ВидСобытия       = Перечисления.ВидыСобытий.ТелефонныйЗвонок;
	Основание        = ДокОснование;
	Важность         = Перечисления.Важность.Средняя;
	СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано;
	Ответственный    = глЗначениеПеременной("глТекущийПользователь");
		
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Проект", ДокОснование.Метаданные()) Тогда
		Проект = ДокОснование.Проект;
	КонецЕсли;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
		Контрагент     = ДокОснование.Контрагент;
		КонтактноеЛицо = ДокОснование.КонтактноеЛицоКонтрагента;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПереоценкаТоваровПринятыхНаКомиссию")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		Контрагент = ДокОснование.Контрагент;

	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РезервированиеТоваров") Тогда
		
		Если ДокОснование.Заказ <> Неопределено И НЕ ДокОснование.Заказ.Пустая() Тогда
			ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент     = ДокОснование.Заказ.Контрагент;
			КонтактноеЛицо = ДокОснование.Заказ.КонтактноеЛицоКонтрагента;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		Если ДокОснование.Контрагент <> Неопределено И ТипЗнч(ДокОснование.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ДокОснование.Контрагент;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		Если ДокОснование.Контрагент <> Неопределено И ТипЗнч(ДокОснование.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ДокОснование.Контрагент;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.Событие") Тогда
		
		Контрагент     = ДокОснование.Контрагент;
		КонтактноеЛицо = ДокОснование.КонтактноеЛицо;
		ВидСобытия     = ДокОснование.ВидСобытия;
		ТипСобытия     = ДокОснование.ТипСобытия;
		Важность       = ДокОснование.Важность;
		Основание      = ДокОснование;
		ВидОбъекта     = ДокОснование.ВидОбъекта;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		
		Запрос = Новый Запрос;
		
		Если ДокОснование.СтатусПисьма <> Перечисления.СтатусыПисем.Полученное Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
			|	ИЗ
			|		Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|	ГДЕ
			|		ЭлектронноеПисьмоКомуТЧ.Ссылка = &ТекДокумент) КАК Адреса
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ПО
			|	Адреса.АдресЭлектроннойПочты ПОДОБНО КонтактнаяИнформация.Представление
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов
			|	ИЛИ КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица)
			|	И КонтактнаяИнформация.Тип = &Тип
			|";
			
			Запрос.УстановитьПараметр("ТекДокумент", ДокОснование);
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛицаКонтрагентов
			|	ИЛИ КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица)
			|	И КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Представление ПОДОБНО &Представление
			|";
			
			Запрос.УстановитьПараметр("Представление", ДокОснование.ОтправительАдресЭлектроннойПочты);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВыбОбъект = Выборка.Объект;
			Иначе
				СписокВыбора = Новый СписокЗначений;
				Пока Выборка.Следующий() Цикл
					СписокВыбора.Добавить(Выборка.Объект);
				КонецЦикла;
				
				ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите объект события");
				
				Если ВыбранныйЭлемент = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ВыбОбъект = ВыбранныйЭлемент.Значение;
				
			КонецЕсли;
		
		КонецЕсли;

		Если ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
			
			ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент     = ВыбОбъект.Владелец;
			КонтактноеЛицо = ВыбОбъект;
			
		ИначеЕсли ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			ВидОбъекта                   = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
			КонтактноеЛицоБезКонтрагента = ВыбОбъект;
			
		ИначеЕсли ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ВыбОбъект;
			
		КонецЕсли;

		Основание       = ДокОснование;
		ОписаниеСобытия = ДокОснование.Тема;
		Если ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ДокОснование.ТекстПисьма);
			НовыйHTMLДокумент.close();
			СодержаниеСобытия = СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");
		Иначе
			СодержаниеСобытия = ДокОснование.ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события объекта "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ИсточникИнформацииПриОбращении = Справочники.ИсточникиИнформацииПриОбращенииПокупателей.ПустаяСсылка();
	
КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Формируем движения для нужд календаря пользователя
	
	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НачальнаяСтрока = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(НачалоСобытия,"ДФ=Ч"), Формат(НачалоСобытия,"ДФ=м"), НачалоСобытия, Истина, НачалоСобытия);
	Если Формат(НачалоСобытия,"ДФ=Ч") = Формат(ОкончаниеСобытия,"ДФ=Ч") И Формат(НачалоСобытия,"ДФ=м") = Формат(ОкончаниеСобытия,"ДФ=м") Тогда
		КонечнаяСтрока  = НачальнаяСтрока;
	Иначе
		КонечнаяСтрока  = УправлениеКонтактами.ВозвратитьНомерСтроки(Формат(ОкончаниеСобытия,"ДФ=Ч"), Формат(ОкончаниеСобытия,"ДФ=м"), ОкончаниеСобытия, Ложь, ОкончаниеСобытия);
	КонецЕсли; 

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
	
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));

		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл

			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
		
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей);
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей, Истина);
		
		КонецЦикла;

		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, 48, НаборЗаписей);
		ВвестиЗаписьВРегистр(НачалоДня(ОкончаниеСобытия), 1, КонечнаяСтрока, НаборЗаписей);
		
		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, 48, НаборЗаписей, Истина);
		ВвестиЗаписьВРегистр(НачалоДня(ОкончаниеСобытия), 1, КонечнаяСтрока, НаборЗаписей, Истина);

	Иначе

		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей);
		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей, Истина);
		
	КонецЕсли;

	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

	СписокПерераспределенныхДат = Новый СписокЗначений;

	Если НачалоДня(мСтараяДатаНачалаСобытия) <> НачалоДня(НачалоСобытия) ИЛИ НачалоДня(мСтараяДатаОкончанияСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		КоличествоИнтерваловМеждуДнями = Цел((КонецДня(мСтараяДатаОкончанияСобытия) + 1 - НачалоДня(мСтараяДатаНачалаСобытия))/(60*60*24));
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоДня(мСтараяДатаНачалаСобытия) + (60*60*24)*а - 1);
			СписокПерераспределенныхДат.Добавить(ДатаИнтервала);
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, Справочники.Пользователи.ПустаяСсылка());
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			Если СписокПерераспределенныхДат.НайтиПоЗначению(ДатаИнтервала) = Неопределено Тогда
			
				Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
					СтарыйПользователь = ЭлементСпискаПользователей.Значение;
					Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
						УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
					КонецЕсли; 
				КонецЦикла; 
			
				Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
				КонецЦикла; 
				
				Если ЗначениеЗаполнено(Помещение) Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, Справочники.Пользователи.ПустаяСсылка());
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), Справочники.Пользователи.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли; 
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ОкончаниеСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), Справочники.Пользователи.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Помещение) Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), Справочники.Пользователи.ПустаяСсылка());
			КонецЕсли;

		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Помещение) Тогда
		
		РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

		ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
			
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
		
		Если НЕ Отказ Тогда
			
			Движение = Движения.ПланируемаяЗанятостьПомещений.Добавить();
			
			Движение.Период        = ВыборкаПоШапкеДокумента.НачалоСобытия;
			Движение.Помещение     = ВыборкаПоШапкеДокумента.Помещение;
			Движение.Занятость     = Перечисления.Занятость.Занято;
			Движение.ДатаОкончания = ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;

			Движение = Движения.ПланируемаяЗанятостьПомещений.Добавить();
			
 			Движение.Период    = ВыборкаПоШапкеДокумента.ОкончаниеСобытия - 1;
			Движение.Помещение = ВыборкаПоШапкеДокумента.Помещение;
			Движение.Занятость = Перечисления.Занятость.Свободно;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникИнформацииПриОбращении)
		И ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее
		И Контрагент.Покупатель Тогда
		
		Движение = Движения.ИсточникИнформацииПриОбращении.Добавить();
		Движение.Период             = Дата;
		Движение.Контрагент         = Контрагент;
		Движение.ИсточникИнформации = ИсточникИнформацииПриОбращении;
		
		Попытка
			Движения.ИсточникИнформацииПриОбращении.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)

	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				УправлениеКонтактами.РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла;
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	Иначе
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			УправлениеКонтактами.РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	

	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПолныеПрава.УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ);
	КонецЕсли; 
	
КонецПроцедуры



// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()
