Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
// заявки
//
Функция ПечатьЗаявки() Экспорт

	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	Отказ=Ложь;
	//Проверим заполнение реквизитов документов
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапка(), Отказ,);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаРасходованиеСредств";
	
	Макет = ПолучитьМакет("ЗаявкаНаРасходованиеСредств");
	Обл   = Макет.ПолучитьОбласть("Заголовок");
	
	Обл.Параметры.ЗаголовокЗаявки="Заявка на расходование средств № " + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + " от " + Ссылка.Дата + Символы.ПС + ВидОперации;
	Обл.Параметры.Заполнить(ЭтотОбъект);
	
	ТабДокумент.Вывести(Обл);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		Обл = Макет.ПолучитьОбласть("ЗаголовокРасчеты");
		Обл.Параметры.Контрагент=Контрагент;
		ТабДокумент.Вывести(Обл);
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка КАК Сделка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ВЫБОР КОГДА НЕ((РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) ЕСТЬ NULL ) 
		|		ТОГДА 
		|			ВЫБОР КОГДА НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Проведен
		|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток+ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
		|			ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КОНЕЦ
		|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КОНЕЦ КАК ТекущийДолг
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентами.Остатки КАК РасчетыСКонтрагентамиОстатки
		|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента = РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка = РасчетыСКонтрагентамиОстатки.Сделка
		|
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Обл=Макет.ПолучитьОбласть("СтрокаРасчеты");
			Обл.Параметры.Заполнить(Результат);
			ТабДокумент.Вывести(Обл);
			
		КонецЦикла;
		
		Обл=Макет.ПолучитьОбласть("ПодвалРасчеты");
		ТабДокумент.Вывести(Обл);
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Обл=Макет.ПолучитьОбласть("ЗаголовокПодотчет");
		Обл.Параметры.Получатель=Получатель;
		Обл.Параметры.ТекстВыдачаФизЛицу="Выдача денежных средств под отчет";
		Обл.Параметры.РасчетныйДокумент=РасчетныйДокумент;
		ТабДокумент.Вывести(Обл);
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовПодотчетника,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ВЫБОР КОГДА НЕ((ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток) ЕСТЬ NULL ) 
		|		ТОГДА ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток + ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов 
		|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КОНЕЦ КАК ТекущийДолг
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
		|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Получатель = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо 
		|		И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВалютаВзаиморасчетовПодотчетника = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта 
		|		И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.РасчетныйДокумент = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент
		|
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Обл=Макет.ПолучитьОбласть("СтрокаПодотчет");
			Обл.Параметры.ДатаПогашенияАванса=ДатаПогашенияАванса;
			Обл.Параметры.Заполнить(Результат);
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Обл=Макет.ПолучитьОбласть("ПодвалПодотчет");
		ТабДокумент.Вывести(Обл);
				
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		Обл=Макет.ПолучитьОбласть("ЗаголовокВыдачаКассеККМ");
		Обл.Параметры.Получатель=Получатель;
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Обл=Макет.ПолучитьОбласть("ЗаголовокРазмещениеЗаявки");
	
	Если РазмещениеЗаявки.Количество()=0 Тогда
		
		Обл.Параметры.ТекстРазмещениеЗаявки="Не размещено";
		ТабДокумент.Вывести(Обл);
		
	Иначе
		
		Обл.Параметры.ТекстРазмещениеЗаявки="Таблица размещения";
		ТабДокумент.Вывести(Обл);
		
		Обл=Макет.ПолучитьОбласть("ШапкаРазмещениеЗаявки");
		ТабДокумент.Вывести(Обл);
		
		ТабРазмещениеЗаявки=РазмещениеЗаявки.Выгрузить();
		ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
		
		Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
			
			Если Строка.МестоРазмещения=Неопределено Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Строка.МестоРазмещения)= Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
				
				Обл=Макет.ПолучитьОбласть("СтрокаРазмещениеЗаявки");
				
				ОстатокКРазмещению=УправлениеДенежнымиСредствами.ПолучитьНеразмещенныйостаток(Строка.МестоРазмещения,ДатаРасхода,Ссылка);
				
				Обл.Параметры.МестоРазмещения=Строка.МестоРазмещения;
				Обл.Параметры.СуммаПлатежа=Строка.СуммаПлатежа;
				Обл.Параметры.ТекущийОстаток=ОстатокКРазмещению-Строка.СуммаПлатежа;
				
			Иначе
				
				// Проверяем остаток доступных денежных средств
				Обл=Макет.ПолучитьОбласть("СтрокаРазмещениеЗаявки");
				
				СвободныйОстаток=УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,ДатаРасхода,Ссылка);
				
				Обл.Параметры.МестоРазмещения=Строка.МестоРазмещения;
				Обл.Параметры.СуммаПлатежа=Строка.СуммаПлатежа;
				Обл.Параметры.ТекущийОстаток=СвободныйОстаток-Строка.СуммаПлатежа;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(Обл);
			
		КонецЦикла;
		
		Обл=Макет.ПолучитьОбласть("ПодвалРазмещение");
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Если НЕ Описание="" Тогда
		
		Обл=Макет.ПолучитьОбласть("ОписаниеЗаявки");
		Обл.Параметры.Описание=Описание;
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
		
    Обл=Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Обл);
	
	// Первую колонку не печатаем
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
	
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	Возврат ТабДокумент;
	
КонецФункции // ПечатьЗаявки()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПечатьЗаявки" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьЗаявки();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 

	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьЗаявки","Заявка на расходование средств");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает структуру, содержащую поля шапки, обязательные для заполнения
//
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей - структура с именами реквизитов шапки
//
Функция СтруктураОбязательныхПолейШапка()
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		СтруктураПолей= Новый Структура("Контрагент, 
		|Состояние");
				
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтруктураПолей= Новый Структура("Получатель,
		|ВалютаВзаиморасчетовПодотчетника, Состояние");
				
	Иначе
		
		СтруктураПолей= Новый Структура("Состояние, ВалютаДокумента");
		
	КонецЕсли;
	
	Если ВключатьВПлатежныйКалендарь Тогда
		
		СтруктураПолей.Вставить("ФормаОплаты");
		СтруктураПолей.Вставить("ВалютаДокумента");
		
	КонецЕсли;
	
	Возврат СтруктураПолей;
	
КонецФункции // СтруктураОбязательныхПолейШапка()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок,ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
		
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
			ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
			
			Если Не Отказ Тогда
				
				// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;
				
				Если ЗначениеЗаполнено(Организация) 
					И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		КонецЕсли;
		
		Если ВключатьВПлатежныйКалендарь Тогда
			ПроверитьЗначение(Платеж.СуммаПлатежа,Отказ, Заголовок,"Сумма платежа");
        КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказу(ДокументОснование, СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказу()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетовПодотчетника", ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Получатель
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетовПодотчетника)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
									
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют)
		
	РасчетыВозврат=УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	КоэффициентСторно=?(РасчетыВозврат=Перечисления.РасчетыВозврат.Возврат,-1,1);
												
	Если РазмещениеЗаявки.Количество()>0 Тогда
		
		ТабРазмещениеЗаявки=РазмещениеЗаявки.Выгрузить();
		ТабРазмещениеЗаявки.Свернуть("МестоРазмещения","СуммаПлатежа");
		
		НаборРазмещение=Движения.РазмещениеЗаявокНаРасходованиеСредств;
		ТаблицаРазмещение=НаборРазмещение.ВыгрузитьКолонки();
		
		НаборРезерв=Движения.ДенежныеСредстваВРезерве;
		ТаблицаРезерв=НаборРезерв.ВыгрузитьКолонки();

		Для Каждого Строка Из ТабРазмещениеЗаявки Цикл
			
			Если Строка.МестоРазмещения=Неопределено Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Строка.МестоРазмещения)= Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
				
				ОстатокКРазмещению=УправлениеДенежнымиСредствами.ПолучитьНеразмещенныйостаток(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				
				Если ОстатокКРазмещению<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Размещаемая сумма превышает неразмещенный остаток
					|по "+Строка.МестоРазмещения+".
					|Возможный к использованию остаток: "+Формат(ОстатокКРазмещению,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);				
					
					Отказ = Истина;
					Возврат;
							
				КонецЕсли;
				
				СтрокаРазмещение=ТаблицаРазмещение.Добавить();
				СтрокаРазмещение.ДокументПланирования=Строка.МестоРазмещения;
				СтрокаРазмещение.ДокументРезервирования=Ссылка;
				СтрокаРазмещение.Сумма=Строка.СуммаПлатежа;
				
			Иначе
				
				// Проверяем остаток доступных денежных средств
				СвободныйОстаток=УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Строка.МестоРазмещения,КонецДня(ДатаРасхода),Ссылка);
				Если СвободныйОстаток<Строка.СуммаПлатежа Тогда
					Сообщить(Заголовок+"
					|Резервируемая сумма превышает возможный к использованию остаток денежных средств
					|по " + СокрЛП(Строка.МестоРазмещения) + ".
					|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента+"
					|Резервируемая сумма = "+Формат(Строка.СуммаПлатежа,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);
					
					Если НЕ УправлениеДенежнымиСредствами.ЕстьРазрешениеПревышатьСвободныйОстатокДС() Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаРезерв=ТаблицаРезерв.Добавить();
				СтрокаРезерв.БанковскийСчетКасса=Строка.МестоРазмещения;
				СтрокаРезерв.Организация=Организация;
				СтрокаРезерв.ДокументРезервирования=Ссылка;
				СтрокаРезерв.ВидДенежныхСредств=ФормаОплаты;
				СтрокаРезерв.Сумма=Строка.СуммаПлатежа;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборРазмещение.мПериод=КонецДня(ДатаРасхода);
		НаборРазмещение.мТаблицаДвижений=ТаблицаРазмещение;
		Движения.РазмещениеЗаявокНаРасходованиеСредств.ВыполнитьПриход();
		
		НаборРезерв.мПериод=ДатаРасхода;
		НаборРезерв.мТаблицаДвижений=ТаблицаРезерв;
		Движения.ДенежныеСредстваВРезерве.ВыполнитьПриход();
		
	КонецЕсли;
		
	// По регистру "ЗаявкиНаРасходованиеСредств"
	
	НаборДвиженийЗаявки = Движения.ЗаявкиНаРасходованиеСредств;
	ТаблицаДвиженийЗаявки = НаборДвиженийЗаявки.ВыгрузитьКолонки();
	
	// По регистру "РасчетыСКонтрагентами"	
	НаборДвиженийКонтрагенты = Движения.РасчетыСКонтрагентами;
	ТаблицаДвиженийКонтрагенты = НаборДвиженийКонтрагенты.ВыгрузитьКолонки();
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов= Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ВалютаВзаиморасчетов=ВалютаДокумента;
		КонецЕсли;
			
		СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));
				
		СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Платеж.СуммаВзаиморасчетов,ВалютаВзаиморасчетов,, 
												СтруктураКурсВзаиморасчетов.Курс,
												СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
												СтруктураКурсВзаиморасчетов.Кратность,
												СтруктураКурсыВалют.ВалютаУпрУчетаКратность);

		
		СтрокаДвиженийЗаявки = ТаблицаДвиженийЗаявки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвиженийЗаявки, Платеж);
		
		СтрокаДвиженийЗаявки.СуммаУпр				= СуммаУпр;
		СтрокаДвиженийЗаявки.Сумма					= Платеж.СуммаПлатежа;
		СтрокаДвиженийЗаявки.ЗаявкаНаРасходование	= Ссылка;
		СтрокаДвиженийЗаявки.Организация			= Организация;
		СтрокаДвиженийЗаявки.Контрагент				= Контрагент;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом) Тогда
			СтрокаДвиженийЗаявки.ДокументРасчетовСКонтрагентом = Ссылка;
		КонецЕсли;
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
			
			СтрокаДвиженийКонтрагенты = ТаблицаДвиженийКонтрагенты.Добавить();
			СтрокаДвиженийКонтрагенты.ДоговорКонтрагента	= Платеж.ДоговорКонтрагента;
			СтрокаДвиженийКонтрагенты.Контрагент  		    = Контрагент;
			СтрокаДвиженийКонтрагенты.Организация  	   		= Организация;

			СтрокаДвиженийКонтрагенты.РасчетыВозврат		= РасчетыВозврат;
			СтрокаДвиженийКонтрагенты.Сделка				= Платеж.Сделка;
			СтрокаДвиженийКонтрагенты.СуммаВзаиморасчетов	= Платеж.СуммаВзаиморасчетов*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.СуммаУпр				= СуммаУпр*КоэффициентСторно;
			СтрокаДвиженийКонтрагенты.Период				= ?(ЗначениеЗаполнено(Платеж.Сделка),Платеж.Сделка.Дата,?(ДатаРасхода='00010101',Дата,ДатаРасхода)) ;
			СтрокаДвиженийКонтрагенты.ВидДвижения			= ?(КоэффициентСторно = 1,ВидДвиженияНакопления.Приход,ВидДвиженияНакопления.Расход);
			СтрокаДвиженийКонтрагенты.Активность			= Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвиженийЗаявки.мПериод            = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);
	НаборДвиженийЗаявки.мТаблицаДвижений   = ТаблицаДвиженийЗаявки;	
	Движения.ЗаявкиНаРасходованиеСредств.ВыполнитьПриход();
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И ВключатьВПлатежныйКалендарь Тогда
		
		НаборДвиженийКонтрагенты.мТаблицаДвижений	= ТаблицаДвиженийКонтрагенты;
		НаборДвиженийКонтрагенты.ВыполнитьДвижения();
				
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам() 

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если Основание = Неопределено ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
		возврат;
	КонецЕсли;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

	    ДатаРасхода=Макс(Основание.ДатаОплаты, ОбщегоНазначения.ПолучитьРабочуюДату());
	 
	 	ДокументОснование = Основание;
		СтрокаПлатеж.ДоговорКонтрагента            = Основание.ДоговорКонтрагента;
        СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов 	           = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов            = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;
		
        ВидОперации						= Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		
		
		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница)=Тип("СправочникСсылка.Кассы") Тогда
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			Иначе
				ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные;
			КонецЕсли;
			
			БанковскийСчетКасса = Основание.СтруктурнаяЕдиница;
		Иначе
			ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,КонецДня(ДатаРасхода));
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
			
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		КонецЕсли;

		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
        СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
				
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику;
		ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
		
		Получатель                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовПодотчетника = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		
		БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
		
		Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
			ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента=мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

			ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю;
			ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные;
			Контрагент	= Основание.Контрагент;
			
			СтрокаПлатеж.ДоговорКонтрагента=Основание.ДоговорКонтрагента;
			
			СпособЗаполнения = "По сумме документа";

			СтрокаПлатеж.Сделка = Основание.Сделка;
			Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			КонецЕсли;
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,Дата);
			СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			
			БанковскийСчетКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
			
			Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				ВалютаДокумента=БанковскийСчетКасса.ВалютаДенежныхСредств;
			Иначе
				ВалютаДокумента=мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от поставщика".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Возврат денежных средств от подотчетника".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прием розничной выручки".
			Возврат;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			// Отказ
			// Документ не вводится на основании ПКО с видом операции "Прочий приход денежных средств".
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказу(Основание,СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										 
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

	КонецЕсли;

	Ответственный     = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ДокументОснование = Основание.Ссылка;
	Состояние         = Перечисления.СостоянияОбъектов.Подготовлен;
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")>СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|сумма размещения превышает сумму документа.");
		
		Отказ=Истина;
		
	КонецЕсли;

	//Проверим заполнение реквизитов документов
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейШапка(), Отказ, Заголовок);
	ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
	
	СтруктураДанныхШапки=Новый Структура;

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",мВалютаУправленческогоУчета.Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
	
	СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаРасхода='00010101',Дата,КонецДня(ДатаРасхода)));

	Если Не Отказ Тогда

		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок, СтруктураКурсыВалют);

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета=глЗначениеПеременной("ВалютаУправленческогоУчета");

