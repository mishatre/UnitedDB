
Перем мФормаХодаВыполненияОбмена Экспорт; 
Перем мТаблицаВсехСвойствТоваров Экспорт;

#Если Клиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ НАСТРОЙКИ ПОСТРОИТЕЛЕЙ ОТЧЕТОВ

Функция ПолучитьМассивДопустимыхТиповНоменклатурыДляВыгрузки()
	
	МассивТипов = Новый Массив();
	
	МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	//МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	
	Возврат МассивТипов;
	
КонецФункции

// Процедура присваивает текст запроса для построителя прайс-листа.
//
// Параметры:
// Построитель - построитель отчета для которого устанавливается настройка
//
Процедура НастроитьПостроительДляПрайса(Построитель) Экспорт

	Построитель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Цены.НоменклатураСсылка КАК НоменклатураСсылка,
	                    |	Цены.НоменклатураСсылка.Наименование КАК Наименование,
						|	Цены.НоменклатураСсылка.НаименованиеПолное КАК НаименованиеПолное,
	                    |	Цены.НоменклатураСсылка.Артикул КАК Артикул,
	                    |	Цены.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
						|	Цены.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
						|	Цены.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
						|	Цены.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
						|	Цены.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	                    |	Цены.НоменклатураСсылка.ЭтоГруппа КАК ЭтоГруппа,
	                    |	Цены.ХарактеристикаСсылка.Наименование КАК НаименованиеХарактеристики,
	                    |	Цены.Валюта КАК Валюта,
	                    |	Цены.Цена КАК Цена,
	                    |	Цены.ТипЦенСсылка КАК ТипЦенСсылка,
	                    |	Цены.ТипЦен КАК ТипЦен,
	                    |	Цены.ВалютаЦены КАК ВалютаЦены,
	                    |	Цены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	                    |	Цены.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
						|	Цены.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаХраненияОстатковНаименование,
						|	Цены.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
						|	Цены.ЕдиницаХраненияОстатков.Вес КАК ЕдиницаХраненияОстатковВес,
						|	Цены.ЕдиницаХраненияОстатков.Объем КАК ЕдиницаХраненияОстатковОбъем,
	                    |	Цены.ХарактеристикаСсылка КАК ХарактеристикаСсылка,
	                    |	Цены.НоменклатураСсылка.ВидНоменклатуры КАК ВидНоменклатуры,
	                    |	Цены.НоменклатураСсылка.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
						|	Цены.НоменклатураСсылка.СтавкаНДС КАК СтавкаНДС,
	                    |	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	                    |	Цены.НоменклатураСсылка.Родитель КАК РодительНоменклатуры, 
						|	ЗначенияСвойств.Свойство КАК Свойство,
						|	ЗначенияСвойств.Значение КАК Значение
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		ЦеныНоменклатуры.Номенклатура КАК НоменклатураСсылка,
	                    |		ЦеныНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	                    |		ЦеныНоменклатуры.Валюта.Наименование КАК Валюта,
	                    |		ЦеныНоменклатуры.Цена КАК Цена,
	                    |		ЦеныНоменклатуры.ТипЦен КАК ТипЦенСсылка,
	                    |		ЦеныНоменклатуры.ТипЦен.Наименование КАК ТипЦен,
	                    |		ЦеныНоменклатуры.ТипЦен.ВалютаЦены.Наименование КАК ВалютаЦены,
	                    |		ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	                    |		ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	                    |		ВЫБОР
	                    |			КОГДА ЦеныНоменклатуры.ХарактеристикаНоменклатуры ЕСТЬ NULL 
	                    |				ТОГДА &ПустаяХарактеристика
	                    |			ИНАЧЕ ЦеныНоменклатуры.ХарактеристикаНоменклатуры
	                    |		КОНЕЦ КАК ХарактеристикаСсылка
	                    |	ИЗ
	                    |		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета, ) КАК ЦеныНоменклатуры
						|	ГДЕ (ЦеныНоменклатуры.Номенклатура.ВидНоменклатуры.ТипНоменклатуры В (&МассивДопустимыхТипов))
	                    |	{ГДЕ
	                    |		ЦеныНоменклатуры.Номенклатура.* КАК Номенклатура,
	                    |		ЦеныНоменклатуры.ТипЦен.* КАК ТипЦен}) КАК Цены
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	                    |		ПО Цены.НоменклатураСсылка = РегистрШтрихКоды.Владелец
	                    |			И Цены.ХарактеристикаСсылка = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	                    |			И Цены.ЕдиницаХраненияОстатков = РегистрШтрихКоды.ЕдиницаИзмерения
						|		Левое соединение РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
						|			ПО (ЗначенияСвойств.Объект = Цены.ХарактеристикаСсылка)
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НоменклатураСсылка,
	                    |	ХарактеристикаСсылка,
	                    |	ТипЦенСсылка
						|Итоги 
						|	Максимум(Наименование), Максимум(Артикул), 
						|	Максимум(БазоваяЕдиницаИзмерения), Максимум(БазоваяЕдиницаИзмеренияНаименование), Максимум(ЕдиницаХраненияОстатков), 
						|	Максимум(ЕдиницаХраненияОстатковНаименование), Максимум(ЕдиницаХраненияОстатковКоэффициент), 
						|   Максимум(БазоваяЕдиницаИзмеренияКод), Максимум(БазоваяЕдиницаИзмеренияНаименованиеПолное), Максимум(БазоваяЕдиницаИзмеренияМеждународноеСокращение),
						|   Максимум(ЕдиницаХраненияОстатковВес), Максимум(ЕдиницаХраненияОстатковОбъем),
						|	Максимум(ЭтоГруппа), Максимум(НаименованиеХарактеристики), Максимум(ХарактеристикаСсылка), Максимум(ВидНоменклатуры), 
						|	Максимум(ТипНоменклатуры), Максимум(ШтрихКод), Максимум(РодительНоменклатуры), Максимум(СтавкаНДС), Максимум(НаименованиеПолное)
						|
						|	По
						|	НоменклатураСсылка Иерархия, Цены.ХарактеристикаСсылка";	
						
												
	Построитель.Параметры.Вставить("МассивДопустимыхТипов", ПолучитьМассивДопустимыхТиповНоменклатурыДляВыгрузки());

КонецПроцедуры

// Процедура присваивает текст запроса для построителя каталога.
//
// Параметры:
// Построитель - построитель отчета для которого устанавливается настройка
//
Процедура НастроитьПостроительДляКаталога(Построитель) Экспорт

	Построитель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Товары.НоменклатураСсылка КАК НоменклатураСсылка,
	                    |	Товары.НоменклатураСсылка.Наименование КАК Наименование,
						|	Товары.НоменклатураСсылка.НаименованиеПолное КАК НаименованиеПолное,
	                    |	Товары.НоменклатураСсылка.Артикул КАК Артикул,
	                    |	Товары.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
						|	Товары.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
						|	Товары.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
						|	Товары.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
						|	Товары.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	                    |	Товары.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
						|	Товары.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаХраненияОстатковНаименование,
						|	Товары.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
						|	Товары.ЕдиницаХраненияОстатков.Вес КАК ЕдиницаХраненияОстатковВес,
						|	Товары.ЕдиницаХраненияОстатков.Объем КАК ЕдиницаХраненияОстатковОбъем,
	                    |	Товары.НоменклатураСсылка.ЭтоГруппа КАК ЭтоГруппа,
	                    |	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	                    |	Товары.Характеристика КАК ХарактеристикаСсылка,
	                    |	Товары.НоменклатураСсылка.ВидНоменклатуры КАК ВидНоменклатуры,
	                    |	Товары.НоменклатураСсылка.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
						|	Товары.НоменклатураСсылка.СтавкаНДС КАК СтавкаНДС,
	                    |	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	                    |	Товары.НоменклатураСсылка.Родитель КАК РодительНоменклатуры,
						|	ЗначенияСвойств.Свойство КАК Свойство,
						|	ЗначенияСвойств.Значение КАК Значение
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		Номенклатура.Ссылка КАК НоменклатураСсылка,
	                    |		Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	                    |		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	                    |		ВЫБОР
	                    |			КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL 
	                    |				ТОГДА &ПустаяХарактеристика
	                    |			ИНАЧЕ ХарактеристикиНоменклатуры.Ссылка
	                    |		КОНЕЦ КАК Характеристика
	                    |	ИЗ
	                    |		Справочник.Номенклатура КАК Номенклатура
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                    |			ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
						|	ГДЕ (Номенклатура.ВидНоменклатуры.ТипНоменклатуры В (&МассивДопустимыхТипов))
	                    |	{ГДЕ
	                    |		Номенклатура.Ссылка.* КАК Номенклатура}) КАК Товары
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	                    |		ПО Товары.НоменклатураСсылка = РегистрШтрихКоды.Владелец
	                    |			И Товары.Характеристика = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	                    |			И Товары.ЕдиницаХраненияОстатков = РегистрШтрихКоды.ЕдиницаИзмерения
						|		Левое соединение РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
						|			ПО (ЗначенияСвойств.Объект = Товары.Характеристика)
						|ИТОГИ 
						|	Максимум(Наименование), Максимум(Артикул), 
						|	Максимум(БазоваяЕдиницаИзмерения), Максимум(БазоваяЕдиницаИзмеренияНаименование), Максимум(ЕдиницаХраненияОстатков), 
						|	Максимум(ЕдиницаХраненияОстатковНаименование), Максимум(ЕдиницаХраненияОстатковКоэффициент), 
						|   Максимум(БазоваяЕдиницаИзмеренияКод), Максимум(БазоваяЕдиницаИзмеренияНаименованиеПолное), Максимум(БазоваяЕдиницаИзмеренияМеждународноеСокращение),
						|   Максимум(ЕдиницаХраненияОстатковВес), Максимум(ЕдиницаХраненияОстатковОбъем),
						|	Максимум(ЭтоГруппа), Максимум(НаименованиеХарактеристики), Максимум(ХарактеристикаСсылка), Максимум(ВидНоменклатуры), 
						|	Максимум(ТипНоменклатуры), Максимум(ШтрихКод), Максимум(РодительНоменклатуры), Максимум(СтавкаНДС), Максимум(НаименованиеПолное)
						|ПО
	                    |	НоменклатураСсылка ИЕРАРХИЯ, Товары.Характеристика";

						
	Построитель.Параметры.Вставить("МассивДопустимыхТипов", ПолучитьМассивДопустимыхТиповНоменклатурыДляВыгрузки());

КонецПроцедуры

// Процедура присваивает текст запроса для построителя документов.
//
// Параметры:
// Построитель - построитель отчета для которого устанавливается настройка
//
Процедура НастроитьПостроительДляДокументов(Построитель, ИмяДокумента) Экспорт

	Построитель.Текст = "ВЫБРАТЬ
	                    |	ДокументОбъект.Контрагент КАК Контрагент,
	                    |	ДокументОбъект.Ссылка КАК ДокументыСсылка
	                    |ИЗ
	                    |	Документ." + ИмяДокумента + " КАК ДокументОбъект
						|
						|	ГДЕ ДокументОбъект.ПометкаУдаления = Ложь
						|
	                    |{ГДЕ
	                    |	ДокументОбъект.Контрагент.Ссылка.* КАК Контрагент,
	                    |	ДокументОбъект.Ссылка.* КАК Документ}
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	Контрагент,
	                    |	ДокументОбъект.Дата";

КонецПроцедуры

// Процедура присваивает текст запроса для построителя прайс-листа.
//
// Параметры:
// Построитель - построитель отчета для которого устанавливается настройка
//
Процедура НастроитьПостроительДляПрайсаCML_1(Построитель) Экспорт

	Построитель.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цены.НоменклатураСсылка         КАК НоменклатураСсылка,
	|	Цены.Наименование               КАК Наименование,
	|	Цены.Артикул                    КАК Артикул,
	|	Цены.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	Цены.ЭтоГруппа                  КАК ЭтоГруппа,
	|	Цены.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Цены.Валюта                     КАК Валюта,
	|	Цены.Цена                       КАК Цена,
	|	Цены.ТипЦенСсылка               КАК ТипЦенСсылка,
	|	Цены.ТипЦен                     КАК ТипЦен,
	|	Цены.ВалютаЦены                 КАК ВалютаЦены,
	|	Цены.ЦенаВключаетНДС            КАК ЦенаВключаетНДС,
	|	Цены.ЕдиницаИзмеренияПрайс      КАК ЕдиницаИзмеренияПрайс,
	|	Цены.ЕдиницаСсылка              КАК ЕдиницаСсылка,
	|	Цены.Коэффициент                КАК Коэффициент,
	|	Цены.ХарактеристикаСсылка       КАК ХарактеристикаСсылка,
	|	Цены.ВидНоменклатуры            КАК ВидНоменклатуры,
	|	Цены.ТипНоменклатуры            КАК ТипНоменклатуры,
	|	Цены.НоменклатураСсылка.Родитель КАК РодительНоменклатуры,
	|	РегистрШтрихКоды.ШтрихКод       КАК ШтрихКод
	|ИЗ
	|(ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура.Ссылка                                   КАК НоменклатураСсылка,
	|	ЦеныНоменклатуры.Номенклатура.Наименование                             КАК Наименование,
	|	ЦеныНоменклатуры.Номенклатура.Артикул                                  КАК Артикул,
	|	ЦеныНоменклатуры.Номенклатура.БазоваяЕдиницаИзмерения.Наименование     КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Номенклатура.ЭтоГруппа                                КАК ЭтоГруппа,
	|	ЦеныНоменклатуры.Номенклатура.ВидНоменклатуры.Наименование             КАК ВидНоменклатуры,
	|	ЦеныНоменклатуры.Номенклатура.ВидНоменклатуры.ТипНоменклатуры          КАК ТипНоменклатуры,
	|	ЦеныНоменклатуры.ХарактеристикаНоменклатуры.Наименование               КАК НаименованиеХарактеристики,
	|	ЦеныНоменклатуры.Валюта.Наименование                                   КАК Валюта,
	|	ЦеныНоменклатуры.Цена                                                  КАК Цена,
	|	ЦеныНоменклатуры.ТипЦен.Ссылка                                         КАК ТипЦенСсылка,
	|	ЦеныНоменклатуры.ТипЦен.Наименование                                   КАК ТипЦен,
	|	ЦеныНоменклатуры.ТипЦен.ВалютаЦены.Наименование                        КАК ВалютаЦены,
	|	ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС                                КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияПрайс,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения.Ссылка                               КАК ЕдиницаСсылка,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент                          КАК Коэффициент,
	|ВЫБОР
	|	Когда ЦеныНоменклатуры.ХарактеристикаНоменклатуры.Ссылка ЕСТЬ NULL Тогда &ПустаяХарактеристика
	|	Иначе ЦеныНоменклатуры.ХарактеристикаНоменклатуры.Ссылка
	|КОНЕЦ КАК ХарактеристикаСсылка
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОтчета) КАК ЦеныНоменклатуры
	|	ГДЕ (Номенклатура.ВидНоменклатуры.ТипНоменклатуры В (&МассивДопустимыхТипов))
	|{ГДЕ
	|	ЦеныНоменклатуры.Номенклатура.* КАК Номенклатура,
	|	ЦеныНоменклатуры.ТипЦен.*       КАК ТипЦен
	|	}) КАК Цены
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ШтрихКоды КАК РегистрШтрихКоды
	|ПО Цены.НоменклатураСсылка = РегистрШтрихКоды.Владелец И
	|	Цены.ХарактеристикаСсылка = РегистрШтрихКоды.ХарактеристикаНоменклатуры И
	|	Цены.ЕдиницаСсылка = РегистрШтрихКоды.ЕдиницаИзмерения
	|УПОРЯДОЧИТЬ ПО ТипЦенСсылка, НоменклатураСсылка, ХарактеристикаСсылка
	|";
	
	Построитель.Параметры.Вставить("МассивДопустимыхТипов", ПолучитьМассивДопустимыхТиповНоменклатурыДляВыгрузки());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ АЛГОРИТМОВ ВЫГРУЗКИ ДАННЫХ

// Процедура вызывает диалог выбора файла, если выбирается каталог,
// то генерирует имя файла, используя текущую дату и время
//
// Параметры:
//  РежимДиалога - режим вызова диалога выбора файла
//
Функция ВыборФайла(РежимДиалога, ИмяФайлаПоУмолчанию = "") Экспорт

	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалога);

	ДиалогВыбора.Фильтр     = "Файл данных (*.xml)|*.xml";
	ДиалогВыбора.Расширение = "xml";
	
	Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
		ДиалогВыбора.Заголовок ="Выберите каталог для выгрузки документов";
	Иначе
		ДиалогВыбора.Заголовок ="Выберите файл для выгрузки данных";
	КонецЕсли;

	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если Не ПустаяСтрока(ИмяФайлаПоУмолчанию) Тогда
		
		ДиалогВыбора.ПолноеИмяФайла = ИмяФайлаПоУмолчанию;	
		
	КонецЕсли;

	Если НЕ ДиалогВыбора.Выбрать() Тогда
		Возврат Неопределено;
	ИначеЕсли РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
		
		Возврат ДиалогВыбора.Каталог;
		
	Иначе
		
		Возврат ДиалогВыбора.ПолноеИмяФайла;
		
	КонецЕсли;			
	
КонецФункции

// Процедура проводит проверку значнеие и пишет текстовой узел в файл XML
//
// Параметры:
//  ОбъектXML - объект ЗаписьXML
//  Имя       - наименования узла
//  Значение  - текстовое значение для записи в файл
//
Процедура ЗаписатьТекстовойУзел(ОбъектXML, Имя, Значение, ОбязательнаяПроверкаНаПустуюСтроку = Истина)

	СтрокаЗаписи = Строка(Значение);
	Если ОбязательнаяПроверкаНаПустуюСтроку
		И НЕ ЗначениеЗаполнено(СтрокаЗаписи) Тогда
		
		Возврат;		
		
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.НПП, "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, ",", ".");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			СтрокаЗаписи = "true";
		Иначе
			СтрокаЗаписи = "false";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента(Имя);
	ОбъектXML.ЗаписатьТекст(СтрокаЗаписи);
	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Процедура проводит проверку значнеие и пишет текстовой узел в файл XML
//
// Параметры:
//  ОбъектXML - объект ЗаписьXML
//  Имя       - наименования узла
//  Значение  - текстовое значение для записи в файл
//
Процедура ЗаписатьАтрибут(ОбъектXML, Имя, Значение)

	СтрокаЗаписи = Строка(Значение);
	Если ЗначениеЗаполнено(СтрокаЗаписи) Тогда
		ОбъектXML.ЗаписатьАтрибут(Имя, СтрокаЗаписи)
	КонецЕсли;

КонецПроцедуры

// Функция формирует идентификатор для товара, по элементу номенклатуры и характеристика
//
// Параматры:
//  Номенклатура   - справочник-ссылка Номенклатура
//  Характеристика - справочник-ссылка ХарактеристикиНоменклатуры
//
// Возвращаемое значение:
//  строка - идентификатор товара для каталога
//
Функция СформироватьИдентификатовТовара(Номенклатура, Характеристика)

	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Возврат "";
		Иначе		
			Возврат Строка(Номенклатура.УникальныйИдентификатор());
		КонецЕсли;
		
	Иначе
		
		Возврат Строка(Номенклатура.УникальныйИдентификатор()) + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;

КонецФункции

// Функция формирует идентификатор для товара, по элементу номенклатуры и характеристика
//
// Параматры:
//  Номенклатура   - справочник-ссылка Номенклатура
//  Характеристика - справочник-ссылка ХарактеристикиНоменклатуры
//
// Возвращаемое значение:
//  строка - идентификатор товара для каталога
//
Функция СформироватьИдентификатовТовараПоКодам(Номенклатура, Характеристика)

	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Возврат Строка(Номенклатура.Код);
	Иначе
		Возврат Строка(Номенклатура.Код) + СтрЗаменить(Строка(Характеристика.УникальныйИдентификатор()), "-", "");
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПИСИ В ФАЙЛ ЭЛЕМЕНТОВ ДАННЫХ

Процедура ВыгрузитьИнформациюОБанке(ОбъектXML, РольБанка, Банк)
	
	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента(РольБанка);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "СчетКорреспондентский", Банк.КоррСчет);
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Банк.Наименование);
	
	Если Не ПустаяСтрока(Банк.Адрес) Тогда
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Адрес");
		ЗаписатьТекстовойУзел(ОбъектXML, "Представление", Банк.Адрес);
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектXML, "БИК", Банк.Код);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьБанковскийсчетОрганизации(ОбъектXML, БанковскийСчет)
	
	Если НЕ ЗначениеЗаполнено(БанковскийСчет)
		ИЛИ ТипЗнч(БанковскийСчет) <> Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("РасчетныеСчета");
	
	// информация о счете
	ОбъектXML.ЗаписатьНачалоЭлемента("РасчетныйСчет");
	
	ЗаписатьТекстовойУзел(ОбъектXML, "НомерСчета", БанковскийСчет.НомерСчета);
	
	ВыгрузитьИнформациюОБанке(ОбъектXML, "Банк", БанковскийСчет.Банк);
	ВыгрузитьИнформациюОБанке(ОбъектXML, "БанкКорреспондент", БанковскийСчет.БанкДляРасчетов);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ОбъектXML.ЗаписатьКонецЭлемента();
		
Конецпроцедуры

Процедура ЗаписатьАдресноеПоле(ОбъектXML, ИмяПоля, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("АдресноеПоле");
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Тип", ИмяПоля);
	ЗаписатьТекстовойУзел(ОбъектXML, "Значение", Значение);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьЮрАдресОрганизации(ОбъектXML, Организация)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Поле10,
	               |	КонтактнаяИнформация.Комментарий
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				   | ГДЕ
				   |	КонтактнаяИнформация.Объект = &Объект
				   |	И КонтактнаяИнформация.Тип = &Тип
				   |	И КонтактнаяИнформация.Вид = &Вид";
				   
	Запрос.УстановитьПараметр("Объект", Организация);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОбъектXML.ЗаписатьНачалоЭлемента("ЮридическийАдрес");
		
		ЗаписатьТекстовойУзел(ОбъектXML, "Представление", Выборка.Представление);
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий", Выборка.Комментарий);
		
		АдресРоссийский = Истина;
		
		Если ЗначениеЗаполнено(Выборка.Поле1) Тогда
			
			ЧислоИндекса = ОбщегоНазначения.ПривестиСтрокуКЧислу(Выборка.Поле1);
			АдресРоссийский = (ЧислоИндекса <> 0);
								
		КонецЕсли;
			
		// российский адрес
		Если АдресРоссийский Тогда
		
			//Возможные значения: Почтовый индекс, Страна, Регион, Район, Населенный пункт, Город, Улица, Дом, Корпус, Квартира
			ЗаписатьАдресноеПоле(ОбъектXML, "Почтовый индекс", Выборка.Поле1);
			ЗаписатьАдресноеПоле(ОбъектXML, "Регион", Выборка.Поле2);
			ЗаписатьАдресноеПоле(ОбъектXML, "Район", Выборка.Поле3);
			ЗаписатьАдресноеПоле(ОбъектXML, "Населенный пункт", Выборка.Поле4);
			ЗаписатьАдресноеПоле(ОбъектXML, "Город", Выборка.Поле5);
			ЗаписатьАдресноеПоле(ОбъектXML, "Улица", Выборка.Поле6);
			ЗаписатьАдресноеПоле(ОбъектXML, "Дом", Выборка.Поле7);
			ЗаписатьАдресноеПоле(ОбъектXML, "Корпус", Выборка.Поле8);
			ЗаписатьАдресноеПоле(ОбъектXML, "Квартира", Выборка.Поле9);
			
		Иначе
			
			ЗаписатьАдресноеПоле(ОбъектXML, "Страна", Выборка.Поле1);
			
		КонецЕсли;	
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пищет в XML-файл информацию о контрагенте при выгрузке документов
//
// Параметры:
//  ОбъектXML  - объект типа ЗаписьXML
//  Контрагент - справочник-ссылка "КОнтрагенты"
//  Роль       - строка - значение тэга "Роль"
//
Процедура ВыгрузитьКонтрагентаДок(ОбъектXML, Контрагент, Роль = Неопределено, СтруктурнаяЕдиница = Неопределено, ИмяГруппыВыгрузки = "Контрагент")

	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяГруппыВыгрузки);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Ид",           Строка(Контрагент.УникальныйИдентификатор()));
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Контрагент.Наименование);
	
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "ОфициальноеНаименование", Контрагент.НаименованиеПолное);
		
		// выгрузка юридического адреса
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			ВыгрузитьЮрАдресОрганизации(ОбъектXML, Контрагент);
		КонецЕсли;
		
	Иначе
		ЗаписатьТекстовойУзел(ОбъектXML, "ПолноеНаименование", Контрагент.НаименованиеПолное);
	КонецЕсли;	
	
	ЗаписатьТекстовойУзел(ОбъектXML, "ИНН", Контрагент.ИНН);
	ЗаписатьТекстовойУзел(ОбъектXML, "КПП", Контрагент.КПП);
	ЗаписатьТекстовойУзел(ОбъектXML, "ОКПО", Контрагент.КодПоОКПО);
	
	ВыгрузитьБанковскийсчетОрганизации(ОбъектXML, СтруктурнаяЕдиница);
	
	Если Роль <> Неопределено Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "Роль", Роль);
	КонецЕсли;
	
	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Процедура пищет в XML-файл информацию о налоге НДС
//
// Параметры:
//  ОбъектXML    - объект типа ЗаписьXML
//  УчтеноВСумме - флаг НДС в сумме
//  Сумма        -  сумма НДС
//
Процедура ВыгрузитьНДС(ОбъектXML, УчтеноВСумме, Сумма = 0)

	ОбъектXML.ЗаписатьНачалоЭлемента("Налог");
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", "НДС");
	ЗаписатьТекстовойУзел(ОбъектXML, "УчтеноВСумме", УчтеноВСумме);
	Если Сумма Тогда
		ЗаписатьТекстовойУзел(ОбъектXML, "Сумма", Сумма);
	КонецЕсли;
	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ВыгрузитьИдентификаторГруппыДляТовара(ОбъектXML, Товар)
	
	ИдГруппы = СформироватьИдентификатовТовара(Товар.РодительНоменклатуры, Неопределено);
	
	Если Не ЗначениеЗаполнено(ИдГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("Группы");
	ЗаписатьТекстовойУзел(ОбъектXML, "Ид", ИдГруппы);		
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьРазмерСтавкиНДС(ОбъектXML, Товар)
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Ставка", Товар.СтавкаНДС);
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОСтавкеНалога(ОбъектXML, Товар)
	
	Если Не ЗначениеЗаполнено(Товар.СтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("СтавкиНалогов");
	
	ОбъектXML.ЗаписатьНачалоЭлемента("СтавкаНалога");
    	
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", "НДС");
	
	ВыгрузитьРазмерСтавкиНДС(ОбъектXML, Товар);
    	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьИнформациюОЕдиницеИзмерения(ОбъектXML, Товар)
	
	//Товар.БазоваяЕдиницаИзмерения
	//Товар.БазоваяЕдиницаИзмеренияНаименование
	//Товар.БазоваяЕдиницаИзмеренияКод
	//Товар.БазоваяЕдиницаИзмеренияНаименованиеПолное
	//Товар.БазоваяЕдиницаИзмеренияМеждународноеСокращение
	//Товар.ЕдиницаХраненияОстатков
	//Товар.ЕдиницаХраненияОстатковКоэффициент
	//Товар.ЕдиницаХраненияОстатковНаименование
	//Товар.ЕдиницаХраненияОстатковВес
	//Товар.ЕдиницаХраненияОстатковОбъем	
						
	Если ЗначениеЗаполнено(Товар.БазоваяЕдиницаИзмерения) Тогда
		
		ОбъектXML.ЗаписатьНачалоЭлемента("БазоваяЕдиница");
		
		Если Не ПустаяСтрока(Товар.БазоваяЕдиницаИзмеренияКод) Тогда
			ОбъектXML.ЗаписатьАтрибут("Код", Товар.БазоваяЕдиницаИзмеренияКод);
		КонецЕсли;
		
		Если Не ПустаяСтрока(Товар.БазоваяЕдиницаИзмеренияНаименованиеПолное) Тогда
			ОбъектXML.ЗаписатьАтрибут("НаименованиеПолное", Товар.БазоваяЕдиницаИзмеренияНаименованиеПолное);
		КонецЕсли;
		
		Если Не ПустаяСтрока(Товар.БазоваяЕдиницаИзмеренияМеждународноеСокращение) Тогда
			ОбъектXML.ЗаписатьАтрибут("МеждународноеСокращение", Товар.БазоваяЕдиницаИзмеренияМеждународноеСокращение);
		КонецЕсли;
		
		// нужно передать информация о единице измерения для номенклатуры
		Если ЗначениеЗаполнено(Товар.ЕдиницаХраненияОстатков) Тогда
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Пересчет");	
			
			ЗаписатьТекстовойУзел(ОбъектXML, "Единица",     Товар.ЕдиницаХраненияОстатковНаименование);
			ЗаписатьТекстовойУзел(ОбъектXML, "Коэффициент", Товар.ЕдиницаХраненияОстатковКоэффициент);
			
			ОбъектXML.ЗаписатьНачалоЭлемента("ДополнительныеДанные");
			
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "Вес",  Товар.ЕдиницаХраненияОстатковВес);
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "Объем",  Товар.ЕдиницаХраненияОстатковОбъем);
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;		
		
		ОбъектXML.ЗаписатьТекст(Товар.БазоваяЕдиницаИзмеренияНаименование);
		
		ОбъектXML.ЗаписатьКонецЭлемента();		
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура пищет в XML-файл обязательные для товара реквизиты
// если передан пустой идентификатор, то он формируется по умолчанию
//
// Параметры:
//  ОбъектXML - объект типа ЗаписьXML
//  Товар     - структура, содержащая реквизиты товара
//  Ид        - строка идентификатор товара
//
Процедура ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Товар, Ид = Неопределено)

	Если НЕ ЗначениеЗаполнено(Ид) Тогда
		ИдТовара = СформироватьИдентификатовТовара(Товар.НоменклатураСсылка, Товар.ХарактеристикаСсылка);
		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", ИдТовара);
	Иначе
		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Ид);		
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Штрихкод",     Товар.ШтрихКод);
	ЗаписатьТекстовойУзел(ОбъектXML, "Артикул",      Товар.Артикул);

	ВыгрузитьНаименованиеНоменклатуры(ОбъектXML, Товар);
	
	ВыгрузитьИнформациюОЕдиницеИзмерения(ОбъектXML, Товар);
		
	ВыгрузитьИдентификаторГруппыДляТовара(ОбъектXML, Товар);
	
	// выгрузить информацию по ставке налога
	ВыгрузитьИнформациюОСтавкеНалога(ОбъектXML, Товар);
	
	ВыгрузитьДопИнформациюОНоменклатуре(ОбъектXML, Товар);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПИСИ ЭЛЕМЕНТОВ ПО СХЕМЕ 1.0

// Процедура пищет в XML-файл информацию свойство товара при выгрузке
// прайс-листа в формате CommerceML 1.0
//
// Параметры:
//  ОбъектXML   - объект типа ЗаписьXML
//  ИдСвойства  - строка - идентификатор свойства
//  ИмяСвойства - строка - наименование свойства
//
Процедура ВыгрузитьСвойствоCML_1(ОбъектXML, ИдСвойства, ИмяСвойства)

	ОбъектXML.ЗаписатьНачалоЭлемента("Свойство");
	ЗаписатьАтрибут(ОбъектXML, "Идентификатор", ИдСвойства);
	ЗаписатьАтрибут(ОбъектXML, "Наименование", ИмяСвойства);
	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Процедура пищет в XML-файл информацию по значениею свойств товара при выгрузке
// прайс-листа в формате CommerceML 1.0
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  ИдСвойства       - строка - идентификатор свойства
//  ЗначениеСвойства - строка - значение свойства
//
Процедура ВыгрузитьЗначениеСвойстваCML_1(ОбъектXML, ИдСвойства, ЗначениеСвойства)

	СтрокаЗаписи = Строка(ЗначениеСвойства);
	Если НЕ ЗначениеЗаполнено(СтрокаЗаписи) Тогда
		Возврат;
	КонецЕсли;

	ОбъектXML.ЗаписатьНачалоЭлемента("ЗначениеСвойства");
	ЗаписатьАтрибут(ОбъектXML, "ИдентификаторКаталога", Организация.УникальныйИдентификатор());
	ЗаписатьАтрибут(ОбъектXML, "ИдентификаторСвойства", ИдСвойства);
	ЗаписатьАтрибут(ОбъектXML, "Значение", СтрокаЗаписи);
	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Процедура пищет в XML-файл информацию список свойств товара при выгрузке
// прайс-листа в формате CommerceML 1.0
//
// Параметры:
//  ОбъектXML - объект типа ЗаписьXML
//  Товар     - структура с информацией о товаре
//
Процедура ВыгрузитьСвойстваТовара(ОбъектXML, Товар)

	Если НЕ ЗначениеЗаполнено(Товар.НаименованиеХарактеристики) Тогда
		ПолноеНаименование = Товар.НоменклатураСсылка.НаименованиеПолное;
	Иначе
		ПолноеНаименование = СокрЛП(Товар.НоменклатураСсылка.НаименованиеПолное) + " (" + Товар.НаименованиеХарактеристики + ")";
	КонецЕсли;

	ВыгрузитьЗначениеСвойстваCML_1(ОбъектXML, "ПолноеНаименование", ПолноеНаименование);

	РегистрЗначенияСвойствОбъектов = РегистрыСведений.ЗначенияСвойствОбъектов;
	Отбор = Новый Структура("Использовать", ИСТИНА);
	СтрокиТабличнойЧасти = Классификатор.НайтиСтроки(Отбор);
	Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
		Отбор      = Новый Структура("Объект, Свойство", Товар.НоменклатураСсылка,СтрокаТабличнойЧасти.Свойство);
		Ресурсы    = РегистрЗначенияСвойствОбъектов.Получить(Отбор);
		ИдСвойтсва = Строка(СтрокаТабличнойЧасти.Свойство.УникальныйИдентификатор());
		ВыгрузитьЗначениеСвойстваCML_1(ОбъектXML, ИдСвойтсва, Ресурсы.Значение);
	КонецЦикла;

КонецПроцедуры

// Процедура пищет в XML-файл информацию о товаре при выгрузке
// прайс-листа в формате CommerceML 1.0
//
// Параметры:
//  ОбъектXML - объект типа ЗаписьXML
//  Товар     - структура с информацией о товаре
//
Процедура ВыгрузитьТоварCML_1(ОбъектXML, Товар)

	ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
	ИдТовара = СформироватьИдентификатовТовараПоКодам(Товар.НоменклатураСсылка, Товар.ХарактеристикаСсылка);

	ЗаписатьАтрибут(ОбъектXML, "Идентификатор", ИдТовара);
	ЗаписатьАтрибут(ОбъектXML, "ИдентификаторВКаталоге", ИдТовара);
	Если НЕ ЗначениеЗаполнено(Товар.НаименованиеХарактеристики) Тогда
		ЗаписатьАтрибут(ОбъектXML, "Наименование", Товар.Наименование);
	Иначе
		ЗаписатьАтрибут(ОбъектXML, "Наименование", СокрЛП(Товар.Наименование) + " (" + Товар.НаименованиеХарактеристики + ")");
	КонецЕсли;
	ЗаписатьАтрибут(ОбъектXML, "Единица", Товар.ЕдиницаИзмерения);

	ВыгрузитьСвойстваТовара(ОбъектXML, Товар);

	ОбъектXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПИСИ В ФАЙЛ ЭЛЕКТРОННЫХ ДОКУМЕНТОВ

// Процедура обхода всех строк дерева. Рекурсивный обход
Процедура ПройтиПоВсемСтрокамДерева(Дерево, ОбъектXML, СсылкаКоторуюНеВыводить = Неопределено)
	
	ВыведеныГруппы = Ложь;
	
	Для каждого Строка из Дерево.Строки Цикл
		
		Если НЕ Строка.НоменклатураСсылка.ЭтоГруппа
			ИЛИ Строка.НоменклатураСсылка = СсылкаКоторуюНеВыводить Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВыведеныГруппы Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента("Группы");
			ВыведеныГруппы = Истина;
		КонецЕсли;
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Группа");
		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Строка(Строка.НоменклатураСсылка.УникальныйИдентификатор()));
		ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Строка.НоменклатураСсылка.Наименование);
		ОбработкаПрерыванияПользователя();
		
		Если Строка.Строки.Количество() > 0 Тогда
			ПройтиПоВсемСтрокамДерева(Строка, ОбъектXML, Строка.НоменклатураСсылка);
		КонецЕсли;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	Если ВыведеныГруппы Тогда
		ОбъектXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьКлассификатор(ОбъектXML, ИмяПрайса, ИдКаталога, ВладелецПрайса, Товары, МассивВыгружаемойНоменклатуры)
	
	ОбъектXML.ЗаписатьНачалоЭлемента("Классификатор");
	ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Новый УникальныйИдентификатор());
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", "Классификатор товаров");

	ВыгрузитьКонтрагентаДок(ОбъектXML, ВладелецПрайса, , ВладелецПрайса.ОсновнойБанковскийСчет, "Владелец");
	
	Состояние("Выгрузка классификатора...");
	РезультатДерево = Товары.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	ПройтиПоВсемСтрокамДерева(РезультатДерево, ОбъектXML);
	
	ВыгрузитьИнформацияОСвойствахНоменклатуры(ОбъектXML, МассивВыгружаемойНоменклатуры);
	
	ОбъектXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

Функция ПолучитьТаблицуРазличныхСвойствНоменклатуры(МассивНоменклатуры)
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ЗначенияСвойствОбъектов.Свойство КАК Свойство
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				   |ГДЕ
				   |	ЗначенияСвойствОбъектов.Объект В (&МассивНоменклатуры)";
				   
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();			   	
	Возврат ТаблицаСвойств;
	
КонецФункции

Функция ПолучитьТаблицуВсехСвойствТоваров(МассивНоменклатуры)
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
	               |	ЗначенияСвойствОбъектов.Объект КАК Объект,
	               |	ЗначенияСвойствОбъектов.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Объект В(&МассивНоменклатуры)";
				   
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	ТаблицаСвойств.Индексы.Добавить("Объект");
	
	Возврат ТаблицаСвойств;	
	
КонецФункции

Процедура ВыгрузитьОсновныеРеквизитыСвойстваДляКлассификатора(ОбъектXML, СвойствоНоменклатуры)
	

	Ид = СвойствоНоменклатуры.УникальныйИдентификатор();
	ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Ид);
	
	Наименование = СвойствоНоменклатуры.Наименование;
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", Наименование);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "ДляТоваров", "1");

КонецПроцедуры

Процедура ВыгрузитьИнформацияОСвойствахНоменклатуры(ОбъектXML, МассивНоменклатуры)
	
	Если МассивНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвойств = ПолучитьТаблицуРазличныхСвойствНоменклатуры(МассивНоменклатуры);
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("Свойства");
	Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл  
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Свойство");
		ВыгрузитьОсновныеРеквизитыСвойстваДляКлассификатора(ОбъектXML, СтрокаТаблицы.Свойство);
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Процедура пищет электронный документ "Каталог"
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  ИмяКаталога      - строка-наименование каталога
//  ИдКаталога       - строка-идентификатор каталога
//  ВладелецКаталога - справочник-ссылка "Организация", владелец каталога
//  Товары           - результат запроса по номенклатуре
//
Процедура ВыгрузитьКаталог(ОбъектXML, ИмяКаталога, ИдКаталога, ВладелецКаталога, Товары)

	ИнициализироватьФормуХодаОбработки("Выгрузка информации о номенклатуре", 0, 100);
	
	// расширенная информация о номенклатуре
	РезультатДерево = Товары.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	МассивВыгружаемойНоменклатуры = РезультатДерево.Строки.ВыгрузитьКолонку("НоменклатураСсылка");
	
	ВыгрузитьКлассификатор(ОбъектXML, ИмяПрайса, ИдКаталога, ВладелецКаталога, Товары, МассивВыгружаемойНоменклатуры);
	
	мТаблицаВсехСвойствТоваров = ПолучитьТаблицуВсехСвойствТоваров(МассивВыгружаемойНоменклатуры);
	
	ОбъектXML.ЗаписатьНачалоЭлемента("Каталог");

	ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Строка(ИдКаталога));
	Если НЕ ЗначениеЗаполнено(ИмяКаталога) Тогда
		ИмяКаталога = "Каталог товаров от "+ Строка(Формат(РабочаяДата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", ИмяКаталога);
	ВыгрузитьКонтрагентаДок(ОбъектXML, ВладелецКаталога, , ВладелецКаталога.ОсновнойБанковскийСчет, "Владелец");
	
	КоличествоВыгруженныхСтрок = 0;
	ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
				
	КоличествоВыгруженныхСтрок = ВыгрузитьПодробнуюИнформациюОНоменклатуре(ОбъектXML, РезультатДерево.Строки);
		
	ОбъектXML.ЗаписатьКонецЭлемента();

	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ЗакрытьФормуОбработкиДанных();
	
КонецПроцедуры

Процедура ВыгрузитьСвойстваОтдельнойНоменклатуры(ОбъектXML, Номенклатура)
	
	МассивСвойств = мТаблицаВсехСвойствТоваров.НайтиСтроки(Новый Структура("Объект", Номенклатура));
	
	Если МассивСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("ЗначенияСвойств");

	Для Каждого СтрокаСвойств Из МассивСвойств Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("ЗначенияСвойства");
		
		Ид = Строка(СтрокаСвойств.Свойство.УникальныйИдентификатор());
		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Ид);
		ЗаписатьТекстовойУзел(ОбъектXML, "Значение", Строка(СтрокаСвойств.Значение));
		
		ОбъектXML.ЗаписатьКонецЭлемента();				
		
	КонецЦикла;	
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ВыгрузитьПодробнуюИнформациюОбОднойНоменклатуре(ОбъектXML, СтрокаДереваИнформации, Ид = "")
	
	Для Каждого СтрокаХарактеристики Из СтрокаДереваИнформации.Строки Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
	
		Если НЕ ЗначениеЗаполнено(Ид) Тогда
			ИдТовара = СформироватьИдентификатовТовара(СтрокаХарактеристики.НоменклатураСсылка, СтрокаХарактеристики.ХарактеристикаСсылка);
			ЗаписатьТекстовойУзел(ОбъектXML, "Ид", ИдТовара);
		Иначе
			ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Ид);		
		КонецЕсли;
		
		ЗаписатьТекстовойУзел(ОбъектXML, "Штрихкод",     СтрокаХарактеристики.ШтрихКод);
		ЗаписатьТекстовойУзел(ОбъектXML, "Артикул",      СтрокаХарактеристики.Артикул);
						
		ВыгрузитьНаименованиеНоменклатуры(ОбъектXML, СтрокаХарактеристики);
				
		ВыгрузитьИнформациюОЕдиницеИзмерения(ОбъектXML, СтрокаХарактеристики);
						
		ВыгрузитьИдентификаторГруппыДляТовара(ОбъектXML, СтрокаХарактеристики);
		
		ВыгрузитьСвойстваОтдельнойНоменклатуры(ОбъектXML, СтрокаХарактеристики.НоменклатураСсылка);
		
		ВыгрузитьИнформациюОСтавкеНалога(ОбъектXML, СтрокаХарактеристики);
		
		// выгружаем значения характеристик
		ЕстьЗначенияСвойств = Ложь;
		Для Каждого СтрокаПодчиненного Из СтрокаХарактеристики.Строки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаПодчиненного.Свойство)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПодчиненного.Значение) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЕстьЗначенияСвойств Тогда
				ОбъектXML.ЗаписатьНачалоЭлемента("ХарактеристикиТовара");
				ЕстьЗначенияСвойств = Истина;								
			КонецЕсли;
		
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, СтрокаПодчиненного.Свойство,  СтрокаПодчиненного.Значение, , "ХарактеристикаТовара");							
									
		КонецЦикла;
		
		Если ЕстьЗначенияСвойств Тогда
			ОбъектXML.ЗаписатьКонецЭлемента();
			ЕстьЗначенияСвойств = Истина;
		КонецЕсли;
		
		ВыгрузитьДопИнформациюОНоменклатуре(ОбъектXML, СтрокаХарактеристики);
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;		
	
	Возврат СтрокаДереваИнформации.Строки.Количество();
	
КонецФункции

Функция ВыгрузитьПодробнуюИнформациюОНоменклатуре(ОбъектXML, СтрокиДерева)
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоВыгруженных = 0;
	
	// на верхнем уровне номенклатура, потом характеристики а потом значения характеристик
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.НоменклатураСсылка.ЭтоГруппа Тогда
			
			КоличествоВыгруженных = КоличествоВыгруженных + ВыгрузитьПодробнуюИнформациюОНоменклатуре(ОбъектXML, СтрокаДерева.Строки);
			
		Иначе
			
			// это не группа, значит ниже по группировке характеристика а потом его значения
			КоличествоВыгруженных = КоличествоВыгруженных + ВыгрузитьПодробнуюИнформациюОбОднойНоменклатуре(ОбъектXML, СтрокаДерева);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоВыгруженных;
	
КонецФункции

Процедура ВыгрузитьДопИнформациюОНоменклатуре(ОбъектXML, Товар)
	
	ЕстьЗначенияСвойств = ЗначениеЗаполнено(Товар.ВидНоменклатуры)
						ИЛИ ЗначениеЗаполнено(Товар.ТипНоменклатуры);
						
	Если Не ЕстьЗначенияСвойств Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
	
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "ВидНоменклатуры", Товар.ВидНоменклатуры);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "ТипНоменклатуры", Товар.ТипНоменклатуры);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "НаименованиеКраткое", Товар.Наименование);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "НаименованиеПолное", Товар.НаименованиеПолное);
		
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ВыгрузитьПодробнуюИнформациюОбОднойНоменклатуреиЦенах(ОбъектXML, СтрокаДереваИнформации, Ид = "")
	
	Если СтрокаДереваИнформации.Строки.Количество() = 0 Тогда
		Возврат 0;
	Конецесли;
	
	Для Каждого СтрокаХарактеристики Из СтрокаДереваИнформации.Строки Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Предложение");
        	
		Если НЕ ЗначениеЗаполнено(Ид) Тогда
			ИдТовара = СформироватьИдентификатовТовара(СтрокаХарактеристики.НоменклатураСсылка, СтрокаХарактеристики.ХарактеристикаСсылка);
			ЗаписатьТекстовойУзел(ОбъектXML, "Ид", ИдТовара);
		Иначе
			ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Ид);		
		КонецЕсли;
		
		ЗаписатьТекстовойУзел(ОбъектXML, "Штрихкод",     СтрокаХарактеристики.ШтрихКод);
		ЗаписатьТекстовойУзел(ОбъектXML, "Артикул",      СтрокаХарактеристики.Артикул);
					
		ВыгрузитьНаименованиеНоменклатуры(ОбъектXML, СтрокаХарактеристики);
			
		ВыгрузитьИнформациюОЕдиницеИзмерения(ОбъектXML, СтрокаХарактеристики);
						
		ВыгрузитьИдентификаторГруппыДляТовара(ОбъектXML, СтрокаХарактеристики);
		
		ВыгрузитьСвойстваОтдельнойНоменклатуры(ОбъектXML, СтрокаХарактеристики.НоменклатураСсылка);
		
		ВыгрузитьИнформациюОСтавкеНалога(ОбъектXML, СтрокаХарактеристики);
		
		ТаблицаЗначенийРеквизитов = Новый ТаблицаЗначений;
		ТаблицаЗначенийРеквизитов.Колонки.Добавить("Свойство");
		ТаблицаЗначенийРеквизитов.Индексы.Добавить("Свойство");
		
		// выгружаем значения характеристик
		ЕстьЗначенияСвойств = Ложь;
		Для Каждого СтрокаПодчиненного Из СтрокаХарактеристики.Строки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаПодчиненного.Свойство)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПодчиненного.Значение) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ТаблицаЗначенийРеквизитов.Найти(СтрокаПодчиненного.Свойство, "Свойство") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЕстьЗначенияСвойств Тогда
				ОбъектXML.ЗаписатьНачалоЭлемента("ХарактеристикиТовара");
				ЕстьЗначенияСвойств = Истина;								
			КонецЕсли;
			
			СтрокаТаб = ТаблицаЗначенийРеквизитов.Добавить();
			СтрокаТаб.Свойство = СтрокаПодчиненного.Свойство;
		
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, СтрокаПодчиненного.Свойство,  СтрокаПодчиненного.Значение, , "ХарактеристикаТовара");
									
		КонецЦикла;
		
		Если ЕстьЗначенияСвойств Тогда
			ОбъектXML.ЗаписатьКонецЭлемента();
			ЕстьЗначенияСвойств = Истина;
		КонецЕсли;
		
		ВыгрузитьДопИнформациюОНоменклатуре(ОбъектXML, СтрокаХарактеристики);		
		
		
		ТаблицаТиповЦен = Новый ТаблицаЗначений;
		ТаблицаТиповЦен.Колонки.Добавить("ТипЦенСсылка");
		ТаблицаТиповЦен.Индексы.Добавить("ТипЦенСсылка");
		
		// еще раз обойдем строки цен, толькор уже будем за ценами следить
        ОбъектXML.ЗаписатьНачалоЭлемента("Цены");
		
		Для Каждого СтрокаПодчиненного Из СтрокаХарактеристики.Строки Цикл
			
			Если ТаблицаТиповЦен.Найти(СтрокаПодчиненного.ТипЦенСсылка, "ТипЦенСсылка") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Цена");
			
			Представление = СокрЛП(СтрокаПодчиненного.Цена) + " " + СокрЛП(СтрокаПодчиненного.Валюта) + " за " + СокрЛП(СтрокаПодчиненного.ЕдиницаХраненияОстатковНаименование);
			ЗаписатьТекстовойУзел(ОбъектXML, "Представление", Представление);
			
			ЗаписатьТекстовойУзел(ОбъектXML, "ИдТипаЦены", Строка(СтрокаПодчиненного.ТипЦенСсылка.Код));
			
			
			ЗаписатьТекстовойУзел(ОбъектXML, "ЦенаЗаЕдиницу", СтрокаПодчиненного.Цена);
			ЗаписатьВФайлВалюту(ОбъектXML, СтрокаПодчиненного.Валюта);
			ЗаписатьТекстовойУзел(ОбъектXML, "Единица",       СтрокаПодчиненного.ЕдиницаХраненияОстатковНаименование);
			ЗаписатьТекстовойУзел(ОбъектXML, "Коэффициент",   СтрокаПодчиненного.ЕдиницаХраненияОстатковКоэффициент);
			
			СтрокаТаб = ТаблицаТиповЦен.Добавить();
			СтрокаТаб.ТипЦенСсылка = СтрокаПодчиненного.ТипЦенСсылка;
			
			ОбъектXML.ЗаписатьКонецЭлемента();

		КонецЦикла;
		
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
		
		ОбъектXML.ЗаписатьКонецЭлемента();	
		
	КонецЦикла;		
	
	Возврат СтрокаДереваИнформации.Строки.Количество();
	
КонецФункции


Функция ВыгрузитьПодробнуюИнформациюОНоменклатуреИЦенах(ОбъектXML, СтрокиДерева)
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоВыгруженных = 0;
	
	// на верхнем уровне номенклатура, потом характеристики а потом значения характеристик
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.НоменклатураСсылка.ЭтоГруппа Тогда
			
			КоличествоВыгруженных = КоличествоВыгруженных + ВыгрузитьПодробнуюИнформациюОНоменклатуреИЦенах(ОбъектXML, СтрокаДерева.Строки);
			
		Иначе
			
			// это не группа, значит ниже по группировке характеристика а потом его значения
			КоличествоВыгруженных = КоличествоВыгруженных + ВыгрузитьПодробнуюИнформациюОбОднойНоменклатуреиЦенах(ОбъектXML, СтрокаДерева);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоВыгруженных;
	
КонецФункции

Процедура ЗаписатьВФайлВалюту(ОбъектXML, Валюта)
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВалюты = Сред(Строка(Валюта), 1, 3);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Валюта", СтрокаВалюты);
	
КонецПроцедуры


// Процедура пищет электронный документ "Пакет предложений"
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  ИмяПрайса      - строка-наименование пакета предложений
//  ИдКаталога     - строка-идентификатор каталога по которому подготовлен пакет предложений
//  ВладелецПрайса - справочник-ссылка "Организация", владелец пакета предложений
//  Товары           - результат запроса по номенклатуре и ценам
//
Процедура ВыгрузитьПрайс(ОбъектXML, ИмяПрайса, ИдКаталога, ВладелецПрайса, Товары)

	ИнициализироватьФормуХодаОбработки("Выгрузка прайс-листа", 0, 100);
	
	РезультатДерево = Товары.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	МассивВыгружаемойНоменклатуры = РезультатДерево.Строки.ВыгрузитьКолонку("НоменклатураСсылка");
	
	ВыгрузитьКлассификатор(ОбъектXML, ИмяПрайса, ИдКаталога, ВладелецПрайса, Товары, МассивВыгружаемойНоменклатуры);
	
	мТаблицаВсехСвойствТоваров = ПолучитьТаблицуВсехСвойствТоваров(МассивВыгружаемойНоменклатуры);
	
	ОбъектXML.ЗаписатьНачалоЭлемента("ПакетПредложений");

	ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Строка(ИдКаталога));
	Если НЕ ЗначениеЗаполнено(ИмяПрайса) Тогда
		ИмяПрайса = "Прайс-лист от "+ Строка(Формат(РабочаяДата, "ДФ=dd.MM.yyyy"));
	КонецЕсли;

	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", ИмяПрайса);
	
	ИдКаталога = Строка(Организация.УникальныйИдентификатор());
	ЗаписатьТекстовойУзел(ОбъектXML, "ИдКаталога", ИдКаталога);
	
	ВыгрузитьКонтрагентаДок(ОбъектXML, ВладелецПрайса, , ВладелецПрайса.ОсновнойБанковскийСчет, "Владелец");
	
	//Пишем таблицу типов цен
	ОбъектXML.ЗаписатьНачалоЭлемента("ТипыЦен");

	ТаблицаТиповЦен = Товары.Выгрузить();
	ТаблицаТиповЦен.Свернуть("ТипЦенСсылка,ТипЦен,ВалютаЦены,ЦенаВключаетНДС");

	Для Каждого СтрокаТипЦены Из ТаблицаТиповЦен Цикл
		
		Если СтрокаТипЦены.ТипЦен = Null Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектXML.ЗаписатьНачалоЭлемента("ТипЦены");

		ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Строка(СтрокаТипЦены.ТипЦенСсылка.Код));
		ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", СтрокаТипЦены.ТипЦен);
		ЗаписатьВФайлВалюту(ОбъектXML, СтрокаТипЦены.ВалютаЦены);
		
		ВыгрузитьНДС(ОбъектXML,СтрокаТипЦены.ЦенаВключаетНДС);

		ОбъектXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ОбъектXML.ЗаписатьКонецЭлемента();

	//Пишем таблицу товаров с ценами
	КоличествоВыгруженныхСтрок = 0;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("Предложения");
	
	КоличествоВыгруженныхСтрок = ВыгрузитьПодробнуюИнформациюОНоменклатуреИЦенах(ОбъектXML, РезультатДерево.Строки);
		
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ЗакрытьФормуОбработкиДанных();
	
КонецПроцедуры

// Процедура пищет электронный документ "Пакет предложений"
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  ИмяПрайса      - строка-наименование пакета предложений
//  ИдКаталога     - строка-идентификатор каталога по которому подготовлен пакет предложений
//  ВладелецПрайса - справочник-ссылка "Организация", владелец пакета предложений
//  Товары           - результат запроса по номенклатуре и ценам
//
Процедура ВыгрузитьПрайсCML_1(ОбъектXML, Товары)

	ИнициализироватьФормуХодаОбработки("Выгрузка прайс-листа в формате 1.0", 0, 100);
	
	ИдКаталога = Строка(Организация.УникальныйИдентификатор());

	Если ВыгружатьСведенияОбОрганизации Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента("Контрагент");
		
		ОбъектXML.ЗаписатьАтрибут("Идентификатор", ИдКаталога);
		ОбъектXML.ЗаписатьАтрибут("Наименование", Организация.Наименование);
		ОбъектXML.ЗаписатьАтрибут("ОтображаемоеНаименование", Организация.НаименованиеПолное);
		ФактАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация, "Фактический");
		ЮрАдрес   = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юридический");
		ОбъектXML.ЗаписатьАтрибут("Адрес", ФактАдрес);
		ОбъектXML.ЗаписатьАтрибут("ЮридическийАдрес", ЮрАдрес);
		
		ОбъектXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если ВыгружатьКаталог Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента("Каталог");
		ОбъектXML.ЗаписатьАтрибут("Идентификатор", ИдКаталога);
		Если НЕ ЗначениеЗаполнено(ИмяПрайсаCML_1) Тогда
			ЗаписатьАтрибут(ОбъектXML, "Наименование", "Каталог товаров");
		Иначе
			ЗаписатьАтрибут(ОбъектXML, "Наименование", СокрЛП(ИмяПрайсаCML_1));
		КонецЕсли;
		ОбъектXML.ЗаписатьАтрибут("Владелец", ИдКаталога);
		Если НЕ ЗначениеЗаполнено(ЕдиницаПоУмолчанию) Тогда
			ЗаписатьАтрибут(ОбъектXML, "Единица", "шт");
		Иначе
			ЗаписатьАтрибут(ОбъектXML, "Единица", ЕдиницаПоУмолчанию.Наименование);
		КонецЕсли;

		ВыгрузитьСвойствоCML_1(ОбъектXML, "Комментарий", "Дополнительная информация");
		ВыгрузитьСвойствоCML_1(ОбъектXML, "ПолноеНаименование", "Полное наименование");
		ВыгрузитьСвойствоCML_1(ОбъектXML, "ТипЦены", "Тип цены");
		Отбор = Новый Структура("Использовать", ИСТИНА);
		СтрокиТабличнойЧасти = Классификатор.НайтиСтроки(Отбор);
		Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
			ИдСвойства = Строка(СтрокаТабличнойЧасти.Свойство.УникальныйИдентификатор());
			ВыгрузитьСвойствоCML_1(ОбъектXML, ИдСвойства, СтрокаТабличнойЧасти.Свойство.Наименование);
		КонецЦикла;

		ТаблицаТоваров = Товары.Выгрузить();
		ТаблицаТоваров.Свернуть("НоменклатураСсылка, Наименование, ХарактеристикаСсылка, НаименованиеХарактеристики, ЕдиницаИзмерения");
		
		Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
			ВыгрузитьТоварCML_1(ОбъектXML, СтрокаТаблицыТоваров);
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	// Выгружаем прайс
	Выборка = Товары.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ТипЦенСсылка") Цикл
		ОбъектXML.ЗаписатьНачалоЭлемента("ПакетПредложений");
		ОбъектXML.ЗаписатьАтрибут("ИдентификаторКаталога", ИдКаталога);
		ОбъектXML.ЗаписатьАтрибут("ДействительноС", Формат(ДействительноС, "ДФ=yyyy-MM-dd"));
		ОбъектXML.ЗаписатьАтрибут("ДействительноДо", Формат(ДействительноПо, "ДФ=yyyy-MM-dd"));
		ВыгрузитьЗначениеСвойстваCML_1(ОбъектXML, "ТипЦены", Выборка.ТипЦен);
		
		Пока Выборка.СледующийПоЗначениюПоля("НоменклатураСсылка") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаСсылка") Цикл
				ОбъектXML.ЗаписатьНачалоЭлемента("Предложение");
				ИдТовара = СформироватьИдентификатовТовараПоКодам(Выборка.НоменклатураСсылка, Выборка.ХарактеристикаСсылка);				
				ЗаписатьАтрибут(ОбъектXML, "ИдентификаторТовара", ИдТовара);
				ЗаписатьАтрибут(ОбъектXML, "Цена", Формат(Выборка.Цена, "ЧРД=.; ЧГ=0"));
				ЗаписатьАтрибут(ОбъектXML, "НормаУпаковки", Выборка.Коэффициент);
				ЗаписатьАтрибут(ОбъектXML, "Единица", Выборка.ЕдиницаИзмеренияПрайс);
				ЗаписатьВФайлВалюту(ОбъектXML, Выборка.Валюта);
								
				ОбъектXML.ЗаписатьНачалоЭлемента("СсылкаНаТовар");
				ЗаписатьАтрибут(ОбъектXML, "ИдентификаторКаталога", ИдКаталога);
				ЗаписатьАтрибут(ОбъектXML, "ИдентификаторВКаталоге", ИдТовара);
				ОбъектXML.ЗаписатьКонецЭлемента();
				
				ВыгрузитьСвойстваТовара(ОбъектXML, Выборка);
				
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЦикла;
		ОбъектXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗакрытьФормуОбработкиДанных();
	
КонецПроцедуры

Процедура ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, ИмяХозОперации, ВидДоговораПоУмолчанию, ВыгружатьСтруктурнуюЕдиницу = Ложь)
	
	ВидДоговора = Выборка.ВидДоговора;
	Если НЕ ЗначениеЗаполнено(ВидДоговора)
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		
		ВидДоговора = ВидДоговораПоУмолчанию;	
		
	КонецЕсли;
	
	// программа по виду договора определяет роль организации и контрагента в документе
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		РольКонтрагентаДляВыгрузки = "Покупатель";
		РольОрганизацииДляВыгрузки = "Продавец";
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		
		РольКонтрагентаДляВыгрузки = "Продавец";
		РольОрганизацииДляВыгрузки = "Покупатель";
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		РольКонтрагентаДляВыгрузки = "Комиссионер";
		РольОрганизацииДляВыгрузки = "Комитент";
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		РольКонтрагентаДляВыгрузки = "Комитент";
		РольОрганизацииДляВыгрузки = "Комиссионер";
		
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Ид", Строка(Выборка.ДокСсылка.УникальныйИдентификатор()));
	ЗаписатьТекстовойУзел(ОбъектXML, "Номер",       Выборка.Номер);
	ЗаписатьТекстовойУзел(ОбъектXML, "Дата",        Формат(Выборка.Дата, "ДФ=yyyy-MM-dd"));
	ЗаписатьТекстовойУзел(ОбъектXML, "ХозОперация", ИмяХозОперации);	
	ЗаписатьТекстовойУзел(ОбъектXML, "Роль",        РольОрганизацииДляВыгрузки);
	ЗаписатьВФайлВалюту(ОбъектXML, Выборка.Валюта);
	ЗаписатьТекстовойУзел(ОбъектXML, "Курс",        Выборка.КурсВзаиморасчетов);
	ЗаписатьТекстовойУзел(ОбъектXML, "Сумма",       Выборка.СуммаДокумента);
		
	ОбъектXML.ЗаписатьНачалоЭлемента("Контрагенты");
	
	СтруктурнаяЕдиница = ?(ВыгружатьСтруктурнуюЕдиницу, Выборка.СтруктурнаяЕдиница, Неопределено);
	ВыгрузитьКонтрагентаДок(ОбъектXML, Выборка.ОрганизацияСсылка, РольОрганизацииДляВыгрузки, СтруктурнаяЕдиница);
	ВыгрузитьКонтрагентаДок(ОбъектXML, Выборка.КонтрагентСсылка,  РольКонтрагентаДляВыгрузки);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Время", Формат(Выборка.Дата, "ДЛФ=T"));
    		
КонецПроцедуры

Процедура ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка)
	
	//Выгрузка информации по налогам в докменте
	Если Выборка.СуммаНДС Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента("Налоги");
		ВыгрузитьНДС(ОбъектXML, Выборка.СуммаВключаетНДС, Выборка.СуммаНДС);
		ОбъектXML.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузитьБазовыеРеквизитыТабличнойЧастиТоваров(ОбъектXML, Выборка, ИдКаталога)
	
	ЗаписатьТекстовойУзел(ОбъектXML, "ИдКаталога",       ИдКаталога);
	ЗаписатьТекстовойУзел(ОбъектXML, "ЦенаЗаЕдиницу",    Выборка.Цена);
	ЗаписатьТекстовойУзел(ОбъектXML, "Количество",       Выборка.Количество);
	ЗаписатьТекстовойУзел(ОбъектXML, "Сумма",            Выборка.Сумма);
	ЗаписатьТекстовойУзел(ОбъектXML, "Единица",          Выборка.ЕдиницаХраненияОстатков);
	ЗаписатьТекстовойУзел(ОбъектXML, "Коэффициент",      Выборка.Коэффициент);	
	
КонецПроцедуры

Процедура ИнициализацияИнформированиеПользователяОВыгрузкеДокументов(ТекстДляПользователя, СписокДок, ВыводитьИнформационныесообщения)
	
	Если ВыводитьИнформационныесообщения Тогда
		ИнициализироватьФормуХодаОбработки(ТекстДляПользователя, 0, СписокДок.Количество());
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения)
	
	Если ВыводитьИнформационныесообщения Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки("", 1);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения)
	
	Если ВыводитьИнформационныесообщения Тогда
		ЗакрытьФормуОбработкиДанных();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузитьЗаказыПоставщику(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения)
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка КАК ДокСсылка,
	|	ЗаказПоставщикуТовары.Ссылка.Номер КАК Номер,
	|	ЗаказПоставщикуТовары.Ссылка.Дата КАК Дата,
	|	ЗаказПоставщикуТовары.Ссылка.ВалютаДокумента.Наименование КАК Валюта,
	|	ЗаказПоставщикуТовары.Ссылка.Контрагент КАК КонтрагентСсылка,
	|	ЗаказПоставщикуТовары.Ссылка.Организация КАК ОрганизацияСсылка,
	|	ЗаказПоставщикуТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПоставщикуТовары.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ЗаказПоставщикуТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПоставщикуТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	ЗаказПоставщикуТовары.Номенклатура.Родитель КАК РодительНоменклатуры,
	|	ЗаказПоставщикуТовары.Номенклатура.Наименование КАК Наименование,
	|	ЗаказПоставщикуТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ЗаказПоставщикуТовары.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ЗаказПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
	|	ЗаказПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
	|	ЗаказПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
	|	ЗаказПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаХраненияОстатковНаименование,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения.Вес КАК ЕдиницаХраненияОстатковВес,
	|	ЗаказПоставщикуТовары.ЕдиницаИзмерения.Объем КАК ЕдиницаХраненияОстатковОбъем,
	|	ЗаказПоставщикуТовары.Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|	ЗаказПоставщикуТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПоставщикуТовары.Сумма КАК Сумма,
	|	ЗаказПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаСсылка,
	|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	ЗаказПоставщикуТовары.Количество КАК Количество,
	|	ЗаказПоставщикуТовары.Цена КАК Цена,
	|	ЗаказПоставщикуТовары.Коэффициент КАК Коэффициент,
	|	ЗаказПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Ид,
	|	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	|	ЗаказПоставщикуТовары.Ссылка.СтруктурнаяЕдиница,
	|	ЗаказПоставщикуТовары.Ссылка.Комментарий,
	|	ЗаказПоставщикуТовары.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ЗаказПоставщикуТовары.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент
	|			И ЗаказПоставщикуТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	|		ПО ЗаказПоставщикуТовары.Номенклатура = РегистрШтрихКоды.Владелец
	|			И ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	|			И ЗаказПоставщикуТовары.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка В(&СписокДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокСсылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаНДС),
	|	Максимум(СуммаВключаетНДС)
	|ПО
	|	ДокСсылка");
	
	ИнициализацияИнформированиеПользователяОВыгрузкеДокументов("Выгрузка заказов поставщику", СписокДок, ВыводитьИнформационныесообщения);
			
	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, "Заказ товара", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Истина);			
		
		ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
		
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий",  Выборка.Комментарий);
		
		ИдКаталога = Выборка.ОрганизацияСсылка.УникальныйИдентификатор();
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураСсылка) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			Если НЕ ЗначениеЗаполнено(Выборка.Ид) Тогда
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			Иначе
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка, "*"+Выборка.Ид);
			КонецЕсли;
			
			ВыгрузитьБазовыеРеквизитыТабличнойЧастиТоваров(ОбъектXML, Выборка, ИдКаталога);
			
			//Выгрузка информации по налогам
			ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
			
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();

		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);	
		
КонецПроцедуры

Функция ВыгрузитьНаименованиеНоменклатуры(ОбъектXML, Товар)
	
	НаименованиеНоменклатуры = ?(ЗначениеЗаполнено(Товар.НаименованиеПолное), Товар.НаименованиеПолное, Товар.Наименование);
	
	Если НЕ ЗначениеЗаполнено(Товар.ХарактеристикаСсылка) Тогда
		ИмяТовара = НаименованиеНоменклатуры;
	Иначе
		ИмяТовара = СокрЛП(НаименованиеНоменклатуры) + " (" + СокрЛП(Товар.НаименованиеХарактеристики) + ")";
	КонецЕсли;
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование", ИмяТовара);
	
КонецФункции

Процедура ДобавитьНовоеЗначениеРеквизита(ОбъектXML, Наименование, Значение, ПустоеЗначение = "", ИмяГруппыЭлементов = "ЗначениеРеквизита")
	
	ЗначениеДляЗаписи = Значение;
	Если ЗначениеДляЗаписи = Null Тогда
		ЗначениеДляЗаписи = ПустоеЗначение;
	КонецЕсли;
	
	// пустую строку не записываем
	Если ТипЗнч(ЗначениеДляЗаписи) = Тип("Строка") 
		И ПустаяСтрока(ЗначениеДляЗаписи) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента(ИмяГруппыЭлементов);
	
	ЗаписатьТекстовойУзел(ОбъектXML, "Наименование",  Наименование, Ложь);
	ЗаписатьТекстовойУзел(ОбъектXML, "Значение",  ЗначениеДляЗаписи, Ложь);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ДобавитьИнформациюОДокументахОснования(ОбъектXML, Выборка)
	
	Если ПустаяСтрока(Выборка.НомерВходящегоДокументаЭлектронногоОбмена)
		И НЕ ЗначениеЗаполнено(Выборка.ДатаВходящегоДокументаЭлектронногоОбмена) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектXML.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
		
		ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "НомерДокументаОснования",  Выборка.НомерВходящегоДокументаЭлектронногоОбмена);
		ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "ДатаДокументаОснования",  Выборка.ДатаВходящегоДокументаЭлектронногоОбмена, Дата('00010101'));			
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьСчетНаОплатуПокупателю(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка КАК ДокСсылка,
	|	СчетНаОплатуПокупателю.Ссылка.Номер КАК Номер,
	|	СчетНаОплатуПокупателю.Ссылка.Дата КАК Дата,
	|	СчетНаОплатуПокупателю.Ссылка.ВалютаДокумента.Наименование КАК Валюта,
	|	СчетНаОплатуПокупателю.Ссылка.Контрагент КАК КонтрагентСсылка,
	|	СчетНаОплатуПокупателю.Ссылка.Организация КАК ОрганизацияСсылка,
	|	СчетНаОплатуПокупателю.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплатуПокупателю.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	СчетНаОплатуПокупателю.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплатуПокупателю.Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	СчетНаОплатуПокупателю.Номенклатура.Родитель КАК РодительНоменклатуры,
	|	СчетНаОплатуПокупателю.Номенклатура.Наименование КАК Наименование,
	|	СчетНаОплатуПокупателю.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	СчетНаОплатуПокупателю.Номенклатура.Артикул КАК Артикул,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.Наименование КАК ЕдиницаХраненияОстатковНаименование,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.Вес КАК ЕдиницаХраненияОстатковВес,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.Объем КАК ЕдиницаХраненияОстатковОбъем,
	|	СчетНаОплатуПокупателю.Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|	СчетНаОплатуПокупателю.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СчетНаОплатуПокупателю.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателю.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуПокупателю.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателю.ХарактеристикаНоменклатуры КАК ХарактеристикаСсылка,
	|	СчетНаОплатуПокупателю.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	СчетНаОплатуПокупателю.Количество КАК Количество,
	|	СчетНаОплатуПокупателю.Цена КАК Цена,
	|	СчетНаОплатуПокупателю.Коэффициент КАК Коэффициент,
	|	СчетНаОплатуПокупателю.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Ид,
	|	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	|	СчетНаОплатуПокупателю.Ссылка.ДатаОплаты,
	|	СчетНаОплатуПокупателю.Ссылка.СтруктурнаяЕдиница,
	|	СчетНаОплатуПокупателю.Ссылка.Комментарий,
	|	СчетНаОплатуПокупателю.ЗаказПокупателя.НомерВходящегоДокументаЭлектронногоОбмена КАК НомерВходящегоДокументаЭлектронногоОбмена,
	|	СчетНаОплатуПокупателю.ЗаказПокупателя.ДатаВходящегоДокументаЭлектронногоОбмена КАК ДатаВходящегоДокументаЭлектронногоОбмена,
	|	СчетНаОплатуПокупателю.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО СчетНаОплатуПокупателю.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент
	|			И СчетНаОплатуПокупателю.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И СчетНаОплатуПокупателю.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	|		ПО СчетНаОплатуПокупателю.Номенклатура = РегистрШтрихКоды.Владелец
	|			И СчетНаОплатуПокупателю.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	|			И СчетНаОплатуПокупателю.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&СписокДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокСсылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаНДС),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	МАКСИМУМ(НомерВходящегоДокументаЭлектронногоОбмена),
	|	МАКСИМУМ(ДатаВходящегоДокументаЭлектронногоОбмена)
	|ПО
	|	ДокСсылка");
	
	ИнициализацияИнформированиеПользователяОВыгрузкеДокументов("Выгрузка счетов на оплату покупателю", СписокДок, ВыводитьИнформационныесообщения);

	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, "Счет на оплату", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Истина);
		
		ЗаписатьТекстовойУзел(ОбъектXML, "СрокПлатежа", Формат(Выборка.ДатаОплаты, "ДФ=yyyy-MM-dd"));
		
		ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
		
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий",  Выборка.Комментарий);
		
		ИдКаталога = Выборка.ОрганизацияСсылка.УникальныйИдентификатор();
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураСсылка) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			Если НЕ ЗначениеЗаполнено(Выборка.Ид) Тогда
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			Иначе
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка, "*"+Выборка.Ид);
			КонецЕсли;
			
			ВыгрузитьБазовыеРеквизитыТабличнойЧастиТоваров(ОбъектXML, Выборка, ИдКаталога);
			
			//Выгрузка информации по налогам
			ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
			
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
		//ЗначенияРеквизитов
		ДобавитьИнформациюОДокументахОснования(ОбъектXML, Выборка);

		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
	
КонецПроцедуры


Процедура ВыгрузитьИнформациюОСерийномНомере(ОбъектXML, Выборка, НужноЗаписыватьШапкуРеквизитов = Истина)
	
	Если ПустаяСтрока(Выборка.СерияНоменклатурыНаименование) Тогда
		Возврат;
	КонецЕсли;
	
	Если НужноЗаписыватьШапкуРеквизитов Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента("ДополнительныеЗначенияРеквизитов");
	КонецЕсли;
	
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыНаименование", Выборка.СерияНоменклатурыНаименование);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыСерийныйНомер", Выборка.СерияНоменклатурыСерийныйНомер);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыСертификат", Выборка.СерияНоменклатурыСертификат);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыСрокГодности", Выборка.СерияНоменклатурыСрокГодности);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыНомерГТД", Выборка.СерияНоменклатурыНомерГТД);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыСтранаПроисхожденияКОД", Выборка.СерияНоменклатурыСтранаПроисхожденияКОД);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыСтранаПроисхожденияНаименование", Выборка.СерияНоменклатурыСтранаПроисхожденияНаименование);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное", Выборка.СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыСтранаПроисхожденияКодАльфа2", Выборка.СерияНоменклатурыСтранаПроисхожденияКодАльфа2);
	ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СерияНоменклатурыКомментарий", Выборка.СерияНоменклатурыКомментарий);
		
	Если НужноЗаписыватьШапкуРеквизитов Тогда
		ОбъектXML.ЗаписатьКонецЭлемента();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьРеализациюТоваровУслуг(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК ДокСсылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента.Наименование КАК Валюта,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент КАК КонтрагентСсылка,
	|	РеализацияТоваровУслуг.Ссылка.Организация КАК ОрганизацияСсылка,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК РодительНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.Наименование КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.Наименование КАК ЕдиницаХраненияОстатковНаименование,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.Вес КАК ЕдиницаХраненияОстатковВес,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.Объем КАК ЕдиницаХраненияОстатковОбъем,
	|	РеализацияТоваровУслуг.Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.Наименование КАК СерияНоменклатурыНаименование,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.СерийныйНомер КАК СерияНоменклатурыСерийныйНомер,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.Сертификат КАК СерияНоменклатурыСертификат,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.СрокГодности КАК СерияНоменклатурыСрокГодности,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД.Код КАК СерияНоменклатурыНомерГТД,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения.Код КАК СерияНоменклатурыСтранаПроисхожденияКОД,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК СерияНоменклатурыСтранаПроисхожденияНаименование,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения.КодАльфа2 КАК СерияНоменклатурыСтранаПроисхожденияКодАльфа2,
	|	РеализацияТоваровУслуг.СерияНоменклатуры.Комментарий КАК СерияНоменклатурыКомментарий,
	|	РеализацияТоваровУслуг.Сумма КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаСсылка,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	РеализацияТоваровУслуг.Количество КАК Количество,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.Коэффициент КАК Коэффициент,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Ид,
	|	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	|	РеализацияТоваровУслуг.Ссылка.Комментарий,
	|	РеализацияТоваровУслуг.Ссылка.Сделка.НомерВходящегоДокументаЭлектронногоОбмена КАК НомерВходящегоДокументаЭлектронногоОбмена,
	|	РеализацияТоваровУслуг.Ссылка.Сделка.ДатаВходящегоДокументаЭлектронногоОбмена КАК ДатаВходящегоДокументаЭлектронногоОбмена,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО РеализацияТоваровУслуг.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент
	|			И РеализацияТоваровУслуг.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	|		ПО РеализацияТоваровУслуг.Номенклатура = РегистрШтрихКоды.Владелец
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&СписокДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокСсылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаНДС),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	МАКСИМУМ(НомерВходящегоДокументаЭлектронногоОбмена),
	|	МАКСИМУМ(ДатаВходящегоДокументаЭлектронногоОбмена)
	|ПО
	|	ДокСсылка");
	
	ИнициализацияИнформированиеПользователяОВыгрузкеДокументов("Выгрузка реализации товаров и услуг", СписокДок, ВыводитьИнформационныесообщения);

	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, "Отпуск товара", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, ЛОЖЬ);
		
		ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
					
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий",  Выборка.Комментарий);
		
		ИдКаталога = Выборка.ОрганизацияСсылка.УникальныйИдентификатор();
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураСсылка) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			Если НЕ ЗначениеЗаполнено(Выборка.Ид) Тогда
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			Иначе
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка, "*"+Выборка.Ид);
			КонецЕсли;
			
			ВыгрузитьБазовыеРеквизитыТабличнойЧастиТоваров(ОбъектXML, Выборка, ИдКаталога);
			
			//Выгрузка информации по налогам
			ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
			
			ВыгрузитьИнформациюОСерийномНомере(ОбъектXML, Выборка);
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
			
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
		//ЗначенияРеквизитов
		ДобавитьИнформациюОДокументахОснования(ОбъектXML, Выборка);

		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
	
КонецПроцедуры

Процедура ВыгрузитьВозвратТоваровПоставщику(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК ДокСсылка,
	|	ВозвратТоваровПоставщику.Ссылка.Номер КАК Номер,
	|	ВозвратТоваровПоставщику.Ссылка.Дата КАК Дата,
	|	ВозвратТоваровПоставщику.Ссылка.ВалютаДокумента.Наименование КАК Валюта,
	|	ВозвратТоваровПоставщику.Ссылка.Контрагент КАК КонтрагентСсылка,
	|	ВозвратТоваровПоставщику.Ссылка.Организация КАК ОрганизацияСсылка,
	|	ВозвратТоваровПоставщику.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ВозвратТоваровПоставщику.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ВозвратТоваровПоставщику.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВозвратТоваровПоставщику.Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	ВозвратТоваровПоставщику.Номенклатура.Родитель КАК РодительНоменклатуры,
	|	ВозвратТоваровПоставщику.Номенклатура.Наименование КАК Наименование,
	|	ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВозвратТоваровПоставщику.Номенклатура.Артикул КАК Артикул,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
	|	ВозвратТоваровПоставщику.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Наименование КАК ЕдиницаХраненияОстатковНаименование,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Вес КАК ЕдиницаХраненияОстатковВес,
	|	ВозвратТоваровПоставщику.ЕдиницаИзмерения.Объем КАК ЕдиницаХраненияОстатковОбъем,
	|	ВозвратТоваровПоставщику.Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|	ВозвратТоваровПоставщику.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.Наименование КАК СерияНоменклатурыНаименование,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.СерийныйНомер КАК СерияНоменклатурыСерийныйНомер,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.Сертификат КАК СерияНоменклатурыСертификат,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.СрокГодности КАК СерияНоменклатурыСрокГодности,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.НомерГТД.Код КАК СерияНоменклатурыНомерГТД,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.СтранаПроисхождения.Код КАК СерияНоменклатурыСтранаПроисхожденияКОД,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК СерияНоменклатурыСтранаПроисхожденияНаименование,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.СтранаПроисхождения.КодАльфа2 КАК СерияНоменклатурыСтранаПроисхожденияКодАльфа2,
	|	ВозвратТоваровПоставщику.СерияНоменклатуры.Комментарий КАК СерияНоменклатурыКомментарий,
	|	ВозвратТоваровПоставщику.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры КАК ХарактеристикаСсылка,
	|	ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	ВозвратТоваровПоставщику.Количество КАК Количество,
	|	ВозвратТоваровПоставщику.Цена КАК Цена,
	|	ВозвратТоваровПоставщику.Коэффициент КАК Коэффициент,
	|	ВозвратТоваровПоставщику.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Ид,
	|	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	|	ВозвратТоваровПоставщику.Ссылка.Комментарий,
	|	ВозвратТоваровПоставщику.Ссылка.Сделка.Номер КАК НомерВходящегоДокументаЭлектронногоОбмена,
	|	ВозвратТоваровПоставщику.Ссылка.Сделка.Дата КАК ДатаВходящегоДокументаЭлектронногоОбмена,
	|	ВозвратТоваровПоставщику.Качество,
	|	ВозвратТоваровПоставщику.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ВозвратТоваровПоставщику.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент
	|			И ВозвратТоваровПоставщику.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	|		ПО ВозвратТоваровПоставщику.Номенклатура = РегистрШтрихКоды.Владелец
	|			И ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	|			И ВозвратТоваровПоставщику.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&СписокДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокСсылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаНДС),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	МАКСИМУМ(НомерВходящегоДокументаЭлектронногоОбмена),
	|	МАКСИМУМ(ДатаВходящегоДокументаЭлектронногоОбмена)
	|ПО
	|	ДокСсылка");
	
	ИнициализацияИнформированиеПользователяОВыгрузкеДокументов("Выгрузка возврат товаров поставщику", СписокДок, ВыводитьИнформационныесообщения);

	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, "Возврат товара", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, ЛОЖЬ);
		
		ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
					
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий",  Выборка.Комментарий);
		
		ИдКаталога = Выборка.ОрганизацияСсылка.УникальныйИдентификатор();
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураСсылка) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			Если НЕ ЗначениеЗаполнено(Выборка.Ид) Тогда
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			Иначе
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка, "*"+Выборка.Ид);
			КонецЕсли;
			
			ВыгрузитьБазовыеРеквизитыТабличнойЧастиТоваров(ОбъектXML, Выборка, ИдКаталога);
			
			//Выгрузка информации по налогам
			ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
			
			Если ЗначениеЗаполнено(Выборка.Качество)
				ИЛИ ЗначениеЗаполнено(Выборка.СерияНоменклатурыНаименование) Тогда
				
				ОбъектXML.ЗаписатьНачалоЭлемента("ДополнительныеЗначенияРеквизитов");
	
				ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "Качество", Выборка.Качество);
				
				ВыгрузитьИнформациюОСерийномНомере(ОбъектXML, Выборка, Ложь);
					
				ОбъектXML.ЗаписатьКонецЭлемента();				
								
			КонецЕсли;			
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
			
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
		//ЗначенияРеквизитов
		ДобавитьИнформациюОДокументахОснования(ОбъектXML, Выборка);

		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
	
КонецПроцедуры

Процедура ВыгрузитьОтчетКомитентуОПродажах(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Ссылка КАК ДокСсылка,
	|	ОтчетКомитентуОПродажах.Ссылка.Номер КАК Номер,
	|	ОтчетКомитентуОПродажах.Ссылка.Дата КАК Дата,
	|	ОтчетКомитентуОПродажах.Ссылка.ВалютаДокумента.Наименование КАК Валюта,
	|	ОтчетКомитентуОПродажах.Ссылка.Контрагент КАК КонтрагентСсылка,
	|	ОтчетКомитентуОПродажах.Ссылка.Организация КАК ОрганизацияСсылка,
	|	ОтчетКомитентуОПродажах.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ОтчетКомитентуОПродажах.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ОтчетКомитентуОПродажах.Ссылка.СпособРасчетаКомиссионногоВознаграждения КАК СпособРасчетаКомиссионногоВознаграждения,
	|	ОтчетКомитентуОПродажах.Ссылка.УдержатьКомиссионноеВознаграждение КАК УдержатьКомиссионноеВознаграждение,
	|	ОтчетКомитентуОПродажах.Ссылка.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ОтчетКомитентуОПродажах.Ссылка.СтавкаНДСВознаграждения КАК СтавкаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.Ссылка.ПроцентКомиссионногоВознаграждения КАК ПроцентКомиссионногоВознаграждения,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	ОтчетКомитентуОПродажах.Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	ОтчетКомитентуОПродажах.Номенклатура.Родитель КАК РодительНоменклатуры,
	|	ОтчетКомитентуОПродажах.Номенклатура.Наименование КАК Наименование,
	|	ОтчетКомитентуОПродажах.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ОтчетКомитентуОПродажах.Номенклатура.Артикул КАК Артикул,
	|	ОтчетКомитентуОПродажах.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ОтчетКомитентуОПродажах.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
	|	ОтчетКомитентуОПродажах.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
	|	ОтчетКомитентуОПродажах.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
	|	ОтчетКомитентуОПродажах.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	|	ОтчетКомитентуОПродажах.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	|	ОтчетКомитентуОПродажах.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	ОтчетКомитентуОПродажах.ЕдиницаИзмерения.Наименование КАК ЕдиницаХраненияОстатковНаименование,
	|	ОтчетКомитентуОПродажах.ЕдиницаИзмерения.Вес КАК ЕдиницаХраненияОстатковВес,
	|	ОтчетКомитентуОПродажах.ЕдиницаИзмерения.Объем КАК ЕдиницаХраненияОстатковОбъем,
	|	ОтчетКомитентуОПродажах.Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|	ОтчетКомитентуОПродажах.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.Наименование КАК СерияНоменклатурыНаименование,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.СерийныйНомер КАК СерияНоменклатурыСерийныйНомер,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.Сертификат КАК СерияНоменклатурыСертификат,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.СрокГодности КАК СерияНоменклатурыСрокГодности,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.НомерГТД.Код КАК СерияНоменклатурыНомерГТД,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.СтранаПроисхождения.Код КАК СерияНоменклатурыСтранаПроисхожденияКОД,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК СерияНоменклатурыСтранаПроисхожденияНаименование,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.СтранаПроисхождения.КодАльфа2 КАК СерияНоменклатурыСтранаПроисхожденияКодАльфа2,
	|	ОтчетКомитентуОПродажах.СерияНоменклатуры.Комментарий КАК СерияНоменклатурыКомментарий,
	|	ОтчетКомитентуОПродажах.Сумма КАК Сумма,
	|	0 КАК СуммаНДС,
	|	0 КАК СтавкаНДС,
	|	ОтчетКомитентуОПродажах.ЦенаПоступления КАК ЦенаПоступления,
	|	ОтчетКомитентуОПродажах.СуммаПоступления КАК СуммаПоступления,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК ТЧСуммаВознаграждения,
	|	ОтчетКомитентуОПродажах.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.ХарактеристикаНоменклатуры КАК ХарактеристикаСсылка,
	|	ОтчетКомитентуОПродажах.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	ОтчетКомитентуОПродажах.Количество КАК Количество,
	|	ОтчетКомитентуОПродажах.Цена КАК Цена,
	|	ОтчетКомитентуОПродажах.Коэффициент КАК Коэффициент,
	|	ОтчетКомитентуОПродажах.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Ид,
	|	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	|	ОтчетКомитентуОПродажах.Ссылка.Комментарий,
	|	ОтчетКомитентуОПродажах.Ссылка.Сделка.Номер КАК НомерВходящегоДокументаЭлектронногоОбмена,
	|	ОтчетКомитентуОПродажах.Ссылка.Сделка.Дата КАК ДатаВходящегоДокументаЭлектронногоОбмена,
	|	ОтчетКомитентуОПродажах.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ОтчетКомитентуОПродажах.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент
	|			И ОтчетКомитентуОПродажах.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ОтчетКомитентуОПродажах.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	|		ПО ОтчетКомитентуОПродажах.Номенклатура = РегистрШтрихКоды.Владелец
	|			И ОтчетКомитентуОПродажах.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	|			И ОтчетКомитентуОПродажах.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка В(&СписокДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокСсылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(СуммаНДС),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	МАКСИМУМ(НомерВходящегоДокументаЭлектронногоОбмена),
	|	МАКСИМУМ(ДатаВходящегоДокументаЭлектронногоОбмена)
	|ПО
	|	ДокСсылка");
	
	ИнициализацияИнформированиеПользователяОВыгрузкеДокументов("Выгрузка отчет комитенту о продажах", СписокДок, ВыводитьИнформационныесообщения);
	
	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, "Отчет о продажах комиссионного товара", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, ЛОЖЬ);
		
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий",  Выборка.Комментарий);
						        
		ИдКаталога = Выборка.ОрганизацияСсылка.УникальныйИдентификатор();
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураСсылка) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			Если НЕ ЗначениеЗаполнено(Выборка.Ид) Тогда
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			Иначе
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка, "*"+Выборка.Ид);
			КонецЕсли;
			
			ВыгрузитьБазовыеРеквизитыТабличнойЧастиТоваров(ОбъектXML, Выборка, ИдКаталога);
			
			Если ЗначениеЗаполнено(Выборка.ЦенаПоступления)
				ИЛИ ЗначениеЗаполнено(Выборка.СуммаПоступления)
				ИЛИ ЗначениеЗаполнено(Выборка.ТЧСуммаВознаграждения)
				ИЛИ ЗначениеЗаполнено(Выборка.СуммаНДСВознаграждения)
				ИЛИ ЗначениеЗаполнено(Выборка.СерияНоменклатурыНаименование) Тогда
				
				ОбъектXML.ЗаписатьНачалоЭлемента("ДополнительныеЗначенияРеквизитов");
	
				ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "ЦенаПоступления", Выборка.ЦенаПоступления);
				ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СуммаПоступления", Выборка.СуммаПоступления);
				ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СуммаВознаграждения", Выборка.ТЧСуммаВознаграждения);
				ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СуммаНДСВознаграждения", Выборка.СуммаНДСВознаграждения);
				
				ВыгрузитьИнформациюОСерийномНомере(ОбъектXML, Выборка, Ложь);
					
				ОбъектXML.ЗаписатьКонецЭлемента();							
			
			КонецЕсли;
									
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
			
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
		
		ОбъектXML.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
		
		Если Не ПустаяСтрока(Выборка.НомерВходящегоДокументаЭлектронногоОбмена) Тогда
		
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "НомерДокументаОснования",  Выборка.НомерВходящегоДокументаЭлектронногоОбмена);
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "ДатаДокументаОснования",  Выборка.ДатаВходящегоДокументаЭлектронногоОбмена, Дата('00010101'));
			
		КонецЕсли;
		
		ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СпособРасчетаКомиссионногоВознаграждения",  Выборка.СпособРасчетаКомиссионногоВознаграждения);
		ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "УдержатьКомиссионноеВознаграждение",  Выборка.УдержатьКомиссионноеВознаграждение, Ложь);
		ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СуммаВознаграждения",  Выборка.СуммаВознаграждения, 0);
		ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СтавкаНДСВознаграждения",  Выборка.СтавкаНДСВознаграждения);
		ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "ПроцентКомиссионногоВознаграждения",  Выборка.ПроцентКомиссионногоВознаграждения);

		ОбъектXML.ЗаписатьКонецЭлемента();
		
		
		ОбъектXML.ЗаписатьКонецЭлемента();		
				
	КонецЦикла;
	
	ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
	
КонецПроцедуры

Процедура ВыгрузитьПереоценкаТоваровОтданныхНаКомиссию(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка КАК ДокСсылка,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Номер КАК Номер,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Дата КАК Дата,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.ВалютаДокумента.Наименование КАК Валюта,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Контрагент КАК КонтрагентСсылка,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Организация КАК ОрганизацияСсылка,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Сумма КАК СуммаДокумента,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ЛОЖЬ КАК СуммаВключаетНДС,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.Родитель КАК РодительНоменклатуры,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.Наименование КАК Наименование,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.Артикул КАК Артикул,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаИзмеренияНаименование,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаИзмеренияКод,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаИзмеренияНаименованиеПолное,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаИзмеренияМеждународноеСокращение,
	|	ПереоценкаТоваровОтданныхНаКомиссию.ЕдиницаИзмерения КАК ЕдиницаХраненияОстатков,
	|	ПереоценкаТоваровОтданныхНаКомиссию.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	ПереоценкаТоваровОтданныхНаКомиссию.ЕдиницаИзмерения.Наименование КАК ЕдиницаХраненияОстатковНаименование,
	|	ПереоценкаТоваровОтданныхНаКомиссию.ЕдиницаИзмерения.Вес КАК ЕдиницаХраненияОстатковВес,
	|	ПереоценкаТоваровОтданныхНаКомиссию.ЕдиницаИзмерения.Объем КАК ЕдиницаХраненияОстатковОбъем,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.Наименование КАК СерияНоменклатурыНаименование,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.СерийныйНомер КАК СерияНоменклатурыСерийныйНомер,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.Сертификат КАК СерияНоменклатурыСертификат,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.СрокГодности КАК СерияНоменклатурыСрокГодности,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.НомерГТД.Код КАК СерияНоменклатурыНомерГТД,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.СтранаПроисхождения.Код КАК СерияНоменклатурыСтранаПроисхожденияКОД,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.СтранаПроисхождения.Наименование КАК СерияНоменклатурыСтранаПроисхожденияНаименование,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.СтранаПроисхождения.КодАльфа2 КАК СерияНоменклатурыСтранаПроисхожденияКодАльфа2,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СерияНоменклатуры.Комментарий КАК СерияНоменклатурыКомментарий,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Сумма КАК Сумма,
	|	0 КАК СуммаНДС,
	|	0 КАК СтавкаНДС,
	|	ПереоценкаТоваровОтданныхНаКомиссию.ХарактеристикаНоменклатуры КАК ХарактеристикаСсылка,
	|	ПереоценкаТоваровОтданныхНаКомиссию.ХарактеристикаНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Количество КАК Количество,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Цена КАК Цена,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Коэффициент КАК Коэффициент,
	|	ПереоценкаТоваровОтданныхНаКомиссию.НомерСтроки КАК НомерСтроки,
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Ид,
	|	РегистрШтрихКоды.Штрихкод КАК ШтрихКод,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Комментарий,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Сделка.НомерВходящегоДокументаЭлектронногоОбмена КАК НомерВходящегоДокументаЭлектронногоОбмена,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Сделка.ДатаВходящегоДокументаЭлектронногоОбмена КАК ДатаВходящегоДокументаЭлектронногоОбмена,
	|	ПереоценкаТоваровОтданныхНаКомиссию.СуммаСтарая,
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ
	|	Документ.ПереоценкаТоваровОтданныхНаКомиссию.Товары КАК ПереоценкаТоваровОтданныхНаКомиссию
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ПереоценкаТоваровОтданныхНаКомиссию.Ссылка.Контрагент = НоменклатураКонтрагентов.Контрагент
	|			И ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И ПереоценкаТоваровОтданныхНаКомиссию.ХарактеристикаНоменклатуры = НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК РегистрШтрихКоды
	|		ПО ПереоценкаТоваровОтданныхНаКомиссию.Номенклатура = РегистрШтрихКоды.Владелец
	|			И ПереоценкаТоваровОтданныхНаКомиссию.ХарактеристикаНоменклатуры = РегистрШтрихКоды.ХарактеристикаНоменклатуры
	|			И ПереоценкаТоваровОтданныхНаКомиссию.ЕдиницаИзмерения = РегистрШтрихКоды.ЕдиницаИзмерения
	|ГДЕ
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка В(&СписокДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокСсылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаНДС),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	МАКСИМУМ(НомерВходящегоДокументаЭлектронногоОбмена),
	|	МАКСИМУМ(ДатаВходящегоДокументаЭлектронногоОбмена)
	|ПО
	|	ДокСсылка");
	
	ИнициализацияИнформированиеПользователяОВыгрузкеДокументов("Выгрузка переоценка товаров отданных на комиссию", СписокДок, ВыводитьИнформационныесообщения);

	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, "Переоценка товаров", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, ЛОЖЬ);
		
		ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
					
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий",  Выборка.Комментарий);
		
		ИдКаталога = Выборка.ОрганизацияСсылка.УникальныйИдентификатор();
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураСсылка) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			Если НЕ ЗначениеЗаполнено(Выборка.Ид) Тогда
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка);
			Иначе
				ВыгрузитьОсновныеРеквизитыТовара(ОбъектXML, Выборка, "*"+Выборка.Ид);
			КонецЕсли;
			
			ВыгрузитьБазовыеРеквизитыТабличнойЧастиТоваров(ОбъектXML, Выборка, ИдКаталога);
			
			//Выгрузка информации по налогам
			ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
			
			Если ЗначениеЗаполнено(Выборка.СуммаСтарая)
				ИЛИ ЗначениеЗаполнено(Выборка.СерияНоменклатурыНаименование) Тогда
				
				ОбъектXML.ЗаписатьНачалоЭлемента("ДополнительныеЗначенияРеквизитов");
	
				ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "СуммаСтарая", Выборка.СуммаСтарая);
				
				ВыгрузитьИнформациюОСерийномНомере(ОбъектXML, Выборка, Ложь);
					
				ОбъектXML.ЗаписатьКонецЭлемента();				
								
			КонецЕсли;			
			
			ОбъектXML.ЗаписатьКонецЭлемента();
			
			ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
			
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();
		
		//ЗначенияРеквизитов
		ДобавитьИнформациюОДокументахОснования(ОбъектXML, Выборка);

		ОбъектXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
	
КонецПроцедуры

Функция ОпределитьТипДокументаДляВыгрузкиДляОснованияСчетаФактуры(ДокОснование)
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Возврат "ОтчетКомиссионераОПродажах";
	КонецЕсли;
	
	Возврат "ПоступлениеТоваровУслуг";
	
КонецФункции

Процедура ВыгрузитьСчетФактуруВыданную(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК ДокСсылка,
	|	СчетФактура.Ссылка.Номер,
	|	СчетФактура.Ссылка.Дата,
	|	СчетФактура.ДокументОснование.Номер КАК НомерОснования,
	|	СчетФактура.ДокументОснование.Дата КАК ДатаОснования,
	|	СчетФактура.Ссылка.Комментарий,
	|	СчетФактура.Ссылка.Организация КАК ОрганизацияСсылка,
	|	СчетФактура.Ссылка.СтавкаНДС,
	|	СчетФактура.Ссылка.Сумма,
	|	СчетФактура.Ссылка.СуммаНДС,
	|	СчетФактура.Ссылка.СтавкаНДС КАК СтавкаНДС,
	|	СчетФактура.Ссылка.Контрагент КАК КонтрагентСсылка,
	|	СчетФактура.Ссылка.ВалютаДокумента КАК Валюта,
	|	1 КАК КурсВзаиморасчетов,
	|	ИСТИНА КАК СуммаВключаетНДС,
	|	СчетФактура.Ссылка.СуммаДокумента,
	|	СчетФактура.Ссылка.ДоговорКонтрагента,
	|	СчетФактура.НомерСтроки КАК НомерСтроки,
	|	СчетФактура.ДокументОснование,
	|	&ВидДоговора КАК ВидДоговора,
	|	ВЫБОР
	|		КОГДА СчетФактура.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&СписокДок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокСсылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(КурсВзаиморасчетов),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	МАКСИМУМ(ВидДоговора)
	|ПО
	|	ДокСсылка");
	
	ИнициализацияИнформированиеПользователяОВыгрузкеДокументов("Выгрузка счет-фактура выданный", СписокДок, ВыводитьИнформационныесообщения);
	
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("СписокДок", СписокДок);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка         = РезультатЗапрос.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокСсылка") Цикл
		
		Если Выборка.НаАванс Тогда
			
			Сообщить("Счет-фактуру на аванс выгрузить нельзя: " + Строка(Выборка.ДокСсылка));
			Продолжить;
			
		КонецЕсли;
		
		ОбъектXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВыгрузитьЕдиныеРеквизитыДокументов(ОбъектXML, Выборка, "Счет-фактура", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, ЛОЖЬ);
		
		ВыгрузитьИнформациюОНалогахДляВыборки(ОбъектXML, Выборка);
					
		ЗаписатьТекстовойУзел(ОбъектXML, "Комментарий",  Выборка.Комментарий);
				
		ОбъектXML.ЗаписатьНачалоЭлемента("Товары");
		
		СохрНомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда 
				Продолжить;
			КонецЕсли;

			//Не выгружаем дубли строки, которые возникают если один товар имеет более одного штрихкода
			Если СохрНомерСтроки = Выборка.НомерСтроки Тогда
				Продолжить;
			Иначе
				СохрНомерСтроки = Выборка.НомерСтроки;
			КонецЕсли;
			
			ОбъектXML.ЗаписатьНачалоЭлемента("Товар");
			
			ЗаписатьТекстовойУзел(ОбъектXML, "Наименование",  Выборка.НомерСтроки);
			ЗаписатьТекстовойУзел(ОбъектXML, "БазоваяЕдиница", "шт");
			
			ОбъектXML.ЗаписатьНачалоЭлемента("ДополнительныеЗначенияРеквизитов");
	
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "Номер",  Выборка.НомерОснования);
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "Дата", Выборка.ДатаОснования);
			
			ТипДокумента = ОпределитьТипДокументаДляВыгрузкиДляОснованияСчетаФактуры(Выборка.ДокументОснование);
			ДобавитьНовоеЗначениеРеквизита(ОбъектXML, "Тип", ТипДокумента);			
				
			ОбъектXML.ЗаписатьКонецЭлемента();			
									
			ОбъектXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ОбъектXML.ЗаписатьКонецЭлемента();

		ОбъектXML.ЗаписатьКонецЭлемента();
		
		ОбновитьИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
		
	КонецЦикла;
	
	ОкончаниеИнформированиеПользователяОВыгрузкеДокументов(ВыводитьИнформационныесообщения);
	
КонецПроцедуры

// Процедура пищет электронные документы "Заказ товара"
//
// Параметры:
//  ОбъектXML        - объект типа ЗаписьXML
//  СписокДок      - список значений, содержит список выгружаемых документов
//
Процедура ВыгрузитьДокументы(ОбъектXML, СписокДок, ТипОбработки, ВыводитьИнформационныесообщения = Истина)

	Если ТипОбработки = "ЗаказПоставщику" Тогда
	
		ВыгрузитьЗаказыПоставщику(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения);	
		
	ИначеЕсли ТипОбработки = "СчетНаОплатуПокупателю" Тогда
		
		ВыгрузитьСчетНаОплатуПокупателю(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения);
		
	ИначеЕсли ТипОбработки = "РеализацияТоваровУслуг" Тогда
		
		ВыгрузитьРеализациюТоваровУслуг(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения);
		
	ИначеЕсли ТипОбработки = "ПереоценкаТоваровОтданныхНаКомиссию" Тогда
		
		ВыгрузитьПереоценкаТоваровОтданныхНаКомиссию(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения);
		
	ИначеЕсли ТипОбработки = "ВозвратТоваровПоставщику" Тогда
		
		ВыгрузитьВозвратТоваровПоставщику(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения);
		
	ИначеЕсли ТипОбработки = "ОтчетКомитентуОПродажах" Тогда
		
		ВыгрузитьОтчетКомитентуОПродажах(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения);
		
	ИначеЕсли ТипОбработки = "СчетФактураВыданный" Тогда
		
		ВыгрузитьСчетФактуруВыданную(ОбъектXML, СписокДок, ВыводитьИнформационныесообщения);

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВЫГРУЗКОЙ ДАННЫХ


// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	мФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	мФормаХодаВыполненияОбмена.Значение = мФормаХодаВыполненияОбмена.Значение + ПроцентПрибавления;		
		
КонецПроцедуры

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0, МаксимальноеЗначение = 100)
	
	Если мФормаХодаВыполненияОбмена = Неопределено Тогда
		
		мФормаХодаВыполненияОбмена = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
					
	КонецЕсли;
	
	мФормаХодаВыполненияОбмена.НаименованиеОбработкиДанных = "Выгрузка данных CommerceML";
	мФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	мФормаХодаВыполненияОбмена.Значение = ПроцентПрибавления;
	мФормаХодаВыполненияОбмена.МаксимальноеЗначение = МаксимальноеЗначение;
	
	Если Не мФормаХодаВыполненияОбмена.Открыта() Тогда
		мФормаХодаВыполненияОбмена.Открыть();
	КонецЕсли;		
		
КонецПроцедуры

//Процедура закрывает форму хода обработки данных
Процедура ЗакрытьФормуОбработкиДанных()
	
	Если мФормаХодаВыполненияОбмена <> Неопределено Тогда
		
		Если мФормаХодаВыполненияОбмена.Открыта() Тогда
			мФормаХодаВыполненияОбмена.Закрыть();
		КонецЕсли;			
		
	КонецЕсли;	
		
КонецПроцедуры



Функция ОпределитьВыгружаютсяДокументы(ТипОбработки) Экспорт
	
	Возврат ТипОбработки = "ЗаказПоставщику"
		ИЛИ ТипОбработки = "СчетНаОплатуПокупателю"
		ИЛИ ТипОбработки = "РеализацияТоваровУслуг"
		ИЛИ ТипОбработки = "СчетФактураВыданный"
		ИЛИ ТипОбработки = "ПереоценкаТоваровОтданныхНаКомиссию"
		ИЛИ ТипОбработки = "ВозвратТоваровПоставщику"
		ИЛИ ТипОбработки = "ОтчетКомитентуОПродажах";	
	
КонецФункции

Функция ОпределитьКоличествоДокументовПодлежащихВыгрузке() Экспорт
	
	КоличествоДляВыгрузки = 0;
	
	Для Каждого СтрокаКонтрагент Из ДеревоДокументов.Строки Цикл

		Если НЕ СтрокаКонтрагент.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаДокумент Из СтрокаКонтрагент.Строки Цикл
			
			Если СтрокаДокумент.Обрабатывать = 1 Тогда
				КоличествоДляВыгрузки = КоличествоДляВыгрузки + 1;
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЦикла;
	
	Возврат КоличествоДляВыгрузки;	
	
КонецФункции

Функция ОпределитьИмяФайлаДляСохраненияПоУмолчанию(ИмяКонтрагента, ТипОбработки)
	
	// имя файла - имя контрагента +_ имя документа + дата
	Возврат  РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ИмяКонтрагента + "_" + ТипОбработки + "_" + Формат(РабочаяДата, "ДФ=yyyy-MM-dd") + ".xml");		
	
КонецФункции

Функция ВыгрузитьНаборДокументовВКаталог(ТипОбработки, ИмяОсновногоКаталога, ОбщееКоличествоДокументовДляВыгрузки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяОсновногоКаталога) Тогда
		Предупреждение("Не указано имя каталога для выгрузки данных! Операция не может быть выполнена!");
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	РаботаСФайлами.ПроверитьСуществованиеКаталога(ИмяОсновногоКаталога);
	
	РезультатВыгрузки = Истина;
	
	ИнициализироватьФормуХодаОбработки("Выгрузка документов", 0, ОбщееКоличествоДокументовДляВыгрузки);
	
	Для Каждого СтрокаКонтрагент Из ДеревоДокументов.Строки Цикл

		Если НЕ СтрокаКонтрагент.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;

		СписокДок = Новый СписокЗначений();
		Для Каждого СтрокаДокумент Из СтрокаКонтрагент.Строки Цикл
			
			Если СтрокаДокумент.Обрабатывать = 1 Тогда
				СписокДок.Добавить(СтрокаДокумент.Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокДок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКонтрагента = Строка(СтрокаКонтрагент.Строка); 
		
		ОтобразитьНовоеСообщениеВФормеХодаОбработки("Документы контрагента: " + ИмяКонтрагента, СписокДок.Количество());
		
		ИмяФайлаДляВыгрузки = ОпределитьИмяФайлаДляСохраненияПоУмолчанию(ИмяКонтрагента, ТипОбработки); 
		
		ИмяВремФайла = ИмяОсновногоКаталога + "\" + ИмяФайлаДляВыгрузки;
		
		СтрокаСоответствияФайлов = СоответствиеКонтрагентовИФайлов.Добавить();
		СтрокаСоответствияФайлов.Контрагент = СтрокаКонтрагент.Строка;
		СтрокаСоответствияФайлов.ИмяФайла = ИмяФайлаДляВыгрузки;
		СтрокаСоответствияФайлов.КоличествоДокументов = СписокДок.Количество();
				
		Попытка
			ТекРезультатВыгрузки = ВыгрузитьВФайл(ТипВыгрузки, ИмяВремФайла, СписокДок, Ложь);
			СтрокаСоответствияФайлов.РезультатВыгрузки = ТекРезультатВыгрузки;			
		Исключение
			СтрокаСоответствияФайлов.РезультатВыгрузки = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка при сохранении документов контрагента: " + Строка(СтрокаСоответствияФайлов.Контрагент) + Символы.ПС + ОписаниеОшибки()); 
			ТекРезультатВыгрузки = Ложь;
		КонецПопытки;
		
		РезультатВыгрузки = РезультатВыгрузки И ТекРезультатВыгрузки;		

	КонецЦикла;
	
	ЗакрытьФормуОбработкиДанных();
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура ЗаписатьШапкуФайла(ОбъектXML)
	
	ОбъектXML.ЗаписатьАтрибут("ВерсияСхемы", "2.03");
	ОбъектXML.ЗаписатьАтрибут("ДатаФормирования", Формат(РабочаяДата, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс"));
	
КонецПроцедуры

// Функция контролирует возможность выгрузки данных и запускает 
// механизмы выгрузки данных в зависимости от передаваемых параметров
//
// Параметры:
//  ТипОбработки - строка, служит для определения типа выгружаемых объектов
//  ИмяФайла     - строка - имя файла, куда осуществляется выгрузка
//  СписокДок    - список-значений - список документов для выгрузки
//
//Возвращаемое значение:
//  булево - истина если выгрузка успешна, иначе ложь
//
Функция ВыгрузитьВФайл(ТипОбработки, ИмяФайла, СписокДокументов = Неопределено, ИнформироватьОПроцессеВыгрузки = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Предупреждение("Не указано имя файла выгрузки! Операция не может быть выполнена!");
		Возврат ЛОЖЬ;
	КонецЕсли;

	Если НЕ ОпределитьВыгружаютсяДокументы(ТипОбработки) И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация! Операция не может быть выполнена!");
		Возврат ЛОЖЬ;
	КонецЕсли;

	ИдКаталога = Организация.УникальныйИдентификатор();

	ОбъектXML = Новый ЗаписьXML;
	Если ТипОбработки = "ПрайсCML_1" Тогда
		ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	Иначе
		ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-16");
	КонецЕсли;

	ОбъектXML.ЗаписатьОбъявлениеXML();
	ОбъектXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");

	Если ТипОбработки = "Каталог" Тогда
		
		ЗаписатьШапкуФайла(ОбъектXML);
		
		ПостроительОтчетаКаталог.Параметры.Вставить("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ПостроительОтчетаКаталог.Выполнить();
		ВыгрузитьКаталог(ОбъектXML, ИмяКаталога, ИдКаталога, Организация, ПостроительОтчетаКаталог.Результат);
		Предупреждение("Выгрузка информации о товарах завершена успешно.");

	ИначеЕсли ТипОбработки = "Прайс" Тогда
		
		ЗаписатьШапкуФайла(ОбъектXML);
				
		ПостроительОтчетаПрайс.Параметры.Вставить("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ПостроительОтчетаПрайс.Параметры.Вставить("ДатаОтчета", РабочаяДата);
		ПостроительОтчетаПрайс.Выполнить();
		ВыгрузитьПрайс(ОбъектXML, ИмяПрайса, ИдКаталога, Организация, ПостроительОтчетаПрайс.Результат);
		Предупреждение("Выгрузка прайс-листа завершена успешно.");

	ИначеЕсли ТипОбработки = "ПрайсCML_1" Тогда
		ПостроительОтчетаПрайсCML_1.Параметры.Вставить("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ПостроительОтчетаПрайсCML_1.Параметры.Вставить("ДатаОтчета", РабочаяДата);
		ПостроительОтчетаПрайсCML_1.Выполнить();
		ВыгрузитьПрайсCML_1(ОбъектXML, ПостроительОтчетаПрайсCML_1.Результат);
		Предупреждение("Выгрузка прайс-листа завершена успешно.");

	ИначеЕсли ОпределитьВыгружаютсяДокументы(ТипОбработки) Тогда
		
		ТипДокументаОбработки = Тип("ДокументСсылка." + ТипОбработки);
		
		ЗаписатьШапкуФайла(ОбъектXML);
		
		Если СписокДокументов = Неопределено Тогда
			
			СписокДокументов = Новый СписокЗначений();
			Отбор = Новый Структура("Обрабатывать", 1);
			НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
			
			Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
				
				Если ТипЗнч(СтрокаДерева.Строка) = ТипДокументаОбработки Тогда
					СписокДокументов.Добавить(СтрокаДерева.Строка)
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВыгрузитьДокументы(ОбъектXML, СписокДокументов, ТипОбработки, ИнформироватьОПроцессеВыгрузки);
		
	КонецЕсли;

	ОбъектXML.ЗаписатьКонецЭлемента();
	ОбъектXML.Закрыть();

	Возврат ИСТИНА;

КонецФункции

// Процедура контролирует и выгружает документ "Заказ поставщику"
// Вызывается из формы документа
//
// Параметры:
//  Документ - документ-ссылка "Заказ поставщику"
//
Процедура ВыгрузитьИзДокумента(Документ) Экспорт

	ИмяТипаДокумента = ОпределитьИмяТипаДокумента(Документ);
	
	Если Метаданные.Документы[ИмяТипаДокумента].Проведение = Метаданные.свойстваОбъектов.Проведение.Разрешить
		И НЕ Документ.Проведен Тогда
		
		Предупреждение("Непроведенный документ не может быть выгружен!");
		Возврат;
		
	КонецЕсли;
	
	ИмяФайлаПоУмолчанию = ОпределитьИмяФайлаДляСохраненияПоУмолчанию(Строка(Документ.Контрагент), ИмяТипаДокумента);
	
	ИмяФайла = ВыборФайла(РежимДиалогаВыбораФайла.Сохранение, ИмяФайлаПоУмолчанию);
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьДокументВФайл(Документ, ИмяФайла);
	
	Предупреждение("Выгрузка завершена!");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ДАННЫХ В ПИСЬМА ЭЛЕКТРОННОЙ ПОЧТЫ

// Функция формирует электронное письмо с вложенным XML-файлом
//
// Параметры:
//  Тема                  - строка, тема письма
//  ПутьВложения         - строка, путь к файлу вложения
//  ИмяФайлаВложения     - строка, имя файла вложения для письма
//  НаименованиеВложения - строка, наименование вложения для письма
//  ТекстПисьма          - строка, с текстом тела письма
//  Адрес                - строка, адрес письма
//  Открывать            - булево, флаг открытия формы письма
//
// Возвращаемое значение
//  Структура полученная из процедуры НаписатьПисьмо общего модуля "ЭлектроннаяПочта"
//
Функция СформироватьПисьмо(Тема, ПутьВложения, ИмяФайлаВложения, НаименованиеВложения, ТекстПисьма, Адрес = Неопределено, Открывать = ЛОЖЬ)

	Вложение           = Новый Структура("Наименование, ИмяФайла, Хранилище");
	Вложение.Хранилище = Новый ДвоичныеДанные(ПутьВложения);
	СтруктураВложений  = Новый СписокЗначений;
	СтруктураВложений.Добавить(Вложение);

	СписокАдресов = Новый СписокЗначений;
	Если НЕ Адрес = Неопределено Тогда
		СписокАдресов.Добавить(Адрес, Адрес);
	КонецЕсли;
	
	ТекстПисьмаHTML = "<HTML><HEAD><META http-equiv=Content-Type content=""text/html; charset=utf-8""><META content=""MSHTML 6.00.2800.1476"" name=GENERATOR></HEAD><BODY><P>";
	ТекстПисьмаHTML = ТекстПисьмаHTML + СтрЗаменить(ТекстПисьма, Символы.ПС, "</P><P>");
	ТекстПисьмаHTML = ТекстПисьмаHTML + "</P></BODY></HTML>";
	
	СтруктураНовогоПисьма                      = Новый Структура("Тело, Тема, СписокФайловВложений, Кому");
	СтруктураНовогоПисьма.Тело                 = ТекстПисьмаHTML;
	СтруктураНовогоПисьма.СписокФайловВложений = СтруктураВложений;
	СтруктураНовогоПисьма.Тема                 = Тема;
	СтруктураНовогоПисьма.Кому                 = СписокАдресов;

	Вложение.Наименование      = НаименованиеВложения;
	Вложение.ИмяФайла          = ИмяФайлаВложения;
	СтруктураПисьма = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"), СтруктураНовогоПисьма, , , , , , , ЛОЖЬ);
	Если Открывать Тогда
		СтруктураПисьма.Форма.Открыть();
	КонецЕсли;
	Возврат СтруктураПисьма;

КонецФункции

// Процедура запускает механизм выгрузки данных, на созданых основании файлов
// формирует документы "ЭлектронноеПисьмо" и отправляет письма по выбору пользователя
//
Процедура ОтправитьПоПочте() Экспорт

	//Контролируем наличие учетных записей
	СписокДоступныхЗаписей = УправлениеЭлектроннойПочтой.ПроверитьУчетныеЗаписиДляОтправкиПисем(глЗначениеПеременной("глТекущийПользователь"));
	Если СписокДоступныхЗаписей.Количество() = 0 Тогда
		Предупреждение("Для текущего пользователя не зарегистрировано ни одной учетной записи!");
		Возврат;
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	Если ТипВыгрузки = "Каталог" Тогда

		Если ВыгрузитьВФайл(ТипВыгрузки, ИмяВремФайла) Тогда
			Тема        = "Каталог товаров в формате CommerceML";
			ТекстПисьма = "Во вложении находятся следующие электронные документы: "+ Символы.ПС+"Каталог товаров """+ ИмяКаталога + """";
			СформироватьПисьмо(Тема, ИмяВремФайла, "catalog.xml", ИмяКаталога, ТекстПисьма, , ИСТИНА);
			УдалитьФайлы(ИмяВремФайла);
		КонецЕсли;

	ИначеЕсли ТипВыгрузки = "Прайс" Тогда

		Если ВыгрузитьВФайл(ТипВыгрузки, ИмяВремФайла) Тогда
			Тема        = "Прайс-лист в формате CommerceML";
			ТекстПисьма = "Во вложении находятся следующие электронные документы: "+ Символы.ПС + "Прайс-лист """+ ИмяПрайса + """";
			СформироватьПисьмо(Тема, ИмяВремФайла, "price.xml", ИмяПрайса, ТекстПисьма, , ИСТИНА);
			УдалитьФайлы(ИмяВремФайла);
		КонецЕсли;

	ИначеЕсли ОпределитьВыгружаютсяДокументы(ТипВыгрузки) Тогда

		СоответствиеЭлектронныхПисем = Новый Соответствие();
		
		ИнициализироватьФормуХодаОбработки("Выгрузка документов", 0, ДеревоДокументов.Строки.Количество());
		
		Для Каждого СтрокаКонтрагент Из ДеревоДокументов.Строки Цикл

			Если НЕ СтрокаКонтрагент.Обрабатывать Тогда
				Продолжить;
			КонецЕсли;

			ТекстПисьма = "Во вложении находятся следующие электронные документы: ";
			СписокДок = Новый СписокЗначений();
			Для Каждого СтрокаДокумент Из СтрокаКонтрагент.Строки Цикл
				
				Если СтрокаДокумент.Обрабатывать = 1 Тогда
					СписокДок.Добавить(СтрокаДокумент.Строка);
					ТекстПисьма = ТекстПисьма + Символы.ПС + (СтрокаДокумент.Строка);
				КонецЕсли;
				
			КонецЦикла;

			Если ВыгрузитьВФайл(ТипВыгрузки, ИмяВремФайла, СписокДок, Ложь) Тогда
				
				Тема = "Документы в формате CommerceML";
				СтруктураПисьма = СформироватьПисьмо(Тема, ИмяВремФайла, "document.xml", "Документы в формате CommerceML", ТекстПисьма, СтрокаКонтрагент.ЭлАдрес, ЛОЖЬ);
				УдалитьФайлы(ИмяВремФайла);
				Если ТипЗнч(СтруктураПисьма) <> Тип("Структура") Тогда
					Сообщить("Произошла ошибка при записи письма для контрагента " + СтрокаКонтрагент.Строка, СтатусСообщения.Важное);
				Иначе
					СоответствиеЭлектронныхПисем.Вставить(СтруктураПисьма.ПисьмоСсылка);
				КонецЕсли;
				
			КонецЕсли;
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("", 1);

		КонецЦикла;
		
		Если СоответствиеЭлектронныхПисем.Количество() <> 0 Тогда
			УправлениеЭлектроннойПочтой.ОтправитьПисьма(СоответствиеЭлектронныхПисем, глЗначениеПеременной("глСоответствиеТекстовЭлектронныхПисем"), глЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли;
		
		ЗакрытьФормуОбработкиДанных();

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОтборДляАдресаОтправкиПисем(Объект = Неопределено) Экспорт
	
	ОтборРегистра        = Новый Структура("Объект, Тип, Вид");
	
	Если Объект <> Неопределено Тогда
		ОтборРегистра.Объект = Объект;
	КонецЕсли;
	
	ОтборРегистра.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОтборРегистра.Вид    = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами;	
	
	Возврат ОтборРегистра;
	
КонецФункции

// Процедура выгружает документ "Заказ поставщику" в электронное письмо
// Вызывается из формы документа
//
// Параметры:
//  Документ - документ-ссылка "Заказ поставщику"
//
Процедура ОтправитьИзДокумента(Документ) Экспорт

	ИмяТипаДокумента = ОпределитьИмяТипаДокумента(Документ);
	
	Если Метаданные.Документы[ИмяТипаДокумента].Проведение = Метаданные.свойстваОбъектов.Проведение.Разрешить
		И НЕ Документ.Проведен Тогда
		
		Предупреждение("Непроведенный документ не может быть выгружен!");
		Возврат;
		
	КонецЕсли;


	ОтборРегистра        = ПолучитьОтборДляАдресаОтправкиПисем(Документ.Контрагент);
	
	Ресурсы = РегистрыСведений.КонтактнаяИнформация.Получить(ОтборРегистра);
	ЭлАдрес = Ресурсы.Представление;
	Если НЕ ЗначениеЗаполнено(ЭлАдрес) Тогда
		Предупреждение("У контрагента не обнаружен электронный адрес для обмена документами! Выгрузка невозможна!");
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	СохранитьДокументВФайл(Документ, ИмяФайла);
			
	Тема = "Документы в формате CommerceML : " + Строка(Документ);
	ТекстПисьма = "Во вложении находятся следующие электронные документы: "+ Символы.ПС + Строка(Документ);
	СтруктураПисьма = СформироватьПисьмо(Тема, ИмяФайла, "document.xml", "Документы в формате CommerceML", ТекстПисьма, ЭлАдрес, ИСТИНА);
	УдалитьФайлы(ИмяФайла);

КонецПроцедуры

Процедура СохранитьДокументВФайл(Документ, ИмяФайла)
	
	ИмяТипаДокумента = ОпределитьИмяТипаДокумента(Документ);

	СписокДок = Новый СписокЗначений();
	СписокДок.Добавить(Документ);

	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ОбъектXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
	ВыгрузитьДокументы(ОбъектXML, СписокДок, ИмяТипаДокумента, Ложь);
	ОбъектXML.ЗаписатьКонецЭлемента();
	ОбъектXML.Закрыть();	
	
КонецПроцедуры

#КонецЕсли

Функция ОпределитьИмяТипаДокумента(Документ) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	Возврат МетаданныеОбъекта.Имя;
	
КонецФункции

                                                                                    
мФормаХодаВыполненияОбмена = Неопределено;
мТаблицаВсехСвойствТоваров = Неопределено;

#Если Клиент Тогда

ИмяПрайса = "Прайс-лист от "+ Строка(Формат(РабочаяДата, "ДФ=dd.MM.yyyy"));
ИмяКаталога = "Каталог товаров от "+ Строка(Формат(РабочаяДата, "ДФ=dd.MM.yyyy"));

#КонецЕсли
