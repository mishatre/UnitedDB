#Если Клиент Тогда

// В переменной сохраняется количество выведенных строк заголовка, для возможности скрытия заголовка отчета
Перем мКоличествоВыведенныхСтрокЗаголовка;

// Структура соответствия имен и представлений построителя отчета
Перем мСтруктураСоответствияИмен;

// Список значений, имена отборов построителя отчета, которые существуют постоянно
Перем мСписокОтбора Экспорт;

// Структура, ключи которой - имена отборов Построителя, значения - параметры Построителя
Перем мСтруктураДляОтбораПоКатегориям Экспорт;

// Процедура передает построителю отчета запрос
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ
	|	ABCКлассификацияПокупателей.Контрагент                        КАК Контрагент,
	|	ABCКлассификацияПокупателей.ABCКлассПокупателя                КАК ABCКлассПокупателя,
	|	ВЫБОР КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя = &AКласс ТОГДА 1
	|		  КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя = &BКласс ТОГДА 2
	|		  КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя = &CКласс ТОГДА 3
	|		  ИНАЧЕ 0 КОНЕЦ                                           КАК ПорядокСотртровки,
	|	СтадииВзаимоотношенийСПокупателями.Стадия                     КАК Стадия,
	|	СтадииВзаимоотношенийСПокупателями.КлассПостоянногоПокупателя КАК КлассПостоянногоПокупателя
	|//СВОЙСТВА
	|
	|ИЗ
	|	РегистрСведений.ABCКлассификацияПокупателей.СрезПоследних(&ДатаОтчета) КАК ABCКлассификацияПокупателей
	|//СОЕДИНЕНИЯ
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&ДатаОтчета) КАК СтадииВзаимоотношенийСПокупателями
	|
	|ПО
	|	СтадииВзаимоотношенийСПокупателями.Контрагент = ABCКлассификацияПокупателей.Контрагент
	|
	|{ГДЕ
	|	ABCКлассификацияПокупателей.Контрагент.*       КАК Контрагент,
	|	ABCКлассификацияПокупателей.ABCКлассПокупателя КАК ABCКлассПокупателя
	|	//СВОЙСТВА
	|	//КАТЕГОРИИ
	|	}
	|
	|УПОРЯДОЧИТЬ ПО ПорядокСотртровки ВОЗР
	|{УПОРЯДОЧИТЬ ПО
	|	ABCКлассификацияПокупателей.Контрагент.*       КАК Контрагент,
	|	ABCКлассификацияПокупателей.ABCКлассПокупателя КАК ABCКлассПокупателя
	|	//СВОЙСТВА
	|	}
	|
	|{ИТОГИ ПО
	|	ABCКлассификацияПокупателей.Контрагент.*       КАК Контрагент,
	|	ABCКлассификацияПокупателей.ABCКлассПокупателя КАК ABCКлассПокупателя
	|	//СВОЙСТВА
	|	}
	|
	|";
	
	мСтруктураСоответствияИмен.Очистить();
	мСтруктураСоответствияИмен = Новый Структура("Контрагент, ABCКлассПокупателя","Контрагент", "ABC-класс покупателя");
	
	мСоответствиеНазначений = Новый Соответствие;

	Если ИспользоватьСвойстваИКатегории Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ABCКлассификацияПокупателей.Контрагент";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";

		// Добавим строки запроса, необходимые для использования свойств и категорий
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, мСтруктураСоответствияИмен, мСоответствиеНазначений, ПостроительОтчета.Параметры, , ТекстПоляКатегорий, ТекстПоляСвойств, , , , , , мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;

	Если ИспользоватьСвойстваИКатегории Тогда
		УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, мСтруктураСоответствияИмен);
	КонецЕсли;
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(мСтруктураСоответствияИмен, ПостроительОтчета);
	
	Для каждого ЭлементСписка Из мСписокОтбора Цикл
		Если ПостроительОтчета.Отбор.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			ПостроительОтчета.Отбор.Добавить(ЭлементСписка.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	Попытка
		ПостроительОтчета.ДоступныеПоля.ABCКлассПокупателя.Порядок = Ложь;
	Исключение
	
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет данными поле табличного документа отчета
//
// Параметры
//  Таб - поле табличного документа
//
// Возвращаемое значение
//  НЕТ
//
Процедура СформироватьОтчет(Таб) Экспорт

	Таб.Очистить();
	
	ПостроительОтчета.Параметры.Вставить("ДатаОтчета", ?(ДатаОтчета = '00010101000000', ТекущаяДата(), ДатаОтчета));
	ПостроительОтчета.Параметры.Вставить("AКласс", Перечисления.ABCКлассификация.AКласс);
	ПостроительОтчета.Параметры.Вставить("BКласс", Перечисления.ABCКлассификация.BКласс);
	ПостроительОтчета.Параметры.Вставить("CКласс", Перечисления.ABCКлассификация.CКласс);
	
	Если НЕ УправлениеОтчетами.ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, мСтруктураДляОтбораПоКатегориям) Тогда
		Предупреждение("По одной категории нельзя устанавливать несколько отборов");
		Возврат;
	КонецЕсли;

	УправлениеОтчетами.ПроверитьПорядокПостроителяОтчета(ПостроительОтчета);

	ПостроительОтчета.Выполнить();
	
	Макет = ПолучитьМакет("Макет");
	
	Таб.Очистить();
	
	СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(?(ДатаОтчета = '00010101000000', ТекущаяДата(), ДатаОтчета));
	
	Секция = Макет.ПолучитьОбласть("ШапкаВерх");
	ПараметрАВСРаспределения = Неопределено;
	СтруктураЗначенийРегистра.Свойство("ПараметрABCКлассификацииПокупателей", ПараметрАВСРаспределения);
	Если ПараметрАВСРаспределения = Неопределено ИЛИ (ТипЗнч(ПараметрАВСРаспределения) = Тип("ПеречислениеСсылка.ПараметрыABCКлассификацииПокупателей") И ПараметрАВСРаспределения.Пустая()) Тогда
		ПредставлениеПараметра = "Параметр распределения не задан в учетной политике.";
	Иначе
		ПредставлениеПараметра = "Параметр распределения: " + ПараметрАВСРаспределения + ", в валюте упр.учета (" + СокрЛП(глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование) + ")";
	КонецЕсли; 
	Секция.Параметры.ПредставлениеПараметра = ПредставлениеПараметра;
	Таб.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ШапкаИнтервал");
	Секция.Параметры.СтрокаИнтервал = "Период: на " + ?(ДатаОтчета = Дата("00010101000000"), ("текущее время " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")),Формат(ДатаОтчета, "ДФ=dd.MM.yyyy"));
	Таб.Вывести(Секция);
	мКоличествоВыведенныхСтрокЗаголовка = 5;
	
	СтрокаГруппировок = УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	Если НЕ ПустаяСтрока(СтрокаГруппировок) Тогда
		СтрокаГруппировок = "Группировки строк: " + СтрокаГруппировок;
		Секция = Макет.ПолучитьОбласть("ШапкаГруппировки");
		Секция.Параметры.СтрокаГруппировок = СтрокаГруппировок;
		Таб.Вывести(Секция);
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 

	СтрокаОтборов = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
		СтрокаОтборов = "Отбор: " + СтрокаОтборов;
		Секция = Макет.ПолучитьОбласть("ШапкаОтбор");
		Секция.Параметры.СтрокаОтборов = СтрокаОтборов;
		Таб.Вывести(Секция);
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 
	
	СтрокаПорядка = УправлениеОтчетами.СформироватьСтрокуПорядка(ПостроительОтчета.Порядок);
	Если НЕ ПустаяСтрока(СтрокаПорядка) Тогда
		СтрокаПорядка = "Сортировка: " + СтрокаПорядка;
		Секция = Макет.ПолучитьОбласть("ШапкаПорядок");
		Секция.Параметры.СтрокаПорядка = СтрокаПорядка;
		Таб.Вывести(Секция);
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 
	
	Если ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Таб.Вывести(Секция);
	
	Таб.НачатьАвтогруппировкуСтрок();
	
	Если ПостроительОтчета.ИзмеренияСтроки.Найти("Контрагент") <> Неопределено Тогда
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		ТаблицаЗапросаПрошлыхКлассов = ПолучитьТаблицуЗначенийЗапросаПрошлыхКлассов(ТаблицаЗапроса);
	Иначе
		ТаблицаЗапросаПрошлыхКлассов = Неопределено;
	КонецЕсли;
	
	Таб.Рисунки.Очистить();
	
	ВывестиСтроки(Таб, Макет, РезультатЗапроса, 0, ТаблицаЗапросаПрошлыхКлассов);
	
	Таб.ЗакончитьАвтогруппировкуСтрок();
	
	Таб.ФиксацияСверху = мКоличествоВыведенныхСтрокЗаголовка + 2;
	
	ИзменитьВидимостьЗаголовка(Таб);
	
	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();
	
КонецПроцедуры

// Функция возвращает таблицу занчений для с АВС-классами контрагентов, чтобы определить динамику
//  изменения класов
//
// Параметры
//  ТаблицаЗапроса - Таблица значений, выгруженная из основного запроса отчета
//                   для определения списка необходимых контрагентов
//
// Возвращаемое значение:
//   ТаблицаЗначений - результат запроса
//
Функция ПолучитьТаблицуЗначенийЗапросаПрошлыхКлассов(ТаблицаЗапроса)

	ТаблицаЗапроса.Свернуть("Контрагент");
	
	МассивКонтрагентов = ТаблицаЗапроса.ВыгрузитьКолонку("Контрагент");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	Запрос.УстановитьПараметр("ДатаОтчета", ?(ДатаОтчета = '00010101000000', ТекущаяДата(), КонецДня(ДатаОтчета)));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ABCКлассификацияПокупателей.Контрагент         КАК Контрагент,
	|	ABCКлассификацияПокупателей.ABCКлассПокупателя КАК Класс,
	|	ABCКлассификацияПокупателей.Период             КАК Период
	|
	|ИЗ
	|	РегистрСведений.ABCКлассификацияПокупателей КАК ABCКлассификацияПокупателей
	|
	|ГДЕ
	|	ABCКлассификацияПокупателей.Контрагент В(&МассивКонтрагентов)
	|	И
	|	ABCКлассификацияПокупателей.Период <= &ДатаОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура меняет видимость заголовка поля табличного документа
// 
// Параметры
//  Таб - табличный документ
//
// Возвращаемые значения
//  НЕТ
Процедура ИзменитьВидимостьЗаголовка(Таб) Экспорт

	ОбластьВидимости = Таб.Область(1,,мКоличествоВыведенныхСтрокЗаголовка,);
	ОбластьВидимости.Видимость = ПоказыватьЗаголовок;

КонецПроцедуры

// Процедура выводит строки в ПолеТабличногоДокумента
// 
// Параметры
//  Таб                          - ПолеТабличногоДокумента, в котором показывать данные отчета
//  Макет                        - макет отчета
//  ТекущаяВыборка               - выборка запроса, из которой выводить строки
//  ИндексТекущейГруппировки     - число, индекс выводимой группировки
//  ТаблицаЗапросаПрошлыхКлассов - ТаблицаЗначений,  прошлые значения АВС-классов контрагентов
// 
// Возвращаемое значение
//  НЕТ
Процедура ВывестиСтроки(Таб, Макет, ТекущаяВыборка, ИндексТекущейГруппировки, ТаблицаЗапросаПрошлыхКлассов)

	Если ИндексТекущейГруппировки > ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
		Возврат;
	КонецЕсли; 

	НаименованиеГруппировки = ПостроительОтчета.ИзмеренияСтроки[ИндексТекущейГруппировки].Имя;

	// Если добавить в группировки строк одинаковые значения, то в именах групировок
	// добавляется цифра 1,2,3..., а поля таблицы запроса естественно не добавляются с такими именами
	// поэтому из имени группировки удилим последние цифры в имени
	
	а = СтрДлина(НаименованиеГруппировки);
	Пока а > 0 Цикл
		Если КодСимвола(Сред(НаименованиеГруппировки, а, 1)) >= 49 И КодСимвола(Сред(НаименованиеГруппировки, а, 1)) <= 57 Тогда
			а = а - 1;
			Продолжить;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	НаименованиеГруппировки = Лев(НаименованиеГруппировки, а);

	Выборка = ТекущаяВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, НаименованиеГруппировки);

	Пока Выборка.Следующий() Цикл

		СтрокаВывода = СокрЛП(Выборка[НаименованиеГруппировки]);
		Если ПустаяСтрока(СтрокаВывода) Тогда
			СтрокаВывода = "<...>";
		КонецЕсли;

		ТекущийЦвет = Новый Цвет;
		Если РаскрашиватьГруппировки Тогда
			Если ИндексТекущейГруппировки <> ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
				ИндексЦвета = ИндексТекущейГруппировки;
				Если ИндексЦвета >= 10 Тогда
					ИндексЦвета = (ИндексТекущейГруппировки/10 - Цел(ИндексТекущейГруппировки/10))*10;
				КонецЕсли; 
				ТекущийЦвет = Макет.Области["Цвет"+СокрЛП(ИндексЦвета)].ЦветФона;
			Иначе
				ТекущийЦвет = Новый Цвет;
			КонецЕсли; 
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("СтрокаГруппировки");
		
		Секция.Параметры.ЗначениеГруппировки = СтрокаВывода;
		Секция.Области.ЗначениеГруппировки.Расшифровка = Выборка[НаименованиеГруппировки];
		Секция.Области.ЗначениеГруппировки.Отступ = ИндексТекущейГруппировки;
		Секция.Области.ЗначениеГруппировки.ЦветФона = ТекущийЦвет;
		Секция.Области.КартинкаСостояния.ЦветФона   = ТекущийЦвет;
		
		Если НаименованиеГруппировки = "ABCКлассПокупателя" Тогда
			Секция.Области.ЗначениеГруппировки.Шрифт = Новый Шрифт(,, Истина)
		КонецЕсли; 
		
		СтрокаВыводаСтадии = "";
		Если НаименованиеГруппировки = "Контрагент" Тогда
			СтрокаВыводаСтадии = "Не задана";
			ВыборкаДетальныхЗаписей = Выборка.Выбрать();
			Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
				Если ВыборкаДетальныхЗаписей.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
					Если ТипЗнч(ВыборкаДетальныхЗаписей.Стадия) = Тип("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями") Тогда
						СтрокаВыводаСтадии = Строка(ВыборкаДетальныхЗаписей.Стадия);
						Если ВыборкаДетальныхЗаписей.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
							Если ТипЗнч(ВыборкаДетальныхЗаписей.КлассПостоянногоПокупателя) = Тип("ПеречислениеСсылка.XYZКлассификация") И НЕ ВыборкаДетальныхЗаписей.КлассПостоянногоПокупателя.Пустая() Тогда
								СтрокаВыводаСтадии = СтрокаВыводаСтадии + " (" + ВыборкаДетальныхЗаписей.КлассПостоянногоПокупателя + ")";
							Иначе
								СтрокаВыводаСтадии = СтрокаВыводаСтадии + " (Класс не задан)";
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		Секция.Параметры.ЗначениеСтадииВзаимоотношенийСПокупателем = СтрокаВыводаСтадии;
		Секция.Области.ЗначениеСтадииВзаимоотношенийСПокупателем.ЦветФона = ТекущийЦвет;
		
		ОбластьВыводаЯчеек = Таб.Вывести(Секция, ИндексТекущейГруппировки);
		
		Если НаименованиеГруппировки = "Контрагент" Тогда
			
			РисунокКонтрагента = Таб.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Если РаскрашиватьГруппировки Тогда
				РисунокКонтрагента.ЦветФона = ТекущийЦвет;
			КонецЕсли;
			РисунокКонтрагента.Картинка = ПолучитьКартинкуИзмененияКласса(Выборка[НаименованиеГруппировки], ТаблицаЗапросаПрошлыхКлассов);
			РисунокКонтрагента.РазмерКартинки = РазмерКартинки.АвтоРазмер;
			РисунокКонтрагента.ГраницаСлева = Ложь;
			РисунокКонтрагента.Защита = Истина;
			РисунокКонтрагента.Расположить(Таб.Области.КартинкаСостояния);
			
		КонецЕсли; 

		ВывестиСтроки(Таб, Макет, Выборка, ИндексТекущейГруппировки+1, ТаблицаЗапросаПрошлыхКлассов);
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция определяет картинку, которая отображает динамику изменения класса контрагента
//
// Параметры
//  Контрагент                   - СправочникКонтрагенты.Ссылка, контрагент по которому определяется динамика изменения класса
//  ТаблицаЗапросаПрошлыхКлассов - ТаблицаЗначений,  прошлые значения АВС-классов контрагентов
//
// Возвращаемое значение:
//   Картинка - картинка, показывающая динамику изменения АВС-класса контрагента
//
Функция ПолучитьКартинкуИзмененияКласса(Контрагент, ТаблицаЗапросаПрошлыхКлассов)

	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Новый Картинка;
	ИначеЕсли Контрагент.Пустая() Тогда
		Возврат Новый Картинка;
	Иначе
		СтрокиТаблицы = ТаблицаЗапросаПрошлыхКлассов.НайтиСтроки(Новый Структура("Контрагент", Контрагент));
		Если СтрокиТаблицы.Количество() = 0 Тогда
			Возврат Новый Картинка;
		ИначеЕсли СтрокиТаблицы.Количество() = 1 Тогда
			Если СтрокиТаблицы[0].Класс.Пустая() Тогда
				Возврат Новый Картинка;
			Иначе
				Возврат БиблиотекаКартинок.ИзменениеСостояния_Вверх;
			КонецЕсли;
		Иначе
			СтарыйКласс = СтрокиТаблицы[1].Класс;
			НовыйКласс = СтрокиТаблицы[0].Класс;
			Если НовыйКласс.Пустая() Тогда
				Если СтарыйКласс.Пустая() Тогда
					Возврат Новый Картинка;
				Иначе
					Возврат БиблиотекаКартинок.ИзменениеСостояния_Вниз;
				КонецЕсли; 
			Иначе
				Если СтарыйКласс.Пустая() Тогда
					Возврат БиблиотекаКартинок.ИзменениеСостояния_Вверх;
				Иначе
					Если Перечисления.ABCКлассификация.Индекс(СтарыйКласс) = Перечисления.ABCКлассификация.Индекс(НовыйКласс) Тогда
						Возврат БиблиотекаКартинок.ИзменениеСостояния_НаМесте;
					ИначеЕсли Перечисления.ABCКлассификация.Индекс(СтарыйКласс) < Перечисления.ABCКлассификация.Индекс(НовыйКласс) Тогда
						Возврат БиблиотекаКартинок.ИзменениеСостояния_Вниз;
					ИначеЕсли Перечисления.ABCКлассификация.Индекс(СтарыйКласс) > Перечисления.ABCКлассификация.Индекс(НовыйКласс) Тогда
						Возврат БиблиотекаКартинок.ИзменениеСостояния_Вверх;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Новый Картинка;

КонецФункции // ПолучитьКартинкуИзмененияКласса(Выборка[НаименованиеГруппировки], ТаблицаЗапросаПрошлыхКлассов)()

мСтруктураСоответствияИмен = Новый Структура;

мКоличествоВыведенныхСтрокЗаголовка = 0;

мСписокОтбора = Новый СписокЗначений;
мСписокОтбора.Добавить("Контрагент");
мСписокОтбора.Добавить("ABCКлассПокупателя");
#КонецЕсли
