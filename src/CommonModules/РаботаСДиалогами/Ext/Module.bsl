// Этот модуль предназачен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.

///////////////// ПРИ ИЗМЕНЕНИИ ////////////////////////

// Процедура выполняет общие действия при изменнении даты документа
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//
Процедура ПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено) Экспорт

	МетаданныеДокумента            = ДокументОбъект.Метаданные();
	ЕстьВалютаДокумента            = ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",    МетаданныеДокумента);
	ЕстьДоговорКонтрагента         = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;

	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = ДокументОбъект.ДоговорКонтрагента;

			Если ЗначениеЗаполнено(Договор) Тогда
				Валюта = Договор.ВалютаВзаиморасчетов;
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДокументОбъект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	ЕстьКурсДокумента           = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента",           МетаданныеДокумента);
	ЕстьКратностьДокумента      = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента",      МетаданныеДокумента);
	ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов",      МетаданныеДокумента);
	ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);

	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов
	   И ЕстьКурсВзаиморасчетов
	   И ЕстьКратностьВзаиморасчетов
	   И ЕстьКурсДокумента
	   И ЕстьКратностьДокумента Тогда

		ВалютаВзаиморасчетов          = Валюта;
		ВалютаДокумента               = ДокументОбъект.ВалютаДокумента;

		СтарыйКурсВзаиморасчетов      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратностьВзаиморасчетов = ДокументОбъект.КратностьВзаиморасчетов;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДокументОбъект.Дата);
		НовыйКурсВзаиморасчетов       = СтруктураВалюты.Курс;
		НоваяКратностьВзаиморасчетов  = СтруктураВалюты.Кратность;

		СтарыйКурсДокумента           = ДокументОбъект.КурсДокумента;
		СтараяКратностьДокумента      = ДокументОбъект.КратностьДокумента;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		НовыйКурсДокумента            = СтруктураВалюты.Курс;
		НоваяКратностьДокумента       = СтруктураВалюты.Кратность;

	ИначеЕсли ПроверкаПоВалютеВзаиморасчетов
	        И ЕстьКурсВзаиморасчетов
	        И ЕстьКратностьВзаиморасчетов Тогда

		ВалютаВзаиморасчетов          = Валюта;
		ВалютаДокумента               = Неопределено;

		СтарыйКурсВзаиморасчетов      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратностьВзаиморасчетов = ДокументОбъект.КратностьВзаиморасчетов;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДокументОбъект.Дата);
		НовыйКурсВзаиморасчетов       = СтруктураВалюты.Курс;
		НоваяКратностьВзаиморасчетов  = СтруктураВалюты.Кратность;

		СтарыйКурсДокумента           = 0;
		СтараяКратностьДокумента      = 0;

		НовыйКурсДокумента            = 0;
		НоваяКратностьДокумента       = 0;

	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов
	        И ЕстьКурсДокумента
	        И ЕстьКратностьДокумента Тогда

		ВалютаВзаиморасчетов          = Неопределено;
		ВалютаДокумента               = Валюта;

		СтарыйКурсВзаиморасчетов      = 0;
		СтараяКратностьВзаиморасчетов = 0;

		НовыйКурсВзаиморасчетов       = 0;
		НоваяКратностьВзаиморасчетов  = 0;

		СтарыйКурсДокумента           = ДокументОбъект.КурсДокумента;
		СтараяКратностьДокумента      = ДокументОбъект.КратностьДокумента;

		СтруктураВалюты               = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		НовыйКурсДокумента            = СтруктураВалюты.Курс;
		НоваяКратностьДокумента       = СтруктураВалюты.Кратность;

	Иначе
		Возврат;
	КонецЕсли;

	ИзменилсяКурсВзаиморасчетов = НЕ (НовыйКурсВзаиморасчетов = СтарыйКурсВзаиморасчетов И НоваяКратностьВзаиморасчетов = СтараяКратностьВзаиморасчетов);
	ИзменилсяКурсДокумента      = НЕ (НовыйКурсДокумента      = СтарыйКурсДокумента      И НоваяКратностьДокумента      = СтараяКратностьДокумента);

	// Контроль изменений курса.
	Если ИзменилсяКурсВзаиморасчетов
	   И ИзменилсяКурсДокумента Тогда

		// Изменился курс документа и взаиморасчетов.
		ТекстВопроса = "На дату документа у валюты документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,      СтарыйКурсДокумента,      СтараяКратностьДокумента,      ВалютаРегламентированногоУчета, Истина)) +
		               " и валюты взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, СтарыйКурсВзаиморасчетов, СтараяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
		               " был задан другой курс." +
		               Символы.ПС +
		               "Установить курс документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,      НовыйКурсДокумента,      НоваяКратностьДокумента,      ВалютаРегламентированногоУчета, Истина)) +
		               " и курс взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, НовыйКурсВзаиморасчетов, НоваяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
		               " в соответствии с курсом валют?";

	ИначеЕсли ИзменилсяКурсВзаиморасчетов
	     И НЕ ИзменилсяКурсДокумента Тогда

		// Изменился курс взаиморасчетов.
		ТекстВопроса = "На дату документа у валюты взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, СтарыйКурсВзаиморасчетов, СтараяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
		               " был задан другой курс." +
		               Символы.ПС +
		               "Установить курс взаиморасчетов " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, НовыйКурсВзаиморасчетов,  НоваяКратностьВзаиморасчетов,  ВалютаРегламентированногоУчета, Истина)) +
		               " в соответствии с курсом валюты?";

	ИначеЕсли ИзменилсяКурсДокумента Тогда

		// Изменился курс документа.
		ТекстВопроса = "На дату документа у валюты документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, СтарыйКурсДокумента, СтараяКратностьДокумента, ВалютаРегламентированногоУчета, Истина)) +
		               " был задан другой курс." +
		               Символы.ПС +
		               "Установить курс документа " +
		               СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, НовыйКурсДокумента,  НоваяКратностьДокумента,  ВалютаРегламентированногоУчета, Истина)) +
		               " в соответствии с курсом валюты?";

	Иначе
		// Если курс неизменился, то выход.
		Возврат;
	КонецЕсли;

	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Если ИзменилсяКурсДокумента Тогда
			Если ЕстьКурсДокумента Тогда
				ДокументОбъект.КурсДокумента           = НовыйКурсДокумента;
			КонецЕсли;
			Если ЕстьКратностьДокумента Тогда
				ДокументОбъект.КратностьДокумента      = НоваяКратностьДокумента;
			КонецЕсли;
		КонецЕсли;

		Если ИзменилсяКурсВзаиморасчетов Тогда
			Если ЕстьКурсВзаиморасчетов Тогда
				ДокументОбъект.КурсВзаиморасчетов      = НовыйКурсВзаиморасчетов;
			КонецЕсли;
			Если ЕстьКратностьВзаиморасчетов Тогда
				ДокументОбъект.КратностьВзаиморасчетов = НоваяКратностьВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;

		ФлагИзмененияКурса = Истина;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()

// Процедура вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа и предлагает пересчитать сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств,ПересчитыватьСумму=Истина) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СатрыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		// Надо предложить пересчитать сумму.
		Ответ = Вопрос("Изменилась валюта документа. Пересчитать сумму документа?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СатрыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);
		Иначе
			ПересчитыватьСумму=Ложь;								
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКассыБанковскогоСчета()

// Процедура выполняет общие действия при изменнении учетной политики организация является плательщиком ЕНВД
//
// Параметры:
//  ДокументОбъект                      - объект редактируемого документа
//  РежимВызова                         - режим вызова, строка режима вызова ("ДатаДокумента" или "Организация")
//  ТабличнаяЧасть                      - табличная часть
//  ОрганизацияЯвляетсяПлательщикомЕНВД - текущий флаг учетной политики документа (изменяется в процедуре)
//  Организация                         - текущая организация документа (изменяется в процедуре)
//
Процедура ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ДокументОбъект,
	                                                      РежимВызова,
	                                                      ТабличнаяЧасть,
	                                                      ОрганизацияЯвляетсяПлательщикомЕНВД,
	                                                      Организация) Экспорт

	// Если учетная политика неопределена
	Если ОрганизацияЯвляетсяПлательщикомЕНВД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Дата                = ДокументОбъект.Дата;
	СтараяОрганизация   = Организация;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		НоваяОрганизация = ДокументОбъект.Организация;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ЗаказПокупателя", МетаданныеДокумента) Тогда
		НоваяОрганизация = ДокументОбъект.ЗаказПокупателя.Организация;
	Иначе
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НоваяОрганизация) Тогда
		Возврат;
	КонецЕсли;

	// Определим значения учетной политики
	СтарыйОрганизацияЯвляетсяПлательщикомЕНВД = ОрганизацияЯвляетсяПлательщикомЕНВД;
	НовыйОрганизацияЯвляетсяПлательщикомЕНВД  = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", НоваяОрганизация, Дата);

	ОрганизацияЯвляетсяПлательщикомЕНВД = НовыйОрганизацияЯвляетсяПлательщикомЕНВД;
	Организация                         = НоваяОрганизация;

	// Проверим необходимость выполнения пересчета
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	Иначе
		Если РежимВызова = "ДатаДокумента" Тогда
			Если СтарыйОрганизацияЯвляетсяПлательщикомЕНВД = НовыйОрганизацияЯвляетсяПлательщикомЕНВД Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Если СтараяОрганизация = НоваяОрганизация Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Пересчет табличной части
	Если РежимВызова = "ДатаДокумента" Тогда
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			// Если услуга облагается ЕНВД, устанавливаем ставку БезНДС,
			// если нет, то устанавливаем ставку НДС по умолчанию.
			Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, НоваяОрганизация, Дата,
				                               НовыйОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    ДокументОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			// Если ставка БезНДС, проверяем по "старой" организации
			// если находим, то устанавливаем ставку НДС по умолчанию.
			Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, СтараяОрганизация, Дата,
					                               СтарыйОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;

			// Для "новой" организации заполняем ставку БезНДС, если услуга облагается ЕНВД
			// если нет, то устанавливаем ставку НДС по умолчанию.
			Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, НоваяОрганизация, Дата,
				                               НовыйОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    ДокументОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД()

//////////////// НАЧАЛО ВЫБОРА //////////////////////////

// Процедура выполняет стандартные действия при начале выбора сделки в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента по сделке;
//  Сделка                - ссылка на документ, определяет собственно сделку;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  СтрокаТипаЗаказа      - строка, содержащая тип заказа (поставщику или покупателя).
//  СтруктураОтбора       - структура отбора, которая будет передана в открываемую форму выбора.
//
Процедура НачалоВыбораЗначенияСделки(ДокументОбъект, ФормаДокумента, ЭлементФормы, ДоговорКонтрагента, Сделка,
	                          СтандартнаяОбработка, Знач СтрокаТипаЗаказа,СтруктураОтбора = Неопределено) Экспорт

	ЭлементФормыКонтрагент = ФормаДокумента.ЭлементыФормы.Найти("Контрагент");						  
	// Тип выбираемого значения зависит от договора.
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбран договор контрагента!");
		Если  ЭлементФормыКонтрагент<>неопределено Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементФормыКонтрагент;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Тип выбираемого значения зависит от договора.
	Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!");
		Если  ЭлементФормыКонтрагент<>неопределено Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементФормыКонтрагент;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	Если (СтрокаТипаЗаказа = "ЗаказПоставщику") или (СтрокаТипаЗаказа = "ЗаказПокупателя") Тогда

		ТипДокументаСделки = СтрокаТипаЗаказа;
		ТипДокументаСчет = ?(СтрокаТипаЗаказа = "ЗаказПоставщику","СчетНаОплатуПоставщика","СчетНаОплатуПокупателю");

		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Сделка") = Неопределено Тогда
			ЕстьТипСчет = Истина;
		Иначе
			ЕстьТипСчет = ДокументОбъект.Метаданные().Реквизиты.Сделка.Тип.СодержитТип( Тип("ДокументСсылка."+ТипДокументаСчет));
		КонецЕсли;
		Если ЕстьТипСчет Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

				ТипДокументаСделки = ТипДокументаСчет;

			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

				ТипДокументаСделки = СтрокаТипаЗаказа;

			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(Сделка) ИЛИ ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	Иначе // сделка может быть только заказом (поставщику или покупателя)
		Если ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
			Сделка = Документы[СтрокаТипаЗаказа].ПустаяСсылка();
		КонецЕсли;

		ТипДокументаСделки = СтрокаТипаЗаказа;
	КонецЕсли; 

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	// Отфильруем список документов.
	Если НЕ СтруктураОтбора = Неопределено Тогда
		Если ТипЗнч(СтруктураОтбора) = Тип("ТаблицаЗначений") Тогда
			Для Каждого ТекОтбор Из СтруктураОтбора Цикл
				ФормаВыбора.Отбор[ТекОтбор.Имя].ВидСравнения  = ТекОтбор.ВидСравнения;
				ФормаВыбора.Отбор[ТекОтбор.Имя].Значение      = ТекОтбор.Значение;
				ФормаВыбора.Отбор[ТекОтбор.Имя].Использование = Истина;
				Если ТекОтбор.НеИзменять Тогда
					ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ТекОтбор.Имя].Доступность = НЕ ТекОтбор.НеИзменять;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
					ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
				КонецЕсли;
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
				ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка) И Сделка.ДоговорКонтрагента = ДоговорКонтрагента Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = Сделка;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСделки()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияДокументаСоставногоТипа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
	                   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти,ОграничениеТипов = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;
	
	Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
		Индекс = МассивТипов.ВГраница();
		ТипВнутрЗаказ = Тип("ДокументСсылка.ВнутреннийЗаказ");
		Пока Индекс >= 0 Цикл
			Если ТипВнутрЗаказ = МассивТипов[Индекс] Тогда
				МассивТипов.Удалить(Индекс);
				Прервать;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;

	Если не ОграничениеТипов = Неопределено Тогда
		СписокОграниченияТипов = Новый СписокЗначений();
		СписокОграниченияТипов.ЗагрузитьЗначения(ОграничениеТипов);
	КонецЕсли; 

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл
            Если не ОграничениеТипов = Неопределено Тогда
			    Если СписокОграниченияТипов.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				 	// Тип не вписывается в полученные ограничения
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли; 

	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	// Форма выбора этого документа специфична. Отсутствует отбор.
	Если ВыбранныйТип = "ДокументРасчетовСКонтрагентом" Тогда
		
		Если НЕ СтруктураОтбора.Свойство("Дата") Тогда
			СтруктураОтбора.Вставить("Дата",               ДокументОбъект.Дата);
		КонецЕсли;
		Если НЕ СтруктураОтбора.Свойство("Организация") Тогда
			СтруктураОтбора.Вставить("Организация",        ДокументОбъект.Организация);
		КонецЕсли;
		Если НЕ СтруктураОтбора.Свойство("КонецПериода") Тогда
			СтруктураОтбора.Вставить("КонецПериода",       ДокументОбъект.Дата);
		КонецЕсли;
		ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");
			
		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураОтбора, ЭлементФормы, ОграничениеТипа);
		
		Возврат;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		Если ВыбранныйТип = "ПоступлениеДопРасходов" Тогда
			СтруктураОтбора.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации);
		ИначеЕсли ВыбранныйТип = "ПоступлениеТоваровУслугВНТТ" Тогда
			СтруктураОтбора.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика);
		КонецЕсли;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов.
	Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
		// Проверка возможности установки отбора
		Если ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ЭлементСтруктуры.Ключ = "ДоговорКонтрагента" Тогда
			Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) 
				И (ТипЗнч(ЭлементФормы.Значение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				Или  ТипЗнч(ЭлементФормы.Значение) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
				И Не ЭлементСтруктуры.Значение.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				Продолжить;
			Иначе
				// Отфильтруем список документов по критерию "Документы по договору контрагента".
				ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ЭлементСтруктуры.Значение;
				ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
				Продолжить;
			КонецЕсли;
		
		ИначеЕсли ЭлементСтруктуры.Ключ = "Контрагент" Тогда
			// Отфильтруем список документов по критерию "Документы по контрагенту.
			ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Значение      = ЭлементСтруктуры.Значение;
			ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
			Продолжить;
		
		ИначеЕсли ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
		Иначе
			Если НЕ ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ТипЗначения.СодержитТип(ТипЗнч(ЭлементСтруктуры.Значение)) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
		ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
	КонецЦикла;
	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа;
//  ФормаДокумента                 - форма редактируемого документа;
//  ЭлементФормы                   - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,          - булево, признак выполнения стандартной (системной) обработки события 
//                                   начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияСтруктурнойЕдиницы(ДокументОбъект, ФормаДокумента, ЭлементФормы, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
    Если ЭлементФормы.Значение=неопределено Тогда
		//выбор типа
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Метаданные.Справочники.БанковскиеСчета.Имя, Метаданные.Справочники.БанковскиеСчета.Синоним);
		СписокТипов.Добавить(Метаданные.Справочники.Кассы.Имя, Метаданные.Справочники.Кассы.Синоним);
		
		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ВыбранныйЭлемент.Значение = Метаданные.Справочники.БанковскиеСчета.Имя Тогда
			ЭлементФормы.Значение = Справочники.БанковскиеСчета.ПустаяСсылка();
		Иначе
			ЭлементФормы.Значение = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		НачалоВыбораЗначенияБанковскогоСчета(ДокументОбъект.Организация, ЭлементФормы, СтандартнаяОбработка, ДокументОбъект.ВалютаДокумента); 

	ИначеЕсли ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка.Кассы") Тогда
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники.Кассы.ПолучитьФормуВыбора(,ЭлементФормы,);
        ФормаВыбора.ПараметрОтборПоВладельцу = ДокументОбъект.Организация;
		Если ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ФормаВыбора.Отбор.ВалютаДенежныхСредств.Значение=ДокументОбъект.ВалютаДокумента;
			ФормаВыбора.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		КонецЕсли;
		ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // НачалоВыбораЗначенияСтруктурнойЕдиницы()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ВладелецБанковскогоСчета - ссылка на справочник, определяет владельца банковского счета;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//  ВалютаБанковскогоСчета   - ссылка на справочник, определяет валюту банковского счета,
//                             если неп заполнено, то список банковских счетов не фильтруется по валюте;
//
Процедура НачалоВыбораЗначенияБанковскогоСчета(ВладелецБанковскогоСчета,ЭлементФормы, СтандартнаяОбработка, 
	                                   ВалютаБанковскогоСчета = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбораБанковскогоСчета = Справочники.БанковскиеСчета.ПолучитьФормуСписка(, ЭлементФормы);
	ФормаВыбораБанковскогоСчета.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;

	Если ЗначениеЗаполнено(ВалютаБанковскогоСчета) Тогда

		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Значение      = ВалютаБанковскогоСчета;
		ФормаВыбораБанковскогоСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;

	КонецЕсли;

	ФормаВыбораБанковскогоСчета.РежимВыбора = Истина;
	ФормаВыбораБанковскогоСчета.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
	ФормаВыбораБанковскогоСчета.Открыть();


КонецПроцедуры // НачалоВыбораЗначенияБанковскогоСчета()

// Процедура выполняет стандартные действия при начале выбора размещения в формах документов.
//
// Параметры:
//  ФормаДокумента           - форма редактируемого документа;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияРазмещения(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка, ИспользоватьВнутренниеЗаказы = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ИспользоватьВнутренниеЗаказы = Неопределено Тогда
		ИспользоватьВнутренниеЗаказы     = УправлениеЗаказами.ИспользоватьВнутренниеЗаказы();	
	КонецЕсли; 

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ЗаказПоставщику.Имя, Метаданные.Документы.ЗаказПоставщику.Синоним);
	СписокТипов.Добавить(Метаданные.Справочники.Склады.Имя, Метаданные.Справочники.Склады. Синоним);
	Если ИспользоватьВнутренниеЗаказы Тогда
		СписокТипов.Добавить(Метаданные.Документы.ВнутреннийЗаказ.Имя, Метаданные.Документы.ВнутреннийЗаказ.Синоним);
    КонецЕсли;
	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныйЭлемент.Значение = Метаданные.Документы.ЗаказПоставщику.Имя 
	 Или ВыбранныйЭлемент.Значение = Метаданные.Документы.ВнутреннийЗаказ.Имя Тогда

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Документы[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);

	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

		// уберем из выбора НТТ
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НТТ;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравнения.НеРавно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;

	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияРазмещения()

// Процедура выполняет стандартные действия при начале выбора склада/группы доступности складов в формах документов.
//
// Параметры:
//  ФормаДокумента           - форма редактируемого документа;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//
Процедура НачалоВыбораЗначенияСкладаГруппы(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Справочники.ГруппыДоступностиСкладов.Имя, Метаданные.Справочники.ГруппыДоступностиСкладов.Синоним);
	СписокТипов.Добавить(Метаданные.Справочники.Склады.Имя, Метаданные.Справочники.Склады. Синоним);

	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныйЭлемент.Значение = Метаданные.Справочники.ГруппыДоступностиСкладов.Имя Тогда

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		Если ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
			ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
		КонецЕсли;

	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

		// уберем из выбора НТТ
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НТТ;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравнения.НеРавно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
		Если ТипЗнч(ЭлементФормы.Значение) = Тип("СправочникСсылка."+ВыбранныйЭлемент.Значение) Тогда
			ФормаВыбора.НачальноеЗначениеВыбора = ЭлементФормы.Значение;
		КонецЕсли;

	КонецЕсли;

	ФормаВыбора.Открыть();
	
КонецПроцедуры // НачалоВыбораЗначенияСкладаГруппы()

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ФормаДокумента                    - форма редактируемого документа;
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  Контрагент                        - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента                - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов         - вид договора взаиморасчетов для отбора, значение перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязаетльный,
//                                      ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора (если не задан, то Ложь).
//
Процедура НачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
                                                  ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
                                                  СтруктураДополнительныхПараметров = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда

		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;

	// Еще надо фильтровать по организации, если она заполнена
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация",МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ДокументОбъект.Организация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;

	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.НачальноеЗначениеВыбора = ДоговорКонтрагента;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()

// Процедура выполняет стандартные действия при начале выбора склада в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  Склад                 - текущий склад в форме;
//  ВидСравненияНТТ       - Вид сравнения - равно или не равно НТТ;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//
Процедура НачалоВыбораСкладаНТТ(ДокументОбъект, ФормаДокумента, ЭлементФормы, Склад, ВидСравненияНТТ,
	                          СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,ЭлементФормы,);

	// уберем из выбора НТТ
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НТТ;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравненияНТТ;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;

	Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = Склад;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСкладаНТТ()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает курс взаиморасчетов по выбранной дате.
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//
Процедура ВыбратьКурсВзаиморасчетов(ДокументОбъект) Экспорт

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем курс.
	ВыбратьКурсВалюты(ДокументОбъект.КурсВзаиморасчетов,ДокументОбъект.КратностьВзаиморасчетов,
	                   ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                   ДокументОбъект.Дата); //По умолчанию курс всегда на дату документа

КонецПроцедуры // ВыбратьКурсВзаиморасчетов()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт

	// Если не заполнена валюта, то курс выбрать нельзя.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;

	КонецЕсли; 

КонецПроцедуры // ВыбратьКурсВалюты()

// Вызывается в обработчике события "Начало выбора" при выборе номенклатуры поставщика.
//
Процедура НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, Номенклатура) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.КонтрагентОтбораНоменклатуры = Контрагент;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Номенклатура;
	ФормаВыбора.НачальноеЗначениеВыбора = Номенклатура;
	
	ФормаВыбора.ПараметрВыборГруппИЭлементов = Элемент.ВыборГруппИЭлементов;

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",Номенклатура);
	СтруктураОтбора.Вставить("Контрагент",Контрагент);
	ФормаВыбора.ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущаяСтрока = РегистрыСведений.НоменклатураКонтрагентов.СоздатьКлючЗаписи(СтруктураОтбора);

	ФормаВыбора.Открыть();

КонецПроцедуры

// Функция предоставляет выбор вида нового События
//
Функция ВыбратьВидНовогоСобытия(ВыбранныйВидСобытия, ЗначениеПоискаСписка = Неопределено) Экспорт
	
	Если ВыбранныйВидСобытия = Неопределено Тогда
			
		СписокВыбора = Новый СписокЗначений;
		Для КАЖДОГО ВидСобытия ИЗ Перечисления.ВидыСобытий Цикл
			
			ЭлементСписка = СписокВыбора.Добавить(ВидСобытия, Строка(ВидСобытия));
			ЭлементСписка.Картинка = УправлениеКонтактами.ПолучитьКартинкуНапоминания(ВидСобытия);
			
		КонецЦикла; 

		НайденныйЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначениеПоискаСписка);
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите тип документа", НайденныйЭлементСписка);
		
		Если ВыбранныйЭлемент <> Неопределено Тогда
			Возврат ВыбранныйЭлемент.Значение;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ВыбранныйВидСобытия;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента) Экспорт

	// Структура - порядок актиизации реквизитов.
	// Активизируется первый не заполненный.
	СтруктураРеквизитов = Новый Структура();

	СтруктураРеквизитов.Вставить("Дата");

	// Если поле ввода "Номер" доступен для редактирования
	ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти("Номер");
	Если ЭлементУправления <> Неопределено И Не ЭлементУправления.ТолькоПросмотр Тогда
		СтруктураРеквизитов.Вставить("Номер");
	КонецЕсли;

	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Склад");
	СтруктураРеквизитов.Вставить("СкладОрдер");
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("СчетОрганизации");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Получатель");
	СтруктураРеквизитов.Вставить("Плательщик");
	СтруктураРеквизитов.Вставить("ФизЛицо");
	СтруктураРеквизитов.Вставить("Сделка");

	Для каждого Элемент Из СтруктураРеквизитов Цикл

		// Определим, есть ли ЭУ с таким именем.
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
		Если ЭлементУправления <> Неопределено Тогда // есть такой
			Если НЕ ЗначениеЗаполнено(ЭлементУправления.Значение)
			   И ЭлементУправления.Доступность
			   И ЭлементУправления.Видимость
			   И Не ЭлементУправления.ТолькоПросмотр Тогда 

				// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
				Прервать;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // АктивизироватьРеквизитВФорме()

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;
	
	// электронные документы {
	УстановитьВидимостьКнопокЭДО(ФормаДокумента);
	// электронные документы }
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Формирует и устанавливает текст заголовка формы документа с учетом вида склада
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа,
//  ДокументОбъект     - объект документа,
//  ФормаДокумента     - форма документа,
//  СкладДляЗаголовка  - склад, вид которого нужно вынести в заголовок
//
Процедура УстановитьЗаголовокФормыДокументаСУчетомСклада(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента, СкладДляЗаголовка = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ДобавитьКЗаголовкуФормы = "";
	Если СкладДляЗаголовка <> Неопределено Тогда
		Если СкладДляЗаголовка.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ДобавитьКЗаголовкуФормы = "НТТ";
		ИначеЕсли СкладДляЗаголовка.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ДобавитьКЗаголовкуФормы = "розница";
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
		Если ДокументОбъект.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ДобавитьКЗаголовкуФормы = "НТТ";
		ИначеЕсли ДокументОбъект.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ДобавитьКЗаголовкуФормы = "розница";
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаВидаОперации) И ЗначениеЗаполнено(ДобавитьКЗаголовкуФормы) Тогда
		ДобавитьКЗаголовкуФормы = ", "+ДобавитьКЗаголовкуФормы;
	КонецЕсли;
	УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации + ДобавитьКЗаголовкуФормы, ДокументОбъект, ФормаДокумента)

КонецПроцедуры // УстановитьЗаголовокФормыДокументаСУчетомСклада()

// Формирует и устанавливает текст заголовка формы элемента
//
// Параметры:
//  СтрокаЗаголовка - строка заголовка формы, 
//  ФормаОбъекта    - форма элемента справочника.
//
Процедура УстановитьЗаголовокФормыДокументаЭлемента(СтрокаЗаголовка, ФормаОбъекта) Экспорт

	ФормаОбъекта.АвтоЗаголовок = Ложь; // заголовок будем писать сами

	Заголовок = СтрокаЗаголовка;

	ФормаОбъекта.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокументаЭлемента()

// Устанавливает текст надписи сделки на форме документа
//
// Параметры:
//  ДокументОбъект - объект документа, 
//  ФормаДокумента - форма документа.
// ЗаказПокупателя - признак заказа покупателю/поставщику
//
Процедура УстановитьНадписьСделки(ДокументОбъект, ФормаДокумента, ЗаказПокупателя = Истина) Экспорт

	НадписьСделка = "Сделка:";

	ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			НадписьСделка = "Заказ "+?(ЗаказПокупателя,"покупателя:", "поставщику:");

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда

			НадписьСделка = "Счет "+?(ЗаказПокупателя,"покупателю:", "поставщика:");

		КонецЕсли;
	КонецЕсли;

	ФормаДокумента.ЭлементыФормы.НадписьСделка.Заголовок = НадписьСделка;

КонецПроцедуры // УстановитьНадписьСделки()

// Устанавливает текст надписи заголовка суммы взаиморасчетов на форме документа
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьНадписьСуммыВзаиморасчетов(ДокументОбъект, ФормаДокумента) Экспорт

	ВалютаВзаиморасчетовПоДоговору = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
	Иначе	
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
	КонецЕсли;	

КонецПроцедуры // УстановитьНадписьСуммыВзаиморасчетов()

// Устанавливает видимость переданных колонок в табличной части документа.
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых надор установить,
//  ПризнакВидимости - булево, признак видимости.
//
Процедура УстновитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ПризнакВидимости) Экспорт

	Если ПризнакВидимости Тогда
		Для каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Истина;
		КонецЦикла;
	Иначе
		Для каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Ложь;
			КолонкиТабПоля[ИмяКолонки].Видимость         = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстновитьВидимостьКолонок()

// Устанавливает видимость колоки "ХарактеристикаНоменклатуры" в табличной части документа
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля
//  СтруктураКолонок - структура, содержащая имена колонок
//                     по умолчанию "ХарактеристикаНоменклатуры"
//
Процедура УстановитьВидимостьХарактеристикиНоменклатуры(КолонкиТабПоля, СтруктураКолонок = Неопределено) Экспорт

	Если СтруктураКолонок = Неопределено Тогда
		СтруктураКолонок = Новый Структура("ХарактеристикаНоменклатуры");
	КонецЕсли;

	ИспользоватьХарактеристики = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");

	УстновитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ИспользоватьХарактеристики);

КонецПроцедуры // УстановитьВидимостьХарактеристикиНоменклатуры()

// Устанавливает видимость колонки "СерияНоменклатуры" в табличной части документа
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля
//  СтруктураКолонок - структура, содержащая имена колонок
//                     по умолчанию "СерияНоменклатуры"
//
Процедура УстановитьВидимостьСерииНоменклатуры(КолонкиТабПоля, СтруктураКолонок = Неопределено) Экспорт

	Если СтруктураКолонок = Неопределено Тогда
		СтруктураКолонок = Новый Структура("СерияНоменклатуры");
	КонецЕсли;

	ИспользоватьСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

	УстновитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ИспользоватьСерии);

КонецПроцедуры // УстановитьВидимостьСерииНоменклатуры()

// Устанавлеивает видимость колонки "Склад" в табличной части формы документа 
// в зависимости от настройки использования складов в табличных частях документов.
//
// Параметры:
//  КолонкиТовары            – коллекция колонок табличного поля "Товары",
//  КолонкиВозвратнаяТара    – коллекция колонок табличного поля "ВозвратнаяТара", 
//                             необязательный, если не передан, то видимость колонки не устанавливается,
//  ЭУСклад                  - ЭУ формы, в который вводится склад в шапке,
//  ИмяКолонкиСклад          - Строка, имя колонки склада, в которые вводится склад в ТЧ (имена должны быть одинаковыми в обоих ТЧ),
//  ИспользоватьКолонкуСклад - булево, определяет указываеются ли склады в табличной части документа или они указываются только в шапке.
//
Процедура УстановитьВидимостьОбязательностьСклада(КолонкиТовары, КолонкиВозвратнаяТара = Неопределено, ЭУСклад, 
                                                  ИмяКолонкиСклад = "Склад", ИспользоватьКолонкуСклад) Экспорт

	ИспользоватьВозвратнуюТару = глЗначениеПеременной("ИспользоватьВозвратнуюТару");

	// Установим видимость колонки
	СтруктураКолонок = Новый Структура("Склад");

	УстановитьВидимостьКолонок(КолонкиТовары, СтруктураКолонок, ИспользоватьКолонкуСклад);

	Если ИспользоватьВозвратнуюТару И КолонкиВозвратнаяТара <> Неопределено Тогда
		УстановитьВидимостьКолонок(КолонкиВозвратнаяТара, СтруктураКолонок, ИспользоватьКолонкуСклад);
	КонецЕсли;

	//Установим автоотметки незаполненного.
	Если ИспользоватьКолонкуСклад Тогда
		КолонкиТовары[ИмяКолонкиСклад].АвтоотметкаНеЗаполненного = Истина;
		Если ИспользоватьВозвратнуюТару И КолонкиВозвратнаяТара <> Неопределено Тогда
			КолонкиВозвратнаяТара[ИмяКолонкиСклад].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;

		ЭУСклад.АвтоотметкаНеЗаполненного   = Ложь;
		ЭУСклад.ОтметкаНеЗаполненного       = Ложь;
	Иначе
		ЭУСклад.АвтоотметкаНеЗаполненного = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонкиСклад()

// Устанавливает видимость колонки "ЗаказПоставщику" или "ЗаказПокупателя" в табличной части формы документа
// в зависимости от настройки использования заказов в табличных частях документов.
//
// Параметры:
//  ДокументВидОперации   – вид операции документа,
//  ДоговорКонтрагента    – договор с контрагентом,
//  КолонкиТовары         – коллекция колонок табличного поля "Товары",
//  КолонкиВозвратнаяТара – коллекция колонок табличного поля "ВозвратнаяТара",
//                          необязательный, если не передан, то видимость колонки не устанавливается,
//  КолонкиУслуги         – коллекция колонок табличного поля "Услуги",
//                          необязательный, если не передан, то видимость колонки не устанавливается,
//  ЭУЗаказ               - ЭУ формы, в который вводится заказ в шапке,
//  ИмяКолонкиЗаказ       - строка, имя колонки заказа, в которые вводится заказ в ТЧ (имена должны быть одинаковыми во всех ТЧ),
//  ВидОперации           - строка, определяет вид операции, возможнве значения "Поступление", "Реализация","ПоступлениеНТТ", "РеализацияСчет", "ВозвратОтПокупателя"
//                          по умолчанию "Реализация".
//
Процедура УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ДокументВидОперации, ДоговорКонтрагента, КолонкиТовары, КолонкиВозвратнаяТара = Неопределено, КолонкиУслуги = Неопределено, КолонкиВзаиморасчеты = Неопределено, ЭУЗаказ, ИмяКолонкиЗаказ = "ЗаказПокупателя", ВидОперации = "Реализация", ИмяКолонкиСделка = "Сделка") Экспорт

	ИспользоватьКолонкуЗаказ = УправлениеЗаказами.ИспользоватьЗаказВТабличнойЧасти(ДокументВидОперации, ДоговорКонтрагента, ВидОперации);
	ОтмечатьНезаполненные = (ИспользоватьКолонкуЗаказ.ОбязательноеЗаполнениеЗаказаВТабЧасти) И (ВидОперации <> "РеализацияСчет");
	
	Если ИспользоватьКолонкуЗаказ.ОбязательноеЗаполнениеЗаказаВТабЧасти ИЛИ ИспользоватьКолонкуЗаказ.ИспользоватьЗаказВТабЧасти Тогда
		ИспользоватьКолонкуЗаказ = Истина;
	Иначе 
		ИспользоватьКолонкуЗаказ = Ложь;
	КонецЕсли;
	Если ДокументВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
		ИспользоватьКолонкуЗаказ = Ложь;
	КонецЕсли;
	
	
	ИспользоватьВозвратнуюТару = глЗначениеПеременной("ИспользоватьВозвратнуюТару");

	// Установим видимость колонки
	КолонкиТовары[ИмяКолонкиЗаказ].ИзменятьВидимость = Ложь;
	КолонкиТовары[ИмяКолонкиЗаказ].Видимость         = ИспользоватьКолонкуЗаказ;
	Если ВидОперации<>"ВозвратОтПокупателя" Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеОтобратьИЗаполнитьПоЗаказам.Доступность = ИспользоватьКолонкуЗаказ;
    КонецЕсли;
	Если ИспользоватьВозвратнуюТару И КолонкиВозвратнаяТара <> Неопределено Тогда
		КолонкиВозвратнаяТара[ИмяКолонкиЗаказ].ИзменятьВидимость = Ложь;
		КолонкиВозвратнаяТара[ИмяКолонкиЗаказ].Видимость         = ИспользоватьКолонкуЗаказ;
		Если ВидОперации<>"ВозвратОтПокупателя" Тогда 
			ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеОтобратьИЗаполнитьПоЗаказам.Доступность = ИспользоватьКолонкуЗаказ;
		КонецЕсли;
	КонецЕсли;

	Если КолонкиУслуги <> Неопределено Тогда
		КолонкиУслуги[ИмяКолонкиЗаказ].ИзменятьВидимость = Ложь;
		КолонкиУслуги[ИмяКолонкиЗаказ].Видимость         = ИспользоватьКолонкуЗаказ;
		ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеОтобратьИЗаполнитьПоЗаказам.Доступность = ИспользоватьКолонкуЗаказ;
	КонецЕсли;

	//Установим автоотметки незаполненного.
	Если ОтмечатьНезаполненные Тогда
		КолонкиТовары[ИмяКолонкиЗаказ].АвтоотметкаНеЗаполненного = Истина;
		
		Если ИспользоватьВозвратнуюТару И КолонкиВозвратнаяТара <> Неопределено Тогда
			КолонкиВозвратнаяТара[ИмяКолонкиЗаказ].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;

		Если КолонкиУслуги <> Неопределено Тогда
			КолонкиУслуги[ИмяКолонкиЗаказ].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;

		Если КолонкиВзаиморасчеты <> Неопределено Тогда
			КолонкиВзаиморасчеты[ИмяКолонкиСделка].Видимость = Истина;
			КолонкиВзаиморасчеты[ИмяКолонкиСделка].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;

		ЭУЗаказ.АвтоотметкаНеЗаполненного = Ложь;
		ЭУЗаказ.ОтметкаНеЗаполненного     = Ложь;
	Иначе
		КолонкиТовары[ИмяКолонкиЗаказ].АвтоотметкаНеЗаполненного = Ложь;

		Если ИспользоватьВозвратнуюТару И КолонкиВозвратнаяТара <> Неопределено Тогда
			КолонкиВозвратнаяТара[ИмяКолонкиЗаказ].АвтоотметкаНеЗаполненного = Ложь;
		КонецЕсли;

		Если КолонкиУслуги <> Неопределено Тогда
			КолонкиУслуги[ИмяКолонкиЗаказ].АвтоотметкаНеЗаполненного = Ложь;
		КонецЕсли;
		
		Если КолонкиВзаиморасчеты <> Неопределено Тогда
			КолонкиВзаиморасчеты[ИмяКолонкиСделка].Видимость = Ложь;
			КолонкиВзаиморасчеты[ИмяКолонкиСделка].АвтоотметкаНеЗаполненного = Истина;
		КонецЕсли;

		АвтоОтметка = Истина;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				АвтоОтметка = Ложь;
			ИначеЕсли ВидОперации = "РеализацияСчет"
				И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				АвтоОтметка = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЭУЗаказ.АвтоотметкаНеЗаполненного <> АвтоОтметка Тогда
			ЭУЗаказ.АвтоотметкаНеЗаполненного = АвтоОтметка;
		КонецЕсли;

		Если ЭУЗаказ.ОтметкаНеЗаполненного <> АвтоОтметка И НЕ ЗначениеЗаполнено(ЭУЗаказ.Значение) Тогда
			ЭУЗаказ.ОтметкаНеЗаполненного = АвтоОтметка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонкиЗаказ()

// Процедура устанавливает видимость реквизита проект в зависимости от учетной политики
//
//		Параметры:
//
//
Процедура УстановитьВидимостьПроекта(ДокументОбъект = Неопределено, ЭлементыФормы, Знач Реквизиты, ДокументУчетаЗатрат = Ложь) Экспорт

	Если ПустаяСтрока(Реквизиты) Тогда

		Возврат;

	КонецЕсли;

	Если ДокументОбъект = Неопределено Тогда

		Дата = РабочаяДата;

	Иначе

		Дата = ДокументОбъект.Дата;

	КонецЕсли;

	ВедениеУчетаПоПроектам = УправлениеПроектами.ВедениеУчетаПоПроектам(Дата);

	Если ВедениеУчетаПоПроектам Тогда

		Возврат;

	КонецЕсли;

	Реквизиты = СтрЗаменить(Реквизиты, ",", Символы.ПС);

	Для Индекс = 1 По СтрЧислоСтрок(Реквизиты) Цикл

		ИмяРеквизита = СтрПолучитьСтроку(Реквизиты, Индекс);

		Если Найти(ИмяРеквизита, ".") > 0 Тогда

			ИмяРеквизита = СтрЗаменить(ИмяРеквизита, ".", Символы.ПС);
			ИмяТабличногоПоля = СтрПолучитьСтроку(ИмяРеквизита, 1);
			ИмяКолонки = СтрПолучитьСтроку(ИмяРеквизита, 2);
			
			ЭлементыФормы[ИмяТабличногоПоля].Колонки[ИмяКолонки].Видимость = Ложь;
			ЭлементыФормы[ИмяТабличногоПоля].Колонки[ИмяКолонки].ИзменятьВидимость = Ложь;
			
		Иначе

			ЭлементыФормы[ИмяРеквизита].Видимость = Ложь;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьПроекта()

// Устанавливает видимость закладки "Возвратная тара" в форме документа
//
// Параметры:
//  ФормаДокумента - форма документа.
//
Процедура УстановитьВидимостьЗакладкиВозвратнаяТара(ФормаДокумента) Экспорт

	ИспользоватьВозвратнуюТару = ?(ФормаДокумента.ВозвратнаяТара.Количество() = 0, глЗначениеПеременной("ИспользоватьВозвратнуюТару"), Истина);

	СтраницыПанели                  = ФормаДокумента.ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницыПанели.Тара.Видимость   = ИспользоватьВозвратнуюТару;
	СтраницыПанели.Тара.Доступность = ИспользоватьВозвратнуюТару;

КонецПроцедуры // УстановитьВидимостьЗакладкиВозвратнаяТара()

// Устанавливает видимость переданных колонок в табличной части документа.
//
// Параметры:
//  КолонкиТабПоля   - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых надор установить,
//  ПризнакВидимости - булево, признак видимости.
//
Процедура УстановитьВидимостьКолонок(КолонкиТабПоля, СтруктураКолонок, ПризнакВидимости) Экспорт

	Если ПризнакВидимости Тогда
		Для Каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Истина;
		КонецЦикла;
	Иначе
		Для Каждого ТекКолонка из СтруктураКолонок Цикл
			ИмяКолонки                                   = ТекКолонка.Ключ;
			КолонкиТабПоля[ИмяКолонки].ИзменятьВидимость = Ложь;
			КолонкиТабПоля[ИмяКолонки].Видимость         = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьКолонок()

// Устанавливает видимость закладки "Календарь" в форме менеджера контактов
//
// Параметры:
//  Нет.
//
Процедура ОткрытьМенеджерКонтактовНаВкладкеКалендарь() Экспорт
	
	ФормаМенеджера = Обработки.МенеджерКонтактов.ПолучитьФорму("Форма");
	ФормаМенеджера.ОтображаемаяВкладка = 1;
	ФормаМенеджера.Открыть();
	
КонецПроцедуры

// Устанавливает видимость закладки "Почта" в форме менеджера контактов
//
// Параметры:
//  Нет.
//
Процедура ОткрытьМенеджерКонтактовНаВкладкеПочта() Экспорт
	
	ФормаМенеджера = Обработки.МенеджерКонтактов.ПолучитьФорму("Форма");
	ФормаМенеджера.ОтображаемаяВкладка = 2;
	ФормаМенеджера.Открыть();
	
КонецПроцедуры
	
Процедура УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, КартинкаСерийныеНомера, КартинкаНаборКомплект, ЕстьСерийныеНомера = Истина, ЕстьСоставНабора = Истина) Экспорт
	
	Если ОформленияСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатуры = Новый Массив;
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		МассивНоменклатуры.Добавить(ОформлениеСтроки.ДанныеСтроки.Номенклатура);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,"
	+ ?(ЕстьСерийныеНомера, "
	|	Номенклатура.ВестиСерийныеНомера КАК ВестиСерийныеНомера", "")
	+ ?(ЕстьСоставНабора, ?(ЕстьСерийныеНомера, ",", "") + "
	|	Номенклатура.Комплект КАК Комплект", "") + "
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТаблицаНоменклатуры.Индексы.Добавить("Номенклатура");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		НайденнаяСтрока = ТаблицаНоменклатуры.Найти(ОформлениеСтроки.ДанныеСтроки.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Если ЕстьСерийныеНомера И НайденнаяСтрока.ВестиСерийныеНомера Тогда
				Если КартинкаСерийныеНомера = Неопределено Тогда
					КартинкаСерийныеНомера = БиблиотекаКартинок.СерийныеНомера;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.Номенклатура.УстановитьКартинку(КартинкаСерийныеНомера);
			ИначеЕсли ЕстьСоставНабора И НайденнаяСтрока.Комплект Тогда
				Если КартинкаНаборКомплект = Неопределено Тогда
					КартинкаНаборКомплект = БиблиотекаКартинок.НаборКомплект;
				КонецЕсли;
				ОформлениеСтроки.Ячейки.Номенклатура.УстановитьКартинку(КартинкаНаборКомплект);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью
//
// Параметры:
//	Объект				- документ, форма которого открывается;
//	Панель				- панель формы документа, страницы которой следует переключить;
//	СтраницыСТабчастями	- список значений, каждый элемент которого представляет
//							собой имя страницы, а его представление - имя табличной части;
//	СтраницаПоУмолчанию	- имя страницы, которую следует сделать текущей, если ни на одной
//							из перечисленных страниц нет заполненной табличной части.
//									
Процедура УстановкаТекущейСтраницы(Объект, Панель, СтраницыСТабЧастями, СтраницаПоУмолчанию = Неопределено) Экспорт
	
	ТекущаяСтраницаНеУстановлена = Истина;
	
	Если Не Объект.ЭтоНовый() Тогда
		Для каждого ЭлементСписка из СтраницыСТабЧастями Цикл
			ИмяСтраницы = ЭлементСписка.Значение;
			ИмяТаблЧасти = ЭлементСписка.Представление;
			Страница = Панель.Страницы[ИмяСтраницы];
			
			Если Страница.Видимость Тогда
				Если Объект[ИмяТаблЧасти].Количество() > 0 Тогда 
					Панель.ТекущаяСтраница = Страница;
					ТекущаяСтраницаНеУстановлена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяСтраницаНеУстановлена Тогда
		Если СтраницаПоУмолчанию = Неопределено Тогда
			СтраницаПоУмолчанию = Панель.Страницы[СтраницыСТабЧастями[0].Значение].Имя;
		КонецЕсли;
		
		Панель.ТекущаяСтраница = Панель.Страницы[СтраницаПоУмолчанию];
	КонецЕсли;
	
КонецПроцедуры // УстановкаТекущейСтраницы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГПУ ПРЕДСТАВЛЕНИЯ ДАННЫХ

// Формирует текст про счет-фактуру для показа в форме документа
//
// Параметры: 
//  СчетФактура - ссылка на документ, определяет счет-фактуру, про который надо получить текстовую строку .
//
// Возвращаемое значение:
//  Текстовая строка про счет-фактуру.
//
Функция ПолучитьТекстСчетаФактуры(СчетФактура) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат "Ввести счет-фактуру";
	Иначе
		Попытка
			Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				
				ВерсияПостановаления = УчетНДС.ПолучитьВерсиюПостановления(СчетФактура.Дата);
				Если СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный И СчетФактура.Исправление И ВерсияПостановаления = 2 Тогда
					СтрокаИсправление = "Исправление № " + ?(ПустаяСтрока(СчетФактура.НомерИсправления), " ... ", СчетФактура.НомерИсправления) + " от "+ Формат(СчетФактура.ДатаИсправления,"ДФ=dd.MM.yyyy") + " г." + " к сч/ф ";
					СтрокаКорректировка= "№ "+?(ПустаяСтрока(СчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(СчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(СчетФактура.ДатаВходящегоДокумента), Формат(СчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
					
					СтрокаСФ = СтрокаИсправление + СтрокаКорректировка;
				ИначеЕсли СчетФактура.Исправление И ВерсияПостановаления = 2 Тогда
					СтрокаИсправление = "Исправление № " + ?(ПустаяСтрока(СчетФактура.НомерИсправления), " ... ", СчетФактура.НомерИсправления) + " от "+ Формат(СчетФактура.ДатаИсправления,"ДФ=dd.MM.yyyy") + " г." + " к сч/ф ";
					СтрокаИсходный = "№ "+?(ПустаяСтрока(СчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(СчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(СчетФактура.ДатаВходящегоДокумента), Формат(СчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
					
					СтрокаСФ = СтрокаИсправление + СтрокаИсходный;
				Иначе
					
					СтрокаСФ= "№ "+?(ПустаяСтрока(СчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(СчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(СчетФактура.ДатаВходящегоДокумента), Формат(СчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
				КонецЕсли; 
								
			Иначе
				
				ВерсияПостановаления = УчетНДС.ПолучитьВерсиюПостановления(СчетФактура.Дата);
				Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					Если СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И СчетФактура.Исправление И ВерсияПостановаления = 2 Тогда
						СтрокаИсправление = "Исправление № " + ?(ПустаяСтрока(СчетФактура.НомерИсправления), " ... ", СчетФактура.НомерИсправления) + " от "+ Формат(СчетФактура.Дата,"ДФ=dd.MM.yyyy") + " г." + " к сч/ф ";
						СтрокаКорректировка = "№ "+?(ПустаяСтрока(СчетФактура.НомерИсправляемогоКорректировочногоДокумента), " ... ", СчетФактура.НомерИсправляемогоКорректировочногоДокумента) + " от "+ Формат(СчетФактура.ДатаИсправляемогоКорректировочногоДокумента,"ДФ=dd.MM.yyyy") + " г.";
						
						СтрокаСФ = СтрокаИсправление + СтрокаКорректировка;
					ИначеЕсли СчетФактура.Исправление И ВерсияПостановаления = 2 Тогда
						СтрокаИсправление = "Исправление № " + ?(ПустаяСтрока(СчетФактура.НомерИсправления), " ... ", СчетФактура.НомерИсправления) + " от "+ Формат(СчетФактура.Дата,"ДФ=dd.MM.yyyy") + " г." + " к сч/ф ";
						СтрокаИсходный = "№ "+?(ПустаяСтрока(СчетФактура.НомерИсходногоДокумента), " ... ", СчетФактура.НомерИсходногоДокумента) + " от "+ Формат(СчетФактура.ДатаИсходногоДокумента,"ДФ=dd.MM.yyyy") + " г.";
						
						СтрокаСФ = СтрокаИсправление + СтрокаИсходный;
					Иначе
						
						СтрокаСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(СчетФактура);
						СтрокаСФ= "№ "+?(ПустаяСтрока(СтрокаСФ), " ... ", СтрокаСФ) +" от "+ Формат(СчетФактура.Дата,"ДФ=dd.MM.yyyy") + " г.";
					КонецЕсли;
				Иначе
					
					СтрокаСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(СчетФактура);
					СтрокаСФ= "№ "+?(ПустаяСтрока(СтрокаСФ), " ... ", СтрокаСФ) +" от "+ Формат(СчетФактура.Дата,"ДФ=dd.MM.yyyy") + " г.";
				КонецЕсли; 
			КонецЕсли; 
			
			СтрокаСФ = СтрокаСФ+" ("+Строка(СчетФактура)+ ?(СчетФактура.ПометкаУдаления, "; помечен на удаление", "")+ ")";
		Исключение
			СтрокаСФ = Строка(СчетФактура) + ?(СчетФактура.ПометкаУдаления, " (помечен на удаление)", "");
		КонецПопытки;	
		
		Возврат СтрокаСФ ;
	КонецЕсли; 
	
КонецФункции // ПолучитьТекстСчетаФактуры()

// Процедура формирует и выводит текст в информационной надписи о величине долга контрагента.
//
// Параметры:
//  ДоговорКонтрагента    - ссылка на справочник, определяет договор контрагента; 
//  Сделка                   - ссылка на документ или Неопределено, определяет сделку; 
//  ЭлементФормыНадписьДолга - элемент формы, содержащий надпись долга;
//  СсылкаДокумент           - ссылка на документ, из которого вызывается процедура.
//  МожноНеРассчитывать      - если можно не рассчитывать долг, а в дополнительных правах "Рассчитывать долг при открытии форм" = ложь,
//                             то величина долга рассчитываться не будет
//
Процедура СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементФормыНадписьДолга, 
	                                 СсылкаДокумент = Неопределено, МожноНеРассчитывать = Ложь) Экспорт

	Если МожноНеРассчитывать Тогда
		Если НЕ УправлениеДопПравамиПользователей.РассчитыватьДолгПриОткрытииФорм() Тогда
			ЭлементФормыНадписьДолга.Заголовок = ПолучитьТекстДолга(ДоговорКонтрагента, Неопределено);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СуммаДолга = УправлениеВзаиморасчетами.ТекущийДолг(ДоговорКонтрагента, Сделка, СсылкаДокумент);

		ТекстДолга = ПолучитьТекстДолга(ДоговорКонтрагента, СуммаДолга);

		Если СуммаДолга > 0 Тогда // Долг контрагента, покрасим текст в особый цвет
			ЭлементФормыНадписьДолга.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		Иначе
			ЭлементФормыНадписьДолга.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		КонецЕсли; 

		ЭлементФормыНадписьДолга.Заголовок = ТекстДолга;
	Иначе
		ЭлементФормыНадписьДолга.Заголовок = "";
	КонецЕсли; 

КонецПроцедуры // СформироватьНадписьДолга()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГПУ ВВОДА ДАННЫХ

// Выполняет общие для всех документов действия при нажатии на гиперссылку на Счет-фактуру
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ФормаДокумента  - форма документа.
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура ВвестиСчетФактуру(ДокументОбъект, ФормаДокумента, ВидСчетаФактуры = "СчетФактураВыданный", РазрешитьВыборСФнаАванс = Истина) Экспорт

	Если (Не ДокументОбъект.Проведен) и (Не ДокументОбъект.ПометкаУдаления) Тогда
		Ответ = Вопрос("Счет-фактуру нельзя вводить на основании не проведенного документа! Провести документ?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Попытка
				
				// выполняем проведение документа
				Если НЕ ФормаДокумента.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение) Тогда
					Возврат;
				КонецЕсли;
				
			Исключение
				Возврат;
			КонецПопытки;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ДокументОбъект.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено 
		И Не ДокументОбъект.ОтражатьВБухгалтерскомУчете Тогда
		Предупреждение("Счет-фактуру нельзя вводить на основании документа, не отражаемого в бухгалтерском учете");
		Возврат;
	КонецЕсли;
	
	//Попытаемся найти счет-фактуру
	СчетФактура = УчетНДС.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры, РазрешитьВыборСФнаАванс);
	
	ОбъектСчетаФактуры = Неопределено;
	
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(СчетФактура))
	   И (Не ДокументОбъект.ПометкаУдаления) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			Предупреждение("Документ был изменен! Сначала следует записать документ!");
			Возврат;
		КонецЕсли;
		
		ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].ПолучитьФормуНовогоДокумента( , ФормаДокумента, Строка(ДокументОбъект));
		ОбъектСчетаФактуры.ДокументыОснования.Очистить();
		ОбъектСчетаФактуры.ДополнительныеСвойства.Вставить("НеЗаполнятьСчетФактуруНаАванс");
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка); 
		// Откроем форму для редактирования счета-фактуры
		Если ОбъектСчетаФактуры.мДокументЗаполнен Тогда
			ОбъектСчетаФактуры.Открыть();
			ОбъектСчетаФактуры.Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СчетФактура) Тогда
		// Откроем форму для редактирования счета-фактуры
		СчетФактура.ПолучитьФорму( , ФормаДокумента, Строка(ДокументОбъект)).Открыть();
		
	Иначе
		Предупреждение("На основании документов, помеченных на удаление, ввод счетов-фактур не предусмотрен.");
		
	КонецЕсли;

КонецПроцедуры // ВвестиСчетФактуру()

Процедура УстановитьСписокПоляВыбора(ПолеВыбора, Список) Экспорт

	ПрошлоеЗначение = ПолеВыбора.Значение;
	ПолеВыбора.СписокВыбора = Список;
	Если ЗначениеЗаполнено(ПрошлоеЗначение) Тогда
		Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
			Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
				ПолеВыбора.Значение = ПрошлоеЗначение;
			КонецЕсли;
		Иначе
			ПолеВыбора.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСписокПоляВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(НачальнаяДатаДокумента) - НачалоДня(ДокументОбъект.Дата);

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

// Формирует текст о долге контрагента для вывода его в форме документа
//
// Параметры: 
//  ДоговорКонтрагента - ссылка на элемент справочника, определяет договор контрагента
//  Долг                  - число, сумма долга.
//
// Возвращаемое значение:
//  Строка, сформированный текст про долг контрагента.
//
Функция ПолучитьТекстДолга(ДоговорКонтрагента, Знач Долг) Экспорт

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат "Введена не вся информация для расчета долга.";
	КонецЕсли;

	ТекстПодписи = ?(ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом,
	               "По договору","По сделке");

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ТекстПодписи = ТекстПодписи + " """ + Нрег(ДоговорКонтрагента.ВидДоговора) + """";
	Иначе
		ТекстПодписи = ТекстПодписи + " " + Нрег(ДоговорКонтрагента.ВидДоговора);
	КонецЕсли;

	Если Долг = Неопределено Тогда
		ТекстПодписи = ТекстПодписи + " долг не рассчитан";

	ИначеЕсли Долг = 0 Тогда
		ТекстПодписи = ТекстПодписи + " нет долга";

	Иначе
		Если Долг > 0 Тогда
			ТекстПодписи = ТекстПодписи + " долг контрагента";
		Иначе
			ТекстПодписи = ТекстПодписи + " долг компании";
			Долг = (-1) * Долг;
		КонецЕсли;

		ТекстПодписи = ТекстПодписи + " " +
		               ОбщегоНазначения.ФорматСумм(Долг, ДоговорКонтрагента.ВалютаВзаиморасчетов);

	КонецЕсли;

	Возврат ТекстПодписи;

КонецФункции // ПолучитьТекстДолга()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт

	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
		                                        ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		ПунктМеню.ИзменяетДанные = Истина;
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, ВедущиеВидыРасчета = Ложь) Экспорт

	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодборПодМеню");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодМеню");
				ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Кнопки.Добавить(СтрокаКолекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКолекции.Синоним, ДействиеПоКнопке);
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		ДействиеПоКнопке = Новый Действие("КоманднаяПанельБазовыеВидыРасчетаПодбор");
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор.Действие  = ДействиеПоКнопке;
		
		Если ВедущиеВидыРасчета Тогда
			
			ДействиеПоКнопке = Новый Действие("КоманднаяПанельВедущиеВидыРасчетаПодбор");
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = ДействиеПоКнопке;
			
			Для каждого СтрокаКолекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКолекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

//настройка подменю Клиент-Банк
Процедура УстановкаПодменюКлиентБанк(Кнопка, Объект) Экспорт

	Если Объект.РеквизитыКонтрагента.Количество() = 0 Тогда
		Кнопка.Доступность =Ложь;
	Иначе
		Кнопка.Доступность =Истина;
	КонецЕсли; 

КонецПроцедуры // УстановкаПодменюКлиентБанк()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ) Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен    = Метаданные.Документы.Содержит(Документ.Метаданные()) И Документ.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//  Форма    - форма проверяемого документа
//
Функция ПроверитьМодифицированностьВФорме(Документ, Форма) Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Документ.Метаданные()) И Документ.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Проведен Тогда

				Попытка

					Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Форма.ЗаписатьВФорме();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа перед заполнением на основании
// 
// Параметры
//  Документ - проверяемый документ основания
//
Функция ПроверитьМодифицированностьДокументаОснования(Документ) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Документ) Тогда

		ФормаДокумента = Документ.ПолучитьФорму();

		Если ФормаДокумента.Модифицированность() Тогда
			ОчиститьСообщения();
			ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Документ) + " был изменен! Сначала следует записать документ!");
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированностьДокументаОснования()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ В ФОРМЕ

// Процедура выполняет запись и проведение документа
//
// Параметры
//  <форма>  – <форма> – <форма документа которую необходимо записать>
//
Процедура ПровестиДокументВФормеОперативно(форма) Экспорт

	РежимДокумента = форма.ИспользоватьРежимПроведения;
	форма.ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Оперативный;
	Попытка
		форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	Исключение
		Предупреждение("Операция не выполнена!");
	КонецПопытки;
	форма.ИспользоватьРежимПроведения = РежимДокумента;

КонецПроцедуры // ПровестиДокументВФормеОперативно()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.НазначениеСвойств      = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ДокументОбъект.Ссылка);
	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы с категориями документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьКатегорииДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);

	Форма.НазначениеКатегорий   = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ДокументОбъект.Ссылка);
	Форма.ОбъектОтбораКатегорий = ФормаДокумента.Ссылка;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры // ОткрытьКатегорииДокумента()

// процедура позволяет настрить период (ограничения по датам для отчета)
Процедура ОбработчикНастройкаПериодаНажатие(ДатаНач, ДатаКон) Экспорт

	НП = Новый НастройкаПериода;
	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  ФормаДиалога        - форма редактируемого объекта,
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Процедура УстановитьКнопкуПечати(ДокументОбъект, ФормаДокумента) Экспорт

	Попытка
		СтруктураВнутреннихПечатныхФорм = ДокументОбъект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(ДокументОбъект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ДокументОбъект.Метаданные().Имя, ДеревоМакетов);

	// Изменим название кнопки печати
	Если СтрокаПоУмолчанию <> Неопределено Тогда
		ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = СтрокаПоУмолчанию.Текст;
	КонецЕсли;

	Если ДеревоМакетов.Строки.Количество() = 0 Тогда
		// Удалим кнопки печати
		Попытка
			КнопкиПанелиДокумента = ФормаДокумента.ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
			ИменаУдаляемыхКнопок  = Новый Массив;
			ИменаУдаляемыхКнопок.Добавить("Печать");
			ИменаУдаляемыхКнопок.Добавить("ДействиеПечать");
			Для Каждого ИмяУдаляемойКнопки Из ИменаУдаляемыхКнопок Цикл
				УдаляемаяКнопка = КнопкиПанелиДокумента.Найти(ИмяУдаляемойКнопки);
				Если УдаляемаяКнопка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = КнопкиПанелиДокумента.Индекс(УдаляемаяКнопка);
				Если Индекс>=0 Тогда
					КнопкиПанелиДокумента.Удалить(УдаляемаяКнопка);
				КонецЕсли;
			КонецЦикла;
		Исключение
		
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкуПечати()


// Получает из текущих настроек пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
// Если не найдено, то берется первый макет в структуре макетов печатных форм,
// и сохраняется в настройках пользователя.
//
// Параметры: 
//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
//                        макетов печатных форм документа
//
Функция ПолучитьПечатнуюФормуПоУмолчанию(ИмяОбъекта, СписокМакетов) Экспорт

	Перем НазваниеМакета;
	
	МакетПоУмолчанию = ВосстановитьЗначение(ИмяОбъекта + "МакетПечати");
	
	Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
	
		// Пытаемся найти форму в соответствии
		ИмяМакета = СписокМакетов[МакетПоУмолчанию];

		Если НЕ ЗначениеЗаполнено(ИмяМакета) Тогда
		
			// Текущая печатная форма еще не найдена
			// Установим по умолчанию первую из списка
			Для каждого Элемент Из СписокМакетов Цикл
				МакетПоУмолчанию = Элемент.Ключ;
				Прервать;
			КонецЦикла; 
			СохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		
		Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда			
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
				Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
					СтруктураМакета.Макет =  СтрокаМакетаВСписке.Значение;
					СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли МакетПоУмолчанию = Неопределено Тогда
			СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		Иначе			
			СтруктураМакета = МакетПоУмолчанию;
		КонецЕсли;
		
		Если СтруктураМакета.Макет = Неопределено Тогда
			Если СписокМакетов.Количество() <> 0 Тогда
				СтрокаМакетаВСписке = СписокМакетов[0];
				СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
				СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
        		
		МакетПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);		
		
	КонецЕсли;
	
	Возврат МакетПоУмолчанию;

	
КонецФункции // ПолучитьПечатнуюФормуПоУмолчанию()

// Сохраняет в настройках пользователя имя кнопки печати,
// которая определяет макет печатной формы по умолчанию.
//
// Параметры:
//  ИмяОбъекта     - строка, содержащая имя объекта, для которого ищется макет печатной формы
//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
//                   которое совпадает с текстом на кнопке печати в диалоге.
//
Процедура СохранитьТекущуюКнопкуПечати(ИмяОбъекта, НазваниеМакета) Экспорт

	СохранитьЗначение(ИмяОбъекта + "МакетПечати", НазваниеМакета);

КонецПроцедуры // СохранитьТекущуюКнопкуПечати()

// Печатает составы по указанной номенклатуре.
//
// Параметры:
//  МассивНоменклатуры - массив, содержащий номенклатуру, для которой печатается состав
//
// Возвращаемое значение:
//  Сформированный табличный документ.
//
Функция НапечататьКомплектующие(МассивНоменклатуры) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура                  КАК Номенклатура,
	|	ХарактеристикаНоменклатуры    КАК ХарактеристикаНоменклатуры,
	|	Комплектующая                 КАК Комплектующая,
	|	ХарактеристикаКомплектующей   КАК ХарактеристикаКомплектующей,
	|	Количество                    КАК Количество,
	|	ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ДоляСтоимости                 КАК ДоляСтоимости
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|
	|ГДЕ
	|	Номенклатура В ИЕРАРХИИ (&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = ПолучитьОбщийМакет("СписокКомплектующих");

	ТабДокумент = Новый ТабличныйДокумент;
	
	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаНоменклатуры") Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ОбластьМакета.Параметры.Заполнить(Выборка);
			НомерСтроки = 1;
			Если Выборка.Номенклатура.Набор Тогда
				ОбластьМакета.Параметры.ТекстЗаголовка = "Состав набора """+СокрЛП(Выборка.Номенклатура)+"""";
			Иначе
				ОбластьМакета.Параметры.ТекстЗаголовка = "Состав комплекта """+СокрЛП(Выборка.Номенклатура)+"""";
				Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
					ОбластьМакета.Параметры.ТекстЗаголовка = ОбластьМакета.Параметры.ТекстЗаголовка + " ("+СокрЛП(Выборка.ХарактеристикаНоменклатуры)+")";
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("Строка"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОбластьМакета);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал"+?(Выборка.Номенклатура.Набор, "|Набор", ""));
			ТабДокумент.Вывести(ОбластьМакета);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции // НапечататьКомплектующие()

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт

	Форма = Отчеты.ДвиженияДокумента.ПолучитьФорму(,,Новый УникальныйИдентификатор);
	Форма.Открыть();
	Форма.Документ = ДокументСсылка;
	Форма.СформироватьИВывестиОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНОВОЙ СЕБЕСТОИМОСТЬЮ

// Процедура выполняет стандартные действия при изменении режима использования плановой себестоимости
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа
//  ФормаДокумента                   - форма редактируемого документа
//  ВалютаРегламентированногоУчета   - валюта регламентированного учета
//  СтароеЗначениеРежимаИспользовать - предыдущее значение режима использования плановой себестоимости
//
Процедура ИзмененитьРежимИспользованияПлановойСебестоимости(ДокументОбъект, ФормаДокумента, ВалютаРегламентированногоУчета, СтароеЗначениеРежимаИспользовать = Неопределено) Экспорт

	Колонки = ФормаДокумента.ЭлементыФормы.Товары.Колонки;
	Надпись = ФормаДокумента.ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости;

	Если ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда

		Если СтароеЗначениеРежимаИспользовать = Ложь Тогда

			// Пользователь изменил режим с "не использовать" на "использовать".
			// Заполним плановую себестоимость во всех строках документа.
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
		КонецЕсли;

		// Устанавливаем режим видимости колонок и надписи.
		Колонки.ПлановаяСебестоимость.Видимость                         = Истина;
		Колонки.СуммаПлановойСебестоимости.Видимость                    = Истина;
		Колонки.СуммаОтклоненияОтСуммыПлановойСебестоимости.Видимость   = Истина;
		Колонки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Видимость = Истина;

		Надпись.Видимость	= Истина;
	Иначе

		// Устанавливаем режим видимости колонок и надписи.
		Колонки.ПлановаяСебестоимость.Видимость                         = Ложь;
		Колонки.СуммаПлановойСебестоимости.Видимость                    = Ложь;
		Колонки.СуммаОтклоненияОтСуммыПлановойСебестоимости.Видимость   = Ложь;
		Колонки.ПроцентОтклоненияОтСуммыПлановойСебестоимости.Видимость = Ложь;

		Надпись.Видимость	= Ложь;
	КонецЕсли;

КонецПроцедуры // ИзмененитьРежимИспользованияПлановойСебестоимости()

// Процедура формирует и выводит текст в информационной надписи об итоговом отклонение 
// от плановой себестоимости.
//
// Параметры:
//  ЭлементФормыНадписьОтклонение - элемент формы, содержащий надпись итогового отклонения;
//  ДокументОбъект                - ссылка на документ, из которого вызывается процедура.
//
Процедура СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементФормыНадписьОтклонение, ДокументОбъект) Экспорт

	Перем ПроцентОтклоненияОтПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда

		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	ИтоговоеОтклонение = Ценообразование.ПолучитьИтоговоеОтклонениеОтПлановойСебестоимости(ДокументОбъект, ПроцентОтклоненияОтПлановойСебестоимости);

	Если ИтоговоеОтклонение = Неопределено Тогда

		// Если итоговая отклонение неопределено, 
		// информация об отклонении не показываем.
		ЭлементФормыНадписьОтклонение.Заголовок = "";
	Иначе
		// Если итоговое отклонение определено, показываем.
		
		// В документах корректировки показываем сумму изменения отклонения, процент не указываем
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПоставщику") 
			 ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаЗаказаПокупателя") Тогда
			 
			ЭлементФормыНадписьОтклонение.Заголовок = "Изменение отклонения от плановой себестоимости: "
			                                          + ОбщегоНазначения.ФорматСумм(ИтоговоеОтклонение,
			                                                         ДокументОбъект.ВалютаДокумента, "0,00");
			
		Иначе // В остальных документах показываем сумму и процент отклонения от плановой себестоимости
			 
			ЭлементФормыНадписьОтклонение.Заголовок = "Отклонение от плановой себестоимости: "
			                                          + ОбщегоНазначения.ФорматСумм(ИтоговоеОтклонение,
			                                                         ДокументОбъект.ВалютаДокумента, "0,00");

			Если ПроцентОтклоненияОтПлановойСебестоимости <> Неопределено Тогда
				ЭлементФормыНадписьОтклонение.Заголовок = ЭлементФормыНадписьОтклонение.Заголовок
				                                          + " (" 
				                                          + ОбщегоНазначения.ФорматСумм(ПроцентОтклоненияОтПлановойСебестоимости, , 
				                                                         "0,00") + "%).";
			КонецЕсли;
		КонецЕсли;

		// Отрицательное отклонение выделяем красным цветом.
		Если ИтоговоеОтклонение < 0 Тогда
			ЭлементФормыНадписьОтклонение.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		Иначе
			ЭлементФормыНадписьОтклонение.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка .с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;

		Для каждого ЭлементСписка из СписокИстории Цикл
			Если ТипЗнч(ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение)) <> Тип("Строка") Тогда
				ЭлементСписка.Значение = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
				ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;

		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()

// Процедура по для переданной строке пути и строковому представлению //
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
//
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	Если СписокИстории.НайтиПоЗначению(Значение) <> Неопределено Тогда
		 СписокИстории.Удалить(СписокИстории.НайтиПоЗначению(Значение));
	КонецЕсли;

	СписокИстории.Вставить(0, Значение, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(СписокИстории.Получить(СписокИстории.Количество() - 1));
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если КолонкиТабПоля.Код.Видимость
	 ИЛИ КолонкиТабПоля.Артикул.Видимость Тогда

		Если КолонкиТабПоля.Код.Видимость Тогда
			Если Номенклатура <> Неопределено Тогда
				ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
			Иначе
				ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
			КонецЕсли;
		КонецЕсли;

		Если КолонкиТабПоля.Артикул.Видимость Тогда
			Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
			Иначе
				ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст("");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()

// Процедура добавляет информацию о сумме без скидок в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля      - коллекция колонок табличного поля,
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля,
//  Цена                - число, цена номенклатуры в строке,
//  Количество          - число, количество номенклатуры в строке.
//
Процедура ПоказатьСуммуБезСкидок(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Цена, Количество) Экспорт

	Если КолонкиТабПоля.СуммаБезСкидок.Видимость Тогда

		Сумма = ОбщегоНазначения.ФорматСумм(Цена * Количество);
		ЯчейкиСтрокиТабПоля.СуммаБезСкидок.УстановитьТекст(Сумма);

	КонецЕсли;

КонецПроцедуры // ПоказатьСуммуБезСкидок()

// Процедура добавляет информацию о коэффициенте мест в ячеки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  ЕдиницаИзмерения - СправочникСсылка.ЕдиницаИзмерения, единица измерения по которой надо коэффициент мест
//
Процедура ПоказатьКоэффициентМест(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, ЕдиницаИзмерения) Экспорт

	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Истина;
	Иначе
		ЯчейкиСтрокиТабПоля.КоличествоМест.ТолькоПросмотр = Ложь;

		Если КолонкиТабПоля.КоэффициентМест.Видимость Тогда
			Коэффициент = ЕдиницаИзмерения.Коэффициент;

			Если Коэффициент > 0 Тогда
				ЯчейкиСтрокиТабПоля.КоэффициентМест.УстановитьТекст(Формат(Коэффициент, "ЧЦ=10; ЧДЦ=3"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКоэффициентМест()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает видимость реквизитов в зависимости от типа учета
//
//		Параметры:
//
//
Процедура ВидимостьРеквизитовПоТипуУчета(ДокументОбъект, ФормаДокумента, Знач РеквизитыУпрУчета, Знач РеквизитыБухУчета, Знач РеквизитыНалУчета = "") Экспорт

	СтрРеквУпр = СтрЗаменить(РеквизитыУпрУчета, " ", "");
	СтрРеквУпр = СтрЗаменить(СтрРеквУпр, Символы.ПС,  "");
	СтрРеквУпр = СтрЗаменить(СтрРеквУпр, Символы.Таб, "");
	
	Пока Не ПустаяСтрока(СтрРеквУпр) Цикл
		
		Поз = Найти(СтрРеквУпр, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквУпр;
			СтрРеквУпр = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквУпр, Поз - 1);
			СтрРеквУпр = Сред(СтрРеквУпр, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВУправленческомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВУправленческомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрРеквБух = СтрЗаменить(РеквизитыБухУчета, " ", "");
	СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.ПС,  "");
	СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.Таб, "");
	Пока Не ПустаяСтрока(СтрРеквБух) Цикл
		
		Поз = Найти(СтрРеквБух, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквБух;
			СтрРеквБух = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквБух, Поз - 1);
			СтрРеквБух = Сред(СтрРеквБух, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВБухгалтерскомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрРеквНал = СтрЗаменить(РеквизитыНалУчета, " ", "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.ПС,  "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.Таб, "");
	Пока Не ПустаяСтрока(СтрРеквНал) Цикл
		
		Поз = Найти(СтрРеквНал, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквНал;
			СтрРеквНал = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквНал, Поз - 1);
			СтрРеквНал = Сред(СтрРеквНал, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;
		
		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВидимостьРеквизитовПоТипуУчета()

// Процедура - установка вида поступления/передачи
//
// Параметры:
//  ДокументОбъект - объект документа, для которого надо проверить вид поступления / вид передачи.
//  ФормаДокумента - форма документа, для которого надо проверить вид поступления / вид передачи.
//
Процедура ПроверитьВидПоступленияПередачи(ДокументОбъект, ФормаДокумента) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если НЕ ДокументОбъект.ОтражатьВУправленческомУчете Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента) Тогда
			Если ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента) Тогда
					ДокументОбъект.СкладОрдер = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.ТолькоПросмотр = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.КнопкаВыбора = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ВидПередачи", МетаданныеДокумента) Тогда
			Если ДокументОбъект.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
				ДокументОбъект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
			КонецЕсли;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.ТолькоПросмотр = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.КнопкаВыбора = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидПоступления", МетаданныеДокумента) Тогда
			ФормаДокумента.ЭлементыФормы.ВидПоступления.ТолькоПросмотр = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.КнопкаВыбора = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПоступления.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ВидПередачи", МетаданныеДокумента) Тогда
			ФормаДокумента.ЭлементыФормы.ВидПередачи.ТолькоПросмотр = Ложь;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.КнопкаВыбора = Истина;
			ФормаДокумента.ЭлементыФормы.ВидПередачи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьВидПоступленияПередачи()

// Процедура устанавливает видимость колонок суммы таб. части
//
Процедура УстановитьПараметрыКолонокСуммы( ФормаТабЧасть, УпрУчет, БухУчет) Экспорт
	
	ФормаТабЧасть.Колонки.Сумма    .Видимость = УпрУчет;
	ФормаТабЧасть.Колонки.СуммаРегл.Видимость = БухУчет;
	ФормаТабЧасть.Колонки.Сумма    .ИзменятьВидимость = Ложь;
	ФормаТабЧасть.Колонки.СуммаРегл.ИзменятьВидимость = Ложь;
	
	Если УпрУчет Тогда
		ФормаТабЧасть.Колонки.Цена.ТекстШапки = "Цена";
	ИначеЕсли БухУчет Тогда
		ФормаТабЧасть.Колонки.Цена.ТекстШапки = "Цена (регл.)";
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыКолонокСуммы()

// Функция устанавливает цены в колонке Цена в зависимости от типа учета
//
Процедура УстановитьЦеныПоТипуУчета(ТабЧасть, УпрУчет, Спрашивать = Истина) Экспорт
	
	ВалютаБух = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета");
	
	Если ВалютаУпр = ВалютаБух ИЛИ ТабЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Спрашивать Тогда
		Если УпрУчет Тогда
			ТекстВопроса = "Пересчитать цены в валюту управленческого учета?"
		Иначе
			ТекстВопроса = "Пересчитать цены в валюту регламентированного учета?"
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		Если СтрокаТЧ.Количество = 0 Тогда
			СтрокаТЧ.Цена = 0;
		Иначе
			Если УпрУчет Тогда
				СтрокаТЧ.Цена = СтрокаТЧ.Сумма / СтрокаТЧ.Количество;
			Иначе
				СтрокаТЧ.Цена = СтрокаТЧ.СуммаРегл / СтрокаТЧ.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры // УстановитьЦеныПоТипуУчета()

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  Форма - Форма, в которой производится выбор
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год 4-мя цифрами или 2-мя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремяДня(Форма, ДатаВремен, ТекЭлемент, Пользователь, ПоГрафику = Истина, ПолныйГод = Истина) Экспорт

	ДлинаЧаса = 3600;
	
	Если ПоГрафику Тогда
		СтруктураРабочегоВремени = УправлениеКонтактами.ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		НачалоРабочегоДняКонстанта    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДняКонстанта = СтруктураРабочегоВремени.ДатаОкончания;
	Иначе
		НачалоРабочегоДняКонстанта      = '00010101000000';
		ОкончаниеРабочегоДняКонстанта   = '00010101235959';
	КонецЕсли;
		
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ДатаВремен) + Час(НачалоРабочегоДняКонстанта) * ДлинаЧаса + Минута(НачалоРабочегоДняКонстанта)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ДатаВремен) + Час(ОкончаниеРабочегоДняКонстанта) * ДлинаЧаса + Минута(ОкончаниеРабочегоДняКонстанта)*60) - ДлинаЧаса;

	а = 0;
	ВремяСписка = НачалоРабочегоДня; 
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		ВремяСписка = НачалоРабочегоДня + а * ДлинаЧаса / 2; // по полчаса
		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг" + ?(ПолныйГод,"гг","") + " ЧЧ:мм'"));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

 // Процедура открывает форму новой серии, подчиненую ячейке табличного поля.
// Используется в документах прихода товаров.
// 
// Параметры:
//   Элемент       - элемент формы (ячейка табличного поля), которой будет подчинена открываемая форма
//   ТекущиеДанные - данные текущей строки табличного поля
//   НомерГТД      - номер ГТД, если он уже известен (документ "ГТД по импорту")
//	
Процедура ОткрытьФормуСерии(Элемент, ТекущиеДанные, НомерГТД = Неопределено) Экспорт
	
	СерияНоменклатуры = ТекущиеДанные.СерияНоменклатуры;
	Если НЕ ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		СпрСерии         = Справочники.СерииНоменклатуры;
		ФормаНовойСерии = СпрСерии.ПолучитьФормуНовогоЭлемента(, Элемент);
		ФормаНовойСерии.ЭлементыФормы.Владелец.Значение  = ТекущиеДанные.Номенклатура;
		ФормаНовойСерии.ЭлементыФормы.НомерГТД.Значение  = НомерГТД;
		ФормаНовойСерии.Открыть();
	Иначе
		ФормаСерии = СерияНоменклатуры.ПолучитьФорму(, Элемент);
		ФормаСерии.ЭлементыФормы.Владелец.Значение  = ТекущиеДанные.Номенклатура;
		ФормаСерии.Открыть();
	КонецЕсли;
	
 КонецПроцедуры // ОткрытьФормуСерии()

// Процедура выводить форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры

// Процедура открывает форму обработки "Выгрузка данных в конфигурацию "Бухгалтерия предприятия", ред 1.6"
// для выгрузки в базовую версию.
Процедура ОткрытьФормуОбработкиВыгрузкаДанныхВ1СБухгалтерию81_16ВБазовуюВерсию() Экспорт
	
	ОбработкаОбъект = Обработки.ВыгрузкаДанныхВ1СБухгалтерию81_16.Создать();
	ОбработкаОбъект.БазоваяВерсия = Истина;
	ФормаОбработки = ОбработкаОбъект.ПолучитьФорму();
	ФормаОбработки.Открыть();
	
КонецПроцедуры

// Процедура открывает форму списка задач текущего пользователя
//
Процедура ОткрытьЗадачиТекущегоПользователя(ОтборПоОбъекту = Неопределено) Экспорт
	
	ФормаСпискаЗадач = Задачи.ЗадачиПользователя.ПолучитьФорму("РабочаяФормаСпискаЗадачПользователя", , "СписокЗадачОригинал");
	
	Если ОтборПоОбъекту <> Неопределено Тогда
		
		ФормаСпискаЗадач.Отбор.Объект.ВидСравнения       = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Объект.Использование      = Истина;
		ФормаСпискаЗадач.Отбор.Объект.Значение           = ОтборПоОбъекту;
		
	КонецЕсли;
	
	Если НЕ ФормаСпискаЗадач.Открыта() Тогда
		ФормаСпискаЗадач.Отбор.Исполнитель.ВидСравнения     = ВидСравнения.Равно;
		ФормаСпискаЗадач.Отбор.Исполнитель.Использование    = Истина;
		ФормаСпискаЗадач.Отбор.Исполнитель.Значение         = ПараметрыСеанса.ТекущийПользователь;
		ФормаСпискаЗадач.Открыть();
	Иначе
		ФормаСпискаЗадач.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму списка задач текущего пользователя
// используется для открытия из меню интерфейсов
//
Процедура ОткрытьСписокЗадач() Экспорт
	
	ОткрытьЗадачиТекущегоПользователя();
	
КонецПроцедуры

// Процедура проверяет задачи текущего пользователя связанные с заданным объектом
//
Процедура ПроверитьЗадачиПоОбъекту(ОбъектЗадачи) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю(
		|		&ТекПользователь,
		|		Выполнена = ЛОЖЬ И Объект = &ОбъектЗадачи)
		|";
		
	Запрос.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ОбъектЗадачи"   , ОбъектЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выполнение = Вопрос("Обнаружены незавершенные задачи по заданному объекту!" + Символы.ПС + " Желаете просмотреть список этих задач вместо создания новой?", РежимДиалогаВопрос.ДаНет, 0);
		Если Выполнение = КодВозвратаДиалога.Да Тогда
			
			ОткрытьЗадачиТекущегоПользователя(ОбъектЗадачи);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	НоваяЗадача.Объект       = ОбъектЗадачи;
	НоваяЗадача.Наименование = "Напоминание по объекту: " + ОбъектЗадачи.Метаданные().Синоним;
	НоваяЗадача.Оповещение   = Истина;
	ФормаНовой = НоваяЗадача.ПолучитьФорму();
	ФормаНовой.Открыть();
	
КонецПроцедуры


// Процедура выполняет стандартные действия при начале выбора документа расчетов с контрагентом в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента по сделке;
//  Сделка                - ссылка на документ, определяет собственно сделку;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  СтрокаВидаДвижения    - строка, "Приход" или "Расход", определяет какие документы могут выступать
//                          в качестве расчетных: если документ выполняет расход по регистру то берем те,
//                          которые выполняют приход, и наоборот.
//
Процедура НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ФормаДокумента, ЭлементФормы, ДоговорКонтрагента, Сделка,
	                          СтандартнаяОбработка, СтрокаВидаДвижения) Экспорт

	// Тип выбираемого значения зависит от договора.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбран договор контрагента!");
		ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

	Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

		// Заполним возможный список типов документов, которые могут быть расчетными.
		СписокТипов = Новый СписокЗначений;
		Если СтрокаВидаДвижения = "Приход" Тогда

			// Заполним список документов, которые могут делать расход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,               Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Имя, 	   Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Представление());
				
				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,               Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				КонецЕсли;
				
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,                  Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,                   Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,                  Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Имя, 
				                                                                                           Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Имя,     Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Представление());
				
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Имя, 	   Метаданные.Документы["ОплатаОтПокупателяПлатежнойКартой"].Представление());
				
			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,               Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,       Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                       Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомитентуОПродажах"].Имя,                  Метаданные.Документы["ОтчетКомитентуОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеДопРасходов"].Имя,                   Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,                  Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Имя, 
				                                                                                           Метаданные.Документы["ПоступлениеТоваровУслугВНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Имя,     Метаданные.Документы["ОтражениеПоступленияТоваровИУслугНДС"].Представление());
				
				СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,                   Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,               Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,                     Метаданные.Документы["АккредитивПолученный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,            Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,          Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерПоступлениеДенежныхСредств"].Представление());

			КонецЕсли;
		Иначе

			// Заполним список документов, которые могут делать приход по регистру.
			// Список документов зависит от вида договора
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,            Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,                Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Имя,   Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			      Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                        Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,              Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Имя, 
				                                                                                        Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					СписокТипов.Добавить(Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,               Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
				КонецЕсли;
			Иначе // Прочее

				СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,                        Метаданные.Документы["АвансовыйОтчет"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,              Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Имя, 
				                                                                                        Метаданные.Документы["ВозвратТоваровПоставщикуИзНТТ"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Имя,    Метаданные.Документы["КорректировкаДолгаПоВозвратнойТаре"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["КорректировкаДолга"].Имя,                    Метаданные.Документы["КорректировкаДолга"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтчетКомиссионераОПродажах"].Имя,            Метаданные.Документы["ОтчетКомиссионераОПродажах"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,                Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["РеализацияТоваровУслуг"].Имя,                Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Имя,   Метаданные.Документы["ОтражениеРеализацииТоваровИУслугНДС"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПередачаОС"].Имя,                            Метаданные.Документы["ПередачаОС"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,           Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["АккредитивПереданный"].Имя,                  Метаданные.Документы["АккредитивПереданный"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Имя,         Метаданные.Документы["ИнкассовоеПоручениеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеПолученное"].Имя,         Метаданные.Документы["ПлатежноеТребованиеПолученное"].Представление());
				СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя, Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Представление());

			КонецЕсли;
		КонецЕсли;
		СписокТипов.Добавить(Метаданные.Документы["ДокументРасчетовСКонтрагентом"].Имя,                 Метаданные.Документы["ДокументРасчетовСКонтрагентом"].Представление());
		
		// Пользователь выбирает тип расчетного документа
		
		СписокТипов.СортироватьПоПредставлению();
		
		Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		
			ИмяНачальногоТипа = ЭлементФормы.Значение.Метаданные().Имя;
			НачальноеЗначение = СписокТипов.НайтиПоЗначению(ИмяНачальногоТипа);
			
		Иначе
			
			НачальноеЗначение = Неопределено;
			
		КонецЕсли;
		
		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы, НачальноеЗначение);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаРасчетов = ВыбранныйЭлемент.Значение;

	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли; 

	Если ТипДокументаРасчетов = "ДокументРасчетовСКонтрагентом" Тогда
		
		СтруктураОтбора = Новый Структура;
		
		СтруктураОтбора.Вставить("Дата",               ДокументОбъект.Дата);
		СтруктураОтбора.Вставить("Контрагент",         ДоговорКонтрагента.Владелец);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Организация",        ДоговорКонтрагента.Организация);
		СтруктураОтбора.Вставить("КонецПериода",       ДокументОбъект.Дата);
		СтруктураОтбора.Вставить("ЭтоНовыйДокумент",   ДокументОбъект.ЭтоНовый());
		ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");
		
 		СтандартнаяОбработка = Ложь;

		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураОтбора, ЭлементФормы, ОграничениеТипа);
		
		Возврат;
		
	Иначе
		// В качестве владельца формы выбора устанавливаем данный элемент,
		// чтобы выбранное значение было присвоено стандартно.
		ФормаВыбора = Документы[ТипДокументаРасчетов].ПолучитьФормуВыбора(,ЭлементФормы,);
	
		// Отфильтруем список документов по договору.
		ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Установить(ДоговорКонтрагента);
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом()

// Процедура выполняет стандартные действия при начале выбора приходного ордера в формах документов.
//
// Параметры:
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  Организация			- организация, по которой необходимо установить отбор
//	ВидОперации 		- вид операции, по которой необходимо установить отбор
Процедура НачалоВыбораПриходногоОрдера(ЭлементФормы, СтандартнаяОбработка, Организация, ВидОперации) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,ЭлементФормы,);
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение      = ВидОперации;
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
	КонецЕсли;
	
	// Надо отфильтровать список по организации
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.Отбор.Организация.Значение      = Организация;
		ФормаВыбора.Отбор.Организация.Использование = Истина;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры //НачалоВыбораПриходногоОрдера

// Процедура заполняет надписи на закладке "Документы расчетов с контрагентами"
//
// Параметры:
// ДокументОбъект - документ, форма которого заполняется
// ФормаДокумента - заполняемая форма
//
Процедура ЗаполнитьНадписиРасчетовСКонтрагентом(ДокументОбъект, ФормаДокумента, ВалютаРегламентированногоУчета, СуммаВзаиморасчетовПоДокументу)Экспорт

	СтруктураВзаиморасчетовПоДокументу = УправлениеВзаиморасчетами.ПолучитьСтруктуруВзаиморасчетовПоДокументу(ДокументОбъект, СуммаВзаиморасчетовПоДокументу);

	Если НЕ ЗначениеЗаполнено(СтруктураВзаиморасчетовПоДокументу.ПоДокументуВал) Тогда
		ФормаДокумента.ЭлементыФормы.ПоДокументуВал.Значение  = "";
	Иначе
		ФормаДокумента.ЭлементыФормы.ПоДокументуВал.Значение  = ОбщегоНазначения.ФорматСумм(СтруктураВзаиморасчетовПоДокументу.ПоДокументуВал) + " " + СокрЛП(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураВзаиморасчетовПоДокументу.ПредоплатаВал) Тогда
		ФормаДокумента.ЭлементыФормы.ПредоплатаВал.Значение   = "";
	Иначе
		ФормаДокумента.ЭлементыФормы.ПредоплатаВал.Значение   = ОбщегоНазначения.ФорматСумм(СтруктураВзаиморасчетовПоДокументу.ПредоплатаВал)  + " " + СокрЛП(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураВзаиморасчетовПоДокументу.ОстатокВал) Тогда
		ФормаДокумента.ЭлементыФормы.ОстатокВал.Значение      = "";
	Иначе
		ФормаДокумента.ЭлементыФормы.ОстатокВал.Значение      = ОбщегоНазначения.ФорматСумм(СтруктураВзаиморасчетовПоДокументу.ОстатокВал)     + " " + СокрЛП(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураВзаиморасчетовПоДокументу.ПоДокументуРегл) Тогда
		ФормаДокумента.ЭлементыФормы.ПоДокументуРегл.Значение = "";
	Иначе
		ФормаДокумента.ЭлементыФормы.ПоДокументуРегл.Значение = ОбщегоНазначения.ФорматСумм(СтруктураВзаиморасчетовПоДокументу.ПоДокументуРегл) + " " + СокрЛП(ВалютаРегламентированногоУчета);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураВзаиморасчетовПоДокументу.ПредоплатаРегл) Тогда
		ФормаДокумента.ЭлементыФормы.ПредоплатаРегл.Значение  = "";
	Иначе
		ФормаДокумента.ЭлементыФормы.ПредоплатаРегл.Значение  = ОбщегоНазначения.ФорматСумм(СтруктураВзаиморасчетовПоДокументу.ПредоплатаРегл)  + " " + СокрЛП(ВалютаРегламентированногоУчета);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураВзаиморасчетовПоДокументу.ОстатокРегл) Тогда
		ФормаДокумента.ЭлементыФормы.ОстатокРегл.Значение     = "";
	Иначе
		ФормаДокумента.ЭлементыФормы.ОстатокРегл.Значение     = ОбщегоНазначения.ФорматСумм(СтруктураВзаиморасчетовПоДокументу.ОстатокРегл)     + " " + СокрЛП(ВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры

// Функция открывает окно выбора склада из документа основания, в случае когда
// при вводе на основании в документе-основании склад есть в таб.части, а в вводимом документе - склад в шапке
// т.е. из списка складов надо выбрать только один склад.
//
Функция ВыбратьСкладИзДокументаОснования(ДокОснование, СтруктПараметры, ВернутьВсеСклады = Ложь) Экспорт

	// Выберем список складов
	ТекстЗапроса = "";
	МетаДок = ДокОснование.Метаданные();
	Для Каждого ТабЧасть Из СтруктПараметры.ТабЧасти Цикл
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			    |
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	" + ТабЧасть.Значение + " КАК Склад,
			|	" + ТабЧасть.Значение + ".Представление КАК СкладПредставление
			|ИЗ
			|	Документ." + МетаДок.Имя + "." + ТабЧасть.Ключ + " КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка = &ДокСсылка
			|   И ДокОснование." + ТабЧасть.Значение + " ССЫЛКА Справочник.Склады
			|   И ДокОснование." + ТабЧасть.Значение + " <> &ПустСклад";
	КонецЦикла;	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Склад КАК Склад,
		|	СкладПредставление КАК СкладПредставление
		|ИЗ
		|	(" + ТекстЗапроса + ") КАК Док
		|
		|УПОРЯДОЧИТЬ ПО
		|	СкладПредставление";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокСсылка", ДокОснование.Ссылка);
	Запрос.УстановитьПараметр("ПустСклад", Справочники.Склады.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокСкладов = Новый СписокЗначений;
	
	ВсеСклады = Ложь;
	Если СтруктПараметры.Свойство("ВсеСклады", ВсеСклады) Тогда
		Если ВсеСклады Тогда
			СписокСкладов.Добавить("ВсеСклады", "<Все склады>");
		КонецЕсли;
	КонецЕсли;
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		СписокСкладов.Добавить(Обход.Склад, Обход.СкладПредставление);
	КонецЦикла;

	Если ВернутьВсеСклады Тогда
		Возврат СписокСкладов;
	КонецЕсли;

	// Один склад, нечего спрашивать.
	Если СписокСкладов.Количество() = 1 Тогда
		Возврат СписокСкладов[0].Значение;
	КонецЕсли;
	
	СтруктПараметрыФормы = Новый Структура;
	СтруктПараметрыФормы.Вставить("СписокСкладов", СписокСкладов);
	СтруктПараметрыФормы.Вставить("НачЗначение",   ДокОснование[СтруктПараметры.ИмяСкладаВШапке]);
	
	ФормаВыбораСклада = ПолучитьОбщуюФорму("ФормаВыбораСклада");
	ФормаВыбораСклада.НачальноеЗначениеВыбора = СтруктПараметрыФормы;
	ВыбрСклад = ФормаВыбораСклада.ОткрытьМодально();
	
	Возврат ВыбрСклад;
	
КонецФункции // ВыбратьСкладИзДокументаОснования()

// Процедура открывает из документов форму обработки "Печать раскладки номенклатуры по местам хранения".
//
// Параметры:
//  ДокументОбъект - Объект документа, из которого вызвана процедура.
//
Процедура ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ДокументОбъект) Экспорт

	Если ПроверитьМодифицированность(ДокументОбъект) Тогда
		Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().ОткрытьФормуНастройкиИзДокумента(ДокументОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуНастройкиБланкаТоварногоНаполнения()



// Процедура осуществляет открытие формы проверки серийных номеров.
//
// Параметры:
//  Форма                 - <Форма>
//                        - Форма документа, используемая в качестве владельца
//                          открываемой формы проверки.
//
//  ДокументОбъект        - <ДокументОбъект.*>
//                        - Проверяемый документ.
//
//  ПараметрыСвязиСтрокТЧ - <Соответствие>
//                        - Параметры связи строк табличных частей документа.
//
//  ИмяТЧ                 - <Строка>
//                        - Имя проверяемой табличной части.
//
Процедура ОткрытьФормуПроверкиШтрихкодов(Форма, ДокументОбъект, ПараметрыСвязиСтрокТЧ, ИмяТЧ = "Товары") Экспорт

	ФормаОбработки = Обработки.ПроверкаШтрихкодов.ПолучитьФорму(, Форма);
	Если ФормаОбработки.Открыта() Тогда
		ФормаОбработки.Активизировать();
	Иначе
		ФормаОбработки.мПараметрыСвязиСтрокТЧ = ПараметрыСвязиСтрокТЧ;
		ФормаОбработки.ЗаполнитьТаблицу(ДокументОбъект, ИмяТЧ);
		ФормаОбработки.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуПроверкиШтрихкодов()

// Процедура устанавливает доступность меню "Проверить"
// командной панели "КоманднаяПанельТовары".
//
// Параметры:
//  Форма - Форма документа, в из которого вызвана процедура.
//
Процедура УстановитьДоступностьМенюПроверить(Форма) Экспорт

	КнопкиКоманднойПанели = Форма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки;
	КнопкаПроверить = КнопкиКоманднойПанели.Проверить;

	Если ПолучитьСерверТО().ПолучитьСписокУстройств(
	   Перечисления.ВидыТорговогоОборудования.СканерШтрихКода).Количество() = 0
	   И ПолучитьСерверТО().ПолучитьСписокУстройств(
	   Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных).Количество() = 0 Тогда
		КнопкаПроверить.Кнопки.Удалить(КнопкаПроверить.Кнопки.ШтрихКоды);
	КонецЕсли;

	Если КнопкаПроверить.Кнопки.Количество() = 0 Тогда
		КнопкиКоманднойПанели.Удалить(КнопкаПроверить);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Процедура устанавливает доступность кнопки "ОплатитьКартой".
//
// Параметры:
//  КнопкиКоманднойПанели - Кнопки, среди которых содержится кнопка "ОплатитьКартой".
//
Процедура УстановитьДоступностьКнопкиОплатитьКартой(КнопкиКоманднойПанели) Экспорт

	Если ПолучитьСерверТО().ПолучитьСписокУстройств(
	   Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема).Количество() = 0 Тогда
		КнопкиКоманднойПанели.Удалить(КнопкиКоманднойПанели.ОплатитьКартой);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Процедура устанавливает доступность кнопки "СерийныеНомера".
//
// Параметры:
//  КнопкиКоманднойПанели - Кнопки, среди которых содержится кнопка "СерийныеНомера".
//
Процедура УстановитьДоступностьКнопкиСерийныеНомера(КнопкиКоманднойПанели) Экспорт

	Если НЕ Константы.ИспользоватьСерийныеНомера.Получить() Тогда
		КнопкиКоманднойПанели.Удалить(КнопкиКоманднойПанели.СерийныеНомера);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиСерийныеНомера()

// Функция выполняет проверку
//
// Параметры:
//  КачествоМожетБытьТолькоНовым - булево. Флаг определяет, что качество может быть только новым.
//
// Возвращаемое значение:
//  Булево - Истина, если качество не удовлетворяет переданным условиям подбора.
//
Функция ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(СтруктураПодбора, КачествоМожетБытьТолькоНовым) Экспорт

	Перем Качество;

	Если КачествоМожетБытьТолькоНовым Тогда
		СтруктураПодбора.Свойство("Качество", Качество);

		Если Качество = Неопределено Тогда
			Результат = Ложь;
		ИначеЕсли Качество = Справочники.Качество.Новый Тогда
			Результат = Ложь;
		Иначе
			Предупреждение("В данном контексте нельзя подбирать товары с качеством """ + СокрЛП(Качество) + """!");
			Результат = Истина;
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора()

// Процедура устанавливает доступность кнопки "ЗаполнитьИзТерминалаСбораДанных"
// в подменю "Заполнить" командной панели "КоманднаяПанельТовары".
//
// Параметры:
//  Форма - Форма документа, в из которого вызвана процедура.
//  Терминалы - массив доступных терминалов сбора данных.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(Форма, Терминалы) Экспорт

	КнопкиКоманднойПанели = Форма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки;
	КнопкаЗаполнить = КнопкиКоманднойПанели.ПодменюЗаполнить;

	Если Терминалы.Количество() = 0 Тогда
		КнопкаЗаполнить.Кнопки.Удалить(КнопкаЗаполнить.Кнопки.ИзТерминалаСбораДанных);
	КонецЕсли;

	Если КнопкаЗаполнить.Кнопки.Количество() = 0 Тогда
		КнопкиКоманднойПанели.Удалить(КнопкаЗаполнить);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных()

// Процедура управляет доступностью признаков отражения в БУ и НУ в документах в зависимости от реквизита организации 
// ОтражатьВРегламентированномУчете. Также процедура может изменять значения реквизитов ОтражатьВБУ и ОтражатьВНУ
// Может вызываться из обработчиков формы ПриОткрытии, ОрганизацияПриИзменении
//
//Параметры:
//  Объект                  - Документ-объект
//  Форма                   - форма документа
//  ИмяОтражатьВБУ          - имя элемента формы, связанного с реквизитом ОтражатьВБУ
//  ИмяОтражатьВНУ          - имя элемента формы, связанного с реквизитом ОтражатьВНУ
//  мОтражатьВРегламентированномУчете - переменная формы, передается в процедуру для изменения.
//   далее может использоваться в логике формы в индивидуальном порядке для каждого документа.
Процедура ОбработатьПризнакОтраженияВреглУчетеДляФормы(Объект, Форма,ИмяОтражатьВБУ = "ОтражатьВБухгалтерскомУчете",ИмяОтражатьВНУ = "ОтражатьВНалоговомУчете",мОтражатьВРегламентированномУчете) Экспорт

	Форма.ЭлементыФормы[ИмяОтражатьВБУ].Доступность = мОтражатьВРегламентированномУчете;
	//такого элемента на форме может и не быть
	Если ИмяОтражатьВНУ<>"" Тогда
		Форма.ЭлементыФормы[ИмяОтражатьВНУ].Доступность = Объект.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;

КонецПроцедуры // ОбработатьПризнакОтраженияВреглУчетеДляФормы()

// Процедура выполняет открытие общей формы "ФормаПараметрыЭлектронногоОбменаДокументами".
//
// Параметры:
//  ДокументОбъект - Объект документа, для которого открыта форма.
//
Процедура ОткрытьФормуПараметрыЭлектронногоОбменаДокументами(ДокументОбъект) Экспорт

	Форма = ПолучитьОбщуюФорму("ФормаПараметрыЭлектронногоОбменаДокументами");
	Форма.мДокументОбъект = ДокументОбъект;
	Форма.ОткрытьМодально();

КонецПроцедуры // ОткрытьФормуПараметрыЭлектронногоОбменаДокументами()

// Процедура устанавливает доступность кнопки "ПолучитьВес" в переданной командной панели.
//
// Параметры:
//  КнопкиКоманднойПанели - кнопки командная панель, в которой необходимо установить доступнойть кнопки.
//  Весы - массив доступных электронных весов.
//
Процедура УстановитьДоступностьКнопкиПолучитьВес(КнопкиКоманднойПанели, Весы) Экспорт

	Если Весы.Количество() = 0 Тогда
		КнопкиКоманднойПанели.Удалить(КнопкиКоманднойПанели.ПолучитьВес);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиПолучитьВес()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, МетаданныеДокумента, ФормаПодбора = Неопределено) Экспорт

	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл

		ИмяРеквизита = ЭлементСтруктурыПараметров.Ключ;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда

			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);

		Иначе
			Если ИмяРеквизита = "Склад" Тогда

				ИмяРеквизита = "СкладОрдер";
				Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда
					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;
				КонецЕсли;

				ИмяРеквизита = "СкладОтправитель";
				Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда
					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;
				КонецЕсли;

				ИмяРеквизита = "СкладГруппа";
				Если ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Тогда
					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, "ОбновитьФормуПодбора", Ложь);
					Продолжить;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();

КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект     - объект документа, в котором производится подбор.
//  ФормаДокумента     - форма документа, в который осуществляется подбор,
//  ПолноеИмяРеквизита - полное имя реквизита, который изменился.
//
Процедура ОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаДокумента, ПолноеИмяРеквизита) Экспорт

	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);

	Если ФормаПодбора.Открыта() Тогда

		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");
		ИмяКлюча     = ?(ИмяРеквизита = "СкладОрдер" ИЛИ ИмяРеквизита = "СкладОтправитель" ИЛИ ИмяРеквизита = "СкладГруппа", "Склад", ИмяРеквизита);

		Если ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяКлюча) Тогда

			ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяКлюча, ДокументОбъект[ИмяРеквизита]);
			СтруктураЗапроса = ФормаПодбора.ЭлементыФормы.СписокВидовПодбора.Значение;
			Родитель         = ФормаПодбора.ПолучитьТекущегоРодителя();

			ФормаПодбора.ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса);
			ФормаПодбора.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
			Если СтруктураЗапроса = Неопределено Тогда
				ФормаПодбора.ЭлементыФормы.СправочникНоменклатура.Значение.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыИФормуПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕТАСКИВАНИЕМ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА

// Функция выполняет проверку перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//
// Возвращаемое значение: 
//  Флаг проверки.
//
Функция ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Экспорт

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Возврат ПараметрыПеретаскивания.Значение.Свойство("ИзПодбора");
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруЗначенийПеретаскивания()

// Процедура проверки перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//  ДокументСсылка          - ссылка на документ.
//  ИмяТЧ                   - имя табличной части.
//
Процедура ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ДокументСсылка, ИмяТЧ) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ДокументСсылка = ПараметрыПеретаскивания.Значение.Владелец
	   И ИмяТЧ = ПараметрыПеретаскивания.Значение.ИмяТЧ Тогда

		Если (ИмяТЧ =  "Услуги" И НЕ ПараметрыПеретаскивания.Значение.Номенклатура.Услуга)
		 ИЛИ (ИмяТЧ <> "Услуги" И ПараметрыПеретаскивания.Значение.Номенклатура.Услуга И НЕ ПараметрыПеретаскивания.Значение.ПодбиратьУслуги) Тогда
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // ПроверкаПеретаскиванияИзПодбора()

// Процедура подтверждающая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//
Процедура ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;

КонецПроцедуры // ПеретаскиваниеИзПодбора()

// Процедура отменяющая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - cтандартная обработка.
//
Процедура ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;

КонецПроцедуры // ПеретаскиваниеОтменить()

// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИмяСтраницы, Панель) Экспорт
	
	Для Каждого Страница Из Панель.Страницы Цикл
		Если НЕ Страница.Имя=ИмяСтраницы Тогда
			Страница.Видимость=Ложь;
		Иначе
			Страница.Видимость=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Панель.ТекущаяСтраница=Панель.Страницы[ИмяСтраницы];
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ ВЫПАДАЮЩИХ СПИСКОВ ПОСЛЕДНИХ 10 ЗНАЧЕНИЙ

// Процедура восстанавливает список 10 последних выпавших значений элемента
Процедура ВосстановитьСписокЗначенийУнивер(СписокЗначений, ИмяПараметраДляСохранения = "", СписокЭлементаВизуализации) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений.Очистить();
	
	ВосстановленноеЗначение = ВосстановитьЗначение(ИмяПараметраДляСохранения);
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
		СписокЗначений = ВосстановленноеЗначение;
		СписокЭлементаВизуализации = СписокЗначений.Скопировать();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет в список последних 10-ти значений элементов
// Параметры :
//		СписокСохраняемыхЗначений - список значений куда нужно поместить очередной элемент
//      ИмяПараметраДляСохранения - под каким именем сохранить значение (если пустая - то ничего не сохраняем)
//      ЭлементСписка			  - выбранный элемент списка
Процедура ДобавитьВСписокЗначенийУнивер(СписокСохраняемыхЗначений, ИмяПараметраДляСохранения = "", ЭлементСписка, 
	Знач ЗначениеПоиска = "") Экспорт

	Если ПустаяСтрока(ЗначениеПоиска) Тогда
		ДобавляемоеЗначение = ЭлементСписка.Значение;
	Иначе
		ДобавляемоеЗначение = ЗначениеПоиска;
    КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ДобавляемоеЗначение);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ДобавляемоеЗначение);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
		СохранитьЗначение(ИмяПараметраДляСохранения, СписокСохраняемыхЗначений.Скопировать());
	КонецЕсли;
	
	ЭлементСписка.СписокВыбора = СписокСохраняемыхЗначений.Скопировать();

КонецПроцедуры

// Процедура изменяет значение склада в табличных частях документа при изменении склада в шапке.
// Изменяются только те значения в таб.частях, которые совпадают со старым значением склада.
//
//		Параметры:
//			- ДокОбъект    - Обрабатываемый документ
//			- НовыйСклад   - Новое значение склада
//			- ТекСклад     - Текущее (старое) значение склада
//			- СтрТабЧасти  - Строка, с именами таб. частей в которых делается замена. Имя таб.частей разделены ",".
//			- ИмяРеквСклад - Имя реквизита склад в таб. частях.
//
Процедура ИзменитьЗначениеСкладаВТабЧастях(ДокОбъект, НовыйСклад, ТекЗначСклад, СтрТабЧасти, ИмяРеквСклад = "Склад") Экспорт

	ТекСклад     = ТекЗначСклад;
	ТекЗначСклад = НовыйСклад; // Обновим значение склада, в форме документа, из которого был вызов
	ОбъектыПредупреждения = Новый Соответствие();
	ОбъектыПредупреждения.Вставить(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"), Новый Структура("СовпадающиеРазличные, СовпадающиеНеРазличные, НеСовпадающиеРазличные, НеСовпадающиеПустые", "Приходные ордера", "документа", "приходного ордера", "приходного ордера"));
	ОбъектыПредупреждения.Вставить(Тип("СправочникСсылка.Склады"), Новый Структура("СовпадающиеРазличные, СовпадающиеНеРазличные, НеСовпадающиеРазличные, НеСовпадающиеПустые", "Склады", "склада", "склада", "склада"));

	Если НовыйСклад = ТекСклад Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовыйСклад) Тогда // Старые склады в таб.частях не очищаем - оставляем без изменений.
		Возврат;
	КонецЕсли;

	СтруктТабЧастей       = Новый Структура(СтрТабЧасти);
	МассивУдалитьТабЧасть = Новый Массив;

	// В зависимости от значений указанных флагов будем формировать текст вопроса
	// пользователю и формировать логику замены значений
	ЕстьРазличныеЗнач     = Ложь; // В табличной части есть непустые значения несовпадающие с пред. значением склада из шапки
	ЕстьСовпадающЗнач     = Ложь; // В табличной части есть непустые значения совпадающие с пред. значением склада из шапки
	ЕстьПустыеЗнач        = Ложь; // В табличной части есть пустые значения склада

	Для Каждого ТабЧасть Из СтруктТабЧастей Цикл

		// 1. Проверка на заполненность таб.части
		Если ДокОбъект[ТабЧасть.Ключ].Количество() = 0 Тогда
			МассивУдалитьТабЧасть.Добавить(ТабЧасть.Ключ);
			Продолжить;
		КонецЕсли;

		// 2. Проверить наличие "кандидатов" на замену.
		//    Если таковых в данной таб. части нет - можно её исключить из дальнейшей обработки
		ЕстьРазличныеЗначТЧ   = Ложь; // В табличной части есть непустые значения несовпадающие с пред. значением склада из шапки
		ЕстьСовпадающЗначТЧ   = Ложь; // В табличной части есть непустые значения совпадающие с пред. значением склада из шапки
		ЕстьПустыеЗначТЧ      = Ложь; // В табличной части есть пустые значения склада
		ЕстьСовпадающиеНовСклад = Ложь; //В табличной части есть непустые значения совпадающие с настоящим значением склада из шапки
		ЕстьРазличныеНовСклад   = Ложь; //В табличной части есть непустые значения несовпадающие с настоящим значением склада из шапки
		Для Каждого СтрокаТЧ Из ДокОбъект[ТабЧасть.Ключ] Цикл

			ПустойСклад = НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад]);

			ЕстьПустыеЗначТЧ      = ЕстьПустыеЗначТЧ    ИЛИ ПустойСклад;
			ЕстьРазличныеЗначТЧ   = ЕстьРазличныеЗначТЧ ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] <> ТекСклад);
			ЕстьСовпадающЗначТЧ   = ЕстьСовпадающЗначТЧ ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] =  ТекСклад);

			ЕстьСовпадающиеНовСклад = ЕстьСовпадающиеНовСклад ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] =  НовыйСклад);
			ЕстьРазличныеНовСклад   = ЕстьРазличныеНовСклад   ИЛИ (НЕ ПустойСклад И СтрокаТЧ[ИмяРеквСклад] <> НовыйСклад);

		КонецЦикла;

		Если (НЕ ЕстьСовпадающЗначТЧ И НЕ ЕстьПустыеЗначТЧ И НЕ ЕстьРазличныеЗначТЧ) ИЛИ (ЕстьСовпадающиеНовСклад И НЕ ЕстьРазличныеНовСклад) Тогда
			МассивУдалитьТабЧасть.Добавить(ТабЧасть.Ключ);
		КонецЕсли;

		ЕстьПустыеЗнач    = ЕстьПустыеЗнач    ИЛИ ЕстьПустыеЗначТЧ;
		ЕстьРазличныеЗнач = ЕстьРазличныеЗнач ИЛИ ЕстьРазличныеЗначТЧ;
		ЕстьСовпадающЗнач = ЕстьСовпадающЗнач ИЛИ ЕстьСовпадающЗначТЧ;

	КонецЦикла;

	Для Каждого ТабЧастьИмя Из МассивУдалитьТабЧасть Цикл
		СтруктТабЧастей.Удалить(ТабЧастьИмя);
	КонецЦикла;

	Если СтруктТабЧастей.Количество() = 0 Тогда // Нет таб. частей для обработки
		Возврат;
	КонецЕсли;

	Если ЕстьСовпадающЗнач И ЕстьРазличныеЗнач Тогда
		ТекстВопроса = ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["СовпадающиеРазличные"] + ", которые отличаются от """ + ТекСклад + """, в табличной части изменены не будут, поскольку они были установлены вручную." + Символы.ПС +
					   "Заменить в табличных частях значение " + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["СовпадающиеНеРазличные"] + " """ + ТекСклад + """ на """ + НовыйСклад + """?";
	ИначеЕсли ЕстьСовпадающЗнач И НЕ ЕстьРазличныеЗнач Тогда
		ТекстВопроса = "Заменить в табличных частях значение " + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["СовпадающиеНеРазличные"] + " """ + ТекСклад + """ на """ + НовыйСклад + """?";
	ИначеЕсли (НЕ ЕстьСовпадающЗнач И ЕстьРазличныеЗнач) Тогда
		ТекстВопроса = "Заменить в табличных частях" + ?(ЕстьПустыеЗнач, ", не пустые значения, ", " значение ") + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["НеСовпадающиеРазличные"] + " на " + НовыйСклад + " ?";
	ИначеЕсли НЕ ЕстьСовпадающЗнач И ЕстьПустыеЗнач Тогда
		ТекстВопроса = "Заполнить пустые значения " + ОбъектыПредупреждения[ТипЗнч(ТекСклад)]["НеСовпадающиеПустые"] + " в табличных частях?";
	Иначе // ничего не делаем
		Возврат;
	КонецЕсли;

	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Новое значение склада (ордера)");
	Если Ответ = КодВозвратаДиалога.Да Тогда

		Для Каждого ТабЧасть Из СтруктТабЧастей Цикл
			Для Каждого СтрокаТЧ Из ДокОбъект[ТабЧасть.Ключ] Цикл
				Если (ЕстьСовпадающЗнач И СтрокаТЧ[ИмяРеквСклад] = ТекСклад)
						ИЛИ (НЕ ЕстьСовпадающЗнач И ЕстьРазличныеЗнач И ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад])) Тогда
					СтрокаТЧ[ИмяРеквСклад] = НовыйСклад;
				ИначеЕсли НЕ ЕстьСовпадающЗнач И ЕстьПустыеЗнач И НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад]) Тогда
					Если НЕ ЕстьСовпадающЗнач И ЕстьРазличныеЗнач И НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквСклад]) Тогда
						продолжить;
					Иначе
						СтрокаТЧ[ИмяРеквСклад] = НовыйСклад;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ИзменитьЗначениеСкладаВТабЧастях()

// Процедура открывает форму выбора справочника "Склады" с переданным отбором по виду склада.
//
// Параметры:
//  ЭлементФормы - элемент формы, в котором инициирован выбор.
//  ВидСклада - нужный вид склада.
//  СтандартнаяОбработка - Флаг стандартной обработки выбора. Здесь сбрасывается.
//
Процедура НачалоВыбораСклада(ЭлементФормы, ВидСклада, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Установить(ВидСклада);
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСклада()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ ОСТАТКОВ НОМЕНКЛАТУРЫ

// Процедура отмечает все элементы из списка
Процедура ОтметитьЭлементыСписка(Список, ФлагОтметки) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Список Цикл
		ЭлементСписка.Пометка = ФлагОтметки;	
	КонецЦикла;
	
КонецПроцедуры

// Процедура в нужном формате формирует суммы к выводу
Процедура ПриВыводеСуммОстатковНоменклатуры(ОформлениеСтроки, ДанныеСтроки, СписокПрефиксовИмен, ВВалютеЦены) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СписокПрефиксовИмен) ИЛИ (СписокПрефиксовИмен.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокПрефиксовИмен Цикл
		СтрокаПрефикса = Элемент.Значение;
		
		ТекстЦены = СокрЛП(Формат(ДанныеСтроки[СтрокаПрефикса + "Цена"], "ЧЦ=15; ЧДЦ=2"));
		
		Если ЗначениеЗаполнено(ТекстЦены) Тогда
			
			ЕдиницаЦены = СокрЛП(ДанныеСтроки[СтрокаПрефикса + "ЕдиницаЦены"]);
			Если ЗначениеЗаполнено(ЕдиницаЦены) Тогда
				ТекстЦены = ТекстЦены + ", " + ЕдиницаЦены;
			КонецЕсли; 
			
			ВалютаЦены = СокрЛП(ДанныеСтроки[СтрокаПрефикса + "ВалютаЦены"]);
			Если ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
				ТекстЦены = ТекстЦены + " (" + ВалютаЦены + ")";
			КонецЕсли; 
			
			ОформлениеСтроки.Ячейки[СтрокаПрефикса + "Цена"].Текст = ТекстЦены;
		
		КонецЕсли;
		
		Если НЕ ДанныеСтроки[СтрокаПрефикса + "ФлагЦены"] Тогда
			ОформлениеСтроки.Ячейки[СтрокаПрефикса + "Цена"].ЦветТекста = WebЦвета.Синий;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет тексты шапок колонок остатков (добавляет к ним единицы измерения)
Процедура ОбновитьШапкиКолонокОстатков(ТабПоле, ЕдиницаХранения) Экспорт
	
	СтрокаПредставленияЕдиницы = ?(НЕ ЗначениеЗаполнено(ЕдиницаХранения), "", (", " + СокрЛП(ЕдиницаХранения)));
			
	ТабПоле.Колонки.Общий.ТекстШапки              = "Общий"      + СтрокаПредставленияЕдиницы;
	ТабПоле.Колонки.Свободный.ТекстШапки          = "Свободный"  + СтрокаПредставленияЕдиницы;
	ТабПоле.Колонки.СвободныйОжидаемый.ТекстШапки = "Своб.ожид." + СтрокаПредставленияЕдиницы;
	ТабПоле.Колонки.ВРезерве.ТекстШапки           = "В резерве"  + СтрокаПредставленияЕдиницы;

КонецПроцедуры

// Процедура добавляет или удаляет колонки сумм по типам сумм для номенклатуры у табличного поля
Процедура ОбновитьКолонкиСуммТабПоле(ТабПоле, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, ОбновлятьШапкиКолонок = Истина, КоличествоБазовыхКолонок) Экспорт
	
	ВыводитьВУстановленнойВалюте = НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены);
	ПостфиксЦены = ?(ВыводитьВУстановленнойВалюте, " Цена, " + СокрЛП(ВалютаЦены), " Цена");
	
	НомерКолонкиВСписке = КоличествоБазовыхКолонок;
	Для Каждого Элемент Из СписокЦенОстатков Цикл
		
		Если Элемент.Пометка Тогда
			// а колонка уже есть - ничего делать не надо
			Колонка = ТабПоле.Колонки.Найти(Элемент.Префикс + "Цена");
							
			Если Колонка <> Неопределено Тогда
				
				// только позицию ее установим и все
				РеальнаяПозицияКолонки = ТабПоле.Колонки.Индекс(Колонка);
				Если РеальнаяПозицияКолонки <> НомерКолонкиВСписке Тогда
					ТабПоле.Колонки.Сдвинуть(Колонка, НомерКолонкиВСписке - РеальнаяПозицияКолонки);	
				КонецЕсли;
				
				Если ОбновлятьШапкиКолонок Тогда
					Колонка.ТекстШапки = Элемент.Наименование + ПостфиксЦены;
				КонецЕсли;
				
			Иначе	
	 		
				НоваяКолонка = ТабПоле.Колонки.Вставить(КоличествоБазовыхКолонок);
				НоваяКолонка.ИзменятьНастройку = Ложь;
				НоваяКолонка.ИзменятьВидимость = Ложь;
				НоваяКолонка.Имя = Элемент.Префикс + "Цена";
				НоваяКолонка.Данные = Элемент.Префикс + "Цена";
				НоваяКолонка.ТекстШапки = Элемент.Наименование + ПостфиксЦены;
			
			КонецЕсли;
			
			// очередной номер колонки в списке
			НомерКолонкиВСписке = НомерКолонкиВСписке + 1;
		Иначе
			Колонка = ТабПоле.Колонки.Найти(Элемент.Префикс + "Цена");
			Если Колонка <> Неопределено Тогда
				ТабПоле.Колонки.Удалить(Колонка);
			КонецЕсли;
     					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает порядок столбцов сумм такой же как порядок следования строк типов цен	
Процедура УстановитьПорядокКолонокСуммТабПоле(ТабПоле, СписокЦенОстатков, КоличествоБазовыхКолонок) Экспорт
	
	НомерКолонкиВСписке = КоличествоБазовыхКолонок;
	Для Каждого Элемент Из СписокЦенОстатков Цикл
		
		Если НЕ Элемент.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка = ТабПоле.Колонки.Найти(Элемент.Префикс + "Цена");
		Если Колонка = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// только позицию у колонки установим и все
		РеальнаяПозицияКолонки = ТабПоле.Колонки.Индекс(Колонка);
		Если РеальнаяПозицияКолонки <> НомерКолонкиВСписке Тогда
			ТабПоле.Колонки.Сдвинуть(Колонка, НомерКолонкиВСписке - РеальнаяПозицияКолонки);	
		КонецЕсли;
		
		// очередной номер колонки в списке
		НомерКолонкиВСписке = НомерКолонкиВСписке + 1;
	КонецЦикла;
		
КонецПроцедуры	

// Процедура перемещает строку типа цен либо вверх либо вниз
Процедура ПереместитьТипЦен(ТабПолеСписокЦен, ТабПолеОстаткиИЦены, СписокЦенОстатков, КоличествоБазовыхКолонок, ПереместитьВверх) Экспорт
	
	СтрокаТиповЦен = ТабПолеСписокЦен.ТекущиеДанные;
	Если СтрокаТиповЦен = Неопределено Тогда
		Возврат
	КонецЕсли;
	КоличествоТиповЦен = СписокЦенОстатков.Количество();
	ИндексСтроки = СписокЦенОстатков.Индекс(СтрокаТиповЦен);
	
	Если ПереместитьВверх Тогда
		
		Если ИндексСтроки <> 0 Тогда 
			// перемещаем строку на 1 позицию вверх
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, -1);
		Иначе
			// перемещаем в самый низ
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, КоличествоТиповЦен - 1);
		КонецЕсли;
	
	Иначе
		
		Если ИндексСтроки <> КоличествоТиповЦен - 1 Тогда 
			// перемещаем строку на 1 позицию вниз
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, 1);
		Иначе
			// перемещаем в самый верх
			СписокЦенОстатков.Сдвинуть(СтрокаТиповЦен, - КоличествоТиповЦен + 1);
		КонецЕсли;
	
	КонецЕсли;
	
	// если тип цен выводится - то надо колонки поменять в соответвии с порядком следования типов цен
	Если СтрокаТиповЦен.Пометка Тогда
		// Осталось только позиции колонок в гриде установить нужные
		УстановитьПорядокКолонокСуммТабПоле(ТабПолеОстаткиИЦены, СписокЦенОстатков, КоличествоБазовыхКолонок);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает событие Выбор табличного поля остатков товаров на складах.
//
Процедура ОбработатьВыборТаблицаОстатков(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ТекущаяНоменклатура) Экспорт

	Если Колонка.Имя = "СвободныйОжидаемый"
	   И ЗначениеЗаполнено(ВыбраннаяСтрока.СвободныйОжидаемый)
	   И ВыбраннаяСтрока.Родитель = Неопределено Тогда
	
		Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
		
		СтруктураНостроек = Новый Структура;
		СтруктураНостроек.Вставить("ИмяРегистра", "ЗаказыПоставщикам");
		СтруктураНостроек.Вставить("ДатаКон", ТекущаяДата());
		
		СоответствиеОтбора = Новый Соответствие;
		СоответствиеОтбора.Вставить("Номенклатура", ТекущаяНоменклатура);
		СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.ХарактеристикаСклад);
		СтруктураНостроек.Вставить("Отбор",СоответствиеОтбора);
		
		СоответствиеГруппировок = Новый Соответствие;
		СоответствиеГруппировок.Вставить("ЗаказПоставщику.ДатаПоступления");
		СоответствиеГруппировок.Вставить("ЗаказПоставщику");
		СтруктураНостроек.Вставить("ГруппировкиСтрок", СоответствиеГруппировок);
		
		СтруктураНостроек.Вставить("ВыбранныеПоля",  Новый Структура("Цена", "Цена"));
		СтруктураНостроек.Вставить("РаскрашиватьИзмерения", Истина);
		
		Отчет.Настроить(СтруктураНостроек);
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		ФормаОтчета.ОбновитьОтчет();
		ФормаОтчета.Открыть();
	
	ИначеЕсли Колонка.Имя = "ВРезерве"
	   И ЗначениеЗаполнено(ВыбраннаяСтрока.ВРезерве) Тогда
	
		Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
		
		СтруктураНостроек = Новый Структура;
		СтруктураНостроек.Вставить("ИмяРегистра", "ТоварыВРезервеНаСкладах");
		СтруктураНостроек.Вставить("ДатаКон", ТекущаяДата());
		
		СоответствиеОтбора = Новый Соответствие;
		СоответствиеОтбора.Вставить("Номенклатура", ТекущаяНоменклатура);
		Если ВыбраннаяСтрока.Родитель = Неопределено Тогда
			СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.ХарактеристикаСклад);
		Иначе
			СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.Родитель.ХарактеристикаСклад);
			СоответствиеОтбора.Вставить("Склад", ВыбраннаяСтрока.ХарактеристикаСклад);
		КонецЕсли; 
		СтруктураНостроек.Вставить("Отбор",СоответствиеОтбора);
		
		СоответствиеГруппировок = Новый Соответствие;
		СоответствиеГруппировок.Вставить("ДокументРезерва");
		СтруктураНостроек.Вставить("ГруппировкиСтрок", СоответствиеГруппировок);
		
		СоответствиеПолей= Новый Соответствие;
		СоответствиеПолей.Вставить("ДокументРезерва.ДатаОтгрузки");
		СтруктураНостроек.Вставить("ВыбранныеПоля",  СоответствиеПолей);
		
		СтруктураНостроек.Вставить("РаскрашиватьИзмерения", Истина);
		СтруктураНостроек.Вставить("ВыводитьДополнительныеПоляВОтдельнойКолонке", Истина);
		
		Отчет.Настроить(СтруктураНостроек);
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		ФормаОтчета.ОбновитьОтчет();
		ФормаОтчета.Открыть();
	
	ИначеЕсли Колонка.Имя = "МестоХранения"
		    И ЗначениеЗаполнено(ВыбраннаяСтрока.ХарактеристикаСклад)
			И ТипЗнч(ВыбраннаяСтрока.ХарактеристикаСклад) = Тип("СправочникСсылка.Склады") Тогда
		СписокРегистра = РегистрыСведений.МестаХраненияНоменклатуры.ПолучитьФормуСписка();
		СписокРегистра.Отбор.Номенклатура.Значение      = ТекущаяНоменклатура;
		СписокРегистра.Отбор.Номенклатура.Использование = Истина;
		СписокРегистра.Отбор.Склад.Значение             = ВыбраннаяСтрока.ХарактеристикаСклад;
		СписокРегистра.Отбор.Склад.Использование        = Истина;
		СписокРегистра.Открыть();
	КонецЕсли; 

КонецПроцедуры

// Процедура вызывается при выводе строки дерева остатков номенклатуры на складах.
//
Процедура ПриВыводеСтрокиБезЦены(Элемент, ОформлениеСтроки, ДанныеСтроки, ОтображатьСклады, НоменклатураТекущиеДанные) Экспорт

	Если ДанныеСтроки.Родитель = Неопределено Тогда
		Если ОтображатьСклады Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ХарактеристикаСклад) Тогда
			Если НоменклатураТекущиеДанные <> Неопределено
			   И НЕ НоменклатураТекущиеДанные.ЭтоГруппа
			   И НЕ НоменклатураТекущиеДанные.ВестиУчетПоХарактеристикам Тогда
				ОформлениеСтроки.Ячейки.ХарактеристикаСклад.Текст = "Учет по характеристикам не ведется";
			Иначе
				ОформлениеСтроки.Ячейки.ХарактеристикаСклад.Текст = "<без характеристики>";
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ХарактеристикаСклад) Тогда
			ОформлениеСтроки.Ячейки.ХарактеристикаСклад.Текст = "Склад не указан";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



// Процедура устанавливает отбор по основной организации в указанно форме
//
Процедура УстановитьОтборПоОрганизации(Форма, УчетПоВсемОрганизациям, ОсновнаяОрганизация, ИмяРеквизитаСписка, СкрыватьКолонку = Истина, ИмяОтбора = "Организация") Экспорт

	// В том случае если учте ведется по одной организации необходимо установить мягкий отбор.
	// т.е. отбор, с возможностью его изменения.

	Если НЕ УчетПоВсемОрганизациям Тогда // Установлен режим учета по одной организации

		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле

			// Проверим - Если это связанный регитср сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически

			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда

				// Возвможно это переход по кнопке ПЕрейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  = ВидСравнения.Равно;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = Истина;
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = ОсновнаяОрганизация;

			Форма.ЭлементыФормы[ИмяРеквизитаСписка].НастройкаОтбора[ИмяОтбора].Доступность = Ложь;

		КонецЕсли;

		Если СкрыватьКолонку Тогда

			Если НЕ Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки.Найти(ИмяОтбора) = Неопределено Тогда

				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].Видимость         = Ложь;
				Форма.ЭлементыФормы[ИмяРеквизитаСписка].Колонки[ИмяОтбора].ИзменятьВидимость = Ложь;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // УстановитьОтборПоОрганизации()


// Процедура вызывается для вывода сообщений пользователю
//
// Параметры:
//  СсылкаСправочника - ссылка на справочник, объект которого проверяется;
//  ИмяРеквизита - строка, имя реквизита, который не заполнен.
//
Процедура СообщитьПользователюНезаполненРеквизит(СсылкаСправочника, ИмяРеквизита) Экспорт

	ТекстСообщения = "Перед записью в элементе справочника """ + СсылкаСправочника.Метаданные().Синоним + """ необходимо заполнить """ + ИмяРеквизита + """!";
	
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);

КонецПроцедуры // СообщитьПользователюНезаполненРеквизит()

// Процедура управляет доступностью признаков отражения в БУ и НУ в документах в зависимости от реквизита организации 
// ОтражатьВРегламентированномУчете. Также процедура может изменять значения реквизитов ОтражатьВБУ и ОтражатьВНУ
// Может вызываться из обработчиков формы ПриОткрытии, ОрганизацияПриИзменении
//
//Параметры:
//  Объект                  - Документ-объект
//  Форма                   - форма документа
//  ИмяОтражатьВБУ          - имя элемента формы, связанного с реквизитом ОтражатьВБУ
//  ИмяОтражатьВНУ          - имя элемента формы, связанного с реквизитом ОтражатьВНУ
//  мОтражатьВРегламентированномУчете - переменная формы, передается в процедуру для изменения.
//    далее может использоваться в логике формы в индивидуальном порядке для каждого документа.
//  флИзменятьРеквизитыБУНУ - признак необходимости изменять реквизиты документа ОтражатьвБУ, ОтражатьВНУ
//                            Устанавливается если процедура вызывается при изменении значения организации в документе
Процедура УправлениеПризнакомОтраженияВРеглУчете(Объект, Форма,ИмяОтражатьВБУ = "ОтражатьВБухгалтерскомУчете",ИмяОтражатьВНУ = "ОтражатьВНалоговомУчете",мОтражатьВРегламентированномУчете,флИзменятьРеквизитыБУНУ=ложь) Экспорт

	ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(Объект, ИмяОтражатьВБУ, ИмяОтражатьВНУ, мОтражатьВРегламентированномУчете, флИзменятьРеквизитыБУНУ);

	ОбработатьПризнакОтраженияВреглУчетеДляФормы(Объект, Форма,ИмяОтражатьВБУ,ИмяОтражатьВНУ,мОтражатьВРегламентированномУчете);

КонецПроцедуры

// Процедура удаляет кнопку "ЭД" из командной панели формы если обмен ЭД не используется
// Параметры
// 	 Кнопки – КнопкиКоманднойПанели - Кнопки командной панели форм
// 	 ИспользованиеОбменаЭД - Булево - Признак использования обмена ЭД
//
Процедура УдалитьКнопкуЭД(Кнопки, ИспользоватьОбменЭД = Неопределено) Экспорт
	
	Если ИспользоватьОбменЭД = Неопределено Тогда
		ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	КонецЕсли;
	
	Если ИспользоватьОбменЭД Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьКнопки(Кнопки, "ЭД");
	
КонецПроцедуры

// Процедура удаляет кнопки относящиеся к обменам через 1С:Сеть и в формате CommerceML из командной панели формы если обмены не используются
// Параметры
// 	 ЭтаФорма - обычная форма - форма из командной панели которой, нужно удалить кнопки
//
Процедура УстановитьВидимостьКнопокЭДО(ЭтаФорма) Экспорт
	КнопкиПанели = ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки;
	
	ИспользоватьОбмен1ССеть     = ПолучитьФункциональнуюОпцию("ИспользоватьОбмен1ССеть");
	ИспользоватьОбменCommerceML = ПолучитьФункциональнуюОпцию("ИспользоватьОбменCommerceML");
	
	Если Не ИспользоватьОбмен1ССеть Тогда
		УдалитьКнопки(КнопкиПанели, "ОтправитьЧерез1ССеть, ПараметрыЭлектронногоОбменаДокументами");
	КонецЕсли;
	
	Если Не ИспользоватьОбменCommerceML Тогда
		УдалитьКнопки(КнопкиПанели, "ВыгрузитьВФорматеCommerceMLПанель");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКнопки(КнопкиПанели, ИменаУдаляемыхКнопок, ИРазделителиСлева = Истина)
	мИменКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаУдаляемыхКнопок);
	Для Каждого ИмяКнопки Из мИменКнопок Цикл
		Кнопка = КнопкиПанели.Найти(СокрЛП(ИмяКнопки));
		Если Кнопка <> Неопределено Тогда
			Если ИРазделителиСлева Тогда
				ИндексКнопки = КнопкиПанели.Индекс(Кнопка);
				КнопкаСлева = КнопкиПанели[ИндексКнопки-1];
				Если КнопкаСлева.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
					КнопкиПанели.Удалить(КнопкаСлева);
				КонецЕсли;
			КонецЕсли;
			КнопкиПанели.Удалить(Кнопка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
