
Процедура ЗаполнитьXML(ОбъектXML, Отказ, Сообщение, ДобавлятьАтрибутПроверки = Ложь, ДополнятьИсходящееСообщениеПриложеннымиФайлами = Ложь) Экспорт
	
	ПрефиксИмен = "";
	ПространствоИменСОДИ    = "urn:moo-sodi.ru:commerceml_sodi";
	
	Если Акцептовать Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента("АкцептСчетФактура", ПространствоИменСОДИ);
	Иначе
		ОбъектXML.ЗаписатьНачалоЭлемента("РеджектСчетФактура", ПространствоИменСОДИ);
	КонецЕсли;
	
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксИмен, ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Если ДобавлятьАтрибутПроверки Тогда
		ОбъектXML.ЗаписатьАтрибут("xsi:schemaLocation","urn:moo-sodi.ru:commerceml_sodi cml-delivery-3.0sodi.xsd");
	КонецЕсли;
	
	ДеревоТэгов  = ЭлектронныеДокументы.ИнициализироватьДеревоТэгов(ЭтотОбъект, Отказ, Сообщение);
	СтрокиДерева = ДеревоТэгов.Строки;
	
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "НомерИсходногоДокумента", ИсходныйДокумент.НомерВходящегоДокумента, "ДокументИД");
	
	Если Акцептовать Тогда
	
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "НомерСчетФактураКлиент", УчетныйДокумент.Номер, "ДокументИД");
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДатаСчетФактураКлиент", ЭлектронныеДокументы.ХМЛДата(УчетныйДокумент.Дата));
			 			
	КонецЕсли;
	
	ЭлектронныеДокументы.ЗаписатьИнформациюОПриложенныхФайлахКДокументу(ДополнятьИсходящееСообщениеПриложеннымиФайлами, СтрокиДерева, УчетныйДокумент);	
	
	ЭлектронныеДокументы.ЗаписатьТэгиВXMLДокумент(ОбъектXML, ДеревоТэгов.Строки, ПрефиксИмен);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВходящийСчетФактура") Тогда
		
		ЭлектронныеДокументы.ЗаполнитьШапкуИсходящегоДокументаПоОснованию(ЭтотОбъект, Основание);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВозможноАкцептовать(Сообщение = "") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Сообщение = Сообщение + Символы.ПС + " - не создан документ входящая счет-фактура";
		Возврат Ложь;
	ИначеЕсли Не УчетныйДокумент.Проведен Тогда
		Сообщение = Сообщение + Символы.ПС + " - документ входящая счет-фактура должен быть проведен";
	КонецЕсли;	
	
	Если Не Организация = УчетныйДокумент.Организация Тогда
		Сообщение = Сообщение + Символы.ПС + " - организация учетного документа не соответствует входящей электронной накладной";
	КонецЕсли;
	
	Если Не Контрагент = УчетныйДокумент.Контрагент Тогда
		Сообщение = Сообщение + Символы.ПС + " - контрагент учетного документа не соответствует входящей электронной накладной";
	КонецЕсли;
			
	Если Не ПустаяСтрока(Сообщение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПустаяСтрока(Сообщение);
	
КонецФункции // () 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Сообщение = "";
	
	ЭлектронныеДокументы.ПроверитьРеквизитИсходныйДокумент(ЭтотОбъект, Отказ, Сообщение);
	
	Если Отказ Тогда
		Сообщить("Электронный документ """ + ЭтотОбъект + """ не может быть записан:" + Сообщение, СтатусСообщения.Внимание);
	ИначеЕсли НЕ ПустаяСтрока(Сообщение) Тогда
		Сообщить("При записи электронного документа """ + ЭтотОбъект + """ обнаружены ошибки:" + Сообщение, СтатусСообщения.Внимание);
	КонецЕсли;	
	
КонецПроцедуры

Функция SOAPAction() Экспорт
	
	Если Акцептовать Тогда
		Возврат "accept_invoice";
	Иначе
		Возврат "reject_invoice";
	КонецЕсли;
	
КонецФункции // () 
