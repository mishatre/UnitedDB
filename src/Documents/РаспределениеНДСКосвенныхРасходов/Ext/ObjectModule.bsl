Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ВЫВОДА ПЕЧАТНОЙ ФОРМЫ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьОтчетаОРаспределенииНДСКосвенныхРасходов()
	
	Отчет = Отчеты.РаспределениеНДСКосвенныхРасходов.Создать();
	Отчет.Организация = Организация;
	Отчет.ДокументРаспределения = ЭтотОбъект.Ссылка;
	Отчет.ВыручкаПоДокументам = Истина;
	Отчет.ДатаНач = НачалоПериода;
	Отчет.ДатаКон = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, НачалоПериода);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ВысотаЗаголовка = 0;
	
	Отчет.СформироватьОтчет(ТабличныйДокумент, Истина, ВысотаЗаголовка);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "РаспределениеНДСПоКосвеннымРасходам" Тогда
		
		ТабДокумент = ПечатьОтчетаОРаспределенииНДСКосвенныхРасходов();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
	
КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РаспределениеНДСПоКосвеннымРасходам", "Распределение НДС по косвенным расходам");
	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ ДОКУМЕНТА

// Процедура вызывается по кнопке "Распределить" в форме диалога документа.
// В процедуре реализуется алгоритм распределения косвенных расходов в табличной
// части "СоставКосвенныхРасходов" на различные виды реализации в текущем периоде.
//
Процедура РаспределитьПоВыручке() Экспорт

	БазаРаспределенияСЕНВД = ВыручкаНДС + ВыручкаБезНДС + ВыручкаЕНВД + ВыручкаНДС0;
	БазаРаспределенияБезЕНВД =  ВыручкаНДС + ВыручкаБезНДС + ВыручкаНДС0;

	Если БазаРаспределенияСЕНВД = 0 Тогда
		Сообщить("На закладке ""Выручка от реализации"" не указаны параметры реализации!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Для Каждого СтрТабЧасти Из СоставКосвенныхРасходов Цикл
		
		Если СтрТабЧасти.БазисРаспределенияВключаетЕНВД Тогда
		    БазаРаспределения = БазаРаспределенияСЕНВД;
		Иначе
		    БазаРаспределения = БазаРаспределенияБезЕНВД;
		КонецЕсли; 

		УчтеноСуммы   = 0;
		УчтеноНДС     = 0;
		УчтеноВыручки = 0;

		Если ВыручкаНДС <> 0 Тогда

			СтрТабЧасти.НДССумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.НДС      = Окр(СтрТабЧасти.НДСВсего * (ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы     = УчтеноСуммы + СтрТабЧасти.НДССумма;
			УчтеноНДС       = УчтеноНДС + СтрТабЧасти.НДС;
			УчтеноВыручки   = УчтеноВыручки + ВыручкаНДС;

		Иначе
			СтрТабЧасти.НДССумма = 0;
			СтрТабЧасти.НДС      = 0;
		КонецЕсли;

		Если ВыручкаБезНДС <> 0 Тогда

			СтрТабЧасти.БезНДССумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаБезНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.БезНДС      = Окр(СтрТабЧасти.НДСВсего * (ВыручкаБезНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы   = УчтеноСуммы + СтрТабЧасти.БезНДССумма;
			УчтеноНДС     = УчтеноНДС + СтрТабЧасти.БезНДС;
			УчтеноВыручки = УчтеноВыручки + ВыручкаБезНДС;

		Иначе
			СтрТабЧасти.БезНДССумма = 0;
			СтрТабЧасти.БезНДС      = 0;

		КонецЕсли;

		Если ВыручкаЕНВД <> 0 и СтрТабЧасти.БазисРаспределенияВключаетЕНВД Тогда

			СтрТабЧасти.ЕНВДСумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаЕНВД + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.ЕНВДНДС   = Окр(СтрТабЧасти.НДСВсего *   (ВыручкаЕНВД + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы   = УчтеноСуммы + СтрТабЧасти.ЕНВДСумма;
			УчтеноНДС     = УчтеноНДС + СтрТабЧасти.ЕНВДНДС;
			УчтеноВыручки = УчтеноВыручки + ВыручкаЕНВД;

		Иначе
			СтрТабЧасти.ЕНВДСумма = 0;
			СтрТабЧасти.ЕНВДНДС   = 0;

		КонецЕсли;
		
		Если ВыручкаНДС0 <> 0 Тогда

			СтрТабЧасти.НДС0Сумма = Окр(СтрТабЧасти.СуммаВсего * (ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
			СтрТабЧасти.НДС0      = Окр(СтрТабЧасти.НДСВсего * (ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

			УчтеноСуммы   = УчтеноСуммы + СтрТабЧасти.НДС0Сумма;
			УчтеноНДС     = УчтеноНДС + СтрТабЧасти.НДС0;
			УчтеноВыручки = УчтеноВыручки + ВыручкаНДС0;

		Иначе
			СтрТабЧасти.НДС0Сумма = 0;
			СтрТабЧасти.НДС0      = 0;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // РаспределитьПоВыручке()

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСПродажи в разрезе различных ставок НДС.
//
Процедура РассчитатьВыручку() Экспорт

	ВыручкаЕНВД   = 0;
	ВыручкаБезНДС = 0;
	ВыручкаНДС0   = 0;
	ВыручкаНДС    = 0;

	Отказ = Ложь;
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, НачалоПериода, Отказ);
	
	Если Не Отказ Тогда
		УчетНДС.РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС);
	КонецЕсли;

КонецПроцедуры // РассчитатьВыручку()

// Заполнение табличной части документа по регистру НДСКосвенныхРасходов
//
Процедура ЗаполнитьТабличныеЧастиПоКосвеннымРасходам() Экспорт
	
	СоставКосвенныхРасходов.Очистить();
	
	Результат = ПолучитьВыборкуИзРегистраНДСКосвенныеРасходы(Организация, НачалоПериода, Дата);
	
	КонтрагентПоСчетуФактуре = ПолучитьСписокКонтрагентовПоСчетамФактурам(Организация, Результат.Выгрузить());
	КонтрагентПоСчетуФактуре.Индексы.Добавить("СчетФактура");
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений();
	ТаблицаРасшифровки.Колонки.Добавить("СтатьяЗатрат"			, Новый описаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаРасшифровки.Колонки.Добавить("БазисРаспределенияВключаетЕНВД", Новый описаниеТипов("Булево"));
	ТаблицаРасшифровки.Колонки.Добавить("СуммаВсего"			, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаРасшифровки.Колонки.Добавить("НДСВсего"				, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	
	ВыборкаПоСчетуФактуре = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаПоСчетуФактуре.Следующий() Цикл
		
		ВыборкаПоВидуЦенности = ВыборкаПоСчетуФактуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаПоВидуЦенности.Следующий() Цикл
			
			ВыборкаПоСтавкеНДС = ВыборкаПоВидуЦенности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ВыборкаПоСтавкеНДС.Следующий() Цикл
				
				
				ВыборкаПоВключениюНДСВСтоимость = ВыборкаПоСтавкеНДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Пока ВыборкаПоВключениюНДСВСтоимость.Следующий() Цикл
					
					СтрокаКонтрагента = КонтрагентПоСчетуФактуре.Найти(ВыборкаПоСтавкеНДС.СчетФактура,"СчетФактура");
					Поставщик = ?(СтрокаКонтрагента <> Неопределено, СтрокаКонтрагента.Поставщик, Справочники.Контрагенты.ПустаяСсылка());
					
					ТаблицаРасшифровки.Очистить();
					
					// Зачистка вспомогательных реквизитов
					ПолучитьСуммуИзВыборки = Истина;
					СуммаВсего = 0;
					НДСВсего = 0;
					
					Выборка = ВыборкаПоВключениюНДСВСтоимость.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						Если ПолучитьСуммуИзВыборки Тогда
							СуммаВсего  = Выборка.СуммаБезНДСОборот;
							НДСВсего    = Выборка.НДСОборот;
							
							ПолучитьСуммуИзВыборки = ложь;
						КонецЕсли;
						
						СтрокаРасшифровки = ТаблицаРасшифровки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРасшифровки,Выборка);
					КонецЦикла;
					
					Если СуммаВсего = 0 Тогда
						ТаблицаРасшифровки.ЗаполнитьЗначения(0,"СуммаВсего");
					Иначе
						РезультурующийМассив = ОбщегоНазначения.РаспределитьПропорционально(СуммаВсего,ТаблицаРасшифровки.ВыгрузитьКолонку("СуммаВсего"));
						Если РезультурующийМассив = неопределено Тогда
							ТаблицаРасшифровки.ЗаполнитьЗначения(0,"СуммаВсего");
							ТаблицаРасшифровки[0].СуммаВсего = СуммаВсего;
						Иначе
							ТаблицаРасшифровки.ЗагрузитьКолонку(РезультурующийМассив,"СуммаВсего");
						КонецЕсли; 
					КонецЕсли; 
					
					Если НДСВсего = 0 Тогда
						ТаблицаРасшифровки.ЗаполнитьЗначения(0,"НДСВсего");
					Иначе
						РезультурующийМассив = ОбщегоНазначения.РаспределитьПропорционально(НДСВсего,ТаблицаРасшифровки.ВыгрузитьКолонку("НДСВсего"));
						Если РезультурующийМассив = неопределено Тогда
							ТаблицаРасшифровки.ЗаполнитьЗначения(0,"НДСВсего");
							ТаблицаРасшифровки[0].НДСВсего = НДСВсего;
						Иначе
							ТаблицаРасшифровки.ЗагрузитьКолонку(РезультурующийМассив,"НДСВсего");
						КонецЕсли; 
					КонецЕсли; 
					
					Для каждого СтрокаРасшифровки из ТаблицаРасшифровки Цикл
						НоваяСтрока = СоставКосвенныхРасходов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаПоВключениюНДСВСтоимость);
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРасшифровки);
						НоваяСтрока.Поставщик = Поставщик;
					КонецЦикла; 
					
				КонецЦикла; // Пока ВыборкаПоВключениюНДСВСтоимость
				
			КонецЦикла; // Пока ВыборкаПоСтавкеНДС
			
		КонецЦикла; // Пока ВыборкаПоВидуЦенности
		
	КонецЦикла; // Пока ВыборкаПоСчетуФактуре
	
КонецПроцедуры	

//Возвращает выборку по регистру НДС по косвенным расходам за период с итогами по измерениям 
Функция ПолучитьВыборкуИзРегистраНДСКосвенныеРасходы(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	
	Запрос.УстановитьПараметр("РасходыРаспределяютсяПоПолномуБазису", Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСКосвенныеРасходыОбороты.СчетФактура КАК СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА (НЕ НДСКосвенныеРасходы.СтатьяЗатрат ЕСТЬ NULL )
	|					ТОГДА НДСКосвенныеРасходы.СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = &РасходыРаспределяютсяПоПолномуБазису
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БазисРаспределенияВключаетЕНВД,
	|	СУММА(НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот) КАК СуммаБезНДСОборот,
	|	СУММА(НДСКосвенныеРасходыОбороты.НДСОборот) КАК НДСОборот,
	|	СУММА(НДСКосвенныеРасходы.СуммаБезНДС) КАК СуммаВсего,
	|	СУММА(НДСКосвенныеРасходы.НДС) КАК НДСВсего,
	|	Неопределено КАК Поставщик
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК НДСКосвенныеРасходыОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСКосвенныеРасходы.Организация КАК Организация,
	|			НДСКосвенныеРасходы.СчетФактура КАК СчетФактура,
	|			НДСКосвенныеРасходы.ВидЦенности КАК ВидЦенности,
	|			НДСКосвенныеРасходы.СтавкаНДС КАК СтавкаНДС,
	|			НДСКосвенныеРасходы.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|			СУММА(НДСКосвенныеРасходы.СуммаБезНДС) КАК СуммаБезНДС,
	|			СУММА(НДСКосвенныеРасходы.НДС) КАК НДС,
	|			НДСКосвенныеРасходы.СтатьяЗатрат КАК СтатьяЗатрат
	|		ИЗ
	|			РегистрНакопления.НДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|		ГДЕ
	|			НДСКосвенныеРасходы.ВидДвижения = &ВидДвиженияПриход
	|			И НДСКосвенныеРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НДСКосвенныеРасходы.СтатьяЗатрат,
	|			НДСКосвенныеРасходы.СчетФактура,
	|			НДСКосвенныеРасходы.ВидЦенности,
	|			НДСКосвенныеРасходы.СтавкаНДС,
	|			НДСКосвенныеРасходы.НДСВключенВСтоимость,
	|			НДСКосвенныеРасходы.Организация) КАК НДСКосвенныеРасходы
	|		ПО НДСКосвенныеРасходыОбороты.Организация = НДСКосвенныеРасходы.Организация
	|			И НДСКосвенныеРасходыОбороты.СчетФактура = НДСКосвенныеРасходы.СчетФактура
	|			И НДСКосвенныеРасходыОбороты.ВидЦенности = НДСКосвенныеРасходы.ВидЦенности
	|			И НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСКосвенныеРасходы.СтавкаНДС
	|			И НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот, 0) = 0
	|				И ЕСТЬNULL(НДСКосвенныеРасходыОбороты.НДСОборот, 0) = 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСКосвенныеРасходыОбороты.СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА (НЕ НДСКосвенныеРасходы.СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД ЕСТЬ NULL )
	|					ТОГДА НДСКосвенныеРасходы.СтатьяЗатрат
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = &РасходыРаспределяютсяПоПолномуБазису
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИТОГИ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	НДСВключенВСтоимость";
				   
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьВыборкуИзРегистраНДСКосвенныеРасходы()

Функция ПолучитьСписокКонтрагентовПоСчетамФактурам(Организация, СписокСчетовФактур)
	
	// Получение поставщиков по счету-фактуре
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокСчетовФактур.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	//Отображение данных о валютах
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКосвеннымРасходам) Экспорт
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЦенности",		"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",		"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("СчетФактураДоговорКонтрагента","СчетФактура.ДоговорКонтрагента");
	СтруктураПолей.Вставить("СтавкаНДС",		"СтавкаНДС");
	СтруктураПолей.Вставить("НДСВключенВСтоимость", "НДСВключенВСтоимость");
	СтруктураПолей.Вставить("СуммаВсего",		"СуммаВсего");
	СтруктураПолей.Вставить("НДСВсего",			"НДСВсего");
	СтруктураПолей.Вставить("БезНДССумма",		"БезНДССумма");
	СтруктураПолей.Вставить("БезНДС",			"БезНДС");
	СтруктураПолей.Вставить("НДС0Сумма",		"НДС0Сумма");
	СтруктураПолей.Вставить("НДС0",				"НДС0");
	СтруктураПолей.Вставить("ЕНВДСумма",		"ЕНВДСумма");
	СтруктураПолей.Вставить("ЕНВДНДС",			"ЕНВДНДС");
	СтруктураПолей.Вставить("НДССумма",			"НДССумма");
	СтруктураПолей.Вставить("НДС",				"НДС");

	РезультатЗапросаПоКосвеннымРасходам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СоставКосвенныхРасходов", СтруктураПолей);
	ТаблицаПоКосвеннымРасходам = ПодготовитьТаблицуПоКосвеннымРасходам(РезультатЗапросаПоКосвеннымРасходам);
	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура прверяет соответствие даты налоговому периоду.
//
Процедура ПроверитьСоответствиеДатыПериоду(Отказ, Заголовок)
	
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если (Дата > КонецПериода) ИЛИ (Дата < НачалоПериода) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Дата документа не входит в указанный налоговый период", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоКосвеннымРасходам(РезультатЗапросаПоКосвеннымРасходам) Экспорт

	Таблица = РезультатЗапросаПоКосвеннымРасходам.Выгрузить();
	
	Таблица.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("ПроводкаНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("ПроводкаНДС0", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("ПроводкаЕНВД", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("ПроводкаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("НДСДвижений", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Подготовка сумм для включения и исключения
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда
			
			СтрокаТаблицы.СуммаБезНДС = - (СтрокаТаблицы.НДССумма + СтрокаТаблицы.НДС0Сумма);
			СтрокаТаблицы.НДСДвижений = - (СтрокаТаблицы.НДС + СтрокаТаблицы.НДС0);
			СтрокаТаблицы.ПроводкаНДС = - СтрокаТаблицы.НДС;
			СтрокаТаблицы.ПроводкаНДС0 = - СтрокаТаблицы.НДС0;
			
		Иначе
			
			СтрокаТаблицы.СуммаБезНДС = (СтрокаТаблицы.БезНДССумма + СтрокаТаблицы.ЕНВДСумма);
			СтрокаТаблицы.НДСДвижений = (СтрокаТаблицы.БезНДС + СтрокаТаблицы.ЕНВДНДС);
			СтрокаТаблицы.ПроводкаБезНДС = СтрокаТаблицы.БезНДС;
			СтрокаТаблицы.ПроводкаЕНВД = СтрокаТаблицы.ЕНВДНДС;
			
		КонецЕсли;
		
			
	КонецЦикла;
		
	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСоставКосвенныхРасходов(ТаблицаКосвенныхРасходов, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС");
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставКосвенныхРасходов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка совпадения информации по выручке в документе и в регистре НДСНачисленный
	ВыручкаЕНВДПоРегистру   = 0;
	ВыручкаБезНДСПоРегистру = 0;
	ВыручкаНДС0ПоРегистру	= 0;
	ВыручкаНДСПоРегистру    = 0;
	
	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, НачалоПериода);
	
	Если Не Отказ Тогда
		УчетНДС.РассчитатьВыручкуДляНДС(Организация, НачалоПериода, КонецПериода, ВыручкаЕНВДПоРегистру, ВыручкаБезНДСПоРегистру, ВыручкаНДС0ПоРегистру, ВыручкаНДСПоРегистру);
	КонецЕсли;
	
	ВалютаУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Если ВыручкаНДС <> ВыручкаНДСПоРегистру Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки по обычным ставкам НДС (" + ВыручкаНДС + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаНДСПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
	КонецЕсли;
	Если ВыручкаЕНВД <> ВыручкаЕНВДПоРегистру Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки облагаемой ЕНВД (" + ВыручкаЕНВД + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаЕНВДПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
	КонецЕсли;
	Если ВыручкаБезНДС <> ВыручкаБезНДСПоРегистру Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки без НДС (" + ВыручкаБезНДС + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаБезНДСПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
	КонецЕсли;
	Если ВыручкаНДС0 <> ВыручкаНДС0ПоРегистру Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма выручки облагаемой НДС по ставке 0% (" + ВыручкаНДС0 + " " + ВалютаУчета + ") не совпадает с информацией в регистрах учета (" + ВыручкаНДС0ПоРегистру + " " + ВалютаУчета + ")!", , Заголовок,СтатусСообщения.Внимание);
	КонецЕсли;
		
	// Дополнительно нужно проверить арифметику распределения.
	Для Каждого Строка Из ТаблицаКосвенныхРасходов Цикл
		Если Строка.СуммаВсего <> (Строка.БезНДССумма + Строка.НДС0Сумма + Строка.ЕНВДСумма + Строка.НДССумма) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ общая сумма в колонке ""Сумма по счету"" не совпадает с итогом распределения этой суммы в других колонках!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Строка.НДСВсего <> (Строка.БезНДС + Строка.НДС0 + Строка.ЕНВДНДС + Строка.НДС) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ общая сумма в колонке ""НДС по счету"" не совпадает с итогом распределения этой суммы в других колонках!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формирование движений по регистрам подсистемы НДС.
//
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок) Экспорт
	
	Движения_НДСКосвенныеРасходы = Движения.НДСКосвенныеРасходы;
	
	ТаблицаДвиженийНДСКосвенныеРасходы = Движения_НДСКосвенныеРасходы.ВыгрузитьКолонки();
	
	ТаблицаДляРаспределения = РаспределениеКосвенныхРасходов.Скопировать();
	ТаблицаДляРаспределения.Колонки.Удалить("НДС");
	ТаблицаДляРаспределения.Колонки.Удалить("СуммаБезНДС");
	ТаблицаДляРаспределения.Колонки.НДСВсего.Имя = "НДС";
	ТаблицаДляРаспределения.Колонки.СуммаВсего.Имя = "СуммаБезНДС";
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДляРаспределения, ТаблицаДвиженийНДСКосвенныеРасходы);
	ТаблицаДвиженийНДСКосвенныеРасходы.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	Если Не Отказ Тогда
		Движения_НДСКосвенныеРасходы.мПериод = СтруктураШапкиДокумента.Дата;
		Движения_НДСКосвенныеРасходы.мТаблицаДвижений = ТаблицаДвиженийНДСКосвенныеРасходы;
		Движения_НДСКосвенныеРасходы.ВыполнитьРасход();
	КонецЕсли;
	
	ДвиженияПоРегистрамВключениеИсключениеИзСтоимости(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок);
	
	ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок);
								  
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

// Включение НДС в стоимость и исключение из стоимости по результатам распределения
//
Процедура ДвиженияПоРегистрамВключениеИсключениеИзСтоимости(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВключенияИсключения = РаспределениеКосвенныхРасходов.Скопировать();
	ТаблицаВключенияИсключения.Колонки.Удалить("НДС");
	ТаблицаВключенияИсключения.Колонки.НДСДвижений.Имя = "НДС";
	
	СтрокиКУдалению = Новый Массив();
	Для каждого СтрокаРасходов Из ТаблицаВключенияИсключения Цикл
		Если СтрокаРасходов.НДС = 0 и СтрокаРасходов.СуммаБезНДС = 0 тогда
			СтрокиКУдалению.Добавить(СтрокаРасходов);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	    ТаблицаВключенияИсключения.удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	
	// Движения по регистру НДС, включенный в стоимость
	Движения_НДСВключенныВСтоимость = Движения.НДСВключенныйВСтоимость;
	ТаблицаДвиженийНДСВключенныйВСтоимость = Движения_НДСВключенныВСтоимость.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВключенияИсключения, ТаблицаДвиженийНДСВключенныйВСтоимость);
	ТаблицаДвиженийНДСВключенныйВСтоимость.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	
	Если ТаблицаДвиженийНДСВключенныйВСтоимость.Количество() <> 0 Тогда
		Движения_НДСВключенныВСтоимость.мПериод = СтруктураШапкиДокумента.Дата;
		Движения_НДСВключенныВСтоимость.мТаблицаДвижений = ТаблицаДвиженийНДСВключенныйВСтоимость;
		Движения_НДСВключенныВСтоимость.ДобавитьДвижение();
	КонецЕсли;
	
	// Движения по регистру НДС предъявленный
	Движения_НДСПредъявленный = Движения.НДСПредъявленный;
	ТаблицаДвиженийНДСПредъявленный = Движения_НДСПредъявленный.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВключенияИсключения, ТаблицаДвиженийНДСПредъявленный);
	ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");
	ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
	ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "Событие");
	
	Если ТаблицаДвиженийНДСПредъявленный.Количество() <> 0 Тогда
		Движения_НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		Движения_НДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		Движения_НДСПредъявленный.ВыполнитьРасход();
	КонецЕсли;
						
КонецПроцедуры

// Распределение НДС по ставке 0%
//
Процедура ДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, РаспределениеКосвенныхРасходов, Отказ, Заголовок)

	КонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(СтруктураШапкиДокумента.Организация, НачалоПериода, Отказ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если РаспределениеКосвенныхРасходов.Итог("НДС0Сумма") + РаспределениеКосвенныхРасходов.Итог("НДС0") = 0 Тогда
		// Нет сумм для распределения
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);

	Запрос.УстановитьПараметр("СостоянияОжидание", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
		|	СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Обороты(
		|		НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
		|		КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
		|		Период,
		|		Организация = &Организация
		|			И Состояние = &СостоянияОжидание) КАК НДСРеализация0Обороты
		|ГДЕ
		|	НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0Обороты.СчетФактура";
					
	// Определим реализацию по ставке 0% за налоговый период 
	БазоваяТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	
	СписокДокументовОтгрузки = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(БазоваяТаблицаРаспределения.ВыгрузитьКолонку("ДокументОтгрузки"), Истина);
	
	Если СписокДокументовОтгрузки.Количество()>0 Тогда
		Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(Новый МоментВремени(Дата, Ссылка), ВидГраницы.Включая));
		
		Запрос.УстановитьПараметр("СписокДокументовОтгрузки", СписокДокументовОтгрузки);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
		|	НДСРеализация0Остатки.Состояние,
		|	СУММА(НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток) КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|		&МоментДокумента,
		|		Организация = &Организация
		|			И СчетФактура В (&СписокДокументовОтгрузки)) КАК НДСРеализация0Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0Остатки.СчетФактура,
		|	НДСРеализация0Остатки.Состояние";
		ТаблицаТекущихСостояний = Запрос.Выполнить().Выгрузить(); 
	
		ТаблицаРаспределения = ОбщегоНазначения.СформироватьКорректирующиеЗаписи(БазоваяТаблицаРаспределения,ТаблицаТекущихСостояний,Новый Структура("СуммаПриход"),,,,Истина);
		Если ТипЗнч(ТаблицаРаспределения) = Тип("ТаблицаЗначений") Тогда
			ТаблицаРаспределения.Индексы.Добавить("Состояние");
		КонецЕсли;
		СтрокиБезСостояния =  ТаблицаРаспределения.НайтиСтроки(Новый Структура("Состояние",Неопределено));
		Для каждого Строка Из СтрокиБезСостояния Цикл
			Строка.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
		КонецЦикла; 
	Иначе
	    ТаблицаРаспределения = БазоваяТаблицаРаспределения.Скопировать();
		ТаблицаРаспределения.Колонки.Добавить("Состояние", Новый описаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаРаспределения.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение ,"Состояние");
	КонецЕсли; 
	
	ТаблицаДвижений	= РаспределениеКосвенныхРасходов.Скопировать();
	ТаблицаДвижений.Свернуть("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС", "НДС0Сумма, НДС0");
	ТаблицаДвижений.Колонки.НДС0Сумма.Имя = "СуммаБезНДС";
	ТаблицаДвижений.Колонки.НДС0.Имя = "НДС";
	
	МассивКоэффициентов = ТаблицаРаспределения.ВыгрузитьКолонку("СуммаПриход");
	
	ТаблицаДвижений.Колонки.Добавить("СуммыДвижений", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Для Каждого СтрокаРасхода Из ТаблицаДвижений Цикл
		
		СтрокаРасхода.СуммыДвижений = ТаблицаРаспределения.Скопировать();
		СтрокаРасхода.СуммыДвижений.Колонки.Добавить("СуммаБезНДС");
		СтрокаРасхода.СуммыДвижений.Колонки.Добавить("НДС");
		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРасхода.СуммаБезНДС, МассивКоэффициентов);
		Если МассивСумм <> Неопределено Тогда
			СтрокаРасхода.СуммыДвижений.ЗагрузитьКолонку(МассивСумм, "СуммаБезНДС");
		КонецЕсли;
		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРасхода.НДС, МассивКоэффициентов);
		Если МассивСумм <> Неопределено Тогда
			СтрокаРасхода.СуммыДвижений.ЗагрузитьКолонку(МассивСумм, "НДС");
		КонецЕсли;
		
	КонецЦикла;
	
	СписокРаспределяемыхКолонок = Новый Структура("СуммаБезНДС, НДС");
	СписокИсключаемыхКолонок = Новый Структура("СуммаПриход");
	
	ТаблицаДвижений = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаДвижений, "СуммыДвижений", СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);
		
	Движения_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0;
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = Движения_НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Колонки.Добавить("Поставщик",новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "ДатаСобытия");
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСПредъявленныйРеализация0 Цикл
		Если СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
		ИначеЕсли СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Колонки.Удалить(ТаблицаДвиженийНДСПредъявленныйРеализация0.Колонки.Поставщик);
	
	Если ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() <> 0 Тогда
		Движения_НДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		Движения_НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		Движения_НДСПредъявленныйРеализация0.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

// Проверка остатков по регистру НДС по косвенным регистрам после проведения. 
// В случае если они не нулевые, проведение отменяется
Процедура ПроверитьСписаниеПоРегиструНДСКосвенныеРасходы(СтруктураШапкиДокумента, Заголовок, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтруктураШапкиДокумента.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураШапкиДокумента.Дата));
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расхождения.СчетФактура,
		|	Расхождения.ВидЦенности,
		|	Расхождения.СтавкаНДС,
		|	Расхождения.НДСВключенВСтоимость,
		|	СУММА(Расхождения.РасхождениеБезНДС) КАК РасхождениеБезНДС,
		|	СУММА(Расхождения.РасхождениеНДС) КАК РасхождениеНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСКосвенныеРасходыОбороты.СчетФактура КАК СчетФактура,
		|		НДСКосвенныеРасходыОбороты.ВидЦенности КАК ВидЦенности,
		|		НДСКосвенныеРасходыОбороты.СтавкаНДС КАК СтавкаНДС,
		|		НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
		|		НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот КАК РасхождениеБезНДС,
		|		НДСКосвенныеРасходыОбороты.НДСОборот КАК РасхождениеНДС
		|	ИЗ
		|		РегистрНакопления.НДСКосвенныеРасходы.Обороты(&НачалоПериода, &КонецПериода, Период, Организация = &Организация) КАК НДСКосвенныеРасходыОбороты
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДокумента.СчетФактура,
		|		ДанныеДокумента.ВидЦенности,
		|		ДанныеДокумента.СтавкаНДС,
		|		ДанныеДокумента.НДСВключенВСтоимость,
		|		ДанныеДокумента.СуммаВсего * -1,
		|		ДанныеДокумента.НДСВсего * -1
		|	ИЗ
		|		Документ.РаспределениеНДСКосвенныхРасходов.СоставКосвенныхРасходов КАК ДанныеДокумента
		|	ГДЕ
		|		ДанныеДокумента.Ссылка = &Ссылка) КАК Расхождения
		|
		|СГРУППИРОВАТЬ ПО
		|	Расхождения.СтавкаНДС,
		|	Расхождения.ВидЦенности,
		|	Расхождения.СчетФактура,
		|	Расхождения.НДСВключенВСтоимость
		|
		|ИМЕЮЩИЕ
		|	(НЕ(СУММА(Расхождения.РасхождениеБезНДС) = 0
		|			И СУММА(Расхождения.РасхождениеНДС) = 0))";
				   			   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	    Возврат;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	ПервоеСообщение = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если ПервоеСообщение Тогда
			СтрокаСообщения = "Обнаружено расхождение данных о суммах НДС по косвенным расходам, подлежащих распределению:"+Символы.ПС;
			ПервоеСообщение = Ложь;
		Иначе
			СтрокаСообщения = "";	
		КонецЕсли; 
		
		СтрокаСообщения = СтрокаСообщения+" - Счет-фактура '" + Выборка.СчетФактура + "', вид ценности '" + Выборка.ВидЦенности + "'
					  |ставка НДС '" + Выборка.СтавкаНДС +
					  ?(Выборка.НДСВключенВСтоимость, "НДС включен в стоимость", "НДС не включен в стоимость") + ":";
	
		Если не Выборка.РасхождениеБезНДС=0 Тогда
			СтрокаСообщения = СтрокаСообщения+Символы.ПС+Символы.Таб+?(Выборка.РасхождениеБезНДС>0," не распределена", " распределена не отраженная в составе косвенных расходов ")+" сумма без НДС "+Формат(?(Выборка.РасхождениеБезНДС<0,-1,1)*Выборка.РасхождениеБезНДС, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
		КонецЕсли; 
		Если не Выборка.РасхождениеНДС=0 Тогда
			СтрокаСообщения = СтрокаСообщения+Символы.ПС+Символы.Таб+?(Выборка.РасхождениеНДС>0," не распределен", " распределен не отраженный в составе косвенных расходов ")+" НДС "+Формат(?(Выборка.РасхождениеНДС<0,-1,1)*Выборка.РасхождениеНДС, "ЧЦ=15; ЧДЦ=2")+" "+строка(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
		КонецЕсли; 

		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок, СтатусСообщения.Внимание); 
	
	КонецЦикла; //Пока Выборка.Следующий()
																	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
//

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоКосвеннымРасходам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Режим);
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не установлен период документа!", Отказ, Заголовок);
	КонецЕсли; 
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоКосвеннымРасходам);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиСоставКосвенныхРасходов(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	
	ПроверитьСоответствиеДатыПериоду(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
		ПроверитьСписаниеПоРегиструНДСКосвенныеРасходы(СтруктураШапкиДокумента, Заголовок, Отказ);
	КонецЕсли;
 
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
