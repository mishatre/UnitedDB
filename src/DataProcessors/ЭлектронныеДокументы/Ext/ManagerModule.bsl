#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ

Процедура ПодготовитьДанныеДляЗаполненияДокументов(МассивСсылокНаОбъект, АдресХранилища) Экспорт
	
	ТаблицаЭД = Новый ТаблицаЗначений;
	ТаблицаЭД.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаЭД.Колонки.Добавить("НаименованиеФайла");
	ТаблицаЭД.Колонки.Добавить("НаправлениеЭД");
	ТаблицаЭД.Колонки.Добавить("Контрагент");
	ТаблицаЭД.Колонки.Добавить("УникальныйИдентификатор");
	ТаблицаЭД.Колонки.Добавить("ВладелецЭД");
	ТаблицаЭД.Колонки.Добавить("АдресХранилища");
	ТаблицаЭД.Колонки.Добавить("ДвоичныеДанныеПакета");
	ТаблицаЭД.Колонки.Добавить("ПолноеИмяДопФайла");
	ТаблицаЭД.Колонки.Добавить("ИдентификаторДопФайла");
	
	НастройкиОбъектов = Новый Соответствие;
	Для Каждого СсылкаНаОбъект Из МассивСсылокНаОбъект Цикл
		НастройкиОбмена = ЭлектронныеДокументыСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаОбъект);
		
		НастройкиОбмена.Вставить("ИдентификаторОрганизации", ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(
		НастройкиОбмена.Организация, "Организация"));
		НастройкиОбмена.Вставить("ИдентификаторКонтрагента", ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(
		НастройкиОбмена.Контрагент, "Контрагент"));
		
		НастройкиОбмена.Вставить("ПрофильНастроекЭДО", Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.БыстрыйОбмен));
		НастройкиОбмена.Вставить("СоглашениеЭД", "");
		НастройкиОбмена.Вставить("ВерсияФормата", ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML2());
		
		НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
		Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия10);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтруктурОбмена = ЭлектронныеДокументыСлужебный.СформироватьХМЛФайлыДокументов(МассивСсылокНаОбъект,
		НастройкиОбъектов);
		
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
		ПолноеИмяФайла = ЭлектронныеДокументыСлужебный.ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена);
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЭД.Добавить();
		НоваяСтрока.ПолноеИмяФайла = ПолноеИмяФайла;
		СтруктураОбмена.Свойство("ПолноеИмяДопФайла", НоваяСтрока.ПолноеИмяДопФайла);
		СтруктураОбмена.Свойство("ИдентификаторДопФайла", НоваяСтрока.ИдентификаторДопФайла);
		
		НаименованиеФайла = БыстрыйОбменИмяСохраняемогоФайла(СтруктураОбмена.СтруктураЭД.ВладелецЭД);
		НоваяСтрока.НаименованиеФайла = НаименованиеФайла;
		НоваяСтрока.НаправлениеЭД = СтруктураОбмена.СтруктураЭД.НаправлениеЭД;
		НоваяСтрока.Контрагент = СтруктураОбмена.СтруктураЭД.Контрагент;
		НоваяСтрока.УникальныйИдентификатор = СтруктураОбмена.СтруктураЭД.ВладелецЭД.УникальныйИдентификатор();
		НоваяСтрока.ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		
		НоваяСтрока.ДвоичныеДанныеПакета = СформироватьЭДПрисоединенныйФайлПакетаТакском(СтруктураОбмена);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицаЭД) Тогда
		ПоместитьВоВременноеХранилище(ТаблицаЭД, АдресХранилища);
	Иначе
		АдресХранилища = Неопределено;
		
		ВызватьИсключение  НСтр("ru = 'Произошла ошибка при формировании пакета однократной сделки." + Символы.ПС
								+" Подробности см. Журнал Регистрации'");

	КонецЕсли;
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция СформироватьЭДПрисоединенныйФайлПакетаТакском(СтруктураОбмена) Экспорт
	
	СтруктураОбмена.СтруктураЭД.Вставить("ПрофильНастроекЭДО", Новый Структура("СпособОбменаЭД",
		Перечисления.СпособыОбменаЭД.БыстрыйОбмен));
	
	ТекстОшибки = "";
	АдресХранилища = Неопределено;
	
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("send", Новый УникальныйИдентификатор);
	Если СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		НаименованиеФайла = СтруктураОбмена.Наименование;
	Иначе
		НаименованиеФайла = БыстрыйОбменИмяСохраняемогоФайла(СтруктураОбмена.СтруктураЭД.ВладелецЭД);
	КонецЕсли;
	
	ИмяФайлаПДФ = ЭлектронныеДокументыСлужебный.СформироватьДопДокумент(СтруктураОбмена, Перечисления.ФорматыФайловОбменаЭД.PDF);
	КопироватьФайл(ИмяФайлаПДФ, АдресКаталога + НаименованиеФайла + ".pdf");

	
	КопироватьФайл(СтруктураОбмена.ПолноеИмяФайла, АдресКаталога + НаименованиеФайла + ".xml");
	
	СтруктураФайловЭД = Новый Структура;
	СтруктураФайловЭД.Вставить("ГлавныйФайл", НаименованиеФайла + ".xml");
	СтруктураФайловЭД.Вставить("ФайлДляПросмотра", НаименованиеФайла + ".pdf");
	
	ПутьКДопФайлу = "";
	Если СтруктураОбмена.Свойство("ПолноеИмяДопФайла", ПутьКДопФайлу) И ЗначениеЗаполнено(ПутьКДопФайлу) Тогда
		ИмяДопФайла = Строка(СтруктураОбмена.ИдентификаторДопФайла);
		КопироватьФайл(ПутьКДопФайлу, АдресКаталога + ИмяДопФайла + ".xml");
		СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяДопФайла + ".xml");
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("Картинки") И ЗначениеЗаполнено(СтруктураОбмена.Картинки) Тогда
		ПутьКДопФайлу = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураОбмена.Картинки);
		ДвоичныеДанныеФайла.Записать(ПутьКДопФайлу);
		КопироватьФайл(ПутьКДопФайлу, АдресКаталога + "Additional files" + ".zip");
		СтруктураФайловЭД.Вставить("ДополнительныйФайл", "Additional files" + ".zip");
		УдалитьФайлы(ПутьКДопФайлу);
	КонецЕсли;
	
	// Формируем meta.xml.
	ЭлектронныеДокументыВнутренний.СформироватьЭДТранспортнойИнформацииТакском(СтруктураОбмена.СтруктураЭД,
	СтруктураФайловЭД, АдресКаталога, ТекстОшибки);
	
	// Формируем card.xml.
	ЭлектронныеДокументыВнутренний.СформироватьЭДКарточкиТакском(СтруктураОбмена.СтруктураЭД, АдресКаталога, ТекстОшибки);
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ЗипКонтейнер = Новый ЗаписьZipФайла();
		ИмяФайлаАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");

		ЗипКонтейнер.Открыть(ИмяФайлаАрхива);
		
		ОбъектыДобавляемыеВАрхив = АдресКаталога + "*";
		ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив, РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
		РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		
		Попытка
			ЗипКонтейнер.Записать();
			ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ИмяФайлаАрхива);
		Исключение
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Формирование пакета ЭД - однократная сделка'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		УдалитьФайлы(ИмяФайлаАрхива);

	Иначе
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураОбмена.ВидЭД,
			ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УдалитьФайлы(АдресКаталога);
	Возврат ДвоичныеДанныеПакета;
	
КонецФункции

Функция БыстрыйОбменИмяСохраняемогоФайла(ВладелецЭД)
	
	НаименованиеФайла = "";
	ЭлектронныеДокументыПереопределяемый.ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла);
	Если ЗначениеЗаполнено(ВладелецЭД) И НЕ ЗначениеЗаполнено(НаименованиеФайла) Тогда
		
		Если ТипЗнч(ВладелецЭД) = Тип("СправочникСсылка.Организации") Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Наименование");
			ШаблонФайла = НСтр("ru = '%1'");
			НаименованиеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФайла, СтруктураРеквизитов.Наименование);
			
		Иначе
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Номер, Дата");		
			ШаблонФайла = НСтр("ru = '%1 № %2 от %3'");
			НаименованиеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФайла, Строка(ТипЗнч(ВладелецЭД)),
															СтруктураРеквизитов.Номер, Формат(СтруктураРеквизитов.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
		НаименованиеФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеФайла);
		
	КонецЕсли;
	
	Возврат НаименованиеФайла;
	
КонецФункции

#КонецЕсли