Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мУдалятьДвижения;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;

Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция добавляет инициалы к фамилии.
// Параметры:
//  Фамилия  - строка, в которой содержится фамилия (необязательный),
//  Имя      - строка, в которой содержится имя (необязательный),
//  Отчество - строка, в которой содержится отчество (необязательный).
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
			?(НЕ ПустаяСтрока(Отчество) , 
			Лев(Отчество,1)+".", ""), ""), "");

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция формирует табличный документ с печатной формой авансового отчета.,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвансовогоОтчета()

	ПечатьВИностраннойВалюте = (ВалютаДокумента <> мВалютаРегламентированногоУчета);
	
	Если ПечатьВИностраннойВалюте Тогда
		Макет = ПолучитьМакет("АвансовыйОтчетВИностраннойВалюте");
	Иначе
		Макет = ПолучитьМакет("АвансовыйОтчет");
	КонецЕсли;
	
	// Запрос по Шапке.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата                  КАК ДатаДокумента,
	|	ФизЛицо               КАК ПодотчетноеЛицо,
	|	ФизЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	Организация           КАК Руководители,
	|	Организация.Ссылка    КАК Организация,
	|	НазначениеАванса,
	|	Подразделение,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение.Код КАК КодПодразделения,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента,
	|	КурсДокумента,
	|	КратностьДокумента,
	|	КоличествоДокументов,
	|	КоличествоЛистов,
	|	ВалютаДокумента.Представление       КАК ПредставлениеВалютыДокумента,
	|	СуммаДокумента                      КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет_АвансовыйОтчет";
	

	// ТИТУЛЬНЫЙ ЛИСТ

	// Получаем все остатки авансов, выданных этому подотчетнику по органиации и в валюте этого авансового отчета, на момент отчета
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Валюта"     ,       ВалютаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо"    ,       ФизЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка",       Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ОтражатьВБухУчете", ОтражатьВБухгалтерскомУчете);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Валюта = &Валюта
	|				И ФизЛицо = &ФизЛицо
	|				И ВЫБОР
	|					КОГДА &ОтражатьВБухУчете
	|						ТОГДА РасчетныйДокумент.ОтражатьВБухгалтерскомУчете
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки";

	ПредыдущиеАвансы = Запрос.Выполнить().Выгрузить();

	СуммаДоДокумента = ПредыдущиеАвансы.Итог("СуммаВзаиморасчетов"); 

	// Отнимем сумму документов аванса с первой закладки
	// (только в случае если раньше суммы по этим документам не были включены в другой авансовый отчет! -
	//  проверяем, чтобы сумма взаиморасчетов по документу равнялась остатку по регистру)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
    Запрос.УстановитьПараметр("Организация", Организация);
    Запрос.УстановитьПараметр("Валюта"     , ВалютаДокумента);
	Запрос.УстановитьПараметр("ФизЛицо"    , ФизЛицо);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый Граница(Дата, ВидГраницы.Исключая));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросПоДокументам.ПолученоИзКассы КАК ПолученоИзКассы,
	|	ЗапросПоДокументам.ПолученоПоБанковскимКартам КАК ПолученоПоБанковскимКартам
	|ИЗ
	|(ВЫБРАТЬ
	|	Док.Ссылка КАК ДокументАванса,
	|	СУММА(Док.СуммаВзаиморасчетов) КАК ПолученоИзКассы,
	|	0 КАК ПолученоПоБанковскимКартам
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ 
	|	Док.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.ДокументАванса ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК Док ГДЕ Док.Ссылка = &ТекущийДокумент И Док.ДокументАванса ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	0,
	|	СУММА(Док.СуммаВзаиморасчетов)
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК Док
	|ГДЕ 
	|	Док.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.ДокументАванса ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК Док ГДЕ Док.Ссылка = &ТекущийДокумент И Док.ДокументАванса ССЫЛКА Документ.ПлатежноеПоручениеИсходящее)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	0,
	|	СУММА(Док.СуммаВзаиморасчетов)
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК Док
	|ГДЕ 
	|	Док.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Док.ДокументАванса ИЗ Документ.АвансовыйОтчет.ВыданныеАвансы КАК Док ГДЕ Док.Ссылка = &ТекущийДокумент И Док.ДокументАванса ССЫЛКА Документ.ПлатежныйОрдерСписаниеДенежныхСредств)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка) КАК ЗапросПоДокументам
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|					&ДатаОстатка, 
	|					Валюта = &Валюта 
	|						И Организация = &Организация
	|						И ФизЛицо = &ФизЛицо) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
    |		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент = ЗапросПоДокументам.ДокументАванса 
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток = ЗапросПоДокументам.ПолученоИзКассы
	|		ИЛИ ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток = ЗапросПоДокументам.ПолученоПоБанковскимКартам"; 

	ТаблицаПолученныхАвансов = Запрос.Выполнить().Выгрузить();

	ПолученоИзКассы            = ТаблицаПолученныхАвансов.Итог("ПолученоИзКассы");
	ПолученоПоБанковскимКартам = ТаблицаПолученныхАвансов.Итог("ПолученоПоБанковскимКартам");
	ИтогоПолучено              = ПолученоИзКассы + ПолученоПоБанковскимКартам;

	СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы - ПолученоПоБанковскимКартам;

	// Выводим титульный лист авансового отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Титул");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	
	ФамилияИмяОтчествоФизЛица                             = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ПодотчетноеЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоПодотчетного                        = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ФамилияИмяОтчествоПодотчетного;
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);

	ОбластьМакета.Параметры.ПолученоИзКассы            = ПолученоИзКассы;
	ОбластьМакета.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
	
	Если ПечатьВИностраннойВалюте Тогда
		ОбластьМакета.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассы;
		ОбластьМакета.Параметры.ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартам;		
		ОбластьМакета.Параметры.Валюта = ВалютаДокумента.Наименование;
	КонецЕсли;

	Если СуммаДоДокумента >= 0 Тогда
		ОбластьМакета.Параметры.НачальныйОстаток    =   СуммаДоДокумента;
	Иначе
		ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
	ОбластьМакета.Параметры.Израсходовано = Шапка.СуммаДокумента;

	ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Шапка.СуммаДокумента;
	
	Если ОстатокНаКонец >= 0  Тогда
		ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
	Иначе
		ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
	КонецЕсли;

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	Если НЕ ПечатьВИностраннойВалюте Тогда

		ИспСумма     = Окр(Шапка.СуммаДокумента, 2, 1);
		ЦелСумма     = Цел(Шапка.СуммаДокумента);
		КопСумма     = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));

		ОбластьМакета.Параметры.ИзрасходованоРуб    = ЦелСумма;
		ОбластьМакета.Параметры.ИзрасходованоКоп    = Формат(КопСумма,"ЧН=00");

	КонецЕсли;

	ОбластьМакета.Параметры.ДатаДокумента       = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Руководитель        = Руководитель;
	ОбластьМакета.Параметры.ГлавныйБухгалтер    = Бухгалтер;
	ОбластьМакета.Параметры.Бухгалтер           = Бухгалтер;
	ОбластьМакета.Параметры.Кассир              = Кассир;
	Если НЕ ПечатьВИностраннойВалюте Тогда
		ОбластьМакета.Параметры.ОрганизацияПоОКПО   = СведенияОбОрганизации.КодПоОКПО;
	КонецЕсли;
	ОбластьМакета.Параметры.СуммаОтчетаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаДокумента, ВалютаДокумента);

	ОбластьМакета.Параметры.ПредставлениеОрганизации           = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.ПредставлениеГлавногоБухгалтера    = Бухгалтер;
	ОбластьМакета.Параметры.РуководительПредставление          = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПредставление = Руководители.РуководительДолжность;

	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	// ОБОРОТНАЯ СТОРОНА
	ЗапросТовары = Новый Запрос();

	ЗапросТовары.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросТовары.УстановитьПараметр("Валюта",          ЭтотОбъект.ВалютаДокумента);

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("АвансовыйОтчет");
	
	ЗапросТовары.Текст = "
	|ВЫБРАТЬ
	|	Док.ДокументНомер,
	|	Док.ДокументДата,
	|	Док.НаименованиеРасхода,
	|	Док.ПоОтчету,
	|	Док.ПоОтчетуВВалюте,
	|	Док.СуммаНДС,
	|	Док.Договор
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента              КАК ДокументНомер,
	|	АвансовыйОтчет.ДатаВходящегоДокумента               КАК ДокументДата,
	|	""Куплены товары""                                  КАК НаименованиеРасхода,
	|	СУММА(АвансовыйОтчет.Сумма)    КАК ПоОтчету,
	|	СУММА(АвансовыйОтчет.Сумма)                         КАК ПоОтчетуВВалюте,
	|	СУММА(АвансовыйОтчет.СуммаНДС) КАК СуммаНДС,
	|	NULL                                                КАК Договор
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка(1000)),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	0,
	|	АвансовыйОтчет.ДоговорКонтрагента
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(АвансовыйОтчет.Содержание КАК Строка(1000)),
	|	АвансовыйОтчет.ДоговорКонтрагента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|" + СтрокаВыборкиПоляСодержания + ",
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.Сумма),
	|	СУММА(АвансовыйОтчет.СуммаНДС),
	|	NULL
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчет
	|
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчет.НомерВходящегоДокумента,
	|	АвансовыйОтчет.ДатаВходящегоДокумента,
	|" + СтрокаВыборкиПоляСодержания + "
	|
	|) КАК Док
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.ДокументДата,
	|	Док.ДокументНомер
	|";

	Товар = ЗапросТовары.Выполнить().Выбрать();

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Если ПечатьВИностраннойВалюте Тогда
		ОбластьМакета.Параметры.Валюта = СокрЛП(ВалютаДокумента);
	Конецесли;	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим табличные части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	НомерСтроки   = 0;

	ИтогоПоОтчету        = 0;
	ИтогоПоОтчетуВВалюте = 0;
	СуммаВВалюте = 0;

	Пока Товар.Следующий() Цикл

		ОбластьМакета.Параметры.Заполнить(Товар);
		НомерСтроки = НомерСтроки + 1;
		ОбластьМакета.Параметры.НомерСтроки         = НомерСтроки;
		ОбластьМакета.Параметры.ДокументДата        = Товар.ДокументДата;
		ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(Товар.НаименованиеРасхода);

		Сумма = Товар.ПоОтчету + ?(Шапка.СуммаВключаетНДС, 0, Товар.СуммаНДС);

		ОбластьМакета.Параметры.ПоОтчету  = Сумма;
		ОбластьМакета.Параметры.ПоУчету   = Сумма;
		ИтогоПоОтчету = ИтогоПоОтчету + Сумма;

		Если ПечатьВИностраннойВалюте Тогда
			ОбластьМакета.Параметры.ПоОтчетуВВалюте = Сумма;
			ОбластьМакета.Параметры.ПоУчетуВВалюте = Сумма;
			ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + Сумма;
			СуммаВВалюте = 0;
		Иначе
			ОбластьМакета.Параметры.ПоОтчетуВВалюте = 0;
			ОбластьМакета.Параметры.ПоУчетуВВалюте = 0;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Выводим подвал авансовго отчета
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоОтчету;
	ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоОтчетуВВалюте;
	ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = ФамилияИмяОтчествоПодотчетного;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАвансовогоОтчета()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Аванс_Отчет" Тогда
		ТабДокумент = ПечатьАвансовогоОтчета();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Истина);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидПоступления)));

	Если (ИмяМакета = "Аванс_Отчет") И (ТабДокумент <> Неопределено) И (ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
		Сообщить("Авансовый отчет выведен в валюте взаиморасчетов с подотчетным лицом (" + ВалютаДокумента + ") в форме отличной от унифицированной.");
	КонецЕсли;

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Аванс_Отчет",    "Авансовый отчет");
	СтруктураМакетов.Вставить("СерийныеНомера", "Список серийных номеров");
	СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

// Процедура выполняет заполнение табличной части выданные авансы.
//
Процедура ЗаполнитьВыданныеАвансы() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ФизЛицо",           ФизЛицо);
	Запрос.УстановитьПараметр("ВалютаДокумента",   ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ДатаОстатков",      ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	Запрос.УстановитьПараметр("ОтражатьВБухУчете", ОтражатьВБухгалтерскомУчете);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент КАК ДокументАванса,
	|	Остатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			&ДатаОстатков,
	|			ФизЛицо = &ФизЛицо
	|				И (НЕ РасчетныйДокумент ССЫЛКА Документ.АвансовыйОтчет)
	|				И Валюта = &ВалютаДокумента
	|				И Организация = &Организация
	|				И ВЫБОР
	|					КОГДА &ОтражатьВБухУчете
	|						ТОГДА РасчетныйДокумент.ОтражатьВБухгалтерскомУчете
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК Остатки
	|ГДЕ
	|	Остатки.СуммаВзаиморасчетовОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.РасчетныйДокумент.Дата,
	|	Остатки.РасчетныйДокумент.Номер";

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		#Если Клиент Тогда
		Предупреждение("У подотчетного лица """                           + СокрЛП(ФизЛицо)         +
		               """ отсутствуют выданные авансы,"                  + Символы.ПС              +
		               "за которые он не отчитался перед организацией """ + СокрЛП(Организация)     +
		               """ в валюте взаиморасчетов """                    + СокрЛП(ВалютаДокумента) + """");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаВыданныеАвансы                = ВыданныеАвансы.Добавить();
		СтрокаВыданныеАвансы.ДокументАванса = Выборка.ДокументАванса;
		СтрокаВыданныеАвансы.Сумма          = Выборка.Сумма;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВыданныеАвансы()

// Процедура выполняет заполнение табличной части по приходному ордеру товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (приходный ордер товаров).
//
Процедура ЗаполнитьТоварыПоОснованию(ДокументОснование) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	СкладыВТабличнойЧасти = мУказаниеСкладовВТЧ
	                        ИЛИ (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокТовары.НомерСтроки) КАК НомерСтроки,
	|	ДокТовары.Номенклатура                 КАК Номенклатура,
	|	ДокТовары.СерияНоменклатуры            КАК СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТабличнойЧасти, "
	|	Остатки.Склад                          КАК Склад,", "") + "
	|	СУММА(ДокТовары.Количество)            КАК КоличествоПоСерии,
	|	МАКСИМУМ(Остатки.КоличествоОстаток)    КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ДокТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокТовары.Номенклатура = Остатки.Номенклатура
	|	И ДокТовары.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|	И ДокТовары.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|
	|ГДЕ
	|	ДокТовары.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.СерияНоменклатуры,
	|	ДокТовары.ХарактеристикаНоменклатуры"
	+ ?(СкладыВТабличнойЧасти, ",
	|	Остатки.Склад", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;

	Поставщик = ДокументОснование.Контрагент;
	Выборка   = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СтавкаНДС                  = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		СтрокаТабличнойЧасти.Поставщик                  = Поставщик;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ПриходныйОрдер             = ДокументОснование;
		
		Если СкладыВТабличнойЧасти Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = ДокументОснование.Склад;
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение табличной части по приходному ордеру на товары.
//
// Параметры:
//  ДокументОснование  - ссылка на документ основание (приходный ордер товаров),
//  ДоговорКонтрагента - ссылка на договор контрагента. который нужно подставить в строки ТЧ.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованию(ДокументОснование, ДоговорКонтрагента) Экспорт

	// Сформируем запрос по шапке документа-основания
	ЗапросПоШапке = Новый Запрос;

	ЗапросПоШапке.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , СкладОрдер);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокВозвратнаяТара.Номенклатура                 КАК Номенклатура,"
	+ ?(мУказаниеСкладовВТЧ, "
	|	Остатки.Склад                                  КАК Склад,", "") + "	
	|	СУММА(ДокВозвратнаяТара.Количество)            КАК КоличествоПоСерии,
	|	МАКСИМУМ(Остатки.КоличествоОстаток)            КАК КоличествоОстатокКомпании
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.ВозвратнаяТара КАК ДокВозвратнаяТара
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ДокументОснование) КАК Остатки
	|ПО
	|	ДокВозвратнаяТара.Номенклатура = Остатки.Номенклатура
	|
	|ГДЕ
	|	ДокВозвратнаяТара.Ссылка = &ДокументОснование
	|	И Остатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокВозвратнаяТара.Номенклатура"
	+ ?(мУказаниеСкладовВТЧ, ",
	|	Остатки.Склад", "");	

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = ВозвратнаяТара.Добавить();

		СтрокаТабличнойЧасти.Номенклатура       = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество         = Мин(Выборка.КоличествоОстатокКомпании, Выборка.КоличествоПоСерии);
		СтрокаТабличнойЧасти.Контрагент         = ДокументОснование.Контрагент;
		СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорКонтрагента;
		СтрокаТабличнойЧасти.ПриходныйОрдер     = ДокументОснование;

		Если мУказаниеСкладовВТЧ Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = ДокументОснование.Склад;
		КонецЕсли;

	КонецЦикла; // Выборка.Следующий()

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

// Процедура выполняет заполнение табличной части выданные авансы и прочее.
//
Процедура ЗаполнитьНаОснованииРКО(ДокументОснование)

	ФизЛицо = ДокументОснование.Контрагент;

	//Валюта авансового отчета  должна быть равна валюте взаиморасчетов с подотчетником, выбранной в РКО.
	ВалютаДокумента = ДокументОснование.ВалютаВзаиморасчетовРаботника;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	// Вид поступления - по умолчанию "На склад".
	ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");

	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокОснование",    ДокументОснование);
	Запрос.УстановитьПараметр("МоментДокумента", КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент                КАК РасчетныйДокумент,
	|	Остатки.СуммаВзаиморасчетовОстаток       КАК СуммаИзрасходовано
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&МоментДокумента, РасчетныйДокумент = &ДокОснование) КАК Остатки
	|";

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Шапка = Результат.Выбрать();
	Шапка.Следующий();

	СтрокаАвансы                = ВыданныеАвансы.Добавить();
	СтрокаАвансы.ДокументАванса = Шапка.РасчетныйДокумент;
	СтрокаАвансы.Сумма          = Шапка.СуммаИзрасходовано;

КонецПроцедуры // ЗаполнитьНаОснованииРКО()

// Процедура выполняет заполнение документа по документу-основанию.
//
// Параметры:
//  Основание - ссылка на документ основание (приходный ордер товаров).
//
Процедура ОбработкаЗаполненияУпр(Основание)

	Перем ДоговорКонтрагента;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
	   И Основание.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ВидПоступления   = Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
		СкладОрдер       = Основание;
		ФизЛицо          = Основание.ФизЛицо;
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;
		ВалютаДокумента  = мВалютаРегламентированногоУчета;

		Если ЗначениеЗаполнено(Основание.Контрагент) Тогда
			ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, 
			                                          Основание.Контрагент, мСтруктураПараметровДляПолученияДоговора);

			Если ЗначениеЗаполнено(ДоговорКонтрагента)
			   И ЗначениеЗаполнено(ДоговорКонтрагента.ТипЦен) Тогда

				// Тип цен заполняем, только если в договоре указаны тип цен контрагента (он - поставщик).
				ТипЦенКонтрагента = ДоговорКонтрагента.ТипЦен;
				Если ТипЗнч(ТипЦенКонтрагента) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
					ТипЦен = ТипЦенКонтрагента.ТипЦеныНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Основание.Проведен Тогда
			// Заполним табличные части по приходному ордеру на товары.
			ЗаполнитьТоварыПоОснованию(Основание);
			ЗаполнитьВозвратнуюТаруПоОснованию(Основание, ДоговорКонтрагента);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
	        И Основание.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заолненим теперь на оснвании РКО.
		ЗаполнитьНаОснованииРКО(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполненияУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверка соответствия организации указанной в документе
// и организации в реквизитах табличной части.
//
// Параметры:
//  ДокументОбъект              - объект проводимого документа,
//  ИмяТабличнойЧасти           - табличная часть документа,
//  ТаблицаЗначений             - таблица значений, содержащая данные табличной части,
//  СписокПроверяемыхРеквизитов - список значений, список проверяемых реквизитов табличной части,
//  Отказ                       - флаг отказа в проведении,
//  Заголовок                   - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений,
                                              СписокПроверяемыхРеквизитов, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """     + СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Цикл по проверяемым реквизитам
		Для каждого ЭлементСписка Из СписокПроверяемыхРеквизитов Цикл
			ПроверяемоеЗначение = СтрокаТаблицы[ЭлементСписка.Значение];
			ТекстСообщения      = ЭлементСписка.Представление;

			// Если не заполнен реквизит или организация, то не ругаемся.
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
			   И ЗначениеЗаполнено(ПроверяемоеЗначение)
			   И ДокументОбъект.Организация <> ПроверяемоеЗначение Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
				                 + "выбран " + ТекстСообщения + ", не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюВТабличнойЧасти()

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПрихода() 

	Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, СтруктураШапкиДокумента, ТаблицаДвижений, СтатусПартии, СпособОценкиМПЗ)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		
		Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				СтрокаДвижений.Склад = СтрокаТЧ.ПриходныйОрдерСклад;
			КонецЕсли;
		Иначе
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;
		
		Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			СтрокаДвижений.ДокументОприходования = Неопределено;
		Иначе
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		СтрокаДвижений.СтатусПартии          = СтатусПартии;
		СтрокаДвижений.Качество              = Справочники.Качество.Новый;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		ОбособленныйУчет = СтрокаТЧ .ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
		        И ЗначениеЗаполнено(СтрокаТЧ.Заказ), СтрокаТЧ.Заказ, Неопределено);

		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Индексы.Добавить("НомерСтроки");

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий И НЕ НДСВключенВСтоимость Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;


		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()	

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	ТаблицаТары.Индексы.Добавить("НомерСтроки");

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТары.Колонки.Сумма.Имя = "Стоимость";

	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;

	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаДоговора, Дата);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтрокаТаблицы.ВалютаДоговора, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураКурса.Курс, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураКурса.Кратность);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате = РезультатЗапросаПоОплате.Выгрузить();

	ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента);

	Возврат ТаблицаПоОплате;

КонецФункции // ПодготовитьТаблицуПоОплате()

Процедура ПодготовитьТаблицуПоОплатеУпр(ТаблицаПоОплате, СтруктураШапкиДокумента)

	ТаблицаПоОплате.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо рассчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаПоОплате Цикл

		// Суммы пересчитаем в валюту упр. учета.
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуПоОплатеУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента)

	ТаблицаПрочие = РезультатЗапросаПоПрочее.Выгрузить();

	ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента);

	Возврат ТаблицаПрочие;

КонецФункции // ПодготовитьТаблицуПрочие()

Процедура ПодготовитьТаблицуПрочиеУпр(ТаблицаПрочие, СтруктураШапкиДокумента)

	КолонкаСумма = ТаблицаПрочие.Колонки["Сумма"];
	КолонкаСуммаУпр = ТаблицаПрочие.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));
	КолонкаСтоимостьУпр = ТаблицаПрочие.Колонки.Добавить("Стоимость", Новый ОписаниеТипов(КолонкаСумма.ТипЗначения));
	
	ТаблицаПрочие.Колонки.Добавить("НДСУпр"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	Для Каждого СтрокаТаблицы Из ТаблицаПрочие Цикл

		// Пересчитаем сумму по курсу
		СтрокаТаблицы.СуммаУпр = (СтрокаТаблицы.Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.СуммаНДС, 0)) *
			((СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) /
			(СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета * СтруктураШапкиДокумента.КратностьДокумента));

		СтрокаТаблицы.Стоимость  = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.СуммаНДС, 0);
		                          
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;


КонецПроцедуры // ПодготовитьТаблицуПрочиеУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидПоступления, Организация, ФизЛицо, ВалютаДокумента");
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	   И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0) Тогда
		СтруктураОбязательныхПолей.Вставить("СкладОрдер");
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Если склад указывается в ТЧ, то в шапке он может быть не заполнен или указан неправильно,
	// это ни на что не влияет, потому что при проведении используется склад в ТЧ.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И Не СтруктураШапкиДокумента.СкладВТабличнойЧасти 
	   И СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять поступление на НТТ!", Отказ, Заголовок);
	КонецЕсли;

	// Израсходованная сумма
	Если ВыданныеАвансы.Итог("Сумма") > СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Израсходованная сумма превышает сумму по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Выданные авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоАвансам          - таблица значений, содержащая данные для проведения и проверки ТЧ "ВыданныеАвансы",
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(ТаблицаПоАвансам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументАванса, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверка организации
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДокументАвансаОрганизация", "документ аванса");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", ТаблицаПоАвансам, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТовары();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Товары", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);


	Если СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		// Складов с видом НТТ здесь быть не должно.
		УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");
	КонецЕсли;

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверка организации
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ОрганизацияДокументаПолучения", "приходный ордер на товары");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, "Товары", ТаблицаПоТоварам, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

	// Проверить правильность заполнения для строк по НДС.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроверитьЧтоВсеЗаполненоДляНДС(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ,
	                                                       Заголовок, "ВидСклада");

	// Проверка соответствия количества серийных номеров количеству товаров.
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары");

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОплатаПоставщикам";
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Контрагент, ДоговорКонтрагента, Сумма");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Проверим заполнение заказов поставщикам
	УправлениеВзаиморасчетами.ПроверитьСделкуВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, Отказ, Заголовок);

	// Проверка организации, договор взаиморасчетов проверяем всегда.
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДоговорОрганизация", "договор контрагента");
	СписокПроверяемыхРеквизитов.Добавить("СделкаОрганизация",  "документ сделки");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоОплате, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоПрочее         - таблица значений, содержащая результат запроса с данными для проведения и проверки ТЧ Прочее
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	РеквизитыСтр = "Содержание, Сумма, СтатьяЗатрат";

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Прочее", Новый Структура(РеквизитыСтр), Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);
	
	// Проверить правильность заполнения для строк по НДС.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПроверитьЧтоВсеЗаполненоДляНДС(ЭтотОбъект, "Прочее", ТаблицаПоПрочее, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПрочее()

Процедура ПроверитьСоответствиеВалютДоговоровИДокумента(ИмяТабличнойЧасти, Отказ, Заголовок, ПредставлениеТабличнойЧасти = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабЧасть.НомерСтроки,
	|	ТабЧасть.ДоговорКонтрагента,
	|	ТабЧасть.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТабЧасть.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.АвансовыйОтчет." + ИмяТабличнойЧасти + " КАК ТабЧасть
	|ГДЕ
	|	Ссылка = &Ссылка
	|		И ТабЧасть.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах ЕСТЬ НЕ NULL";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если ПустаяСтрока(ПредставлениеТабличнойЧасти) Тогда
		ПредставлениеТабличнойЧасти = Ссылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
	
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		
			Если Выборка.ВалютаВзаиморасчетов <> ВалютаДокумента
				И НЕ Выборка.РасчетыВУсловныхЕдиницах Тогда
				ТекстСообщения = "Строка " + Выборка.НомерСтроки + " табличной части " + ПредставлениеТабличнойЧасти + ":
				|    валюта договора должна быть равна валюте регламентированного учета или договор должен иметь признак расчетов в условных единицах.";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
		
		Иначе
		
			Если Выборка.ВалютаВзаиморасчетов <> ВалютаДокумента Тогда
				ТекстСообщения = "Строка " + Выборка.НомерСтроки + " табличной части " + ПредставлениеТабличнойЧасти + ":
				|    валюта договора должна быть равна валюте документа.";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = УправлениеЗапасами.СформироватьСтруктуруОбязательныхПолейТара();
	СтруктураОбязательныхПолей.Вставить("Контрагент");
	СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		СтруктураОбязательныхПолей.Вставить("ПриходныйОрдер");
	КонецЕсли;
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки заполнения.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти,СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		// Складов с видом НТТ здесь быть не должно.
		УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");
	КонецЕсли;
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, Отказ, Заголовок);

	// Проверка организации, договор взаиморасчетов проверяем всегда.
	СписокПроверяемыхРеквизитов = Новый СписокЗначений;
	СписокПроверяемыхРеквизитов.Добавить("ДоговорОрганизация",            "договор контрагента");
	СписокПроверяемыхРеквизитов.Добавить("СделкаОрганизация",             "документ сделки");
	СписокПроверяемыхРеквизитов.Добавить("ОрганизацияДокументаПолучения", "приходный ордер на товары");
	ПроверитьОрганизациюВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоТаре, СписокПроверяемыхРеквизитов, Отказ, Заголовок);

	// Если ведение взаиморасчетов "По заказам", "Сделка" должна быть заполнена.
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И СтрокаТаблицы.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Сделка""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ,
	                                                       Заголовок, "ВидСклада");
														   
	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Заказ", ложь,, Отказ, Заголовок);
	
	ПроверитьСоответствиеВалютДоговоровИДокумента("ВозвратнаяТара", Отказ, Заголовок, "Тара");
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Формируем движения по ТЧ "ВыданныеАвансы"
//
// Параметры: 
//  СтруктураШапкиДокумента                  - выборка из результата запроса по шапке документа
//  ВыборкаПоВыданныеАвансы		             - выборка из результата запроса по ТЧ "ВыданныеАвансы" 
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//  Режим									 - режим проведения
//  Отказ   			                     - флаг отказа в проведении.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, Режим, Отказ, Заголовок)

	// Если НДС и не включаются в сумму документа, то его надо добавить 
	// к общей сумме
	Налоги = 0;
	НалогиПрочее = 0;
	Если СуммаВключаетНДС = 0 Тогда
		Налоги = Товары.Итог("СуммаНДС");
		НалогиПрочее = Прочее.Итог("СуммаНДС");
	КонецЕсли;

	// Следующие переменные будут содержать текущие (непогашенные) остатки сумм
	// по табличным частям документа
	ОстПогСуммаТовары = Товары.Итог("Сумма") + Налоги;
	ОстПогСуммаОплата = ОплатаПоставщикам.Итог("Сумма");
	ОстПогСуммаПрочее = Прочее.Итог("Сумма") + НалогиПрочее;
	
	НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаПоВыданныеАвансы Цикл

		Если Отказ Тогда
			Продолжить;
		КонецЕсли;

		ОстПогРКО = СтрокаТаблицы.Сумма;
		
		// Будем последовательно списывать суммы по табличным частям документа,
		// делая движения с соответствующими кодами операций
		Пока ОстПогРКО > 0 Цикл
			
			// ОстПог - текущий остаток по текущей ТЧ документа, который надо погасить
			Если ОстПогСуммаТовары > 0 Тогда
				ОстПог					= ОстПогСуммаТовары;  
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетЗакупкаТМЦ;
				ОстПогСуммаТовары	= ОстПогСуммаТовары - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаОплата > 0 Тогда
				ОстПог					= ОстПогСуммаОплата;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетОплатаПоставщикам;
				ОстПогСуммаОплата		= ОстПогСуммаОплата - Мин(ОстПог, ОстПогРКО);
			ИначеЕсли ОстПогСуммаПрочее > 0 Тогда
				ОстПог					= ОстПогСуммаПрочее;
				//КодОперации				= Перечисления.КодыОпераций.АвансовыйОтчетПрочее;
				ОстПогСуммаПрочее		= ОстПогСуммаПрочее - Мин(ОстПог, ОстПогРКО);
			Иначе
				Прервать;
			КонецЕсли;
				
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			// Измерения
			СтрокаДвижений.Организация	        = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.ФизЛицо              = ФизЛицо;
			СтрокаДвижений.РасчетныйДокумент    = СтрокаТаблицы.ДокументАванса;
			СтрокаДвижений.Валюта               = ВалютаДокумента;

			// Ресурсы
			СтрокаДвижений.СуммаВзаиморасчетов  = Мин(ОстПог, ОстПогРКО);
			СтрокаДвижений.СуммаУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			ОстПогРКО = ОстПогРКО - СтрокаДвижений.СуммаВзаиморасчетов;
			
		КонецЦикла;
			
	КонецЦикла; 

	// Если все суммы выданных авансов списаны, а суммы по расходам списаны неполностью,
	// то возникает перерасход
	Перерасход = ОстПогСуммаТовары + ОстПогСуммаОплата + ОстПогСуммаПрочее;

	Если Перерасход > 0 И НЕ Отказ Тогда

		СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		// Измерения
		СтрокаДвижений.Организация	        = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ФизЛицо              = ФизЛицо;
		СтрокаДвижений.РасчетныйДокумент    = Ссылка;
		СтрокаДвижений.Валюта               = ВалютаДокумента;

		// Ресурсы
		СтрокаДвижений.СуммаВзаиморасчетов  = Перерасход;
		СтрокаДвижений.СуммаУпр             = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.СуммаВзаиморасчетов,
								ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента,
								СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, КратностьДокумента,
								СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоПодотчетникам()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартий(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок)

	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок);

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок)

	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыВРознице;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;

		РезультатЗапроса = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,
		                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный));

		Если Не РезультатЗапроса.Пустой() Тогда
			НаборДвижений = Движения.ТоварыВРознице;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса.Выгрузить(), ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
	Иначе

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвиженийТоварыНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыКПолучениюНаСклады.
		НаборДвижений = Движения.ТоварыКПолучениюНаСклады;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПолучениюНаСклады.ВыполнитьРасход();
		КонецЕсли;

		// Если товары поступили по ордеру без права продажи, то надо снять резерв
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру 
		   И СкладОрдер.БезПраваПродажи Тогда

			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(СкладОрдер,"ДокументРезерва");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(СкладОрдер,"ДокументРезерва");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// Резервирование по заказам покупателей
		
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит Заказ пуст)
	ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
		Если (Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ))
		 ИЛИ (ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
		   И  СтрокаТаблицы.Заказ.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
			ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТоварамЗаказамПокупателей.Колонки.Заказ.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗаказамПокупателей, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();
		
	КонецЕсли;
	
		// Теперь зарезервируем возвратную тару
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказП пуст)
	ТаблицаПоТареЗаказамПокупателей = ТаблицаПоТаре.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТареЗаказамПокупателей.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТареЗаказамПокупателей.Получить(Сч);
		Если (Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ))
		 ИЛИ (ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
		   И  СтрокаТаблицы.Заказ.Заказчик = Ссылка.СкладОрдер) Тогда             // Резерв в это случае делать не надо.
			ТаблицаПоТареЗаказамПокупателей.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаПоТареЗаказамПокупателей.Количество() > 0 Тогда

		ТаблицаПоТареЗаказамПокупателей.Колонки.Заказ.Имя = "ДокументРезерва";

		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийРезервы = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвиженийРезервы.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийРезервы.Скопировать();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареЗаказамПокупателей, ТаблицаДвижений);


		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		ТаблицаДвижений.Очистить();

	КонецЕсли;

	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить( "СтатусПартии",          Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить( "РежимПроведения",       РежимПроведения);
	ДопПараметры.Вставить( "ИмяРеквизитаЗаказ",     "Заказ");
	ДопПараметры.Вставить( "ЗаказВШапке",           Ложь);
	ДопПараметры.Вставить( "ИмяТабЧасти",           "Товары");
	
	ТабИсходная = ТаблицаПоТоварам.Скопировать();
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);

	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
	ТабИсходная.Очистить();
	ТабИсходная = ТаблицаПоТаре.Скопировать();
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ДопПараметры.Вставить( "ИмяТабЧасти",  "ВозвратнаяТара");
	
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам( ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;

	Если ОтражатьВУправленческомУчете Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		
		НаборДвижений = Движения.ПартииТоваровНаСкладах;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, ТаблицаДвижений, ОпределитьСтатусПартииПрихода(), УчетнаяПолитика.СпособОценкиМПЗ);
		
		// Код операции - поступление
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Поступление, "КодОперации");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаДвижений.Очистить();
			
			ТаблицаПартииПоОрдерам = ТаблицаПоТоварам.Скопировать();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			Сч = 0;
			Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
				Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Иначе

					// Документ оприходования - приходный ордер
					СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
					// Устанавливаем склад в склад приходного ордера
					СтрокаТаблицы.Склад = СтрокаТаблицы.ПриходныйОрдерСклад;
					
					Если НЕ СтрокаТаблицы.ВестиПартионныйУчетПоСериям Тогда
						СтрокаТаблицы.СерияНоменклатуры = Неопределено;
					КонецЕсли;
					
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда

				// Заполним таблицу движений.
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
				
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
				ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

				Для каждого Строка Из ТаблицаДвижений Цикл
					Строка.Количество = - Строка.Количество;
				КонецЦикла;

				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров,ТаблицаДвижений,Проект,Дата,"Закупки");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);
			
		КонецЕсли;
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
		// ПРОЧЕЕ ПО РЕГИСТРУ Закупки.
		
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийЗакупки = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
		
		// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
		КопияТаблицыПрочее = ТаблицаПоПрочее.Скопировать();
		КопияТаблицыПрочее.ЗагрузитьКолонку(КопияТаблицыПрочее.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
		
		КопияТаблицыПрочее.Колонки.НДС   .Имя = "_НДС";
		КопияТаблицыПрочее.Колонки.НДСУпр.Имя = "НДС";
		
		Если КопияТаблицыПрочее.Колонки.Найти("Количество")=Неопределено Тогда
			КопияТаблицыПрочее.Колонки.Добавить("Количество",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыПрочее,ТаблицаДвижений,Проект,Дата,"Закупки");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыПрочее, ТаблицаДвижений);
			
		КонецЕсли;

		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументЗакупки");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		
		НаборДвижений = Движения.ПартииТоваровНаСкладах;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
		
		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТаре, СтруктураШапкиДокумента, ТаблицаДвижений, 
		Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, УчетнаяПолитика.СпособОценкиМПЗ);
		
		// Код операции - поступление
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Поступление, "КодОперации");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// При поступлении по ордеру нужно сторнировать партию ордера
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

			ТаблицаДвижений.Очистить();
			
			ТаблицаПартииПоОрдерам = ТаблицаПоТаре.Скопировать();
			ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");
			
			//Удалим не нужные строки (которые без права продажи).
			КолвоЭлементов = ТаблицаПартииПоОрдерам.Количество();
			Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам[КолвоЭлементов - ОбратныйИндекс];
				Если СтрокаТаблицы.БезПраваПродажи Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				КонецЕсли;

			КонецЦикла;

			// Документ оприходования - приходный ордрер
			Для каждого СтрокаТаблицы из ТаблицаПартииПоОрдерам Цикл
				СтрокаТаблицы.ДокументОприходования = СтрокаТаблицы.ДокументПолучения;
			КонецЦикла;
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПартииПоОрдерам, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			Для каждого Строка Из ТаблицаДвижений Цикл
				Строка.Количество = - Строка.Количество;
			КонецЦикла;

			ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
			
			// Код операции - поступление по ордеру (сторно)
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");

			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

Процедура  ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, знач СтатусПартии)

	Сч = 0;

	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.Заказ.Заказчик = СкладОрдер Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.Заказ, 
			                                                       СтрокаТаблицы.Количество, 
			                                                       СтрокаТаблицы.Номенклатура, 
			                                                       ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено,СтрокаТаблицы.ХарактеристикаНоменклатуры), 
			                                                       СтрокаТаблицы.ЕдиницаИзмерения,
			                                                       СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Проводит табличную часть "Оплата поставщикам" по регистрам
//
// Параметры:
//  ТаблицаПоОплатаПоставщикам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатамПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ТаблицаДвижений = Движения.ВзаиморасчетыСКонтрагентами.ВыгрузитьКолонки();
	
	Для каждого СтрокаОплаты Из ТаблицаПоОплатамПоставщикам Цикл
	
		СтрокаДвижения = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаОплаты);
		
		ТекущаяСделка = УправлениеВзаиморасчетами.ОпределитьСделку(СтрокаОплаты, СтрокаОплаты);
		СтрокаДвижения.Сделка = ТекущаяСделка;
	
	КонецЦикла;
	
	Движения.ВзаиморасчетыСКонтрагентами.мПериод           = Дата;
	Движения.ВзаиморасчетыСКонтрагентами.мТаблицаДвижений  = ТаблицаДвижений;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Движения.ВзаиморасчетыСКонтрагентами.КонтрольОстатков(ЭтотОбъект, "ОплатаПоставщикам", СтруктураШапкиДокумента, Отказ, Заголовок, "СуммаВзаиморасчетов");
	КонецЕсли;
					
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
	НаборДвижений   = Движения.РасчетыСКонтрагентами;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОплатамПоставщикам, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты, "РасчетыВозврат"); 
	
	НаборДвижений.мПериод           = Дата;
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ОплатаПоставщикамУпр()

// По результатам запросов формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре              - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоВыданныеАвансы    - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоВыданныеАвансы",
//  ТаблицаПоОплатаПоставщикам - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоОплатаПоставщикам",
//  ТаблицаПоПрочее            - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоПрочее",
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента, ТаблицаПоОплатамПоставщикам);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	
	
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента,
	                ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	                Отказ, Заголовок);

	// По партиям, оприходованным по ордеру с парвом продажи, возможно следует выполнить 
	// корректировку списания
	Если ОтражатьВУправленческомУчете
		И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру
		И ТипЗнч(СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		И НЕ СкладОрдер.БезПраваПродажи Тогда

		Движения.ПартииТоваровНаСкладах.Записать();
		
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период = Дата;

		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

		Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

		КонецЕсли;
	КонецЕсли;

	//	ДвиженияПоРегистрамВзаиморасчетовДляНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоОплатаПоставщикам, Отказ, Заголовок);

	//ДвиженияРегистровПодсистемыНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее, Отказ, Заголовок);
	ТаблицыДляПроведенияПоНДС = Новый Структура();
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	ТаблицыДляПроведенияПоНДС.Вставить("ТаблицаПоПрочее",  ТаблицаПоПрочее);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДляПроведенияПоНДС, Отказ, Заголовок);
    ДвиженияРегистровПодсистемыНДС_ОплатаПоставщикам(СтруктураШапкиДокумента, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатаПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
	
	Иначе // По ордеру

		// По ордеру нужно сторнировать движения по товарам организаций,
		// если в ордере была указана не та организация.
		// Удалим строки, по которым не нужно делать движений (организации совпадают).
		КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
		КолвоЭлементовКоллекции = КопияТаблицыТоваров.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = КопияТаблицыТоваров[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ОрганизацияДокументаПолучения = СтруктураШапкиДокумента.Организация Тогда
				КопияТаблицыТоваров.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		Если КопияТаблицыТоваров.Количество() > 0 Тогда // Есть что проводить.

			// Вначале сторнируем
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТаблицыТоваров, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("ОрганизацияДокументаПолучения"), "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
			КонецЕсли;

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьРасход();
			КонецЕсли;

			// Теперь сделаем движения с правильной организацией.
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыОрганизаций.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);
	
	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить корректировку списания
		Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру тогда
		
		МассивПриходныхОрдеров = Новый Массив;
		Для каждого Строка Из ТаблицаПоТоварам Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого Строка Из ТаблицаПоТаре Цикл
		
			Если  ТипЗнч(Строка.ДокументПолучения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
			   И Строка.БезПраваПродажи =Ложь Тогда
			 МассивПриходныхОрдеров.Добавить(Строка.ДокументПолучения);
			КонецЕсли;
		
		КонецЦикла;
		
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПриходныхОрдеров);
		
		// ПО РЕГИСТРУ СписанныеТовары: формируем записи с указанием приходных ордеров, которые будут обрабатываться при списании
		НаборДвижений = Движения.СписанныеТовары;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		
		Инд = 0;
		Для каждого Элемент Из МассивПриходныхОрдеров Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.ПоступлениеПриходныйОрдер = Элемент;
			Инд = Инд+1;
			НоваяСтрока.НомерСтрокиДокумента = Инд;

		КонецЦикла;
		
		ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
		ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.СписанныеТовары.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

// По результатам запросовформируем движения по регистрам упр. учета.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре              - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоВыданныеАвансы    - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоВыданныеАвансы",
//  ТаблицаПоОплатаПоставщикам - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоОплатаПоставщикам",
//  ТаблицаПоПрочее            - таблица значений, содержащая данные для проведения и проверки ТЧ "ТаблицаПоПрочее",
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоВыданныеАвансы, ТаблицаПоОплатамПоставщикам, ТаблицаПоПрочее,
	Отказ, Заголовок);
	
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ПО РЕГИСТРУ ВзаиморасчетыСПодотчетнымиЛицами.
	ДвиженияПоПодотчетникамУпр(СтруктураШапкиДокумента, ТаблицаПоВыданныеАвансы, РежимПроведения, Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ Закупки
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
	// ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах
	// ТОВАРЫ ПО РЕГИСТРУ ВнутренниеЗаказы
	// ТАРА ПО РЕГИСТРУ ВнутренниеЗаказы
	ТоварыИТараПоРегистрамОстатковИПартий(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоПрочее, Отказ, Заголовок);

	// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами
	ОплатаПоставщикамУпр(РежимПроведения, ТаблицаПоОплатамПоставщикам, Отказ, Заголовок, СтруктураШапкиДокумента);

	// ТАРА ПО РЕГИСТРУ ТоварыПолученные.
	НаборДвижений = Движения.ТоварыПолученные;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	мТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыПолученные.ВыполнитьПриход();
	КонецЕсли;

	Если Не Отказ Тогда

		СтруктДопПараметры = Новый Структура;
		СтруктДопПараметры.Вставить("ЕстьНДС", Истина);
		УправлениеЗатратами.ДвиженияПоПрочимЗатратамУпр( ЭтотОбъект, ТаблицаПоПрочее, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, СтруктДопПараметры);
		
	КонецЕсли;
	
	// По партиям, оприходованным по ордеру с правом продажи, возможно следует выполнить 
	// корректировку списания
	Если ОтражатьВУправленческомУчете
		И ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру
		И ТипЗнч(СкладОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		И НЕ СкладОрдер.БезПраваПродажи Тогда

		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
		
		Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда

			Движения.ПартииТоваровНаСкладах.Записать();

			// Проведение по партиям
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()	

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента, ТаблицаПоОплатамПоставщикам)
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, Дата, "ОплатаПоставщикам", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НДС

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоПрочие  - результат запроса по табличной части "Прочие",
//  СтруктураШапкиДокумента  - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПравильнаяСтрокаТаблицыДляНДС(ДокументОбъект, ТекСтрока, ПредставлениеТабличнойЧасти, Сообщение = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """ + СокрЛП(ТекСтрока.НомерСтроки) +
								  """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
								  
	ЕстьСтавка      = ЗначениеЗаполнено(ТекСтрока.СтавкаНДС);
	ЕстьПоставщик   = ЗначениеЗаполнено(ТекСтрока.Поставщик);
	ЕстьСчетФактура = ЗначениеЗаполнено(ТекСтрока.СчетФактура);
	ТребуетсяСчетФактура = ТекСтрока.ПредъявленСФ Или Не ТекСтрока.НДС = 0;
	
	// Значение по умолчанию
	СтрВозврата = "Не делать движение";
	Сообщение   = "";
	
	Если не ТребуетсяСчетФактура Тогда
		СтрВозврата = "Не делать движение";
		Сообщение   = "";
	ИначеЕсли (Не ЕстьСтавка) и (Не ЕстьПоставщик) и (Не ЕстьСчетФактура) Тогда
		СтрВозврата = "Ошибка";
		Сообщение   = СтрокаНачалаСообщенияОбОшибке + " Не указан поставщик, ставка НДС, не указан счет-фактура!";
		
	ИначеЕсли (Не ЕстьСтавка) и (Не ЕстьПоставщик) и (  ЕстьСчетФактура) Тогда
		СтрВозврата = "Ошибка";
		Сообщение   = СтрокаНачалаСообщенияОбОшибке + " Указан счет-фактура, но не указан поставщик и ставка НДС!";
		
	ИначеЕсли (Не ЕстьСтавка) и (   ЕстьПоставщик) и (Не ЕстьСчетФактура) Тогда
		СтрВозврата = "Ошибка";
		Сообщение   = СтрокаНачалаСообщенияОбОшибке + " Указан поставщик, но не указан счет-фактура и ставка НДС!";
	ИначеЕсли (Не ЕстьСтавка) и (   ЕстьПоставщик) и (   ЕстьСчетФактура) Тогда
		СтрВозврата = "Ошибка";
		Сообщение   = СтрокаНачалаСообщенияОбОшибке + " Указан поставщик и счет-фактура, но не указана ставка НДС!";
		
	ИначеЕсли (   ЕстьСтавка) и (Не ЕстьПоставщик) и (Не ЕстьСчетФактура) Тогда
		СтрВозврата = "Ошибка";
		Сообщение   = СтрокаНачалаСообщенияОбОшибке + " Не указаны поставщик и счет-фактура!";
		
	ИначеЕсли (   ЕстьСтавка) и (Не ЕстьПоставщик) и (   ЕстьСчетФактура) Тогда
		СтрВозврата = "Ошибка";
		Сообщение   = СтрокаНачалаСообщенияОбОшибке + " Указан счет-фактура и ставка НДС, но не указан поставщик!";
		
	ИначеЕсли (   ЕстьСтавка) и (   ЕстьПоставщик) и (Не ЕстьСчетФактура) Тогда
		СтрВозврата = "Ошибка";
		Сообщение   = СтрокаНачалаСообщенияОбОшибке + " Не указан счет-фактура!";
	ИначеЕсли (   ЕстьСтавка) и (   ЕстьПоставщик) и (  ЕстьСчетФактура) Тогда
		Если ТекСтрока.ПредъявленСФ тогда
			СтрВозврата = "Делать движение";    // Обычная ситуация
			Сообщение   = "";
		Иначе
			СтрВозврата = "Не делать движение";
			Сообщение   = СтрокаНачалаСообщенияОбОшибке + "Движения для учета НДС не будут сформированы! Заполнены все необходимые данные, но не установлен признак предъявления поставщиком счета-фактуры по строке.";
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрВозврата = "Ошибка" и не ТекСтрока.ПредъявленСФ Тогда
		СтрВозврата = "Не делать движение";
		Сообщение   = Сообщение + " Сумма НДС по строке выделена, но движения для учета НДС не будут сформированы.";
	КонецЕсли; 
		
	Возврат СтрВозврата;

КонецФункции // ПравильнаяСтрокаТаблицыДляНДС()

// Проверяет, что в табличной части заполнены все реквизиты необходимые для учета НДС.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоВсеЗаполненоДляНДС(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    						Отказ, Заголовок)
	Если Не ДокументОбъект.УчитыватьНДС Тогда
		// Если не учитываем НДС то и проверка правильности заполнения не нужна																		
		Возврат;
	КонецЕсли;
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		ТекстСообщения = "";
		Рез = ПравильнаяСтрокаТаблицыДляНДС(ДокументОбъект, СтрокаТаблицы, ПредставлениеТабличнойЧасти, ТекстСообщения);

		Если Рез = "Ошибка" Тогда
			// Сообщаем об ошибке
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
								
		ИначеЕсли Рез = "Не делать движение" Тогда
			// Информируем пользователя
			ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоВсеЗаполненоДляНДС()

Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицыДокумента, Отказ, Заголовок) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл

		ИдТабЧасти = ТаблицаДокумента.Ключ;
		ТабЧасть   = ТаблицаДокумента.Значение;

		Если ТабЧасть.Количество()> 0 Тогда 
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, ИдТабЧасти, Движения, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.НДСПредъявленный.Прочитать();
	Если (Движения.НДСПредъявленный.Количество()>0) Тогда
		// Необходимо зарегистрировать оплату по отфактурованным поставкам по АО, так как расчеты с контрагентом
		// через счета учета расчетов не ведутся. 
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам	= Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
		
		ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.Выгрузить();
		ТаблицаДвижений_НДСПредъявленный.ЗаполнитьЗначения(Неопределено,"Поставщик");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений_НДСПредъявленный,ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам);
		
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОплаты");
		Для НомерСтрокиРегистрацииОплат =0 по ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество()-1 Цикл
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[НомерСтрокиРегистрацииОплат].РаспределеннаяСумма =
				ТаблицаДвижений_НДСПредъявленный[НомерСтрокиРегистрацииОплат].СуммаБезНДС + ТаблицаДвижений_НДСПредъявленный[НомерСтрокиРегистрацииОплат].НДС;
		КонецЦикла;
		
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод          = СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		Движения.НДСУчетРаспределенныхОплатПоставщикам.ДобавитьДвижение();
		Движения.НДСУчетРаспределенныхОплатПоставщикам.Записать(Ложь);
			
	КонецЕсли;

	//////////////////////////////////////////////////////////////////////
	// При необходимости, отражаем в регистре партионного учета для НДС
    ТаблицаДвиженийНДСПартии = Движения.НДСПартииТоваров;
	
	Если ТаблицыДокумента.Свойство("ТаблицаПоТоварам") и ТаблицыДокумента.ТаблицаПоТоварам.Количество()>0 
		Тогда
		ТаблицаДляНДСПартии = ТаблицыДокумента.ТаблицаПоТоварам.скопировать();
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента,ТаблицаДляНДСПартии, ТаблицаДвиженийНДСПартии, Отказ);
	КонецЕсли; 
	// При необходимости, отражаем в регистре партионного учета для НДС
	//////////////////////////////////////////////////////////////////////
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

Процедура ДвиженияРегистровПодсистемыНДС_ОплатаПоставщикам(СтруктураШапкиДокумента, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок);
	
	Если СтруктураПараметров = Ложь Тогда
		//Ошибка при подготовке таблиц. 
		// Указанный вид операции не влияет на расчеты с контрагентами.
		Возврат;
	КонецЕсли; 
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

// НДС
////////////////////////////////////////////////////////////////////////////////

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "ВалютаУправленческогоУчета"                ,     "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"       , "КурсВалютыУправленческогоУчета"            , "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "НеВключатьНДСВСтоимостьПартий"             , "НеВключатьНДСВСтоимостьПартий");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

Процедура ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("СуммаНДС",             "СуммаНДС");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", Не Провести);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетФактураПолученный.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	               |ГДЕ
	               |	СчетФактураПолученный.Ссылка.Проведен = &ПризнакПроведения
	               |	И (НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления)
	               |	И СчетФактураПолученный.Ссылка.ДокументОснование = &ДокументОснование
	               |	И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Проведен = Провести;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА
// (кроме таблицы по таре)

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "ВидСклада",       "ВидСклада");
	Иначе
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад.ВидСклада", "ВидСклада");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладОрдер", "Склад",           "СкладПриходногоОрдера");
	КонецЕсли;

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",     "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам" ,    "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВедениеУчетаПоПроектам",           "ВедениеУчетаПоПроектам");

	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее) Экспорт

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                        , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                         , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                      , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"              , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Заказ"                         , "Заказ");
	СтруктураПолей.Вставить("Склад"                         , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                     , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"         , "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей"
	                                                        , "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Поставщик"                     , "Поставщик"); 
	СтруктураПолей.Вставить("ДокументПолучения"             , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"               , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("СчетФактура"                   , "СчетФактура"); 
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"           , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("ПредъявленСФ"                  , "ПредъявленСФ");

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Прочее".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Содержание",          "Содержание");
	СтруктураПолей.Вставить("Номенклатура",        "Номенклатура");
	СтруктураПолей.Вставить("Услуга",              "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор" ,              "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект",            "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ",               "Заказ");
	СтруктураПолей.Вставить("СтатьяЗатрат",        "СтатьяЗатрат");
	СтруктураПолей.Вставить("ОтнесениеРасходовКДеятельностиЕНВД", "СтатьяЗатрат.ОтнесениеРасходовКДеятельностиЕНВД");
	СтруктураПолей.Вставить("Сумма",               "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС",           "СтавкаНДС");
	СтруктураПолей.Вставить("НДС",                 "СуммаНДС");
	СтруктураПолей.Вставить("Подразделение",       "Подразделение");
	СтруктураПолей.Вставить("Поставщик",           "Поставщик"); 
	СтруктураПолей.Вставить("ПредъявленСФ", 	   "ПредъявленСФ");
	СтруктураПолей.Вставить("СчетФактура",         "СчетФактура"); 

	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиПрочееУпр(СтруктураПолей);

	РезультатЗапросаПоПрочее = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Прочее", СтруктураПолей,СтруктураСложныхПолей);

	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоПрочее  = ПодготовитьТаблицуПрочие(РезультатЗапросаПоПрочее, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоПрочее,  СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);

КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ОбработкаЗаполненияУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Прочее);

	// Заполнить склад и ордер в табличных частях
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ
	                 И (ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру);


	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, Товары,         СкладИзШапки);
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ЭтотОбъект, ВозвратнаяТара, СкладИзШапки);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ ОплатаПоставщикам.Итог("Сумма") 
		+ УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее");
		
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
		
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТара();
	СтруктураПолей.Вставить("Набор"                         , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Заказ"                         , "Заказ");
	СтруктураПолей.Вставить("ВалютаДоговора"                , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорКонтрагента"            , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорОрганизация"            , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Склад"                         , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                     , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ДокументПолучения"             , "ПриходныйОрдер");
	СтруктураПолей.Вставить("ОрганизацияДокументаПолучения" , "ПриходныйОрдер.Организация");
	СтруктураПолей.Вставить("БезПраваПродажи"               , "ПриходныйОрдер.БезПраваПродажи");
	СтруктураПолей.Вставить("ПриходныйОрдерСклад"           , "ПриходныйОрдер.Склад");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"         , "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("Контрагент"                    , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"            , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("Сделка"                        , "Сделка");
	СтруктураПолей.Вставить("СделкаОрганизация"             , "Сделка.Организация");

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Авансы".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументАванса",            "ДокументАванса");
	СтруктураПолей.Вставить("ДокументАвансаОрганизация", "ДокументАванса.Организация");
	СтруктураПолей.Вставить("Сумма", "Сумма");

	РезультатЗапросаПоВыданнымАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВыданныеАвансы", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Оплата поставщикам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Контрагент"              , "Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"      , "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах", "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("ВалютаДоговора"          , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("Организация"             , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ДоговорОрганизация"      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("Сделка"                  , "Сделка");
	СтруктураПолей.Вставить("СделкаОрганизация"       , "Сделка.Организация");
	СтруктураПолей.Вставить("Сумма"                   , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"     , "СуммаВзаиморасчетов");

	РезультатЗапросаПоОплатеПоставщикам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПоставщикам", СтруктураПолей);

	// Подготовим таблицы для проведения.
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	ТаблицаПоАвансам = РезультатЗапросаПоВыданнымАвансам.Выгрузить();
	ТаблицаПоОплате  = ПодготовитьТаблицуПоОплате(РезультатЗапросаПоОплатеПоставщикам, СтруктураШапкиДокумента);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоПрочее);

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		Для Каждого СтрокаОплаты из ТаблицаПоОплате Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
			                                     СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			                                     мВалютаРегламентированногоУчета, Истина, Отказ, Заголовок,
			                                     "Оплата поставщикам, строка "+СтрокаОплаты.НомерСтроки+": ",
			                                     СтрокаОплаты.ВалютаДоговора,
			                                     СтрокаОплаты.РасчетыВУсловныхЕдиницах);
		КонецЦикла;

	КонецЕсли;

	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПрочее(ТаблицаПоПрочее, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВыданныеАвансы(ТаблицаПоАвансам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиОплатаПоставщикам(ТаблицаПоОплате, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоАвансам, ТаблицаПоОплате, ТаблицаПоПрочее,
							Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Для каждого СтрокаПрочее Из Прочее Цикл
		СтрокаПрочее.СчетФактура = Документы.СчетФактураПолученный.ПустаяСсылка();
	КонецЦикла;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

мСтруктураПараметровДляПолученияДоговора = Новый Структура();

СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
