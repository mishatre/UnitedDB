Перем мВалютаРегламентированногоУчета Экспорт;

Перем мМинимальныеЦены Экспорт;

Перем мРассчитыватьАвтоматическиеСкидки;

Перем мСписокФильтров Экспорт;

Перем мУчетнаяПолитика;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьСчетаЗаказа и из веб-приложения
//
// Параметры:
//  Тип - строка, содержит тип печатаемого документа (счет или заказ)
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыПечатиСчетаЗаказа(Тип) Экспорт	
	
	ПараметрыПечати = Новый Структура;
	Позиции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("СчетНаОплату");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ (ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL                           КАК Серия,
	|	ВложенныйЗапрос.НомерСтроки    КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка          КАК Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетНаОплату.Номенклатура               КАК Номенклатура,
	|		СчетНаОплату.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|		СчетНаОплату.ПроцентСкидкиНаценки       КАК ПроцентСкидкиНаценки,
	|		СчетНаОплату.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		СчетНаОплату.Цена КАК Цена,
	|		СУММА(СчетНаОплату.Количество)          КАК Количество,
	|		СУММА(СчетНаОплату.Сумма)               КАК Сумма,
	|		СУММА(СчетНаОплату.СуммаНДС)            КАК СуммаНДС,
	|		СчетНаОплату.ХарактеристикаНоменклатуры КАК Характеристика,
	|		МИНИМУМ(СчетНаОплату.НомерСтроки)       КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплату
	|	
	|	ГДЕ
	|		СчетНаОплату.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СчетНаОплату.Номенклатура,
	|		СчетНаОплату.ЕдиницаИзмерения,
	|		СчетНаОплату.ПроцентСкидкиНаценки,
	|		СчетНаОплату.ПроцентАвтоматическихСкидок,
	|		СчетНаОплату.Цена,
	|		СчетНаОплату.ХарактеристикаНоменклатуры
	|		) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплату.Номенклатура,
	|	Минимум(" + СтрокаВыборкиПоляСодержания + ") КАК Товар,
	|	СчетНаОплату.Номенклатура.Код     КАК Код,
	|	СчетНаОплату.Номенклатура.Артикул КАК Артикул,
	|	Сумма(СчетНаОплату.Количество),
	|	СчетНаОплату.Номенклатура.ЕдиницаХраненияОстатков,
	|	СчетНаОплату.ПроцентСкидкиНаценки + СчетНаОплату.ПроцентАвтоматическихСкидок,
	|	СчетНаОплату.Цена,
	|	Сумма(СчетНаОплату.Сумма),
	|	Сумма(СчетНаОплату.СуммаНДС),
	|	NULL,
	|	NULL,
	|	Минимум(СчетНаОплату.НомерСтроки),
	|	1
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплату
	|
	|ГДЕ
	|	СчетНаОплату.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		СчетНаОплату.Номенклатура,
	|		СчетНаОплату.ПроцентСкидкиНаценки,
	|		СчетНаОплату.ПроцентАвтоматическихСкидок,
	|		СчетНаОплату.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка,
	|	НомерСтроки";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	// Выводим шапку накладной

	ПараметрыПечати.Вставить("УчитыватьНДС", Шапка.УчитыватьНДС);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ПараметрыПечати.Вставить("ИНН", СведенияОПоставщике.ИНН);
		ПараметрыПечати.Вставить("КПП", СведенияОПоставщике.КПП);
		ПредставлениеПоставщикаДляПлатПоручения = "";
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = ?(не ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов), СтруктурнаяЕдиница.Банк, СтруктурнаяЕдиница.БанкДляРасчетов);
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ПараметрыПечати.Вставить("БИКБанкаПолучателя", БИК);
			ПараметрыПечати.Вставить("БанкПолучателя", Банк);
			ПараметрыПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
			ПараметрыПечати.Вставить("СчетБанкаПолучателя", КоррСчет);
			ПараметрыПечати.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
			ПараметрыПечати.Вставить("СчетПолучателяПредставление", НомерСчета);
			ПараметрыПечати.Вставить("СчетПолучателя", НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ПараметрыПечати.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	КонецЕсли; 

	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату"));
	ПараметрыПечати.Вставить("ТекстПоставщик", ?(Тип = "Счет", "Поставщик:", "Исполнитель:"));
	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	Если Шапка.Организация = Шапка.Грузоотправитель Тогда
		ПараметрыПечати.Вставить("ПредставлениеГрузоотправителя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	Иначе
		ПараметрыПечати.Вставить("ПредставлениеГрузоотправителя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,"));
	КонецЕсли;
	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПараметрыПечати.Вставить("ТекстПокупатель", ?(Тип = "Счет", "Покупатель:", "Заказчик:"));
	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ПараметрыПечати.Вставить("ПредставлениеГрузополучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,"));

	ПараметрыПечати.Вставить("ЕстьСкидки", Ложь);
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ПараметрыПечати.ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Код";
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", Колонка);
	КонецЕсли;

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		
		ПараметрыПозиции = Новый Структура;

		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
		ПараметрыПозиции.Вставить("НомерСтроки", ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Артикул);
			Иначе
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Код);
			КонецЕсли;
		КонецЕсли;

		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("Товар", СокрП(ВыборкаСтрокТовары.НаименованиеПолное) 
													+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ПараметрыПозиции.Вставить("Скидка", Скидка);
			ПараметрыПозиции.Вставить("СуммаБезСкидки", ВыборкаСтрокТовары.Сумма + Скидка);
		КонецЕсли;

		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма); 
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ПараметрыПечати.Вставить("ВсегоСкидок", ВсегоСкидок);
		ПараметрыПечати.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
	КонецЕсли;
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(Сумма));

	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
		ПараметрыПечати.Вставить("ВсегоНДС", ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС")));
		ПараметрыПечати.Вставить("ВсегоКОплате", ОбщегоНазначения.ФорматСумм(Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС)));
	КонецЕсли;

	// Вывести Сумму прописью
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));

	// Вывести подписи
	Если Тип = "Счет" Тогда
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		ДолжностьРуководителя = Руководители.РуководительДолжность;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ПараметрыПечати.Вставить("ФИОРуководителя", 		Руководитель);
		ПараметрыПечати.Вставить("ДолжностьРуководителя", 	ДолжностьРуководителя);
		ПараметрыПечати.Вставить("ФИОБухгалтера", 			Бухгалтер);
		
		Если НЕ ЗначениеЗаполнено(Ответственный.ФизЛицо) Тогда
			ФИООтветственный = СокрЛП(Ответственный);  
		Иначе
			ФамилияИмяОтчествоФизЛица      	 = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Ответственный.ФизЛицо, Шапка.Дата);
			ФамилияИмяОтчествоОтветственного = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтветственный         		 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтветственного);
		КонецЕсли;
		ПараметрыПечати.Вставить("ФИООтветственный", ФИООтветственный);

	КонецЕсли; 
	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли

	Возврат ПараметрыПечати;

КонецФункции //ПолучитьПараметрыПечатиСчетаЗаказа()

#Если Клиент Тогда
	
// Функция создает табличный документ для печати счета и заказа, 
// помещая в него готовые данные, переданные в виде структуры.
//
// Параметры:
//  Тип             - строка, содержит тип печатаемого документа (счет или заказ);
//  ПараметрыПечати - структура с данными для печати.
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция СоздатьТабличныйДокументПечатиСчетаЗаказа(Тип, ПараметрыПечати)
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Макет = ПолучитьОбщийМакет("СчетЗаказ");

	// Выводим шапку накладной

	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)";
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл 

		Если не ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ВсегоКОплате|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ВсегоКОплате|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ВсегоКОплате|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ВсегоКОплате|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ВсегоКОплате|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|Товар");
		Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодов");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезСкидок");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // СоздатьТабличныйДокументПечатиСчетаЗаказа()

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	Возврат СоздатьТабличныйДокументПечатиСчетаЗаказа(Тип, ПолучитьПараметрыПечатиСчетаЗаказа(Тип));

КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	
    Если ИмяМакета = "Счет" Тогда
		// Печать счета на оплату
		ТабДокумент     = ПечатьСчетаЗаказа(ИмяМакета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Счет", "Счет на оплату");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет документ на основании заказа покупателя
//
Процедура ЗаполнитьПоЗаказуПокупателя(ОчищатьСтроки = Ложь) Экспорт

	// Заполнение шапки
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию( ЭтотОбъект, ЗаказПокупателя);
	УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ЭтотОбъект);
	
	КонтактноеЛицоКонтрагента = ЗаказПокупателя.КонтактноеЛицоКонтрагента;

	
	// Заполнение табличных частей
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СуммаВключаетНДС", ЗаказПокупателя.СуммаВключаетНДС);
	ДопПараметры.Вставить("УчитыватьНДС",     ЗаказПокупателя.УчитыватьНДС);
	ДопПараметры.Вставить("УчитыватьСоставНабора",     ЗаказПокупателя.СоставНабора.Количество()>0);

	
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Если ОчищатьСтроки Тогда
		
		ТекстВопроса = "Очистить строки в табличных частях перед заполнением по заказу?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
		// Очистим значения в строках
		ОчищатьСтроки = (Ответ = КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
	УправлениеЗаказами.ЗаполнитьТабЧастьТоварыПоЗаказу(Ссылка, Товары, ЗаказПокупателя, УправлениеЗаказами.ОстаткиТоваровПоЗаказуПокупателя( ЗаказПокупателя, ДоговорКонтрагента, ДатаОстатков), ДопПараметры, ОчищатьСтроки);
	ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ЗаказПокупателя, мВалютаРегламентированногоУчета);
	
	УправлениеЗаказами.ЗаполнитьТабЧастьУслугиПоЗаказу        ( Ссылка, Услуги, ЗаказПокупателя, УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( ЗаказПокупателя, ДоговорКонтрагента, ДатаОстатков), ДопПараметры, ОчищатьСтроки);
	//заполняем заказ в таб части Услуги
	Для каждого строка из Услуги цикл
		Строка.ЗаказПокупателя = ЗаказПокупателя;
	КонецЦикла;

	УправлениеЗаказами.ЗаполнитьТабЧастьТараПоЗаказуПокупателя( Ссылка, ВозвратнаяТара, ЗаказПокупателя, ДоговорКонтрагента, ДатаОстатков, ОчищатьСтроки);

КонецПроцедуры

//Процедура заполняет табличную часть по заказу покупателя (с учетом корректировок и без учета отгрузок)
Процедура ЗаполнитьТабЧастьТоварыПоЗаказуБезУчетаОтгрузок(ДокументОбъект, Товары, ЗаказПокупателя) Экспорт
	Если ЗаказПокупателя.СуммаВключаетНДС Тогда
		ПодзапросСумма = "		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ";
	Иначе
		ПодзапросСумма = "		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Минимум(ВложенныйЗапрос.ПризнакКорректировка) 	КАК ПризнакКорректировка,
		|	Минимум(ВложенныйЗапрос.НомерСтроки) 			КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Номенклатура.Комплект 			КАК Комплект,
		|	СУММА(ВложенныйЗапрос.Количество)               КАК Количество,
		|	ВложенныйЗапрос.ЕдиницаИзмерения  				КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Коэффициент  	КАК Коэффициент,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки            КАК ПроцентСкидкиНаценки,
		|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок   	КАК ПроцентАвтоматическихСкидок,
		|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
		|	ВложенныйЗапрос.Цена                            КАК Цена,
		|	ВложенныйЗапрос.СтавкаНДС                       КАК СтавкаНДС,
		|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
		|	&ТекущийДокумент 								КАК ЗаказПокупателя
		|ИЗ
		|
		|(
		|ВЫБРАТЬ
		|		Док.Номенклатура                КАК Номенклатура,
		|		Док.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|		Док.Цена                        КАК Цена,
		|		Док.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
		|		Док.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
		|		Док.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                    КАК СуммаНДС,
		|" + ПодзапросСумма + " КАК Сумма,
		|		Док.СтавкаНДС 					КАК СтавкаНДС,
		|		Док.Количество                  КАК Количество,
		|		(0)                             КАК ПризнакКорректировка,
		|		Док.НомерСтроки 				КАК НомерСтроки
		|	ИЗ
		|		Документ.ЗаказПокупателя.Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
        |ВЫБРАТЬ
		|		Док.Номенклатура               КАК Номенклатура,
		|		Док.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|		Док.Цена                       КАК Цена,
		|		Док.ПроцентСкидкиНаценки       КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
		|		Док.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
		|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                   КАК СуммаНДС,
		|" + ПодзапросСумма + " 				КАК Сумма,
		|		Док.СтавкаНДС 					КАК СтавкаНДС,
		|		Док.Количество               КАК Количество,
		|		(1)                          КАК ПризнакКорректировка,
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + Док.НомерСтроки)	 КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И Док.Ссылка.Проведен      = Истина
        |) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
		|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Цена,
		|   ВложенныйЗапрос.СтавкаНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПризнакКорректировка, НомерСтроки
		|";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЗаказПокупателя);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если Выборка.Количество <=0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, Ссылка);
			Если Выборка.Комплект Тогда
				НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
			КонецЕсли;
		КонецЦикла;

КонецПроцедуры

// Процедура заполняет документ на основании реализации
//
Процедура ЗаполнитьПоРеализации(ДокументОснование, ОчищатьСтроки = Ложь) Экспорт

	// Заполнение шапки
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию( ЭтотОбъект, ДокументОснование);
	УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ЭтотОбъект);
	
	// Заполнение табличных частей
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СуммаВключаетНДС", ДокументОснование.СуммаВключаетНДС);
	ДопПараметры.Вставить("УчитыватьНДС",     ДокументОснование.УчитыватьНДС);
	ДопПараметры.Вставить("УчитыватьСоставНабора",     ДокументОснование.СоставНабора.Количество()>0);

	
	Если ЭтоНовый() Тогда
		ДатаОстатков = Дата('00010101');
	Иначе
		ДатаОстатков = Дата;
	КонецЕсли;
	
	Если ОчищатьСтроки Тогда
		
		ТекстВопроса = "Очистить строки в табличных частях перед заполнением?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Заполнить на основании");
		// Очистим значения в строках
		ОчищатьСтроки = (Ответ = КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
	СкопироватьТовары(ДокументОснование);
	СкопироватьВозвратнуюТару(ДокументОснование);
	СкопироватьУслуги(ДокументОснование);
	ОбработкаТабличныхЧастей.ЗаполнитьПлановуюСебестоимостьНаОсновании(ЭтотОбъект, ДокументОснование, мВалютаРегламентированногоУчета);
	
КонецПроцедуры

// Процедура заполняет табличную часть Товары на основании реализации
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРеализация", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТовары.ЕдиницаИзмерения,
	|	РеализацияТовары.ЕдиницаИзмеренияМест,
	|	РеализацияТовары.Количество,
	|	РеализацияТовары.КоличествоМест,
	|	РеализацияТовары.Коэффициент,
	|	РеализацияТовары.Номенклатура,
	|	РеализацияТовары.ХарактеристикаНоменклатуры,
	|	РеализацияТовары.Цена,
	|	РеализацияТовары.ПроцентСкидкиНаценки,
	|	РеализацияТовары.ПроцентАвтоматическихСкидок,
	|	РеализацияТовары.УсловиеАвтоматическойСкидки,
	|	РеализацияТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	РеализацияТовары.ЗаказПокупателя,
	|	РеализацияТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";

	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА РеализацияТовары.Ссылка.ВалютаДокумента = РеализацияТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		РеализацияТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА РеализацияТовары.Ссылка.ВалютаДокумента = РеализацияТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		РеализацияТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	РеализацияТовары.Сумма,
	|	РеализацияТовары.СтавкаНДС,
	|	РеализацияТовары.СуммаНДС,
	|	РеализацияТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	РеализацияТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	РеализацияТовары.КлючСтроки";

	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТовары
	|
	|ГДЕ
	|	РеализацияТовары.Ссылка = &ДокументРеализация";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.КоличествоМест                      = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;

		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						    Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));

		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

		НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;

	КонецЦикла;

	Если ДокументОснование.СоставНабора.Количество() > 0 Тогда
		СоставНабора.Загрузить(ДокументОснование.СоставНабора.Выгрузить());
	КонецЕсли;

КонецПроцедуры // СкопироватьТовары()

// Процедура заполняет табличную часть Возвратная тара на основании реализации
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРеализация", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияВозвратнаяТара.Количество,
	|	РеализацияВозвратнаяТара.Номенклатура,
	|	РеализацияВозвратнаяТара.Сумма,
	|	РеализацияВозвратнаяТара.Цена,
	|	РеализацияВозвратнаяТара.ЗаказПокупателя,
	|	РеализацияВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА РеализацияВозвратнаяТара.Ссылка.ВалютаДокумента = РеализацияВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		РеализацияВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА РеализацияВозвратнаяТара.Ссылка.ВалютаДокумента = РеализацияВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		РеализацияВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияВозвратнаяТара
	|
	|ГДЕ
	|	РеализацияВозвратнаяТара.Ссылка = &ДокументРеализация";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						    Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.ЗаказПокупателя              = Выборка.ЗаказПокупателя;
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Процедура заполняет табличную часть Услуги на основании реализации
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРеализация", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияУслуги.Содержание,
	|	РеализацияУслуги.Количество,
	|	РеализацияУслуги.Номенклатура,
	|	РеализацияУслуги.Цена,
	|	РеализацияУслуги.ПроцентСкидкиНаценки,
	|	РеализацияУслуги.ПроцентАвтоматическихСкидок,
	|	РеализацияУслуги.УсловиеАвтоматическойСкидки,
	|	РеализацияУслуги.ЗначениеУсловияАвтоматическойСкидки,
	|	РеализацияУслуги.ЗаказПокупателя,
	|	РеализацияУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";

	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА РеализацияУслуги.Ссылка.ВалютаДокумента = РеализацияУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		РеализацияУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА РеализацияУслуги.Ссылка.ВалютаДокумента = РеализацияУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		РеализацияУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	РеализацияУслуги.Сумма,
	|	РеализацияУслуги.СтавкаНДС,
	|	РеализацияУслуги.СуммаНДС,
	|	РеализацияУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	РеализацияУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";

	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияУслуги
	|
	|ГДЕ
	|	РеализацияУслуги.Ссылка = &ДокументРеализация";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.Содержание                          = Выборка.Содержание;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;

		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						    Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, СтруктурнаяЕдиница,
					|Контрагент "+?(ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"),", ДоговорКонтрагента","")+", КратностьВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, ДоговорКонтрагента.Организация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет правильность заполнения табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("Номенклатура, Количество, Цена, СтавкаНДС, ЕдиницаИзмерения, Коэффициент");
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Товары", СтруктураШапкиДокумента.Склад.ВидСклада, СтруктураОбязательныхРеквизитов);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхРеквизитов, Отказ, Заголовок);	

КонецПроцедуры	

// Процедура выполняет проверку правильности заполнения табличной части "Услуги"
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("Номенклатура, Количество, Цена, СтавкаНДС, Содержание");
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Услуги", СтруктураШапкиДокумента.Склад.ВидСклада, СтруктураОбязательныхРеквизитов);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхРеквизитов, Отказ, Заголовок);	
	
КонецПроцедуры	

// Процедура выполняет проверку правильности заполнения табличной части "ВозвратнаяТара"
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("Номенклатура, Количество, Цена");
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Товары", СтруктураШапкиДокумента.Склад.ВидСклада, СтруктураОбязательныхРеквизитов);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхРеквизитов, Отказ, Заголовок);	
	
КонецПроцедуры	

// Функция выполняет пересчет автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматические скидки были рассчитаны.
//
Функция ПересчитатьАвтоматическиеСкидки() Экспорт

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(Услуги);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента"                , СуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта"                         , ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС"                  , УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС"              , СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика"               , ПолучитьЗначениеУчетнойПолитики());

		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Услуги, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПересчитатьАвтоматическиеСкидки()

//Проверяет необходимость Расчета автоматических скидок.
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	Если Не МожноРассчитыватьАвтоматическиеСкидки()
	 Или Проведен
	 Или Не ЗаказПокупателя.Пустая() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // РассчитыватьАвтоматическиеСкидки()

// Функция проверяет возможность расчета автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево.
//
Функция МожноРассчитыватьАвтоматическиеСкидки() Экспорт

	Если мРассчитыватьАвтоматическиеСкидки = Неопределено Тогда
		Если ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоКоличествуТовара
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоСуммеДокумента
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоВидуОплаты
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоДисконтнойКарте Тогда
			мРассчитыватьАвтоматическиеСкидки = Истина;
		Иначе
			мРассчитыватьАвтоматическиеСкидки = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат мРассчитыватьАвтоматическиеСкидки;

КонецФункции // МожноРассчитыватьАвтоматическиеСкидки()

// Функция возвращает структуру со значениями учетной политики.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьЗначениеУчетнойПолитики() Экспорт

	Если мУчетнаяПолитика = Неопределено Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь);
	КонецЕсли;

	Возврат мУчетнаяПолитика;

КонецФункции // ПолучитьЗначениеУчетнойПолитики()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

#Если Клиент Тогда

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполнение по заказу
		ЗаказПокупателя = Основание;
		ЗаполнитьПоЗаказуПокупателя();
        УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполнение по реализации
		Если ЗначениеЗаполнено(Основание.Сделка) И ТипЗнч(Основание.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказПокупателя = Основание.Сделка;
		КонецЕсли;
		ЗаполнитьПоРеализации(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		Комментарий               = Основание.Комментарий;
		КонтактноеЛицоКонтрагента = Основание.КонтактноеЛицо;
		Контрагент                = Основание.Контрагент;
		Ответственный             = Основание.Ответственный;
		Организация               = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

		СтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
		ДоговорКонтрагента 	= ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора);

	КонецЕсли;

#КонецЕсли

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ОбменДанными.Загрузка  Тогда
		
		// Заголовок для сообщений об ошибках.
		Заголовок = "Невозможно записать документ: "+СокрЛП(ЭтотОбъект);

		// Сформируем структуру реквизитов шапки документа
		СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		// Если договор с комиссионером, то надо почистить закладку "Услуги".
		Если Услуги.Количество() > 0
		   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

			Услуги.Очистить();

		КонецЕсли;

		УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(неопределено,ЭтотОбъект, "РеализацияСчет");

		// Проверка заполнения единицы измерения мест и количества мест
		ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
		ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
		ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
		
		// Проверим правильность заполнения табличных частей.
		ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ, Заголовок, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, Заголовок, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(Отказ, Заголовок, СтруктураШапкиДокумента);

		
		// Проверить заполнение ТЧ "Состав набора".
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Номенклатура");
		СтруктураПолей.Вставить("Количество");
		СтруктураПолей.Вставить("Цена");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);

		// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
		СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

// Процедура вызывается при записи документа 
//
Процедура ПриЗаписи(Отказ)

#Если Клиент Тогда

	Если НЕ ОбменДанными.Загрузка  Тогда
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПолныеПрава.УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ);
		КонецЕсли; 
		// Проверим допустимость для пользователя цен документа
		// Обязательно выполнять в ПриЗаписи, т.к. в процедуре используется запрос с ссылкой на объект
		УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	КонецЕсли; 

#КонецЕсли

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
   ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
   Неопределено);

мИспользоватьОбменЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
