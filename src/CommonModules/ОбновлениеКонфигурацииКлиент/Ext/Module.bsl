////////////////////////////////////////////////////////////////////////////////
// Процедуры для проверки легальности получения обновления

#Если Не ВебКлиент Тогда

// Возвращает структуру ответа веб-сервера
//
Функция ПроверитьЛегальностьСкачиванияОбновления(ПараметрыЗапроса) Экспорт
	
	Попытка
	// Создание описания сервиса
		ОписаниеСервиса = ОписаниеСервисаПроверкиЛегальности();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка создания описания веб-сервиса проверки легальности получения обновления.'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки,,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Определение доступности веб-сервиса
	Попытка
		
		ОтветСервера = СервисДоступен(ОписаниеСервиса);
		
		Если НРег(СокрЛП(ОтветСервера)) <> "ready" Тогда
			
			ТекстОшибки = НСтр("ru = 'Сервис проверки легальности получения обновлений временно недоступен.
				|Повторите попытку позднее'");
			Возврат СтруктураОтветаВебСервера(ТекстОшибки, ОтветСервера);
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось подключиться к сервису проверки легальности получения обновлений.
			|Проверьте параметры подключения к Интернету'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки,,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	// Получение ответа с веб-сервиса.
	Возврат ПроверитьЛегальностьПолученияОбновлений(ПараметрыЗапроса, ОписаниеСервиса);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с веб-сервисом проверки легальности на "высоком уровне".

// Добавляет из структуры параметры в запрос.
//
// Параметры:
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание соединения с веб-сервисом проверки легальности
//	ПараметрыЗапроса - Строка -  уже сформированные параметры.
//	СписокПараметров - ОбъектXDTO - список значений параметров.
//
Процедура ДобавитьПараметрыКЗапросу(ОписаниеСервисаПроверкиЛегальности, ПараметрыЗапроса, СписокПараметров)
	
	ТипПараметр = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "Parameter");
	КоличествоПараметров = 0;
	
	Для Каждого ПараметрПередачи Из СписокПараметров Цикл 
		
		// Определение объекта параметра (Объект XDTO).
		Параметр = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Создать(ТипПараметр);
		
		Параметр.name  = СокрЛП(ПараметрПередачи.Ключ);
		Параметр.value = СокрЛП(ПараметрПередачи.Значение);
		Параметр.index = КоличествоПараметров;
		
		ПараметрыЗапроса.parameter.Добавить(Параметр);
		
		КоличествоПараметров = КоличествоПараметров + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет легальность скачивания обновления.
//
// Параметры:
//	ДополнительныеПараметры - Структура - дополнительные параметры для передачи веб-сервису;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание соединения с веб-сервисом проверки легальности
//
// Возвращаемое значение:
//	Структура - структурированный ответ веб-сервера
//
Функция ПроверитьЛегальностьПолученияОбновлений(ДополнительныеПараметры, ОписаниеСервисаПроверкиЛегальности)
	
	Попытка
		
		ТипОтвета  = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "ProcessResponseType");
		ТипЗапроса = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Тип(ОписаниеСервисаПроверкиЛегальности.URIСервиса, "Parameters");
		
		ПараметрыЗапроса = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Создать(ТипЗапроса);
		
		// Если имеются передаваемые параметры, то добавляем их.
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДобавитьПараметрыКЗапросу(ОписаниеСервисаПроверкиЛегальности, ПараметрыЗапроса, ДополнительныеПараметры);
		КонецЕсли;
		
		// Выполнение метода "process" WEB-Сервиса.
		ОтветСервера = ОбновлениеПолученоЛегально(ПараметрыЗапроса, ОписаниеСервисаПроверкиЛегальности);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения проверки легальности получения обновления.
			|Обратитесь к администратору'");
		Возврат СтруктураОтветаВебСервера(ТекстОшибки,,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	СтруктураКоманды = ОтветСервера.command[0];
	
	Если СтруктураКоманды.name = "store.put" Тогда
		
		ПараметрыОтвета = СтруктураКоманды.parameters.parameter;
		
		Результат = Новый Структура;
		Для Каждого Параметр Из ПараметрыОтвета Цикл
			
			Результат.Вставить(Параметр.name, Параметр.value);
			
		КонецЦикла;
		
		Результат = СтруктураОтветаВебСервера(Результат.resultTextError,
			Результат.resultCodeError, Результат.resultAvtorisation, Ложь);
		
	Иначе
		
		Результат = СтруктураОтветаВебСервера(Нстр("ru = 'Неожиданный ответ сервиса проверки легальности получения обновлений'"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответ сервера в виде структуры
//
Функция СтруктураОтветаВебСервера(ТекстОшибки, КодОшибки = 0, ЗначениеРезультата = Ложь,
	ЗаписьВЖурналРегистрации = Истина, ТекстСообщения = "")
	
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("ЗначениеРезультата", Булево(ЗначениеРезультата));
	СтруктураОтвета.Вставить("ТекстОшибки", Строка(ТекстОшибки));
	
	Если ЗаписьВЖурналРегистрации Тогда
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = Нстр("ru = '%ТекстОшибки. Код ошибки: %КодОшибки.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки", ТекстОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки", КодОшибки);
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьОшибкуВЖурналРегистрации(СобытиеЖурналаРегистрации(), ТекстСообщения);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с веб-сервисом проверки легальности на "низком уровне".

// Получить адрес сервиса проверки легальности получения обновления.
//
// Возвращаемое значение:
//   Строка   – адрес сервиса.
//
Функция АдресСервисаПроверкиЛегальности() Экспорт
	
	Возврат "https://webits.1c.ru/services/WebItsSimpleService?wsdl";
	
КонецФункции

// Формирует описание веб-сервиса из WSDL-документа для дальнейшей работы
// с веб-сервисом проверки легальности.
//
// Возвращаемое значение:
//	Структура со свойствами:
//		АдресWSDL (Строка) - URL WSDL-документа;
//			выполняется с использованием временных файлов;
//		ФабрикаXDTO (ФабрикаXDTO) - Фабрика XDTO веб-сервиса;
//		URIСервиса (Строка) - URI веб-сервиса проверки легальности;
//		СоединениеПорта (HTTPСоединение) - соединение с портом сервиса
//			для выполнения вызовов методов веб-сервиса;
//		ПутьПорта (Строка) - путь порта на сервере;
//	
Функция ОписаниеСервисаПроверкиЛегальности()
	
	АдресWSDL = АдресСервисаПроверкиЛегальности();
	ПараметрыСоединения = СтруктураURI(АдресWSDL);
	
	Результат = Новый Структура("АдресWSDL", АдресWSDL);
	
	ТаймаутСети = 10;
	
	HTTP = Новый HTTPСоединение(ПараметрыСоединения.Хост,
		ПараметрыСоединения.Порт,
		ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль,
		,
		ТаймаутСети,
		?(ПараметрыСоединения.Схема = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	Попытка
		
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.ПутьНаСервере);
		Ответ = HTTP.Получить(HTTPЗапрос);
		ТекстWSDL = Ответ.ПолучитьТелоКакСтроку();
		
	Исключение
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса.
			|Не удалось получить WSDL-описание с сервера проверки легальности скачивания обновления (%1): %2.'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстWSDL);
	
	ПостроительDOM = Новый ПостроительDOM;
	Попытка
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Исключение
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления: %2.'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	// Создание фабрики XDTO веб-сервиса проверки легальности
	
	УзлыСхемы = ДокументDOM.ПолучитьЭлементыПоИмени("wsdl:types");
	Если УзлыСхемы.Количество() = 0 Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует элемент описания типов данных (<wsdl:types ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелОписанияСхемы = УзлыСхемы[0].ПервыйДочерний;
	Если УзелОписанияСхемы = Неопределено Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует элемент описания типов данных (<xs:schema ...>)'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПостроительСхемы = Новый ПостроительСхемXML;
	
	Попытка
		СхемаДанныхСервиса = ПостроительСхемы.СоздатьСхемуXML(УзелОписанияСхемы);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка при создании схемы данных из WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|%2'"), АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(СхемаДанныхСервиса);
	
	Попытка
		ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка при создании фабрики XDTO из WSDL-описания веб-сервиса проверки легальности скачивания обновления: %2'"),
			АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	// Определение параметров подключения к порту сервиса
	
	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	
	Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);
	
	URIСервиса = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace");
	Если НЕ ЗначениеЗаполнено(URIСервиса) Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует URI пространства имен в WSDL-описании.'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Результат.Вставить("URIСервиса" , URIСервиса);
	
	// Определение адреса порта веб-сервиса
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("wsdl:service");
	Если УзлыСервисов.Количество() = 0 Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует описание веб-сервисов в WSDL-описании (<wsdl:service ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелСервиса = УзлыСервисов[0];
	
	ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name");
	
	УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("wsdl:port");
	
	Если УзлыПортов.Количество() = 0 Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса проверки легальности скачивания обновления:
			|Отсутствует описание портов в WSDL-описании (<wsdl:port ...>).'"), АдресWSDL);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	УзелПорта = УзлыПортов[0];
	ИмяПорта  = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name");
	
	Если НЕ ЗначениеЗаполнено(ИмяПорта) Тогда
		
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
			|Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей:
			|Не удалось определить имя порта сервиса (%2)."), АдресWSDL, ИмяСервиса);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	АдресПорта = Неопределено;
	УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("soap:address");
	Если УзлыАдреса.Количество() > 0 Тогда
		АдресПорта = ЗначениеАтрибутаУзлаDOM(УзлыАдреса[0], "location");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПорта) Тогда
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при создании описания веб-сервиса (%1).
				|Ошибка чтения WSDL-описания веб-сервиса интернет-поддержки пользователей:
				|Не удалось определить URL заданного порта сервиса (%2).'"), АдресWSDL, ИмяПорта);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СоединениеПорта = Новый HTTPСоединение(ПараметрыСоединения.Хост,
		ПараметрыСоединения.Порт,
		ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль,
		,
		ТаймаутСети,
		?(ПараметрыСоединения.Схема = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	Результат.Вставить("СоединениеПорта"       , СоединениеПорта);
	Результат.Вставить("ПутьПорта"             , ПараметрыСоединения.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Прокси-функция для вызова метода isReady() веб-сервиса проверки легальности
//
// Параметры:
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	Строка:
//		значение, возвращенное методом isReady() веб-сервиса проверки легальности;
//
Функция СервисДоступен(ОписаниеСервисаПроверкиЛегальности)
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	ТекстКонверта  = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1): %2'"),
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности("isReadyResponse", ОписаниеСервисаПроверкиЛегальности);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1).
			|Не удалось определить тип корневого свойства isReadyResponse.'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипОбъекта);
	Исключение
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1).'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		
		// Возвращено описание исключения SOAP
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции isReady сервиса (%1)
			|Ошибка SOAP: %2'"), ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ОписаниеИсключенияSOAPВСтроку(Значение));
		ВызватьИсключение ТекстИсключения;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Метод веб-сервиса для проверки легальности получения обновления
//
// Параметры:
//	ПараметрыЗапроса (ОбъектXDTO) - параметры запроса метода process();
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	ОбъектXDTO:
//		значение, возвращенное методом process() веб-сервиса проверки легальности;
//
Функция ОбновлениеПолученоЛегально(ПараметрыЗапроса, ОписаниеСервисаПроверкиЛегальности)
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("m:processRequest");
	ЗаписьКонверта.ЗаписатьАтрибут("xmlns:m", ОписаниеСервисаПроверкиЛегальности.URIСервиса);
	
	ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.ЗаписатьXML(ЗаписьКонверта,
		ПараметрыЗапроса,
		"parameters",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </m:processRequest>
	
	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);
	
	Попытка
		ТелоОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1): %2'"),
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности("processResponse", ОписаниеСервисаПроверкиЛегальности);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).
			|Не удалось определить тип корневого свойства processResponse.'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Значение = ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипОбъекта);
	Исключение
		
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).'"),
			"%1",
			ОписаниеСервисаПроверкиЛегальности.АдресWSDL)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Тело запроса:'")
			+ Символы.ПС
			+ ТекстКонверта;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM (УзелDOM) - узел DOM-документа;
//	ИмяАтрибута (Строка) - полное имя атрибута;
//	ЗначениеЕслиНеНайдено (Произвольный) - значение, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка:
//		Строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)
	
	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;
	
КонецФункции

// Определяет тип значения корневого свойства пакета фабрики XDTO
// веб-сервиса проверки легальности.
//
// Параметры:
//	ИмяСвойства (Строка) - имя корневого свойства;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	ТипЗначенияXDTO;
//	ТипОбъектаXDTO;
//	Неопределено - если корневое свойство не найдено;
//
Функция ТипЗначенияКорневогоСвойстваФабрикиСервисаЛегальности(ИмяСвойства, ОписаниеСервисаПроверкиЛегальности)
	
	Пакет            = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.Пакеты.Получить(ОписаниеСервисаПроверкиЛегальности.URIСервиса);
	КорневоеСвойство = Пакет.КорневыеСвойства.Получить(ИмяСвойства);
	Если КорневоеСвойство = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КорневоеСвойство.Тип;
	КонецЕсли;
	
КонецФункции

// Формирует объект тип ЗаписьXML с уже записанными
// SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML:
//		объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");
	
	Возврат ЗаписьXML;
	
КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта (ЗаписьXML) - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка: текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта)
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>
	
	Возврат ЗаписьКонверта.Закрыть();
	
КонецФункции

// Выполняет отправку SOAP-конверта веб-сервису и получает ответный
// SOAP-конверт.
//
// Параметры:
//	ТекстКонверта (Строка) - текст конверта-запроса;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//
// Возвращаемое значение:
//	Строка: текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ОписаниеСервисаПроверкиЛегальности)
	
	HTTPЗапрос = Новый HTTPЗапрос(ОписаниеСервисаПроверкиЛегальности.ПутьПорта);
	HTTPЗапрос.Заголовки["Content-Type"] = "text/xml;charset=UTF-8";
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстКонверта);
	
	Попытка
		HTTPОтвет = ОписаниеСервисаПроверкиЛегальности.СоединениеПорта.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстИсключения = НСтр("ru = 'Ошибка сетевого соединения при отправке SOAP-запроса.'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат ТелоОтвета;
	
КонецФункции

// Выполняет чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета (Строка) - тело в SOAP-конверта-ответа;
//	ОписаниеСервисаПроверкиЛегальности (Структура) - описание веб-сервиса проверки легальности,
//		см. ОписаниеСервисаПроверкиЛегальности();
//	ТипЗначения (ТипЗначенияXDTO, ТипОбъектаXDTO) - тип читаемого значения;
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаПроверкиЛегальности, ТипЗначения)
	
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	Попытка
		
		// Переход к телу ответа
		Пока ЧтениеОтвета.Имя <> "soap:Body" Цикл
			ЧтениеОтвета.Прочитать();
		КонецЦикла;
		
		// Переход к описанию объекта ответа
		ЧтениеОтвета.Прочитать();
		
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения ответа SOAP:
			|%1
			|Тело ответа:
			|%2'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.Имя) = "SOAP:FAULT" Тогда
		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение
			
			ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения ответа SOAP:
				|%1
				|Тело ответа:
				|%2'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
			ВызватьИсключение ТекстИсключения;
			
		КонецПопытки;
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка SOAP-Сервера при обработке запроса: %1'"), ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения));
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Попытка
		Значение = ОписаниеСервисаПроверкиЛегальности.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
	Исключение
		
		ТекстИсключения = ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения объекта (%1) в конверте SOAP:
			|%2
			|Тело ответа:
			|%3'"), Строка(ТипЗначения), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТелоОтвета);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета (ЧтениеXML) - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании
//		исключения SOAP;
//
// Возвращаемое значение:
//	Структура со свойствами:
//		FaultCode (Строка), FaultString (Строка), FaultActor (Строка);
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)
	
	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");
	
	Пока НЕ (ВРег(ЧтениеОтвета.Имя) = "SOAP:BODY" И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.Имя);
			
			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда
				
				ЧтениеОтвета.Прочитать(); // Прочитать текст узла
				
				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;
				
				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеИсключения;
	
КонецФункции

// Выполняет преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP (Структура) - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка: пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)
	
	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = ПодставитьПараметрыВСтроку(НСтр("ru = 'Код ошибки: %1'"), ИсключениеSOAP.FaultCode);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр("ru = 'Строка ошибки: %1'"), ИсключениеSOAP.FaultString);
		Результат = Результат + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр("ru = 'Источник ошибки: %1'"), ИсключениеSOAP.FaultActor);
		Результат = Результат + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
	
КонецФункции

// Возвращает имя события для записи журнала регистрации.
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Обновление конфигурации'");
КонецФункции


