Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ПроверитьНаличиеДругихКорректировокВДанномПериоде()
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	КорректировкаСтоимостиСписанияТоваров.Ссылка
	                      |ИЗ
	                      |	Документ.КорректировкаСтоимостиСписанияТоваров КАК КорректировкаСтоимостиСписанияТоваров
	                      |ГДЕ
	                      |	КорректировкаСтоимостиСписанияТоваров.ПериодРегистрации = &ПериодРегистрации
	                      |	И КорректировкаСтоимостиСписанияТоваров.Проведен
						  |	И КорректировкаСтоимостиСписанияТоваров.Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
			
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции	

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ДатаНач = НачалоМесяца(ПериодРегистрации);
	ДатаКон = КонецМесяца(ПериодРегистрации);
	
	МетаданныеРегистров = Метаданные.РегистрыНакопления;
	
	// Распределение за месяц
	Если НЕ ПравоДоступа("Изменение", МетаданныеРегистров.ПартииТоваровНаСкладах) Тогда
		// отсутствуют права на всю таблицу регистра
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа", Отказ,"ПартииТоваровНаСкладах");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Изменение", МетаданныеРегистров.ПартииТоваровПереданные) Тогда
		// отсутствуют права на всю таблицу регистра
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа", Отказ, "ПартииТоваровПереданные");
		Возврат;
	КонецЕсли;
	
	ДругаяКорректировка = ПроверитьНаличиеДругихКорректировокВДанномПериоде();
	Если ДругаяКорректировка <> Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В периоде " + Формат(ПериодРегистрации, "ДФ='MMMM yyyy'") + " уже существует проведенный документ " + ДругаяКорректировка, Отказ);
		Возврат;
	КонецЕсли;
		
	
	УправлениеЗапасамиПартионныйУчет.ВыполнитьРаспределениеДопРасходов(ДатаНач, ДатаКон, , Ссылка, ДатаКон);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
		
	НазваниеРегистраНаСкладах  = "ПартииТоваровНаСкладах";
	НазваниеРегистраПереданные = "ПартииТоваровПереданные";
	текНоменклатура 		   = Неопределено;
	текДокументОприходования   = Неопределено;
	
	Если НЕ ПравоДоступа("Изменение", МетаданныеРегистров[НазваниеРегистраНаСкладах]) Тогда
		// отсутствуют права на всю таблицу регистра
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа", Отказ,НазваниеРегистраНаСкладах);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Изменение", МетаданныеРегистров[НазваниеРегистраПереданные]) Тогда
		// отсутствуют права на всю таблицу регистра
		ОбщегоНазначения.СообщитьОбОшибке("Нарушение прав доступа", Отказ, НазваниеРегистраПереданные);
		Возврат;
	КонецЕсли;
	
	НомерПорции = 0;
	
	Пока Истина Цикл
		НомерПорции = НомерПорции + 1;
		
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("Номенклатура", текНоменклатура);
		Запрос.УстановитьПараметр("ДокументОприходования", текДокументОприходования);
		
		Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |	Подзапрос.Номенклатура КАК Номенклатура,
		        |	Подзапрос.ДокументОприходования КАК ДокументОприходования
		        |ИЗ
		        |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |		ПодзапросНаСкладах.Номенклатура КАК Номенклатура,
		        |		ПодзапросНаСкладах.ДокументОприходования КАК ДокументОприходования
		        |	ИЗ
		        |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |			НаСкладах.Номенклатура КАК Номенклатура,
		        |			НаСкладах.ДокументОприходования КАК ДокументОприходования
		        |		ИЗ
		        |			РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
		        |		ГДЕ
		        |			НаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		        |			И (НаСкладах.Номенклатура > &Номенклатура
		        |					ИЛИ НаСкладах.Номенклатура = &Номенклатура
		        |						И НаСкладах.ДокументОприходования > &ДокументОприходования)
		        |			И (НаСкладах.ВидДвижения = &ВидДвижения
		        |					ИЛИ НаСкладах.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.Комплектация))) КАК ПодзапросНаСкладах
		        |	
		        |	ОБЪЕДИНИТЬ ВСЕ
		        |	
		        |	ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |		ПодзапросПереданные.Номенклатура,
		        |		ПодзапросПереданные.ДокументОприходования
		        |	ИЗ
		        |		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |			Переданные.Номенклатура КАК Номенклатура,
		        |			Переданные.ДокументОприходования КАК ДокументОприходования
		        |		ИЗ
		        |			РегистрНакопления.ПартииТоваровПереданные КАК Переданные
		        |		ГДЕ
		        |			Переданные.Период МЕЖДУ &ДатаНач И &ДатаКон
		        |			И (Переданные.Номенклатура > &Номенклатура
		        |					ИЛИ Переданные.Номенклатура = &Номенклатура
		        |						И Переданные.ДокументОприходования > &ДокументОприходования)
		        |			И Переданные.ВидДвижения = &ВидДвижения) КАК ПодзапросПереданные) КАК Подзапрос
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Номенклатура,
		        |	ДокументОприходования";
				
		Если НазваниеРегистраНаСкладах <> "ПартииТоваровНаСкладах" тогда
			
			Текст = СтрЗаменить(Текст, "ПартииТоваровНаСкладах",НазваниеРегистраНаСкладах);
			Текст = СтрЗаменить(Текст, "ПартииТоваровПереданные",НазваниеРегистраПереданные);
			
		КонецЕсли;

		Запрос.Текст = Текст;
		Таблица = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Таблица.Количество();
		// Если строки кончились, прерываем цикл
		Если КоличествоСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
		текНоменклатура = Таблица[КоличествоСтрок-1].Номенклатура;
		текДокументОприходования = Таблица[КоличествоСтрок-1].ДокументОприходования;
		
		// Корректировка списания по-средней
		КорректировкаСтоимости.КорректировкаСписания(ДатаНач, ДатаКон, Таблица, Ссылка,
			Справочники.Организации.ПустаяСсылка(),
			Истина,
			Ложь,
			Ложь,
			Неопределено,,НомерПорции);
		
	КонецЦикла;
	
	Период = КонецМесяца(ПериодРегистрации);
	
	// Зарегистрируем в последовательности УУ
	ДокументМоментВремени = Новый МоментВремени(Период, Ссылка);
	
	ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
	ЗаписьРегистрации.Период      = Период;
	
	СдвигатьГраницу = УправлениеЗапасамиПартионныйУчет.ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, "Упр");
				
	Если СдвигатьГраницу Тогда
		Последовательности.ПартионныйУчет.УстановитьГраницу(ДокументМоментВремени);
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.РегламентнаяУстановкаГП(Период, "Упр");
	
	Если НЕ Отказ
		И ПараметрыСеанса.НаличиеОбменаТорговляБухгалтерия Тогда
		
		// регистрация документов для обменом с БП
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ПартииТоваровНаСкладах.ДокументДвижения КАК ДокументДвижения
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.Регистратор = &Регистратор";
					   
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Док = Выборка.ДокументДвижения;
			
			Если Не ЗначениеЗаполнено(Док) Тогда 
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				МассивУзловДляРегистрацииСсылки = ПроцедурыОбменаТорговляБухгалтерия.ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Док, "Документы");
				Если МассивУзловДляРегистрацииСсылки = Неопределено
					ИЛИ МассивУзловДляРегистрацииСсылки.Количество() = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииСсылки, Док);
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры//ОбработкаПроведения

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью
