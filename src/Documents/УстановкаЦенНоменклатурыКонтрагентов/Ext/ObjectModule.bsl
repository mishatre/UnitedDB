Перем мУдалятьДвижения;

Перем мИспользоватьХарактеристики Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыКонтрагентов.Номер,
	|	УстановкаЦенНоменклатурыКонтрагентов.Дата,
	|	УстановкаЦенНоменклатурыКонтрагентов.Ответственный.Представление КАК ОтветственныйПредставление,
	|	ВЫБОР КОГДА УстановкаЦенНоменклатурыКонтрагентов.Контрагент.НаименованиеПолное ПОДОБНО """" ТОГДА
	|		УстановкаЦенНоменклатурыКонтрагентов.Контрагент.Наименование
	|	ИНАЧЕ
	|		УстановкаЦенНоменклатурыКонтрагентов.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПредставлениеКонтрагента
	|ИЗ
	|	Документ.УстановкаЦенНоменклатурыКонтрагентов КАК УстановкаЦенНоменклатурыКонтрагентов
	|ГДЕ
	|	УстановкаЦенНоменклатурыКонтрагентов.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	(УстановкаЦенНоменклатурыКонтрагентов.ИндексСтрокиТаблицыЦен + 1)              КАК НомерСтроки,
	|	УстановкаЦенНоменклатурыКонтрагентов.Номенклатура,
	|	УстановкаЦенНоменклатурыКонтрагентов.Номенклатура.НаименованиеПолное           КАК Товар,
	|	УстановкаЦенНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры                КАК Характеристика,
	|	NULL                                                                           КАК Серия,
	|	УстановкаЦенНоменклатурыКонтрагентов.ТипЦен                                    КАК ТипЦен,
	|	УстановкаЦенНоменклатурыКонтрагентов.Цена,
	|	УстановкаЦенНоменклатурыКонтрагентов.ЕдиницаИзмерения.Представление            КАК ЕдиницаИзмерения,
	|	УстановкаЦенНоменклатурыКонтрагентов.Валюта,
	|	УстановкаЦенНоменклатурыКонтрагентов.Валюта.Представление                      КАК ВалютаПредставление
	|
	|ИЗ
	|	Документ.УстановкаЦенНоменклатурыКонтрагентов.Товары КАК УстановкаЦенНоменклатурыКонтрагентов
	|
	|ГДЕ
	|	УстановкаЦенНоменклатурыКонтрагентов.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаЦенНоменклатурыКонтрагентов.ИндексСтрокиТаблицыЦен,
	|	УстановкаЦенНоменклатурыКонтрагентов.ТипЦен
	|
	|ИТОГИ
	|ПО УстановкаЦенНоменклатурыКонтрагентов.ИндексСтрокиТаблицыЦен
	|";

	ЗапросПоТоварам = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УстановкаЦенНоменклатурыКонтрагентов_ИзменениеЦен";

	Макет = ПолучитьМакет("ИзменениеЦен");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, "Изменение цен номенклатуры");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Контрагент");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкаНоменклатура   = Макет.ПолучитьОбласть("ШапкаТаблицы|Номенклатура");
	ОбластьШапкаТипЦен         = Макет.ПолучитьОбласть("ШапкаТаблицы|Цена");
	ОбластьСтрокаНоменклатура  = Макет.ПолучитьОбласть("Строка|Номенклатура");
	ОбластьСтрокаТипЦен        = Макет.ПолучитьОбласть("Строка|Цена");
	ОбластьПодвалНоменклатура  = Макет.ПолучитьОбласть("Подписи|Номенклатура");
	ОбластьПодвалТипЦен        = Макет.ПолучитьОбласть("Подписи|Цена");

	// Выведем шапку
	ТабДокумент.Вывести(ОбластьШапкаНоменклатура);
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоСтрокам.Следующий() Тогда
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьШапкаТипЦен.Параметры.Заполнить(Выборка);
			ТабДокумент.Присоединить(ОбластьШапкаТипЦен);
		КонецЦикла;
	КонецЕсли;

	// Выведем таблицу
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтрокам.Следующий() Цикл
		НоменклатураВыведена = Ложь;
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ НоменклатураВыведена Тогда
				ОбластьСтрокаНоменклатура.Параметры.Заполнить(Выборка);
				ОбластьСтрокаНоменклатура.Параметры.Товар = СокрЛП(Выборка.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка);
				ТабДокумент.Вывести(ОбластьСтрокаНоменклатура);
				НоменклатураВыведена = Истина;
			КонецЕсли;
			ОбластьСтрокаТипЦен.Параметры.Заполнить(Выборка);
			ТабДокумент.Присоединить(ОбластьСтрокаТипЦен);
		КонецЦикла;
	КонецЦикла;

	// Выведем подвал
	ОбластьПодвалНоменклатура.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьПодвалНоменклатура);
	ВыборкаПоСтрокам = ЗапросПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоСтрокам.Следующий() Тогда
		Выборка = ВыборкаПоСтрокам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТабДокумент.Присоединить(ОбластьПодвалТипЦен);
		КонецЦикла;
	КонецЕсли;

	ТекОбласть = ТабДокумент.Области.ОтветственныйПредставление;

	ОбластьОтветственного = ТабДокумент.Область(ТекОбласть.Низ, 14, ТекОбласть.Низ, Мин(ТабДокумент.ШиринаТаблицы, 27));
	ОбластьОтветственного.Объединить();
	ОбластьОтветственного.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ОбластьОтветственного.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Форма = Неопределено) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПереченьЦен" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПереченьЦен","Перечень цен");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает доступные табличные части для заполнения
//
// Возвращаемое значение:
//   Список значений с именами табличных частей
//
Функция ПолучитьТабличныеЧастиДляЗаполнения() Экспорт

	ТабличныеЧасти = Новый СписокЗначений;
	ТабличныеЧасти.Добавить("ТаблицаЦен", "Таблица цен");
	
	Возврат ТабличныеЧасти;

КонецФункции // ПолучитьТабличныеЧастиДляЗаполнения()


#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Общую процедуру проверки в этом документе звать нельзя, потому что номер строки в форме документа
	// отличается от системного.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.ИндексСтрокиТаблицыЦен + 1) +
			                    """ табличной части для типа цен """ 
			                   + СокрЛП(СтрокаТаблицы.ТипЦен) + """ ";

		// Номенклатура.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена Номенклатура.", Отказ, Заголовок);;
		
		КонецЕсли;

		// Валюта.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Валюта) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена Валюта.", Отказ, Заголовок);;
		
		КонецЕсли;

		// Единица для товаров.
		Если (ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура))
		   И (Не СтрокаТаблицы.Услуга)
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не заполнена единица измерения.", Отказ, Заголовок);;

		
		КонецЕсли;

		// Наборов-пакетов здесь быть не должно.
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) 
		   И  СтрокаТаблицы.Набор Тогда

				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится набор-пакет. " +
				                   "Наборов-пакетов здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

 // Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
		
	НаборДвижений   = Движения.ЦеныНоменклатурыКонтрагентов;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ЦеныНоменклатурыКонтрагентов.ВыполнитьДвижения();
	КонецЕсли;	

КонецПроцедуры // ДвиженияПоРегистрам

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
 
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",               "Номенклатура");
	СтруктураПолей.Вставить("ИндексСтрокиТаблицыЦен"    , "ИндексСтрокиТаблицыЦен");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Услуга"                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Цена",                       "Цена");
	СтруктураПолей.Вставить("Валюта",                     "Валюта");
	СтруктураПолей.Вставить("ЕдиницаИзмерения",           "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ТипЦен",                     "ТипЦен");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.НеПроводитьНулевыеЗначения Тогда
		Сч = 0;
		Пока Сч < ТаблицаПоТоварам.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварам.Получить(Сч);
			Если СтрокаТаблицы.Цена = 0 Тогда
				ТаблицаПоТоварам.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам,Отказ, Заголовок);
	КонецЕсли;


КонецПроцедуры	// ОбработкаПроведения

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	Информация = "";
	Для Каждого ТекущийТип Из ТипыЦен Цикл
		Если Информация <> "" Тогда
			Информация = Информация + ", ";
		КонецЕсли;
		Информация = Информация + СокрЛП(ТекущийТип.ТипЦен);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

мИспользоватьХарактеристики     = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");

