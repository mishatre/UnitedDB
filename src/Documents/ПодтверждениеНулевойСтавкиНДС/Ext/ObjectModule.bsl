Перем мУдалятьДвижения;


Перем мЗаконодательство2006 Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ АВТОЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ ДОКУМЕНТА

Процедура ЗаполнитьСтрокиДокумента() Экспорт

	ТаблицаРезультата = Состав.ВыгрузитьКолонки();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СостояниеПредположения0", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК ПродажиСНДС0,
	|	НДСРеализация0Остатки.Покупатель
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|		&КонецПериода,
	|		Организация = &Организация
	|		    И Состояние = &СостояниеПредположения0) КАК НДСРеализация0Остатки";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(РезультатЗапроса,ТаблицаРезультата);
	ТаблицаРезультата.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0,"Событие");
	ТаблицаРезультата.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НДС18_118,"СтавкаНДС");

	Состав.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ, РежимПроведения = Неопределено) Экспорт

	мЗаконодательство2006 = (Дата >= '20060101');

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Дополним структуру шапки документа положениями учетной политики
	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("НДСПриНеподтвержденииСверху");
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументам) Экспорт
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Покупатель",		"Покупатель");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("ВидЦенности",		"ВидЦенности");
	СтруктураПолей.Вставить("Событие",			"Событие");
	СтруктураПолей.Вставить("СуммаБезНДС",		"ПродажиСНДС0");
	СтруктураПолей.Вставить("НДС",				"СуммаНДС");
	СтруктураПолей.Вставить("СтавкаНДС",		"СтавкаНДС");
	СтруктураПолей.Вставить("ДокРеализации",	"СчетФактура");
	СтруктураПолей.Вставить("СтавкаРеализации",	"СтавкаНДС");

	РезультатЗапросаПоДокументам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураПолей);
	ТаблицаПоДокументам = ПодготовитьТаблицуПоДокументам(РезультатЗапросаПоДокументам,СтруктураШапкиДокумента);
	
КонецПроцедуры
	
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоДокументам(РезультатЗапроса, СтруктураШапкиДокумента)
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	//Принудительная установка ставки НДС 0% по события "Подтверждена ставка 0%".
	СобытиеПодтвержденаСтавка0 = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		Если СтрокаРезультата.Событие = СобытиеПодтвержденаСтавка0 Тогда
			СтрокаРезультата.СтавкаНДС = Ставка0;
			СтрокаРезультата.НДС		= 0;
		КонецЕсли;
	КонецЦикла;
	
	//Заполнение организации для записи в реигистры
	ТаблицаРезультата.Колонки.Добавить("Организация");
	ТаблицаРезультата.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
	
	СкорректироватьВыручкуПоЭкспорту(СтруктураШапкиДокумента, ТаблицаРезультата);
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПодготовитьТаблицуПоДокументам()

// Возвращает таблицу с данными для корректировки 
Процедура СкорректироватьВыручкуПоЭкспорту(СтруктураШапкиДокумента, ТаблицаПоДокументам)
	
	Если мЗаконодательство2006 Тогда
		
		ТаблицаПоДокументам.Колонки.Добавить("КурсоваяРазница", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаПоДокументам.Колонки.Добавить("КурсовыеРазницыПоДокументам", Новый ОписаниеТипов("ТаблицаЗначений"));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НДСУчетРаспределенныхОплатПокупателейОстатки.СчетФактура,
		               |	НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты,
		               |	СУММА(НДСУчетРаспределенныхОплатПокупателейОстатки.РаспределеннаяСуммаОстаток) КАК РаспределеннаяСумма,
		               |	СУММА(НДСУчетРаспределенныхОплатПокупателейОстатки.КурсоваяРазницаОстаток) КАК КурсоваяРазница
		               |ИЗ
		               |	РегистрНакопления.НДСУчетРаспределенныхОплатПокупателей.Остатки(
		               |		&Дата,
		               |		Организация = &Организация
		               |			И СчетФактура В (&СписокСФ)) КАК НДСУчетРаспределенныхОплатПокупателейОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	НДСУчетРаспределенныхОплатПокупателейОстатки.СчетФактура,
		               |	НДСУчетРаспределенныхОплатПокупателейОстатки.ДокументОплаты";
		Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СписокСФ", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаПоДокументам.ВыгрузитьКолонку("СчетФактура")));
		
		ТаблицаКорректировки = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ТаблицаКорректировки.Индексы.Добавить("СчетФактура");
		
		МассивРаспределения = Новый Массив;
		СтруктураОтбора = Новый Структура("СчетФактура");
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДокументам Цикл
			
			СтрокаТаблицы.КурсовыеРазницыПоДокументам = Новый ТаблицаЗначений;
			СтрокаТаблицы.КурсовыеРазницыПоДокументам.Колонки.Добавить("ДокументОплаты");
			СтрокаТаблицы.КурсовыеРазницыПоДокументам.Колонки.Добавить("КурсоваяРазница", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			
			Если Не СтрокаТаблицы.СуммаБезНДС = 0 Тогда
				СтруктураОтбора.СчетФактура = СтрокаТаблицы.СчетФактура;
				СтрокиКорректировки = ТаблицаКорректировки.НайтиСтроки(СтруктураОтбора);
				Если Не СтрокиКорректировки.Количество() = 0 Тогда
					Для Каждого СтрокаКорректировки Из СтрокиКорректировки Цикл
						Если Не СтрокаКорректировки.КурсоваяРазница = 0 Тогда
							СтрокаСДокументом = СтрокаТаблицы.КурсовыеРазницыПоДокументам.Добавить();
							СтрокаСДокументом.ДокументОплаты = СтрокаКорректировки.ДокументОплаты;
							МассивРаспределения.Очистить();
							МассивРаспределения.Добавить(СтрокаТаблицы.СуммаБезНДС);
							МассивРаспределения.Добавить(?(СтрокаКорректировки.РаспределеннаяСумма <= СтрокаТаблицы.СуммаБезНДС, 0, СтрокаКорректировки.РаспределеннаяСумма - СтрокаТаблицы.СуммаБезНДС));
							РаспределеннаяКР = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКорректировки.КурсоваяРазница, МассивРаспределения)[0];
							СтрокаТаблицы.КурсоваяРазница = СтрокаТаблицы.КурсоваяРазница + РаспределеннаяКР;
							СтрокаСДокументом.КурсоваяРазница = РаспределеннаяКР;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументам(ТаблицаПоДокументам, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Покупатель, СчетФактура, Событие"); 
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Состав", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументам, Отказ, Заголовок) Экспорт
	
	////////////////////////////////////////////////////////
	//Движения по регистру НДСРеализация0
	
	// Подготовка таблицы движений по регистру НДСРеализация0
	ТаблицаДвижений_НДСРеализация0 = Движения.НДСРеализация0.ВыгрузитьКолонки();
	
	// Списываем остатки по предположению
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументам,ТаблицаДвижений_НДСРеализация0);
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НДС0,"СтавкаНДС");
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(0, "НДС");
	ТаблицаДвижений_НДСРеализация0.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ТаблицаПоДокументам.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
	ТаблицаПоДокументам.Колонки.Добавить("ВидДвижения");
	ТаблицаПоДокументам.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
	
	// Отражаем подтверждение/неподтверждение 
	Для каждого ТекСтрокаСостав Из ТаблицаПоДокументам Цикл
		Если ТекСтрокаСостав.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 Тогда
			// Выделение НДС из выручки при неподтвержденной ставке 0%
			ТекСтрокаСостав.СуммаБезНДС = ?(СтруктураШапкиДокумента.НДСПриНеподтвержденииСверху, 
											ТекСтрокаСостав.СуммаБезНДС,
											ТекСтрокаСостав.СуммаБезНДС - ТекСтрокаСостав.НДС);
			ТекСтрокаСостав.Состояние   = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
		Иначе
			ТекСтрокаСостав.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			ТекСтрокаСостав.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
			Если мЗаконодательство2006 Тогда
				ТекСтрокаСостав.СуммаБезНДС = ТекСтрокаСостав.СуммаБезНДС + ТекСтрокаСостав.КурсоваяРазница;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументам,ТаблицаДвижений_НДСРеализация0);
	
	//Запись движений
	Движения.НДСРеализация0.мПериод          = СтруктураШапкиДокумента.Дата;
	Движения.НДСРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСРеализация0;
	Движения.НДСРеализация0.ДобавитьДвижение();
	
	//Движения по регистру НДСРеализация0
	////////////////////////////////////////////////////////
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДвижений_НДСРеализация0.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	ДанныеПоРеализации0 = ПолучитьДанныеПоРеализации0(СтруктураШапкиДокумента,СписокСчетовФактур,Отказ);
	ДанныеПоРеализации0.Индексы.Добавить("СчетФактура");
	
	СформироватьДвиженияПоНеподтверждениюСтавки0_Реализация(СтруктураШапкиДокумента, ТаблицаПоДокументам,ДанныеПоРеализации0, Отказ, Заголовок);
	
	////////////////////////////////////////////////////////
	// Движения по регистрам приобретения, отражающие подтверждение или неподтверждение ставки 0
	// для всех поступлений МПЗ, связанных с данной реализацией
	СформироватьДвижениеНДСПредъявленныйРеализация0_ОтражениеПодтверждения0(СтруктураШапкиДокумента, ТаблицаПоДокументам, ДанныеПоРеализации0, Отказ, Заголовок);
	//Движения по регистру НДС покупки (и проводки)
	////////////////////////////////////////////////////////
	
	СформироватьКорректирующиеДвиженияРеализация0_Подтверждение0(СтруктураШапкиДокумента, ТаблицаПоДокументам);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Функция ПолучитьДанныеПоРеализации0(СтруктураШапкиДокумента,СписокСчетовФактур,Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Обороты.СчетФактура,
		|	ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0) КАК СуммаРеализации,
		|	ВЫБОР
		|		КОГДА НДСРеализация0Обороты.СчетФактура.Дата < &Начало2006Года
		|			ТОГДА УчетнаяПолитикаНалоговыйУчет.МоментОпределенияНалоговойБазыНДС
		|		ИНАЧЕ &МоментОпределения_ПоОтгрузке
		|	КОНЕЦ КАК МоментОпределенияНалоговойБазыНДС
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Обороты(
		|		,
		|		&КонецПериода,
		|		Период,
		|		Организация = &Организация
		|		    И СчетФактура В (&СписокСчетовФактур)
		|		    И Состояние = &СостояниеОжидания) КАК НДСРеализация0Обороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО НДСРеализация0Обороты.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|			И (УчетнаяПолитикаНалоговыйУчет.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период)
		|				ИЗ
		|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|				ГДЕ
		|					НДСРеализация0Обороты.СчетФактура.Дата >= УчетнаяПолитикаНалоговыйУчет.Период
		|					И
		|					НДСРеализация0Обороты.Организация = УчетнаяПолитикаНалоговыйУчет.Организация))";
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("СостояниеОжидания", Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("МоментОпределения_ПоОтгрузке", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура вызывается из процедуры ДвиженияПоРегистрам
// Основная задача - на основании данных документа сформировать движения по неподтверждению ставки 0% 
// в регистре "НДС начисиленный"
// в бухгалтерском учете (проводки)
Процедура СформироватьДвиженияПоНеподтверждениюСтавки0_Реализация(СтруктураШапкиДокумента, ТаблицаПоДокументам,ДанныеПоРеализации0, Отказ, Заголовок)

	// Подготовка таблицы движений по регистру НДСРеализация0
	ТаблицаДвижений_НДСНачисленный = Неопределено;
	СостояниеНеПодтвержденаСтавка0 = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
	Ставка0 = Перечисления.СтавкиНДС.НДС0;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоДокументам Цикл
		Если СтрокаТаблицы.Состояние = СостояниеНеПодтвержденаСтавка0 Тогда
			Если ТаблицаДвижений_НДСНачисленный = Неопределено тогда
				ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.ВыгрузитьКолонки();
			КонецЕсли;
			СтрокаДвиженияСторно0 = ТаблицаДвижений_НДСНачисленный.Добавить();
			СтрокаДвиженияСторно0.Организация = СтруктураШапкиДокумента.Организация;
			СтрокаДвиженияСторно0.СчетФактура = СтрокаТаблицы.СчетФактура;
			СтрокаДвиженияСторно0.ВидЦенности = СтрокаТаблицы.ВидЦенности;
			СтрокаДвиженияСторно0.СтавкаНДС   = Ставка0;
			СтрокаДвиженияСторно0.Покупатель  = СтрокаТаблицы.Покупатель;
			СтрокаДвиженияСторно0.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			
			СтрокаДвиженияСторно0.СуммаБезНДС = (-1)*(СтрокаТаблицы.СуммаБезНДС + ?(СтруктураШапкиДокумента.НДСПриНеподтвержденииСверху, 0, СтрокаТаблицы.НДС));
			СтрокаДвиженияСторно0.НДС         = 0;

			СтрокаДвиженияСторно0.Событие     = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
			
			СтрокаДвиженияСторно0.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			СтрокаДвижения = ТаблицаДвижений_НДСНачисленный.Добавить();
			СтрокаДвижения.Организация = СтрокаДвиженияСторно0.Организация;
			СтрокаДвижения.СчетФактура = СтрокаДвиженияСторно0.СчетФактура;
			СтрокаДвижения.ВидЦенности = СтрокаДвиженияСторно0.ВидЦенности;
			СтрокаДвижения.СтавкаНДС   = СтрокаТаблицы.СтавкаНДС;
			СтрокаДвижения.Покупатель  = СтрокаТаблицы.Покупатель;
			СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
			СтрокаДвижения.НДС         = СтрокаТаблицы.НДС;

			СтрокаДвижения.Событие     = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
			
			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			СтрокаИнформацииОРеализации = ДанныеПоРеализации0.Найти(СтрокаДвиженияСторно0.СчетФактура,"СчетФактура");

		КонецЕсли; 
	КонецЦикла; 
	
	Если не ТаблицаДвижений_НДСНачисленный = Неопределено Тогда
		Движения.НДСНачисленный.мПериод	= СтруктураШапкиДокумента.Дата;
		Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
		Движения.НДСНачисленный.ДобавитьДвижение();
	Иначе 
		Возврат;
	КонецЕсли; 

КонецПроцедуры // СформироватьДвиженияПоНеподтверждениюСтавки0()

// Процедура вызывается из процедуры "Обработка проведения".
// Основная задача - на основании движений по регистру НДСПокупки, сделанных документом
// реализации по ставке 0%, заполнить параметры конкретного движения показывающего
// подтверждение или неподтверждение ставки 0%.
//
Процедура СформироватьДвижениеНДСПредъявленныйРеализация0_ОтражениеПодтверждения0(СтруктураШапкиДокумента, ТаблицаДокументовРеализации, ДанныеПоРеализации0, Отказ,Заголовок)

	ТаблицаПодтверждений = ТаблицаДокументовРеализации.Скопировать();
	ТаблицаПодтверждений.Свернуть("СчетФактура,Событие","СуммаБезНДС, НДС" + ?(мЗаконодательство2006, ", КурсоваяРазница", ""));
	ТаблицаПодтверждений.Колонки.Добавить("СуммаРеализации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаПодтверждения Из ТаблицаПодтверждений Цикл
		СтрокаРеализации = ДанныеПоРеализации0.Найти(СтрокаПодтверждения.СчетФактура,"СчетФактура");
		Если СтрокаРеализации = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу <"+Строка(СтрокаПодтверждения.СчетФактура)+"> не обнаружена реализация по ставке НДС 0%.",,Заголовок);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаРеализации.СуммаРеализации) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По документу <"+Строка(СтрокаПодтверждения.СчетФактура)+"> не обнаружена реализация по ставке НДС 0%.",,Заголовок);
		Иначе
			СтрокаПодтверждения.СуммаРеализации = СтрокаРеализации.СуммаРеализации + ?(мЗаконодательство2006, СтрокаПодтверждения.КурсоваяРазница, 0);
		КонецЕсли; 
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ДокументыРеализации = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДокументовРеализации.ВыгрузитьКолонку("СчетФактура"), Истина);
	
	ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.Организация,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.СчетФактура,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.СуммаБезНДСКонечныйОстаток как ОсталосьСуммаБезНДС,
	|	НДСПредъявленныйРеализация0ОстаткиИОбороты.НДСКонечныйОстаток как ОсталосьНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0ОстаткиИОбороты.СуммаБезНДСПриход, 0) как СуммаБезНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0ОстаткиИОбороты.НДСПриход, 0) КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.ОстаткиИОбороты(
	|		,
	|		&КонецПериода,
	|		Период,
	|		,
	|		Организация = &Организация
	|			И ДокументОтгрузки В (&СписокДокументовРеализации)
	|			И Состояние = &СостояниеПредположения0) КАК НДСПредъявленныйРеализация0ОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	СостояниеОжиданияПодтверждения = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение;
	Запрос.УстановитьПараметр("СостояниеПредположения0", СостояниеОжиданияПодтверждения);
	Запрос.УстановитьПараметр("СписокДокументовРеализации", ДокументыРеализации);
	
	ТаблицаОжиданияПодтверждения = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ТаблицаОжиданияПодтверждения.Индексы.Добавить("ДокументОтгрузки");
	
	Для каждого СтрокаПодтверждения Из ТаблицаПодтверждений Цикл
		СтрокиПредположения = ТаблицаОжиданияПодтверждения.НайтиСтроки(Новый Структура("ДокументОтгрузки",СтрокаПодтверждения.СчетФактура));
		Для каждого СтрокаПредположения Из СтрокиПредположения Цикл
			СуммаПодтвержденияПоСтрокеРеализации = СтрокаПодтверждения.СуммаБезНДС + ?(СтрокаПодтверждения.Событие = Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0 и СтруктураШапкиДокумента.НДСПриНеподтвержденииСверху,0, СтрокаПодтверждения.НДС);
			КПогашениюБезНДС = Окр(СтрокаПредположения.СуммаБезНДС*(СуммаПодтвержденияПоСтрокеРеализации)/СтрокаПодтверждения.СуммаРеализации,2);
			КПогашениюБезНДС = Макс(0, Мин(КПогашениюБезНДС,СтрокаПредположения.ОсталосьСуммаБезНДС));
			КПогашениюНДС = Окр(СтрокаПредположения.НДС*(СуммаПодтвержденияПоСтрокеРеализации)/СтрокаПодтверждения.СуммаРеализации,2);
			КПогашениюНДС = Макс(0, Мин(КПогашениюНДС,СтрокаПредположения.ОсталосьНДС));
			
			Если КПогашениюБезНДС =0 и КПогашениюНДС = 0 тогда
				Продолжить;
			КонецЕсли; 
			
			// регистр НДСПредъявленныйРеализация0
			// погашение суммы предположения 0%
			СтрокаСписанияПредположения = ТаблицаДвижений_НДСПредъявленныйРеализация0.Добавить();
			СтрокаСписанияПредположения.Организация		= СтруктураШапкиДокумента.Организация;
			СтрокаСписанияПредположения.СчетФактура		= СтрокаПредположения.СчетФактура;
			СтрокаСписанияПредположения.Состояние		= СостояниеОжиданияПодтверждения;
			СтрокаСписанияПредположения.ДокументОтгрузки = СтрокаПодтверждения.СчетФактура;
			
			СтрокаСписанияПредположения.ВидЦенности		= СтрокаПредположения.ВидЦенности;
			СтрокаСписанияПредположения.СтавкаНДС		= СтрокаПредположения.СтавкаНДС;
			
			СтрокаСписанияПредположения.СуммаБезНДС = КПогашениюБезНДС;
			СтрокаСписанияПредположения.НДС = 		 КПогашениюНДС;
			
			Если СтрокаПодтверждения.Событие = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0 Тогда
				СтрокаСписанияПредположения.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			Иначе
				СтрокаСписанияПредположения.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
			
			СтрокаСписанияПредположения.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			// Отражение подтверждения/неподтверждения 0%
			СтрокаОтраженияПодтверждения = ТаблицаДвижений_НДСПредъявленныйРеализация0.Добавить();
			СтрокаОтраженияПодтверждения.Организация	= СтрокаСписанияПредположения.Организация;
			СтрокаОтраженияПодтверждения.СчетФактура	= СтрокаСписанияПредположения.СчетФактура;
			Если СтрокаСписанияПредположения.Событие	= Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0 Тогда
				СтрокаОтраженияПодтверждения.Состояние	= Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
			Иначе
				СтрокаОтраженияПодтверждения.Состояние	= Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0
			КонецЕсли;
			
			СтрокаОтраженияПодтверждения.ДокументОтгрузки = СтрокаСписанияПредположения.ДокументОтгрузки;
			
			СтрокаОтраженияПодтверждения.ВидЦенности	= СтрокаСписанияПредположения.ВидЦенности;
			СтрокаОтраженияПодтверждения.СтавкаНДС		= СтрокаСписанияПредположения.СтавкаНДС;
			
			СтрокаОтраженияПодтверждения.СуммаБезНДС	= СтрокаСписанияПредположения.СуммаБезНДС;
			СтрокаОтраженияПодтверждения.НДС			= СтрокаСписанияПредположения.НДС;
			
			СтрокаОтраженияПодтверждения.Событие		=   СтрокаСписанияПредположения.Событие;
			
			СтрокаОтраженияПодтверждения.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
			СтрокаПредположения.ОсталосьСуммаБезНДС = СтрокаПредположения.ОсталосьСуммаБезНДС - КПогашениюБезНДС;
			СтрокаПредположения.ОсталосьНДС	 = СтрокаПредположения.ОсталосьНДС    - КПогашениюНДС;
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	Если ТаблицаДвижений_НДСПредъявленныйРеализация0.Количество()>0 Тогда
		Движения.НДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ДобавитьДвижение();
	КонецЕсли; 
		
КонецПроцедуры // СформироватьДвижениеНДСПокупкиПоОтражениюСтавки0()
 
Процедура СформироватьКорректирующиеДвиженияРеализация0_Подтверждение0(СтруктураШапкиДокумента, ТаблицаПоДокументам);
	
	Если мЗаконодательство2006 Тогда
		
		ТаблицаДвижений_НДСНачисленный = Движения.НДСНачисленный.Выгрузить();
		ТаблицаДвижений_НДСНачисленный.Очистить();
		
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей = Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Очистить();
		Для Каждого СтрокаТаблицы Из ТаблицаПоДокументам Цикл
			
			Если Не СтрокаТаблицы.КурсоваяРазница = 0 Тогда
				Если СтрокаТаблицы.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
					ДвижениеНДСНачисленный = ТаблицаДвижений_НДСНачисленный.Добавить();
					ЗаполнитьЗначенияСвойств(ДвижениеНДСНачисленный, СтрокаТаблицы);
					
					ДвижениеНДСНачисленный.СуммаБезНДС = СтрокаТаблицы.КурсоваяРазница;
					ДвижениеНДСНачисленный.НДС = 0;
					ДвижениеНДСНачисленный.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
					
				КонецЕсли;
				
				Для Каждого СтрокаКР Из СтрокаТаблицы.КурсовыеРазницыПоДокументам Цикл
					ДвижениеНДСРасчетыСПокупателями = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
					ДвижениеНДСРасчетыСПокупателями.Организация = СтруктураШапкиДокумента.Организация;
					ДвижениеНДСРасчетыСПокупателями.СчетФактура = СтрокаТаблицы.СчетФактура;
					ДвижениеНДСРасчетыСПокупателями.ДокументОплаты = СтрокаКР.ДокументОплаты;
					Если СтрокаТаблицы.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
						ДвижениеНДСРасчетыСПокупателями.РаспределеннаяСумма = СтрокаКР.КурсоваяРазница;
						ДвижениеНДСРасчетыСПокупателями.КурсоваяРазница = (-1)*СтрокаКР.КурсоваяРазница;
						ДвижениеНДСРасчетыСПокупателями.ВидДвижения = ВидДвиженияНакопления.Приход;
					Иначе
						ДвижениеНДСРасчетыСПокупателями.ВидДвижения = ВидДвиженияНакопления.Расход;
						ДвижениеНДСРасчетыСПокупателями.КурсоваяРазница = СтрокаКР.КурсоваяРазница;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДвижений_НДСНачисленный.Количество() > 0  Тогда
			Движения.НДСНачисленный.мПериод	= СтруктураШапкиДокумента.Дата;
			Движения.НДСНачисленный.мТаблицаДвижений = ТаблицаДвижений_НДСНачисленный;
			Движения.НДСНачисленный.ВыполнитьПриход(Ложь);
		КонецЕсли;
		
		Если ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Количество()>0 Тогда
			Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод	= СтруктураШапкиДокумента.Дата;
			Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
			Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ, Режим);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументам);

	ПроверитьЗаполнениеТабличнойЧастиПоДокументам(ТаблицаПоДокументам, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоДокументам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мЗаконодательство2006 = (Дата >= '20060101');