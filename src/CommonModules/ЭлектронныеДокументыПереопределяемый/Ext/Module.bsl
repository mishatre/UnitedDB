
// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.Подтверждение);
	Массив.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
	Массив.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с типами объектов

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументСсылка.ПроизвольныйЭД")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.ПроизвольныйЭД") Тогда
		 
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		 
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			Если Источник.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот Тогда
				ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.АктИсполнитель;
			ИначеЕсли Источник.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав Тогда
				ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.АктНаПередачуПрав;
			Иначе
				ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ТОРГ12Продавец;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		 
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда 
		 
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ЗаказТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПокупателя")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		 
		ПараметрыЭД.ВидЭД =  Перечисления.ВидыЭД.ОтветНаЗаказ;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;

	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		 
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		 
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		 
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		 
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;

	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		ИсходныйИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Истина);
		
		Если Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
			 ИЛИ (ТипЗнч(Источник.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") 
			     И Источник.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение) Тогда
			 
			// Выполняется согласованное изменение или исправление согласованного изменения
			ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
			
		ИначеЕсли ТипЗнч(ИсходныйИсправляемыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если ИсходныйИсправляемыйДокумент.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот Тогда
				// Выполняется исправление Акта выполненных работ
				ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.АктИсполнитель;
				ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
			ИначеЕсли ИсходныйИсправляемыйДокумент.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав Тогда
				// Выполняется исправление Акта на передачу прав
				ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.АктНаПередачуПрав;
				ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
			Иначе
				// Выполняется исправление ТОРГ-12
				ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.ТОРГ12Продавец;
				ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		 
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		ИначеЕсли Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент  = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";	
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Организации", 				 "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", 				 "Контрагенты");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов", 		 "ДоговорыКонтрагентов");
	СоответствиеСправочников.Вставить("Партнеры",    				 "");
	СоответствиеСправочников.Вставить("Банки",       				 "Банки");
	
	СоответствиеСправочников.Вставить("Номенклатура",                "Номенклатура");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",  "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения",            "ЕдиницыИзмерения");
	СоответствиеСправочников.Вставить("НоменклатураПоставщиков",     "");
	СоответствиеСправочников.Вставить("Валюты",                      "Валюты");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры",        "");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом", "");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "");
	СоответствиеПеречислений.Вставить("СпособРасчета", "");
	
КонецПроцедуры

// В функции описана структура сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// 
// Параметры:
//  Ключ соответствия - имя переменной, используемой в коде библиотеки;
//  Значение соответствия - наименование объекта метаданных или реквизита объекта
//  в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДиРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданныйВМетаданных",       "СчетФактураВыданный");
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураПолученныйВМетаданных",     "СчетФактураПолученный");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "Дата");
	СоответствиеРеквизитовОбъекта.Вставить("НомерСчета",                           "НомерСчета");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   "Партнер");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации",                      "ОГРН");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   "Наименование");

КонецПроцедуры

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи", "ИспользоватьЭлектронныеЦифровыеПодписи");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДСБанками",            "ИспользоватьОбменЭДСБанками");
	
	СоответствиеФО.Вставить("ИспользоватьРучныеСкидкиВПродажах",         Неопределено);
	СоответствиеФО.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", Неопределено);
	СоответствиеФО.Вставить("ИспользоватьРучныеСкидкиВЗакупках",         Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
	СоответствиеСтавокНДС = Новый Соответствие();
	
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
КонецПроцедуры

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.СчетФактураВыданный
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Результат = (СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Результат = (СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт

	ИспользуетсяСправочникПартнеры = Ложь;

КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования в библиотеке справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Определение ключевых реквизитов объектов для регистрации изменений

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка, текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  СтруктураКлючевыхРеквизитов - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов) Экспорт
	
	Если ИмяОбъекта = "Документ.ПроизвольныйЭД" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, Текст");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента, УчитыватьНДС, ВидОперации");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Содержание, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеТоваровУслуг" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента, УчитыватьНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Содержание, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СуммаДокумента, СуммаНДСДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураПолученный" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СуммаДокумента, СуммаНДСДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПоставщику" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента, УчитыватьНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Содержание, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПокупателя" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента, УчитыватьНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Содержание, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетНаОплатуПокупателю" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента, УчитыватьНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Содержание, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента, УчитыватьНДС, ВидОперации");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС, 
								|КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СтавкаНДСДоИзменения, 
								|КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Содержание, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС, 
								|КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СтавкаНДСДоИзменения, СодержаниеДоИзменения, 
								|КоличествоДоКорректировки, ЦенаДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитентуОПродажах" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента, УдержатьКомиссионноеВознаграждение, 
								|СпособРасчетаКомиссионногоВознаграждения, СуммаВознаграждения, СтавкаНДСВознаграждения, ПроцентКомиссионногоВознаграждения");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Количество, Цена, Сумма, СтавкаНДС, 
								|ЦенаПоступления, СуммаПоступления, СуммаВознаграждения, СуммаНДСВознаграждения, Покупатель, ДатаРеализации");
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом данных ФНС

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеДокумента = ПолучитьДанныеРеализации(СсылкаНаОбъект);
	РеквизитыШапки = ДанныеДокумента.РеквизитыШапки;
	ТаблицаТоваров = ДанныеДокумента.ТаблицаТоваров;
	ТаблицаСН      = ДанныеДокумента.ТаблицаСН;
	
	ЗаполнитьДатуИНомер(ДеревоДанных, РеквизитыШапки, СсылкаНаОбъект, "НомерТоварнойНакладной", "ДатаТоварнойНакладной");

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокОснованиеНаименование", РеквизитыШапки.ДоговорНаименование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокОснованиеНомер", РеквизитыШапки.ДоговорНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокОснованиеДата", РеквизитыШапки.ДоговорДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", РеквизитыШапки.ВидОперации);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаДокумента.Код);
	Если ЗначениеЗаполнено(РеквизитыШапки.Сделка) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", Строка(ТипЗнч(РеквизитыШапки.Сделка)));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", ОбщегоНазначения.ПолучитьНомерНаПечать(РеквизитыШапки.Сделка));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Сделка, "Дата"));
	КонецЕсли;
	
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель);

	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПоставщике,       "Юр",   "Поставщик");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПокупателе,       "Юр",   "Плательщик");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОГрузополучателе,  "Факт", "Грузополучатель");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОГрузоотправителе, "Факт", "Грузоотправитель");

	ИтоговыеСуммы = СтруктураИтоговыеСуммы(ТаблицаТоваров, СтруктураЭД.ВидЭД);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"СведенияПоОтпускуГруза.ОтпущеноНаСумму", ИтоговыеСуммы.СуммаСНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью", СуммаПрописью(ИтоговыеСуммы.СуммаСНДС));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"СведенияПоОтпускуГруза.ДатаОтпуска", РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.ВсегоМест", ИтоговыеСуммы.КоличествоМест);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, ,",,,,,,,,0"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто", ИтоговыеСуммы.МассаНетто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто", ИтоговыеСуммы.МассаБрутто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ВсегоПоНакладной.КоличествоМест", ИтоговыеСуммы.КоличествоМест);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ВсегоПоНакладной.МассаБрутто", ИтоговыеСуммы.МассаБрутто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ВсегоПоНакладной.МассаНетто", ИтоговыеСуммы.МассаНетто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДС", ИтоговыеСуммы.СуммаБезНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДС", ИтоговыеСуммы.СуммаНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДС", ИтоговыеСуммы.СуммаСНДС);
	
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСЧислом");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		СтрокаТоваров.СтавкаНДСЧислом = ПолучитьСтавкуНДСЧислом(СтрокаТоваров.СтавкаНДС);
		СтруктураДопДанных = Новый Структура;
		
		ИДТовара = СтрокаТоваров.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(СтрокаТоваров.Характеристика), СтрокаТоваров.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = "";

		СтрокаТоваров.ИдТовараУКонтрагента = Строка(ИДТовара)+"#"+Строка(ИДХарактеристики)+"#"+Строка(ИДУпаковки);
		
		СтруктураОтбораСН = Новый Структура("КлючСвязи", СтрокаТоваров.КлючСвязи);
		СтрокиСН = ТаблицаСН.НайтиСтроки(СтруктураОтбораСН);
		Если СтрокиСН.Количество() > 0 Тогда
			СерийныеНомера = Новый Массив();
			Для Каждого СтрокаСН Из СтрокиСН Цикл
				СерийныеНомера.Добавить(СтрокаСН.СерийныйНомер);
			КонецЦикла;
			СтруктураДопДанных.Вставить("СерийныеНомера", СерийныеНомера);
		КонецЕсли;

		СтрокаТоваров.ДопДанныеПодписанные = СтруктураДопДанных;
	КонецЦикла;
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	СтруктураДопДанных = Новый Структура;
	Если ЗначениеЗаполнено(РеквизитыШапки.АдресДоставки) Тогда
		СтруктураДопДанных.Вставить("АдресДоставки", УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(РеквизитыШапки.АдресДоставки));
	КонецЕсли;
    ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);

КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТОРГ12ПокупательФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеДокумента = ПодготовитьДанныеАктаОбОказанииУслуг(СсылкаНаОбъект);
	РеквизитыШапки = ДанныеДокумента.РеквизитыШапки;
	ТаблицаУслуг = ДанныеДокумента.ТаблицаУслуг;
	
	ЗаполнитьДатуИНомер(ДеревоДанных, РеквизитыШапки, СсылкаНаОбъект, "НомерАкта", "ДатаАкта");

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", РеквизитыШапки.ВидОперации);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", РеквизитыШапки.ДоговорНаименование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", РеквизитыШапки.ДоговорНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", РеквизитыШапки.ДоговорДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок",
		"Мы, нижеподписавшиеся,  представитель ИСПОЛНИТЕЛЯ, с одной стороны и  представитель ЗАКАЗЧИКА с другой стороны,
		|составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):");

	СведенияОИсполнителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Исполнитель);
	СведенияОЗаказчике   = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Заказчик);
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОИсполнителе, "Юр", "Исполнитель");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОЗаказчике,   "Юр", "Заказчик");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		РеквизитыШапки.ДатаДокумента);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот",
			РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот",
			РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
			ТаблицаУслуг.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
			ТаблицаУслуг.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
			ТаблицаУслуг.Итог("СуммаСНДС"));
	
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ИдТовараУКонтрагента");
	Для Каждого СтрокаТоваров Из ТаблицаУслуг Цикл
		
		ИДТовара = СтрокаТоваров.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(СтрокаТоваров.Характеристика), СтрокаТоваров.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = "";
		
		СтрокаТоваров.ИдТовараУКонтрагента = Строка(ИДТовара)+"#"+Строка(ИДХарактеристики)+"#"+Строка(ИДУпаковки);
	КонецЦикла;
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");

КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа",
		ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	// Вызывается для с/ф выставленного: "На реализацию", "На аванс", "Исправление".
	
	ДанныеДляФормированияЭД = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	СсылкаНаОбъект.ПолучитьОбъект().СобратьДанныеДляПечати(ДанныеДляФормированияЭД, УчетнаяПолитика);
	
	ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВалютаДокумента");
	Если ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		ОкруглитьЧисловыеПоля(ДанныеДляФормированияЭД);
	КонецЕсли;
		
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, 
		"Номер, Дата, Исправление, НомерИсправления, НомерИсходногоДокумента, ДатаИсходногоДокумента, ВидСчетаФактуры");
	РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект.ДоговорКонтрагента, 
		"Наименование, Номер, Дата");
	
	// Заполним реквизиты шапки
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНаименование", РеквизитыДоговора.Наименование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиНомер", РеквизитыДоговора.Номер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументСделкиДата", РеквизитыДоговора.Дата);
	
	МассивДокументовОснований = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивДокументовОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	Если ЗначениеЗаполнено(МассивДокументовОснований) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", МассивДокументовОснований);
	КонецЕсли;

	НомерСФ = ?(РеквизитыСФ.Исправление, РеквизитыСФ.НомерИсходногоДокумента, ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	ДатаСФ  = ?(РеквизитыСФ.Исправление, РеквизитыСФ.ДатаИсходногоДокумента,  ДанныеДляФормированияЭД.Дата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", НомерСФ);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  ДатаСФ);
	
	Если РеквизитыСФ.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", РеквизитыСФ.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  РеквизитыСФ.Дата);
	КонецЕсли;

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", 
		глЗначениеПеременной("ВалютаРегламентированногоУчета").Код);
		
	Если РеквизитыСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ВидСчетаФактуры = "Авансовый";
	Иначе
		ВидСчетаФактуры = "Реализация";
	КонецЕсли;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель);
	Если ВидСчетаФактуры = "Реализация" Тогда
		Если ТипЗнч(ДанныеДляФормированияЭД.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляФормированияЭД.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляФормированияЭД.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				КПП = СведенияОПокупателе.КПП;
				СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыПокупателя.ГоловнойКонтрагент);
				СведенияОПокупателе.КПП = КПП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПоставщике, "Юр", "Продавец");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПокупателе, "Юр", "Покупатель");
	
	ДанныеДляФормированияЭД.ТаблицаДатОплат.Колонки.НомерПлатежноРасчетногоДокумента.Имя = "НомерПРД";
	ДанныеДляФормированияЭД.ТаблицаДатОплат.Колонки.ДатаПлатежноРасчетногоДокумента.Имя  = "ДатаПРД";
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДанныеДляФормированияЭД.ТаблицаДатОплат, "ПлатежноРасчетныеДокументы");
	
	// Заполним таблицу товаров
	
	ТолькоУслуги = Истина;
	
	КолонкиТЧ = ДанныеДляФормированияЭД.ТабличнаяЧасть.Колонки;
	КолонкиТЧ.ТоварНаименование.Имя      = "НаименованиеНоменклатуры";
	КолонкиТЧ.СтранаПроисхожденияКод.Имя = "КодСтраныПроисхождения";
	КолонкиТЧ.ПредставлениеГТД.Имя       = "НомерТаможеннойДекларации";
	КолонкиТЧ.Товар.Имя     			 = "Номенклатура";
	
	КолонкиТЧ.Добавить("ИдТовараУКонтрагента", ОбщегоНазначения.ПолучитьОписаниеТиповстроки(200));
	КолонкиТЧ.Добавить("СуммаБезНДС", 		   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	КолонкиТЧ.Добавить("СуммаСНДС",            ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	КолонкиТЧ.Добавить("Акциза",               ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(18));
	
	НомераСтрокСОшибками = "";
	МаксимальнаяДлинаНомераГТД = 29;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если ВидСчетаФактуры = "Авансовый" И 
			(Не ЗначениеЗаполнено(Строка.Номенклатура) ИЛИ ТипЗнч(Строка.Номенклатура) = Тип("Строка")) Тогда
			ТекстОшибки = "Для формирования электронного документа необходимо заполнить реквизит ""Номенклатура (обобщенное наименование)""";
			Прервать;
		КонецЕсли;
		
		Если ТолькоУслуги
			И ((ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Номенклатура.Услуга)) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		Строка.СуммаБезНДС               = ?(Строка.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
		Строка.СуммаСНДС                 = ?(Строка.СуммаВключаетНДС, Строка.Сумма, Строка.Сумма + Строка.СуммаНДС);
		Строка.Акциза                    = "без акциза";
		
		Если Строка.Количество = 0 Тогда
			Строка.Цена = 0;
		Иначе
			Строка.Цена = Окр(Строка.СуммаБезНДС / Строка.Количество, 2);
		КонецЕсли;
		
		Строка.НомерТаможеннойДекларации = СокрЛП(Строка.НомерТаможеннойДекларации);
		Если СтрДлина(Строка.НомерТаможеннойДекларации) > МаксимальнаяДлинаНомераГТД Тогда
			НомераСтрокСОшибками = НомераСтрокСОшибками + Строка(Строка.НомерСтроки) + " ,"
		КонецЕсли;

		ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Строка.Характеристика), Строка.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = "";
		Строка.ИдТовараУКонтрагента = Строка(ИДТовара)+"#"+Строка(ИДХарактеристики)+"#"+Строка(ИДУпаковки);

	КонецЦикла;
	
	Если ЗначениеЗаполнено(НомераСтрокСОшибками) Тогда
		НомераСтрокСОшибками = Лев(НомераСтрокСОшибками, СтрДлина(НомераСтрокСОшибками)-1);
		ШаблонОшибки = НСтр("ru = 'Длина номера ГТД в строках %1 превышает %2 символов.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, 
			НомераСтрокСОшибками, Строка(МаксимальнаяДлинаНомераГТД));
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДанныеДляФормированияЭД.ТабличнаяЧасть, "ТаблицаТоваров");
	
	// Заполним оставшиеся реквизиты шапки
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаБезНДСВсего", 
		ДанныеДляФормированияЭД.ТабличнаяЧасть.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего", 
		ДанныеДляФормированияЭД.ТабличнаяЧасть.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаНДСВсего", 
		ДанныеДляФормированияЭД.ТабличнаяЧасть.Итог("СуммаНДС"));
		
	Если НЕ ТолькоУслуги Тогда
			
		Если ЗначениеЗаполнено(ДанныеДляФормированияЭД.Грузоотправитель) И ДанныеДляФормированияЭД.Грузоотправитель <> "он же" Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе", "Грузоотправитель");
			СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Грузоотправитель);
			ЗаполнитьСведенияУчастникаСФ(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель", "Факт");
		Иначе
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе", "ОнЖе");
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДляФормированияЭД.Грузополучатель) Тогда
			СведенияОГрузополучателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Грузополучатель);
			ЗаполнитьСведенияУчастникаСФ(ДеревоДанных, СведенияОГрузополучателе, "Грузополучатель", "Факт");
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе", "ОнЖе");
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		СтрокаСОшибкой = ДеревоДанных.Строки.Добавить();
		СтрокаСОшибкой.ПолныйПуть = "ТекстОшибки";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	// Вызывается для с/ф выставленного: "Корректировочный".
	
	ДанныеДляФормированияЭД = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	СсылкаНаОбъект.ПолучитьОбъект().СобратьДанныеДляПечати(ДанныеДляФормированияЭД, УчетнаяПолитика);
	
	ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВалютаДокумента");
	Если ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		ОкруглитьЧисловыеПоля(ДанныеДляФормированияЭД);
	КонецЕсли;
		
	РеквизитыСФ = Новый Структура("Номер, Дата,
								|Исправление, НомерИсправления,
								|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента,
								|НомерИсходногоДокумента, ДатаИсходногоДокумента,
								|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
	ЗапросРеквизитовОснований = Новый Запрос();
	ЗапросРеквизитовОснований.Параметры.Вставить("Ссылка", СсылкаНаОбъект.Ссылка);
	ЗапросРеквизитовОснований.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Исправление КАК Исправление,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|			И (СчетФактураВыданныйДокументыОснования.НомерСтроки = 1)
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	Выборка = ЗапросРеквизитовОснований.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСФ, Выборка);
	КонецЕсли;
		
	// Заполним реквизиты шапки
	
	МассивДокументовОснований = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивДокументовОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	Если ЗначениеЗаполнено(МассивДокументовОснований) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", МассивДокументовОснований);
	КонецЕсли;

	Если РеквизитыСФ.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерКорСчетаФактуры", РеквизитыСФ.НомерИсправляемогоКорректировочногоДокумента);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаКорСчетаФактуры",  РеквизитыСФ.ДатаИсправляемогоКорректировочногоДокумента);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияКорСчетаФактуры", РеквизитыСФ.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияКорСчетаФактуры",  РеквизитыСФ.Дата);
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерКорСчетаФактуры", ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаКорСчетаФактуры",  РеквизитыСФ.Дата);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", РеквизитыСФ.НомерИсходногоДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  РеквизитыСФ.ДатаИсходногоДокумента);
	
	Если РеквизитыСФ.УчитыватьИсправлениеИсходногоДокумента Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", РеквизитыСФ.НомерИсправленияИсходногоДокумента);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  РеквизитыСФ.ДатаИсправленияИсходногоДокумента);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", 
		глЗначениеПеременной("ВалютаРегламентированногоУчета").Код);
		
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Поставщик);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеДляФормированияЭД.Покупатель);
	Если ТипЗнч(ДанныеДляФормированияЭД.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляФормированияЭД.Покупатель) Тогда
		РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляФормированияЭД.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
		Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
			КПП = СведенияОПокупателе.КПП;
			СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыПокупателя.ГоловнойКонтрагент);
			СведенияОПокупателе.КПП = КПП;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПоставщике, "Юр", "Продавец");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПокупателе, "Юр", "Покупатель");
	
	// Заполним таблицу товаров
	
	ТолькоУслуги = Истина;
	
	КолонкиТЧ = ДанныеДляФормированияЭД.ТабличнаяЧасть.Колонки;
	
	КолонкиТЧ.НаименованиеТовара.Имя = "НаименованиеНоменклатуры";
	КолонкиТЧ.СтавкаНДС.Имя     	 = "Ставка";
	
	КолонкиТЧ.Добавить("ИдТовараУКонтрагента",  ОбщегоНазначения.ПолучитьОписаниеТиповстроки(200));
	КолонкиТЧ.Добавить("ЕдиницаИзмеренияКодДо", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
	
	КолонкиДляПереименования = Новый Структура ("Количество,Цена,СуммаНДС,СтоимостьБезНДС,СтоимостьСНДС",
		"Количество","Цена","СуммаНДС","СуммаБезНДС","СуммаСНДС");
	Для Каждого ИмяКолонки Из КолонкиДляПереименования Цикл
		КолонкиТЧ[ИмяКолонки.Ключ+"ДоИзменения"].Имя    = ИмяКолонки.Значение+"До";
		КолонкиТЧ[ИмяКолонки.Ключ+"ПослеИзменения"].Имя = ИмяКолонки.Значение;
	КонецЦикла;
	
	КолонкиДляДобавления = "Акциза,СтавкаНДС";
	ИменаКолонокДляДобавления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиДляДобавления);
	Для Каждого ИмяКолонки Из ИменаКолонокДляДобавления Цикл
		КолонкиТЧ.Добавить(ИмяКолонки);
		КолонкиТЧ.Добавить(ИмяКолонки+"До");
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		Если ТолькоУслуги
			И ((ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Номенклатура.Услуга)) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		Строка.Акциза                    = "без акциза";
		Строка.АкцизаДо                  = "без акциза";
		
		Если Строка.Количество = 0 Тогда
			Строка.Цена = 0;
		Иначе
			Строка.Цена = Окр(Строка.СуммаБезНДС / Строка.Количество, 2);
		КонецЕсли;
		
		Строка.СтавкаНДС = Строка.Ставка;
		Строка.СтавкаНДСДо = Строка.Ставка;
		
		Строка.ЕдиницаИзмеренияКодДо = Строка.ЕдиницаИзмеренияКод;
		
		ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Строка.Характеристика), Строка.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = "";
		Строка.ИдТовараУКонтрагента = Строка(ИДТовара)+"#"+Строка(ИДХарактеристики)+"#"+Строка(ИДУпаковки);

	КонецЦикла;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДанныеДляФормированияЭД.ТабличнаяЧасть, "ТаблицаТоваров");
	
	// Заполним оставшиеся реквизиты шапки
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего", 
		ДанныеДляФормированияЭД.ТабличнаяЧасть.Итог("СуммаСНДС"));

КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеДокумента = ПолучитьДанныеСогласованногоИзменения(СсылкаНаОбъект);
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	
	ИсходныйИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(РеквизитыШапки.ДокументОснование, Истина);
	ИсходныйИсправляемыйДокументМетаданные = ИсходныйИсправляемыйДокумент.Метаданные();
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель);
	
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПоставщике,       	    , "Поставщик");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОГрузоотправителе, "Факт", "Грузоотправитель");
	
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОПокупателе,       		, "Плательщик");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОГрузополучателе,  "Факт", "Грузополучатель");

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокОснованиеНаименование",  РеквизитыШапки.ДоговорНаименование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокОснованиеНомер", 		РеквизитыШапки.ДоговорНомер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокОснованиеДата", 			РеквизитыШапки.ДоговорДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования",        РеквизитыШапки.ДокументОснование);

	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("ВалютаКод",   РеквизитыШапки.ВалютаКод);
	СтруктураДопДанных.Вставить("ВидОперации", РеквизитыШапки.ВидОперации);
	ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);

	// Табличные части {
	ТаблицаТоваров = ДанныеДокумента.ТаблицаТоваров.Скопировать();
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	ОбработатьТаблицуТоваров(ТаблицаТоваров, Истина, "ИдТовараУКонтрагента");
	ИтоговыеСуммы = СтруктураИтоговыеСуммы(ТаблицаТоваров, СтруктураЭД.ВидЭД);
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	// Табличные части {
	
	// Сведения по отпуску груза {
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"СведенияПоОтпускуГруза.ОтпущеноНаСумму",
								ИтоговыеСуммы.СуммаСНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью",
								СуммаПрописью(ИтоговыеСуммы.СуммаСНДС));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"СведенияПоОтпускуГруза.ДатаОтпуска",
								РеквизитыШапки.ДатаДокумента);
	// Сведения по отпуску груза }

	// Всего по накладной {
	Для Каждого Итог Из ИтоговыеСуммы Цикл
		Если Итог.Ключ <> "КоличествоПорядковыхНомеровЗаписей" Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной."+Итог.Ключ, Итог.Значение);
		КонецЕсли;
	КонецЦикла;
	// Всего по накладной }
	
	// Общие cведения о товарной накладной {
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
								ИтоговыеСуммы.КоличествоМест);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.ВсегоМестПрописью",
								ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, ,",,,,,,,,0"));
								
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
								ИтоговыеСуммы.МассаНетто);
								
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
								ИтоговыеСуммы.МассаБрутто);
	// Общие cведения о товарной накладной }
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет данные для электронного документа типа Акт на передачу прав.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Данные = Документы.РеализацияТоваровУслуг.ПолучитьДанныеДляПечатиАктаНаПередачуПрав(СсылкаНаОбъект, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	
	Сч = Данные.Строки.Количество() - 1;
	Пока Сч >= 0 Цикл
		СтрокаТЧ = Данные.Строки[Сч];
		Если СтрокаТЧ.Количество = 0 ИЛИ СтрокаТЧ.Сумма = 0 Тогда
			Данные.Строки.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	ЗаполнитьДатуИНомер(ДеревоДанных, Данные, СсылкаНаОбъект, "Номер", "Дата");

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", Данные.ВидОперации);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", Данные.ДокументыОснования);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта", Данные.ВалютаДанных.Код);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Курс", "1");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма", Данные.Строки.Итог("СуммаСНДС"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "КодПартнера", Данные.КодПартнера);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОтсрочкаПлатежаДней", Данные.ОтсрочкаПлатежаДней);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ПроцентШтрафаЗаДеньПросрочки", Данные.ПроцентШтрафаЗаДеньПросрочки);
	
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, Данные.СведенияОЛицензиаре,  "Факт", "Лицензиар",  "Произвольный");
	
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, Данные.СведенияОЛицензиате,  "Факт", "Лицензиат",  "Произвольный");
	
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, Данные.СведенияОПлательщике, "Юр",   "Плательщик", "Произвольный");
	
	ИмяКолонкиИД = "ИдТовараУКонтрагента";
	КолонкаИД = Данные.Строки.Колонки.Найти(ИмяКолонкиИД);
	Если КолонкаИД = Неопределено Тогда
		Данные.Строки.Колонки.Добавить(ИмяКолонкиИД);
	КонецЕсли;
	ОбработатьТаблицуТоваров(Данные.Строки, Ложь, ИмяКолонкиИД);
	
	Данные.Строки.Колонки.Добавить("Свойства");
	тзСвойства = Новый ТаблицаЗначений;
	тзСвойства.Колонки.Добавить("Наименование");
	тзСвойства.Колонки.Добавить("Значение");
	Для Каждого СтрокаДанных Из Данные.Строки Цикл
		тзПараметры = ЭлектронныеДокументыВнутренний.ПолучитьПараметрыДокументовОснований(СтрокаДанных.ДокументОснование);
		Если тзПараметры.Количество() = 0 Тогда
			// ЭД не сформирован
			Продолжить;
		КонецЕсли;
		тзСвойства.Очистить();
		СтрокаТЗ = тзСвойства.Добавить();
		СтрокаТЗ.Наименование = "ИДЭД";
		СтрокаТЗ.Значение = тзПараметры[0].Наименование;
		СтрокаТЗ = тзСвойства.Добавить();
		СтрокаТЗ.Наименование = "ВидЭД";
		СтрокаТЗ.Значение = тзПараметры[0].ВидЭД;
		СтрокаТЗ = тзСвойства.Добавить();
		СтрокаТЗ.Наименование = "НомерДокументаОтправителя";
		СтрокаТЗ.Значение = тзПараметры[0].НомерДокументаОтправителя;
		СтрокаТЗ = тзСвойства.Добавить();
		СтрокаТЗ.Наименование = "ДатаДокументаОтправителя";
		СтрокаТЗ.Значение = тзПараметры[0].ДатаДокументаОтправителя;
		СтрокаДанных.Свойства = тзСвойства.Скопировать();
	КонецЦикла;
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, Данные.Строки, "Товары");
	
	СтруктураЭД.Вставить("СуммаДокумента", Данные.Строки.Итог("СуммаСНДС"));
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры: 
// СсылкаНаОбъект - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	СведенияОбОрганизации = ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОбОрганизации, "Юр", "Организация");
	
	Руководитель = ОтветственноеЛицоОрганизации(ТекущаяДатаСеанса(), СсылкаНаОбъект, 
		Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
	
	Если ТипЗнч(Руководитель.СтруктураФИО) = Тип("Структура") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Фамилия", 
			Руководитель.СтруктураФИО.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Имя", 
			Руководитель.СтруктураФИО.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Отчество", 
			Руководитель.СтруктураФИО.Отчество);
	КонецЕсли;
		
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Должность", Руководитель.Должность);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты "+СведенияОбОрганизации.ОфициальноеНаименование);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом

// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры:
//  Организация - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
	
	СведенияОВладельце = ПолучитьДанныеЮрФизЛица(Организация);
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДанных, СведенияОВладельце, "Факт", "Владелец", "Произвольный");
	
	ТаблицаТоваров = ТоварыКаталога.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКаталога.Номенклатура,
	|	ТоварыКаталога.ХарактеристикаНоменклатуры,
	|	ТоварыКаталога.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТоварыКаталога КАК ТоварыКаталога
	|;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура.Артикул								 				КАК Артикул,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура.НаименованиеПолное КАК Строка(255))		КАК Наименование,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры.Наименование 							КАК НаименованиеХарактеристики,
	|	ТаблицаТоваров.Номенклатура														КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры 										КАК Характеристика,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения 							КАК БазоваяЕдиница,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код 						КАК БазоваяЕдиницаКод,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование 				КАК БазоваяЕдиницаНаименование,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное 			КАК БазоваяЕдиницаНаименованиеПолное,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение		КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Код 											КАК УпаковкаКод,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Наименование 									КАК УпаковкаНаименование,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Код												КАК УпаковкаПоОКЕИ
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Запрос.УстановитьПараметр("ТоварыКаталога", ТоварыКаталога);
	Результат = Запрос.Выполнить().Выгрузить();
	ИмяКолонкиИД = "ИдТовараУКонтрагента";
	Результат.Колонки.Добавить(ИмяКолонкиИД);
	ОбработатьТаблицуТоваров(Результат, Ложь, ИмяКолонкиИД);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, Результат, "Товары");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - Дерево значений - Дерево значений, соответствующее макету ПрайсЛист обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	// не используется
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  Дерево документа - дерево значений - дерево значений, соответствующее макету СчетНаОплату обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "Дата, Номер, 
		| Организация, Контрагент, СуммаВключаетНДС, ВалютаДокумента, КурсВзаиморасчетов, СтруктурнаяЕдиница, ДатаОплаты");
	
	СтрокаВыборкиПоляСодержания    = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("СчетНаОплатуПокупателю");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Номенклатура.Код                                        КАК КодТовара,
	|	СчетНаОплатуПокупателю.Номенклатура.Артикул			                           КАК Артикул,
	|	ВЫРАЗИТЬ(СчетНаОплатуПокупателю.Номенклатура.НаименованиеПолное КАК СТРОКА(255))КАК Наименование,
	|	СчетНаОплатуПокупателю.Номенклатура                                            КАК Номенклатура,
	|	СчетНаОплатуПокупателю.ХарактеристикаНоменклатуры                              КАК Характеристика,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения                    КАК БазоваяЕдиница,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Код                КАК БазоваяЕдиницаКод,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Наименование       КАК БазоваяЕдиницаНаименование,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК Упаковка,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код            КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование   КАК ЕдиницаИзмеренияНаименование,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.Коэффициент					           КАК ЕдиницаИзмеренияКоэффициент,
	|	СчетНаОплатуПокупателю.Цена,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателю.Сумма - СчетНаОплатуПокупателю.СуммаНДС
	|		ИНАЧЕ СчетНаОплатуПокупателю.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателю.Сумма
	|		ИНАЧЕ СчетНаОплатуПокупателю.Сумма + СчетНаОплатуПокупателю.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	СчетНаОплатуПокупателю.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателю.СтавкаНДС,
	|	СчетНаОплатуПокупателю.СуммаНДС,
	|	СчетНаОплатуПокупателю.Количество,
	|	СчетНаОплатуПокупателю.Ссылка.СуммаВключаетНДС КАК НДСУчтеноВСумме
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Номенклатура.Код,
	|	СчетНаОплатуПокупателю.Номенклатура.Артикул,
	|	ВЫРАЗИТЬ(" + СтрокаВыборкиПоляСодержания + " КАК Строка(255)),
	|	СчетНаОплатуПокупателю.Номенклатура,
	|	"""",
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|   1,
	|	СчетНаОплатуПокупателю.Цена,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателю.Сумма - СчетНаОплатуПокупателю.СуммаНДС
	|		ИНАЧЕ СчетНаОплатуПокупателю.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателю.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателю.Сумма
	|		ИНАЧЕ СчетНаОплатуПокупателю.Сумма + СчетНаОплатуПокупателю.СуммаНДС
	|	КОНЕЦ,
	|	СчетНаОплатуПокупателю.Сумма,
	|	СчетНаОплатуПокупателю.СтавкаНДС,
	|	СчетНаОплатуПокупателю.СуммаНДС,
	|	СчетНаОплатуПокупателю.Количество,
	|	СчетНаОплатуПокупателю.Ссылка.СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	ИмяКолонкиИД = "ИдТовараУКонтрагента";
	ТаблицаТоваров.Колонки.Добавить(ИмяКолонкиИД);
	ОбработатьТаблицуТоваров(ТаблицаТоваров, Ложь, ИмяКолонкиИД);
	
	// Заполняем дерево
	СведенияОПродавце   = ПолучитьДанныеЮрФизЛица(РеквизитыДокумента.Организация);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыДокумента.Контрагент);
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДокумента, СведенияОПродавце,   "Юр", "Продавец");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДокумента, СведенияОПокупателе, "Юр", "Покупатель");
	
	СуммаДокумента = ТаблицаТоваров.Итог("Сумма");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыДокумента.ВалютаДокумента.Код);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", РеквизитыДокумента.КурсВзаиморасчетов);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", СуммаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", РеквизитыДокумента.ДатаОплаты);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма", 
		СуммаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС", 
		ТаблицаТоваров.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", 
		РеквизитыДокумента.СуммаВключаетНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 0);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки", 
		СуммаДокумента);

	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.СтруктурнаяЕдиница)
		И ТипЗнч(РеквизитыДокумента.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		РасчетныйСчет  = РеквизитыДокумента.СтруктурнаяЕдиница;
		РеквизитыБанка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РасчетныйСчет.Банк, 
			"Наименование, КоррСчет, Код");
			
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РасчетныйСчет.НомерСчета);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыБанка.Код);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыБанка.Наименование);
		
		Если ЗначениеЗаполнено(РасчетныйСчет.БанкДляРасчетов) Тогда
			
			РеквизитыБанкаДляРасчетов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РасчетныйСчет.БанкДляРасчетов, 
				"Наименование, КоррСчет, Код");
			
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанкаДляРасчетов.Код);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанкаДляРасчетов.КоррСчет);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанкаДляРасчетов.Наименование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ОбщегоНазначения.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ЗаказТовара обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "Дата, Номер, ДоговорКонтрагента,
		| Организация, Контрагент, СуммаВключаетНДС, ВалютаДокумента, КурсВзаиморасчетов, СтруктурнаяЕдиница, ДатаОплаты");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураПоставщика.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ИдТовараУКонтрагента,
	|	ЕСТЬNULL(НоменклатураПоставщика.АртикулНоменклатурыКонтрагента, """") КАК Артикул,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(НоменклатураПоставщика.НаименованиеНоменклатурыКонтрагента КАК Строка(255)), """") КАК Наименование,
	|	ДокЗаказ.Номенклатура КАК Номенклатура,
	|	ДокЗаказ.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ДокЗаказ.Количество КАК Количество,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|		ИНАЧЕ ДокЗаказ.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ДокЗаказ.СтавкаНДС КАК СтавкаНДС,
	|	ДокЗаказ.СуммаНДС КАК СуммаНДС,
	|	ДокЗаказ.Цена КАК Цена,
	|	0 КАК СуммаСкидки,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаКод,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК УпаковкаНаименование,
	|	ДокЗаказ.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма + ДокЗаказ.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДокЗаказ.Номенклатура.ДополнительноеОписаниеНоменклатуры КАК СТРОКА(1000)) КАК Описание,
	|	ДокЗаказ.Ссылка.СуммаВключаетНДС КАК НДСУчтеноВСумме,
	|	ДокЗаказ.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ДокЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураПоставщика
	|		ПО (НоменклатураПоставщика.Контрагент = ДокЗаказ.Ссылка.Контрагент)
	|			И (НоменклатураПоставщика.Номенклатура = ДокЗаказ.Номенклатура)
	|			И (НоменклатураПоставщика.ХарактеристикаНоменклатуры = ДокЗаказ.ХарактеристикаНоменклатуры)
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураПоставщика.Идентификатор, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(НоменклатураПоставщика.АртикулНоменклатурыКонтрагента, """"),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(НоменклатураПоставщика.НаименованиеНоменклатурыКонтрагента КАК Строка(255)), """"),
	|	ДокЗаказ.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ДокЗаказ.Количество,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|		ИНАЧЕ ДокЗаказ.Сумма
	|	КОНЕЦ,
	|	ДокЗаказ.СтавкаНДС,
	|	ДокЗаказ.СуммаНДС,
	|	ДокЗаказ.Цена,
	|	0,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	1,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма + ДокЗаказ.СуммаНДС
	|	КОНЕЦ,
	|	ДокЗаказ.Содержание,
	|	ДокЗаказ.Ссылка.СуммаВключаетНДС,
	|	ДокЗаказ.Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ДокЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураПоставщика
	|		ПО (НоменклатураПоставщика.Контрагент = ДокЗаказ.Ссылка.Контрагент)
	|			И (НоменклатураПоставщика.Номенклатура = ДокЗаказ.Номенклатура)
	|			И (НоменклатураПоставщика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ЕстьОшибка = Ложь;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если СтрокаТовара.ИдТовараУКонтрагента = Неопределено Тогда
			ЕстьОшибка = Истина;
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сопоставить номенклатуру ""%1"" с номенклатурой поставщика'"),
				Строка(СтрокаТовара.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТовара.Характеристика), "("+СтрокаТовара.Характеристика+")", "")));
		КонецЕсли;
			
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПродавце   = ПолучитьДанныеЮрФизЛица(РеквизитыДокумента.Организация);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыДокумента.Контрагент);
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДокумента, СведенияОПродавце,   "Юр", "Продавец");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДокумента, СведенияОПокупателе, "Юр", "Покупатель");
	
	СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорНомер", РеквизитыДокумента.ДоговорКонтрагента.Номер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорДата", РеквизитыДокумента.ДоговорКонтрагента.Дата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыДокумента.ВалютаДокумента.Код);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", РеквизитыДокумента.КурсВзаиморасчетов);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", СуммаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", РеквизитыДокумента.ДатаОплаты);
	Если ТипЗнч(РеквизитыДокумента.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ЗаполнитьБанковскийСчет(ДеревоДокумента, РеквизитыДокумента.СтруктурнаяЕдиница);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", 
		СуммаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", 
		ТаблицаТоваров.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", 
		РеквизитыДокумента.СуммаВключаетНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог", 0);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог", 
		СуммаДокумента);

	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");

	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ОбщегоНазначения.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "Дата, Номер, ДоговорКонтрагента,
		| Организация, Контрагент, СуммаВключаетНДС, ВалютаДокумента, КурсВзаиморасчетов, СтруктурнаяЕдиница, ДатаОплаты,
		| Грузополучатель");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокЗаказ.Номенклатура.Код КАК ИД,
	|	ДокЗаказ.Номенклатура.Артикул КАК Артикул,
	|	ВЫРАЗИТЬ(ДокЗаказ.Номенклатура.НаименованиеПолное КАК Строка(255))КАК Наименование,
	|	ДокЗаказ.Номенклатура КАК Номенклатура,
	|	ДокЗаказ.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ДокЗаказ.Количество КАК Количество,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаПоОКЕИ,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Упаковка,
	|	ДокЗаказ.СтавкаНДС КАК СтавкаНДС,
	|	ДокЗаказ.СуммаНДС КАК СуммаНДС,
	|	ДокЗаказ.Цена КАК Цена,
	|	0 КАК СуммаСкидки,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ДокЗаказ.ЕдиницаИзмерения.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма + ДокЗаказ.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|		ИНАЧЕ ДокЗаказ.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ДокЗаказ.Номенклатура.ДополнительноеОписаниеНоменклатуры КАК СТРОКА(1000)) КАК Описание,
	|	ДокЗаказ.Ссылка.СуммаВключаетНДС КАК НДСУчтеноВСумме,
	|	ДокЗаказ.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ДокЗаказ
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокЗаказ.Номенклатура.Код,
	|	ДокЗаказ.Номенклатура.Артикул,
	|	ВЫРАЗИТЬ(ДокЗаказ.Номенклатура.НаименованиеПолное КАК Строка(255)),
	|	ДокЗаказ.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ДокЗаказ.Количество,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ДокЗаказ.СтавкаНДС,
	|	ДокЗаказ.СуммаНДС,
	|	ДокЗаказ.Цена,
	|	0,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	1,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма + ДокЗаказ.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|		ИНАЧЕ ДокЗаказ.Сумма
	|	КОНЕЦ,
	|	ДокЗаказ.Содержание,
	|	ДокЗаказ.Ссылка.СуммаВключаетНДС,
	|	ДокЗаказ.Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК ДокЗаказ
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	ИмяКолонкиИД = "ИдТовараУКонтрагента";
	ТаблицаТоваров.Колонки.Добавить(ИмяКолонкиИД);
	ОбработатьТаблицуТоваров(ТаблицаТоваров, Ложь, ИмяКолонкиИД);

	// Заполняем дерево
	СведенияОПродавце   = ПолучитьДанныеЮрФизЛица(РеквизитыДокумента.Организация);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыДокумента.Контрагент);
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДокумента, СведенияОПродавце,   "Юр", "Продавец");
	ЗаполнитьСведенияУчастникаОбмена(ДеревоДокумента, СведенияОПокупателе, "Юр", "Покупатель");
	Если ЗначениеЗаполнено(РеквизитыДокумента.Грузополучатель) Тогда
		СведенияОГрузополучателе = ПолучитьДанныеЮрФизЛица(РеквизитыДокумента.Грузополучатель);
		ЗаполнитьСведенияУчастникаОбмена(ДеревоДокумента, СведенияОГрузополучателе, "Факт", "Получатель");
	КонецЕсли;

	СуммаДокумента = ТаблицаТоваров.Итог("СуммаСНДС");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорНомер", РеквизитыДокумента.ДоговорКонтрагента.Номер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорДата", РеквизитыДокумента.ДоговорКонтрагента.Дата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыДокумента.ВалютаДокумента.Код);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", РеквизитыДокумента.КурсВзаиморасчетов);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", СуммаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", РеквизитыДокумента.ДатаОплаты);
	Если ТипЗнч(РеквизитыДокумента.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ЗаполнитьБанковскийСчет(ДеревоДокумента, РеквизитыДокумента.СтруктурнаяЕдиница);
	КонецЕсли;

	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", 
		СуммаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", 
		ТаблицаТоваров.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", 
		РеквизитыДокумента.СуммаВключаетНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидкиИтог", 0);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидкиИтог", 
		СуммаДокумента);

	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");

	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ОбщегоНазначения.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);

	СтруктураЭД.Вставить("СуммаДокумента", СуммаДокумента);
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ЭлектронныеДокументы.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
 
	

КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ДанныеДокумента = ПолучитьДанныеРеализации(СсылкаНаОбъект);
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	
	Если ДанныеДокумента.ТаблицаТоваров.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Сформируем таблицу товаров
	НомерСтроки = 1;
	Для каждого ДанныеСтрокиТоваров Из ДанныеДокумента.ТаблицаТоваров Цикл
		ДобавитьСтрокуТаблицуДанных(СтруктураПараметров.ТаблицаТоваров, ДанныеСтрокиТоваров, СтруктураПараметров, "Товары", НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	// Рассчитаем итоговые показатели
	ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураПараметров.ТаблицаТоваров, СтруктураЭД.ВидЭД);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров.ВсегоПоНакладной, ИтоговыеСуммы);
	
	СтруктураПараметров.НомерТоварнойНакладной   = ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
	СтруктураПараметров.ДатаТоварнойНакладной    = РеквизитыШапки.ДатаДокумента;
	СтруктураПараметров.ВидОперации              = РеквизитыШапки.ВидОперации;
	
	// Передадим документы основания
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(РеквизитыШапки.ДокументОснование);
		СтруктураПараметров.ДокументыОснования = МассивДокументовОснований;
	КонецЕсли;
	
	// Заполним данные по договору
	СтруктураПараметров.ДокОснованиеНаименование = РеквизитыШапки.ДоговорНаименование;
	СтруктураПараметров.ДокОснованиеНомер        = РеквизитыШапки.ДоговорНомер;
	СтруктураПараметров.ДокОснованиеДата         = РеквизитыШапки.ДоговорДата;
	
	ЗаполнитьРеквизитыУчастниковТОРГ12(РеквизитыШапки, СтруктураПараметров);
	
	// Получим данные по ответственным лица
	Руководитель = ОтветственноеЛицоОрганизации(
		РеквизитыШапки.ДатаДокумента, 
		РеквизитыШапки.Организация, 
		Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		
	ГлавныйБухгалтер = ОтветственноеЛицоОрганизации(
		РеквизитыШапки.ДатаДокумента, 
		РеквизитыШапки.Организация, 
		Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);
	
	// Заполним данные по подписанту
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	ФИО       = "";
	Должность = Неопределено;
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		ФИО       = Руководитель.ФИО;
		Должность = Руководитель.Должность;
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
	// Заполним сведения по отпуску товара
	СведенияПоОтпускуГруза = СтруктураПараметров.СведенияПоОтпускуГруза;
	СведенияПоОтпускуГруза.ДатаОтпуска             = РеквизитыШапки.ДатаДокумента;
	СведенияПоОтпускуГруза.ОтпущеноНаСумму         = ИтоговыеСуммы.СуммаСНДС;
	СведенияПоОтпускуГруза.ОтпущеноНаСуммуПрописью = СуммаПрописью(ИтоговыеСуммы.СуммаСНДС);
	
	// Заполним общие сведения по товароной накладной
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("КоличествоПорядковыхНомеровЗаписей", 
		ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 
		ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей, ,",,,,,,,,0"));
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("ВсегоМест", ИтоговыеСуммы.КоличествоМест);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, ,",,,,,,,,0"));
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("МассаГрузаНетто", ИтоговыеСуммы.МассаНетто);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("МассаГрузаБрутто", ИтоговыеСуммы.МассаБрутто);
	
	// Бухгалтер
	Бухгалтер = СведенияПоОтпускуГруза.Бухгалтер;
	ЗаполнитьФИОиДолжность(Бухгалтер, ГлавныйБухгалтер.ФИО, ГлавныйБухгалтер.Должность);
	
	// Отпуск разрешил
	ОтпускРазрешил = СведенияПоОтпускуГруза.ОтпускРазрешил;
	Если НЕ ЗначениеЗаполнено(РеквизитыШапки.ОтпускРазрешил) Тогда
		ФИО       = Руководитель.ФИО;
		Должность = Руководитель.Должность;
	Иначе
		ФИО       = ФормированиеПечатныхФорм.ФамилияИмяОтчество(РеквизитыШапки.ОтпускРазрешил, РеквизитыШапки.ДатаДокумента);
		//Должность = ПолныеПрава.СведенияОСотруднике(РеквизитыШапки.ОтпускРазрешил, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.Организация).Должность;
		Должность = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(РеквизитыШапки.ОтпускРазрешил, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.Организация).Должность;
	КонецЕсли;
	ЗаполнитьФИОиДолжность(ОтпускРазрешил, ФИО, Должность);
	
	// Отпуск произвел
	ОтпускПроизвел = СведенияПоОтпускуГруза.ОтпускПроизвел;
	Если НЕ ЗначениеЗаполнено(РеквизитыШапки.ОтпускПроизвел) Тогда
		ФИО       = ФормированиеПечатныхФорм.ФамилияИмяОтчество(РеквизитыШапки.ОтветственноеЛицо, РеквизитыШапки.ДатаДокумента);
		//Должность = ПолныеПрава.СведенияОСотруднике(РеквизитыШапки.ОтветственноеЛицо, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.Организация).Должность;
		Должность = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(РеквизитыШапки.ОтветственноеЛицо, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.Организация).Должность;
	Иначе
		ФИО       = ФормированиеПечатныхФорм.ФамилияИмяОтчество(РеквизитыШапки.ОтпускПроизвел, РеквизитыШапки.ДатаДокумента);
		//Должность = ПолныеПрава.СведенияОСотруднике(РеквизитыШапки.ОтпускПроизвел, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.Организация).Должность;
		Должность = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(РеквизитыШапки.ОтпускПроизвел, РеквизитыШапки.ДатаДокумента, РеквизитыШапки.Организация).Должность;
	КонецЕсли;
	ЗаполнитьФИОиДолжность(ОтпускПроизвел, ФИО, Должность);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	ФИО       = "";
	Должность = Неопределено;
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		Руководитель = ОтветственноеЛицоОрганизации(
			СтруктураЭД.ДатаЭД, 
			СтруктураЭД.Организация, 
			Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		
		ФИО       = Руководитель.ФИО;
		Должность = Руководитель.Должность;
		
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт

	ДанныеДокумента = ПодготовитьДанныеАктаОбОказанииУслуг(СсылкаНаОбъект);
	РеквизитыШапки = ДанныеДокумента.РеквизитыШапки;
	
	Если ДанныеДокумента.ТаблицаУслуг.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ не содержит данных для формирования ЭД ""%1""'"),
			СтруктураЭД.ВидЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.НомерАкта    = ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
	СтруктураПараметров.ДатаАкта     = РеквизитыШапки.ДатаДокумента;
	СтруктураПараметров.ВидОперации  = РеквизитыШапки.ВидОперации;
	ЗаполнитьРеквизитыУчастниковАкт501(РеквизитыШапки, СтруктураПараметров);
	
	// Передадим документы основания
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(РеквизитыШапки.ДокументОснование);
		СтруктураПараметров.ДокументыОснования = МассивДокументовОснований;
	КонецЕсли;
	
	// Сформируем таблицу услуг
	НомерСтроки = 1;
	Для каждого ДанныеСтрокиУслуг Из ДанныеДокумента.ТаблицаУслуг Цикл
		ДобавитьСтрокуТаблицуДанных(СтруктураПараметров.ТаблицаУслуг, ДанныеСтрокиУслуг, СтруктураПараметров, "Услуги", НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Заполним таблицу описаний услуг, вкладывая туда таблицу с услугами.
	НоваяСтрока = СтруктураПараметров.ТаблицаОписанийУслуг.Добавить();
	НоваяСтрока.НачалоРабот      = РеквизитыШапки.Дата;
	НоваяСтрока.КонецРабот       = РеквизитыШапки.Дата;
	НоваяСтрока.СуммаБезНДСИтого = СтруктураПараметров.ТаблицаУслуг.Итог("СуммаБезНДС");
	НоваяСтрока.СуммаНДСИтого    = СтруктураПараметров.ТаблицаУслуг.Итог("СуммаНДС");
	НоваяСтрока.СуммаСНДСИтого   = СтруктураПараметров.ТаблицаУслуг.Итог("СуммаСНДС");
	НоваяСтрока.Услуги           = СтруктураПараметров.ТаблицаУслуг;
	
	Руководитель = ОтветственноеЛицоОрганизации(
		РеквизитыШапки.Дата, 
		РеквизитыШапки.Исполнитель, 
		Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		
	СтруктураПараметров.СведенияПоВыполнениюУслуг.ДатаИсполнения = РеквизитыШапки.Дата;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.СведенияПоВыполнениюУслуг.ПодписьИсполнителя, Руководитель.ФИО, Руководитель.Должность);
	
	// Заполним данные по подписанту
	ЭтоФизЛицо = ЭтоФизЛицо(РеквизитыШапки.Исполнитель);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Исполнитель);
	ФИО       = "";
	Должность = Неопределено;
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(РеквизитыШапки.Исполнитель, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		ФИО       = Руководитель.ФИО;
		Должность = Руководитель.Должность;
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт

	// Заполним данные по подписанту
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	ФИО       = "";
	Должность = Неопределено;
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		Руководитель = ОтветственноеЛицоОрганизации(
			СтруктураЭД.ДатаЭД, 
			СтруктураЭД.Организация, 
			Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		
		ФИО       = Руководитель.ФИО;
		Должность = Руководитель.Должность;
		
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
	СтруктураПараметров.ДатаЗаказа = ТекущаяДатаСеанса();
	СтруктураПараметров.Претензия = "Претензий нет";
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ДанныеДляФормированияЭД = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	СсылкаНаОбъект.ПолучитьОбъект().СобратьДанныеДляПечати(ДанныеДляФормированияЭД, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляФормированияЭД) = Тип("Соответствие") Тогда
		СтруктураПараметров.Вставить("ДанныеПодготовлены", Ложь);
		Возврат;
	ИначеЕсли ДанныеДляФормированияЭД = Неопределено Тогда
		СтруктураПараметров.Вставить("ДанныеПодготовлены", Ложь);
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВалютаДокумента");
	Если ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		ОкруглитьЧисловыеПоля(ДанныеДляФормированияЭД);
	КонецЕсли;
		
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, 
		"Номер, Дата, Исправление, НомерИсправления, 
		|НомерИсходногоДокумента, ДатаИсходногоДокумента");
		
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляФормированияЭД.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляФормированияЭД.Поставщик, РеквизитыСФ.Дата);
	
	Если ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Тогда
		
		// Подготовим параметры для заполнения шапки
		
		Если РеквизитыСФ.Исправление Тогда
			СтруктураПараметров.НомерКоррСчФ            = РеквизитыСФ.НомерИсправляемогоКорректировочногоДокумента;
			СтруктураПараметров.ДатаКоррСчФ             = РеквизитыСФ.ДатаИсправляемогоКорректировочногоДокумента;
			СтруктураПараметров.НомерИсправленияКоррСчФ = РеквизитыСФ.НомерИсправления;
			СтруктураПараметров.ДатаИсправленияКоррСчФ  = РеквизитыСФ.Дата;
		Иначе
			СтруктураПараметров.НомерКоррСчФ = ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
			СтруктураПараметров.ДатаКоррСчФ  = РеквизитыСФ.Дата;
		КонецЕсли;
		
		СтруктураПараметров.НомерСчФ = РеквизитыСФ.НомерИсходногоДокумента;
		СтруктураПараметров.ДатаСчФ  = РеквизитыСФ.ДатаИсходногоДокумента;
		
		Если РеквизитыСФ.УчитыватьИсправлениеИсходногоДокумента Тогда
			СтруктураПараметров.НомерИсправленияИсходногоСчФ = РеквизитыСФ.НомерИсправленияИсходногоДокумента;
			СтруктураПараметров.ДатаИсправленияИсходногоСчФ  = РеквизитыСФ.ДатаИсправленияИсходногоДокумента;
		КонецЕсли;
		
		// Подготовим таблицу товаров
		НомерСтроки = 1;
		Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
			
			НоваяСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
			НоваяСтрока.НомерСтроки              = НомерСтроки;
			НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеТовара;
			НоваяСтрока.ЕдиницаИзмеренияКодДо    = Строка.ЕдиницаИзмеренияКод;
			НоваяСтрока.ЕдиницаИзмеренияКод      = Строка.ЕдиницаИзмеренияКод;
			НоваяСтрока.КоличествоДо             = Строка.КоличествоДоИзменения;
			НоваяСтрока.Количество               = Строка.КоличествоПослеИзменения;
			НоваяСтрока.ЦенаДо                   = Строка.ЦенаДоИзменения;
			НоваяСтрока.Цена                     = Строка.ЦенаПослеИзменения;
			НоваяСтрока.СуммаБезНДСДо            = Строка.СтоимостьБезНДСДоИзменения;
			НоваяСтрока.СуммаБезНДС              = Строка.СтоимостьБезНДСПослеИзменения;
			НоваяСтрока.СуммаБезНДСУвеличение    = Строка.РазницаБезНДСУвеличение;
			НоваяСтрока.СуммаБезНДСУменьшение    = Строка.РазницаБезНДСУменьшение;
			НоваяСтрока.СуммаДо                  = Строка.СтоимостьСНДСДоИзменения;
			НоваяСтрока.Сумма                    = Строка.СтоимостьСНДСПослеИзменения;
			НоваяСтрока.СуммаУвеличение          = Строка.РазницаСНДСУвеличение;
			НоваяСтрока.СуммаУменьшение          = Строка.РазницаСНДСУменьшение;
			НоваяСтрока.СтавкаНДСДо              = ПредставлениеСтавкиНДС(Строка.СтавкаНДС);
			НоваяСтрока.СтавкаНДС                = ПредставлениеСтавкиНДС(Строка.СтавкаНДС);
			НоваяСтрока.СтавкаНДСТипДо           = ТипСтавкиНДС(Строка.СтавкаНДС);
			НоваяСтрока.СтавкаНДСТип             = ТипСтавкиНДС(Строка.СтавкаНДС);
			НоваяСтрока.СуммаНДСДо               = Строка.СуммаНДСДоИзменения;
			НоваяСтрока.СуммаНДС                 = Строка.СуммаНДСПослеИзменения;
			НоваяСтрока.СуммаНДСУвеличение       = Строка.РазницаНДСУвеличение;
			НоваяСтрока.СуммаНДСУменьшение       = Строка.РазницаНДСУменьшение;
			НоваяСтрока.АкцизаДо                 = "без акциза";
			НоваяСтрока.Акциза                   = "без акциза";
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		СтруктураПараметров.СуммаБезНДСВсегоУвеличение = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДСУвеличение");
		СтруктураПараметров.СуммаСНДСВсегоУвеличение   = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаУвеличение");
		СтруктураПараметров.СуммаНДСУвеличение         = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДСУвеличение");
		
		СтруктураПараметров.СуммаБезНДСВсегоУменьшение = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДСУменьшение");
		СтруктураПараметров.СуммаСНДСВсегоУменьшение   = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаУменьшение");
		СтруктураПараметров.СуммаНДСУменьшение         = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДСУменьшение");
		
	Иначе
		
		// Подготовим параметры для заполнения шапки
		
		СтруктураПараметров.НомерСчФ = ?(РеквизитыСФ.Исправление, РеквизитыСФ.НомерИсходногоДокумента, ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
		СтруктураПараметров.ДатаСчФ  = ?(РеквизитыСФ.Исправление, РеквизитыСФ.ДатаИсходногоДокумента,  ДанныеДляФормированияЭД.Дата);
		
		Если РеквизитыСФ.Исправление Тогда
			СтруктураПараметров.НомерИсправленияИсходногоСчФ = РеквизитыСФ.НомерИсправления;
			СтруктураПараметров.ДатаИсправленияИсходногоСчФ  = РеквизитыСФ.Дата;
		КонецЕсли;

		// Подготовим таблицу товаров
		
		ТолькоУслуги = Истина;
		
		НомерСтроки = 1;
		Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
			
			Если ТолькоУслуги
				 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)) Тогда
				ТолькоУслуги = Ложь;
			КонецЕсли;
			
			НоваяСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
			
			НоваяСтрока.НомерСтроки               = НомерСтроки;
			НоваяСтрока.НаименованиеНоменклатуры  = Строка.ТоварНаименование;
			НоваяСтрока.ЕдиницаИзмеренияКод       = Строка.ЕдиницаИзмеренияКод;
			НоваяСтрока.Количество                = Строка.Количество;
			Если Строка.Количество = 0 Тогда
				НоваяСтрока.Цена = 0;
			Иначе
				НоваяСтрока.Цена = Окр(?(Строка.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма) / Строка.Количество, 2);
			КонецЕсли;
			НоваяСтрока.СуммаБезНДС               = ?(Строка.СуммаВключаетНДС, Строка.Сумма - Строка.СуммаНДС, Строка.Сумма);
			НоваяСтрока.Сумма                     = ?(Строка.СуммаВключаетНДС, Строка.Сумма, Строка.Сумма + Строка.СуммаНДС);
			НоваяСтрока.СтавкаНДС                 = ПредставлениеСтавкиНДС(Строка.СтавкаНДС);
			НоваяСтрока.СтавкаНДСТип              = ТипСтавкиНДС(Строка.СтавкаНДС);
			НоваяСтрока.СуммаНДС                  = Строка.СуммаНДС;
			НоваяСтрока.КодСтраныПроисхождения    = ?(ЗначениеЗаполнено(Строка.СтранаПроисхожденияКод), Строка.СтранаПроисхожденияКод, "");
			НоваяСтрока.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка(Строка.НомерГТД)), "");
			Если СтрДлина(НоваяСтрока.НомерТаможеннойДекларации) > 29 Тогда
				ШаблонОшибки = НСтр("ru = 'Длина номера ГТД в строке %1 превышает 29 символов. Электронный документ не сформирован.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка(НомерСтроки));
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
				СтруктураПараметров.Вставить("ДанныеПодготовлены", Ложь);
			КонецЕсли;
			НоваяСтрока.Акциза                    = "без акциза";
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		СтруктураПараметров.СуммаБезНДСВсего = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДС");
		СтруктураПараметров.СуммаСНДСВсего   = СтруктураПараметров.ТаблицаТоваров.Итог("Сумма");
		СтруктураПараметров.СуммаНДСВсего    = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДС");
		СтруктураПараметров.ТолькоУслуги     = ТолькоУслуги;
		
		Если НЕ ТолькоУслуги Тогда
			
			// Сведения по грузоотправителю и грузополучаетелю
			Грузоотправитель = ?(ДанныеДляФормированияЭД.Грузоотправитель = "он же", 
					СтруктураЭД.Организация, 
					ДанныеДляФормированияЭД.Грузоотправитель);
			ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, ПолучитьДанныеЮрФизЛица(Грузоотправитель));
			
			Грузополучатель = ?(ДанныеДляФормированияЭД.Грузополучатель = "он же", 
				СтруктураЭД.Контрагент, 
				ДанныеДляФормированияЭД.Грузополучатель);
			ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Грузополучатель, ПолучитьДанныеЮрФизЛица(Грузополучатель));
			
		КонецЕсли;
		
		// Таблица оплат заполняется только для не корректировочного счета-фактуры
		Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДатОплат Цикл
			
			НоваяСтрока = СтруктураПараметров.ПлатежныеДокументы.Добавить();
			
			НоваяСтрока.ДатаПРД  = Строка.ДатаПлатежноРасчетногоДокумента;
			НоваяСтрока.НомерПРД = Строка.НомерПлатежноРасчетногоДокумента;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	
	СтруктураПараметров.КодВалюты      = глЗначениеПеременной("ВалютаРегламентированногоУчета").Код;
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент);
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Организация, СведенияОПоставщике);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Контрагент, СведенияОПокупателе);
	
	// Заполним документы-основания
	МассивДокументовОснований = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	МассивДокументовОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
	Если ЗначениеЗаполнено(МассивДокументовОснований) Тогда
		СтруктураПараметров.ДокументыОснования = МассивДокументовОснований;
	КонецЕсли;
	
	// Заполним данные по подписанту
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	ФИО       = "";
	Должность = Неопределено;
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(ДанныеДляФормированияЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		Руководитель = ОтветственноеЛицоОрганизации(
			РеквизитыСФ.Дата, 
			ДанныеДляФормированияЭД.Организация, 
			Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		
		ФИО       = Руководитель.ФИО;
		Должность = Руководитель.Должность;
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ДанныеДляФормированияЭД = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	СсылкаНаОбъект.ПолучитьОбъект().СобратьДанныеДляПечати(ДанныеДляФормированияЭД, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляФормированияЭД) = Тип("Соответствие") Тогда
		СтруктураПараметров.Вставить("ДанныеПодготовлены", Ложь);
		Возврат;
	ИначеЕсли ДанныеДляФормированияЭД = Неопределено Тогда
		СтруктураПараметров.Вставить("ДанныеПодготовлены", Ложь);
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВалютаДокумента");
	Если ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		ОкруглитьЧисловыеПоля(ДанныеДляФормированияЭД);
	КонецЕсли;
		
	РеквизитыСФ = Новый Структура("Номер, Дата,
								|Исправление, НомерИсправления,
								|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента,
								|НомерИсходногоДокумента, ДатаИсходногоДокумента,
								|УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
	
	ЗапросРеквизитовОснований = Новый Запрос();
	ЗапросРеквизитовОснований.Параметры.Вставить("Ссылка", СсылкаНаОбъект.Ссылка);
	ЗапросРеквизитовОснований.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Исправление КАК Исправление,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|			И (СчетФактураВыданныйДокументыОснования.НомерСтроки = 1)
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	Выборка = ЗапросРеквизитовОснований.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСФ, Выборка);
	КонецЕсли;
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляФормированияЭД.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляФормированияЭД.Поставщик, РеквизитыСФ.Дата);
	
	Если РеквизитыСФ.Исправление Тогда
		СтруктураПараметров.НомерКоррСчФ            = РеквизитыСФ.НомерИсправляемогоКорректировочногоДокумента;
		СтруктураПараметров.ДатаКоррСчФ             = РеквизитыСФ.ДатаИсправляемогоКорректировочногоДокумента;
		СтруктураПараметров.НомерИсправленияКоррСчФ = РеквизитыСФ.НомерИсправления;
		СтруктураПараметров.ДатаИсправленияКоррСчФ  = РеквизитыСФ.Дата;
	Иначе
		СтруктураПараметров.НомерКоррСчФ = ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект);
		СтруктураПараметров.ДатаКоррСчФ  = РеквизитыСФ.Дата;
	КонецЕсли;
	
	СтруктураПараметров.НомерСчФ = РеквизитыСФ.НомерИсходногоДокумента;
	СтруктураПараметров.ДатаСчФ  = РеквизитыСФ.ДатаИсходногоДокумента;
	
	Если РеквизитыСФ.УчитыватьИсправлениеИсходногоДокумента Тогда
		СтруктураПараметров.НомерИсправленияИсходногоСчФ = РеквизитыСФ.НомерИсправленияИсходногоДокумента;
		СтруктураПараметров.ДатаИсправленияИсходногоСчФ  = РеквизитыСФ.ДатаИсправленияИсходногоДокумента;
	КонецЕсли;
	
	// Подготовим таблицу товаров
	НомерСтроки = 1;
	Для каждого Строка Из ДанныеДляФормированияЭД.ТабличнаяЧасть Цикл
		
		НоваяСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеТовара;
		НоваяСтрока.ЕдиницаИзмеренияКодДо    = Строка.ЕдиницаИзмеренияКод;
		НоваяСтрока.ЕдиницаИзмеренияКод      = Строка.ЕдиницаИзмеренияКод;
		НоваяСтрока.КоличествоДо             = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество               = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаДо                   = Строка.ЦенаДоИзменения;
		НоваяСтрока.Цена                     = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СуммаБезНДСДо            = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СуммаБезНДС              = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СуммаБезНДСУвеличение    = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СуммаБезНДСУменьшение    = Строка.РазницаБезНДСУменьшение;
		НоваяСтрока.СуммаДо                  = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.Сумма                    = Строка.СтоимостьСНДСПослеИзменения;
		НоваяСтрока.СуммаУвеличение          = Строка.РазницаСНДСУвеличение;
		НоваяСтрока.СуммаУменьшение          = Строка.РазницаСНДСУменьшение;
		НоваяСтрока.СтавкаНДСДо              = ПредставлениеСтавкиНДС(Строка.СтавкаНДС);
		НоваяСтрока.СтавкаНДС                = ПредставлениеСтавкиНДС(Строка.СтавкаНДС);
		НоваяСтрока.СтавкаНДСТипДо           = ТипСтавкиНДС(Строка.СтавкаНДС);
		НоваяСтрока.СтавкаНДСТип             = ТипСтавкиНДС(Строка.СтавкаНДС);
		НоваяСтрока.СуммаНДСДо               = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНДС                 = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНДСУвеличение       = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНДСУменьшение       = Строка.РазницаНДСУменьшение;
		НоваяСтрока.АкцизаДо                 = "без акциза";
		НоваяСтрока.Акциза                   = "без акциза";
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	СтруктураПараметров.СуммаБезНДСВсегоУвеличение = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДСУвеличение");
	СтруктураПараметров.СуммаСНДСВсегоУвеличение   = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаУвеличение");
	СтруктураПараметров.СуммаНДСУвеличение         = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДСУвеличение");
	
	СтруктураПараметров.СуммаБезНДСВсегоУменьшение = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДСУменьшение");
	СтруктураПараметров.СуммаСНДСВсегоУменьшение   = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаУменьшение");
	СтруктураПараметров.СуммаНДСУменьшение         = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДСУменьшение");
	

	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	
	СтруктураПараметров.КодВалюты      = глЗначениеПеременной("ВалютаРегламентированногоУчета").Код;
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент);
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Организация, СведенияОПоставщике);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Контрагент, СведенияОПокупателе);
	
	// Заполним документы-основания
	МассивДокументовОснований = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	МассивДокументовОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
	Если ЗначениеЗаполнено(МассивДокументовОснований) Тогда
		СтруктураПараметров.ДокументыОснования = МассивДокументовОснований;
	КонецЕсли;
	
	// Заполним данные по подписанту
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	ФИО       = "";
	Должность = Неопределено;
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(ДанныеДляФормированияЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		Руководитель = ОтветственноеЛицоОрганизации(
			РеквизитыСФ.Дата, 
			ДанныеДляФормированияЭД.Организация, 
			Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		
		ФИО       = Руководитель.ФИО;
		Должность = Руководитель.Должность;
	КонецЕсли;
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО, Должность);
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКаталога.Номенклатура,
	|	ТоварыКаталога.ХарактеристикаНоменклатуры,
	|	ТоварыКаталога.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТоварыКаталога КАК ТоварыКаталога
	|;
	|
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура.Артикул								 				КАК Артикул,
	|	ТаблицаТоваров.Номенклатура.НаименованиеПолное 									КАК Наименование,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры.Наименование 							КАК НаименованиеХарактеристики,
	|	ТаблицаТоваров.Номенклатура														КАК Номенклатура,
	|	ТаблицаТоваров.ХарактеристикаНоменклатуры 										КАК Характеристика,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения 							КАК БазоваяЕдиница,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Код 						КАК БазоваяЕдиницаКод,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.Наименование 				КАК БазоваяЕдиницаНаименование,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное 			КАК БазоваяЕдиницаНаименованиеПолное,
	|	ТаблицаТоваров.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение		КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Код 											КАК УпаковкаКод,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Наименование 									КАК УпаковкаНаименование,
	|	ТаблицаТоваров.ЕдиницаИзмерения.Код												КАК УпаковкаПоОКЕИ
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Запрос.УстановитьПараметр("ТоварыКаталога", ТоварыКаталога);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаТоваров);
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",	ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт

	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(0, 4));
	ОписаниеТиповСумма      = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество",    ОписаниеТиповКоличество);
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",   ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС",     ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС",      ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("Цена",          ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки",   ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("Сумма",         ОписаниеТиповСумма);
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	
	РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, 
		"Дата, Номер, Организация, СуммаВключаетНДС, ВалютаДокумента, КурсВзаиморасчетов, СтруктурнаяЕдиница, ДатаОплаты");
	
	СтрокаВыборкиПоляСодержания    = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("СчетНаОплатуПокупателю");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Номенклатура.Код                                        КАК КодТовара,
	|	СчетНаОплатуПокупателю.Номенклатура.Артикул			                           КАК Артикул,
	|	СчетНаОплатуПокупателю.Номенклатура.НаименованиеПолное                         КАК Наименование,
	|	СчетНаОплатуПокупателю.Номенклатура                                            КАК Номенклатура,
	|	СчетНаОплатуПокупателю.ХарактеристикаНоменклатуры                              КАК Характеристика,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения                    КАК БазоваяЕдиница,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Код                КАК БазоваяЕдиницаКод,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Наименование       КАК БазоваяЕдиницаНаименование,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК ЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК Упаковка,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код            КАК УпаковкаКод,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование   КАК УпаковкаНаименование,
	|	СчетНаОплатуПокупателю.ЕдиницаИзмерения.Коэффициент					           КАК Коэфиициент,
	|	СчетНаОплатуПокупателю.Цена,
	|	СчетНаОплатуПокупателю.Сумма,
	|	СчетНаОплатуПокупателю.СтавкаНДС,
	|	СчетНаОплатуПокупателю.СуммаНДС,
	|	СчетНаОплатуПокупателю.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Номенклатура.Код,
	|	СчетНаОплатуПокупателю.Номенклатура.Артикул,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	СчетНаОплатуПокупателю.Номенклатура,
	|	"""",
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	СчетНаОплатуПокупателю.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|   1,
	|	СчетНаОплатуПокупателю.Цена,
	|	СчетНаОплатуПокупателю.Сумма,
	|	СчетНаОплатуПокупателю.СтавкаНДС,
	|	СчетНаОплатуПокупателю.СуммаНДС,
	|	СчетНаОплатуПокупателю.Количество
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаТоваров);
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		
		СуммаСНДС   = Окр((СтрокаТаблицы.Сумма + ?(РеквизитыДокумента.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС)), 2);
		СуммаБезНДС = СуммаСНДС - СтрокаТаблицы.СуммаНДС;
		
		СтрокаТаблицы.СуммаБезНДС = СуммаБезНДС;
		СтрокаТаблицы.СуммаСНДС   = СуммаСНДС;
		
	КонецЦикла;

	// получение данных по таблицам товаров
	СтруктураПараметров.Вставить("Исполнитель",      СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы",      "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров",   ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация",      СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент",       СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид",               СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер",            СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата",             СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",           РеквизитыДокумента.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",             РеквизитыДокумента.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Сумма",            ТаблицаТоваров.Итог("Сумма"));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",  РеквизитыДокумента.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС",         ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД",            СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",    СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("СрокПлатежа", РеквизитыДокумента.ДатаОплаты);
	СтруктураПараметров.Вставить("НазначениеПлатежа", "");
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.СтруктурнаяЕдиница)
		И ТипЗнч(РеквизитыДокумента.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		РасчетныйСчет  = РеквизитыДокумента.СтруктурнаяЕдиница;
		РеквизитыБанка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РасчетныйСчет.Банк, 
			"Наименование, КоррСчет, Код");
		
		РасчетныйСчетСтруктура = Новый Структура;
		РасчетныйСчетСтруктура.Вставить("НомерСчета", РасчетныйСчет.НомерСчета);
		РасчетныйСчетСтруктура.Вставить("Банк",       РеквизитыБанка.Наименование);
		РасчетныйСчетСтруктура.Вставить("КоррСчет",   РеквизитыБанка.КоррСчет);
		РасчетныйСчетСтруктура.Вставить("БИК",        РеквизитыБанка.Код);
		СтруктураПараметров.Вставить("РасчетныйСчет", РасчетныйСчетСтруктура);
		
		Если ЗначениеЗаполнено(РасчетныйСчет.БанкДляРасчетов) Тогда
			
			РеквизитыБанкаДляРасчетов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РасчетныйСчет.БанкДляРасчетов, 
				"Наименование, КоррСчет, Код");
			
			БанкКорреспондентСтруктура = Новый Структура;
			БанкКорреспондентСтруктура.Вставить("Банк",     РеквизитыБанкаДляРасчетов.Наименование);
			БанкКорреспондентСтруктура.Вставить("КоррСчет", РеквизитыБанкаДляРасчетов.КоррСчет);
			БанкКорреспондентСтруктура.Вставить("БИК",      РеквизитыБанкаДляРасчетов.Код);
			СтруктураПараметров.Вставить("БанкКорреспондент", БанкКорреспондентСтруктура);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим данные по ответственным лица
	Руководитель = ОтветственноеЛицоОрганизации(
		РеквизитыДокумента.Дата, 
		РеквизитыДокумента.Организация, 
		Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
		
	ГлавныйБухгалтер = ОтветственноеЛицоОрганизации(
		РеквизитыДокумента.Дата, 
		РеквизитыДокумента.Организация, 
		Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);
	
	СтруктураПараметров.Вставить("Руководитель", Руководитель.ФИО);
	СтруктураПараметров.Вставить("Бухгалтер",    ГлавныйБухгалтер.ФИО);
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ОбщегоНазначения.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, РасчетныйСчет, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод, УпаковкаКод");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураПоставщика.Идентификатор, НЕОПРЕДЕЛЕНО) КАК Ид,
	|	ЕСТЬNULL(НоменклатураПоставщика.АртикулНоменклатурыКонтрагента, """") КАК Артикул,
	|	ЕСТЬNULL(НоменклатураПоставщика.НаименованиеНоменклатурыКонтрагента, """") КАК Наименование,
	|	ДокЗаказ.Номенклатура КАК Номенклатура,
	|	ДокЗаказ.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ДокЗаказ.Количество КАК Количество,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаПоОКЕИ,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|		ИНАЧЕ ДокЗаказ.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ДокЗаказ.СтавкаНДС КАК СтавкаНДС,
	|	ДокЗаказ.СуммаНДС КАК СуммаНДС,
	|	ДокЗаказ.Цена КАК Цена,
	|	0 КАК СуммаСкидки,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаКод,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК УпаковкаНаименование,
	|	ДокЗаказ.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ДокЗаказ.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(ДокЗаказ.Номенклатура.ДополнительноеОписаниеНоменклатуры КАК СТРОКА(1000)) КАК Описание
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ДокЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураПоставщика
	|		ПО (НоменклатураПоставщика.Контрагент = ДокЗаказ.Ссылка.Контрагент)
	|			И (НоменклатураПоставщика.Номенклатура = ДокЗаказ.Номенклатура)
	|			И (НоменклатураПоставщика.ХарактеристикаНоменклатуры = ДокЗаказ.ХарактеристикаНоменклатуры)
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураПоставщика.Идентификатор, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(НоменклатураПоставщика.АртикулНоменклатурыКонтрагента, """"),
	|	ЕСТЬNULL(НоменклатураПоставщика.НаименованиеНоменклатурыКонтрагента, """"),
	|	ДокЗаказ.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ДокЗаказ.Количество,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|		ИНАЧЕ ДокЗаказ.Сумма
	|	КОНЕЦ,
	|	ДокЗаказ.СтавкаНДС,
	|	ДокЗаказ.СуммаНДС,
	|	ДокЗаказ.Цена,
	|	0,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	1,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|	КОНЕЦ,
	|	ДокЗаказ.Сумма,
	|	ДокЗаказ.Содержание
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК ДокЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураПоставщика
	|		ПО (НоменклатураПоставщика.Контрагент = ДокЗаказ.Ссылка.Контрагент)
	|			И (НоменклатураПоставщика.Номенклатура = ДокЗаказ.Номенклатура)
	|			И (НоменклатураПоставщика.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ид = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сопоставить номенклатуру ""%1"" с номенклатурой поставщика'"),
				Строка(Выборка.Номенклатура) + ?(ЗначениеЗаполнено(Выборка.Характеристика), "("+Выборка.Характеристика+")", "")));
		КонецЕсли;
			
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Исполнитель",				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 			"4.02");
	СтруктураПараметров.Вставить("Роль", 					"Покупатель");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 			ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 			СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 				СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 						СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",		ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 					СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 					СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",					СсылкаНаОбъект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", 					СсылкаНаОбъект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Сумма",					СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",			СсылкаНаОбъект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 				СсылкаНаОбъект.Товары.Итог("СуммаНДС")+СсылкаНаОбъект.Услуги.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 					СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",			СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Комментарий", 			СсылкаНаОбъект.Комментарий);
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ОбщегоНазначения.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров.СкопироватьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокЗаказ.Номенклатура.Код КАК ИД,
	|	ДокЗаказ.Номенклатура.Артикул КАК Артикул,
	|	ДокЗаказ.Номенклатура.НаименованиеПолное КАК Наименование,
	|	ДокЗаказ.Номенклатура КАК Номенклатура,
	|	ДокЗаказ.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ДокЗаказ.Количество КАК Количество,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаПоОКЕИ,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Упаковка,
	|	ДокЗаказ.СтавкаНДС КАК СтавкаНДС,
	|	ДокЗаказ.СуммаНДС КАК СуммаНДС,
	|	ДокЗаказ.Цена КАК Цена,
	|	0 КАК СуммаСкидки,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК УпаковкаКод,
	|	ДокЗаказ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование КАК УпаковкаНаименование,
	|	ДокЗаказ.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ДокЗаказ.Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(ДокЗаказ.Номенклатура.ДополнительноеОписаниеНоменклатуры КАК СТРОКА(1000)) КАК Описание
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ДокЗаказ
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокЗаказ.Номенклатура.Код,
	|	ДокЗаказ.Номенклатура.Артикул,
	|	ДокЗаказ.Номенклатура.НаименованиеПолное,
	|	ДокЗаказ.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения,
	|	ДокЗаказ.Количество,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ДокЗаказ.СтавкаНДС,
	|	ДокЗаказ.СуммаНДС,
	|	ДокЗаказ.Цена,
	|	0,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ДокЗаказ.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	1,
	|	ВЫБОР
	|		КОГДА ДокЗаказ.Ссылка.СуммаВключаетНДС
	|			ТОГДА ДокЗаказ.Сумма
	|		ИНАЧЕ ДокЗаказ.Сумма - ДокЗаказ.СуммаНДС
	|	КОНЕЦ,
	|	ДокЗаказ.Сумма,
	|	ДокЗаказ.Содержание
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК ДокЗаказ
	|ГДЕ
	|	ДокЗаказ.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Запрос.Выполнить().Выгрузить(), ТаблицаТоваров);
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель",				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 			"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 			ТаблицаТоваров);
	СтруктураПараметров.Вставить("Роль", 					"Продавец");
	СтруктураПараметров.Вставить("Организация", 			СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 				СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 						СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",		ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 					СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 					СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта",					СсылкаНаОбъект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", 					СсылкаНаОбъект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Сумма",					СсылкаНаОбъект.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",			СсылкаНаОбъект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 				СсылкаНаОбъект.Товары.Итог("СуммаНДС")+СсылкаНаОбъект.Услуги.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 					СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД",			СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Комментарий", 			СсылкаНаОбъект.Комментарий);
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",		 ОбщегоНазначения.ФорматСумм(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента));
	СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СсылкаНаОбъект.СуммаДокумента, СсылкаНаОбъект.ВалютаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров.СкопироватьКолонки();
	
	ДанныеДокумента = ПолучитьДанныеРеализации(СсылкаНаОбъект);
	РеквизитыШапки  = ДанныеДокумента.РеквизитыШапки;
	
	// Сформируем таблицу товаров
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДокумента.ТаблицаТоваров, ТаблицаТоваров);
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 				СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 				СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("СуммаСНДСИтого",		ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Грузоотправитель", 	РеквизитыШапки.Грузоотправитель);
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	СтруктураПараметров.Вставить("Грузополучатель",		РеквизитыШапки.Грузополучатель);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",		РеквизитыШапки.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("Валюта",				РеквизитыШапки.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				РеквизитыШапки.Курс);
	СтруктураПараметров.Вставить("Кратность",			РеквизитыШапки.Кратность);
	
	// заполнение спец.реквизитов для связки заказ-поступление
	Если ТипЗнч(РеквизитыШапки.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ЗначениеЗаполнено(РеквизитыШапки.Сделка) Тогда
		
		ЗаказПокупателя = РеквизитыШапки.Сделка;
		
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика",	ЗаказПокупателя.Номер);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	ЗаказПокупателя.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	// не используется
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12 ИЛИ 
		СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ
		СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ
		СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		ВидОперации = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		
		Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;

	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		НайденныйОбъект = НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ 
			  СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли ВРег(СтрокаДляЗагрузки.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		НайденныйОбъект = НайтиСоздатьКонтрагента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура параметров записываемого объекта,
//  ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
// Возвращаемое значение:
//  НовыйЭлемент - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовыйЭлемент = Неопределено;
	
	
	
	Возврат НовыйЭлемент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ТипОбъекта = "Валюты" 
		 ИЛИ ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
		
	ИначеЕсли ТипОбъекта = "БанковскиеСчетаКонтрагентов"
		 ИЛИ ТипОбъекта = "БанковскиеСчетаОрганизаций" Тогда
		
		Владелец = ""; 
		НомерСчета = "";
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда
			Если ДополнительныеРеквизиты.Свойство("НомерСчета", НомерСчета) Тогда
				Результат = НайтиСсылкуНаОбъектПоРеквизиту("БанковскиеСчета", "НомерСчета", НомерСчета, Владелец);
			Иначе
				Результат = НайтиСсылкуНаОбъектПоРеквизиту("БанковскиеСчета", "НомерСчета", ИдОбъекта, Владелец);
			КонецЕсли;
		Иначе
			Результат = НайтиСсылкуНаОбъектПоРеквизиту("БанковскиеСчета", "НомерСчета", ИдОбъекта);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
		
	ИначеЕсли ТипОбъекта = "ДоговорыКонтрагентов" Тогда
		Владелец = "";
		НомерДоговора = "";
		ДатаДоговора = "";
		
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец)
			И ДополнительныеРеквизиты.Свойство("НомерДоговора", НомерДоговора) Тогда
			Если ДополнительныеРеквизиты.Свойство("ДатаДоговора", ДатаДоговора) Тогда
				Результат = СсылкаНаДоговорПоНомеруИДате(Владелец, НомерДоговора, ДатаДоговора);
			Иначе
				Результат = НайтиСсылкуНаОбъектПоРеквизиту("ДоговорыКонтрагентов", "Номер", НомерДоговора, Владелец);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН") Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ДополнительныеРеквизиты.Свойство("КПП") Тогда 
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка(ИНН)+Строка(КПП)) Тогда // по ИНН+КПП
			Результат = СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда // по Наименованию
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("ПолноеНаименование", ПараметрПоиска) Тогда // по Полному наименованию
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "НаименованиеПолное", ПараметрПоиска); 
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Владелец = "";
		
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда // есть Владелец
			
			Результат = Новый Структура(
				"Владелец, Идентификатор, Код, Артикул, Наименование", 
				Владелец, "", "", "", "");
			
			Параметр = "";
			Если ДополнительныеРеквизиты.Свойство("Идентификатор", Параметр) Тогда // по Идентификатору
				Результат.Идентификатор = Параметр;
			КонецЕсли;
			
			Если ДополнительныеРеквизиты.Свойство("Код", Параметр) Тогда // по Коду
				Результат.Код = Параметр;
			КонецЕсли;
			
			Если ДополнительныеРеквизиты.Свойство("Артикул", Параметр) Тогда  // по Артикулу
				Результат.Артикул = Параметр;
			КонецЕсли;
			
			Если ДополнительныеРеквизиты.Свойство("Наименование", Параметр) Тогда // по Наименованию
				Результат.Наименование = Параметр;
			КонецЕсли;
			
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Номенклатура" Тогда
		
		Код = "";
		
		Если ЗначениеЗаполнено(ИдОбъекта) Тогда
			// Если задан Ид, то будем искать по коду
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
			
		ИначеЕсли ЗначениеЗаполнено(ДополнительныеРеквизиты) И ДополнительныеРеквизиты.Свойство("Код", Код) Тогда
			
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", Код);
			
		ИначеЕсли ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
			
			ДанныеТовара = ПолучитьДанныеТовараПоНоменклатуреПоставщика(ДополнительныеРеквизиты);
			Результат = ДанныеТовара.Номенклатура;
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Попытка
			Результат = Справочники[ТипОбъекта][ИдОбъекта];
		Исключение
			Результат = Справочники[ТипОбъекта].НайтиПоНаименованию(ИдОбъекта, Истина);
		КонецПопытки;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ИмяСправочника = "НоменклатураПоставщиков" Тогда
		
		// Справочник отсутсвует в системе - вернем структуру содержащую значение реквизита
		Результат = Новый Структура(ИмяРеквизита, ЗначРеквизита);
		
	Иначе
		
		ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
		Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита) Тогда
			// это не стандартный реквизит
			Если НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда 
				// это не обычный реквизит
				Возврат Неопределено;
			Иначе
				ОписаниеРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
			КонецЕсли;
		Иначе
			ОписаниеРеквизита = ОбъектМетаданных.СтандартныеРеквизиты[ИмяРеквизита];
		КонецЕсли;
		
		СпособСравнения = " = ";
		Если ОписаниеРеквизита.Тип.Типы().Найти(Тип("Строка")) <> Неопределено И ОписаниеРеквизита.Тип.Типы().Количество() = 1 Тогда
			Если ОписаниеРеквизита.Тип.КвалификаторыСтроки.Длина = 0 Тогда
				СпособСравнения = " ПОДОБНО ";
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИскСправочник.Ссылка КАК Ссылка
		|
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК ИскСправочник
		|ГДЕ
		|	Не ИскСправочник.ПометкаУдаления И
		|	ИскСправочник."+ИмяРеквизита+СпособСравнения+"&ЗначРеквизита";
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", 	Владелец);
		КонецЕсли;
		Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаДоговорПоНомеруИДате(Владелец, НомерДоговора, ДатаДоговора) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	Не ДоговорыКонтрагентов.ПометкаУдаления И
	|	ДоговорыКонтрагентов.Владелец = &Владелец И
	|	ДоговорыКонтрагентов.Номер = &НомерДоговора И
	|	ДоговорыКонтрагентов.Дата = &ДатаДоговора";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("НомерДоговора", НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", ДатаДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник."+ТипОбъекта+" КАК Контрагенты
	|ГДЕ
	|	Не Контрагенты.ПометкаУдаления И
	|	Контрагенты.ИНН = &ИНН И
	|	Контрагенты.КПП = &КПП";
	
	ИННпараметр = ИНН;
	Если ИННпараметр = Неопределено Тогда
		ИННпараметр = "";
	КонецЕсли;
	КППпараметр = КПП;
	Если КППпараметр = Неопределено Тогда
		КППпараметр = "";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИНН", ИННпараметр);
	Запрос.УстановитьПараметр("КПП", КППпараметр);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов
//
// Возвращаемое значение:
//  Контрагент.Ссылка - ссылка на справочник контрагентов
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе	
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП,1,Найти(ИНН_КПП,"/")-1);
	Контрагент.КПП = Сред(ИНН_КПП,Найти(ИНН_КПП,"/")+1);
	Контрагент.Записать();
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку
//  ИД - идентификатор обмена ЭД
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ДанныеТовара = ПолучитьДанныеТовараПоНоменклатуреПоставщика(РеквизитыНоменклатуры);
	Если Не ЗначениеЗаполнено(ДанныеТовара.Номенклатура) И РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", )Тогда
		ДанныеТовара = ПолучитьДанныеТовараПоНоменклатуреПоставщика(РеквизитыНоменклатуры.НоменклатураПоставщика);
	КонецЕсли;
	
	СтруктураВозврата.Номенклатура   = ДанныеТовара.Номенклатура;
	СтруктураВозврата.Характеристика = ДанныеТовара.ХарактеристикаНоменклатуры;
	
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры
//  Контрагент – ссылка на контрагента (Организация или Контрагент)
//  ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
// ИдКонтрагента - строка - значение ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
			ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
		ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
			ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдКонтрагента;
	
КонецФункции

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Ид 				КАК Идентификатор,
	|	ТаблицаИнформацияОТоваре.Артикул 			КАК АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Наименование 		КАК НаименованиеНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод 	КАК БазоваяЕдиницаКод,
	|	ТаблицаИнформацияОТоваре.Описание 			КАК Описание
	|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
	|ИЗ
	|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнформацияОТоваре.Идентификатор,
	|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
	|	ТаблицаИнформацияОТоваре.Описание
	|ИЗ
	|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|	ПО 
	|		НоменклатураКонтрагентов.Контрагент = &Контрагент
	|		И НоменклатураКонтрагентов.Идентификатор = ТаблицаИнформацияОТоваре.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|	ПО 
	|		ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = КлассификаторЕдиницИзмерения.Код
	|	
	|ГДЕ
	|	НоменклатураКонтрагентов.Номенклатура ЕСТЬ NULL";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	НаборЗаписей = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	
	Для Каждого Строка Из ТаблицаСопоставления Цикл
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			
			Запись.Контрагент = Контрагент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Попытка
			НаборЗаписей.Записать(Ложь);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	// Сопоставление номенклатуры вызывается 
	// 	- для входящих документов видов:
	// 		- ТОРГ12
	// 		- ТОРГ12Продавец
	// 		- ОтветНаЗаказ
	// 		- КаталогТоваров
	// 		- АктИсполнитель
	// 		- СчетНаОплату
	// 		- СоглашениеОбИзмененииСтоимостиОтправитель
	// 	- для исходящих документов 
	// 		- ТОРГ12Покупатель
	// 		- АктЗаказчик
	// 		- СоглашениеОбИзмененииСтоимостиПолучатель
	Если (СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		    И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав))
		 ИЛИ (СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)) Тогда
		
		СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.СопоставлениеДанныхПоНоменклатуре");
		ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНесопоставленнойНоменклатуры", 
			СсылкаНаЭД, Истина);
		СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	
	
КонецПроцедуры

// Работа со структурой данных CML

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если ИмяПеречисления = "СтавкиНДС" Тогда
		
		НайденноеЗначение = ЗначениеПеречисленияСтавкаНДС(ПредставлениеПеречисления);
		
	Иначе
		
		Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
			Если Найти(Врег(ЭлПеречисления.Синоним), Врег(ПредставлениеПеречисления)) > 0
				 ИЛИ Найти(Врег(ЭлПеречисления.Имя), Врег(ПредставлениеПеречисления)) > 0 Тогда
				 
				НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - таблица значений с полями: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//  НаименованиеДляСообщенияПользователю.
//    Наименование - передается Оператору ЭДО,
//    НаименованиеДляСообщенияПользователю - выводится в сообщении пользователю ИБ.
//  МассивКонтрагентов - массив ссылок на участников-контрагентов.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка                           КАК Участник,
	|	Контрагенты.НаименованиеПолное               КАК Наименование,
	|	Контрагенты.ИНН                              КАК ИНН,
	|	Контрагенты.КПП                              КАК КПП,
	|	Контрагенты.Код                              КАК ВнешнийКод,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП КАК АдресЭП,
	|	Контрагенты.Наименование                     КАК НаименованиеДляСообщенияПользователю
	|ИЗ
	|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.Участник = Контрагенты.Ссылка
	|ГДЕ
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник В (&СписокУчастников)
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СписокУчастников", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СоглашениеЭД",     СоглашениеЭД);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизитов = ТЗ.Скопировать();
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка на элемент справочника, по которому надо получить данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, БанковскийСчет = Неопределено) Экспорт
	
	Сведения = Новый Структура;
	
	Сведения = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЮрФизЛицо, ТекущаяДатаСеанса(), , БанковскийСчет);
	 
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		
		Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			 
			Фамилия  = "";
			Имя      = "";
			Отчество = "";
			ОбщегоНазначения.ФамилияИнициалыФизЛица(Сведения.ПолноеНаименование, Фамилия, Имя, Отчество);
			Сведения.Вставить("Фамилия",  Фамилия);
			Сведения.Вставить("Имя",      Имя);
			Сведения.Вставить("Отчество", Отчество);
			
		КонецЕсли;
		
	Иначе
		Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			Фамилия  = "";
			Имя      = "";
			Отчество = "";
			ОбщегоНазначения.ФамилияИнициалыФизЛица(Сведения.ПолноеНаименование, Фамилия, Имя, Отчество);
			Сведения.Вставить("Фамилия",  Фамилия);
			Сведения.Вставить("Имя",      Имя);
			Сведения.Вставить("Отчество", Отчество);
			
		КонецЕсли;
		Сведения.Вставить("КодОКОПФ", ЮрФизЛицо.ОКОПФ);
	КонецЕсли;
	
	Сведения.Вставить("Ссылка",    ЮрФизЛицо);
	Сведения.Вставить("ЮрФизЛицо", ЮрФизЛицо.ЮрФизЛицо);
	Сведения.Вставить("ОфициальноеНаименование", Сведения.ПолноеНаименование);
	Если Сведения.Банк = "" Тогда
		Сведения.Банк = Справочники.Банки.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника - по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ИП, "СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
	
	Сведения = "Свидетельство " + Реквизиты.СвидетельствоСерияНомер + " от " +  Формат(Реквизиты.СвидетельствоДатаВыдачи,"ДФ=dd.MM.yyyy");
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрСведенийКонтактнаяИнформация.Вид,
	|	ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Значение,
	|	ВЫРАЗИТЬ(РегистрСведенийКонтактнаяИнформация.Комментарий КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК РегистрСведенийКонтактнаяИнформация
	|ГДЕ
	|	РегистрСведенийКонтактнаяИнформация.Объект = &Объект
	|	И (РегистрСведенийКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|		ИЛИ РегистрСведенийКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	
	Запрос.УстановитьПараметр("Объект", Организация);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТабЗн Цикл
		стр.Значение    = СокрП(стр.Значение);
		стр.Комментарий = СокрП(стр.Комментарий);
	КонецЦикла;
	
	Возврат ТабЗн;
	
	//Возврат Новый ТаблицаЗначений;
	
КонецФункции

// Возвращает название региона по коду
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение:
//  Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;
	
	КодРегионаЧисло = Число(КодРегиона);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.КодРегионаВКоде,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Код
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
	|	И АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде";
	Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегионаЧисло);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(Выборка.Код);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ВидКонтрагента]) Тогда
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		Объект = СтруктураПараметров[ВидКонтрагента];
		ВидАдресаОрганизации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Иначе
		Объект = СтруктураПараметров[ВидКонтрагента];
		ВидАдресаОрганизации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	Данные = Новый Структура("Объект, Тип, Вид", Объект, Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдресаОрганизации);
	Адрес = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
	
	ПроизвольныйАдрес = (ВРЕГ(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Адрес)) <> ВРЕГ(Адрес.Представление));
	Если ПроизвольныйАдрес Тогда
		СтруктураАдреса.Вставить("АдресРФ", Ложь);
		//Попытаемся найти код страны
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", Адрес.Поле1);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлассификаторСтранМира.Код КАК КодСтраны
		|ИЗ
		|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
		|
		|ГДЕ
		|	КлассификаторСтранМира.Наименование = &Наименование
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураАдреса.Вставить("КодСтраны", Выборка.КодСтраны);
			ТекущееПредставлениеАдреса = Адрес.Представление;
			СтруктураАдреса.Вставить("АдресСтрокой", УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(Адрес.Поле1, ТекущееПредставлениеАдреса));
		Иначе
			// Если страна в адресе не указана, то адрес не пройдет проверку.
			СтруктураАдреса.Вставить("КодСтраны", "");
			СтруктураАдреса.Вставить("АдресСтрокой", Адрес.Представление);
		КонецЕсли;
	Иначе
		СтруктураАдреса.Вставить("АдресРФ", Истина);
		СтруктураАдреса.Вставить("Индекс", СокрЛП(Адрес.Поле1));
		СтруктураАдреса.Вставить("КодСтраны", Справочники.КлассификаторСтранМира.Россия.Код);
		
		СтруктураКлассификатора = УправлениеКонтактнойИнформацией.ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Адрес.Поле2, "", "", "", "");
		СтруктураАдреса.Вставить("КодРегион", Формат(СтруктураКлассификатора.КодРегионаВКоде, "ЧЦ=2; ЧВН=; ЧГ="));
		
		СтруктураАдреса.Вставить("Район", СокрЛП(Адрес.Поле3));
		СтруктураАдреса.Вставить("Город", СокрЛП(Адрес.Поле4));
		СтруктураАдреса.Вставить("НаселПункт", СокрЛП(Адрес.Поле5));
		СтруктураАдреса.Вставить("Улица", СокрЛП(Адрес.Поле6));
		СтруктураАдреса.Вставить("Дом", СокрЛП(Адрес.Поле7));
		СтруктураАдреса.Вставить("Корпус", СокрЛП(Адрес.Поле8));
		СтруктураАдреса.Вставить("Кварт", СокрЛП(Адрес.Поле9));
		СтруктураАдреса.Вставить("АдресСтрокой", Адрес.Представление);
	КонецЕсли;

КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	АдресЭП = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление 	КАК АдресЭП
	|	
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.ЗначениеПоУмолчанию";
	
	Запрос.УстановитьПараметр("Тип", 	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Объект", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		АдресЭП = Выборка.АдресЭП;
	КонецЕсли;
	
	Возврат АдресЭП;
	
КонецФункции

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - документссылка - ссылка на документ информационной базы.
//
// Возвращаемое значение:
//  НомерОбъекта - номер документа.
//
Функция ПолучитьПечатныйНомерДокумента(ВходящийПараметр) Экспорт
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ВходящийПараметр) Тогда
		Возврат ОбщегоНазначения.ПолучитьНомерНаПечать(ВходящийПараметр);
	Иначе
		Возврат ВходящийПараметр;
	КонецЕсли;
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	//ОтборПоБанку И БанковскиеСчета.Банк = &Банк";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоБанку", "");
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка							КАК Ссылка,
	|	БанковскиеСчета.НомерСчета 						КАК РасчетныйСчет,
	|	БанковскиеСчета.Банк.КоррСчет 					КАК КорреспондентскийСчет,
	|	БанковскиеСчета.Банк.Код 						КАК БИК,
	|	БанковскиеСчета.Банк.Наименование 				КАК Банк,
	|	БанковскиеСчета.БанкДляРасчетов.Наименование 	КАК БанкДляРасчетов,
	|	БанковскиеСчета.БанкДляРасчетов.Код 			КАК БанкДляРасчетовБИК,
	|	БанковскиеСчета.БанкДляРасчетов.КоррСчет 		КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со счет-фактурами

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		//  Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		Если ЭСФ.Дата >= '20130608' Тогда
			ЭСФ.ДатаВыставления = ЭД.ДатаДокументаОтправителя;
			ЭСФ.КодСпособаВыставления = 2;
			ЭСФ.Выставлен = Истина;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		//  Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		Если КонецДня(ЭСФ.Дата) <> КонецДня(ЭД.ДатаДокументаОтправителя)
			ИЛИ ЭСФ.КодСпособаПолучения <> 2 Тогда
			ДатаДоИзменения = ЭСФ.Дата;
			ЭСФ.Дата = ЭД.ДатаДокументаОтправителя + (ЭСФ.Дата - НачалоДня(ЭСФ.Дата)) ;
			РазностьЛет = Год(ДатаДоИзменения) - Год(ЭД.ДатаДокументаОтправителя);
			Если РазностьЛет <> 0 Тогда
				ЭСФ.УстановитьНовыйНомер();
			КонецЕсли;
			ЭСФ.КодСпособаПолучения = 2;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		СвойстваЭСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Выставлен, КодСпособаВыставления, ДатаВыставления");
		ДатаВыставленияЭСФ = ЭлектронныеДокументы.ДатаВыставленияСчетФактуры(ВладелецЭД.Ссылка);
		Если ЗначениеЗаполнено(ДатаВыставленияЭСФ) И (НЕ СвойстваЭСФ.Выставлен ИЛИ СвойстваЭСФ.КодСпособаВыставления <> 2
				ИЛИ СвойстваЭСФ.ДатаВыставления <> ДатаВыставленияЭСФ) Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ДатаВыставления = ДатаВыставленияЭСФ;
			ЭСФ.КодСпособаВыставления = 2;
			ЭСФ.Выставлен = Истина;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		//  Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		СвойстваЭСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "КодСпособаПолучения");
		Если СвойстваЭСФ.КодСпособаПолучения <> 2 Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.КодСпособаПолучения = 2;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	
	
КонецПроцедуры

// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	Должность = "Директор";
	
КонецПроцедуры

// Возвращает текстовое описание организации.
//
// Параметры:
//  СведенияОКонтрагенте - Структура, сведения об организации, по которой надо составить описание.
//  Список - Строка, список запрашиваемых параметров организации.
//  СПрефиксом - Булево, признак вывода префикса параметра организации.
//
Функция ОписаниеОрганизации(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
	
	Результат = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, Список, СПрефиксом);
	
	Возврат Результат;
	
КонецФункции

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	
	Результат = ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
	Возврат Результат;
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты = Неопределено) Экспорт
	
	Если КодВалюты = Неопределено Тогда
		Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Иначе
		Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
		
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции

// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = Неопределено;
	Иначе
		Результат = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(СтавкаЧислом) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтрЗаменить(СтавкаЧислом, " ", "");
	ИначеЕсли ТипЗнч(СтавкаЧислом) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = СтрЗаменить(Строка(СтавкаЧислом), " ", "");
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Если ПредставлениеСтавкиНДС = Неопределено 
		ИЛИ ВРег(ПредставлениеСтавкиНДС) = "БЕЗНДС" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли Найти("0#0%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли Найти("10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли Найти("20#0.2#0,2#0.20#0,20#20%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли Найти("18#0.18#0,18#0.18#0,18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли Найти("10/110#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли Найти("18/118#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ОтветственныйПоЭД = Контрагент.ОсновнойМенеджерПокупателя;
	КонецЕсли;
	
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	
	
	Возврат Ложь;
	
КонецФункции

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Результат = "";
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Результат = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		Результат = "Код";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) И Не СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
	
КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива не готовые документы
//
// Параметры
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	ДокументыНеВыставляются = Новый Массив();
	ДокументыНеВыставляютсяВЭлектронномВиде = Новый Массив();
	СводныеКорректировочныеСчетаФактуры = Новый Массив();
	ДокументыКорректировкиПоСогласованиюСторон = Новый Массив();
	ДокументыИсправленияКорректировкиПоСогласованиюСторон = Новый Массив();
	
	
	Для каждого Документ из ДокументыМассив Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
			Если Документ.СчетФактураНеВыставляется Тогда
				// На основании счетов-фактур с признаком СчетФактураНеВыставляется ЭД формировать не требуется
				ДокументыНеВыставляются.Добавить(Документ);
			ИначеЕсли Документ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
				И Документ.ДокументыОснования.Количество()>1 Тогда
				СводныеКорректировочныеСчетаФактуры.Добавить(Документ);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			// На основании док. "Корректировка реализации", осуществляющего исправление/согласованное изменение 
			// документа отличного от док. "РеализацияТоваровУслуг", ЭД не формируется
			
			ИсходныйИсправляемыйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Документ.ДокументРеализации, Истина);
			
			Если ТипЗнч(ИсходныйИсправляемыйДокумент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				 
				ДокументыНеВыставляютсяВЭлектронномВиде.Добавить(Документ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьДокументыНеподходящиеДляФормированияЭД(
		ДокументыМассив,
		ДокументыНеВыставляются,
		НСтр("ru = 'Документ ""%1"" не выставляется. Электронный документ не сформирован.'"));
		
	УдалитьДокументыНеподходящиеДляФормированияЭД(
		ДокументыМассив,
		ДокументыНеВыставляютсяВЭлектронномВиде,
		НСтр("ru = 'Документ ""%1"" не выставляется в электронном виде. Электронный документ не сформирован.'"));
		
	УдалитьДокументыНеподходящиеДляФормированияЭД(
		ДокументыМассив,
		СводныеКорректировочныеСчетаФактуры,
		НСтр("ru = 'Корректировочный счета-фактура ""%1"" содержит несколько документов-оснований. Отправка таких счетов-фактур не поддерживается.'"));

	// Перед формированием ЭД документы ИБ должны быть проведены
	МассивПроводимыхДокументов = Новый Массив;
	МассивТиповНепроводимыхДокументов = Новый Массив;
	Для каждого Элемент из ДокументыМассив Цикл
		ИмяДокумента = Элемент.Метаданные().ПолноеИмя();
		Если Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда
			
			Если Элемент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
				Если МассивТиповНепроводимыхДокументов.Найти(ТипЗнч(Элемент)) = Неопределено Тогда
					МассивТиповНепроводимыхДокументов.Добавить(ТипЗнч(Элемент));
				КонецЕсли;
			КонецЕсли;
			
			МассивПроводимыхДокументов.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТипНепроводногоДокумента ИЗ МассивТиповНепроводимыхДокументов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивПроводимыхДокументов, ТипНепроводногоДокумента);
	КонецЦикла;
	
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивПроводимыхДокументов);
	Если МассивНепроведенныхДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		
		#Если Клиент Тогда
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронную версию документа, его необходимо предварительно провести. Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для того чтобы сформировать электронные версии документов, их необходимо предварительно провести. Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		КодОтвета = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(МассивНепроведенныхДокументов);
			
			ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2 Формирование ЭД невозможно.'");
			НепроведенныеДокументы = Новый Массив;
			Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ИнформацияОДокументе.Ссылка), 
				ИнформацияОДокументе.ОписаниеОшибки), ИнформацияОДокументе.Ссылка);
				НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);		
			КонецЦикла;
			
			ДокументыМассив = ОбщегоНазначенияКлиентСервер.СократитьМассив(ДокументыМассив, НепроведенныеДокументы);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен. Электронный документ не сформирован.'");
			УдалитьДокументыНеподходящиеДляФормированияЭД(
				ДокументыМассив,
				МассивНепроведенныхДокументов,
				ШаблонСообщения);
		КонецЕсли;
		#Иначе
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен. Электронный документ не сформирован.'");
		УдалитьДокументыНеподходящиеДляФормированияЭД(
			ДокументыМассив,
			МассивНепроведенныхДокументов,
			ШаблонСообщения);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
	
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Определяет возможно ли редактировать объект информационной базы
//
// Параметры
//  <СсылкаНаОбъект>  - <любая ссылка> - ссылка на проверяемый объект
/// <РедактированиеРазрешено> - <Булево>   - возвращает разрешено или нет редактирование
//
Функция ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт

	
	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав обрабатывать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Результат = (ПользователиБСП.ЭтоПолноправныйПользователь() ИЛИ ПользователиБСП.РолиДоступны("ВыполнениеОбменаЭД"));
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав читать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоЧтенияЭД() Экспорт
	
	Результат = (ПользователиБСП.ЭтоПолноправныйПользователь() ИЛИ ПользователиБСП.РолиДоступны("ЧтениеЭД"));
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на открытие журнала регистрации.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	Результат = ПользователиБСП.ЭтоПолноправныйПользователь();
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на настройку параметров электронных документов.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоНастройкиПараметровЭД() Экспорт
	
	Результат = (ПользователиБСП.ЭтоПолноправныйПользователь() ИЛИ ПользователиБСП.РолиДоступны("НастройкаПараметровЭД"));
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами форм

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ВидОперации")
		И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
		Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
			И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
			// Зададим особые условия.
			Если Найти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0 Тогда
				СтруктураПараметров.ЗначениеПараметра = Ложь;
			КонецЕсли;
			// Определим элемент формы.
			НайденныйЭлементФормы = Неопределено;
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
				Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			Иначе // для обычной формы
				Если НЕ Форма.ЭлементыФормы.Найти("ТекстСостоянияЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.ЭлементыФормы.ТекстСостоянияЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И ТипЗнч(НайденныйЭлементФормы) = Тип("Надпись") Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет выводимое сообщение об ошибке
// КодОшибки - строка
// ТекстОшибки - строка
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
	Если КодОшибки = "100" ИЛИ КодОшибки = "110" Тогда
		ТекстОшибки = "Проверьте общие настройки криптографии."
	КонецЕсли;
	
КонецПроцедуры

// Определяет текст сообщения о необходимости настройки системы в зависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
	
	Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо в форме ""Настройка параметров учета""
		|на закладке ""Электронные документы"" включить использование обмена электронными документами.'");
	ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо в форме ""Настройка параметров учета""
		|на закладке ""Электронные документы"" включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо в форме ""Настройка параметров учета""
		|на закладке ""Электронные документы"" включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "РАБОТАС1ССЕТЬ" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с данным видом обмена необходимо в форме ""Настройка параметров учета""
		|на закладке ""Электронные документы"" включить использование обмена через 1С:Сеть.'");
	ИначеЕсли ВРег(ВидОперации) = "РАБОТАСCOMMERCEML" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с данным видом обмена необходимо в форме ""Настройка параметров учета""
		|на закладке ""Электронные документы"" включить использование обмена в формате CommerceML.'");
	ИначеЕсли ВРег(ВидОперации) = "ДОСТУП" Тогда
		ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	Иначе
		ТекстСообщения = НСтр("ru='Операция не может быть выполнена'");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям
//  содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	Макет                   = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПользовательскоеПредставлениеОбязательныхПолей");
	ОбластьДокументов       = Макет.ПолучитьОбласть("ОбязательныеПоля");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ТипИсточника  = Тип(СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст));
		НоваяСтрока.Параметр      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		НоваяСтрока.Представление = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет соответствие кодов реквизитов схем электронных документов их пользовательскому представлению.
//
// Параметры:
//  СоответствиеВозврата - Соответствие, исходное соответствие для заполнения.
//
Процедура СоответствиеКодовРеквизитовИПредставлений(СоответствиеВозврата) Экспорт
	
	Макет = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПрикладноеПредставлениеРеквизитов");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	Для НСтр = 1 По ВысотаТаблицы Цикл
		СоответствиеВозврата.Вставить(СокрЛП(Макет.Область(НСтр, 1).Текст), СокрЛП(Макет.Область(НСтр,2).Текст));
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение таблиц соответствий элементов справочников

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	Возврат Таблица;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов
// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с временными каталогами и файлами

// При необходимости, в функции можно определить каталог для временных файлов,
// отличный от устанавливаемого по умолчанию в библиотеке ЭД.
//
// Параметры:
//  ТекущийКаталог - путь к каталогу временных файлов.
//
Процедура ТекущийКаталогВременныхФайлов(ТекущийКаталог) Экспорт
	
	ТекущийКаталог = КаталогВременныхФайлов();
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Разбирает из переданной строки фамилию, имя и отчество.
//
// Параметры
//  ПолноеНаименование - строка с наименованием;
//  Фамилия - строка с фамилией;
//  Имя - строка с именем;
//  Отчество - строка с отчеством.
//
Процедура РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ОбщегоНазначения.ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	// не используется
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	// В режиме однократной сделки
	// Используется в Обработка.ЭлектронныеДокументы.ФормаЗагрузкиПросмотраЭД
	// Пока только для пары Реализация -> Поступление
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		СписокВозврата.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(), Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
									Метаданные.Справочники.Контрагенты.Представление());
	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, 
		ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Организация, "Наименование, НаименованиеПолное, ИНН, КПП, ЮрФизЛицо"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность

// Функция должна возвращать дату и номер документов оснований (договоров) по массиву ссылок.
// Параметры функции:
// Парам 1 -  массив ссылок на документы ИБ
// (в качестве возможных значений следует принимать те типы документов,
// на основании которых в данном прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»)
//
// Параметры:
//  МассивСсылок - массив ссылок на документы ИБ;
//  ВозвращаемоеСоответствие - Соответствие со следующими свойствами:
//    ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//    значение соответствия - Структура, с полями:
//    НомерДоговора, тип: Строка
//    ДатаДоговора, тип: Дата
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, помещать пустые значения указанных типов.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен с банком

// Используется для включения подсистемы Сбербанк в прикладном решении.
//
// Параметры:
//  ФлагИспользования - <Булево> - необходимо присвоить параметру Истина, если используется подсистема Сбербанк.
//
Процедура ПроверитьИспользованиеПодсистемыСбербанк(ФлагИспользования) Экспорт
	
	ФлагИспользования = Ложь;
	
КонецПроцедуры

// Используется для получения номеров счетов в виде массив строк
//
// Параметры:
//  Организация - <СправочникСсылка.Организации> - отбор по организации.
//  Банк - <СправочникСсылка.КлассификаторБанковРФ> - отбор по банку.
//  МассивНомеровБанковскихСчетов - массив возврата, в элементах строки с номерами счетов
//
Процедура ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивНомеровБанковскихСчетов) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
		
	
	
КонецПроцедуры

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие:
//  ИспользоватьПрокси - использовать ли прокси-сервер
//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//  Сервер       - адрес прокси-сервера
//  Порт         - порт прокси-сервера
//  Пользователь - имя пользователя для авторизации на прокси-сервере
//  Пароль       - пароль пользователя
//
Функция ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		
		НастройкаПроксиСервера = Новый Соответствие();
		НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Истина);
		НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Истина);
		НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
		НастройкаПроксиСервера.Вставить("Сервер", "");
		НастройкаПроксиСервера.Вставить("Порт", "");
		НастройкаПроксиСервера.Вставить("Пользователь", "");
		НастройкаПроксиСервера.Вставить("Пароль", "");
		
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

Процедура ОкруглитьЧисловыеПоля(СтруктураПараметров, Разрядность = 2, Режим = 1) Экспорт
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		ТипЗначенияЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЗначенияЭлемента = Тип("ТаблицаЗначений") Тогда
			Для Каждого СтрокаТЗ Из Элемент.Значение Цикл
				Для Каждого Колонка Из Элемент.Значение.Колонки Цикл
					Если ТипЗнч(СтрокаТЗ[Колонка.Имя]) = Тип("Число") Тогда
						СтрокаТЗ[Колонка.Имя] = Окр(СтрокаТЗ[Колонка.Имя], Разрядность, Режим);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ТипЗначенияЭлемента = Тип("Структура") Тогда
			ОкруглитьЧисловыеПоля(Элемент.Значение, Разрядность, Режим);
		ИначеЕсли ТипЗначенияЭлемента = Тип("Число") Тогда
			СтруктураПараметров[Элемент.Ключ] = Окр(Элемент.Значение, Разрядность, Режим);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры:
//  Организация - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
	
	
	
КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимости.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево для заполнения.
//
Процедура ПодготовитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Разбирает переданный текстовый файл выписки.
//
// Параметры
//  СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение, по которому производится обмен.
//  ФайлЗагрузки - Строка, содержит путь к файлу на клиенте
//
Процедура РазобратьФайлВыписки(СоглашениеЭД, ФайлЗагрузки) Экспорт
		
КонецПроцедуры

Функция ПолучитьДанныеСтрокиТЧ(ДанныеЗаполнения, ДеревоРазбора)
	
	ДанныеДляЗаполненияСтрокиТЧ = Новый Структура();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Характеристика") Тогда 
			ИмяРеквизитаВБД = "ХарактеристикаНоменклатуры";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Мест") Тогда
			ИмяРеквизитаВБД = "КоличествоМест";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Описание") Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли Найти(ИмяРеквизитаВБД, "ДоКорректировки") <> 0 Тогда
			ИмяРеквизитаВБД = СтрЗаменить(ИмяРеквизитаВБД, "ДоКорректировки", "ДоИзменения");
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("ЕдиницаИзмерения") Тогда
			ИмяРеквизитаВБД = "ЕдиницаИзмеренияПоКлассификатору";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("КоличествоУпаковок") Тогда
			ИмяРеквизитаВБД = "Количество";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Количество") Тогда
			Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Количество") Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		Если ИмяРеквизитаВБД = "ЗначенияСвойств" Тогда
			ЗначенияСвойств = Новый Структура();
			Для Каждого ЗначениеСвойства Из НайденноеЗначение.ЗначенияСвойства Цикл
				ЗначенияСвойств.Вставить(ЗначениеСвойства.Наименование, ЗначениеСвойства.Значение.Получить(0));
			КонецЦикла;
			ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, ЗначенияСвойств);
		ИначеЕсли ИмяРеквизитаВБД = "СтавкаНДС" Тогда
			Если Не ЗначениеЗаполнено(НайденноеЗначение) Тогда
				НайденноеЗначение = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
			КонецЕсли;
			ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		Иначе
			ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		КонецЕсли;
		
		Если ТекСтрока.Реквизит = "Номенклатура" И ЗначениеЗаполнено(НайденноеЗначение) Тогда
			
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита,"ИндексСтроки",Истина);
			
			ЕдиницаИзмеренияПоКлассификатору = Неопределено;
			ДанныеДляЗаполненияСтрокиТЧ.Свойство("ЕдиницаИзмеренияПоКлассификатору", ЕдиницаИзмеренияПоКлассификатору);
			Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияПоКлассификатору) Тогда
				// Получим единицу измерения по классификатору
				ЕдиницаИзмеренияПоКлассификатору = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
				Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияПоКлассификатору) Тогда
					ЕдиницаИзмеренияПоКлассификатору = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "БазоваяЕдиница", Истина, ДеревоРазбора);
				КонецЕсли;
				ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмеренияПоКлассификатору", ЕдиницаИзмеренияПоКлассификатору);
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Реквизит = "ЕдиницаИзмеренияКод" И ЗначениеЗаполнено(НайденноеЗначение) Тогда
			ЕдиницаИзмеренияПоКлассификатору = НайтиСсылкуНаОбъект("ЕдиницыИзмерения", НайденноеЗначение);
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияПоКлассификатору) Тогда
				ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмеренияПоКлассификатору", ЕдиницаИзмеренияПоКлассификатору);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим единицу измерения для данной номенклатуры в соответствии с единицей классификатора.
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("ЕдиницаИзмеренияПоКлассификатору") Тогда
		ЕдиницаИзмерения = НайтиСсылкуНаОбъектПоРеквизиту("ЕдиницыИзмерения", "ЕдиницаПоКлассификатору",
			ДанныеДляЗаполненияСтрокиТЧ.ЕдиницаИзмеренияПоКлассификатору, НайденноеЗначение);
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Иначе
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	// Если коэффициент передан, используем его, иначе берем из единицы измерения
	Коэффициент = Неопределено;
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Коэффициент", Коэффициент) И ЗначениеЗаполнено(Коэффициент) Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Коэффициент", Число(Коэффициент));
	Иначе
		Если ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.ЕдиницаИзмерения) Тогда
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Коэффициент", ДанныеДляЗаполненияСтрокиТЧ.ЕдиницаИзмерения.Коэффициент); 
		КонецЕсли;
	КонецЕсли;

	СодержаниеУслуги = "";
	ЕстьСодержание = ДанныеДляЗаполненияСтрокиТЧ.Свойство("Содержание", СодержаниеУслуги);
	Если Не ЕстьСодержание ИЛИ Не ЗначениеЗаполнено(СодержаниеУслуги) Тогда
		Если ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.Услуга Тогда
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Содержание", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДанныеДляЗаполненияСтрокиТЧ.Номенклатура, "Наименование"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляЗаполненияСтрокиТЧ;
	
КонецФункции

Процедура ДобавитьСерийныеНомера(НоваяСтрока, КлючСвязи, ДанныеДляЗаполненияСтрокиТЧ, СерийныеНомера)
	
	НоваяСтрока.КлючСвязи = КлючСвязи;
	Если ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) Тогда
		
		мСерийныеНомера = Новый Массив();
		Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("СерийныеНомера") Тогда
			Если ТипЗнч(ДанныеДляЗаполненияСтрокиТЧ.СерийныеНомера) = Тип("Массив") Тогда
				мСерийныеНомера = ДанныеДляЗаполненияСтрокиТЧ.СерийныеНомера;
			Иначе
				мСерийныеНомера.Добавить(ДанныеДляЗаполненияСтрокиТЧ.СерийныеНомера);
			КонецЕсли;
		ИначеЕсли ДанныеДляЗаполненияСтрокиТЧ.Свойство("СерийныйНомер") Тогда
			мСерийныеНомера = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ДанныеДляЗаполненияСтрокиТЧ.СерийныйНомер, ";", Истина);
		КонецЕсли;
		
		Для Каждого ЗначениеСН Из мСерийныеНомера Цикл
			СтрокаСН = СерийныеНомера.Добавить();
			СтрокаСН.КлючСвязи = КлючСвязи;
			СтрокаСН.СерийныйНомер = 
			НайтиСсылкуНаОбъектПоРеквизиту("СерийныеНомера", "Код", ЗначениеСН, ДанныеДляЗаполненияСтрокиТЧ.Номенклатура);
			
			Если Не ЗначениеЗаполнено(СтрокаСН.СерийныйНомер) Тогда
				НовыйСН = Справочники.СерийныеНомера.СоздатьЭлемент();
				НовыйСН.Владелец = ДанныеДляЗаполненияСтрокиТЧ.Номенклатура;
				НовыйСН.Код = ЗначениеСН;
				НовыйСН.Записать();
				СтрокаСН.СерийныйНомер = НовыйСН.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
		Если мСерийныеНомера.Количество() > 0 Тогда
			ВестиСерийныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура, "ВестиСерийныеНомера");
			Если Не ВестиСерийныеНомера Тогда
				ОписаниеСобытия = "В ЭД есть информация о серийных номерах, но для элемента номенклатуры учет по серийным номерам не ведется.";
				ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия, 2, 
					УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.Номенклатура, ДанныеДляЗаполненияСтрокиТЧ.Номенклатура);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	КлючСвязи = КлючСвязи + 1;

КонецПроцедуры

Процедура ЗаполнитьДокументОснование(СтрокаТЧ, ДанныеЗаполнения)
	ЗаказПоставщику = Неопределено;
	ДанныеЗаполнения.Свойство("ДокументОснование", ЗаказПоставщику);
	Если ЗначениеЗаполнено(ЗаказПоставщику) И ТипЗнч(ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СтрокаТЧ.ЗаказПоставщику = ЗаказПоставщику;
	Иначе
		ЗначенияСвойств = Неопределено;
		ДанныеЗаполнения.Свойство("ЗначенияСвойств", ЗначенияСвойств);
		Если ТипЗнч(ЗначенияСвойств) = Тип("Структура") Тогда
			ИДЭД = Неопределено;
			ЗначенияСвойств.Свойство("ИДЭД", ИДЭД);
			Если ЗначениеЗаполнено(ИДЭД) Тогда
				ЗаказПоставщику = ЭлектронныеДокументыВнутренний.ПолучитьДокументОснование(ИДЭД);
				Если ТипЗнч(ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					СтрокаТЧ.ЗаказПоставщику = ЗаказПоставщику;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта      = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	СерийныеНомера = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().СерийныеНомера.ВыгрузитьКолонки();
	ДанныеЗаполненияШапки.Вставить("СуммаВключаетНДС", Ложь);
	КлючСвязи = 1;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			 
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, ЗначениеРеквизита);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					СтрокаТЧ = Услуги.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеДляЗаполненияСтрокиТЧ);
					ЗаполнитьДокументОснование(СтрокаТЧ, ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда 
				
				// Заполним реквизит шапки
				ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
					ИмяРеквизита = "ДатаПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
					ИмяРеквизита = "НомерПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ИмяРеквизита = "ВалютаДокумента";
				Иначе
					ИмяРеквизита = СтрокаРеквизита.Реквизит;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе 
				// Добавим строку табличной части
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				Если ТипЗнч(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.Услуга Тогда
					НоваяСтрока = Услуги.Добавить();
					НОваяСтрока.Содержание = ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.НаименованиеПолное;
				Иначе
					НоваяСтрока = Товары.Добавить();
					 
					ДобавитьСерийныеНомера(НоваяСтрока, КлючСвязи, ДанныеДляЗаполненияСтрокиТЧ, СерийныеНомера);
					
				 КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
				
				ЗаполнитьДокументОснование(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
				
				НДСУчтеноВСумме = Неопределено;
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("НДСУчтеноВСумме", НДСУчтеноВСумме) Тогда
					ДанныеЗаполненияШапки.СуммаВключаетНДС = НДСУчтеноВСумме;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// спец. значения 
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	ДанныеДляОбъекта.Вставить("СерийныеНомера", СерийныеНомера);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры");
	
	Если ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
		
		НомерИсправления 	= ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления");
		ДатаИсправления 	= ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправления");
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", 	НомерИсправления);
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", 	ДатаИсправления);
		Если ЗначениеЗаполнено(НомерИсправления) И ЗначениеЗаполнено(ДатаИсправления) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", 	НомерСчетаФактуры);
		ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
		
		НомерИсправленияИсходногоДокумента 	= ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры");
		ДатаИсправленияИсходногоДокумента 	= ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры");
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",	НомерИсправленияИсходногоДокумента);
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", 	ДатаИсправленияИсходногоДокумента);
		Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) И ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента) Тогда
			ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		КонецЕсли;
		
		
		ДанныеЗаполненияШапки.Вставить("СуммаУвеличение", 		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СтТовУчНалВсегоУвел"));
		ДанныеЗаполненияШапки.Вставить("СуммаУменьшение", 		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СтТовУчНалВсегоУм"));
		ДанныеЗаполненияШапки.Вставить("СуммаНДСУвеличение",	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СумНДСУвел"));
		ДанныеЗаполненияШапки.Вставить("СуммаНДСУменьшение", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СумНДСУм"));
		
	Иначе
		
		ВидСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидСчетаФактуры");
		
		Если ВидСчетаФактуры = "Авансовый" Тогда
			ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры", 	Перечисления.ВидСчетаФактурыПолученного.НаАванс);
			СтрокаТЧ = СтрокаДляЗагрузки.Строки.Найти("СтрокаТЧ", "Реквизит");
			Если СтрокаТЧ <> Неопределено Тогда
				Ставка = ПолучитьЗначениеРеквизитаДерева(СтрокаТЧ, "НалСтВел");
				Если Ставка = "10/110" Тогда
					ДанныеЗаполненияШапки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС10_110);
				ИначеЕсли Ставка = "18/118" Тогда
					ДанныеЗаполненияШапки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС18_118);
				ИначеЕсли Найти(Ставка, "10") > 0 Тогда
					ДанныеЗаполненияШапки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС10);
				ИначеЕсли Найти(Ставка, "18") > 0 Тогда
					ДанныеЗаполненияШапки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС18);
				ИначеЕсли Найти(Ставка, "0") > 0 Тогда
					ДанныеЗаполненияШапки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС0);
				Иначе
					ДанныеЗаполненияШапки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры", 	Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СтТовУчНал"));
		ДанныеЗаполненияШапки.Вставить("СуммаНДСДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СумНДС"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
		ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправления"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВалКод")));
	
	// Данные по организации
	ДанныеЗаполненияШапки.Вставить("Организация", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация", , ДеревоРазбора));
	
	// Данные по контрагенту
	ДанныеЗаполненияШапки.Вставить("Контрагент", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент", , ДеревоРазбора));
		
	// Получим документы-основания
	СтрокаДокументыОснования = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования");
	Если СтрокаДокументыОснования <> Неопределено Тогда
		МассивДокументовОснований = Новый Массив;
		Для Каждого Строка Из СтрокаДокументыОснования.Строки Цикл
			Если ЗначениеЗаполнено(Строка.СсылкаНаОбъект) Тогда
				МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
			КонецЕсли;
		КонецЦикла;
		ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	КонецЕсли;

	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПокупателя(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.ЗаказПокупателя.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.ЗаказПокупателя.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				ИмяРеквизита = "СуммаВключаетНДС";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
				ИмяРеквизита = "ВалютаДокумента";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
				ИмяРеквизита = "ДатаПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
				ИмяРеквизита = "НомерПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "БанковскийСчет" Тогда
				ИмяРеквизита = "СтруктурнаяЕдиница";
			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			// Добавим строку табличной части
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
			
			Если ТипЗнч(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
				 И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.Услуга Тогда
				НоваяСтрока = Услуги.Добавить();
			Иначе
				НоваяСтрока = Товары.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",	Товары);
	ДанныеДляОбъекта.Вставить("Услуги",	Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Товары = Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.ЗаказПоставщику.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				ИмяРеквизита = "СуммаВключаетНДС";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
				ИмяРеквизита = "ВалютаДокумента";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
				ИмяРеквизита = "ДатаПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
				ИмяРеквизита = "НомерПоДаннымПокупателя";
			ИначеЕсли СтрокаРеквизита.Реквизит = "БанковскийСчет" Тогда
				ИмяРеквизита = "СтруктурнаяЕдиница";
			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			// Добавим строку табличной части
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
			
			Если ТипЗнч(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
				 И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.Услуга Тогда
				НоваяСтрока = Услуги.Добавить();
			Иначе
				НоваяСтрока = Товары.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта      = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары 		   = Документы.КорректировкаПоступления.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги 		   = Документы.КорректировкаПоступления.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	СерийныеНомера = Документы.КорректировкаПоступления.ПустаяСсылка().СерийныеНомера.ВыгрузитьКолонки();
	КлючСвязи = 1;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			 
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, ЗначениеРеквизита);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда 
				
				// Заполним реквизит шапки
				ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
					ИмяРеквизита = "ДатаПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
					ИмяРеквизита = "НомерПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ИмяРеквизита = "ВалютаДокумента";
				ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументОснования" ИЛИ 
					СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
					ИмяРеквизита = "ДокументПоступления";
				Иначе
					ИмяРеквизита = СтрокаРеквизита.Реквизит;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе 
				
				// Добавим строку табличной части
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				Если ТипЗнч(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					 И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.Услуга Тогда
					 НоваяСтрока = Услуги.Добавить();
					 НоваяСтрока.Содержание = ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.НаименованиеПолное;
				Иначе
					 НоваяСтрока = Товары.Добавить();
					 
					 ДобавитьСерийныеНомера(НоваяСтрока, КлючСвязи, ДанныеДляЗаполненияСтрокиТЧ, СерийныеНомера);
					 
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ВидОперации", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора));
	
	// спец. значения 
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	ДанныеДляОбъекта.Вставить("СерийныеНомера", СерийныеНомера);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора)

	ДанныеДляОбъекта      = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.СчетНаОплатуПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.СчетНаОплатуПоставщика.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				ИмяРеквизита = "СуммаВключаетНДС";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
				ИмяРеквизита = "ВалютаДокумента";
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				ИмяРеквизита = "КурсВзаиморасчетов";
			Иначе
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			
			// Добавим строку табличной части
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
			
			Если ТипЗнч(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
				 И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.Услуга Тогда
				НоваяСтрока = Услуги.Добавить();
			Иначе
				НоваяСтрока = Товары.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Находит документ ИБ по параметрам.
//
// Параметры:
//  ВидЭД - Перечисления.ВидыЭД - Вид электронного документа, по которому ищется документ ИБ,
//  Контрагент - Ссылка на контрагента,
//  РеквизитыИБ - структура параметров информационной базы,
//  РеквизитыИБКонтрагента - структура параметров контрагента в информационной базе.
//
Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено)
	
	НайденныйДок = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПоиска.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.Контрагент = &Контрагент";
		
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ДЕНЬ)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Запрос = Новый Запрос;
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПоиска.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.Контрагент = &Контрагент";
		
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ДЕНЬ) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ДЕНЬ)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе  // создаем новый
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
			ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Покупка");
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина; 
		
		// попробуем найти заказ поставщику
		ЗаказПоставщику = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				ЗаказПоставщику = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		// Заполним реквизиты шапки на основании структуры данных заполнения
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);
		ДокументОбъект.СерийныеНомера.Загрузить(ДанныеДляЗагрузки.СерийныеНомера);
		
		// Установим вручную некоторые реквизиты шапки
		ДокументОбъект.УчитыватьНДС     = Истина;
		ДокументОбъект.СуммаДокумента   = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект);
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КонецЕсли;
		
		// Заполним курс и кратность
		КурсВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсВзаиморасчетов      = КурсВалюты.Курс;
		ДокументОбъект.КратностьВзаиморасчетов = КурсВалюты.Кратность;
		
		Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
			ДокументОбъект.Сделка = ЗаказПоставщику;
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ПоступлениеТоваровУслуг, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПокупателя(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПоставщика);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
				КонецЕсли;
				Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ЗаказТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
			ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
			ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Продажа");
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		ДокументОбъект.СуммаДокумента 			= ДанныеДляЗагрузки.Шапка.СуммаИтог;
		ДокументОбъект.КратностьВзаиморасчетов 	= 1;
		
		Если ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.УчитыватьНДС = УчетНДС.ОрганизацияУчитываетНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
		Иначе
			ДокументОбъект.УчитыватьНДС = Истина;
		КонецЕсли;
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);
		
		Если ДокументОбъект.СуммаВключаетНДС Тогда
			Для Каждого Строка из ДокументОбъект.Товары Цикл
				Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
			КонецЦикла;
			Для Каждого Строка из ДокументОбъект.Услуги Цикл
				Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
			КонецЦикла;
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПокупателя, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныйДок = Неопределено;
			Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
				РеквизитыИБКонтрагента = Новый Структура;
				РеквизитыИБ = Новый Структура;
				Если ДанныеЗаполнения.Свойство("НомерПоДаннымПокупателя") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПокупателя) Тогда
					РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПокупателя);
				КонецЕсли;
				Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПокупателя") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПокупателя) Тогда
					РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПокупателя);
				КонецЕсли;
				Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
					НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
				ДокументОбъект = НайденныйДок.ПолучитьОбъект();
				Возврат ДокументОбъект.Ссылка;
			КонецЕсли;
			
			ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
			ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
			ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Покупка");
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		ДокументОбъект.СуммаДокумента 			= ДанныеДляЗагрузки.Шапка.СуммаИтог;
		ДокументОбъект.КратностьВзаиморасчетов 	= 1;
		
		Если ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.УчитыватьНДС = УчетНДС.ОрганизацияУчитываетНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
		Иначе
			ДокументОбъект.УчитыватьНДС = Истина;
		КонецЕсли;
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);
		
		Если ДокументОбъект.СуммаВключаетНДС Тогда
			Для Каждого Строка из ДокументОбъект.Товары Цикл
				Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
			КонецЦикла;
			Для Каждого Строка из ДокументОбъект.Услуги Цикл
				Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
			КонецЦикла;
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПоставщику, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
			ДокументОбъект.Заполнить(ДанныеДляЗагрузки);
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина; 
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
		// Заполним ТЧ ДокументыОснования
		Если ДанныеДляЗагрузки.Свойство("ДокументыОснования") Тогда
			ДокументОбъект.ДокументыОснования.Очистить();
			Для Каждого ДокументОснование Из ДанныеДляЗагрузки.ДокументыОснования Цикл
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = ДокументОснование;
				Если ДанныеДляЗагрузки.ВидСчетаФактуры  = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
					НоваяСтрока.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
					НоваяСтрока.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
					НоваяСтрока.СуммаУвеличение         = ДанныеДляЗагрузки.СуммаУвеличение;
					НоваяСтрока.СуммаУменьшение         = ДанныеДляЗагрузки.СуммаУменьшение;
					НоваяСтрока.СуммаНДСУвеличение      = ДанныеДляЗагрузки.СуммаНДСУвеличение;
					НоваяСтрока.СуммаНДСУменьшение      = ДанныеДляЗагрузки.СуммаНДСУменьшение;
					НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента = ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента");
					Если НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента Тогда
						НоваяСтрока.НомерИсправленияИсходногоДокумента = ДанныеДляЗагрузки.НомерИсправленияИсходногоДокумента;
						НоваяСтрока.ДатаИсправленияИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДокументОбъект.ДокументыОснования.Количество() = 0 Тогда
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			Если ДанныеДляЗагрузки.ВидСчетаФактуры  = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				НоваяСтрока.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
				НоваяСтрока.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
				НоваяСтрока.СуммаУвеличение         = ДанныеДляЗагрузки.СуммаУвеличение;
				НоваяСтрока.СуммаУменьшение         = ДанныеДляЗагрузки.СуммаУменьшение;
				НоваяСтрока.СуммаНДСУвеличение      = ДанныеДляЗагрузки.СуммаНДСУвеличение;
				НоваяСтрока.СуммаНДСУменьшение      = ДанныеДляЗагрузки.СуммаНДСУменьшение;
				НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента = ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента");
				Если НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента Тогда
					НоваяСтрока.НомерИсправленияИсходногоДокумента = ДанныеДляЗагрузки.НомерИсправленияИсходногоДокумента;
					НоваяСтрока.ДатаИсправленияИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеДляЗагрузки.ВидСчетаФактуры  = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			Если ДанныеДляЗагрузки.Свойство("НомерИсходногоДокумента") Тогда
				ДанныеДляЗагрузки.Удалить("НомерИсходногоДокумента");
			КонецЕсли;
			Если ДанныеДляЗагрузки.Свойство("ДатаИсходногоДокумента") Тогда
				ДанныеДляЗагрузки.Удалить("ДатаИсходногоДокумента");
			КонецЕсли;
			Если ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента") Тогда
				ДанныеДляЗагрузки.Удалить("УчитыватьИсправлениеИсходногоДокумента");
			КонецЕсли;
			Если ДанныеДляЗагрузки.Свойство("НомерИсправленияИсходногоДокумента") Тогда
				ДанныеДляЗагрузки.Удалить("НомерИсправленияИсходногоДокумента");
			КонецЕсли;
			Если ДанныеДляЗагрузки.Свойство("ДатаИсправленияИсходногоДокумента") Тогда
				ДанныеДляЗагрузки.Удалить("ДатаИсправленияИсходногоДокумента");
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеДляЗагрузки.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
			Если ДокументОбъект.Авансы.Количество() = 0 Тогда
				НоваяСтрока = ДокументОбъект.Авансы.Добавить();
			Иначе
				НоваяСтрока = ДокументОбъект.Авансы[0];
			КонецЕсли;
			НоваяСтрока.Сумма     = ДанныеДляЗагрузки.СуммаДокумента;
			НоваяСтрока.СуммаНДС  = ДанныеДляЗагрузки.СуммаНДСДокумента;
			НоваяСтрока.СтавкаНДС = ДанныеДляЗагрузки.СтавкаНДС;
		КонецЕсли;
		// Заполним реквизиты шапки на основании структуры данных заполнения
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДляЗагрузки);
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументОбъект.УстановитьКодВидаОперации();
		ДокументОбъект.КодСпособаПолучения = 2;
		
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.СчетФактураПолученный, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе  // создаем новый
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ДокументПоступления = ДокументОбъект.ДокументПоступления;
		
		Если Не ЗначениеЗаполнено(ДокументПоступления) И ДанныеЗаполнения.Свойство("Основание") Тогда
			ДокументПоступления = ДанныеЗаполнения.Основание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументПоступления) Тогда
			// Заполним корректировку поступления данными основания
			ДокументОбъект.Заполнить(ДокументПоступления);
		Иначе
			// Заполним шапку по данным заполнения.
			ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		// Заполним табличные части данными корректировки
		ТабличныеЧастиДляЗаполнения = Новый Структура("Товары, Услуги");
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполнения Цикл
			
			ИмяТЧ = ТабличнаяЧасть.Ключ;
			
			СтруктураПоиска = Новый Структура("Номенклатура, СтавкаНДС");
			Если ИмяТЧ = "Товары" Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры");
				СтруктураПоиска.Вставить("ЕдиницаИзмерения");
			КонецЕсли;
			
			Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
				РезультатПоискаДанныхЗаполнения = ДанныеДляЗагрузки[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
				
				Если РезультатПоискаДанныхЗаполнения.Количество() = 0 Тогда
					
					// Такой строки в данных корректировки нет - обнуляем данные строки документа.
					СтрокаДокумента.Количество = 0;
					СтрокаДокумента.Цена       = 0;
					СтрокаДокумента.Сумма      = 0;
					СтрокаДокумента.СуммаНДС   = 0;
					
				Иначе
					
					СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
					СвойстваДляЗаполнения = "Количество, Цена, Сумма, СуммаНДС";
					Если ИмяТЧ = "Товары" Тогда
						СвойстваДляЗаполнения = СвойстваДляЗаполнения + ", КлючСвязи";
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СвойстваДляЗаполнения);
					
					// Удалим обработанную строку из данных заполнения
					ДанныеДляЗагрузки[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Добавим новые строки в документ
			Если ДанныеДляЗагрузки[ИмяТЧ].Количество() > 0 Тогда
				
				Для Каждого СтрокаДанныхЗаполнения Из ДанныеДляЗагрузки[ИмяТЧ] Цикл
					
					НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.СерийныеНомера.Загрузить(ДанныеДляЗагрузки.СерийныеНомера);
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		КонецЕсли;
		
		ДокументОбъект.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ПоступлениеТоваровУслуг, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)

	ВозвращаемоеЗначение = Неопределено;
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			ДокументОбъект = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
			ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Покупка");
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		ДокументОбъект.КратностьВзаиморасчетов 	= 1;
		
		Если ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.УчитыватьНДС = УчетНДС.ОрганизацияУчитываетНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
		Иначе
			ДокументОбъект.УчитыватьНДС = Истина;
		КонецЕсли;
		
		// Загрузим табличные части
		ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);
		
		Если ДокументОбъект.СуммаВключаетНДС Тогда
			Для Каждого Строка из ДокументОбъект.Товары Цикл
				Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
			КонецЦикла;
			Для Каждого Строка из ДокументОбъект.Услуги Цикл
				Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
			КонецЦикла;
		КонецЕсли;
		
		ДокументОбъект.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект);
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если Записывать ТОгда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПокупателя, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьКонтрагента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		КонтрагентОбъект = СсылкаНаВладельца.ПолучитьОбъект()
	Иначе
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		ОсновнойСтатусКонтрагента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), 
			"ОсновнойСтатусКонтрагента");
		КонтрагентОбъект.Покупатель = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		КонтрагентОбъект.Поставщик  = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
	КонецЕсли;
	
	НаименованиеПолное = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПолноеНаименование", Истина, ДеревоРазбора);
	Если Не ЗначениеЗаполнено(НаименованиеПолное) Тогда
		НаименованиеПолное = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);
	КонецЕсли;
	КонтрагентОбъект.НаименованиеПолное = НаименованиеПолное;		
	Наименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Наименование", Истина, ДеревоРазбора);
	Если ЗначениеЗаполнено(Наименование) Тогда
		КонтрагентОбъект.Наименование = Наименование;
	Иначе
		КонтрагентОбъект.Наименование = НаименованиеПолное;
	КонецЕсли;
	КонтрагентОбъект.ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	
	Если СтрДлина(КонтрагентОбъект.ИНН) = 10 Тогда
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ЮрЛицо = Истина;
		
		КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(КПП) Тогда
			КонтрагентОбъект.КПП = КПП;
		КонецЕсли;
	Иначе
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		ЮрЛицо = Ложь;
		
		Док = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "УдостоверениеЛичности", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(Док) Тогда
			КонтрагентОбъект.ДокументУдостоверяющийЛичность = Док;
		КонецЕсли;
	КонецЕсли;
	
	ОКПО = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОКПО", Истина, ДеревоРазбора);
	Если ЗначениеЗаполнено(ОКПО) Тогда
		КонтрагентОбъект.КодПоОКПО = ОКПО;
	КонецЕсли;
	
	Если Записывать Тогда
		Если КонтрагентОбъект.ЭтоНовый() Тогда
			КонтрагентОбъект.Записать();
		КонецЕсли;
		КонтрагентОбъект.Записать();
		ВозвращаемоеЗначение = КонтрагентОбъект.Ссылка;
	Иначе
		ВозвращаемоеЗначение = КонтрагентОбъект;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентОбъект.Ссылка) Тогда
		// Объект не записан
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаписатьЕщеРаз = Ложь;
	
	// Банковский счет
	НомерСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчета", Истина, ДеревоРазбора);
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		БанкБИК = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "БанкБИК", Истина, ДеревоРазбора);
		Если ЗначениеЗаполнено(БанкБИК) Тогда
			ДопПараметры = Новый Структура("Владелец", КонтрагентОбъект.Ссылка);
			БанковскийСчет = НайтиСсылкуНаОбъект("БанковскиеСчетаКонтрагентов", НомерСчета, ДопПараметры);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				Банк = НайтиСсылкуНаОбъект("Банки", БанкБик);
				Если ЗначениеЗаполнено(Банк) Тогда
					БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
					БанковскийСчет.Владелец = КонтрагентОбъект.Ссылка;
					БанковскийСчет.НомерСчета = НомерСчета;
					БанковскийСчет.Банк = Банк;
					БанковскийСчет.ВалютаДенежныхСредств = глЗначениеПеременной("ВалютаРегламентированногоУчета");
					БанковскийСчет.ВидСчета = "Расчетный";
					БанковскийСчет.Наименование = Банк.Наименование + " (" + БанковскийСчет.ВидСчета + ")";
					БанковскийСчет.Записать();
					
					Если Не ЗначениеЗаполнено(КонтрагентОбъект.ОсновнойБанковскийСчет) Тогда
						КонтрагентОбъект.ОсновнойБанковскийСчет = БанковскийСчет.Ссылка;
						ЗаписатьЕщеРаз = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИндексКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Контрагент");
	СтрокаКонтрагентов = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта");
	Если ЗначениеЗаполнено(СтрокаКонтрагентов) Тогда
		СтрокаКонтрагента = СтрокаКонтрагентов.Строки.Найти(ИндексКонтрагента, "ИндексСтроки");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаКонтрагента) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	// Адрес
	Адрес = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "ФактическийАдрес_Представление", Истина);
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		АдресСтруктурой = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "АдресСтруктурой", Истина);
		Если ТипЗнч(АдресСтруктурой) = Тип("Структура") Тогда
			КодРегион = "";
			Если АдресСтруктурой.Свойство("КодРегион", КодРегион) Тогда
				Попытка
					КодРегионаВКоде = Число(СокрЛП(АдресСтруктурой.КодРегион));
				Исключение
					КодРегионаВКоде = 0;
				КонецПопытки;
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				               |	АдресныйКлассификатор.Наименование,
				               |	АдресныйКлассификатор.Сокращение
				               |ИЗ
				               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
				               |ГДЕ
				               |	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
				               |	И АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде";
				Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегионаВКоде);
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					ПредставлениеРегиона = СокрЛП(Выборка.Наименование + " " + Выборка.Сокращение) + ",";
					Адрес = СтрЗаменить(Адрес, " "+АдресСтруктурой.КодРегион+",", ПредставлениеРегиона);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		КИ.Объект = КонтрагентОбъект.Ссылка;
		КИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КИ.Поле1 = "Россия";
		КИ.Представление = Адрес;
		КИ.Записать(Истина);
		
	КонецЕсли;
	
	// Телефон
	Контакты = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "Контакты", Истина);
	Если ТипЗнч(Контакты) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Контакт Из Контакты Цикл
			Если ВРег(Контакт.Вид) = "ТЕЛЕФОН" Тогда
				КИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				КИ.Объект = КонтрагентОбъект.Ссылка;
				КИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				КИ.Представление = Контакт.Представление;
				КИ.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Руководитель
	Руководитель = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "Руководитель", Истина);
	Если ТипЗнч(Руководитель) = Тип("Структура") Тогда
		// Контактные лица
		НаименованиеКЛ = Руководитель.Фамилия + " " + Руководитель.Имя + " " + Руководитель.Отчество;
		КЛ = НайтиСсылкуНаОбъектПоРеквизиту("КонтактныеЛица", "Наименование", НаименованиеКЛ);
		Если Не ЗначениеЗаполнено(КЛ) Тогда
			КЛ = Справочники.КонтактныеЛица.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(КЛ, Руководитель);
			КЛ.Наименование = НаименованиеКЛ;
			КЛ.Записать();
		КонецЕсли;
		// Контактные лица контрагентов
		КЛКонтрагента = НайтиСсылкуНаОбъектПоРеквизиту("КонтактныеЛицаКонтрагентов", "Наименование", 
			НаименованиеКЛ, КонтрагентОбъект.Ссылка);
		Если Не ЗначениеЗаполнено(КЛКонтрагента) Тогда
			КЛКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
			КЛКонтрагента.Владелец = КонтрагентОбъект.Ссылка;
			КЛКонтрагента.Должность = Руководитель.Должность;
			КЛКонтрагента.КонтактноеЛицо = КЛ.Ссылка;
			КЛКонтрагента.Наименование = КЛ.Наименование;
			КЛКонтрагента.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если Записывать И ЗаписатьЕщеРаз Тогда
		КонтрагентОбъект.Записать();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает данные по номенклатуре и характеристике товара на основании данных о номенклатуре поставщика
// 
// Параметры:
//  НоменклатураПоставщика - Струкутра, содержит сведения о номенклатуре поставщика
//
// Возвращаемое значение:
//  Структура - Структура, содержащая поля:
//               Номенклатура
//               ХарактеристикаНоменклатуры
//
Функция ПолучитьДанныеТовараПоНоменклатуреПоставщика(НоменклатураПоставщика)
	
	ДанныеПоТовару = Новый Структура(
		"Номенклатура, ХарактеристикаНоменклатуры",
		Справочники.Номенклатура.ПустаяСсылка(),
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		
	Если НЕ НоменклатураПоставщика.Свойство("Идентификатор")
		 ИЛИ НЕ ЗначениеЗаполнено(НоменклатураПоставщика.Идентификатор) Тогда
		Возврат ДанныеПоТовару; 
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура,
	|	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент = &Контрагент
	|	И НоменклатураКонтрагентов.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Контрагент", НоменклатураПоставщика.Владелец);
	Запрос.УстановитьПараметр("Идентификатор", НоменклатураПоставщика.Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ДанныеПоТовару.Номенклатура 				= Выборка.Номенклатура;
		ДанныеПоТовару.ХарактеристикаНоменклатуры 	= Выборка.ХарактеристикаНоменклатуры; 
	КонецЕсли;
	
	Возврат ДанныеПоТовару;
	
КонецФункции

// Процедура удаляет из исходного массива документы неподходящие для формирования ЭД
//
// Параметры
//  МассивДокументов - массив документов для формирования ЭД
//  МассивДокументовДляУдаления - массив документов неподходящих для формирования ЭД
//  ШаблонСообщения - шаблон сообщения
//
Процедура УдалитьДокументыНеподходящиеДляФормированияЭД(МассивДокументов, МассивДокументовДляУдаления, ШаблонСообщения)
	
	Для Каждого Документ Из МассивДокументовДляУдаления Цикл
		Найденный = МассивДокументов.Найти(Документ);
		Если Найденный <> Неопределено Тогда
			МассивДокументов.Удалить(Найденный);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(Документ)), 
				Документ);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров, ДопОбработка = Ложь, ИмяКолонкиИД = "ИД")
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		
		// Cформируем идентификатор
		ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Строка.Характеристика), Строка.Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = "";
		Строка[ИмяКолонкиИД] = Строка(ИДТовара)+"#"+Строка(ИДХарактеристики)+"#"+Строка(ИДУпаковки);
		
		// Сформируем наименование
		Строка.Наименование = Строка.Наименование + ?(ЗначениеЗаполнено(Строка.Характеристика), " ("+Строка.Характеристика+")", "");
		
		Если ДопОбработка Тогда
			Строка.ДопДанныеНеПодписанные = Новый Структура();
			Строка.ДопДанныеПодписанные = Новый Структура("СтавкаНДС, ИД", Строка(Строка.СтавкаНДС), Строка[ИмяКолонкиИД]);
			Строка.СтавкаНДС = ПолучитьСтавкуНДСЧислом(Строка.СтавкаНДС);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные для формирования ЭД "ТОРГ12" на основании документов
//   - РеализацияТоваровИУслуг 
//   - КорректировкаРеализации (исправляющего реализацию)
// 
Функция ПолучитьДанныеРеализации(СсылкаНаОбъект)
	
	ДанныеДокумента = Новый Структура();
	
	// Подготовим данные шапки документа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	//КорректировкаРеализации ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭД.Исправление) КАК ВидОперации,
	|	//КорректировкаРеализации ДокументРеализации КАК ДокументОснование,
	|	//КорректировкаРеализации ИсправляемыйДокументРеализации КАК ИсправляемыйДокументРеализации,
	|	//РеализацияТоваровУслуг """" КАК ВидОперации,
	|	//РеализацияТоваровУслуг Сделка КАК ДокументОснование,
	|	//РеализацияТоваровУслуг ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка) КАК ИсправляемыйДокументРеализации,
	|	Номер КАК НомерДокумента,
	|	Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР 
	|		КОГДА Грузополучатель = &ПустойКонтрагент
	|		ТОГДА Контрагент
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР 
	|		КОГДА Грузоотправитель = &ПустойКонтрагент
	|		ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ Грузоотправитель 
	|	КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент КАК Покупатель,
	|	Контрагент КАК Плательщик,
	|	Сделка,
	|	ДоговорКонтрагента.Представление  КАК ДоговорНаименование,
	|	ДоговорКонтрагента.Номер          КАК ДоговорНомер,
	|	ДоговорКонтрагента.Дата           КАК ДоговорДата,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	//РеализацияТоваровУслуг ОтпускРазрешил,
	|	//РеализацияТоваровУслуг ОтпускПроизвел,
	|	//КорректировкаРеализации ИсправляемыйДокументРеализации.ОтпускРазрешил КАК ОтпускРазрешил,
	|	//КорректировкаРеализации ИсправляемыйДокументРеализации.ОтпускПроизвел КАК ОтпускПроизвел,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Подразделение) КАК Подразделение,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	//КорректировкаРеализации Документ.КорректировкаРеализации КАК РеализацияТоваровУслуг
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|	ПО
	|		ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	| 	
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|";
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//РеализацияТоваровУслуг", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//КорректировкаРеализации", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаСреза",          СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаОбъект.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",        СсылкаНаОбъект.Организация);
	Запрос.УстановитьПараметр("Подразделение",      СсылкаНаОбъект.Подразделение);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДокумента.Вставить("РеквизитыШапки", Шапка);
	
	// Подготовим данные табличных частей
	
	СтрокаВыборкиПоляСодержания    = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки                                             КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура.Код                                        КАК КодТовара,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул 	                               КАК Артикул,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное                         КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное                         КАК НаименованиеНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура                                            КАК Номенклатура,
	|	РеализацияТоваровУслуг.Количество                                              КАК Количество,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность	                           КАК Сумма,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность                               КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.ХарактеристикаНоменклатуры)               КАК НаименованиеХарактеристики,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры                              КАК Характеристика,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения                    КАК БазоваяЕдиница,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код            КАК БазоваяЕдиницаКод,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование       КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК Упаковка,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код            КАК УпаковкаКод,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование   КАК УпаковкаНаименование,
	|	РеализацияТоваровУслуг.Коэффициент                                             КАК Коэффициент,
	|	РеализацияТоваровУслуг.СтавкаНДС                                               КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность       					   КАК СуммаНДС,
	|	0                                                                              КАК СуммаСкидки,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Представление                      КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.КоличествоМест                                          КАК КоличествоМест,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент 
	|		/ РеализацияТоваровУслуг.Коэффициент                                       КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Количество                                              КАК МассаНетто,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.КоличествоМест > 0 
	|		ТОГДА РеализацияТоваровУслуг.КоличествоМест * РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.ЕдиницаИзмерения.Вес
	|	КОНЕЦ                                                                          КАК МассаБрутто,
	|   РеализацияТоваровУслуг.ЗаказПокупателя                                         КАК ДокументОснование,
	|   РеализацияТоваровУслуг.КлючСвязи                                         	   КАК КлючСвязи
	|ИЗ
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	//КорректировкаРеализации Документ.КорректировкаРеализации.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|	
	|	//КорректировкаРеализации И (РеализацияТоваровУслуг.Сумма > 0 ИЛИ РеализацияТоваровУслуг.Количество > 0)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул,
	|	"+СтрокаВыборкиПоляСодержания+",
	|	"+СтрокаВыборкиПоляСодержания+",
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
	|	"""",
	|	Неопределено,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	1,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
	|	0,
	|	Неопределено,
	|	0,
	|	0,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	РеализацияТоваровУслуг.ЗаказПокупателя,
	|	-1
	|ИЗ
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|	//КорректировкаРеализации Документ.КорректировкаРеализации.Услуги КАК РеализацияТоваровУслуг
	|	
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|	
	|	//КорректировкаРеализации И (РеализацияТоваровУслуг.Сумма > 0 ИЛИ РеализацияТоваровУслуг.Количество > 0)";
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//РеализацияТоваровУслуг", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//КорректировкаРеализации", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Курс",       ЗаполнениеДокументов.КурсДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Кратность",  ЗаполнениеДокументов.КратностьДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Ссылка",     СсылкаНаОбъект);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС",   Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		
		СуммаСНДС   = Окр((СтрокаТаблицы.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС)), 2);
		СуммаНДС    = Окр(СтрокаТаблицы.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		
		СтрокаТаблицы.СуммаНДС    = СуммаНДС;
		СтрокаТаблицы.СуммаБезНДС = СуммаБезНДС;
		СтрокаТаблицы.СуммаСНДС   = СуммаСНДС;
		
		Если Шапка.СуммаВключаетНДС Тогда
			СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Количество = 0, 0, Окр(СуммаБезНДС / СтрокаТаблицы.Количество, 2));
		Иначе
			СтрокаТаблицы.Цена = Окр(СтрокаТаблицы.Цена, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерийныеНомера.КлючСвязи,
	|	СерийныеНомера.СерийныйНомер.Код КАК СерийныйНомер
	|ИЗ
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг.СерийныеНомера КАК СерийныеНомера
	|	//КорректировкаРеализации Документ.КорректировкаРеализации.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//РеализацияТоваровУслуг", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//КорректировкаРеализации", "");
	КонецЕсли;
	
	ТаблицаСН = Запрос.Выполнить().Выгрузить();
	
	ДанныеДокумента.Вставить("ТаблицаСН", ТаблицаСН);
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Возвращает данные для формирования ЭД "АктВыполненныхРабот" на основании документов
//   - РеализацияТоваровИУслуг (акт выполненных работ), 
//   - КорректировкаРеализации (исправляющего реализацию)
// 
Функция ПодготовитьДанныеАктаОбОказанииУслуг(СсылкаНаОбъект)
	
	ДанныеДокумента = Новый Структура();
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("Акт");
	
	ТекстЗапросаШапка =
	"ВЫБРАТЬ
	|	//РеализацияТоваровУслуг """"   КАК ВидОперации,
	|	//РеализацияТоваровУслуг Сделка КАК ДокументОснование,
	|	//РеализацияТоваровУслуг ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка) КАК ИсправляемыйДокументРеализации,
	|	//КорректировкаРеализации ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭД.Исправление) КАК ВидОперации,
	|	//КорректировкаРеализации ДокументРеализации КАК ДокументОснование,
	|	//КорректировкаРеализации ИсправляемыйДокументРеализации КАК ИсправляемыйДокументРеализации,
	|	Акт.Номер КАК НомерДокумента,
	|	Акт.Дата КАК ДатаДокумента,
	|	Акт.ДоговорКонтрагента,
	|	Акт.ДоговорКонтрагента.Представление  КАК ДоговорНаименование,
	|	Акт.ДоговорКонтрагента.Номер          КАК ДоговорНомер,
	|	Акт.ДоговорКонтрагента.Дата           КАК ДоговорДата,
	|	Акт.Контрагент           КАК Заказчик,
	|	Акт.Организация          КАК Исполнитель,
	|	Акт.Организация,
	|	Акт.СуммаДокумента,
	|	Акт.ВалютаДокумента,
	|	Акт.ВалютаДокумента.Код  КАК КодВалютыДокумента,
	|	Акт.УчитыватьНДС,
	|	Акт.СуммаВключаетНДС,
	|	Акт.КратностьВзаиморасчетов,
	|	Акт.КурсВзаиморасчетов
	|ИЗ
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг КАК Акт
	|	//КорректировкаРеализации Документ.КорректировкаРеализации КАК Акт
	|	
	|ГДЕ
	|	Акт.Ссылка = &ТекущийДокумент";
	
	ТекстЗапросаТЧ =
	"ВЫБРАТЬ
	|	МИНИМУМ(Акт.НомерСтроки)                     КАК НомерСтроки,
	|	Акт.Номенклатура                             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                                 КАК Характеристика,
	|	ВЫБОР 
	|		КОГДА НЕ (Акт.Номенклатура.НаименованиеПолное ПОДОБНО """")
	|			ТОГДА ВЫРАЗИТЬ (Акт.Номенклатура.НаименованиеПолное КАК Строка(1000))
	|		ИНАЧЕ Акт.Номенклатура.Наименование
	|	КОНЕЦ                                         КАК НаименованиеНоменклатуры,
	|	" + СтрокаВыборкиПоляСодержания + "           КАК Описание,
	|	Акт.Номенклатура.БазоваяЕдиницаИзмерения      КАК БазоваяЕдиница,
	|	Акт.Номенклатура.БазоваяЕдиницаИзмерения.Код  КАК БазоваяЕдиницаКод,
	|	
	|	//РеализацияТоваровУслуг Акт.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	//КорректировкаРеализации Акт.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	
	|	//РеализацияТоваровУслуг Акт.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	//КорректировкаРеализации Акт.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|
	|	//РеализацияТоваровУслуг Акт.Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	//КорректировкаРеализации Акт.Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаИзмеренияНаименование,
	|
	|	СУММА(Акт.Количество)                        КАК Количество,
	|	Акт.Цена * &Курс / &Кратность		         КАК Цена,
	|	СУММА(Акт.Сумма * &Курс / &Кратность)        КАК Сумма,
	|	Акт.СтавкаНДС                                КАК СтавкаНДС,
	|	СУММА(Акт.СуммаНДС * &Курс / &Кратность)     КАК СуммаНДС,
	|   Акт.ЗаказПокупателя                          КАК ДокументОснование
	|ИЗ
	|	
	|	//РеализацияТоваровУслуг Документ.РеализацияТоваровУслуг.Услуги КАК Акт
	|	//КорректировкаРеализации Документ.КорректировкаРеализации.Услуги КАК Акт
	|
	|ГДЕ
	|	Акт.Ссылка = &ТекущийДокумент
	|	
	|	//КорректировкаРеализации И (Акт.Сумма > 0 ИЛИ Акт.Количество > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Акт.Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	
	|	//РеализацияТоваровУслуг Акт.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	//КорректировкаРеализации Акт.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	
	|	//РеализацияТоваровУслуг Акт.Номенклатура.ЕдиницаХраненияОстатков.Наименование,
	|	//КорректировкаРеализации Акт.Номенклатура.ЕдиницаХраненияОстатков.Наименование,
	|
	|	//РеализацияТоваровУслуг Акт.ЗаказПокупателя,
	|	//КорректировкаРеализации Акт.ЗаказПокупателя,
	|
	|	Акт.СтавкаНДС,
	|	Акт.Цена
	|	
	|УПОРЯДОЧИТЬ ПО 
	|	НомерСтроки";
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТекстЗапросаШапка = СтрЗаменить(ТекстЗапросаШапка, "//РеализацияТоваровУслуг", "");
		ТекстЗапросаТЧ    = СтрЗаменить(ТекстЗапросаТЧ,    "//РеализацияТоваровУслуг", "");
	Иначе
		ТекстЗапросаШапка = СтрЗаменить(ТекстЗапросаШапка, "//КорректировкаРеализации", "");
		ТекстЗапросаТЧ    = СтрЗаменить(ТекстЗапросаТЧ,    "//КорректировкаРеализации", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.Текст = ТекстЗапросаШапка;
	
	// Получим данные шапки документа
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ДанныеДокумента.Вставить("РеквизитыШапки", Шапка);
	
	// Вычислим курс документа для печати
	Если Шапка.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
	 
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
		ЗапросКурсАванса.Текст =
		"ВЫБРАТЬ
		|	Док.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	Док.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
		|ГДЕ
		|	Док.Ссылка = &ТекущийДокумент
		|ИТОГИ
		|	СУММА(СуммаВзаиморасчетов),
		|	СУММА(СуммаРегл)
		|ПО
		|	ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(СсылкаНаОбъект, "Услуги"),
			Шапка.ВалютаДокумента, Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			ЗаполнениеДокументов.КурсДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета), Шапка.КурсВзаиморасчетов,
			ЗаполнениеДокументов.КратностьДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета), Шапка.КратностьВзаиморасчетов);
			
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * Шапка.КурсВзаиморасчетов + ВыборкаСуммаРегл) / (НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			Запрос.УстановитьПараметр("Курс",      СсылкаНаОбъект.КурсВзаиморасчетов);
			Запрос.УстановитьПараметр("Кратность", ?(Шапка.КратностьВзаиморасчетов = 0, 1, Шапка.КратностьВзаиморасчетов));
		Иначе
			Запрос.УстановитьПараметр("Курс",      КурсДляПечати);
			Запрос.УстановитьПараметр("Кратность", 1);
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("Курс",      1);
		Запрос.УстановитьПараметр("Кратность", 1);
		
	КонецЕсли;
	
	// Получим данные табличной части
	Запрос.Текст = ТекстЗапросаТЧ;
	ТаблицаУслуг = Запрос.Выполнить().Выгрузить();
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС",   Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	ТаблицаУслуг.Колонки.Добавить("ИД");
	
	Для каждого СтрокаТаблицы из ТаблицаУслуг Цикл
		
		СуммаСНДС   = Окр((СтрокаТаблицы.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС)), 2);
		СуммаНДС    = Окр(СтрокаТаблицы.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		
		СтрокаТаблицы.СуммаНДС    = СуммаНДС;
		СтрокаТаблицы.СуммаБезНДС = СуммаБезНДС;
		СтрокаТаблицы.СуммаСНДС   = СуммаСНДС;
		
		Если Шапка.СуммаВключаетНДС Тогда
			СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Количество = 0, 0, Окр(СуммаБезНДС / СтрокаТаблицы.Количество, 2));
		Иначе
			СтрокаТаблицы.Цена = Окр(СтрокаТаблицы.Цена, 2);
		КонецЕсли;
		
		// Заполним ИД номенклатуры
		СтрокаТаблицы.ИД = Строка(СтрокаТаблицы.Номенклатура.УникальныйИдентификатор()) + "##";
		
	КонецЦикла;
	
	ДанныеДокумента.Вставить("ТаблицаУслуг", ТаблицаУслуг);
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Возвращает данные для формирования ЭД "СогласованноеИзменениеСтоимости" на основании документов
//   - КорректировкаРеализации (согласованное изменение)
//   - КорректировкаРеализации (исправление согласованного изменения)
// 
Функция ПолучитьДанныеСогласованногоИзменения(СсылкаНаОбъект)
	
	ДанныеДокумента = Новый Структура();
	
	// Подготовим данные шапки документа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭД.Исправление)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидОперации,
	|	КорректировкаРеализации.ДокументРеализации КАК ДокументОснование,
	|	КорректировкаРеализации.Номер КАК Номер,
	|	КорректировкаРеализации.Дата КАК ДатаДокумента,
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.Контрагент  КАК Контрагент,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Организация
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	КорректировкаРеализации.Контрагент КАК Плательщик,
	|	КорректировкаРеализации.Сделка,
	|	КорректировкаРеализации.ДоговорКонтрагента.Представление КАК ДоговорНаименование,
	|	КорректировкаРеализации.ДоговорКонтрагента.Номер КАК ДоговорНомер,
	|	КорректировкаРеализации.ДоговорКонтрагента.Дата КАК ДоговорДата,
	|	КорректировкаРеализации.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	КорректировкаРеализации.Подразделение КАК Подразделение,
	|	КорректировкаРеализации.ВалютаДокумента,
	|	КорректировкаРеализации.ВалютаДокумента.Код КАК ВалютаКод,
	|	КорректировкаРеализации.КурсВзаиморасчетов КАК Курс,
	|	КорректировкаРеализации.КратностьВзаиморасчетов КАК Кратность,
	|	КорректировкаРеализации.УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = КорректировкаРеализации.Склад)
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ТекущийДокумент";
	
	Запрос.УстановитьПараметр("ДатаСреза",          СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаОбъект.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",        СсылкаНаОбъект.Организация);
	Запрос.УстановитьПараметр("Подразделение",      СсылкаНаОбъект.Подразделение);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДокумента.Вставить("РеквизитыШапки", Шапка);
	
	// Подготовим данные табличных частей
	СтрокаВыборкиПоляСодержания    = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("КорректировкаРеализации");
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.НомерСтроки                                             КАК НомерСтроки,
	|	КорректировкаРеализации.Номенклатура.Код                                        КАК КодТовара,
	|	КорректировкаРеализации.Номенклатура.Артикул		                            КАК Артикул,
	|	КорректировкаРеализации.Номенклатура.НаименованиеПолное                         КАК Наименование,
	|	КорректировкаРеализации.Номенклатура.НаименованиеПолное                         КАК НаименованиеНоменклатуры,
	|	КорректировкаРеализации.Номенклатура                                            КАК Номенклатура,
	|	КорректировкаРеализации.Сумма * &Курс / &Кратность                              КАК Сумма,
	|	КорректировкаРеализации.СуммаДоИзменения * &Курс / &Кратность                   КАК СуммаДоКорректировки,
	|	КорректировкаРеализации.Цена *&Курс / &Кратность                                КАК Цена,
	|	КорректировкаРеализации.ЦенаДоИзменения *&Курс / &Кратность                     КАК ЦенаДоКорректировки,
	|	ПРЕДСТАВЛЕНИЕ(КорректировкаРеализации.ХарактеристикаНоменклатуры)               КАК НаименованиеХарактеристики,
	|	КорректировкаРеализации.ХарактеристикаНоменклатуры                              КАК Характеристика,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения                    КАК БазоваяЕдиница,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.Код                КАК БазоваяЕдиницаКод,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.Наименование       КАК БазоваяЕдиницаНаименование,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	КорректировкаРеализации.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК ЕдиницаИзмерения,
	|	КорректировкаРеализации.ЕдиницаИзмерения.ЕдиницаПоКлассификатору                КАК Упаковка,
	|	КорректировкаРеализации.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код            КАК УпаковкаКод,
	|	КорректировкаРеализации.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Наименование   КАК УпаковкаНаименование,
	|	КорректировкаРеализации.Коэффициент                                             КАК Коэффициент,
	|	КорректировкаРеализации.СтавкаНДС                                               КАК СтавкаНДС,
	|	КорректировкаРеализации.СуммаНДС * &Курс / &Кратность                           КАК СуммаНДС,
	|	КорректировкаРеализации.СуммаНДСДоИзменения * &Курс / &Кратность                КАК СуммаНДСДоКорректировки,
	|	0                                                                               КАК СуммаСкидки,
	|	КорректировкаРеализации.ЕдиницаИзмеренияМест.Представление                      КАК ВидУпаковки,
	|	КорректировкаРеализации.КоличествоМест                                          КАК КоличествоМест,
	|	КорректировкаРеализации.ЕдиницаИзмеренияМест.Коэффициент 
	|		/ КорректировкаРеализации.Коэффициент                                       КАК КоличествоВОдномМесте,
	|	КорректировкаРеализации.Количество                                              КАК МассаНетто,
	|	КорректировкаРеализации.КоличествоДоИзменения                                   КАК МассаНеттоДоКорректировки,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.КоличествоМест > 0 
	|		ТОГДА КорректировкаРеализации.КоличествоМест * КорректировкаРеализации.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ КорректировкаРеализации.Количество * КорректировкаРеализации.ЕдиницаИзмерения.Вес
	|	КОНЕЦ                                                                           КАК МассаБрутто,
	|   КорректировкаРеализации.ЗаказПокупателя                                         КАК ДокументОснование
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализации
	|
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	КорректировкаРеализации.НомерСтроки,
	|	КорректировкаРеализации.Номенклатура.Код,
	|	КорректировкаРеализации.Номенклатура.Артикул,
	|	"+СтрокаВыборкиПоляСодержания+",
	|	"+СтрокаВыборкиПоляСодержания+",
	|	КорректировкаРеализации.Номенклатура,
	|	КорректировкаРеализации.Сумма * &Курс / &Кратность,
	|	КорректировкаРеализации.СуммаДоИзменения * &Курс / &Кратность,
	|	КорректировкаРеализации.Цена * &Курс / &Кратность,
	|	КорректировкаРеализации.ЦенаДоИзменения * &Курс / &Кратность,
	|	"""",
	|	Неопределено,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.МеждународноеСокращение,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	КорректировкаРеализации.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	1,
	|	КорректировкаРеализации.СтавкаНДС,
	|	КорректировкаРеализации.СуммаНДС * &Курс / &Кратность,
	|	КорректировкаРеализации.СуммаНДСДоИзменения * &Курс / &Кратность,
	|	0,
	|	Неопределено,
	|	0,
	|	0,
	|	КорректировкаРеализации.Количество,
	|	КорректировкаРеализации.КоличествоДоИзменения,
	|	0,
	|   КорректировкаРеализации.ЗаказПокупателя
	|	
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализации
	|	
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Курс",       ЗаполнениеДокументов.КурсДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Кратность",  ЗаполнениеДокументов.КратностьДокумента(СсылкаНаОбъект, ВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Ссылка",     СсылкаНаОбъект);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДоКорректировки", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС",   Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДоКорректировки",   Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18, 2)));
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		
		СуммаСНДС   = Окр((СтрокаТаблицы.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС)), 2);
		СуммаНДС    = Окр(СтрокаТаблицы.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		
		СуммаСНДСДоКорректировки   = Окр((СтрокаТаблицы.СуммаДоКорректировки + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДСДоКорректировки)), 2);
		СуммаНДСДоКорректировки    = Окр(СтрокаТаблицы.СуммаНДСДоКорректировки, 2);
		СуммаБезНДСДоКорректировки = СуммаСНДСДоКорректировки - СуммаНДСДоКорректировки;
		
		СтрокаТаблицы.СуммаНДС    = СуммаНДС;
		СтрокаТаблицы.СуммаБезНДС = СуммаБезНДС;
		СтрокаТаблицы.СуммаСНДС   = СуммаСНДС;
		
		СтрокаТаблицы.СуммаНДСДоКорректировки    = СуммаНДСДоКорректировки;
		СтрокаТаблицы.СуммаБезНДСДоКорректировки = СуммаБезНДСДоКорректировки;
		СтрокаТаблицы.СуммаСНДСДоКорректировки   = СуммаСНДСДоКорректировки;
		
		Если Шапка.СуммаВключаетНДС Тогда
			СтрокаТаблицы.Цена = ?(СтрокаТаблицы.МассаНетто = 0, 
				0, Окр(СуммаБезНДС / СтрокаТаблицы.МассаНетто, 2));
			СтрокаТаблицы.ЦенаДоКорректировки = ?(СтрокаТаблицы.МассаНеттоДоКорректировки = 0, 
				0, Окр(СуммаБезНДСДоКорректировки / СтрокаТаблицы.МассаНеттоДоКорректировки, 2));
		Иначе
			СтрокаТаблицы.Цена = Окр(СтрокаТаблицы.Цена, 2);
			СтрокаТаблицы.ЦенаДоКорректировки = Окр(СтрокаТаблицы.ЦенаДоКорректировки, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	
	Возврат ДанныеДокумента;

КонецФункции

// Процедура добавляет новую строку в таблицы данных структуры параметров
//
Процедура ДобавитьСтрокуТаблицуДанных(ТаблицаДанных, ДанныеСтроки, СтруктураПараметров, ИмяЭлементаВладельцаДопДанных, НомерСтроки)
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	
	НоваяСтрока.НомерСтроки = НомерСтроки;
	
	// Сформируем доп. параметры
	СтруктураДопДанных = Новый Структура;
	
	ИДТовара = ДанныеСтроки.Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики = ?(ЗначениеЗаполнено(ДанныеСтроки.Характеристика), ДанныеСтроки.Характеристика.УникальныйИдентификатор(), "");
	ИДУпаковки = "";
	СтруктураДопДанных.Вставить("ИД", Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки));
	Если ЗначениеЗаполнено(ДанныеСтроки.Характеристика) Тогда
		Наименование = ДанныеСтроки.НаименованиеНоменклатуры + ?(ЗначениеЗаполнено(ДанныеСтроки.Характеристика), " ("+ДанныеСтроки.Характеристика+")", "");
		СтруктураДопДанных.Вставить("Наименование", Наименование);
		СтруктураДопДанных.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	КонецЕсли;
	
	// Из-за особенностей в схеме ФНС некоторые ставки НДС необходимо передавать в доп. параметрах.
	Если ТаблицаДанных.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
		// В ТОРГ12 не предусмотрена передача 
		// - "дробных" ставок НДС
		// - ставки "Без НДС"
		
		СоответствиеСтавокНДС = Новый Соответствие;
		СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
		СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.БезНДС,    Перечисления.СтавкиНДС.ПустаяСсылка());
		
		Если СоответствиеСтавокНДС[НоваяСтрока.СтавкаНДС] <> Неопределено Тогда
			// Ставку НДС передадим в структуре доп. параметров
			СтруктураДопДанных.Вставить("СтавкаНДС", НоваяСтрока.СтавкаНДС);
			// В схему передадим соответствующую ставку НДС "числом"
			НоваяСтрока.СтавкаНДС = СоответствиеСтавокНДС[НоваяСтрока.СтавкаНДС];
			
		КонецЕсли;
		
	Иначе
		// В Акте не предусмотрена передача ставки НДС
		СтруктураДопДанных.Вставить("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
	КонецЕсли;
	
	Если ИмяЭлементаВладельцаДопДанных = "Услуги" Тогда
		// Для Акта таблица услуг "вкладывается" в строку таблицы описания услуг, 
		// поэтому номер строки для доп. данных определим как составной
		НомерСтрокиДопДанных = "1." + НомерСтроки;
	Иначе
		НомерСтрокиДопДанных = НомерСтроки;
	КонецЕсли;
	
	ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, ИмяЭлементаВладельцаДопДанных, Истина, НомерСтрокиДопДанных);
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы(ТаблицаТоваров, ВидЭД)
	
	Структура = Новый Структура;
	
	Структура.Вставить("КоличествоМест", ТаблицаТоваров.Итог("КоличествоМест"));
	Структура.Вставить("МассаБрутто",    ТаблицаТоваров.Итог("МассаБрутто"));
	Структура.Вставить("МассаНетто",     ТаблицаТоваров.Итог("МассаНетто"));
	Структура.Вставить("СуммаБезНДС",    ТаблицаТоваров.Итог("СуммаБезНДС"));
	Структура.Вставить("СуммаНДС",       ТаблицаТоваров.Итог("СуммаНДС"));
	Структура.Вставить("СуммаСНДС",      ТаблицаТоваров.Итог("СуммаБезНДС") + ТаблицаТоваров.Итог("СуммаНДС"));
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", ТаблицаТоваров.Количество());
	
	Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		Структура.Вставить("МассаНеттоДоКорректировки",  ТаблицаТоваров.Итог("МассаНеттоДоКорректировки"));
		Структура.Вставить("СуммаБезНДСДоКорректировки", ТаблицаТоваров.Итог("СуммаБезНДСДоКорректировки"));
		Структура.Вставить("СуммаНДСДоКорректировки",    ТаблицаТоваров.Итог("СуммаНДСДоКорректировки"));
		Структура.Вставить("СуммаСНДСДоКорректировки",   ТаблицаТоваров.Итог("СуммаБезНДСДоКорректировки") + ТаблицаТоваров.Итог("СуммаНДСДоКорректировки"));
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьРеквизитыУчастниковТОРГ12(ДанныеПечати, СтруктураПараметров)
	
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Организация, ДанныеПечати.БанковскийСчет);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Покупатель);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Грузополучатель);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Грузоотправитель);
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Поставщик, СведенияОПоставщике);
	Если ДанныеПечати.Организация <> ДанныеПечати.Грузоотправитель Тогда
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, СведенияОГрузоотправителе, "Факт");
		СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение = ДанныеПечати.Подразделение;
	КонецЕсли;
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Плательщик,      СведенияОПокупателе);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Грузополучатель, СведенияОГрузополучателе, "Факт");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыУчастниковАкт501(ДанныеПечати, СтруктураПараметров)
	
	СведенияОИсполнителе = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Исполнитель);
	СведенияОЗаказчике   = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Заказчик);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Исполнитель, СведенияОИсполнителе);
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Заказчик, СведенияОЗаказчике);
	
КонецПроцедуры

// Заполняет ФИО и должность в структуре или в дереве
// Для дерева параметр "ВидЛица" - обязательный
Процедура ЗаполнитьФИОиДолжность(ГдеЗаполнять, ИсточникДанных, Должность = Неопределено, ВидЛица = Неопределено)
	Если ТипЗнч(ГдеЗаполнять) = Тип("Структура") Тогда
		СтруктураПриемник = ГдеЗаполнять;
		Если ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПриемник, ИсточникДанных);
		ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
			Фамилия = ""; Имя = ""; Отчество = "";
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
			СтруктураПриемник.Вставить("Фамилия", Фамилия);
			СтруктураПриемник.Вставить("Имя", Имя);
			СтруктураПриемник.Вставить("Отчество", Отчество);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Должность) Тогда
			СтруктураПриемник.Вставить("Должность", Должность);
		КонецЕсли;
		ГдеЗаполнять = СтруктураПриемник;
	Иначе
		ДеревоДанных = ГдеЗаполнять;
		Если ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
			Фамилия = ИсточникДанных.Фамилия; Имя = ИсточникДанных.Имя; Отчество = ИсточникДанных.Отчество;
		ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
			Фамилия = ""; Имя = ""; Отчество = "";
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидЛица + ".Фамилия", Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидЛица + ".Имя", Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидЛица + ".Отчество", Отчество);
		Если Должность <> Неопределено Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидЛица + ".Должность", Должность);
		КонецЕсли;
		ГдеЗаполнять = ДеревоДанных;
	КонецЕсли;
КонецПроцедуры

Функция ОтветственноеЛицоОрганизации(Период, Организация, ОтветственноеЛицо)
	
	СтруктураФИО = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
	Результат = Новый Структура("ФИО, Должность, СтруктураФИО", "", "", СтруктураФИО);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОтветственныеЛицаОрганизации.ФизическоеЛицо) КАК ФИО,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОтветственныеЛицаОрганизации.Должность) КАК Должность,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
	|			&Период,
	|			СтруктурнаяЕдиница = &Организация
	|				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Период, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ОтветственныеЛицаОрганизации.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
	Запрос.УстановитьПараметр("Период",            Период);
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗаполнитьЗначенияСвойств(Результат.СтруктураФИО, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет сведения об участнике обмена в структуре или в дереве
// Для дерева параметр "ВидУчастника" - обязательный
Процедура ЗаполнитьСведенияУчастникаОбмена(ГдеЗаполнять, СведенияОбУчастнике, ВидАдреса = "Юр", ВидУчастника = Неопределено, ТипАдреса = "")
	
	Если ТипЗнч(ГдеЗаполнять) = Тип("Структура") Тогда
		СтруктураУчастника = ГдеЗаполнять;
		СтруктураУчастника.Вставить("КодОКПО",                 СведенияОбУчастнике.КодПоОКПО);
		СтруктураУчастника.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		СтруктураУчастника.Вставить("ИНН",                     СведенияОбУчастнике.ИНН);
		СтруктураУчастника.Вставить("КПП",                     СведенияОбУчастнике.КПП);
		СтруктураУчастника.Вставить("ЭтоФизЛицо", СведенияОбУчастнике.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо);
		Если СведенияОбУчастнике.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ЗаполнитьФИОиДолжность(СтруктураУчастника, СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
		
		// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
		// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
		// элемента списка брать данные при заполнении ЭД.
		АдресУчастника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьАдресСтруктурой(СведенияОбУчастнике, "Ссылка", ВидАдреса);
		ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		ЗаполнитьАдресВСпискеТиповАдресов(СтруктураУчастника.Адрес, АдресУчастника, ТипАдреса);
		
		СтруктураУчастника.Вставить("Телефон",                 СведенияОбУчастнике.Телефоны);
		СтруктураУчастника.Вставить("Факс");
		
		СтруктураБанковскийСчет = СтруктураУчастника.БанковскийСчет;
		СтруктураБанковскийСчет.Вставить("БИК",         СведенияОбУчастнике.БИК);
		СтруктураБанковскийСчет.Вставить("НаимБанк",    СведенияОбУчастнике.Банк.Наименование);
		СтруктураБанковскийСчет.Вставить("НомерСчета ", СведенияОбУчастнике.НомерСчета);
		ГдеЗаполнять = СтруктураУчастника;
	Иначе
		ДеревоДанных = ГдеЗаполнять;
		Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
										СведенияОбУчастнике.ИНН);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
										СведенияОбУчастнике.КПП);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
										СведенияОбУчастнике.ПолноеНаименование);
		Иначе
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
										СведенияОбУчастнике.ИНН);
			Фамилия = ""; Имя = ""; Отчество = "";
			Если СведенияОбУчастнике.Свойство("ФИО") Тогда
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ФИО, Фамилия, Имя, Отчество);
			Иначе
				ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
			КонецЕсли;
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
										Фамилия);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ФЛ.Имя",
										Имя);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
										Отчество);
			СтрокаРеквизита = ДеревоДанных.Строки.Найти(ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование", "ПолныйПуть", Истина);
			Если СтрокаРеквизита <> Неопределено Тогда
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
											ДеревоДанных,
											ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование",
											СведенияОбУчастнике.ПолноеНаименование);
			КонецЕсли;
		КонецЕсли;
	
		Если СведенияОбУчастнике.Свойство("Ссылка") Тогда
			АдресУчастника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьАдресСтруктурой(СведенияОбУчастнике, "Ссылка", ВидАдреса);
			Если ТипАдреса = "" Тогда
				ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
			КонецЕсли;
		Иначе
			Если ТипАдреса = "Произвольный" Тогда
				Если ВидАдреса = "Юр" Тогда
					АдресУчастника = Новый Структура("АдресСтрокой", СведенияОбУчастнике.ЮридическийАдрес);
				ИначеЕсли ВидАдреса = "Факт" Тогда
					АдресУчастника = Новый Структура("АдресСтрокой", СведенияОбУчастнике.ФактическийАдрес);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
		
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника+".Контакт") Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ВидУчастника + ".Контакт.Телефон", СведенияОбУчастнике.Телефоны);
		КонецЕсли;
		
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника+".БанковскийСчет") Тогда
			НомерСчета = "";
			Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
				Банк = "";
				БИК = "";
				ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета);
				Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
					ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
											ВидУчастника + ".БанковскийСчет.НаимБанк", Банк.Наименование);
				КонецЕсли;
				Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
					ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
											ВидУчастника + ".БанковскийСчет.БИК", БИК);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ГдеЗаполнять = ДеревоДанных;
	КонецЕсли;
КонецПроцедуры

// Заполняет сведения о грузоотправителе или грузополучателе в дереве ЭД "Счет-фактура"
// ВидУчастника принимает одно из двух значений: "Грузоотправитель" или "Грузополучатель"
// 
Процедура ЗаполнитьСведенияУчастникаСФ(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ТипАдреса = "")
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".Наименование.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		Фамилия = ""; Имя = ""; Отчество = "";
		Если СведенияОбУчастнике.Свойство("ФИО") Тогда
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ФИО, Фамилия, Имя, Отчество);
		Иначе
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Наименование.ФИОИП.Фамилия",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Наименование.ФИОИП.Имя",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Наименование.ФИОИП.Отчество",
									Отчество);
	КонецЕсли;
	
	Если СведенияОбУчастнике.Свойство("Ссылка") Тогда
		АдресУчастника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьАдресСтруктурой(СведенияОбУчастнике, "Ссылка", ВидАдреса);
		Если ТипАдреса = "" Тогда
			ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		КонецЕсли;
	Иначе
		Если ТипАдреса = "Произвольный" Тогда
			Если ВидАдреса = "Юр" Тогда
				АдресУчастника = Новый Структура("АдрТекст", СведенияОбУчастнике.ЮридическийАдрес);
			ИначеЕсли ВидАдреса = "Факт" Тогда
				АдресУчастника = Новый Структура("АдрТекст", СведенияОбУчастнике.ФактическийАдрес);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СписокТиповАдресов - СписокЗначений - Представление элемента - описание типа (Структурированный,
//    Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
//    элемента списка брать данные при заполнении ЭД.
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//
Процедура ЗаполнитьАдресВСпискеТиповАдресов(СписокТиповАдресов, АдресУчастника, ТипАдреса = "Структурированный")
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СписокТиповАдресов.ЗаполнитьПометки(Ложь);
	ВыбранныйТипАдреса = Неопределено;
	Для Каждого Элемент Из СписокТиповАдресов Цикл
		Если Элемент.Представление = ТипАдреса Тогда
			ВыбранныйТипАдреса = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранныйТипАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВыбранныйТипАдреса.Значение, АдресУчастника);
		ВыбранныйТипАдреса.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника)
	
	Если ТипАдреса = "Произвольный" Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдресСтрокой);
	Иначе
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдресСтрокой");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Кварт");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			Если Элемент.Ключ = "КодСтраны" Тогда
				ИмяРеквизита = "КодСтр";
			ИначеЕсли Элемент.Ключ = "АдресСтрокой" Тогда
				ИмяРеквизита = "АдрТекст";
			Иначе
				ИмяРеквизита = Элемент.Ключ;
			КонецЕсли;
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + ИмяРеквизита,
									Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБанковскийСчет(ДеревоДокумента, СсылкаНаБанковскийСчет)
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаБанковскийСчет, "НомерСчета,Банк,БанкДляРасчетов");
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСчета.Банк, "Код,КоррСчет,Наименование");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, 
		"РасчетныйСчет.НомерСчета", РеквизитыСчета.НомерСчета);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, 
		"РасчетныйСчет.Банк.БИК", РеквизитыБанка.Код);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, 
		"РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, 
		"РасчетныйСчет.Банк.Наименование", РеквизитыБанка.Наименование);
	Если ЗначениеЗаполнено(РеквизитыСчета.БанкДляРасчетов) Тогда
		РеквизитыБанкаКорреспондента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСчета.БанкДляРасчетов, "Код,КоррСчет,Наименование");
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", 
			РеквизитыБанкаКорреспондента.Код);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", 
			РеквизитыБанкаКорреспондента.КоррСчет);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", 
			РеквизитыБанкаКорреспондента.Наименование);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в дереве документа реквизиты:
// "НомерТоварнойНакладной", "ДатаТоварнойНакладной" - ТОРГ-12 (Титул продавца)
// "НомерАкта", "ДатаАкта" - Акт (Титул исполнителя)
// "Номер", "Дата" - Акт на передачу прав
// и "НомерИсправления", "ДатаИсправления" при необходимости
//
Процедура ЗаполнитьДатуИНомер(ДеревоДанных, РеквизитыШапки, СсылкаНаОбъект, ИмяРеквизитаНомер, ИмяРеквизитаДата)
	
	Если РеквизитыШапки.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		Если Не ЗначениеЗаполнено(РеквизитыШапки.ИсправляемыйДокументРеализации) Тогда
			РеквизитыШапки.ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(СсылкаНаОбъект);
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаНомер, 
			ПолучитьПечатныйНомерДокумента(РеквизитыШапки.ИсправляемыйДокументРеализации));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаДата,  
			РеквизитыШапки.ИсправляемыйДокументРеализации.Дата);
		// "НомерИсправления" и "ДатаИсправления"
		СтруктураОтбораСчетаФактуры = Новый Структура;
		СписокВидовСчетовФактур = Новый СписокЗначений;
		СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		СтруктураОтбораСчетаФактуры.Вставить("ВидСчетаФактуры", СписокВидовСчетовФактур);
		СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
		
		СФ = УчетНДС.НайтиПодчиненныйСчетФактуру(СсылкаНаОбъект, "СчетФактураВыданный");
		Если ЗначениеЗаполнено(СФ) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
				Строка(СФ.НомерИсправления));
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
				РеквизитыШапки.ДатаДокумента);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаНомер,
			ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ИмяРеквизитаДата,
			РеквизитыШапки.ДатаДокумента);
	КонецЕсли;

КонецПроцедуры

Функция ТипСтавкиНДС(Ставка)
	Возврат "процент";
КонецФункции

Функция ПредставлениеСтавкиНДС(Ставка)
	
	// Подготовим представление ставки в соответсвии с форматом ФНС
	ПредставлениеСтавки = Строка(Ставка);
	
	Если Ставка = Перечисления.СтавкиНДС.БезНДС Тогда
		ПредставлениеСтавки = СтрЗаменить(ПредставлениеСтавки, "Б", "б");
	Иначе
		ПредставлениеСтавки = СтрЗаменить(ПредставлениеСтавки, "%", "");
		ПредставлениеСтавки = СтрЗаменить(ПредставлениеСтавки, " ", "");
	КонецЕсли;
	
	Возврат ПредставлениеСтавки;
	
КонецФункции

// Вызывается из процедур 
// "ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево" и "ЭлектронныеДокументыВнутренний.ПроверитьЗаполнениеОбязательныхПолейТЗ".
// Здесь можно выполнять различные проверки и дополнительную обработку таблицы.
//
Процедура ПроверитьОбработатьТаблицу(ТаблицаДанных, ДеревоДанных = Неопределено, ТекстОшибки = "") Экспорт
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиПроверки = "";
	
    ПроверитьЕдиницыИзмерения(ТаблицаДанных, ТекстОшибкиПроверки);
	Если ДеревоДанных = Неопределено Тогда
		ПроверитьНулевыеЗначения(ТаблицаДанных, ТекстОшибкиПроверки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибкиПроверки) Тогда
		Если ДеревоДанных <> Неопределено Тогда
			СтрокаСОшибкой = ДеревоДанных.Строки.Добавить();
			СтрокаСОшибкой.ПолныйПуть = "ТекстОшибки";
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТекстОшибки", ТекстОшибкиПроверки);
		Иначе
			ТекстОшибки = ТекстОшибки + ТекстОшибкиПроверки + Символы.ПС;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Теперь 4-значные коды передавать можно, но у 3-значых нужно по-прежнему обрезать пробелы
Процедура ПроверитьЕдиницыИзмерения(ТаблицаДанных, ТекстОшибки)
	
	ТекстОшибкиПроверки = "";
	
	КолонкиЕдиницИзмеренияСтрокой = ВРег(",БазоваяЕдиницаКод,ЕдиницаИзмеренияКодДо,ЕдиницаИзмеренияКод,УпаковкаКод,ЕдиницаИзмеренияКодПоОКЕИ,");
	
	ПроверяемыеКолонки = Новый Массив;
	Модификатор = "1";
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		Если Найти(КолонкиЕдиницИзмеренияСтрокой, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			Если ТипЗнч(ТаблицаДанных[0][Колонка.Имя]) = Тип("Строка") Тогда
				ПроверяемыеКолонки.Добавить(Колонка.Имя);
				
				КС = Новый КвалификаторыСтроки(Колонка.ТипЗначения.КвалификаторыСтроки.Длина, ДопустимаяДлина.Переменная);
				ОТ = Новый ОписаниеТипов(Колонка.ТипЗначения, , , , КС);
				ТаблицаДанных.Колонки.Добавить(Колонка.Имя+Модификатор, ОТ, Колонка.Заголовок, Колонка.Ширина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверяемыеКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяКолонки Из ПроверяемыеКолонки Цикл
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			СтрокаДанных[ИмяКолонки+Модификатор] = СокрЛП(СтрокаДанных[ИмяКолонки]);
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОшибкиПроверки) Тогда
			Прервать;
		КонецЕсли;
		ТаблицаДанных.Колонки.Удалить(ИмяКолонки);
		ТаблицаДанных.Колонки[ИмяКолонки+Модификатор].Имя = ИмяКолонки;
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстОшибкиПроверки) Тогда
		ТекстОшибки = ТекстОшибки + ТекстОшибкиПроверки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНулевыеЗначения(ТаблицаДанных, ТекстОшибки)
	
	ТекстОшибкиПроверки = "";
	
	КолонкиЧисловыхПоказателей = ВРег(",Цена,Сумма,СуммаБезНДС,СуммаСНДС,");
	
	ПроверяемыеКолонки = Новый СписокЗначений;
	Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
		Если Найти(КолонкиЧисловыхПоказателей, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			ПроверяемыеКолонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	ПроверяемыеКолонки.СортироватьПоЗначению(НаправлениеСортировки.Убыв);

	Если ПроверяемыеКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяКолонки Из ПроверяемыеКолонки Цикл
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			Если СтрокаДанных[ИмяКолонки.Значение] = 0 Тогда
				ТекстОшибкиПроверки = ТекстОшибкиПроверки + "В строке №"+Строка(ТаблицаДанных.Индекс(СтрокаДанных)+1)+
					" не заполнено значение """+ИмяКолонки.Значение+""""+Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОшибкиПроверки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстОшибкиПроверки) Тогда
		ТекстОшибки = ТекстОшибки + ТекстОшибкиПроверки;
	КонецЕсли;

КонецПроцедуры