#Если Клиент Тогда

// СписокЗначений, имена обязательных отборов
Перем мСписокОтборов Экспорт;

// Число, количество строк выведенных в заголовке отчета
Перем мКоличествоВыведенныхСтрокЗаголовка;

// Настройка периода
Перем НП Экспорт;

// Функция формирует строку представления периода отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьСтрокуПериода()

	ОписаниеПериода = "";
	
	Если ДатаОтчета = '00010101000000' Тогда
		ОписаниеПериода = "Дата анализа потребностей: " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + ", ";
	Иначе
		ОписаниеПериода = "Дата анализа потребностей: " + Формат(ДатаОтчета, "ДФ=dd.MM.yyyy") + ", ";
	КонецЕсли; 
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	ОписаниеПериода = ОписаниеПериода + "Интервал анализа потребностей: ";
	Если Отбор.ДатаПотребности.Использование Тогда
		Если Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.Равно Тогда
			ОписаниеПериода = ОписаниеПериода + "= " + Формат(Отбор.ДатаПотребности.Значение, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.НеРавно Тогда
			ОписаниеПериода = ОписаниеПериода + "<> " + Формат(Отбор.ДатаПотребности.Значение, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.ВСписке Тогда
			ОписаниеПериода = ОписаниеПериода + "в списке " + Строка(Отбор.ДатаПотребности.Значение);
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.НеВСписке Тогда
			ОписаниеПериода = ОписаниеПериода + "не в списке " + Строка(Отбор.ДатаПотребности.Значение);
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.Больше Тогда
			ОписаниеПериода = ОписаниеПериода + "> " + Формат(Отбор.ДатаПотребности.Значение, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			ОписаниеПериода = ОписаниеПериода + ">= " + Формат(Отбор.ДатаПотребности.Значение, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.Меньше Тогда
			ОписаниеПериода = ОписаниеПериода + "< " + Формат(Отбор.ДатаПотребности.Значение, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			ОписаниеПериода = ОписаниеПериода + "<= " + Формат(Отбор.ДатаПотребности.Значение, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
		ИначеЕсли Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.Интервал
			  ИЛИ Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы
			  ИЛИ Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало
			  ИЛИ Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
			Если Отбор.ДатаПотребности.ЗначениеС > Отбор.ДатаПотребности.ЗначениеПо И ЗначениеЗаполнено(Отбор.ДатаПотребности.ЗначениеПо) Тогда
				ОписаниеПериода = ОписаниеПериода + "Неправильно задан период анализа!";
			Иначе
				ОписаниеПериода = ОписаниеПериода + "c " + Формат(Отбор.ДатаПотребности.ЗначениеС, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") + " по " + Формат(Отбор.ДатаПотребности.ЗначениеПо, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
			КонецЕсли; 
		КонецЕсли;
	Иначе
		ОписаниеПериода = ОписаниеПериода + "не установлен";
	КонецЕсли;
	
	Возврат ОписаниеПериода;
	
КонецФункции

// Процедура меняет видимость заголовка поля табличного документа
// 
// Параметры
//  Таб - табличный документ
//
// Возвращаемые значения
//  НЕТ
Процедура ИзменитьВидимостьЗаголовка(Таб) Экспорт

	ОбластьВидимости = Таб.Область(1,,мКоличествоВыведенныхСтрокЗаголовка,);
	ОбластьВидимости.Видимость = ПоказыватьЗаголовок;

КонецПроцедуры

// Проверяет на удовлетворение условиям отбора строку таблицы портребностей
//
// Параметры
//  СтрокаПотребности - строка таблицы значений ТаблицаПотребности
//
// Возвращаемое значение:
//   Булево - удовлетворяет или нет
//
Функция УдовлетворяетОтбору(СтрокаПотребности)

	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ЭлементОтбора.Имя = "Номенклатура" ИЛИ ЭлементОтбора.Имя = "ДатаПотребности" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЭлементОтбора.Использование ИЛИ ПустаяСтрока(ЭлементОтбора.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПроверитьЗначениеОтбора(ЭлементОтбора, СтрокаПотребности[ЭлементОтбора.ПутьКДанным]) Тогда
			Возврат Ложь;
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат Истина;
	
КонецФункции

// Функция проверяет, соответствует ли значение строки, условиям отбора
//
// Параметры
//  ЭлементОтбора - ЭлементОтбора, со значениями и видами сравнения отбора
//  ЗначениеОтбора - Значение, которое надо проверить на соответствие параметрам отбора
//
// Возвращаемое значение:
//   Булево
//
Функция ПроверитьЗначениеОтбора(ЭлементОтбора, ЗначениеОтбора)

	ВидСравненияОтбора = ЭлементОтбора.ВидСравнения;
	
	Если ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат (ЗначениеОтбора = ЭлементОтбора.Значение);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат (ЗначениеОтбора <> ЭлементОтбора.Значение);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат (ЗначениеОтбора > ЭлементОтбора.Значение);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат (ЗначениеОтбора >= ЭлементОтбора.Значение);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат (ЗначениеОтбора < ЭлементОтбора.Значение);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат (ЗначениеОтбора <= ЭлементОтбора.Значение);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		НайденныйЭлемент = ЭлементОтбора.Значение.НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент <> Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		НайденныйЭлемент = ЭлементОтбора.Значение.НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент = Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Интервал Тогда
		Возврат ((ЗначениеОтбора > ЭлементОтбора.ЗначениеС) И (ЗначениеОтбора < ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Возврат ((ЗначениеОтбора >= ЭлементОтбора.ЗначениеС) И (ЗначениеОтбора <= ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяНачало Тогда
		Возврат ((ЗначениеОтбора >= ЭлементОтбора.ЗначениеС) И (ЗначениеОтбора < ЭлементОтбора.ЗначениеПо));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Возврат ((ЗначениеОтбора > ЭлементОтбора.ЗначениеС) И (ЗначениеОтбора <= ЭлементОтбора.ЗначениеПо));
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

// Процедура удалает строки таблицы потребности, которые не удовлетворяют отбору
//
// Параметры
//  ТаблицаПотребности - таблица значений
//
// Возвращаемое значение
//  НЕТ
//
Процедура УстановитьОтборы(ТаблицаПотребности)

	Индекс = 0;
	Пока Истина Цикл
	
		Если Индекс > ТаблицаПотребности.Количество() - 1 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаПотребности = ТаблицаПотребности[Индекс];
		
		Если НЕ УдовлетворяетОтбору(СтрокаПотребности) Тогда
			ТаблицаПотребности.Удалить(СтрокаПотребности);
			Продолжить;
		КонецЕсли; 
		
		Индекс = Индекс + 1;
	
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет данными поле табличного документа
//
// Парамтеры
//  Таб - поле табличного документа, в которое выводятся данные отчета
//
// Возвращаемое значение
//  НЕТ
//
Процедура СформироватьОтчет(Таб) Экспорт
	
	Перем ВыбВидСравнения;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура                                КАК Номенклатура,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры                  КАК ХарактеристикаНоменклатуры,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности                             КАК ДатаПотребности,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ                                       КАК ЗаказПокупателя,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Проект                                      КАК Проект,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ.Контрагент                            КАК Покупатель,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура.ОтветственныйМенеджерЗаПокупки КАК ОтветственныйЗаПокупки,
	|	ВЫБОР КОГДА КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара = &Тара ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара,
	|	Сумма(КалендарныеПотребностиВНоменклатуреСрезПоследних.Количество)          КАК КоличествоПлана
	|ИЗ
	|	РегистрСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(&ДатаОтчета) КАК КалендарныеПотребностиВНоменклатуреСрезПоследних
	|
	|ГДЕ
	|";
	
	Если Отбор.ДатаПотребности.Использование Тогда
		Запрос.Текст = Запрос.Текст + УправлениеОтчетами.ПолучитьСтрокуОтбора(Отбор.ДатаПотребности.ВидСравнения, "&ДатаПотребности", "КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности", "&ДатаПотребностиНач", "&ДатаПотребностиКон", Отбор.ДатаПотребности.Значение, Отбор.ДатаПотребности.ЗначениеС, Отбор.ДатаПотребности.ЗначениеПо);
		Запрос.УстановитьПараметр("ДатаПотребности"   , Отбор.ДатаПотребности.Значение);
		Запрос.УстановитьПараметр("ДатаПотребностиНач", НачалоДня(Отбор.ДатаПотребности.ЗначениеС));
		Запрос.УстановитьПараметр("ДатаПотребностиКон", КонецДня(Отбор.ДатаПотребности.ЗначениеПо));
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности >= &ДатаНачалаПотребностей
		|";
		Запрос.УстановитьПараметр("ДатаНачалаПотребностей", '00010101000000');
	КонецЕсли;
	
	Если Отбор.Номенклатура.Использование Тогда
		Запрос.Текст = Запрос.Текст + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(Отбор.Номенклатура.ВидСравнения, "&ОтборНоменклатура", "КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура", "&ОтборНоменклатураС", "&ОтборНоменклатураПо");
		Запрос.УстановитьПараметр("ОтборНоменклатура"  , Отбор.Номенклатура.Значение);
		Запрос.УстановитьПараметр("ОтборНоменклатураС" , Отбор.Номенклатура.ЗначениеС);
		Запрос.УстановитьПараметр("ОтборНоменклатураПо", Отбор.Номенклатура.ЗначениеПо);
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Проект,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара
	|";
	
	Запрос.УстановитьПараметр("Тара", Перечисления.ТоварТара.Тара);
	Запрос.УстановитьПараметр("ДатаОтчета", ?(ДатаОтчета = '00010101000000', ТекущаяДата(), КонецДня(ДатаОтчета)));
	
	ТаблицаПотребности = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаПотребности.Количество() > 0 Тогда
		
		ТаблицаРезультатаЗапроса = Неопределено;
		
		ШаблонТемповаяТаблицаПотребности = ТаблицаПотребности.Скопировать();
		ШаблонТемповаяТаблицаПотребности.Очистить();
		
		// Разделим запрос на таблицы по 500 строк, иначе при большом кол-ве номенклатуры
		// и использовании сервера 1С:Предприятия может все повалиться
		ИндексИсходнойТаблицы = 0;
		Пока ИндексИсходнойТаблицы <= ТаблицаПотребности.Количество() - 1 Цикл
		
			ТемповаяТаблицаПотребности = ШаблонТемповаяТаблицаПотребности.Скопировать();
			
			Для а = ИндексИсходнойТаблицы По (ИндексИсходнойТаблицы + 500) Цикл
				Если а > ТаблицаПотребности.Количество() - 1 Тогда
					Прервать;
				КонецЕсли;
				НоваяСтрока = ТемповаяТаблицаПотребности.Добавить();
				Для каждого Колонка Из ТаблицаПотребности.Колонки Цикл
					НоваяСтрока[Колонка.Имя] = ТаблицаПотребности[а][Колонка.Имя];
				КонецЦикла;
			КонецЦикла;
		
			ИндексИсходнойТаблицы = а;
			
			Если ТемповаяТаблицаПотребности.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			// Остатки по заказам поставщикам
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ДатаОтчета", ?(ДатаОтчета = '00010101000000', ДатаОтчета, КонецДня(ДатаОтчета)));
			Запрос.УстановитьПараметр("Тара"      , Перечисления.ТоварТара.Тара);
			Запрос.УстановитьПараметр("ТараПартия", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента                      КАК ДоговорКонтрагентаЗаказа,
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДоговораЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата                       КАК ДатаЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер                      КАК НомерЗаказа,
			|	ЗаказыПоставщикамОстатки.Номенклатура                               КАК Номенклатура,
			|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры                 КАК ХарактеристикаНоменклатуры,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент                 КАК Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления            КАК ДатаПоступленияЗаказа,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                            КАК ЗаказПоставщику,
			|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара,
			|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ КАК ЗаказПокупателя,
			|	Сумма(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоОстатокЗаказа,
			|	Сумма(ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателей.КоличествоОстаток КОНЕЦ) КАК Количество,
			|	Сумма(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток)          КАК СуммаВзаиморасчетовЗаказа
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОтчета) КАК ЗаказыПоставщикамОстатки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОтчета) КАК РазмещениеЗаказовПокупателей
			|ПО
			|	РазмещениеЗаказовПокупателей.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
			|	И
			|	РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
			|	И
			|	РазмещениеЗаказовПокупателей.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|	И
			|	((РазмещениеЗаказовПокупателей.ТоварТара = &Тара И ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия)
			|	 ИЛИ
			|	(РазмещениеЗаказовПокупателей.ТоварТара <> &Тара И ЗаказыПоставщикамОстатки.СтатусПартии <> &ТараПартия))
			|
			|ГДЕ
			|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
			|";
			
			СтрокаУсловий = "";
			
			Для каждого СтрокаТаблицы Из ТемповаяТаблицаПотребности Цикл
			
				Если НЕ ПустаяСтрока(СтрокаУсловий) Тогда
					СтрокаУсловий = СтрокаУсловий + "
					|	ИЛИ
					|";
				КонецЕсли; 
				
				СтрокаУсловий = СтрокаУсловий + "
				|	(ЗаказыПоставщикамОстатки.Номенклатура = &ВыбНоменклатура" + СокрЛП(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы)) +
				" И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = &ВыбХарактеристикаНоменклатуры" + СокрЛП(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы)) +
				" И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления <= &ВыбДата" + СокрЛП(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы)) + ")
				|";
				
				Запрос.УстановитьПараметр("ВыбНоменклатура" + СокрЛП(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы)), СтрокаТаблицы.Номенклатура);
				Запрос.УстановитьПараметр("ВыбХарактеристикаНоменклатуры" + СокрЛП(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы)), СтрокаТаблицы.ХарактеристикаНоменклатуры);
				Запрос.УстановитьПараметр("ВыбДата" + СокрЛП(ТемповаяТаблицаПотребности.Индекс(СтрокаТаблицы)), СтрокаТаблицы.ДатаПотребности);
			
			КонецЦикла;
			
			ДопСтрокаТекстаЗапроса = СтрокаУсловий;
			
			НоменклатураСпискаУсловий = ТемповаяТаблицаПотребности.ВыгрузитьКолонку("Номенклатура");
			
			ТемповаяСтрока = "";
			Если Отбор.Номенклатура.Использование Тогда
				ТемповаяСтрока = ТемповаяСтрока + УправлениеОтчетами.ПолучитьСтрокуОтбора(Отбор.Номенклатура.ВидСравнения, "&ОтборНоменклатура", "ЗаказыПоставщикамОстатки.Номенклатура", "&ОтборНоменклатураС", "&ОтборНоменклатураПо");
				Запрос.УстановитьПараметр("ОтборНоменклатура"  , Отбор.Номенклатура.Значение);
				Запрос.УстановитьПараметр("ОтборНоменклатураС" , Отбор.Номенклатура.ЗначениеС);
				Запрос.УстановитьПараметр("ОтборНоменклатураПо", Отбор.Номенклатура.ЗначениеПо);
			КонецЕсли; 
			
			Если Отбор.ДатаПотребности.Использование  И НЕ (Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.Равно И Не ЗначениеЗаполнено(Отбор.ДатаПотребности.Значение)) Тогда
				Если НЕ ПустаяСтрока(ТемповаяСтрока) Тогда
					ТемповаяСтрока = ТемповаяСтрока + " И ";
				КонецЕсли; 
				ТемповаяСтрока = ТемповаяСтрока + УправлениеОтчетами.ПолучитьСтрокуОтбора(Отбор.ДатаПотребности.ВидСравнения, "&ДатаПотребности", "ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления", "&ДатаПотребностиНач", "&ДатаПотребностиКон", Отбор.ДатаПотребности.Значение, Отбор.ДатаПотребности.ЗначениеС, Отбор.ДатаПотребности.ЗначениеПо);
				Запрос.УстановитьПараметр("ДатаПотребности"   , Отбор.ДатаПотребности.Значение);
				Запрос.УстановитьПараметр("ДатаПотребностиНач", НачалоДня(Отбор.ДатаПотребности.ЗначениеС));
				Запрос.УстановитьПараметр("ДатаПотребностиКон", КонецДня(Отбор.ДатаПотребности.ЗначениеПо));
			КонецЕсли; 
			
			Если ПустаяСтрока(СтрокаУсловий) Тогда
				Если НЕ ПустаяСтрока(ТемповаяСтрока) Тогда
					ДопСтрокаТекстаЗапроса = ДопСтрокаТекстаЗапроса + "(" + ТемповаяСтрока + ")";
				КонецЕсли; 
			Иначе
				ДопСтрокаТекстаЗапроса = ДопСтрокаТекстаЗапроса + "
				|	ИЛИ
				|";
				Если НЕ ПустаяСтрока(ТемповаяСтрока) Тогда
					ТемповаяСтрока = ТемповаяСтрока + " И ";
				КонецЕсли; 
				ТемповаяСтрока = ТемповаяСтрока + " НЕ ЗаказыПоставщикамОстатки.Номенклатура В (&НоменклатураСпискаУсловий)";
				ДопСтрокаТекстаЗапроса = ДопСтрокаТекстаЗапроса + "(" + ТемповаяСтрока + ")";
				Запрос.УстановитьПараметр("НоменклатураСпискаУсловий", НоменклатураСпискаУсловий);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ДопСтрокаТекстаЗапроса) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И
				|	(" + ДопСтрокаТекстаЗапроса + ")
				|";
			КонецЕсли; 
			
			Запрос.Текст = Запрос.Текст + "
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
			|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер,
			|	ЗаказыПоставщикамОстатки.Номенклатура,
			|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления,
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
			|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
			|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ
			|
			|";
			
			ТемповаяТаблицаНоменклатурыЗаказов = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаРезультатаЗапроса = Неопределено Тогда
				ТаблицаРезультатаЗапроса = ТемповаяТаблицаНоменклатурыЗаказов.Скопировать();
			Иначе
				Для каждого СтрокаТаблицы Из ТемповаяТаблицаНоменклатурыЗаказов Цикл
					НоваяСтрока = ТаблицаРезультатаЗапроса.Добавить();
					Для каждого Колонка Из ТемповаяТаблицаНоменклатурыЗаказов.Колонки Цикл
						НоваяСтрока[Колонка.Имя] = СтрокаТаблицы[Колонка.Имя];
					КонецЦикла; 
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ТемповаяТаблицаНоменклатурыЗаказов = Неопределено Тогда
			ТаблицаНоменклатурыЗаказов = Новый ТаблицаЗначений;
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("ДоговорКонтрагентаЗаказа"       , Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("ВалютаВзаиморасчетовДоговораЗаказа", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("ДатаЗаказа"                        , Новый ОписаниеТипов("Дата"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("НомерЗаказа"                       , Новый ОписаниеТипов("Строка"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("Номенклатура"                      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры"        , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("Контрагент"                        , Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("ДатаПоступленияЗаказа"             , Новый ОписаниеТипов("Дата"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("ЗаказПоставщику"                   , Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("Тара"                              , Новый ОписаниеТипов("Булево"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("ЗаказПокупателя"                   , Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("КоличествоОстатокЗаказа"           , Новый ОписаниеТипов("Число"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("Количество"                        , Новый ОписаниеТипов("Число"));
			ТаблицаНоменклатурыЗаказов.Колонки.Добавить("СуммаВзаиморасчетовЗаказа"         , Новый ОписаниеТипов("Число"));
		Иначе
			ТаблицаНоменклатурыЗаказов = ТемповаяТаблицаНоменклатурыЗаказов.Скопировать();
		КонецЕсли; 
		
	Иначе
		
		// Остатки по заказам поставщикам
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДатаОтчета", ?(ДатаОтчета = '00010101000000', ДатаОтчета, КонецДня(ДатаОтчета)));
		Запрос.УстановитьПараметр("Тара"      , Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("ТараПартия", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента                      КАК ДоговорКонтрагентаЗаказа,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДоговораЗаказа,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата                       КАК ДатаЗаказа,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер                      КАК НомерЗаказа,
		|	ЗаказыПоставщикамОстатки.Номенклатура                               КАК Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры                 КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент                 КАК Контрагент,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления            КАК ДатаПоступленияЗаказа,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                            КАК ЗаказПоставщику,
		|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК Тара,
		|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ КАК ЗаказПокупателя,
		|	Сумма(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоОстатокЗаказа,
		|	Сумма(ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателей.КоличествоОстаток КОНЕЦ) КАК Количество,
		|	Сумма(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток)          КАК СуммаВзаиморасчетовЗаказа
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОтчета) КАК ЗаказыПоставщикамОстатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОтчета) КАК РазмещениеЗаказовПокупателей
		|ПО
		|	РазмещениеЗаказовПокупателей.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|	И
		|	РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
		|	И
		|	РазмещениеЗаказовПокупателей.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|	И
		|	((РазмещениеЗаказовПокупателей.ТоварТара = &Тара И ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия)
		|	 ИЛИ
		|	(РазмещениеЗаказовПокупателей.ТоварТара <> &Тара И ЗаказыПоставщикамОстатки.СтатусПартии <> &ТараПартия))
		|
		|ГДЕ
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
		|";
		
		ДопСтрокаТекстаЗапроса = "";
		
		ТемповаяСтрока = "";
		Если Отбор.Номенклатура.Использование Тогда
			ТемповаяСтрока = УправлениеОтчетами.ПолучитьСтрокуОтбора(Отбор.Номенклатура.ВидСравнения, "&ОтборНоменклатура", "ЗаказыПоставщикамОстатки.Номенклатура", "&ОтборНоменклатураС", "&ОтборНоменклатураПо");
			Запрос.УстановитьПараметр("ОтборНоменклатура"  , Отбор.Номенклатура.Значение);
			Запрос.УстановитьПараметр("ОтборНоменклатураС" , Отбор.Номенклатура.ЗначениеС);
			Запрос.УстановитьПараметр("ОтборНоменклатураПо", Отбор.Номенклатура.ЗначениеПо);
		КонецЕсли; 
		
		Если Отбор.ДатаПотребности.Использование  И НЕ (Отбор.ДатаПотребности.ВидСравнения = ВидСравнения.Равно И Не ЗначениеЗаполнено(Отбор.ДатаПотребности.Значение)) Тогда
			Если НЕ ПустаяСтрока(ТемповаяСтрока) Тогда
				ТемповаяСтрока = ТемповаяСтрока + " И ";
			КонецЕсли;
			ТемповаяСтрока = ТемповаяСтрока + УправлениеОтчетами.ПолучитьСтрокуОтбора(Отбор.ДатаПотребности.ВидСравнения, "&ДатаПотребности", "ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления", "&ДатаПотребностиНач", "&ДатаПотребностиКон", Отбор.ДатаПотребности.Значение, Отбор.ДатаПотребности.ЗначениеС, Отбор.ДатаПотребности.ЗначениеПо);
			Запрос.УстановитьПараметр("ДатаПотребности"   , Отбор.ДатаПотребности.Значение);
			Запрос.УстановитьПараметр("ДатаПотребностиНач", НачалоДня(Отбор.ДатаПотребности.ЗначениеС));
			Запрос.УстановитьПараметр("ДатаПотребностиКон", КонецДня(Отбор.ДатаПотребности.ЗначениеПо));
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ТемповаяСтрока) Тогда
			ДопСтрокаТекстаЗапроса = ДопСтрокаТекстаЗапроса + "(" + ТемповаяСтрока + ")";
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ДопСтрокаТекстаЗапроса) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И
			|	(" + ДопСтрокаТекстаЗапроса + ")
			|";
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер,
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику,
		|	ВЫБОР КОГДА ЗаказыПоставщикамОстатки.СтатусПартии = &ТараПартия ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
		|	ВЫБОР КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL ТОГДА Неопределено ИНАЧЕ РазмещениеЗаказовПокупателей.ЗаказПокупателя КОНЕЦ
		|
		|";
		
		ТаблицаНоменклатурыЗаказов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыЗаказов Цикл
		
		ИмеющиесяРазмещения = 0;
		СтрокиРазмещений = ТаблицаНоменклатурыЗаказов.НайтиСтроки(Новый Структура("ЗаказПоставщику, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.ЗаказПоставщику, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
		Для каждого СтрокаРазмещений Из СтрокиРазмещений Цикл
			ИмеющиесяРазмещения = ИмеющиесяРазмещения + СтрокаРазмещений.Количество;
		КонецЦикла;
		
		Если ИмеющиесяРазмещения <> СтрокаТаблицы.КоличествоОстатокЗаказа Тогда
			Если СтрокаТаблицы.Количество = 0 Тогда
				СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоОстатокЗаказа - ИмеющиесяРазмещения;
			Иначе
				Если ТаблицаНоменклатурыЗаказов.Индекс(СтрокаТаблицы) = ТаблицаНоменклатурыЗаказов.Количество() - 1 Тогда
					НоваяСтрока = ТаблицаНоменклатурыЗаказов.Добавить();
				Иначе
					НоваяСтрока = ТаблицаНоменклатурыЗаказов.Вставить(ТаблицаНоменклатурыЗаказов.Индекс(СтрокаТаблицы) + 1);
				КонецЕсли; 
				НоваяСтрока.ДоговорКонтрагентаЗаказа           = СтрокаТаблицы.ДоговорКонтрагентаЗаказа;
				НоваяСтрока.ВалютаВзаиморасчетовДоговораЗаказа = СтрокаТаблицы.ВалютаВзаиморасчетовДоговораЗаказа;
				НоваяСтрока.ДатаЗаказа                         = СтрокаТаблицы.ДатаЗаказа;
				НоваяСтрока.НомерЗаказа                        = СтрокаТаблицы.НомерЗаказа;
				НоваяСтрока.Номенклатура                       = СтрокаТаблицы.Номенклатура;
				НоваяСтрока.Тара                               = СтрокаТаблицы.Тара;
				НоваяСтрока.ХарактеристикаНоменклатуры         = СтрокаТаблицы.ХарактеристикаНоменклатуры;
				НоваяСтрока.Контрагент                         = СтрокаТаблицы.Контрагент;
				НоваяСтрока.ДатаПоступленияЗаказа              = СтрокаТаблицы.ДатаПоступленияЗаказа;
				НоваяСтрока.ЗаказПоставщику                    = СтрокаТаблицы.ЗаказПоставщику;
				НоваяСтрока.ЗаказПокупателя                    = Неопределено;
				НоваяСтрока.КоличествоОстатокЗаказа            = СтрокаТаблицы.КоличествоОстатокЗаказа;
				НоваяСтрока.Количество                         = СтрокаТаблицы.КоличествоОстатокЗаказа - ИмеющиесяРазмещения;
				НоваяСтрока.СуммаВзаиморасчетовЗаказа          = СтрокаТаблицы.СуммаВзаиморасчетовЗаказа;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	СтруктураТаблиц = УправлениеКонтактами.ПолучитьСтруктуруРаспределенныхТаблиц(ТаблицаПотребности, ТаблицаНоменклатурыЗаказов);
	
	ТаблицаПотребности = СтруктураТаблиц.ТаблицаПотребности;
	ТаблицаЗаказовПоставщикам = СтруктураТаблиц.ТаблицаЗаказовПоставщикам;
	
	УстановитьОтборы(ТаблицаПотребности);
	
	Макет = ПолучитьМакет("Макет");
	
	Таб.Очистить();
	
	Секция = Макет.ПолучитьОбласть("ШапкаВерх");
	Таб.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("ШапкаИнтервал");
	Секция.Параметры.СтрокаИнтервал = СформироватьСтрокуПериода();
	Таб.Вывести(Секция);
	мКоличествоВыведенныхСтрокЗаголовка = 4;
	
	Если Группировки.Количество() > 0 Тогда
		
		Секция = Макет.ПолучитьОбласть("ШапкаГруппировки");
		
		СтрокаГруппировок = "";
		Для каждого Группировка Из Группировки Цикл
			Если НЕ ПустаяСтрока(СтрокаГруппировок) Тогда
				СтрокаГруппировок = СтрокаГруппировок + ", ";
			КонецЕсли; 
			СтрокаГруппировок = СтрокаГруппировок + Группировка.Представление;
		КонецЦикла; 
		
		Секция.Параметры.СтрокаГруппировок = "Группировки строк: " + СтрокаГруппировок;
		Таб.Вывести(Секция);
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
		
	КонецЕсли;
	
	СтрокаОтборов = УправлениеОтчетами.СформироватьСтрокуОтборов(Отбор);
	Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаОтбор");
		Секция.Параметры.СтрокаОтборов = "Отбор: " + СтрокаОтборов;
		Таб.Вывести(Секция);
		мКоличествоВыведенныхСтрокЗаголовка = мКоличествоВыведенныхСтрокЗаголовка + 1;
	КонецЕсли; 
	
	Секция = Макет.ПолучитьОбласть("ШапкаТаблицы");
	Таб.Вывести(Секция);
	
	СтруктураЗначенийГруппировок = Новый Структура;
	КопияГруппировок = Группировки.Выгрузить();
	Если КопияГруппировок.Найти("ЗаказПоставщику", "Имя") = Неопределено Тогда
		НоваяГруппировка = КопияГруппировок.Добавить();
		НоваяГруппировка.Имя = "ЗаказПоставщику";
		НоваяГруппировка.Представление = "Заказ поставщику";
	КонецЕсли; 
	Для каждого СтрокаГруппировки Из КопияГруппировок Цикл
		
		Если ПустаяСтрока(СтрокаГруппировки.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаГруппировки.Имя = "Поставщик" ИЛИ СтрокаГруппировки.Имя = "ЗаказПоставщику" Тогда
			КопияИсходнойТаблицы = ТаблицаЗаказовПоставщикам.Скопировать();
		Иначе
			КопияИсходнойТаблицы = ТаблицаПотребности.Скопировать();
		КонецЕсли;
		
		Если СтрокаГруппировки.Имя = "Номенклатура" Тогда
			КопияИсходнойТаблицы.Свернуть(СтрокаГруппировки.Имя + ", ХарактеристикаНоменклатуры, Тара");
			СтруктураЗначенийГруппировок.Вставить(СтрокаГруппировки.Имя, КопияИсходнойТаблицы.Скопировать());
		Иначе
			КопияИсходнойТаблицы.Свернуть(СтрокаГруппировки.Имя);
			СтруктураЗначенийГруппировок.Вставить(СтрокаГруппировки.Имя, КопияИсходнойТаблицы.ВыгрузитьКолонку(СтрокаГруппировки.Имя));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Таб.НачатьАвтогруппировкуСтрок();
	
	Дерево = УправлениеКонтактами.ПолучитьДеревоРаспределенияПотребностей(ТаблицаПотребности.Скопировать(), ТаблицаЗаказовПоставщикам, СтруктураЗначенийГруппировок, КопияГруппировок, Истина);
	
	ВывестиСтроки(Таб, Макет, Дерево);
	
	Таб.ЗакончитьАвтогруппировкуСтрок();
	
	Таб.ФиксацияСверху = мКоличествоВыведенныхСтрокЗаголовка + 2;
	
	ИзменитьВидимостьЗаголовка(Таб);
	
	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();
	
КонецПроцедуры

// Процедура выводит строки группировок в табличный документа
//
// Парамтеры
//  Таб - поле табличного документа, в которое выводятся данные отчета
//  Макет - макет отчета
//  СтрокаПрошлогоУровня - строка дерева значений, данные из строк которой надо обработать и отобразить
//
// Возвращаемое значение
//  НЕТ
//
Процедура ВывестиСтроки(Таб, Макет, СтрокаПрошлогоУровня)

	Для каждого СтрокаТекущегоУровня Из СтрокаПрошлогоУровня.Строки Цикл
		
		ИндексГруппировки = СтрокаТекущегоУровня.Уровень();
		
		Если ИндексГруппировки > Группировки.Количество() - 1 Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяГруппировки = Группировки[ИндексГруппировки].Имя;
		
		ТекущийЦвет = Новый Цвет;
		Если РаскрашиватьГруппировки Тогда
			Если ИндексГруппировки <> Группировки.Количество()-1 Тогда
				ИндексЦвета = ИндексГруппировки;
				Если ИндексЦвета >= 10 Тогда
					ИндексЦвета = (ИндексГруппировки/10 - Цел(ИндексГруппировки/10))*10;
				КонецЕсли; 
				ТекущийЦвет = Макет.Области["Цвет"+СокрЛП(ИндексЦвета)].ЦветФона;
			Иначе
				ТекущийЦвет = Новый Цвет;
			КонецЕсли; 
		КонецЕсли;
		
		ЗначениеГруппировки = СтрокаТекущегоУровня.ЗначениеГруппировки;
		
		СтрокаГруппировки = "";
		Если ТипЗнч(ЗначениеГруппировки) = Тип("Дата") Тогда
			Если ЗначениеГруппировки = '00010101000000' Тогда
				СтрокаГруппировки = "Не заявлено в плане потребности";
			Иначе
				СтрокаГруппировки = Формат(ЗначениеГруппировки, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЗначениеГруппировки) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Если НЕ ЗначениеГруппировки.Пустая() Тогда
				СтрокаГруппировки = "Заказ поставщику №" + Строка(ЗначениеГруппировки.Номер) + " от " + Формат(ЗначениеГруппировки.Дата, "ДФ=dd.MM.yyyy") + " (поставка " + ?(ЗначениеГруппировки.ДатаПоступления = '00010101000000', "не указана", Формат(ЗначениеГруппировки.ДатаПоступления, "ДФ=dd.MM.yyyy")) + ")";
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЗначениеГруппировки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Если НЕ ЗначениеГруппировки.Пустая() Тогда
				СтрокаГруппировки = ЗначениеГруппировки.Метаданные().Синоним + " №" + Строка(ЗначениеГруппировки.Номер) + " от " + Формат(ЗначениеГруппировки.Дата, "ДФ=dd.MM.yyyy") + " (отгрузка " + ?(ЗначениеГруппировки.ДатаОтгрузки = '00010101000000', "не указана", Формат(ЗначениеГруппировки.ДатаОтгрузки, "ДФ=dd.MM.yyyy")) + ")";
			КонецЕсли; 
		Иначе
			СтрокаГруппировки = Строка(ЗначениеГруппировки);
			Если ИмяГруппировки = "Номенклатура" Тогда
				Если ЗначениеГруппировки.ВестиУчетПоХарактеристикам Тогда
					Если СтрокаТекущегоУровня.ХарактеристикаНоменклатуры.Пустая() Тогда
						СтрокаГруппировки = СтрокаГруппировки + " (характеристика не указана)";
					Иначе
						СтрокаГруппировки = СтрокаГруппировки + " (" + Строка(СтрокаТекущегоУровня.ХарактеристикаНоменклатуры) + ")";
					КонецЕсли;
				КонецЕсли; 
				Если СтрокаТекущегоУровня.Тара = Истина Тогда
					СтрокаГруппировки = СтрокаГруппировки + ", ТАРА";
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ПустаяСтрока(СтрокаГруппировки) Тогда
			СтрокаГруппировки = "<...>";
		КонецЕсли;
		
		Секция = Макет.ПолучитьОбласть("СтрокаГруппировки");
		Секция.Параметры.ЗначениеГруппировки = СтрокаГруппировки;
		Секция.Параметры.КоличествоПлана = Формат(СтрокаТекущегоУровня.КоличествоПлана, "ЧЦ=15; ЧДЦ=3");
		Секция.Параметры.КоличествоФакта = Формат(СтрокаТекущегоУровня.КоличествоФакта, "ЧЦ=15; ЧДЦ=3");
		
		Если СтрокаТекущегоУровня.КоличествоПлана > СтрокаТекущегоУровня.КоличествоФакта Тогда
			Секция.Области.ОбластьСтрокиГруппировки.ЦветТекста = WebЦвета.ТемноКрасный;
		ИначеЕсли СтрокаТекущегоУровня.КоличествоПлана < СтрокаТекущегоУровня.КоличествоФакта Тогда
			Секция.Области.ОбластьСтрокиГруппировки.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		КонецЕсли; 
		
		Секция.Области.ЗначениеГруппировки.Расшифровка = ЗначениеГруппировки;
		Секция.Области.ЗначениеГруппировки.Отступ = ИндексГруппировки;
		
		Секция.Области.ЗначениеГруппировки.ЦветФона = ТекущийЦвет;
		Секция.Области.КоличествоПлана.ЦветФона = ТекущийЦвет;
		Секция.Области.КоличествоФакта.ЦветФона = ТекущийЦвет;
		Таб.Вывести(Секция, ИндексГруппировки);
		
		ВывестиСтроки(Таб, Макет, СтрокаТекущегоУровня);
		
	КонецЦикла; 
	
КонецПроцедуры

// Заполняем поля настройки, доступные для группировок и отборов отчета
ДоступныеПоля.Очистить();

Поле = ДоступныеПоля.Добавить("Номенклатура", "Номенклатура потребности", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
Поле.Измерение = Истина;
Поле.Отбор = Истина;

Поле = ДоступныеПоля.Добавить("ДатаПотребности", "Дата потребности", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
Поле.Измерение = Истина;
Поле.Отбор = Истина;

Поле = ДоступныеПоля.Добавить("Покупатель", "Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
Поле.Измерение = Истина;
Поле.Отбор = Истина;

Поле = ДоступныеПоля.Добавить("ЗаказПокупателя", "Заказ покупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
Поле.Измерение = Истина;
Поле.Отбор = Истина;

Поле = ДоступныеПоля.Добавить("Поставщик", "Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
Поле.Измерение = Истина;

Поле = ДоступныеПоля.Добавить("ЗаказПоставщику", "Заказ поставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
Поле.Измерение = Истина;

Поле = ДоступныеПоля.Добавить("Проект", "Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
Поле.Измерение = Истина;
Поле.Отбор = Истина;

Поле = ДоступныеПоля.Добавить("ОтветственныйЗаПокупки", "Ответственный за покупки", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
Поле.Измерение = Истина;
Поле.Отбор = Истина;

// Устанавливаем доступные поля отбора отчета
Отбор.УстановитьДоступныеПоля(ДоступныеПоля);

мКоличествоВыведенныхСтрокЗаголовка = 0;

// Формируем список обязательных отборов
мСписокОтборов = Новый СписокЗначений;
мСписокОтборов.Добавить("Номенклатура");
мСписокОтборов.Добавить("ДатаПотребности");

НП = Новый НастройкаПериода;
#КонецЕсли
