&НаКлиенте
Перем ОбработкаОбъект;

&НаКлиенте
Перем ПрерватьПереход;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	ВерсияПлатформыАктуальна = Обработки.ПомощникПереходаНаУТ11.ПроверкаТекущейВерсииПлатформы();
	
	ПовторноеОткрытиеПомощника    = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ПомощникПереходаНаУТ11",
														"ПовторноеОткрытиеПомощникаПереходаНаУТ11ПриНачалеРаботы", Ложь);
	Если ПовторноеОткрытиеПомощника Тогда
		Элементы.ГруппаЗаголовок.ТекущаяСтраница = Элементы.ГруппаЗаголовокПовторно;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроксиСерверТребуетАутентификации = ВосстановитьЗначение("ПроксиСерверТребуетАутентификации");
	
	КаталогИБ = ПолучитьКаталогПрограммы();
	
	ПомощникБылОткрытВЭтомСеансе = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПомощникБылОткрытВЭтомСеансе");
	СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(ПараметрЗапуска);
	Если ВерсияПлатформыАктуальна и СтруктураПараметров.Свойство("Trade103StartUpdate") и ПомощникБылОткрытВЭтомСеансе = Неопределено Тогда
		КаталогИБ = СтруктураПараметров.NameFile;
		ВыполнитьПереходНаУТ11();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Trade103StartUnloading") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаНаУТ11","ПоказыватьПомощникПереходаНаУТ11ПриНачалеРаботы", Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура КаталогИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = "Каталог базы УТ 11";
	ДиалогВыбора.Каталог = КаталогИБ;
	
	РезультатВыбора = ДиалогВыбора.Выбрать();
	
	Если РезультатВыбора Тогда
		КаталогИБ = СокрЛП(ДиалогВыбора.Каталог);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерейтиНаУТ11(Команда)
	
	Если ВерсияПлатформыАктуальна Тогда
		ВыполнитьПереходНаУТ11();
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаПерезапуска;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧерезНеделю(Команда)
	
	ДатаПерехода = ТекущаяДатаСеанса() + 604800;
	ОтложитьПереходНаУТ11(ДатаПерехода);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодробнейНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПомощникПереходаНаУТ11.Форма.ОписаниеУТ11", 
		Новый Структура("ОбновлениеПлатформы", Ложь));
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДекорацияИнструкцияНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПомощникПереходаНаУТ11.Форма.ОписаниеУТ11", 
		Новый Структура("ОбновлениеПлатформы", Истина));
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПерезапуститьУТ103(Команда)
	
	ОтложитьПереходНаУТ11(Неопределено);
	
	ЗавершитьРаботуСистемы(Ложь, Ложь);
	
	СтрокаСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	ПутьКПлатформе     = КаталогПрограммы();
	ИмяПользователя    = ИмяПользователя();
	
	СтрокаКоманды = """%ПутьКПлатформе%1cv8s"" ENTERPRISE /AppAutoCheckVersion /IBConnectionString ""%СтрокаСоединенияИБ%"" /N ""%ИмяПользователя%"" /C ""NameFile=""""%КаталогИБ%"""";NameAddInlist=""""%ИмяБазыВСписке%""""; Trade103StartUpdate=""""True"""";""";
	СтрокаСоединенияИБ = СтрЗаменить(СтрокаСоединенияИБ, "=""", "=""""");
	СтрокаСоединенияИБ = СтрЗаменить(СтрокаСоединенияИБ, """;", """"";");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПутьКПлатформе%",           ПутьКПлатформе);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединенияИБ%",       СтрокаСоединенияИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователя%",          ИмяПользователя);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИБ%",                КаталогИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяБазыВСписке%",           ИмяБазыВСписке);
	
	ЗапуститьПриложение(СтрокаКоманды, ПутьКПлатформе, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРаботуВ103(Команда)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаНаУТ11","ПоказыватьПомощникПереходаНаУТ11ПриНачалеРаботы", Ложь);
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыполнитьПереходНаУТ11()
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаСтатус;
	ИзменитьТекущееСостояние(0);
	Попытка
		ПодключитьОбработчикОжидания("СкачатьАрхивОбновления", 0.1, Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		ПрерватьПереход = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьПереходНаУТ11(ДатаПерехода)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаНаУТ11","ДатаПереходаНаУТ11",ДатаПерехода);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаНаУТ11","ПоказыватьПомощникПереходаНаУТ11ПриНачалеРаботы", Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКаталогПрограммы()

	КаталогТекущейПрограммы = УправлениеСоединениямиИБ.ПутьКИнформационнойБазе();
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КаталогТекущейПрограммы,"\");
	
	ДатаСозданияБазы = ТекущаяДата();
	ИмяБазыВСписке = "Управление торговлей 11 от " + Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy HH:mm'");
	ИмяКаталогаБазы = "Trade11of" + Формат(ДатаСозданияБазы,"ДФ=yyyyMMddHHmm");
	
	Массив[Массив.ВГраница()] = "Trade11";
	
	ПутьКНовойБазе = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Массив, "\");
	ПутьКНовойБазе = СтрЗаменить(ПутьКНовойБазе,"""","");
	
	Возврат ПутьКНовойБазе;

КонецФункции

&НаКлиенте
Процедура СкачатьАрхивОбновления() Экспорт
	
	ПолучитьФайлыОбновления();
	
	Если НЕ ЗначениеЗаполнено(ПутьКОбработкеСПравилами) или НЕ ЗначениеЗаполнено(ПутьКФайлуШаблона) Тогда
		ПрерватьПереход = Истина;
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработкаОбъект = ВнешниеОбработки.Создать(ПутьКОбработкеСПравилами);
		ОбработкаОбъект.КаталогИБ = КаталогИБ + "\" + ИмяКаталогаБазы;
		ОбработкаОбъект.ИмяБазыВСписке = ИмяБазыВСписке;
		ОбработкаОбъект.ПутьКФайлуШаблона = ПутьКФайлуШаблона;
	Исключение
		Сообщить(ОписаниеОшибки());
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		ПрерватьПереход = Истина;
	КонецПопытки;

	ИзменитьТекущееСостояние(1);
	Попытка
		ПодключитьОбработчикОжидания("ВыгрузитьДанныеВоВнешнийФайл", 0.1, Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		ПрерватьПереход = Истина;
	КонецПопытки; 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВоВнешнийФайл() Экспорт
	
	ОбработкаОбъект.ВыгрузитьДанныеВоВнешнийФайл();
	
	ИзменитьТекущееСостояние(2);
	Попытка
		ПодключитьОбработчикОжидания("СоздатьИнформационнуюБазу", 0.1, Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		ПрерватьПереход = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнформационнуюБазу() Экспорт

	ОбработкаОбъект.СоздатьИнформационнуюБазу();
	
	ИзменитьТекущееСостояние(3);
	Попытка
		ПодключитьОбработчикОжидания("ЗапуститьБазу", 0.1, Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
		ПрерватьПереход = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьБазу() Экспорт
	
	ОбработкаОбъект.ЗапуститьБазу();
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаЗавершение;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаНаУТ11","ПовторноеОткрытиеПомощникаПереходаНаУТ11ПриНачалеРаботы", Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПомощникПереходаНаУТ11","ПоказыватьПомощникПереходаНаУТ11ПриНачалеРаботы", Истина);
	
	ПараметрыКлиента = Новый Соответствие();
	Для каждого Элем Из ПараметрыСеанса.ПараметрыКлиентаНаСервере Цикл
		ПараметрыКлиента.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла; 
	ПараметрыКлиента.Вставить("ПомощникБылОткрытВЭтомСеансе", Истина);
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущееСостояние(Шаг)

	Соответствие = Новый Соответствие();
	Соответствие.Вставить(0, "ГруппаЗагрузкаССервера");
	Соответствие.Вставить(1, "ГруппаВыгрузка");
	Соответствие.Вставить(2, "ГруппаСоздание");
	Соответствие.Вставить(3, "ГруппаЗапуск");
	
	Элементы.ГруппаСтраницСостояний.ТекущаяСтраница = Элементы[Соответствие[Шаг]];
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлыОбновления()
	
	URIПространстваИменСервиса = "http://file.api.update.onec.ru";
	ИмяСервиса = "UpdateFilesApiImplService";
	ИмяПорта = "UpdateFilesApiImplPort";
	
	ИмяКонфигурации = Метаданные.Имя;
	ВерсияКонфигурации = Метаданные.Версия;
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	
	//Авторизация на прокси
	Если ПроксиСерверТребуетАутентификации Тогда
		ПользовательПроксиСервера = ВосстановитьЗначение("ИмяПользователяПрокси");
		ПарольПроксиСервера = ВосстановитьЗначение("ПарольПользователяПрокси");
	КонецЕсли;
	
	//Авторизация на сервере
	НастройкиОбновления = ВосстановитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления");
	Если НастройкиОбновления <> Неопределено Тогда
		КодПользователяСервераОбновлений  = НастройкиОбновления.КодПользователяСервераОбновлений;
		ПарольСервераОбновлений           = НастройкиОбновления.ПарольСервераОбновлений;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПарольСервераОбновлений) 
		или НЕ ЗначениеЗаполнено(КодПользователяСервераОбновлений) 
		или (ПроксиСерверТребуетАутентификации и НЕ ЗначениеЗаполнено(ПользовательПроксиСервера))
		или (ПроксиСерверТребуетАутентификации и НЕ ЗначениеЗаполнено(ПарольПроксиСервера)) Тогда
		Ответ = ОткрытьФормуМодально("Обработка.ПомощникПереходаНаУТ11.Форма.ПараметрыДоступаНаСервер");
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ПрерватьПереход = Истина;
		Возврат;
	КонецЕсли; 
	
	//Получения ссылок на скачивание
	Попытка
		Прокси = WSСсылки.UpdateFilesApiImplService.СоздатьWSПрокси(URIПространстваИменСервиса, ИмяСервиса, ИмяПорта);
		СсылкаНаСкачивание = Прокси.getFilesForUpdateToLastVersion(КодПользователяСервераОбновлений,ПарольСервераОбновлений,ИмяКонфигурации,ВерсияКонфигурации,ВерсияПриложения);
	Исключение
		ПрерватьПереход = Истина;
		Сообщить("Неудачная попытка соединения.");
		Возврат;
		
	КонецПопытки;
	
	Если СсылкаНаСкачивание.fileDtoList.Количество() < 2 Тогда
		ПрерватьПереход = Истина;
		Возврат;
	КонецЕсли;
	
	ПолучитьФайлыССервера(СсылкаНаСкачивание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлыССервера(СсылкаНаСкачивание)
	
	СерверИсточник = "http://" + ОбновлениеКонфигурации.АдресСервераОбновлений() + "/";
	ОбработкаПолученияФайлов = Обработки.ОбновлениеКонфигурации.Создать();
	
	Для каждого ЭлемСсылка Из СсылкаНаСкачивание.fileDtoList Цикл
		
		//Получение файлов с сервера
		Адрес = СтрЗаменить(ЭлемСсылка.url, СерверИсточник, "");
		ВремКаталог = КаталогВременныхФайлов() + "tempUpdateTo11";
		СоздатьКаталог(ВремКаталог);
		
		ИмяФайла = ПолучитьИмяФайла(Адрес);
		
		Путь = ВремКаталог + "\" + ИмяФайла;
		
		HTTP = СоединениеССерверомОбновлений();
		
		Попытка
			ТекстОшибки = ОбработкаПолученияФайлов.ПолучитьФайлССервера(Адрес,Путь,Истина,HTTP);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Сообщить("Не удалось установить соединение с сервером", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
		Исключение
			ПрерватьПереход = Истина;
			Сообщить("Неудачная попытка соединения.");
			Возврат;
			
		КонецПопытки;
		
		Если Найти(Путь, ".epf") Тогда
			ПутьКОбработкеСПравилами = Путь;
		Иначе
			ПутьКФайлуШаблона = Путь;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Функция СоединениеССерверомОбновлений()
	
	// Установка параметров прокси-сервера
	Если ПроксиСерверТребуетАутентификации Тогда
		ПроксиСервер = Новый ИнтернетПрокси();
		ПроксиСервер.Пользователь = ПользовательПроксиСервера;
		ПроксиСервер.Пароль       = ПарольПроксиСервера;
	КонецЕсли;
	
	// Создание HTTP-соединения с сервером обновлений
	Соединение = Новый HTTPСоединение(ОбновлениеКонфигурации.АдресСервераОбновлений(),
	                                  ,
	                                  КодПользователяСервераОбновлений,
	                                  ПарольСервераОбновлений,
	                                  ?(ПроксиСерверТребуетАутентификации, ПроксиСервер, Неопределено));
	
	Возврат Соединение;								  
	
КонецФункции // СоединениеССерверомОбновлений()

&НаКлиенте
Функция ПолучитьНомерПоследнегоСимвола(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат ПозицияСимвола; 
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат 0;
  	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяФайла(Знач ПутьКФайлу) Экспорт

	ПозицияСимвола = ПолучитьНомерПоследнегоСимвола(ПутьКФайлу, "/"); 
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, ПозицияСимвола + 1, СтрДлина(ПутьКФайлу)); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции 


ПрерватьПереход = Ложь;