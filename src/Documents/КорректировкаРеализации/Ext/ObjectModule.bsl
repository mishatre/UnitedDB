Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мЕстьКолонкаСерии Экспорт;
Перем мПорядокСписанияПартий; // (Общ)

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

Перем мДокументРеализацииСсылка Экспорт;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;

Перем мУдалятьДвижения;

Перем мМинимальныеЦены Экспорт;

Перем мСписокФильтров Экспорт;

Перем мУчетнаяПолитика;

Перем мРассчитыватьАвтоматическиеСкидки;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой универсального корректировочного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального корректировочного документа
//
Функция ПечатьУниверсальногоКорректировочногоДокумента()
	
	Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперацииУКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокументРеализации, "ВидОперации");
	Иначе
		ВидОперацииУКД = ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииУКД <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального корректировочного документа возможно только для документов 
				|с видом операции ""Корректировка по согласованию сторон""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДляПечати 	= Номер;
	ДатаДляПечати	= Дата;
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		РеквизитыИсправляемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсправляемыйДокументРеализации, "Номер, Дата");
		НомерДляПечати 	= РеквизитыИсправляемогоДокумента.Номер;
		ДатаДляПечати	= РеквизитыИсправляемогоДокумента.Дата;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("Ссылка",							Ссылка);
	ДанныеДокумента.Вставить("Номер",                           ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
	ДанныеДокумента.Вставить("Дата",							Дата);
	ДанныеДокумента.Вставить("Организация",						Организация);
	ДанныеДокумента.Вставить("Контрагент",						Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента",				ДоговорКонтрагента);
	ДанныеДокумента.Вставить("ВидСчетаФактуры",					Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	ДанныеДокумента.Вставить("Исправление",						Ложь);
	ДанныеДокумента.Вставить("НомерИсправления",				"");
	ДанныеДокумента.Вставить("НомерИсправляемогоКорректировочногоДокумента", "");
	ДанныеДокумента.Вставить("ДатаИсправляемогоКорректировочногоДокумента", '00010101');
	ДанныеДокумента.Вставить("Продавец",						Контрагент);
	ДанныеДокумента.Вставить("КППКонтрагента",					"");
	ДанныеДокумента.Вставить("СчетФактураБезНДС",				Ложь);
	ДанныеДокумента.Вставить("Подразделение",					Подразделение);	
	
	СчетФактураТребуется = УчетНДС.ОпределитьСчетФактураТребуется(ЭтотОбъект);
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СписокВидовСчетовФактур = Новый СписокЗначений;
	СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	СтруктураОтбораСчетаФактуры.Вставить("ВидСчетаФактуры", СписокВидовСчетовФактур);
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
	
	Возврат УчетНДС.ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДокумента, СчетФактураТребуется,СтруктураОтбораСчетаФактуры);

КонецФункции

// Функция формирует табличный документ с печатной формой универсального передаточного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального передаточного документа
//
Функция ПечатьУниверсальногоПередаточногоДокумента()
	
	Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперацииУПД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокументРеализации, "ВидОперации");
	Иначе
		ВидОперацииУПД = ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииУПД <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного документа возможно только для документов
				|с видом операции ""Исправление в первичных документах""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДляПечати 	= Номер;
	ДатаДляПечати	= Дата;
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		РеквизитыИсправляемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсправляемыйДокументРеализации, "Номер, Дата");
		НомерДляПечати 	= РеквизитыИсправляемогоДокумента.Номер;
		ДатаДляПечати	= РеквизитыИсправляемогоДокумента.Дата;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДокументСсылка",    				Ссылка);
	ДанныеДокумента.Вставить("Номер",             				НомерДляПечати);
	ДанныеДокумента.Вставить("Дата",              				ДатаДляПечати);
	ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
	ДанныеДокумента.Вставить("ДокументОснование", 				Ссылка);
	ДанныеДокумента.Вставить("Организация",   	  				Организация);
	ДанныеДокумента.Вставить("Контрагент", 		  				Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		ДоговорКонтрагента);
	ДанныеДокумента.Вставить("Руководитель", 	  				Неопределено);
	ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
	ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
	ДанныеДокумента.Вставить("ДатаОтгрузкиПередачи",            ДатаДляПечати);
	ДанныеДокумента.Вставить("Подразделение", 	  				Подразделение);

	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ПередачаНаРеализациюПоКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ДанныеДокумента.Вставить("ПередачаНаРеализациюПоКомиссии",  ПередачаНаРеализациюПоКомиссии);
	
	СчетФактураТребуется = УчетНДС.ОпределитьСчетФактураТребуется(ЭтотОбъект);
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СписокВидовСчетовФактур = Новый СписокЗначений;
	СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	СтруктураОтбораСчетаФактуры.Вставить("ВидСчетаФактуры", СписокВидовСчетовФактур);
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
	
	Возврат УчетНДС.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры);

КонецФункции // ПечатьУниверсальногоПередаточногоДокумента

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  ИмяМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "УниверсальныйПередаточныйДокумент" тогда
		ТабДокумент = ПечатьУниверсальногоПередаточногоДокумента();
	ИначеЕсли ИмяМакета = "УниверсальныйКорректировочныйДокумент" Тогда
		ТабДокумент = ПечатьУниверсальногоКорректировочногоДокумента();
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать

#КонецЕсли

Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", 	  ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации = &Ссылка
	|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|	И КорректировкаРеализации.Ссылка <> &ЭтотДокумент
	|	И КорректировкаРеализации.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРеализации.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

Процедура ЗаполнитьПоРеализации()
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Очистить();
	Услуги.Очистить();
	СерийныеНомера.Очистить();
	СоставНабора.Очистить();
	СерийныеНомераСоставНабора.Очистить();
	
	ИмяВидаДокумента = ДокументРеализации.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументРеализации);
	
	Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтрокиОснования,
	|	КорректировкаРеализацииТовары.Количество,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.Цена,
	|	КорректировкаРеализацииТовары.Цена КАК ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.Сумма,
	|	КорректировкаРеализацииТовары.Сумма КАК СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСДоИзменения,
	|	""Товары"" КАК ТЧ,";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
		|	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаДоКорректировки,
		|	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0 КАК КоличествоДоКорректировки,
		|	0 КАК ЦенаДоКорректировки,
		|	0 КАК СуммаДоКорректировки,
		|	0 КАК СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации,
	|	NULL КАК Содержание,
	|	NULL КАК СодержаниеДоИзменения
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Цена,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.Сумма,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	""Услуги"",";
	
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	КорректировкаРеализацииУслуги.КоличествоДоКорректировки,
		|	КорректировкаРеализацииУслуги.ЦенаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаДоКорректировки,
		|	КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки,";
	Иначе
		Текст = Текст + "
		|	0,
		|	0,
		|	0,
		|	0,";
	КонецЕсли;
	
	Текст = Текст + "
	|	ИСТИНА,
	|	КорректировкаРеализацииУслуги.Содержание,
	|	КорректировкаРеализацииУслуги.Содержание
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка";
	
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выбрать();
	
	ДокументРеализацииТовары = ДокументРеализации.Товары;
	ДокументРеализацииУслуги = ДокументРеализации.Услуги;
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ТЧ = "Товары" Тогда
			СтрокаТоваров = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, ДокументРеализацииТовары[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Результат);
		Иначе // услуги
			СтрокаУслуг = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, ДокументРеализацииУслуги[Результат.НомерСтрокиОснования - 1]);
			ЗаполнитьЗначенияСвойств(СтрокаУслуг, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	// Загрузим табличную часть СерийныеНомера
	СерийныеНомера.Загрузить(ДокументРеализации.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	 ИЛИ ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	 
	 	КорректироватьНДС = Истина;
		ЗаполнитьПоРеализации();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	НезаполняемыеРеквизиты =
		"ПометкаУдаления, Проведен, Дата, Номер, ВидОперации,
		|ДокументРеализации, КорректироватьБУиНУ, Ответственный, Комментарий, ВидПередачи";
		
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты
			+ ",АдресДоставки, ДополнениеКАдресуДоставки,
				|ДокументРеализации, КорректироватьБУиНУ, Ответственный, Комментарий, КорректироватьНДС";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для Каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	Если ЗначениеЗаполнено(мДокументРеализацииСсылка) Тогда
		
		// Заполненим основные реквизиты шапки по первичному документу
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументРеализацииСсылка);
		Если ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			ДоговорКонтрагента = мДокументРеализацииСсылка.ДоговорКонтрагента;
			ВалютаДокумента = мДокументРеализацииСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в первичном документе
		МетаданныеДокументаОснования = мДокументРеализацииСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КорректироватьБУиНУ Тогда
		// Перезаполним шапку по документу основания 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументРеализации);
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь);
	КонецЕсли;
	
	// Установим значение Неопределено для незаполненных реквизитов составного типа
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

Функция ДоступнаКорректировкаБУиНУ() Экспорт
	
	// Корректировка по учетам доступна только при использовании режима РА и только для некоторых видов документов
	Возврат
		
		((ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И (ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
			ИЛИ ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот
			ИЛИ ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав)
			И ЗначениеЗаполнено(ДокументРеализации.ДоговорКонтрагента)
			И ДокументРеализации.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		ИЛИ (ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
			 И ДокументРеализации.КорректироватьБУиНУ));
	
КонецФункции

Функция ЭтоКорректировкаРТиУ() Экспорт
	
	Возврат (ТипЗнч(мДокументРеализацииСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
КонецФункции

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	СвойстваСклада.Вставить("ВидимостьСклада",              КорректироватьБУиНУ И ЭтоКорректировкаРТиУ() И мУказаниеСкладовВТЧ);
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ПолучитьСвойстваЗаказаВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа        = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
		ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		И КорректироватьБУиНУ
		И ЭтоКорректировкаРТиУ() И УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента));
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
		СвойстваЗаказа.ВидимостьЗаказа
		И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СвойстваЗаказа.Вставить("ВидимостьСпособаСписания",
		СвойстваЗаказа.ВидимостьЗаказа);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеСпособаСписания",
		СвойстваЗаказа.ВидимостьСпособаСписания
		И ЗначениеЗаполнено(Сделка));
	
	Возврат СвойстваЗаказа;
	
КонецФункции

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
	СтруктураМакетов.Вставить("УниверсальныйКорректировочныйДокумент", "Универсальный корректировочный документ (УКД)");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()
	
	// Заполним реквизит склад в табличных частях "Товары"
	СкладИзШапки     =  Не мУказаниеСкладовВТЧ;
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	
	Для каждого СтрокаТЧ из Товары Цикл

		Если СкладИзШапки 
		   И НЕ ЕстьКолонкаЗаказ Тогда

			СтрокаТЧ.Склад = Склад;

		ИначеЕсли ЕстьКолонкаЗаказ 
		        И НЕ СкладИзШапки 
		        И (Не ЗначениеЗаполнено(СтрокаТЧ.Склад)) Тогда

			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя))
				ИЛИ (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя.СкладГруппа))
				ИЛИ ТипЗнч(СтрокаТЧ.ЗаказПокупателя.СкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда

				СтрокаТЧ.Склад = Склад;

			Иначе

				СтрокаТЧ.Склад = СтрокаТЧ.ЗаказПокупателя.СкладГруппа;

			КонецЕсли;

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда

			СтрокаТЧ.Склад = Склад;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки =
		ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
		И ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
	ИначеЕсли НЕ ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки 	= 0;
			СтрокаТЧ.ЦенаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаНДСДоКорректировки 	= 0;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки 	= 0;
			СтрокаТЧ.ЦенаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаДоКорректировки 		= 0;
			СтрокаТЧ.СуммаНДСДоКорректировки 	= 0;			
		КонецЦикла;
		
	КонецЕсли;		
	
	Если НЕ КорректироватьБУиНУ Тогда
		
		Отбор = Новый Структура("ЕстьВДокументеРеализации", Истина);
		
		СтрокиТовары = Товары.НайтиСтроки(Отбор);
		СтрокиУслуги = Услуги.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из СтрокиТовары Цикл
			СтрокаТЧ.ЕстьВДокументеРеализации = Ложь;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СтрокиУслуги Цикл
			СтрокаТЧ.ЕстьВДокументеРеализации = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет заполнение реквизитов документа основания.
// Параметры:
// ДокументОснование - Документ основания
// Возвращаемое значение:
// Булево - Истина, есть не заполненные реквизиты, Ложь, реквизиты заполнены
//
Процедура ПроверитьРеквизиты(ДокументОснование)
	
	МетаданныеОснования = ДокументОснование.Метаданные();
	СтрокаПредупреждение = "В документе основания:" + Символы.ПС;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеОснования)
		И НЕ ЗначениеЗаполнено(ДокументОснование.Организация) Тогда
		СтрокаПредупреждение = "не заполнена организация" + Символы.ПС;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеОснования)
		И НЕ ЗначениеЗаполнено(ДокументОснование.Контрагент) Тогда
		СтрокаПредупреждение = СтрокаПредупреждение + "не заполнен контрагент" + Символы.ПС;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеОснования)
		И НЕ ЗначениеЗаполнено(ДокументОснование.ДоговорКонтрагента)
		И ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.СчетФактураВыданный")
		И ТипЗнч(ДокументОснование.ИсправляемыйДокументРеализации) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		СтрокаПредупреждение = СтрокаПредупреждение + "не заполнен договор контрагента";
		
	КонецЕсли;
	
	Если СтрЧислоСтрок(СтрокаПредупреждение) > 1.00 Тогда
		ДокументРеализации = Неопределено;
		ВызватьИсключение СтрокаПредупреждение;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРеквизиты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПереименоватьКолонку(Таблица, СтруктураИменКолонок)
	
	СтруктураПерезаполнения = Новый Структура();
	Для каждого ОбрабатываемыеКолонки Из СтруктураИменКолонок Цикл
		Если Таблица.Колонки.Найти(ОбрабатываемыеКолонки.Ключ) = Неопределено Тогда
			Таблица.Колонки[ОбрабатываемыеКолонки.Значение].Имя = ОбрабатываемыеКолонки.Ключ;
		Иначе
			СтруктураПерезаполнения.Вставить(ОбрабатываемыеКолонки.Ключ, ОбрабатываемыеКолонки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПерезаполнения.Количество() > 0.00 Тогда
		Для каждого СтрокаИсходнойТаблицы Из Таблица Цикл
			Для каждого ОбрабатываемыеКолонки Из СтруктураПерезаполнения Цикл
				СтрокаИсходнойТаблицы[ОбрабатываемыеКолонки.Ключ] = СтрокаИсходнойТаблицы[ОбрабатываемыеКолонки.Значение]
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок) Экспорт

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = УправлениеЗапасамиПартионныйУчет.ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");

	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, СтруктураШапкиДокумента, ПерезаполнятьДокумент = Истина)

	ТаблицаТЧ.Индексы.Добавить("НомерСтроки");
	
	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			СтрокаДвижений.Склад = Неопределено;
		КонецЕсли;

		Если ПерезаполнятьДокумент И Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;
		
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");

		// Если партионный учет по сериям не ведется, то надо очистить серию
		Если  СтатусПартии <> Перечисления.СтатусыПартийТоваров.ВозвратнаяТара И НЕ СтрокаТЧ.ВестиПартионныйУчетПоСериям Тогда
			СтрокаДвижений.СерияНоменклатуры = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахУпр()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпрВозврат(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоКомплектам,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		ТаблицаПоСкидкам,
		Отказ,
		Заголовок
	);

	Если ОтражатьВУправленческомУчете Тогда
		// Таблица для движений с отрицательным количеством
		ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "МинусКоличество");
		ПереименоватьКолонку(ТаблицаПоТоварамМинус, СтруктураИменКолонок);
		
		// Таблица для движений с положительным количеством
		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "КоличествоДок");
		ПереименоватьКолонку(ТаблицаПоТоварамПлюс, СтруктураИменКолонок);
		
		// Таблица для движений с отрицательным количеством
		ТаблицаПоКомплектамМинус = ТаблицаПоКомплектам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "МинусКоличество");
		ПереименоватьКолонку(ТаблицаПоКомплектамМинус, СтруктураИменКолонок);

		// Таблица для движений с положительным количеством
		ТаблицаПоКомплектамПлюс = ТаблицаПоКомплектам.Скопировать();
		СтруктураИменКолонок = Новый Структура("Количество", "КоличествоДок");
		ПереименоватьКолонку(ТаблицаПоКомплектамПлюс, СтруктураИменКолонок);
		
		ТабЗаказыПокупателей = ТаблицаПоТоварамМинус.Скопировать();
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;

		Если ТабЗаказыПокупателей.Количество() > МассивУдаляемыхСтрок.Количество() Тогда // Есть строки с Заказом покупателя
		
			ТабЗаказыПокупателей.Колонки.Добавить("СтатусПартии", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПартийТоваров"));

			Для Каждого СтрокаТЧ Из МассивУдаляемыхСтрок Цикл
				ТабЗаказыПокупателей.Удалить(СтрокаТЧ);
			КонецЦикла;
			Для Каждого СтрокаТЧ Из ТабЗаказыПокупателей Цикл
				СтрокаТЧ.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
			КонецЦикла;
			
			// Движения по заказам покупателей.
			НаборДвижений = Движения.ЗаказыПокупателей;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабЗаказыПокупателей, ТаблицаДвижений);
			
			// Считаем что нельзя выбирать заказы с разными договорами, т.е. договор в шапке = договору в заказе покупателя в таб.части
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				НаборДвижений.ВыполнитьРасход();
			КонецЕсли;
			
		КонецЕсли;		

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		   И СуммаДокумента <> 0 Тогда

			// Движения по документу.

			// По регистру ПродажиПоДисконтнымКартам.
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда

				НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

				// Получим таблицу значений, совпадающую со структурой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
				СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(-СуммаДокумента, ВалютаДокумента,
									   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
									   СтруктураШапкиДокумента.КурсДокумента,
									   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
									   СтруктураШапкиДокумента.КратностьДокумента,
									   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					НаборДвижений.ВыполнитьДвижения();
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
			Если НЕ Отказ Тогда
				
				ОтборСкладОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
				ОтборСкладРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
				ОтборСкладНТТ  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.НТТ);
				
				РезультатЗапросаТоварыОпт = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладОпт);
				
				Если Не РезультатЗапросаТоварыОпт.Пустой() Тогда
				
					НаборДвиженийОпт = Движения.ТоварыНаСкладах;

					ТаблицаТоварыОпт = РезультатЗапросаТоварыОпт.Выгрузить();
					СтруктТаблицДокументаОпт = Новый Структура;
					СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам", ТаблицаТоварыОпт);

					ТаблицыДанныхДокументаОпт = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийОпт, СтруктТаблицДокументаОпт);

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвиженийОпт, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаОпт,  Дата);

				КонецЕсли;
				
				РезультатЗапросаТоварыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладРозн);
				Если НЕ РезультатЗапросаТоварыРозн.Пустой() Тогда
					
					НаборДвиженийРозн = Движения.ТоварыВРознице;
					ТаблицаТоварыРозн = РезультатЗапросаТоварыРозн.Выгрузить();
				
					СтруктТаблицДокументаРозн = Новый Структура;
					СтруктТаблицДокументаРозн.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозн);
					
					ТаблицыДанныхДокументаРозн = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийРозн, СтруктТаблицДокументаРозн);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийРозн, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаРозн, Дата);
					
				КонецЕсли;

				РезультатЗапросаТоварыНТТ = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектамМинус, ОтборСкладНТТ);

				Если Не РезультатЗапросаТоварыНТТ.Пустой() Тогда
				
					НаборДвиженийНТТ = Движения.ТоварыВНТТ;
					ТаблицаТоварыНТТ = РезультатЗапросаТоварыНТТ.Выгрузить();
					СтруктураИменКолонок = Новый Структура("ЦенаВРознице", "Цена");
					ПереименоватьКолонку(ТаблицаТоварыНТТ, СтруктураИменКолонок);
					
					СтруктТаблицДокументаНТТ = Новый Структура;
					СтруктТаблицДокументаНТТ.Вставить("ТаблицаПоТоварам", ТаблицаТоварыНТТ);
					
					ТаблицыДанныхДокументаНТТ = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру( НаборДвиженийНТТ, СтруктТаблицДокументаНТТ);
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаНТТ, "ТоварТара", Перечисления.ТоварТара.Товар);
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр( НаборДвиженийНТТ, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокументаНТТ, Дата);
					
				КонецЕсли;
				
			КонецЕсли; // Если НЕ Отказ Тогда
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
			// По регистру Продажи
			НаборДвижений = Движения.Продажи;
			ТаблицаПродаж = ТаблицаПоТоварамМинус.Скопировать();
			СтруктураИменКолонок = Новый Структура("ДокументПродажи", "ДокументПартии");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			СтруктураИменКолонок = Новый Структура("Стоимость", "СтоимостьПродажи");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			СтруктураИменКолонок = Новый Структура("НДСВрем", "НДС");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			СтруктураИменКолонок = Новый Структура("НДС", "НДСУпр");
			ПереименоватьКолонку(ТаблицаПродаж, СтруктураИменКолонок);
			
			Для каждого СтрокаТаблицы из ТаблицаПродаж Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПродажи) Тогда
					СтрокаТаблицы.ДокументПродажи = Ссылка;
				КонецЕсли;
			КонецЦикла;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродаж, ТаблицаДвижений, Проект, Дата, "Продажи");
				
			Иначе
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
				
			КонецЕсли;
 
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,        "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,         "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
			КонецЕсли;
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
			НаборДвижений = Движения.ТоварыПереданные;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			КопияТовары = ТаблицаПоТоварамМинус.Скопировать();
			СтруктураИменКолонок = Новый Структура("Сделка", "ЗаказПокупателя");
			ПереименоватьКолонку(КопияТовары, СтруктураИменКолонок);
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТовары, ТаблицаДвижений);

			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "Сделка");
			КонецЕсли;

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПередачи");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ТоварыПереданные.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя
		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера
		Иначе
			КодОперацииПартииТоваров = Неопределено;
		КонецЕсли;
		
		// Для строк документа, в которых не указан документ продажи необходимо сразу сформировать
		// движения по партиям, кроме того надо сторнировать движения по регистру "Продажи себестоимость"
		ТаблицаПоТоварамПартии = ТаблицаПоКомплектамПлюс.Скопировать();
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			// Движения возврата товаров от комиссионера всегда выполняются партионным учетом
			ТаблицаПоТоварамПартии.Очистить();
		КонецЕсли;
		
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамПартии.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамПартии.Получить(Сч);
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
				 ТаблицаПоТоварамПартии.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		СтруктураИменКолонок = Новый Структура("Стоимость", "ПлюсСебестоимость");
		ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
		
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
		НаборДвижений = Движения.ПартииТоваровНаСкладах;
			
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();
			
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
			
		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварамПартии, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.Купленный, СтруктураШапкиДокумента);
			
		// Код операции
		ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");
			
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
			
		// При поступлении по ордеру нужно сторнировать партию ордера
		//Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
				
			ТаблицаПартииПоОрдерам = ТаблицаПоТоварамМинус.Скопировать();
				
			Сч = 0;
			Пока Сч < ТаблицаПартииПоОрдерам.Количество() Цикл
				СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);
				Если СтрокаТаблицы.БезПраваПродажи = Истина Тогда
					ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);
				Иначе
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
				
			Если ТаблицаПартииПоОрдерам.Количество() > 0 Тогда
					
				ТаблицаПоТоварамПартии = ТаблицаПартииПоОрдерам.Скопировать();
				СтруктураИменКолонок = Новый Структура("ДокументОприходования", "ДокументПолучения");
				ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
				СтруктураИменКолонок = Новый Структура("Стоимость", "МинусСебестоимость");
				ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
				ТаблицаДвижений.Очистить();
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
			
				ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаПоТоварамПартии, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.ПоОрдеру, СтруктураШапкиДокумента, Ложь);
					
				ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ПоОрдеру, "СтатусПартии");
					
				// Код операции - поступление по ордеру (сторно)
				ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, "КодОперации");
					
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
				Если Не Отказ Тогда
					Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
			
		ТаблицаПоТоварамПартии = ТаблицаПоКомплектамМинус.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамПартии.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамПартии.Получить(Сч);
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
				 ТаблицаПоТоварамПартии.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		СтруктураИменКолонок = Новый Структура("Стоимость", "МинусСебестоимость");
		ПереименоватьКолонку(ТаблицаПоТоварамПартии, СтруктураИменКолонок);
		
		// ТОВАРЫ ПО РЕГИСТРУ ПродажиСебестоимость
		НаборДвижений = Движения.ПродажиСебестоимость;
			
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвиженийПродажиСебестоимость = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДвижений = ТаблицаДвиженийПродажиСебестоимость.Скопировать();
			
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПартии, ТаблицаДвижений);
			
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка ,"ДокументОприходования");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
			
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ПродажиСебестоимость.ВыполнитьДвижения();
		КонецЕсли;
	КонецЕсли; // Если ОтражатьВУправленчискомУчете...
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ТаблицаПоТоварамВозврат, ТаблицаПоТоварамВзаиморасчеты)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаПоТоварамВозврат = ТаблицаТоваров.СкопироватьКолонки();
	// Удалим из таблицы строки, по которым не было изменений
	КоличествоСтрок = ТаблицаТоваров.Количество();
	Для Индекс = 1 по КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаТоваров[КоличествоСтрок - Индекс];
		
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.НДС = 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаТаблицы);
		Иначе
			Если СтрокаТаблицы.ФлагОперации = ЛОЖЬ И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
				СтрокаТовараВозврат = ТаблицаПоТоварамВозврат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовараВозврат, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьПродажи", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаПоТоварамВозврат.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаПоТоварамВозврат.Колонки.Добавить("СтоимостьПродажи", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпрВозврат(ТаблицаПоТоварамВозврат, СтруктураШапкиДокумента);
	
	// Подготовка данных для регл учета (НДС)
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРеглВозврат(ТаблицаПоТоварамВозврат, СтруктураШапкиДокумента);
	
	ТаблицаПоТоварамВзаиморасчеты = ТаблицаТоваров.Скопировать();
	
	СтруктураИменКолонок = Новый Структура();
	СтруктураИменКолонок.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетовФлагОперации");
	СтруктураИменКолонок.Вставить("СуммаУпр", "СуммаУпрФлагОперации");
	СтруктураИменКолонок.Вставить("СуммаСНДСДок", "СуммаСНДСДокФлагОперации");
	СтруктураИменКолонок.Вставить("НДСУпр", "НДСУпрФлагОперации");

	ПереименоватьКолонку(ТаблицаПоТоварамВзаиморасчеты, СтруктураИменКолонок);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетовФлагОперации", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпрФлагОперации"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДокФлагОперации"       , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпрФлагОперации"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 КратностьВзаиморасчетов);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);		
		
		СтрокаТаблицы.СуммаВзаиморасчетовФлагОперации = ?(СтрокаТаблицы.СуммаВзаиморасчеты < 0.00, - СтрокаТаблицы.СуммаВзаиморасчетов, СтрокаТаблицы.СуммаВзаиморасчетов);
		СтрокаТаблицы.СуммаУпрФлагОперации = ?(СтрокаТаблицы.СуммаВзаиморасчеты < 0.00, - СтрокаТаблицы.СуммаУпр, СтрокаТаблицы.СуммаУпр);
		СтрокаТаблицы.НДСУпрФлагОперации = ?(СтрокаТаблицы.НДСВзаиморасчеты < 0.00, - СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпрВозврат(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТоваров.Колонки.Добавить("МинусКоличество"     , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("МинусСебестоимость"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПлюсСебестоимость"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"        , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если СтрокаТаблицы.КоличествоДок = NULL Тогда
			СтрокаТаблицы.КоличествоДок = 0;
		КонецЕсли;

		СтрокаТаблицы.МинусКоличество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.СтоимостьПродажи = СтрокаТаблицы.Сумма + 
		                                 ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СтоимостьПродажи    = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьПродажи, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

											 
		СтрокаТаблицы.НДСУпр    = - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.ПлюсСебестоимость   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(0.00, СтруктураШапкиДокумента.ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КурсДокумента,
		                                     СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                     СтруктураШапкиДокумента.КратностьДокумента,
		                                     СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) * СтрокаТаблицы.КоличествоДок;
											 
		СтрокаТаблицы.МинусСебестоимость= - СтрокаТаблицы.ПлюсСебестоимость;

		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
	                     ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада", "МинусКоличество");
	КонецЕсли;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Добавляет в таблицу колонки, необходимые для регл. проведения.
//
Процедура ПодготовитьТаблицуТоваровРеглВозврат(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма"   ,     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.СуммаБезНДС;
			СтрокаТаблицы.ПроводкаСуммаНДС = СтрокаТаблицы.НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, СтруктураШапкиДокумента.ВалютаДокумента,
											 мВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьДокумента,
											 Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаДокумента,
											 мВалютаРегламентированногоУчета, 
											 СтруктураШапкиДокумента.КурсДокумента,
											 Данные.Курс, 
											 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета,
											 Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	// Удалим из таблицы строки, по которым не было изменений
	КоличествоСтрок = ТаблицаУслуг.Количество();
	Для Индекс = 1 по КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаУслуг[КоличествоСтрок - Индекс];
		
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.НДС = 0 Тогда
			ТаблицаУслуг.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента,
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента,
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов,
		   ВалютаДокумента,
		   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		   СтруктураШапкиДокумента.КурсДокумента,
		   КурсВзаиморасчетов,
		   СтруктураШапкиДокумента.КратностьДокумента,
		   КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДСУпр;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("Организация, ДокументРеализации");
	Иначе
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("Организация, ДокументРеализации, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
			|Заполните поле ""Заказ покупателя""!");
		ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
			"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
			|Заполните поле ""Счет покупателю""!");
		КонецЕсли;

		// Склад заполняем только, если у нас есть строки в таблице "Товары"
		// и склад не в ТЧ.
		Если  Не мУказаниеСкладовВТЧ
		    И Товары.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("Склад");
		КонецЕсли;
		СтруктураОбязательныхПолей.Вставить("ВидПередачи");
		
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
		Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаРеализации.Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации
		|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаРеализации.Ссылка <> &ЭтотДокумент
		|	И КорректировкаРеализации.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаРеализации.Дата УБЫВ";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("К документу "+ ДокументРеализации +" введено больше одного корректировочного документа с видом операции ""Исправление первичных документов"". 
			|Каждую последующую корректировку следует вводить на основании предыдущей.", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ЕдиницаИзмерения");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Складов с видом НТТ здесь быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварамРеализация,
		ТаблицаПоСкидкам,
		ТаблицаПоУслугам,
		ТаблицаПоТоварамВозврат,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		Отказ,
		Заголовок
	)
	
	// Проводить по партиям сразу нужно если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(
		ЭтотОбъект,
		СтруктураШапкиДокумента,
		мСтруктураПараметровВзаиморасчетов,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		ВидДвиженияНакопления.Приход,
		Отказ,
		Заголовок
	);
		
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(
			РежимПроведения,
			ТаблицаПоВзаиморасчетам,
			Отказ,
			Заголовок,
			СтруктураШапкиДокумента
		);
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		возврат;
	КонецЕсли;
	
	///////////////////////////////////////
	// Проводится как реализация товаров //
	///////////////////////////////////////
	Если ТаблицаПоТоварамРеализация.Количество() > 0.00
		ИЛИ ТаблицаПоУслугам.Количество() > 0.00
	Тогда

		ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамРеализация, ЭтотОбъект);

		ДвиженияПоРегистрамУпрРеализация(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварамРеализация,
			ТаблицаПоКомплектам,
			ТаблицаПоСкидкам,
			ТаблицаПоУслугам,
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			Отказ,
			Заголовок
		);

		ДвиженияПоРегиструТоварыОрганизацийРеализация(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоКомплектам,
			ТаблицаПоУслугам,
			Отказ,
			Заголовок
		);

		ДвиженияПоРегиструСписанныеТоварыРеализация(
			СтруктураШапкиДокумента,
			ТаблицаПоКомплектам,
			Отказ,
			Заголовок
		);

		Если ТаблицаПоКомплектам.Количество() > 0.00 тогда

			// Зарегистрируем в последовательности УУ
			Если ОтражатьВУправленческомУчете Тогда
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период      = Дата;
			КонецЕсли;
		КонецЕсли;

		Если ПроводитьПоПартиям Тогда
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		Иначе
			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//////////////////////////////////////////////////
	// Проводится как возврат товаров от покупателя //
	//////////////////////////////////////////////////
	Если ТаблицаПоТоварамВозврат.Количество() > 0.00 Тогда
		ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамВозврат, ЭтотОбъект, СтруктураШапкиДокумента);

		ДвиженияПоРегистрамУпрВозврат(
			РежимПроведения,
			СтруктураШапкиДокумента,
			ТаблицаПоТоварамВозврат,
			ТаблицаПоКомплектам,
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			ТаблицаПоСкидкам,
			Отказ,
			Заголовок
		);
		ДвиженияПоРегиструТоварыОрганизацийВозврат(
			РежимПроведения,
			ТаблицаПоКомплектам,
			Отказ,
			Заголовок,
			СтруктураШапкиДокумента
		);
		
		ДвиженияПоРегиструСписанныеТоварыВозврат(
			СтруктураШапкиДокумента,
			ТаблицаПоКомплектам,
			Отказ,
			Заголовок
		);
		
		Если ТаблицаПоТоварамВозврат.Количество() > 0 Тогда
			// Зарегистрируем в последовательности УУ
			Если ОтражатьВУправленческомУчете Тогда
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период      = Дата;
			КонецЕсли;
		КонецЕсли;

		Если ПроводитьПоПартиям Тогда
			// Проводки формируются и в модуле документа, и при списании партий
			Если ОтражатьВУправленческомУчете Тогда
				Движения.ПартииТоваровНаСкладах.Записать();
				Движения.ПродажиСебестоимость.Записать();
			КонецЕсли;
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		Иначе
			// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
			Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаВыручки, ТаблицаАвансов,Отказ, Заголовок) Экспорт

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС И Не СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134 Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, ТаблицаАвансов, , УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
	
	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.ПровестиКорректировкуРеализацииПоРегистрамНДС(СтруктураШапкиДокумента, Ссылка);
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпрРеализация(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоКомплектам,
		ТаблицаПоСкидкам,
		ТаблицаПоУслугам,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоРасчетам,
		Отказ,
		Заголовок
	)

		
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Если СуммаДокумента <> 0 Тогда

			// По регистру ПродажиПоДисконтнымКартам.
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
				НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

				// Получим таблицу значений, совпадающую со структурой набора записей регистра.
				ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

				// Заполним таблицу движений.
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
				СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

				Если Не Отказ Тогда
					НаборДвижений.ВыполнитьДвижения();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ Продажи.

		НаборДвижений = Движения.Продажи;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		СтруктураИменКолонок = Новый Структура("НДСВрем", "НДС");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСУпр");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		
		// Заполним таблицу движений.
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам,ТаблицаДвижений, Проект, Дата, "Продажи");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
			
		КонецЕсли;
		
		ИсходныйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ИсходныйДокументРеализации,"ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;


		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;

		// УСЛУГИ ПО РЕГИСТРУ Продажи.

		НаборДвижений = Движения.Продажи;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		СтруктураИменКолонок = Новый Структура("НДСВрем", "НДС");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСУпр");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);

		// Заполним таблицу движений.
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоУслугам,ТаблицаДвижений, Проект, Дата, "Продажи");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
			
		КонецЕсли;
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
		// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;
		
		СтруктураИменКолонок = Новый Структура("НДСУпр", "НДС");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСВрем");
		ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДСУпр", "НДС");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);
		СтруктураИменКолонок = Новый Структура("НДС", "НДСВрем");
		ПереименоватьКолонку(ТаблицаПоУслугам, СтруктураИменКолонок);
		
	КонецЕсли;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

		ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
		РезультатЗапросаКомплектыОпт = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаОпт);

		Если Не РезультатЗапросаКомплектыОпт.Пустой() Тогда
		
			Если НЕ Отказ Тогда
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("КомплектыОпт", РезультатЗапросаКомплектыОпт.Выгрузить());

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;

		КонецЕсли;

		ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
		РезультатЗапросаКомплектыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаРозн);

		Если Не РезультатЗапросаКомплектыРозн.Пустой() Тогда

			Если Не Отказ Тогда
				ТаблицаКомплектыРозн = РезультатЗапросаКомплектыРозн.Выгрузить();

				ТаблицаКомплектыРозн.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

				Если ТаблицаКомплектыРозн.Количество() <> 0 Тогда
					ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаКомплектыРозн.ВыгрузитьКолонку("Склад"),
					ТаблицаКомплектыРозн.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

					УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаКомплектыРозн, ТаблицаПоЦенам, "ВидСклада");
				КонецЕсли;
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("КомплектыРозн", ТаблицаКомплектыРозн);

				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);

				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
		ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	КонецЕсли;

	// Если есть списание из резерва, то надо списать резерв
	ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
		Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		СтруктураИменКолонок = Новый Структура("ДокументРезерва", "ЗаказПокупателя");
		ПереименоватьКолонку(ТаблицаПоТоварамИзРезерва, СтруктураИменКолонок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамИзРезерва, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		//// Проверка остатков при оперативном проведении.
		//Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		//КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпрРеализация()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;

	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизацийРеализация(
		РежимПроведения,
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		Отказ,
		Заголовок
	)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
								  
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		//// Проверка остатков при оперативном проведении.
		//Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		//КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ДвиженияПоРегиструТоварыОрганизацийВозврат(
		РежимПроведения,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок,
		СтруктураШапкиДокумента
	)

	// Таблица для движений с отрицательным количеством
	ТаблицаПоТоварамМинус = ТаблицаПоТоварам.Скопировать();
	СтруктураИменКолонок = Новый Структура("Количество", "МинусКоличество");
	ПереименоватьКолонку(ТаблицаПоТоварамМинус, СтруктураИменКолонок);
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Комиссионер");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;
	
	// Спишем остатки по организации с комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамМинус, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;


КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;//Для заполнения счета в регистре ПродажиСебестоимость
		Иначе	
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
	КонецЦикла;
	
	// Учет по проектам
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;

КонецПроцедуры 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпрВозврат(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;//Для заполнения счета в регистре ПродажиСебестоимость
		Иначе	
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;	
		
	КонецЦикла;
	
	// Учет по проектам
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,   "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Строка.СуммаНДС = СтрокаТЧ.НДС;
		
		// Если склад указан только в шапке
		Если НЕ ЗначениеЗаполнено(Строка.ВидСклада) Тогда
			Строка.ВидСклада = Склад.ВидСклада;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	
КонецПроцедуры 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРеглВозврат(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
			Строка.СуммаНДС = СтрокаТЧ.НДС;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

Процедура ДвиженияПоРегиструСписанныеТоварыРеализация(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок
	) Экспорт

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Строка.НомерСтрокиДокумента = Строка.НомерСтроки;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;

	// Если резервирование под заказ - заказ партии
	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		ТаблицаЗаказов = ТаблицаПоТоварам.ВыгрузитьКолонку("ЗаказПокупателя");
		ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");

	КонецЕсли;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Данные для регл учета (НДС)
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТоварыРеализация()

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТоварыВозврат(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		Отказ,
		Заголовок
	) Экспорт

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	СтруктураИменКолонок = Новый Структура("ДокументПартии", "ДокументПартии");
	ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);
	СтруктураИменКолонок = Новый Структура("Количество", "КоличествоДок");
	ПереименоватьКолонку(ТаблицаПоТоварам, СтруктураИменКолонок);

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Строка.НомерСтрокиДокумента = Строка.НомерСтроки;
		Строка.ДокументПередачи = Строка.ДокументПартии;
		
	КонецЦикла;
	
	// Если ПУ по складам
	Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателя,   "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера, "КодОперацииПартииТоваров");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,      "ДопустимыйСтатусПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,                   "ДоговорКонтрагента");
		
	КонецЕсли;
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпрВозврат(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРеглВозврат(ТаблицаДвижений,  СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
КонецПроцедуры // ДвиженияПоРегиструСписанныеТоварыВозврат()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА
// (кроме таблицы по таре)

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	// Дополним шапку исходным исправляемым документом реализации
	СтруктураШапкиДокумента.Вставить("ИсходныйИсправляемыйДокументРеализации", УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина));

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",                       "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах",                    "РасчетыВУсловныхЕдиницах");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов",                        "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                                 "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",                                 "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом",      "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете",            "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации",                                 "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ВидСклада",                                   "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",                "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиУчетТоваровОрганизацийВРазрезеСкладов",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",     "ВедениеУчетаПоПроектам",                       "ВедениеУчетаПоПроектам");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	////////////////////////////////////////////////////////////////////
	// Сведения о корректируемом документе
	ДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииДата", 	?(ЗначениеЗаполнено(ДокументРеализацииСсылка),ДокументРеализацииСсылка.Дата, Дата));
	СтруктураШапкиДокумента.Вставить("ДокументРеализацииСсылка", 	ДокументРеализацииСсылка);
    СтруктураШапкиДокумента.Вставить("ДокументОснование",	 		ДокументРеализации);
	СтруктураШапкиДокумента.Вставить("ДокументОснованиеДата",	 	?(ЗначениеЗаполнено(ДокументРеализации), ДокументРеализации.Дата, Дата));

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		ТаблицаПоТоварамВозврат,
		ТаблицаПоТоварамВзаиморасчеты,
		ТаблицаПоТоварамНДС
	) Экспорт

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                           , "Качество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СтавкаНДС"                          , "СтавкаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"                    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"       , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет"               , "ОтражатьТоварныйУчет");
	СтруктураПолей.Вставить("ДокументПартии"                     , "Ссылка.ИсправляемыйДокументРеализации");
	
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("КоличествоВзаиморасчеты"      , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("Количество"                   , "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0.00
	|		ТОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("КоличествоДокВзаиморасчеты"   , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("КоличествоДок"                , "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0.00
	|		ТОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("КоличествоВЕдиницахДокументаВзаиморасчеты" , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("КоличествоВЕдиницахДокумента" , "
	|ВЫБОР	КОГДА Количество - КоличествоДоИзменения > 0.00
	|		ТОГДА Количество - КоличествоДоИзменения
	|		КОГДА Количество - КоличествоДоИзменения < 0.00
	|		ТОГДА - (Количество - КоличествоДоИзменения)
	|		ИНАЧЕ Количество - КоличествоДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("СуммаВзаиморасчеты"           , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"                        , "
	|ВЫБОР	КОГДА Сумма - СуммаДоИзменения > 0.00
	|		ТОГДА Сумма - СуммаДоИзменения
	|		КОГДА Сумма - СуммаДоИзменения < 0.00
	|		ТОГДА - (Сумма - СуммаДоИзменения)
	|		ИНАЧЕ Сумма - СуммаДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("СуммаДокВзаиморасчеты"        , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаДок"                     , "
	|ВЫБОР	КОГДА Сумма - СуммаДоИзменения > 0.00
	|		ТОГДА Сумма - СуммаДоИзменения
	|		КОГДА Сумма - СуммаДоИзменения < 0.00
	|		ТОГДА - (Сумма - СуммаДоИзменения)
	|		ИНАЧЕ Сумма - СуммаДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("НДСВзаиморасчеты"             , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"                          , "
	|ВЫБОР	КОГДА СуммаНДС - СуммаНДСДоИзменения > 0.00
	|		ТОГДА СуммаНДС - СуммаНДСДоИзменения
	|		КОГДА СуммаНДС - СуммаНДСДоИзменения < 0.00
	|		ТОГДА - (СуммаНДС - СуммаНДСДоИзменения)
	|		ИНАЧЕ СуммаНДС - СуммаНДСДоИзменения
	|КОНЕЦ");
	СтруктураСложныхПолей.Вставить("НДСДокВзаиморасчеты"          , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("НДСДок"                       , "
	|ВЫБОР	КОГДА СуммаНДС - СуммаНДСДоИзменения > 0.00
	|		ТОГДА СуммаНДС - СуммаНДСДоИзменения
	|		КОГДА СуммаНДС - СуммаНДСДоИзменения < 0.00
	|		ТОГДА - (СуммаНДС - СуммаНДСДоИзменения)
	|		ИНАЧЕ СуммаНДС - СуммаНДСДоИзменения
	|КОНЕЦ");
	
	СтруктураСложныхПолей.Вставить("ФлагОперации"                 , "
	|ВЫБОР	КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0.00
	|		ТОГДА ИСТИНА
	|		КОГДА (Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент < 0.00
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|КОНЕЦ");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
		И НЕ ЗначениеЗаполнено(Проект)
	Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ТаблицаПоТоварамВозврат, ТаблицаПоТоварамВзаиморасчеты);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Качество"                           , "Качество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("СтавкаНДС"                          , "СтавкаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"                    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"       , "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет"               , "ОтражатьТоварныйУчет");
	СтруктураПолей.Вставить("ДокументПартии"                     , "Ссылка.ИсправляемыйДокументРеализации");
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество"  , "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("Сумма"       , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"         , "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаНДС"	 , "СуммаНДС - СуммаНДСДоИзменения");
	
	РезультатЗапросаПоТоварамНДС = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);
	ТаблицаПоТоварамНДС = РезультатЗапросаПоТоварамНДС.Выгрузить();
	ТаблицаПоТоварамНДС.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ПодготовитьТаблицуТоваровРегл(ТаблицаПоТоварамНДС, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ОтражатьТоварныйУчет", "ОтражатьТоварныйУчет");
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Количество"   , "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма"        , "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС"          , "СуммаНДС - СуммаНДСДоИзменения");

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
		И Не ЗначениеЗаполнено(Проект)
	Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварамНДС, СтруктураШапкиДокумента, Истина);

КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ПерезаполнятьДокумент = Истина;
	ИнтерактивноеЗаполнение = Ложь;
	Если ТипЗнч(Основание) = Тип("Структура") И Основание.Свойство("ДокументОснование") Тогда
		ПерезаполнятьДокумент = Основание.ПерезаполнятьДокумент;
		ИнтерактивноеЗаполнение = Основание.ИнтерактивноеЗаполнение;
		Основание = Основание.ДокументОснование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) <> Тип("Структура") Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации")
			И НЕ ЗначениеЗаполнено(Основание.ДокументРеализации)
		Тогда
			ДокументРеализации = Неопределено;
			ВызватьИсключение "В качестве основания нельзя использовать корректировочный документ с незаполненным основанием!";
		КонецЕсли;
		Если Основание = Ссылка Тогда
			ДокументРеализации = Неопределено;
			ВызватьИсключение "Нельзя вводить документ корректировки на основании самого себя!";
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И
			НЕ (ЗначениеЗаполнено(Основание) И
			Основание.Покупатели.Количество() = 1 И
			Основание.Контрагент = Основание.Покупатели[0].Покупатель) Тогда
			
			ДокументРеализации = Неопределено;
			ВызватьИсключение "Указан покупатель, отличный от комиссионера. Выберите счет-фактуру покупателя!";
			
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
			И Основание.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
		Тогда
			ДокументРеализации = Неопределено;
			ВызватьИсключение "Документ основание оформлен по договору комиссии, корректировка реализации не требуется!";
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") И
			ЗначениеЗаполнено(Основание.ДокументОснование) И
			ТипЗнч(Основание.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			Если Основание.ДокументОснование.Покупатели.Количество() = 1 И
				Основание.ДокументОснование.Контрагент = Основание.ДокументОснование.Покупатели[0].Покупатель Тогда
				
				ДокументРеализации = Основание.ДокументОснование;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			ДокументРеализации = Неопределено;
			ВызватьИсключение "В качестве основания можно выбрать только счет-фактуру, введенный на основании документа ""Отчет комиссионера о продажах""!";
		КонецЕсли;
		
		ПроверитьРеквизиты(Основание);
		
		ДокументСсылка    = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание, Ложь);
		ДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		
		#Если Клиент Тогда
		Если ЗначениеЗаполнено(ДокументОснование)
			И Основание <> ДокументОснование
			И Основание.Дата < ДокументОснование.Дата
		Тогда
			Если Вопрос("Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					ДокументОснование = Основание;
			КонецЕсли;
		Иначе
			ДокументОснование = Основание;
		КонецЕсли;
		#КонецЕсли
	
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ЗначениеЗаполнено(?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"), ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументСсылка.ВалютаДокумента))
			И ?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"), ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументСсылка.ВалютаДокумента) <> мВалютаРегламентированногоУчета
			И ЗначениеЗаполнено(ДокументСсылка.ДоговорКонтрагента)
			И ДокументСсылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
		Тогда
			ДокументРеализации = Неопределено;
			ВызватьИсключение "Для договоров в условных единицах, корректировка документов, оформленных в валюте, не поддерживается.
			|Корректируемый документ должен быть оформлен в рублях.";
		КонецЕсли;
	Иначе
		ДокументОснование = Основание;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ИнтерактивноеЗаполнение = Истина Тогда
		ДокументРеализации = ДокументОснование;
		КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
		Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументРеализации) Тогда
			Если Вопрос("Перезаполнить документ по основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ПерезаполнятьДокумент = Истина;
			Иначе
				ПерезаполнятьДокумент = Ложь;
				КорректироватьБУиНУ = Ложь;
			КонецЕсли;
		Иначе
			ПерезаполнятьДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

	Если НЕ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации"))
	Тогда
		ЗаполнитьСвойстваШапки();
	Иначе
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументРеализации = ДокументОснование;
			Организация        = ДокументРеализации.Организация;
		КонецЕсли;
		
		Дата                = НачалоДня(ТекущаяДата());
		КорректироватьБУиНУ = ?(ИнтерактивноеЗаполнение = Истина, КорректироватьБУиНУ, ДоступнаКорректировкаБУиНУ());;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ЗаполнитьСвойстваШапки();
			Если ПерезаполнятьДокумент = Истина Тогда
				ЗаполнитьПоДокументу();
			КонецЕсли;
		КонецЕсли;
		Если ПерезаполнятьДокумент = Истина Тогда
			СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(Ложь);
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
		И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
	Тогда

		Услуги.Очистить();

	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	Если КорректироватьНДС Тогда
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");
	Иначе
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Истина);
	КонецЕсли;
	
	ЗаполнитьСкладыВТЧ();
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "Реализация");
	ОбработатьСуммыДоКорректировки();
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) 
		   И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");

КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТоварамВозврат, ТаблицаПоТоварамВзаиморасчеты, ТаблицаПоТоварамНДС;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Если НЕ (КорректироватьБУиНУ ИЛИ КорректироватьНДС) Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		ТаблицаПоТоварамВозврат,
		ТаблицаПоТоварамВзаиморасчеты,
		ТаблицаПоТоварамНДС
	);
	
	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
		ИЛИ ОтражатьВНалоговомУчете
	Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	Если (СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		ИЛИ ТипЗнч(СтруктураШапкиДокумента.ДокументРеализацииСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"))
		И НЕ Отказ Тогда
		
		СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, ВидЦенности, Ценность, Партия, Услуга 
		|,СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал
		|,Комиссионный,Комитент,ДоговорКомиссии,ВалютаРасчетовСКомитентом
		|,СуммаСписания, Количество");
		
		//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
		ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоУслугам,СтруктураТаблицыВыручки,,Истина);
		
		ВыручкаПоТоварам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварамНДС,СтруктураТаблицыВыручки,,Истина);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВыручкаПоТоварам,ТаблицаВыручки);
		
		ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
		ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
		
		ТаблицаАвансов = Новый ТаблицаЗначений;
		ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаВыручки, ТаблицаАвансов, Отказ, Заголовок);
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.КорректироватьБУиНУ И НЕ Отказ Тогда
		
		ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);

		ТаблицаПоТоварамРеализация    = ТаблицаПоТоварам.СкопироватьКолонки();
		ТаблицаПоУслугамРеализация    = ТаблицаПоУслугам.СкопироватьКолонки();
		
		Для итератор = 0 По Макс(ТаблицаПоТоварам.Количество(), ТаблицаПоУслугам.Количество()) Цикл
			Если итератор <= ТаблицаПоТоварам.Количество() - 1 Тогда
				СтрокаТаблицы = ТаблицаПоТоварам.Получить(итератор);
				
				Если СтрокаТаблицы.ФлагОперации = ИСТИНА И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
					СтрокаТоваровРеализация = ТаблицаПоТоварамРеализация.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТоваровРеализация, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
			Если итератор <= ТаблицаПоУслугам.Количество() - 1 Тогда
				СтрокаТаблицы = ТаблицаПоУслугам.Получить(итератор);
				Если СтрокаТаблицы.Количество <> 0.00 И СтрокаТаблицы.ОтражатьТоварныйУчет Тогда
					СтрокаУслугРеализация = ТаблицаПоУслугамРеализация.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаУслугРеализация, СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварамВзаиморасчеты, ТаблицаПоУслугам);
		мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
		УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			ЭтотОбъект,
			мСтруктураПараметровВзаиморасчетов,
			СтруктураШапкиДокумента,
			Отказ,
			Заголовок
		);

		// Проверить заполнение ТЧ.
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
		
		ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
		
		// Проверить заполнение ТЧ "Состав набора".
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Номенклатура");
		СтруктураПолей.Вставить("Количество");
		СтруктураПолей.Вставить("Цена");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);
		
		// Движения по документу
		Если Не Отказ Тогда
			// Подготовим таблицу скидок для проведения.
			ТаблицаПоСкидкам = Новый ТаблицаЗначений();
			ДвиженияПоРегистрам(
				РежимПроведения,
				СтруктураШапкиДокумента,
				ТаблицаПоТоварамРеализация,
				ТаблицаПоСкидкам,
				ТаблицаПоУслугамРеализация,
				ТаблицаПоТоварамВозврат,
				ТаблицаПоВзаиморасчетам,
				ТаблицаПоРасчетам,
                Отказ,
				Заголовок
			);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)

	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");

	Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;

	//Если в копируемом документе было право отпуска без контроля взаиморасчетов, то в новом документе это право нужно давать явно.
	ОтключитьКонтрольВзаиморасчетов = Ложь;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Функция возвращает структуру со значениями учетной политики.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьЗначениеУчетнойПолитики() Экспорт

	Если мУчетнаяПолитика = Неопределено Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь);
	КонецЕсли;

	Возврат мУчетнаяПолитика;

КонецФункции // ПолучитьЗначениеУчетнойПолитики()

Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;
	
КонецПроцедуры

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
   ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
   Неопределено);
   
мИспользоватьОбменЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
