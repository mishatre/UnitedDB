Процедура СформироватьОтчет(ТабДок, ВидДоговора = Неопределено, Дата = Неопределено, Ответственный = Неопределено) Экспорт

	Макет = ЭтотОбъект.ПолучитьМакет("ДебиторскаяЗадолженностьПоМенеджерам");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Дог.Ответственный КАК Менеджер,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК Договор,
	|	СУММА(ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)) КАК ДебиторкаМенеджера,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаВзаиморасчетовОстаток, 0) КАК ДебиторкаОбщая
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Дата, ДоговорКонтрагента.ВидДоговора = &ВидДоговора) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец,
	|			СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Дата, ДоговорКонтрагента.ВидДоговора = &ВидДоговора) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец) КАК ВложенныйЗапрос
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец = ВложенныйЗапрос.ДоговорКонтрагентаВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ЗаказПокупателя.Ответственный) КАК Ответственный,
	|			ЗаказПокупателя.ДоговорКонтрагента КАК Договор
	|		ИЗ
	|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателя.ДоговорКонтрагента) КАК Дог
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = Дог.Договор
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 1
	|	И ВложенныйЗапрос.СуммаВзаиморасчетовОстаток > 1
	|	И НЕ Дог.Ответственный В (&Ответственный)
	|	И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.амбАфиллирован = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаВзаиморасчетовОстаток, 0),
	|	Дог.Ответственный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дог.Ответственный.Наименование,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.Наименование
	|ИТОГИ
	|	СУММА(ДебиторкаМенеджера),
	|	МАКСИМУМ(ДебиторкаОбщая)
	|ПО
	|	Менеджер,
	|	Контрагент";
	 
    	

	
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
			
	 ЭтоАдмин = Ложь;	 
	Если не Справочники.ГруппыПользователей.админ.ПользователиГруппы.Найти(ПараметрыСеанса.ТекущийПользователь.Ссылка) = Неопределено Тогда
	 ЭтоАдмин = Истина;
	КонецЕсли;
	Если ЭтоАдмин тогда
	 Запрос.УстановитьПараметр("Ответственный", Справочники.Пользователи.ПустаяСсылка());
    Иначе 
		МассивПользователи = новый Массив();
		
		МассивПользователи.Добавить(Справочники.Пользователи.ПустаяСсылка());
		
		Выборка = Справочники.Пользователи.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
		 Если не Выборка.Ссылка = ПараметрыСеанса.ТекущийПользователь.Ссылка Тогда			
		  МассивПользователи.Добавить(Выборка.Ссылка);
	  	 КонецЕсли;
	  
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ответственный", МассивПользователи );
	 
	КонецЕсли;
	
	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьМенеджер = Макет.ПолучитьОбласть("Менеджер");
	ОбластьКонтрагент = Макет.ПолучитьОбласть("Контрагент");
	ОбластьКонтрагентСиний = Макет.ПолучитьОбласть("КонтрагентСиний");
	ОбластьКонтрагентКрасный = Макет.ПолучитьОбласть("КонтрагентКрасный");
	
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
    //Менеджер
	ВыборкаМенеджер = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаМенеджер.Следующий() Цикл
		ОбластьМенеджер.Параметры.Заполнить(ВыборкаМенеджер);
		ОбластьМенеджер.Параметры.ДебиторкаОбщая = 0;
		ТабДок.Вывести(ОбластьМенеджер, ВыборкаМенеджер.Уровень());

		ВыборкаКонтрагент = ВыборкаМенеджер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        //Контрагент
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			//Заполним переменные параметров расшифровки...
			ПарамКонтрагент 	= Новый Структура("Контрагент,ТипРасшифровки", ВыборкаКонтрагент.Контрагент, "РасшифровкаКонтрагента");
			ПарамДебиторкаОбщая = Новый Структура("Контрагент,ТипРасшифровки,Сумма",ВыборкаКонтрагент.Контрагент, "РасшифровкаДебиторки", ВыборкаКонтрагент.ДебиторкаОбщая);
			ПарамПоБазам	 	= Новый Структура("Контрагент,ТипРасшифровки", ВыборкаКонтрагент.Контрагент, "РасшифровкаПоБазам");
			ПарамДолг			= Новый Структура("Контрагент,ТипРасшифровки", ВыборкаКонтрагент.Контрагент, "РасшифровкаДолгов");
			ПарамДебиторкаМенеджера = Новый Структура("Контрагент,ТипРасшифровки,Сумма",ВыборкаКонтрагент.Контрагент, "РасшифровкаМенеджера", ВыборкаКонтрагент.ДебиторкаОбщая);
			
			//Если ВыборкаКонтрагент.ОтгрузкаЗапрещена Тогда
			//	ОбластьКонтрагентКрасный.Параметры.ПарамКонтрагент = ПарамКонтрагент;
			//	ОбластьКонтрагентКрасный.Параметры.ПарамДебиторкаОбщая = ПарамДебиторкаОбщая;
			//	ОбластьКонтрагентКрасный.Параметры.ПарамПоБазам = ПарамПоБазам;
			//	ОбластьКонтрагентКрасный.Параметры.Запрет = ПарамДолг;
			//	ОбластьКонтрагентКрасный.Параметры.ЗапретОтгрузки = "!Отгрузка запрещена!";
			//	
			//	ОбластьКонтрагентКрасный.Параметры.Заполнить(ВыборкаКонтрагент);						
			//	ТабДок.Вывести(ОбластьКонтрагентКрасный, ВыборкаКонтрагент.Уровень());    			
			//	
			//Иначе
				Если ВыборкаКонтрагент.ДебиторкаОбщая = ВыборкаКонтрагент.ДебиторкаМенеджера Тогда				
				ОбластьКонтрагентСиний.Параметры.ПарамКонтрагент = ПарамКонтрагент;
				ОбластьКонтрагентСиний.Параметры.Заполнить(ВыборкаКонтрагент);	
				ОбластьКонтрагентСиний.Параметры.ПарамДебиторкаОбщая = ПарамДебиторкаОбщая;
				ОбластьКонтрагентСиний.Параметры.ПарамПоБазам = ПарамПоБазам;
				ОбластьКонтрагентСиний.Параметры.парамДебиторкаМенеджера =ПарамДебиторкаМенеджера;

				ТабДок.Вывести(ОбластьКонтрагентСиний, ВыборкаКонтрагент.Уровень());	
			Иначе	
				ОбластьКонтрагент.Параметры.ПарамКонтрагент = ПарамКонтрагент;  
				ОбластьКонтрагент.Параметры.ПарамДебиторкаОбщая = ПарамДебиторкаОбщая;
				ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
				ОбластьКонтрагент.Параметры.ПарамПоБазам = ПарамПоБазам;
				ОбластьКонтрагентСиний.Параметры.парамДебиторкаМенеджера =ПарамДебиторкаМенеджера;


				ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень());       
		    КонецЕсли;
		
			ВыборкаДетали = ВыборкаКонтрагент.Выбрать();

			Пока ВыборкаДетали.Следующий() Цикл
				ПарамДоговор 	= Новый Структура("Договор,ТипРасшифровки", ВыборкаДетали.Договор, "РасшифровкаДоговора");
				ОбластьДетальныхЗаписей.Параметры.ПарамДоговор = ПарамДоговор;
				ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
				ОбластьДетальныхЗаписей.Параметры.ДебиторкаОбщая = 0;
				ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.ПоказатьУровеньГруппировокСтрок(1);
	Если ЭтоАдмин Тогда
	 ТабДок.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
     //Выведем дебиторскую задолженность бюджетных учреждений
	Макет = ПолучитьМакет("ПросроченнаяДебПоБюджетникам");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос1.Ответственный КАК Ответственный,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.Ссылка КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК Договор,
	|	СУММА(ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаВзаиморасчетовРасход, 0)) КАК СуммаДолга,
	|	СУММА(ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)) КАК ДебиторкаНаНачало,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СуммаВзаиморасчетовРасход, 0)) КАК ОплатыЗаПериод
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаНач, ДоговорКонтрагента.ВидДоговора = &ПарамВидДоговора) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетыСКонтрагентамиОбороты.ДоговорКонтрагента КАК ДоговорКонтрагентаВладелецСсылка,
	|			СУММА(РасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход) КАК СуммаВзаиморасчетовРасход
	|		ИЗ
	|			РегистрНакопления.РасчетыСКонтрагентами.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					,
	|					ДоговорКонтрагента В
	|							(ВЫБРАТЬ
	|								РеализацияТоваровУслуг.ДоговорКонтрагента КАК Ссылка
	|							ИЗ
	|								Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|							ГДЕ
	|								РеализацияТоваровУслуг.Проведен = ИСТИНА
	|								И РеализацияТоваровУслуг.Дата <= &ДатаНач)
	|						И ДоговорКонтрагента.ВидДоговора = &ПарамВидДоговора) КАК РасчетыСКонтрагентамиОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСКонтрагентамиОбороты.ДоговорКонтрагента) КАК ВложенныйЗапрос
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВложенныйЗапрос.ДоговорКонтрагентаВладелецСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ЗаказПокупателя.Ответственный) КАК Ответственный,
	|			ЗаказПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателя.ДоговорКонтрагента) КАК ВложенныйЗапрос1
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВложенныйЗапрос1.ДоговорКонтрагента
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 1
	|	И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.амбАфиллирован = ЛОЖЬ
	|	И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.амбКоммерческий = ЛОЖЬ
	|	И ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) - ЕСТЬNULL(ВложенныйЗапрос.СуммаВзаиморасчетовРасход, 0) <> 0
	|	И ВЫБОР
	|			КОГДА &ОтборПоменеджеру
	|				ТОГДА ВложенныйЗапрос1.Ответственный = &Менеджер
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.Ссылка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВложенныйЗапрос1.Ответственный
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец.Наименование
	|ИТОГИ
	|	СУММА(СуммаДолга),
	|	СУММА(ДебиторкаНаНачало),
	|	СУММА(ОплатыЗаПериод)
	|ПО
	|	Ответственный,
	|	Контрагент";

	Запрос.УстановитьПараметр("Менеджер", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтборПоменеджеру",не ЭтоАдмин );
	Запрос.УстановитьПараметр("ПарамВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем );
    Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата()-(180*60*60*24));
    Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
   

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьОтветственный = Макет.ПолучитьОбласть("Ответственный");
	ОбластьКонтрагент = Макет.ПолучитьОбласть("Контрагент");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	//ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаОтветственный = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаОтветственный.Следующий() Цикл
		ОбластьОтветственный.Параметры.Заполнить(ВыборкаОтветственный);
		ТабДок.Вывести(ОбластьОтветственный, ВыборкаОтветственный.Уровень());

		ВыборкаКонтрагент = ВыборкаОтветственный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаКонтрагент.Следующий() Цикл
			ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
			ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень());

			ВыборкаДетали = ВыборкаКонтрагент.Выбрать();

			Пока ВыборкаДетали.Следующий() Цикл
				ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
				ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
    ТабДок.ПоказатьУровеньГруппировокСтрок(1);
	Если ЭтоАдмин Тогда
	 ТабДок.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;


КонецПроцедуры

Процедура ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	// Вставить содержимое обработчика.
	Если ТипЗнч(Расшифровка) = Тип("Структура")Тогда		
		
		СтандартнаяОбработка = Ложь; 
		
		Если Расшифровка.ТипРасшифровки =  "РасшифровкаКонтрагента" Тогда
			
			//Расшифровка.Контрагент.ПолучитьФорму().Открыть();
			ФормаСписка = Документы.ЗаказПокупателя.ПолучитьФормуСписка();
			Отбор = ФормаСписка.Отбор;	 
			Отбор["Контрагент"].Использование = Истина;
			Отбор["Контрагент"].Значение = Расшифровка.Контрагент.Ссылка;
			Отбор["Контрагент"].ВидСравнения =  ВидСравнения.Равно;
			ФормаСписка.Открыть();
				
		ИначеЕсли Расшифровка.ТипРасшифровки = "РасшифровкаДебиторки" Тогда		
			
			ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
			ОтчетКонтрагента.УстановитьНачальныеНастройки();
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Порядок.Очистить();
			
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
				
			ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"];
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения =  ВидСравнения.Равно;
			ЭлементОтбора.Значение = Расшифровка.Контрагент.ССылка;
			
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Период");
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор");
				
			ОтчетКонтрагента.УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
			
			ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
				
			ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
			ФормаОтчета.Открыть();
			ФормаОтчета.ОбновитьОтчет();
			
        ИначеЕсли Расшифровка.ТипРасшифровки = "РасшифровкаМенеджера" Тогда		
			
			ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
			ОтчетКонтрагента.УстановитьНачальныеНастройки();
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Порядок.Очистить();
			
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента.вббОтветственный");

				
			ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"];
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения =  ВидСравнения.Равно;
			ЭлементОтбора.Значение = Расшифровка.Контрагент.ССылка;
			
			ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["ДоговорКонтрагента.вббОтветственный"];
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения =  ВидСравнения.Равно;
			ЭлементОтбора.Значение = ПараметрыСеанса.ТекущийПользователь;
			

			
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Период");
			ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор");
				
			ОтчетКонтрагента.УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
			
			ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
				
			ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
			ФормаОтчета.Открыть();
			ФормаОтчета.ОбновитьОтчет();
								
		ИначеЕсли Расшифровка.ТипРасшифровки = "РасшифровкаДоговора" Тогда
				
			ФормаОтчета = КритерииОтбора.ДокументыПоДоговоруКонтрагента.ПолучитьФорму("ФормаСписка");
			ФормаОтчета.ПараметрОтборПоЗначению = Расшифровка.Договор;   
	//				ФормаОтчета.ЭлементыФормы.ОтборЗначениеОтбора.Значение = Расшифровка.Договор;
			ФормаОтчета.ЭлементыФормы.Контрагент.Значение = Расшифровка.Договор.Владелец.Ссылка;
			ФормаОтчета.Открыть();
		ИначеЕсли Расшифровка.ТипРасшифровки = "РасшифровкаПоБазам" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(Дебиторка.ВекторТекущая, 0) КАК Вектор,
			|	ЕСТЬNULL(Дебиторка.ЕЛКТекущая, 0) КАК Елк,
			|	ЕСТЬNULL(Дебиторка.АналитикаТекущая, 0) КАК Аналитика
			|ИЗ
			|	РегистрСведений.Дебиторка КАК Дебиторка
			|ГДЕ
			|	Дебиторка.ИНН = &ИНН
			|	И Дебиторка.амбКодСинхр = &амбКодСинхр";
			
			Запрос.УстановитьПараметр("ИНН",Расшифровка.Контрагент.ИНН );  
			Запрос.УстановитьПараметр("амбКодСинхр",Расшифровка.Контрагент.амбКодСинхр );

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Предупреждение("Дебиторская задолженность по базам: ЕЛК ="+Выборка.ЕЛК +",Вектор ="+Выборка.Вектор+ ",Аналитика ="+Выборка.Аналитика );  			
			
			КонецЕсли;
					
			
		ИначеЕсли Расшифровка.ТипРасшифровки = "РасшифровкаДолгов" Тогда
			КонтрагентДляРасшифровки = Расшифровка.Контрагент.Ссылка;
			ФормаОтчет = Отчеты.амбАнализПрикрытойОтгрузки.ПолучитьФорму();
			ФормаОтчет.Контрагент = КонтрагентДляРасшифровки;
			ФормаОтчет.Открыть();
			ФормаОтчет.Сформировать();
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры