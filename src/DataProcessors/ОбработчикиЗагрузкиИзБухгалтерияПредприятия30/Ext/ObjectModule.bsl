#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики загрузки конвертации БухгалтерияПредприятия --> УправлениеТорговлей {83fb7fff-205c-11e4-b98f-c86000df10de}                                                                            
// 
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. После отладки рекомендуется
// скопировать текст модуля в буфер обмена и импортировать его в базу
// "Конвертация данных".
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ
// Данный раздел изменять запрещено.

Перем Параметры;
Перем Алгоритмы;
Перем Запросы;
Перем УзелДляОбмена;
Перем ОбщиеПроцедурыФункции;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)
// В данном разделе разрешено изменять реализацию процедур.

Процедура Конвертация_ПередЗагрузкойДанных(ФайлОбмена, Отказ) Экспорт

	Параметры.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Параметры.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ДокументыЗагруженныеИзНесоовпадающихТиповДокументов", Новый Массив());
	Параметры.Вставить("ДокументыСОпределениемДопРеквизитов",Новый Массив);

КонецПроцедуры

Процедура Конвертация_ПослеЗагрузкиДанных() Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() И Параметры.ДокументыСОпределениемДопРеквизитов.Количество() > 0 Тогда
		
		Для Каждого ДокументСОпределениемДопРеквизитов Из Параметры.ДокументыСОпределениемДопРеквизитов Цикл
			
			ТипОбъекта = ТипЗнч(ДокументСОпределениемДопРеквизитов.СсылкаНаДокумент);
			Объект = ДокументСОпределениемДопРеквизитов.СсылкаНаДокумент.ПолучитьОбъект();
			ИмяТипаДокумента = Объект.Метаданные().Имя;
			
			Если ИмяТипаДокумента = "РеализацияТоваровУслуг" Тогда
				
				// Общие действия для всех или почти всех видов источников
				Объект.ОтражатьВУправленческомУчете = Истина;
				Объект.ОтражатьВБухгалтерскомУчете = Истина;
				Объект.ОтражатьВНалоговомУчете = Истина;
				Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
					Если ДокументСОпределениемДопРеквизитов.ИмяПравила <> "АктОбОказанииПроизводственныхУслуг" Тогда
						Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
					Иначе
						Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот;
					КонецЕсли;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Объект.ВидПередачи) Тогда
					Объект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
				КонецЕсли;
				ФлагДействия = "ОчиститьТабличнуюЧасть";
				УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
				Если ДокументСОпределениемДопРеквизитов.ИмяПравила <> "АктОбОказанииПроизводственныхУслуг" Тогда
					ЗаполнитьЕдиницыИзмерения (Объект);
					ЗаполнитьСпособСписания (Объект);
					ЗаполнитьСкладыВТЧ (Объект);
					ЗаполнитьКачествоВТЧ (Объект);
				КонецЕсли;
				Если Объект.ДокументыРасчетовСКонтрагентом.Количество()>0 Тогда
					мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
					мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
					СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Объект.Дата);
					КурсУпр = СтруктураКурса.Курс;
					КратностьУпр = СтруктураКурса.Кратность;
					Для Каждого СтрокаЗачетаАвансов Из Объект.ДокументыРасчетовСКонтрагентом Цикл
						СтрокаЗачетаАвансов.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗачетаАвансов.СуммаВзаиморасчетов, мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета,
						КурсУпр, 1, КратностьУпр, 1);
					КонецЦикла;
				КонецЕсли;
				// Индивидуальные действия для каждого вида источника
				Если 	  ДокументСОпределениемДопРеквизитов.ИмяПравила = "РеализацияОтгруженныхТоваров" Тогда
					// Пока не требуется
				ИначеЕсли ДокументСОпределениемДопРеквизитов.ИмяПравила = "ПередачаОСРеализацияОтгруженныхТоваров" Тогда
					УслугаДляНеторговыхОпераций = Константы.УслугаДляНеторговыхОпераций.Получить();
					Для каждого СтрокаТЧ Из Объект.Услуги Цикл
						Если ЗначениеЗаполнено(УслугаДляНеторговыхОпераций) Тогда
							СтрокаТЧ.Номенклатура = УслугаДляНеторговыхОпераций;
							ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТЧ, Объект);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ДокументСОпределениемДопРеквизитов.ИмяПравила = "АктОбОказанииПроизводственныхУслуг" Тогда
					// Пока не требуется
				ИначеЕсли ДокументСОпределениемДопРеквизитов.ИмяПравила = "ПередачаНМА" Тогда	
					УслугаДляНеторговыхОпераций = Константы.УслугаДляНеторговыхОпераций.Получить();
					Для каждого СтрокаТЧ Из Объект.Услуги Цикл
						Если ЗначениеЗаполнено(УслугаДляНеторговыхОпераций) Тогда
							СтрокаТЧ.Номенклатура = УслугаДляНеторговыхОпераций;
							СтрокаТЧ.Содержание = УслугаДляНеторговыхОпераций;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ДокументСОпределениемДопРеквизитов.ИмяПравила = "ПередачаОС" Тогда
					УслугаДляНеторговыхОпераций = Константы.УслугаДляНеторговыхОпераций.Получить();
					Для каждого СтрокаТЧ Из Объект.Услуги Цикл
						Если ЗначениеЗаполнено(УслугаДляНеторговыхОпераций) Тогда
							СтрокаТЧ.Номенклатура = УслугаДляНеторговыхОпераций;
							ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТЧ, Объект);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ДокументСОпределениемДопРеквизитов.ИмяПравила = "РеализацияТоваровУслуг" Тогда
					// Пока не требуется
				КонецЕсли;
			ИначеЕсли ИмяТипаДокумента = "КомплектацияНоменклатуры" Тогда
				Объект.ОтражатьВУправленческомУчете = Истина;
				Объект.ОтражатьВБухгалтерскомУчете = Истина;
				Объект.ОтражатьВНалоговомУчете = Истина;
				Объект.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				
				ЗаполнитьЕдиницыИзмерения (Объект);
				
				ЗаполнитьСпособСписания (Объект);
				
				ЗаполнитьСкладыВТЧ (Объект);
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Номенклатура,
				|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
				|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
				|		ПО Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец
				|			И Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
				|ГДЕ
				|	Номенклатура.Ссылка = &Номенклатура";
				Выборка = Запрос.Выполнить().Выбрать();
				
				СтруктураПоиска = Новый Структура("Номенклатура", Объект.Номенклатура);
				Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
					
					Объект.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
					Объект.Коэффициент = Выборка.Коэффициент;
					
				Иначе
					
					НоваяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					НоваяЕдиницаОбъект.Наименование            = СокрЛП(Объект.Номенклатура.БазоваяЕдиницаИзмерения);
					НоваяЕдиницаОбъект.ЕдиницаПоКлассификатору = Объект.Номенклатура.БазоваяЕдиницаИзмерения;
					НоваяЕдиницаОбъект.Коэффициент             = 1;
					НоваяЕдиницаОбъект.Владелец                = Объект.Номенклатура;
					ЗаписатьОбъектВИБ(НоваяЕдиницаОбъект, Тип("СправочникСсылка.ЕдиницыИзмерения"));
					НоваяЕдиница = НоваяЕдиницаОбъект.Ссылка;
					Объект.ЕдиницаИзмерения = НоваяЕдиница;
					Объект.Коэффициент = 1;
					
					НоменклатураОбъект = Объект.Номенклатура.ПолучитьОбъект();
					НоменклатураОбъект.ЕдиницаХраненияОстатков = НоваяЕдиница;
					НоменклатураОбъект.ЕдиницаДляОтчетов = НоваяЕдиница;
					ЗаписатьОбъектВИБ(НоменклатураОбъект, Тип("СправочникСсылка.Номенклатура"));
					
				КонецЕсли;
			ИначеЕсли ИмяТипаДокумента = "ОплатаОтПокупателяПлатежнойКартой" Тогда
				// Найдем договор эквайринга по договору взаиморасчетов эквайрера и рассчитаем торговую уступку
				Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовЭквайрера) Тогда
					Запрос = Новый Запрос();
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ДоговорыЭквайринга.Ссылка
					|ИЗ
					|	Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
					|ГДЕ
					|	ДоговорыЭквайринга.ДоговорВзаиморасчетов = &ДоговорВзаиморасчетов";
					Запрос.УстановитьПараметр("ДоговорВзаиморасчетов", Объект.ДоговорВзаиморасчетовЭквайрера);
					Результат = Запрос.Выполнить();
					Если Не Результат.Пустой() Тогда
						Выборка = Результат.Выбрать();
						Выборка.Следующий();
						Объект.ДоговорЭквайринга = Выборка.Ссылка;
						Объект.ПроцентТорговойУступки = УправлениеРозничнойТорговлей.ПолучитьПроцентТорговойУступки(
							Объект.ДоговорЭквайринга, Объект.ВидОплаты);
						Объект.СуммаТорговойУступки = Объект.СуммаДокумента * Объект.ПроцентТорговойУступки / 100;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ЗаписатьОбъектВИБ(Объект,ТипОбъекта);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура Конвертация_ПриПолученииИнформацииОбУдалении(Объект, Отказ) Экспорт

	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) 
		ИЛИ Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
			
			Отказ  = Истина;
			ТипОбъекта = ТипЗнч(Объект);
			
			Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) 
				И НЕ Объект.Предопределенный Тогда
				
				Объект.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			
			
			Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
				
				Если Объект.Проведен Тогда
					
					ОтменитьПроведениеОбъектаВИБ(Объект, ТипОбъекта);
					
				КонецЕсли;
				
				Объект.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Процедура Конвертация_ПослеПолученияИнформацииОбУзлахОбмена(УзелОбменаЗагрузкаДанных) Экспорт

	Параметры.Вставить("ПодразделениеПоУмолчанию", УзелОбменаЗагрузкаДанных.ПодразделениеПоУмолчанию);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Кассы.Ссылка КАК Касса,
	|	Кассы.Владелец КАК Организация
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Ссылка В (&Кассы)
	|";
	Запрос.УстановитьПараметр("Кассы", УзелОбменаЗагрузкаДанных.Кассы.Выгрузить().ВыгрузитьКолонку("Касса"));
	Параметры.Вставить("КассыОрганизации", Запрос.Выполнить().Выгрузить());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКО_АвансовыйОтчет_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПоступления) Тогда
		Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	Для каждого СтрокаТЧ Из Объект.Прочее Цикл
		СтрокаТЧ.СтатьяЗатрат = СтрокаТЧ.Номенклатура.СтатьяЗатрат;
		СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппаЗатрат;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_АктОбОказанииПроизводственныхУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "АктОбОказанииПроизводственныхУслуг";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_ВидыКонтактнойИнформации_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ Объект.ЭтоНовый() Тогда
		//необходимо сохранить информацию , если это вид контактной информации по контактному лицу контрагента
		Если Объект.ВидОбъектаКонтактнойИнформации  = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица
			И Объект.Ссылка.ВидОбъектаКонтактнойИнформации  = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов Тогда
			
			Объект.ВидОбъектаКонтактнойИнформации = Объект.Ссылка.ВидОбъектаКонтактнойИнформации;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратМатериаловИзЭксплуатации_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ВозвратТоваровОтПокупателя_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ВидПоступления) Тогда
		Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);
	
	Если Объект.ВалютаДокумента <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсДокумент = СтруктураКурсаДокумента.Курс;
		КратностьДокумент = СтруктураКурсаДокумента.Кратность;
	
		СтруктураКурсаРегл = МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаРегламентированногоУчета"), Объект.Дата);
		КурсРегл = СтруктураКурсаРегл.Курс;
		КратностьРегл = СтруктураКурсаРегл.Кратность;
	
		Для Каждого СторокТаблицы Из Объект.Товары Цикл
			СторокТаблицы.Себестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СторокТаблицы.Себестоимость, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Объект.ВалютаДокумента,
												КурсРегл, КурсДокумент, КратностьРегл, КратностьДокумент);		
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратТоваровПоставщику_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ВидПередачи) Тогда
		Объект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	КонецЕсли;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ВозвратТоваровПоставщикуИзНТТ_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ГТДИмпорт_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);

КонецПроцедуры

Процедура ПКО_ДоговорыКонтрагентов_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если НЕ Объект.ЭтоГруппа Тогда
		Если (Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			ИЛИ Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) И НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Объект.ТипЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
		ИначеЕсли (Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) И НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			Объект.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	
		Если Объект.ЭтоНовый() и Объект.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			Объект.ВестиПоДокументамРасчетовСКонтрагентом = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ДоговорыКонтрагентов_ПоследовательностьПолейПоиска(НомерВариантаПоиска, СвойстваПоиска, ПараметрыОбъекта, ПрекратитьПоиск,
	СсылкаНаОбъект, УстанавливатьУОбъектаВсеСвойстваПоиска, СтрокаИменСвойствПоиска) Экспорт

	Если СвойстваПоиска["ЭтоГруппа"] = Истина Тогда
		СтрокаИменСвойствПоиска = "Наименование, ЭтоГруппа";
	Иначе
		СтрокаИменСвойствПоиска = "Наименование, Владелец, ВалютаВзаиморасчетов, ВедениеВзаиморасчетов, Организация, ВидДоговора, ЭтоГруппа";
	Конецесли;

КонецПроцедуры

Процедура ПКО_ЗаказПокупателя_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ЗаполнитьЕдиницыИзмерения (Объект);

КонецПроцедуры

Процедура ПКО_ИнвентаризацияТоваровНаСкладе_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);
	
	ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) И ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(СтрокаТабличнойЧасти.Цена, ВалютаРегламентированногоУчета,
					   ВалютаУправленческогоУчета, , , Объект.Дата);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Объект);
			СтрокаТабличнойЧасти.СуммаУчет = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоУчет;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_КомплектацияНоменклатуры_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "КомплектацияНоменклатуры";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_КонтактнаяИнформация_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Для НомерЗаписи = 1 По Объект.Количество() Цикл
		ЗаписьРегистра = Объект[НомерЗаписи - 1];
		Если ЗаписьРегистра.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЗаписьРегистра);
			Если ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
				ЗаписьРегистра.Представление = ПредставлениеАдреса;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_КорректировкаДолга_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;

КонецПроцедуры

Процедура ПКО_Номенклатура_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если Объект.ЭтоНовый() Тогда
		ЗаписатьОбъектВИБ(Объект, Тип("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры) И НЕ Объект.ЭтоГруппа Тогда
		
		Запрос = Новый Запрос;
		Если Объект.Услуга Тогда
			ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		Иначе
			ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Объект.ВидНоменклатуры = Выборка.Ссылка;
		Иначе
			ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
			ВидНоменклатурыОбъект.Наименование = СокрЛП(ТипНоменклатуры);
			ВидНоменклатурыОбъект.ТипНоменклатуры = ТипНоменклатуры;
			ВидНоменклатурыОбъект.Записать();
			Объект.ВидНоменклатуры = ВидНоменклатурыОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Объект.ЭтоГруппа И НЕ (Объект.Услуга И НЕ ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения)) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаХраненияОстатков) И НЕ Объект.ЭтоГруппа Тогда
				ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, Объект.Ссылка);
				Если ВыборкаЕдиниц.Следующий() Тогда
					НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
				Иначе
					НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(Объект.БазоваяЕдиницаИзмерения);
					НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = Объект.БазоваяЕдиницаИзмерения;
					НайденнаяЕдиницаОбъект.Коэффициент             = 1;
					НайденнаяЕдиницаОбъект.Владелец                = Объект.Ссылка;
					НайденнаяЕдиницаОбъект.УстановитьНовыйКод();
					
					ЗаписатьОбъектВИБ(НайденнаяЕдиницаОбъект, Тип("СправочникСсылка.ЕдиницыИзмерения"));
					НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
				КонецЕсли;
				
				Объект.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
				Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов) Тогда
					Объект.ЕдиницаДляОтчетов = НайденнаяЕдиница;
				КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.ЕдиницаХраненияОстатков)
				И НЕ ЗначениеЗаполнено(Объект.ЕдиницаХраненияОстатков.Наименование) Тогда
				НайденнаяЕдиницаОбъект = Объект.ЕдиницаХраненияОстатков.ПолучитьОбъект();
				НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(Объект.БазоваяЕдиницаИзмерения);
				НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = Объект.БазоваяЕдиницаИзмерения;
				ЗаписатьОбъектВИБ(НайденнаяЕдиницаОбъект, Тип("СправочникСсылка.ЕдиницыИзмерения"));		
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

Процедура ПКО_НоменклатурныеГруппы_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если Не Объект.ЭтоГруппа И Не ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) Тогда
		Объект.БазоваяЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОплатаПлатежнойКартой_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "ОплатаПлатежнойКартой";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_ОприходованиеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);
	
	Если Объект.ОтражатьВУправленческомУчете Тогда
		ВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
		ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) И ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
			Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(СтрокаТабличнойЧасти.Цена, ВалютаРегламентированногоУчета,
						   ВалютаУправленческогоУчета, , , Объект.Дата);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Объект);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Организации_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если Объект.ЭтоНовый() Тогда
		Объект.ОтражатьВРегламентированномУчете = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОтчетКомиссионераОПродажах_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ФлагДействия = "ОчиститьТабличнуюЧасть";
	УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТЧ, Объект);
	КонецЦикла;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Объект.Дата);
	КурсУпр = СтруктураКурса.Курс;
	КратностьУпр = СтруктураКурса.Кратность;
	Для Каждого СтрокаЗачетаАвансов Из Объект.ДокументыРасчетовСКонтрагентом Цикл
		СтрокаЗачетаАвансов.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗачетаАвансов.СуммаВзаиморасчетов, мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета,
											КурсУпр, 1, КратностьУпр, 1);
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ОтчетКомитентуОПродажах_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);

КонецПроцедуры

Процедура ПКО_ОтчетОРозничныхПродажах_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ОтчетПроизводстваЗаСмену_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ПередачаМатериаловВЭксплуатацию_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ПередачаНМА_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "ПередачаНМА";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_ПередачаОборудованияВМонтаж_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ПередачаОС_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "ПередачаОС";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_ПередачаОСРеализацияОтгруженныхТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "ПередачаОСРеализацияОтгруженныхТоваров";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_ПеремещениеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Объект.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, Объект);
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПлатежноеПоручениеВходящее_ПриЗагрузкеОбъекта(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если Объект <> Неопределено Тогда
		Если Параметры.ДокументыЗагруженныеИзНесоовпадающихТиповДокументов.Найти(Объект.Ссылка) <> Неопределено Тогда
			НеЗамещатьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПлатежноеПоручениеВходящее_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если (Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаНДС") = Объект.РасшифровкаПлатежа.Итог("СуммаНДС"))
		Тогда
		Объект.РасшифровкаПлатежа.Загрузить(Объект.Ссылка.РасшифровкаПлатежа.Выгрузить());
	Иначе
		Если ТипЗнч(ПараметрыОбъекта) = Тип("Соответствие") Тогда
			РасшифровкаПлатежаТабличнаяЧасть = ПараметрыОбъекта.Получить("РасшифровкаПлатежаТабличнаяЧасть");
			Если РасшифровкаПлатежаТабличнаяЧасть <> Неопределено Тогда
				НомерСтроки = 0.00;
				Для Каждого СтрокаПараметров Из РасшифровкаПлатежаТабличнаяЧасть Цикл
					Если СтрокаПараметров.ОснованиеОтражаетБухгалтерскуюОперацию = Ложь Тогда
						СтрокаТЧ = Объект.РасшифровкаПлатежа.Получить(НомерСтроки);
						Если ЗначениеЗаполнено(СтрокаТЧ.ДокументРасчетовСКонтрагентом)
							И СтрокаТЧ.ДокументРасчетовСКонтрагентом.ПолучитьОбъект() = Неопределено
						Тогда
							СтрокаТЧ.ДокументРасчетовСКонтрагентом = Неопределено;
						КонецЕсли;
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1.00;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ФлагДействия = "ОчиститьРеквизитВТабличнойЧасти";
		УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		
		Объект.ОтраженоВОперУчете = Истина;
		Объект.ОтражатьВБухгалтерскомУчете = Истина;
		Объект.ОтражатьВНалоговомУчете = Истина;
		Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если ТипЗнч(СтрокаРасшифровкиПлатежа.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
				И НЕ Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				СтрокаРасшифровкиПлатежа.Сделка = Неопределено;
			ИначеЕсли ТипЗнч(СтрокаРасшифровкиПлатежа.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
				И Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				СтрокаРасшифровкиПлатежа.Сделка = Неопределено;
			КонецЕсли;
		КонецЦикла;
	
		Объект.Подразделение = Параметры.ПодразделениеПоУмолчанию;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПлатежноеПоручениеВходящее_ПоследовательностьПолейПоиска(НомерВариантаПоиска, СвойстваПоиска, ПараметрыОбъекта, ПрекратитьПоиск,
	СсылкаНаОбъект, УстанавливатьУОбъектаВсеСвойстваПоиска, СтрокаИменСвойствПоиска) Экспорт

	Если ТипЗнч(СвойстваПоиска) = Тип("Соответствие")
		И СвойстваПоиска.Получить("{УникальныйИдентификатор}") <> Неопределено
		И ТипЗнч(СвойстваПоиска["{УникальныйИдентификатор}"]) = Тип("Строка")
	Тогда
		СсылкаДляПоискаАккредитивПолученный = Неопределено;
		СсылкаДляПоискаИнкассовоеПоручениеПереданное = Неопределено;
		СсылкаДляПоискаПлатежноеТребованиеВыставленное = Неопределено;
		СсылкаДляПоискаПлатежныйОрдерПоступлениеДенежныхСредств = Неопределено;
		Попытка
			СсылкаДляПоискаАккредитивПолученный = Документы.АккредитивПолученный.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			СсылкаДляПоискаИнкассовоеПоручениеПереданное = Документы.ИнкассовоеПоручениеПереданное.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			СсылкаДляПоискаПлатежноеТребованиеВыставленное = Документы.ПлатежноеТребованиеВыставленное.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			СсылкаДляПоискаПлатежныйОрдерПоступлениеДенежныхСредств = Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Удалось создать УникальныйИдентификатор из ключа соответствия СвойстваПоиска["{УникальныйИдентификатор}"] //
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Исключение
			СсылкаДляПоискаАккредитивПолученный = Неопределено;
			СсылкаДляПоискаИнкассовоеПоручениеПереданное = Неопределено;
			СсылкаДляПоискаПлатежноеТребованиеВыставленное = Неопределено;
			СсылкаДляПоискаПлатежныйОрдерПоступлениеДенежныхСредств = Неопределено;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// НЕ удалось создать УникальныйИдентификатор из ключа соответствия СвойстваПоиска["{УникальныйИдентификатор}"] //
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		КонецПопытки;
		
		Если СсылкаДляПоискаАккредитивПолученный <> Неопределено
			ИЛИ СсылкаДляПоискаИнкассовоеПоручениеПереданное <> Неопределено
			ИЛИ СсылкаДляПоискаПлатежноеТребованиеВыставленное <> Неопределено
			ИЛИ СсылкаДляПоискаПлатежныйОрдерПоступлениеДенежныхСредств <> Неопределено
		Тогда
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//==========================================================================================================================================================================//
			// Удалось создать УникальныйИдентификатор из ключа соответствия СвойстваПоиска["{УникальныйИдентификатор}"]                                                                //
			//==========================================================================================================================================================================//
			// Необходимо для поддержания цепочек документов расчетов                                                                                                                   //
			// Выполняется аналогичный поиск конвертации по внутреннему идентификатору в таблицах документов                                                                            //
			// Документ.РеализацияОтгруженныхТоваров И Документ.ПередачаОС                                                                                                              //
			// Выполняется в следствии следующих условий.                                                                                                                               //
			// Документы в Бухгалтерии предприятия:                                                                                                                                     //
			// - "Передача ОС"                                                                                                                                                          //
			// - "Реализация отгруженных товаров"                                                                                                                                       //
			// - "Реализация товаров и услуг"                                                                                                                                           //
			// при выгрузке в Управление торговли, конвертируются в один тип документа "Реализация товаров и услуг".                                                                    //
			// При обратной выгрузке по ссылке, выше указанных документов "Передача ОС" и "Реализация отгруженных товаров", в БП выгрузится пустая ссылка "Реализации товаров и услуг", //
			// так как в направлении выгрузки из УТ в БП нет возможности определить тип документа источника в следствии этого нет соответствующих правил конвертаций.                   //
			//                                                                                                                                                                          //
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	АккредитивПолученный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.АккредитивПолученный КАК АккредитивПолученный
			|ГДЕ
			|	АккредитивПолученный.Ссылка = &СсылкаДляПоискаАккредитивПолученный
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИнкассовоеПоручениеПереданное.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ИнкассовоеПоручениеПереданное КАК ИнкассовоеПоручениеПереданное
			|ГДЕ
			|	ИнкассовоеПоручениеПереданное.Ссылка = &СсылкаДляПоискаИнкассовоеПоручениеПереданное
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПлатежноеТребованиеВыставленное.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПлатежноеТребованиеВыставленное КАК ПлатежноеТребованиеВыставленное
			|ГДЕ
			|	ПлатежноеТребованиеВыставленное.Ссылка = &СсылкаДляПоискаПлатежноеТребованиеВыставленное
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
			|ГДЕ
			|	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка = &СсылкаДляПоискаПлатежныйОрдерПоступлениеДенежныхСредств
			|";
			Запрос.УстановитьПараметр("СсылкаДляПоискаАккредитивПолученный", СсылкаДляПоискаАккредитивПолученный);
			Запрос.УстановитьПараметр("СсылкаДляПоискаИнкассовоеПоручениеПереданное", СсылкаДляПоискаИнкассовоеПоручениеПереданное);
			Запрос.УстановитьПараметр("СсылкаДляПоискаПлатежноеТребованиеВыставленное", СсылкаДляПоискаПлатежноеТребованиеВыставленное);
			Запрос.УстановитьПараметр("СсылкаДляПоискаПлатежныйОрдерПоступлениеДенежныхСредств", СсылкаДляПоискаПлатежныйОрдерПоступлениеДенежныхСредств);
			РезультатПоискаДокументов = Запрос.Выполнить();
			Если НЕ РезультатПоискаДокументов.Пустой() Тогда
				ВыборкаПоискаДокументов = РезультатПоискаДокументов.Выбрать();
				Если ВыборкаПоискаДокументов.Следующий() Тогда
					СсылкаНаОбъект = ВыборкаПоискаДокументов.Ссылка;
					Параметры.ДокументыЗагруженныеИзНесоовпадающихТиповДокументов.Добавить(СсылкаНаОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПлатежноеПоручениеИсходящее_ПриЗагрузкеОбъекта(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если Объект <> Неопределено Тогда
		Если Параметры.ДокументыЗагруженныеИзНесоовпадающихТиповДокументов.Найти(Объект.Ссылка) <> Неопределено Тогда
			НеЗамещатьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПлатежноеПоручениеИсходящее_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если (Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаНДС") = Объект.РасшифровкаПлатежа.Итог("СуммаНДС"))
		Тогда
			Объект.РасшифровкаПлатежа.Загрузить(Объект.Ссылка.РасшифровкаПлатежа.Выгрузить());
	Иначе
		Если ТипЗнч(ПараметрыОбъекта) = Тип("Соответствие") Тогда
			РасшифровкаПлатежаТабличнаяЧасть = ПараметрыОбъекта.Получить("РасшифровкаПлатежаТабличнаяЧасть");
			Если РасшифровкаПлатежаТабличнаяЧасть <> Неопределено Тогда
				НомерСтроки = 0.00;
				Для Каждого СтрокаПараметров Из РасшифровкаПлатежаТабличнаяЧасть Цикл
					Если СтрокаПараметров.ОснованиеОтражаетБухгалтерскуюОперацию = Ложь Тогда
						СтрокаТЧ = Объект.РасшифровкаПлатежа.Получить(НомерСтроки);
						Если ЗначениеЗаполнено(СтрокаТЧ.ДокументРасчетовСКонтрагентом)
							И СтрокаТЧ.ДокументРасчетовСКонтрагентом.ПолучитьОбъект() = Неопределено
						Тогда
							СтрокаТЧ.ДокументРасчетовСКонтрагентом = Неопределено;
						КонецЕсли;
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1.00;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ФлагДействия = "ОчиститьРеквизитВТабличнойЧасти";
		УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ОтраженоВОперУчете = Истина;
		Объект.ОтражатьВБухгалтерскомУчете = Истина;
		Объект.ОтражатьВНалоговомУчете = Истина;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Объект.ВалютаВзаиморасчетовРаботника = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	
		Объект.Подразделение = Параметры.ПодразделениеПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПлатежноеПоручениеИсходящее_ПоследовательностьПолейПоиска(НомерВариантаПоиска, СвойстваПоиска, ПараметрыОбъекта, ПрекратитьПоиск,
	СсылкаНаОбъект, УстанавливатьУОбъектаВсеСвойстваПоиска, СтрокаИменСвойствПоиска) Экспорт

	Если ТипЗнч(СвойстваПоиска) = Тип("Соответствие")
		И СвойстваПоиска.Получить("{УникальныйИдентификатор}") <> Неопределено
		И ТипЗнч(СвойстваПоиска["{УникальныйИдентификатор}"]) = Тип("Строка")
	Тогда
		СсылкаДляПоискаАккредитивПереданный = Неопределено;
		СсылкаДляПоискаИнкассовоеПоручениеПолученное = Неопределено;
		СсылкаДляПоискаПлатежноеТребованиеПолученное = Неопределено;
		СсылкаДляПоискаПлатежныйОрдерСписаниеДенежныхСредств = Неопределено;
		Попытка
			СсылкаДляПоискаАккредитивПереданный = Документы.АккредитивПереданный.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			СсылкаДляПоискаИнкассовоеПоручениеПолученное = Документы.ИнкассовоеПоручениеПолученное.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			СсылкаДляПоискаПлатежноеТребованиеПолученное = Документы.ПлатежноеТребованиеПолученное.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			СсылкаДляПоискаПлатежныйОрдерСписаниеДенежныхСредств = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойстваПоиска["{УникальныйИдентификатор}"]));
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Удалось создать УникальныйИдентификатор из ключа соответствия СвойстваПоиска["{УникальныйИдентификатор}"] //
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Исключение
			СсылкаДляПоискаАккредитивПереданный = Неопределено;
			СсылкаДляПоискаИнкассовоеПоручениеПолученное = Неопределено;
			СсылкаДляПоискаПлатежноеТребованиеПолученное = Неопределено;
			СсылкаДляПоискаПлатежныйОрдерСписаниеДенежныхСредств = Неопределено;
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// НЕ удалось создать УникальныйИдентификатор из ключа соответствия СвойстваПоиска["{УникальныйИдентификатор}"] //
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		КонецПопытки;
		
		Если СсылкаДляПоискаАккредитивПереданный <> Неопределено
			ИЛИ СсылкаДляПоискаИнкассовоеПоручениеПолученное <> Неопределено
			ИЛИ СсылкаДляПоискаПлатежноеТребованиеПолученное <> Неопределено
			ИЛИ СсылкаДляПоискаПлатежныйОрдерСписаниеДенежныхСредств <> Неопределено
		Тогда
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//==========================================================================================================================================================================//
			// Удалось создать УникальныйИдентификатор из ключа соответствия СвойстваПоиска["{УникальныйИдентификатор}"]                                                                //
			//==========================================================================================================================================================================//
			// Необходимо для поддержания цепочек документов расчетов                                                                                                                   //
			// Выполняется аналогичный поиск конвертации по внутреннему идентификатору в таблицах документов                                                                            //
			// Документ.РеализацияОтгруженныхТоваров И Документ.ПередачаОС                                                                                                              //
			// Выполняется в следствии следующих условий.                                                                                                                               //
			// Документы в Бухгалтерии предприятия:                                                                                                                                     //
			// - "Передача ОС"                                                                                                                                                          //
			// - "Реализация отгруженных товаров"                                                                                                                                       //
			// - "Реализация товаров и услуг"                                                                                                                                           //
			// при выгрузке в Управление торговли, конвертируются в один тип документа "Реализация товаров и услуг".                                                                    //
			// При обратной выгрузке по ссылке, выше указанных документов "Передача ОС" и "Реализация отгруженных товаров", в БП выгрузится пустая ссылка "Реализации товаров и услуг", //
			// так как в направлении выгрузки из УТ в БП нет возможности определить тип документа источника в следствии этого нет соответствующих правил конвертаций.                   //
			//                                                                                                                                                                          //
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	АккредитивПереданный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.АккредитивПереданный КАК АккредитивПереданный
			|ГДЕ
			|	АккредитивПереданный.Ссылка = &СсылкаДляПоискаАккредитивПереданный
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИнкассовоеПоручениеПолученное.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ИнкассовоеПоручениеПолученное КАК ИнкассовоеПоручениеПолученное
			|ГДЕ
			|	ИнкассовоеПоручениеПолученное.Ссылка = &СсылкаДляПоискаИнкассовоеПоручениеПолученное
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПлатежноеТребованиеПолученное.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПлатежноеТребованиеПолученное КАК ПлатежноеТребованиеПолученное
			|ГДЕ
			|	ПлатежноеТребованиеПолученное.Ссылка = &СсылкаДляПоискаПлатежноеТребованиеПолученное
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
			|ГДЕ
			|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка = &СсылкаДляПоискаПлатежныйОрдерСписаниеДенежныхСредств
			|";
			Запрос.УстановитьПараметр("СсылкаДляПоискаАккредитивПереданный", СсылкаДляПоискаАккредитивПереданный);
			Запрос.УстановитьПараметр("СсылкаДляПоискаИнкассовоеПоручениеПолученное", СсылкаДляПоискаИнкассовоеПоручениеПолученное);
			Запрос.УстановитьПараметр("СсылкаДляПоискаПлатежноеТребованиеПолученное", СсылкаДляПоискаПлатежноеТребованиеПолученное);
			Запрос.УстановитьПараметр("СсылкаДляПоискаПлатежныйОрдерСписаниеДенежныхСредств", СсылкаДляПоискаПлатежныйОрдерСписаниеДенежныхСредств);
			РезультатПоискаДокументов = Запрос.Выполнить();
			Если НЕ РезультатПоискаДокументов.Пустой() Тогда
				ВыборкаПоискаДокументов = РезультатПоискаДокументов.Выбрать();
				Если ВыборкаПоискаДокументов.Следующий() Тогда
					СсылкаНаОбъект = ВыборкаПоискаДокументов.Ссылка;
					Параметры.ДокументыЗагруженныеИзНесоовпадающихТиповДокументов.Добавить(СсылкаНаОбъект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПоступлениеДопРасходов_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ФлагДействия = "ОчиститьТабличнуюЧасть";
	УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);

КонецПроцедуры

Процедура ПКО_ПоступлениеНМА_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ВидПоступления) Тогда
		Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	
	Если Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если ТипЗнч(Объект.СкладОрдер)<>Тип("СправочникСсылка.Склады") Тогда
			Объект.СкладОрдер = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
	Иначе
		Если ТипЗнч(Объект.СкладОрдер)<>Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Объект.СкладОрдер = Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ФлагДействия = "ОчиститьТабличнуюЧасть";
	УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	
	УслугаДляНеторговыхОпераций = Константы.УслугаДляНеторговыхОпераций.Получить();
	Для каждого СтрокаТЧ Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(УслугаДляНеторговыхОпераций) Тогда
			СтрокаТЧ.Номенклатура = УслугаДляНеторговыхОпераций;
			СтрокаТЧ.Содержание = УслугаДляНеторговыхОпераций;
		КонецЕсли;
	КонецЦикла;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Объект.Дата);
	КурсУпр = СтруктураКурса.Курс;
	КратностьУпр = СтруктураКурса.Кратность;
	Для Каждого СтрокаЗачетаАвансов Из Объект.ДокументыРасчетовСКонтрагентом Цикл
		СтрокаЗачетаАвансов.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗачетаАвансов.СуммаВзаиморасчетов, мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета,
											КурсУпр, 1, КратностьУпр, 1);
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПоступлениеТоваровУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПоступления) Тогда
		Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	КонецЕсли;
	Если Объект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если ТипЗнч(Объект.СкладОрдер)<>Тип("СправочникСсылка.Склады") Тогда
			Объект.СкладОрдер = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
	Иначе
		Если ТипЗнч(Объект.СкладОрдер)<>Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Объект.СкладОрдер = Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ФлагДействия = "ОчиститьТабличнуюЧасть";
	УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	
	УслугаДляНеторговыхОпераций = Константы.УслугаДляНеторговыхОпераций.Получить();
	Для каждого СтрокаТЧ Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(УслугаДляНеторговыхОпераций) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				СтрокаТЧ.Номенклатура = УслугаДляНеторговыхОпераций;
				ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТЧ, Объект);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Количество) Тогда
				СтрокаТЧ.Количество = 1;
				СтрокаТЧ.Цена = СтрокаТЧ.Сумма;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатрат) Тогда
			СтрокаТЧ.СтатьяЗатрат = СтрокаТЧ.Номенклатура.СтатьяЗатрат;
		КонецЕсли;
	КонецЦикла;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Объект.Дата);
	КурсУпр = СтруктураКурса.Курс;
	КратностьУпр = СтруктураКурса.Кратность;
	Для Каждого СтрокаЗачетаАвансов Из Объект.ДокументыРасчетовСКонтрагентом Цикл
		СтрокаЗачетаАвансов.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗачетаАвансов.СуммаВзаиморасчетов, мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета,
											КурсУпр, 1, КратностьУпр, 1);
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПоступлениеТоваровУслугВНТТ_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	
	Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ФлагДействия = "ОчиститьТабличнуюЧасть";
	УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	
	Если Не Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ОбработкаТабличныхЧастей.РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, Объект, Параметры.ВалютаРегламентированногоУчета, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Объект.Дата);
	КурсУпр = СтруктураКурса.Курс;
	КратностьУпр = СтруктураКурса.Кратность;
	Для Каждого СтрокаЗачетаАвансов Из Объект.ДокументыРасчетовСКонтрагентом Цикл
		СтрокаЗачетаАвансов.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗачетаАвансов.СуммаВзаиморасчетов, мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета,
											КурсУпр, 1, КратностьУпр, 1);
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПринятиеКУчетуОС_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	//ЗаполнитьСкладыВТЧ (Объект);
	
	//ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_ПриходныйКассовыйОрдер_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если (Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаНДС") = Объект.РасшифровкаПлатежа.Итог("СуммаНДС"))
		Тогда
		Объект.РасшифровкаПлатежа.Загрузить(Объект.Ссылка.РасшифровкаПлатежа.Выгрузить());
	Иначе
		Если ТипЗнч(ПараметрыОбъекта) = Тип("Соответствие") Тогда
			РасшифровкаПлатежаТабличнаяЧасть = ПараметрыОбъекта.Получить("РасшифровкаПлатежаТабличнаяЧасть");
			Если РасшифровкаПлатежаТабличнаяЧасть <> Неопределено Тогда
				НомерСтроки = 0.00;
				Для Каждого СтрокаПараметров Из РасшифровкаПлатежаТабличнаяЧасть Цикл
					Если СтрокаПараметров.ОснованиеОтражаетБухгалтерскуюОперацию = Ложь Тогда
						СтрокаТЧ = Объект.РасшифровкаПлатежа.Получить(НомерСтроки);
						Если ЗначениеЗаполнено(СтрокаТЧ.ДокументРасчетовСКонтрагентом)
							И СтрокаТЧ.ДокументРасчетовСКонтрагентом.ПолучитьОбъект() = Неопределено
						Тогда
							СтрокаТЧ.ДокументРасчетовСКонтрагентом = Неопределено;
						КонецЕсли;
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1.00;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ФлагДействия = "ОчиститьРеквизитВТабличнойЧасти";
		УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	
		Для Каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если ТипЗнч(СтрокаРасшифровкиПлатежа.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
				И НЕ Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				СтрокаРасшифровкиПлатежа.Сделка = Неопределено;
			ИначеЕсли ТипЗнч(СтрокаРасшифровкиПлатежа.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
				И Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				СтрокаРасшифровкиПлатежа.Сделка = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
	
		Объект.ОтраженоВОперУчете = Истина;
		Объект.ОтражатьВУправленческомУчете = Истина;
		Объект.ОтражатьВБухгалтерскомУчете = Истина;
		Объект.ОтражатьВНалоговомУчете = Истина;
		Объект.Оплачено = Истина;
	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			Если Объект.ВыручкаСНТТ Тогда
				Объект.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ;	
			Иначе
				Объект.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
				Если НЕ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.КассыККМ") Тогда
					Объект.Контрагент = Справочники.КассыККМ.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			Объект.ВалютаВзаиморасчетовРаботника = Объект.ВалютаДокумента;
		КонецЕсли;
	
		ЗаполнитьКассу (Объект);
	
		Объект.Подразделение = Параметры.ПодразделениеПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_РасходныйКассовыйОрдер_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если (Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") = Объект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов")
		И Объект.Ссылка.РасшифровкаПлатежа.Итог("СуммаНДС") = Объект.РасшифровкаПлатежа.Итог("СуммаНДС"))
		Тогда
		Объект.РасшифровкаПлатежа.Загрузить(Объект.Ссылка.РасшифровкаПлатежа.Выгрузить());
	Иначе
		Если ТипЗнч(ПараметрыОбъекта) = Тип("Соответствие") Тогда
			РасшифровкаПлатежаТабличнаяЧасть = ПараметрыОбъекта.Получить("РасшифровкаПлатежаТабличнаяЧасть");
			Если РасшифровкаПлатежаТабличнаяЧасть <> Неопределено Тогда
				НомерСтроки = 0.00;
				Для Каждого СтрокаПараметров Из РасшифровкаПлатежаТабличнаяЧасть Цикл
					Если СтрокаПараметров.ОснованиеОтражаетБухгалтерскуюОперацию = Ложь Тогда
						СтрокаТЧ = Объект.РасшифровкаПлатежа.Получить(НомерСтроки);
						Если ЗначениеЗаполнено(СтрокаТЧ.ДокументРасчетовСКонтрагентом)
							И СтрокаТЧ.ДокументРасчетовСКонтрагентом.ПолучитьОбъект() = Неопределено
						Тогда
							СтрокаТЧ.ДокументРасчетовСКонтрагентом = Неопределено;
						КонецЕсли;
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1.00;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ФлагДействия = "ОчиститьРеквизитВТабличнойЧасти";
		УдалитьИзТабличнойЧастиДокументыРасчета (Объект, ФлагДействия);
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Объект.ОтраженоВОперУчете = Истина;
		Объект.ОтражатьВУправленческомУчете = Истина;
		Объект.ОтражатьВБухгалтерскомУчете = Истина;
		Объект.ОтражатьВНалоговомУчете = Истина;
		
		Объект.Оплачено = Истина;
		
		ЗаполнитьКассу (Объект);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			Объект.ВалютаВзаиморасчетовРаботника = Объект.ВалютаДокумента;
		КонецЕсли;
		
		Объект.Подразделение = Параметры.ПодразделениеПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_РеализацияОтгруженныхТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "РеализацияОтгруженныхТоваров";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_РеализацияТоваровУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ПараметрИмяПравила = "РеализацияТоваровУслуг";
	ДобавитьДокументДляОтложеннойОбработки (Объект, ПараметрИмяПравила);

КонецПроцедуры

Процедура ПКО_Склады_ПоследовательностьПолейПоиска(НомерВариантаПоиска, СвойстваПоиска, ПараметрыОбъекта, ПрекратитьПоиск,
	СсылкаНаОбъект, УстанавливатьУОбъектаВсеСвойстваПоиска, СтрокаИменСвойствПоиска) Экспорт

	Если СвойстваПоиска["ЭтоГруппа"] = Истина Тогда
		СтрокаИменСвойствПоиска = "Наименование, ЭтоГруппа";
	Иначе
		СтрокаИменСвойствПоиска = "Наименование, ВидСклада, ЭтоГруппа";
	Конецесли;

КонецПроцедуры

Процедура ПКО_СписаниеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);

КонецПроцедуры

Процедура ПКО_СчетНаОплатуПокупателю_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ЗаполнитьЕдиницыИзмерения (Объект);

КонецПроцедуры

Процедура ПКО_СчетФактураВыданный_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если ТипЗнч(ПараметрыОбъекта) = Тип("Соответствие") И Объект.ЭтоНовый() Тогда
		ДокументыОснованияТабличнаяЧасть = ПараметрыОбъекта.Получить("ДокументыОснованияТабличнаяЧасть");
		Если ДокументыОснованияТабличнаяЧасть <> Неопределено Тогда
			НомерСтроки = 0.00;
			Для Каждого СтрокаПараметров Из ДокументыОснованияТабличнаяЧасть Цикл
				Если СтрокаПараметров.ОснованиеОтражаетБухгалтерскуюОперацию = Ложь Тогда
					СтрокаТЧ = Объект.ДокументыОснования.Получить(НомерСтроки);
					Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)
						И СтрокаТЧ.ДокументОснование.ПолучитьОбъект() = Неопределено
					Тогда
						Отказ = Истина;
						прервать;
					КонецЕсли;
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1.00;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СчетФактураПолученный_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если ТипЗнч(ПараметрыОбъекта) = Тип("Соответствие") И Объект.ЭтоНовый() Тогда
		ДокументыОснованияТабличнаяЧасть = ПараметрыОбъекта.Получить("ДокументыОснованияТабличнаяЧасть");
		Если ДокументыОснованияТабличнаяЧасть <> Неопределено Тогда
			НомерСтроки = 0.00;
			Для Каждого СтрокаПараметров Из ДокументыОснованияТабличнаяЧасть Цикл
				Если СтрокаПараметров.ОснованиеОтражаетБухгалтерскуюОперацию = Ложь Тогда
					СтрокаТЧ = Объект.ДокументыОснования.Получить(НомерСтроки);
					Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)
						И СтрокаТЧ.ДокументОснование.ПолучитьОбъект() = Неопределено
					Тогда
						Отказ = Истина;
						прервать;
					КонецЕсли;
				КонецЕсли;
				НомерСтроки = НомерСтроки + 1.00;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ТребованиеНакладная_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Объект.ОтражатьВУправленческомУчете = Истина;
	Объект.ОтражатьВБухгалтерскомУчете = Истина;
	Объект.ОтражатьВНалоговомУчете = Истина;
	ЗаполнитьЕдиницыИзмерения (Объект);
	
	ЗаполнитьСкладыВТЧ (Объект);
	
	ЗаполнитьКачествоВТЧ (Объект);
	
	Для каждого СтрокаТЧ ИЗ Объект.Материалы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатрат) Тогда
				СтрокаТЧ.СтатьяЗатрат = СтрокаТЧ.Номенклатура.СтатьяЗатрат;	
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НоменклатурнаяГруппа) Тогда
				СтрокаТЧ.НоменклатурнаяГруппа = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппаЗатрат;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ГРУПП СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫГРУЗКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЧИСТКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПАРАМЕТРОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ
// Данный раздел разрешено изменять.
// Также допустимо размещать процедуры с алгоритмами в любом из разделов выше.

Процедура ДобавитьДокументДляОтложеннойОбработки(Объект, ПараметрИмяПравила) Экспорт

	ОписаниеДокумента = Новый Структура("СсылкаНаДокумент, ИмяПравила");
	ОписаниеДокумента.ИмяПравила = ПараметрИмяПравила;
	Если Объект.ЭтоНовый() Тогда
		ОписаниеДокумента.СсылкаНаДокумент = Объект.ПолучитьСсылкуНового();
	Иначе
		ОписаниеДокумента.СсылкаНаДокумент = Объект.Ссылка;
	КонецЕсли;
	Параметры.ДокументыСОпределениемДопРеквизитов.Добавить(ОписаниеДокумента);

КонецПроцедуры

Процедура ЗаполнитьЕдиницыИзмерения(Объект) Экспорт

	
	МетаданныеДокумента = Объект.Метаданные();
	СтруктураПоиска = Новый Структура("Номенклатура");
	
	Для каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		ЕстьЕдиницаИзмерения = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ТЧ.Имя);
		ЕстьКоэффициент = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ТЧ.Имя);
		
		Если ЕстьЕдиницаИзмерения ИЛИ ЕстьКоэффициент Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивНоменклатуры", Объект[ТЧ.Имя].Выгрузить().ВыгрузитьКолонку("Номенклатура"));
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
			|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			|		ПО Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец
			|			И Номенклатура.БазоваяЕдиницаИзмерения = ЕдиницыИзмерения.ЕдиницаПоКлассификатору
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Для каждого СтрокаТЧ Из Объект[ТЧ.Имя] Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					продолжить;
				КонецЕсли;
				СтруктураПоиска.Номенклатура = СтрокаТЧ.Номенклатура;
				Выборка.Сбросить();
				Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
					
					Если ЕстьЕдиницаИзмерения Тогда
						СтрокаТЧ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
					КонецЕсли;
					Если ЕстьКоэффициент Тогда
						СтрокаТЧ.Коэффициент = Выборка.Коэффициент;
					КонецЕсли;
					
				Иначе
					НоваяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					НоваяЕдиницаОбъект.Наименование            = СокрЛП(СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения);
					НоваяЕдиницаОбъект.ЕдиницаПоКлассификатору = СтрокаТЧ.Номенклатура.БазоваяЕдиницаИзмерения;
					НоваяЕдиницаОбъект.Коэффициент             = 1;
					НоваяЕдиницаОбъект.Владелец                = СтрокаТЧ.Номенклатура;
					ЗаписатьОбъектВИБ(НоваяЕдиницаОбъект, Тип("СправочникСсылка.ЕдиницыИзмерения"));
					НоваяЕдиница = НоваяЕдиницаОбъект.Ссылка;
					СтрокаТЧ.ЕдиницаИзмерения = НоваяЕдиница;
					СтрокаТЧ.Коэффициент = 1;
					
					НоменклатураОбъект = СтрокаТЧ.Номенклатура.ПолучитьОбъект();
					НоменклатураОбъект.ЕдиницаХраненияОстатков = НоваяЕдиница;
					НоменклатураОбъект.ЕдиницаДляОтчетов = НоваяЕдиница;
					ЗаписатьОбъектВИБ(НоменклатураОбъект, Тип("СправочникСсылка.Номенклатура"));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьКассу(Объект) Экспорт

	//СтрокаКассы = УзелОбменаЗагрузкаДанных.Кассы.Найти(Объект.Организация, "Организация");
	СтрокаКассы = Параметры.КассыОрганизации.Найти(Объект.Организация, "Организация");
	Если СтрокаКассы <> Неопределено Тогда
		Объект.Касса = СтрокаКассы.Касса;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКачествоВТЧ(Объект) Экспорт

	МетаданныеДокумента = Объект.Метаданные();
	Для каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		ЕстьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ТЧ.Имя);
	
		Если ЕстьКачество Тогда
			Для каждого СтрокаТЧ Из Объект[ТЧ.Имя] Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Качество) Тогда
					СтрокаТЧ.Качество = Справочники.Качество.Новый;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСкладыВТЧ(Объект) Экспорт

	МетаданныеДокумента = Объект.Метаданные();
	Для каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		ЕстьСкладВШапке = ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента);
		ЕстьСкладОрдерВШапке = ОбщегоНазначения.ЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента);
		ЕстьСклад = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", МетаданныеДокумента, ТЧ.Имя);
	
		Если ЕстьСклад Тогда
			Для каждого СтрокаТЧ Из Объект[ТЧ.Имя] Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
					Если ЕстьСкладВШапке Тогда
						СтрокаТЧ.Склад = Объект.Склад;
					ИначеЕсли ЕстьСкладОрдерВШапке Тогда
						СтрокаТЧ.Склад = Объект.СкладОрдер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСпособСписания(Объект) Экспорт

	МетаданныеДокумента = Объект.Метаданные();
	Для каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		ЕстьСпособСписания = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СпособСписанияОстаткаТоваров", МетаданныеДокумента, ТЧ.Имя);
	
		Если ЕстьСпособСписания Тогда
			Для каждого СтрокаТЧ Из Объект[ТЧ.Имя] Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров) Тогда
					СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьИзТабличнойЧастиДокументыРасчета(Объект, ФлагДействия) Экспорт

	// Алгоритм для товарных документов очищает табличную часть Предоплата если договор не ведется по расчетным документам.
	// для платежных документов очищает реквизит Документ расчетов.
	// Если условия в данном алгоритме выполняются (удаляя документы расчетов или очищая табличную часть), то данная ситуация не корректна.
	// Это означает, что пользователи БП зачли аванс товарным документом или оплатили согласно товарного документа,
	// при этом в УТ по данному договору не стоит флаг ВестиПоДокументамРасчетовСКонтрагентом
	
	Если ФлагДействия = "ОчиститьРеквизитВТабличнойЧасти" Тогда
		Для Каждого СтрокаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ (ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
						ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее")
						ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее")
						ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
					)
				И ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом)
				И СтрокаПлатежа.ДокументРасчетовСКонтрагентом.ПолучитьОбъект() = Неопределено
			Тогда
				СтрокаПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
			Иначе
				Если НЕ СтрокаПлатежа.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом) Тогда
					СтрокаПлатежа.ДокументРасчетовСКонтрагентом = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ФлагДействия = "ОчиститьТабличнуюЧасть" Тогда
		Если НЕ Объект.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И Объект.ДокументыРасчетовСКонтрагентом.Количество() > 0 Тогда
			Объект.ДокументыРасчетовСКонтрагентом.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Данный раздел изменять запрещено.

// Записывает объект в информационную базу.
//
// Параметры:
//	Объект - Записываемый объект.
//	Тип - Строка - Тип объекта строкой.
// 
Процедура ЗаписатьОбъектВИБ(Объект, Тип, ЗаписатьОбъект = Ложь, Знач ОтправкаНазад = Ложь)

	ОбщиеПроцедурыФункции.ЗаписатьОбъектВИБ(Объект, Тип, ЗаписатьОбъект, ОтправкаНазад);
	
КонецПроцедуры

// Отменяет проведение объекта в информационной базе.
//
// Параметры:
//	Объект - Объект для отмены проведения.
//	Тип - Строка - Тип объекта строкой.
//
Процедура ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект = Ложь)

	ОбщиеПроцедурыФункции.ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект);
	
КонецПроцедуры

// Признак того, что это загрузка в информационную базу.
// 
// Возвращаемое значение:
//	Булево - Признак режима загрузки данных
// 
Функция РежимЗагрузкиДанныхВИнформационнуюБазу()
	
	Возврат ОбщиеПроцедурыФункции.РежимЗагрузкиДанныхВИнформационнуюБазу();
	
КонецФункции

// Служебная. Инициализирует переменные, необходимые для отладки
//
// Параметры:
//  Владелец - Обработка КонвертацияОбъектовИнформационныхБаз
//
Процедура ПодключитьОбработкуДляОтладки(Владелец) Экспорт

	Параметры            	 = Владелец.Параметры;
	ОбщиеПроцедурыФункции	 = Владелец;
	Запросы              	 = Владелец.Запросы;
	УзелДляОбмена		 	 = Владелец.УзелДляОбмена;

КонецПроцедуры

#КонецЕсли
