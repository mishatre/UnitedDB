
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПолучитьЗначенияПоУмолчанию") Тогда
		ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить;
		ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Истина;
		ВыгружатьАналитикуПоСкладам = ?(Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить() <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.НеИспользовать,Ложь,Истина);
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать;
		ДатаНачалаВыгрузкиДокументов = НачалоГода(ТекущаяДата());
		ИспользоватьОтборПоОрганизациям = Ложь;
		ИспользоватьОтборПоСкладам = Ложь;
		ИспользоватьОтборПоПодразделениям = Ложь;
	КонецЕсли;
	
	ОбменДаннымиСервер.ФормаНастройкиУзловПриСозданииНаСервере(ЭтаФорма, Отказ);
	
	// Задание значений по умолчанию
	ПолучитьОписаниеКонтекста();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПолучитьОписаниеКонтекста();
	ФормаИзменена = Истина;
	ОбменДаннымиКлиент.ФормаНастройкиУзловКомандаЗакрытьФорму(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолучитьОписаниеКонтекста()

	ОграничениеВыгрузкиАналитикиПоСкладам = "";
	ОграничениеПереносаСебестоимости = "";
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = "";
	ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = "";
	ОграничениеОтборПоОрганизациям = "";
	ОграничениеОтборПоСкладам = "";
	ОграничениеОтборПоПодразделениям = "";
	
	Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) Тогда
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'Документы выгружаются начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов, "[ДатаНачалаВыгрузкиДокументов]", Формат(ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ОграничениеДатаНачалаВыгрузкиДокументов = "Документы выгружаются за весь период";
	КонецЕсли;
	
	Если ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете Тогда
		ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = НСтр("ru = 'Документы выгружаются только отраженные в бухгалтерском учете'");
	Иначе
		ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = НСтр("ru = ''");
	КонецЕсли;
	
	Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = ''");
	ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = 'Выгружается документ ""Заказ покупателя"" который является основанием для авансовых платежей при оптовой продаже товаров'");
	ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = 'Выгружается документ ""Счет на оплату покупателю"" который является основанием для авансовых платежей при оптовой продаже товаров'");
	КонецЕсли;
	
	Если ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'Себестоимость списания товаров, не переносится'");
	ИначеЕсли ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'При переносе себестоимости списания товаров, переносятся документы партии и себестоимость'");
	ИначеЕсли ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьТолькоДокументПартии Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'При переносе себестоимости списания товаров, переносятся только документы партии'");
	КонецЕсли;
	
	Если ВыгружатьАналитикуПоСкладам Тогда
		ОграничениеВыгрузкиАналитикиПоСкладам = НСтр("ru = 'Выгружатется аналитика по складам'");
	Иначе
		ОграничениеВыгрузкиАналитикиПоСкладам = НСтр("ru = 'Аналитика по складам не выгружается, во всех загруженных документах в бухгалтерии предприятия будет установлен один и тот же склад из настройки параметров учета'");
	КонецЕсли;
	
	Если ИспользоватьОтборПоОрганизациям Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Организации.Выгрузить(Организации.НайтиСтроки(Новый Структура("Использовать", Истина))).ВыгрузитьКолонку("Представление"), "; ");
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'Отбор по организациям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоОрганизациям = СтрЗаменить(ОграничениеОтборПоОрганизациям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'По всем организациям'");
	КонецЕсли;
	
	Если ИспользоватьОтборПоСкладам Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Склады.Выгрузить(Склады.НайтиСтроки(Новый Структура("Использовать", Истина))).ВыгрузитьКолонку("Представление"), "; ");
		ОграничениеОтборПоСкладам = НСтр("ru = 'Отбор по складам: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоСкладам = СтрЗаменить(ОграничениеОтборПоСкладам, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоСкладам = НСтр("ru = 'По всем складам'");
	КонецЕсли;
	
	Если ИспользоватьОтборПоПодразделениям Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Подразделения.Выгрузить(Подразделения.НайтиСтроки(Новый Структура("Использовать", Истина))).ВыгрузитьКолонку("Представление"), "; ");
		ОграничениеОтборПоПодразделениям = НСтр("ru = 'Отбор по подразделениям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоПодразделениям = СтрЗаменить(ОграничениеОтборПоПодразделениям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоПодразделениям = НСтр("ru = 'По всем подразделениям'");
	КонецЕсли;
	
	ОписаниеКонтекста = НСтр("ru = 'Выгружать документы и справочную информацию:
							|[ОграничениеВыгрузкиАналитикиПоСкладам]
							|[ОграничениеПереносаСебестоимости]
							|[ОграничениеДатаНачалаВыгрузкиДокументов]
							|[ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете]
							|[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]
							|[ОграничениеОтборПоОрганизациям]
							|[ОграничениеОтборПоСкладам]
							|[ОграничениеОтборПоПодразделениям]'");
	//
	
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеВыгрузкиАналитикиПоСкладам]", ОграничениеВыгрузкиАналитикиПоСкладам);
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеПереносаСебестоимости]", ОграничениеПереносаСебестоимости);
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете]", ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете);
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]", ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату);
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеОтборПоОрганизациям]", ОграничениеОтборПоОрганизациям);
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеОтборПоСкладам]", ОграничениеОтборПоСкладам);
	ОписаниеКонтекста = СтрЗаменить(ОписаниеКонтекста, "[ОграничениеОтборПоПодразделениям]", ОграничениеОтборПоПодразделениям);
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьДоступностьЭлементамФормы(ТекущаяСтраница = Неопределено)
	Элементы.Организации.Доступность = ИспользоватьОтборПоОрганизациям;
	
	ЗначенияФлаговИСтраниц = Новый Соответствие();
	ЗначенияФлаговИСтраниц.Вставить(Элементы.Склады, ИспользоватьОтборПоСкладам);
	ЗначенияФлаговИСтраниц.Вставить(Элементы.Подразделения, ИспользоватьОтборПоПодразделениям);
	
	СтраницыОтбора = Новый Массив();
	Если ИспользоватьОтборПоСкладам Тогда
		СтраницыОтбора.Добавить(Элементы.Склады);
	КонецЕсли;
	Если ИспользоватьОтборПоПодразделениям Тогда
		СтраницыОтбора.Добавить(Элементы.Подразделения);
	КонецЕсли;
	Элементы.Страницы.Доступность = СтраницыОтбора.Количество() > 0.00;
	
	Если СтраницыОтбора.Количество() = 0.00 Тогда
		возврат;
	КонецЕсли;
	
	Элементы.Склады.Доступность = ИспользоватьОтборПоСкладам;
	Элементы.Подразделения.Доступность = ИспользоватьОтборПоПодразделениям;
	Если ТекущаяСтраница <> Неопределено Тогда
		Если ЗначенияФлаговИСтраниц[ТекущаяСтраница] = Ложь И Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница Тогда
			Элементы.Страницы.ТекущаяСтраница = СтраницыОтбора[0];
		ИначеЕсли ЗначенияФлаговИСтраниц[ТекущаяСтраница] = Истина Тогда
			Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
		КонецЕсли;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = СтраницыОтбора[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОрганизациямПриИзменении(Элемент)
	УстановитьДоступностьЭлементамФормы();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСкладамПриИзменении(Элемент)
	УстановитьДоступностьЭлементамФормы(Элементы.Склады);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПодразделениямПриИзменении(Элемент)
	УстановитьДоступностьЭлементамФормы(Элементы.Подразделения);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьЭлементамФормы();
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Склады Тогда
		ТабличнаяЧасть = Склады;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Подразделения Тогда
		ТабличнаяЧасть = Подразделения;
	Иначе
		возврат;
	КонецЕсли;
	ИзменитьФлагИспользовать(ТабличнаяЧасть, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Склады Тогда
		ТабличнаяЧасть = Склады;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Подразделения Тогда
		ТабличнаяЧасть = Подразделения;
	Иначе
		возврат;
	КонецЕсли;
	ИзменитьФлагИспользовать(ТабличнаяЧасть, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагИспользовать(ТабличнаяЧасть, ФлагПометки)
	Для каждого СтрокаИзменитьПометку Из ТабличнаяЧасть Цикл
		СтрокаИзменитьПометку.Использовать = ФлагПометки;
	КонецЦикла;
КонецПроцедуры
 

&НаКлиенте
Процедура ОбъектОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОрганизацииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСкладыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСкладыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПодразделенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПодразделенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиОрганизации(Команда)
	ИзменитьФлагИспользовать(Организации, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиОрганизации(Команда)
	ИзменитьФлагИспользовать(Организации, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Кассы1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Кассы1ПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
