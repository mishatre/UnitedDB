Перем мВалютаРегламентированногоУчета Экспорт; 
Перем Структура_ТипыДокументовАванса;
Перем мПорядокРегистрацииСчетовФактурНаАванс Экспорт;
Перем мКонецНалоговогоПериода Экспорт;
Перем мКонецНалоговогоПериодаПоДатам Экспорт;

//Пересчет суммы НДС и валютной суммы при изменении суммы регл.
Процедура ПересчетНДСиВалютнойСуммыПоСтроке(ТД, ПересчетВалютнойСуммы = Ложь, СуммаСтарая = 0) Экспорт
	
	ТД.СуммаНДС = 0;
	
	Если ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 120;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 110;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 118;
	КонецЕсли;
	
	Если ПересчетВалютнойСуммы = Истина тогда 
		Если ТД.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ТД.ВалютнаяСумма = ТД.Сумма;
		Иначе
			ТД.ВалютнаяСумма = ?(НЕ ЗначениеЗаполнено(СуммаСтарая) , 0, ТД.ВалютнаяСумма * ТД.Сумма / СуммаСтарая);
		КонецЕсли;
	КонецЕсли; 
	СуммаСтарая = ТД.Сумма;
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Запонить" в диалоге формы
// Реализует алгоритм автоматического заполнения документа.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "") Экспорт
	
	ТаблицаРезультатов = Список.ВыгрузитьКолонки();
	
	ЗаполнитьСтрокиДокумента(ТаблицаРезультатов);
	
	Список.Загрузить(ТаблицаРезультатов);
	
	Если Не (Список.Количество() > 0) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - авансы не обнаружены"
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Регистрация счетов-фактур на аванс не требуется:"+СтрокаСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент()

Процедура ЗаполнитьСтрокиДокумента(ТаблицаРезультатов) Экспорт
	
	мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода);
	мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода);
	мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	
	// По ставке НДС 0% СФ на аванс выписывается по расчетной ставке 18/118
	Если НачалоПериода>'20051231' Тогда
		// Регистрация авансов по реализации на экспорт не производится
	Иначе
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	КонецЕсли; 
	
	ТаблицаАвансов = Неопределено;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ТекущийПорядокРегистрацииСчетовФактурНаАванс", мПорядокРегистрацииСчетовФактурНаАванс);
	Запрос.УстановитьПараметр("КонецНалоговогоПериода", УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвансыПоДоговорамКомиссии.Период,
	|	АвансыПоДоговорамКомиссии.ДатаСобытия КАК ДатаСобытия,
	|	АвансыПоДоговорамКомиссии.Организация,
	|	АвансыПоДоговорамКомиссии.Покупатель КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	АвансыПоДоговорамКомиссии.СтавкаНДС КАК СтавкаНДС,
	|	АвансыПоДоговорамКомиссии.СчетФактура КАК ДокументОснование,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток = 0
	|			ТОГДА АвансыПоДоговорамКомиссии.СуммаБезНДСНачальныйОстаток + АвансыПоДоговорамКомиссии.НДСНачальныйОстаток
	|		ИНАЧЕ АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток + АвансыПоДоговорамКомиссии.НДСКонечныйОстаток
	|	КОНЕЦ КАК СуммаАванса,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток + АвансыПоДоговорамКомиссии.НДСКонечныйОстаток КАК КонечныйОстаток,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСНачальныйОстаток + АвансыПоДоговорамКомиссии.НДСНачальныйОстаток КАК НачальныйОстаток,
	|	ВЫБОР
	|		КОГДА АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток = 0
	|			ТОГДА АвансыПоДоговорамКомиссии.СуммаБезНДСНачальныйОстаток + АвансыПоДоговорамКомиссии.НДСНачальныйОстаток
	|		ИНАЧЕ АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток + АвансыПоДоговорамКомиссии.НДСКонечныйОстаток
	|	КОНЕЦ КАК ВалютнаяСуммаАванса,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	&ТекущийПорядокРегистрацииСчетовФактурНаАванс КАК ПорядокРегистрацииСчетовФактурНаАванс,
	|	ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал) КАК КонецНалоговогоПериода
	|ПОМЕСТИТЬ ВТРасчеты
	|ИЗ
	|	РегистрНакопления.НДСАвансыПоДоговорамКомиссии.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , Организация = &Организация) КАК АвансыПоДоговорамКомиссии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСРасчетыСПокупателямиОстатки.Период,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	НДСРасчетыСПокупателямиОстатки.Организация,
	|	НДСРасчетыСПокупателямиОстатки.Покупатель,
	|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	|	NULL,
	|	НДСРасчетыСПокупателямиОстатки.Документ,
	|	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	-1 * ВЫБОР
	|		КОГДА НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток = 0
	|			ТОГДА НДСРасчетыСПокупателямиОстатки.СуммаНачальныйОстаток
	|		ИНАЧЕ НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток
	|	КОНЕЦ,
	|	-1 * НДСРасчетыСПокупателямиОстатки.СуммаКонечныйОстаток,
	|	-1 * НДСРасчетыСПокупателямиОстатки.СуммаНачальныйОстаток,
	|	-1 * ВЫБОР
	|		КОГДА НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаКонечныйОстаток = 0
	|			ТОГДА НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаНачальныйОстаток
	|		ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаКонечныйОстаток
	|	КОНЕЦ,
	|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.ПорядокРегистрацииСчетовФактурНаАванс, &ТекущийПорядокРегистрацииСчетовФактурНаАванс)
	|		ИНАЧЕ НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСНалоговыйПериод, ВЫБОР
	|					КОГДА НДСРасчетыСПокупателямиОстатки.Период < ДАТАВРЕМЯ(2008, 1, 1)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				КОНЕЦ) = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА КОНЕЦПЕРИОДА(НДСРасчетыСПокупателямиОстатки.Период, КВАРТАЛ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НДСРасчетыСПокупателямиОстатки.Период, МЕСЯЦ)
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА ЕСТЬNULL(Документ.ДокументОснование, НЕОПРЕДЕЛЕНО) ССЫЛКА Документ.ВводНачальныхОстатковНДС
	|						ТОГДА Документ.ДокументОснование = ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатковНДС.ПустаяСсылка)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК НДСРасчетыСПокупателямиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаОрганизаций
	|		ПО (УчетнаяПолитикаОрганизаций.Организация = НДСРасчетыСПокупателямиОстатки.Организация)
	|			И (УчетнаяПолитикаОрганизаций.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаОрганизаций
	|				ГДЕ
	|					НДСРасчетыСПокупателямиОстатки.Период >= УчетнаяПолитикаОрганизаций.Период
	|					И УчетнаяПолитикаОрганизаций.Организация = НДСРасчетыСПокупателямиОстатки.Организация))
	|ГДЕ
	|	(НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаКонечныйОстаток < 0
	|			ИЛИ НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаНачальныйОстаток < 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Период КАК Период,
	|	Расчеты.Организация,
	|	Расчеты.Контрагент,
	|	Расчеты.ДоговорКонтрагента,
	|	Расчеты.ДокументОснование,
	|	Расчеты.ВалютаРасчетов,
	|	Расчеты.СуммаАванса,
	|	Расчеты.КонечныйОстаток,
	|	Расчеты.НачальныйОстаток,
	|	Расчеты.ВалютнаяСуммаАванса,
	|	Расчеты.РасчетыВУсловныхЕдиницах,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДокументАвансаДата,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВыписки,
	|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс,
	|	Расчеты.КонецНалоговогоПериода,
	|	Расчеты.ДатаСобытия,
	|	Расчеты.СтавкаНДС
	|ИЗ
	|	ВТРасчеты КАК Расчеты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НеРегистрироватьСчетаФактурыНаАвансы)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
		
	Если Структура_ТипыДокументовАванса.Количество()>0 Тогда
		
		ОграничениеТиповДокументов = "";
		
		Для каждого ТипДокументовАванса Из Структура_ТипыДокументовАванса Цикл
			ОграничениеТиповДокументов = ОграничениеТиповДокументов+?(ПустаяСтрока(ОграничениеТиповДокументов)," И ( "," ИЛИ ")+ "Документ ССЫЛКА Документ." + ТипДокументовАванса.Ключ;
		КонецЦикла; 
		
		ОграничениеТиповДокументов = ОграничениеТиповДокументов+") ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация ", "Организация = &Организация " + ОграничениеТиповДокументов);
		
	КонецЕсли; 
		
	ТаблицаАвансовТекущая = Запрос.Выполнить().Выгрузить();
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаАвансовТекущая, "ДокументОснование","ДокументАвансаДата");
	
	Авансы = ТаблицаАвансовТекущая.Скопировать(, "ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС, ДоговорКонтрагента");
	Авансы.Свернуть("ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС, ДоговорКонтрагента");
	
	ТаблицаАвансовТекущая.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансовТекущая);
	
	ТаблицаАвансовТекущая.Индексы.Добавить("ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС");
	ТаблицаАвансов = ТаблицаАвансовТекущая.СкопироватьКолонки();
	
	ПоискПартии = Новый Структура("ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС, ДоговорКонтрагента");
		
	Для	Каждого Аванс из Авансы Цикл
		
		ЗаполнитьЗначенияСвойств(ПоискПартии, Аванс);
		Таблица = ТаблицаАвансовТекущая.НайтиСтроки(ПоискПартии);
		
		ПорядокРегистрацииСчетовФактурНаАванс = Таблица[0].ПорядокРегистрацииСчетовФактурНаАванс;
		
		Для	Каждого Строка Из Таблица Цикл
			
			Если ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ДатаПоступленияАванса = Строка.ДатаСобытия;
			Иначе	
				ДатаПоступленияАванса = Строка.ДокументАвансаДата;
			КонецЕсли;	
			
			// Вычислим крайнюю дату зачета аванса
			Если ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
				Если КонецДня(ДатаПоступленияАванса + 345600) > КонецКвартала(ДатаПоступленияАванса) Тогда
					ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
				Иначе
					ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса + 345600);
				КонецЕсли;
			ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда
				ДатаЗачетаАванса = КонецМесяца(ДатаПоступленияАванса);
			ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда
				ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
			ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы Тогда
				ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
			Иначе
				ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
			КонецЕсли;				
			
			Если ДатаЗачетаАванса < НачалоПериода Тогда
				ДатаЗачетаАванса = НачалоПериода;
			КонецЕсли;
			
			Если ДатаЗачетаАванса > КонецДня(Строка.Период) Тогда
				Продолжить;
			ИначеЕсли КонецДня(ДатаЗачетаАванса) = КонецДня(Строка.Период) 
				И Строка.КонечныйОстаток = 0 Тогда
				Продолжить;
			ИначеЕсли Строка.СуммаАванса > 0 Тогда
				Если Строка.ДатаВыписки = '00010101' Тогда
					Если ДатаЗачетаАванса > Строка.Период Тогда
						Строка.ДатаВыписки = Строка.Период;
					Иначе
						Строка.ДатаВыписки = ДатаЗачетаАванса;
					КонецЕсли;
				КонецЕсли;
				Строка.КонецНалоговогоПериода = КонецКвартала(Строка.ДокументАвансаДата);
				
				Если НЕ ЗначениеЗаполнено(Строка.СчетФактура) 
					ИЛИ НачалоДня(Строка.ДатаВыписки) >= НачалоДня(НачалоПериода) Тогда
					НоваяСтрока = ТаблицаАвансов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;
				Прервать;
			КонецЕсли
		КонецЦикла;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	
	Если ТаблицаАвансов <> Неопределено 
		И ТаблицаАвансов.Количество() <> 0 Тогда
		
		ТаблицаАвансов.Сортировать("ДокументАвансаДата Возр");
		
		Для Каждого Выборка Из ТаблицаАвансов Цикл
			
			мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(Выборка.ДокументАвансаДата), Выборка.КонецНалоговогоПериода);
			
			ДокАванса = Выборка.ДокументОснование;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) ИЛИ Выборка.РасчетыВУсловныхЕдиницах Тогда
				//Незаполненное значение приравнивается к валюте регл. учета
				ВалютаДокумента = мВалютаРегламентированногоУчета;	
			Иначе
				ВалютаДокумента = Выборка.ВалютаРасчетов;     
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ДокАванса) 
				И (ДокАванса.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено
				ИЛИ ТипЗнч(ДокАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.ЗаказПокупателя"));
				
				Если ТипЗнч(ДокАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					
					Если Выборка.СтавкаНДС <> NULL Тогда
						
						СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
						СтрокаПоСтавке.СтавкаНДС = Выборка.СтавкаНДС;
						СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
						СтрокаПоСтавке.ВалютнаяСумма = Выборка.СуммаАванса;
						
					Иначе	
					
						Для Каждого СтрПлатежа Из ДокАванса.ДенежныеСредства Цикл
							Если СтрПлатежа.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс Тогда
								Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
									ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
								Иначе
									ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
								КонецЕсли; 
								СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
								СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
								СтрокаПоСтавке.Сумма = СтрПлатежа.Сумма;
								СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.Сумма;
								СтрокаПоСтавке.СчетНаОплату = ДокАванса.Сделка;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;	
					
				Иначе
					
					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.Сделка;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма,ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если Выборка.ДокументАвансаДата >= '20060101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						// НДС с авансов под экспортные поставки не начисляется с 2006 года
						Продолжить;
					ИначеЕсли Выборка.ДокументАвансаДата >= '20080101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
						Продолжить;
					КонецЕсли;
					
					СтрокаТП = ТаблицаРезультатов.Добавить();
					СтрокаТП.НомерСтроки		= НомерСтроки;
					
					Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
						И Выборка.СтавкаНДС <> NULL Тогда
						СтрокаТП.ДатаДокументаОснования	= Выборка.ДатаСобытия;
						СтрокаТП.Дата = Выборка.ДатаСобытия;
					Иначе
						СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
						СтрокаТП.Дата = Выборка.ДатаВыписки;
					КонецЕсли;	
					
					СтрокаТП.Контрагент			= Выборка.Контрагент;
					СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
					СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;
					СтрокаТП.СчетНаОплату		= СтрокаПоСтавке.СчетНаОплату;
					
					СтрокаТП.ВалютаДокумента	= ВалютаДокумента;
					
					СтрокаТП.Сумма				= СтрокаПоСтавке.Сумма;
					СтрокаТП.ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
					СтрокаТП.СтавкаНДС			= СтрокаПоСтавке.СтавкаНДС;
					СтрокаТП.СчетФактура		= Выборка.СчетФактура;
					СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
					
					ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
					ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
			Иначе // Если ДокАванса.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
				
				СтрокаТП = ТаблицаРезультатов.Добавить();
				СтрокаТП.НомерСтроки		= НомерСтроки;
				СтрокаТП.Дата				= Выборка.ДатаВыписки;
				СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
				СтрокаТП.Контрагент			= Выборка.Контрагент;
				СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
				СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;
				
				СтрокаТП.ВалютаДокумента	= ВалютаДокумента;
				
				СтрокаТП.Сумма				= Выборка.СуммаАванса;
				СтрокаТП.СтавкаНДС			= Перечисления.СтавкиНДС.НДС18_118;
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					СтрокаТП.ВалютнаяСумма	= СтрокаТП.Сумма;
				Иначе
					СтрокаТП.ВалютнаяСумма	= Выборка.ВалютнаяСуммаАванса;
				КонецЕсли;
				СтрокаТП.СчетФактура		= Выборка.СчетФактура;
				СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
				
				ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
				ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
				
				НомерСтроки = НомерСтроки + 1;
			
			КонецЕсли; //Если ДокАванса.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
		КонецЦикла; // Пока Выборка.Следующий() Цикл
	КонецЕсли;
		
КонецПроцедуры

Функция ДобавитьДатуДокументаКРезультатуЗапроса(Результат,КолонкаДокумента,КолонкаСДатой)

	КэшПоТипам = Новый Соответствие;

		Для каждого СтрокаТаблицы из Результат Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
				Продолжить;
			КонецЕсли;
			
			ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = новый запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		ИмяРеквизита = ?(Метаданные.Документы[ИмяМетаданных].Реквизиты.Найти("ДатаОплаты") <> Неопределено, "ДатаОплаты", "Дата");

		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст = "","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док." + ИмяРеквизита + " КАК Дата
		|	ИЗ Документ." + ИмяМетаданных + " КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_" + ИмяМетаданных + ")";
		Запрос.УстановитьПараметр("ДокументыТипа_" + ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);

		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		для каждого строка из НайденныеСтроки цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		Конеццикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ДобавитьДатуДокументаКРезультатуЗапроса()

Процедура ПроверитьДатуВыпискиПоСтроке(СтрокаТаблицы)
	
	КонецНалоговогоПериода = ПолучитьКонецНалоговогоПериодаПоДате(СтрокаТаблицы.ДатаДокументаОснования);
	
	Если СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы 
		И (СтрокаТаблицы.Дата > КонецНалоговогоПериода
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(?(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400 > КонецНалоговогоПериода, КонецНалоговогоПериода, СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400), "ДФ=dd.MM.yyyy"), , , СтатусСообщения.Обычное);
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней 
		И (КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода)
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + ?(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400) > КонецМесяца(КонецНалоговогоПериода), 
																																							Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"), Формат(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400, "ДФ=dd.MM.yyyy")), , , СтатусСообщения.Обычное);
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования), "ДФ=dd.MM.yyyy"), , , СтатусСообщения.Обычное);
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"), , , СтатусСообщения.Обычное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансов)
	
	Если ТаблицаАвансов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК СчетФактура,
		|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Ссылка.Дата, ДЕНЬ) КАК ДатаСобытия,
		|	СчетФактураВыданный.Ссылка.ДоговорКонтрагента,
		|	СчетФактураВыданный.ДокументОснование,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.ОтчетКомиссионераОПродажах).ВыписыватьСчетаФактурыСводно, ЛОЖЬ) КАК ВыписыватьСчетаФактурыСводно,
		|	СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
		|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента))
		|	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументыОснования", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаАвансов.ВыгрузитьКолонку("ДокументОснование"), Истина));
		
		СФПоДокументам = Запрос.Выполнить().Выгрузить();
		
		Если СФПоДокументам.Количество() > 0 Тогда
			
			СтруктураОтбора = Новый Структура("ДокументОснование, Контрагент, ДатаСобытия, ДоговорКонтрагента");
			СтруктураОтбораСводно = Новый Структура("ДокументОснование, ДатаСобытия");

			Для Каждого СФ Из СФПоДокументам Цикл
				
				Если СФ.ВыписыватьСчетаФактурыСводно Тогда
					ЗаполнитьЗначенияСвойств(СтруктураОтбораСводно, СФ);
					СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбораСводно);
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокаОтбора.СчетФактура = СФ.СчетФактура;
						СтрокаОтбора.ДатаВыписки = СФ.ДатаСобытия;
					КонецЦикла;
				Иначе
					ЗаполнитьЗначенияСвойств(СтруктураОтбора, СФ);
					СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокаОтбора.СчетФактура = СФ.СчетФактура;
						СтрокаОтбора.ДатаВыписки = СФ.ДатаСобытия;
					КонецЦикла;
				КонецЕсли;
				
				СтруктураОтбора.ДатаСобытия = '00010101';
				СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
					СтрокаОтбора.СчетФактура = СФ.СчетФактура;
					СтрокаОтбора.ДатаВыписки = СФ.ДатаСобытия;
				КонецЦикла;
				
			КонецЦикла;
						
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСчетаФактуры(НеиспользуемыеСчетаФактуры, ЕстьОшибки = ложь) Экспорт
	
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);
	
	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");

	ТаблицаОснований = Список.Выгрузить(, "ДокументОснование");
	ТаблицаОснований.Свернуть("ДокументОснование");
	ТаблицаОснований.Колонки.Добавить("КонтрагентСводно", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОснований.Колонки.Добавить("ВыписыватьСчетаФактурыСводно", Новый ОписаниеТипов("Булево"));
	ОтчетыКомиссионера = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ОтчетыКомиссионера.Добавить(СтрокаТаблицы.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтчетыКомиссионера, 
		"Контрагент,ВыписыватьСчетаФактурыСводно");
	Для каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		РеквизитыДокумента = РеквизитыДокументов[СтрокаТаблицы.ДокументОснование];
		Если РеквизитыДокумента <> Неопределено Тогда
			СтрокаТаблицы.КонтрагентСводно = РеквизитыДокумента.Контрагент;
			СтрокаТаблицы.ВыписыватьСчетаФактурыСводно = РеквизитыДокумента.ВыписыватьСчетаФактурыСводно;
		КонецЕсли;
	КонецЦикла;
	
	КлючевыеПоля       = "ДокументОснование,Контрагент,ДоговорКонтрагента,Дата";
	КлючевыеПоляСводно = "ДокументОснование,Дата";
	
	СтруктураОтбора       = Новый Структура("ДокументОснование,Контрагент,ДоговорКонтрагента,Дата");
	СтруктураОтбораСводно = Новый Структура("ДокументОснование,Дата");
	
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");			
		
	Для Каждого СтрокаДокумента Из ТаблицаОснований Цикл
		
		КлючевыеПоляДокумента = ?(СтрокаДокумента.ВыписыватьСчетаФактурыСводно, КлючевыеПоляСводно, КлючевыеПоля);
		СтруктураОтбораСФ     = ?(СтрокаДокумента.ВыписыватьСчетаФактурыСводно, СтруктураОтбораСводно, СтруктураОтбора);
		
		// Для общего документа-основания 
		// на каждого контрагента, договор с контрагентом и дату аванса выписывается отдельный счет-фактура.
		// По отчету комиссионера может выписываться сводный счет-фактура на каждую дату аванса по всем контрагентам
		ТаблицаКлючевыхПолей = Список.Выгрузить(Новый Структура("ДокументОснование", СтрокаДокумента.ДокументОснование), 
			КлючевыеПоляДокумента);
		ТаблицаКлючевыхПолей.Свернуть(КлючевыеПоляДокумента);
		
		Для Каждого СтрокаКлючевыхПолей Из ТаблицаКлючевыхПолей Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораСФ, СтрокаКлючевыхПолей);
			
			СтрокиСФ = Список.НайтиСтроки(СтруктураОтбораСФ);
			
			ТЧАвансыСтарые = Новый Соответствие;
			
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			
			ОшибкаФормирования = Ложь;
			
			Для Каждого СтрокаСФ Из СтрокиСФ Цикл
				
				Если СчФ = Неопределено Тогда
					// Создать/использовать Счет-фактуру
					Если Не СтрокаСФ.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ = СтрокаСФ.СчетФактура.ПолучитьОбъект();
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы Тогда
						СчФ = НеиспользуемыеСчетаФактуры.Найти(Ложь,"Использован");
						Если СчФ = Неопределено Тогда
							ИспользоватьРанееОбнаруженныеДокументы = Ложь;
							СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
							СчФ.Ответственный = Ответственный;
						Иначе
							СчФ.Использован = Истина;
							СчФ = СчФ.Ссылка.ПолучитьОбъект();
						КонецЕсли;
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
					КонецЕсли; 
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаСФ);
					Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
						СчФ.Контрагент        = СтрокаДокумента.КонтрагентСводно;
						СчФ.ДоговорКонтрагента = Неопределено;
					КонецЕсли;
					СчФ.Организация = Организация;
					СчФ.СводныйКомиссионный = СтрокаДокумента.ВыписыватьСчетаФактурыСводно;
									
					Если СчФ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
						И СчФ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
						
						СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
						
					КонецЕсли;
					
					СчФ.Под0 = Ложь;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					СчФ.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета");
					
					Если УчетНДС.ПолучитьВерсиюПостановления(СчФ.Дата) = 2 Тогда
						Если СчФ.СводныйКомиссионный Тогда
							СчФ.КодВидаОперации = "28";
						ИначеЕсли СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
							СчФ.КодВидаОперации = "05";
						Иначе 
							СчФ.КодВидаОперации = "02";
						КонецЕсли;
						СчФ.КодСпособаВыставления = 1;
					КонецЕсли;
					
					СчФ.УстановитьПризнакВыставлен();
					
					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаСФ.ДокументОснование;
					СчФ.СуммаДокумента = СтрокаСФ.ВалютнаяСумма;
					СчФ.Авансы.Очистить();

					СчФ.ПометкаУдаления = Ложь;
					
					СчФ.Дата = КонецДня(СчФ.Дата);
					
					ТипОснования = ТипЗнч(СтрокаСФ.ДокументОснование);
					
					СчФ.ДатаНомерДокументовОплаты.Очистить();
					
					Если ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
						или ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = СчФ.ДокументОснование.НомерВходящегоДокумента;
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.ДатаВходящегоДокумента;
						
					ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
						Или ТипОснования = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(СчФ.ДокументОснование);
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.Дата;
					Иначе
						СчФ.НомерПлатежноРасчетногоДокумента = "";
						СчФ.ДатаПлатежноРасчетногоДокумента =  Неопределено;
					КонецЕсли;
					
					СтрокаПРД = СчФ.ДатаНомерДокументовОплаты.Добавить();
					СтрокаПРД.ДатаПлатежноРасчетногоДокумента  = СчФ.ДатаПлатежноРасчетногоДокумента;
					СтрокаПРД.НомерПлатежноРасчетногоДокумента = СчФ.НомерПлатежноРасчетногоДокумента;
				Иначе
					СчФ.Сумма          = СчФ.Сумма + СтрокаСФ.Сумма;
					СчФ.СуммаНДС       = СчФ.СуммаНДС + СтрокаСФ.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаСФ.ВалютнаяСумма;
				КонецЕсли;
				
				СуммаПоСтроке = СтрокаСФ.Сумма;
				СуммаНДСПоСтроке = СтрокаСФ.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаСФ.СтавкаНДС;
				Если ЗначениеЗаполнено(СтрокаСФ.СчетНаОплату) Тогда
					ТаблицаАвансов = СчФ.ПолучитьТаблицуАвансовПоСчетуНаОплату(СуммаПоСтроке, 
						СуммаНДСПоСтроке, 
						СтавкаНДСПоСтроке, 
						СтрокаСФ.СчетНаОплату);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, СчФ.Авансы);
				Иначе
					Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
						Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
							Если СуммаПоСтроке = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаСтарая.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если СтрокаСФ.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
								НоваяСтрокаПоСуммам              = СчФ.Авансы.Добавить();
								НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
								НоваяСтрокаПоСуммам.Содержание   = СтрокаСтарая.Содержание;
								НоваяСтрокаПоСуммам.Сумма        = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
								НоваяСтрокаПоСуммам.СуммаНДС     = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
								НоваяСтрокаПоСуммам.СтавкаНДС    = СтрокаСФ.СтавкаНДС;
								СуммаПоСтроке                    = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
								СуммаНДСПоСтроке                 = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
								СтрокаСтарая.Сумма               = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
								СтрокаСтарая.СуммаНДС            = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;								
								Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
									НоваяСтрокаПоСуммам.Контрагент = СтрокаСФ.Контрагент;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СуммаПоСтроке <> 0 Тогда
							КонтрагентАванса = ?(СтрокаДокумента.ВыписыватьСчетаФактурыСводно,СтрокаСФ.Контрагент,Неопределено);
							СчФ.ДобавитьСтрокуАвансы(СчФ.Авансы, СтрокаСФ.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , 
								СуммаПоСтроке, СуммаНДСПоСтроке, СтрокаСФ.СтавкаНДС, КонтрагентАванса);
						КонецЕсли;
					Иначе
						КонтрагентАванса = ?(СтрокаДокумента.ВыписыватьСчетаФактурыСводно,СтрокаСФ.Контрагент,Неопределено);
						СчФ.ДобавитьСтрокуАвансы(СчФ.Авансы, СтрокаСФ.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , 
							СтрокаСФ.Сумма, СтрокаСФ.СуммаНДС, СтрокаСФ.СтавкаНДС, КонтрагентАванса);
					КонецЕсли;					
				КонецЕсли;

			КонецЦикла;
			
			//СчФ.Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
			СчФ.СуммаНДСДокумента = СчФ.Авансы.Итог("СуммаНДС");
			СчФ.СуммаДокумента    = СчФ.Авансы.Итог("Сумма");
			
			СообщениеОбОшибке = СчФ.ПроверитьВозможностьЗаписиСФ(ОшибкаФормирования);
			Если ОшибкаФормирования Тогда
				Для Каждого СтрокаСФ Из СтрокиСФ Цикл
					ОбщегоНазначения.СообщитьОбОшибке("Строка "+Строка(СтрокаСФ.НомерСтроки)+", не выписан счет-фактура на аванс."+Символы.ПС+СообщениеОбОшибке);
					СтрокаСФ.СФсформирован = Ложь;
					СтрокаСФ.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли; 
				
			Попытка
				НовыйСФ = СчФ.ЭтоНовый();
				СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				Для Каждого СтрокаСФ Из СтрокиСФ Цикл
					Сообщить(?(НовыйСФ,"Выписан","Обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаСФ.НомерСтроки)+" № " + СчФ.Номер + " от " + СчФ.Дата);
					СтрокаСФ.СФсформирован = истина;
					СтрокаСФ.СчетФактура = СчФ.Ссылка;
				КонецЦикла;
			Исключение
				Для Каждого СтрокаСФ Из СтрокиСФ Цикл
					ОбщегоНазначения.СообщитьОбОшибке(?(НовыйСФ,"Не выписан","Не обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаСФ.НомерСтроки));
					СтрокаСФ.СФсформирован = ложь;
					СтрокаСФ.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
			КонецПопытки;
			
		КонецЦикла;   		
		
	КонецЦикла;

КонецПроцедуры

Функция ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация = &Организация
	|	И (НЕ СчетФактураВыданный.Ссылка В (&СФдляОбновления))
	|	И (НЕ СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СФдляОбновления", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина));

	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;

КонецФункции // ОпределитьНаличиеНеиспользуемыхъСчетовФактурЗаПериод()

Функция ПолучитьКонецНалоговогоПериодаПоДате(ДатаПериода) Экспорт
	
	Если мКонецНалоговогоПериодаПоДатам[КонецМесяца(ДатаПериода)] = Неопределено Тогда
		мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(ДатаПериода), УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, ДатаПериода));
	КонецЕсли;
	
	Возврат мКонецНалоговогоПериодаПоДатам[КонецМесяца(ДатаПериода)];
	
КонецФункции

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

Массив_ТипыДокументовАванса = Метаданные.РегистрыНакопления.НДСсАвансов.Измерения.СчетФактура.Тип.Типы();
ОписаниеТипов_ДокументыРасчетовСПокупателями = Метаданные.РегистрыНакопления.НДСРасчетыСПокупателями.Измерения.Документ.Тип;
Структура_ТипыДокументовАванса = Новый Структура();
Для Каждого ТипДокументаАванса Из Массив_ТипыДокументовАванса Цикл
	Если ОписаниеТипов_ДокументыРасчетовСПокупателями.СодержитТип(ТипДокументаАванса) Тогда
		Структура_ТипыДокументовАванса.Вставить(Метаданные.НайтиПоТипу(ТипДокументаАванса).Имя,ТипДокументаАванса);
	КонецЕсли; 
КонецЦикла;

мКонецНалоговогоПериодаПоДатам = Новый Соответствие;
