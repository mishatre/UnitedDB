Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомитенту()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Номер,
	|	ОтчетКомитентуОПродажах.Дата,
	|	ОтчетКомитентуОПродажах.ДоговорКонтрагента,
	|	ОтчетКомитентуОПродажах.Контрагент,
	|	ОтчетКомитентуОПродажах.Организация,
	|	ОтчетКомитентуОПродажах.СуммаДокумента,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента,
	|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
    Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахТовары.Номенклатура,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура.НаименованиеПолное КАК Товар,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	ОтчетКомитентуОПродажахТовары.КоличествоМест КАК КоличествоМест,
	|	ОтчетКомитентуОПродажахТовары.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмерения,
	|	ОтчетКомитентуОПродажахТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаХранения,
	|	ОтчетКомитентуОПродажахТовары.Количество КАК Количество,
	|	ОтчетКомитентуОПродажахТовары.Цена,
	|	ОтчетКомитентуОПродажахТовары.Сумма КАК Сумма,
	|	ОтчетКомитентуОПродажахТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОтчетКомитентуОПродажахТовары.СерияНоменклатуры КАК Серия,
	|	ОтчетКомитентуОПродажахТовары.Покупатель КАК Покупатель,
	|	ОтчетКомитентуОПродажахТовары.ДатаРеализации КАК ДатаПродажи
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
	|ГДЕ
	|	ОтчетКомитентуОПродажахТовары.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Покупатель,
	|	ОтчетКомитентуОПродажахТовары.НомерСтроки
	|ИТОГИ
	|	СУММА(КоличествоМест),
	|	СУММА(Количество),
	|	СУММА(Сумма)
	|ПО
	|	Покупатель";
	
	ВыборкаПокупателей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Покупатель");
	
	Итого = 0;
	НомерПП = 1;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_ОтчетКомитентуОПродажах";
	Макет       = ПолучитьМакет("ОтчетКомитентуОПродажах");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет комитенту");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата);
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование,");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик               = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Пока ВыборкаПокупателей.Следующий() Цикл
		
		СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаПокупателей.Покупатель, Дата);
		ТекстПокупатель = "Покупатель: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ТекстПокупатель = ТекстПокупатель + " Адрес: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ТекстПокупатель = ТекстПокупатель + " ИНН/КПП покупателя: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;

		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПокупатель");
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ТекстПокупатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		ВыборкаСтрокТовары = ВыборкаПокупателей.Выбрать();
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.НомерСтроки = НомерПП;
					
			ТабДокумент.Вывести(ОбластьМакета);
			
			Итого = Итого + ВыборкаСтрокТовары.Сумма;
			НомерПП = НомерПП + 1;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПокупательИтог");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПокупателей);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = Итого;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.СуммаПрописью       = ОбщегоНазначения.СформироватьСуммуПрописью(Итого, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаВознаграждения = "Сумма комиссионного вознаграждения составила " 
	                                            + ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.СуммаВознаграждения, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ИтоговаяСтрока      = "Всего наименований " + (НомерПП - 1)
	                                            + ", на сумму " + ОбщегоНазначения.ФорматСумм(Итого, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомитенту()

//  Функция формирует табличиный документ как акт об оказании услуг
// на сумму вознаграждения
// 
Функция ПечатьАкта()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	СтавкаНДСВознаграждения,
	|	СуммаВознаграждения КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомитентуОПродажах_АктОбУслугах";
	Макет       = ПолучитьМакет("АктОбУслугах");

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета.Параметры.ТекстЗаголовка      = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт об оказании услуг");
	ОбластьМакета.Параметры.ТекстОСуммеПрописью = 
		"Сумма комиссионного вознаграждения составила " 
		+ ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента)
		+ ", в том числе НДС " + Шапка.СтавкаНДСВознаграждения;

	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;

КонецФункции // ПечатьАкта() 

// Функция формирует табличный документ с печатной формой универсального передаточного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального передаточного документа
//
Функция ПечатьУниверсальногоПередаточногоДокумента()
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДокументСсылка",    				Ссылка);
	ДанныеДокумента.Вставить("Номер",             				Номер);
	ДанныеДокумента.Вставить("Дата",              				Дата);
	ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
	ДанныеДокумента.Вставить("ДокументОснование", 				Ссылка);
	ДанныеДокумента.Вставить("Организация",   	  				Организация);
	ДанныеДокумента.Вставить("Контрагент", 		  				Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		ДоговорКонтрагента);
	ДанныеДокумента.Вставить("Руководитель", 	  				Неопределено);
	ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
	ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
	ДанныеДокумента.Вставить("Подразделение", 	  				Подразделение);

	СчетФактураТребуется = УчетНДС.ОпределитьСчетФактураТребуется(ЭтотОбъект);
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
	
	Возврат УчетНДС.ПечатьУниверсальногоПередаточногоДокумента(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры);

КонецФункции // ПечатьУниверсальногоПередаточногоДокумента

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетКомитентуОПродажах" Тогда

		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомитенту();
		
	ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" Тогда
		ТабДокумент = ПечатьУниверсальногоПередаточногоДокумента();

	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда

		// Напечатаем акт об оказании услуг на сумму комисиионного вознаграждения
		Если УдержатьКомиссионноеВознаграждение Тогда
			Ответ = Вопрос("В этом документе комиссионное вознаграждение удерживается из суммы долга перед комитентом.
			               |В печати акта об оказании услуг на сумму комиссионного вознаграждения нет необходимости.
			               |Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ТабДокумент = ПечатьАкта();
			КонецЕсли;
		Иначе
			ТабДокумент = ПечатьАкта();
		КонецЕсли;

	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("ОтчетКомитентуОПродажах", "Отчет комитенту");
	СтруктураМакетов.Вставить("АктОбОказанииУслуг", "Акт об оказании услуг");
	СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументПоставки - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументПоставки = Неопределено, Реализованными = Ложь) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.УстановитьПараметр("ДокументПоставки"      , ДокументПоставки);
	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусПолучения"       , Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("Купленный"             , Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("НаКомиссию"            , Перечисления.СтатусыПартийТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ВидДвиженияРасход"     , ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ОперацияПередача",       Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию);
	Запрос.УстановитьПараметр("ОперацияРеализация",     Перечисления.КодыОперацийПартииТоваров.Реализация);

	ИмяДокумента = "ПоступлениеТоваровУслуг";

	Если ТипЗнч(ДокументПоставки)=Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		ИмяДокумента = "ПоступлениеТоваровУслугВНТТ";
	КонецЕсли;
	ТекстНоменклатура = "Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
		|   ИЗ Документ."+ИмяДокумента+".Товары
		|   ГДЕ Документ."+ИмяДокумента+".Товары.Ссылка = &ДокументПоставки)";

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Полученные.Номенклатура                                     КАК Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаХраненияОстатковКоэффициент,
	|	Полученные.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры, 
	|	Полученные.СерияНоменклатуры                                КАК СерияНоменклатуры, 
	|" + ?(Реализованными, "СУММА(Партии.Количество)                КАК РасходПоПартиям,
	|   СУММА(ПартииПереданные.Количество)                          КАК КоличествоРеализованных,", "") + "
	|	СУММА(Полученные.КоличествоОстаток)                         КАК КоличествоОстаток,
	|	СУММА(Заказы.КоличествоОстаток)                             КАК ОстатокЗаказанного,
	|	СУММА(Полученные.СуммаВзаиморасчетовОстаток)                КАК СуммаВзаиморасчетовОстаток,
	|	СУММА(Заказы.СуммаВзаиморасчетовОстаток)                    КАК СуммаЗаказанного
	|ИЗ
	|	РегистрНакопления.ТоварыПолученные.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|" + ?(ДокументПоставки <> Неопределено, ("И " + ТекстНоменклатура), "") + "
	|                                              И Сделка                = &Сделка
	|                                              И СтатусПолучения       = &СтатусПолучения) КАК Полученные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                              И ЗаказПоставщику        = &Сделка
	|                                              И СтатусПартии           = &Купленный) КАК Заказы
	|ПО
	|	Полученные.Номенклатура = Заказы.Номенклатура
	| И Полученные.ХарактеристикаНоменклатуры = Заказы.ХарактеристикаНоменклатуры 
	| " + ?(Реализованными, "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Партии
	|ПО Партии.Номенклатура = Полученные.Номенклатура
	|	И Партии.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И Партии.ДокументОприходования = &ДокументПоставки", "И Партии.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И Партии.СтатусПартии = &НаКомиссию
	|	И Партии.КодОперации = &ОперацияРеализация
	|	" + ?(ДокументПоставки <> Неопределено, ("И Партии." + ТекстНоменклатура), "") + "
	|	И Партии.ВидДвижения = &ВидДвиженияРасход
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииПередача
	|ПО ПартииПередача.Номенклатура = Полученные.Номенклатура
	|	И ПартииПередача.ХарактеристикаНоменклатуры = Полученные.ХарактеристикаНоменклатуры
	|	" + ?(ДокументПоставки <> Неопределено, "И ПартииПередача.ДокументОприходования = &ДокументПоставки", "И ПартииПередача.ДокументОприходования.ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|	И ПартииПередача.СтатусПартии = &НаКомиссию
	|	И ПартииПередача.КодОперации = &ОперацияПередача
	|	" + ?(ДокументПоставки <> Неопределено, ("И ПартииПередача." + ТекстНоменклатура), "") + "
	|	И ПартииПередача.ВидДвижения = &ВидДвиженияРасход
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ПартииТоваровПереданные КАК ПартииПереданные
	|		ПО ПартииПереданные.Номенклатура = ПартииПередача.Номенклатура
	|		   И ПартииПереданные.ХарактеристикаНоменклатуры = ПартииПередача.ХарактеристикаНоменклатуры
	|		   И ПартииПереданные.ДокументОприходования = ПартииПередача.ДокументОприходования
	|	       И ПартииПереданные.СтатусПартии = &НаКомиссию
	|	       И ПартииПереданные.КодОперации = &ОперацияРеализация
	|	       " + ?(ДокументПоставки <> Неопределено, ("И ПартииПереданные." + ТекстНоменклатура), "") + "
	|	       И ПартииПереданные.ВидДвижения = &ВидДвиженияРасход
	|", "") + "
	|СГРУППИРОВАТЬ ПО
	|	Полученные.Номенклатура,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков,
	|	Полученные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	Полученные.ХарактеристикаНоменклатуры,
	|	Полученные.СерияНоменклатуры
	|";

	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоОстатокЗаказанного = ?(Выборка.ОстатокЗаказанного = NULL, 0, Выборка. ОстатокЗаказанного);
		СуммаВзаиморасчетовОстаток   = ?(Выборка.СуммаВзаиморасчетовОстаток = NULL, 0, Выборка.СуммаВзаиморасчетовОстаток);
		КоличествоОстаток            = ?(Выборка.КоличествоОстаток = NULL, 0, Выборка.КоличествоОстаток);

		СуммаЗаказанного = ?(Выборка.СуммаЗаказанного = NULL, 0, Выборка.СуммаЗаказанного);

		Если Не Реализованными Тогда
			КоличествоДляОтчета = Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного; 
		Иначе
			РасходПоПартиям = ?(Выборка.РасходПоПартиям = NULL, 0, Выборка.РасходПоПартиям) + ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
			КоличествоДляОтчета = Мин(Выборка.КоличествоОстаток - КоличествоОстатокЗаказанного, РасходПоПартиям);
		КонецЕсли; 

		Если КоличествоДляОтчета <= 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Количество                 = КоличествоДляОтчета;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаХраненияОстатковКоэффициент;
		СтрокаТабличнойЧасти.ЦенаПоступления            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВзаиморасчетовОстаток - СуммаЗаказанного, 
													ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, 
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)) 
													 / (КоличествоОстаток - КоличествоОстатокЗаказанного);

		СтрокаТабличнойЧасти.СуммаПоступления    = СтрокаТабличнойЧасти.ЦенаПоступления * КоличествоДляОтчета;
		СтрокаТабличнойЧасти.Цена                = СтрокаТабличнойЧасти.ЦенаПоступления;
		СтрокаТабличнойЧасти.Сумма               = СтрокаТабличнойЧасти.СуммаПоступления;
		СтрокаТабличнойЧасти.ДокументПоступления = ДокументПоставки;

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части реализованными товарами
// на основании данных регистра "Реализованные товары комитента"
//
// ДокументПоставки - если задан, то заполняет товарами, полученными по 
//                    заданному документу
//
Процедура ЗаполнитьРеализованными(ДокументПоставки = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПоставки", ДокументПоставки);
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Запрос.УстановитьПараметр("Сделка", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Сделка", Сделка);
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Реализованные.Номенклатура                      КАК Номенклатура,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	Реализованные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	Реализованные.ХарактеристикаНоменклатуры        КАК ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры                 КАК СерияНоменклатуры,
	|	Реализованные.ДокументПоставки                  КАК ДокументПоставки,
	| 	МАКСИМУМ(Полученные.КоличествоОстаток)          КАК КоличествоПолученных, 
	|	МАКСИМУМ(Полученные.СуммаВзаиморасчетовОстаток) КАК СуммаПоступления,
	|	СУММА(Реализованные.ВыручкаОстаток)             КАК Выручка,
	|	СУММА(Реализованные.КоличествоОстаток)          КАК КоличествоРеализованных,
	|	Реализованные.Покупатель                        КАК Покупатель,
	|	Реализованные.ДатаРеализации                    КАК ДатаРеализации
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента И Сделка = &Сделка
	|                                                 " + ?(НЕ ЗначениеЗаполнено(ДокументПоставки), "", "И ДокументПоставки = &ДокументПоставки ") + ") КАК Реализованные
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|   РегистрНакопления.ТоварыПолученные.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|                                                И Сделка = &Сделка) КАК Полученные
	|ПО
	|	Полученные.Номенклатура                 = Реализованные.Номенклатура
	|	И Полученные.ХарактеристикаНоменклатуры = Реализованные.ХарактеристикаНоменклатуры
	|	И Полученные.СерияНоменклатуры          = Реализованные.СерияНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	Реализованные.Номенклатура,
	|	Реализованные.ХарактеристикаНоменклатуры,
	|	Реализованные.СерияНоменклатуры,
	|	Реализованные.ДокументПоставки,
	|	Реализованные.Покупатель,
	|	Реализованные.ДатаРеализации
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Покупатель,
	|	ДатаРеализации
	|";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		КоличествоРеализованных = ?(Выборка.КоличествоРеализованных = NULL, 0, Выборка.КоличествоРеализованных);
		КоличествоПолученных    = ?(Выборка.КоличествоПолученных = NULL, 0, Выборка.КоличествоПолученных);
		Выручка                 = ?(Выборка.Выручка = NULL, 0, Выборка.Выручка);
		Количество              = Мин(КоличествоПолученных, КоличествоРеализованных);

		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Покупатель                 = Выборка.Покупатель;
		НоваяСтрока.ДатаРеализации             = Выборка.ДатаРеализации;
		НоваяСтрока.ДокументПоступления        = Выборка.ДокументПоставки;
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.Сумма                      = ?(КоличествоРеализованных = 0, 0, Выручка * НоваяСтрока.Количество / КоличествоРеализованных);
		НоваяСтрока.СуммаПоступления           = ?(КоличествоПолученных = 0, 0, Выборка.СуммаПоступления * НоваяСтрока.Количество / КоличествоПолученных);
		НоваяСтрока.Цена                       = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		НоваяСтрока.ЦенаПоступления            = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.СуммаПоступления / НоваяСтрока.Количество);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * НоваяСтрока.Сумма / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда
			НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения
			                                    * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
			НоваяСтрока.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.СуммаВознаграждения,
																		Истина, Истина, 
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьРеализованными()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр" ,             ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Колонка для проведения по регистру ТоварыПолученные, не зависит от флага удержания вознаграждения.
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаПоступления;

		// Стимость для регистра "Продажи" - сумма комиссионного вознаграждения в валюте упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.НДСУпр    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);										 

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;

	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента)

	ТаблицаДенежныхСредств = РезультатЗапросаПоДенежнымСредствам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента);

	Возврат ТаблицаДенежныхСредств;

КонецФункции // ПодготовитьТаблицуДенежныхСредств()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0), ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовПоТекущемуДокументу, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
Процедура ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаУпр", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаДенежныхСредств Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КурсДокумента,
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуДенежныхСредствУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, СпособРасчетаКомиссионногоВознаграждения, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли
	 Или СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи
	 Или Товары.Итог("СуммаВознаграждения") <> 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДСВознаграждения");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, ДокументПоступления");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "Товары", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "ДенежныеСредства".
//
// Параметры:
// Параметры: 
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки 
//                               ТЧ ТаблицаПоДенежнымСредствам
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента,
                                                            Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Сумма, СтавкаНДС");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства()

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если (СуммаВзаиморасчетов - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0)) < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом()

// По результатам запросов и данным документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
                              ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	                       ТаблицаПоДенежнымСредствам, Отказ, Заголовок);
						   
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаДвижений, Отказ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, Неопределено));
	Запрос.УстановитьПараметр("Период", Новый МоментВремени(Ссылка.Дата, Ссылка));
	
	//
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура               КАК Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.СерияНоменклатуры          КАК СерияНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.ДокументПоставки           КАК ДокументПоставки,
	|	РеализованныеТоварыКомитентовОстатки.Покупатель                 КАК Покупатель,
	|	РеализованныеТоварыКомитентовОстатки.ДатаРеализации             КАК ДатаРеализации,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.КоличествоОстаток)   КАК КоличествоОстаток,
	|	СУММА(РеализованныеТоварыКомитентовОстатки.ВыручкаОстаток)      КАК ВыручкаОстаток
	|ИЗ
	|	РегистрНакопления.РеализованныеТовары.Остатки(
	|			&Период,
	|			ДоговорКонтрагента = &ДоговорКонтрагента
	|				И Сделка = &Сделка) КАК РеализованныеТоварыКомитентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализованныеТоварыКомитентовОстатки.Номенклатура,
	|	РеализованныеТоварыКомитентовОстатки.Покупатель,
	|	РеализованныеТоварыКомитентовОстатки.ДатаРеализации,
	|	РеализованныеТоварыКомитентовОстатки.ХарактеристикаНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.СерияНоменклатуры,
	|	РеализованныеТоварыКомитентовОстатки.ДокументПоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	ДокументПоставки,
	|	Покупатель,
	|	ДатаРеализации";
	//
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	//
	ТаблицаПродажи.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументПоставки, Покупатель, ДатаРеализации", "Количество, Выручка, СуммаПоступления");
	ТаблицаОстатков.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументПоставки, Покупатель, ДатаРеализации");
	//		
	Если ТаблицаОстатков.Количество() > 0.00 Тогда
		Для Каждого Строка Из ТаблицаПродажи Цикл
			
			Для НомерФильтра = 1 По ?(ЗначениеЗаполнено(Строка.Покупатель), 2, 1) Цикл
				//Если покупатель указан, списание выполняется в 2 прохода -
				//сначала по строкам с указанным покупателем, а потом по строкам 
				//с пустым покупателем
				СтруктураОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ДокументПоставки", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, Строка.СерияНоменклатуры, Строка.ДокументПоставки);
				Если ЗначениеЗаполнено(Строка.Покупатель) Тогда
					СтруктураОтбора.Вставить("Покупатель", ?(НомерФильтра = 1, Строка.Покупатель, Справочники.Контрагенты.ПустаяСсылка()));
				КонецЕсли;
				//Отбор по датам реализации при отборе по пустому покупателю не устанавливается
				Если ЗначениеЗаполнено(Строка.ДатаРеализации) И НомерФильтра = 1 Тогда
					СтруктураОтбора.Вставить("ДатаРеализации", Строка.ДатаРеализации);
				КонецЕсли;
				НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
				Для Каждого Запись Из НайденныеСтроки Цикл
					Если Запись.КоличествоОстаток = 0 Тогда
						Продолжить;
					КонецЕсли;
					Списать = Мин(Строка.Количество, Запись.КоличествоОстаток);
					Если Списать > 0 Тогда
						Движение = ТаблицаДвижений.Добавить();
						Движение.ДоговорКонтрагента          = СтруктураШапкиДокумента.ДоговорКонтрагента;
						Движение.Сделка                      = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, Неопределено);
						Движение.Номенклатура                = Строка.Номенклатура;
						Движение.ХарактеристикаНоменклатуры  = Строка.ХарактеристикаНоменклатуры;
						Движение.СерияНоменклатуры           = Строка.СерияНоменклатуры;
						Движение.ДокументПоставки            = Строка.ДокументПоставки;
						Движение.Покупатель                  = Запись.Покупатель;
						Движение.ДатаРеализации              = Запись.ДатаРеализации;
						Движение.Количество                  = Списать;
						Если Запись.КоличествоОстаток = 0 Тогда
							Движение.Выручка          = Запись.ВыручкаОстаток;
						ИначеЕсли Списать = Строка.Количество или Строка.Количество = 0 Тогда
							Движение.Выручка          = Строка.Выручка;
						Иначе 
							Движение.Выручка          = Окр(Строка.Выручка * Списать /Строка.Количество, 2);
						КонецЕсли;
						
						Строка.Количество        = Строка.Количество - Движение.Количество;
						Строка.Выручка           = Строка.Выручка - Движение.Выручка;
						Запись.ВыручкаОстаток    = Запись.ВыручкаОстаток - Движение.Выручка;
						Запись.КоличествоОстаток = Запись.КоличествоОстаток - Движение.Количество;
					КонецЕсли;
					Если Строка.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Строка.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Для Каждого Строка Из ТаблицаПродажи Цикл
		Если Строка.Количество > 0.00 ИЛИ Строка.Выручка Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.ДоговорКонтрагента          = СтруктураШапкиДокумента.ДоговорКонтрагента;
			Движение.Сделка                      = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка), СтруктураШапкиДокумента.Сделка, Неопределено);
			Движение.Номенклатура                = Строка.Номенклатура;
			Движение.ХарактеристикаНоменклатуры  = Строка.ХарактеристикаНоменклатуры;
			Движение.СерияНоменклатуры           = Строка.СерияНоменклатуры;
			Движение.ДокументПоставки            = Строка.ДокументПоставки;
			Движение.Покупатель                  = Справочники.Контрагенты.ПустаяСсылка();
			Движение.ДатаРеализации              = Дата(01, 01, 01);
			Движение.Количество                  = Строка.Количество;
			Движение.Выручка                     = Строка.Выручка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// По результатам запросов и данным документа формируем движения по регистрам упр. учета.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
                                 ТаблицаПоДенежнымСредствам, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);
		
		Если СуммаДолга <> 0 Тогда
			
			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент = Контрагент;
			СтрокаДвижений.Организация = Организация;
			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаДолга;
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;
		
		КонецЕсли;


		// Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		   И СуммаВознаграждения <> 0 Тогда

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент = Контрагент;
			СтрокаДвижений.Организация = Организация;
			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаВознаграждения;
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		Если СуммаДолга <> 0 Тогда
				
			// По регистру "РасчетыСКонтрагентами".
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент = Контрагент;
			СтрокаДвижений.Организация = Организация;
			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаДолга;
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;
	
		// Долг перед комитентом за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		// При этих же условиях проводим по продажам.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		   И СуммаВознаграждения <> 0 Тогда

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент = Контрагент;
			СтрокаДвижений.Организация = Организация;
			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов = СуммаВознаграждения;
			СтрокаДвижений.СуммаУпр            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
												 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
												 КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												 КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод              = Дата;
			НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;

		ИтогНДСВознаграждения = ТаблицаПоТоварам.Итог("НДСВознаграждения");
		Если СтруктураШапкиДокумента.СуммаВознаграждения <> 0 ИЛИ ИтогНДСВознаграждения <> 0 Тогда
				
			// По регистру ПРОДАЖИ.
			НаборДвижений = Движения.Продажи;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			НоваяСтрока = ТаблицаДвижений.Добавить();

			НоваяСтрока.Номенклатура               = Справочники.Номенклатура.ПустаяСсылка();
			НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрока.ДокументПродажи            = Ссылка;
			НоваяСтрока.ДоговорКонтрагента         = ДоговорКонтрагента;
			НоваяСтрока.Контрагент                 = Контрагент;
			НоваяСтрока.Организация                = Организация;
			НоваяСтрока.ЗаказПокупателя            = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			НоваяСтрока.Подразделение              = Подразделение;

			НоваяСтрока.Количество                 = 0;
			НоваяСтрока.Стоимость                  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВознаграждения,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НоваяСтрока.СтоимостьБезСкидок         = НоваяСтрока.Стоимость;
			НоваяСтрока.НДС                        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ИтогНДСВознаграждения,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПолученные.

		НаборДвижений = Движения.ТоварыПолученные;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПолучения");

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка,"Сделка");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыПолученные.ВыполнитьРасход();
		КонецЕсли;

		// ПО РЕГИСТРУ РеализованныеТовары
		
		НаборДвижений = Движения.РеализованныеТовары;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		ДвиженияПоРегиструРеализованныеТовары(СтруктураШапкиДокумента, ТаблицаПродажи, ТаблицаДвижений, Отказ);
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.РеализованныеТовары.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	//ДЕНЕЖНЫЕ СРЕДСТВА КОМИТЕНТА
	// По денежным средствам комитента проводим только если в договоре выставлен флаг.
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда

		НаборДвижений = Движения.ДенежныеСредстваКомитента;

		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
		ТаблицаДенежныеСредства = ТаблицаПоДенежнымСредствам.Скопировать();

		Сч = 0;
		// Зачеты аванса в движения не включаем.
		Пока Сч < ТаблицаДенежныеСредства.Количество() Цикл
			СтрокаТаблицы = ТаблицаДенежныеСредства.Получить(Сч);
			Если СтрокаТаблицы.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда 
				 ТаблицаДенежныеСредства.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДенежныеСредства, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента), "Сделка");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДенежныеСредстваКомитента.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ) Экспорт
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС И Не СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134 тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если ТаблицаВыручки.Итог("Сумма") = 0 и ТаблицаВыручки.Итог("НДС") = 0 Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

		ТаблицаВыручкиДляНДС = ТаблицаВыручки.Скопировать();
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Справочники.Номенклатура.ПустаяСсылка(),"Ценность,Номенклатура");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги,"ВидЦенности");
		ТаблицаВыручкиДляНДС.ЗаполнитьЗначения(Истина,"Услуга");
		ТаблицаВыручкиДляНДС.Свернуть("ВидЦенности, Ценность, СтавкаНДС, Номенклатура, Услуга",
		"Сумма,СуммаБезНДС,НДС,СуммаВал,СуммаБезНДСВал,НДСВал,Количество");
		
		ТаблицаВыручкиДляНДС.Колонки.Добавить("Комиссионный",новый ОписаниеТипов("Булево")); // Предустанавливается значение по умолчанию - ложь
			
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручкиДляНДС, Движения, Отказ);
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, Неопределено, , УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
	Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
		ТаблицаДвижений_НДСРасчетыСПокупателями  = Движения.НДСРасчетыСПокупателями.Выгрузить();
		ТаблицаДвижений_НДСРасчетыСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		
		Движения.НДСРасчетыСПокупателями.мПериод = СтруктураШапкиДокумента.Дата;
		Движения.НДСРасчетыСПокупателями.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПокупателями;
		Движения.НДСРасчетыСПокупателями.ДобавитьДвижение();
		
		// Отражение распределенной суммы
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей  = Движения.НДСУчетРаспределенныхОплатПокупателей.Выгрузить();
		
		Для каждого СтрокаРасчетов Из ТаблицаДвижений_НДСРасчетыСПокупателями Цикл
			СтрокаРаспределеннойОплаты = ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.Добавить();
			СтрокаРаспределеннойОплаты.РаспределеннаяСумма = СтрокаРасчетов.Сумма;
		КонецЦикла; 
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"СчетФактура, ДокументОплаты");
		ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
		
		Движения.НДСУчетРаспределенныхОплатПокупателей.мПериод			= СтруктураШапкиДокумента.Дата;
		Движения.НДСУчетРаспределенныхОплатПокупателей.мТаблицаДвижений	= ТаблицаДвижений_НДСУчетРаспределенныхОплатПокупателей;
		Движения.НДСУчетРаспределенныхОплатПокупателей.ДобавитьДвижение();
		
	КонецЕсли;


КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА
// (кроме таблицы по таре)

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                  , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                   , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                            , "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "КонтролироватьДенежныеСредстваКомитента", "КонтролироватьДенежныеСредстваКомитента");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации"                            , "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "Склад.ВидСклада"                        , "ВидСклада");
    ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",     "ВедениеУчетаПоПроектам",                       "ВедениеУчетаПоПроектам");
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	//Пока не добавили реквизиты в шапку
	Если не СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС") тогда
		СтруктураШапкиДокумента.Вставить("СуммаВключаетНДС", Истина);
	КонецЕсли;

	Если не СтруктураШапкиДокумента.Свойство("УчитыватьНДС") тогда
		СтруктураШапкиДокумента.Вставить("УчитыватьНДС", Истина);
	КонецЕсли;

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности"    , Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты"                   , 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЦенаПродажи"               , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "СуммаВознаграждения");
	СтруктураПолей.Вставить("Выручка"                   , "Сумма");
	СтруктураПолей.Вставить("СуммаПоступления"          , "СуммаПоступления");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("НДСВознаграждения"         , "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ДокументПоставки"          , "ДокументПоступления");
	СтруктураПолей.Вставить("Покупатель"                , "Покупатель");
	СтруктураПолей.Вставить("ДатаРеализации"            , "ДатаРеализации");

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
	
	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);

КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)


	СтавкаНДСВознаграждения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	 Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор с контрагентом должен иметь вид договора с комитентом!");
			Возврат;
		КонецЕсли;

		Сделка = Основание.Сделка;
		//Амбер
		ПоступлениеТоваровИУслуг = Основание.ССылка;
		///Амбер		

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		Если Основание.Проведен Тогда
			ЗаполнитьРеализованными(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Если Не ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат;
		КонецЕсли;
		
		Если Основание.Проведен Тогда

			Сделка = Основание;
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;

			ЗаполнитьТовары();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = Товары.Итог("Сумма");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения");
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);

КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
		СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
		СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
		СтруктураПолей.Вставить("СуммаРегл"                    , "СуммаРегл");
	
		РезультатЗапросаПоДокументамРасчетовСКонтрагентами = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
		ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
	КонецЕсли;

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ТаблицаПоДенежнымСредствам = Новый ТаблицаЗначений();
	Если НЕ Отказ И СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда

		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ВидОтчетаПоПлатежам", "ВидОтчетаПоПлатежам");
		СтруктураПолей.Вставить("Сумма"              , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
		СтруктураПолей.Вставить("СуммаНДС"           , "СуммаНДС");

		РезультатЗапросаПоДенежнымСредствам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураПолей);

		// Подготовим таблицу денежных средств для проведения.
		ТаблицаПоДенежнымСредствам = ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента);

		// Проверить заполнение ТЧ "ДенежныеСредства"
		ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок);

	КонецЕсли;

	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		                    ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);
