
Процедура ДобавитьНоменклатуруНакладнойВДеревоТэгов(СтрокиДерева, ДанныеТаблицыТовары, ДанныеОШтрихКодах, Отказ, Сообщение)
	
	Для каждого СтрокаТаблицыТовары Из ДанныеТаблицыТовары Цикл
		
		СообщениеСтроки = "";
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.Количество) Тогда
			СообщениеСтроки = СообщениеСтроки + Символы.ПС + "- не заполнено количество";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.ИдТовара)
			И Не СтрокаТаблицыТовары.ЕдиницаИзмеренияСоответствуетНоменклатуреКонтрагента Тогда
			СообщениеСтроки = СообщениеСтроки + Символы.ПС + "- единица измерения не соответствует единице измерения номенклатуры контрагента: """ + СтрокаТаблицыТовары.ОКЕИ + """";
		КонецЕсли;
		
		СтрокиТовара = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "Товар").Строки;
		ИмяТипаДляЗаписи = "";
		ИдентификаторТовара = ЭлектронныеДокументы.ПолучитьИдентификаторТовараДляВыгрузки(СтрокаТаблицыТовары, ДанныеОШтрихКодах, Сообщение, ИмяТипаДляЗаписи);
		
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "ИдТовара", ИдентификаторТовара, ИмяТипаДляЗаписи);
		
		Если ЗначениеЗаполнено(АкцептованныйЗаказ) Тогда
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "НомерАкцептованногоЗаказа"  , АкцептованныйЗаказ.ИсходныйДокумент.НомерВходящегоДокумента , "ДокументИД");
		КонецЕсли;
		
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "Количество", ЭлектронныеДокументы.ХМЛЧисло(СтрокаТаблицыТовары.Количество));
		
		СтрокиСтоимости = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "СуммаПоСтроке").Строки;
		ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиСтоимости, "Сумма", ЭлектронныеДокументы.ХМЛЧисло(СтрокаТаблицыТовары.Сумма), , Новый Структура("Валюта", СтрокаТаблицыТовары.Валюта));
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.СуммаНДС) Тогда
			СтрокиНалога = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиСтоимости, "Налог").Строки;
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ТипНалога", "НДС");
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ВеличинаСтавкиНалога", ЭлектронныеДокументы.ХМЛЧисло(УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицыТовары.СтавкаНДС)));
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "Сумма", ЭлектронныеДокументы.ХМЛЧисло(СтрокаТаблицыТовары.СуммаНДС));
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиНалога, "ВключеноВСтоимость", ЭлектронныеДокументы.ХМЛБулево(СтрокаТаблицыТовары.СуммаВключаетНДС));
		КонецЕсли;
		
		Серия = СтрокаТаблицыТовары.СерияНоменклатуры;
		ЕстьСерияНоменкалтуры = ЗначениеЗаполнено(Серия);
		
		Если ЕстьСерияНоменкалтуры
			И ЗначениеЗаполнено(Серия.НомерГТД) Тогда
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "НомерГТД", Строка(СтрокаТаблицыТовары.СерияНоменклатуры.НомерГТД));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Примечание) Тогда
			ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "Примечание", СтрокаТаблицыТовары.Примечание);
		КонецЕсли;
						
		Если ЕстьСерияНоменкалтуры Тогда
			
			Атрибуты = Новый Структура("xmlns", "series");
			ВложенноеДерево = ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиТовара, "СерияНоменклатуры", , , Атрибуты);
			
			Если ЗначениеЗаполнено(Серия.СерийныйНомер) Тогда
				ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ВложенноеДерево.Строки, "СерийныйНомер", Серия.СерийныйНомер);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Серия.Сертификат) Тогда
				ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ВложенноеДерево.Строки, "Сертификат", Серия.Сертификат);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Серия.СрокГодности) Тогда
				ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ВложенноеДерево.Строки, "СрокГодности", ЭлектронныеДокументы.ХМЛДата(Серия.СрокГодности));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Серия.СтранаПроисхождения.Код) Тогда
				ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(ВложенноеДерево.Строки, "СтранаПроисхождения", Серия.СтранаПроисхождения.Код);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеСтроки) Тогда
			Сообщение = Сообщение + Символы.ПС + "Строка: " + СтрокаТаблицыТовары.НомерСтроки + "; Номенклатура:""" + СтрокаТаблицыТовары.Номенклатура + """ содержит ошибки:" + СообщениеСтроки;
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // () 

Процедура ЗаполнитьXML(ОбъектXML, Отказ, Сообщение, ДобавлятьАтрибутПроверки = Ложь, ДополнятьИсходящееСообщениеПриложеннымиФайлами = Ложь) Экспорт
	
	ПрефиксИмен = "";
	ПространствоИменСОДИ    = "urn:moo-sodi.ru:commerceml_sodi";
	
	ОбъектXML.ЗаписатьНачалоЭлемента("ЭлектроннаяНакладная", ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксИмен, ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	Если ДобавлятьАтрибутПроверки Тогда
		ОбъектXML.ЗаписатьАтрибут("xsi:schemaLocation","urn:moo-sodi.ru:commerceml_sodi cml-delivery-3.0sodi.xsd");
	КонецЕсли;
	
	ДеревоТэгов  = ЭлектронныеДокументы.ИнициализироватьДеревоТэгов(ЭтотОбъект, Отказ, Сообщение);
	СтрокиДерева = ДеревоТэгов.Строки;
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДлительностьОжиданияОтвета", ЭлектронныеДокументы.ХМЛДлительность(ДлительностьОжиданияОтвета));
	ЭлектронныеДокументы.ДобавитьДанныеСкладаВДеревоТегов(СтрокиДерева, УчетныйДокумент.Склад);	
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "НомерТоварнойНакладной", УчетныйДокумент.Номер);
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДатаТоварнойНакладной", ЭлектронныеДокументы.ХМЛДата(УчетныйДокумент.Дата));
	
	ДанныеОШтрихКодах = Неопределено;
	ДанныеТаблицыТовары = ЭлектронныеДокументы.ПодготовитьНоменклатуруДокументаДляЭкспорта(УчетныйДокумент, ДанныеОШтрихКодах, Истина);
	
	ДобавитьНоменклатуруНакладнойВДеревоТэгов(СтрокиДерева, ДанныеТаблицыТовары, ДанныеОШтрихКодах, Отказ, Сообщение);
	
	ЭлектронныеДокументы.ЗаписатьИнформациюОПриложенныхФайлахКДокументу(ДополнятьИсходящееСообщениеПриложеннымиФайлами, СтрокиДерева, УчетныйДокумент);
	
	ЭлектронныеДокументы.ЗаписатьТэгиВXMLДокумент(ОбъектXML, ДеревоТэгов.Строки, ПрефиксИмен);
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипОснования = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		// Заполнение шапки
		УчетныйДокумент = Основание.Ссылка;
		Контрагент = Основание.Контрагент;
		Организация = Основание.Организация;
		
		#Если Клиент Тогда
		ЭлектронныеДокументы.ПриИзмененииОрганизацииВДокументе(ЭтотОбъект, Ложь);
		ЭлектронныеДокументы.ПриИзмененииРеализацииВДокументе(ЭтотОбъект);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаОтправки = Неопределено;
	Отправлен    = Ложь;
	
КонецПроцедуры

Функция SOAPAction() Экспорт
	
	Возврат "delivery";
	
КонецФункции // () 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы.ПередЗаписьюИсходящегоЭлектронногоДокумента(ЭтотОбъект, Отказ, Истина);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПометкаУдаления Тогда 
		
		// не должно быть второго документа по одному и тому же заказу
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые 1 
		               |	ИсходящаяЭлектроннаяНакладная.Ссылка
		               |ИЗ
		               |	Документ.ИсходящаяЭлектроннаяНакладная КАК ИсходящаяЭлектроннаяНакладная
					   |ГДЕ
					   |	ИсходящаяЭлектроннаяНакладная.УчетныйДокумент = &УчетныйДокумент
					   |	И ИсходящаяЭлектроннаяНакладная.Ссылка <> &Ссылка
					   |	И ИсходящаяЭлектроннаяНакладная.ПометкаУдаления = Ложь";
					   
		Запрос.УстановитьПараметр("УчетныйДокумент", УчетныйДокумент);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаЗаказов.Количество() > 0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Недопустимо создавать несколько электронных документов на базе одной накладной.
			|Существующая исходящая электронная накладная: " + Строка(ТаблицаЗаказов[0].Ссылка), Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
