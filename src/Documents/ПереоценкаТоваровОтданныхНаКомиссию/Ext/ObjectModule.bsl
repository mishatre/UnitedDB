Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьПереоценкиТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ПереоценкаТоваровОтданныхНаКомиссию КАК ПереоценкаТоваровОтданныхНаКомиссию
	|
	|ГДЕ
	|	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПереоценкаТоваровОтданныхНаКомиссию_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Переоценка товаров отданных на комиссию");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Получатель = Шапка.Покупатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ФлагПечатиМест = (Товары.Итог("КоличествоМест") > 0);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + ?(ФлагПечатиМест, "Мест", ""));
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка" + ?(ФлагПечатиМест, "Мест", ""));

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Товары.Итог("Сумма"));
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(Товары.Итог("Сумма"), Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(Товары.Итог("Сумма"), Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПереоценкиТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПереоценкиТоваров();
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Накладная", "Переоценка товаров отданных на комиссию");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части. Если передан документ основание то
//  заполнение производится по документу основанию, иначе по всем.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТовары(ДокументОснование = Неопределено) Экспорт

	КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументПередачи",   ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.ДоговорКонтрагента                      КАК ДоговорКонтрагента,
		|	Остатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Остатки.Номенклатура                            КАК Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры              КАК ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры                       КАК СерияНоменклатуры,
		|	СУММА(Остатки.КоличествоОстаток)                КАК КоличествоПоДокументу,
		|	СУММА(Остатки.КоличествоОстаток)                КАК КоличествоОстаток,
		|	СУММА(Остатки.СуммаВзаиморасчетовОстаток)       КАК СтоимостьОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|                                                 ДоговорКонтрагента = &ДоговорКонтрагента
		|												И Сделка                = &Сделка
		|												И СтатусПередачи        = &СтатусПередачи
		|" + ?(НЕ ЗначениеЗаполнено(ДокументОснование), "", "И Номенклатура в (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
		|                                                      ИЗ Документ.РеализацияТоваровУслуг.Товары ГДЕ Документ.РеализацияТоваровУслуг.Товары.Ссылка = &ДокументПередачи)") + "
		|	                                                     ) КАК Остатки
		|ГДЕ
		| 	Остатки.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.ДоговорКонтрагента,
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры
		|";
	Иначе
		Запрос.УстановитьПараметр("Сделка",             Сделка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокТабличнаяЧасть.Номенклатура                             КАК Номенклатура,
		|	ДокТабличнаяЧасть.ХарактеристикаНоменклатуры               КАК ХарактеристикаНоменклатуры,
		|	ДокТабличнаяЧасть.СерияНоменклатуры                        КАК СерияНоменклатуры,
		|	ДоговорыКонтрагентов.Ссылка                                КАК ДоговорКонтрагента,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
		|	ВЫБОР	КОГДА	ДоговорыКонтрагентов.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|			ТОГДА	Документ.Сделка
		|			ИНАЧЕ	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|							ТОГДА Неопределено
		|							ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
		|					КОНЕЦ
		|	КОНЕЦ                                                      КАК ЗаказПокупателя,
		|	СУММА(ДокТабличнаяЧасть.Количество)                        КАК Количество
		|ПОМЕСТИТЬ ТабличнаяЧастьДок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ДокТабличнаяЧасть
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг КАК Документ
		|ПО
		|	Документ.Ссылка = ДокТабличнаяЧасть.Ссылка
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ПО
		|	ДоговорыКонтрагентов.Ссылка = Документ.ДоговорКонтрагента
		|ГДЕ
		|	Документ.Ссылка = &ДокументПередачи " + ?(ЗначениеЗаполнено(Сделка), " И ДокТабличнаяЧасть.ЗаказПокупателя = &Сделка", "") + "
		|СГРУППИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					ДоговорыКонтрагентов.Ссылка,
		|					ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
		|					ВЫБОР	КОГДА	ДоговорыКонтрагентов.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|							ТОГДА	Документ.Сделка
		|							ИНАЧЕ	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|											ТОГДА Неопределено
		|											ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
		|									КОНЕЦ
		|					КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					ЗаказПокупателя
		|";
		Запрос.Выполнить();

		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	ТабличнаяЧастьДок КАК Док
		|УПОРЯДОЧИТЬ ПО ЗаказПокупателя
		|";

		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();

		ПараметрСделка = Неопределено;
		Если ТаблицаЗаказов.Количество() = 0 Тогда
			возврат;
		ИначеЕсли ТаблицаЗаказов.Количество() = 1 Тогда
			ПараметрСделка = ТаблицаЗаказов[0]["ЗаказПокупателя"];
		Иначе
			СписокСделок = Новый СписокЗначений();
			Для Каждого элементСделка Из ТаблицаЗаказов Цикл
				СписокСделок.Добавить(элементСделка.ЗаказПокупателя, ?(ЗначениеЗаполнено(элементСделка.ЗаказПокупателя), элементСделка.ЗаказПокупателя, "Пустой заказ"));
			КонецЦикла;
			ФормаВыбораЗаказа = ПолучитьОбщуюФорму("ФормаВыбораЗаказа");
			ФормаВыбораЗаказа.НачальноеЗначениеВыбора = Новый Структура("СписокВыбора, ЗаполнитьСписокВыбора", СписокСделок, Ложь);
			ФормаВыбораЗаказа.ОткрытьМодально();
			Если НЕ ФормаВыбораЗаказа.ВыбраноЗначение Тогда
				возврат;
			КонецЕсли;
			ПараметрСделка = ФормаВыбораЗаказа.ВыбранноеЗначение;
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧастьДок.Номенклатура                     КАК Номенклатура,
		|	ТабличнаяЧастьДок.ХарактеристикаНоменклатуры       КАК ХарактеристикаНоменклатуры,
		|	ТабличнаяЧастьДок.ДоговорКонтрагента               КАК ДоговорКонтрагента,
		|	ТабличнаяЧастьДок.ВалютаВзаиморасчетов             КАК ВалютаВзаиморасчетов,
		|	ТабличнаяЧастьДок.СерияНоменклатуры                КАК СерияНоменклатуры,
		|	ТабличнаяЧастьДок.Количество                       КАК КоличествоПоДокументу,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00)          КАК КоличествоОстаток,
		|	ЕСТЬNULL(Остатки.СуммаВзаиморасчетовОстаток, 0.00) КАК СтоимостьОстаток
		|ИЗ
		// Временная таблица документа
		|	ТабличнаяЧастьДок КАК ТабличнаяЧастьДок
		//
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|												ДоговорКонтрагента = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|												И Сделка = &ПараметрСделка
		|												И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ ТабличнаяЧастьДок)
		|											) КАК Остатки
		|ПО
		|	ТабличнаяЧастьДок.Номенклатура = Остатки.Номенклатура 
		|	И ТабличнаяЧастьДок.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|	И ТабличнаяЧастьДок.СерияНоменклатуры = Остатки.СерияНоменклатуры
		|	И ТабличнаяЧастьДок.ЗаказПокупателя = Остатки.Сделка
		|ГДЕ
		|	ТабличнаяЧастьДок.ЗаказПокупателя = &ПараметрСделка
		|	И ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00) > 0
		|";
		Запрос.УстановитьПараметр("ПараметрСделка", ПараметрСделка);

		Сделка = ПараметрСделка;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = МИН(Выборка.КоличествоОстаток, Выборка.КоличествоПоДокументу);
		СтрокаТабличнойЧасти.Сумма                      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОстаток,
		                                                     Выборка.ВалютаВзаиморасчетов,
		                                                     ВалютаДокумента,
		                                                     КурсВзаиморасчетов,
		                                                     КурсДокумента,
		                                                     КратностьВзаиморасчетов,
		                                                     КратностьДокумента);
		СтрокаТабличнойЧасти.СуммаСтарая                = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.Цена                       = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТовары()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> ВалютаДокумента Тогда
		Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			СтрокаТаблицы.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов, СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		КонецЦикла;
	КонецЕсли;								

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента,Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
				"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
				|Заполните поле ""Заказ покупателя:""!");
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда
			СтруктураОбязательныхПолей.Вставить("Сделка", 
				"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
				|Заполните поле ""Счет покупателю:""!");
		КонецЕсли;

	КонецЕсли;
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
	НаборДвижений = Движения.ТоварыПереданные;
	
	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам.Скопировать());
		
		// Теперь в качестве суммы взаиморасчетов должна выступать колонка "Сумма"
		ТаблицаПоТоварам.Колонки.Удалить(ТаблицаПоТоварам.Колонки.Найти("СуммаВзаиморасчетов"));
		ТаблицаПоТоварам.Колонки.Сумма.Имя = "СуммаВзаиморасчетов";
				
		СтруктТаблицДокумента.Вставить("ТаблицаСуммы", ТаблицаПоТоварам);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		Для каждого СтрокаТаблицы из ТаблицыДанныхДокумента.ТаблицаПоТоварам Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.Количество;
		КонецЦикла;
								
		// Заполним недостающие поля
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, , Истина));
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
							
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат;
		КонецЕсли;

		Если Основание.Проведен Тогда

			Сделка = Основание.Сделка;

			ЗаполнитьТовары(Основание);
			
		КонецЕсли;


	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Сделка = Основание;

		Если Основание.Проведен Тогда

			ЗаполнитьТовары();
		КонецЕсли;
			
	КонецЕсли;	

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                       , "ДоговорОрганизация");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов"       , "СуммаСтарая * (-1)");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);

