#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики выгрузки конвертации УправлениеТорговлей --> БухгалтерияПредприятия {72d8f699-205c-11e4-b98f-c86000df10de}                                                                            
// 
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. После отладки рекомендуется
// скопировать текст модуля в буфер обмена и импортировать его в базу
// "Конвертация данных".
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ
// Данный раздел изменять запрещено.

Перем Параметры;
Перем Алгоритмы;
Перем Запросы;
Перем УзелДляОбмена;
Перем ОбщиеПроцедурыФункции;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)
// В данном разделе разрешено изменять реализацию процедур.

Процедура Конвертация_ПослеЗагрузкиПравилОбмена() Экспорт

	//рекомендуемые настройки поиска
	ВариантыНастроекПоиска = Новый Структура;
	ВариантыНастроекПоиска.Вставить("Контрагенты","ИННКППНаименование");
	ВариантыНастроекПоиска.Вставить("Организации","ИННКППНаименование");
	ВариантыНастроекПоиска.Вставить("Номенклатура","НаименованиеРодительЭтоГруппа");
	ВариантыНастроекПоиска.Вставить("ФизическиеЛица","НаименованиеДатаРождения");
	
	//рекомендуемые настройки поиска для перехода с предыдущего обмена
	ВариантыНастроекПоискаДляПереходаСПредыдущегоОбмена = Новый Структура;
	ВариантыНастроекПоискаДляПереходаСПредыдущегоОбмена.Вставить("Контрагенты","ИННКППНаименование");
	ВариантыНастроекПоискаДляПереходаСПредыдущегоОбмена.Вставить("Организации","ИННКППНаименование");
	ВариантыНастроекПоискаДляПереходаСПредыдущегоОбмена.Вставить("Номенклатура","КодЭтоГруппа");
	ВариантыНастроекПоискаДляПереходаСПредыдущегоОбмена.Вставить("ФизическиеЛица","НаименованиеДатаРождения");
	
	//после чтения правил данные параметры будут доступны для анализа
	Параметры.Вставить("ВариантыНастроекПоиска",ВариантыНастроекПоиска);
	Параметры.Вставить("ВариантыНастроекПоискаДляПереходаСПредыдущегоОбмена",ВариантыНастроекПоискаДляПереходаСПредыдущегоОбмена);
	
	//настройки поиска с условиями. 
	ПоискБезВариантовПоиска  = Новый Структура;
	ПоискБезВариантовПоиска.Вставить("ДоговорыКонтрагентов","НаименованиеВладелецВалютаВзаиморасчетовВедениеВзаиморасчетовОрганизацияВидДоговора");
	ПоискБезВариантовПоиска.Вставить("Склады","НаименованиеВидСклада");
	
	Параметры.Вставить("ПоискБезВариантовПоиска",ПоискБезВариантовПоиска);
	
	Параметры.Вставить("ЛогФайл", Новый ТекстовыйДокумент());

КонецПроцедуры

Процедура Конвертация_ПередВыгрузкойДанных(ФайлОбмена, Отказ) Экспорт

	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа = Новый Массив();
	// Платежное поручение исходящее
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);
	
	// Расходный кассовый ордер
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
	
	// Приходный кассовый ордер
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами);
	МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Добавить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами);
	
	Параметры.Вставить("ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа", МассивВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа);
	
	Параметры.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Параметры.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	МассивТиповДокументов = Новый Массив;
	
	Для каждого МетаДокумент Из Метаданные.Документы цикл
		
		МассивТиповДокументов.Добавить(Тип("ДокументСсылка." + МетаДокумент.Имя));
		МассивТиповДокументов.Добавить(Тип("ДокументОбъект." + МетаДокумент.Имя));
		
	КонецЦикла;
	
	ОписаниеТиповДокументы = Новый ОписаниеТипов(МассивТиповДокументов);
	Параметры.Вставить("ОписаниеТиповДокументы",ОписаниеТиповДокументы);
	
	МассивТиповДокументов.Очистить();
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.СчетФактураПолученный"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.СчетФактураВыданный"));
	
	ОписаниеТиповДокументы = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Параметры.Вставить("ОписаниеТиповДокументыСФ",ОписаниеТиповДокументы);
	
	// Документы расчетов (БП зачет аванса), несовместимые типы документов.
	// Обмен не поддерживается.
	СтруктураНевыгружаемыхДокументовРасчетов = Новый Структура();
	// СписаниеСРасчетногоСчета
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("СписаниеСРасчетногоСчета", Массив);
	// ПоступлениеНаРасчетныйСчет
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ"));
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	Массив.Добавить(Тип("ДокументСсылка.АккредитивПолученный"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("ПоступлениеНаРасчетныйСчет", Массив);
	// ПоступлениеТоваровУслуг
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ"));
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	Массив.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("ПоступлениеТоваровУслуг", Массив);
	// ПриходныйКассовыйОрдер
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.КорректировкаДолгаПоВозвратнойТаре"));
	Массив.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	Массив.Добавить(Тип("ДокументСсылка.АккредитивПолученный"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("ПриходныйКассовыйОрдер", Массив);
	// РасходныйКассовыйОрдер
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.КорректировкаДолгаПоВозвратнойТаре"));
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ"));
	Массив.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	Массив.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеПолученное"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("РасходныйКассовыйОрдер", Массив);
	// РеализацияТоваровУслуг
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Массив.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеПолученное"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("РеализацияТоваровУслуг", Массив);
	// ПоступлениеДопРасходов
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ"));
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	Массив.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	Массив.Добавить(Тип("ДокументСсылка.АккредитивПолученный"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("ПоступлениеДопРасходов", Массив);
	// ОтчетКомиссионераОПродажах
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Массив.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	Массив.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	Массив.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Массив.Добавить(Тип("ДокументСсылка.АккредитивПереданный"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	Массив.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	Массив.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеПолученное"));
	Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("ОтчетКомиссионераОПродажах", Массив);
	// КорректировкаДолга
	Массив = Новый Массив();
	Массив.Добавить(Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС"));
	Массив.Добавить(Тип("ДокументСсылка.КорректировкаДолгаПоВозвратнойТаре"));
	Массив.Добавить(Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС"));
	СтруктураНевыгружаемыхДокументовРасчетов.Вставить("КорректировкаДолга", Массив);
	///////////////
	Параметры.СтруктураНевыгружаемыхДокументовРасчетов = СтруктураНевыгружаемыхДокументовРасчетов;

КонецПроцедуры

Процедура Конвертация_ПередПолучениемИзмененныхОбъектов(Получатель, УзелДляФоновогоОбмена) Экспорт

	
	Параметры.Вставить("ДатаНачалаВыгрузкиДокументов",Получатель.ДатаНачалаВыгрузкиДокументов);
	Параметры.Вставить("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете",Получатель.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете);
	
	Параметры.Вставить("ИспользоватьФильтрПоОрганизациям",?(Получатель.Организации.Количество()>0,Истина,Ложь));
	Параметры.Вставить("ИспользоватьФильтрПоСкладам",?(Получатель.Склады.Количество()>0,Истина,Ложь));
	Параметры.Вставить("ИспользоватьФильтрПоПодразделениям",?(Получатель.Подразделения.Количество()>0,Истина,Ложь));
	
	Если Параметры.ИспользоватьФильтрПоОрганизациям Тогда
		
		Параметры.Вставить("МассивОрганизаций",Получатель.Организации.Выгрузить().ВыгрузитьКолонку("Организация"));
		
	КонецЕсли;
	
	Если Параметры.ИспользоватьФильтрПоСкладам Тогда
		
		Параметры.Вставить("МассивСкладов",Получатель.Склады.Выгрузить().ВыгрузитьКолонку("Склад"));
		
	КонецЕсли;
	
	Если Параметры.ИспользоватьФильтрПоПодразделениям Тогда
		
		Параметры.Вставить("МассивПодразделений",Получатель.Подразделения.Выгрузить().ВыгрузитьКолонку("Подразделение"));
		
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ОрганизацииВыгрузки = Получатель.Организации.Выгрузить(,"Организация");
	Параметры.Вставить("ОрганизацииВыгрузки", ОрганизацииВыгрузки);
	Параметры.Вставить("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", Получатель.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю);
	Параметры.Вставить("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете", Получатель.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете);

КонецПроцедуры

Процедура Конвертация_ПередКонвертациейОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены,ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если Параметры.ОписаниеТиповДокументы.СодержитТип(ТипЗнч(Источник)) Тогда
		
		Отказ = Ложь;
		
		ПараметрИсточник = Источник;
		
		ВозможностьВыгрузкиОбъектаПоФильтрам (ПараметрИсточник, Отказ);
		
		ТипДокумента = ТипЗнч(Источник);
		
		Если (НЕ Отказ)
			И Параметры.ОписаниеТиповДокументыСФ.СодержитТип(ТипДокумента)
			И ЗначениеЗаполнено(Источник.ДокументОснование)
			Тогда
			
			ПараметрИсточник = Источник.ДокументОснование;
			ВозможностьВыгрузкиОбъектаПоФильтрам (ПараметрИсточник, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКО_АккредитивПереданный_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если НЕ Источник.Оплачено Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратТоваровОтПокупателя_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если ТипЗнч(Источник.СкладОрдер) = Тип("СправочникСсылка.Склады") И Источник.СкладОрдер.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ЗаказПокупателяСчетНаОплатуПокупателю_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
	Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) 
		И (ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать ИЛИ ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю) Тогда
			Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_КонтактныеЛицаКонтрагентов_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	// Правило используется только при выгрузке удаления элемента справочника "Контактные лица контрагентов" - особенность обработки "Конвертация объектов информационных баз"

КонецПроцедуры

Процедура ПКО_Контрагенты_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	// Источник - приходит строкой из документа счет ДокументСсылка.СчетНаОплатуПокупателю
	// ТипЗнч(Источник) = Тип("СправочникСсылка.Контрагенты")
	
	Если НЕ Источник.ЭтоГруппа Тогда
		ВходящиеДанные = Новый Структура("ОсновноеКонтактноеЛицо");
		ВходящиеДанные.ОсновноеКонтактноеЛицо = Источник.ОсновноеКонтактноеЛицо.КонтактноеЛицо;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_КорректировкаПоступления_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если ТипЗнч(Источник.ДокументПоступления) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
		Отказ = Истина;
	ИначеЕсли ТипЗнч(Источник.ДокументПоступления) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Если ТипЗнч(Источник.ДокументПоступления.СкладОрдер) = Тип("СправочникСсылка.Склады")
			И Источник.ДокументПоступления.СкладОрдер.ВидСклада = Перечисления.ВидыСкладов.НТТ
		Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Если Источник.ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник.ДокументПоступления) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если ТипЗнч(Источник.ДокументПоступления.ДокументОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
			ИЛИ Источник.ДокументПоступления.СформированПриВводеНачальныхОстатковНДС
		Тогда
			Отказ = Истина;
		КонецЕсли;
		Если НЕ Отказ Тогда
			ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено;
			Параметры.Свойство("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете", ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете);
			Для каждого СтрокаТЧ из Источник.ДокументПоступления.ДокументыОснования Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
					Если НЕ ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено И ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете Тогда
						МетаданныеДокументаОснования = СтрокаТЧ.ДокументОснование.Метаданные();
						Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования)
							И НЕ СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
							Отказ = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_КорректировкаРеализации_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаРеализацииТовары.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ПО
	|	СправочникНоменклатура.Ссылка = КорректировкаРеализацииТовары.Номенклатура
	|	И СправочникНоменклатура.Комплект = ИСТИНА
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Отказ = НЕ РезультатЗапроса.Пустой();
	Если Отказ = Ложь Тогда
		Если ТипЗнч(Источник.ДокументРеализации) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			Отказ = Истина;
		ИначеЕсли ТипЗнч(Источник.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Отказ = Ложь;
			Если ТипЗнч(Источник.ДокументРеализации.ДокументОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") 
				ИЛИ Источник.ДокументРеализации.СформированПриВводеНачальныхОстатковНДС 
				ИЛИ ТипЗнч(Источник.ДокументРеализации.ДокументОснование) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")
			Тогда
				Отказ = Истина;
			КонецЕсли;
			Если НЕ Отказ Тогда
				ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено;
				Параметры.Свойство("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете", ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете);
				Для каждого СтрокаТЧ из Источник.ДокументРеализации.ДокументыОснования Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
						Если НЕ ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено И ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете Тогда
							МетаданныеДокументаОснования = СтрокаТЧ.ДокументОснование.Метаданные();
							Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования)
								И НЕ СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
								Отказ = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Номенклатура_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	//если в настройках поиска указан поиск по коду, тогда выгружаем код, иначе - не выгружаем
	
	Если НЕ Источник.ЭтоГруппа И (Источник.Набор ИЛИ Источник.Комплект) Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОплатаПлатежнойКартой_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Пользователи_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Отказ = Истина;

КонецПроцедуры

Процедура ПКО_ПоступлениеТоваровУслугВНТТ_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	КлючВыгружаемыхДанных = Источник.Номер + Источник.Дата + "НТТ";

КонецПроцедуры

Процедура ПКО_Склады_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если Источник.ВидСклада <> Перечисления.ВидыСкладов.НТТ И Не УзелДляОбмена.ВыгружатьАналитикуПоСкладам Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СчетНаОплатуПокупателю_ПередВыгрузкойОбъекта(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, ПКО,
	ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные,
	НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки,
	Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
	Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю)
		И (ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать ИЛИ ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя)
		Тогда
			Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКС_АвансовыйОтчет_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_8_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_9_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_Товары_Цена_ПередВыгрузкойСвойства_13_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_Товары_Количество_ПередВыгрузкойСвойства_14_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_Прочее_СчетУчетаНДС_ПередВыгрузкойСвойства_36_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "19.04";

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_Прочее_СчетЗатратНУ_ПередВыгрузкойСвойства_38_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "44.01";

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_Прочее_СчетЗатрат_ПередВыгрузкойСвойства_40_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "44.01";

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_Склад_ПередВыгрузкойСвойства_80_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если ЗначениеЗаполнено(Источник.СкладОрдер) Тогда
			Значение = Источник.СкладОрдер.Склад;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Значение = Источник.СкладОрдер;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_ОплатаПоставщикам_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_85_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_АвансовыйОтчет_ОплатаПоставщикам_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_86_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АккредитивПереданный_Номер_ПередВыгрузкойСвойства_15_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "А", 11, "Справа");

КонецПроцедуры

Процедура ПКС_АккредитивПереданный_ДатаОплаты_ПередВыгрузкойСвойства_16_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_АккредитивПереданный_СтатьяДвиженияДенежныхСредств_ПередВыгрузкойСвойства_27_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Если Источник.РасшифровкаПлатежа.Количество() = 1.00 Тогда
			Значение = Источник.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АккредитивПереданный_НазначениеПлатежа_ПередВыгрузкойСвойства_31_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_АккредитивПереданный_СчетБанк_ПередВыгрузкойСвойства_32_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "55.01";

КонецПроцедуры

Процедура ПКС_АккредитивПереданный_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_35_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_АккредитивПереданный_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_36_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_РасшифровкаПлатежа_Сделка_ПередВыгрузкойСвойства_2_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_Номер_ПередВыгрузкойСвойства_16_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "А", 11, "Справа");

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_ДатаОплаты_ПередВыгрузкойСвойства_17_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_ДокументОснование_ПередВыгрузкойСвойства_21_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_СчетБанк_ПередВыгрузкойСвойства_34_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "55.01";

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_НазначениеПлатежа_ПередВыгрузкойСвойства_37_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_38_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_АккредитивПолученный_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_39_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_БанковскиеСчета_ВидСчета_ПередВыгрузкойСвойства_9_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Не ЗначениеЗаполнено(Значение) Тогда
		Значение = "Расчетный";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_БанковскиеСчета_Валютный_ПередВыгрузкойСвойства_17_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Параметры.ВалютаРегламентированногоУчета <> Источник.ВалютаДенежныхСредств;

КонецПроцедуры

Процедура ПКС_Валюты_НаименованиеПолное_ПередВыгрузкойСвойства_4_6(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.НаименованиеПолное) Тогда
		Значение = Источник.Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВидыКонтактнойИнформации_Родитель_ПередВыгрузкойСвойства_4_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты Тогда
		Значение = "СправочникКонтрагенты";
	ИначеЕсли Источник.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица Тогда
		Значение = "СправочникКонтактныеЛица";
	ИначеЕсли Источник.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов Тогда
		Значение = "СправочникКонтактныеЛица";
	ИначеЕсли Источник.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ЛичныеКонтакты Тогда
		Пусто = Истина;
	ИначеЕсли Источник.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		Значение = "СправочникОрганизации";
	ИначеЕсли Источник.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи Тогда
		Значение = "СправочникПользователи";
	ИначеЕсли Источник.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица Тогда
		Значение = "СправочникФизическиеЛица";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВидыОплатОрганизаций_Организация_ПередВыгрузкойСвойства_7_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит И ЗначениеЗаполнено(Источник.ДоговорВзаиморасчетовБанкаКредитора)  Тогда
		Значение = Источник.ДоговорВзаиморасчетовБанкаКредитора.Организация;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВидыОплатОрганизаций_БанкКредитор_ПередВыгрузкойСвойства_8_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
		Значение = Источник.БанкКредитор;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВидыОплатОрганизаций_ДоговорВзаиморасчетовБанкаКредитора_ПередВыгрузкойСвойства_9_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
		Значение = Источник.ДоговорВзаиморасчетовБанкаКредитора;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровОтПокупателя_Товары_Себестоимость_ПередВыгрузкойСвойства_2_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	
	
	
	ВалютаРегл = Параметры.ВалютаРегламентированногоУчета;
	ВалютаУпр  = Параметры.ВалютаУправленческогоУчета;
	
	Если ЗначениеЗаполнено(ОбъектКоллекции.Себестоимость) И ТипЗнч(ОбъектКоллекции.Себестоимость) = Тип("Число") Тогда
		
		Значение = ОбъектКоллекции.Себестоимость;	
			
		Если НЕ ВалютаУпр = ВалютаРегл Тогда
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.ВалютаУправленческогоУчета, Источник.Дата);
			КурсУпр = СтруктураКурса.Курс;
			КратностьУпр = СтруктураКурса.Кратность;
			
			Значение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Значение, ВалютаУпр, ВалютаРегл,
			КурсУпр, 1, КратностьУпр, 1);
		КонецЕсли;
		
		ОбъектКоллекции.Себестоимость = Окр(Значение, 2);	
		
		
		
		
	Иначе
		
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровОтПокупателя_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_3_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровОтПокупателя_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_4_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровОтПокупателя_Склад_ПередВыгрузкойСвойства_34_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(Источник.СкладОрдер) Тогда
		Если Источник.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Значение = Источник.СкладОрдер.Склад;
		Иначе
			Значение = Источник.СкладОрдер;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровОтПокупателя_ВидОперации_ПередВыгрузкойСвойства_35_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "ПродажаКомиссия";

КонецПроцедуры

Процедура ПКС_ВозвратТоваровОтПокупателя_Сделка_ПередВыгрузкойСвойства_40_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ТаблицаТоваров = Источник.Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("ДокументПартии");
	Если ТаблицаТоваров.Количество() > 1 Тогда
		Пусто = Истина;
	ИначеЕсли ТаблицаТоваров.Количество() = 0 Тогда
		 Пусто = Истина;
	 Иначе
		 Значение = ТаблицаТоваров[0].ДокументПартии;
		 Если ТипЗнч(Значение) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			 ИмяПКО = "ОтчетОРозничныхПродажах";
		 КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_Комиссия_ПередВыгрузкойСвойства_2_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Комиссия;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_Себестоимость_ПередВыгрузкойСвойства_3_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_ДокументОприходования_ПередВыгрузкойСвойства_4_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_5_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_6_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_Сумма_ПередВыгрузкойСвойства_10_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

		//чтобы не терять значения сумм при периодических ценах
		Значение = Окр(ОбъектКоллекции.Цена * ОбъектКоллекции.Количество,2);
		
	//Если ОбъектКоллекции.Коэффициент > 0 Тогда
	//	Значение = Значение / ОбъектКоллекции.Коэффициент;
	//КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_Коэффициент_ПередВыгрузкойСвойства_12_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_13_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_ВидОперации_ПередВыгрузкойСвойства_39_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "ПокупкаКомиссия";

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщику_Сделка_ПередВыгрузкойСвойства_44_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ТаблицаТовары = Источник.Товары.Выгрузить();
	ТаблицаТовары.Свернуть("ДокументПоступления", "");
	Если ТаблицаТовары.Количество() > 1 ИЛИ ТаблицаТовары.Количество() = 0 Тогда
		Отказ = Истина;
	Иначе
		Значение = ТаблицаТовары[0].ДокументПоступления;
		Если ТипЗнч(Значение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ИмяПКО = "ПоступлениеТоваровУслуг";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
			ИмяПКО = "ПоступлениеТоваровУслугВНТТ";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_Комиссия_ПередВыгрузкойСвойства_2_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Комиссия;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_Себестоимость_ПередВыгрузкойСвойства_3_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_ДокументОприходования_ПередВыгрузкойСвойства_4_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_СуммаВРознице_ПередВыгрузкойСвойства_5_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЦенаВРознице * ОбъектКоллекции.Количество;
	Если ОбъектКоллекции.Коэффициент > 0 Тогда
		Значение = Значение / ОбъектКоллекции.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_ЦенаВРознице_ПередВыгрузкойСвойства_6_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Коэффициент > 0 Тогда
		Значение = ОбъектКоллекции.ЦенаВРознице / ОбъектКоллекции.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_7_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_8_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_Сумма_ПередВыгрузкойСвойства_12_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена * ОбъектКоллекции.Количество;
	Если ОбъектКоллекции.Коэффициент > 0 Тогда
		Значение = Значение / ОбъектКоллекции.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_Цена_ПередВыгрузкойСвойства_13_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Коэффициент > 0 Тогда
		Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_Коэффициент_ПередВыгрузкойСвойства_14_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_15_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Номер_ПередВыгрузкойСвойства_23_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "Н", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_ВидОперации_ПередВыгрузкойСвойства_41_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "ПокупкаКомиссия";

КонецПроцедуры

Процедура ПКС_ВозвратТоваровПоставщикуИзНТТ_Сделка_ПередВыгрузкойСвойства_46_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ТаблицаТовары = Источник.Товары.Выгрузить();
	ТаблицаТовары.Свернуть("ДокументПоступления", "");
	Если ТаблицаТовары.Количество() > 1 ИЛИ ТаблицаТовары.Количество() = 0 Тогда
		Отаказ = Истина;
	Иначе
		Значение = ТаблицаТовары[0].ДокументПоступления;
		Если ТипЗнч(Значение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ИмяПКО = "ПоступлениеТоваровУслуг";
		ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
			ИмяПКО = "ПоступлениеТоваровУслугВНТТ";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ГТДИмпорт_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_2_9(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ГТДИмпорт_Товары_Количество_ПередВыгрузкойСвойства_7_9(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ГТДИмпорт_ВалютаДокумента_ПередВыгрузкойСвойства_25_9(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Для каждого СтрокаРазделы из Источник.Разделы Цикл
		Если СтрокаРазделы.ТаможеннаяСтоимостьВВалютеРеглУчета Тогда
			Значение = Параметры.ВалютаРегламентированногоУчета;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПКС_Доверенность_Сделка_ПередВыгрузкойСвойства_18_12(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	  Итератор = Источник.Сделка;
	  ПроверитьЗаполнениеРеквизитаПоСтатусуОплаты (Итератор, Отказ);

КонецПроцедуры

Процедура ПКС_Доверенность_Проведен_ПередВыгрузкойСвойства_19_12(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Истина;

КонецПроцедуры

Процедура ПКС_ДоговорыКонтрагентов_ТипЦен_ПередВыгрузкойСвойства_12_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		ИЛИ Источник.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ДоговорыКонтрагентов_Валютный_ПередВыгрузкойСвойства_25_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ Источник.ЭтоГруппа Тогда
		Значение = Параметры.ВалютаРегламентированногоУчета <> Источник.ВалютаВзаиморасчетов;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ДоговорыКонтрагентов_ОплатаВВалюте_ПередВыгрузкойСвойства_26_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ Источник.ЭтоГруппа Тогда
		Значение = (Параметры.ВалютаРегламентированногоУчета <> Источник.ВалютаВзаиморасчетов) И НЕ Источник.РасчетыВУсловныхЕдиницах;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ЗаказПокупателяСчетНаОплатуПокупателю_Товары_Цена_ПередВыгрузкойСвойства_9_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ЗаказПокупателяСчетНаОплатуПокупателю_Товары_Количество_ПередВыгрузкойСвойства_16_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ЗаказПокупателяСчетНаОплатуПокупателю_АдресДоставки_ПередВыгрузкойСвойства_26_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	 Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Источник.АдресДоставки);

КонецПроцедуры

Процедура ПКС_ЗаказПокупателяСчетНаОплатуПокупателю_СтруктурнаяЕдиница_ПередВыгрузкойСвойства_35_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ?(ТипЗнч(Источник.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы"), Справочники.БанковскиеСчета.ПустаяСсылка(), Источник.СтруктурнаяЕдиница);

КонецПроцедуры

Процедура ПКС_ЗаказПокупателяСчетНаОплатуПокупателю_СкладГруппа_ПередВыгрузкойСвойства_41_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ?(ТипЗнч(Источник.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов"), Справочники.Склады.ПустаяСсылка(), Источник.СкладГруппа);

КонецПроцедуры

Процедура ПКС_ИнвентаризацияТоваровНаСкладе_Товары_ЦенаВРознице_ПередВыгрузкойСвойства_2_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ОбъектКоллекции.Коэффициент = 0 Тогда
		Значение = ОбъектКоллекции.ЦенаВРознице / ОбъектКоллекции.Коэффициент;	
	Иначе
		Значение = 0;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнвентаризацияТоваровНаСкладе_Товары_СуммаУчет_ПередВыгрузкойСвойства_3_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Если ОбъектКоллекции.Количество = 0 Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.ВалютаУправленческогоУчета, Источник.Дата);
		КурсУпр = СтруктураКурса.Курс;
		КратностьУпр = СтруктураКурса.Кратность;
		Значение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОбъектКоллекции.СуммаУчет, Параметры.ВалютаУправленческогоУчета, Параметры.ВалютаРегламентированногоУчета,
											КурсУпр, 1, КратностьУпр, 1);		
	//Иначе
	//	Значение = ОбъектКоллекции.КоличествоУчет * ОбъектКоллекции.СуммаРегл / ОбъектКоллекции.Количество;
	//КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнвентаризацияТоваровНаСкладе_Товары_Цена_ПередВыгрузкойСвойства_4_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Количество = 0 Тогда
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.ВалютаУправленческогоУчета, Источник.Дата);
		КурсУпр = СтруктураКурса.Курс;
		КратностьУпр = СтруктураКурса.Кратность;
		Значение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОбъектКоллекции.Цена, Параметры.ВалютаУправленческогоУчета, Параметры.ВалютаРегламентированногоУчета,
											КурсУпр, 1, КратностьУпр, 1);		
	Иначе
		Значение = Окр(ОбъектКоллекции.СуммаРегл / ОбъектКоллекции.Количество / ОбъектКоллекции.Коэффициент, 2, РежимОкругления.Окр15как20);										
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнвентаризацияТоваровНаСкладе_Товары_Сумма_ПередВыгрузкойСвойства_5_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Количество = 0 Тогда
		Значение = 0;
	Иначе
		
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Параметры.ВалютаУправленческогоУчета, Источник.Дата);
		
		Значение        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОбъектКоллекции.Сумма, Параметры.ВалютаУправленческогоУчета, 
									Параметры.ВалютаРегламентированногоУчета, СтруктураКурса.Курс, 1, СтруктураКурса.Кратность, 1);
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнвентаризацияТоваровНаСкладе_Товары_КоличествоУчет_ПередВыгрузкойСвойства_8_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.КоличествоУчет * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ИнвентаризацияТоваровНаСкладе_Товары_Количество_ПередВыгрузкойСвойства_10_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ИнвентаризацияТоваровНаСкладе_Проведен_ПередВыгрузкойСвойства_19_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Истина;

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа_Сделка_ПередВыгрузкойСвойства_2_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_Номер_ПередВыгрузкойСвойства_16_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "И", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_ДатаОплаты_ПередВыгрузкойСвойства_17_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_ДокументОснование_ПередВыгрузкойСвойства_18_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_СчетБанк_ПередВыгрузкойСвойства_32_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "51";

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_НазначениеПлатежа_ПередВыгрузкойСвойства_35_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_36_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_37_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПолученное_Номер_ПередВыгрузкойСвойства_15_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "И", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПолученное_ДатаОплаты_ПередВыгрузкойСвойства_16_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПолученное_СтатьяДвиженияДенежныхСредств_ПередВыгрузкойСвойства_29_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Если Источник.РасшифровкаПлатежа.Количество() = 1.00 Тогда
			Значение = Источник.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПолученное_СчетБанк_ПередВыгрузкойСвойства_31_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "51";

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПолученное_НазначениеПлатежа_ПередВыгрузкойСвойства_32_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_37_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_38_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КомплектацияНоменклатуры_Количество_ПередВыгрузкойСвойства_3_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Источник.Количество * Источник.Коэффициент;

КонецПроцедуры

Процедура ПКС_КомплектацияНоменклатуры_Комплектующие_СерияНоменклатуры_ПриВыгрузкеСвойства_13_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КомплектацияНоменклатуры_Комплектующие_СерияНоменклатуры_ПриВыгрузкеСвойства_14_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КомплектацияНоменклатуры_Комплектующие_Количество_ПередВыгрузкойСвойства_16_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_Контрагенты_ОсновнойДоговорКонтрагента_ПередВыгрузкойСвойства_5_11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ОрганизацииВыгрузки = Неопределено;
	Если ЗначениеЗаполнено(Источник.ОсновнойДоговорКонтрагента) И Параметры.Свойство("ОрганизацииВыгрузки", ОрганизацииВыгрузки) И Параметры.ОрганизацииВыгрузки.Количество() > 0 Тогда
		Если Параметры.ОрганизацииВыгрузки.Найти(Источник.ОсновнойДоговорКонтрагента.Организация, "Организация") = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_Контрагенты_ОсновноеКонтактноеЛицо_ПередВыгрузкойСвойства_15_11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	
	Если НЕ Источник.ЭтоГруппа Тогда
		ИсходящиеДанные = Новый Структура;
		ИсходящиеДанные.Вставить("Источник", Источник.ОсновноеКонтактноеЛицо.КонтактноеЛицо);
		ИсходящиеДанные.Вставить("ОбъектВладелец", Источник.Ссылка);
		ИсходящиеДанные.Вставить("ВидКонтактногоЛица", "КонтактноеЛицоКонтрагента");
		ИсходящиеДанные.Вставить("Должность", Источник.ОсновноеКонтактноеЛицо.Должность);
		ИсходящиеДанные.Вставить("Роль", Источник.ОсновноеКонтактноеЛицо.РольКонтактногоЛица);
		Значение = Источник.ОсновноеКонтактноеЛицо.КонтактноеЛицо;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаДолга_КонтрагентКредитор_ПередВыгрузкойСвойства_7_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Значение = Источник.КонтрагентДебитор;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаДолга_СуммыДолга_СуммаРегл_ПередВыгрузкойСвойства_17_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВалютаВзаиморасчетов <> Параметры.ВалютаРегламентированногоУчета
	   И НЕ ОбъектКоллекции.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		Значение = ОбъектКоллекции.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаДолга_СуммыДолга_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_24_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаДолга_СуммыДолга_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_27_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаДолга_СуммыДолга_СуммаРегл_ПередВыгрузкойСвойства_30_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВалютаВзаиморасчетов <> Параметры.ВалютаРегламентированногоУчета
	   И НЕ ОбъектКоллекции.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		Значение = ОбъектКоллекции.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаПоступления_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_61_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаПоступления_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_62_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаПоступления_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_63_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаПоступления_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_64_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаПоступления_Склад_ПередВыгрузкойСвойства_68_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(Источник.СкладОрдер) Тогда
		Если Источник.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			ТаблицаТоваров = Источник.Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("Склад");
			Если ТаблицаТоваров.Количество() = 1 Тогда
				Значение = Источник.СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			Значение = Источник.СкладОрдер;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаРеализации_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_60_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаРеализации_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_61_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаРеализации_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_62_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_КорректировкаРеализации_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_63_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОплатаПлатежнойКартой_ДокументОснование_ПередВыгрузкойСвойства_12_21(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОплатаПлатежнойКартой_РасшифровкаПлатежа_Сделка_ПередВыгрузкойСвойства_20_21(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОплатаПлатежнойКартой_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_23_21(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОплатаПлатежнойКартой_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_24_21(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_СтавкаНДСВРознице_ПередВыгрузкойСвойства_2_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Номенклатура.СтавкаНДС;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_СуммаВРознице_ПередВыгрузкойСвойства_3_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Количество = 0 Тогда
		Значение = 0;
	Иначе
		Значение = Окр(ОбъектКоллекции.ЦенаВРознице * ОбъектКоллекции.Количество, 2, РежимОкругления.Окр15как20);
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_ЦенаВРознице_ПередВыгрузкойСвойства_4_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Окр(ОбъектКоллекции.ЦенаВРознице / ОбъектКоллекции.Коэффициент, 2, РежимОкругления.Окр15как20);

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_5_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_6_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_Цена_ПередВыгрузкойСвойства_7_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Количество = 0 Тогда
		Значение = 0;	
	Иначе
		Значение = Окр(ОбъектКоллекции.СуммаРегл / ОбъектКоллекции.Количество / ОбъектКоллекции.Коэффициент, 2, РежимОкругления.Окр15как20);	
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_Сумма_ПередВыгрузкойСвойства_8_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Количество = 0 Тогда
		Значение = 0;
	Иначе
		//Количество = Окр(ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент, 3, РежимОкругления.Окр15как20);
		//Цена       = Окр(ОбъектКоллекции.СуммаРегл / ОбъектКоллекции.Количество / ОбъектКоллекции.Коэффициент, 2, РежимОкругления.Окр15как20);
		//Значение   = Окр(Количество * Цена, 2, РежимОкругления.Окр15как20);
		Значение   = ОбъектКоллекции.СуммаРегл;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_Коэффициент_ПередВыгрузкойСвойства_10_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_Количество_ПередВыгрузкойСвойства_12_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Окр(ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент, 3, РежимОкругления.Окр15как20);

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_13_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ОприходованиеТоваров_СтатьяПрочихДоходовРасходов_ПередВыгрузкойСвойства_26_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Источник.ИнвентаризацияТоваровНаСкладе) Тогда
		Значение.Вставить("Наименование", "Оприходование товаров (Управление торговлей)");
	Иначе
		Значение.Вставить("Наименование", "Оприходование товаров по результатам инвентаризации (Управление торговлей)");
	КонецЕсли;
	Значение.Вставить("ВидПрочихДоходовИРасходов", "ПрочиеВнереализационныеДоходыРасходы");
	Значение.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", "ОсновнаяСистемаНалогообложения");
	Значение.Вставить("ПринятиеКналоговомуУчету", "Истина");

КонецПроцедуры

Процедура ПКС_Организации_ВидСтавокЕСНиПФР_ПередВыгрузкойСвойства_14_11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "ДляНеСельскохозяйственныхПроизводителей";

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_Товары_Комиссия_ПередВыгрузкойСвойства_2_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Комиссия;

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_3_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_4_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_Товары_Цена_ПередВыгрузкойСвойства_12_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_Товары_Количество_ПередВыгрузкойСвойства_13_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_Товары_Коэффициент_ПередВыгрузкойСвойства_14_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_15_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ОтчетКомиссионераОПродажах_СпособЗачетаАвансов_ПередВыгрузкойСвойства_51_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ТипДокументаРасчетов = "ОтчетКомиссионераОПродажах";
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
		Если КоллекцияОбъектов.Количество() > 0 Тогда
			Значение = "ПоДокументу";
		Иначе
			Значение = "НеЗачитывать";
		КонецЕсли;
	Иначе
		Значение = "Автоматически";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОтчетКомитентуОПродажах_Товары_Цена_ПередВыгрузкойСвойства_5_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ОтчетКомитентуОПродажах_Товары_ЦенаПоступления_ПередВыгрузкойСвойства_7_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЦенаПоступления / ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ОтчетКомитентуОПродажах_Товары_Количество_ПередВыгрузкойСвойства_8_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ОтчетКомитентуОПродажах_Товары_Коэффициент_ПередВыгрузкойСвойства_9_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОтчетКомитентуОПродажах_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_10_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ОтчетКомитентуОПродажах_ВидОперации_ПередВыгрузкойСвойства_42_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "ОтчетОПродажах";

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_Товары_Комиссия_ПередВыгрузкойСвойства_2_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Комиссия;

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_Товары_Себестоимость_ПередВыгрузкойСвойства_3_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_Товары_ДокументОприходования_ПередВыгрузкойСвойства_4_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_5_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_6_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_ВалютаДокумента_ПередВыгрузкойСвойства_28_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Параметры.ВалютаРегламентированногоУчета;

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами_ДоговорКонтрагента_ПередВыгрузкойСвойства_38_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Источник.ДоговорВзаиморасчетовЭквайрера;

КонецПроцедуры

Процедура ПКС_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами_Контрагент_ПередВыгрузкойСвойства_39_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Источник.Эквайрер;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_Комиссия_ПередВыгрузкойСвойства_2_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Комиссия;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_ДокументОприходования_ПередВыгрузкойСвойства_3_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_СуммаВРознице_ПередВыгрузкойСвойства_4_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена * ОбъектКоллекции.Количество;
	Если ОбъектКоллекции.Коэффициент > 0 Тогда
		Значение = Значение / ОбъектКоллекции.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_Цена_ПередВыгрузкойСвойства_5_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Коэффициент > 0 Тогда
		Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_Коэффициент_ПередВыгрузкойСвойства_7_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_8_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_КоличествоМест_ПередВыгрузкойСвойства_9_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент / ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_НДСвСтоимостиТоваров_ПередВыгрузкойСвойства_23_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Если ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("СложныйУчетНДС", Источник.Организация, Источник.Дата) И ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Источник.Организация, Источник.Дата) Тогда 
	//	Если Источник.СкладОтПравитель.ВидСклада = Перечисления.ВидыСкладов.ОПтовый И Источник.СкладПолучатель.ВидСклада <> Перечисления.ВидыСкладов.ОПтовый Тогда
	//		Значение = "ВключитьВСтоимость";
	//	ИначеЕсли Источник.СкладОтПравитель.ВидСклада <> Перечисления.ВидыСкладов.ОПтовый И Источник.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.ОПтовый Тогда
	//		Значение = "ИсключитьИзСтоимости";
	//	Иначе
	//		Значение = "НеИзменять";
	//	КонецЕсли;
	//Иначе
	//	Значение = "НеИзменять";
	//КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_Коэффициент_ПередВыгрузкойСвойства_27_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_28_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ПеремещениеТоваров_Товары_КоличествоМест_ПередВыгрузкойСвойства_29_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.Количество / ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа_Сделка_ПередВыгрузкойСвойства_2_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеВходящее_ДатаОплаты_ПередВыгрузкойСвойства_17_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеВходящее_СчетБанк_ПередВыгрузкойСвойства_33_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
		Значение = "51";
	Иначе
		Значение = "52";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеВходящее_ДокументОснование_ПередВыгрузкойСвойства_36_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеВходящее_НазначениеПлатежа_ПередВыгрузкойСвойства_37_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_39_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_40_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеИсходящее_НазначениеПлатежа_ПередВыгрузкойСвойства_30_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеИсходящее_СтатьяДвиженияДенежныхСредств_ПередВыгрузкойСвойства_42_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Если Источник.РасшифровкаПлатежа.Количество() = 1.00 Тогда
			Значение = Источник.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеИсходящее_СчетБанк_ПередВыгрузкойСвойства_48_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
		Значение = "51";
	Иначе
		Значение = "52";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеИсходящее_ДатаОплаты_ПередВыгрузкойСвойства_49_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_54_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_55_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеВыставленное_Номер_ПередВыгрузкойСвойства_1_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "Т", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеВыставленное_ДатаОплаты_ПередВыгрузкойСвойства_2_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа_Сделка_ПередВыгрузкойСвойства_4_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеВыставленное_НазначениеПлатежа_ПередВыгрузкойСвойства_20_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеВыставленное_ДатаОплаты_ПередВыгрузкойСвойства_39_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_40_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_41_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеПолученное_Номер_ПередВыгрузкойСвойства_15_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "Т", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеПолученное_ДатаОплаты_ПередВыгрузкойСвойства_16_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(Источник.ДатаОплаты) Тогда
		Значение = Источник.Дата;
	Иначе
		Значение = Источник.ДатаОплаты;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеПолученное_НазначениеПлатежа_ПередВыгрузкойСвойства_22_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеПолученное_СтатьяДвиженияДенежныхСредств_ПередВыгрузкойСвойства_30_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Если Источник.РасшифровкаПлатежа.Количество() = 1.00 Тогда
			Значение = Источник.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеПолученное_СчетБанк_ПередВыгрузкойСвойства_32_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
		Значение = "51";
	Иначе
		Значение = "52";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_37_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_38_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа_Сделка_ПередВыгрузкойСвойства_2_40(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерПоступлениеДенежныхСредств_Номер_ПередВыгрузкойСвойства_16_40(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "П", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерПоступлениеДенежныхСредств_ДокументОснование_ПередВыгрузкойСвойства_18_40(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") тогда
		
		ИмяПКО = "ПлатежноеТребованиеВыставленное";
		
	Иначе
		
		Отказ = Истина;		
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерПоступлениеДенежныхСредств_НазначениеПлатежа_ПередВыгрузкойСвойства_36_40(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = СтрЗаменить(Источник.НазначениеПлатежа, Символы.ПС, " ");

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_40_40(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_41_40(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерСписаниеДенежныхСредств_Номер_ПередВыгрузкойСвойства_15_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "П", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерСписаниеДенежныхСредств_СтатьяДвиженияДенежныхСредств_ПередВыгрузкойСвойства_28_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Если Источник.РасшифровкаПлатежа.Количество() = 1.00 Тогда
			Значение = Источник.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_37_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_38_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_Товары_Сумма_ПередВыгрузкойСвойства_3_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Если Источник.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
	//	ТаблицаСтоимости = Неопределено;
	//	Если Параметры.Свойство("ТаблицаСтоимости", ТаблицаСтоимости) Тогда
	//		НайденнаяСтрока = ТаблицаСтоимости.Найти(ОбъектКоллекции.НомерСтроки, "НомерСтроки");
	//		Если НайденнаяСтрока <> Неопределено Тогда
	//			Значение = НайденнаяСтрока.Стоимость;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_Товары_СуммаНДС_ПередВыгрузкойСвойства_5_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Если Источник.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
	//	ТаблицаСтоимости = Неопределено;
	//	Если Параметры.Свойство("ТаблицаСтоимости", ТаблицаСтоимости) Тогда
	//		НайденнаяСтрока = ТаблицаСтоимости.Найти(ОбъектКоллекции.НомерСтроки, "НомерСтроки");
	//		Если НайденнаяСтрока <> Неопределено Тогда
	//			Значение = НайденнаяСтрока.НДС;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_Товары_Количество_ПередВыгрузкойСвойства_6_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_СпособРаспределения_ПередВыгрузкойСвойства_21_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
		Значение = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_Сумма_ПередВыгрузкойСвойства_22_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Если Источник.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
	//	Значение = 0;
	//КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_СуммаНДС_ПередВыгрузкойСвойства_25_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	//Если Источник.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
	//	Значение = 0;
	//КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_СпособЗачетаАвансов_ПередВыгрузкойСвойства_32_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		Значение = "НеЗачитывать";
	Иначе
		Если Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			ТипДокументаРасчетов = "ПоступлениеДопРасходов";
			КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
			УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
			Если КоллекцияОбъектов.Количество() > 0 Тогда
				Значение = "ПоДокументу";
			Иначе
				Значение = "НеЗачитывать";
			КонецЕсли;
		Иначе
			Значение = "Автоматически";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеДопРасходов_Товары_ДокументПартии_ПередВыгрузкойСвойства_39_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.ДокументПартии) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяПКО = "ПоступлениеТоваровУслуг";
	ИначеЕсли ТипЗнч(ОбъектКоллекции.ДокументПартии) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		ИмяПКО = "ПоступлениеТоваровУслугВНТТ";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_2_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_3_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Товары_Цена_ПередВыгрузкойСвойства_7_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Товары_Количество_ПередВыгрузкойСвойства_8_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Товары_Коэффициент_ПередВыгрузкойСвойства_9_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_10_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Номер_ПередВыгрузкойСвойства_29_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ВходящиеДанные) = Тип("Структура") 
	   И ВходящиеДанные.Свойство("Номер") Тогда
	   Значение = ВходящиеДанные.Номер;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Склад_ПередВыгрузкойСвойства_44_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(Источник.СкладОрдер) Тогда
		Если Источник.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			ТаблицаТоваров = Источник.Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("Склад");
			Если ТаблицаТоваров.Количество() = 1 Тогда
				Значение = Источник.СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			Значение = Источник.СкладОрдер;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_ВидОперации_ПередВыгрузкойСвойства_49_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "ПокупкаКомиссия";

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_СпособЗачетаАвансов_ПередВыгрузкойСвойства_54_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Значение = "НеЗачитывать";
	ИначеЕсли Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ТипДокументаРасчетов = "ПоступлениеТоваровУслуг";
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
		Если КоллекцияОбъектов.Количество() > 0 Тогда
			Значение = "ПоДокументу";
		Иначе
			Значение = "НеЗачитывать";
		КонецЕсли;
	Иначе
		Значение = "Автоматически";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслуг_Сделка_ПередВыгрузкойСвойства_58_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Товары_СуммаВРознице_ПередВыгрузкойСвойства_2_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЦенаВРознице * ОбъектКоллекции.Количество;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_4_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_5_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Товары_Цена_ПередВыгрузкойСвойства_9_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Товары_Количество_ПередВыгрузкойСвойства_10_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Количество * ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Товары_Коэффициент_ПередВыгрузкойСвойства_11_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_12_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_Номер_ПередВыгрузкойСвойства_31_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбменДаннымиСобытияУТ.ДобавитьКПрефиксу(Источник.Номер, "Н", 11, "Справа");

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_ВидОперации_ПередВыгрузкойСвойства_34_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = "ПокупкаКомиссия";

КонецПроцедуры

Процедура ПКС_ПоступлениеТоваровУслугВНТТ_СпособЗачетаАвансов_ПередВыгрузкойСвойства_54_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Значение = "НеЗачитывать";
	ИначеЕсли Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ТипДокументаРасчетов = "ПоступлениеТоваровУслуг";
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
		Если КоллекцияОбъектов.Количество() > 0 Тогда
			Значение = "ПоДокументу";
		Иначе
			Значение = "НеЗачитывать";
		КонецЕсли;
	Иначе
		Значение = "Автоматически";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_РасшифровкаПлатежа_Сделка_ПередВыгрузкойСвойства_8_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(ОбъектКоллекции.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		 Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_Контрагент_ПередВыгрузкойСвойства_15_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		Значение = Источник.СчетОрганизации;
	Конецесли;

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_ДокументОснование_ПередВыгрузкойСвойства_24_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
		Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) Тогда
			Если ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				ИмяПКО = "СчетНаОплатуПокупателю";
			ИначеЕсли ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя 
				И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
				ИмяПКО = "ЗаказПокупателяСчетНаОплатуПокупателю";
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_СтатьяДвиженияДенежныхСредств_ПередВыгрузкойСвойства_25_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Если Источник.РасшифровкаПлатежа.Количество() = 1.00 Тогда
			Значение = Источник.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_СчетКасса_ПередВыгрузкойСвойства_28_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
		Значение = "50.01";
	Иначе
		Значение = "50.21";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_ВыручкаСНТТ_ПередВыгрузкойСвойства_30_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка
	   И Источник.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ Тогда
	   	Значение = Истина;
	Иначе
		Значение = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_33_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_ПриходныйКассовыйОрдер_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_34_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РасходныйКассовыйОрдер_ДокументОснование_ПередВыгрузкойСвойства_24_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	  //Итератор = Источник.ДокументОснование;
	  //ПроверитьЗаполнениеРеквизитаПоСтатусуОплаты (Итератор, Отказ);

КонецПроцедуры

Процедура ПКС_РасходныйКассовыйОрдер_СтатьяДвиженияДенежныхСредств_ПередВыгрузкойСвойства_25_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Если Источник.РасшифровкаПлатежа.Количество() = 1.00 Тогда
			Значение = Источник.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РасходныйКассовыйОрдер_СчетКасса_ПередВыгрузкойСвойства_28_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
		Значение = "50.01";
	Иначе
		Значение = "50.21";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РасходныйКассовыйОрдер_РасшифровкаПлатежа_СпособПогашенияЗадолженности_ПередВыгрузкойСвойства_32_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ЗаполнитьСпособПогашенияЗадолженности (ОбъектКоллекции);

КонецПроцедуры

Процедура ПКС_РасходныйКассовыйОрдер_РасшифровкаПлатежа_ДокументРасчетовСКонтрагентом_ПередВыгрузкойСвойства_33_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом И ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Товары_Комиссия_ПередВыгрузкойСвойства_2_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Комиссия;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Товары_Себестоимость_ПередВыгрузкойСвойства_3_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Товары_ДокументОприходования_ПередВыгрузкойСвойства_4_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_5_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	
	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_6_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	
	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Товары_Коэффициент_ПередВыгрузкойСвойства_12_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_15_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_СпособЗачетаАвансов_ПередВыгрузкойСвойства_52_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если Источник.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Значение = "НеЗачитывать";
	ИначеЕсли Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ТипДокументаРасчетов = "РеализацияТоваровУслуг";
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
		Если КоллекцияОбъектов.Количество() > 0 Тогда
			Значение = "ПоДокументу";
		Иначе
			Значение = "НеЗачитывать";
		КонецЕсли;
	Иначе
		Значение = "Автоматически";
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_РеализацияТоваровУслуг_Сделка_ПередВыгрузкойСвойства_61_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_Комиссия_ПередВыгрузкойСвойства_2_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Комиссия;

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_Себестоимость_ПередВыгрузкойСвойства_3_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_ДокументОприходования_ПередВыгрузкойСвойства_4_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_5_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_СерияНоменклатуры_ПриВыгрузкеСвойства_6_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_Цена_ПередВыгрузкойСвойства_7_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Коэффициент;

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_Сумма_ПередВыгрузкойСвойства_8_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = (ОбъектКоллекции.Цена/ОбъектКоллекции.Коэффициент)*ОбъектКоллекции.Количество;

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_Коэффициент_ПередВыгрузкойСвойства_10_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_СписаниеТоваров_Товары_ЕдиницаИзмерения_ПередВыгрузкойСвойства_13_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_СчетНаОплатуПокупателю_АдресДоставки_ПередВыгрузкойСвойства_26_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Источник.АдресДоставки);

КонецПроцедуры

Процедура ПКС_СчетНаОплатуПокупателю_Контрагент_ПередВыгрузкойСвойства_30_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ТипЗнч(Источник.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Контрагенты";
	Иначе
		Пусто = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_СчетНаОплатуПокупателю_СтруктурнаяЕдиница_ПередВыгрузкойСвойства_36_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ?(ТипЗнч(Источник.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы"), Справочники.БанковскиеСчета.ПустаяСсылка(), Источник.СтруктурнаяЕдиница);

КонецПроцедуры

Процедура ПКС_СчетНаОплатуПокупателю_Проведен_ПередВыгрузкойСвойства_43_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Истина;

КонецПроцедуры

Процедура ПКС_СчетНаОплатуПоставщика_Проведен_ПередВыгрузкойСвойства_16_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = Истина;

КонецПроцедуры

Процедура ПКС_ТребованиеНакладная_Материалы_Себестоимость_ПередВыгрузкойСвойства_2_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ТребованиеНакладная_Материалы_ДокументОприходования_ПередВыгрузкойСвойства_3_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		Отказ = Истина;
	КонецЕсли

КонецПроцедуры

Процедура ПКС_ТребованиеНакладная_Материалы_СерияНоменклатуры_ПриВыгрузкеСвойства_6_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.НомерГТД) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.НомерГТД;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ТребованиеНакладная_Материалы_СерияНоменклатуры_ПриВыгрузкеСвойства_7_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, КлючИЗначение, ВидСубконто,
	Субконто, Пусто, ИмяПКО, ПКОСвойств,УзелСвойства, УзелКоллекцииСвойств,
	ИмяПКОВидСубконто, ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры) И ЗначениеЗаполнено(ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Значение = ОбъектКоллекции.СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		Значение = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ТребованиеНакладная_Материалы_Коэффициент_ПередВыгрузкойСвойства_9_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ЗначениеЗаполнено(ОбъектКоллекции.ЕдиницаИзмеренияМест) Тогда
		Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.Коэффициент;
	Иначе
		Значение = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ТребованиеНакладная_Материалы_ЕдиницаИзмерения_ПередВыгрузкойСвойства_10_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Значение = ОбъектКоллекции.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;

КонецПроцедуры

Процедура ПКС_УстановкаЦенНоменклатуры_Товары_Цена_ПередВыгрузкойСвойства_4_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	Если ОбъектКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0 Тогда
		Значение = ОбъектКоллекции.Цена / ОбъектКоллекции.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ФизическиеЛица_ФИО_ПередВыгрузкойСвойства_20_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
	ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО,
	ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, НеЗамещать,
	ВыгрузитьОбъект) Экспорт

	ОтборФЛ = Новый Структура("ФизЛицо", Источник.Ссылка);
	ФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, ОтборФЛ);
	Значение = ФИО.Фамилия+?(ФИО.Имя <> ""," "+ФИО.Имя,"")+?(ФИО.Отчество <> ""," "+ФИО.Отчество,"")

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ГРУПП СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКГС_АвансовыйОтчет_Товары_ПриВыгрузкеСвойства_4_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_АвансовыйОтчет_ОплатаПоставщикам_ПередОбработкойВыгрузки_24_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "СписаниеСРасчетногоСчета";
	КоллекцияОбъектов = Источник.ОплатаПоставщикам.Выгрузить();
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_АвансовыйОтчет_Прочее_ПриВыгрузкеСвойства_35_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_АккредитивПереданный_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТипДокументаРасчетов = "СписаниеСРасчетногоСчета";
		КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
		ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_АккредитивПолученный_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "ПоступлениеНаРасчетныйСчет";
	КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_ВозвратТоваровОтПокупателя_Товары_ПередОбработкойВыгрузки_1_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	
	
	ТаблицаПоТоварам = Источник.Товары.Выгрузить();
	Запросы.Комплекты.УстановитьПараметр("МассивНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ТабКомплекты = Запросы.Комплекты.Выполнить().Выгрузить();
	ТаблицаПоТоварам.Колонки.Добавить("Комплект");
	ТаблицаПоТоварам.Колонки.Удалить("Коэффициент");
	Для каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		НайденнаяСтрока = ТабКомплекты.Найти(СтрокаТовары.Номенклатура, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТовары.Комплект = НайденнаяСтрока.Комплект;
		КонецЕсли;
	КонецЦикла;
	ТабТовары = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, Источник);
	ТабТовары.Колонки.Добавить("Коэффициент");
	Для каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.Коэффициент = ?(СтрокаТовары.ЕдиницаИзмерения.Коэффициент <> 0, СтрокаТовары.ЕдиницаИзмерения.Коэффициент, 1);
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.Коэффициент;
		СтрокаТовары.Цена = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма / СтрокаТовары.Количество, 0);
	КонецЦикла;
	
	Запросы.СписанныеПартииВозвратТоваровОтПокупателя.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартииВозвратТоваровОтПокупателя.УстановитьПараметр("Расход", ВидДвиженияНакопления.Приход);
	РезультатЗапроса = Запросы.СписанныеПартииВозвратТоваровОтПокупателя.Выполнить();
	
	ТабПартии = РезультатЗапроса.Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	//КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	
	
	//Если НЕ УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
	//		КоллекцияОбъектов.Колонки.Удалить("Себестоимость");
	//КонецЕсли;
	
	
	СтрокаКолонок = "";
	Для каждого Колонка Из КоллекцияОбъектов.Колонки Цикл
		Если Колонка.Имя = "Количество" 
		 ИЛИ Колонка.Имя = "Сумма" 
		 ИЛИ Колонка.Имя = "СуммаНДС" 
		 ИЛИ Колонка.Имя = "Себестоимость" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКолонок = СтрокаКолонок + ", " + Колонка.Имя;
	КонецЦикла;
	СтрокаКолонок = Сред(СтрокаКолонок, 2);
		
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		Цена = ?(СтрокаТЧ.Количество <> 0, СтрокаТЧ.Сумма / СтрокаТЧ.Количество, 0);
		
		ОстКоличество = СтрокаТЧ.Количество;
		ОстСумма      = СтрокаТЧ.Сумма;
		ОстСуммаНДС   = СтрокаТЧ.СуммаНДС;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					Если Колонка.Имя = "НомерСтроки" 
					 ИЛИ Колонка.Имя = "Сумма" 
					 ИЛИ Колонка.Имя = "СуммаНДС" Тогда
					 //ИЛИ Колонка.Имя = "Себестоимость" Тогда
	
						Продолжить;
					КонецЕсли;
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				//НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				НоваяСтрока.Цена	   = Цена;
				
				//Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
				//	
				//	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
				Если СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
					НоваяСтрока.Себестоимость = 0; 
				Иначе	
					НоваяСтрока.Себестоимость = (СтрокаПартии.Стоимость*НоваяСтрока.Количество)/СтрокаПартии.Количество;
				КонецЕсли;		
	
				//	КонецЕсли;
				//КонецЕсли;
				//
				Если НоваяСтрока.Количество = ОстКоличество Тогда
					НоваяСтрока.Сумма    = ОстСумма;
					НоваяСтрока.СуммаНДС = ОстСуммаНДС;
				Иначе
					НоваяСтрока.Сумма      = НоваяСтрока.Цена * НоваяСтрока.Количество;
					НоваяСтрока.СуммаНДС   = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма, Источник.УчитыватьНДС, Источник.СуммаВключаетНДС,
		    	                                               УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				КонецЕсли;
														   
				// Уменьшим количество и стоимость в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
					СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - НоваяСтрока.Себестоимость;
				КонецЕсли;
	
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				ОстСумма      = ОстСумма      - НоваяСтрока.Сумма;
				ОстСуммаНДС   = ОстСуммаНДС   - НоваяСтрока.СуммаНДС;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			//НоваяСтрока.Комиссия   = Ложь;
			НоваяСтрока.Сумма      = ОстСумма;
			НоваяСтрока.СуммаНДС   = ОстСуммаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияОбъектов.Свернуть(СтрокаКолонок, "Количество, Сумма, СуммаНДС"
	+ ?(КоллекцияОбъектов.Колонки.Найти("Себестоимость") <> Неопределено,", Себестоимость",""));

КонецПроцедуры

Процедура ПКГС_ВозвратТоваровОтПокупателя_Товары_ПриВыгрузкеСвойства_1_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ВозвратТоваровПоставщику_Товары_ПередОбработкойВыгрузки_1_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	
	Запросы.ВозвратТоваровПоставщику.УстановитьПараметр("ДокументСсылка",Источник.Ссылка);
	ТабТовары = Запросы.ВозвратТоваровПоставщику.Выполнить().Выгрузить();
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартии.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	
	ТабПартии = Запросы.СписанныеПартии.Выполнить().Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		КоллекцияОбъектов.Колонки.Добавить("ДокументОприходования");
		Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
			КоллекцияОбъектов.Колонки.Добавить("Себестоимость");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		ОстКоличество = СтрокаТЧ.Количество;
		ОстСуммаНДС = СтрокаТЧ.СуммаНДС;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					Если Колонка.Имя = "НомерСтроки" Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				НоваяСтрока.СуммаНДС   = Мин(НоваяСтрока.Количество/СтрокаТЧ.Количество * СтрокаТЧ.СуммаНДС, ОстСуммаНДС);
				
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
					//в БП версии 1.6 нельзя возвращать товар поставщику не из поступления
					Если ТипЗнч(СтрокаПартии.ДокументОприходования) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
						Если Источник.Контрагент = СтрокаПартии.ДокументОприходования.Контрагент Тогда
							НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
						КонецЕсли;
					Иначе
						НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
					КонецЕсли;
					
					Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
						НоваяСтрока.Себестоимость = СтрокаПартии.Стоимость;
					КонецЕсли;
				КонецЕсли;
				
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
					СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - НоваяСтрока.Себестоимость;
				КонецЕсли;
	
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				ОстСуммаНДС = ОстСуммаНДС - НоваяСтрока.СуммаНДС;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
			НоваяСтрока.СуммаНДС = ОстСуммаНДС;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_ВозвратТоваровПоставщику_Товары_ПриВыгрузкеСвойства_1_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ВозвратТоваровПоставщикуИзНТТ_Товары_ПередОбработкойВыгрузки_1_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТабТовары = Источник.Товары.Выгрузить();
	Для каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
	КонецЦикла;
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартии.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	РезультатЗапроса = Запросы.СписанныеПартии.Выполнить();
	
	ТабПартии = РезультатЗапроса.Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		КоллекцияОбъектов.Колонки.Добавить("ДокументОприходования");
		Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
			КоллекцияОбъектов.Колонки.Добавить("Себестоимость");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		ОстКоличество = СтрокаТЧ.Количество;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
					НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
					Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
						НоваяСтрока.Себестоимость = СтрокаПартии.Стоимость;
					КонецЕсли;
				КонецЕсли;
				
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
					СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - НоваяСтрока.Себестоимость;
				КонецЕсли;
	
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_ВозвратТоваровПоставщикуИзНТТ_Товары_ПриВыгрузкеСвойства_1_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ЗаказПокупателяСчетНаОплатуПокупателю_Товары_ПередОбработкойВыгрузки_8_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТаблицаПоТоварам = Источник.Товары.Выгрузить();
	Запросы.Комплекты.УстановитьПараметр("МассивНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ТабКомплекты = Запросы.Комплекты.Выполнить().Выгрузить();
	ТаблицаПоТоварам.Колонки.Добавить("Комплект");
	ТаблицаПоТоварам.Колонки.Удалить("Коэффициент");
	Для каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		НайденнаяСтрока = ТабКомплекты.Найти(СтрокаТовары.Номенклатура, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТовары.Комплект = НайденнаяСтрока.Комплект;
		КонецЕсли;
	КонецЦикла;
	КоллекцияОбъектов = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, Источник);
	КоллекцияОбъектов.Колонки.Добавить("Коэффициент");
	Для каждого СтрокаТовары Из КоллекцияОбъектов Цикл
		СтрокаТовары.Коэффициент = СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
		СтрокаТовары.Цена = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма / СтрокаТовары.Количество, 0);
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_ЗаказПокупателяСчетНаОплатуПокупателю_Товары_ПриВыгрузкеСвойства_8_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ЗаказПокупателяСчетНаОплатуПокупателю_Услуги_ПриВыгрузкеСвойства_18_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "ПоступлениеНаРасчетныйСчет";
	КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТипДокументаРасчетов = "СписаниеСРасчетногоСчета";
		КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
		ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_КонтактныеЛица_КонтактнаяИнформация_ПередОбработкойВыгрузки_13_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда
		Отказ = Истина;
	Иначе
		ПереносКИ (КоллекцияОбъектов, Источник,ВходящиеДанные);
	Конецесли;

КонецПроцедуры

Процедура ПКГС_Контрагенты_КонтактнаяИнформация_ПередОбработкойВыгрузки_17_11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда
		Отказ = Истина;
	Иначе
		ПереносКИ (КоллекцияОбъектов, Источник,ВходящиеДанные);
	Конецесли;

КонецПроцедуры

Процедура ПКГС_КорректировкаДолга_СуммыДолга_ПередОбработкойВыгрузки_14_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "КорректировкаДолга";
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	МассивСтрок = Источник.СуммыДолга.НайтиСтроки(ПараметрыОтбора);
	КоллекцияОбъектов = Источник.СуммыДолга.Выгрузить(МассивСтрок);
	
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_КорректировкаДолга_СуммыДолга_ПередОбработкойВыгрузки_25_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "КорректировкаДолга";
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	МассивСтрок = Источник.СуммыДолга.НайтиСтроки(ПараметрыОтбора);
	КоллекцияОбъектов = Источник.СуммыДолга.Выгрузить(МассивСтрок);
	
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_КорректировкаПоступления_Товары_ПередОбработкойВыгрузки_3_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	КоллекцияОбъектов = Источник.Товары.Выгрузить();
	
	Для каждого СтрокаТЧ Из КоллекцияОбъектов цикл
	СтрокаТЧ.Количество                = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
	СтрокаТЧ.КоличествоДоИзменения     = СтрокаТЧ.КоличествоДоИзменения * СтрокаТЧ.Коэффициент;
	СтрокаТЧ.КоличествоДоКорректировки = СтрокаТЧ.КоличествоДоКорректировки * СтрокаТЧ.Коэффициент;
	
	СтрокаТЧ.Цена                = СтрокаТЧ.Цена / СтрокаТЧ.Коэффициент;
	СтрокаТЧ.ЦенаДоИзменения     = СтрокаТЧ.ЦенаДоИзменения / СтрокаТЧ.Коэффициент;
	СтрокаТЧ.ЦенаДоКорректировки = СтрокаТЧ.ЦенаДоКорректировки / СтрокаТЧ.Коэффициент;
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_КорректировкаПоступления_Товары_ПередВыгрузкойСвойства_3_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, ОбъектКоллекции, УзелКоллекцииСвойств, УзелКоллекцииОбъектов) Экспорт

	Если ТипЗнч(ВходящиеДанные) = Тип("Структура") 
	   И ВходящиеДанные.Свойство("Склад") 
	   И ВходящиеДанные.Склад <> ОбъектКоллекции.Склад Тогда
	   Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_КорректировкаПоступления_Товары_ПриВыгрузкеСвойства_3_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);
	
	Если Источник.УчитыватьНДС = Ложь Тогда
		ОбъектКоллекции.СтавкаНДСДоИзменения = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_КорректировкаПоступления_Услуги_ПриВыгрузкеСвойства_20_24(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);
	
	Если Источник.УчитыватьНДС = Ложь Тогда
		ОбъектКоллекции.СтавкаНДСДоИзменения = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_КорректировкаРеализации_Товары_ПередОбработкойВыгрузки_3_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	КоллекцияОбъектов = Источник.Товары.Выгрузить();
	
	Для каждого СтрокаТЧ Из КоллекцияОбъектов цикл
	СтрокаТЧ.Количество                = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
	СтрокаТЧ.КоличествоДоИзменения     = СтрокаТЧ.КоличествоДоИзменения * СтрокаТЧ.Коэффициент;
	СтрокаТЧ.КоличествоДоКорректировки = СтрокаТЧ.КоличествоДоКорректировки * СтрокаТЧ.Коэффициент;
	
	СтрокаТЧ.Цена                = СтрокаТЧ.Цена / СтрокаТЧ.Коэффициент;
	СтрокаТЧ.ЦенаДоИзменения     = СтрокаТЧ.ЦенаДоИзменения / СтрокаТЧ.Коэффициент;
	СтрокаТЧ.ЦенаДоКорректировки = СтрокаТЧ.ЦенаДоКорректировки / СтрокаТЧ.Коэффициент;
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_КорректировкаРеализации_Товары_ПриВыгрузкеСвойства_3_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);
	
	Если Источник.УчитыватьНДС = Ложь Тогда
		ОбъектКоллекции.СтавкаНДСДоИзменения = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_КорректировкаРеализации_Услуги_ПриВыгрузкеСвойства_41_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);
	
	Если Источник.УчитыватьНДС = Ложь Тогда
		ОбъектКоллекции.СтавкаНДСДоИзменения = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_Организации_КонтактнаяИнформация_ПередОбработкойВыгрузки_18_11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда
		Отказ = Истина;
	Иначе
		ПереносКИ (КоллекцияОбъектов, Источник,ВходящиеДанные);
	Конецесли;

КонецПроцедуры

Процедура ПКГС_ОтчетКомиссионераОПродажах_Товары_ПередОбработкойВыгрузки_1_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	
	Запросы.ОтчетКомиссионераОПродажах.УстановитьПараметр("ДокументСсылка",Источник.Ссылка);
	ТабТовары = Запросы.ОтчетКомиссионераОПродажах.Выполнить().Выгрузить();
	
	Запросы.ОтчетКомиссионераОПродажахПартииТоваровПереданные.УстановитьПараметр("ДокументСсылка",Источник.Ссылка);
	ТабПартии = Запросы.ОтчетКомиссионераОПродажахПартииТоваровПереданные.Выполнить().Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	
	СтрокаКолонок = "";
	Для каждого Колонка Из КоллекцияОбъектов.Колонки Цикл
		Если Колонка.Имя = "Количество" 
		 ИЛИ Колонка.Имя = "Сумма" 
		 ИЛИ Колонка.Имя = "СуммаНДС" 
		 ИЛИ Колонка.Имя = "СуммаВознаграждения"
	     ИЛИ Колонка.Имя = "СуммаНДСВознаграждения" Тогда
	   		Продолжить;
		КонецЕсли;
		СтрокаКолонок = СтрокаКолонок + ", " + Колонка.Имя;
	КонецЦикла;
	СтрокаКолонок = Сред(СтрокаКолонок, 2);
		
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		Цена = СтрокаТЧ.Сумма / СтрокаТЧ.Количество;
		
		ОстКоличество = СтрокаТЧ.Количество;
		ОстСумма      = СтрокаТЧ.Сумма;
		ОстСуммаНДС   = СтрокаТЧ.СуммаНДС;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					Если Колонка.Имя = "НомерСтроки" 
					 ИЛИ Колонка.Имя = "Сумма" 
					 ИЛИ Колонка.Имя = "СуммаНДС"   Тогда
	             		Продолжить;
					КонецЕсли;
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				НоваяСтрока.Цена	   = Цена;
				
				Если НоваяСтрока.Количество = ОстКоличество Тогда
					НоваяСтрока.Сумма    = ОстСумма;
					НоваяСтрока.СуммаНДС = ОстСуммаНДС;
				Иначе
					НоваяСтрока.Сумма      = НоваяСтрока.Цена * НоваяСтрока.Количество;
					НоваяСтрока.СуммаНДС   = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма, Источник.УчитыватьНДС, Источник.СуммаВключаетНДС,
		    	                                               УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				КонецЕсли;
														   
				
				НоваяСтрока.СуммаВознаграждения = НоваяСтрока.СуммаВознаграждения*НоваяСтрока.Количество/СтрокаТЧ.Количество;
				НоваяСтрока.СуммаНДСВознаграждения = НоваяСтрока.СуммаНДСВознаграждения*НоваяСтрока.Количество/СтрокаТЧ.Количество;
				
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				ОстСумма      = ОстСумма      - НоваяСтрока.Сумма;
				ОстСуммаНДС   = ОстСуммаНДС   - НоваяСтрока.СуммаНДС;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
			НоваяСтрока.Сумма      = ОстСумма;
			НоваяСтрока.СуммаНДС   = ОстСуммаНДС;
			НоваяСтрока.СуммаВознаграждения = НоваяСтрока.СуммаВознаграждения*НоваяСтрока.Количество/СтрокаТЧ.Количество;
			НоваяСтрока.СуммаНДСВознаграждения = НоваяСтрока.СуммаНДСВознаграждения*НоваяСтрока.Количество/СтрокаТЧ.Количество;
	
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияОбъектов.Свернуть(СтрокаКолонок, "Количество, Сумма, СуммаНДС, СуммаВознаграждения, СуммаНДСВознаграждения");

КонецПроцедуры

Процедура ПКГС_ОтчетКомиссионераОПродажах_Товары_ПриВыгрузкеСвойства_1_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ОтчетКомиссионераОПродажах_ДокументыРасчетовСКонтрагентом_ПередОбработкойВыгрузки_52_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если НЕ Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ТипДокументаРасчетов = "ОтчетКомиссионераОПродажах";
	Если НЕ Отказ Тогда
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ОтчетОРозничныхПродажах_Товары_ПередОбработкойВыгрузки_1_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТаблицаПоТоварам = Источник.Товары.Выгрузить();
	Запросы.Комплекты.УстановитьПараметр("МассивНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ТабКомплекты = Запросы.Комплекты.Выполнить().Выгрузить();
	ТаблицаПоТоварам.Колонки.Добавить("Комплект");
	ТаблицаПоТоварам.Колонки.Удалить("Коэффициент");
	Для каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		НайденнаяСтрока = ТабКомплекты.Найти(СтрокаТовары.Номенклатура, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТовары.Комплект = НайденнаяСтрока.Комплект;
		КонецЕсли;
	КонецЦикла;
	ТабТовары = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, Источник);
	ТабТовары.Колонки.Добавить("Коэффициент");
	Для каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.Коэффициент = ?(СтрокаТовары.ЕдиницаИзмерения.Коэффициент > 0, СтрокаТовары.ЕдиницаИзмерения.Коэффициент, 1);
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.Коэффициент;
		СтрокаТовары.Цена = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма / СтрокаТовары.Количество, 0);
	КонецЦикла;
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартии.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	РезультатЗапроса = Запросы.СписанныеПартии.Выполнить();
	
	ТабПартии = РезультатЗапроса.Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		КоллекцияОбъектов.Колонки.Добавить("ДокументОприходования");
		Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
			КоллекцияОбъектов.Колонки.Добавить("Себестоимость");
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКолонок = "";
	Для каждого Колонка Из КоллекцияОбъектов.Колонки Цикл
		Если Колонка.Имя = "Количество" 
		 ИЛИ Колонка.Имя = "Сумма" 
		 ИЛИ Колонка.Имя = "СуммаНДС"
		 ИЛИ Колонка.Имя = "Себестоимость" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКолонок = СтрокаКолонок + ", " + Колонка.Имя;
	КонецЦикла;
	СтрокаКолонок = Сред(СтрокаКолонок, 2);
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		Цена = ?(СтрокаТЧ.Количество > 0, СтрокаТЧ.Сумма / СтрокаТЧ.Количество, 0);	
		
		ОстКоличество = СтрокаТЧ.Количество;
		ОстСумма      = СтрокаТЧ.Сумма;
		ОстСуммаНДС   = СтрокаТЧ.СуммаНДС;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					Если Колонка.Имя = "НомерСтроки" 
					 ИЛИ Колонка.Имя = "Сумма" 
					 ИЛИ Колонка.Имя = "СуммаНДС" Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
					НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
					Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
						//НоваяСтрока.Себестоимость = СтрокаПартии.Стоимость;
						НоваяСтрока.Себестоимость = (СтрокаПартии.Стоимость*НоваяСтрока.Количество)/СтрокаПартии.Количество;
					КонецЕсли;
				КонецЕсли;
				
				Если НоваяСтрока.Количество = ОстКоличество Тогда
					НоваяСтрока.Сумма    = ОстСумма;
					НоваяСтрока.СуммаНДС = ОстСуммаНДС;
				Иначе
					НоваяСтрока.Цена       = Цена;
					НоваяСтрока.Сумма      = НоваяСтрока.Цена * НоваяСтрока.Количество;
					НоваяСтрока.СуммаНДС   = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма, Источник.УчитыватьНДС, Источник.СуммаВключаетНДС,
			                                                   УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				КонецЕсли;
														   
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
				СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - НоваяСтрока.Себестоимость;
				КонецЕсли;
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				ОстСумма      = ОстСумма      - НоваяСтрока.Сумма;
				ОстСуммаНДС   = ОстСуммаНДС   - НоваяСтрока.СуммаНДС;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
			НоваяСтрока.Сумма      = ОстСумма;
			НоваяСтрока.СуммаНДС   = ОстСуммаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияОбъектов.Свернуть(СтрокаКолонок, "Количество, Сумма, СуммаНДС"
	+ ?(КоллекцияОбъектов.Колонки.Найти("Себестоимость") <> Неопределено,", Себестоимость",""));

КонецПроцедуры

Процедура ПКГС_ОтчетОРозничныхПродажах_Товары_ПриВыгрузкеСвойства_1_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами_ПередОбработкойВыгрузки_32_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	КоллекцияОбъектов = Источник.ОплатаБанковскимиКредитами.Выгрузить(, "БанкКредитор,ВидОплаты,ДоговорВзаиморасчетовБанкаКредитора,Сумма");
	Для Каждого СтрокаПлатежа Из Источник.ОплатаПлатежнымиКартами Цикл
		СтрокаИтоговогоТаблицы = КоллекцияОбъектов.Добавить();
		СтрокаИтоговогоТаблицы.ВидОплаты = СтрокаПлатежа.ВидОплаты;
		СтрокаИтоговогоТаблицы.Сумма = СтрокаПлатежа.Сумма;
		СтрокаИтоговогоТаблицы.БанкКредитор = Источник.Эквайрер;
		СтрокаИтоговогоТаблицы.ДоговорВзаиморасчетовБанкаКредитора = Источник.ДоговорВзаиморасчетовЭквайрера;
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_ПеремещениеТоваров_Товары_ПередОбработкойВыгрузки_1_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТабТовары = Источник.Товары.Выгрузить();
	Для каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
	КонецЦикла;
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартии.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	РезультатЗапроса = Запросы.СписанныеПартии.Выполнить();
	
	ТабПартии = РезультатЗапроса.Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	
	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		КоллекцияОбъектов.Колонки.Добавить("ДокументОприходования");
		Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
			КоллекцияОбъектов.Колонки.Добавить("Себестоимость");
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКолонок = "";
	Для каждого Колонка Из КоллекцияОбъектов.Колонки Цикл
		Если Колонка.Имя = "Количество" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКолонок = СтрокаКолонок + ", " + Колонка.Имя;
	КонецЦикла;
	СтрокаКолонок = Сред(СтрокаКолонок, 2);
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		ОстКоличество = СтрокаТЧ.Количество;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
					НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
					Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
						НоваяСтрока.Себестоимость = СтрокаПартии.Стоимость;
					КонецЕсли;
				КонецЕсли;
				
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < КоллекцияОбъектов.Количество() Цикл
		СтрокаТаблицы = КоллекцияОбъектов.Получить(Сч);
		Если СтрокаТаблицы.Комиссия Тогда
			 КоллекцияОбъектов.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	КоллекцияОбъектов.Свернуть(СтрокаКолонок, "Количество");

КонецПроцедуры

Процедура ПКГС_ПеремещениеТоваров_Товары_ПередОбработкойВыгрузки_24_18(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТабТовары = Источник.Товары.Выгрузить();
	Для каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
	КонецЦикла;
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	РезультатЗапроса = Запросы.СписанныеПартии.Выполнить();
	
	ТабПартии = РезультатЗапроса.Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		ОстКоличество = СтрокаТЧ.Количество;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < КоллекцияОбъектов.Количество() Цикл
		СтрокаТаблицы = КоллекцияОбъектов.Получить(Сч);
		Если НЕ СтрокаТаблицы.Комиссия Тогда
			 КоллекцияОбъектов.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_26(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "ПоступлениеНаРасчетныйСчет";
	КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТипДокументаРасчетов = "СписаниеСРасчетногоСчета";
		КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
		ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа_ПередОбработкойВыгрузки_3_31(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "ПоступлениеНаРасчетныйСчет";
	КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_29(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТипДокументаРасчетов = "СписаниеСРасчетногоСчета";
		КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
		ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_40(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТипДокументаРасчетов = "ПоступлениеНаРасчетныйСчет";
	КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
	ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);

КонецПроцедуры

Процедура ПКГС_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_37(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТипДокументаРасчетов = "СписаниеСРасчетногоСчета";
		КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
		ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_Пользователи_КонтактнаяИнформация_ПередОбработкойВыгрузки_4_12(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда
		Отказ = Истина;
	Иначе	
		ПереносКИ (КоллекцияОбъектов, Источник,ВходящиеДанные);
	Конецесли;

КонецПроцедуры

Процедура ПКГС_ПоступлениеДопРасходов_ДокументыРасчетовСКонтрагентом_ПередОбработкойВыгрузки_36_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Источник.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		Отказ = Истина
	Иначе
		Если НЕ Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом ИЛИ Источник.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТипДокументаРасчетов = "ПоступлениеДопРасходов";
	Если НЕ Отказ Тогда
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслуг_Товары_ПередОбработкойВыгрузки_1_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	
	КоллекцияОбъектов = Источник.Товары.Выгрузить();
	
	
	Для каждого СтрокаТЧ Из КоллекцияОбъектов цикл
	СтрокаТЧ.Количество       = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
	СтрокаТЧ.Цена             = СтрокаТЧ.Цена / СтрокаТЧ.Коэффициент;
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслуг_Товары_ПередВыгрузкойСвойства_1_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, ОбъектКоллекции, УзелКоллекцииСвойств, УзелКоллекцииОбъектов) Экспорт

	Если ТипЗнч(ВходящиеДанные) = Тип("Структура") 
	   И ВходящиеДанные.Свойство("Склад") 
	   И ВходящиеДанные.Склад <> ОбъектКоллекции.Склад Тогда
	   Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслуг_Товары_ПриВыгрузкеСвойства_1_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслуг_ВозвратнаяТара_ПередВыгрузкойСвойства_13_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, ОбъектКоллекции, УзелКоллекцииСвойств, УзелКоллекцииОбъектов) Экспорт

	Если ТипЗнч(ВходящиеДанные) = Тип("Структура") 
	   И ВходящиеДанные.Свойство("Склад") 
	   И ВходящиеДанные.Склад <> ОбъектКоллекции.Склад Тогда
	   Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслуг_Услуги_ПриВыгрузкеСвойства_18_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслуг_ДокументыРасчетовСКонтрагентом_ПередОбработкойВыгрузки_55_23(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если НЕ Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
		ИЛИ Источник.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Отказ = Истина;
	КонецЕсли;
	ТипДокументаРасчетов = "ПоступлениеТоваровУслуг";
	Если НЕ Отказ Тогда
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслугВНТТ_Товары_ПриВыгрузкеСвойства_1_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслугВНТТ_Услуги_ПриВыгрузкеСвойства_20_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_ПоступлениеТоваровУслугВНТТ_ДокументыРасчетовСКонтрагентом_ПередОбработкойВыгрузки_55_27(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если НЕ Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
		ИЛИ Источник.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Отказ = Истина;
	КонецЕсли;
	ТипДокументаРасчетов = "ПоступлениеТоваровУслуг";
	Если НЕ Отказ Тогда
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПриходныйКассовыйОрдер_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТипДокументаРасчетов = "ПриходныйКассовыйОрдер";
		КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
		ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_РасходныйКассовыйОрдер_РасшифровкаПлатежа_ПередОбработкойВыгрузки_1_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Параметры.ВидыОперацийПлатежногоДокументаОчисткаРасшифровкиПлатежа.Найти(Источник.ВидОперации) = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ТипДокументаРасчетов = "РасходныйКассовыйОрдер";
		КоллекцияОбъектов = Источник.РасшифровкаПлатежа.Выгрузить();
		ОчиститьНекорректныеТипыДокументовРачетов (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_РеализацияТоваровУслуг_Товары_ПередОбработкойВыгрузки_1_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТаблицаПоТоварам = Источник.Товары.Выгрузить();
	Запросы.Комплекты.УстановитьПараметр("МассивНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ТабКомплекты = Запросы.Комплекты.Выполнить().Выгрузить();
	ТаблицаПоТоварам.Колонки.Добавить("Комплект");
	ТаблицаПоТоварам.Колонки.Удалить("Коэффициент");
	Для каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		НайденнаяСтрока = ТабКомплекты.Найти(СтрокаТовары.Номенклатура, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТовары.Комплект = НайденнаяСтрока.Комплект;
		КонецЕсли;
	КонецЦикла;
	ТабТовары = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, Источник);
	ТабТовары.Колонки.Добавить("Коэффициент");
	Для каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.Коэффициент = ?(СтрокаТовары.ЕдиницаИзмерения.Коэффициент <> 0, СтрокаТовары.ЕдиницаИзмерения.Коэффициент, 1);
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.Коэффициент;
		СтрокаТовары.Цена = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма / СтрокаТовары.Количество, 0);
	КонецЦикла;
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартии.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	РезультатЗапроса = Запросы.СписанныеПартии.Выполнить();
	
	ТабПартии = РезультатЗапроса.Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		КоллекцияОбъектов.Колонки.Добавить("ДокументОприходования");
		Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
			КоллекцияОбъектов.Колонки.Добавить("Себестоимость");
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКолонок = "";
	Для каждого Колонка Из КоллекцияОбъектов.Колонки Цикл
		Если Колонка.Имя = "Количество" 
		 ИЛИ Колонка.Имя = "Сумма" 
		 ИЛИ Колонка.Имя = "СуммаНДС"
		 ИЛИ Колонка.Имя = "Себестоимость" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКолонок = СтрокаКолонок + ", " + Колонка.Имя;
	КонецЦикла;
	СтрокаКолонок = Сред(СтрокаКолонок, 2);
		
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		Цена = ?(СтрокаТЧ.Количество <> 0, СтрокаТЧ.Сумма / СтрокаТЧ.Количество, 0);
		
		ОстКоличество = СтрокаТЧ.Количество;
		ОстСумма      = СтрокаТЧ.Сумма;
		ОстСуммаНДС   = СтрокаТЧ.СуммаНДС;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					Если Колонка.Имя = "НомерСтроки" 
					 ИЛИ Колонка.Имя = "Сумма" 
					 ИЛИ Колонка.Имя = "СуммаНДС" Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				НоваяСтрока.Цена	   = Цена;
				
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
					НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
					Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
						//НоваяСтрока.Себестоимость = СтрокаПартии.Стоимость;
						НоваяСтрока.Себестоимость = (СтрокаПартии.Стоимость*НоваяСтрока.Количество)/СтрокаПартии.Количество;
	
					КонецЕсли;
				КонецЕсли;
				
				Если НоваяСтрока.Количество = ОстКоличество Тогда
					НоваяСтрока.Сумма    = ОстСумма;
					НоваяСтрока.СуммаНДС = ОстСуммаНДС;
				Иначе
					НоваяСтрока.Сумма      = НоваяСтрока.Цена * НоваяСтрока.Количество;
					НоваяСтрока.СуммаНДС   = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма, Источник.УчитыватьНДС, Источник.СуммаВключаетНДС,
		    	                                               УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				КонецЕсли;
														   
				// Уменьшим количество и стоимость в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
					СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - НоваяСтрока.Себестоимость;
				КонецЕсли;
	
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				ОстСумма      = ОстСумма      - НоваяСтрока.Сумма;
				ОстСуммаНДС   = ОстСуммаНДС   - НоваяСтрока.СуммаНДС;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если партий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
			НоваяСтрока.Сумма      = ОстСумма;
			НоваяСтрока.СуммаНДС   = ОстСуммаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияОбъектов.Свернуть(СтрокаКолонок, "Количество, Сумма, СуммаНДС"
	+ ?(КоллекцияОбъектов.Колонки.Найти("Себестоимость") <> Неопределено,", Себестоимость",""));

КонецПроцедуры

Процедура ПКГС_РеализацияТоваровУслуг_Товары_ПриВыгрузкеСвойства_1_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_РеализацияТоваровУслуг_Услуги_ПриВыгрузкеСвойства_21_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_РеализацияТоваровУслуг_ДокументыРасчетовСКонтрагентом_ПередОбработкойВыгрузки_53_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если НЕ Источник.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом
		ИЛИ Источник.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Отказ = Истина;
	КонецЕсли;
	ТипДокументаРасчетов = "РеализацияТоваровУслуг";
	Если НЕ Отказ Тогда
		КоллекцияОбъектов = Источник.ДокументыРасчетовСКонтрагентом.Выгрузить();
		УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче (КоллекцияОбъектов,ТипДокументаРасчетов);
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_СписаниеТоваров_Товары_ПередОбработкойВыгрузки_1_15(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	
	Запросы.СписаниеТоваров.УстановитьПараметр("ДокументСсылка",Источник.Ссылка);
	
	ТабТовары  = Запросы.СписаниеТоваров.Выполнить().Выгрузить();
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартии.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	
	ТабПартии =Запросы.СписанныеПартии.Выполнить().Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		КоллекцияОбъектов.Колонки.Добавить("ДокументОприходования");
		Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
			КоллекцияОбъектов.Колонки.Добавить("Себестоимость");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		ОстКоличество = СтрокаТЧ.Количество;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
					НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
					Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
						//НоваяСтрока.Себестоимость = СтрокаПартии.Стоимость;
						НоваяСтрока.Себестоимость = (СтрокаПартии.Стоимость*НоваяСтрока.Количество)/СтрокаПартии.Количество;
					КонецЕсли;
				КонецЕсли;
				
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				   	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
				СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - НоваяСтрока.Себестоимость;
				    КонецЕсли;
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_СчетНаОплатуПокупателю_Товары_ПередОбработкойВыгрузки_8_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТаблицаПоТоварам = Источник.Товары.Выгрузить();
	Запросы.Комплекты.УстановитьПараметр("МассивНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ТабКомплекты = Запросы.Комплекты.Выполнить().Выгрузить();
	ТаблицаПоТоварам.Колонки.Добавить("Комплект");
	ТаблицаПоТоварам.Колонки.Удалить("Коэффициент");
	Для каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		НайденнаяСтрока = ТабКомплекты.Найти(СтрокаТовары.Номенклатура, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТовары.Комплект = НайденнаяСтрока.Комплект;
		КонецЕсли;
	КонецЦикла;
	КоллекцияОбъектов = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, Источник);
	КоллекцияОбъектов.Колонки.Добавить("Коэффициент");
	Для каждого СтрокаТовары Из КоллекцияОбъектов Цикл
		СтрокаТовары.Коэффициент = СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
		СтрокаТовары.Цена = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма / СтрокаТовары.Количество, 0);
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_СчетНаОплатуПокупателю_Товары_ПриВыгрузкеСвойства_8_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_СчетНаОплатуПокупателю_Услуги_ПриВыгрузкеСвойства_18_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_СчетНаОплатуПоставщика_Товары_ПередОбработкойВыгрузки_22_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТаблицаПоТоварам = Источник.Товары.Выгрузить();
	Запросы.Комплекты.УстановитьПараметр("МассивНоменклатуры", ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	ТабКомплекты = Запросы.Комплекты.Выполнить().Выгрузить();
	ТаблицаПоТоварам.Колонки.Добавить("Комплект");
	ТаблицаПоТоварам.Колонки.Удалить("Коэффициент");
	Для каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		НайденнаяСтрока = ТабКомплекты.Найти(СтрокаТовары.Номенклатура, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТовары.Комплект = НайденнаяСтрока.Комплект;
		КонецЕсли;
	КонецЦикла;
	КоллекцияОбъектов = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, Источник);
	КоллекцияОбъектов.Колонки.Добавить("Коэффициент");
	Для каждого СтрокаТовары Из КоллекцияОбъектов Цикл
		СтрокаТовары.Коэффициент = СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
		СтрокаТовары.Цена = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма / СтрокаТовары.Количество, 0);
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_СчетНаОплатуПоставщика_Товары_ПриВыгрузкеСвойства_22_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_СчетНаОплатуПоставщика_Услуги_ПриВыгрузкеСвойства_29_22(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, ОбъектКоллекции, УзелКоллекцииОбъектов, УзелОбъектаКоллекции,
	УзелКоллекцииСвойств, СтандартнаяОбработка) Экспорт

	ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС (Источник,ОбъектКоллекции);

КонецПроцедуры

Процедура ПКГС_СчетФактураВыданный_ДатаНомерДокументовОплаты_ПередОбработкойВыгрузки_23_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Источник.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		Если Источник.ДатаНомерДокументовОплаты.Количество() = 0.00 Тогда
			КоллекцияОбъектов = Источник.ДатаНомерДокументовОплаты.ВыгрузитьКолонки();
			КоллекцияОбъектов.Добавить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ТребованиеНакладная_Материалы_ПередОбработкойВыгрузки_1_19(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	ТабТовары = Источник.Материалы.Выгрузить();
	Для каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.Количество = СтрокаТовары.Количество * СтрокаТовары.ЕдиницаИзмерения.Коэффициент;
	КонецЦикла;
	
	Запросы.СписанныеПартии.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запросы.СписанныеПартии.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	РезультатЗапроса = Запросы.СписанныеПартии.Выполнить();
	
	ТабПартии = РезультатЗапроса.Выгрузить();
	
	КоллекцияОбъектов = ТабТовары.Скопировать();
	КоллекцияОбъектов.Очистить();
	КоллекцияОбъектов.Колонки.Добавить("Комиссия");
	Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		КоллекцияОбъектов.Колонки.Добавить("ДокументОприходования");
		Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
			КоллекцияОбъектов.Колонки.Добавить("Себестоимость");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ ИЗ ТабТовары Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
		Если СтрокаТЧ.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры", СтрокаТЧ.СерияНоменклатуры);
		КонецЕсли;
		
		НайденныеСтроки = ТабПартии.НайтиСтроки(СтруктураПоиска);
		
		ОстКоличество = СтрокаТЧ.Количество;
		Для каждого СтрокаПартии ИЗ НайденныеСтроки Цикл
			Если ОстКоличество > 0 И СтрокаПартии.Количество > 0 Тогда
				НоваяСтрока = КоллекцияОбъектов.Добавить();
				Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
					НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
				КонецЦикла;
				НоваяСтрока.Количество = Мин(СтрокаПартии.Количество, ОстКоличество);
				НоваяСтрока.Комиссия   = (СтрокаПартии.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию);
				
				Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия <> Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
					НоваяСтрока.ДокументОприходования = СтрокаПартии.ДокументОприходования;
					Если УзелДляОбмена.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
						НоваяСтрока.Себестоимость = СтрокаПартии.Стоимость;
					КонецЕсли;
				КонецЕсли;
				
				// Уменьшим количество в таблице партий, чтобы не использовать одну и ту же партию несколько раз
				СтрокаПартии.Количество = СтрокаПартии.Количество - НоваяСтрока.Количество;
				
				ОстКоличество = ОстКоличество - НоваяСтрока.Количество;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если пратий нет все равно выгружаем остаток товаров как собственные
		Если ОстКоличество > 0 Тогда
			НоваяСтрока = КоллекцияОбъектов.Добавить();
			Для каждого Колонка ИЗ ТабТовары.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
			КонецЦикла;
			НоваяСтрока.Количество = ОстКоличество;
			НоваяСтрока.Комиссия   = Ложь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКГС_ФизическиеЛица_КонтактнаяИнформация_ПередОбработкойВыгрузки_8_14(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО,
	ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда
		Отказ = Истина;
	Иначе	
		ПереносКИ (КоллекцияОбъектов, Источник,ВходящиеДанные);
	Конецесли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫГРУЗКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПВД_ВидыКонтактнойИнформации_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если Объект.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ВидыОплатЧекаККМ_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если Объект.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит И ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовБанкаКредитора)  Тогда	
		ОрганизацииВыгрузки = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДоговорВзаиморасчетовБанкаКредитора.Организация) И Параметры.Свойство("ОрганизацииВыгрузки", ОрганизацииВыгрузки) И Параметры.ОрганизацииВыгрузки.Количество() > 0 Тогда
			Если Параметры.ОрганизацииВыгрузки.Найти(Объект.ДоговорВзаиморасчетовБанкаКредитора.Организация, "Организация") = Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ВозвратТоваровОтПокупателя_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если ТипЗнч(Объект.СкладОрдер) = Тип("СправочникСсылка.Склады") И Объект.СкладОрдер.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ЗаказПокупателяСчетНаОплатуПокупателю_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
	Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) 
		И (ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать ИЛИ ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю) Тогда
			Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_КлассификаторСтранМира_ПередОбработкойПравила(Отказ, ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных) Экспорт

	Отказ = Истина;

КонецПроцедуры

Процедура ПВД_КонтактнаяИнформация_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	ВладелецКонтактнойИнформации = Объект.Отбор.Объект.Значение;
	Если ТипЗнч(ВладелецКонтактнойИнформации) = Тип("СправочникСсылка.Организации") Тогда
		ВыгрузитьПоПравилу(ВладелецКонтактнойИнформации,,,, "Организации");
	ИначеЕсли ТипЗнч(Объект.Отбор.Объект.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
		//ВыгрузитьПоПравилу(ВладелецКонтактнойИнформации,,,, "Пользователи");
	ИначеЕсли ТипЗнч(ВладелецКонтактнойИнформации) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВыгрузитьПоПравилу(ВладелецКонтактнойИнформации,,,, "Контрагенты");
	ИначеЕсли ТипЗнч(ВладелецКонтактнойИнформации) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Запросы.НаличиеКонтактныхЛицКонтрагента.УстановитьПараметр("КонтактноеЛицо", ВладелецКонтактнойИнформации);
		РезультатЗапросаПоКонтактнымЛицам = Запросы.НаличиеКонтактныхЛицКонтрагента.Выполнить();
		
		Если НЕ РезультатЗапросаПоКонтактнымЛицам.Пустой() Тогда
			ВыборкаПоКонтактнымЛицам = РезультатЗапросаПоКонтактнымЛицам.Выбрать();
			ВыборкаПоКонтактнымЛицам.Следующий();
			ВходящиеДанные  = Новый Структура("ВидКонтактногоЛица, ОбъектВладелец, Должность, Роль, КонтактноеЛицоКонтрагента");
			ВходящиеДанные.ОбъектВладелец = ВыборкаПоКонтактнымЛицам.ОбъектВладелец;
			ВходящиеДанные.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
			ВходящиеДанные.Должность = ВыборкаПоКонтактнымЛицам.Должность;
			ВходящиеДанные.Роль = ВыборкаПоКонтактнымЛицам.Роль;
			ВходящиеДанные.КонтактноеЛицоКонтрагента = ВыборкаПоКонтактнымЛицам.КонтактноеЛицоКонтрагента;
		Иначе
			ВходящиеДанные = Новый Структура;
			ВходящиеДанные.Вставить("ОбъектВладелец", Неопределено);
			ВходящиеДанные.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
			ВходящиеДанные.Вставить("Должность", Неопределено);
			ВходящиеДанные.Вставить("Роль", Неопределено);
			ВходящиеДанные.Вставить("КонтактноеЛицоКонтрагента", Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка());
		КонецЕсли;
		ВыгрузитьПоПравилу(ВладелецКонтактнойИнформации, ,ВходящиеДанные, ,"КонтактныеЛица");
		
	ИначеЕсли ТипЗнч(ВладелецКонтактнойИнформации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВыгрузитьПоПравилу(ВладелецКонтактнойИнформации,,,, "ФизическиеЛица");
	ИначеЕсли ТипЗнч(ВладелецКонтактнойИнформации) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
		
		ВходящиеДанные = Новый Структура;
		ВходящиеДанные.Вставить("ОбъектВладелец", ВладелецКонтактнойИнформации.Владелец);
		ВходящиеДанные.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
		ВходящиеДанные.Вставить("Должность", ВладелецКонтактнойИнформации.Должность);
		ВходящиеДанные.Вставить("Роль", ВладелецКонтактнойИнформации.РольКонтактногоЛица);
		ВходящиеДанные.Вставить("КонтактноеЛицоКонтрагента", ВладелецКонтактнойИнформации.Ссылка);
		
		ВыгрузитьПоПравилу(ВладелецКонтактнойИнформации.КонтактноеЛицо, ,ВходящиеДанные, ,"КонтактныеЛица");
	КонецЕсли;
	Отказ = Истина;

КонецПроцедуры

Процедура ПВД_КонтактныеЛица_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	
	
	Запросы.НаличиеКонтактныхЛицКонтрагента.УстановитьПараметр("КонтактноеЛицо",Объект.Ссылка);
	РезультатЗапросаПоКонтактнымЛицам = Запросы.НаличиеКонтактныхЛицКонтрагента.Выполнить();
	
	Если НЕ РезультатЗапросаПоКонтактнымЛицам.Пустой() Тогда
		
		ВыборкаПоКонтактнымЛицам = РезультатЗапросаПоКонтактнымЛицам.Выбрать();
		ВыборкаПоКонтактнымЛицам.Следующий();
		ВходящиеДанные  = Новый Структура("ВидКонтактногоЛица, ОбъектВладелец, Должность, Роль, КонтактноеЛицоКонтрагента");
		ВходящиеДанные.ОбъектВладелец     = ВыборкаПоКонтактнымЛицам.ОбъектВладелец;
		ВходящиеДанные.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		//"КонтактноеЛицоКонтрагента";
		ВходящиеДанные.Должность          = ВыборкаПоКонтактнымЛицам.Должность;
		ВходящиеДанные.Роль               = ВыборкаПоКонтактнымЛицам.Роль;
		ВходящиеДанные.КонтактноеЛицоКонтрагента = ВыборкаПоКонтактнымЛицам.КонтактноеЛицоКонтрагента;
		
	Иначе
		
		ВходящиеДанные = Новый Структура;
		ВходящиеДанные.Вставить("ОбъектВладелец", Неопределено);
		ВходящиеДанные.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
		ВходящиеДанные.Вставить("Должность", Неопределено);
		ВходящиеДанные.Вставить("Роль", Неопределено);
		ВходящиеДанные.Вставить("КонтактноеЛицоКонтрагента", Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка());
		
	КонецЕсли;
	
	ВыгрузитьПоПравилу(Объект, ,ВходящиеДанные, ,"КонтактныеЛица");
	
	Отказ = Истина;

КонецПроцедуры

Процедура ПВД_КонтактныеЛицаКонтрагентов_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	ВходящиеДанные = Новый Структура;
	ВходящиеДанные.Вставить("ОбъектВладелец", Объект.Владелец);
	ВходящиеДанные.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	ВходящиеДанные.Вставить("Должность", Объект.Должность);
	ВходящиеДанные.Вставить("Роль", Объект.РольКонтактногоЛица);
	ВходящиеДанные.Вставить("КонтактноеЛицоКонтрагента", Объект.Ссылка);
	
	ВыгрузитьПоПравилу(Объект.КонтактноеЛицо, ,ВходящиеДанные, ,"КонтактныеЛица");
	
	Отказ = Истина;

КонецПроцедуры

Процедура ПВД_Номенклатура_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если НЕ Объект.ЭтоГруппа И (Объект.Набор ИЛИ Объект.Комплект) Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ОприходованиеТоваров_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	ЗначениеВыгрузки = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Объект.ИнвентаризацияТоваровНаСкладе) Тогда
		ЗначениеВыгрузки.Вставить("Наименование", "Оприходование товаров (Управление торговлей)");
	Иначе
		ЗначениеВыгрузки.Вставить("Наименование", "Оприходование товаров по результатам инвентаризации (Управление торговлей)");
	КонецЕсли;
	ЗначениеВыгрузки.Вставить("Ссылка", Неопределено);
	ЗначениеВыгрузки.Вставить("ВидПрочихДоходовИРасходов", "ПрочиеВнереализационныеДоходыРасходы");
	ЗначениеВыгрузки.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", "ОсновнаяСистемаНалогообложения");
	ЗначениеВыгрузки.Вставить("ПринятиеКналоговомуУчету", "Истина");
	
	ВыгрузитьПоПравилу(ЗначениеВыгрузки,,,, "ПрочиеДоходыИРасходы");

КонецПроцедуры

Процедура ПВД_ПереоценкаТоваровВРознице_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Отказ = Истина;
	
	Если Объект.Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЦеныАТТ.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЦеныАТТ.Цена) КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныАТТ КАК ЦеныАТТ
		|ГДЕ
		|	ЦеныАТТ.Регистратор = &Регистратор
		|   И НЕ (ЦеныАТТ.Номенклатура.Набор
		|   ИЛИ ЦеныАТТ.Номенклатура.Комплект)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныАТТ.Номенклатура";
		
		ТаблицаЦен = Запрос.Выполнить().Выгрузить();
		
		ТаблицаТиповЦен = Новый ТаблицаЗначений;
		ТаблицаТиповЦен.Колонки.Добавить("ТипЦен");
		СтрокаТЧ = ТаблицаТиповЦен.Добавить();
		СтрокаТЧ.ТипЦен = Объект.Склад.ТипЦенРозничнойТорговли;
		
		ДанныеУЦ = Новый Структура;
		ДанныеУЦ.Вставить("Дата", Объект.Дата);
		ДанныеУЦ.Вставить("Номер", Объект.Номер);
		ДанныеУЦ.Вставить("НеПроводитьНулевыеЗначения", Истина);
		ДанныеУЦ.Вставить("ТипЦен", Объект.Склад.ТипЦенРозничнойТорговли);
		ДанныеУЦ.Вставить("Проведен", Объект.Проведен);
		ДанныеУЦ.Вставить("ПометкаУдаления", Ложь);
		ДанныеУЦ.Вставить("Товары", ТаблицаЦен);
		ДанныеУЦ.Вставить("ТипыЦен", ТаблицаТиповЦен);
		ДанныеУЦ.Вставить("Комментарий", Объект.Комментарий);
			
		ВыгрузитьПоПравилу(Объект,, ДанныеУЦ,, "УстановкаЦенНоменклатуры");
		
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ПлатежноеТребованиеВыставленное_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		КомментарийПриВыгрузкеДанных = КомментарийПриВыгрузкеДанных + Символы.ПС +
		"Документ " + Объект + " имеет вид операции """ + Объект.ВидОперации + """." + Символы.ПС +
		"Платежные требования выставленные с видом операции, отличным от ""Оплата от покупателя"" не выгружаются.";
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_Пользователи_ПередОбработкойПравила(Отказ, ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных) Экспорт

	Отказ = Истина;

КонецПроцедуры

Процедура ПВД_Пользователи_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Отказ = Истина;

КонецПроцедуры

Процедура ПВД_ПоступлениеТоваровУслуг_ПослеВыгрузкиОбъекта(ФайлОбмена, Объект, ИмяПКО, ВходящиеДанные, ИсходящиеДанные, УзелСсылки) Экспорт

	СчетФактура = УчетНДС.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураПолученный");
	Если НЕ СчетФактура = Неопределено Тогда
		ВыгрузитьПоПравилу(СчетФактура, , , , "СчетФактураПолученный");
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ПоступлениеТоваровУслугВНТТ_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ВнутреннееПеремещение Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ПриходныйКассовыйОрдер_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_РасходныйКассовыйОрдер_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_РеализацияТоваровУслуг_ПослеВыгрузкиОбъекта(ФайлОбмена, Объект, ИмяПКО, ВходящиеДанные, ИсходящиеДанные, УзелСсылки) Экспорт

	СчетФактура = УчетНДС.НайтиПодчиненныйДокумент(Объект.Ссылка, "СчетФактураВыданный");	
	Если НЕ СчетФактура = Неопределено Тогда
		ВыгрузитьПоПравилу(СчетФактура, , , , "СчетФактураВыданный");
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_СчетНаОплатуПокупателю_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Неопределено;
	Если Параметры.Свойство("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю) 
		И (ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать ИЛИ ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя) Тогда
			Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_СчетФактураВыданный_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	//Отказ = Ложь;
	//Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") 
	//	ИЛИ Объект.СформированПриВводеНачальныхОстатковНДС 
	//	ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")
	//Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	//Если НЕ Отказ Тогда
	//	ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено;
	//	Параметры.Свойство("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете", ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете);
	//	Для каждого СтрокаТЧ из Объект.ДокументыОснования Цикл
	//		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
	//			Если НЕ ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено И ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете Тогда
	//				МетаданныеДокументаОснования = СтрокаТЧ.ДокументОснование.Метаданные();
	//				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования)
	//					И НЕ СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
	//					Отказ = Истина;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры

Процедура ПВД_СчетФактураПолученный_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	//Отказ = Ложь;
	//Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") 
	//	ИЛИ Объект.СформированПриВводеНачальныхОстатковНДС
	//Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	//Если НЕ Отказ Тогда
	//	ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено;
	//	Параметры.Свойство("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете", ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете);
	//	Для каждого СтрокаТЧ из Объект.ДокументыОснования Цикл
	//		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
	//			Если НЕ ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете = Неопределено И ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете Тогда
	//				МетаданныеДокументаОснования = СтрокаТЧ.ДокументОснование.Метаданные();
	//				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокументаОснования)
	//					И НЕ СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
	//					Отказ = Истина;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры

Процедура ПВД_ФИОФизЛиц_ПередВыгрузкойОбъекта(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, Объект) Экспорт

	Если ТипЗнч(Объект.Отбор.ФизЛицо.Значение) = Тип("СправочникСсылка.Организации") Тогда
		ОрганизацииВыгрузки = Неопределено;
		Если ЗначениеЗаполнено(Объект.Отбор.ФизЛицо.Значение) И Параметры.Свойство("ОрганизацииВыгрузки", ОрганизацииВыгрузки) И Параметры.ОрганизацииВыгрузки.Количество() > 0 Тогда
			Если Параметры.ОрганизацииВыгрузки.Найти(Объект.Отбор.ФизЛицо.Значение, "Организация") = Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЧИСТКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПАРАМЕТРОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ
// Данный раздел разрешено изменять.
// Также допустимо размещать процедуры с алгоритмами в любом из разделов выше.

Процедура ВозможностьВыгрузкиОбъектаПоФильтрам(ПараметрИсточник, Отказ) Экспорт

	МетаданныеОбъекта = ПараметрИсточник.Метаданные();
	
	//фильтр по дате выгрузки
	
	Если ПараметрИсточник.Дата < Параметры.ДатаНачалаВыгрузкиДокументов Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//фильтр по организациям
	
	Если (НЕ Отказ)
			И Параметры.ИспользоватьФильтрПоОрганизациям
			И ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеОбъекта) 
			И Параметры.МассивОрганизаций.Найти(ПараметрИсточник.Организация) = Неопределено
		Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//фильтр по подразделениям
	
	Если (НЕ Отказ)
			И Параметры.ИспользоватьФильтрПоПодразделениям
			И ОбщегоНазначения.ЕстьРеквизитДокумента("Подразделение", МетаданныеОбъекта) 
			И Параметры.МассивПодразделений.Найти(ПараметрИсточник.Подразделение) = Неопределено
		Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//фильтр по складам
	
	Если (НЕ Отказ) И Параметры.ИспользоватьФильтрПоСкладам Тогда
		
		Если МетаданныеОбъекта = Метаданные.Документы.АвансовыйОтчет
			ИЛИ МетаданныеОбъекта = Метаданные.Документы.ВозвратТоваровОтПокупателя
			ИЛИ МетаданныеОбъекта = Метаданные.Документы.ПоступлениеТоваровУслуг
			ИЛИ МетаданныеОбъекта = Метаданные.Документы.КорректировкаПоступления
		Тогда
			ИмяРеквизитаСклад = "СкладОрдер";
		ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ЗаказПокупателя Тогда
			ИмяРеквизитаСклад = "СкладГруппа";
		ИначеЕсли МетаданныеОбъекта.Реквизиты.Найти("Склад") <> Неопределено Тогда
			ИмяРеквизитаСклад = "Склад";
		Иначе
			ИмяРеквизитаСклад = "";
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ИмяРеквизитаСклад) Тогда
			Если ТипЗнч(ПараметрИсточник[ИмяРеквизитаСклад]) = Тип("СправочникСсылка.Склады") Тогда
				Если Параметры.МассивСкладов.Найти(ПараметрИсточник[ИмяРеквизитаСклад]) = Неопределено Тогда
					Отказ = Истина;
				КонецЕсли;
			ИначеЕсли ПараметрИсточник[ИмяРеквизитаСклад] <> Неопределено Тогда
				Если Параметры.ОписаниеТиповДокументы.СодержитТип(ТипЗнч(ПараметрИсточник[ИмяРеквизитаСклад])) Тогда
					МетаданныеДок = ПараметрИсточник[ИмяРеквизитаСклад].Метаданные();
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДок) Тогда
						Если Параметры.МассивСкладов.Найти(ПараметрИсточник[ИмяРеквизитаСклад].Склад) = Неопределено Тогда
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ПеремещениеТоваров 
			И Параметры.МассивСкладов.Найти(ПараметрИсточник.СкладОтправитель) = Неопределено
			И Параметры.МассивСкладов.Найти(ПараметрИсточник.СкладПолучатель) = Неопределено
		Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//фильтр по БУ
	
	Если (НЕ Отказ)
			И Параметры.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеОбъекта) 
			И НЕ ПараметрИсточник.ОтражатьВБухгалтерскомУчете
		Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСпособПогашенияЗадолженности(ОбъектКоллекции) Экспорт

	Если ОбъектКоллекции.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		Если ЗначениеЗаполнено(ОбъектКоллекции.ДокументРасчетовСКонтрагентом) Тогда
			Значение = "ПоДокументу";
		Иначе
			Значение = "НеПогашать";
		КонецЕсли;
	Иначе
		Значение = "Автоматически";
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуВСтрокеПоФлагуУчитыватьНДС(Источник,ОбъектКоллекции) Экспорт

	Если Источник.УчитыватьНДС = Ложь Тогда
		ОбъектКоллекции.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли ОбъектКоллекции.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
		ОбъектКоллекции.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьНекорректныеТипыДокументовРачетов(КоллекцияОбъектов,ТипДокументаРасчетов) Экспорт

	// Алгоритм очищает некорректные документы расчетов в табличной части "Расшифровка платежа" в платежных документах.
	// Документ расчетов считается некорректным, если тип в УТ документа расчета не соответствует типу в БП для расчетного документа.
	// Перечень несоответствующих типов определен в событии конвертации "Перед выгрузкой данных".
	// в массиве МассивНекорректныхТиповДокументовРасчетов содержаться не корректные типы.
	// Так же удаляет документы расчетов по договору с комитентом (документы расчетов с комитентом не выгружаются, т.к. образование расчетных документов в УТ и БП КОРП различные)
	// В УТ задолженность по документу расчетов образовывает "Отчет комитенту о продаже товаров" сам же и является документом расчетов,
	// в БП это документ "Реализация товаров и услуг" и в качестве документа расчетов устанавливается поступление товаров.
	
	МассивНекорректныхТиповДокументовРасчетов = Неопределено;
	Если Параметры.СтруктураНевыгружаемыхДокументовРасчетов.Свойство(ТипДокументаРасчетов, МассивНекорректныхТиповДокументовРасчетов) Тогда
		Для Каждого СтрокаСодежащаяДокументРасчета Из КоллекцияОбъектов Цикл
			Если МассивНекорректныхТиповДокументовРасчетов.Найти(ТипЗнч(СтрокаСодежащаяДокументРасчета.ДокументРасчетовСКонтрагентом)) <> Неопределено
				ИЛИ СтрокаСодежащаяДокументРасчета.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаСодежащаяДокументРасчета.ДокументРасчетовСКонтрагентом = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПереносКИ(КоллекцияОбъектов, Источник,ВходящиеДанные) Экспорт

	КоллекцияОбъектов = Новый ТаблицаЗначений;
	КоллекцияОбъектов.Колонки.Добавить("Тип");
	КоллекцияОбъектов.Колонки.Добавить("Вид");
	КоллекцияОбъектов.Колонки.Добавить("Представление");
	КоллекцияОбъектов.Колонки.Добавить("ЗначенияПолей");
	КоллекцияОбъектов.Колонки.Добавить("Страна");
	КоллекцияОбъектов.Колонки.Добавить("Регион");
	КоллекцияОбъектов.Колонки.Добавить("Город");
	КоллекцияОбъектов.Колонки.Добавить("АдресЭП");
	КоллекцияОбъектов.Колонки.Добавить("ДоменноеИмяСервера");
	КоллекцияОбъектов.Колонки.Добавить("НомерТелефона");
	КоллекцияОбъектов.Колонки.Добавить("НомерТелефонаБезКодов");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.Поле1 КАК Поле1,
	|	КонтактнаяИнформация.Поле2 КАК Поле2,
	|	КонтактнаяИнформация.Поле3 КАК Поле3,
	|	КонтактнаяИнформация.Поле4 КАК Поле4,
	|	КонтактнаяИнформация.Поле5 КАК Поле5,
	|	КонтактнаяИнформация.Поле6 КАК Поле6,
	|	КонтактнаяИнформация.Поле7 КАК Поле7,
	|	КонтактнаяИнформация.Поле8 КАК Поле8,
	|	КонтактнаяИнформация.Поле9 КАК Поле9,
	|	КонтактнаяИнформация.ТипДома КАК ТипДома,
	|	КонтактнаяИнформация.ТипКорпуса КАК ТипКорпуса,
	|	КонтактнаяИнформация.ТипКвартиры КАК ТипКвартиры
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контрагент
	|	И НЕ КонтактнаяИнформация.Вид В (
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента),
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.КонтактнТелефонКандидата)
	|)
	|");
	
	Запрос.УстановитьПараметр("Контрагент", ?(ТипЗнч(Источник.Ссылка) = Тип("СправочникСсылка.КонтактныеЛица"), ВходящиеДанные.КонтактноеЛицоКонтрагента, Источник.Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = КоллекцияОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Если ЗначениеЗаполнено(Выборка.ТипДома) Тогда
				ТипДома = НРег(Выборка.ТипДома.Метаданные().ЗначенияПеречисления[Перечисления.ТипыДомов.Индекс(Выборка.ТипДома)].Имя);
			Иначе
				ТипДома = Выборка.ТипДома;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ТипКорпуса) Тогда
				ТипКорпуса = НРег(Выборка.ТипКорпуса.Метаданные().ЗначенияПеречисления[Перечисления.ТипыКорпусов.Индекс(Выборка.ТипКорпуса)].Имя);
			Иначе
				ТипКорпуса = Выборка.ТипКорпуса;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ТипКвартиры) Тогда
				ТипКвартиры = ?(Выборка.ТипКвартиры = Перечисления.ТипыКвартир.Квартира,
					"кв.", НРег(Выборка.ТипКвартиры.Метаданные().ЗначенияПеречисления[Перечисления.ТипыКвартир.Индекс(Выборка.ТипКвартиры)].Имя));
			Иначе
				ТипКвартиры = Выборка.ТипКвартиры;
			КонецЕсли;				
			
			НоваяСтрока.ЗначенияПолей = ?(ЗначениеЗаполнено(Выборка.Поле1), "Индекс=" + Выборка.Поле1 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле2), "Регион="			+ Выборка.Поле2 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле3), "Район="			+ Выборка.Поле3 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле4), "Город="			+ Выборка.Поле4 + Символы.ПС, "") 
			   + ?(ЗначениеЗаполнено(Выборка.Поле5), "НаселенныйПункт="	+ Выборка.Поле5 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле6), "Улица="			+ Выборка.Поле6 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле7), "Дом="				+ Выборка.Поле7 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле8), "Корпус="			+ Выборка.Поле8 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле9), "Квартира="		+ Выборка.Поле9 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(ТипДома),		 "ТипДома="			+ ТипДома		+ Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(ТипКорпуса),	 "ТипКорпуса="		+ ТипКорпуса	+ Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(ТипКвартиры),	 "ТипКвартиры="		+ ТипКвартиры, "");
			   
		ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
			НоваяСтрока.ЗначенияПолей = ?(ЗначениеЗаполнено(Выборка.Поле1), "КодСтраны="     + Выборка.Поле1 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле2), "КодГорода="     + Выборка.Поле2 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле3), "НомерТелефона=" + Выборка.Поле3 + Символы.ПС, "")
			   + ?(ЗначениеЗаполнено(Выборка.Поле4), "Добавочный="    + Выборка.Поле4, "");
	
			НоваяСтрока.НомерТелефонаБезКодов = Выборка.Поле3;
			НоваяСтрока.НомерТелефона         = Выборка.Поле1 + Выборка.Поле2 + Выборка.Поле3;
			
		ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			НоваяСтрока.АдресЭП = Выборка.Представление;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитаПоСтатусуОплаты(Итератор, Отказ) Экспорт

	//Итератор - значение реквизита, тип значения - документ ссылка
	Если ЗначениеЗаполнено(Итератор) 
		И (Итератор.Метаданные().Реквизиты.Найти("Оплачено")<>Неопределено) 
		И НЕ Итератор.Оплачено тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьСтрокиИзТабСНекоректнымТипомДокументовРасче(КоллекцияОбъектов,ТипДокументаРасчетов) Экспорт

	// Алгоритм удаляет не корректные строки из табличной части "Предоплата" в товарных документах.
	// Строка считается не корректной, если тип в УТ документа предоплаты не соответствует типу в БП для документа аванса.
	// Перечень несоответствующих типов определен в событии конвертации "Перед выгрузкой данных".
	// в массиве МассивНекорректныхТиповДокументовРасчетов содержаться не корректные типы.
	
	итератор = 0;
	МассивНекорректныхТиповДокументовРасчетов = Неопределено;
	Если Параметры.СтруктураНевыгружаемыхДокументовРасчетов.Свойство(ТипДокументаРасчетов, МассивНекорректныхТиповДокументовРасчетов) Тогда
		Пока итератор <= КоллекцияОбъектов.Количество() - 1 Цикл
			СтрокаСодежащаяДокументРасчета = КоллекцияОбъектов.Получить(итератор);
			Если МассивНекорректныхТиповДокументовРасчетов.Найти(ТипЗнч(СтрокаСодежащаяДокументРасчета.ДокументРасчетовСКонтрагентом)) <> Неопределено Тогда
				КоллекцияОбъектов.Удалить(итератор);
			Иначе
				итератор = итератор + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Данный раздел изменять запрещено.

// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "")
						   
	Возврат ОбщиеПроцедурыФункции.ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО);

КонецФункции

// Служебная. Инициализирует переменные, необходимые для отладки
//
// Параметры:
//  Владелец - Обработка КонвертацияОбъектовИнформационныхБаз
//
Процедура ПодключитьОбработкуДляОтладки(Владелец) Экспорт

	Параметры            	 = Владелец.Параметры;
	ОбщиеПроцедурыФункции	 = Владелец;
	Запросы              	 = Владелец.Запросы;
	УзелДляОбмена		 	 = Владелец.УзелДляОбмена;

КонецПроцедуры

#КонецЕсли
