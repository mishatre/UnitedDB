#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Функция проверяет заполнение Регламентированного производственного календаря для расчета количества дней задолженности
// Минимальную дату нужно взять из документа продажи и проверить заполнение календаря на эту дату.
// 
// Параметры:
//   МассивВидовДоговоров - массив с видами договоров
// Возвращаемое значение: Булево
Функция ПроверитьЗаполнениеКалендаря(МассивВидовДоговоров)
	Перем ЕстьОшибки, МинимальнаяДата, СпособКонтроляДнейЗадолженности;

	ЕстьОшибки                      = Ложь;
	МинимальнаяДата                 = ТекущаяДата();
	СпособКонтроляДнейЗадолженности = Константы.СпособКонтроляДнейЗадолженности.Получить();
	Если СпособКонтроляДнейЗадолженности <> Перечисления.СпособыКонтроляДнейЗадолженности.ПоРабочимДням Тогда
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МинимальнаяДата",                 МинимальнаяДата);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СпособКонтроляДнейЗадолженности", СпособКонтроляДнейЗадолженности);
		возврат ЕстьОшибки;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивВидовДоговоров", МассивВидовДоговоров);
	ДатаНачалаПараметр    = ?(УниверсальныйОтчет.ДатаНач = Дата('00010101000000'), УниверсальныйОтчет.ДатаНач, Новый Граница(НачалоДня(УниверсальныйОтчет.ДатаНач), ВидГраницы.Включая)); //ПостроительОтчета.Параметры.Вставить("ДатаНач", ?(ДатаНач = Дата('00010101000000'), ДатаНач, Новый Граница(НачалоДня(ДатаНач), ВидГраницы.Включая)));
	ДатаОкончанияПараметр = ?(УниверсальныйОтчет.ДатаКон = Дата('00010101000000'), УниверсальныйОтчет.ДатаКон, Новый Граница(КонецДня(УниверсальныйОтчет.ДатаКон), ВидГраницы.Включая)); //ПостроительОтчета.Параметры.Вставить("ДатаКон", ?(ДатаКон = Дата('00010101000000'), ДатаКон, Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая)));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаПараметр);
	Запрос.УстановитьПараметр("ДатаКон", ДатаОкончанияПараметр);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДатаДокумента.ДатаМинимум, ДАТАВРЕМЯ(0001,01,01,00,00,00))       КАК ДатаДокументаМинимум,
	|	ЕСТЬNULL(ДатаДокумента.ДатаМаксимум, ДАТАВРЕМЯ(0001,01,01,00,00,00))      КАК ДатаДокументаМаксимум,
	|	ЕСТЬNULL(КалендарьМинимум.ДатаКалендаря, ДАТАВРЕМЯ(0001,01,01,00,00,00))  КАК ДатаКалендаряМинимум,
	|	ЕСТЬNULL(КалендарьМаксимум.ДатаКалендаря, ДАТАВРЕМЯ(0001,01,01,00,00,00)) КАК ДатаКалендаряМаксимум
	|ИЗ
	|(ВЫБРАТЬ
	|			МИНИМУМ(НАЧАЛОПЕРИОДА(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, День)) КАК ДатаМинимум,
	|			МАКСИМУМ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, День, ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности), День)) КАК ДатаМаксимум
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор,,
	|					ДоговорКонтрагента.ВидДоговора В (&МассивВидовДоговоров)
	|					И ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности > 0
	|					И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА) КАК ВзаиморасчетыОстаткиИОбороты
	|		ГДЕ
	|			ВзаиморасчетыОстаткиИОбороты.УпрУчет
	|) КАК ДатаДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьМинимум
	|ПО
	|	КалендарьМинимум.ДатаКалендаря = ДатаДокумента.ДатаМинимум
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьМаксимум
	|ПО
	|	КалендарьМаксимум.ДатаКалендаря = ДатаДокумента.ДатаМаксимум
	|";
	РезультатЗапроса = Запрос.Выполнить();

	строкаПредупреждения = "";
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗаполненКалендарьНаНачало = РезультатЗапроса.Выгрузить();
		СтрокаДанныхКалендаря = ТаблицаЗаполненКалендарьНаНачало[0];
		МинимальнаяДата = СтрокаДанныхКалендаря.ДатаДокументаМинимум;
		Если ЗначениеЗаполнено(СтрокаДанныхКалендаря.ДатаДокументаМинимум) И НЕ ЗначениеЗаполнено(СтрокаДанныхКалендаря.ДатаКалендаряМинимум) Тогда
			строкаПредупреждения = "Не заполнен Регламентированный производственный календарь на дату " + СтрокаДанныхКалендаря.ДатаДокументаМинимум + Символы.ПС;
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанныхКалендаря.ДатаДокументаМаксимум) И НЕ ЗначениеЗаполнено(СтрокаДанныхКалендаря.ДатаКалендаряМаксимум) Тогда
			строкаПредупреждения = "Не заполнен Регламентированный производственный календарь на дату " + СтрокаДанныхКалендаря.ДатаДокументаМаксимум;
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьОшибки Тогда
		Предупреждение(строкаПредупреждения);
	КонецЕсли;
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МинимальнаяДата",                 МинимальнаяДата);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СпособКонтроляДнейЗадолженности", СпособКонтроляДнейЗадолженности);

	возврат ЕстьОшибки;

КонецФункции // ПроверитьЗаполнениеКалендаря()

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	//УниверсальныйОтчет.ИмяРегистра = "ВзаиморасчетыСКонтрагентами";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Ложь;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	//УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	//
	//ВЫБРАТЬ
	//	<ПсевдонимТаблицы.Поле> КАК <ПсевдонимПоля>,
	//	ПРЕДСТАВЛЕНИЕ(<ПсевдонимТаблицы>.<Поле>),
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//{ВЫБРАТЬ
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//ИЗ
	//	<Таблица> КАК <ПсевдонимТаблицы>
	//	//СОЕДИНЕНИЯ
	//{ГДЕ
	//	<ПсевдонимТаблицы.Поле>.* КАК <ПсевдонимПоля>,
	//	<ПсевдонимТаблицы.Показатель> КАК <ПсевдонимПоказателя>,
	//	<ПсевдонимТаблицы>.Регистратор КАК Регистратор,
	//	<ПсевдонимТаблицы>.Период КАК Период,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕНЬ) КАК ПериодДень,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ДЕКАДА) КАК ПериодДекада,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, МЕСЯЦ) КАК ПериодМесяц,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, КВАРТАЛ) КАК ПериодКвартал,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	//	НАЧАЛОПЕРИОДА(<ПсевдонимТаблицы>.Период, ГОД) КАК ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//{УПОРЯДОЧИТЬ ПО
	//	<ПсевдонимПоля>.*,
	//	<ПсевдонимПоказателя>,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//УПОРЯДОЧИТЬ_СВОЙСТВА
	//	//УПОРЯДОЧИТЬ_КАТЕГОРИИ
	//}
	//ИТОГИ
	//	АГРЕГАТНАЯ_ФУНКЦИЯ(<ПсевдонимПоказателя>)
	//	//ИТОГИ_СВОЙСТВА
	//	//ИТОГИ_КАТЕГОРИИ
	//ПО
	//	ОБЩИЕ
	//{ИТОГИ ПО
	//	<ПсевдонимПоля>.*,
	//	Регистратор,
	//	Период,
	//	ПериодДень,
	//	ПериодНеделя,
	//	ПериодДекада,
	//	ПериодМесяц,
	//	ПериодКвартал,
	//	ПериодПолугодие,
	//	ПериодГод
	//	//ПОЛЯ_СВОЙСТВА
	//	//ПОЛЯ_КАТЕГОРИИ
	//}
	//АВТОУПОРЯДОЧИВАНИЕ
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Календарь.ДатаКалендаря КАК ДатаКалендаря,
	|	КОЛИЧЕСТВО(*)           КАК Ранг
	|ПОМЕСТИТЬ Календарь
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК Календарь
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК КалендарьКопия
	|ПО
	|	Календарь.ДатаКалендаря >= КалендарьКопия.ДатаКалендаря
	|ГДЕ
	|		(Календарь.ДатаКалендаря >= &МинимальнаяДата И (Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)))
	|		И (КалендарьКопия.ДатаКалендаря >= &МинимальнаяДата И (КалендарьКопия.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ИЛИ КалендарьКопия.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)))
	|СГРУППИРОВАТЬ ПО Календарь.ДатаКалендаря
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаКалендаря
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендарьРанг.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	Календарь.ДатаКалендаря                     КАК ДатаКалендаря
	|ПОМЕСТИТЬ РабочаяДатаВзаиморасчетыОстаткиИОбороты
	|ИЗ
	|	Календарь КАК Календарь
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|(	ВЫБРАТЬ
	|		ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|		МИНИМУМ(Календарь.Ранг) + МИНИМУМ(ВзаиморасчетыОстаткиИОбороты.ДопустимоеЧислоДнейЗадолженности) КАК РангСоединения,
	|		МИНИМУМ(Календарь.Ранг) КАК Ранг
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом                                    КАК ДокументРасчетовСКонтрагентом,
	|			МИНИМУМ(ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)     КАК ДопустимоеЧислоДнейЗадолженности,
	|			НАЧАЛОПЕРИОДА(МИНИМУМ(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата), День) КАК Дата
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&ДатаНач, &ДатаКон,Регистратор {&Периодичность},,
	|					ДоговорКонтрагента.ВидДоговора В (&МассивВидовДоговоров)
	|					И ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности > 0
	|					И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА) КАК ВзаиморасчетыОстаткиИОбороты
	|		ГДЕ ВзаиморасчетыОстаткиИОбороты.УпрУчет
	|		СГРУППИРОВАТЬ ПО ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом
	|		) КАК ВзаиморасчетыОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Календарь КАК Календарь
	|	ПО
	|		ВзаиморасчетыОстаткиИОбороты.Дата <= Календарь.ДатаКалендаря
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом
	|) КАК КалендарьРанг
	|ПО
	|	КалендарьРанг.РангСоединения = Календарь.Ранг
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетовСКонтрагентом
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыОстаткиИОбороты.Организация                                         КАК Организация,
	|	ВзаиморасчетыОстаткиИОбороты.Контрагент                                          КАК Контрагент,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента                                  КАК ДоговорКонтрагента,
	|	ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом                       КАК ДокументРасчетовСКонтрагентом,
	|	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход
	|	КОНЕЦ                                                                            КАК Отгрузка,
	|	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход
	|	КОНЕЦ                                                                            КАК Оплата,
	|	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход = 0
	|			ТОГДА 0 
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрПриход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход 
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход = 0
	|			ТОГДА 0 
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрРасход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход
	|			КОНЕЦ
	|	КОНЕЦ                                                                            КАК ОтгрузкаУпр,
	| 	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрРасход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрПриход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход
	|			КОНЕЦ
	|	КОНЕЦ                                                                            КАК ОплатаУпр,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК ЧислоДней,
	|	&Предоставленные * ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
	|		                                                                             КАК ДолгКонтрагента,
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности     КАК ГлубинаКредитнойЛинии,
	| 	&Предоставленные * ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаВзаиморасчетовОстаток = 0
	|			ТОГДА 0 
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаУпрОстаток /
	|				РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаВзаиморасчетовОстаток
	|			КОНЕЦ                                                                    КАК ДолгКонтрагентаУпр,
	|	ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата                  КАК ДатаОтгрузки,
	|	ВЫБОР	КОГДА &СпособКонтроляДнейЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыКонтроляДнейЗадолженности.ПоРабочимДням)
	|			ТОГДА ЕСТЬNULL(РабочаяДатаВзаиморасчетыОстаткиИОбороты.ДатаКалендаря, ДАТАВРЕМЯ(0001,01,01,00,00,00))
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
	|	КОНЕЦ                                                                            КАК Срок
	|	//ПОЛЯ_СВОЙСТВА
	|	//ПОЛЯ_КАТЕГОРИИ
	|{ВЫБРАТЬ
	|	Организация.*                            КАК Организация,
	|	Контрагент.*                             КАК Контрагент,
	|	ДоговорКонтрагента.*                     КАК ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом.*          КАК ДокументРасчетовСКонтрагентом,
	|	Отгрузка                                 КАК Отгрузка,
	|	Оплата                                   КАК Оплата,
	|	ОтгрузкаУпр                              КАК ОтгрузкаУпр,
	|	ОплатаУпр                                КАК ОплатаУпр,
	|	ЧислоДней                                КАК ЧислоДней,
	|	ГлубинаКредитнойЛинии                    КАК ГлубинаКредитнойЛинии,
	|	ДолгКонтрагента                          КАК ДолгКонтрагента,
	|	ДолгКонтрагентаУпр                       КАК ДолгКонтрагентаУпр,
	|	Срок                                     КАК Срок,
	|	ВзаиморасчетыОстаткиИОбороты.Регистратор КАК Регистратор,
	|	ДатаОтгрузки КАК ДатаОтгрузки
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|ИЗ РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.ОстаткиИОбороты(&ДатаНач, &ДатаКон, 
	|			Регистратор {&Периодичность},,ДоговорКонтрагента.ВидДоговора В (&МассивВидовДоговоров) И 
	|			ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности > 0 и 
	|			ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА
	|			{ДоговорКонтрагента.*, Контрагент.*, Организация.*, ДокументРасчетовСКонтрагентом.*})КАК ВзаиморасчетыОстаткиИОбороты
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РабочаяДатаВзаиморасчетыОстаткиИОбороты КАК РабочаяДатаВзаиморасчетыОстаткиИОбороты
	|ПО
	|	РабочаяДатаВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом = ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом
	|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&ДатаНач, &ДатаКон,, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА) КАК РегВзаиморасчеты_БезДокументовОборот
	|	ПО ВзаиморасчетыОстаткиИОбороты.Организация = РегВзаиморасчеты_БезДокументовОборот.Организация И
	|	ВзаиморасчетыОстаткиИОбороты.Контрагент = РегВзаиморасчеты_БезДокументовОборот.Контрагент И
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента = РегВзаиморасчеты_БезДокументовОборот.ДоговорКонтрагента И
	|	ВзаиморасчетыОстаткиИОбороты.Сделка = РегВзаиморасчеты_БезДокументовОборот.Сделка}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКонца, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА) КАК РегВзаиморасчеты_БезДокументовКонечныйОстаток
	|	ПО ВзаиморасчетыОстаткиИОбороты.Организация = РегВзаиморасчеты_БезДокументовКонечныйОстаток.Организация И
	|	ВзаиморасчетыОстаткиИОбороты.Контрагент = РегВзаиморасчеты_БезДокументовКонечныйОстаток.Контрагент И
	|	ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента = РегВзаиморасчеты_БезДокументовКонечныйОстаток.ДоговорКонтрагента И
	|	ВзаиморасчетыОстаткиИОбороты.Сделка = РегВзаиморасчеты_БезДокументовКонечныйОстаток.Сделка}
	|//СОЕДИНЕНИЯ
	|ГДЕ ВзаиморасчетыОстаткиИОбороты.УпрУчет = ИСТИНА
	|
	|{ГДЕ
	|ВзаиморасчетыОстаткиИОбороты.Период,
	| 	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход
	|	КОНЕЦ                                                                            КАК Отгрузка,
	| 	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход 
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход
	|	КОНЕЦ                                                                            КАК Оплата,
	| 	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход = 0 
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрПриход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход = 0
	|			ТОГДА 0 
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрРасход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход
	|			КОНЕЦ
	|	КОНЕЦ                                                                            КАК ОтгрузкаУпр,
	|	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрРасход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрПриход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход
	|			КОНЕЦ
	|	КОНЕЦ                                                                            КАК ОплатаУпр,
	|	&Предоставленные * ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
	|		                                                                            КАК ДолгКонтрагента,
	|	&Предоставленные * ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаВзаиморасчетовОстаток = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаУпрОстаток /
	|				РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаВзаиморасчетовОстаток
	|			КОНЕЦ                                                                   КАК ДолгКонтрагентаУпр,
	|	ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата                 КАК ДатаОтгрузки,
	|	ВЫБОР	КОГДА &СпособКонтроляДнейЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыКонтроляДнейЗадолженности.ПоРабочимДням)
	|			ТОГДА ЕСТЬNULL(РабочаяДатаВзаиморасчетыОстаткиИОбороты.ДатаКалендаря, ДАТАВРЕМЯ(0001,01,01,00,00,00))
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
	|	КОНЕЦ КАК                                                                       Срок
	|	//УСЛОВИЯ_СВОЙСТВА
	|	//УСЛОВИЯ_КАТЕГОРИИ
	|}
	|{УПОРЯДОЧИТЬ ПО
	|	Организация.*                                                    КАК Организация,
	|	Контрагент.*                                                     КАК Контрагент,
	|	ДоговорКонтрагента.*                                             КАК ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом.*                                  КАК ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыОстаткиИОбороты.Регистратор.*                       КАК Регистратор,
	|	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход
	|	КОНЕЦ                                                            КАК Отгрузка,
	|	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход
	|	КОНЕЦ                                                            КАК Оплата,
	|	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрПриход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход = 0 
	|			ТОГДА 0 
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрРасход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход
	|			КОНЕЦ
	|	КОНЕЦ                                                            КАК ОтгрузкаУпр,
	| 	ВЫБОР КОГДА &Предоставленные=1 ТОГДА
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовРасход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрРасход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовРасход
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовПриход *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовОборот.СуммаУпрПриход /
	|				РегВзаиморасчеты_БезДокументовОборот.СуммаВзаиморасчетовПриход
	|			КОНЕЦ
	|	КОНЕЦ                                                            КАК ОплатаУпр,
	|	&Предоставленные * ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
	|		                                                             КАК ДолгКонтрагента,
	| 	&Предоставленные * ВзаиморасчетыОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток *
	|			ВЫБОР КОГДА РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаВзаиморасчетовОстаток = 0
	|			ТОГДА 0
	|			ИНАЧЕ РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаУпрОстаток /
	|				РегВзаиморасчеты_БезДокументовКонечныйОстаток.СуммаВзаиморасчетовОстаток
	|			КОНЕЦ                                                    КАК ДолгКонтрагентаУпр,
	|	ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата  КАК ДатаОтгрузки,
	|	ВЫБОР	КОГДА &СпособКонтроляДнейЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыКонтроляДнейЗадолженности.ПоРабочимДням)
	|			ТОГДА ЕСТЬNULL(РабочаяДатаВзаиморасчетыОстаткиИОбороты.ДатаКалендаря, ДАТАВРЕМЯ(0001,01,01,00,00,00))
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ВзаиморасчетыОстаткиИОбороты.ДокументРасчетовСКонтрагентом.Дата, ДЕНЬ, ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности)
	|	КОНЕЦ                                                            КАК Срок
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|ИТОГИ
	|	СУММА(Отгрузка),
	|	СУММА(Оплата),
	|	СУММА(ОтгрузкаУпр),
	|	СУММА(ОплатаУпр),
	|	СУММА(ДолгКонтрагента),
	|	СУММА(ДолгКонтрагентаУпр),
	|	МИНИМУМ(ЧислоДней),
	|	МИНИМУМ(Срок)
	|	//ИТОГИ_СВОЙСТВА
	|	//ИТОГИ_КАТЕГОРИИ
	|ПО
	|	ОБЩИЕ
	|{
	|ИТОГИ ПО
	|	Организация,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом,
	|	ВзаиморасчетыОстаткиИОбороты.Регистратор
	|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|	//ПСЕВДОНИМЫ_КАТЕГОРИИ
	|}
	|";

	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда

		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.

		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ВзаиморасчетыОстаткиИОбороты.ДоговорКонтрагента" ,   "ДоговорКонтрагента",   "Договор контрагента",   ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ВзаиморасчетыОстаткиИОбороты.Контрагент" ,   "Контрагент",   "Контрагент",   ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля( "ВзаиморасчетыОстаткиИОбороты.Организация" ,   "Организация",   "Организация",   ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);

		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);

	КонецЕсли;

	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;

	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Контрагент",         "Контрагент");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДокументРасчетовСКонтрагентом",    "Документ отгрузки");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Отгрузка", "Сумма отгрузки");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОтгрузкаУпр", "Сумма отгрузки (упр.)");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Оплата", "Сумма оплаты");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОплатаУпр", "Сумма оплаты (упр.)");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЧислоДней", "Длительность кредитной линии");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДолгКонтрагента", "Долг контрагента");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДолгКонтрагентаУпр", "Долг контрагента (упр.)");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Регистратор", "Документ оплаты");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ГлубинаКредитнойЛинии", "Глубина кредитной линии");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаОтгрузки", "Дата отгрузки");
	 УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Срок", "Срок оплаты");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	УниверсальныйОтчет.ДобавитьПоказатель("Отгрузка", "Сумма отгрузки", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ОтгрузкаУпр", "Сумма отгрузки (упр.)", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("Оплата", "Сумма оплаты", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ОплатаУпр", "Сумма оплаты (упр.)", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ДолгКонтрагента", "Долг контрагента", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ДолгКонтрагентаУпр", "Долг контрагента (упр.)", Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ДатаОтгрузки", "Дата отгрузки", Истина, "ДФ=dd.MM.yyyy");
	УниверсальныйОтчет.ДобавитьПоказатель("Срок", "Срок оплаты", Истина, "ДФ=dd.MM.yyyy");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДокументРасчетовСКонтрагентом");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагента");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьПорядок("Организация");
	УниверсальныйОтчет.ДобавитьПорядок("Контрагент");
    УниверсальныйОтчет.ДобавитьПорядок("ДоговорКонтрагента");
    УниверсальныйОтчет.ДобавитьПорядок("ДокументРасчетовСКонтрагентом");
	УниверсальныйОтчет.ДобавитьПорядок("Регистратор");

	
	// Установка связи подчиненных и родительских полей
//	УниверсальныйОтчет.УстановитьСвязьПолей("ДоговорКонтрагента", "Контрагент");
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	 УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	 УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ЧислоДней");
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ГлубинаКредитнойЛинии");
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	
	МассивВидовДоговоров = Новый Массив;
	
	Если ВидКредитныхЛиний = 0 Тогда
		
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Предоставленные", -1);
		
	Иначе
		
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Предоставленные", 1);
		
	КонецЕсли;
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("МассивВидовДоговоров", МассивВидовДоговоров);
	Если НЕ ПроверитьЗаполнениеКалендаря(МассивВидовДоговоров) Тогда
		УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	КонецЕсли;
	

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: // (-1) - не выбирать период, 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
