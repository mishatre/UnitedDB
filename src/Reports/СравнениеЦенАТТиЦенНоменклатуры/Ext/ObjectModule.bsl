#Если Клиент Тогда

// Валюта управленческого учета организаций
Перем мВалютаРегламентированногоУчета Экспорт;
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт

	// Настройка общих параметров универсального отчета

	Если ДополнительныеПараметры <> Неопределено Тогда
		УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;

	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);

	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;

	УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;

		УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;

	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.

		УниверсальныйОтчет.Показатели.Строки.Очистить();

		УниверсальныйОтчет.ДобавитьПоказатель("ЦенаАТТ",          "АТТ",            Истина, "ЧЦ=15; ЧДЦ=2", "Цена", "Цена");
		УниверсальныйОтчет.ДобавитьПоказатель("ЦенаВВалютеРегл",  "В типе цен розн. торговли", Истина, "ЧЦ=15; ЧДЦ=2", "Цена", "Цена");
		УниверсальныйОтчет.ДобавитьПоказатель("Разница",          Строка(мВалютаРегламентированногоУчета),        Истина, "ЧЦ=15; ЧДЦ=2", "Расхождение", "Расхождение");
		УниверсальныйОтчет.ДобавитьПоказатель("РазницаВПроцентах","%",           Истина, "ЧЦ=15; ЧДЦ=2", "Расхождение", "Расхождение");

		ТекстЗапроса = 
		// Создание временной таблицы номенклатуры, по которой имеет смысл расчитывать цены..
		"ВЫБРАТЬ
		|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатураАТТ
		|ИЗ
		|	РегистрСведений.ЦеныАТТ.СрезПоследних(&ДатаКон, Склад = &Склад {(Номенклатура).* КАК Номенклатура}) КАК ЦеныАТТСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаКон, ТипЦен = &ТипЦенДляСпискаНоменклатуры {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Создание временной таблицы диапазонов.
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ВерхняяГраница КАК ВерхняяГраница,
		|	ВложенныйЗапрос.Цена КАК Цена,
		|	ВложенныйЗапрос.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВтШкалыДиапазонов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДиапазоныЦен.ВерхняяГраница КАК ВерхняяГраница,
		|		ДиапазоныЦен.Цена КАК Цена,
		|		ДиапазоныЦен.Валюта КАК Валюта
		|	ИЗ
		|		РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ДатаКон, ТипЦен = &ТипЦен) КАК ДиапазоныЦен
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&ДатаКон, ТипЦен = &ТипЦен) КАК ДиапазоныЦенДляНаценкиСрезПоследних) КАК МаксДиапазоныЦен
		|			ПО ДиапазоныЦен.Период = МаксДиапазоныЦен.Период) КАК ВложенныйЗапрос
		|ГДЕ
		|	&ТипЦенРасчитывается
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВерхняяГраница,
		|	Цена,
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Создание временной таблицы цен АТТ.
		|ВЫБРАТЬ
		|	ЦеныАТТСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныАТТСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТЦеныАТТ
		|ИЗ
		|	РегистрСведений.ЦеныАТТ.СрезПоследних(
		|			&ДатаКон,
		|			Склад = &Склад {(Номенклатура).* КАК Номенклатура}) КАК ЦеныАТТСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		// Создание временной таблицы цен номенклатуры.
		|ВЫБРАТЬ
		|	Цены.ТипЦен КАК ТипЦен,
		|	Цены.Номенклатура КАК Номенклатура,
		|	Цены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	Цены.Валюта,
		|	Цены.Цена,
		|	Цены.ЕдиницаИзмерения,
		|	Цены.ПроцентСкидкиНаценки,
		|	Цены.СпособРасчетаЦены
		|ПОМЕСТИТЬ ВТЦеныНоменклатурыПоХарактеристикам
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаКон,
		|			ТипЦен = &ТипЦен
		|				ИЛИ ТипЦен = &ТипЦенБазовый {(Номенклатура).* КАК Номенклатура}) КАК Цены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	ТипЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
		|			ТОГДА ""----//----""
		|		ИНАЧЕ ВложенныйЗапрос.ХарактеристикаНоменклатуры
		|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
		
		|	ВложенныйЗапрос.ЦенаАТТ КАК ЦенаАТТ,
			// Пересчитываем цену номенклатуры в валюту регламентированного учета.
			//
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ТипЦенРасчитывается
		|					И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|				ТОГДА ЕСТЬNULL(ШкалыДиапазонов.Цена, 0)
		|			ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеЦены, 0)
		|		КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность) КАК ЧИСЛО(15, 2)) КАК ЦенаВВалютеРегл,
		// Расчитываем разницу между ценой номенклатуры и ценой АТТ.
		//
		|	ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) <> 0
		|						И ВЫБОР
		|							КОГДА &ТипЦенРасчитывается
		|									И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|								ТОГДА ЕСТЬNULL(ШкалыДиапазонов.Цена, 0)
		|							ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеЦены, 0)
		|						КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность) <> 0
		|					ТОГДА (ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) - ВЫБОР
		|							КОГДА &ТипЦенРасчитывается
		|									И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|								ТОГДА ЕСТЬNULL(ШкалыДиапазонов.Цена, 0)
		|							ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеЦены, 0)
		|						КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность)) / ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0)
						//Ситуация, когда цена АТТ не ноль, а цена по типу цен - ноль.
		|				КОГДА ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) <> 0
		|					ТОГДА 1
						//Ситуация, когда цена АТТ ноль, а цена по типц цен отлична от ноля.
		|				ИНАЧЕ -1
		|			КОНЕЦ * 100 КАК ЧИСЛО(15, 2)) КАК РазницаВПроцентах,


		|	ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) - ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА &ТипЦенРасчитывается
		|						И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|					ТОГДА ЕСТЬNULL(ШкалыДиапазонов.Цена, 0)
		|				ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеЦены, 0)
		|			КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность) КАК ЧИСЛО(15, 2)), 0) КАК Разница,
		|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Номенклатура),
		
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА ВложенныйЗапрос.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
		|				ТОГДА ""----//----""
		|			ИНАЧЕ ВложенныйЗапрос.ХарактеристикаНоменклатуры
		|		КОНЕЦ) КАК ХарактеристикаНоменклатурыПредставление
		
		|{ВЫБРАТЬ
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	ЦенаАТТ,
		|	ЦенаВВалютеРегл,
		|	Разница,
		|	РазницаВПроцентах}
		|ИЗ
			//
		|	(ВЫБРАТЬ
		|		Цены.Номенклатура КАК Номенклатура,
		|		Цены.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		МАКСИМУМ(Цены.ЦенаАТТ) КАК ЦенаАТТ,
		|		МАКСИМУМ(Цены.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
		|		МАКСИМУМ(Цены.ЦенаБазовая) КАК ЦенаБазовая,
		|		МАКСИМУМ(Цены.СпособРасчетаЦены) КАК СпособРасчетаЦены,
		|		МАКСИМУМ(Цены.ВалютаЦены) КАК ВалютаЦены,
		|		МАКСИМУМ(Цены.ЦенаВВалютеЦены) КАК ЦенаВВалютеЦены,
		|		МИНИМУМ(ШкалыДиапазонов.ВерхняяГраница) КАК ВерхняяГраница
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|			ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ВложенныйЗапрос.ЦенаАТТ КАК ЦенаАТТ,
		|			ВложенныйЗапрос.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|			ВложенныйЗапрос.ЦенаВВалютеИзРегистра КАК ЦенаБазовая,
		|			ВложенныйЗапрос.СпособРасчетаЦены КАК СпособРасчетаЦены,
		|			ВЫБОР
		|				КОГДА &ТипЦенРасчитывается
		|						И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|						И &ВалютаБазовойЦены <> ВложенныйЗапрос.ВалютаЦеныИзРегистра
							//В качестве валюты цены берем валюту валюту базового типа цен (для поиска цены в диапазоне).
							//
		|					ТОГДА &ВалютаБазовойЦены
		|				ИНАЧЕ ВложенныйЗапрос.ВалютаЦеныИзРегистра
		|			КОНЕЦ КАК ВалютаЦены,
		|			ВЫБОР
		|				КОГДА &ТипЦенРасчитывается
		|						И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|						И &ВалютаБазовойЦены <> ВложенныйЗапрос.ВалютаЦеныИзРегистра
							//Пересчитываем цену в валюту базового типа цен (для поиска цены в диапазоне).
							//
		|					ТОГДА ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеИзРегистра, 0) * (КурсыВалютБазовойЦеныИзрегистра.Курс / КурсыВалютБазовойЦеныИзрегистра.Кратность) / (КурсВалютыБазовойЦены.Курс / КурсВалютыБазовойЦены.Кратность)
		|				ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеИзРегистра, 0)
		|			КОНЕЦ * ВЫБОР
		|				КОГДА &ТипЦенРасчитывается
		|						И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип)
							//Пересчитываем цену по проценту в случае расчетного типа цен.
							//
		|					ТОГДА 1 + ЕСТЬNULL(ВложенныйЗапрос.ПроцентСкидкиНаценки, 0) / 100
		|				ИНАЧЕ 1
		|			КОНЕЦ КАК ЦенаВВалютеЦены
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СписокНоменклатуры.Номенклатура КАК Номенклатура,
		|				СписокНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				ВЫБОР
		|					КОГДА (НЕ ЦеныАТТ.Цена ЕСТЬ NULL ) 
							// Цена АТТ по номенклатуре и характеристике.
		|						ТОГДА ЦеныАТТ.Цена
		|					КОГДА (НЕ ЦеныАТТБезХарактеристик.Цена ЕСТЬ NULL )
							// Цена АТТ по номенклатуре и пустой характеристике.
		|						ТОГДА ЦеныАТТБезХарактеристик.Цена
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЦенаАТТ,
		|				ВЫБОР
		|					КОГДА (НЕ ЦеныПоХарактеристикамБазовые.Цена ЕСТЬ NULL )
								// Цена Базовая по номенклатуре и характеристике.
		|						ТОГДА ЦеныПоХарактеристикамБазовые.Цена * ЦеныПоХарактеристикамБазовые.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЦеныПоХарактеристикамБазовые.ЕдиницаИзмерения.Коэффициент
		|					КОГДА (НЕ ЦеныБезХарактеристикБазовые.Цена ЕСТЬ NULL )
								// Цена Базовая по номенклатуре и пустой характеристике.
		|						ТОГДА ЦеныБезХарактеристикБазовые.Цена * ЦеныБезХарактеристикБазовые.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЦеныБезХарактеристикБазовые.ЕдиницаИзмерения.Коэффициент
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЦенаВВалютеИзРегистра,
		|				ВЫБОР
		|					КОГДА &ТипЦенРасчитывается
		|						ТОГДА ЕСТЬNULL(ЦеныПоХарактеристикам.ПроцентСкидкиНаценки, &ТипЦенПроцентСкидкиНаценки)
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ПроцентСкидкиНаценки,
		|				ЕСТЬNULL(ЦеныПоХарактеристикамБазовые.Валюта, ЕСТЬNULL(ЦеныБезХарактеристикБазовые.Валюта, &ВалютаБазовойЦены)) КАК ВалютаЦеныИзРегистра,
		|				ВЫБОР
		|					КОГДА &ТипЦенРасчитывается
		|						ТОГДА ЕСТЬNULL(ЦеныПоХарактеристикам.СпособРасчетаЦены, &СпособРасчетаЦеныИзТипаЦены)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПустаяСсылка)
		|				КОНЕЦ КАК СпособРасчетаЦены
		|			ИЗ
						// Получаем полный перечень товаров по характеристикам.
						//
		|				(ВЫБРАТЬ
		|					СпрХарактеристики.Владелец КАК Номенклатура,
		|					СпрХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|				ИЗ
		|					Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|				ГДЕ
		|					СпрХарактеристики.Владелец В
		|							(ВЫБРАТЬ
		|								Т.Номенклатура
		|							ИЗ
		|								ВТНоменклатураАТТ КАК Т)
		|				{ГДЕ
		|					СпрХарактеристики.Владелец.* КАК Номенклатура}
		|				
		|				ОБЪЕДИНИТЬ
		|				
		|				ВЫБРАТЬ
		|					СпрНоменклатура.Ссылка,
		|					ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				ИЗ
		|					Справочник.Номенклатура КАК СпрНоменклатура
		|				ГДЕ
		|					СпрНоменклатура.ЭтоГруппа = ЛОЖЬ
		|					И СпрНоменклатура.Ссылка В
		|							(ВЫБРАТЬ
		|								Т.Номенклатура
		|							ИЗ
		|								ВТНоменклатураАТТ КАК Т)
		|				{ГДЕ
		|					СпрНоменклатура.Ссылка.* КАК Номенклатура}) КАК СписокНоменклатуры
							// Соединение для получения цен АТТ по номенклатуре и характеристике.
							//
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныАТТ КАК ЦеныАТТ
		|					ПО  (ЦеныАТТ.Номенклатура = СписокНоменклатуры.Номенклатура)
		|						И ( ЦеныАТТ.ХарактеристикаНоменклатуры =СписокНоменклатуры.ХарактеристикаНоменклатуры )
							// Соединение для получения цен АТТ по номенклатуре и пустой характеристике.
							//
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныАТТ КАК ЦеныАТТБезХарактеристик
		|					ПО СписокНоменклатуры.Номенклатура = ЦеныАТТБезХарактеристик.Номенклатура
		|						И (ЦеныАТТБезХарактеристик.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|						И (ЦеныАТТ.Цена ЕСТЬ NULL)
							// Соединение для получения скидки-наценки и т.п. для расчетного типа цен по номенклатуре и характеристике.
							//
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныНоменклатурыПоХарактеристикам КАК ЦеныПоХарактеристикам
		|					ПО СписокНоменклатуры.Номенклатура = ЦеныПоХарактеристикам.Номенклатура
		|						И СписокНоменклатуры.ХарактеристикаНоменклатуры = ЦеныПоХарактеристикам.ХарактеристикаНоменклатуры
		|						И (ЦеныПоХарактеристикам.ТипЦен = &ТипЦен)
		|					И (ВЫБОР
		|						КОГДА &ТипЦенРасчитывается
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ)
							// Соединение для получения базовых цен номенклатуры по номенклатуре и характеристике.
							//
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныНоменклатурыПоХарактеристикам КАК ЦеныПоХарактеристикамБазовые
		|					ПО СписокНоменклатуры.Номенклатура = ЦеныПоХарактеристикамБазовые.Номенклатура
		|						И СписокНоменклатуры.ХарактеристикаНоменклатуры = ЦеныПоХарактеристикамБазовые.ХарактеристикаНоменклатуры
		|						И (ЦеныПоХарактеристикамБазовые.ТипЦен = &ТипЦенБазовый)
							// Соединение для получения базовых цен номенклатуры по номенклатуре и пустой характеристике.
							//
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныНоменклатурыПоХарактеристикам КАК ЦеныБезХарактеристикБазовые
		|					ПО СписокНоменклатуры.Номенклатура = ЦеныБезХарактеристикБазовые.Номенклатура
		|						И (ЦеныБезХарактеристикБазовые.ТипЦен = &ТипЦенБазовый)
		|						И (ЦеныПоХарактеристикамБазовые.Цена ЕСТЬ NULL)
		|						И (ЦеныБезХарактеристикБазовые.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка))) КАК ВложенныйЗапрос
						// Соединение для получения курса валюты, в которой указана базовая цена (только для расчетных типов цен).
						//
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсыВалютБазовойЦеныИзрегистра
		|				ПО ВложенныйЗапрос.ВалютаЦеныИзРегистра = КурсыВалютБазовойЦеныИзрегистра.Валюта
		|					И (ВЫБОР
		|						КОГДА &ТипЦенРасчитывается
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ)
		|					И (ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон))
						// Соединение для получения курса базовой валюты-выбранной в типе цен базовой валюты (только для расчетных типов цен).
						//
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, Валюта = &ВалютаБазовойЦены) КАК КурсВалютыБазовойЦены
		|				ПО (ВЫБОР
		|						КОГДА &ТипЦенРасчитывается
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ)
		|					И (ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон))) КАК Цены
					// Соединение для получения диапазона цены в случае расчетного типа цен.
					//
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтШкалыДиапазонов КАК ШкалыДиапазонов
		|			ПО Цены.ЦенаВВалютеЦены < ШкалыДиапазонов.ВерхняяГраница
		|				И (ВЫБОР
		|					КОГДА &ТипЦенРасчитывается
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)
		|				И (ЕСТЬNULL(Цены.ЦенаВВалютеЦены, 0) > 0)
		|				И (Цены.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Цены.Номенклатура,
		|		Цены.ХарактеристикаНоменклатуры) КАК ВложенныйЗапрос
				// Соединение для получения цены из диапазона.
				//
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтШкалыДиапазонов КАК ШкалыДиапазонов
		|		ПО ВложенныйЗапрос.ВерхняяГраница = ШкалыДиапазонов.ВерхняяГраница
		|			И (ВЫБОР
		|				КОГДА &ТипЦенРасчитывается
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|			И (ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон))
				// Соединение для получения курса валюты цены.
				//
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКон, ) КАК КурсВалютыЦены
		|		ПО (ВЫБОР
		|				КОГДА &ТипЦенРасчитывается
		|						И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|					ТОГДА ШкалыДиапазонов.Валюта
		|				ИНАЧЕ ВложенныйЗапрос.ВалютаЦены
		|			КОНЕЦ = КурсВалютыЦены.Валюта)
		|ГДЕ
		|	((ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА &ТипЦенРасчитывается
		|							И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|						ТОГДА ШкалыДиапазонов.Цена
		|					ИНАЧЕ ВложенныйЗапрос.ЦенаВВалютеЦены
		|				КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность) КАК ЧИСЛО(15, 2))) <> 0
		|			ИЛИ ВложенныйЗапрос.ЦенаАТТ <> 0)
		|{ГДЕ
		|	ВложенныйЗапрос.ЦенаАТТ,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &ТипЦенРасчитывается
		|					И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|				ТОГДА ЕСТЬNULL(ШкалыДиапазонов.Цена, 0)
		|			ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеЦены, 0)
		|		КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность) КАК ЧИСЛО(15, 2)) Как ЦенаВВалютеРегл,
		|	(ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) - ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА &ТипЦенРасчитывается
		|							И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|						ТОГДА ШкалыДиапазонов.Цена
		|					ИНАЧЕ ВложенныйЗапрос.ЦенаВВалютеЦены
		|				КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность) КАК ЧИСЛО(15, 2)), 0)) КАК Разница,

		|	ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) <> 0
		|						И ВЫБОР
		|							КОГДА &ТипЦенРасчитывается
		|									И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|								ТОГДА ЕСТЬNULL(ШкалыДиапазонов.Цена, 0)
		|							ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеЦены, 0)
		|						КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность) <> 0
		|					ТОГДА (ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) - ВЫБОР
		|							КОГДА &ТипЦенРасчитывается
		|									И ВложенныйЗапрос.СпособРасчетаЦены = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон)
		|								ТОГДА ЕСТЬNULL(ШкалыДиапазонов.Цена, 0)
		|							ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ЦенаВВалютеЦены, 0)
		|						КОНЕЦ * (КурсВалютыЦены.Курс / КурсВалютыЦены.Кратность)) / ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0)
						//Ситуация, когда цена АТТ не ноль, а цена по типу цен - ноль.
		|				КОГДА ЕСТЬNULL(ВложенныйЗапрос.ЦенаАТТ, 0) <> 0
		|					ТОГДА 1
						//Ситуация, когда цена АТТ ноль, а цена по типц цен отлична от ноля.
		|				ИНАЧЕ -1
		|			КОНЕЦ * 100 КАК ЧИСЛО(15, 2)) Как РазницаВПроцентах }

		|{УПОРЯДОЧИТЬ ПО
		|	Номенклатура.*,
		|	ХарактеристикаНоменклатуры.*,
		|	ЦенаАТТ,
		|	РазницаВПроцентах,
		|	Разница}

		|ИТОГИ
		|	МАКСИМУМ(ЦенаАТТ),
		|	МАКСИМУМ(ЦенаВВалютеРегл),
		|	МАКСИМУМ(Разница),
		|	МАКСИМУМ(РазницаВПроцентах)
		|ПО
		|	ОБЩИЕ
		|{ИТОГИ ПО
		|	Номенклатура.*}";
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;

	// Представления полей отчета.
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Склад",                      "Склад");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Номенклатура",               "Номенклатура");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры");	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦенаВВалютеРегл",            "Цена в типе цен розн. торговли");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦенаАТТ",                    "Цена АТТ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Разница",                    "Расхождение " + Строка(мВалютаРегламентированногоУчета));
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("РазницаВПроцентах",          "Расхождение %");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);

	// Добавление предопределенных группировок строк отчета.
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();

	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");

	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);

	// Добавление предопределенных отборов отчета.

	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");

	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);

	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);

	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);

	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();

	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств             = Ложь;
	УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	УниверсальныйОтчет.ВыводитьОбщиеИтоги                        = Ложь;
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи                   = Истина;

	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ХарактеристикаНоменклатуры");

КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт

	Если Не ЗначениеЗаполнено(Склад) Тогда
		Сообщить("Отчет может быть сформирован только при выбранном складе.", СтатусСообщения.Важное);
		Возврат;
	ИначеЕсли Склад.ВидСклада <> Перечисления.ВидыСкладов.Розничный Тогда
		Сообщить("Отчет может быть сформирован только для розничного склада.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаРеглУчета",   мВалютаРегламентированногоУчета);

	Если Склад.ТипЦенРозничнойТорговли.Рассчитывается Тогда 

		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаБазовойЦены",           Склад.ТипЦенРозничнойТорговли.БазовыйТипЦен.ВалютаЦены);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаЦены",                  Склад.ТипЦенРозничнойТорговли.ВалютаЦены);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦен",                      Склад.ТипЦенРозничнойТорговли);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенБазовый",               Склад.ТипЦенРозничнойТорговли.БазовыйТипЦен);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенДляСпискаНоменклатуры", Склад.ТипЦенРозничнойТорговли.БазовыйТипЦен);
	Иначе
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаБазовойЦены",           Склад.ТипЦенРозничнойТорговли.ВалютаЦены);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВалютаЦены",                  Склад.ТипЦенРозничнойТорговли.ВалютаЦены);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦен",                      Склад.ТипЦенРозничнойТорговли);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенБазовый",               Склад.ТипЦенРозничнойТорговли);
		УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенДляСпискаНоменклатуры", Склад.ТипЦенРозничнойТорговли);
	КонецЕсли;

	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("СпособРасчетаЦеныИзТипаЦены", Склад.ТипЦенРозничнойТорговли.СпособРасчетаЦены);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенПроцентСкидкиНаценки",  Склад.ТипЦенРозничнойТорговли.ПроцентСкидкиНаценки);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТипЦенРасчитывается",         Склад.ТипЦенРозничнойТорговли.Рассчитывается);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("Склад", Склад);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	УправлениеОтчетами.ВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

УниверсальныйОтчет.мРежимВводаПериода = 1;

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

#КонецЕсли
