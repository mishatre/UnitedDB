#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// РАБОЧЕЕ МЕСТО МЕНЕДЖЕРА ПО ПРОДАЖАМ

// Процедура обрабатывает событие проверки перетаскивания
// номенклатуры в заказ покупателя.
//
Процедура ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИмяТЧ) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	Если ((ИмяТЧ = "Товары" ИЛИ ИмяТЧ = "ВозвратнаяТара") И ПараметрыПеретаскивания.Значение.Номенклатура.Услуга)
	 ИЛИ (ИмяТЧ = "Услуги" И НЕ ПараметрыПеретаскивания.Значение.Номенклатура.Услуга) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПроверкаПеретаскиванияВЗаказ()

// Процедура добавляет новую строку в ТЧ переденного имя.
//
Процедура ДобавитьСтрокуВТабличнуюЧастьДокумента(СтруктураДанныхДобавления, ИмяТЧ, ЭтотОбъект, ЭтаФорма) Экспорт
	
	Перем Номенклатура, Характеристика;
	
	// Спросим про добавляемое количество
	КоличествоДобавления = 1;
	Если НЕ ВвестиЧисло(КоличествоДобавления, "Введите количество", 15, 3) Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоДобавления = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхДобавления.Свойство("Номенклатура"  , Номенклатура);
	
	Если Номенклатура.Набор Тогда
		СтруктураДанныхДобавления.Свойство("Характеристика", Характеристика);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура"              , Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Характеристика);
		Запрос.УстановитьПараметр("Количество"                , КоличествоДобавления);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КомплектующиеНоменклатуры.Комплектующая               КАК НоменклатураКомпл,
		|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей КАК ХарактеристикаКомпл,
		|	(КомплектующиеНоменклатуры.Количество * &Количество)  КАК КоличествоКомпл,
		|	КомплектующиеНоменклатуры.ЕдиницаИзмерения            КАК ЕдиницаИзмеренияКомпл
		|ИЗ
		|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|ГДЕ
		|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура И
		|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураДанныхДобавления.Вставить("Номенклатура"    , Выборка.НоменклатураКомпл);
			СтруктураДанныхДобавления.Вставить("Характеристика"  , Выборка.ХарактеристикаКомпл);
			СтруктураДанныхДобавления.Вставить("Количество"      , Выборка.КоличествоКомпл);
			СтруктураДанныхДобавления.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмеренияКомпл);
			ЭтаФорма.ОбработкаПодбора(ЭтотОбъект[ИмяТЧ], СтруктураДанныхДобавления);
			
		КонецЦикла;
		
	Иначе
		СтруктураДанныхДобавления.Вставить("Количество", КоличествоДобавления);
		ЭтаФорма.ОбработкаПодбора(ЭтотОбъект[ИмяТЧ], СтруктураДанныхДобавления);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВТабличнуюЧастьДокумента()

// Процедура обрабатывает событие перетаскивания
// номенклатуры в заказ покупателя.
//
Процедура ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ИмяТЧ, ЭтотОбъект, ЭтаФорма) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	Если ((ИмяТЧ = "Товары" ИЛИ ИмяТЧ = "ВозвратнаяТара") И ПараметрыПеретаскивания.Значение.Номенклатура.Услуга)
	 ИЛИ (ИмяТЧ = "Услуги" И НЕ ПараметрыПеретаскивания.Значение.Номенклатура.Услуга) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокуВТабличнуюЧастьДокумента(ПараметрыПеретаскивания.Значение, ИмяТЧ, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПеретаскиваниеВЗаказ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура РегистрироватьНовогоКонтрагента(Элемент, Текст, Значение, СтандартнаяОбработка, мТайпингКонтрагента, мТекстТайпингаКонтрагента, мПоследнееЗначениеЭлементаТайпингаКонтрагент, ЭтаФорма, Контрагент, КонтактноеЛицо, Модифицированность, ДанныеНезарегистрированногоКонтрагента) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.Значение) <> Тип("Строка") Тогда
	
		ТекстВопроса = "Контрагент не найден. Зарегистрировать данные нового контрагента?";
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				мТайпингКонтрагента = Истина;
				мТекстТайпингаКонтрагента = Текст;
			Иначе
				Значение = мПоследнееЗначениеЭлементаТайпингаКонтрагент;
			КонецЕсли; 
			Возврат;
		КонецЕсли;
		
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		ФормаРегистрацииНовогоКонтрагента = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма);
		
		ФормаРегистрацииНовогоКонтрагента.ЗаполнитьНачальныеДанные();
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента       = Текст;
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагентаПолное = Текст;
		Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
			ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = КонтактноеЛицо;
		КонецЕсли; 
		
		РезультатЗакрытияФормы = ФормаРегистрацииНовогоКонтрагента.ОткрытьМодально();
		
		Если РезультатЗакрытияФормы = Неопределено Тогда
			Значение       = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
		Иначе
			Значение = Контрагент;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		Значение = Текст;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура перехватывает событие начала выбора контактного лица контрагента
//
// Параметры
//  Элемент - элемент управления, выбора контактного лица контрагента
//  СтандартнаяОбработка - булево
//  СтандартнаяОбработка - булево
//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
//
Процедура НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.КонтактныеЛицаКонтрагентов.ПолучитьФормуВыбора(,Элемент);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) И ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Заголовок = "Выбор контактного лица контрагента";
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура открывает форму списка справочника контактные лица,
//с признаком контактные лица контрагентов
///
Процедура ОткрытьСписокКонтактныхЛицКонтрагентов() Экспорт

	ФормаСписка = Справочники.КонтактныеЛицаКонтрагентов.ПолучитьФормуСписка(,, "КонтактныеЛицаКонтрагентов");
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Активизировать();
		Возврат;
	КонецЕсли; 
	
	ФормаСписка.Открыть();

КонецПроцедуры

// Процедура открывает форму списка справочника контактные лица,
//с признаком контактные лица контрагентов
///
Процедура ОткрытьСписокПрочихКонтактныхЛиц() Экспорт

	ФормаСписка = Справочники.КонтактныеЛица.ПолучитьФормуСписка(,, "ПрочиеКонтактныеЛица");
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Активизировать();
		Возврат;
	КонецЕсли;
	
	ФормаСписка.Открыть();

КонецПроцедуры

// Процедура открывает форму списка справочника контактные лица,
//с признаком личные контакты
///
Процедура ОткрытьСписокЛичныхКонтактов() Экспорт

	ФормаСписка = Справочники.ЛичныеКонтакты.ПолучитьФормуСписка(,, "ЛичныеКонтакты");
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.Активизировать();
		Возврат;
	КонецЕсли;
	
	ФормаСписка.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ НАПОМИНАНИЙ

// Функция Определяет картинку дял напоминания
//
// Параметры
//  Напоминание - Произвольный, объект напоминания
//  ТипСобытия  - тип события, если не указан - определяется по напоминанию
//
// Возвращаемое значение:
//  Картинка - Картинка
//
Функция ПолучитьКартинкуНапоминания(Напоминание,ТипСобытия = Неопределено) Экспорт
		
	ИндексВозврата = ОпределитьИндексКартинкиВидаСобытия(Напоминание,ТипСобытия);
		
	Если ИндексВозврата = 15 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаИсходящая;
		
	ИначеЕсли ИндексВозврата = 10 Тогда
		Возврат БиблиотекаКартинок.ЛичнаяВстречаВходящая;
		
	ИначеЕсли ИндексВозврата = 17 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 12 Тогда
		Возврат БиблиотекаКартинок.ПочтовоеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 13 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеИсходящее;
		
	ИначеЕсли ИндексВозврата = 8 Тогда
		Возврат БиблиотекаКартинок.ПрочееСобытиеВходящее;
		
	ИначеЕсли ИндексВозврата = 14 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокИсходящий;
		
	ИначеЕсли ИндексВозврата = 9 Тогда
		Возврат БиблиотекаКартинок.ТелефонныйЗвонокВходящий;
		
	ИначеЕсли ИндексВозврата = 16 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоИсходящее;
		
	ИначеЕсли ИндексВозврата = 11 Тогда
		Возврат БиблиотекаКартинок.ЭлектронноеПисьмоВходящее;
		
	ИначеЕсли ИндексВозврата = 21 Тогда
		Возврат Новый Картинка;
		
	Иначе
		Возврат БиблиотекаКартинок.Важно;
		
	КонецЕсли; 
	
КонецФункции //ПолучитьКартинкуНапоминания()

// Процедура вызывается по событию НачалоВыбораИзСписка
// у полей ввода, в которых редактируются даты со временем.
// 
//  Параметры
//   ЭлементУправления - ПолеВвода, в котором редактируется значение даты
//   ЭтаФорма - Форма
//   Пользователь - СправочникСсылка.Пользователи
//   СтандартнаяОбработка - булево
//   ПолныйГод - Булево, предсавление года даты в списке выбора
//
Процедура ВыбратьВремяИзСписка(ЭлементУправления, ЭтаФорма, Пользователь, СтандартнаяОбработка, ПолныйГод = Истина) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭлементУправления.Значение) Тогда
		ДатаВремени = ЭлементУправления.Значение;
	Иначе
		ДатаВремени = ТекущаяДата();
	КонецЕсли;
	
	СтруктураРабочихВремен = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремени)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремени)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;

	НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
	а = 0;
	Пока Истина Цикл
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
		Если НачалоЧаса(ВремяСписка) >= НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремени);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ЭлементУправления.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет Задачи.
//
Процедура ПроверитьНапоминанияПользователя(ВыбПользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю(&ТекПользователь, 
		|		Выполнена = ЛОЖЬ И Оповещение = ИСТИНА И СрокОповещения < &ДатаСреза)
		|";
		
	Запрос.УстановитьПараметр("ТекПользователь", ВыбПользователь);
	Запрос.УстановитьПараметр("ДатаСреза"      , ТекущаяДата());
	
	ФормаОповещения = глЗначениеПеременной("ФормаОповещенияОЗадачах");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Если НЕ ФормаОповещенияЗадачОткрыта Тогда
			
			ФормаОповещения.Открыть();
			ФормаОповещенияЗадачОткрыта = Истина;
			
		КонецЕсли;
		
		ВыгрузкаДляСверки = РезультатЗапроса.Выгрузить();
		ФормаОповещения.АктивизироватьФорму(ВыгрузкаДляСверки);
		
	Иначе
		
		Если ФормаОповещения.Открыта() Тогда
			ФормаОповещения.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНапоминанияПользователя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОПОЛНИТЕЛЬНЫХ УСЛОВИЙ ПО ДОГОВОРАМ ВЗАИМОРАСЧЕТОВ

// Процедура формирует отчет для анализа условий поставок по договорам взаиморасчетов
//
// Параметры:
//  Ссылка - ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов
//
Процедура СформироватьАнализУсловийДоговораВзаиморасчетов(ТекущийПользователь, Ссылка) Экспорт

	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты.ВыполнениеУсловийПоДоговорамКонтрагентов.Создать();
	Отчет.ДатаНачала                           = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяДатаНачалаОтчетов");
	Отчет.ДатаОкончания                        = ТекущаяДата();
	Отчет.ГруппировкаКонтрагент                = Истина;
	Отчет.ГруппировкаДоговорКонтрагента        = Истина;
	Отчет.ГруппировкаДокументУсловий           = Истина;
	Отчет.ГруппировкаДокументВыполненияУсловий = Истина;
	Отчет.РаскрашиватьГруппировки              = Истина;
	
	ЭлементОтбора = Отчет.Отбор.Добавить("ДокументУсловий",, "Документ условий");
	ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	ЭлементОтбора.Значение      = Ссылка;
	ЭлементОтбора.Использование = Истина;
	
	ФормаОтчета = Отчет.ПолучитьФорму("Форма");
	
	ФормаОтчета.НеЗаполнятьНастройкиПриОткрытии = Истина;
	
	Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ТабличныйДокумент);
	
	ФормаОтчета.Открыть();

КонецПроцедуры

#КонецЕсли

// Функция содержит и возвращает значение условия задачи поздравления с ДР
//
Функция ПолучитьСтрокуУсловияДР() Экспорт
	
	Возврат "Поздравить с днём рождения";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ ДАННЫХ НЕЗАРЕГИСТРИРОВАННЫХ КОНТРАГЕНТОВ, БЕЗ ДОБАВЛЕНИЯ В СПРАВОЧНИК

Процедура ЗаписатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента, Отказ) Экспорт

	ДанныеНезарегистрированногоКонтрагента.ОбъектРегистратор = Ссылка;
	
	Попытка
		ДанныеНезарегистрированногоКонтрагента.Записать(Истина);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать данные контрагента.");
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ПрочитатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента) Экспорт

	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДанныеНезарегистрированногоКонтрагента.ОбъектРегистратор = Ссылка;
		ДанныеНезарегистрированногоКонтрагента.Прочитать();
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет реквизиты предопределенных элементов справочника ВидыКонтактнойИнформации
//  и заполняет константу шаблонов телефонов.
Процедура ЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации() Экспорт

	// Элементы справочника ВидыКонтактнойИнформации заполнились еще при переходе с 10.0.5 на 10.1.1

	Если ТипЗнч(Константы.ШаблоныТелефонныхНомеров.Получить().Получить()) <> Тип("Соответствие") Тогда
	
		ТаблицаСоответствий = Новый Соответствие;
		ТаблицаСоответствий.Вставить(7,"999-99-99");
		ТаблицаСоответствий.Вставить(6,"99-99-99");
		ТаблицаСоответствий.Вставить(5,"9-99-99");
		ТаблицаСоответствий.Вставить(4,"99-99");

		ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

		Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);
	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ СОБЫТИЙ И КАЛЕНДАРЕМ ПОЛЬЗОВАТЕЛЯ

// Функция возвращает 20 основных тем событий
//
Функция ПолучитьСписокОсновныхТем() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
	|	Событие.ОписаниеСобытия,
	|	КОЛИЧЕСТВО(Событие.Ссылка) КАК Количество
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ОписаниеСобытия <> &ПустаяСтрока
	|
	|СГРУППИРОВАТЬ ПО
	|	Событие.ОписаниеСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОписаниеСобытия");
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции

// Функция возвращает номер строки в поле табличного документа
//  для вывода События по его дате (начала или конца)
//
// Параметры
//  Часы - Строка, часы даты
//  Минуты - Строка, минуты даты
//  Дата - Дата, текущее значение даты для определения
//  Начало - Булево, признак начала или окончания периода
//  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
//
// Возвращаемое значение:
//   Число - номер строки в поле табличного документа
//
Функция ВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения) Экспорт
	
	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
	Иначе
		Часы = Число(Часы);
	КонецЕсли; 
	
	Если ПустаяСтрока(Минуты) Тогда
		Минуты = 0;
	Иначе
		Минуты = Число(Минуты);
	КонецЕсли; 
	
	Если Начало Тогда
		Если Дата < НачалоДня(ДатаСравнения) Тогда
			Возврат 1;
		Иначе
			Если Минуты < 30 Тогда
				Если Минуты = 0 Тогда
					Если Часы = 0 Тогда
						Возврат 1;
					Иначе
						Возврат (Часы * 2 + 1);
					КонецЕсли; 
				Иначе
					Возврат (Часы * 2 + 1);
				КонецЕсли; 
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если Дата > КонецДня(ДатаСравнения) Тогда
			Возврат 48;
		Иначе
			Если Минуты = 0 Тогда
				Если Часы = 0 Тогда
					Возврат 1;
				Иначе
					Возврат (Часы * 2);
				КонецЕсли; 
			ИначеЕсли Минуты <= 30 Тогда
				Возврат (Часы * 2 + 1);
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

// Функция Определяет индекс картинки
//
// Параметры
//  ВидСобытия - ПеречислениеСсылка.ВидыСобытий
//  ТипСобытия - ПеречислениеСсылка.ВходящееИсходящееСобытие
//
// Возвращаемое значение:
//  Индекс - число
//
Функция ОпределитьИндексКартинкиВидаСобытия(Объект,ТипСобытия = Неопределено) Экспорт

	Если ТипЗнч(Объект) = Тип("ДокументСсылка.Событие") Тогда
		ВидСобытия = Объект.ВидСобытия;
		ТипСобытия = Объект.ТипСобытия;
	Иначе
		ВидСобытия = Объект;
	КонецЕсли;
	
	Если ТипЗнч(ВидСобытия) = Тип("ПеречислениеСсылка.ВидыСобытий") Тогда
		
		Если ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 14;
			Иначе
				Возврат 9;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 15;
			Иначе
				Возврат 10;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 16;
			Иначе
				Возврат 11;
			КонецЕсли;
		ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 17;
			Иначе
				Возврат 12;
			КонецЕсли;
		Иначе
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				Возврат 13;
			Иначе
				Возврат 8;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Возврат 21;
	КонецЕсли;

КонецФункции // ОпределитьИндексКартинкиВидаСобытия()

// Процедура выполняется при проведении или отмене проведения документа Событие
//  и переписывает записи регитра сведений СобытияКалендаряПользователя.
Процедура РаспределитьСобытияДня(ДатаРаспределения, Пользователь) Экспорт

	Запрос = Новый Запрос;

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие КАК Событие,
	|	СобытияКалендаряПользователяОбобщенные.НомерНачальнойСтроки КАК НомерНачальнойСтроки,
	|	СобытияКалендаряПользователяОбобщенные.НомерКонечнойСтроки КАК НомерКонечнойСтроки
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Дата = &ВыбДата
	|	И
	|	СобытияКалендаряПользователяОбобщенные.Пользователь = &ВыбПользователь
	|";

	Запрос.УстановитьПараметр("ВыбДата", ДатаРаспределения);
	Запрос.УстановитьПараметр("ВыбПользователь", Пользователь);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	НомерСтрокиНачало = 0;
	НомерСтрокиКонец  = 0;
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
	
		КопияТаблицыЗапроса = ТаблицаЗапроса.Скопировать();

		КопияТаблицыЗапроса.Сортировать("НомерНачальнойСтроки ВОЗР");
		НомерСтрокиНачало = КопияТаблицыЗапроса[0].НомерНачальнойСтроки;
		
		КопияТаблицыЗапроса.Сортировать("НомерКонечнойСтроки УБЫВ");
		НомерСтрокиКонец = КопияТаблицыЗапроса[0].НомерКонечнойСтроки;
		
	КонецЕсли; 

	СписокЗначенийВремен = Новый СписокЗначений;
	
	Если НомерСтрокиНачало <> 0 И НомерСтрокиКонец <> 0 Тогда
		
		Для а=1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокЗначенийВремен.Добавить(НовыйСписок);
		КонецЦикла;
		
		Для а=НомерСтрокиНачало По НомерСтрокиКонец Цикл

			НовыйСписок = СписокЗначенийВремен[а-1].Значение;

			ИндексСтрокиТаблицы = 0;
			Пока Истина Цикл

				Если ИндексСтрокиТаблицы > ТаблицаЗапроса.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаЗапроса[ИндексСтрокиТаблицы];

				Если СтрокаТаблицы.НомерНачальнойСтроки <= а И СтрокаТаблицы.НомерКонечнойСтроки >= а Тогда
				
					ЕстьСвободноеМесто = Ложь;

					Для каждого ЭлементНовогоСписка Из НовыйСписок Цикл
					
						Если ЭлементНовогоСписка.Значение = Неопределено Тогда
						
							ЭлементНовогоСписка.Значение = СтрокаТаблицы.Событие;
							
							ЕстьСвободноеМесто = Истина;
							ИндексСписка = НовыйСписок.Индекс(ЭлементНовогоСписка);
							Прервать;
						
						КонецЕсли;
					
					КонецЦикла;

					Если НЕ ЕстьСвободноеМесто Тогда

						Если НовыйСписок.Количество() >= 18 Тогда
							Прервать;
						КонецЕсли; 
						
						ВновьВведенныйЭлемент = НовыйСписок.Добавить(СтрокаТаблицы.Событие);
						ИндексСписка = НовыйСписок.Индекс(ВновьВведенныйЭлемент);
					
					КонецЕсли;

					Если а <= СписокЗначенийВремен.Количество() Тогда
					
						ИндексТекущегоСписка = а - 1 + 1;
						Для б = а По СтрокаТаблицы.НомерКонечнойСтроки - 1 Цикл
						
							ТекущийСписок = СписокЗначенийВремен[б].Значение;

							Если ТекущийСписок.Количество() < (ИндексСписка + 1) Тогда
							
								Для с = (ТекущийСписок.Количество() + 1) По (ИндексСписка + 1) Цикл
								
									ТекущийСписок.Добавить(Неопределено);
								
								КонецЦикла;
							
							КонецЕсли;

							ТекущийСписок[ИндексСписка].Значение = СтрокаТаблицы.Событие;
						
						КонецЦикла; 
					
					КонецЕсли; 

					ТаблицаЗапроса.Удалить(СтрокаТаблицы);
					Продолжить;
					
				КонецЕсли;

				ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	

	// Очистим значения предидущего распределния
	НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователя.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
	НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
	НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
	НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
	НаборЗаписейРегистра.Прочитать();
	НаборЗаписейРегистра.Очистить();

	// Проведем распределение заново
	Для каждого СтрокаВремени Из СписокЗначенийВремен Цикл
	
		СписокТекущегоВремени = СтрокаВремени.Значение;

		Если ТипЗнч(СписокТекущегоВремени) = Тип("СписокЗначений") И СписокТекущегоВремени.Количество() > 0 Тогда
		
			Для каждого ЭлементДокумента Из СписокТекущегоВремени Цикл

				НоваяЗаписьРегистра = НаборЗаписейРегистра.Добавить();
				НоваяЗаписьРегистра.Событие = ЭлементДокумента.Значение;
				НоваяЗаписьРегистра.НомерСтрокиТаблицы = СписокЗначенийВремен.Индекс(СтрокаВремени) + 1;
				НоваяЗаписьРегистра.Дата = ДатаРаспределения;
				НоваяЗаписьРегистра.Пользователь = Пользователь;
				НоваяЗаписьРегистра.ПорядковыйНомерВДне = СписокТекущегоВремени.Индекс(ЭлементДокумента) + 1;
			
			КонецЦикла; 
		
		КонецЕсли; 
	
	КонецЦикла;

	НаборЗаписейРегистра.Записать();

	Если ТипЗнч(КопияТаблицыЗапроса) = Тип("ТаблицаЗначений") Тогда
	
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(КопияТаблицыЗапроса.ВыгрузитьКолонку("Событие"));

		Для каждого ДокументСписка Из СписокДокументов Цикл
		
			НаборЗаписейРегистра = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
			НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
			НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
			НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
			НаборЗаписейРегистра.Отбор.Событие.Значение           = ДокументСписка.Значение;
			НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
			НаборЗаписейРегистра.Прочитать();
			
			Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
				КоличествоДокументов = 0;
				Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
					ТекСписок = СписокЗначенийВремен[б].Значение;
					Если ТекСписок.Количество() > КоличествоДокументов Тогда
						КоличествоДокументов = ТекСписок.Количество();
					КонецЕсли; 
				КонецЦикла;
				ЗаписьРегистра.КоличествоОдновременныхДокументов = КоличествоДокументов;
			
			КонецЦикла;

			НаборЗаписейРегистра.Записать(Истина);
		
		КонецЦикла; 
	
	КонецЕсли; 

КонецПроцедуры

// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ОпределитьНачалоИОкончениеРабочегоДняПользователя() Экспорт

	ДатаНачала    = Константы.НачалоРабочегоДня.Получить();
	ДатаОкончания = Константы.ОкончаниеРабочегоДня.Получить();
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = '00010101235959';
	КонецЕсли; 
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	
КонецФункции // ОпределитьНачалоИОкончениеРабочегоДняПользователя()

//Функция определяет контактных лиц контрагента
//Параметры:
//Контрагент - СправочникСсылка.Контрагенты, по которому происходит отбор
//ВыбТипКЛ - Тип контактного лица
//Возвращается таблица значений с колонками
//КонтактноеЛицо, ДолжностьКЛ
Функция ОпределитьКонтактноеЛицоКонтрагента(Контрагент, ВыбТипКЛ = "") Экспорт
	
	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КЛ.Ссылка              КАК КонтактноеЛицо,
	|	КЛ.Должность           КАК ДолжностьКонтактногоЛица,
	|	КЛ.РольКонтактногоЛица КАК РольКонтактногоЛица
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КЛ
	|
	|ГДЕ
	|	КЛ.Владелец = &ВыбКонтрагент";

	Если ВыбТипКЛ <> "" Тогда
		Запрос.Текст = Запрос.Текст + " И КЛ.РольКонтактногоЛица = &ВыбТипКЛЗапроса";
		Запрос.УстановитьПараметр("ВыбТипКЛЗапроса", ВыбТипКЛ);
	КонецЕсли; 

	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	КонтактноеЛицо";

	Запрос.УстановитьПараметр("ВыбКонтрагент", Контрагент);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьКонтактноеЛицоКонтрагента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ОБЪМНО-КАЛЕНДАРНОГО ПЛАНИРОВАНИЯ ЗАКУПОК

// Функция формирует структуру с данными из объекта в принципе любого, но
//  писалась конкретно для документа ЗаказПоставщику
//
// Параметры
//  Объект - ДокументОбъект.ЗаказПоставщику, но в принципе может быть любой, объект, данные которого необходимо сохранить
//
// Возвращаемое значение:
//   Структура, с данными объекта
//
Функция СкопироватьДанныеОбъектаВСтруктуру(Объект) Экспорт

	СтруктураДанныхОбъекта = Новый Структура("___ИмяОбъекта___", Объект.Метаданные().Имя);
	
	Если Метаданные.Документы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(Объект))) Тогда
		
		СтруктураДанныхОбъекта.Вставить("Дата", Объект.Дата);
		СтруктураДанныхОбъекта.Вставить("Номер", Объект.Номер);
		
	КонецЕсли;
	
	Для каждого РеквизитОбъекта Из Объект.Метаданные().Реквизиты Цикл
		СтруктураДанныхОбъекта.Вставить(РеквизитОбъекта.Имя, Объект[РеквизитОбъекта.Имя]);
	КонецЦикла;
	
	Для каждого ТЧОбъекта Из Объект.Метаданные().ТабличныеЧасти Цикл
		СтруктураДанныхОбъекта.Вставить(ТЧОбъекта.Имя, Объект[ТЧОбъекта.Имя].Выгрузить());
	КонецЦикла;

	Возврат СтруктураДанныхОбъекта;
	
КонецФункции

// Функция заполняет объект данными из структуры
//
// Параметры
//  Объект - объект, который необходимо заполнить данными
//  СтруктураДанныхОбъекта - структура, с данными, которыми надо заполнить объект
//
// Возвращаемое значение:
//   Булево, успешно ли прошла данная операция
//
Функция ВосстановитьДанныеОбъектаИзСтруктуры(Объект, СтруктураДанныхОбъекта) Экспорт
	
	РезультатРаботы = Истина;
	
	ИмяОбъекта = "";
	Если НЕ СтруктураДанныхОбъекта.Свойство("___ИмяОбъекта___", ИмяОбъекта) Тогда
		РезультатРаботы = Ложь;
	КонецЕсли;
	
	Если ИмяОбъекта <> Объект.Метаданные().Имя Тогда
		РезультатРаботы = Ложь;
	КонецЕсли; 
	
	Если РезультатРаботы Тогда
	
		ЗначениеЭлементаСтруктуры = Неопределено;
		
		Если Метаданные.Документы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(Объект))) Тогда
			
			Объект.Дата = СтруктураДанныхОбъекта.Дата;
			Объект.Номер = СтруктураДанныхОбъекта.Номер;
			
		КонецЕсли;
		
		Для каждого РеквизитОбъекта Из Объект.Метаданные().Реквизиты Цикл
			
			Если НЕ СтруктураДанныхОбъекта.Свойство(РеквизитОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
				РезультатРаботы = Ложь;
				Продолжить;
			КонецЕсли;
			
			Попытка
				Объект[РеквизитОбъекта.Имя] = ЗначениеЭлементаСтруктуры;
			Исключение
				РезультатРаботы = Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		Для каждого ТЧОбъекта Из Объект.Метаданные().ТабличныеЧасти Цикл
			
			Если НЕ СтруктураДанныхОбъекта.Свойство(ТЧОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
				РезультатРаботы = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеЭлементаСтруктуры) <> Тип("ТаблицаЗначений") Тогда
				РезультатРаботы = Ложь;
				Продолжить;
			КонецЕсли; 
			
			Попытка
				Объект[ТЧОбъекта.Имя].Загрузить(ЗначениеЭлементаСтруктуры);
			Исключение
				РезультатРаботы = Ложь;
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЕсли; 
	
	Возврат РезультатРаботы;

КонецФункции

// Функция сравнивает данные из структуры с данными объекта, для определения их идентичности
//
// Параметры
//  Объект - Объект с данными для сравнения
//  СтруктураДанныхОбъекта - структура с данными для сравнения
//
// Возвращаемое значение:
//   Булево - идентичны ли данные объета и структуры
//
Функция СравнитьСтруктуруДанныхОбъектаИОбъект(Объект, СтруктураДанныхОбъекта) Экспорт

	ИмяОбъекта = "";
	Если НЕ СтруктураДанныхОбъекта.Свойство("___ИмяОбъекта___", ИмяОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяОбъекта <> Объект.Метаданные().Имя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеЭлементаСтруктуры = Неопределено;
	
	Для каждого РеквизитОбъекта Из Объект.Метаданные().Реквизиты Цикл
		
		Если НЕ СтруктураДанныхОбъекта.Свойство(РеквизитОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Попытка
			Если Объект[РеквизитОбъекта.Имя] <> ЗначениеЭлементаСтруктуры Тогда
				Возврат Ложь;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Для каждого ТЧОбъекта Из Объект.Метаданные().ТабличныеЧасти Цикл
		
		Если НЕ СтруктураДанныхОбъекта.Свойство(ТЧОбъекта.Имя, ЗначениеЭлементаСтруктуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеЭлементаСтруктуры) <> Тип("ТаблицаЗначений") Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если НЕ СравнитьТаблицыЗначений(Объект[ТЧОбъекта.Имя].Выгрузить(), ЗначениеЭлементаСтруктуры) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции // СравнитьСтруктуруОбъектаИОбъект()

// Функция сравнивает две таблицы значений на идентичность структуры и данных
//
// Параметры
//  ТаблицаЗначений1 - ТаблицаЗначений для сравнения
//  ТаблицаЗначений2 - ТаблицаЗначений для сравнения
//
// Возвращаемое значение:
//   Булево, идентичны или нет две таблицы
//
Функция СравнитьТаблицыЗначений(ТаблицаЗначений1, ТаблицаЗначений2)

	Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли; 

	Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
		
		Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
		
			Попытка
			
				Если СтрокаТаблицы[Колонка.Имя] <> ТаблицаЗначений2[ТаблицаЗначений1.Индекс(СтрокаТаблицы)][Колонка.Имя] Тогда
				
					Возврат Ложь;
				
				КонецЕсли;
			
			Исключение
				
				Возврат Ложь;
				
			КонецПопытки;
		
		КонецЦикла; 
	
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // СравнитьТаблицыЗначений()

// Функция производит распределние заказов поставщикам из таблицы ИсходнаяТаблицаНоменклатурыЗаказов
//  по строкам таблицы потребности в номенклатуре ИсходнаяТаблицаПотребности по дополнительному полю "Индекс"
//
// Параметры
//  ИсходнаяТаблицаПотребности - ТаблицаЗначений, таблица потребности в номенклатуре
//  ИсходнаяТаблицаНоменклатурыЗаказов - ТаблицаЗначений, таблица заказов поставщикам
//
// Возвращаемое значение:
//   Структура, ключ ТаблицаПотребности - исходная таблица потребности с дополнительным полем "Индекс" (число) , где
//                                        значения соответствуют строкам таблицы ТаблицаНоменклатурыЗаказов в поле "Индекс"
//            , ключ ТаблицаНоменклатурыЗаказов - исходная таблица закзов поставщикам с дополнительным полем "Индекс" (число) , где
//                                        значения соответствуют строкам таблицы ТаблицаПотребности в поле "Индекс"
//
Функция ПолучитьСтруктуруРаспределенныхТаблиц(ИсходнаяТаблицаПотребности, ИсходнаяТаблицаНоменклатурыЗаказов, МаксимальноеЗначениеПрогрессора = 0, ТекущееЗначениеПрогрессора = 0) Экспорт

	ТаблицаПотребности = ИсходнаяТаблицаПотребности.Скопировать();
	ТаблицаПотребности.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, Тара");
	ТаблицаНоменклатурыЗаказов = ИсходнаяТаблицаНоменклатурыЗаказов.Скопировать();
	ТаблицаНоменклатурыЗаказов.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, Тара");
	
	ТаблицаНоменклатурыЗаказов.Сортировать("Контрагент ВОЗР, ДатаПоступленияЗаказа УБЫВ");

	ТаблицаЗаказовПоставщикам = Новый ТаблицаЗначений;
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("Индекс", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0));
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("ЗаказПоставщику");
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаЗаказовПоставщикам.Колонки.Добавить("ИДОбъекта");

	Если ТаблицаПотребности.Колонки.Найти("Индекс") = Неопределено Тогда
		ТаблицаПотребности.Колонки.Добавить("Индекс", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,0));
	КонецЕсли; 
	Если ТаблицаПотребности.Колонки.Найти("КоличествоПланаОстаток") = Неопределено Тогда
		ТаблицаПотребности.Колонки.Добавить("КоличествоПланаОстаток", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли; 

	ТаблицаПотребности.Сортировать("Номенклатура ВОЗР, ХарактеристикаНоменклатуры ВОЗР, ДатаПотребности ВОЗР");

	МаксимальноеЗначениеПрогрессора = ТаблицаПотребности.Количество();
	Для каждого СтрокаПотребности Из ТаблицаПотребности Цикл
		ТекущееЗначениеПрогрессора = ТаблицаПотребности.Индекс(СтрокаПотребности) + 1;
		СтрокаПотребности.КоличествоПланаОстаток = СтрокаПотребности.КоличествоПлана;
		СтрокаПотребности.Индекс = ТаблицаПотребности.Индекс(СтрокаПотребности);
	КонецЦикла; 

	// Сначала распределим все заказы поставщикам, которые предназначены под конкретные заказы покупателей
	МаксимальноеЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Количество();
	Для каждого СтрокаТаблицыНоменклатурыЗаказов Из ТаблицаНоменклатурыЗаказов Цикл
		
		ТекущееЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Индекс(СтрокаТаблицыНоменклатурыЗаказов) + 1;
		
		Если СтрокаТаблицыНоменклатурыЗаказов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыНоменклатурыЗаказов.ЗаказПокупателя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЗаказПокупателя, Тара", СтрокаТаблицыНоменклатурыЗаказов.Номенклатура, СтрокаТаблицыНоменклатурыЗаказов.ХарактеристикаНоменклатуры, СтрокаТаблицыНоменклатурыЗаказов.ЗаказПокупателя, СтрокаТаблицыНоменклатурыЗаказов.Тара));
		Для каждого СтрокаТаблицыПотребности Из СтрокиТаблицыПотребности Цикл
			
			Если СтрокаТаблицыПотребности.КоличествоПланаОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыПотребности.КоличествоПланаОстаток <= СтрокаТаблицыНоменклатурыЗаказов.Количество Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаТаблицыПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицыПотребности.КоличествоПланаОстаток;
				Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаТаблицыНоменклатурыЗаказов.Количество = СтрокаТаблицыНоменклатурыЗаказов.Количество - СтрокаТаблицыПотребности.КоличествоПланаОстаток;
				СтрокаТаблицыПотребности.КоличествоПланаОстаток = 0;
				
			Иначе
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаТаблицыПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицыНоменклатурыЗаказов.Количество;
				Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаТаблицыПотребности.КоличествоПланаОстаток = СтрокаТаблицыПотребности.КоличествоПланаОстаток - СтрокаТаблицыНоменклатурыЗаказов.Количество;
				СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокиТаблицыПотребности.Количество() > 0 И СтрокаТаблицыНоменклатурыЗаказов.Количество > 0 Тогда
			
			НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
			НоваяСтрока.Индекс          = СтрокиТаблицыПотребности[0].Индекс;
			НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
			Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
				НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
			КонецЕсли; 
			НоваяСтрока.Количество      = СтрокаТаблицыНоменклатурыЗаказов.Количество;
			Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
				НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
			Иначе
				НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
			КонецЕсли; 
			
			СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
			
		Иначе
			
			СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
			
		КонецЕсли; 
			
	КонецЦикла;

	// После этого в таблице ТаблицаНоменклатурыЗаказов не осталост строк с заказами поставщикам, которым в соответствие
	// проставлены определенные заказы покупателей

	// Теперь удовлетворим оставшиеся потребности, у которых указаны заказы покупателей, теми заказами поставщикам, у которых
	// заказы покупателей не указаны (собственно только они и остались)
	МаксимальноеЗначениеПрогрессора = ТаблицаПотребности.Количество();
	Для каждого СтрокаПотребности Из ТаблицаПотребности Цикл
		
		ТекущееЗначениеПрогрессора = ТаблицаПотребности .Индекс(СтрокаПотребности) + 1;
		
		Если СтрокаПотребности.КоличествоПланаОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли; 
			
		СтрокиТаблицаНоменклатурыЗаказов = ТаблицаНоменклатурыЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаПотребности.Номенклатура, СтрокаПотребности.ХарактеристикаНоменклатуры, СтрокаПотребности.Тара));
		
		Для каждого СтрокаТаблицаНоменклатурыЗаказов Из СтрокиТаблицаНоменклатурыЗаказов Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицаНоменклатурыЗаказов.ЗаказПокупателя) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицаНоменклатурыЗаказов.ДатаПоступленияЗаказа > СтрокаПотребности.ДатаПотребности Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество >= СтрокаПотребности.КоличествоПланаОстаток Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаПотребности.КоличествоПланаОстаток;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаТаблицаНоменклатурыЗаказов.Количество = СтрокаТаблицаНоменклатурыЗаказов.Количество - СтрокаПотребности.КоличествоПланаОстаток;
				
				СтрокаПотребности.КоличествоПланаОстаток = 0;
				
			Иначе
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицаНоменклатурыЗаказов.Количество;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаПотребности.КоличествоПланаОстаток = СтрокаПотребности.КоличествоПланаОстаток - СтрокаТаблицаНоменклатурыЗаказов.Количество;
				
				СтрокаТаблицаНоменклатурыЗаказов.Количество = 0;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 

	// Теперь удовлетворим оставшиеся потребности у которых заказы покупателей не указаны
	МаксимальноеЗначениеПрогрессора = ТаблицаПотребности.Количество();
	Для каждого СтрокаПотребности Из ТаблицаПотребности Цикл
		
		ТекущееЗначениеПрогрессора = ТаблицаПотребности.Индекс(СтрокаПотребности) + 1;
		
		Если СтрокаПотребности.КоличествоПланаОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли; 
			
		СтрокиТаблицаНоменклатурыЗаказов = ТаблицаНоменклатурыЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаПотребности.Номенклатура, СтрокаПотребности.ХарактеристикаНоменклатуры, СтрокаПотребности.Тара));
		
		Для каждого СтрокаТаблицаНоменклатурыЗаказов Из СтрокиТаблицаНоменклатурыЗаказов Цикл
			
			Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПокупателя <> Неопределено Тогда
				Если НЕ СтрокаТаблицаНоменклатурыЗаказов.ЗаказПокупателя.Пустая() Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицаНоменклатурыЗаказов.ДатаПоступленияЗаказа > СтрокаПотребности.ДатаПотребности Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаТаблицаНоменклатурыЗаказов.Количество >= СтрокаПотребности.КоличествоПланаОстаток Тогда
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаПотребности.КоличествоПланаОстаток;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				СтрокаТаблицаНоменклатурыЗаказов.Количество = СтрокаТаблицаНоменклатурыЗаказов.Количество - СтрокаПотребности.КоличествоПланаОстаток;
				
				СтрокаПотребности.КоличествоПланаОстаток = 0;
				
			Иначе
				
				НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
				НоваяСтрока.Индекс          = СтрокаПотребности.Индекс;
				НоваяСтрока.ЗаказПоставщику = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику;
				Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
					НоваяСтрока.ИДОбъекта = СтрокаТаблицаНоменклатурыЗаказов.ИДОбъекта;
				КонецЕсли; 
				НоваяСтрока.Количество      = СтрокаТаблицаНоменклатурыЗаказов.Количество;
				Если СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.Контрагент;
				Иначе
					НоваяСтрока.Поставщик = СтрокаТаблицаНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
				КонецЕсли; 
				
				СтрокаПотребности.КоличествоПланаОстаток = СтрокаПотребности.КоличествоПланаОстаток - СтрокаТаблицаНоменклатурыЗаказов.Количество;
				
				СтрокаТаблицаНоменклатурыЗаказов.Количество = 0;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 

	// Если остались свободные остатки по заказам не вошедшие в планы потребности, запишем их новыми строками
	// в план потребности с пустыми ссылками кроме Номенклатуры, Характеристики номенклатуры, Заказа покупателя. Дата портебности - пустая.

	МаксимальноеЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Количество();
	Для каждого СтрокаТаблицыНоменклатурыЗаказов Из ТаблицаНоменклатурыЗаказов Цикл

		ТекущееЗначениеПрогрессора = ТаблицаНоменклатурыЗаказов.Индекс(СтрокаТаблицыНоменклатурыЗаказов) + 1;
		
		Если СтрокаТаблицыНоменклатурыЗаказов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности, Тара", СтрокаТаблицыНоменклатурыЗаказов.Номенклатура, СтрокаТаблицыНоменклатурыЗаказов.ХарактеристикаНоменклатуры, '00010101000000', СтрокаТаблицыНоменклатурыЗаказов.Тара));
		Если СтрокиТаблицыПотребности.Количество() > 0 Тогда
			СтрокаТаблицыПотребности = СтрокиТаблицыПотребности[0];
		Иначе
			СтрокаТаблицыПотребности = ТаблицаПотребности.Добавить();
			СтрокаТаблицыПотребности.Номенклатура = СтрокаТаблицыНоменклатурыЗаказов.Номенклатура;
			СтрокаТаблицыПотребности.ХарактеристикаНоменклатуры = СтрокаТаблицыНоменклатурыЗаказов.ХарактеристикаНоменклатуры;
			СтрокаТаблицыПотребности.ЗаказПокупателя = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПокупателя;
			СтрокаТаблицыПотребности.ДатаПотребности = '00010101000000';
			СтрокаТаблицыПотребности.Тара = СтрокаТаблицыНоменклатурыЗаказов.Тара;
			Если ТаблицаПотребности.Колонки.Найти("ОтветственныйЗаПокупки") <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицыНоменклатурыЗаказов.Номенклатура) Тогда
				СтрокаТаблицыПотребности.ОтветственныйЗаПокупки = СтрокаТаблицыНоменклатурыЗаказов.Номенклатура.ОтветственныйМенеджерЗаПокупки;
			КонецЕсли; 
			Попытка
				СтрокаТаблицыПотребности.Проект = Справочники.Проекты.ПустаяСсылка();
			Исключение
			КонецПопытки;
			СтрокаТаблицыПотребности.Индекс = ТаблицаПотребности.Индекс(СтрокаТаблицыПотребности);
			СтрокаТаблицыПотребности.КоличествоПлана = 0;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
		НоваяСтрока.Индекс          = СтрокаТаблицыПотребности.Индекс;
		НоваяСтрока.ЗаказПоставщику = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику;
		Если ТаблицаНоменклатурыЗаказов.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
			НоваяСтрока.ИДОбъекта = СтрокаТаблицыНоменклатурыЗаказов.ИДОбъекта;
		КонецЕсли; 
		НоваяСтрока.Количество      = СтрокаТаблицыНоменклатурыЗаказов.Количество;
		Если СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Пустая() И ТаблицаНоменклатурыЗаказов.Колонки.Найти("Контрагент") <> Неопределено Тогда
			НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.Контрагент;
		Иначе
			НоваяСтрока.Поставщик = СтрокаТаблицыНоменклатурыЗаказов.ЗаказПоставщику.Контрагент;
		КонецЕсли; 
		
		СтрокаТаблицыНоменклатурыЗаказов.Количество = 0;
		
	КонецЦикла; 

	Если ТаблицаЗаказовПоставщикам.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
		ТаблицаЗаказовПоставщикам.Свернуть("ЗаказПоставщику, ИДОбъекта, Индекс, Поставщик", "Количество");
	Иначе
		ТаблицаЗаказовПоставщикам.Свернуть("ЗаказПоставщику, Индекс, Поставщик", "Количество");
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаПотребности", ТаблицаПотребности);
	СтруктураВозврата.Вставить("ТаблицаЗаказовПоставщикам", ТаблицаЗаказовПоставщикам);

	Возврат СтруктураВозврата;
	
КонецФункции

// Функция формирует дерево значений, с распределенными заказами поставщикам под потребности в номенклатуре
//  для нужд производства и отдела продаж
//
// Параметры
//  ТаблицаСтрокГруппировки             - ТаблицаЗначений, таблица потребностей в номенклатуре
//  ТаблицаЗаказовПоставщикам           - ТаблицаЗначений, заказы поставщикам, которые необходимо распределить по потребностям
//  СтруктураЗначенийГруппировок        - Структура, содержащая значения группировок, которыми должн быть ограничен вывод строк,
//                                        точнее это своеобразный отбор по значениям группировок дерева
//  Группировки                         - ТаблицаЗначений, группировки дерева, точнее в каком порядке и какую информацию надо
//                                        отображать в основной колонке дерева
//  ПоказыватьПустыеСтрокиНижнихУровней - Булево, показывать ли в дереве строки, у которых все подчиненные строки содержат пустые значения
//
// Возвращаемое значение:
//   ДеревоЗначений
//
Функция ПолучитьДеревоРаспределенияПотребностей(ТаблицаСтрокГруппировки, ТаблицаЗаказовПоставщикам, СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора = 0, ТекущееЗначениеПрогрессора = 0) Экспорт

	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ЗначениеГруппировки");
	Дерево.Колонки.Добавить("КоличествоПлана", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	Дерево.Колонки.Добавить("КоличествоФакта", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
	Дерево.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Дерево.Колонки.Добавить("ИДОбъекта", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
	Дерево.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	
	МаксимальноеЗначениеПрогрессора = ТаблицаСтрокГруппировки.Количество();
	
	СформироватьСтрокиДерева(Дерево, ТаблицаСтрокГруппировки, ТаблицаЗаказовПоставщикам, 0, СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
	
	Возврат Дерево;

КонецФункции

// Процедура рекурсивно формирует строки дерева для функции ПолучитьДеревоРаспределенияПотребностей
//
// Параметры
//  СтрокаДереваПрошлогоУровня          - СтрокаДереваЗначений, строки подчиненные которой необходимо формировать
//  ТаблицаСтрокГруппировки             - ТаблицаЗначений, таблица потребностей в номенклатуре
//  ТаблицаЗаказовПоставщикам           - ТаблицаЗначений, заказы поставщикам, которые необходимо распределить по потребностям
//  ИндексГруппировки                   - Число, индекс группировки, строки для которой мы формируем
//  СтруктураЗначенийГруппировок        - Структура, содержащая значения группировок, которыми должн быть ограничен вывод строк,
//                                        точнее это своеобразный отбор по значениям группировок дерева
//  Группировки                         - ТаблицаЗначений, группировки дерева, точнее в каком порядке и какую информацию надо
//                                        отображать в основной колонке дерева
//  ПоказыватьПустыеСтрокиНижнихУровней - Булево, показывать ли в дереве строки, у которых все подчиненные строки содержат пустые значения
//
//
// Возвращаемое значение:
//   НЕТ
//
Процедура СформироватьСтрокиДерева(СтрокаДереваПрошлогоУровня, ТаблицаСтрокГруппировки, ТаблицаЗаказовПоставщикам, ИндексГруппировки, СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора)

	Если ИндексГруппировки > Группировки.Количество() - 1 Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаСтрокГруппировки.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, Тара");
	ТаблицаЗаказовПоставщикам.Индексы.Добавить("Индекс");
	
	Если ТаблицаСтрокГруппировки.Количество() <> МаксимальноеЗначениеПрогрессора И ИндексГруппировки = 1 Тогда
		ТекущееЗначениеПрогрессора = ТекущееЗначениеПрогрессора + ТаблицаСтрокГруппировки.Количество();
	КонецЕсли; 
	
	ИмяГруппировки = Группировки[ИндексГруппировки].Имя;
	
	Если ИмяГруппировки = "Поставщик" ИЛИ ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта" Тогда
		// Поля правой таблицы
		
		ЗначенияГруппировки = Неопределено;
		СтруктураЗначенийГруппировок.Свойство(ИмяГруппировки, ЗначенияГруппировки);
		Если ЗначенияГруппировки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСтрокДаннойГруппировки = ТаблицаСтрокГруппировки.Скопировать();
		ТаблицаСтрокДаннойГруппировки.Индексы.Добавить("Индекс");
		ТекущаяТаблицаЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.Скопировать();
		ТекущаяТаблицаЗаказовПоставщикам.Индексы.Добавить(ИмяГруппировки);
		ИндексСтроки = 0;
		Пока Истина Цикл
		
			Если ИндексСтроки > ТекущаяТаблицаЗаказовПоставщикам.Количество() - 1 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТекущейТаблицыЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам[ИндексСтроки];
			
			Если ТаблицаСтрокДаннойГруппировки.Найти(СтрокаТекущейТаблицыЗаказовПоставщикам.Индекс, "Индекс") = Неопределено Тогда
				ТекущаяТаблицаЗаказовПоставщикам.Удалить(СтрокаТекущейТаблицыЗаказовПоставщикам);
				Продолжить;
			КонецЕсли; 
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		Если ТекущаяТаблицаЗаказовПоставщикам.Количество() = 0 Тогда
			
			СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
			СтрокаДереваТекущегоУровня.ЗначениеГруппировки = "<...>";
			
			СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, ТаблицаСтрокДаннойГруппировки, ТекущаяТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
			
			Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
			КонецЕсли; 
			
			Если НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
				СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
			КонецЕсли; 
			
		Иначе
			
			// Сначала обработаем те строки левой таблицы, которых нет в правой
			
			КопияТаблицаСтрокДаннойГруппировки = ТаблицаСтрокДаннойГруппировки.Скопировать();
			ИндексСтроки = 0;
			Пока Истина Цикл
			
				Если ИндексСтроки > КопияТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаКопияТаблицаСтрокДаннойГруппировки = КопияТаблицаСтрокДаннойГруппировки[ИндексСтроки];
			
				Если ТаблицаЗаказовПоставщикам.Найти(СтрокаКопияТаблицаСтрокДаннойГруппировки.Индекс, "Индекс") <> Неопределено Тогда
					КопияТаблицаСтрокДаннойГруппировки.Удалить(СтрокаКопияТаблицаСтрокДаннойГруппировки);
					Продолжить;
				КонецЕсли; 
				
				ИндексСтроки = ИндексСтроки + 1;
			
			КонецЦикла;
			
			Если КопияТаблицаСтрокДаннойГруппировки.Количество() > 0 Тогда
			
				СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = "<...>";
				
				ТекущаяТаблицаЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.Скопировать();
				
				СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, КопияТаблицаСтрокДаннойГруппировки, ТекущаяТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
				
				Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
				КонецЕсли; 
			
				Если НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
					СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
				КонецЕсли; 
			
			КонецЕсли;
			
			Для каждого ЗначениеГруппировки Из ЗначенияГруппировки Цикл
				
				Если ТекущаяТаблицаЗаказовПоставщикам.Найти(ЗначениеГруппировки, ИмяГруппировки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокиТекущейТаблицыЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура(ИмяГруппировки, ЗначениеГруппировки));
				
				КопияТаблицаСтрокДаннойГруппировки = ТаблицаСтрокДаннойГруппировки.Скопировать();
			
				ИндексСтрокиКопии = 0;
				Пока Истина Цикл
					
					Если ИндексСтрокиКопии > КопияТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
						Прервать;
					КонецЕсли; 
					
					СтрокаКопии = КопияТаблицаСтрокДаннойГруппировки[ИндексСтрокиКопии];
					
					НайденаСтрокаПоИндексу = Ложь;
					Для каждого Строка Из СтрокиТекущейТаблицыЗаказовПоставщикам Цикл
						Если Строка.Индекс = СтрокаКопии.Индекс Тогда
							НайденаСтрокаПоИндексу = Истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					
					Если НайденаСтрокаПоИндексу = Ложь Тогда
						КопияТаблицаСтрокДаннойГруппировки.Удалить(СтрокаКопии);
						Продолжить;
					КонецЕсли;
					
					ИндексСтрокиКопии = ИндексСтрокиКопии + 1;
				
				КонецЦикла;
				
				КоличествоФакта = 0;
				КопияТаблицаЗаказовПоставщикам = ТекущаяТаблицаЗаказовПоставщикам.Скопировать();
				ИндексСтроки = 0;
				Пока Истина Цикл
					
					Если ИндексСтроки > КопияТаблицаЗаказовПоставщикам.Количество() - 1 Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаКопияТаблицаЗаказовПоставщикам = КопияТаблицаЗаказовПоставщикам[ИндексСтроки];
					
					Если СтрокаКопияТаблицаЗаказовПоставщикам[ИмяГруппировки] <> ЗначениеГруппировки Тогда
						КопияТаблицаЗаказовПоставщикам.Удалить(СтрокаКопияТаблицаЗаказовПоставщикам);
						Продолжить;
					КонецЕсли; 
					
					КоличествоФакта = КоличествоФакта + СтрокаКопияТаблицаЗаказовПоставщикам.Количество;
					
					ИндексСтроки = ИндексСтроки + 1;
					
				КонецЦикла; 
				
				Если (ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта") И КоличествоФакта <= 0 Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки;
				Если ИмяГруппировки = "ЗаказПоставщику" ИЛИ ИмяГруппировки = "ИДОбъекта" Тогда
					СтрокаДереваТекущегоУровня.КоличествоФакта = КоличествоФакта;
					СтрокаЗаказаПоставщику = ТекущаяТаблицаЗаказовПоставщикам.Найти(ЗначениеГруппировки, ИмяГруппировки);
					Если СтрокаЗаказаПоставщику <> Неопределено И ТекущаяТаблицаЗаказовПоставщикам.Колонки.Найти("ИДОбъекта") <> Неопределено Тогда
						СтрокаДереваТекущегоУровня.ИДОбъекта = СтрокаЗаказаПоставщику.ИДОбъекта;
					КонецЕсли; 
				КонецЕсли;
				
				СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, КопияТаблицаСтрокДаннойГруппировки, КопияТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
				
				Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
					СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
				КонецЕсли; 
				
				Если ИмяГруппировки = "Поставщик" И НЕ ПоказыватьПустыеСтрокиНижнихУровней И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
					СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
				КонецЕсли; 
			
			КонецЦикла;
			
		КонецЕсли; 
		
	Иначе
		// Поля левой таблицы
		
		ЗначенияГруппировки = Неопределено;
		СтруктураЗначенийГруппировок.Свойство(ИмяГруппировки, ЗначенияГруппировки);
		Если ЗначенияГруппировки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого ЗначениеГруппировки Из ЗначенияГруппировки Цикл
			
			ТекЗначениеГруппировки = ЗначениеГруппировки;
			
			Если ИмяГруппировки = "Номенклатура" Тогда
				Если ТаблицаСтрокГруппировки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", ТекЗначениеГруппировки.Номенклатура, ТекЗначениеГруппировки.ХарактеристикаНоменклатуры, ТекЗначениеГруппировки.Тара)).Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 
			Иначе
				Если ТаблицаСтрокГруппировки.Найти(ТекЗначениеГруппировки, ИмяГруппировки) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			СтрокаГруппировки = "";
			Если ИмяГруппировки = "Номенклатура" Тогда
				ТекЗначениеГруппировки = ЗначениеГруппировки.Номенклатура;
				ХарактеристикаНоменклатуры = ЗначениеГруппировки.ХарактеристикаНоменклатуры;
				Тара = ЗначениеГруппировки.Тара;
			Иначе
				СтрокаГруппировки = Строка(ЗначениеГруппировки);
			КонецЕсли;
			
			КоличествоПлана = 0;
			
			ТаблицаСтрокДаннойГруппировки = ТаблицаСтрокГруппировки.Скопировать();
			ИндексСтроки = 0;
			Пока Истина Цикл
			
				Если ИндексСтроки > ТаблицаСтрокДаннойГруппировки.Количество() - 1 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаТаблицы = ТаблицаСтрокДаннойГруппировки[ИндексСтроки];
				
				Если ИмяГруппировки = "Номенклатура" Тогда
					Если СтрокаТаблицы.Номенклатура <> ЗначениеГруппировки.Номенклатура ИЛИ СтрокаТаблицы.ХарактеристикаНоменклатуры <> ЗначениеГруппировки.ХарактеристикаНоменклатуры ИЛИ СтрокаТаблицы.Тара <> ЗначениеГруппировки.Тара Тогда
						ТаблицаСтрокДаннойГруппировки.Удалить(СтрокаТаблицы);
						Продолжить;
					КонецЕсли; 
				Иначе
					Если СтрокаТаблицы[ИмяГруппировки] <> ЗначениеГруппировки Тогда
						ТаблицаСтрокДаннойГруппировки.Удалить(СтрокаТаблицы);
						Продолжить;
					КонецЕсли; 
				КонецЕсли;
			
				КоличествоПлана = КоличествоПлана + СтрокаТаблицы.КоличествоПлана;
			
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
			
			СтрокаДереваТекущегоУровня = СтрокаДереваПрошлогоУровня.Строки.Добавить();
			Если ИмяГруппировки = "Номенклатура" Тогда
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки.Номенклатура;
				СтрокаДереваТекущегоУровня.ХарактеристикаНоменклатуры = ЗначениеГруппировки.ХарактеристикаНоменклатуры;
				СтрокаДереваТекущегоУровня.Тара = ЗначениеГруппировки.Тара;
			Иначе
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ?(ПустаяСтрока(СтрокаГруппировки), ЗначениеГруппировки, СтрокаГруппировки);
				СтрокаДереваТекущегоУровня.ЗначениеГруппировки = ЗначениеГруппировки;
			КонецЕсли; 
			СтрокаДереваТекущегоУровня.КоличествоПлана = КоличествоПлана;
			
			СформироватьСтрокиДерева(СтрокаДереваТекущегоУровня, ТаблицаСтрокДаннойГруппировки, ТаблицаЗаказовПоставщикам, (ИндексГруппировки + 1), СтруктураЗначенийГруппировок, Группировки, ПоказыватьПустыеСтрокиНижнихУровней, МаксимальноеЗначениеПрогрессора, ТекущееЗначениеПрогрессора);
		
			Если ТипЗнч(СтрокаДереваПрошлогоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаДереваПрошлогоУровня.КоличествоФакта = СтрокаДереваПрошлогоУровня.КоличествоФакта + СтрокаДереваТекущегоУровня.КоличествоФакта;
			КонецЕсли; 
			
			Если ТипЗнч(СтрокаДереваТекущегоУровня.ЗначениеГруппировки) = Тип("Дата") И СтрокаДереваТекущегоУровня.ЗначениеГруппировки = '00010101' И СтрокаДереваТекущегоУровня.Строки.Количество() = 0 Тогда
				СтрокаДереваПрошлогоУровня.Строки.Удалить(СтрокаДереваТекущегоУровня);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает таблицу значений, заполненную информацией о контрагентах контактного лица
// из регистра сведений "КонтактныеЛицаКонтрагентов"
Функция ВернутьТаблицуКонтрагентовКонтактногоЛица(Ссылка,ТолькоПустые = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИсторияКонтактныхЛицКонтрагентов.Контрагент КАК Контрагент,
	|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицоКонтрагента.Должность КАК Должность,
	|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицоКонтрагента.РольКонтактногоЛица КАК РольКонтактногоЛица,
	|	ИсторияКонтактныхЛицКонтрагентов.Период КАК Период,
	|   ИсторияКонтактныхЛицКонтрагентов.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	РегистрСведений.ИсторияКонтактныхЛицКонтрагентов КАК ИсторияКонтактныхЛицКонтрагентов
	|
	|ГДЕ
	|	ИсторияКонтактныхЛицКонтрагентов.КонтактноеЛицо = &КонтактноеЛицо";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо",Ссылка);
	
	Результаты = Запрос.Выполнить().Выгрузить();

	Возврат Результаты;
	
КонецФункции

// Функция возвращает интервалы напоминаний и представлениями.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция ПолучитьСписокИнтерваловНапоминания() Экспорт

	СписокИнтервалов = Новый СписокЗначений;
	СписокИнтервалов.Добавить(5*60,"5 мин.");
	СписокИнтервалов.Добавить(10*60,"10 мин.");
	СписокИнтервалов.Добавить(15*60,"15 мин.");
	СписокИнтервалов.Добавить(30*60,"30 мин.");
	СписокИнтервалов.Добавить(1*60*60,"1 час");
	СписокИнтервалов.Добавить(2*60*60,"2 часа");
	СписокИнтервалов.Добавить(4*60*60,"4 часа");
	СписокИнтервалов.Добавить(8*60*60,"8 часов");
	СписокИнтервалов.Добавить(1*24*60*60,"1 день");
	СписокИнтервалов.Добавить(2*24*60*60,"2 дня");
	СписокИнтервалов.Добавить(3*24*60*60,"3 дня");
	СписокИнтервалов.Добавить(4*24*60*60,"4 дня");
	СписокИнтервалов.Добавить(1*7*24*60*60,"1 неделя");
	Возврат СписокИнтервалов;

КонецФункции
