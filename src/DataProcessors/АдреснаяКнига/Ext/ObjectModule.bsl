
Перем мРазделительАдресов Экспорт;

// Процедура, обработчик события нажатие кнопки ОК командной панели формы.
//
Процедура Объект_КнопкаВыполнитьНажатие(Элемент, ЭтаФорма) Экспорт

	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Кому"        , Кому.Выгрузить());
	СтруктураВозврата.Вставить("Копии"       , Копии.Выгрузить());
	СтруктураВозврата.Вставить("СкрытыеКопии", СкрытыеКопии.Выгрузить());
	СтруктураВозврата.Вставить("Объекты"     , Объекты.Выгрузить());
	
	ЭтаФорма.Закрыть(СтруктураВозврата);

КонецПроцедуры

// Процедура, обработчик события ПриВыводеСтроки элемента формы ГруппыРассылкиСписок.
//
Процедура Объект_ГруппыРассылкиСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
	ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьФлажок   = Ложь;
	Если ДанныеСтроки.ПометкаУдаления Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки = 1;
	Иначе
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки = 0;
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет данными таблицу значений, группы рассылки.
//
Процедура ЗаполнитьСписокГруппРассылки(ГруппыРассылкиСписок) Экспорт

	СписокУчетныхЗаписей = Новый СписокЗначений;
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		СписокУчетныхЗаписей.Добавить(УчетнаяЗапись);
	Иначе
		СписокУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(глЗначениеПеременной("глТекущийПользователь")).Запись.Скопировать();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокУчетныхЗаписей", СписокУчетныхЗаписей);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты.ГруппаРассылки.ПометкаУдаления КАК ПометкаУдаления,
	|	ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты.ГруппаРассылки                 КАК ГруппаРассылки
	|ИЗ
	|	РегистрСведений.ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты КАК ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты
	|ГДЕ
	|	ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗапись В(&СписокУчетныхЗаписей)
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаРассылки ВОЗР
	|";
	
	ГруппыРассылкиСписок = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

// Процедура, обработчик события ПриОткрытии формы.
//
// Параметры
//  ЭлементыФормы - коллекция элементов формы
//  ЛичныеКонтактыСписок - СправочникСписок.ЛичныеКонтакты
//
Процедура Объект_ПриОткрытии(ЭлементыФормы) Экспорт

	ЭлементыФормы.КонтактныеЛицаКонтрагентовСписок.Значение.Отбор.Владелец.Использование     = Истина;
	ЭлементыФормы.КонтактныеЛицаКонтрагентовСписок.Значение.Отбор.Владелец.Значение          = Справочники.Контрагенты.ПустаяСсылка();
	
	ЭлементыФормы.СоставГруппыРассылки.Значение.Колонки.Добавить("ГруппаРассылки");
	
	ЭлементыФормы.СоставГруппыРассылки.Значение.Отбор.ГруппаРассылки.Использование = Истина;
	ЭлементыФормы.СоставГруппыРассылки.Значение.Отбор.ГруппаРассылки.ВидСравнения  = ВидСравнения.Равно;
	ЭлементыФормы.СоставГруппыРассылки.Значение.Отбор.ГруппаРассылки.Значение      = Справочники.ГруппыПочтовойРассылки.ПустаяСсылка();
	ЭлементыФормы.СоставГруппыРассылки.НастройкаОтбора.ГруппаРассылки.Доступность  = Ложь;
	
	ЗаполнитьСписокГруппРассылки(ЭлементыФормы.ГруппыРассылкиСписок.Значение);
	
	#Если Клиент Тогда
		ВидОбщегоОбъекта = ВосстановитьЗначение("ВидОбщегоОбъекта");
	#Иначе
		ВидОбщегоОбъекта = Неопределено;
	#КонецЕсли

	Если НЕ ЗначениеЗаполнено(ВидОбщегоОбъекта) Тогда
		ВидОбщегоОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	КонецЕсли;
	
	Объект_УстановитьОбъект(ЭлементыФормы);
	
	Если НЕ ОткрытаДляВыбора Тогда
		Если ЭлементыФормы.ПанельКому.Страницы.Кому.Видимость Тогда
			ЭлементыФормы.ПанельКому.Страницы.Кому.Видимость = НЕ ПодборОбъектов;
		КонецЕсли; 
		Если ЭлементыФормы.ПанельКому.Страницы.Копии.Видимость Тогда
			ЭлементыФормы.ПанельКому.Страницы.Копии.Видимость = НЕ ПодборОбъектов;
		КонецЕсли; 
		Если ЭлементыФормы.ПанельКому.Страницы.СкрытыеКопии.Видимость Тогда
			ЭлементыФормы.ПанельКому.Страницы.СкрытыеКопии.Видимость = НЕ ПодборОбъектов;
		КонецЕсли; 
		Если ЭлементыФормы.ПанельКому.Страницы.Объекты.Видимость Тогда
			ЭлементыФормы.ПанельКому.Страницы.Объекты.Видимость = ПодборОбъектов;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняется при изменении объекта панели ПанельОбщихОбъектов.
//
// Параметры
//  ЭлементыФормы - Коллекция, элементы формы
//
Процедура Объект_УстановитьОбъект(ЭлементыФормы) Экспорт

	Если ВидОбщегоОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты Тогда
		ЭлементыФормы.ОбщаяПанель.Страницы.КонтрагентыКонтактныеЛица.Видимость = Истина;
		ЭлементыФормы.ОбщаяПанель.Страницы.Организации.Видимость               = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.ФизическиеЛица.Видимость            = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.ПрочиеКонтактныеЛица.Видимость      = Истина;
		ЭлементыФормы.ОбщаяПанель.ТекущаяСтраница = ЭлементыФормы.ОбщаяПанель.Страницы.КонтрагентыКонтактныеЛица;
	ИначеЕсли ВидОбщегоОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		ЭлементыФормы.ОбщаяПанель.Страницы.КонтрагентыКонтактныеЛица.Видимость = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.Организации.Видимость               = Истина;
		ЭлементыФормы.ОбщаяПанель.Страницы.ФизическиеЛица.Видимость            = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.ПрочиеКонтактныеЛица.Видимость      = Ложь;
		ЭлементыФормы.ОбщаяПанель.ТекущаяСтраница = ЭлементыФормы.ОбщаяПанель.Страницы.Организации;
	ИначеЕсли ВидОбщегоОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица Тогда
		ЭлементыФормы.ОбщаяПанель.Страницы.КонтрагентыКонтактныеЛица.Видимость = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.Организации.Видимость               = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.ФизическиеЛица.Видимость            = Истина;
		ЭлементыФормы.ОбщаяПанель.Страницы.ПрочиеКонтактныеЛица.Видимость      = Ложь;
		ЭлементыФормы.ОбщаяПанель.ТекущаяСтраница = ЭлементыФормы.ОбщаяПанель.Страницы.ФизическиеЛица;
	ИначеЕсли ВидОбщегоОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица Тогда
		ЭлементыФормы.ОбщаяПанель.Страницы.КонтрагентыКонтактныеЛица.Видимость = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.Организации.Видимость               = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.ФизическиеЛица.Видимость            = Ложь;
		ЭлементыФормы.ОбщаяПанель.Страницы.ПрочиеКонтактныеЛица.Видимость      = Истина;
		ЭлементыФормы.ОбщаяПанель.ТекущаяСтраница = ЭлементыФормы.ОбщаяПанель.Страницы.ПрочиеКонтактныеЛица;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняется при активизации строки табличных полей,
//  для получения адресов электронной почты объекта и заполнения
//  реквизита формы СписокДанныхТекущейСтроки (список значений) и поля 
//  выбора значениями адрес контактной информации и представление объекта
//
// Параметры
//  Элемент - Табличное поле
//  ЭлементФормы - поле выбора
//  СписокДанныхТекущейСтроки - список значений, реквизит формы
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПолучитьАдресЭлектроннойПочты(Элемент, ЭлементФормы, СписокДанныхТекущейСтроки, ДопЗначениеКолонкиЭлемента = Неопределено) Экспорт

	СписокДанныхТекущейСтроки.Очистить();
	
	ЭлементФормы.Значение = "";
	ЭлементФормы.СписокВыбора.Очистить();
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЭлементФормы.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Если ДопЗначениеКолонкиЭлемента = Неопределено Тогда
		Запрос.УстановитьПараметр("Объект", Элемент.ТекущиеДанные.Ссылка);
	Иначе
		Запрос.УстановитьПараметр("Объект", Элемент.ТекущиеДанные[ДопЗначениеКолонкиЭлемента]);
	КонецЕсли; 
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект.Наименование КАК НаименованиеОбъекта,
	|	КонтактнаяИнформация.Вид                 КАК Вид,
	|	КонтактнаяИнформация.Представление       КАК Представление,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|";
	
	ТаблицаСреза = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСреза.Количество() = 0 Тогда
		ЭлементФормы.ТолькоПросмотр = Истина;
		ЭлементФормы.Значение = "E-mail не задан";
	ИначеЕсли ТаблицаСреза.Количество() = 1 Тогда
		ЭлементФормы.ТолькоПросмотр = Истина;
		СтруктураАдреса = Новый Структура("Адрес, ПредставлениеОбъекта, Вид", ТаблицаСреза[0].Представление, СтрЗаменить(ТаблицаСреза[0].НаименованиеОбъекта, мРазделительАдресов, ""), ТаблицаСреза[0].Вид);
		ЭлементФормы.СписокВыбора.Добавить(ТаблицаСреза[0].Представление, (ТаблицаСреза[0].Представление + " (" + Строка(ТаблицаСреза[0].Вид) + ")"));
		СписокДанныхТекущейСтроки.Добавить(СтруктураАдреса, ТаблицаСреза[0].Представление);
		ЭлементФормы.Значение = ТаблицаСреза[0].Представление;
	Иначе
		ЭлементФормы.ТолькоПросмотр = Ложь;
		АдресПоУмолчанию = Неопределено;
		Для каждого СтрокаТаблицы Из ТаблицаСреза Цикл
			Если СтрокаТаблицы.ЗначениеПоУмолчанию = Истина Тогда
				АдресПоУмолчанию = СтрокаТаблицы.Представление;
			КонецЕсли; 
			СтруктураАдреса = Новый Структура("Адрес, ПредставлениеОбъекта, Вид", СтрокаТаблицы.Представление, СтрЗаменить(СтрокаТаблицы.НаименованиеОбъекта, мРазделительАдресов, ""), СтрокаТаблицы.Вид);
			ЭлементФормы.СписокВыбора.Добавить(СтрокаТаблицы.Представление, (СтрокаТаблицы.Представление + " (" + СтрокаТаблицы.Вид + ")"));
			СписокДанныхТекущейСтроки.Добавить(СтруктураАдреса, ТаблицаСреза[0].Представление);
		КонецЦикла;
		Если АдресПоУмолчанию <> Неопределено Тогда
			ЭлементФормы.Значение = АдресПоУмолчанию;
		Иначе
			ЭлементФормы.Значение = ЭлементФормы.СписокВыбора[0].Значение;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ПолучитьАдресЭлектроннойПочты()

// Процедура добавляет выбранные объекты и адреса электронной почты 
//  в табличные части обработки
//
// Параметры
//  ЭлементыФормы - коллекция элементов формы
//  СписокДанныхТекущейСтроки - список значений с данными для текущей строки
//  ЭлементФормы - Табличное поле
//  ЭлементУправленияАдрес - поле выбора адреса электронной почты
//  ИдентификаторСправочника - строка, имя обрабатываемого справочника, как оно задано в конфигураторе
//  Множественный - булево, признак множественного выбора объектов
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ДобавитьЭлементы(ЭлементыФормы, СписокДанныхТекущейСтроки, ЭлементФормы, ЭлементУправленияАдрес, СтандартнаяОбработка = Неопределено, ИдентификаторСправочника = Неопределено, Множественный = Ложь) Экспорт
	
	Если СтандартнаяОбработка <> Неопределено И ОткрытаДляВыбора И ОткрытиеПриВыборе Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ИдентификаторСправочника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = ЭлементУправленияАдрес.Значение;
	
	ВыбЭлемент       = Неопределено;
	
	Если ОткрытаДляВыбора Тогда
		Если ПодборОбъектов Тогда
			ТекущаяТЧ = Объекты;
		Иначе
			ТекущаяТЧ = Кому;
		КонецЕсли; 
	ИначеЕсли ПодборОбъектов Тогда
		ТекущаяТЧ = Объекты;
	Иначе
		Если ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Кому Тогда
			ТекущаяТЧ = Кому;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Копии Тогда
			ТекущаяТЧ = Копии;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.СкрытыеКопии Тогда
			ТекущаяТЧ = СкрытыеКопии;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	СписокЭлементов = Неопределено;
	
	Если НЕ Множественный Тогда
		
		СписокЭлементов  = Новый СписокЗначений;
		ВыбранныеСтроки = ЭлементФормы.ВыделенныеСтроки;
		Если ВыбранныеСтроки.Количество() = 1 И ЗначениеЗаполнено(ВыбранныеСтроки[0]) Тогда
			Если ВыбранныеСтроки[0].ЭтоГруппа Тогда
				СписокЭлементов.Добавить(ВыбранныеСтроки[0]);
			Иначе
				Если ПодборОбъектов Тогда
					СписокЭлементов.Добавить(ВыбранныеСтроки[0]);
				Иначе
					Если Адрес = "E-mail не задан" ИЛИ НЕ ЗначениеЗаполнено(Адрес) Тогда
						Возврат;
					Иначе
						ВыбЭлемент = ВыбранныеСтроки[0];
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ВыбранныеСтроки.Количество() > 0 Тогда
			Для каждого СтрокаТаблицы Из ВыбранныеСтроки Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы) Тогда
					Продолжить;
				КонецЕсли; 
				СписокЭлементов.Добавить(СтрокаТаблицы);
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		ТекстЗапроса = "";
		СтруктураПараметровЗапроса = Новый Структура;
		
		Если ИдентификаторСправочника = "КонтактныеЛицаКонтрагентов" Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛица.Ссылка КАК Объект
			|ИЗ
			|	Справочник.КонтактныеЛицаКонтрагента КАК КонтактныеЛица
			|
			|";
			
			Если ЭлементФормы.ТекущаяСтрока = Неопределено Тогда
				Если ЭлементыФормы.КонтрагентыСписок.ТекущаяСтрока <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.КонтрагентыСписок.ТекущаяСтрока.Ссылка) Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	ГДЕ
					|	КонтактныеЛица.Владелец = &ВыбКонтрагент
					|";
					СтруктураПараметровЗапроса.Вставить("ВыбКонтрагент", ЭлементыФормы.КонтрагентыСписок.ТекущаяСтрока.Ссылка);
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|ГДЕ
				|	КонтактныеЛица.Владелец = &ВыбКонтрагент
				|";
				СтруктураПараметровЗапроса.Вставить("ВыбКонтрагент", ЭлементФормы.ТекущаяСтрока.Ссылка.Владелец);
			КонецЕсли; 
			
		Иначе
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка КАК Объект
			|ИЗ
			|	Справочник." + ИдентификаторСправочника + " КАК ТаблицаСправочника
			|";
			
			Если Метаданные.Справочники[ИдентификаторСправочника].Иерархический Тогда
				Если ЭлементФормы.ТекущаяСтрока <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|ГДЕ
					|	ТаблицаСправочника.Родитель = &ВыбРодитель
					|	И
					|	НЕ ТаблицаСправочника.ЭтоГруппа
					|";
					СтруктураПараметровЗапроса.Вставить("ВыбРодитель", ЭлементФормы.ТекущаяСтрока.Ссылка.Родитель);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодборОбъектов Тогда
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(СписокЭлементов) = Тип("СписокЗначений") Тогда
			
			Если СписокЭлементов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ИмяТаблицыСправочника = ИдентификаторСправочника;
			
			Запрос.УстановитьПараметр("СписокОбъектов", СписокЭлементов);
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаСправочника.Ссылка КАК Объект
			|ИЗ
			|	Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
			|ГДЕ
			|";
			
			Если Метаданные.Справочники[ИмяТаблицыСправочника].Иерархический Тогда
				Запрос.Текст = Запрос.Текст + "
				|	ТаблицаСправочника.Ссылка В ИЕРАРХИИ (&СписокОбъектов)
				|	И
				|	НЕ ТаблицаСправочника.ЭтоГруппа
				|";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	ТаблицаСправочника.Ссылка В (&СписокОбъектов)
				|";
			КонецЕсли;
			
		Иначе
			
			Запрос.Текст = ТекстЗапроса;
			
			Для каждого ЭлементСтруктуры Из СтруктураПараметровЗапроса Цикл
				Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла; 
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТекущаяТЧ.Добавить();
			НоваяСтрока.Объект = Выборка.Объект;
		КонецЦикла;
			
	Иначе
		
		Если ЗначениеЗаполнено(ВыбЭлемент) Тогда
			
			Если СписокДанныхТекущейСтроки.Количество() = 0 Тогда
				Возврат;
			Иначе
				НайденнаяСтруктура = Неопределено;
				Для каждого ЭлементСписка Из СписокДанныхТекущейСтроки Цикл
					Если ЭлементСписка.Значение.Адрес = Адрес Тогда
						НайденнаяСтруктура = ЭлементСписка.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НайденнаяСтруктура = Неопределено Тогда
					НайденнаяСтруктура = СписокДанныхТекущейСтроки[0].Значение;
				КонецЕсли; 
			КонецЕсли;
			
			НоваяСтрока = ТекущаяТЧ.Добавить();
			НоваяСтрока.Объект                = ВыбЭлемент;
			НоваяСтрока.АдресЭлектроннойПочты = НайденнаяСтруктура.Адрес;
			НоваяСтрока.ПредставлениеОбъекта  = НайденнаяСтруктура.ПредставлениеОбъекта;
			
		Иначе
			
			Запрос = Новый Запрос;
			
			Если ТипЗнч(СписокЭлементов) = Тип("СписокЗначений") Тогда
				
				Запрос.УстановитьПараметр("СписокОбъектов", СписокЭлементов);
				Запрос.УстановитьПараметр("Тип"           , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				
				ИмяТаблицыСправочника = ИдентификаторСправочника;
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ПоУмолчанию,
				|	КонтактнаяИнформация.Представление       КАК АдресЭлектроннойПочты,
				|	КонтактнаяИнформация.Объект              КАК Объект,
				|	КонтактнаяИнформация.Объект.Наименование КАК ПредставлениеОбъекта
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|	И
				|	КонтактнаяИнформация.Объект В ИЕРАРХИИ (&СписокОбъектов)
				|";
				
				Если Метаданные.Справочники[ИмяТаблицыСправочника].Иерархический Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И
					|	НЕ КонтактнаяИнформация.Объект.ЭтоГруппа
					|";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|
				|ИТОГИ ПО
				|	Объект
				|";
				
			Иначе
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ПоУмолчанию,
				|	КонтактнаяИнформация.Представление       КАК АдресЭлектроннойПочты,
				|	КонтактнаяИнформация.Объект              КАК Объект,
				|	КонтактнаяИнформация.Объект.Наименование КАК ПредставлениеОбъекта
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|
				|ПРАВОЕ СОЕДИНЕНИЕ
				|	(
				|	" + СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "") + "
				|	) КАК ВложеннаяТаблицаЗапроса
				|ПО
				|	ВложеннаяТаблицаЗапроса.Объект = КонтактнаяИнформация.Объект
				|
				|
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|
				|ИТОГИ ПО
				|	Объект
				|";
				
				Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				Для каждого ЭлементСтруктуры Из СтруктураПараметровЗапроса Цикл
					Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				КонецЦикла; 
				
			КонецЕсли; 
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Объект");
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Объект;
				ВыборкаДетальныхЗаписей = Выборка.Выбрать();
				Если ВыборкаДетальныхЗаписей.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПервыйАдрес = "";
				АдресПоУмолчанию = "";
				Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальныхЗаписей.АдресЭлектроннойПочты) Тогда
						Продолжить;
					КонецЕсли; 
					Если ПустаяСтрока(ПервыйАдрес) Тогда
						ПервыйАдрес              = ВыборкаДетальныхЗаписей.АдресЭлектроннойПочты;
						ПредставлениеПервыйАдрес = ВыборкаДетальныхЗаписей.ПредставлениеОбъекта;
					КонецЕсли;
					Если ПустаяСтрока(АдресПоУмолчанию) И ВыборкаДетальныхЗаписей.ПоУмолчанию = Истина Тогда
						АдресПоУмолчанию              = ВыборкаДетальныхЗаписей.АдресЭлектроннойПочты;
						ПредставлениеАдресПоУмолчанию = ВыборкаДетальныхЗаписей.ПредставлениеОбъекта;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ПустаяСтрока(АдресПоУмолчанию) Тогда
					НоваяСтрока = ТекущаяТЧ.Добавить();
					НоваяСтрока.Объект                = Объект;
					НоваяСтрока.АдресЭлектроннойПочты = АдресПоУмолчанию;
					НоваяСтрока.ПредставлениеОбъекта  = ПредставлениеАдресПоУмолчанию;
				ИначеЕсли НЕ ПустаяСтрока(ПервыйАдрес) Тогда
					НоваяСтрока = ТекущаяТЧ.Добавить();
					НоваяСтрока.Объект                = Объект;
					НоваяСтрока.АдресЭлектроннойПочты = ПервыйАдрес;
					НоваяСтрока.ПредставлениеОбъекта  = ПредставлениеПервыйАдрес;
				КонецЕсли; 
			КонецЦикла;
				
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Процедура добавляет выбранные объекты и адреса электронной почты результатов поиска
//  в табличные части обработки
//
// Параметры
//  ЭлементыФормы - коллекция элементов формы
//  РезультатыПоиска - таблица значений, данные результата поиска
//  Множественный - булево, признак множественного выбора объектов
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ДобавитьЭлементыРезультатовПоиска(ЭлементыФормы, РезультатыПоиска, Множественный = Ложь) Экспорт

	Если ОткрытаДляВыбора И ОткрытиеПриВыборе Тогда
		Возврат;
	КонецЕсли; 
	
	Если ОткрытаДляВыбора Тогда
		Если ПодборОбъектов Тогда
			ТекущаяТЧ = Объекты;
		Иначе
			ТекущаяТЧ = Кому;
		КонецЕсли; 
	ИначеЕсли ПодборОбъектов Тогда
		ТекущаяТЧ = Объекты;
	Иначе
		Если ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Кому Тогда
			ТекущаяТЧ = Кому;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Копии Тогда
			ТекущаяТЧ = Копии;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.СкрытыеКопии Тогда
			ТекущаяТЧ = СкрытыеКопии;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если ПодборОбъектов Тогда
		
		Если Множественный Тогда
			Для каждого СтрокаТаблицы Из РезультатыПоиска Цикл
				СтрокаТЧ        = ТекущаяТЧ.Добавить();
				СтрокаТЧ.Объект = СтрокаТаблицы.Объект;
			КонецЦикла;
		Иначе
			Для каждого СтрокаТаблицы Из ЭлементыФормы.РезультатыПоиска.ВыделенныеСтроки Цикл
				СтрокаТЧ        = ТекущаяТЧ.Добавить();
				СтрокаТЧ.Объект = СтрокаТаблицы.Объект;
			КонецЦикла;
		КонецЕсли; 
		
	Иначе
		
		Если Множественный Тогда
			
			Для каждого СтрокаТаблицы Из РезультатыПоиска Цикл
			
				Если СтрокаТаблицы.ДоступныеАдреса.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТЧ = ТекущаяТЧ.Добавить();
				СтрокаТЧ.Объект = СтрокаТаблицы.Объект;
				Если ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеПоУмолчанию) Тогда
					НайденныйЭлементСписка = Неопределено;
					Для каждого ЭлементСписка Из СтрокаТаблицы.ДоступныеАдреса Цикл
						Если ЭлементСписка.Значение.Адрес = СтрокаТаблицы.ЗначениеПоУмолчанию Тогда
							НайденныйЭлементСписка = ЭлементСписка;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НайденныйЭлементСписка <> Неопределено Тогда
						СтрокаТЧ.АдресЭлектроннойПочты = НайденныйЭлементСписка.Значение.Адрес;
						СтрокаТЧ.ПредставлениеОбъекта  = НайденныйЭлементСписка.Значение.ПредставлениеОбъекта;
					Иначе
						СтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицы.ДоступныеАдреса[0].Значение.Адрес;
						СтрокаТЧ.ПредставлениеОбъекта  = СтрокаТаблицы.ДоступныеАдреса[0].Значение.ПредставлениеОбъекта;
					КонецЕсли; 
				Иначе
					СтрокаТЧ.АдресЭлектроннойПочты = СтрокаТаблицы.ДоступныеАдреса[0].Значение.Адрес;
					СтрокаТЧ.ПредставлениеОбъекта  = СтрокаТаблицы.ДоступныеАдреса[0].Значение.ПредставлениеОбъекта;
				КонецЕсли; 
			
			КонецЦикла; 
			
		Иначе
			
			Если ЭлементыФормы.РезультатыПоиска.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если ЭлементыФормы.РезультатыПоиска.ВыделенныеСтроки.Количество() = 1 Тогда
				
				НайденнаяСтруктура = Неопределено;
				Для каждого ЭлементСписка Из ЭлементыФормы.РезультатыПоиска.ТекущиеДанные.ДоступныеАдреса Цикл
					Если ЭлементСписка.Значение.Адрес = ЭлементыФормы.АдресПоиск.Значение Тогда
						НайденнаяСтруктура = ЭлементСписка.Значение;
					КонецЕсли; 
				КонецЦикла;
				
				Если НайденнаяСтруктура = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				СтрокаТЧ = ТекущаяТЧ.Добавить();
				СтрокаТЧ.АдресЭлектроннойПочты = НайденнаяСтруктура.Адрес;
				СтрокаТЧ.Объект                = ЭлементыФормы.РезультатыПоиска.ТекущиеДанные.Объект;
				СтрокаТЧ.ПредставлениеОбъекта  = НайденнаяСтруктура.ПредставлениеОбъекта;
				
			Иначе
				
				Для каждого СтрокаТаблицы Из ЭлементыФормы.РезультатыПоиска.ВыделенныеСтроки Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеПоУмолчанию) И СтрокаТаблицы.ДоступныеАдреса.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли; 
					
					НайденнаяСтруктура = Неопределено;
					Если НЕ ПустаяСтрока(СтрокаТаблицы.ЗначениеПоУмолчанию) Тогда
						Для каждого ЭлементСписка Из СтрокаТаблицы.ДоступныеАдреса Цикл
							Если ЭлементСписка.Значение.Адрес = СтрокаТаблицы.ЗначениеПоУмолчанию Тогда
								НайденнаяСтруктура = ЭлементСписка.Значение;
							КонецЕсли; 
						КонецЦикла;
					Иначе
						НайденнаяСтруктура = СтрокаТаблицы.ДоступныеАдреса[0].Значение;
					КонецЕсли; 
					
					Если НайденнаяСтруктура = Неопределено Тогда
						Возврат;
					КонецЕсли;
					
					СтрокаТЧ = ТекущаяТЧ.Добавить();
					СтрокаТЧ.АдресЭлектроннойПочты = НайденнаяСтруктура.Адрес;
					СтрокаТЧ.Объект                = СтрокаТаблицы.Объект;
					СтрокаТЧ.ПредставлениеОбъекта  = НайденнаяСтруктура.ПредставлениеОбъекта;
				
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура открывает форму объекта подбора/выбора
//
// Параметры
//  ОбъектСсылка - СправочникСсылка
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ОткрытьФормуОбъекта(ОбъектСсылка) Экспорт

	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) И НЕ ОбъектСсылка.Пустая() Тогда
		ОбъектСсылка.ПолучитьФорму().Открыть();
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает события выбора строк табличных полей
//
// Параметры
//  ЭтаФорма - форма
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ОбработкаВыбораТабличныхПолей(ЭтаФорма, СтандартнаяОбработка = Неопределено) Экспорт

	Если СтандартнаяОбработка <> Неопределено И ОткрытаДляВыбора И ОткрытиеПриВыборе Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ОткрытаДляВыбора Тогда
	
		СтруктураВозврата = Новый Структура;
		
		СтруктураВозврата.Вставить("Кому"        , Кому.Выгрузить());
		СтруктураВозврата.Вставить("Копии"       , Копии.Выгрузить());
		СтруктураВозврата.Вставить("СкрытыеКопии", СкрытыеКопии.Выгрузить());
		СтруктураВозврата.Вставить("Объекты"     , Объекты.Выгрузить());
		
		ЭтаФорма.Закрыть(СтруктураВозврата);
	
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает события нажатия на кнопку поиска в форме
//
// Параметры
//  Элемент - кнопка
//  РезультатыПоиска - Таблица значений, для записи результатов поиска
//  СтрокаПоиска - Строка с данными для поиска
//
// Возвращаемое значение:
//   НЕТ
//
Процедура Объект_НайтиНажатие(Элемент, РезультатыПоиска, СтрокаПоиска, ВыдаватьОкноПредупреждения = Истина) Экспорт
	
	РезультатыПоиска.Очистить();
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ЛокальнаяСтрокаПоиска = СтрокаПоиска;
	
	СписокЭлементовПоиска = Новый СписокЗначений;
	
	Если Найти(ЛокальнаяСтрокаПоиска, "&") > 0 Тогда
		Пока Истина Цикл
			НомерПозиции = Найти(ЛокальнаяСтрокаПоиска, "&");
			Если НомерПозиции > 0 Тогда
				СписокЭлементовПоиска.Добавить(Сред(ЛокальнаяСтрокаПоиска, 1, (НомерПозиции - 1)));
				ЛокальнаяСтрокаПоиска = Сред(ЛокальнаяСтрокаПоиска, (НомерПозиции + 1));
			Иначе
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		СписокЭлементовПоиска.Добавить(СокрЛП(ЛокальнаяСтрокаПоиска));
	Иначе
		СписокЭлементовПоиска.Добавить(СокрЛП(ЛокальнаяСтрокаПоиска));
	КонецЕсли;
	
	СтрокаУсловийЗапроса = "";
	
	Запрос = Новый Запрос;
	
	Для каждого ЭлементСписка Из СписокЭлементовПоиска Цикл
		
		Если НЕ ПустаяСтрока(СтрокаУсловийЗапроса) Тогда
			СтрокаУсловийЗапроса = СтрокаУсловийЗапроса + Символы.ПС + " И " + Символы.ПС;
		КонецЕсли;
		
		СтрокаУсловийЗапроса = СтрокаУсловийЗапроса + "(КонтактнаяИнформация.Объект.Наименование ПОДОБНО &СтрокаПоиска" + Строка(СписокЭлементовПоиска.Индекс(ЭлементСписка)) + " ИЛИ
													  |КонтактнаяИнформация.Представление ПОДОБНО &СтрокаПоиска" + Строка(СписокЭлементовПоиска.Индекс(ЭлементСписка)) + ")";
		
		Запрос.УстановитьПараметр("СтрокаПоиска" + Строка(СписокЭлементовПоиска.Индекс(ЭлементСписка)), ("%" + ЭлементСписка.Значение + "%"));
		
	КонецЦикла; 
	
	СтрокаУсловийЗапроса = "(" + СтрокаУсловийЗапроса + ")";
	
	Запрос.УстановитьПараметр("Тип"                , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТекущаяДата"        , ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущийПользователь", глЗначениеПеременной("глТекущийПользователь"));
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект              КАК Объект,
	|	КонтактнаяИнформация.Представление       КАК Представление,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	КонтактнаяИнформация.Вид                 КАК Вид,
	|	КонтактнаяИнформация.Объект.Наименование КАК ПредставлениеОбъекта
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	(" + СтрокаУсловийЗапроса + ")
	|
	|ИТОГИ ПО
	|	Объект
	|";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Объект");
	
	Если Выборка.Количество() = 0 И ВыдаватьОкноПредупреждения Тогда
		#Если Клиент Тогда
			Предупреждение("По заданным параметрам ничего не найдено.");
		#КонецЕсли
		Возврат;
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = РезультатыПоиска.Добавить();
		СтрокаТаблицы.Объект = Выборка.Объект;
		СтрокаТаблицы.ТипОбъекта = Выборка.Объект.Метаданные().Синоним;
		ВыборкаДетальныхЗаписей = Выборка.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
			Если ВыборкаДетальныхЗаписей.ЗначениеПоУмолчанию = Истина Тогда
				СтрокаТаблицы.ЗначениеПоУмолчанию = ВыборкаДетальныхЗаписей.Представление;
				СтрокаТаблицы.ПредставлениеЗначенияПоУмолчанию = ВыборкаДетальныхЗаписей.Представление + " (" + ВыборкаДетальныхЗаписей.Вид + ")";
			КонецЕсли;
			ПредставлениеОбъекта = ВыборкаДетальныхЗаписей.ПредставлениеОбъекта;
			СтрокаТаблицы.ДоступныеАдреса.Добавить(Новый Структура("Адрес, ПредставлениеОбъекта, Вид", ВыборкаДетальныхЗаписей.Представление, СтрЗаменить(ПредставлениеОбъекта, мРазделительАдресов, ""), ВыборкаДетальныхЗаписей.Вид), (ВыборкаДетальныхЗаписей.Представление + " (" + ВыборкаДетальныхЗаписей.Вид + ")"));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает событие при активизации строки табличного поля с данными результата поиска
//
// Параметры
//  Элемент - табличное поле с результатами поиска
//  ЭлементыФормы - коллекция элементов формы
//
// Возвращаемое значение:
//   НЕТ
//
Процедура Объект_РезультатыПоискаПриАктивизацииСтроки(Элемент, ЭлементыФормы) Экспорт

	ЭлементФормы = ЭлементыФормы.АдресПоиск;
	ЭлементФормы.СписокВыбора.Очистить();
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЭлементФормы.СписокВыбора   = Новый СписокЗначений;
		ЭлементФормы.Значение       = "";
		ЭлементФормы.ТолькоПросмотр = Истина;
	Иначе
		ЭлементСпискаПоУмолчанию = Неопределено;
		Для каждого ЭлементСписка Из Элемент.ТекущиеДанные.ДоступныеАдреса Цикл
			НовыйЭлементСписка = ЭлементФормы.СписокВыбора.Добавить(ЭлементСписка.Значение.Адрес, ЭлементСписка.Представление);
			Если ЭлементСписка.Значение.Адрес = Элемент.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
				ЭлементСпискаПоУмолчанию = НовыйЭлементСписка;
			КонецЕсли; 
		КонецЦикла; 
		Если ЭлементФормы.СписокВыбора.Количество() = 0 Тогда
			ЭлементФормы.Значение       = "E-mail не задан";
			ЭлементФормы.ТолькоПросмотр = Истина;
		ИначеЕсли ЭлементФормы.СписокВыбора.Количество() = 1 Тогда
			ЭлементФормы.Значение       = ЭлементФормы.СписокВыбора[0].Значение;
			ЭлементФормы.ТолькоПросмотр = Истина;
		Иначе
			ЭлементФормы.ТолькоПросмотр = Ложь;
			Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗначениеПоУмолчанию) Тогда
				ЭлементФормы.Значение = ЭлементФормы.СписокВыбора[0].Значение;
			Иначе
				Если ЭлементСпискаПоУмолчанию = Неопределено Тогда
					ЭлементФормы.Значение = ЭлементФормы.СписокВыбора[0].Значение;
				Иначе
					ЭлементФормы.Значение = ЭлементСпискаПоУмолчанию.Значение;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура производит поиск объектов по заданным параметрам и открывает форму обработки
//
// Параметры
//  ВыделенныйТекст - строка, текст для поиска
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПроизвестиПоиск(ТекстДляПоиска) Экспорт

	Если СтрЧислоВхождений(ТекстДляПоиска, "<") = 1 И СтрЧислоВхождений(ТекстДляПоиска, ">") = 1 И СтрЧислоВхождений(ТекстДляПоиска, "@") = 1 Тогда
		НачалоАдреса  = Найти(ТекстДляПоиска, "<");
		КонецАдреса   = Найти(ТекстДляПоиска, ">");
		ПозицияСобаки = Найти(ТекстДляПоиска, "@");
		Если НачалоАдреса > 0 И КонецАдреса > 0 И КонецАдреса > НачалоАдреса И ПозицияСобаки > НачалоАдреса И ПозицияСобаки < КонецАдреса Тогда
			ИмяОбъекта = СокрЛП(Лев(ТекстДляПоиска, (НачалоАдреса - 1)));
			Если ПустаяСтрока(ИмяОбъекта) Тогда
				ТекстДляПоиска = СокрЛП(Сред(ТекстДляПоиска, (НачалоАдреса + 1), (КонецАдреса - НачалоАдреса - 1)));
			Иначе
				ТекстДляПоиска = СокрЛП(Лев(ТекстДляПоиска, (НачалоАдреса - 1))) + "&" + СокрЛП(Сред(ТекстДляПоиска, (НачалоАдреса + 1), (КонецАдреса - НачалоАдреса - 1)));
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОткрытаДляВыбора Тогда
		ФормаОбработки = ЭтотОбъект.ПолучитьФорму("ФормаВыбора");
	Иначе
		ФормаОбработки = ЭтотОбъект.ПолучитьФорму("ФормаПодбора");
	КонецЕсли;
	
	ФормаОбработки.СтрокаПоиска = ТекстДляПоиска;
	
	Объект_НайтиНажатие(Неопределено, ФормаОбработки.РезультатыПоиска, ФормаОбработки.СтрокаПоиска, Ложь);
	
	Если ФормаОбработки.РезультатыПоиска.Количество() = 1 Тогда
		ФормаОбработки.РезультатыПоиска[0].Объект.ПолучитьФорму().Открыть();
	ИначеЕсли ФормаОбработки.РезультатыПоиска.Количество() > 1 Тогда
		ФормаОбработки.Открыть();
		ФормаОбработки.ЭлементыФормы.ОбщаяПанель.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ОбщаяПанель.Страницы.Поиск;
	Иначе
		СоздатьНовыйОбъектСАдресомЭлектроннойПочты(ТекстДляПоиска);
	КонецЕсли; 

КонецПроцедуры

// Функция разделяет в строке адрес электронной почты объекта, и наименование объекта.
//
// Параметры
//  СтрокаПоиска - строка для разделения
//
// Возвращаемое значение:
//   СтруктураВозврата - структура
//   Ключи
//    СтрокаНаименование
//    СтркоаАдрес
//
Функция РазделитьАдресИНаименование(СтрокаПоиска)

	СтрокаНаименование = "";
	СтрокаАдрес = "";
	
	Если СтрЧислоВхождений(СтрокаПоиска, "&") > 0 Тогда
	
		Пока СтрЧислоВхождений(СтрокаПоиска, "&") > 0 Цикл
		
			ПозицияСимвола = Найти(СтрокаПоиска, "&");
			
			СтрокаДоСимвола = Лев(СтрокаПоиска, (ПозицияСимвола - 1));
			
			Если СтрЧислоВхождений(СтрокаДоСимвола, "@") > 0 Тогда
				Если НЕ ПустаяСтрока(СтрокаАдрес) Тогда
					СтрокаАдрес = СтрокаАдрес + " ";
				КонецЕсли; 
				СтрокаАдрес = СтрокаАдрес + СтрокаДоСимвола;
			Иначе
				Если НЕ ПустаяСтрока(СтрокаНаименование) Тогда
					СтрокаНаименование = СтрокаНаименование + " ";
				КонецЕсли; 
				СтрокаНаименование = СтрокаНаименование + СтрокаДоСимвола;
			КонецЕсли;
			
			СтрокаПоиска = Сред(СтрокаПоиска, (ПозицияСимвола + 1));
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрЧислоВхождений(СтрокаПоиска, "@") > 0 Тогда
		Если НЕ ПустаяСтрока(СтрокаАдрес) Тогда
			СтрокаАдрес = СтрокаАдрес + " ";
		КонецЕсли; 
		СтрокаАдрес = СтрокаАдрес + СтрокаПоиска;
	Иначе
		Если НЕ ПустаяСтрока(СтрокаНаименование) Тогда
			СтрокаНаименование = СтрокаНаименование + " ";
		КонецЕсли; 
		СтрокаНаименование = СтрокаНаименование + СтрокаПоиска;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СтрокаНаименование", СтрокаНаименование);
	СтруктураВозврата.Вставить("СтрокаАдрес", СтрокаАдрес);
	
	Возврат СтруктураВозврата;

КонецФункции

// Процедура добавляет новую запись контактной информации в регистр сведений
//
// Параметры
//  ОбъектСсылка - СправочникСсылка, объект контактной информации
//  СтрокаПоиска - Строка, по которой осуществлялся поиск
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ДобавитьАдресЭлектроннойПочтыВОбъект(СтрокаПоиска, ОбъектСсылка) Экспорт

	КопияСтрокиПоиска = СтрокаПоиска;
	
	СтруктураРазделенияДанных = РазделитьАдресИНаименование(КопияСтрокиПоиска);
	
	ЗаписьРегистраСведений = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.Объект        = ОбъектСсылка;
	ЗаписьРегистраСведений.Тип           = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ЗаписьРегистраСведений.Представление = СтруктураРазделенияДанных.СтрокаАдрес;
	
	ЗаписьРегистраСведений.ПолучитьФорму().ОткрытьМодально();
	
КонецПроцедуры

// Процедура заполняет данными и открывает форму регистрации нового объекта
//
// Параметры
//  СтрокаПоиска - Строка, по которой осуществлялся поиск
//
// Возвращаемое значение:
//   НЕТ
//
Функция СоздатьНовыйОбъектСАдресомЭлектроннойПочты(СтрокаПоиска) Экспорт

	КопияСтрокиПоиска = СтрокаПоиска;
	
	СтруктураРазделенияДанных = РазделитьАдресИНаименование(КопияСтрокиПоиска);
	
	ФормаРегистрацииНовыхДанных = ЭтотОбъект.ПолучитьФорму("ФормаРегистрацииНовогоОбъекта");
	
	ФормаРегистрацииНовыхДанных.НаименованиеОбъекта   = СтруктураРазделенияДанных.СтрокаНаименование;
	ФормаРегистрацииНовыхДанных.АдресЭлектроннойПочты = СтруктураРазделенияДанных.СтрокаАдрес;
	
	Возврат ФормаРегистрацииНовыхДанных.ОткрытьМодально();

КонецФункции

// Процедура обрабатывает события ПередНачаломДобавления элементов форм ГруппыРассылкиСписок.
//
Процедура Объект_ГруппыРассылкиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма) Экспорт

	Отказ = Истина;
	
	Если Копирование Тогда
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		НовыйОбъект = Элемент.ТекущиеДанные.ГруппаРассылки.Скопировать();
	Иначе
		НовыйОбъект = Справочники.ГруппыПочтовойРассылки.СоздатьЭлемент();
	КонецЕсли;
	
	НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();

КонецПроцедуры

// Процедура обрабатывает события ОбработкаЗаписиНовогоОбъекта форм.
//
Процедура Объект_ОбработкаЗаписиНовогоОбъекта(Объект, Источник, ЭтаФорма) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ГруппыПочтовойРассылки") Тогда
		ЗаполнитьСписокГруппРассылки(ЭтаФорма.ГруппыРассылкиСписок);
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает события ПередНачаломИзменения элементов форм ГруппыРассылкиСписок.
//
Процедура Объект_ГруппыРассылкиСписокПередНачаломИзменения(Элемент, Отказ, ЭтаФорма) Экспорт

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ГруппаРассылки) Тогда
		Элемент.ТекущиеДанные.ГруппаРассылки.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли; 

КонецПроцедуры

// Процедура добавляет в необходимые табличные части объекты и адреса эл.почты групп рассылки.
//
// Параметры:
//  ЭлементыФормы - Коллекция элементов форм
//  ГруппыРассылкиСписок - Таблица значений, группы рассылки
//  Множественный - Булево, признак множественного выбора/подбора
//
Процедура ДобавитьЭлементыГруппРассылки(ЭлементыФормы, ГруппыРассылкиСписок, Множественный = Ложь) Экспорт

	Если ОткрытаДляВыбора И ОткрытиеПриВыборе Тогда
		Возврат;
	КонецЕсли; 
	
	Если ОткрытаДляВыбора Тогда
		Если ПодборОбъектов Тогда
			ТекущаяТЧ = Объекты;
		Иначе
			ТекущаяТЧ = Кому;
		КонецЕсли; 
	ИначеЕсли ПодборОбъектов Тогда
		ТекущаяТЧ = Объекты;
	Иначе
		Если ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Кому Тогда
			ТекущаяТЧ = Кому;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Копии Тогда
			ТекущаяТЧ = Копии;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.СкрытыеКопии Тогда
			ТекущаяТЧ = СкрытыеКопии;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если Множественный Тогда
		МассивГруппРассылки = ГруппыРассылкиСписок.ВыгрузитьКолонку("ГруппаРассылки");
	Иначе
		МассивГруппРассылки = Новый Массив;
		Для каждого ВыделеннаяСтрока Из ЭлементыФормы.ГруппыРассылкиСписок.ВыделенныеСтроки Цикл
			МассивГруппРассылки.Добавить(ВыделеннаяСтрока.ГруппаРассылки);
		КонецЦикла; 
	КонецЕсли;
	
	Если МассивГруппРассылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПодборОбъектов Тогда
		
		Запрос.УстановитьПараметр("ГруппыРассылки", МассивГруппРассылки);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СоставГруппРассылкиЭлектроннойПочты.ОбъектРассылки КАК ОбъектРассылки
		|ИЗ
		|	РегистрСведений.СоставГруппРассылкиЭлектроннойПочты КАК СоставГруппРассылкиЭлектроннойПочты
		|ГДЕ
		|	СоставГруппРассылкиЭлектроннойПочты.ГруппаРассылки В(&ГруппыРассылки)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = ТекущаяТЧ.Добавить();
			СтрокаТЧ.Объект = Выборка.ОбъектРассылки;
		КонецЦикла; 
		
	Иначе
		
		Запрос.УстановитьПараметр("ГруппыРассылки", МассивГруппРассылки);
		Запрос.УстановитьПараметр("ТекущаяДата"   , ТекущаяДата());
		Запрос.УстановитьПараметр("Тип"           , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("ПустаяСтрока"  , "");
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК ОбъектРассылки,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	КонтактнаяИнформация.Представление       КАК АдресЭлектроннойПочты,
		|	КонтактнаяИнформация.Объект.Наименование КАК ПредставлениеОбъекта
		|ИЗ
		|	РегистрСведений.СоставГруппРассылкиЭлектроннойПочты КАК СоставГруппРассылкиЭлектроннойПочты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|	ПО
		|	КонтактнаяИнформация.Объект = СоставГруппРассылкиЭлектроннойПочты.ОбъектРассылки
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|
		|ГДЕ
		|	СоставГруппРассылкиЭлектроннойПочты.ГруппаРассылки В(&ГруппыРассылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.Объект.Наименование ВОЗР
		|
		|ИТОГИ ПО
		|	ОбъектРассылки
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбъектов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОбъектРассылки");
		Пока ВыборкаОбъектов.Следующий() Цикл
			ВыборкаДетальныхЗаписей = ВыборкаОбъектов.Выбрать();
			Если ВыборкаДетальныхЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВыборкаДетальныхЗаписей.НайтиСледующий(Новый Структура("ЗначениеПоУмолчанию", Истина)) Тогда
				ВыборкаДетальныхЗаписей.Сбросить();
				ВыборкаДетальныхЗаписей.Следующий();
			КонецЕсли;
			
			СтрокаТЧ = ТекущаяТЧ.Добавить();
			СтрокаТЧ.АдресЭлектроннойПочты = ВыборкаДетальныхЗаписей.АдресЭлектроннойПочты;
			СтрокаТЧ.Объект                = ВыборкаДетальныхЗаписей.ОбъектРассылки;
			СтрокаТЧ.ПредставлениеОбъекта  = ВыборкаДетальныхЗаписей.ПредставлениеОбъекта;
			
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает изменение пометки удаления для группы рассылки
//
Процедура Объект_ГруппыРассылкиСписокПередУдалением(Элемент, Отказ) Экспорт

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекГруппа = Элемент.ТекущиеДанные.ГруппаРассылки;
		
		Если ТекГруппа.ПометкаУдаления Тогда
			СтрокаВопроса = "Снять с объекта пометку на удаление?";
		Иначе
			СтрокаВопроса = "Пометить объект на удаление?";
		КонецЕсли;
		
		#Если Клиент Тогда
		ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да  Тогда
			Возврат;
		КонецЕсли;
		#Иначе
			Возврат;
		#КонецЕсли
		
		Объект = ТекГруппа.ПолучитьОбъект();
		Попытка
			Объект.УстановитьПометкуУдаления(НЕ ТекГруппа.ПометкаУдаления);
		Исключение
		КонецПопытки;
		
		Элемент.ТекущиеДанные.ПометкаУдаления = ТекГруппа.ПометкаУдаления;
		
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает соббытие ПриАктивизацииСтроки списка справочника Контрагенты
//
Процедура Объект_КонтрагентыСписокПриАктивизацииСтроки(Элемент, КонтактныеЛицаКонтрагентовСписок) Экспорт

	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		КонтактныеЛицаКонтрагентовСписок.Отбор.Владелец.Значение = Элемент.ТекущиеДанные.Ссылка;
	Иначе
		КонтактныеЛицаКонтрагентовСписок.Отбор.Владелец.Значение = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле ввода таблиц Кому, Копии и Скрытые копии
//
Процедура Объект_АдресЭлектроннойПочтыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ЭлементТабличноеПоле, ЭтаФорма) Экспорт

	Если ЭлементТабличноеПоле.ТекущиеДанные <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Вид
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|";
		
		Запрос.УстановитьПараметр("Объект", ЭлементТабличноеПоле.ТекущиеДанные.Объект);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СписокВыбора = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокВыбора.Добавить(Выборка.Представление, (Выборка.Представление + " (" + Строка(Выборка.Вид) + ")"));
		КонецЦикла; 
		
		НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(Элемент.Значение);
		
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, НайденныйЭлемент);
		
		Если ВыбранныйЭлемент <> Неопределено Тогда
			Элемент.Значение = ВыбранныйЭлемент.Значение;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает событие ПриИзменении объекта в ТЧ Кому, Копии, СкрытыеКопии.
//
Процедура Объект_ОбъектЭлектроннойПочтыПриИзменении(Элемент, ЭлементТабличноеПоле) Экспорт

	Если ЭлементТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		
		ЭлементТабличноеПоле.ТекущиеДанные.АдресЭлектроннойПочты = "";
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И
		|	КонтактнаяИнформация.Тип = &Тип
		|";
		
		Запрос.УстановитьПараметр("Объект", ЭлементТабличноеПоле.ТекущиеДанные.Объект);
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапроса.Индексы.Добавить("Представление");
		ТаблицаЗапроса.Индексы.Добавить("ЗначениеПоУмолчанию");
		
		Если ТаблицаЗапроса.Количество() = 0 Тогда
			ЭлементТабличноеПоле.ТекущиеДанные.АдресЭлектроннойПочты = "";
			Возврат;
		КонецЕсли; 
		
		Если ТаблицаЗапроса.Найти(Элемент.Значение, "Представление") <> Неопределено Тогда
			ЭлементТабличноеПоле.ТекущиеДанные.АдресЭлектроннойПочты = "";
		Иначе
			СтрокаПоУмолчанию = ТаблицаЗапроса.Найти(Истина, "ЗначениеПоУмолчанию");
			Если СтрокаПоУмолчанию <> Неопределено Тогда
				ЭлементТабличноеПоле.ТекущиеДанные.АдресЭлектроннойПочты = СтрокаПоУмолчанию.Представление;
			Иначе
				ЭлементТабличноеПоле.ТекущиеДанные.АдресЭлектроннойПочты = ТаблицаЗапроса[0].Представление;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает событие ПриАктивизацииСтроки элемента формы ГруппыРассылкиСписок.
//
Процедура Объект_ГруппыРассылкиСписокПриАктивизацииСтроки(Элемент, СоставГруппыРассылки) Экспорт

	СоставГруппыРассылки.Отбор.ГруппаРассылки.Использование = Истина;
	СоставГруппыРассылки.Отбор.ГруппаРассылки.ВидСравнения  = ВидСравнения.Равно;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		СоставГруппыРассылки.Отбор.ГруппаРассылки.Значение = Справочники.ГруппыПочтовойРассылки.ПустаяСсылка();
	Иначе
		СоставГруппыРассылки.Отбор.ГруппаРассылки.Значение = Элемент.ТекущиеДанные.ГруппаРассылки;
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает событие выбора элемента группы рассылки и его добавление в соотв. ТЧ.
//
Процедура ДобавитьЭлементыГруппыРассылки(ЭлементыФормы, Элемент, СписокДанныхТекущейСтроки, ЭлементУправленияАдрес, МножественныйВыбор = Ложь) Экспорт

	Если ОткрытаДляВыбора Тогда
		Если ПодборОбъектов Тогда
			ТекущаяТЧ = Объекты;
		Иначе
			ТекущаяТЧ = Кому;
		КонецЕсли; 
	ИначеЕсли ПодборОбъектов Тогда
		ТекущаяТЧ = Объекты;
	Иначе
		Если ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Кому Тогда
			ТекущаяТЧ = Кому;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.Копии Тогда
			ТекущаяТЧ = Копии;
		ИначеЕсли ЭлементыФормы.ПанельКому.ТекущаяСтраница = ЭлементыФормы.ПанельКому.Страницы.СкрытыеКопии Тогда
			ТекущаяТЧ = СкрытыеКопии;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ МножественныйВыбор Тогда
		
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СписокДанныхТекущейСтроки.Количество() = 0 Тогда
			Возврат;
		Иначе
			Адрес = ЭлементУправленияАдрес.Значение;
			НайденнаяСтруктура = Неопределено;
			Для каждого ЭлементСписка Из СписокДанныхТекущейСтроки Цикл
				Если ЭлементСписка.Значение.Адрес = Адрес Тогда
					НайденнаяСтруктура = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НайденнаяСтруктура = Неопределено Тогда
				НайденнаяСтруктура = СписокДанныхТекущейСтроки[0].Значение;
			КонецЕсли; 
		КонецЕсли;
		
		НоваяСтрока = ТекущаяТЧ.Добавить();
		НоваяСтрока.Объект                = Элемент.ТекущиеДанные.ОбъектРассылки;
		НоваяСтрока.АдресЭлектроннойПочты = НайденнаяСтруктура.Адрес;
		НоваяСтрока.ПредставлениеОбъекта  = НайденнаяСтруктура.ПредставлениеОбъекта;
		
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает событие ПередНачаломИзменения элемента формы СоставГруппыРассылки.
//
Процедура Объект_СоставГруппыРассылкиПередНачаломИзменения(Элемент, Отказ) Экспорт

	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъектРассылки) Тогда
	
		Элемент.ТекущиеДанные.ОбъектРассылки.ПолучитьФорму().Открыть();
	
	КонецЕсли; 

КонецПроцедуры

мРазделительАдресов = ",";
