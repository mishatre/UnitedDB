Функция ПечатьРасходника (ССылкаНаОбъект) Экспорт
	        

	Тип="Ордер";
	КоммСклад ="";
	//ПараметрыПечати = ПолучитьДанные();
	//ПроверкаПечатиНакладной(СсылкаНаОбъект);
    	  Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПРЕДСТАВЛЕНИЕ(АмбКомментарииКРеализации.КомментарииДляСклада) КАК Комм,
	               |	АмбКомментарииКРеализации.ТранспотрнаяКомпания
	               |ИЗ
	               |	Документ.амбКомментарииКРеализации КАК АмбКомментарииКРеализации
	               |ГДЕ
	               |	АмбКомментарииКРеализации.Реализация = &Реализация";
	
	Запрос.УстановитьПараметр("Реализация",СсылкаНаОбъект );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	    КоммСклад = Выборка.Комм;
		КоммСклад = КоммСклад + " ТК" + Выборка.ТранспотрнаяКомпания;
	Иначе 	
	    КоммСклад = "";
	КонецЕсли;

	СуммыВРублях =Истина;
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов,
	|	РеализацияТоваровУслуг.Сделка.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТекстКурс = "";

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС,
	|	ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
	|	ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
	|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапросПоТоварам.Метка КАК Метка,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Родитель КАК НоменклатураРодитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена КАК Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		"""" КАК НомерГТД,
	|		"""" КАК СтранаПроисхождения,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		"""" КАК СерияНоменклатуры,
	|		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
    |	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ", 
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	1,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	2,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураРодитель,
	|	Артикул";
	//|	Метка,
	//|	НомерСтроки";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	флВыводитьМест = истина;
	Если ЗапросТовары.Итог("КоличествоМест")=0 Тогда
		флВыводитьМест = ложь;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	Макет = ПолучитьМакет("НакладнаяСпц");
	ОбластьШК = Макет.ПолучитьОбласть("ШТРИХКОД");
	ЧислоШК = Строка(Прав(СсылкаНаОбъект.Организация.Код,1))+Прав(Год(ССылкаНаОбъект.Дата),1);
	НомерНАкладной  = Строка(Формат(СокрЛП(Сред(СсылкаНаОбъект.Номер,2)),"ЧГ="));
	ЧислоСимволовНомера = СтрДлина(НомерНАкладной);
	ВставкаНулей = "";
	Для Итератор = ЧислоСимволовНомера по 9 цикл
	ВставкаНулей = ВставкаНулей+"0";	
    КонецЦикла;	

	
	//ОбластьШК.Параметры.ШтрихКод = СформироватьКодEAN13(Число(СокрЛП(Сред(СсылкаНаОбъект.Номер,2))));
	ПредварительныйБАрКод = EAN138(Строка(ЧислоШК)+ВставкаНулей+НомерНАкладной);
	   ОбластьШК.Параметры.ШтрихКод = СформироватьКодEAN13(ПредварительныйБАрКод);
	ТабДокумент.Вывести(ОбластьШК);

      //
	Если не КоммСклад ="" тогда
		
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИНФО");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = КоммСклад;
	ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЕсли;

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	
	//ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		////////////////////
	НовыйРубеж  = Константы.НовыйРубеж.Получить();	
		//Проверим, возможно сделка не заполнена  и контрагент НР
	Если не ЗначениеЗаполнено(СсылкаНаОбъект.Сделка) и  СсылкаНаОбъект.Контрагент = НовыйРубеж тогда
		ПредставлениеПолучателя ="!НР! Регион:"+ СсылкаНаОбъект.Грузополучатель.Регион +" Покупатель: "+СсылкаНаОбъект.Грузополучатель;
	Иначе

	ПредставлениеПолучателя =?(( ЗначениеЗаполнено(СсылкаНаОбъект.Сделка.Грузополучатель)),
	?(Шапка.Получатель=НовыйРубеж,"!НР!","")+"Регион:"+ СсылкаНаОбъект.Сделка.Грузополучатель.Регион +" Покупатель: "+СсылкаНаОбъект.Сделка.Грузополучатель,
	" Регион: "+Шапка.Получатель.Регион+" Покупатель: "+Шапка.Получатель);
	КонецЕсли;
	////////////////////                                                                            

	ОбластьМакета.Параметры.ПредставлениеПолучателя =ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Грузополучатель) Тогда
	ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
	ОбластьМакета.Параметры.Грузополучатель = СсылкаНаОбъект.Грузополучатель.НаименованиеПолное;
    ТабДокумент.Вывести(ОбластьМакета);
    КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Ответственный");
	ОбластьМакета.Параметры.Ответственный = Строка(Шапка.Ответственный );//+"   "+ Строка(Шапка.Ответственный.ДобНомер);
	ОбластьМакета.Параметры.Дата = ТекущаяДата();
    ТабДокумент.Вывести(ОбластьМакета);
	
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("ШапкаТаблицы|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	ОбластьПримечание   = Макет.ПолучитьОбласть("ШапкаТаблицы|Примечание"); 

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);

	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьПримечание); 
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	Если не флВыводитьМест Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		ФормированиеПечатныхФорм.РасчетШириныОбластиМакета("Мест", Макет);
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
    ОбластьПримечание  = Макет.ПолучитьОбласть("Строка|Примечание");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	КоэфКурса = ?( СуммыВРублях, Шапка.КурсВзаиморасчетов / Шапка.КратностьВзаиморасчетов, 1);
	НачальнаяКатегория ="";
	 
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
          //Амбер		  
		  ТекущаяКатегория = ВыборкаСтрокТовары.Номенклатура.Родитель;
		  Если не ТекущаяКатегория = НачальнаяКатегория тогда
			  Цвт = ОбластьТовар.ТекущаяОбласть.ЦветФона;

			  	ОбластьНомера.Параметры.НомерСтроки = "---";
				ОбластьНомера.ТекущаяОбласть.ЦветФона= WebЦвета.Черный;
				ТабДокумент.Вывести(ОбластьНомера);
                ОбластьНомера.ТекущаяОбласть.ЦветФона= Цвт;
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = "-----";
					Иначе
					ОбластьКодов.Параметры.Артикул = "-----";
					КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
        	
		ОбластьТовар.Параметры.Товар = ТекущаяКатегория;
		
		Шрифт = ОбластьТовар.ТекущаяОбласть.Шрифт;
				ШрифтГруппы = Новый Шрифт(Шрифт, , Шрифт.Размер + 4);  
		ОбластьТовар.ТекущаяОбласть.Шрифт = ШрифтГруппы;
		ОбластьТовар.ТекущаяОбласть.ЦветФона= WebЦвета.Желтый;	

		ТабДокумент.Присоединить(ОбластьТовар);       

        ОбластьДанных.Параметры.Количество = "----";
		ОбластьДанных.Параметры.ЕдиницаЦены = "---";
			ТабДокумент.Присоединить(ОбластьДанных);
		
		ОбластьПримечание.Параметры.Примечание = "-----------";
		ТабДокумент.Присоединить(ОбластьПримечание);

			  НачальнаяКатегория = ТекущаяКатегория;
			  ОбластьТовар.ТекущаяОбласть.Шрифт = Шрифт;
		      ОбластьТовар.ТекущаяОбласть.ЦветФона= Цвт;	
		  КонецЕсли;  
		  
		  ///Амбер

		Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
			
		        //Амбер
		  Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                 |	РеализацияТоваровУслугамбСрокиИСерии.СерияНоменклатуры,
		                 |	РеализацияТоваровУслугамбСрокиИСерии.СрокГодности,
		                 |	РеализацияТоваровУслугамбСрокиИСерии.Количество
		                 |ИЗ
		                 |	Документ.РеализацияТоваровУслуг.амбСрокиИСерии КАК РеализацияТоваровУслугамбСрокиИСерии
		                 |ГДЕ
		                 |	РеализацияТоваровУслугамбСрокиИСерии.Ссылка = &Ссылка
		                 |	И РеализацияТоваровУслугамбСрокиИСерии.Номенклатура = &Номенклатура";
		  
		  Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		  Запрос.УстановитьПараметр("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
		  
		  Результат = Запрос.Выполнить();
		  Выборка = Результат.Выбрать();
		    Коммент = "";
		  Пока Выборка.Следующий() Цикл
			  
			  Коммент = Коммент+"/ Сер:"+Строка(Выборка.СерияНоменклатуры)+" Срок:"+Строка(Формат(Выборка.СрокГодности,"ДФ=dd.MM.yyyy"))+" Кол: "+Строка(Выборка.Количество)+Символы.ПС;		  	
		  
		  КонецЦикла;
		  //Амбер 24032013
		  //Проверим: возможно списывались Серийные номера
		  
			//ПараметрыОтбора = Новый Структура;
			//ПараметрыОтбора.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
			//НайденныеСтроки = ССылкаНаОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
			//Для Каждого СтрокаСер из НайденныеСтроки цикл
			//	Если ЗначениеЗаполнено(СтрокаСер.СерийныйНомер) тогда
			//	Коммент = Коммент + " s/n:"+СтрокаСер.СерийныйНомер;
			//	КонецЕсли;
			//КонецЦикла;	
		  ///Амбер 24032013 
		      ОбластьПримечание.Параметры.Примечание = Коммент;


		///Амбер  
		ОбластьТовар.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар)
		+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
		+ ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");	
		ТабДокумент.Присоединить(ОбластьТовар);

		Если флВыводитьМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

	
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьПримечание); 

 
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
	ОбластьМест  = Макет.ПолучитьОбласть("Итого|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
   	ОбластьПримечание  = Макет.ПолучитьОбласть("Итого|Примечание");
	ОбластьДанных.Параметры.ВсегоШтук = ЗапросТовары.Итог("Количество");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если флВыводитьМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;

	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьПримечание);
	//// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество(); 
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");

	// Отпуск товара произвел
	Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.Дата);
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		ОбластьМакета.Параметры.ОтветственныйПредставление = ФИООтпускПроизвел;
	КонецЕсли;
    	
	ТабДокумент.Вывести(ОбластьМакета);	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСправа = 0;
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
//	ТабДокумент.Показать(Строка(СсылкаНаОбъект.Ссылка));
Возврат ТабДокумент;
	
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент);

КонецФункции	


Функция ПечатьРасписки (СсылкаНаОбъект, ВыводитьСкладскуюФорму) Экспорт
	Макет = ПолучитьМакет("амбРасписка");
	ТабДок= Новый ТабличныйДокумент;

	Если ВыводитьСкладскуюФорму тогда
		
	ОбластьШК = Макет.ПолучитьОбласть("ШТРИХКОД");
	ЧислоШК = Строка(Прав(СсылкаНаОбъект.Организация.Код,1))+Прав(Год(ССылкаНаОбъект.Дата),1);
	НомерНАкладной  = Строка(Формат(СокрЛП(Сред(СсылкаНаОбъект.Номер,3)),"ЧГ="));
	ЧислоСимволовНомера = СтрДлина(НомерНАкладной);
	ВставкаНулей = "4";
	Для Итератор = ЧислоСимволовНомера+1 по 9 цикл
	ВставкаНулей = ВставкаНулей+"0";	
    КонецЦикла;	

	
	//ОбластьШК.Параметры.ШтрихКод = СформироватьКодEAN13(Число(СокрЛП(Сред(СсылкаНаОбъект.Номер,2))));
	ПредварительныйБАрКод = EAN138(Строка(ЧислоШК)+ВставкаНулей+НомерНАкладной);
	   ОбластьШК.Параметры.ШтрихКод = СформироватьКодEAN13(ПредварительныйБАрКод);
	ТабДок.Вывести(ОбластьШК);
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезервированиеТоваровТовары.НомерСтроки,
	|	РезервированиеТоваровТовары.Номенклатура КАК Номенклатура,
	|	РезервированиеТоваровТовары.Количество,
	|	РезервированиеТоваровТовары.ЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПокупателяТовары.Цена, 0) * ЕСТЬNULL(РезервированиеТоваровТовары.Количество, 0) КАК Сумма,
	|	РезервированиеТоваровТовары.СерийныйНомер
	|ИЗ
	|	Документ.РезервированиеТоваров.Товары КАК РезервированиеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ПО РезервированиеТоваровТовары.Ссылка.Заказ = ЗаказПокупателяТовары.Ссылка
	|			И РезервированиеТоваровТовары.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	|ГДЕ
	|	РезервированиеТоваровТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезервированиеТоваровТовары.Номенклатура.Артикул
	|ИТОГИ ПО
	|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
    ОбластьШапкаТаблицы = Макет.ПолучитьОбласть(?(ВыводитьСкладскуюФорму,"ШапкаТаблицы1","ШапкаТаблицы"));
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть(?(ВыводитьСкладскуюФорму,"ПодвалТаблицы1","ПодвалТаблицы"));
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть(?(ВыводитьСкладскуюФорму,"Детали1","Детали"));   
	ОбластьГрупп = Макет.ПолучитьОбласть("Детали2");
	ОбластьСклад = Макет.ПолучитьОбласть("Склад");

	
	ОбластьЗаголовок.Параметры.Расписка = "Расписка №"+СсылкаНаОбъект.Номер+" от "+Формат(СсылкаНаОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = "Поставщик:" +ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата),"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ОбластьЗаголовок.Параметры.ПредставлениеПолучателя = "Покупатель:"+ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Контрагент, СсылкаНаОбъект.Дата),"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ОбластьЗаголовок.Параметры.Ответственный ="Ответственный: "+ СсылкаНаОбъект.Заказ.Ответственный;

		
	Если ВыводитьСкладскуюФорму тогда                    
	ТабДок.Вывести(ОбластьСклад);	
	КонецЕсли;
	
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
    РезультатГР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СуммаИтог = 0;
	СуммаКолВО = 0;
	СуммаПоз = 0;
	Пока РезультатГР.Следующий() цикл
	ОбластьГрупп.Параметры.Номенклатура = РезультатГР.Номенклатура;
	 Если ВыводитьСкладскуюФорму тогда
	ТабДок.Вывести(ОбластьГрупп);
	КонецЕсли;
		ВыборкаДетали = РезультатГР.Выбрать();

      Пока ВыборкаДетали.Следующий() Цикл
		СуммаИтог = СуммаИтог + ВыборкаДетали.сумма;
		СуммаКолВо = СуммаКолВО + ВыборкаДетали.Количество;
		СуммаПоз = СуммаПоз +1;
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		//Амбер 24032013
		Если ЗначениеЗаполнено(ВыборкаДетали.СерийныйНомер) тогда
		ОбластьДетальныхЗаписей.Параметры.Номенклатура = Строка(ВыборкаДетали.Номенклатура) +" s/n:"+ВыборкаДетали.СерийныйНомер;	
		КонецЕсли;	
		                                                  
		///Амбер 24032013

			//Амбер
		Если ВыводитьСкладскуюФорму тогда
			Серия = "";
			Для Каждого строкаТч из СсылкаНаОбъект.амбСрокиИСерии цикл
				Если СтрокаТч.Номенклатура = ВыборкаДетали.Номенклатура тогда
					Серия = Серия+ "/ Сер:"+строкаТч.СерияНоменклатуры +" Срок:"+Строка(Формат(строкаТч.СрокГодности,"ДФ=dd.MM.yyyy"))+" Кол: " + строкаТч.Количество +Символы.ПС ;					
				КонецЕсли;

				
				ОбластьДетальныхЗаписей.Параметры.СрокиИСерии = Серия;
			КонецЦикла;	
		КонецЕсли;
		Если Не ВыводитьСкладскуюФорму тогда
			Если СсылкаНаОбъект.амбНеВыводитьЦеныДляКлиента тогда
				ОбластьДетальныхЗаписей.Параметры.Цена = "-";
				ОбластьДетальныхЗаписей.Параметры.Сумма = "-";
				СуммаИтог = 0;
			КонецЕсли;	
		КонецЕсли;	

		///Амбер
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;
	КонецЦикла;
	

	    Если не ВыводитьСкладскуюФорму тогда

	    ОбластьПодвалТаблицы.Параметры.сумма  = суммаИтог ;
		ОбластьПодвалТаблицы.Параметры.СтавкаНДС  = "ИТОГО:" ;
		Иначе
		ОбластьПодвалТаблицы.Параметры.Комм = СсылкаНаОбъект.Комментарий; 
		КонецЕсли;
	      
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	//Амбер 23032013
	//Выведем служебную информацию
	Если ВыводитьСкладскуюФорму тогда

	ОбластьТотал = Макет.ПолучитьОбласть("Тотал");
	ОбластьТотал.Параметры.ВсегоПозиций 	= СуммаПоз;
	ОбластьТотал.Параметры.ВсегоКоличество	= СуммаКолВО;
	ОбластьТотал.Параметры.ДатаИВремяПечати	= ТекущаяДата();
	ТабДок.Вывести(ОбластьТотал);
	

	
    КонецЕсли;
	
	///Амбер 23032013

	ТабДок.Вывести(ОбластьПодвал);
	Если ВыводитьСкладскуюФорму тогда
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Комментарий) тогда
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок"); 
	ОбластьЗаголовок.Параметры.Расписка = "(!) "+СсылкаНаОбъект.Комментарий;
	ТабДок.Вывести(ОбластьЗаголовок);
	КонецЕсли;
	КонецЕсли;
                                 
	ТабДок.Показать();
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
КонецФункции	

Функция ПечатьСчета( СсылкаНаОбъект) Экспорт
	Тип = "Счет";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ЗаказПокупателя.Номер,
	              |	ЗаказПокупателя.Дата,
	              |	ЗаказПокупателя.ДоговорКонтрагента,
	              |	ЗаказПокупателя.Организация,
	              |	ЗаказПокупателя.Контрагент КАК Получатель,
	              |	ВЫБОР
	              |		КОГДА ЗаказПокупателя.Грузоотправитель = &ПустойКонтрагент
	              |			ТОГДА ЗаказПокупателя.Организация
	              |		ИНАЧЕ ЗаказПокупателя.Грузоотправитель
	              |	КОНЕЦ КАК Грузоотправитель,
	              |	ВЫБОР
	              |		КОГДА ЗаказПокупателя.Грузополучатель = &ПустойКонтрагент
	              |			ТОГДА ЗаказПокупателя.Контрагент
	              |		ИНАЧЕ ЗаказПокупателя.Грузополучатель
	              |	КОНЕЦ КАК Грузополучатель,
	              |	ЗаказПокупателя.Организация КАК Руководители,
	              |	ЗаказПокупателя.Организация КАК Поставщик,
	              |	ЗаказПокупателя.СуммаДокумента,
	              |	ЗаказПокупателя.ВалютаДокумента,
	              |	ЗаказПокупателя.УчитыватьНДС,
	              |	ЗаказПокупателя.СуммаВключаетНДС
	              |ИЗ
	              |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	              |ГДЕ
	              |	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПокупателя");
	СтрокаВыборкиКорректировкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("КорректировкаЗаказаПокупателя");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.НомерТЧ,
	|	Минимум(ВложенныйЗапрос.ПризнакКорректировка) 	КАК ПризнакКорректировка,
	|	Минимум(ВложенныйЗапрос.НомерСтроки) 			КАК НомерСтроки,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	СУММА(ВложенныйЗапрос.Количество)               КАК КоличествоТовара,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
	|	ВложенныйЗапрос.Цена                            КАК Цена,
	|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
	|	NULL                                            КАК Серия
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                КАК Номенклатура,
	|		ВЫРАЗИТЬ (ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|		ЗаказПокупателя.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.СуммаНДС                    КАК СуммаНДС,
	|		ЗаказПокупателя.Сумма                       КАК Сумма,
	|		ЗаказПокупателя.Количество                  КАК Количество,
	|		(1)                                         КАК НомерТЧ,
	|		(0)                                         КАК ПризнакКорректировка,
	|		ЗаказПокупателя.НомерСтроки 				КАК НомерСтроки
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		КорректировкаЗаказаПокупателя.Номенклатура               КАК Номенклатура,
	|		ВЫРАЗИТЬ (КорректировкаЗаказаПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|		КорректировкаЗаказаПокупателя.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|		КорректировкаЗаказаПокупателя.Цена                       КАК Цена,
	|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки       КАК ПроцентСкидкиНаценки,
	|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		КорректировкаЗаказаПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		КорректировкаЗаказаПокупателя.СуммаНДС                   КАК СуммаНДС,
	|		КорректировкаЗаказаПокупателя.Сумма                      КАК Сумма,
	|		КорректировкаЗаказаПокупателя.Количество                 КАК Количество,
	|	   (1)                                                       КАК НомерТЧ,
	|		(1)                                         			 КАК ПризнакКорректировка,
	|		КорректировкаЗаказаПокупателя.НомерСтроки				 КАК НомерСтроки
	|	ИЗ
	|		Документ.КорректировкаЗаказаПокупателя.Товары КАК КорректировкаЗаказаПокупателя
	|
	|	ГДЕ
	|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура                         КАК Номенклатура,
	|		" + СтрокаВыборкиПоляСодержания + "                  КАК НаименованиеПолное,
	|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                                 КАК Цена,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
	|		NULL                                                 КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.СуммаНДС                             КАК СуммаНДС,
	|		ЗаказПокупателя.Сумма                                КАК Сумма,
	|		ЗаказПокупателя.Количество                           КАК Количество,
	|		(2)                                                  КАК НомерТЧ,
	|		(0)                                         		 КАК ПризнакКорректировка,
	|		ЗаказПокупателя.НомерСтроки 						 КАК НомерСтроки
	|	ИЗ
	|		Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		КорректировкаЗаказаПокупателя.Номенклатура                         КАК Номенклатура,
	|" + СтрокаВыборкиКорректировкиПоляСодержания + "						   КАК НаименованиеПолное,
	|		КорректировкаЗаказаПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		КорректировкаЗаказаПокупателя.Цена                                 КАК Цена,
	|		КорректировкаЗаказаПокупателя.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
	|		КорректировкаЗаказаПокупателя.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
	|		NULL                                                               КАК ХарактеристикаНоменклатуры,
	|		КорректировкаЗаказаПокупателя.СуммаНДС                             КАК СуммаНДС,
	|		КорректировкаЗаказаПокупателя.Сумма                                КАК Сумма,
	|		КорректировкаЗаказаПокупателя.Количество                           КАК Количество,
	|		(2)                                                                КАК НомерТЧ,
	|		(1)                                         					   КАК ПризнакКорректировка,
	|		КорректировкаЗаказаПокупателя.НомерСтроки				 		   КАК НомерСтроки
	|	ИЗ
	|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК КорректировкаЗаказаПокупателя
	|
	|	ГДЕ
	|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
	|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
	|";
	
	Если Тип <> "Счет" Тогда
		ТекстЗапроса = ТекстЗапроса +
		" 
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|		ЗаказПокупателя.Номенклатура                КАК Номенклатура,
		|		ВЫРАЗИТЬ (ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|		ЗаказПокупателя.Цена                        КАК Цена,
		|		0									        КАК ПроцентСкидкиНаценки,
		|		0 											КАК ПроцентАвтоматическихСкидок,
		|		NULL 										КАК ХарактеристикаНоменклатуры,
		|		0						                    КАК СуммаНДС,
		|		ЗаказПокупателя.Сумма                       КАК Сумма,
		|		ЗаказПокупателя.Количество                  КАК Количество,
		|		(3)                                         КАК НомерТЧ,
		|		(0)                                         КАК ПризнакКорректировка,
		|		ЗаказПокупателя.НомерСтроки 				КАК НомерСтроки
		|	ИЗ
		|		Документ.ЗаказПокупателя.ВозвратнаяТара КАК ЗаказПокупателя
		|
		|	ГДЕ
		|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КорректировкаЗаказаПокупателя.Номенклатура               КАК Номенклатура,
		|		ВЫРАЗИТЬ (КорректировкаЗаказаПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		КорректировкаЗаказаПокупателя.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|		КорректировкаЗаказаПокупателя.Цена                       КАК Цена,
		|		0														 КАК ПроцентСкидкиНаценки,
		|		0														 КАК ПроцентАвтоматическихСкидок,
		|		NULL 													 КАК ХарактеристикаНоменклатуры,
		|		0														 КАК СуммаНДС,
		|		КорректировкаЗаказаПокупателя.Сумма                      КАК Сумма,
		|		КорректировкаЗаказаПокупателя.Количество                 КАК Количество,
		|	   (3)                                                       КАК НомерТЧ,
		|		(1)                                         			 КАК ПризнакКорректировка,
		|		КорректировкаЗаказаПокупателя.НомерСтроки				 КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.ВозвратнаяТара КАК КорректировкаЗаказаПокупателя
		|
		|	ГДЕ
		|		КорректировкаЗаказаПокупателя.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И КорректировкаЗаказаПокупателя.Ссылка.Проведен      = Истина
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса+
	"
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НомерТЧ,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
	|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.НаименованиеПолное
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерТЧ, ПризнакКорректировка, НомерСтроки
	|";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	
	Если Тип = "Счет" Тогда
		Макет = ПолучитьМакет("СчетЗаказ");
	Иначе
		Макет = ПолучитьМакет("СчетЗаказ");
	КонецЕсли;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СсылкаНаОбъект.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СсылкаНаОбъект.СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СсылкаНаОбъект.СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = СсылкаНаОбъект.СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	 //Амбер 101
	//Если Госконтракт, тогда выводим дополнительную информацию
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Контракт) и ЗначениеЗаполнено(СсылкаНаОбъект.Контракт.НомерГосконтракта) тогда	
		ОбластьГК = Макет.ПолучитьОбласть("ГК");
		ОбластьГК.Параметры.Госконтракт = ?(СсылкаНаОбъект.Контракт.Муниципальный,"По Муниципальному контракту №","По Государственному контракту №")+Строка(СсылкаНаОбъект.Контракт.НомерГосконтракта)+" от "+Формат(СсылкаНаОбъект.Контракт.ДатаГосконтакта,"ДЛФ=DD");
		Если СсылкаНаОбъект.Контракт.ПоГражданскоПравовомуДоговору тогда
		ОбластьГК.Параметры.Госконтракт	= "По гражданско-правовому договору №"+Строка(СсылкаНаОбъект.Контракт.НомерГосконтракта)+" от "+Формат(СсылкаНаОбъект.Контракт.ДатаГосконтакта,"ДЛФ=DD");
	КонецЕсли;
			Если СсылкаНаОбъект.Контракт.ПоДоговору тогда
		ОбластьГК.Параметры.Госконтракт	= "По Договору №"+Строка(СсылкаНаОбъект.Контракт.НомерГосконтракта)+" от "+Формат(СсылкаНаОбъект.Контракт.ДатаГосконтакта,"ДЛФ=DD");
	КонецЕсли;	
		Если СсылкаНаОбъект.Контракт.ПоКонтракту тогда
		ОбластьГК.Параметры.Госконтракт	= "По Контракту №"+Строка(СсылкаНаОбъект.Контракт.НомерГосконтракта)+" от "+Формат(СсылкаНаОбъект.Контракт.ДатаГосконтакта,"ДЛФ=DD");
		КонецЕсли;	

		ТабДокумент.Вывести(ОбластьГК);
	КонецЕсли;	
	///Амбер


	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПоставщик = "Поставщик:";
		Если Шапка.Организация = Шапка.Грузоотправитель Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		Иначе
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,");
		КонецЕсли;
	Иначе
		ОбластьМакета.Параметры.ТекстПоставщик = "Исполнитель:"
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПокупатель = "Покупатель:";
		
		НаимГр =ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,");
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект.ДоговорКонтрагента.НомерЛС) Тогда
		Вставка = СсылкаНаОбъект.ДоговорКонтрагента.НомерЛС.КомментарийКСчету;
		НомерСтрокиИНН = Найти(НаимГр, ", ИНН");
		ДлинаИНН =  СтрДлина(НаимГР);

		НаимГр = Лев(НаимГр, НомерСтрокиИНН)+" "+вставка+" " +прав(НаимГр, ДлинаИНН-НомерСтрокиИНН);
		КонецЕсли;
			
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя =НаимГр ;
		
	Иначе
		ОбластьМакета.Параметры.ТекстПокупатель = "Заказчик:"
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
    //Амбер 101 23 янв 09
	ОбластьНДС = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьНДС"); 
	//)Амбер 101 23 янв 09

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)";
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);
    	//Амбер 101 23 янв 09
		Если СсылкаНаОбъект.УчитыватьНДС тогда
			ТабДокумент.Присоединить(ОбластьНДС);
		КонецЕсли;	
	//)Амбер 101 23 янв 09

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	//Амбер 101 23 янв 09
	ОбластьНДС = Макет.ПолучитьОбласть("Строка|ОбластьНДС"); 
	//)Амбер 101 23 янв 09

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НумераторСтрок = 0;
    	//Амбер 101 230109
	ст10 = Перечисления.СтавкиНДС.НДС10;
	ст10_110 = Перечисления.СтавкиНДС.НДС10_110;
	ст18 = Перечисления.СтавкиНДС.НДС18;
	ст18_118 = Перечисления.СтавкиНДС.НДС18_118;
	ст20 = Перечисления.СтавкиНДС.НДС20;
	ст20_120 = Перечисления.СтавкиНДС.НДС20_120;
	Сумма10 = 0;	
	Сумма10_110 = 0;
	Сумма18 = 0;
	Сумма18_118 = 0;
	Сумма20 = 0;
	Сумма20_120 = 0;
	//)Амбер 101 230109

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.КоличествоТовара = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		НумераторСтрок = НумераторСтрок + 1;
		ОбластьНомера.Параметры.НомерСтроки = НумераторСтрок;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
																+ ?(ВыборкаСтрокТовары.НомерТЧ = 3, " (возвратная тара)", "");
		//Амбер
		//Заменим данные в параметре товар и единица измерения, если он изменен в контракте.
		//Параметры макета: ТОВАР, ЕдиницаИзмерения.
		//Выгрузим в табицу значений данные по замене наименований из контракта.
	 ЕстьКонтракт = ЗначениеЗаполнено(СсылкаНаОбъект.Контракт);
 	 ИспользоватьЗаменуПоКонтракту = Ложь;   

	 Если ЕстьКонтракт тогда
		   Запрос = Новый Запрос;
		   Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                  |	КонтрактТовары.НаименованиеДляДокументов,
		                  |	ПРЕДСТАВЛЕНИЕ(КонтрактТовары.Номенклатура.НаименованиеПолное) КАК НаименованиеПолное,
		                  |	КонтрактТовары.ЕдиницаИзмерения
		                  |ИЗ
		                  |	Документ.Контракт.Товары КАК КонтрактТовары
		                  |ГДЕ
		                  |	КонтрактТовары.Ссылка = &Ссылка";
		   
		   Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.Контракт );
		   
		   Результат = Запрос.Выполнить();
		   Выборка = Результат.Выбрать();
		   ИспользоватьЗаменуПоКонтракту = Ложь;
		   
		     
		  //Пока Выборка.Следующий() Цикл
		   //  Если Не Выборка.НаименованиеДляДокументов="" Тогда
		   	  ИспользоватьЗаменуПоКОнтракту = Истина;		   	
		   //	 КонецЕсли;
		   //КонецЦикла;
			  //Если ИспользоватьЗаменуПоКонтракту ТОгда
			    ТаблицаСЗаменойНоменклатуры = Результат.Выгрузить();
			//КонецЕсли;   


	 КонецЕсли; 
	 
	//Амбер
		//
		//Заменим наименование на контрактное
		НаименованиеТовараСтроки = СокрЛП(ВыборкаСтрокТовары.НаименованиеПолное);
		//Пробуем найти в таблице замены альтиернативное наименование
		Если ИспользоватьЗаменуПоКонтракту Тогда
			НайденнаяСтрока = ТаблицаСЗаменойНоменклатуры.Найти(НаименованиеТовараСтроки,"НаименованиеПолное");
			Если не НайденнаяСтрока = Неопределено тогда
				//Переименуем единицу измерения
				НаименованиеЕдиницыСтроки = Строка(НайденнаяСтрока.ЕдиницаИзмерения);
				//ОбластьТовар.Параметры.ЕдиницаИзмерения = НаименованиеЕдиницыСтроки;
										
				//Переименуем полное наименование


				Если не НайденнаяСтрока.НаименованиеДляДокументов = ""  тогда
					НаименованиеТовараСтроки= НайденнаяСтрока.НаименованиеДляДокументов;	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
 
		ОбластьТовар.Параметры.Товар= СокрЛП(НаименованиеТовараСтроки);
		///Амбер
	
														
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Количество = ВыборкаСтрокТовары.КоличествоТовара;
		//Амбер
		Если ЕстьКонтракт  тогда
			ОбластьДанных.Параметры.ЕдиницаИзмерения = НаименованиеЕдиницыСтроки;
		КонецЕсли;	
		///Амьер
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);

		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
       	//Амбер 101 230109
	//ст10 	ст10_110  	ст18 	ст18_118  	ст20  	ст20_120 	
	 ТекСтавкаНДС = ВыборкаСтрокТовары.Номенклатура.СтавкаНДС;
	 ТекСуммаНДС = ВыборкаСтрокТовары.СуммаНДС; 
	 Если ТекСтавкаНДС = ст10 Тогда
	Сумма10 =Сумма10 +ТекСуммаНДС;
	ИначеЕсли ТекСтавкаНДС =ст10_110  Тогда
	Сумма10_110 =Сумма10_110+ТекСуммаНДС ;
	ИначеЕсли ТекСтавкаНДС =ст18  Тогда 
	Сумма18 =Сумма18 +ТекСуммаНДС ;
	 ИначеЕсли ТекСтавкаНДС = ст18_118 Тогда 
	Сумма18_118 =Сумма18_118+ТекСуммаНДС ;     
	 ИначеЕсли ТекСтавкаНДС = ст20 Тогда 
	Сумма20 =Сумма20+ТекСуммаНДС ;
	 ИначеЕсли ТекСтавкаНДС = ст20_120 Тогда 
	Сумма20_120 = Сумма20_120+ТекСуммаНДС;
	КонецЕсли;
	//)Амбер 101 230109

	       	//Амбер 101 23 янв 09
			Если СсылкаНаОбъект.УчитыватьНДС тогда

		ОбластьНДС.Параметры.НДССтавка = ТекСтавкаНДС ;
		ТабДокумент.Присоединить(ОбластьНДС);
		Конецесли;
	   //)Амбер 101 23 янв 09
	   
   КонецЦикла;


	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
    	//Амбер 101 23 янв 09
	ОбластьНДС = Макет.ПолучитьОбласть("Итого|ОбластьНДС"); 
	//)Амбер 101 23 янв 09


	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);
        //Амбер 101 23 янв 09  	
		Если СсылкаНаОбъект.УчитыватьНДС тогда

		ТабДокумент.Присоединить(ОбластьНДС);
		КонецЕсли;
	   //)Амбер 101 23 янв 09

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС И ЗапросТовары.Количество()>0 Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
//Амбер 101 23 янв 2009
		 /////////////////////////////////////////////////////////////
		Если Сумма10 >0 Тогда 
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;      

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.НДС = "В том числе НДС 10%:";		
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		// Сумма
		ОбластьСуммы.Параметры.ВсегоНДС = Сумма10;
		ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
				 /////////////////////////////////////////////////////////////
		Если Сумма10_110 >0 Тогда 
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;      

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.НДС = "В том числе НДС 10/110%:";		
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
				// Сумма
		ОбластьСуммы.Параметры.ВсегоНДС = Сумма10_110;
		ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		 /////////////////////////////////////////////////////////////
		Если Сумма18 >0 Тогда 
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;      

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.НДС = "В том числе НДС 18%:";		
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
				// Сумма
		ОбластьСуммы.Параметры.ВсегоНДС = Сумма18;
		ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		 /////////////////////////////////////////////////////////////
		Если Сумма18_118 >0 Тогда 
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;      

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.НДС = "В том числе НДС 18/118%:";		
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
				// Сумма
		ОбластьСуммы.Параметры.ВсегоНДС = Сумма18_118;
		ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		 /////////////////////////////////////////////////////////////
		Если Сумма20 >0 Тогда 
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;      

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.НДС = "В том числе НДС 20%:";		
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
				// Сумма
		ОбластьСуммы.Параметры.ВсегоНДС = Сумма20;
		ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
		 /////////////////////////////////////////////////////////////
		Если Сумма20_120 >0 Тогда 
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;      

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.НДС = "В том числе НДС 20/120%:";		
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
				// Сумма
		ОбластьСуммы.Параметры.ВсегоНДС = Сумма20_120;
		ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
//////////////////////////////			
//)Амбер 101 23 янв 2009
		
	
	
       
		
		Если Тип = "Счет" Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ВсегоКОплате|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ВсегоКОплате|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ВсегоКОплате|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ВсегоКОплате|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ВсегоКОплате|Сумма");

			ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|Товар");
			Если Не ВыводитьКоды И ЕстьСкидки Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодов");
			ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезСкидок");
			ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодовИСкидок");
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьТовар);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоКОплате = ОбщегоНазначения.ФорматСумм(Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + НумераторСтрок
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	//Амбер 101 23 янв 09
	//Выводим в счет подпись внимание
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Внимание");
		ТабДокумент.Вывести(ОбластьМакета); 
	КонецЕсли; 	
	//)Амбер 101 23 янв 09

	// Вывести подписи
	Если Тип = "Счет" Тогда
					  ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		

		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		ДолжностьРуководителя = Руководители.РуководительДолжность;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  		= Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя  	= ДолжностьРуководителя;
		ОбластьМакета.Параметры.ФИОБухгалтера    		= Бухгалтер;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект.Ответственный.ФизЛицо) Тогда
			ФИООтветственный = СсылкаНаОбъект.Ответственный.Наименование;
		Иначе
			ФамилияИмяОтчествоФизЛица      	 = ФормированиеПечатныхФорм.ФамилияИмяОтчество(СсылкаНаОбъект.Ответственный.ФизЛицо, Шапка.Дата);
			ФамилияИмяОтчествоОтветственного = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтветственный         		 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтветственного);
		КонецЕсли;
		ОбластьМакета.Параметры.ФИООтветственный = ФИООтветственный;

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

Функция ПечатьУпаковочного(СсылкаНаРеализацию) Экспорт    
	ТабДок = Новый ТабличныйДокумент;
	СчетчикКоличества=0;
	СчетчикСтрок = 0;
	Макет = ПолучитьМакет("УпаковочныйЛист");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК N,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдИзм
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаРеализацию);

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ОбластьЗаголовок.Параметры.Заголовок 		= "Упаковочный лист № "	+ СсылкаНаРеализацию.Номер + " от " + СсылкаНаРеализацию.Дата;
	ОбластьЗаголовок.Параметры.Грузополучатель 	= "Грузополучатель "	+
	?(ЗначениеЗаполнено(СсылкаНаРеализацию.Грузополучатель), СсылкаНаРеализацию.Грузополучатель.НаименованиеПолное, СсылкаНаРеализацию.Контрагент.НаименованиеПолное);
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
		СчетчикКоличества = СчетчикКоличества + ВыборкаДетальныеЗаписи.Количество;
		СчетчикСтрок 	  = СчетчикСтрок	  + 1;
		
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ОбластьПодвалТаблицы.Параметры.Количество = СчетчикКоличества;
	ОбластьПодвал.Параметры.Всего 			  = "Всего наименований: " + СчетчикСтрок ;
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
    Возврат ТабДок;


КонецФункции

Функция ПолучитьСписокДоступныхПринтеров()Экспорт
		
		Список = Новый СписокЗначений;
   
        Попытка
            КОМОбъект =  Новый COMОбъект ("WScript.Network");
            Принтеры =  КОМОбъект.EnumPrinterConnections();
            шшш = 0;
            Пока шшш < Принтеры.Count()-1 Цикл
                Список.Добавить(Принтеры.Item(шшш+1), Принтеры.Item(шшш+1));
                шшш = шшш + 2;
            КонецЦикла;
        Исключение
            Сообщить(ОписаниеОшибки());
        КонецПопытки;
  
    возврат Список;
КонецФункции

Функция ПечататьСчет(ЗаказПокупателя, реализ)Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен = ИСТИНА
	               |	И РеализацияТоваровУслуг.Сделка = &ЗаказПокупателя
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РеализацияТоваровУслуг.Дата";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Ссылка<>Реализ тогда
			Возврат ЛОЖЬ;
		Иначе
			Возврат ИСТИНА;
		КонецЕсли;	
	Иначе
		Возврат ИСТИНА;	
	КонецЕсли;	
	
КонецФункции

Функция СчетФактура(Реализация)Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Реализация );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;                                                 		
	
КонецФункции

Функция ПечатьАктаАналитики(Реализация) Экспорт
	
	Макет = ЭтотОбъект.ПолучитьМакет("АктАналитика");
	ТабДок = Новый ТабличныйДокумент;
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьУслуга = Макет.ПолучитьОбласть("Услуга");
	ОбластьУслугаСостав = Макет.ПолучитьОбласть("Состав");
	ОбластьЗаголовокЗапчасть = Макет.ПолучитьОбласть("ЗаголовокЗапчастей");
	ОбластьЗапчасть = Макет.ПолучитьОбласть("Запчасть");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ПолеСлева = 20;
	ТабДок.ПолеСправа = 5;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьЗаголовок.Параметры.Заголовок = "Акт об оказании услуг №"+ ПолучитьНомерНаПечать(Реализация.Ссылка)+ " от "+Формат(Реализация.Дата,"ДЛФ=DD");
	Если ЗначениеЗаполнено(Реализация.Сделка.Контракт) тогда
	КонтрактДоговор = "к контракту №" + Реализация.Сделка.Контракт.НомерГосконтракта+ " от "+Формат(Реализация.Сделка.Контракт.ДатаГосконтакта,"ДЛФ=DD");   
	Иначе
	КонтрактДоговор = "по договору №"+ Реализация.ДоговорКонтрагента.Наименование+".";
	КонецЕсли;
	ОбластьЗаголовок.Параметры.КонтрактДоговор = КонтрактДоговор;  
    ОбластьЗаголовок.Параметры.РеквизитыЗакзачика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Реализация.Контрагент, Реализация.Дата));
	ОбластьЗаголовок.Параметры.ДатаОказанияУслуг = Формат(Реализация.ДоговорКонтрагента.Дата,"ДЛФ=DD"); 
	ТабДок.Вывести(ОбластьЗаголовок);
	НомерПрибора = 0;
	Для Каждого СтрокаТЧ из Реализация.Сделка.Приборы цикл
	НомерПрибора = НомерПрибора+1;	
	ОбластьУслуга.Параметры.Услуга = Формат(НомерПрибора,"ЧДЦ=0")+". " +СтрокаТЧ.Прибор.ВидРабот;
	ТабДок.Вывести(ОбластьУслуга);
	ОбластьУслугаСостав.Параметры.Состав = СтрокаТЧ.Прибор.РегламентныеРаботы +Символы.ПС +СтрокаТЧ.ДопИнфо+".";
	ТабДок.Вывести(ОбластьУслугаСостав);
	ТабДок.Вывести(ОбластьЗаголовокЗапчасть);
	НомерЗапчасти = 0;    
	ТекПрибор = СтрокаТЧ.Прибор;
	Для каждого СтрокаЗЧ из Реализация.Сделка.Материалы цикл
			НомерЗапчасти = НомерЗапчасти +1;
			//Выведем запчасти прибора
		Если СтрокаЗЧ.ДляПрибора = ТекПрибор  Или  ТекПрибор = Справочники.Приборы.ПустаяСсылка() тогда
			ОбластьЗапчасть.Параметры.Запчасти = Формат(НомерЗапчасти,"ЧДЦ=0")+". " +СтрокаЗЧ.Материал.НаименованиеПолное+"  "+СтрокаЗЧ.Количество+" "+СтрокаЗЧ.ЕдиницаИзмерения; 
			ТабДок.Вывести(ОбластьЗапчасть);   			
		КонецЕсли;	
	КонецЦикла;	                                
	КонецЦикла;	
    ОбластьПодвал.Параметры.Итог = "Всего оказано услуг на сумму "+ Формат(Реализация.Услуги.Итог("Сумма"),"ЧДЦ=2")+" руб. "+ 	ЧислоПрописью(Реализация.Услуги.Итог("Сумма"),,"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	ОбластьПодвал.Параметры.Должность= "___________________";
 

	ОбластьПодвал.Параметры.Подпись= "___________________";
    ТабДок.Вывести(ОбластьПодвал);
	ТабДок.Показать();

КонецФункции

Функция ПолучитьНомерНаПечать(Документ) Экспорт

	Если Документ = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;

	Номер = СокрЛП(Документ.Номер);

	Префикс = "";
	Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса") Тогда

		Если  ЗначениеЗаполнено(Документ.Организация) Тогда
			Префикс = СокрЛП(Документ.Организация.Префикс);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Документ) = Тип("Структура") Тогда

		Префикс     = СокрЛП(Документ.Организация.Префикс);

	Иначе

		МетаданныеДокумента = Документ.Метаданные();

		
			Если  ЗначениеЗаполнено(Документ.Организация) Тогда
				Префикс = СокрЛП(Документ.Организация.Префикс);
			КонецЕсли;

		
	КонецЕсли;

	// удаление префикса из номера документа
	Если Найти(Номер, Префикс)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(Префикс)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер=Сред(Номер, 2);
	КонецЦикла;

	Возврат Номер;

КонецФункции

Функция ПолучитьРуководителяОрганизации(Орг, ДатаПолучения, Коротко = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&Дата, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаПолучения);   
	Запрос.УстановитьПараметр("Организация",Орг);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Коротко  тогда
			ПолноеИмя = СокрЛП(Выборка.ФизическоеЛицо.Наименование);
			//Отредем фамилию 
			ПозицияПробела = Найти(ПолноеИмя, " ");
			Фам = Лев(ПолноеИмя, ПозицияПробела-1);
			ПолноеИмя =  Сред(ПолноеИмя, ПозицияПробела+1);
			Им = Лев(ПолноеИмя, 1);
			ПозицияПробела = Найти(ПолноеИмя, " ");
		    отч = Сред(ПолноеИмя, ПозицияПробела+1, 1); 
			
			Возврат Фам+" "+Им +". "+ Отч+".";
			
		Иначе	
			Возврат Выборка.ФизическоеЛицо;
		КонецЕсли;
	Иначе
        Возврат " ";
	
	КонецЕсли;
	
	
КонецФункции




////////////////////////Работа со штрих-кодом//////////////////////////////////////

// Используется шрифт BearRock (EanBwrP36Tt) - EAN13 
Функция РазбСтроки(ИсхСтр) 
    В = "";
    Поз = Найти(ИсхСтр, ";");
    Если Поз <> 0 Тогда
        В = Лев(ИсхСтр, Поз - 1);
        ИсхСтр = Прав(ИсхСтр, СтрДлина(ИсхСтр) - Поз);
    КонецЕсли;
    Возврат В;
КонецФункции
//•••
Функция ДобавитьСлева(Стр1, Длн, Стр2)
    Стр0 = Стр1;
    Пока СтрДлина(Стр0) <= Длн
    Цикл
        Стр0 = Стр2 + Стр0;
    КонецЦикла;
    Стр0 = Прав(Стр0, Длн);
    Возврат Стр0;
КонецФункции
//•••
Функция ЦифрыВБуквыВерхнегоРегистра(Цифра)
    БуквыВерхнегоРегистра = "ABCDEFGHIJ";
    Цифра = Число(Прав(Цифра,1));
    Стр = Сред(БуквыВерхнегоРегистра, Цифра + 1, 1);
    Возврат Стр;
КонецФункции
//•••
Функция ЦифрыВБуквыНижнегоРегистра(Цифра)
    БуквыНижнегоРегистра = "abcdefghij";
    Цифра = Число(Прав(Цифра,1));
    Стр = Сред(БуквыНижнегоРегистра, Цифра + 1, 1);
    Возврат Стр;
КонецФункции
//•••
Функция ПроверкаЧетности(Код) 
    четн = 0;
    неч  = 0;
    Для Поз = 1 По Окр(СтрДлина(Код) / 2 + 0.1,0)
    Цикл
        неч  = неч  + Сред(Код, Поз * 2 - 1, 1);
        Если Поз * 2 <= СтрДлина(Код)
        Тогда
            четн = четн + Сред(Код, Поз * 2, 1);
        КонецЕсли;
    КонецЦикла;
    КодЧетности = Число(Прав(Строка(1000 - четн - неч * 3), 1));
    Возврат КодЧетности;
КонецФункции
//•••  
Функция EAN13(Код) Экспорт
    // Вычисляет контрольную цифру EAN-13/EAN-8  GOAN
    // Возвращает штрих-код с контрольной цифрой (с) 1С-Рарус
    //ШтрКод=Формат(Число(Код),"Ч(0)"+?(СтрДлина(Код)<8,"7","12")); // для 1cv77
    ШтрКод=Код;                                                     // для 1cv80
    Четн = 0; Нечетн = 0;
    Если СтрДлина(Код)=7 Тогда Итераций = 4; Иначе Итераций = 6; КонецЕсли;
    Для Индекс=1 По Итераций Цикл
        Четн=Четн+Сред(ШтрКод,2*Индекс,1);
        Нечетн=Нечетн+Сред(ШтрКод,2*Индекс-1,1);
    КонецЦикла;
    Если СтрДлина(Код)=7 Тогда Нечетн=Нечетн*3; Иначе Четн=Четн*3; КонецЕсли;
    КонтЦифра=10-(Четн+Нечетн)%10;
    Если КонтЦифра=10 Тогда КонтЦифра=0;КонецЕсли;
    Рез=Код+Строка(КонтЦифра);
    Возврат Рез;
    
КонецФункции // EAN13

Функция EAN138(Код) Экспорт
    
    ШтрКод = Код;
    Нечетн = 0;
    Четн   = 0;
    Если СтрДлина(Код) = 7 Тогда
        Для Индекс = 1 По 3 Цикл
            Нечетн = Нечетн + Сред(ШтрКод, 2 * Индекс - 1, 1);
            Четн = Четн + Сред(ШтрКод, 2 * Индекс, 1);
        КонецЦикла;        
        Нечетн = Нечетн + Сред(ШтрКод, 2 * 4 - 1, 1);
        Нечетн = Нечетн * 3;
    ИначеЕсли СтрДлина(Код) = 12 Тогда
        Для Индекс = 1 По 6 Цикл
            Нечетн = Нечетн + Сред(ШтрКод, 2 * Индекс - 1, 1);
            Четн = Четн + Сред(ШтрКод, 2 * Индекс, 1);
        КонецЦикла;
        Четн = Четн * 3;
    Иначе
        Сообщить("Че то тут не так...");
    КонецЕсли;
    КонтЦифра = 10 - (Четн + Нечетн) % 10;
    Если КонтЦифра = 10 Тогда КонтЦифра = 0;КонецЕсли;
    Рез = Код + Строка(КонтЦифра);
    Возврат Рез;
    
КонецФункции // EAN13
//•••
Функция СформироватьКодEAN13(код) Экспорт

    ПервыйФлаг = Число(Сред(код,1,1));
    левстр     = Сред(код,2,6);
    правстр    = Сред(код,8,6);
    правкод = "";
    Для Поз = 1 По 6
    Цикл
        правкод = правкод + ЦифрыВБуквыНижнегоРегистра(Сред(правстр,Поз,1));
    КонецЦикла;
    //  Формируем левую часть кода в зависимости от значениа ПервыйФлаг
    Если      ПервыйФлаг = 0
    Тогда //••• 0 ••• AAAAA •••
        левкод = "#!"+Лев(левстр,1)+Сред(левстр,2,1)+Сред(левстр,3,1)+Сред(левстр,4,1)+Сред(левстр,5,1)+Сред(левстр,6,1);
    ИначеЕсли ПервыйФлаг = 1
    Тогда //••• 1 ••• AABABB •••
        левкод = "$!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
    ИначеЕсли ПервыйФлаг = 2
    Тогда //••• 2 ••• AABBAB •••
        левкод = "%!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+Сред(левстр,5,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
    ИначеЕсли ПервыйФлаг = 3
    Тогда //••• 3 ••• AABBBA •••
        левкод = "&!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+Сред(левстр,6,1);
    ИначеЕсли ПервыйФлаг = 4
    Тогда //••• 4 ••• ABAABB •••
        левкод = "'!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+Сред(левстр,4,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
    ИначеЕсли ПервыйФлаг = 5
    Тогда //••• 5 ••• ABBAAB •••
        левкод = "(!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1)+Сред(левстр,5,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
    ИначеЕсли ПервыйФлаг = 6
    Тогда //••• 6 ••• ABBBAA •••
        левкод = ")!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+Сред(левстр,5,1)+Сред(левстр,6,1);
    ИначеЕсли ПервыйФлаг = 7
    Тогда //••• 7 ••• ABABAB •••
        левкод = "*!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+Сред(левстр,5,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,6,1));
    ИначеЕсли ПервыйФлаг = 8
    Тогда //••• 8 ••• ABABBA •••
        левкод = "+!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+Сред(левстр,6,1);
    ИначеЕсли ПервыйФлаг = 9
    Тогда //••• 9 ••• ABBABA •••
        левкод = ",!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,5,1))+Сред(левстр,6,1);
    КонецЕсли;
    // Возвращаем результат
    кодстр = левкод + "-" + правкод + "!";
    Возврат кодстр;
КонецФункции

Функция СформироватьКодEAN8(код)
    
    // работает только если ШК начинается на 2, на остальных - надо подправлять код 1с
    ПервыйФлаг = Число(Сред(код,1,1));
    левстр     = Сред(код,1,4);
    правстр    = Сред(код,5,4);
    правкод = "";
    Для Поз = 1 По 4 Цикл
        правкод = правкод + ЦифрыВБуквыНижнегоРегистра(Сред(правстр,Поз,1));
    КонецЦикла;
    //  Формируем левую часть кода в зависимости от значениа ПервыйФлаг
    Если      ПервыйФлаг = 0
    Тогда //••• 0 ••• AAAAA •••
        левкод = "#!"+Лев(левстр,1)+Сред(левстр,2,1)+Сред(левстр,3,1)+Сред(левстр,4,1);
    ИначеЕсли ПервыйФлаг = 1
    Тогда //••• 1 ••• AABABB •••
        левкод = "$!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1);
    ИначеЕсли ПервыйФлаг = 2
    Тогда //••• 2 ••• AABBAB •••
        //левкод = "%!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1));
        левкод = "%!"+Лев(левстр,1)+Сред(левстр,2,1)+Сред(левстр,3,1)+Сред(левстр,4,1);
    ИначеЕсли ПервыйФлаг = 3
    Тогда //••• 3 ••• AABBBA •••
        левкод = "&!"+Лев(левстр,1)+Сред(левстр,2,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1));
    ИначеЕсли ПервыйФлаг = 4
    Тогда //••• 4 ••• ABAABB •••
        левкод = "'!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+Сред(левстр,4,1);
    ИначеЕсли ПервыйФлаг = 5
    Тогда //••• 5 ••• ABBAAB •••
        левкод = "(!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1);
    ИначеЕсли ПервыйФлаг = 6
    Тогда //••• 6 ••• ABBBAA •••
        левкод = ")!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1));
    ИначеЕсли ПервыйФлаг = 7
    Тогда //••• 7 ••• ABABAB •••
        левкод = "*!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1));
    ИначеЕсли ПервыйФлаг = 8
    Тогда //••• 8 ••• ABABBA •••
        левкод = "+!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+Сред(левстр,3,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,4,1));
    ИначеЕсли ПервыйФлаг = 9
    Тогда //••• 9 ••• ABBABA •••
        левкод = ",!"+Лев(левстр,1)+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,2,1))+ЦифрыВБуквыВерхнегоРегистра(Сред(левстр,3,1))+Сред(левстр,4,1);
    КонецЕсли;
    
    левкод = Сред(левкод, 2);
    
    // Возвращаем результат
    кодстр = левкод + "-" + правкод + "!";
    Возврат кодстр;
    
КонецФункции

//••••••••••••••••••••••••••••••••••••••••••••••••
Функция СформироватьШтрихкод(ШтрихКодНовый)
    
    //ВремКод = EAN13(ШтрихКодНовый);
    ВремКод = EAN138(ШтрихКодНовый);
    Если Не ИСТИНА Тогда
        БарКод  = СформироватьКодEAN13(ВремКод);
    Иначе
        БарКод  = СформироватьКодEAN8(ВремКод);
    КонецЕсли;
    ШтрихКодНовый = ВремКод; // Возвращаем вместе с последним разрядом
    Возврат БарКод;
    
КонецФункции 

//только для целых чисел
Функция ПолучитьСлучайноеЧисло(Мин, Макс)
    
    //вместо Randomize
    Для н = 1 По 100 Цикл
        Уник = Новый УникальныйИдентификатор;
    КонецЦикла; 
    
        //генерируем GUID
    Уник = СокрЛП(Новый УникальныйИдентификатор);

        //оставляем только цифры
    Уник = СтрЗаменить(Уник,"-","");
    Уник = СтрЗаменить(Уник,"a","");
    Уник = СтрЗаменить(Уник,"b","");
    Уник = СтрЗаменить(Уник,"c","");
    Уник = СтрЗаменить(Уник,"d","");
    Уник = СтрЗаменить(Уник,"e","");
    Уник = СтрЗаменить(Уник,"f","");

    //знаменатель должен иметь такое же количество нулей + 1
    Знаменатель = 10;
    Для н = 2 По (СтрДлина(СтрЗаменить(Уник,Символы.НПП,""))) Цикл
        Знаменатель = Знаменатель * 10;
    КонецЦикла; 
    
    Случ = Число(Уник) / Знаменатель; //здесь получается дробное случайное число от 0 до 1
    
    //преобразуем его в случайное число из заданного интервала, округляем до целого
    ЧислоИзИнтервала = Мин(Макс(Окр(Мин + (Макс-Мин)*Случ),Мин),Макс);
    
    Возврат ЧислоИзИнтервала;

КонецФункции

Функция ПолучитьСлучайныйШК(ЧислоШК)
    
    Если Не ИСТИНА Тогда
        ЧислоШК = Формат(ПолучитьСлучайноеЧисло(100000000000, 999999999999), "ЧГ=0"); // пока 12 разрядов
    Иначе
        ЧислоШК = Формат(ПолучитьСлучайноеЧисло(2800000, 2899999), "ЧГ=0"); // пока 7 разрядов
    КонецЕсли;
    ШК = СформироватьШтрихкод(ЧислоШК); // Теперь ЧислоШК - 13 (8) разрядное
    Возврат ШК;
    
КонецФункции

Процедура КнопкаВыполнитьНажатие(Кнопка)
    
    Перем ЧислоШК;
    
    ТабДокумент = Новый ТабличныйДокумент;
    Если Не ИСТИНА Тогда
        Макет = ПолучитьМакет("Макет");
    Иначе
        Макет = ПолучитьМакет("EAN8");
    КонецЕсли;    
    ОбластьМакета = Макет.ПолучитьОбласть("ШК");
    
    Для К = 1 По 2 Цикл
        ОбластьМакета.Параметры.ШК = ПолучитьСлучайныйШК(ЧислоШК);
        Если Не ИСТИНА Тогда
            ОбластьМакета.Параметры.ЧислоШК = ЧислоШК;
        КонецЕсли;    
        ТабДокумент.Вывести(ОбластьМакета);
    КонецЦикла;

    ТабДокумент.ОтображатьЗаголовки = Ложь;
    ТабДокумент.ОтображатьСетку = Ложь;
    ТабДокумент.Показать("Случайные ШК");

КонецПроцедуры
///////////////// Эвристический анализ///////////////////////

Процедура ПоискАналоговНоменклатуры(Текст) Экспорт

Если ЗначениеЗаполнено(Текст) Тогда
		
		//Проведем эврестический анализ введенного выражения
	//	Сообщить("Произошло событие ввода текста" + Текст);
	Ключ = 0;
	
		ТаблицаСлов = Новый ТаблицаЗначений;
		ТаблицаСлов.Колонки.Добавить("Слово",,"Слово");
		ТаблицаСлов.Колонки.Добавить("Вхождений",,"Вхождений");
		Текст = СокрЛП(Текст);
		ПозицияПробела = Найти(Текст, " ");
		ТекстОбрабатываемый = Текст;
		Если не ПозицияПробела = -1 тогда
			
			Пока ПозицияПробела>0 Цикл
				
				ЗначениеВТаблице = ТаблицаСлов.Добавить();		
				ЗначениеВТаблице.Слово = СокрЛП(ЛЕВ(ТекстОбрабатываемый, ПозицияПробела));
				ТекстОбрабатываемый = ПРАВ(ТекстОбрабатываемый, СтрДлина(ТекстОбрабатываемый) - ПозицияПробела);  				
				ПозицияПробела = Найти(ТекстОбрабатываемый, " ") ;
				
			КонецЦикла;
			
			Если СтрДлина(СокрЛП(ТекстОбрабатываемый)) > 0 Тогда
				ЗначениеВТаблице = ТаблицаСлов.Добавить();		
				ЗначениеВТаблице.Слово = СокрЛП(ТекстОбрабатываемый);
				//Сообщить(ЗначениеВТаблице.Слово);					
			КонецЕсли;	
			
			Для Каждого ТекЭлемент из ТаблицаСлов Цикл
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК Ссылка
				               |ИЗ
				               |	Справочник.Номенклатура КАК Номенклатура
				               |ГДЕ
				               |	Номенклатура.НаименованиеПолное ПОДОБНО &НаименованиеПолное";
				
				Запрос.УстановитьПараметр("НаименованиеПолное", "%"+ТекЭлемент.Слово+"%");
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() тогда			
					ТекЭлемент.Вхождений = Выборка.Ссылка;
			//		Сообщить(Выборка.Ссылка); 			
				Иначе	                      			
					ТекЭлемент.Вхождений = 0;		
				КонецЕсли;
				
				
				
			КонецЦикла;
			
			//Отсортируем по возрастанию частот вхождений счета
			
			~ТочкаВходаВЦикл:
			
			ТаблицаСлов.Сортировать("Вхождений Возр");
			
			Запрос = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 7
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	PARAMETER";
			
			PARAMETER  = "(Номенклатура.НаименованиеПолное ПОДОБНО &Параметр1)";
			НомерПараметра = 0;
			
			Для Каждого СтрокаТаблицыСлов из ТаблицаСлов Цикл
				
				Если  СтрокаТаблицыСлов.Вхождений = 0 Тогда			
					
					Индекс = ТаблицаСлов.Индекс(СтрокаТаблицыСлов);
					ТаблицаСлов.Удалить(Индекс);						
					
				Иначе	
					НомерПараметра = НомерПараметра + 1;
					Запрос.УстановитьПараметр("Параметр"+НомерПараметра, "%"+СтрокаТаблицыСлов.Слово+"%" );
					
					Если НомерПараметра>1 тогда
						Parameter = Parameter+ "И (Номенклатура.НаименованиеПолное ПОДОБНО &Параметр" + НомерПараметра+")";		
					КонецЕсли;	
					
				КонецЕсли;	
				
				
			КонецЦикла;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "PARAMETER", Parameter);
			
			Запрос.Текст = ТекстЗапроса;
			
			Если НомерПараметра>2 тогда
			
			ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗапроса.Количество()>0  тогда 
				//Есть результат, можем добавить его в качестве аналогов
				МакетАналогов = ПолучитьМакет("АналогиНоменклатуры");
				ТабДок = Новый ТабличныйДокумент;
				ОбластьШапка = МакетАналогов.ПолучитьОбласть("ШапкаТаблицы");
				ОбластьСтрока = МакетАналогов.ПолучитьОбласть("СтрокаТаблицы");
                ТабДок.Вывести(ОбластьШапка);
				Пока ВыборкаЗапроса.Следующий() цикл
					ОбластьСтрока.Параметры.Ссылка    			= ВыборкаЗапроса.Ссылка;
					ОбластьСтрока.Параметры.Ставка    			= ВыборкаЗапроса.Ссылка.СтавкаНДС ;
					ОбластьСтрока.Параметры.НаименованиеПолное 	= ВыборкаЗапроса.Ссылка.НаименованиеПолное;
					ОбластьСтрока.Параметры.ГруппаНоменклатуры 	= ВыборкаЗапроса.Ссылка.Родитель;
                    ТабДок.Вывести(ОбластьСтрока);

					//СтрокаПохожейНоменклатуры = ПохожаяНоменклатура.Добавить();
					//СтрокаПохожейНоменклатуры.Номенклатура = ВыборкаЗапроса.Ссылка;
					//СтрокаПохожейНоменклатуры.СтавкаНДС	   = ВыборкаЗапроса.Ссылка.СтавкаНДС;
				КонецЦикла;	
				ТабДок.Показать();
				
			Иначе 
				//Результата нет, можно не перебирать, а редуцировать запрос.
				Если ТаблицаСлов.Количество() < 2 тогда
					Перейти  ~ТочкаВыходаИхЦикла;
				КонецЕсли; 	
				
				ТаблицаСлов.Удалить(0);
				Перейти ~ТочкаВходаВЦикл;    
				
			КонецЕсли;
			КонецЕсли;
			~ТочкаВыходаИхЦикла:
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры