
Процедура ЗаполнитьXMLРеджект(СтрокиДерева, Отказ, Сообщение)
	
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДлительностьОжиданияРеакции", ЭлектронныеДокументы.ХМЛДлительность(ДлительностьОжиданияОтвета));
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДатаВремяДоставки", ЭлектронныеДокументы.ХМЛДата(ДатаДоставки));
	
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "ДлительностьОжиданияДоставки", ЭлектронныеДокументы.ХМЛДлительность(ДлительностьОжиданияДоставки));
	
	Если ЗначениеЗаполнено(УчетныйДокумент) Тогда
		
		ДанныеОШтрихКодах = Неопределено;
		ДанныеТаблицыТовары = ЭлектронныеДокументы.ПодготовитьНоменклатуруДокументаДляЭкспорта(УчетныйДокумент, ДанныеОШтрихКодах);
		
		ЭлектронныеДокументы.ДобавитьНоменклатуруЗаказаВДеревоТэгов(СтрокиДерева, ДанныеТаблицыТовары, Ссылка, ДанныеОШтрихКодах, Отказ, Сообщение);
	КонецЕсли; 
	
КонецПроцедуры // () 

Процедура ЗаполнитьXML(ОбъектXML, Отказ, Сообщение, ДобавлятьАтрибутПроверки = Ложь, ДополнятьИсходящееСообщениеПриложеннымиФайлами = Ложь) Экспорт
	
	ПрефиксИмен = "";
	ПространствоИменСОДИ    = "urn:moo-sodi.ru:commerceml_sodi";
	
	Если Акцептовать Тогда
		ОбъектXML.ЗаписатьНачалоЭлемента("АкцептЗаказа", ПространствоИменСОДИ);
	Иначе
		ОбъектXML.ЗаписатьНачалоЭлемента("РеджектЗаказа", ПространствоИменСОДИ);
	КонецЕсли;
	
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксИмен, ПространствоИменСОДИ);
	ОбъектXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Если ДобавлятьАтрибутПроверки Тогда
		ОбъектXML.ЗаписатьАтрибут("xsi:schemaLocation","urn:moo-sodi.ru:commerceml_sodi cml-ordering-3.0sodi.xsd");
	КонецЕсли;
	
	ДеревоТэгов  = ЭлектронныеДокументы.ИнициализироватьДеревоТэгов(ЭтотОбъект, Отказ, Сообщение);
	СтрокиДерева = ДеревоТэгов.Строки;
	
	ЭлектронныеДокументы.ДобавитьСтрокуВДеревоТэгов(СтрокиДерева, "НомерИсходногоДокумента", ИсходныйДокумент.НомерВходящегоДокумента, "ДокументИД");
	
	Если Не Акцептовать Тогда
		ЗаполнитьXMLРеджект(СтрокиДерева, Отказ, Сообщение)
	КонецЕсли;
	
	ЭлектронныеДокументы.ЗаписатьИнформациюОПриложенныхФайлахКДокументу(ДополнятьИсходящееСообщениеПриложеннымиФайлами, СтрокиДерева, УчетныйДокумент);	
	
	ЭлектронныеДокументы.ЗаписатьТэгиВXMLДокумент(ОбъектXML, ДеревоТэгов.Строки, ПрефиксИмен);
	
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВходящийЗаказ") Тогда
		
		ЭлектронныеДокументы.ЗаполнитьШапкуИсходящегоДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ДатаДоставки = Основание.ДатаДоставки;
		ДлительностьОжиданияДоставки = Основание.ДлительностьОжиданияДоставки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВозможноАкцептовать(Сообщение = "") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Сообщение = Сообщение + Символы.ПС + " - не создан заказ покупателя";
		Возврат Ложь;
	ИначеЕсли Не УчетныйДокумент.Проведен Тогда
		Сообщение = Сообщение + Символы.ПС + " - заказ покупателя должен быть проведен";
	КонецЕсли;
	
	Если Организация <> УчетныйДокумент.Организация Тогда
		Сообщение = Сообщение + Символы.ПС + " - организация заказа покупателя не соответствует входящему заказу";
	КонецЕсли;
	
	Если Контрагент <> УчетныйДокумент.Контрагент Тогда
		Сообщение = Сообщение + Символы.ПС + " - контрагент заказа покупателя не соответствует входящему заказу";
	КонецЕсли;
	
	// не обязательные проверки - уведомительные
	
	Если ЗначениеЗаполнено(ИсходныйДокумент.ВалютаДокумента) и Не ИсходныйДокумент.ВалютаДокумента = УчетныйДокумент.ВалютаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Валюта заказа покупателя не соответствует входящему заказу!");
	КонецЕсли;
	
	Если Не ИсходныйДокумент.СуммаВключаетНДС = УчетныйДокумент.СуммаВключаетНДС Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Cпособ включения НДС в сумму заказа покупателя не соответствует входящему заказу!");		
	КонецЕсли;
	
	Если Не ИсходныйДокумент.ДатаДоставки = ДатаДоставки Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата доставки заказа покупателя не соответствует входящему заказу!");		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПревышениеЛимита) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("С превышением лимита можно отправить только реджект заказа!");		
	КонецЕсли;
	
	Возврат ПустаяСтрока(Сообщение);
	
КонецФункции // () 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Сообщение = "";
	
	ЭлектронныеДокументы.ПроверитьРеквизитИсходныйДокумент(ЭтотОбъект, Отказ, Сообщение);
	
	Если Отказ Тогда
		Сообщить("Электронный документ """ + ЭтотОбъект + """ не может быть записан:" + Сообщение, СтатусСообщения.Внимание);
	ИначеЕсли НЕ ПустаяСтрока(Сообщение) Тогда
		Сообщить("При записи электронного документа """ + ЭтотОбъект + """ обнаружены ошибки:" + Сообщение, СтатусСообщения.Внимание);
	КонецЕсли;	
	
КонецПроцедуры

Функция SOAPAction() Экспорт
	
	Если Акцептовать Тогда
		Возврат "accept_order";
	Иначе
		Возврат "reject_order";
	КонецЕсли;
	
КонецФункции // () 
