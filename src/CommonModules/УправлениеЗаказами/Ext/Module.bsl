////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЗАКАЗАМИ

//Функция определяет флаг (Булево) использования заказа в табличной части.
//
// Параметры:
//  ДокументВидОперации   – вид операции документа,
//  ДоговорКонтрагента    – договор с контрагентом,
//  ВидОперации           - строка, определяет вид операции, возможные значения "Поступление", "Реализация","ПоступлениеНТТ", "РеализацияСчет",
//                          по умолчанию "Реализация".
// Возвращаемые значение:
//  Истина, если есть Заказ в табличной части 
//
Функция ЕстьЗаказВТабличнойЧасти(ДокументВидОперации, ДоговорКонтрагента, ВидОперации = "Реализация") Экспорт
	
	ИспользоватьКолонкуЗаказ = ИспользоватьЗаказВТабличнойЧасти(ДокументВидОперации, ДоговорКонтрагента, ВидОперации);
	
	Возврат ИспользоватьКолонкуЗаказ.ИспользоватьЗаказВТабЧасти;
	
КонецФункции // ЕстьЗаказВТабличнойЧасти()

//Функция определяет флаг (Булево) обязательного заполнения заказа в табличной части.
//
// Параметры:
//  ДокументВидОперации   – вид операции документа,
//  ДоговорКонтрагента    – договор с контрагентом,
//  ВидОперации           - строка, определяет вид операции, возможные значения "Поступление", "Реализация","ПоступлениеНТТ", "РеализацияСчет",
//                          по умолчанию "Реализация".
// Возвращаемые значение:
//  Истина, если есть Заказ в табличной части 
//
Функция ПроверятьЗаказВТабличнойЧасти(ДокументВидОперации, ДоговорКонтрагента, ВидОперации = "Реализация") Экспорт
	
	ПроверятьЗаказ = ИспользоватьЗаказВТабличнойЧасти(ДокументВидОперации, ДоговорКонтрагента, ВидОперации);
	
	Если ПроверятьЗаказ.ОбязательноеЗаполнениеЗаказаВТабЧасти Тогда
		ПроверятьЗаказ = Истина;
	Иначе 
		ПроверятьЗаказ = Ложь;
	КонецЕсли;
	
	Возврат ПроверятьЗаказ;
	
КонецФункции // ПроверятьЗаказВТабличнойЧасти()

// Проверяет, что реквизиты Заказов в табличной части совпадают с реквизитами из шапки.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ИмяРевизитаЗаказ  - строка, определяет имя колонки заказа,
//  Отказ             - флаг отказа в проведении.
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьРеквизитыЗаказов(ДокументОбъект, ИмяТабличнойЧасти, ИмяРевизитаЗаказ, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяРевизитаЗаказ]) И 
			(ТипЗнч(СтрокаТаблицы[ИмяРевизитаЗаказ]) = Тип("ДокументСсылка.ЗаказПокупателя") 
			ИЛИ ТипЗнч(СтрокаТаблицы[ИмяРевизитаЗаказ]) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
			
			ДокЗаказ = СтрокаТаблицы[ИмяРевизитаЗаказ];
			
			// Проверим реквизиты Заказов, они должны совпадать с реквизитами документа Реализации
			Если ДокЗаказ.Организация <> ДокументОбъект.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбран заказ с неверным реквизитом ""Организация"". " +
				                   "Заказы можно указывать только от организации - " + СокрЛП(ДокументОбъект.Организация), Отказ, Заголовок);
			КонецЕсли;

			Если ДокЗаказ.Контрагент <> ДокументОбъект.Контрагент Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбран заказ с неверным реквизитом ""Контрагент"". " +
				                   "Заказы можно указывать только с контрагентом - " + СокрЛП(ДокументОбъект.Контрагент), Отказ, Заголовок);
			КонецЕсли;

			Если ДокЗаказ.ДоговорКонтрагента <> ДокументОбъект.ДоговорКонтрагента Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбран заказ с неверным реквизитом ""Договор контрагента"". " +
				                   "Заказы можно указывать только с договором - " + СокрЛП(ДокументОбъект.ДоговорКонтрагента), Отказ, Заголовок);
			КонецЕсли;

			// Проверим даты Заказов, они не должны быть больше даты документа Реализации
			Если ДокЗаказ.Дата > ДокументОбъект.Дата Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата и время Заказа больше даты и времени документа!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьРеквизитыЗаказов()

Процедура ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ДокументОбъект,ИмяРевизитаЗаказ="", ЗаказВШапке=ложь, ИмяРеквизитаСклад="", Отказ, Заголовок) Экспорт
	Если ДокументОбъект.ВозвратнаяТара.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеТабличнойЧасти = "Тара";
	Если ЗаказВШапке Тогда
		//заказ резервирования указывается в шапке документа
		ОбособленныйУчетПоЗаказу = ложь;
		Заказ = ДокументОбъект[ИмяРевизитаЗаказ];
		Если не ЗначениеЗаполнено(Заказ) Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") И Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			ОбособленныйУчетПоЗаказу = истина;
		КонецЕсли;

		Если не ОбособленныйУчетПоЗаказу Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	

	СоответствиеОбособленныйУчетПоЗаказу = новый Соответствие();
	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ДокументОбъект.ВозвратнаяТара Цикл
		Если СтрокаТаблицы.Количество<0 Тогда //возможно для документа КорректировкаЗаказаПокупателя
			Продолжить;
		КонецЕсли;
		Если ЗаказВШапке Тогда
			//проверка заполнения склада - признак выполнения резервирования под заказ с обособленным учетом
			Склад = СтрокаТаблицы[ИмяРеквизитаСклад];
			Если не ЗначениеЗаполнено(Склад) Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Склад)<>Тип("СправочникСсылка.Склады") Тогда
				Продолжить;
			КонецЕсли;	
		Иначе
			//Заказ для резервирования в табличной части документа
	        Заказ = СтрокаТаблицы[ИмяРевизитаЗаказ];
			Если не ЗначениеЗаполнено(Заказ) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбособленныйУчетПоЗаказу = СоответствиеОбособленныйУчетПоЗаказу.Получить(Заказ);
			Если ОбособленныйУчетПоЗаказу = неопределено Тогда
				ОбособленныйУчетПоЗаказу = ложь;
				Если ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") И Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
					ОбособленныйУчетПоЗаказу = истина;
				КонецЕсли;
				СоответствиеОбособленныйУчетПоЗаказу.Вставить(Заказ, ОбособленныйУчетПоЗаказу); 
			КонецЕсли;
			Если не ОбособленныйУчетПоЗаказу Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли; //Если ЗаказВШапке Тогда

		ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		     """ табличной части """ + ПредставлениеТабличнойЧасти + """: выполняется резервирование под заказ покупателя с обособленным учетом. " +
			 "Резервировать возвратную тару под такие заказы запрещено ", Отказ, Заголовок);

    КонецЦикла;
КонецПроцедуры

//Функция определяет использование заказа в табличной части.
//
// Параметры:
//  ДокументВидОперации   – вид операции документа,
//  ДоговорКонтрагента    – договор с контрагентом,
//  ВидОперации           - строка, определяет вид операции, возможные значения "Поступление", "Реализация","ПоступлениеНТТ", "РеализацияСчет",  "ВозвратОтПокупателя"
//                          по умолчанию "Реализация".
// Возвращаемые значение:
//  Да; Нет; ОбязательноеЗаполнение 
//
Функция ИспользоватьЗаказВТабличнойЧасти(ДокументВидОперации, ДоговорКонтрагента, ВидОперации = "Реализация") Экспорт

	УказаниеЗаказов = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();

	ИспользоватьКолонкуЗаказ = Новый Структура("ИспользоватьЗаказВТабЧасти, ОбязательноеЗаполнениеЗаказаВТабЧасти");
	ИспользоватьКолонкуЗаказ.ИспользоватьЗаказВТабЧасти = Ложь;
	ИспользоватьКолонкуЗаказ.ОбязательноеЗаполнениеЗаказаВТабЧасти = Ложь;
	
	
	Если ВидОперации = "Реализация"
	 ИЛИ ВидОперации = "РеализацияСчет"
	 ИЛИ ВидОперации = "ВозвратОтПокупателя" Тогда
		УказаниеЗаказов = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		              ИЛИ (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	ИначеЕсли ВидОперации = "Поступление"
	      ИЛИ ВидОперации = "ПоступлениеНТТ" Тогда
		УказаниеЗаказов = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		              ИЛИ (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступления);
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("ИспользоватьЗаказВТабличнойЧасти: передан не верный вид операции документа.");
		Возврат ИспользоватьКолонкуЗаказ;
	КонецЕсли;

	ИспользоватьКолонкуЗаказ.ИспользоватьЗаказВТабЧасти = УказаниеЗаказов;

	Если УказаниеЗаказов Тогда
		Если ВидОперации = "Реализация" ИЛИ ВидОперации = "ВозвратОтПокупателя" 
			ИЛИ ВидОперации = "РеализацияСчет" ИЛИ ВидОперации = "Поступление" Тогда
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
				
				Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					ИспользоватьКолонкуЗаказ.ОбязательноеЗаполнениеЗаказаВТабЧасти = Истина;
				ИначеЕсли ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ИспользоватьКолонкуЗаказ.ИспользоватьЗаказВТабЧасти = Ложь;						
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидОперации = "ПоступлениеНТТ" Тогда
			Если ДокументВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
					
					Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
						ИспользоватьКолонкуЗаказ.ОбязательноеЗаполнениеЗаказаВТабЧасти = Истина;
					ИначеЕсли ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
						ИспользоватьКолонкуЗаказ.ИспользоватьЗаказВТабЧасти = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ИспользоватьКолонкуЗаказ;

КонецФункции // ИспользоватьЗаказВТабличнойЧасти()

// Функция возвращает флаг использования подсистемы внутренних заказов
//
Функция ИспользоватьВнутренниеЗаказы(Сообщать = Ложь) Экспорт
	
	Флаг = Константы.ИспользоватьВнутренниеЗаказы.Получить();
	Если Не Флаг И Сообщать Тогда
		Сообщить("Использование внутренних заказов в данной конфигурации отключено.", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции // ИспользоватьВнутренниеЗаказы()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораДокументаЗаказа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
	                   СтандартнаяОбработка, МассивОтборов = Неопределено, ИмяТабличнойЧасти = "", ДопПараметры = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;
	
	МассивТиповИсключений = Новый Массив;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ИсключаемыеТипы") Тогда
			МассивТиповИсключений = ДопПараметры["ИсключаемыеТипы"];
		КонецЕсли;
	КонецЕсли;
	
	Для К = 0 По МассивТиповИсключений.ВГраница() Цикл
		Индекс = МассивТипов.ВГраница();
		Пока Индекс >= 0 Цикл
			Если МассивТиповИсключений[К] = МассивТипов[Индекс] Тогда
				МассивТипов.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ИспользоватьВнутренниеЗаказы() Тогда
		Индекс = МассивТипов.ВГраница();
		ТипВнутрЗаказ = Тип("ДокументСсылка.ВнутреннийЗаказ");
		Пока Индекс >= 0 Цикл
			Если ТипВнутрЗаказ = МассивТипов[Индекс] Тогда
				МассивТипов.Удалить(Индекс);
				Прервать;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;

    Если МассивТипов.Количество() = 0 Тогда // Удалили все возможные типы
		Возврат; // Выбор невозможен
	ИначеЕсли МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе
		Для каждого ЭлементМассива Из МассивТипов Цикл
			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());
		КонецЦикла;

		Если СписокТипов.Количество() = 1 Тогда
			ВыбранныйТип = СписокТипов[0].Значение;
		Иначе
			ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

			Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
				Возврат;
			КонецЕсли;

			ВыбранныйТип = ВыбранныйЭлемент.Значение;
		КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов.
	Если МассивОтборов <> Неопределено Тогда
		
		Для каждого ЭлементОтбора из МассивОтборов Цикл
			
			Если ФормаВыбора.Отбор.Найти(ЭлементОтбора.Имя) = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЭлементОтбора.Свойство("Значение") Тогда
				
				ФормаВыбора.Отбор[ЭлементОтбора.Имя].Значение = ЭлементОтбора.Значение;

				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					
					ФормаВыбора.Отбор[ЭлементОтбора.Имя].ВидСравнения = ВидСравнения.ВСписке;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭлементОтбора.Свойство("ЗначениеС") Тогда
				
				ФормаВыбора.Отбор[ЭлементОтбора.Имя].ЗначениеС = ЭлементОтбора.ЗначениеС;
				
			КонецЕсли;
			
			Если ЭлементОтбора.Свойство("ЗначениеПо") Тогда
				
				ФормаВыбора.Отбор[ЭлементОтбора.Имя].ЗначениеПо = ЭлементОтбора.ЗначениеПо;
				
			КонецЕсли;
			
			Если ЭлементОтбора.Свойство("ВидСравнения") Тогда
				
				ФормаВыбора.Отбор[ЭлементОтбора.Имя].ВидСравнения = ЭлементОтбора.ВидСравнения;
				
			КонецЕсли;
			
			Если ЭлементОтбора.Свойство("Использование") Тогда
				
				ФормаВыбора.Отбор[ЭлементОтбора.Имя].Использование = ЭлементОтбора.Использование;
				
			Иначе
				
				ФормаВыбора.Отбор[ЭлементОтбора.Имя].Использование = Истина;
				
			КонецЕсли;
			
			Если ЭлементОтбора.Свойство("Доступность") Тогда
				
				ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементОтбора.Имя].Доступность = ЭлементОтбора.Доступность;
				
			Иначе
				
				ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементОтбора.Имя].Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораДокументаЗаказа()

// Заполняет заказ покупателя в табличной части документа значением из шапки.
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
Процедура ЗаполнитьЗаказПокупателяВТЧ(ДокументВидОперации, ДокументОбъект, ВидОперации) Экспорт
	ЕстьКолонкаЗаказ = ЕстьЗаказВТабличнойЧасти(ДокументВидОперации, ДокументОбъект.ДоговорКонтрагента, ВидОперации);
	
	// Если есть заказ в ТЧ, тогда заполнять не нужно.
	Если ЕстьКолонкаЗаказ Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяРеквЗаказ = "ЗаказПокупателя";
	Если ВидОперации = "Реализация" ИЛИ ВидОперации = "ВозвратОтПокупателя" Тогда
		ИмяРеквЗаказ = "Сделка";
	КонецЕсли;
		
	БратьЗаказИзШапки = ТипЗнч(ДокументОбъект[ИмяРеквЗаказ]) = Тип("ДокументСсылка.ЗаказПокупателя");
	ЗаказИзШапки     = ?(БратьЗаказИзШапки, ДокументОбъект[ИмяРеквЗаказ], Документы.ЗаказПокупателя.ПустаяСсылка());
	
	Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		СтрокаТЧ.ЗаказПокупателя = ЗаказИзШапки;
	КонецЦикла;
	Если НЕ (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаРеализации")
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаПоступления"))
	Тогда
		Для каждого СтрокаТЧ Из ДокументОбъект.ВозвратнаяТара Цикл
			СтрокаТЧ.ЗаказПокупателя = ЗаказИзШапки;
		КонецЦикла;
	КонецЕсли;
	Если ВидОперации <> "ВозвратОтПокупателя" Тогда
		Для каждого СтрокаТЧ Из ДокументОбъект.Услуги Цикл
			СтрокаТЧ.ЗаказПокупателя = ЗаказИзШапки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьЗаказПокупателяВТЧ()

// Заполняет заказ поставщику в табличной части документа значением из шапки.
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
Процедура ЗаполнитьЗаказПоставщикуВТЧ(ДокументВидОперации, ДокументОбъект, ВидОперации) Экспорт
	ЕстьКолонкаЗаказ = ЕстьЗаказВТабличнойЧасти(ДокументВидОперации, ДокументОбъект.ДоговорКонтрагента, ВидОперации);
	
	// Если есть заказ в ТЧ, тогда заполнять не нужно.
	Если ЕстьКолонкаЗаказ Тогда
		Возврат;
	КонецЕсли;	
	
	БратьЗаказИзШапки = ТипЗнч(ДокументОбъект.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику");
	ЗаказИзШапки     = ?(БратьЗаказИзШапки, ДокументОбъект.Сделка, Документы.ЗаказПоставщику.ПустаяСсылка());
	
	Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		СтрокаТЧ.ЗаказПоставщику = ЗаказИзШапки;
	КонецЦикла;
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		Для каждого СтрокаТЧ Из ДокументОбъект.ВозвратнаяТара Цикл
			СтрокаТЧ.ЗаказПоставщику = ЗаказИзШапки;
		КонецЦикла;
	КонецЕсли;
	Для каждого СтрокаТЧ Из ДокументОбъект.Услуги Цикл
		СтрокаТЧ.ЗаказПоставщику = ЗаказИзШапки;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьЗаказПоставщикуВТЧ()

Процедура ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента,ТабличнаяЧасть, ИмяРеквизитаЗаказ) Экспорт
	Если ТабличнаяЧасть.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДокумента ИЗ ТабличнаяЧасть цикл
		Если ЗначениеЗаполнено(СтрокаДокумента[ИмяРеквизитаЗаказ]) Тогда
			Если СтрокаДокумента[ИмяРеквизитаЗаказ].ДоговорКонтрагента <> ДоговорКонтрагента Тогда
				СтрокаДокумента[ИмяРеквизитаЗаказ] = неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Процедура заполнения реквизита "ДатаОплаты" по договору. Вызывается из заказов и счетов
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(ДокОбъект, РежимВызова = "", мСтароеЗначениеДоговора=неопределено)Экспорт
    ДоговорКонтрагента 	= ДокОбъект.ДоговорКонтрагента;
	ДатаДокумента 		= ДокОбъект.Дата;

	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	Если ДоговорКонтрагента.ДержатьРезервБезОплатыОграниченноеВремя Тогда
		ЧислоДнейДоОплаты = ДоговорКонтрагента.ЧислоДнейРезерваБезОплаты;
	Иначе
		ЧислоДнейДоОплаты = 0;
	КонецЕсли;
	Если ЧислоДнейДоОплаты = 0 Тогда
		ДатаОплатыНовая = ДатаДокумента;
	Иначе	
		Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда
			ДатаОплатыНовая = НачалоДня(ДатаДокумента) + 86400 * ЧислоДнейДоОплаты;
		Иначе
			ДатаОплатыНовая = ЗаполнениеДокументов.ОпределитьДату(ДатаДокумента, ЧислоДнейДоОплаты);
			Если ДатаОплатыНовая = Неопределено Тогда
				ДатаОплатыНовая = ДатаДокумента;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ДокОбъект.ДатаОплаты <> ДатаОплатыНовая Тогда

#Если Клиент Тогда

		// Проверка режима вызова процедуры
		Если НЕ ПустаяСтрока(РежимВызова) Тогда
			ТекстВопроса = "";
			Если РежимВызова = "ДатаДокумента" Тогда
				ТекстВопроса = "Изменилась дата документа.";
			ИначеЕсли РежимВызова = "ДоговорКонтрагента" Тогда
				Если мСтароеЗначениеДоговора<>Справочники.ДоговорыКонтрагентов.ПустаяСсылка() И 
					мСтароеЗначениеДоговора<> ДоговорКонтрагента Тогда
					ТекстВопроса = "Изменился договор с контрагентом.";
				КонецЕсли;	
			КонецЕсли;
			Если ТекстВопроса<>"" Тогда
				Ответ = Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
					РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;

#КонецЕсли

		ДокОбъект.ДатаОплаты = ДатаОплатыНовая;
	КонецЕсли;

КонецПроцедуры // УстановитьДатуОплатыПоДоговору()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОЛУЧЕНИЕ ОСТАТКА ПО ЗАКАЗУ

// Функция формирует таблицу содержащую остатки товаров (неотгруженные товары) по заказу покупателя
//
//	Параметры:
//		Заказ - заказ покупателя, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура               - товар,
//			ХарактеристикаНоменклатуры - хар-ка товара,
//			Цена                       - цена
//			КолОстаток                 - количество неотгруженного товара по заказу
//			ПроцентСкидкиНаценки       - % скидки / наценки
//			ЕдиницаИзмерения           - ед. изм. товаров в заказе
//			Коэффициент                - коэфф. ед. измерения товара в заказе
//
Функция ОстаткиТоваровПоЗаказуПокупателя( Заказ, Договор, КонДата, Знач СтатусПартии = Неопределено) Экспорт
	
	Если СтатусПартии = Неопределено Тогда
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РегЗаказы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	РегЗаказы.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	РегЗаказы.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	РегЗаказы.Цена КАК Цена,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	СУММА(РегЗаказы.КоличествоОстаток) КАК КолОстаток,
	|	РегЗаказы.СтавкаНДС КАК СтавкаНДС,
	|	РегЗаказы.Номенклатура.Комплект КАК Комплект
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&КонДата, ЗаказПокупателя = &Заказ 
	|	                                                    И ДоговорКонтрагента = &Договор 
	|	                                                    И СтатусПартии = &Статус
	|	                                                    И Не Номенклатура.Услуга) КАК РегЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры,
	|	РегЗаказы.ПроцентСкидкиНаценки,
	|	РегЗаказы.ПроцентАвтоматическихСкидок,
	|	РегЗаказы.УсловиеАвтоматическойСкидки,
	|	РегЗаказы.ЗначениеУсловияАвтоматическойСкидки,
	|	РегЗаказы.Цена,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент,
	|	РегЗаказы.СтавкаНДС,
	|	РегЗаказы.Номенклатура.Комплект";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  СтатусПартии);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ОстаткиТоваровПоЗаказуПокупателя()

// Функция формирует таблицу содержащую остатки услуг (неоказанные услуги) по заказу покупателя
//
//	Параметры:
//		Заказ - заказ покупателя, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура  - товар,
//			Цена          - цена
//			КолОстаток    - количество неоказанных услуг по заказу
//
Функция ОстаткиУслугПоЗаказуПокупателя( Заказ, Договор, Знач КонДата, Знач СтатусПартии = Неопределено) Экспорт
	
	Если СтатусПартии = Неопределено Тогда
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	КонецЕсли;
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура             КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(Док.Содержание, ДокКорректировка.Содержание)) КАК Содержание,
	|	Остатки.Цена                     КАК Цена,
	|	Остатки.СтавкаНДС                КАК СтавкаНДС,
	|	Остатки.ПроцентСкидкиНаценки     КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки КАК ЗначениеУсловияАвтоматическойСкидки,
	|	Сумма(Остатки.КоличествоОстаток) КАК КолОстаток,
	|	СУММА(Остатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(Остатки.СуммаУпрОстаток)            КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&КонДата,
	|	   ДоговорКонтрагента = &Договор
	|	   И ЗаказПокупателя = &Заказ
	|	   И СтатусПартии = &Статус
	|	   И Номенклатура.Услуга
	|	   ) КАК Остатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Номенклатура,
	|		МИНИМУМ(ВЫРАЗИТЬ(Содержание КАК Строка(1000))) КАК Содержание
	|	ИЗ
	|		Документ.ЗаказПокупателя.Услуги
	|			ГДЕ Ссылка = &Заказ
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура
	|	) КАК Док
	|	ПО Док.Номенклатура = Остатки.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Номенклатура,
	|		МИНИМУМ(ВЫРАЗИТЬ(Содержание КАК Строка(1000))) КАК Содержание
	|		ИЗ
	|			Документ.КорректировкаЗаказаПокупателя.Услуги
	|		ГДЕ
	|			Ссылка.ЗаказПокупателя = &Заказ
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура
	|	) КАК ДокКорректировка
	|	ПО
	|		ДокКорректировка.Номенклатура = Остатки.Номенклатура
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.Цена,
	|	Остатки.ПроцентСкидкиНаценки,
	|	Остатки.СтавкаНДС,
	|	Остатки.ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки
	|ИМЕЮЩИЕ
	|	Сумма(Остатки.КоличествоОстаток) > 0
	|";

	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  СтатусПартии);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиУслугПоЗаказуПокупателя()

// Функция формирует таблицу содержащую остатки товаров (неотгруженные товары) по заказу поставщику
//
//	Параметры:
//		Заказ - заказ поставщику, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура               - товар,
//			ХарактеристикаНоменклатуры - хар-ка товара,
//			Цена                       - цена
//			КолОстаток                 - количество неотгруженного товара по заказу
//			ПроцентСкидкиНаценки       - % скидки / наценки
//			ЕдиницаИзмерения           - ед. изм. товаров в заказе
//			Коэффициент                - коэфф. ед. измерения товара в заказе
//
Функция ОстаткиТоваровПоЗаказуПоставщику( Заказ, Договор, КонДата, ДопПараметры = Неопределено) Экспорт
	
	ТоварТара    = Перечисления.ТоварТара.Товар;
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ТоварТара") Тогда
			ТоварТара = ДопПараметры["ТоварТара"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СтатусПартии") Тогда
			СтатусПартии = ДопПараметры["СтатусПартии"];
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Источник,
		|	РегЗаказы.Номенклатура КАК Номенклатура,
		|	РегЗаказы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РегЗаказы.Цена,
		|	РегЗаказы.СтавкаНДС,
		|	РегЗаказы.ЕдиницаИзмерения,
		|	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		|	РегЗаказы.КоличествоОстаток * РегЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / РегЗаказы.ЕдиницаИзмерения.Коэффициент  КАК КолОстаток,
		|	НЕОПРЕДЕЛЕНО КАК ЗаказПокупателя,
		|	0 КАК КолРазмещено
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|		&КонДата,
		|		ДоговорКонтрагента = &Договор
		|		    И ЗаказПоставщику = &Заказ
		|		    И (НЕ Номенклатура.Услуга)
		|		    И СтатусПартии = &Статус) КАК РегЗаказы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	РегРазмещениеЗаказов.Номенклатура,
		|	РегРазмещениеЗаказов.ХарактеристикаНоменклатуры,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	РегРазмещениеЗаказов.Номенклатура.ЕдиницаХраненияОстатков,
		|	РегРазмещениеЗаказов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	0,
		|	РегРазмещениеЗаказов.ЗаказПокупателя,
		|	РегРазмещениеЗаказов.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
		|		&КонДата,
		|		ЗаказПоставщику = &Заказ
		|		    И ТоварТара = &ТоварТара) КАК РегРазмещениеЗаказов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Источник
		|ИТОГИ
		|	СУММА(КолОстаток),
		|	СУММА(КолРазмещено)
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",   КонДата);
	Запрос.УстановитьПараметр( "Заказ",     Заказ);
	Запрос.УстановитьПараметр( "Договор",   Договор);
	Запрос.УстановитьПараметр( "Статус",    СтатусПартии);
	Запрос.УстановитьПараметр( "ТоварТара", ТоварТара);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ОстаткиТоваровПоЗаказуПоставщику()

// Функция формирует таблицу содержащую остатки услуг (неоказанные услуги) по заказу поставщику
//
//	Параметры:
//		Заказ - заказ покупателя, остатки по которому требуется получить
//		Дата  - дата на которую надо получить остатки
//	Возврат:
//		Таблица с остатками, со следующей структурой:
//			Номенклатура  - товар,
//			Цена          - цена
//			КолОстаток    - количество неоказанных услуг по заказу
//
Функция ОстаткиУслугПоЗаказуПоставщику( Заказ, Договор, Знач КонДата, Знач СтатусПартии = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если СтатусПартии = Неопределено Тогда
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	КонецЕсли;
	
	СтрокаВыборкиПоляСодержанияДокЗаказУслуги = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ДокЗаказУслуги");
	СтрокаВыборкиПоляСодержанияДокКорректировкаУслуги = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ДокКорректировкаУслуги");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегЗаказы.Номенклатура КАК Номенклатура,
	|	РегЗаказы.Цена,
	|	СУММА(РегЗаказы.КоличествоОстаток)          КАК КолОстаток,
	|	СУММА(РегЗаказы.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(РегЗаказы.СуммаУпрОстаток)            КАК СуммаУпр,
	|	ДокЗаказ.Содержание                         КАК Содержание,
	|	ДокЗаказ.СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокЗаказы.Номенклатура КАК Номенклатура,
	|		ДокЗаказы.Цена         КАК Цена,
	|		ДокЗаказы.Содержание   КАК Содержание,
	|		ДокЗаказы.СтавкаНДС    КАК СтавкаНДС
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДокЗаказУслуги.Номенклатура КАК Номенклатура,
	|			ДокЗаказУслуги.Цена         КАК Цена,
	|			" + СтрокаВыборкиПоляСодержанияДокЗаказУслуги + "   КАК Содержание,
	|			ДокЗаказУслуги.СтавкаНДС    КАК СтавкаНДС
	|		ИЗ
	|			Документ.ЗаказПоставщику.Услуги КАК ДокЗаказУслуги
	|		
	|		ГДЕ
	|			ДокЗаказУслуги.Ссылка = &Заказ     И
	|			ДокЗаказУслуги.Ссылка.Проведен     И
	|			ДокЗаказУслуги.Номенклатура.Услуга И
	|			НЕ ДокЗаказУслуги.Ссылка.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДокКорректировкаУслуги.Номенклатура,
	|			ДокКорректировкаУслуги.Цена,
	|			" + СтрокаВыборкиПоляСодержанияДокКорректировкаУслуги + ",
	|			ДокКорректировкаУслуги.СтавкаНДС
	|		ИЗ
	|			Документ.КорректировкаЗаказаПоставщику.Услуги КАК ДокКорректировкаУслуги
	|		
	|		ГДЕ
	|			ДокКорректировкаУслуги.Ссылка.ЗаказПоставщику = &Заказ И
	|			ДокКорректировкаУслуги.Номенклатура.Услуга             И
	|			ДокКорректировкаУслуги.Ссылка.Проведен                 И
	|			НЕ ДокКорректировкаУслуги.Ссылка.ПометкаУдаления) КАК ДокЗаказы
	|	СГРУППИРОВАТЬ ПО
	|		ДокЗаказы.Номенклатура,
	|		ДокЗаказы.Цена,
	|		ДокЗаказы.Содержание,
	|		ДокЗаказы.СтавкаНДС	
	|		) КАК ДокЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&КонДата, ДоговорКонтрагента = &Договор И ЗаказПоставщику = &Заказ И СтатусПартии = &Статус) КАК РегЗаказы
	|		ПО ДокЗаказ.Номенклатура = РегЗаказы.Номенклатура
	|		 И ДокЗаказ.Цена = РегЗаказы.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.Цена,
	|	ДокЗаказ.Содержание,
	|	ДокЗаказ.СтавкаНДС";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  СтатусПартии);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОстаткиУслугПоЗаказуПоставщику()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОГАШЕНИЯ РЕГИСТРОВ ЗАКАЗЫ

// Функция определяет наличие товара в остатках по внутреннему заказу
//
//	Параметры:
//		ТабПроверки - содержит данные, по которым производится проверка
//		Дата        - дата на которую производится проверка
//	Возврат:
//		Булево - результат проверки на наличие товара в остатках
//
Функция ПолучитьОстатокПоВнутреннемуЗаказу( Заказ, Количество, Товар, Характеристика = Неопределено, ЕдиницаИзмерения,
                                               СтатусПартии = Неопределено) Экспорт
	
	Если СтатусПартии = Неопределено Тогда
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	КонецЕсли;
	Если НЕ Характеристика = Неопределено Тогда
		ЕстьХарактеристика = Истина;
	Иначе
		ЕстьХарактеристика = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СУММА(ВнутренниеЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(, ВнутреннийЗаказ = &Заказ И СтатусПартии = &СтатусПартии
	//|		И Номенклатура = &Товар И ЕдиницаИзмерения = &ЕдИзм " + ?(ЕстьХарактеристика, "И ХарактеристикаНоменклатуры = &Характеристика", "") + ") КАК ВнутренниеЗаказыОстатки
	|		И Номенклатура = &Товар " + ?(ЕстьХарактеристика, "И ХарактеристикаНоменклатуры = &Характеристика", "") + ") КАК ВнутренниеЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутренниеЗаказыОстатки.Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.СтатусПартии,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "Заказ",          Заказ);
	Запрос.УстановитьПараметр( "Товар",          Товар);
	Запрос.УстановитьПараметр( "СтатусПартии",   СтатусПартии);
	Запрос.УстановитьПараметр( "Характеристика", Характеристика);
	Запрос.УстановитьПараметр( "ЕдИзм",          ЕдиницаИзмерения);
	
	Обход = Запрос.Выполнить().Выбрать();
	
	Результат = 0;
	Пока Обход.Следующий() Цикл
		Если Обход.КоличествоОстаток > 0 Тогда
			Результат = Обход.КоличествоОстаток;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьОстатокПоВнутреннемуЗаказу()

// Процедура погашения регистра ВнутренниеЗаказы
//
Процедура ДвижениеПоВнутреннимЗаказам( ДокОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок) Экспорт

	ТабПоЗаказам = ТабИсходная.Скопировать();
	СтатусПартии       = ДопПараметры["СтатусПартии"];
	ОперативныйРежим   = ДопПараметры["РежимПроведения"] = РежимПроведенияДокумента.Оперативный;
	ЕстьХарактеристика = Не ТабИсходная.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено;
	ЕстьЕдИзм          = Не ТабИсходная.Колонки.Найти("ЕдиницаИзмерения")           = Неопределено;
	ЗаказВШапке        = ДопПараметры["ЗаказВШапке"];
	ИмяРеквизитаЗаказ  = ДопПараметры["ИмяРеквизитаЗаказ"];
	
	Если Не ЗаказВШапке Тогда
		ВсегоСтрок = ТабПоЗаказам.Количество() - 1;
		К = 0;
		Пока К <= ВсегоСтрок Цикл
			ДокЗаказ = ТабПоЗаказам[К][ИмяРеквизитаЗаказ];
			Если НЕ ЗначениеЗаполнено(ДокЗаказ) ИЛИ ТипЗнч(ДокЗаказ) <> Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
				ТабПоЗаказам.Удалить(К);
				ВсегоСтрок = ВсегоСтрок - 1;
			Иначе
				К = К + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не ТипЗнч(ДокОбъект[ИмяРеквизитаЗаказ]) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТабПоЗаказам.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;		

	НаборДвижений = ДокОбъект.Движения.ВнутренниеЗаказы;
	Если ОперативныйРежим Тогда
		НаборДвижений.КонтрольОстатков( ДокОбъект, ДопПараметры, Отказ, Заголовок);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	Для Каждого СтрокаДок Из ТабПоЗаказам Цикл
		Заказ = ?( ЗаказВШапке, ДокОбъект[ИмяРеквизитаЗаказ], СтрокаДок[ИмяРеквизитаЗаказ]);
		Если Не ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.ВнутреннийЗаказ            = Заказ;
		НоваяСтрока.Заказчик                   = Заказ.Заказчик;
		НоваяСтрока.СтатусПартии               = СтатусПартии;
		НоваяСтрока.Номенклатура               = СтрокаДок.Номенклатура;
		НоваяСтрока.Количество                 = СтрокаДок.Количество;
		Если ЕстьХарактеристика Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДок.ХарактеристикаНоменклатуры;
		КонецЕсли;
		Если ЕстьЕдИзм Тогда
			НоваяСтрока.ЕдиницаИзмерения = СтрокаДок.ЕдиницаИзмерения;
		КонецЕсли;

	КонецЦикла;
	
	НаборДвижений.мПериод          = ДокОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьРасход();
	
КонецПроцедуры // ДвижениеПоВнутреннимЗаказам( СтруктураШапкиДокумента, ТаблицаПоТаре,    Отказ, Заголовок)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ОСТАТКАМИ ПО ЗАКАЗУ

// Процедура заполняет табличную часть документа по данным заказа
//
//	Параметры:
//		ТабЧасть - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьТоварыПоЗаказу(ДокСсылка, ТабЧасть, Заказ, ТабОстатки, ДопПараметры = Неопределено, ОчищатьСтроки = Ложь) Экспорт

	Если ОчищатьСтроки = Истина Тогда
		ТабЧасть.Очистить();
	КонецЕсли;

	Если ТабОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ФлагУчитыватьСоставНабора = Ложь;
	ФлагУчитыватьНДС          = Истина;
	ФлагСуммаВключаетНДС      = Ложь;

	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("УчитыватьНДС") Тогда
			ФлагУчитыватьНДС = ДопПараметры["УчитыватьНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СуммаВключаетНДС") Тогда
			ФлагСуммаВключаетНДС = ДопПараметры["СуммаВключаетНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("УчитыватьСоставНабора") Тогда
			ФлагУчитыватьСоставНабора = Истина;
		КонецЕсли;
	КонецЕсли;

	ФлагЕстьРучнаяСкидка = Не ТабОстатки.Колонки.Найти("ПроцентСкидкиНаценки") = Неопределено;
	ФлагЕстьАвтоматическаяСкидка = Не ТабОстатки.Колонки.Найти("ПроцентАвтоматическихСкидок") = Неопределено;
	
	МетаТабЧасть      = Метаданные.НайтиПоТипу(Тип(ТабЧасть)).Реквизиты;
	ФлагЕстьЦена      = Не МетаТабЧасть.Найти("Цена")      = Неопределено;
	ФлагЕстьСтавкаНДС = Не МетаТабЧасть.Найти("СтавкаНДС") = Неопределено;
	
	ИмяРеквизитаЗаказ = "ЗаказПокупателя";
	Если МетаТабЧасть.Найти("Заказ")<>неопределено Тогда
		ИмяРеквизитаЗаказ = "Заказ";
	КонецЕсли;
	

	Для Каждого СтрокаОстатков Из ТабОстатки Цикл

		Если СтрокаОстатков.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаОстатков.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество                 = СтрокаОстатков.КолОстаток * СтрокаОстатков.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
													/ СтрокаОстатков.Коэффициент;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаОстатков.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                = СтрокаОстатков.Коэффициент;
		НоваяСтрока[ИмяРеквизитаЗаказ]         = Заказ;
		Если ФлагЕстьЦена Тогда
			НоваяСтрока.Цена                   = СтрокаОстатков.Цена;
		КонецЕсли;
		Если ФлагЕстьСтавкаНДС Тогда
			НоваяСтрока.СтавкаНДС              = СтрокаОстатков.СтавкаНДС;
		КонецЕсли;

		Если ФлагЕстьРучнаяСкидка Тогда
			НоваяСтрока.ПроцентСкидкиНаценки   = СтрокаОстатков.ПроцентСкидкиНаценки;
		КонецЕсли;
		Если ФлагЕстьАвтоматическаяСкидка Тогда
			НоваяСтрока.ПроцентАвтоматическихСкидок         = СтрокаОстатков.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаОстатков.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаОстатков.ЗначениеУсловияАвтоматическойСкидки;
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ДокСсылка);
		Если ФлагЕстьЦена Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти( НоваяСтрока, ДокСсылка);
		КонецЕсли;

		Если ФлагЕстьСтавкаНДС Тогда
			НоваяСтрока.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
				НоваяСтрока.Сумма,
				ФлагУчитыватьНДС,
				ФлагСуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
		КонецЕсли;

		Если ФлагУчитыватьСоставНабора
		   И СтрокаОстатков.Комплект Тогда
			НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабЧастьТоварыПоЗаказу()

// Процедура заполняет табличную часть документа по данным заказа поставщику
//
//	Параметры:
//		ДокОбъект  - документ-объект, который надо заполнить
//		ТабЧасть   - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику(ДокОбъект, ТабЧасть, ТабОстатки, ДопПараметры = Неопределено) Экспорт

	Если ТабОстатки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТабЧасть.Очистить();
	ИмяРеквизитаЗаказ = "ЗаказПокупателя";

	ТЗ = ТабЧасть.Выгрузить();
	Если ТЗ.Колонки.Найти("Заказ")<>неопределено Тогда
		ИмяРеквизитаЗаказ = "Заказ";
	КонецЕсли;
	
	ФлагУчитыватьНДС     = Истина;
	ФлагСуммаВключаетНДС = Ложь;
	ФлагЭтоТара          = Ложь;
	ЗнакКоличества       = 1;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("УчитыватьНДС") Тогда
			ФлагУчитыватьНДС = ДопПараметры["УчитыватьНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СуммаВключаетНДС") Тогда
			ФлагСуммаВключаетНДС = ДопПараметры["СуммаВключаетНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ФлагЭтоТара") Тогда
			ФлагЭтоТара = ДопПараметры["ФлагЭтоТара"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ЗнакКоличества") Тогда
			ЗнакКоличества = ДопПараметры["ЗнакКоличества"];
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = ТабОстатки;
	
	СоотвСтрок     = Новый Соответствие;
	МассивОстатков = Новый Массив;
	
	ОбходНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходНоменклатура.Следующий() Цикл
		ОбходХарактеристика = ОбходНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходХарактеристика.Следующий() Цикл
		
			МассивОстатков.Очистить();
			
			Обход = ОбходХарактеристика.Выбрать();
			Пока Обход.Следующий() Цикл
				
				Если Обход.Источник = 1 Тогда // Это строка с остатком. Добавляем в документ
					
					НоваяСтрока = ТабЧасть.Добавить();
					НоваяСтрока.Номенклатура = Обход.Номенклатура;
					НоваяСтрока.Цена         = Обход.Цена;
					НоваяСтрока.Количество   = Обход.КолОстаток;
					
					МассивОстатков.Добавить(НоваяСтрока);
					СоотвСтрок.Вставить(НоваяСтрока);
					
					Если НЕ ФлагЭтоТара Тогда
					
						НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
						НоваяСтрока.ЕдиницаИзмерения = Обход.ЕдиницаИзмерения;
						НоваяСтрока.Коэффициент      = Обход.Коэффициент;
						НоваяСтрока.СтавкаНДС        = Обход.СтавкаНДС;
						
					КонецЕсли;
				
				Иначе
				
					НадоРазместить = Обход.КолРазмещено;
					Пока НадоРазместить > 0 И МассивОстатков.Количество() > 0 Цикл
						Если НЕ ФлагЭтоТара Тогда
							НадоРазместить = НадоРазместить * МассивОстатков[0].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / МассивОстатков[0].Коэффициент
						КонецЕсли;

						МожноРазместить = Мин( Макс(МассивОстатков[0].Количество, 0), НадоРазместить);
						
						НоваяСтрока = ТабЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивОстатков[0]);
						СоотвСтрок.Вставить(НоваяСтрока);
						
						НоваяСтрока.Количество         = МожноРазместить;
						НоваяСтрока[ИмяРеквизитаЗаказ] = Обход.ЗаказПокупателя;
						
						// Скорректируем исходную строку на размещенное количество
						МассивОстатков[0].Количество = МассивОстатков[0].Количество - МожноРазместить;
						Если МассивОстатков[0].Количество <= 0 Тогда
							СоотвСтрок.Удалить(МассивОстатков[0]);
							ТабЧасть.Удалить(МассивОстатков[0]);
							МассивОстатков.Удалить(0);
						КонецЕсли;
						
						НадоРазместить = НадоРазместить - МожноРазместить;
					
					КонецЦикла;
					
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;
	КонецЦикла;
	
	Если ЗнакКоличества = -1 Тогда
		Для Каждого ДобавленнаяСтрока Из СоотвСтрок Цикл
			ДобавленнаяСтрока.Ключ.Количество = - ДобавленнаяСтрока.Ключ.Количество;
		КонецЦикла;
	КонецЕсли;
	
	
	Для Каждого ДобавленнаяСтрока Из СоотвСтрок Цикл
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти         (ДобавленнаяСтрока.Ключ, ДокОбъект); 
		
		Если  НЕ ФлагЭтоТара Тогда

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ДобавленнаяСтрока.Ключ, ДокОбъект); 
					
			ДобавленнаяСтрока.Ключ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
				ДобавленнаяСтрока.Ключ.Сумма,
				ФлагУчитыватьНДС,
				ФлагСуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(ДобавленнаяСтрока.Ключ.СтавкаНДС));
		КонецЕсли;		
	КонецЦикла;
		
	
КонецПроцедуры // ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику()

// Процедура заполняет табличную часть Услуги по данным заказа
//
//	Параметры:
//		ТабЧасть   - табличная часть документа, которую необходимо заполнить
//		ТабОстатки - таблица неотгружененых товаров по заказу
//
Процедура ЗаполнитьТабЧастьУслугиПоЗаказу(ДокОбъект, ТабЧасть, Заказ, ТабОстатки, ДопПараметры = Неопределено, ОчищатьСтроки = Ложь) Экспорт
	
	Если ОчищатьСтроки = Истина Тогда
		ТабЧасть.Очистить();
	КонецЕсли;
	
	Если ТабОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФлагУчитыватьНДС     = Истина;
	ФлагСуммаВключаетНДС = Ложь;
	ЗнакКоличества       = 1;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("УчитыватьНДС") Тогда
			ФлагУчитыватьНДС = ДопПараметры["УчитыватьНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("СуммаВключаетНДС") Тогда
			ФлагСуммаВключаетНДС = ДопПараметры["СуммаВключаетНДС"];
		КонецЕсли;
		Если ДопПараметры.Свойство("ЗнакКоличества") Тогда
			ЗнакКоличества = ДопПараметры["ЗнакКоличества"];
		КонецЕсли;
	КонецЕсли;
	
	ФлагЕстьРучнаяСкидка = Не ТабОстатки.Колонки.Найти("ПроцентСкидкиНаценки") = Неопределено;
	ФлагЕстьАвтоматическаяСкидка = Не ТабОстатки.Колонки.Найти("ПроцентАвтоматическихСкидок") = Неопределено;
	
	Для Каждого СтрокаОстатков Из ТабОстатки Цикл
		
		Если СтрокаОстатков.КолОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура = СтрокаОстатков.Номенклатура;
		НоваяСтрока.Количество   = СтрокаОстатков.КолОстаток * ЗнакКоличества;
		НоваяСтрока.Цена         = СтрокаОстатков.Цена;

		Если ФлагЕстьРучнаяСкидка Тогда
			НоваяСтрока.ПроцентСкидкиНаценки   = СтрокаОстатков.ПроцентСкидкиНаценки;
		КонецЕсли;
		Если ФлагЕстьАвтоматическаяСкидка Тогда
			НоваяСтрока.ПроцентАвтоматическихСкидок         = СтрокаОстатков.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаОстатков.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаОстатков.ЗначениеУсловияАвтоматическойСкидки;
		КонецЕсли;

		НоваяСтрока.Содержание      = СокрЛП(СтрокаОстатков.Содержание);
		НоваяСтрока.СтавкаНДС       = СтрокаОстатков.СтавкаНДС;
		//НоваяСтрока.ЗаказПокупателя = Заказ;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти( НоваяСтрока, ДокОбъект); 
		
		НоваяСтрока.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
			НоваяСтрока.Сумма,
			ФлагУчитыватьНДС,
			ФлагСуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС( НоваяСтрока.СтавкаНДС));
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьУслугиПоЗаказу()

// Процедура заполняет табличную часть Тара данными по заказа
//
//		Параметры:
//			ТабЧасть - табличная часть документа, которую необходимо заполнить
//			ТабОстатки - таблица неотгружененых товаров по заказу
//		Возврат:
//			Истина - заполнение произведено
//			Ложь   - нет данных для заполнения
//
Процедура ЗаполнитьТабЧастьТараПоЗаказуПокупателя(ДокОбъект, ТабЧасть, Заказ, Договор, КонДата, ОчищатьСтроки = Ложь) Экспорт
	
	Если ОчищатьСтроки = Истина Тогда
		ТабЧасть.Очистить();
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.КоличествоОстаток КАК Количество,
	|	РегЗаказы.СуммаУпрОстаток КАК СуммаУпр,
	|	РегЗаказы.Цена,
	|	РегЗаказы.ЕдиницаИзмерения,
	|	РегЗаказы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&КонДата, ДоговорКонтрагента = &Договор И СтатусПартии = &Статус И ЗаказПокупателя = &Заказ) КАК РегЗаказы
	|
	|ГДЕ
	|	НЕ РегЗаказы.Номенклатура.Услуга И
	|	РегЗаказы.КоличествоОстаток > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Договор", Договор);
	Запрос.УстановитьПараметр( "Статус",  Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	Обход = Запрос.Выполнить().Выбрать();
	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.Номенклатура    = Обход.Номенклатура;
		НоваяСтрока.Количество      = Обход.Количество;
		НоваяСтрока.Цена            = Обход.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти( НоваяСтрока, ДокОбъект); 
		НоваяСтрока.ЗаказПокупателя = Заказ;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабЧастьТараПоЗаказуПокупателя()

// Процедура формирует таблицу содержащую остатки товаров (неотгруженные товары) по заказу покупателя
//
Процедура ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, Заказ, ТабЧасть, Склад, Знач КонДата, СтатусыПартий = Неопределено) Экспорт

	Если Не ИспользоватьВнутренниеЗаказы() Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутренниеЗаказыОстатки.Номенклатура                                     КАК Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	СУММА(ВнутренниеЗаказыОстатки.КоличествоОстаток)                         КАК КолОстаток,
	|	ВнутренниеЗаказыОстатки.Номенклатура.СтавкаНДС                           КАК СтавкаНДС,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ВнутренниеЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ВнутренниеЗаказыОстатки.СтатусПартии                    				 КАК СтатусПартии,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ                 				 КАК Заказ,
	|	ВнутренниеЗаказыОстатки.Заказчик                        				 КАК Заказчик,
	|	МАКСИМУМ(ЕстьNull(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток,0))  КАК КолРезерв,
	|	МАКСИМУМ(ЕстьNull(ТоварыНаСкладахОстатки.КоличествоОстаток,0))  		КАК КолНаСкладе

	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&КонДата, ВнутреннийЗаказ = &Заказ И СтатусПартии В (&СтатусыПартий)) КАК ВнутренниеЗаказыОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&КонДата, Склад = &Склад И ДокументРезерва = &Заказ) КАК ТоварыВРезервеНаСкладахОстатки
	|ПО
	|	ВнутренниеЗаказыОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	|	И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры";
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыВРознице.Остатки(&КонДата, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|ПО
		|	ВнутренниеЗаказыОстатки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|	И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&КонДата, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|ПО
		|	ВнутренниеЗаказыОстатки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|	И ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|СГРУППИРОВАТЬ ПО
	|	ВнутренниеЗаказыОстатки.Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.СтатусПартии,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ,
	|	ВнутренниеЗаказыОстатки.Заказчик
	|	ИМЕЮЩИЕ МАКСИМУМ(ЕстьNull(ТоварыНаСкладахОстатки.КоличествоОстаток,0))>0 И СУММА(ВнутренниеЗаказыОстатки.КоличествоОстаток)>0
	|ИТОГИ Максимум(КолРезерв), Максимум(КолНаСкладе), Сумма(КолОстаток)
	|ПО Номенклатура, ХарактеристикаНоменклатуры
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата", КонДата);
	Запрос.УстановитьПараметр( "Заказ",   Заказ);
	Запрос.УстановитьПараметр( "Склад",   Склад);
	Если СтатусыПартий = Неопределено Тогда
		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Статусы = СтатусыПартий;
	КонецЕсли;
	ФлагТары = СтатусыПартий = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара;
	
	Запрос.УстановитьПараметр( "СтатусыПартий", Статусы);
	ЕстьКачество = Не Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты.Найти("Качество") = Неопределено;

	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() цикл
		ВыборкаПоХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристике.Следующий() цикл
			ОстатокНаСкладе = ВыборкаПоХарактеристике.КолНаСкладе;
			ОстатокВРезерве = ВыборкаПоХарактеристике.КолРезерв;
			Если ОстатокНаСкладе<=0 Тогда
				Продолжить;
			КонецЕсли;
			Выборка = ВыборкаПоХарактеристике.Выбрать();
			Пока Выборка.Следующий() цикл
				Если Выборка.КолОстаток <= 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ОстатокНаСкладе<=0 Тогда 
					Прервать; 
				КонецЕсли;
				Количество = Мин(ОстатокНаСкладе, Выборка.КолОстаток);
				ВРезерве = Мин(Количество, Макс(ОстатокВРезерве,0));
				Если ВРезерве > 0 Тогда
					НоваяСтрока = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Количество                   = ВРезерве;
					НоваяСтрока.ДокументРезерва              = Заказ;
					НоваяСтрока.ВнутреннийЗаказ              = Заказ;
					Если Не ФлагТары Тогда
						Если ЕстьКачество Тогда
							НоваяСтрока.Качество = Справочники.Качество.Новый;
						КонецЕсли;
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 
					КонецЕсли;

					ОстатокВРезерве = ОстатокВРезерве - ВРезерве;
					ОстатокНаСкладе = ОстатокНаСкладе - ВРезерве;
					Количество = Количество - ВРезерве;
				КонецЕсли;
				Если Количество > 0 Тогда
					НоваяСтрока = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Количество                   = Количество;
					НоваяСтрока.ВнутреннийЗаказ              = Заказ;
					Если Не ФлагТары Тогда
						Если ЕстьКачество Тогда
							НоваяСтрока.Качество = Справочники.Качество.Новый;
						КонецЕсли;
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( НоваяСтрока, ЭтотОбъект); 
					КонецЕсли;

					ОстатокНаСкладе = ОстатокНаСкладе - Количество;

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу()


// Функция открывает окно выбора контрагента/договора/заказа из документа основания, в случае когда
// при вводе на основании в документе-основании заказ (контрагент-договор) есть в таб.части,
// а в вводимом документе - заказ (контрагент-договор) в шапке
//
Функция ВыбратьЗаказИзДокументаОснования(ДокОснование, СтруктПараметры) Экспорт

	// Выберем список заказов
	ТекстЗапроса = "";
	МетаДок = ДокОснование.Метаданные();
	Для Каждого ТабЧасть Из СтруктПараметры.ТабЧасти Цикл
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	" + ТабЧасть.Значение + " КАК Заказ,
			|	" + ТабЧасть.Значение + ".Контрагент КАК Контрагент,
			|	" + ТабЧасть.Значение + ".ДоговорКонтрагента КАК Договор
			|ИЗ
			|	Документ." + МетаДок.Имя + "." + ТабЧасть.Ключ + " КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка = &ДокСсылка
			|	И НЕ ДокОснование." + ТабЧасть.Значение + ".Контрагент ЕСТЬ NULL
			|	И НЕ ДокОснование." + ТабЧасть.Значение + ".ДоговорКонтрагента ЕСТЬ NULL
			|";
	КонецЦикла;	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Заказ КАК Заказ,
		|	Представление(Заказ) КАК ЗаказПредставление,
		|	Контрагент КАК Контрагент,
		|	Представление(Контрагент) КАК КонтрагентПредставление,
		|	Договор КАК Договор,
		|	Представление(Договор) КАК ДоговорПредставление,
		|	0 КАК ВсегоКонтрагентов,
		|	0 КАК ВсегоДоговоров,
		|	0 КАК ВсегоЗаказов
		|ИЗ
		|	(" + ТекстЗапроса + ") КАК Док
		|
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ)      КАК ВсегоЗаказов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент) КАК ВсегоКонтрагентов,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договор)    КАК ВсегоДоговоров
		|ПО
		|	ОБЩИЕ,
		|	Контрагент,
		|	Договор,
		|	Заказ
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокСсылка", ДокОснование.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктВозврат = Новый Структура;
	СтруктВозврат.Вставить("ВыборСделан", Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктВозврат;
	КонецЕсли;
	
	ФиксироватьКонтрагента = Неопределено;
	ФиксироватьДоговор     = Неопределено;
	ФиксироватьЗаказ       = Неопределено;
	
	ОбходОбщиеИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходОбщиеИтоги.Следующий() Цикл
		ОбходКонтрагент = ОбходОбщиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходКонтрагент.Следующий() Цикл
			Если ОбходОбщиеИтоги.ВсегоКонтрагентов = 1 Тогда
				ФиксироватьКонтрагента = ОбходКонтрагент.Контрагент;
			КонецЕсли;
			ОбходДоговор = ОбходКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходДоговор.Следующий() Цикл
				Если ОбходОбщиеИтоги.ВсегоДоговоров = 1 Тогда
					ФиксироватьДоговор = ОбходДоговор.Договор;
				КонецЕсли;
				ОбходЗаказ = ОбходДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходЗаказ.Следующий() Цикл
					Если ОбходОбщиеИтоги.ВсегоЗаказов = 1 Тогда
						ФиксироватьЗаказ = ОбходЗаказ.Заказ;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ФиксироватьКонтрагента = Неопределено 
	 ИЛИ ФиксироватьДоговор = Неопределено 
	 ИЛИ ФиксироватьЗаказ = Неопределено Тогда
	
		ДеревоЗаказов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СтруктПараметрыФормы = Новый Структура;
		СтруктПараметрыФормы.Вставить("ДеревоЗаказов",   ДеревоЗаказов);
		СтруктПараметрыФормы.Вставить("Контрагент",      ФиксироватьКонтрагента);
		СтруктПараметрыФормы.Вставить("Договор",         ФиксироватьДоговор);
		СтруктПараметрыФормы.Вставить("Заказ",           ФиксироватьЗаказ);
		СтруктПараметрыФормы.Вставить("ТолькоОдинЗаказ", НЕ СтруктПараметры.ЗаказВТабЧасти);
		
		ФормаВыбораСклада = ПолучитьОбщуюФорму("ФормаВыбораКонтрагентаДоговораЗаказа");
		ФормаВыбораСклада.НачальноеЗначениеВыбора = СтруктПараметрыФормы;
		Выбор = ФормаВыбораСклада.ОткрытьМодально();
		Если Выбор <> Неопределено Тогда
			СтруктВозврат.Вставить("Контрагент",  Выбор.Контрагент);
			СтруктВозврат.Вставить("Договор",     Выбор.Договор);
			СтруктВозврат.Вставить("Заказ",       Выбор.Заказ);
			СтруктВозврат.Вставить("ВыборСделан", Выбор.ВыборСделан);
		КонецЕсли;
		
	Иначе
	
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ФиксироватьЗаказ);
		
		СтруктВозврат.Вставить("Контрагент",  ФиксироватьКонтрагента);
		СтруктВозврат.Вставить("Договор",     ФиксироватьДоговор);
		СтруктВозврат.Вставить("Заказ",       МассивЗаказов);
		СтруктВозврат.Вставить("ВыборСделан", Истина);
		
	КонецЕсли;
	
	Возврат СтруктВозврат;
	
КонецФункции // ВыбратьЗаказИзДокументаОснования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С АВТОРЕЗЕРВИРОВАНИЕМ И АВТОРАЗМЕЩЕНИЕМ

// Заполняет табличную часть Заказа покупателя, КорректировкиЗаказаПокупателя, РезервированиеТоваров по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям(ЗаказПокупателя, Товары, ИмяРеквизитаРазмещение="Размещение", РезервированиеТоваров=ложь) 
	ИспользоватьСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
	Если не ИспользоватьСерии Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	Сч = 0;
	Пока Сч < СкладыТабличнойЧасти.Количество() Цикл
		СтрокаТаблицы = СкладыТабличнойЧасти.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы[ИмяРеквизитаРазмещение]) <> Тип("СправочникСсылка.Склады") Тогда
			СкладыТабличнойЧасти.Удалить(СтрокаТаблицы);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	СкладыТабличнойЧасти.Колонки[ИмяРеквизитаРазмещение].Имя = "Склад";
	СкладыТабличнойЧасти.Свернуть("Склад");

	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуСвободныхОстатковПоСериям(МассивСклады, ЗаказПокупателя.Организация, МассивНоменклатуры);
	ВременнаяТаблица     = Товары.Выгрузить();
	
	Товары.Очистить();
	
	Для Каждого СтрокаВременнаяТаблица Из ВременнаяТаблица Цикл
		
		РазмещениеСклад = истина;
		Если РезервированиеТоваров Тогда
			РазмещениеСклад = (ТипЗнч(СтрокаВременнаяТаблица.НовоеРазмещение) = Тип("СправочникСсылка.Склады") и НЕ ЗначениеЗаполнено(СтрокаВременнаяТаблица.ИсходноеРазмещение) и ЗначениеЗаполнено(СтрокаВременнаяТаблица.новоеРазмещение)) 
				или (ТипЗнч(СтрокаВременнаяТаблица.ИсходноеРазмещение) = Тип("СправочникСсылка.Склады") и НЕ ЗначениеЗаполнено(СтрокаВременнаяТаблица.НовоеРазмещение) и ЗначениеЗаполнено(СтрокаВременнаяТаблица.ИсходноеРазмещение));
		Иначе
			РазмещениеСклад = ТипЗнч(СтрокаВременнаяТаблица[ИмяРеквизитаРазмещение]) = Тип("СправочникСсылка.Склады")
		КонецЕсли;
		
		Если не РазмещениеСклад Тогда
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаВременнаяТаблица);
			Продолжить;
		КонецЕсли;	
		
		Если Не(СтрокаВременнаяТаблица.Номенклатура.ВестиУчетПоСериям) Тогда
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаВременнаяТаблица);
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаВременнаяТаблица.Количество <= 0 Тогда
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаВременнаяТаблица);
			Продолжить;
		КонецЕсли;	

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаВременнаяТаблица.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаВременнаяТаблица.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Склад", СтрокаВременнаяТаблица[ИмяРеквизитаРазмещение]);
		
		НайденныеСтроки           = ТаблицаСерий.НайтиСтроки(СтруктураОтбора);
		
		КоличествоНераспределено  = СтрокаВременнаяТаблица.Количество; 
		
		
		Для Каждого СтрокаОстаток Из НайденныеСтроки Цикл
			Если КоличествоНераспределено <= 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаОстаток.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;	

			
			ЕдиницаХраненияОстатков             = СтрокаВременнаяТаблица.Номенклатура.ЕдиницаХраненияОстатков;
			КоличествоОстатокВЕдиницахДокумента = СтрокаОстаток.Остаток * ЕдиницаХраненияОстатков.Коэффициент / СтрокаВременнаяТаблица.Коэффициент;
			КоличествоКСписанию                 = Мин(КоличествоНераспределено, КоличествоОстатокВЕдиницахДокумента);
			
			Если КоличествоКСписанию <= 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВременнаяТаблица);
			НоваяСтрока.Количество = КоличествоКСписанию;
			НоваяСтрока.СерияНоменклатуры = СтрокаОстаток.СерияНоменклатуры;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЗаказПокупателя);
			Если не РезервированиеТоваров Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЗаказПокупателя);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЗаказПокупателя);
			КонецЕсли;
			КоличествоНераспределено = КоличествоНераспределено - КоличествоКСписанию;
			СтрокаОстаток.Остаток    = СтрокаОстаток.Остаток    - (КоличествоКСписанию * СтрокаВременнаяТаблица.Коэффициент /  ЕдиницаХраненияОстатков.Коэффициент); 
		КонецЦикла;	
		
		
		Если КоличествоНераспределено > 0 Тогда
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВременнаяТаблица);
			НоваяСтрока.Количество = КоличествоНераспределено;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЗаказПокупателя);
			Если не РезервированиеТоваров Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЗаказПокупателя);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЗаказПокупателя);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры //ЗаполнитьПоСериям()

//Выполняет авторезервирование и авторазмещение в документах ЗаказПокупателя, ВнутреннийЗаказ, 
//	КорректировкаЗаказаПокупателя, КорректировкаВнутреннегоЗаказа, РезервированиеТоваров
Процедура Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара) Экспорт
	Авторезервирование = Параметры.Авторезервирование;
	Авторазмещение     = Параметры.Авторазмещение;
	
	Если НЕ Авторезервирование И НЕ Авторазмещение Тогда
		Возврат;
	КонецЕсли;
	
    Заказ = Параметры.Заказ;
	ЗаказСсылка = Заказ.Ссылка;
	ЕстьСкладЗаказчик = Ложь;
	ЕстьПредпочтительноеРазмещение = Ложь;
	ЕстьМассивСтатусовПартий = Ложь;
    МассивСтатусовПартий = Новый Массив;
    ЗаполнятьСуммы = ложь;
	СкладПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
    СтратегияАвторезервирования = Параметры.СтратегияАвторезервированияПоЗаказам;
	ОбособленныйУчет = Параметры.Свойство("ОбособленныйУчет") И Параметры.ОбособленныйУчет;

    Если НЕ ЗначениеЗаполнено(СтратегияАвторезервирования) Тогда
		СтратегияАвторезервирования = Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаВЗаказахПоставщикамПотомНаСкладах;
	КонецЕсли;
	
	ЗапросСвободныйОстаток = Новый Запрос;

	Если ТипЗнч(ЗаказСсылка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СкладГруппа = Заказ.СкладГруппа;
        ЗапросСвободныйОстаток.УстановитьПараметр("ПредпочтительноеРазмещение", ?(ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады"), СкладГруппа, СкладПоУмолчанию));
        ЕстьПредпочтительноеРазмещение = Истина;
		ЗапросСвободныйОстаток.УстановитьПараметр("СкладЗаказчик", Неопределено);
		Если ЗначениеЗаполнено(СкладГруппа)
			И ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
			ГруппаДоступностиСкладов = СкладГруппа;
		Иначе
			ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов");
		КонецЕсли;
		ЗаполнятьСуммы = истина;
		ДатаОтгрузки = Заказ.ДатаОтгрузки;
	ИначеЕсли ТипЗнч(ЗаказСсылка)=Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если Заказ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			ЗапросСвободныйОстаток.УстановитьПараметр("СкладЗаказчик", Заказ.Заказчик);
			ЗапросСвободныйОстаток.УстановитьПараметр("ПредпочтительноеРазмещение", Неопределено);
			ЕстьСкладЗаказчик = Истина;
		Иначе
			ЗапросСвободныйОстаток.УстановитьПараметр("СкладЗаказчик", Неопределено);
			ЗапросСвободныйОстаток.УстановитьПараметр("ПредпочтительноеРазмещение", Неопределено);
		КонецЕсли;
		ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов");
		МассивСтатусовПартий.Добавить( Перечисления.СтатусыПартийТоваров.Купленный);
		МассивСтатусовПартий.Добавить( Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
        ЕстьМассивСтатусовПартий = истина;
		ДатаОтгрузки = Заказ.ДатаОтгрузки;
	Иначе
		Возврат;
	КонецЕсли;
	ЗапросСвободныйОстаток.УстановитьПараметр("ДатаОтгрузки", ?(НЕ ЗначениеЗаполнено(ДатаОтгрузки), Заказ.Дата, ДатаОтгрузки));
	ЗапросСвободныйОстаток.УстановитьПараметр("ДокументСсылка", Заказ);
	ЗапросСвободныйОстаток.УстановитьПараметр("Организация",    Заказ.Организация);
    ЗапросСвободныйОстаток.УстановитьПараметр( "СтатусПартии",  МассивСтатусовПартий);
    флРезервированиеТоваров = ложь;
	Если Параметры.Свойство("РезервированиеТоваров") Тогда
		ЗаполнятьСуммы = ложь;
		флРезервированиеТоваров = истина;

		ИмяРеквизитаРазмещение = "НовоеРазмещение";
		Если ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			ТекстЗапросаПоНоменклатуре = "
			|	ВЫБРАТЬ
			|		РегистрВнутренниеЗаказыОстатки.Номенклатура
			|	ИЗ 
			|		РегистрНакопления.ВнутренниеЗаказы.Остатки(, ВнутреннийЗаказ = &СсылкаЗаказ
			|		) КАК РегистрВнутренниеЗаказыОстатки";
        ИначеЕсли ТипЗнч(ЗаказСсылка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ТекстЗапросаПоНоменклатуре = "
			|	ВЫБРАТЬ
			|		РегистрЗаказыПокупателейОстатки.Номенклатура
			|	ИЗ 
			|		РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &СсылкаЗаказ
			|		) КАК РегистрЗаказыПокупателейОстатки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|	КомплектующиеНоменклатуры.Комплектующая
			|	ИЗ 
			|		РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
			|ГДЕ
			|	КомплектующиеНоменклатуры.Номенклатура В(
			|	ВЫБРАТЬ
			|		РегистрЗаказыПокупателейОстатки.Номенклатура
			|	ИЗ
			|		РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &СсылкаЗаказ
			|		) КАК РегистрЗаказыПокупателейОстатки)
			|";
		КонецЕсли;
		ЗапросСписокНоменклатуры = новый Запрос;
		ЗапросСписокНоменклатуры.Текст = ТекстЗапросаПоНоменклатуре;
		ЗапросСписокНоменклатуры.УстановитьПараметр("СсылкаЗаказ",Заказ);
		Результат = ЗапросСписокНоменклатуры.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		МассивНоменклатуры = новый Массив;
		Пока Выборка.Следующий() цикл
			МассивНоменклатуры.Добавить(Выборка.Номенклатура);
		КонецЦикла;
		
	Иначе
		ИмяРеквизитаРазмещение = "Размещение";
		КопияТовары = Товары.Выгрузить();
		КопияТовары.Свернуть("Номенклатура",);
		КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
		КопияВозвратнаяТара.Свернуть("Номенклатура",);

		// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
		МассивНоменклатуры = КопияТовары.ВыгрузитьКолонку("Номенклатура");
		МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
		Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
			МассивНоменклатуры.Добавить(ЭлементТара);
		КонецЦикла; 
	КонецЕсли;
	
	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	
	
	ЗапросСвободныйОстаток.УстановитьПараметр("МассивНоменклатуры",       МассивНоменклатуры);
	ЗапросСвободныйОстаток.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	ЗапросСвободныйОстаток.УстановитьПараметр( "Новый",       Справочники.Качество.Новый);

	Если Авторезервирование Тогда
		УсловиеСклад = "";
		Если ЗначениеЗаполнено(ГруппаДоступностиСкладов) Тогда
			УсловиеСклад = " Склад В" + ТекстФильтраПоСкладам;
			Если ЕстьПредпочтительноеРазмещение Тогда
				УсловиеСклад = УсловиеСклад+" ИЛИ Склад = &ПредпочтительноеРазмещение";
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСкладЗаказчик Тогда
			Если УсловиеСклад = "" Тогда
				УсловиеСклад = "Склад <> &СкладЗаказчик";
			Иначе
				УсловиеСклад = "("+УсловиеСклад+") И Склад <> &СкладЗаказчик"
			КонецЕсли;
		КонецЕсли;
		
		ЗапросСвободныйОстаток.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.Склад                      КАК Размещение,
		|	NULL                                              КАК ТоварТара,
		|	NULL                                              КАК ДоговорКонтрагента,
		|	NULL                                              КАК СтатусПартии,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток          КАК Количество,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток        КАК ОстатокПоОрганизации,
		|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток  КАК КоличествоРазмещенное,
		|	ТоварыКПередачеСоСкладовОстатки.КоличествоОстаток КАК КоличествоКПередаче,
		|	1                                                 КАК СортировкаРазмещение,"
		+?(ЕстьПредпочтительноеРазмещение, "
		|	ВЫБОР
		|		КОГДА ТоварыНаСкладахОстатки.Склад = &ПредпочтительноеРазмещение ТОГДА
		|			0
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ"
		,"0")+" 											  КАК СортировкаСклад,
		|	NULL                                              КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, 
		|		Номенклатура В (&МассивНоменклатуры) И Качество = &Новый
		|" + ?(УсловиеСклад<>""," И ("+УсловиеСклад+")","") + ") КАК ТоварыНаСкладахОстатки
	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (&МассивНоменклатуры)) КАК ТоварыВРезервеНаСкладахОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура                 = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад                      = ТоварыВРезервеНаСкладахОстатки.Склад
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(, Номенклатура В (&МассивНоменклатуры) И Качество = &Новый ) КАК ТоварыКПередачеСоСкладовОстатки
		|ПО ТоварыНаСкладахОстатки.Номенклатура                 = ТоварыКПередачеСоСкладовОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыКПередачеСоСкладовОстатки.ХарактеристикаНоменклатуры
		|   И ТоварыНаСкладахОстатки.Склад                      = ТоварыКПередачеСоСкладовОстатки.Склад
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(, Организация = &Организация И Комиссионер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И Номенклатура В (&МассивНоменклатуры) И Качество = &Новый) КАК ТоварыОрганизацийОстатки
		|ПО   ТоварыНаСкладахОстатки.Номенклатура               = ТоварыОрганизацийОстатки.Номенклатура
		|   И ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры
		|";

	КонецЕсли; 
	Если Авторезервирование И Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		ТекстРазрешенные = "";
	Иначе
		ТекстРазрешенные = " РАЗРЕШЕННЫЕ";
	КонецЕсли;
	Если Авторазмещение Тогда
		УсловиеСклад = "";
		Если ЗначениеЗаполнено(ГруппаДоступностиСкладов) Тогда
			УсловиеСклад = " ЗаказПоставщику.Склад В" + ТекстФильтраПоСкладам;
			Если ЕстьПредпочтительноеРазмещение Тогда
				УсловиеСклад = УсловиеСклад+" ИЛИ ЗаказПоставщику.Склад = &ПредпочтительноеРазмещение";
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСкладЗаказчик Тогда
			Если УсловиеСклад = "" Тогда
				УсловиеСклад = "ЗаказПоставщику.Склад <> &СкладЗаказчик";
			Иначе
				УсловиеСклад = "("+УсловиеСклад+") И ЗаказПоставщику.Склад <> &СкладЗаказчик"
			КонецЕсли;
		КонецЕсли;

		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст +
		"ВЫБРАТЬ "+ТекстРазрешенные+"
		|	ЗаказыПоставщикамОстатки.Номенклатура,
		|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику                 КАК Размещение,
		|	ОстаткиРазмещенных.ТоварТара,
		|	ЗаказыПоставщикамОстатки.ДоговорКонтрагента,
		|	ЗаказыПоставщикамОстатки.СтатусПартии,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток               КАК Количество,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток               КАК ОстатокПоОрганизации,
		|	ОстаткиРазмещенных.КоличествоОстаток                     КАК КоличествоРазмещенное,
		|	0                                                        КАК КоличествоКПередаче,
		|	0                                                        КАК СортировкаРазмещение,"+
		?(ЕстьПредпочтительноеРазмещение,"
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикамОстатки.ЗаказПоставщику.Склад = &ПредпочтительноеРазмещение ТОГДА
		|			0
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ","0")+"                                            КАК СортировкаСклад,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
		|		ЗаказПоставщику.ДатаПоступления <= &ДатаОтгрузки
		|		И ЗаказПоставщику.Организация = &Организация
		|		И Номенклатура В (&МассивНоменклатуры)
		|" + ?(УсловиеСклад<>""," И ("+УсловиеСклад+")","") + "
		|" + ?(ЕстьМассивСтатусовПартий," И СтатусПартии В (&СтатусПартии)","")+"
		|       ) КАК ЗаказыПоставщикамОстатки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, Номенклатура В (&МассивНоменклатуры)) КАК ОстаткиРазмещенных
		|ПО ЗаказыПоставщикамОстатки.Номенклатура                 = ОстаткиРазмещенных.Номенклатура
		|   И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = ОстаткиРазмещенных.ХарактеристикаНоменклатуры
		|   И ЗаказыПоставщикамОстатки.ЗаказПоставщику            = ОстаткиРазмещенных.ЗаказПоставщику
		|";
	КонецЕсли;
	Если Авторезервирование И Авторазмещение Тогда
		Если СтратегияАвторезервирования = Перечисления.СтратегииАвторезервированияНоменклатуры.СначалаВЗаказахПоставщикамПотомНаСкладах Тогда
			// Стратегия авторезервирования: Сначала в заказах поставщикам потом на складах
			ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
			|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
			|	СортировкаРазмещение,       // Сначала в заказах, потом на складах
			|	СортировкаСклад,            // Сначала предпочтительный склад, затем остальные
			|	ДатаПоступления УБЫВ,       // В порядке убывания дат отгрузки
			|	Размещение УБЫВ             // Заказы в обратном порядке";
		Иначе
			// Стратегия авторезервирования: Сначала на складах потом в заказах поставщикам
			ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
			|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
			|	СортировкаРазмещение УБЫВ,  // Сначала на складах, потом в заказах
			|	СортировкаСклад,            // Сначала предпочтительный склад, затем остальные
			|	ДатаПоступления,            // По порядку возрастания дат отгрузки
			|	Размещение                  // По порядку следования заказов";
		КонецЕсли;
	ИначеЕсли Авторезервирование Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаСклад             // Сначала предпочтительный склад, затем остальные ";
	ИначеЕсли Авторазмещение Тогда
		ЗапросСвободныйОстаток.Текст = ЗапросСвободныйОстаток.Текст + "
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаСклад,            // Сначала предпочтительный склад поступления по заказу поставщику, затем остальные
		|	ДатаПоступления УБЫВ,       // В порядке убывания дат отгрузки
		|	Размещение УБЫВ             // В порядке убывания дат заказов";
	КонецЕсли;

	Таблица = ЗапросСвободныйОстаток.Выполнить().Выгрузить();
	
	// Получим права пользователя на превышение остатков по организации.
	ПраваНаПревышениеОстатковПоОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Заказ.Организация);
	
	
	// Вычислим по каждой строке количества, которые можно разместить
	Для Каждого Строка Из Таблица Цикл
		
		Количество            = ?(Строка.Количество = NULL, 0, Строка.Количество);
		КоличествоРазмещенное = ?(Строка.КоличествоРазмещенное = NULL, 0, Макс(Строка.КоличествоРазмещенное,0));
		КоличествоКПередаче   = ?(Строка.КоличествоКПередаче = NULL, 0, Макс(Строка.КоличествоКПередаче,0));
		ОстатокПоОрганизации  = ?(Строка.ОстатокПоОрганизации = NULL, 0, Макс(Строка.ОстатокПоОрганизации,0));
		
		//для тары остатков в регистре ТоварыОрганизаций быть не может
		ЭтоТара = ВозвратнаяТара.Найти(Строка.Номенклатура,"Номенклатура")<>неопределено;

		Если ПраваНаПревышениеОстатковПоОрганизации или ЭтоТара Тогда
			Строка.Количество = Количество - КоличествоРазмещенное - КоличествоКПередаче; 
		Иначе
			Строка.Количество = Мин(Количество - КоличествоРазмещенное - КоличествоКПередаче, ОстатокПоОрганизации); 
		КонецЕсли;	
						  
	КонецЦикла;
	
	Сч = 0;
	Пока Сч < Таблица.Количество() Цикл
		СтрокаТаблицы = Таблица.Получить(Сч);
		Если СтрокаТаблицы.Количество <= 0 Тогда
			 Таблица.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Вычтем из найденных остатков количество, размещение по которому явно указано
	// в табличных частях документа. Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
            // Если количество меньше и равно нулю, пропускаем строку.
			Если СтрокаТЧ.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли; 

			// Сначала обходим все строки с размещением и если размещение не указано, пропускаем строку.
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизитаРазмещение]) Тогда
				Продолжить;
			КонецЕсли; 

			// Если не указано авторазмещение в заказах, то пропускаем все строки, в которых указан заказ.
			Если НЕ Авторазмещение И ТипЗнч(СтрокаТЧ[ИмяРеквизитаРазмещение]) <> Тип("СправочникСсылка.Склады") Тогда
				Продолжить;
			КонецЕсли; 

			// Если не указано авторезервирование на складах, то пропускаем все строки, в которых указан склад.
			Если НЕ Авторезервирование И ТипЗнч(СтрокаТЧ[ИмяРеквизитаРазмещение]) = Тип("СправочникСсылка.Склады") Тогда
				Продолжить;
			КонецЕсли; 

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Размещение", СтрокаТЧ[ИмяРеквизитаРазмещение]);

			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			Если ЭтоТовары Тогда
				// Пересчитаем количество в ТЧ в единицы хранения.
				КоличествоОсталосьПогасить = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
				                           / СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			Иначе
				КоличествоОсталосьПогасить = СтрокаТЧ.Количество;
			КонецЕсли; 

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток из заказа, то дополнительно проверяем на тару/товар
				Если ТипЗнч(Строка.Размещение)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					Если ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Товар Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара <> Перечисления.ТоварТара.Тара Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;

				Строка.Количество = Строка.Количество - СписанноеКоличество;

			КонецЦикла; 

			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задано размещение. Заполнять не будем
				Возврат;
			КонецЕсли; 

		КонецЦикла;

	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, соответствующих авторазмещению товаров и тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл
            Если СтрокаТЧ.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли; 

			Если ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизитаРазмещение]) Тогда
				Продолжить;
			КонецЕсли;
			Если флРезервированиеТоваров Тогда
	            Если ЗначениеЗаполнено(СтрокаТЧ.ИсходноеРазмещение) Тогда
					//нет смысла указывать одинаковыми исходное и новое размещение
					Если СтрокаТЧ.ИсходноеРазмещение = СтрокаТЧ.НовоеРазмещение Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);

			Если ЭтоТовары Тогда
				// Пересчитаем в единицы хранения
				СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент 
				                                  / СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
				СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			КонецЕсли; 

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			Если ЗаполнятьСуммы Тогда
				СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;
            КонецЕсли;
			// Погашаем количество в таблице, записывая размещение
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				// Если это остаток по заказу поставщику, отберем товар и тару
				Если ТипЗнч(Строка.Размещение)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					Если ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Тара  Тогда
						Продолжить;
					ИначеЕсли ЭтоТовары И Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТовары И Строка.ТоварТара = Перечисления.ТоварТара.Товар Тогда
						Продолжить;
					ИначеЕсли НЕ ЭтоТовары И Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли не ЭтоТовары и ОбособленныйУчет И ТипЗнч(Строка.Размещение)=Тип("СправочникСсылка.Склады") Тогда
					//авторезервирование тары под заказ с обособленным учетом не выполняется
	                 Продолжить;
                КонецЕсли;
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				Если ЭтоТовары Тогда
					СписанноеКоличествоВДок = Окр( (Строка.Количество * СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.ЕдиницаИзмерения.Коэффициент)
						* КоэффСписания, 3, РежимОкругления.Окр15как20);
				Иначе
					СписанноеКоличествоВДок = Окр( Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КонецЕсли;

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);

				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);

				НоваяСтрока[ИмяРеквизитаРазмещение]  = Строка.Размещение;
				НоваяСтрока.Количество  = СписанноеКоличествоВДок;
				
				КоэффПогашения = СписанноеКоличество / КоличествоОсталосьПогасить;

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Если ЗаполнятьСуммы Тогда
					НоваяСтрока.Сумма                    = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
					СуммаОсталосьПогасить = СуммаОсталосьПогасить - НоваяСтрока.Сумма;
                КонецЕсли;
				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.Количество - СписанноеКоличествоВДок;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;

			КонецЦикла;
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);

				Если ЭтоТовары Тогда
					НоваяСтрока.Количество = Окр( (КоличествоОсталосьПогасить * СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТЧ.ЕдиницаИзмерения.Коэффициент), 3, РежимОкругления.Окр15как20);
				Иначе
					НоваяСтрока.Количество = КоличествоОсталосьПогасить;
				КонецЕсли;
                Если ЗаполнятьСуммы Тогда
					НоваяСтрока.Сумма                    = Окр(СуммаОсталосьПогасить, 2, 1);
                КонецЕсли;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
				
			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				Стр = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				Если флРезервированиеТоваров Тогда
					РедактируемаяСтрока.ИсходноеРазмещение = Стр.ИсходноеРазмещение;
				КонецЕсли;
				
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					Если ЗаполнятьСуммы Тогда
						РедактируемаяСтрока.СтавкаНДС = Стр.СтавкаНДС;
					КонецЕсли;	
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли; 

			РедактируемаяСтрока[ИмяРеквизитаРазмещение] = Строка[ИмяРеквизитаРазмещение];

			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(РедактируемаяСтрока, Строка);
			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, Заказ);
			КонецЕсли;
			
            Если ЗаполнятьСуммы Тогда
				Если ЭтоТовары Тогда
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, Заказ);
				Иначе
					РедактируемаяСтрока.Цена = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
				КонецЕсли;
			КонецЕсли;
			
			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла; 
	КонецЦикла;

	Если Параметры.РезервироватьПоСериям Тогда
		ЗаполнитьПоСериям(Заказ, Товары,ИмяРеквизитаРазмещение,Параметры.Свойство("РезервированиеТоваров"));
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ДОКУМЕНТОВ "Закрытие заказов ..."

//Подготовка таблицы для формирования движений по регистру РазмещениеЗаказов
//
// Параметры: 
//		ДокСсылка - ссылка на документ
//		МоментВремени - момент времени документа для определения остатков
//		СписокЗаказов - массив заказов для отбора
//		РазмещенияВЗаказе - булево, признак того что в заказе данного вида можно размещать другие заказы
//		РазмещенияЗаказа - булево, признак того что заказ данного вида может быть размещен в других заказах
Функция ПодготовитьТаблицуДляЗакрытияРазмещения(ДокСсылка,МоментВремени,СписокЗаказов,РазмещенияВЗаказе,РазмещенияЗаказа) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ДокументСсылка",  ДокСсылка);
	Запрос.УстановитьПараметр( "МоментДокумента", МоментВремени);
	Запрос.УстановитьПараметр( "СписокЗаказов",   СписокЗаказов);
	
	ТекстУсловие = "";
	Если РазмещенияВЗаказе Тогда
		ТекстУсловие = ТекстУсловие + ?(ТекстУсловие="",""," ИЛИ ")+" ЗаказПоставщику В (&СписокЗаказов) ";
	КонецЕсли;
	Если РазмещенияЗаказа Тогда
		ТекстУсловие = ТекстУсловие + ?(ТекстУсловие="",""," ИЛИ ")+" ЗаказПокупателя В (&СписокЗаказов) ";
	КонецЕсли;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ЗаказПоставщику,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    ТоварТара,
	|    ЗаказПокупателя,
	|    КоличествоОстаток          КАК Количество
	|ИЗ
	|    РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&МоментДокумента, "+ТекстУсловие+")
	|Упорядочить по
	|    ЗаказПоставщику,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    ТоварТара,
	|    ЗаказПокупателя
	|";
    Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//Подготовка таблицы для формирования движений по регистру ТоварыВРезервеНаСкладах
//
// Параметры: 
//		ДокСсылка - ссылка на документ
//		МоментВремени - момент времени документа для определения остатков
//		СписокЗаказов - массив заказов для отбора
Функция ПодготовитьТаблицуДляЗакрытияРезервов(ДокСсылка,МоментВремени,СписокЗаказов) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ДокументСсылка",  ДокСсылка);
	Запрос.УстановитьПараметр( "МоментДокумента", МоментВремени);
	Запрос.УстановитьПараметр( "СписокЗаказов",   СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    Склад,
	|    ДокументРезерва,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|	 СерияНоменклатуры,
	|    КоличествоОстаток          КАК Количество
	|ИЗ
	|    РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&МоментДокумента, ДокументРезерва В (&СписокЗаказов))
	|Упорядочить по
	|    Склад,
	|    ДокументРезерва,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//Подготовка таблицы для формирования движений по регистру ПричиныЗакрытияЗаказов
//
// Параметры: 
//		Заголовок - строка для вывода информационных сообщений
//		ДокСсылка - ссылка на документ
//		ИмяРеквизитаЗаказ - имя реквизита в котором хранится заказ в табличной части документа
//		ИмяДокумента - имя вызвавшего документа
//      ТаблицаПоЗаказам - таблица значений с данными для закрытия заказов покупателей/поставщикам, необходима для получения суммы заказа
Функция ПодготовитьТаблицуПричинЗакрытияЗаказов(Заголовок, ДокСсылка, ИмяРеквизитаЗаказ, ИмяДокумента, ТаблицаПоЗаказам=неопределено) Экспорт
	Перем  КопияТаблицаПоЗаказам;
	
	Если ТаблицаПоЗаказам<>неопределено Тогда
		КопияТаблицаПоЗаказам = ТаблицаПоЗаказам.Скопировать(,ИмяРеквизитаЗаказ+",СуммаУпр,СуммаВзаиморасчетов");
		КопияТаблицаПоЗаказам.Колонки[ИмяРеквизитаЗаказ].Имя = "Заказ";
		КопияТаблицаПоЗаказам.Свернуть ("Заказ", "СуммаУпр,СуммаВзаиморасчетов");
	КонецЕсли;
	
	Запрос = новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТекЗакрытие.%ИмяРеквизитаЗаказ% КАК Заказ,
	               |	ПРЕДСТАВЛЕНИЕ(ТекЗакрытие.%ИмяРеквизитаЗаказ%) КАК ЗаказПредставление,
	               |	ТекЗакрытие.ПричинаЗакрытияЗаказа КАК ПричинаЗакрытияЗаказа,
	               |	РегистрПричины.Регистратор КАК ПредыдущееЗакрытие,
	               |	ПРЕДСТАВЛЕНИЕ(РегистрПричины.Регистратор) КАК ПредыдущееЗакрытиеПредставление,
	               |	0 КАК СуммаУпрУчета,
	               |	0 КАК СуммаВзаиморасчетов
	               |ИЗ  Документ.%ИмяДокумента%.Заказы КАК ТекЗакрытие
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПричиныЗакрытияЗаказов КАК РегистрПричины
	               |		ПО РегистрПричины.Заказ = ТекЗакрытие.%ИмяРеквизитаЗаказ%
	               |			И РегистрПричины.Регистратор <> &Ссылка
				   |	ГДЕ
	               |		ТекЗакрытие.Ссылка = &Ссылка
	               |		И ТекЗакрытие.ПричинаЗакрытияЗаказа <> &ПустаяПричина
				   |Упорядочить по %ИмяРеквизитаЗаказ%";
				   
	ТекстЗапроса = стрЗаменить(ТекстЗапроса,"%ИмяРеквизитаЗаказ%",ИмяРеквизитаЗаказ);
	ТекстЗапроса = стрЗаменить(ТекстЗапроса,"%ИмяДокумента%",ИмяДокумента);

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.УстановитьПараметр("ПустаяПричина", Справочники.ПричиныЗакрытияЗаказов.ПустаяСсылка());
	ТаблицаПричиныЗакрытия = Запрос.Выполнить().Выгрузить();
	
	МассивНаУдаление = Новый Массив();
	Для каждого СтрокаТаблицы Из ТаблицаПричиныЗакрытия Цикл		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредыдущееЗакрытие) Тогда
			#Если Клиент Тогда
			СтрокаСообщения = "Внимание! "+СтрокаТаблицы.ЗаказПредставление+" уже был закрыт документом "+СтрокаТаблицы.ПредыдущееЗакрытиеПредставление+"
			|Причина закрытия данного заказа в учетных регистрах изменена не будет.";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, "", Заголовок);
			#КонецЕсли
			МассивНаУдаление.Добавить(СтрокаТаблицы);
		ИначеЕсли ТаблицаПоЗаказам<>неопределено Тогда
			МассивСтрок = КопияТаблицаПоЗаказам.НайтиСтроки (Новый Структура ("Заказ", СтрокаТаблицы.Заказ));
			Для Каждого ЭлементМассива Из МассивСтрок Цикл
				СтрокаТаблицы.СуммаУпрУчета = СтрокаТаблицы.СуммаУпрУчета + ЭлементМассива.СуммаУпр;
				СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + ЭлементМассива.СуммаВзаиморасчетов;
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого Элемент Из МассивНаУдаление Цикл
		ТаблицаПричиныЗакрытия.Удалить(Элемент);
	КонецЦикла;	
	ТаблицаПричиныЗакрытия.Свернуть("Заказ, ПричинаЗакрытияЗаказа", "СуммаУпрУчета, СуммаВзаиморасчетов");

	Возврат ТаблицаПричиныЗакрытия;

КонецФункции

//Подготовка таблицы для формирования движений по регистру РасчетыСКонтрагентами
//
// Параметры: 
//		МоментВремени - момент времени документа для определения остатков
//		СписокЗаказов - массив заказов для отбора
Функция ПодготовитьТаблицуДляЗакрытияРасчетов(МоментВремени,СписокЗаказов, Множитель=1) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени);
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	Запрос.УстановитьПараметр("Множитель",             	   Множитель);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ДоговорКонтрагента,
	|    Контрагент,
	|    Организация,
	|    Сделка,
	|    РасчетыВозврат,
	|    &Множитель * СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|    &Множитель * СуммаУпрОстаток            КАК СуммаУпр
	|ИЗ
	|    РегистрНакопления.РасчетыСКонтрагентами.Остатки(&МоментДокумента, Сделка В (&СписокЗаказов))
	|Упорядочить по
	|    ДоговорКонтрагента,
	|    Контрагент,
	|    Организация,
	|    Сделка,
	|    РасчетыВозврат
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#Если Клиент Тогда
//Функция возвращает значение типа Булево - признак записи документа
//	Используется в документах Заказ...  перед вызовом отчета АнализЗаказа
Функция ДокументЗаписан(Ссылка,флСообщать=истина) Экспорт
	Если не ЗначениеЗаполнено(Ссылка) Тогда
		Если флСообщать Тогда
			Сообщить("Новый документ не записан! Невозможно сформировать отчет 'Анализ заказа'", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат ложь;
	КонецЕсли;
	Возврат истина;
КонецФункции

//Функция возвращает значение типа Булево - признак есть ли доступ на использование отчета
//	Используется при вызове из кода отчета АнализЗаказа.
Функция ПравоДоступаКОтчету(ИмяОтчета, флСообщать=истина) Экспорт
	МетаданныеОтчета = Метаданные.Отчеты[ИмяОтчета];
	Если ПравоДоступа("Использование",МетаданныеОтчета) Тогда
		Возврат истина;
	КонецЕсли;
	Если флСообщать Тогда
		Сообщить("Нарушение прав доступа! Отчет: "+МетаданныеОтчета.Синоним,СтатусСообщения.Важное);
	КонецЕсли;
	Возврат ложь;
КонецФункции

Процедура СформироватьОтчетАнализЗаказа(ЗаказСсылка,флПроверятьЗаписьЗаказа=ложь, флСообщатьОбОшибках) Экспорт
	Если флПроверятьЗаписьЗаказа И не УправлениеЗаказами.ДокументЗаписан(ЗаказСсылка,флСообщатьОбОшибках) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаказСсылка) 
		ИЛИ (ТипЗнч(ЗаказСсылка) <> Тип("ДокументСсылка.ЗаказПокупателя") И
		ТипЗнч(ЗаказСсылка) <> Тип("ДокументСсылка.ЗаказПоставщику") И
		ТипЗнч(ЗаказСсылка) <> Тип("ДокументСсылка.ВнутреннийЗаказ")) Тогда
		Предупреждение("Не выбран заказ!");
		Возврат;
	КонецЕсли;

	Если не УправлениеЗаказами.ПравоДоступаКОтчету("АнализЗаказа", флСообщатьОбОшибках) Тогда
		Возврат;
	КонецЕсли;
	АнализЗаказа = Отчеты.АнализЗаказа.Создать();
	АнализЗаказаФорма = АнализЗаказа.ПолучитьФорму();

	АнализЗаказа.Заказ = ЗаказСсылка;

	АнализЗаказа.СформироватьОтчет(АнализЗаказаФорма.ЭлементыФормы.ДокументРезультат);
	АнализЗаказаФорма.Открыть();

КонецПроцедуры
#КонецЕсли
