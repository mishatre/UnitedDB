////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	// Параметр ВерсияВызова может содержать значения:
	//  1 - выгрузка в файл;
	//  2 - возврат массива ссылок;
	//  3 - возврат массива структур (в данном случае форма открывается НЕмодально
	//      и при закрытии выполняется оповещение о событии "ЗакрытаФормаВыбораДокументовИБДляПередачиФНС").
	Если НЕ Параметры.Свойство("ВерсияВызова", ВерсияВызова) Тогда
		ВерсияВызова = ?(Параметры.Свойство("ВыгрузитьВФайл") И Параметры.ВыгрузитьВФайл = Истина, 1, 2);
	КонецЕсли;
	
	Если ВерсияВызова <> 1 Тогда
		Если ВерсияВызова = 3 Тогда
			МножественныйВыбор = Истина;
		Иначе
			МножественныйВыбор = (Параметры.Свойство("МножественныйВыбор", МножественныйВыбор) И МножественныйВыбор = Истина);
			Если НЕ МножественныйВыбор Тогда
				Элементы.ДоступныеДокументы.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
				ЗакрыватьПриВыборе = Истина;
			КонецЕсли;
		КонецЕсли;
		Элементы.ТаблицаВыбранныхДокументовВыгрузитьВФайл.Видимость = Ложь;
		Элементы.ТаблицаВыбранныхДокументовВыгрузитьВМассив.Видимость = Истина;
		Элементы.ТаблицаВыбранныхДокументовВыгрузитьВМассив.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	ДоступныеДокументы.Параметры.УстановитьЗначениеПараметра("СписокВидовЭД", МассивВидовЭД());
	
	СформироватьТаблицуБыстрогоОтбора();
	
	УстановитьОтборыПриОткрытииПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборыПриОткрытииПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.ДоступныеДокументы.Обновить();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЕстьНевыгруженныеДокументы И ТаблицаВыбранныхДокументов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'В списке выбора есть невыгруженные документы!
			|Выдействительно хотите закрыть форму?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА ФОРМЫ ДоступныеДокументы

&НаКлиенте
Процедура ДоступныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ВыбраннаяСтрока);
	
	ДобавитьВВыбранныеДокументы(МассивСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды контекстного меню списка формы ДоступныеДокументы

&НаКлиенте
Процедура ОткрытьДокументИзСпискаДоступных(Команда)
	
	ОткрытьДокументНаПросмотр(Элементы.ДоступныеДокументы.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДИНАМИЧЕСКОГО СПИСКА ФОРМЫ ТаблицаВыбранныхДокументов

&НаКлиенте
Процедура ОткрытьДокументИзСпискаВыбранных(Команда)
	
	ОткрытьДокументНаПросмотр(Элементы.ТаблицаВыбранныхДокументов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.ТолькоПросмотр Тогда
		ОткрытьДокументНаПросмотр(Элементы.ТаблицаВыбранныхДокументов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовНомерДокументаОснованияПриИзменении(Элемент)
	
	УстановитьПризнакНеобходимостиЗаполненияДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовДатаДокументаОснованияПриИзменении(Элемент)
	
	УстановитьПризнакНеобходимостиЗаполненияДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивСтрок = ПараметрыПеретаскивания.Значение;
	Если МассивСтрок.Количество() > 0 И ТипЗнч(МассивСтрок[0]) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ДобавитьВВыбранныеДокументы(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	УстановитьОтборы();
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		СписокВидовЭД = Новый СписокЗначений;
		СписокВидовЭД.ЗагрузитьЗначения(МассивВидовЭД());
		ДанныеВыбора = СписокВидовЭД;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "НаправлениеЭД" Тогда
		СписокНаправлений = Новый СписокЗначений;
		СписокНаправлений.Добавить(ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
		СписокНаправлений.Добавить(ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий"));
		ДанныеВыбора = СписокНаправлений;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ТолькоОтраженныеВУчете" Тогда
		Список = Новый СписокЗначений;
		Список.Добавить(Истина);
		Список.Добавить(Ложь);
		ДанныеВыбора = Список;
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)

	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.СостоянияВерсийЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "Булево" Тогда
		Строка.Значение = Ложь;
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьОтборы();
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выбрать(Команда)
	
	МассивСтрок = Элементы.ДоступныеДокументы.ВыделенныеСтроки;
	ДобавитьВВыбранныеДокументы(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.СостоянияВерсийЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "Булево" Тогда
			Строка.Значение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	Выгрузить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВМассив(Команда)
	
	Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Отборы

&НаКлиенте
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для Каждого Строка ИЗ БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
			Прервать;
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДоступныеДокументы.Отбор, "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДоступныеДокументы.Отбор, "ДатаДокумента");
	
	УстановитьОтборыДинамическогоСписка(ЭтаФорма, БыстрыеОтборы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Организация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Организации");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Ответственный:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = Пользователи.АвторизованныйПользователь();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "СостояниеВерсииЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Состояние ЭД:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.СостоянияВерсийЭД";
	НоваяСтрока.Значение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ТолькоОтраженныеВУчете";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Только отраженные в учете:'");
	НоваяСтрока.Тип = "Булево";
	НоваяСтрока.Значение = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическогоСписка(Форма, Отборы)
	
	Для Каждого СтрокаОтбора ИЗ Отборы Цикл
		Если СтрокаОтбора.Параметр = "Ответственный" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"Ответственный",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Контрагент" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"Контрагент",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Организация" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"Организация",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "НаправлениеЭД" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"НаправлениеЭД",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "ВидЭД" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"ВидЭД",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_С"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
															Форма.ДоступныеДокументы.Отбор,
															"СуммаДокумента",
															ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
															СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_По"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
															Форма.ДоступныеДокументы.Отбор,
															"СуммаДокумента",
															ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
															СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_С" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ДоступныеДокументы.Отбор,
													"ДатаДокумента",
													ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
													НачалоДня(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_По" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.ДоступныеДокументы.Отбор,
													"ДатаДокумента",
													ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
													КонецДня(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "СостояниеВерсииЭД" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"СостояниеВерсииЭД",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												ЗначениеЗаполнено(СтрокаОтбора.Значение));
		ИначеЕсли СтрокаОтбора.Параметр = "ТолькоОтраженныеВУчете" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												Форма.ДоступныеДокументы.Отбор,
												"ОтраженВУчете",
												СтрокаОтбора.Значение,
												ВидСравненияКомпоновкиДанных.Равно,
												,
												(ЗначениеЗаполнено(СтрокаОтбора.Значение) И СтрокаОтбора.Значение));
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПриОткрытииПоУмолчанию()
	
	Если Параметры.Свойство("НаправлениеЭД") Тогда
		Отбор = Новый Структура("Параметр", "НаправлениеЭД");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = Параметры.НаправлениеЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидДокумента") Тогда
		Отбор = Новый Структура("Параметр", "ВидЭД");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = ВидЭДПеречислением(Параметры.ВидДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Отбор = Новый Структура("Параметр", "Организация");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = Параметры.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент") Тогда
		Отбор = Новый Структура("Параметр", "Контрагент");
		МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].Значение = Параметры.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура("Параметр", "СостояниеВерсииЭД");
	МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Значение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	КонецЕсли;
	
	Отбор = Новый Структура("Параметр", "ТолькоОтраженныеВУчете");
	МассивСтрок = БыстрыеОтборы.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Значение = Истина;
	КонецЕсли;
	
	УстановитьОтборыДинамическогоСписка(ЭтаФорма, БыстрыеОтборы);
	
КонецПроцедуры

// ТаблицаВыбранныхДокументов

&НаКлиенте
Процедура ДобавитьВВыбранныеДокументы(МассивСтрок)
	
	ВидЭДАкт = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель");
	СостояниеЭДОбменЗавершен = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОбменЗавершен");
	МассивСсылок = Новый Массив;
	ШаблонСообщения = НСтр("ru = 'Для документа ""%1"" не завершен электронный документооборот!'");
	ТекстСообщения = "";
	Для Каждого Строка Из МассивСтрок Цикл
		ДанныеСтроки = Элементы.ДоступныеДокументы.ДанныеСтроки(Строка);
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЭлектронныйДокумент", ДанныеСтроки.ЭлектронныйДокумент);
		НайденыеСтроки = ТаблицаВыбранныхДокументов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденыеСтроки.Количество() = 0 Тогда
			ЕстьНевыгруженныеДокументы = Истина;
			Если ДанныеСтроки.СостояниеВерсииЭД <> СостояниеЭДОбменЗавершен Тогда
				ТекстСообщения = ТекстСообщения
					+ ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + СтрЗаменить(ШаблонСообщения, "%1", ДанныеСтроки.Документ);
			КонецЕсли;
			НоваяСтрока = ТаблицаВыбранныхДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			Если ДанныеСтроки.ВидЭД = ВидЭДАкт Тогда
				МассивСсылок.Добавить(ДанныеСтроки.Документ);
				НоваяСтрока.НеобходимоЗаполнитьДокументОснование = НЕ (ЗначениеЗаполнено(НоваяСтрока.НомерДокументаОснования)
					И ЗначениеЗаполнено(НоваяСтрока.ДатаДокументаОснования));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если МассивСсылок.Количество() > 0 Тогда
		Соответствие = СоответствиеДанныхДокументаОснования(МассивСсылок);
		Если Соответствие.Количество() <> 0 Тогда
			Для Каждого ДокументСсылка Из МассивСсылок Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Документ", ДокументСсылка);
				НайденыеСтроки = ТаблицаВыбранныхДокументов.НайтиСтроки(СтруктураПоиска);
				Структура = Соответствие.Получить(ДокументСсылка);
				Если ТипЗнч(Структура) <> Тип("Структура") Тогда
					Структура = Новый Структура;
				КонецЕсли;
				Для Каждого Строка Из НайденыеСтроки Цикл
					Структура.Свойство("НомерДоговора", Строка.НомерДокументаОснования);
					Структура.Свойство("ДатаДоговора", Строка.ДатаДокументаОснования);
					ЗаполнитьДокументОснование = НЕ (ЗначениеЗаполнено(Строка.НомерДокументаОснования)
													И ЗначениеЗаполнено(Строка.ДатаДокументаОснования));
					Строка.НеобходимоЗаполнитьДокументОснование = ЗаполнитьДокументОснование;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ВерсияВызова <> 1 И МножественныйВыбор = Ложь И ТаблицаВыбранныхДокументов.Количество() > 0 Тогда
		Выгрузить = Истина;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстВопроса = ТекстСообщения + Символы.ПС + НСтр("ru = 'Продолжить выгрузку?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ТаблицаВыбранныхДокументов.Очистить();
				ТекстСообщения = "";
				Выгрузить = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если Выгрузить Тогда
			Выгрузить();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеДанныхДокументаОснования(МассивСсылок)
	
	Соответствие = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьНомерДатаДоговораДокументов(МассивСсылок, Соответствие);
	Если ТипЗнч(Соответствие) <> Тип("Соответствие") Тогда
		Соответствие = Новый Соответствие;
	КонецЕсли;
	Возврат Соответствие;
	
КонецФункции

// Формирование файла выгрузки

&НаСервереБезКонтекста
Функция СформироватьФайлВыгрузки(Знач ТаблицаДокументов)
	
	СоответствиеДанныеФайлаАдресВХранилище = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКВыгрузке", ТаблицаДокументов.Выгрузить());
	ВидыОтветныхТитулов = Новый Массив;
	ВидыОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	ВидыОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Запрос.УстановитьПараметр("ВидыОтветныхТитулов", ВидыОтветныхТитулов);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МассивСсылок.Документ,
		|	МассивСсылок.ЭлектронныйДокумент,
		|	МассивСсылок.ВидЭД,
		|	МассивСсылок.НомерДокумента,
		|	МассивСсылок.ДатаДокумента,
		|	МассивСсылок.Контрагент,
		|	МассивСсылок.Организация,
		|	МассивСсылок.СуммаДокумента,
		|	МассивСсылок.НаправлениеЭД,
		|	МассивСсылок.НомерДокументаОснования,
		|	МассивСсылок.ДатаДокументаОснования,
		|	МассивСсылок.НеобходимоЗаполнитьДокументОснование
		|ПОМЕСТИТЬ ВыбранныеДокументы
		|ИЗ
		|	&ДокументыКВыгрузке КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДокументы.Документ КАК Документ,
		|	ВыбранныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ВыбранныеДокументы.ВидЭД,
		|	ВыбранныеДокументы.НомерДокумента,
		|	ВыбранныеДокументы.ДатаДокумента,
		|	ВыбранныеДокументы.Контрагент,
		|	ВыбранныеДокументы.Организация КАК Организация,
		|	ВыбранныеДокументы.СуммаДокумента,
		|	ВыбранныеДокументы.НаправлениеЭД,
		|	ВыбранныеДокументы.НомерДокументаОснования,
		|	ВыбранныеДокументы.ДатаДокументаОснования,
		|	ВыбранныеДокументы.НеобходимоЗаполнитьДокументОснование,
		|	ПодчиненныеЭД.Ссылка КАК ПодтверждениеСсылка,
		|	ПодчиненныеЭД.ВидЭД КАК ВидЭДПодтверждения
		|ИЗ
		|	ВыбранныеДокументы КАК ВыбранныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ВыбранныеДокументы.ЭлектронныйДокумент = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ВидЭД В (&ВидыОтветныхТитулов))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Документ,
		|	ЭлектронныйДокумент";
	
	Результат = Запрос.Выполнить().Выбрать();
	ТЗОписи = СтруктураТаблицыОписи();
	Пока Результат.СледующийПоЗначениюПоля("Организация") Цикл
		Организация = Результат.Организация;
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("send", Организация.УникальныйИдентификатор());
		УдалитьФайлы(АдресКаталога, "*");
		Пока Результат.СледующийПоЗначениюПоля("ЭлектронныйДокумент") Цикл
			СтрокаТЗОписи = ТЗОписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗОписи, Результат);
			УникальныйИдентификатор = Результат.ЭлектронныйДокумент.УникальныйИдентификатор();
			ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(Результат.ЭлектронныйДокумент, УникальныйИдентификатор);
			СтрокаТЗОписи.ИмяФайлаДанных = ДанныеФайла.ИмяФайла;
			СтрокаТЗОписи.РазмерФайлаДанных = ДанныеФайла.Размер;
			СтрокаТЗОписи.КНД = ЭлектронныеДокументыПовтИсп.КНДпоВидуЭД(Результат.ВидЭД);
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДанныеЭД.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
			МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(Результат.ЭлектронныйДокумент, УникальныйИдентификатор);
			
			Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
				Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
					СтрокаТЗОписи.ИмяФайлаПодписи    = ДанныеФайла.Наименование + "SGN.sgn";
					ДанныеЭД = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
					ДанныеЭД.Записать(АдресКаталога + СтрокаТЗОписи.ИмяФайлаПодписи);
					СтрокаТЗОписи.РазмерФайлаПодписи = ДанныеЭД.Размер();
					Прервать;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат.ПодтверждениеСсылка) Тогда
				ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(Результат.ПодтверждениеСсылка, УникальныйИдентификатор);
				СтрокаТЗОписи.ИмяФайлаДанныхПодтверждения = ДанныеФайла.ИмяФайла;
				СтрокаТЗОписи.РазмерФайлаДанныхПодтверждения = ДанныеФайла.Размер;
				ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ДанныеЭД.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
				МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(Результат.ПодтверждениеСсылка, УникальныйИдентификатор);
				СтрокаТЗОписи.КНДПодтверждения = ЭлектронныеДокументыПовтИсп.КНДпоВидуЭД(Результат.ВидЭДПодтверждения);
				
				Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						СтрокаТЗОписи.ИмяФайлаПодписиПодтверждения    =  ДанныеФайла.Наименование + "SGN.sgn";
						ДанныеЭД = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
						ДанныеЭД.Записать(АдресКаталога + СтрокаТЗОписи.ИмяФайлаПодписиПодтверждения);
						СтрокаТЗОписи.РазмерФайлаПодписиПодтверждения = ДанныеЭД.Размер();
						Прервать;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Файлы = НайтиФайлы(АдресКаталога, "*");
		Если Файлы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось выгрузить документы по Организации ""%1""!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			УдалитьФайлы(АдресКаталога);
			Продолжить;
		КонецЕсли;
		
		МассивИменФайлов = Новый Массив;
		Для Каждого НайденныйФайл Из Файлы Цикл
			
			МассивИменФайлов.Добавить(НайденныйФайл.Имя);
		КонецЦикла;
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
		ИНН = СокрЛП(РеквизитыОрганизации.ИНН);
		ИДОтправителя = ИНН + ?(СтрДлина(ИНН) = 12, "", СокрЛП(РеквизитыОрганизации.КПП));
		ИДВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddЧЧммсс");
		ИмяФайла = "EDI_" + ИДОтправителя + "_" + ИДВыгрузки;
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		ЗипКонтейнер = Новый ЗаписьZipФайла(АдресКаталога + ИмяФайла + ".zip");
		
		Для Каждого Файл Из Файлы Цикл
			ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
		КонецЦикла;
		
		Если ФайлОписанияВыгрузки(Организация, ТЗОписи, АдресКаталога) Тогда
			ЗипКонтейнер.Добавить(АдресКаталога + "описание.xml");
			
			ЗипКонтейнер.Записать();
			
			ДДВыгрузки = Новый ДвоичныеДанные(АдресКаталога + ИмяФайла + ".zip");
			ЗипФайл = Новый Файл(АдресКаталога + ИмяФайла + ".zip");
			ДанныеФайла = Новый Структура("ИмяФайла, Расширение, Размер",
				ЗипФайл.Имя, ЗипФайл.Расширение, ЗипФайл.Размер());
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДДВыгрузки, Организация.УникальныйИдентификатор());
			
			СоответствиеДанныеФайлаАдресВХранилище.Вставить(ДанныеФайла, АдресВХранилище);
		КонецЕсли;
		
		УдалитьФайлы(АдресКаталога);
	КонецЦикла;
	
	Возврат СоответствиеДанныеФайлаАдресВХранилище;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлОписанияВыгрузки(Организация, ТЗОписи, АдресКаталога)
	
	ТекстОшибки = "";
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ИНН, КПП");
	ИНН = СокрЛП(РеквизитыОрганизации.ИНН);
	ПространствоИменСхемы = "Upload2Statements";
	Попытка
		Файл = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		
		ФайлНаДиске = Новый Файл(АдресКаталога + "описание.xml");
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "1.02", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ДатаВыгрузки", Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВремяВыгрузки", Формат(ТекущаяДатаСеанса(), "ДЛФ=T"), Истина, ТекстОшибки);
		
		СвОрганизация = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Организация", ПространствоИменСхемы);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвОрганизация, "Наименование", РеквизитыОрганизации.Наименование, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвОрганизация, "ИНН", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		Если СтрДлина(РеквизитыОрганизации.ИНН) = 10 Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвОрганизация, "КПП", РеквизитыОрганизации.КПП, Истина, ТекстОшибки);
		КонецЕсли;
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "Организация", СвОрганизация, Истина, ТекстОшибки);
		
		СвКонтрагенты = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Контрагенты", ПространствоИменСхемы);
		Контрагент = "";
		ИДКонтрагента = "";
		Для Каждого СтрокаОписи Из ТЗОписи Цикл
			Если СтрокаОписи.Контрагент <> Контрагент Тогда
				СвКонтрагент = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Контрагенты.Контрагент", ПространствоИменСхемы);
				Контрагент = СтрокаОписи.Контрагент;
				РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Наименование, ИНН, КПП");
				ИДКонтрагента = РеквизитыКонтрагента.ИНН + РеквизитыКонтрагента.КПП;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Идентификатор", ИДКонтрагента, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "Наименование", РеквизитыКонтрагента.Наименование, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "ИНН", РеквизитыКонтрагента.ИНН, Истина, ТекстОшибки);
				Если СтрДлина(РеквизитыКонтрагента.ИНН) = 10 Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвКонтрагент, "КПП", РеквизитыКонтрагента.КПП, Истина, ТекстОшибки);
				КонецЕсли;
				СвКонтрагенты.Контрагент.Добавить(СвКонтрагент);
			КонецЕсли;
			СвДокумент = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
			
			ВидДокумента = ВидДокументаПоВидуЭД(СтрокаОписи.ВидЭД);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Вид", ВидДокумента, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "КНД", СтрокаОписи.КНД, Истина, ТекстОшибки);
			Направление = ?(СтрокаОписи.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "0", "1");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Направление", Направление, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Номер", СтрокаОписи.НомерДокумента, Истина, ТекстОшибки);
			ДатаДок = Формат(СтрокаОписи.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "Дата", ДатаДок, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(СтрокаОписи.ДатаДокументаОснования)
				И ЗначениеЗаполнено(СтрокаОписи.НомерДокументаОснования) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "НомерДокОсн", СтрокаОписи.НомерДокументаОснования, , ТекстОшибки);
				ДатаДок = Формат(СтрокаОписи.ДатаДокументаОснования, "ДФ=dd.MM.yyyy");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ДатаДокОсн", ДатаДок, , ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ИдКонтрагента", ИДКонтрагента, Истина, ТекстОшибки);
			
			СвФайл = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДок", ПространствоИменСхемы);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаДанных, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаДанных, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "КНД", СтрокаОписи.КНД, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДок", СвФайл, Истина, ТекстОшибки);
			
			СвФайл = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦП", ПространствоИменСхемы);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписи, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписи, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦП", СвФайл, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(СтрокаОписи.ИмяФайлаДанныхПодтверждения) Тогда
				СвФайл = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлДокПодтверждения", ПространствоИменСхемы);
				
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаДанныхПодтверждения, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаДанныхПодтверждения, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "КНД", СтрокаОписи.КНДПодтверждения, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлДокПодтверждения", СвФайл, , ТекстОшибки);
				
				СвФайл = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.ФайлЭЦППодтверждения", ПространствоИменСхемы);
				
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Имя", СтрокаОписи.ИмяФайлаПодписиПодтверждения, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФайл, "Размер", СтрокаОписи.РазмерФайлаПодписиПодтверждения, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвДокумент, "ФайлЭЦППодтверждения", СвФайл, , ТекстОшибки);
			КонецЕсли;
			
			Файл.Документ.Добавить(СвДокумент);
		КонецЦикла;
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "Контрагенты", СвКонтрагенты, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Файл, АдресКаталога + "описание.xml", Ложь, "windows-1251");
		Возврат Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование выгрузки ЭД в 1с-Отчетность'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураТаблицыОписи()
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("ВидЭД");
	ТЗ.Колонки.Добавить("КНД");
	ТЗ.Колонки.Добавить("НаправлениеЭД");
	ТЗ.Колонки.Добавить("НомерДокумента");
	ТЗ.Колонки.Добавить("ДатаДокумента");
	ТЗ.Колонки.Добавить("НомерДокументаОснования");
	ТЗ.Колонки.Добавить("ДатаДокументаОснования");
	ТЗ.Колонки.Добавить("ИмяФайлаДанных");
	ТЗ.Колонки.Добавить("ИмяФайлаПодписи");
	ТЗ.Колонки.Добавить("РазмерФайлаДанных");
	ТЗ.Колонки.Добавить("РазмерФайлаПодписи");
	ТЗ.Колонки.Добавить("КНДПодтверждения");
	ТЗ.Колонки.Добавить("ИмяФайлаДанныхПодтверждения");
	ТЗ.Колонки.Добавить("ИмяФайлаПодписиПодтверждения");
	ТЗ.Колонки.Добавить("РазмерФайлаДанныхПодтверждения");
	ТЗ.Колонки.Добавить("РазмерФайлаПодписиПодтверждения");
	
	Возврат ТЗ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидДокументаПоВидуЭД(ВидЭД)
	
	ВидДокумента = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		ВидДокумента = "01";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ВидДокумента = "02";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		ВидДокумента = "03";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ВидДокумента = "04";
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

// Прочие

&НаКлиенте
Процедура УстановитьПризнакНеобходимостиЗаполненияДокументаОснования()
	
	ТекущиеДанные = Элементы.ТаблицаВыбранныхДокументов.ТекущиеДанные;
	ТекущиеДанные.НеобходимоЗаполнитьДокументОснование = НЕ (ЗначениеЗаполнено(ТекущиеДанные.НомерДокументаОснования) 
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаДокументаОснования));
	
КонецПроцедуры

&НаКлиенте
Функция ВидЭДСтрокой(ВидЭД)
	
	ВозвращаемыйВидЭД = Неопределено;
	Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель") Тогда
		ВозвращаемыйВидЭД = "АктПриемкиСдачиРабот";
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") Тогда
		ВозвращаемыйВидЭД = "КорректировочныйСчетФактура";
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
		ВозвращаемыйВидЭД = "СчетФактура";
	ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец") Тогда
		ВозвращаемыйВидЭД = "ТоварнаяНакладнаяТОРГ12";
	КонецЕсли;
	
	Возврат ВозвращаемыйВидЭД;
	
КонецФункции

&НаСервере
Функция ВидЭДПеречислением(ВидЭД)
	
	ВозвращаемыйВидЭД = Неопределено;
	Если ТипЗнч(ВидЭД) = Тип("ПеречислениеСсылка.ВидыЭД") Тогда
		ВозвращаемыйВидЭД = ВидЭД;
	ИначеЕсли ВидЭД = "АктПриемкиСдачиРабот" Тогда
		ВозвращаемыйВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
	ИначеЕсли ВидЭД = "КорректировочныйСчетФактура" Тогда
		ВозвращаемыйВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
	ИначеЕсли ВидЭД = "СчетФактура" Тогда
		ВозвращаемыйВидЭД = Перечисления.ВидыЭД.СчетФактура;
	ИначеЕсли ВидЭД = "ТоварнаяНакладнаяТОРГ12" Тогда
		ВозвращаемыйВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	КонецЕсли;
	
	Возврат ВозвращаемыйВидЭД;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивВидовЭД()
	
	МассивВидовЭД = Новый Массив;
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	
	Возврат МассивВидовЭД;
	
КонецФункции

&НаСервереБезконтекста
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокументНаПросмотр(ВыбраннаяСтрока)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить()
	
	Если ТаблицаВыбранныхДокументов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для формирования выгрузки необходимо выбрать хотя бы один документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Отбор = Новый Структура("НеобходимоЗаполнитьДокументОснование", Истина);
		НайденныеСтроки = ТаблицаВыбранныхДокументов.НайтиСтроки(Отбор);
		ФормироватьВыгрузку = Истина;
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'В списке выбранных документов, присутствуют документы вида ""%1"",
				|с незаполненными реквизитами документов-оснований (номер, дата)!
				|Продолжить выгрузку?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", НайденныеСтроки[0].ВидЭД);
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ФормироватьВыгрузку = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ФормироватьВыгрузку Тогда
			Если ВерсияВызова = 1 Тогда
				Соответствие = СформироватьФайлВыгрузки(ТаблицаВыбранныхДокументов);
				Если Соответствие.Количество() > 0 Тогда
					ДоступенВыборКаталога = Истина;
#Если ВебКлиент Тогда
					ДоступенВыборКаталога = Ложь;
#КонецЕсли
					ПолноеИмяФайла = "";
					Если ДоступенВыборКаталога Тогда
						ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
						ДиалогВыбора.Заголовок = Нстр("ru = 'Выберите каталог для сохранения файла (файлов) выгрузки'");
						ДиалогВыбора.ПолноеИмяФайла = "";
						Если НЕ ДиалогВыбора.Выбрать() Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;
					ВсеДокументыВыгружены = Истина;
					Для Каждого Элемент Из Соответствие Цикл
						Если ДоступенВыборКаталога Тогда
							ДДВыгрузки = ПолучитьИзВременногоХранилища(Элемент.Значение);
							ПолноеИмяФайла = ФайловыеФункцииСлужебныйКлиент.НормализоватьКаталог(ДиалогВыбора.Каталог) + Элемент.Ключ.ИмяФайла;
							ДДВыгрузки.Записать(ПолноеИмяФайла);
							ЗаписанныйФайл = Новый Файл(ПолноеИмяФайла);
							ВсеДокументыВыгружены = ВсеДокументыВыгружены И ЗаписанныйФайл.Существует();
						Иначе
							ДанныеФайла = Элемент.Ключ;
							ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", Элемент.Значение);
							ИмяФайла = ПрисоединенныеФайлыКлиент.СохранитьФайлКак(ДанныеФайла);
							ВсеДокументыВыгружены = ВсеДокументыВыгружены И ЗначениеЗаполнено(ИмяФайла);
						КонецЕсли;
					КонецЦикла;
					ЕстьНевыгруженныеДокументы = НЕ ВсеДокументыВыгружены;
				КонецЕсли;
			Иначе
				ЕстьНевыгруженныеДокументы = Ложь;
				Если ВерсияВызова = 2 Тогда
					МассивСсылок = Новый Массив;
					Для Каждого Строка Из ТаблицаВыбранныхДокументов Цикл
						МассивСсылок.Добавить(Строка.Документ);
					КонецЦикла;
					ОповеститьОВыборе(МассивСсылок);
				Иначе
					МассивСтруктур = Новый Массив;
					Для Каждого Строка Из ТаблицаВыбранныхДокументов Цикл
						Структура = Новый Структура;
						Структура.Вставить("СсылкаДокументИБ", Строка.Документ);
						Структура.Вставить("ВидДокумента", ВидЭДСтрокой(Строка.ВидЭД));
						Структура.Вставить("НомерДоговора", Строка.НомерДокументаОснования);
						Структура.Вставить("ДатаДоговора", Строка.ДатаДокументаОснования);
						МассивСтруктур.Добавить(Структура);
					КонецЦикла;
					Оповестить("ЗакрытаФормаВыбораДокументовИБДляПередачиФНС", МассивСтруктур);
					Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
