// Процедура распределяет сумму продаж по проектам.
// Параметры:
// 		ТабДвижений      - таблица значений, со структурой соответствующей структуре регистра Затраты
//		Строка           - строка ТабДвижений. в ней содержится все данные записи регистра кроме проекта.
//					       сумма в данной строке изменится при выходе из процедуры
//		ВидРаспределения - проект, элемент справочника "Виды распределения по проектам", 
//
Процедура РаспределитьПродажиПоПроектам(ТабДвижений, Строка, ВидРаспределения, Знач ДатаКонМесяца) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаспределениеПоПроектамСрезПоследних.Проект,
		|	РаспределениеПоПроектамСрезПоследних.ДоляРаспределения
		|ИЗ
		|	РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонМесяца, ВидРаспределения = &ВидРаспределения) КАК РаспределениеПоПроектамСрезПоследних
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ВидРаспределения", ВидРаспределения);
	Запрос.УстановитьПараметр( "КонМесяца",        КонецМесяца( ДатаКонМесяца));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не удалось выполнить распределение продаж по виду распределения """ + ВидРаспределения + """", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаНДС = (ТабДвижений.Колонки.Найти("НДС") <> Неопределено);
	
	Стоимость          = Строка.Стоимость;
	СтоимостьБезСкидок = Строка.СтоимостьБезСкидок;
	Количество         = Строка.Количество;
	Если ЕстьКолонкаНДС Тогда
		НДС                = Строка.НДС;
	КонецЕсли;
	
	ТабЗапроса = РезультатЗапроса.Выгрузить();
	МассивКоэф = ТабЗапроса.ВыгрузитьКолонку("ДоляРаспределения");
	МассивСтоимость 		 = ОбщегоНазначения.РаспределитьПропорционально(Стоимость, МассивКоэф,,Ложь);
	МассивСтоимостьБезСкидок = ОбщегоНазначения.РаспределитьПропорционально(СтоимостьБезСкидок, МассивКоэф,,Ложь);
	МассивКоличество		 = ОбщегоНазначения.РаспределитьПропорционально(Количество, МассивКоэф,,Ложь);
	Если ЕстьКолонкаНДС Тогда
		МассивНДС                = ОбщегоНазначения.РаспределитьПропорционально(НДС, МассивКоэф,,Ложь);
	КонецЕсли;
	
	Если МассивСтоимость = Неопределено Тогда
		
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		
		Сообщить("Неверные коэффициенты (сумма) для распределения продаж по виду распределения """ + ВидРаспределения + """", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Для К = 0 По МассивСтоимость.ВГраница() Цикл
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		НоваяСтрока.Проект 				= ТабЗапроса[К].Проект;
		НоваяСтрока.Стоимость  			= МассивСтоимость[К];
		НоваяСтрока.СтоимостьБезСкидок 	= ?(МассивСтоимостьБезСкидок = Неопределено, 0, МассивСтоимостьБезСкидок[К]);
		НоваяСтрока.Количество  		= ?(МассивКоличество = Неопределено, 0, МассивКоличество[К]);
		Если ЕстьКолонкаНДС Тогда
			НоваяСтрока.НДС             = ?(МассивНДС = Неопределено, 0, МассивНДС[К]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РаспределитьПродажиПоПроектам()

// Процедура распределяет сумму закупок по проектам.
// Параметры:
// 		ТабДвижений      - таблица значений, со структурой соответствующей структуре регистра Затраты
//		Строка           - строка ТабДвижений. в ней содержится все данные записи регистра кроме проекта.
//					       сумма в данной строке изменится при выходе из процедуры
//		ВидРаспределения - проект, элемент справочника "Виды распределения по проектам". 
//
Процедура РаспределитьЗакупкиПоПроектам(ТабДвижений, Строка, ВидРаспределения, Знач ДатаКонМесяца) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаспределениеПоПроектамСрезПоследних.Проект,
		|	РаспределениеПоПроектамСрезПоследних.ДоляРаспределения
		|ИЗ
		|	РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонМесяца, ВидРаспределения = &ВидРаспределения) КАК РаспределениеПоПроектамСрезПоследних
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ВидРаспределения", ВидРаспределения);
	Запрос.УстановитьПараметр( "КонМесяца",        КонецМесяца( ДатаКонМесяца));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не удалось выполнить распределение закупок по виду распределения """ + ВидРаспределения + """", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Стоимость  = Строка.Стоимость;
	Количество = Строка.Количество;
	НДС        = Строка.НДС;
	
	ТабЗапроса = РезультатЗапроса.Выгрузить();
	МассивКоэф 		 = ТабЗапроса.ВыгрузитьКолонку("ДоляРаспределения");
	МассивСтоимость  = ОбщегоНазначения.РаспределитьПропорционально(Стоимость,  МассивКоэф,,Ложь);
	МассивКоличество = ОбщегоНазначения.РаспределитьПропорционально(Количество, МассивКоэф,,Ложь);
	МассивНДС        = ОбщегоНазначения.РаспределитьПропорционально(НДС       , МассивКоэф,,Ложь);
	
	Если МассивСтоимость = Неопределено Тогда
		Сообщить("Неверные коэффициенты (сумма) для распределения закупок по виду распределения """ + ВидРаспределения + """", СтатусСообщения.Внимание);
		
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		
		Возврат;
		
	КонецЕсли;
	
	Для К = 0 По МассивСтоимость.ВГраница() Цикл
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		НоваяСтрока.Проект     = ТабЗапроса[К].Проект;
		НоваяСтрока.Стоимость  = МассивСтоимость[К];
		НоваяСтрока.Количество = ?(МассивКоличество = Неопределено, 0, МассивКоличество[К]);
		НоваяСтрока.НДС        = ?(МассивНДС = Неопределено, 0, МассивНДС[К]);
	КонецЦикла;

КонецПроцедуры // РаспределитьЗакупкиПоПроектам()

// Процедура распределяет движения денежных средств по проектам.
// Параметры:
// 		ТабДвижений      - таблица значений, со структурой соответствующей структуре регистра Затраты
//		Строка           - строка ТабДвижений. в ней содержится все данные записи регистра кроме проекта.
//					       сумма в данной строке изменится при выходе из процедуры
//		ВидРаспределения - проект, элемент справочника "Виды распределения по проектам". 
//
Процедура РаспределитьДвиженияДСПоПроектам(ТабДвижений, Строка, ВидРаспределения, Знач ДатаКонМесяца) Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РаспределениеПоПроектамСрезПоследних.Проект,
		|	РаспределениеПоПроектамСрезПоследних.ДоляРаспределения
		|ИЗ
		|	РегистрСведений.РаспределениеПоПроектам.СрезПоследних(&КонМесяца, ВидРаспределения = &ВидРаспределения) КАК РаспределениеПоПроектамСрезПоследних
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "ВидРаспределения", ВидРаспределения);
	Запрос.УстановитьПараметр( "КонМесяца",        КонецМесяца( ДатаКонМесяца));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не удалось выполнить распределение движений денежных средств по виду распределения """ + ВидРаспределения + """", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Сумма  = Строка.Сумма;
	СуммаУпр = Строка.СуммаУпр;
	
	ТабЗапроса = РезультатЗапроса.Выгрузить();
	МассивКоэф 		 = ТабЗапроса.ВыгрузитьКолонку("ДоляРаспределения");
	МассивСумма  = ОбщегоНазначения.РаспределитьПропорционально(Сумма, МассивКоэф,,Ложь);
	МассивСуммаУпр= ОбщегоНазначения.РаспределитьПропорционально(СуммаУпр, МассивКоэф,,Ложь);
	
	Если МассивСумма = Неопределено Тогда
		Сообщить("Неверные коэффициенты (сумма) для распределения движения денежных средств по виду распределения """ + ВидРаспределения + """", СтатусСообщения.Внимание);
		
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		
		Возврат;
	КонецЕсли;
	
	Для К = 0 По МассивСумма.ВГраница() Цикл
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		НоваяСтрока.Проект 				= ТабЗапроса[К].Проект;
		НоваяСтрока.Сумма  			= МассивСумма[К];
		НоваяСтрока.СуммаУпр  		= ?(МассивСуммаУпр = Неопределено, 0, МассивСуммаУпр[К]);
	КонецЦикла;
	
КонецПроцедуры // РаспределитьДвиженияДСПоПроектам

Функция ПолучитьТаблицуРаспределенияЗаказПокупателя(Ссылка,Дата)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) КАК Проект,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ КАК ЕстьРаспределение,
	             |	СУММА(ЕСТЬNULL(ДвиженияПоЗаказу.Сумма, 0)) КАК Сумма
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		УстановкаПроектовДляНоменклатурыСрезПоследних.Проект КАК Проект,
	             |		ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК Сумма
	             |	ИЗ
	             |		РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, ЗаказПокупателя = &Ссылка) КАК ЗаказыПокупателейОстатки
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(
	             |			&Дата,
	             |			НоменклатураПроекта В
	             |			    (ВЫБРАТЬ
	             |			        ЗаказыПокупателейОстатки.Номенклатура
	             |			    ИЗ
	             |			        РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, ЗаказПокупателя = &Ссылка) КАК ЗаказыПокупателейОстатки)) КАК УстановкаПроектовДляНоменклатурыСрезПоследних
	             |			ПО ЗаказыПокупателейОстатки.Номенклатура = УстановкаПроектовДляНоменклатурыСрезПоследних.НоменклатураПроекта
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		ПродажиОбороты.Проект,
	             |		ПродажиОбороты.СтоимостьОборот
	             |	ИЗ
	             |		РегистрНакопления.Продажи.Обороты(, , , ЗаказПокупателя = &Ссылка) КАК ПродажиОбороты) КАК ДвиженияПоЗаказу
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект),
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ПустойПроект",Справочники.Проекты.ПустаяСсылка());
	
	ТабЗаказ=Запрос.Выполнить().Выгрузить();
	ТабЗаказ.Колонки.Добавить("СуммаУпр",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТабИтог=ТабЗаказ.СкопироватьКолонки();
	
	Для каждого СтрокаЗаказ Из ТабЗаказ Цикл
		
		Если СтрокаЗаказ.ЕстьРаспределение Тогда
			
			РаспределитьДвиженияДСПоПроектам(ТабИтог, СтрокаЗаказ, СтрокаЗаказ.Проект, Дата);
			
		Иначе
			
			НоваяСтрока = ТабИтог.Добавить();
			ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, СтрокаЗаказ, ТабИтог);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТабИтог.Свернуть("Проект","Сумма");
	
	Возврат ТабИтог;
	
КонецФункции // ПолучитьТаблицуРаспределенияЗаказПокупателя()

Функция ПолучитьТаблицуРаспределенияСчетНаОплатуПокупателю(Ссылка,Дата,ВалютаУпрУчета)

	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) КАК Проект,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ КАК ЕстьРаспределение,
	             |	СУММА(ЕСТЬNULL(ДвиженияПоСчету.Сумма, 0)) КАК Сумма
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВЫРАЗИТЬ(ВЫБОР
	             |				КОГДА ДокументЗаказ.ВалютаДокумента = &ВалютаУпрУчета
	             |					ТОГДА ДокументЗаказ.Сумма
	             |				КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
	             |						ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
	             |					ТОГДА 0
	             |				КОГДА ДокументЗаказ.ВалютаДокумента <> &ВалютаУпрУчета
	             |						И КурсыДокумента.Курс <> 0
	             |						И КурсыУпрУчета.Курс <> 0
	             |					ТОГДА ДокументЗаказ.Сумма * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	             |				ИНАЧЕ 0
	             |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	             |		УстановкаПроектовДляНоменклатурыСрезПоследних.Проект КАК Проект
	             |	ИЗ
	             |		(ВЫБРАТЬ
	             |			СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	             |			СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	             |			СчетНаОплатуПокупателюТовары.Сумма КАК Сумма
	             |		ИЗ
	             |			Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	             |		ГДЕ
	             |			СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	             |		
	             |		ОБЪЕДИНИТЬ ВСЕ
	             |		
	             |		ВЫБРАТЬ
	             |			СчетНаОплатуПокупателюВозвратнаяТара.Ссылка.ВалютаДокумента,
	             |			СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	             |			СчетНаОплатуПокупателюВозвратнаяТара.Сумма
	             |		ИЗ
	             |			Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	             |		ГДЕ
	             |			СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка
	             |		
	             |		ОБЪЕДИНИТЬ ВСЕ
	             |		
	             |		ВЫБРАТЬ
	             |			СчетНаОплатуПокупателюУслуги.Ссылка.ВалютаДокумента,
	             |			СчетНаОплатуПокупателюУслуги.Номенклатура,
	             |			СчетНаОплатуПокупателюУслуги.Сумма
	             |		ИЗ
	             |			Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	             |		ГДЕ
	             |			СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка) КАК ДокументЗаказ
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(
	             |			&Дата,
	             |			НоменклатураПроекта В
	             |			    (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			        СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура
	             |			    ИЗ
	             |			        Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	             |			    ГДЕ
	             |			        СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	             |			
	             |			    ОБЪЕДИНИТЬ
	             |			
	             |			    ВЫБРАТЬ
	             |			        СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура
	             |			    ИЗ
	             |			        Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	             |			    ГДЕ
	             |			        СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка
	             |			
	             |			    ОБЪЕДИНИТЬ
	             |			
	             |			    ВЫБРАТЬ
	             |			        СчетНаОплатуПокупателюУслуги.Номенклатура
	             |			    ИЗ
	             |			        Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	             |			    ГДЕ
	             |			        СчетНаОплатуПокупателюУслуги.Ссылка = &Ссылка)) КАК УстановкаПроектовДляНоменклатурыСрезПоследних
	             |			ПО ДокументЗаказ.Номенклатура = УстановкаПроектовДляНоменклатурыСрезПоследних.НоменклатураПроекта
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
	             |			ПО (ИСТИНА)
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыДокумента
	             |			ПО ДокументЗаказ.ВалютаДокумента = КурсыДокумента.Валюта) КАК ДвиженияПоСчету
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект),
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ";
	
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",ВалютаУпрУчета);
	Запрос.УстановитьПараметр("ПустойПроект",Справочники.Проекты.ПустаяСсылка());
	
	ТабЗаказ=Запрос.Выполнить().Выгрузить();
	ТабЗаказ.Колонки.Добавить("СуммаУпр",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТабИтог=ТабЗаказ.СкопироватьКолонки();
	
	Для каждого СтрокаЗаказ Из ТабЗаказ Цикл
		
		Если СтрокаЗаказ.ЕстьРаспределение Тогда
			
			РаспределитьДвиженияДСПоПроектам(ТабИтог, СтрокаЗаказ, СтрокаЗаказ.Проект, Дата);
			
		Иначе
			
			НоваяСтрока = ТабИтог.Добавить();
			ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, СтрокаЗаказ, ТабИтог);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТабИтог.Свернуть("Проект","Сумма");
	
	Возврат ТабИтог;

КонецФункции // ПолучитьТаблицуРаспределенияСчетНаОплатуПокупателю()

//
//
Функция ПолучитьТаблицуРаспределенияПоПродажам(Ссылка)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ПродажиОбороты.Проект КАК Проект,
	             |	СУММА(ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0)) КАК Сумма
	             |ИЗ
	             |	РегистрНакопления.Продажи.Обороты(, , , ДокументПродажи = &Ссылка) КАК ПродажиОбороты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПродажиОбороты.Проект";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуРаспределенияПоПродажам()

Функция ПолучитьТаблицуРаспределенияЗаказПоставщику(Ссылка,Дата)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) КАК Проект,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ КАК ЕстьРаспределение,
	             |	СУММА(ЕСТЬNULL(ДвиженияПоЗаказу.Сумма, 0)) КАК Сумма
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		УстановкаПроектовДляНоменклатурыСрезПоследних.Проект КАК Проект,
	             |		ЗаказыПоставщикамОстатки.СуммаУпрОстаток КАК Сумма
	             |	ИЗ
	             |		РегистрНакопления.ЗаказыПоставщикам.Остатки(&Дата, ЗаказПоставщику = &Ссылка) КАК ЗаказыПоставщикамОстатки
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(
	             |			&Дата,
	             |			НоменклатураПроекта В
	             |			    (ВЫБРАТЬ
	             |			        ЗаказыПоставщикамОстатки.Номенклатура
	             |			    ИЗ
	             |			        РегистрНакопления.ЗаказыПоставщикам.Остатки(&Дата, ЗаказПоставщику = &Ссылка) КАК ЗаказыПоставщикамОстатки)) КАК УстановкаПроектовДляНоменклатурыСрезПоследних
	             |			ПО ЗаказыПоставщикамОстатки.Номенклатура = УстановкаПроектовДляНоменклатурыСрезПоследних.НоменклатураПроекта
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		ЗакупкиОбороты.Проект,
	             |		ЗакупкиОбороты.СтоимостьОборот
	             |	ИЗ
	             |		РегистрНакопления.Закупки.Обороты(, , , ЗаказПоставщику = &Ссылка) КАК ЗакупкиОбороты) КАК ДвиженияПоЗаказу
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект),
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоЗаказу.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ПустойПроект",Справочники.Проекты.ПустаяСсылка());
	
	ТабЗаказ=Запрос.Выполнить().Выгрузить();
	ТабЗаказ.Колонки.Добавить("СуммаУпр",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТабИтог=ТабЗаказ.СкопироватьКолонки();
	
	Для каждого СтрокаЗаказ Из ТабЗаказ Цикл
		
		Если СтрокаЗаказ.ЕстьРаспределение Тогда
			
			РаспределитьДвиженияДСПоПроектам(ТабИтог, СтрокаЗаказ, СтрокаЗаказ.Проект, Дата);
			
		Иначе
			
			НоваяСтрока = ТабИтог.Добавить();
			ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, СтрокаЗаказ, ТабИтог);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТабИтог.Свернуть("Проект","Сумма");
	
	Возврат ТабИтог;
	
КонецФункции // ПолучитьТаблицуРаспределенияЗаказПоставщику()

Функция ПолучитьТаблицуРаспределенияСчетНаОплатуПоставщика(Ссылка,Дата,ВалютаУпрУчета)

	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) КАК Проект,
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ КАК ЕстьРаспределение,
	             |	СУММА(ЕСТЬNULL(ДвиженияПоСчету.Сумма, 0)) КАК Сумма
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ВЫРАЗИТЬ(ВЫБОР
	             |				КОГДА ДокументЗаказ.ВалютаДокумента = &ВалютаУпрУчета
	             |					ТОГДА ДокументЗаказ.Сумма
	             |				КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
	             |						ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
	             |					ТОГДА 0
	             |				КОГДА ДокументЗаказ.ВалютаДокумента <> &ВалютаУпрУчета
	             |						И КурсыДокумента.Курс <> 0
	             |						И КурсыУпрУчета.Курс <> 0
	             |					ТОГДА ДокументЗаказ.Сумма * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
	             |				ИНАЧЕ 0
	             |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	             |		УстановкаПроектовДляНоменклатурыСрезПоследних.Проект КАК Проект
	             |	ИЗ
	             |		(ВЫБРАТЬ
	             |			СчетНаОплатуПоставщикаТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	             |			СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	             |			СчетНаОплатуПоставщикаТовары.Сумма КАК Сумма
	             |		ИЗ
	             |			Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	             |		ГДЕ
	             |			СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	             |		
	             |		ОБЪЕДИНИТЬ ВСЕ
	             |		
	             |		ВЫБРАТЬ
	             |			СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка.ВалютаДокумента,
	             |			СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура,
	             |			СчетНаОплатуПоставщикаВозвратнаяТара.Сумма
	             |		ИЗ
	             |			Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
	             |		ГДЕ
	             |			СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Ссылка
	             |		
	             |		ОБЪЕДИНИТЬ ВСЕ
	             |		
	             |		ВЫБРАТЬ
	             |			СчетНаОплатуПоставщикаУслуги.Ссылка.ВалютаДокумента,
	             |			СчетНаОплатуПоставщикаУслуги.Номенклатура,
	             |			СчетНаОплатуПоставщикаУслуги.Сумма
	             |		ИЗ
	             |			Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщикаУслуги
	             |		ГДЕ
	             |			СчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка) КАК ДокументЗаказ
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(
	             |			&Дата,
	             |			НоменклатураПроекта В
	             |			    (ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |			        СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура
	             |			    ИЗ
	             |			        Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	             |			    ГДЕ
	             |			        СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	             |			
	             |			    ОБЪЕДИНИТЬ
	             |			
	             |			    ВЫБРАТЬ
	             |			        СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура
	             |			    ИЗ
	             |			        Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
	             |			    ГДЕ
	             |			        СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Ссылка
	             |			
	             |			    ОБЪЕДИНИТЬ
	             |			
	             |			    ВЫБРАТЬ
	             |			        СчетНаОплатуПоставщикаУслуги.Номенклатура
	             |			    ИЗ
	             |			        Документ.СчетНаОплатуПоставщика.Услуги КАК СчетНаОплатуПоставщикаУслуги
	             |			    ГДЕ
	             |			        СчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка)) КАК УстановкаПроектовДляНоменклатурыСрезПоследних
	             |			ПО ДокументЗаказ.Номенклатура = УстановкаПроектовДляНоменклатурыСрезПоследних.НоменклатураПроекта
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
	             |			ПО (ИСТИНА)
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыДокумента
	             |			ПО ДокументЗаказ.ВалютаДокумента = КурсыДокумента.Валюта) КАК ДвиженияПоСчету
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект),
	             |	ВЫБОР
	             |		КОГДА ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ЕСТЬ NULL 
	             |			ТОГДА ЛОЖЬ
	             |		ИНАЧЕ ЕСТЬNULL(ДвиженияПоСчету.Проект, &ПустойПроект) ССЫЛКА Справочник.ВидыРаспределенияПоПроектам
	             |	КОНЕЦ";	
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ВалютаУпрУчета",ВалютаУпрУчета);
	Запрос.УстановитьПараметр("ПустойПроект",Справочники.Проекты.ПустаяСсылка());
	
	ТабЗаказ=Запрос.Выполнить().Выгрузить();
	ТабЗаказ.Колонки.Добавить("СуммаУпр",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТабИтог=ТабЗаказ.СкопироватьКолонки();
	
	Для каждого СтрокаЗаказ Из ТабЗаказ Цикл
		
		Если СтрокаЗаказ.ЕстьРаспределение Тогда
			
			РаспределитьДвиженияДСПоПроектам(ТабИтог, СтрокаЗаказ, СтрокаЗаказ.Проект, Дата);
			
		Иначе
			
			НоваяСтрока = ТабИтог.Добавить();
			ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, СтрокаЗаказ, ТабИтог);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТабИтог.Свернуть("Проект","Сумма");
	
	Возврат ТабИтог;

КонецФункции // ПолучитьТаблицуРаспределенияСчетНаОплатуПоставщика()

//
//
Функция ПолучитьТаблицуРаспределенияПоЗакупкам(Ссылка)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗакупкиОбороты.Проект КАК Проект,
	             |	СУММА(ЕСТЬNULL(ЗакупкиОбороты.СтоимостьОборот, 0)) КАК Сумма
	             |ИЗ
	             |	РегистрНакопления.Закупки.Обороты(, , , ДокументЗакупки = &Ссылка) КАК ЗакупкиОбороты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗакупкиОбороты.Проект";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуРаспределенияПоЗакупкам()



Процедура РаспределитьСписаниеДСПоПроектам(ТабДвижений, Строка, ДокументРасчетов, Дата,ВалютаУпрУчета)
	
	ТипДокумента=ТипЗнч(ДокументРасчетов);
	
	Если ТипДокумента=Тип("ДокументСсылка.ЗаказПоставщику")Тогда
		
		ТабРаспределения=ПолучитьТаблицуРаспределенияЗаказПоставщику(ДокументРасчетов,Дата);
		
	ИначеЕсли ТипДокумента=Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ТабРаспределения=ПолучитьТаблицуРаспределенияСчетНаОплатуПоставщика(ДокументРасчетов,Дата,ВалютаУпрУчета);
		
	Иначе
		
		ТабРаспределения=ПолучитьТаблицуРаспределенияПоЗакупкам(ДокументРасчетов);
		
		
	КонецЕсли;
			
	Сумма  = Строка.Сумма;
	СуммаУпр = Строка.СуммаУпр;
	
	МассивКоэф 		 = ТабРаспределения.ВыгрузитьКолонку("Сумма");
	МассивСумма  = ОбщегоНазначения.РаспределитьПропорционально(Сумма, МассивКоэф,,Ложь);
	МассивСуммаУпр= ОбщегоНазначения.РаспределитьПропорционально(СуммаУпр, МассивКоэф,,Ложь);
	
	Если МассивСумма = Неопределено Тогда
		
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
	
		Возврат;
		
	КонецЕсли;
		
	Для К = 0 По МассивСумма.ВГраница() Цикл
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		НоваяСтрока.Проект 				= ТабРаспределения[К].Проект;
		НоваяСтрока.Сумма  			= МассивСумма[К];
		НоваяСтрока.СуммаУпр  		= ?(МассивСуммаУпр = Неопределено, 0, МассивСуммаУпр[К]);
	КонецЦикла;
	
КонецПроцедуры // РаспределитьСписаниеДСПоПроектам()

Процедура РаспределитьПоступлениеДСПоПроектам(ТабДвижений, Строка, ДокументРасчетов, Дата, ВалютаУпрУчета)
	
	ТипДокумента=ТипЗнч(ДокументРасчетов);
	
	Если ТипДокумента=Тип("ДокументСсылка.ЗаказПокупателя")Тогда
		
		ТабРаспределения=ПолучитьТаблицуРаспределенияЗаказПокупателя(ДокументРасчетов,Дата);
		
	ИначеЕсли ТипДокумента=Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ТабРаспределения=ПолучитьТаблицуРаспределенияСчетНаОплатуПокупателю(ДокументРасчетов,Дата,ВалютаУпрУчета);
				
	Иначе
		
		 ТабРаспределения=ПолучитьТаблицуРаспределенияПоПродажам(ДокументРасчетов);
				
	КонецЕсли;
			
	Сумма  = Строка.Сумма;
	СуммаУпр = Строка.СуммаУпр;
	
	МассивКоэф 		 = ТабРаспределения.ВыгрузитьКолонку("Сумма");
	МассивСумма  = ОбщегоНазначения.РаспределитьПропорционально(Сумма, МассивКоэф,,Ложь);
	МассивСуммаУпр= ОбщегоНазначения.РаспределитьПропорционально(СуммаУпр, МассивКоэф,,Ложь);
	
	Если МассивСумма = Неопределено Тогда
		
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		
		Возврат;
		
	КонецЕсли;
	
	Для К = 0 По МассивСумма.ВГраница() Цикл
		НоваяСтрока = ТабДвижений.Добавить();
		ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТабДвижений);
		НоваяСтрока.Проект 				= ТабРаспределения[К].Проект;
		НоваяСтрока.Сумма  			= МассивСумма[К];
		НоваяСтрока.СуммаУпр  		= ?(МассивСуммаУпр = Неопределено, 0, МассивСуммаУпр[К]);
	КонецЦикла;
	
КонецПроцедуры // РаспределитьПоступлениеДСПоПроектам()



// Функция возвращает флаг использования подсистемы управление проектами.
// Параметры:
//		Дата     - дата проверки флага учетной политики "Ведение учета по проектам"
//		Сообщать - флаг вывода предупреждающего сообщения 
//	Возврат:
//		Булево   - флаг использования учета по проектам
//
Функция ВедениеУчетаПоПроектам(Дата = Неопределено, Сообщать = Ложь) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Отказ = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ);
	
	Если Отказ Тогда
		
		ВедениеУчетаПоПроектам = Ложь;
		
	Иначе
		
		ВедениеУчетаПоПроектам = УчетнаяПолитика.ВедениеУчетаПоПроектам;
		
	КонецЕсли;
	
	Если НЕ ВедениеУчетаПоПроектам И Сообщать Тогда
		Сообщить("Ведение учета по проектам в данной конфигурации отключено.", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Возврат ВедениеУчетаПоПроектам;
	
КонецФункции // ВедениеУчетаПоПроектам()

// Возвращает вид распределения по проектам для статьи движения денежных средств
//
Функция ПолучитьВидРаспределенияДляСтатьиДДС(Статья,Дата) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыРаспределенияСтатейДДС.ВидРаспределенияПоПроектам КАК ВидРаспределения
	|ИЗ
	|	РегистрСведений.УстановкаВидовРаспределенияДляСтатейДДС.СрезПоследних(&Дата, СтатьяДвиженияДенежныхСредств = &Статья) КАК ВидыРаспределенияСтатейДДС";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("Статья",Статья);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.ВидРаспределения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьВидРаспределенияДляСтатьиДДС()

Процедура ОпределитьРасчетныйДокумент(СтрокаПлатеж,ДокументРасчетов) Экспорт
	
	Если (Не СтрокаПлатеж.ДоговорКонтрагента.Пустая()) И СтрокаПлатеж.ВестиПоДокументамРасчетовСКонтрагентом И СтрокаПлатеж.ДокументРасчетовСКонтрагентом=Неопределено Тогда
	
		СтрокаПлатеж.ДокументРасчетовСКонтрагентом=ДокументРасчетов;
	
	КонецЕсли; 
	
КонецПроцедуры // ОпределитьРасчетныйДокумент() 

// Процедура заполняет таблицу движений регистра, отражая движения по проектам.
// Параметры: 
//		ИсходнаяТаблица - подготовленная на основе ТЧ документа таблица
//		ТаблицаДвижений - таблица движений регистра
//		Проект - проект из шапки документа
//		Дата - дата документа
//		ВидДвижения - (строка): продажи или закупки 
//
Процедура ОтразитьДвиженияПоПроектам(ИсходнаяТаблица,ТаблицаДвижений,Проект,Дата,ВидДвижения="Продажи",ДокументРасчетов=Неопределено) Экспорт
	
	ТаблицаПроекты=ИсходнаяТаблица.СкопироватьКолонки();
	
	ВалютаУпрУчета=глЗначениеПеременной("ВалютаУправленческогоУчета");

	Если ВидДвижения="ДенежныеСредстваПоступление" Тогда
		
		// Распределение по проектам.
		Для Каждого Строка Из ИсходнаяТаблица Цикл
			
			Если ЗначениеЗаполнено(Строка.Проект) Тогда
				
				ОпределитьРасчетныйДокумент(Строка,ДокументРасчетов);
				
				Если ТипЗнч(Строка.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
					
					РаспределитьДвиженияДСПоПроектам(ТаблицаПроекты, Строка, Строка.Проект, Дата);
					
				Иначе
					
					НоваяСтрока = ТаблицаПроекты.Добавить();
					ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);
					
				КонецЕсли;
				
			ИначеЕсли Не Строка.ДокументРасчетовСКонтрагентом=Неопределено Тогда
				
				РаспределитьПоступлениеДСПоПроектам(ТаблицаПроекты, Строка, Строка.ДокументРасчетовСКонтрагентом, Дата,ВалютаУпрУчета);
				
			ИначеЕсли Не Строка.Сделка=Неопределено Тогда
				
				ОпределитьРасчетныйДокумент(Строка,ДокументРасчетов);
				РаспределитьПоступлениеДСПоПроектам(ТаблицаПроекты, Строка, Строка.Сделка, Дата,ВалютаУпрУчета);
				
			Иначе
				
				ОпределитьРасчетныйДокумент(Строка,ДокументРасчетов);

				НоваяСтрока = ТаблицаПроекты.Добавить();
				ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);
								
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПроекты.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект","Сумма,СуммаУпр");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПроекты, ТаблицаДвижений);
			
	ИначеЕсли ВидДвижения="ДенежныеСредстваСписание" Тогда
		
		 // Распределение по проектам.
		Для Каждого Строка Из ИсходнаяТаблица Цикл
			
			Если ЗначениеЗаполнено(Строка.Проект) Тогда
				
				ОпределитьРасчетныйДокумент(Строка,ДокументРасчетов);
				
				Если ТипЗнч(Строка.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
				
					РаспределитьДвиженияДСПоПроектам(ТаблицаПроекты, Строка, Строка.Проект, Дата);
					
				Иначе
					
					НоваяСтрока = ТаблицаПроекты.Добавить();
					ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);		
				
				КонецЕсли;
				
			ИначеЕсли Не Строка.ДокументРасчетовСКонтрагентом=Неопределено Тогда
				
				   РаспределитьСписаниеДСПоПроектам(ТаблицаПроекты, Строка, Строка.ДокументРасчетовСКонтрагентом, Дата, ВалютаУпрУчета);
				   
			ИначеЕсли Не Строка.Сделка=Неопределено Тогда
				
				ОпределитьРасчетныйДокумент(Строка,ДокументРасчетов);
				РаспределитьСписаниеДСПоПроектам(ТаблицаПроекты, Строка, Строка.Сделка, Дата, ВалютаУпрУчета);
				
			Иначе
				
				ОпределитьРасчетныйДокумент(Строка,ДокументРасчетов);
				
				НоваяСтрока = ТаблицаПроекты.Добавить();
				ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПроекты.Свернуть("ДокументПланированияПлатежа,ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом,СтатьяДвиженияДенежныхСредств,Проект","Сумма,СуммаУпр");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПроекты, ТаблицаДвижений);

	ИначеЕсли НЕ ЗначениеЗаполнено(Проект) Тогда
					
		// Распределение по проектам.
		Для Каждого Строка Из ИсходнаяТаблица Цикл
			Если ЗначениеЗаполнено(Строка.Проект)
				И ТипЗнч(Строка.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
				
				Если ВидДвижения="Продажи" Тогда
					РаспределитьПродажиПоПроектам(ТаблицаПроекты, Строка, Строка.Проект, Дата);
				ИначеЕсли ВидДвижения="Закупки" Тогда
					РаспределитьЗакупкиПоПроектам(ТаблицаПроекты, Строка, Строка.Проект, Дата);
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = ТаблицаПроекты.Добавить();
				ОбщегоНазначения.КопироватьСтрокуТаблицыЗначений(НоваяСтрока, Строка, ТаблицаПроекты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПроекты, ТаблицаДвижений);
		
	Иначе
		
		Если ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") Тогда
			
			ТаблицаПроекты.Колонки.Добавить("Проект");
			ИсходнаяТаблица.Колонки.Добавить("Проект");
			ИсходнаяТаблица.ЗаполнитьЗначения(Проект,"Проект");	
			
			// Распределение по проектам.
			Для Каждого Строка Из ИсходнаяТаблица Цикл
				
				Если ВидДвижения="Продажи" Тогда
					РаспределитьПродажиПоПроектам(ТаблицаПроекты, Строка, Проект, Дата);
				Иначе
					РаспределитьЗакупкиПоПроектам(ТаблицаПроекты, Строка, Проект, Дата);
				КонецЕсли;
				
			КонецЦикла;
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПроекты, ТаблицаДвижений);	
			
		Иначе	
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ИсходнаяТаблица, ТаблицаДвижений);
			ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтразитьДвиженияПоПроектам()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части.
//  ДопПараметры         - структура с дополнительными параметрами.
//
Процедура НачалоВыбораПроекта( ФормаДокумента, ЭлементФормы, СтандартнаяОбработка, СтруктураОтбора = Неопределено, ДопПараметры = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	МассивТипов = ЭлементФормы.ТипЗначения.Типы();
	
	МассивТиповИсключений = Новый Массив;
	Если Не ДопПараметры = Неопределено Тогда
		Если ДопПараметры.Свойство("ИсключаемыеТипы") Тогда
			МассивТиповИсключений = ДопПараметры["ИсключаемыеТипы"];
		КонецЕсли;
	КонецЕсли;
	
	Для К = 0 По МассивТиповИсключений.ВГраница() Цикл
		Индекс = МассивТипов.ВГраница();
		Пока Индекс >= 0 Цикл
			Если МассивТиповИсключений[К] = МассивТипов[Индекс] Тогда
				МассивТипов.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ИспользоватьРаспределениеЗатратПоПроектам() Тогда
		Индекс = МассивТипов.ВГраница();
		ТипВидыРаспр = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам");
		Пока Индекс >= 0 Цикл
			Если ТипВидыРаспр = МассивТипов[Индекс] Тогда
				МассивТипов.Удалить(Индекс);
				Прервать;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;

	СписокТипов = Новый СписокЗначений;
	Если МассивТипов.Количество() = 0 Тогда // Удалили все возможные типы
	
		Возврат; // Выбор невозможен
		
	ИначеЕсли МассивТипов.Количество() = 1 Тогда
	
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
		
	Иначе

		Для К = 0 По МассивТипов.ВГраница() Цикл
			ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(ЭлементФормы.ТипЗначения.Типы()[К]);
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());
		КонецЦикла;

		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;

		ВыбранныйТип = ВыбранныйЭлемент.Значение;

	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("СправочникСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Справочники[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Справочники[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;

	// Отфильтруем список
	Если НЕ СтруктураОтбора = Неопределено Тогда
		Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
			Если ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
			КонецЕсли;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
		КонецЦикла;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораПроекта()

// Функция возвращает флаг использования механизма распределения затрат по проектам
//
Функция ИспользоватьРаспределениеЗатратПоПроектам(Сообщать = Ложь) Экспорт
	
	Флаг = Константы.ИспользоватьВидыРаспределенияПоПроектам.Получить();
	Если Не Флаг И Сообщать Тогда
		Сообщить("Использование механизма распределения по проектам в данной конфигурации отключено.", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Возврат Флаг;
	
КонецФункции // ИспользоватьРаспределениеЗатратПоПроектам()
