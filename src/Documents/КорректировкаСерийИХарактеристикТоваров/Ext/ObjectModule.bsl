Перем мВалютаРегламентированногоУчета Экспорт;

Перем мЕстьКолонкаСерии Экспорт;

Перем мУдалятьДвижения;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем мРазрешитьНулевыеЦеныВРознице Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаСерийИХарактеристикТоваров.Номер,
	|	КорректировкаСерийИХарактеристикТоваров.Дата,
	|	КорректировкаСерийИХарактеристикТоваров.Организация,
	|	КорректировкаСерийИХарактеристикТоваров.Организация.Представление КАК Поставщик
	|ИЗ
	|	Документ.КорректировкаСерийИХарактеристикТоваров КАК КорректировкаСерийИХарактеристикТоваров
	|
	|ГДЕ
	|	КорректировкаСерийИХарактеристикТоваров.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.Текст =  
	"ВЫБРАТЬ
	|	КорректировкаСерийИХарактеристикТоваровТовары.НомерСтроки,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура.Код                КАК Код,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура.Артикул            Как Артикул,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Номенклатура.НаименованиеПолное КАК Товар,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	КорректировкаСерийИХарактеристикТоваровТовары.КоличествоМест,
	|	КорректировкаСерийИХарактеристикТоваровТовары.Количество,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ХарактеристикаНоменклатуры.Представление КАК ХарактеристикаНоменклатуры,
	|	КорректировкаСерийИХарактеристикТоваровТовары.СерияНоменклатуры.Представление КАК СерияНоменклатуры,
	|	КорректировкаСерийИХарактеристикТоваровТовары.ХарактеристикаНоменклатурыНовая.Представление КАК ХарактеристикаНоменклатурыНовая,
	|	КорректировкаСерийИХарактеристикТоваровТовары.СерияНоменклатурыНовая.Представление КАК СерияНоменклатурыНовая
	|ИЗ
	|	Документ.КорректировкаСерийИХарактеристикТоваров.Товары КАК КорректировкаСерийИХарактеристикТоваровТовары
	|
	|ГДЕ
	|	КорректировкаСерийИХарактеристикТоваровТовары.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаСерийИХарактеристикТоваровТовары.НомерСтроки";

	ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаСерийИХарактеристикТоваров_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку 
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Корректировка серий и характеристик товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ФлагПечатиМест = (Товары.Итог("КоличествоМест") > 0);
	ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьМест    = Макет.ПолучитьОбласть("ШапкаТаблицы|Мест");
	ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + ?(ФлагПечатиМест, 0, ФормированиеПечатныхФорм.РасчетШириныОбластиМакета("Мест", Макет));
	Иначе
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("КолонкаКодов").ШиринаКолонки
		                                    + ?(ФлагПечатиМест, 0, ФормированиеПечатныхФорм.РасчетШириныОбластиМакета("Мест", Макет));
	КонецЕсли;
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Строка|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Пока ВыборкаСтрок.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрок);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрок.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрок.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрок);
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрок);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрок);
		ТабДокумент.Присоединить(ОбластьДанных);
	КонецЦикла;

	// Вывести подвал
	ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "МакетДокумента" Тогда
		ТабДокумент = ПечатьДокумента();
	ИначеЕсли ИмяМакета = "ПриходНаРозничныеСкладыВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Истина);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Метаданные().Представление()));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("МакетДокумента","Корректировка серий и характеристик товаров");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ", "Расход с розничных складов в ценах АТТ");
	СтруктураМакетов.Вставить("ПриходНаРозничныеСкладыВЦенахАТТ", "Приход на розничные склады в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Товар", Перечисления.ТоварТара.Товар);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура                    КАК Номенклатура,
	|	Док.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест            КАК ЕдиницаИзмеренияМест,
	|	Док.Коэффициент                     КАК Коэффициент,
	|	Док.Количество                      КАК Количество,
	|	Док.КоличествоМест                  КАК КоличествоМест," +
	?(Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ, "
	|	Док.ЦенаВРознице                    КАК ЦенаВРознице, ", "") + "
	|	Док.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры               КАК СерияНоменклатуры
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|	И (Док.Номенклатура.ВестиУчетПоСериям ИЛИ Док.Номенклатура.ВестиУчетПоХарактеристикам)
	|	%УсловиеПоСкладу%
	| УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоСкладу%",
		?(НЕ ЗначениеЗаполнено(Склад), "", "И Док.Склад = &Склад"));
	Запрос.УстановитьПараметр("Склад", Склад);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент          = Выборка.Коэффициент;
		СтрокаТабличнойЧасти.КоличествоМест       = Выборка.КоличествоМест;

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтрокаТабличнойЧасти.Цена = Выборка.ЦенаВРознице;
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатурыНовая  = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатурыНовая           = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                         = Справочники.Качество.Новый;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованиюУпр()

// Процедура выполняет заполнение табличной части "Товары" по документу основанию.
// При заполнении копируется состав документа.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоПриходномуОрдеруУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура                    КАК Номенклатура,
	|	Док.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест            КАК ЕдиницаИзмеренияМест,
	|	Док.Коэффициент                     КАК Коэффициент,
	|	Док.Количество                      КАК Количество,
	|	Док.КоличествоМест                  КАК КоличествоМест,
	|	Док.ХарактеристикаНоменклатуры      КАК ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры               КАК СерияНоменклатуры,
	|	&ДокументОснование	                КАК ПриходныйОрдер
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|	И (Док.Номенклатура.ВестиУчетПоСериям ИЛИ Док.Номенклатура.ВестиУчетПоХарактеристикам)
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатурыНовая  = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатурыНовая           = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                         = Справочники.Качество.Новый;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПриходномуОрдеруУпр()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Отказ) Экспорт

	Если не мЕстьКолонкаСерии Тогда
		Отказ = Истина;
		Сообщить("Использование серий номенклатуры отключено. Заполнение невозможно", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

		ТоварыТабличнойЧасти = Товары.Выгрузить();
	
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");

	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = Новый Массив;
	МассивСклады.Добавить(Склад);
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,Склад.ВидСклада=Перечисления.ВидыСкладов.НТТ);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,СерияНоменклатуры");

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();
	
	//по строкам ТЧ Товары, у которых уже заполнена серия - проверим остаток, 
	//	исключим это количество из таблицы серий
	Для каждого Строка из ТоварыТабличнойЧасти цикл

		Если Не ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               Строка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры",          Строка.СерияНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   Строка.Качество);
		СтруктураПоиска.Вставить("Склад",                      Склад);

		Если Склад.ВидСклада=Перечисления.ВидыСкладов.НТТ Тогда
			СтруктураПоиска.Вставить("Цена",                      Строка.Цена);
		КонецЕсли;

		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = Строка.Количество*Строка.Коэффициент;

		Для каждого СтрокаСерий Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			Если СтрокаСерий.Остаток <= 0 Тогда 
				Продолжить;
			КонецЕсли;

			Если СтрокаСерий.Остаток >= КоличествоОсталосьПогасить Тогда
				СтрокаСерий.Остаток = СтрокаСерий.Остаток - КоличествоОсталосьПогасить;
				КоличествоОсталосьПогасить = 0;
				Прервать;
			Иначе
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СтрокаСерий.Остаток;
				СтрокаСерий.Остаток = 0;
			КонецЕсли;

		КонецЦикла;

		Если КоличествоОсталосьПогасить>0 Тогда
			Сообщить("Для строки " + Строка.НомерСтроки+" остатка по серии " + Строка.СерияНоменклатуры
			         + " недостаточно: не хватает " + КоличествоОсталосьПогасить + " " 
			         + Строка.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);
		КонецЕсли;

		НоваяСтрока = Товары.Добавить();

		НоваяСтрока.Номенклатура                        = Строка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения                    = Строка.ЕдиницаИзмерения;
		НоваяСтрока.Коэффициент                         = Строка.Коэффициент;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Строка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Цена                                = Строка.Цена;
		НоваяСтрока.ХарактеристикаНоменклатуры    = Строка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатурыНовая     = Строка.ХарактеристикаНоменклатурыНовая;
		НоваяСтрока.СерияНоменклатуры             = Строка.СерияНоменклатуры;
		НоваяСтрока.СерияНоменклатурыНовая                = Строка.СерияНоменклатурыНовая;

		НоваяСтрока.Качество                            = Строка.Качество;
		НоваяСтрока.Количество                          = Строка.Количество;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		Если ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтруктураПоиска.Вставить("Склад",                      Склад);
		Если Склад.ВидСклада=Перечисления.ВидыСкладов.НТТ Тогда
			СтруктураПоиска.Вставить("Цена",                      ИсходнаяСтрока.Цена);
		КонецЕсли;

		НайденныеСтроки            = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Товары.Добавить();

			НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.ЕдиницаИзмеренияМест                = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры    = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.ХарактеристикаНоменклатурыНовая     = ИсходнаяСтрока.ХарактеристикаНоменклатурыНовая;

			Если ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			КонецЕсли;

			Если ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатурыНовая) Тогда
				НоваяСтрока.СерияНоменклатурыНовая                = ИсходнаяСтрока.СерияНоменклатурыНовая;
			Иначе
				НоваяСтрока.СерияНоменклатурыНовая                = Строка.СерияНоменклатуры;
			КонецЕсли;

			НоваяСтрока.Качество                            = ИсходнаяСтрока.Качество;
			НоваяСтрока.Количество                          = СписанноеКоличество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если Не ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Товары.Добавить();

				НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.ЕдиницаИзмеренияМест                = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры    = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.ХарактеристикаНоменклатурыНовая     = ИсходнаяСтрока.ХарактеристикаНоменклатурыНовая;
				НоваяСтрока.Качество                            = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;

				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество + КоличествоОсталосьПогасить;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Качество");

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ
	   И Не мРазрешитьНулевыеЦеныВРознице Тогда
		СтруктураОбязательныхПолей.Вставить("Цена");
	КонецЕсли;

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	//Проверить на наличие строк, которые ничего не меняют
	ПроверитьНаличиеИзменяемыхРеквизитов(ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьНаличиеИзменяемыхРеквизитов(ТаблицаПоТоварам, Отказ, Заголовок)
	Для каждого Строка из ТаблицаПоТоварам цикл
		Если Строка.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатурыНовая И
			Строка.СерияНоменклатуры = Строка.СерияНоменклатурыНовая Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке № "+СокрЛП(Строка.НомерСтроки)+" не происходит изменений серии и характеристики товара", Отказ, Заголовок);

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения            - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам           - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  Отказ                      - флаг отказа в проведении,
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента,ТаблицаПоТоварам, Отказ, Заголовок)

	Перем ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая;

	ТаблицаПоТоварамСтарая = ТаблицаПоТоварам.Скопировать();
	
	ТаблицаПоТоварамНовая = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамНовая.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаНоменклатурыСтарая";
	ТаблицаПоТоварамНовая.Колонки.СерияНоменклатуры.Имя = "СерияНоменклатурыСтарая";
	ТаблицаПоТоварамНовая.Колонки.ХарактеристикаНоменклатурыНовая.Имя = "ХарактеристикаНоменклатуры";
	ТаблицаПоТоварамНовая.Колонки.СерияНоменклатурыНовая.Имя = "СерияНоменклатуры";

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);

	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента,	ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);

	ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок);

	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

	Если ОтражатьВУправленческомУчете Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период = Дата;
	КонецЕсли;

	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
		
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	Иначе

		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Расход.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			НаборДвижений = Движения.ТоварыВНТТ;
		ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			НаборДвижений = Движения.ТоварыВРознице;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамСтарая);

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);

			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда

				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар);

			ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда

				ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
				УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);

			КонецЕсли;

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ. Приход.
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамНовая);

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Склад);

			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда

				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар);

			ИначеЕсли СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда

				ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, Склад, ТаблицыДанныхДокумента.ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
				УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицыДанныхДокумента.ТаблицаПоТоварам, ТаблицаПоЦенам);

				// Проверка наличия продажных цен на приходуемый товар.
				УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(ЭтотОбъект, "Товары", ТаблицыДанныхДокумента.ТаблицаПоТоварам, Отказ, Заголовок);

			КонецЕсли;

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);

		КонецЕсли;

	КонецЕсли; // Если ОтражатьВУправленческомУчете ...
	
КонецПроцедуры

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамСтарая, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамНовая, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыУпр(ТаблицаДвижений)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");

КонецПроцедуры

Процедура ДвиженияПоСписаннымТоварам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТоварамСтарая, ТаблицаПоТоварамНовая, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамСтарая, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТаблицыПоТоварам = ТаблицаПоТоварамСтарая[Инд];
		
		// определимся надо ли нам изменять серию и характеристику на пустую при проведении по партиям
		Строка.ИзменитьСерию = НЕ ЗначениеЗаполнено(Строка.СерияНоменклатурыНовая);
		Строка.ИзменитьХарактеристику = НЕ ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатурыНовая);
		
		// если не ведется учет по сериям очистим серии в регистре "СписанныеТовары"
		Если НЕ СтрокаТаблицыПоТоварам.ВестиПартионныйУчетПоСериям тогда
			//Строка.СерияНоменклатуры	  = Неопределено;
			Строка.СерияНоменклатурыНовая = Неопределено;
		КонецЕсли;
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		
	КонецЦикла;


	ТаблицаДвижений.ЗаполнитьЗначения(Склад,  "Склад");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.КорректировкаСерийИХарактеристик,"КодОперацииПартииТоваров");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыУпр(ТаблицаДвижений);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

#Если КЛИЕНТ Тогда
		// Выбор склада

		Если мУказаниеСкладовВТЧ Тогда

			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары",       "Склад");

			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "СкладОрдер");

			Склад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Основание, СтруктПараметры);

		КонецЕсли;
#КонецЕсли

		Если Основание.Проведен Тогда
			ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
        Если Основание.БезПраваПродажи Тогда
			Возврат;
		КонецЕсли;

		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		Если Основание.Проведен Тогда
			ЗаполнитьТоварыПоПриходномуОрдеруУпр(Основание);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураШапкиДокумента.Вставить("СкладОтправитель", Склад);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ВидСклада",                                   "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",           "ВидСклада",                                  "ВидСкладаОтправителя");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",     "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                    , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                      , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ЦенаВРознице"                    , "Цена");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"      , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"               , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатурыНовая" , "ХарактеристикаНоменклатурыНовая");
	СтруктураПолей.Вставить("СерияНоменклатурыНовая"          , "СерияНоменклатурыНовая");
	СтруктураПолей.Вставить("Услуга"                          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                           , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                        , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"     , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Качество"                        , "Качество");
	СтруктураПолей.Вставить("Склад"                           , "Ссылка.Склад");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");


УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");

мУказаниеСкладовВТЧ    = (УказаниеСкладов     = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления)
                         Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();

