#Если Клиент Тогда
// Настройка периода
Перем НП Экспорт;

// Все возможные показатели
Перем мТаблицаПоказатели Экспорт;

Перем мНазваниеОтчета Экспорт;
Перем мИмяОтчета;

// Счетчик выведенных в отчет периодов
Перем мВыведеноПериодов;

// Количество группировок в выводе по горизонтали
Перем мГруппировокПоГоризонтали;

// Группировки, выводимые в отчет по горизонтали
Перем мЗначимыеГруппировкиГор;

Перем СоответствиеПриходРасход;

Перем ТабНачальныхОстатков;

// Процедура заполнения начальных настроек отчета
Процедура СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей) Экспорт
	
	СтруктураПараметров=Новый Структура;
	
	Периодичность=?(ДетализацияПоПериодам.Пустая(),"День",ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДетализацияПоПериодам));	
	
	ТекстПостроителя="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемыеДвижения.Период КАК Период,
	|	ВЫРАЗИТЬ(ПланируемыеДвижения.ВидДвиженияПриходРасход КАК Строка(1)) КАК ВидДвиженияПриходРасход,
	|	ВЫРАЗИТЬ(ПланируемыеДвижения.ВидДвиженияДокПлан КАК Строка(1)) КАК ВидДвиженияДокПлан,
	|{ВЫБРАТЬ
	|	ПланируемыеДвижения.Период КАК Период,
	|	ПланируемыеДвижения.Организация КАК Организация,
	|	ПланируемыеДвижения.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ПланируемыеДвижения.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	ПланируемыеДвижения.ДокументДвижения,
	|	ПланируемыеДвижения.ДокументДвиженияКонтрагент КАК ДокументДвиженияКонтрагент,
	|	ПланируемыеДвижения.ДокументДвиженияОтветственный КАК ДокументДвиженияОтветственный}
	|	ПланируемыеДвижения.СуммаПолучениеДокумент КАК СуммаПолучениеДокумент,
	|	ПланируемыеДвижения.СуммаПолучениеПлан КАК СуммаПолучениеПлан,
	|	ПланируемыеДвижения.СуммаРасходДокумент КАК СуммаРасходДокумент,
	|	ПланируемыеДвижения.СуммаРасходПлан КАК СуммаРасходПлан,
	|	ПланируемыеДвижения.ОстатокПолучениеДокумент КАК ОстатокПолучениеДокумент,
	|	ПланируемыеДвижения.ОстатокПолучениеПлан КАК ОстатокПолучениеПлан,
	|	ПланируемыеДвижения.ОстатокРасходДокумент КАК ОстатокРасходДокумент,
	|	ПланируемыеДвижения.ОстатокРасходПлан КАК ОстатокРасходПлан
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДокументПолучения.Дата,"+Периодичность+") КАК Период,
	|		&ПараметрПоступление КАК ВидДвиженияПриходРасход,
	|		&ПараметрПоступлениеДок КАК ВидДвиженияДокПлан,
	|		Организация КАК Организация,
	|		ВидДенежныхСредств КАК ВидДенежныхСредств,
	|		БанковскийСчетКасса КАК БанковскийСчетКасса,
	|		БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|		ДокументПолучения КАК ДокументДвижения,
	|		ДокументПолучения.Контрагент КАК ДокументДвиженияКонтрагент,
	|		ДокументПолучения.Ответственный КАК ДокументДвиженияОтветственный,
	|		СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		СуммаОстаток КАК СуммаПолучениеДокумент,
	|		0 КАК СуммаПолучениеПлан,
	|		0 КАК СуммаРасходДокумент,
	|		0 КАК СуммаРасходПлан,
	|		0 КАК ОстатокПолучениеДокумент,
	|		0 КАК ОстатокПолучениеПлан,
	|		0 КАК ОстатокРасходДокумент,
	|		0 КАК ОстатокРасходПлан
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(,ДокументПолучения.Дата МЕЖДУ &ДатаНач И &ДатаКон) КАК ДенежныеСредстваКПолучениюОстатки
	|	
	|	ГДЕ
	|		(ДенежныеСредстваКПолучениюОстатки.СуммаОстаток <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(&ДатаНач,"+Периодичность+") КАК Период,
	|		&ПараметрПоступление КАК ВидДвиженияПриходРасход,
	|		&ПараметрПоступлениеДок КАК ВидДвиженияДокПлан,
	|		Организация КАК Организация,
	|		ВидДенежныхСредств КАК ВидДенежныхСредств,
	|		БанковскийСчетКасса КАК БанковскийСчетКасса,
	|		БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|		ДокументПолучения КАК ДокументДвижения,
	|		ДокументПолучения.Контрагент КАК ДокументДвиженияКонтрагент,
	|		ДокументПолучения.Ответственный КАК ДокументДвиженияОтветственный,
	|		СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		0 КАК СуммаПолучениеДокумент,
	|		0 КАК СуммаПолучениеПлан,
	|		0 КАК СуммаРасходДокумент,
	|		0 КАК СуммаРасходПлан,
	|		СуммаОстаток КАК ОстатокПолучениеДокумент,
	|		0 КАК ОстатокПолучениеПлан,
	|		0 КАК ОстатокРасходДокумент,
	|		0 КАК ОстатокРасходПлан
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(&ДатаОстаток) КАК ДенежныеСредстваКПолучениюОстатки1
	|	ГДЕ
	|		(ДенежныеСредстваКПолучениюОстатки1.СуммаОстаток <> 0)
	|	ОБЪЕДИНИТЬ ВСЕ	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДокументПланирования.ДатаПоступления,"+Периодичность+"),
	|		&ПараметрПоступление КАК ВидДвиженияПриходРасход,
	|		&ПараметрПоступлениеПлан КАК ВидДвиженияДокПлан,
	|		Организация КАК Организация,
	|		ДокументПланирования.ФормаОплаты,
	|		ДокументПланирования.БанковскийСчетКасса,
	|		ДокументПланирования.ВалютаДокумента,
	|		ДокументПланирования,
	|		ДокументПланирования.Контрагент,
	|		ДокументПланирования.Ответственный,
	|		СтатьяДвиженияДенежныхСредств,
	|		0,
	|		СуммаОстаток,
	|		0,
	|		0,
	|		0 КАК ОстатокПолучениеДокумент,
	|		0 КАК ОстатокПолучениеПлан,
	|		0 КАК ОстатокРасходДокумент,
	|		0 КАК ОстатокРасходПлан
	|	ИЗ
	|		РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(,(ДокументПланирования.ДатаПоступления МЕЖДУ &ДатаНач И &ДатаКон)  И ДокументПланирования.ВключатьВПлатежныйКалендарь ) КАК ПланируемыеПоступленияДенежныхСредствОстатки
	|	
	|	ГДЕ
	|		(ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(&ДатаНач,"+Периодичность+"),
	|		&ПараметрПоступление КАК ВидДвиженияПриходРасход,
	|		&ПараметрПоступлениеПлан КАК ВидДвиженияДокПлан,
	|		Организация КАК Организация,
	|		ДокументПланирования.ФормаОплаты,
	|		ДокументПланирования.БанковскийСчетКасса,
	|		ДокументПланирования.ВалютаДокумента,
	|		ДокументПланирования,
	|		ДокументПланирования.Контрагент,
	|		ДокументПланирования.Ответственный,
	|		СтатьяДвиженияДенежныхСредств,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0 КАК ОстатокПолучениеДокумент,
	|		СуммаОстаток КАК ОстатокПолучениеПлан,
	|		0 КАК ОстатокРасходДокумент,
	|		0 КАК ОстатокРасходПлан
	|	ИЗ
	|		РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(&ДатаОстаток, ДокументПланирования.ВключатьВПлатежныйКалендарь) КАК ПланируемыеПоступленияДенежныхСредствОстатки1
	|	
	|	ГДЕ
	|		(ПланируемыеПоступленияДенежныхСредствОстатки1.СуммаОстаток <> 0)
	|	ОБЪЕДИНИТЬ ВСЕ	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДокументСписания.Дата,"+Периодичность+"),
	|		&ПараметрРасход,
	|		&ПараметрРасходДок,
	|		Организация КАК Организация,
	|		ВидДенежныхСредств,
	|		БанковскийСчетКасса,
	|		БанковскийСчетКасса.ВалютаДенежныхСредств,
	|		ДокументСписания,
	|		ДокументСписания.Контрагент,
	|		ДокументСписания.Ответственный,
	|		СтатьяДвиженияДенежныхСредств,
	|		0,
	|		0,
	|		СуммаОстаток,
	|		0,
	|		0 КАК ОстатокПолучениеДокумент,
	|		0 КАК ОстатокПолучениеПлан,
	|		0 КАК ОстатокРасходДокумент,
	|		0 КАК ОстатокРасходПлан
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(,ДокументСписания.Дата МЕЖДУ &ДатаНач И &ДатаКон ) КАК ДенежныеСредстваКСписаниюОстатки
	|	
	|	ГДЕ
	|		(ДенежныеСредстваКСписаниюОстатки.СуммаОстаток <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(&ДатаНач,"+Периодичность+"),
	|		&ПараметрРасход,
	|		&ПараметрРасходДок,
	|		Организация КАК Организация,
	|		ВидДенежныхСредств,
	|		БанковскийСчетКасса,
	|		БанковскийСчетКасса.ВалютаДенежныхСредств,
	|		ДокументСписания,
	|		ДокументСписания.Контрагент,
	|		ДокументСписания.Ответственный,
	|		СтатьяДвиженияДенежныхСредств,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0 КАК ОстатокПолучениеДокумент,
	|		0 КАК ОстатокПолучениеПлан,
	|		СуммаОстаток КАК ОстатокРасходДокумент,
	|		0 КАК ОстатокРасходПлан
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(&ДатаОстаток) КАК ДенежныеСредстваКСписаниюОстатки1
	|	
	|	ГДЕ
	|		(ДенежныеСредстваКСписаниюОстатки1.СуммаОстаток <> 0)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ЗаявкаНаРасходование.ДатаРасхода,"+Периодичность+"),
	|		&ПараметрРасход,
	|		&ПараметрРасходПлан,
	|		Организация КАК Организация,
	|		ЗаявкаНаРасходование.ФормаОплаты,
	|		ЗаявкаНаРасходование.БанковскийСчетКасса,
	|		ЗаявкаНаРасходование.ВалютаДокумента,
	|		ЗаявкаНаРасходование,
	|		ЗаявкаНаРасходование.Контрагент,
	|		ЗаявкаНаРасходование.Ответственный,
	|		СтатьяДвиженияДенежныхСредств,
	|		0,
	|		0,
	|		0,
	|		СуммаОстаток,
	|		0 КАК ОстатокПолучениеДокумент,
	|		0 КАК ОстатокПолучениеПлан,
	|		0 КАК ОстатокРасходДокумент,
	|		0 КАК ОстатокРасходПлан
	|	ИЗ
	//|		РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(,(ЗаявкаНаРасходование.ДатаРасхода МЕЖДУ &ДатаНач И &ДатаКон) И ЗаявкаНаРасходование.ВключатьВПлатежныйКалендарь) КАК ЗаявкиНаРасходованиеСредствОстатки
	|		РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(,ЗаявкаНаРасходование В (ВЫБРАТЬ Ссылка ИЗ Документ.ЗаявкаНаРасходованиеСредств ГДЕ (ДатаРасхода МЕЖДУ &ДатаНач И &ДатаКон) И ВключатьВПлатежныйКалендарь)) КАК ЗаявкиНаРасходованиеСредствОстатки
	|	
	|	ГДЕ
	|		(ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток <> 0)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(&ДатаНач,"+Периодичность+"),
	|		&ПараметрРасход,
	|		&ПараметрРасходПлан,
	|		Организация КАК Организация,
	|		ЗаявкаНаРасходование.ФормаОплаты,
	|		ЗаявкаНаРасходование.БанковскийСчетКасса,
	|		ЗаявкаНаРасходование.ВалютаДокумента,
	|		ЗаявкаНаРасходование,
	|		ЗаявкаНаРасходование.Контрагент,
	|		ЗаявкаНаРасходование.Ответственный,
	|		СтатьяДвиженияДенежныхСредств,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0 КАК ОстатокПолучениеДокумент,
	|		0 КАК ОстатокПолучениеПлан,
	|		0 КАК ОстатокРасходДокумент,
	|		СуммаОстаток КАК ОстатокРасходПлан
	|	ИЗ
	//|		РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(&ДатаОстаток, ЗаявкаНаРасходование.ВключатьВПлатежныйКалендарь) КАК ЗаявкиНаРасходованиеСредствОстатки1
	|		РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(&ДатаОстаток, ЗаявкаНаРасходование В (ВЫБРАТЬ Ссылка ИЗ Документ.ЗаявкаНаРасходованиеСредств ГДЕ ВключатьВПлатежныйКалендарь)) КАК ЗаявкиНаРасходованиеСредствОстатки1
	|	
	|	ГДЕ
	|		(ЗаявкиНаРасходованиеСредствОстатки1.СуммаОстаток <> 0)) КАК ПланируемыеДвижения
	|	
	|	{ГДЕ
	|	ПланируемыеДвижения.Организация,
	|	ПланируемыеДвижения.ВидДенежныхСредств,
	|	ПланируемыеДвижения.БанковскийСчетКасса,
	|	ПланируемыеДвижения.ВалютаДенежныхСредств}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	ВидДвиженияПриходРасход,
	|	ВидДвиженияДокПлан
	|
	|ИТОГИ СУММА(СуммаПолучениеДокумент), СУММА(СуммаПолучениеПлан), СУММА(СуммаРасходДокумент), СУММА(СуммаРасходПлан),
	| СУММА(ОстатокПолучениеДокумент), СУММА(ОстатокПолучениеПлан), СУММА(ОстатокРасходДокумент), СУММА(ОстатокРасходПлан) ПО
	|	Период,
	|	ВидДвиженияПриходРасход,
	|	ВидДвиженияДокПлан
	|{ИТОГИ ПО
	|	Период,
	|	Организация,
	|	ВидДенежныхСредств,
	|	БанковскийСчетКасса,
	|	ВалютаДенежныхСредств,
	|	ВидДвиженияПриходРасход,
	|	ВидДвиженияДокПлан,
	|	ДокументДвижения,
	|	ДокументДвиженияКонтрагент,
	|	ДокументДвиженияОтветственный,
	|	СтатьяДвиженияДенежныхСредств}";
	
	ПостроительОтчета.Текст=ТекстПостроителя;
	
	ПостроительОтчета.Параметры.Вставить("ПараметрПоступление","1");
	ПостроительОтчета.Параметры.Вставить("ПараметрПоступлениеДок","3");
	ПостроительОтчета.Параметры.Вставить("ПараметрПоступлениеПлан","4");
	ПостроительОтчета.Параметры.Вставить("ПараметрРасход","2");
	ПостроительОтчета.Параметры.Вставить("ПараметрРасходДок","5");
	ПостроительОтчета.Параметры.Вставить("ПараметрРасходПлан","6");
	
	СоответствиеПриходРасход=Новый Соответствие;
	СоответствиеПриходРасход.Вставить("1","Планируемые поступления");
	СоответствиеПриходРасход.Вставить("2","Планируемые расходы");
	СоответствиеПриходРасход.Вставить("3","Неоплаченные входящие документы");
	СоответствиеПриходРасход.Вставить("4","Документы планирования поступления");
	СоответствиеПриходРасход.Вставить("5","Неоплаченные исходящие документы");
	СоответствиеПриходРасход.Вставить("6","Заявки на расходование средств");
	
	ПостроительОтчета.ВыводитьОбщиеИтоги=Ложь;
				
	СтруктураПредставлениеПолей = Новый Структура(
	"	Организация,
	|ВидДенежныхСредств,
	|	БанковскийСчетКасса,
	|	ВалютаДенежныхСредств,
	|	ДокументДвижения,
	|	ДокументДвиженияКонтрагент,
	|	ДокументДвиженияОтветственный,
	|	СтатьяДвиженияДенежныхСредств,
	|	Сумма",
	"Организация",
	"Вид денежных средств (наличные, безналичные)",
	"Банковский счет, касса",
	"Валюта",
	"Документ движения",
	"Контрагент",
	"Ответственный",
	"Статья движения денежных средств",
	"Сумма в валюте банковского счета, кассы");
		
	// Числовые показатели заносятся в специальную таблицу
	СтрПоказатели = мТаблицаПоказатели.Добавить();
	СтрПоказатели.ИмяПоля           = "Сумма";
	СтрПоказатели.ПредставлениеПоля = СтруктураПредставлениеПолей[СтрПоказатели.ИмяПоля];
	СтрПоказатели.ФорматнаяСтрока   = "ЧЦ=15; ЧДЦ=2";
	
// Поля отбора, которые будут показаны на основной форме, заносятся в массив МассивОтбора
	МассивОтбора.Добавить("Организация");
	МассивОтбора.Добавить("БанковскийСчетКасса");
	МассивОтбора.Добавить("ВидДенежныхСредств");
	МассивОтбора.Добавить("ВалютаДенежныхСредств");
			
КонецПроцедуры // СформироватьНастройкиОтчета()

Процедура ЗаполнитьНачальныеНастройки() Экспорт
			
	ВыводитьИтогиПоВсемУровням=Истина;
	
	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	мТаблицаПоказатели  = Новый ТаблицаЗначений;
	мТаблицаПоказатели.Колонки.Добавить("ИмяПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ПредставлениеПоля", ОписаниеТиповСтрока);
	мТаблицаПоказатели.Колонки.Добавить("ФорматнаяСтрока", ОписаниеТиповСтрока);
	
	мТаблицаОсновныеГруппировки=мТаблицаПоказатели.Скопировать();
	мТаблицаДополнительныеГруппировки=мТаблицаПоказатели.Скопировать();
		
	мСтруктураСвязиПоказателейИИзмерений = Новый Структура;
	
	СтруктураПредставлениеПолей = Новый Структура;

	мСоответствиеНазначений = Новый Соответствие;

	МассивОтбора = Новый Массив;
	
	мНазваниеОтчета = "Платежный календарь";
	мНаДату = Ложь;
	
	ГруппировкаГоризонтальная="";

	Если Показатели.Количество()=0 Тогда
		
		// Числовые показатели заносятся в таблицу этого отчета
				
		СтрПоказатели = Показатели.Добавить();
		СтрПоказатели.Имя           = "Сумма";
		СтрПоказатели.Представление = "Сумма в валюте банковского счета, кассы";
		СтрПоказатели.Использование   = Истина;
				
	КонецЕсли;
	
	Если ОсновныеГруппировки.Количество()=0 Тогда
		СтрГруппировка = ОсновныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "Организация";
		СтрГруппировка.Представление = "Организация";
		СтрГруппировка.Использование   = Истина;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрГруппировка = ОсновныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "ВалютаДенежныхСредств";
		СтрГруппировка.Представление = "Валюта";
		СтрГруппировка.Использование   = Истина;
		
		// Числовые показатели заносятся в таблицу этого отчета
		СтрГруппировка = ОсновныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "ВидДенежныхСредств";
		СтрГруппировка.Представление = "Вид денежных средств (наличные, безналичные)";
		СтрГруппировка.Использование   = Истина;
		
		СтрГруппировка = ОсновныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "БанковскийСчетКасса";
		СтрГруппировка.Представление = "Банковский счет, касса";
		СтрГруппировка.Использование   = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеГруппировки.Количество()=0 Тогда
		
		СтрГруппировка = ДополнительныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "СтатьяДвиженияДенежныхСредств";
		СтрГруппировка.Представление = "Статья движения денежных средств";
		СтрГруппировка.Использование = Ложь;
		
		СтрГруппировка = ДополнительныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "ДокументДвиженияОтветственный";
		СтрГруппировка.Представление = "Ответственный";
		СтрГруппировка.Использование = Ложь;

		СтрГруппировка = ДополнительныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "ДокументДвиженияКонтрагент";
		СтрГруппировка.Представление = "Контрагент";
		СтрГруппировка.Использование = Ложь;
		
		СтрГруппировка = ДополнительныеГруппировки.Добавить();
		СтрГруппировка.Имя           = "ДокументДвижения";
		СтрГруппировка.Представление = "Документ движения";
		СтрГруппировка.Использование = Ложь;
				
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДетализацияПоПериодам) Тогда
		ДетализацияПоПериодам=Перечисления.Периодичность.День;
	КонецЕсли;

	ТекНастройкиПостроителя="";
	
	Если НЕ ПостроительОтчета.Текст="" Тогда
		ТекНастройкиПостроителя=ПостроительОтчета.ПолучитьНастройки(Истина,Истина,Истина,Ложь);
	КонецЕсли;
	
	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;
	
	//Очистим порядок
	Пока ПостроительОтчета.Порядок.Количество()>0 Цикл
		ПостроительОтчета.Порядок.Удалить(0);
	КонецЦикла;
	
	СформироватьНастройкиОтчета(МассивОтбора,СтруктураПредставлениеПолей);
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	УправлениеОтчетами.ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	
	Если ТипЗнч(ТекНастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(ТекНастройкиПостроителя,Истина,Истина,Истина,Ложь);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь, РапортРуководителю=Ложь) Экспорт

	Если ЗначениеЗаполнено(ДатаКон) И ДатаКон < ДатаНач Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Конечная дата периода отчета не должна быть меньше начальной даты!");
		ДокументРезультат.Очистить();
		Возврат;
	
	КонецЕсли;
	
	мЗначимыеГруппировкиГор.Очистить();
		
	// Списки для шапки отчета
	СтрПоказатели = "";
	СтрГруппировкиВерт = "";
	СтрГруппировкиГор="";
	СтрФильтры = "";
	СтрОшибки="";
	
	ПериодДобавлен=Ложь;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[Сч];
		
		Если ТекущаяСтрока.Имя="Период" Тогда
			
			ПутьКДанным = ТекущаяСтрока.ПутьКДанным;
					
			ПостроительОтчета.ИзмеренияСтроки.Удалить(ТекущаяСтрока);
			ПостроительОтчета.ИзмеренияКолонки.Добавить(ПутьКДанным, , ТипИзмеренияПостроителяОтчета.Элементы);
			ПериодДобавлен=Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПериодДобавлен Тогда
		
		ПостроительОтчета.ИзмеренияКолонки.Добавить("Период");
		
	КонецЕсли;
	
	//Выстраиваем измерения строк

	Пока ПостроительОтчета.ИзмеренияСтроки.Количество()>0 Цикл
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[0]);
	КонецЦикла;
	
	//Формируем текст запроса по остаткам
	ТекстГруппировки="";
	ТекстИтоги="";
		
	ЕстьГруппировки=Ложь;
	Для Каждого Строка Из ОсновныеГруппировки Цикл
		
		Если Строка.Использование Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Имя);
			ЕстьГруппировки=Истина;
			
			Если Строка.Имя="ВалютаДенежныхСредств" Тогда
				
				ТекстГруппировки=ТекстГруппировки+"
				|БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,";
				
			Иначе
				
				ТекстГруппировки=ТекстГруппировки+"
				|"+Строка.Имя+" КАК "+Строка.Имя+",";
				
			КонецЕсли;
			
			ТекстИтоги=ТекстИтоги+",
			|"+Строка.Имя;
			
			СтрГруппировкиВерт = СтрГруппировкиВерт +"; "+Строка.Представление; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьГруппировки Тогда
		Сообщить("Необходимо выбрать хотя бы одну основную группировку.");
		Возврат;
	КонецЕсли;
	
	ТекстИтоги=Сред(ТекстИтоги,2);
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ "+ТекстГруппировки+"
	|СуммаОстаток
	|ИЗ РегистрНакопления.ДенежныеСредства.Остатки(&ДатаНач,{БанковскийСчетКасса,БанковскийСчетКасса.ВалютаДенежныхСредств,ВидДенежныхСредств}) КАК ДенежныеСредстваОстатки
	|ИТОГИ Сумма(СуммаОстаток) ПО "+ТекстИтоги;
	
	ПостроительОстатки=Новый ПостроительОтчета;
	ПостроительОстатки.Текст=ТекстЗапроса;
	ПостроительОстатки.Параметры.Вставить("ДатаНач",НачалоДня(ДатаНач));
	
	НастройкиОтбора=ПостроительОтчета.ПолучитьНастройки(Истина,Ложь,Ложь,Ложь);
	
	ПостроительОстатки.УстановитьНастройки(НастройкиОтбора,Истина,Ложь,Ложь,Ложь);
	
	ПостроительОстатки.Выполнить();
	ТабНачальныхОстатков=ПостроительОстатки.Результат.Выгрузить();
	
	Для Каждого Строка Из ДополнительныеГруппировки Цикл
		
		Если Строка.Использование Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Добавить("ВидДвиженияПриходРасход");
			ПостроительОтчета.ИзмеренияСтроки.Добавить("ВидДвиженияДокПлан");

			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
		
	Для Каждого Строка Из ДополнительныеГруппировки Цикл
		
		Если Строка.Использование Тогда
			
			ПостроительОтчета.ИзмеренияСтроки.Добавить(Строка.Имя);
			СтрГруппировкиВерт = СтрГруппировкиВерт +"; "+Строка.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1 Цикл
	
		ТекущаяКолонка=ПостроительОтчета.ИзмеренияКолонки[Сч];
		
		СтрГруппировкиГор = СтрГруппировкиГор +", "+ ТекущаяКолонка.Представление
		+" "+ ТипИзмеренияПостроителяОтчета.Элементы;
		
		ЗаголовокКолонки = ПостроительОтчета.ИзмеренияКолонки[Сч].Представление;
	
	КонецЦикла;

	Для Сч=0 По Показатели.Количество()-1 Цикл

		Если Показатели[Сч].Использование Тогда
		
			СтрПоказатели = СтрПоказатели +", "+ Показатели[Сч].Представление;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Для Сч=0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		Если ПостроительОтчета.Отбор[Сч].Использование И Не ПостроительОтчета.Отбор[Сч].Имя = "Периодичность" Тогда

			СтрФильтры = СтрФильтры +", "+ ПостроительОтчета.Отбор[Сч].Представление 
			+" "+ ПостроительОтчета.Отбор[Сч].ВидСравнения +" "+ ПостроительОтчета.Отбор[Сч].Значение;

		КонецЕсли; 
	
	КонецЦикла;
	
	СтрГруппировкиВерт=Сред(СтрГруппировкиВерт,2);
	СтрГруппировкиГор=Сред(СтрГруппировкиГор,2);
	СтрПоказатели=Сред(СтрПоказатели,2);
	СтрФильтры=Сред(СтрФильтры,2);
	
	ТекущаяКолонка=ПостроительОтчета.ИзмеренияКолонки[0];
	ПутьКДанным = ТекущаяКолонка.ПутьКДанным;
	
	ГруппировкаГоризонтальная=ТекущаяКолонка.Имя;
	
	ПостроительОтчета.ИзмеренияКолонки.Удалить(ТекущаяКолонка);
	ПостроительОтчета.ИзмеренияСтроки.Добавить(ПутьКДанным, , ТипИзмеренияПостроителяОтчета.Элементы);
			
	СтруктураВыводГруппировокВерт = Новый Структура;
	СтруктураВыводГруппировокГор = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// сдвиг уровня
	СтруктураСдвигУровняГруппировок = Новый Структура;

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ВсегоГруппировок = 0;
	
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;

	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
		Если Сч=ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
			СтруктураВыводГруппировокГор.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		Иначе
			СтруктураВыводГруппировокВерт.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		КонецЕсли;
		
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач",НачалоДня(ДатаНач));
	ПостроительОтчета.Параметры.Вставить("ДатаКон",КонецДня(ДатаКон));
	
	ПостроительОтчета.Параметры.Вставить("ДатаОстаток",НачалоДня(ДатаНач));


	// Выполнение сформированного запроса
		
	ПостроительОтчета.Выполнить();
	Результат = ПостроительОтчета.Результат;

	Макет = ПолучитьМакет("Макет");
	ДокументРезультат.Очистить();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбщийОтступ", Макет.ПолучитьОбласть("ОбщийОтступ|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировки",   Макет.ПолучитьОбласть("Значение|Строка"));
	СтруктураПараметров.Вставить("ЗначениеГруппировкиГор",   Макет.ПолучитьОбласть("План|ШапкаГруппы"));
	СтруктураПараметров.Вставить("ЗначениеГруппировкиСводно",   Макет.ПолучитьОбласть("Значение|СводныеПоказатели"));
	СтруктураПараметров.Вставить("ЗначенияПоказателяСводно",   Макет.ПолучитьОбласть("Итог|СводныеПоказатели"));

	
	СтруктураОсновныеГруппировки=Новый Структура;
	Для Каждого Группировка ИЗ ОсновныеГруппировки Цикл
		Если Группировка.Использование Тогда
		СтруктураОсновныеГруппировки.Вставить(Группировка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ОсновныеГруппировки",СтруктураОсновныеГруппировки);
	
	СтруктураДополнительныеГруппировки=Новый Структура;
	Для Каждого Группировка ИЗ ДополнительныеГруппировки Цикл
		Если Группировка.Использование Тогда
		СтруктураДополнительныеГруппировки.Вставить(Группировка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ДополнительныеГруппировки",СтруктураДополнительныеГруппировки);

	СтруктураПараметров.Вставить("ЗначенияПоказателя",    Макет.ПолучитьОбласть("План|Строка"));
	СтруктураПараметров.Вставить("ТабДок",    ДокументРезультат);

	МассивПоказатели=Новый Массив;
	
	Для каждого Показатель Из Показатели Цикл
	
		Если Показатель.Использование Тогда
			МассивПоказатели.Добавить(Показатель.Имя);
		КонецЕсли;
	
	КонецЦикла; 
		
	СтруктураПараметров.Вставить("МассивПоказатели",МассивПоказатели);

	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокВерт", 	СтруктураВыводГруппировокВерт);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокГор", 	СтруктураВыводГруппировокГор);

	СтруктураПараметров.Вставить("ГруппировкаГоризонтальная", 	ГруппировкаГоризонтальная);
	СтруктураПараметров.Вставить("ГруппировкаГоризонтальнаяНачало", 	ГруппировкаГоризонтальная);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);
	СтруктураПараметров.Вставить("Периодичность",ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ДетализацияПоПериодам));
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительОтчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;
	
	СтруктураПараметров.ЦветаГруппировок.Вставить("ОБЩИЕ", Новый Цвет(255, 248, 255));

	// наклонный шрифт для групп
	СтруктураПараметров.Вставить("ШрифтГрупп", Новый Шрифт(Макет.Область("Строка|План").Шрифт,,,,Истина));

	// форматная строка для вывода показателей
	СтруктураПараметров.Вставить("ФорматПоказателей", 			Новый Структура);
	Для Каждого Строка Из Показатели Цикл
		МетаданныеРесурса = 0;
		ФорматнаяСтрока = "";

		Нстр = мТаблицаПоказатели.Найти(Строка.Имя, "ИмяПоля");
		Если Не (Нстр = Неопределено) Тогда
			ФорматнаяСтрока = НСтр.ФорматнаяСтрока;
		КонецЕсли;

		СтруктураПараметров.ФорматПоказателей.Вставить(Строка.Имя, ФорматнаяСтрока);
	КонецЦикла;

	мГруппировокПоГоризонтали=0;
	
	Если НЕ РапортРуководителю Тогда // выводим развернутый заголовок
		
		Для Сч = 1 По 3 Цикл
			Если Сч = 1 Тогда
				Префикс = "Верх";
			ИначеЕсли Сч = 2 Тогда
				// Если нет фильтров, не выводим
				Если ПустаяСтрока(СтрФильтры) Тогда
					Продолжить;
				КонецЕсли;
				Префикс = "Середина";
			ИначеЕсли Сч = 3 Тогда
				Префикс = "Низ";
			КонецЕсли;
			
			ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Шапка" + Префикс));
			
			// Вывод шапки отчета
			ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Шапка" + Префикс);
			
			Если Префикс = "Верх" Тогда
				
				ОбластьЗначение.Параметры.ЗаголовокОтчета = мНазваниеОтчета;
				
				Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
					ОбластьЗначение.Параметры.Период = "Период: без ограничения " + СтрОшибки;
				Иначе
					Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
						ОбластьЗначение.Параметры.Период = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
						+ " - " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") + СтрОшибки;
					Иначе
						ОбластьЗначение.Параметры.Период = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон)) + СтрОшибки;
					КонецЕсли;
				КонецЕсли;
				ДокументРезультат.Присоединить(ОбластьЗначение);
				
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
				ДокументРезультат.ВысотаТаблицы-1, 3).Объединить();
				
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
				ДокументРезультат.ВысотаТаблицы,   3).Объединить();
				
			ИначеЕсли Префикс = "Середина" Тогда
				
				ОбластьЗначение.Параметры.Фильтры = "Отбор: " + СтрФильтры;
				ДокументРезультат.Присоединить(ОбластьЗначение);
				
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
				ДокументРезультат.ВысотаТаблицы,   4).Объединить();
				
			ИначеЕсли Префикс = "Низ" Тогда
				
				ОбластьЗначение.Параметры.Группировки = "Группировки: "+ СтрГруппировкиВерт;
				ДокументРезультат.Присоединить(ОбластьЗначение);
				
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
				ДокументРезультат.ВысотаТаблицы-1,   4).Объединить();
				
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
				ДокументРезультат.ВысотаТаблицы,  4).Объединить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	 КонецЕсли;
	
	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;
		
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаГруппы"));
	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаГруппы");

	ДокументРезультат.Присоединить(ОбластьЗначение);
	
	СтруктураШапкаНачало=Новый Структура;
	СтруктураШапкаНачало.Вставить("НачалоПериода");
	
	ОбластьНачальныеОстатки=Макет.ПолучитьОбласть("НачальныеОстатки|ШапкаГруппы");
	ОбластьНачальныеОстатки.Параметры.РасшифровкаГоризонтальная=СтруктураШапкаНачало;
	ДокументРезультат.Присоединить(ОбластьНачальныеОстатки);

	ОбластьИтог = Макет.ПолучитьОбласть("ШапкаГруппы|Итог");
	
	СтруктураШапкаИтог=Новый Структура;
	СтруктураШапкаИтог.Вставить("ПериодИтого");	
	ОбластьИтог.Параметры.РасшифровкаГоризонтальная=СтруктураШапкаИтог;

	Для Каждого Показатель Из МассивПоказатели Цикл
		ДокументРезультат.Присоединить(ОбластьИтог);
	КонецЦикла;	

	ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы-МассивПоказатели.Количество()+1, 
	ДокументРезультат.ВысотаТаблицы,  ДокументРезультат.ШиринаТаблицы).Объединить();

	ВывестиШапку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период","Все"), СтруктураПараметров, 0);

	Если МассивПоказатели.Количество()>1 Тогда

		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|ШапкаПоказатели"));
		ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|ШапкаПоказатели");

		ДокументРезультат.Присоединить(ОбластьЗначение);

		ОбластьПоказатели=Макет.ПолучитьОбласть("План|ШапкаПоказатели");

		Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
			Для Каждого Строка Из Показатели Цикл
				Если Строка.Использование Тогда
					ОбластьПоказатели.Параметры.Показатель=Строка.Представление;
					ДокументРезультат.Присоединить(ОбластьПоказатели);
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,2).Объединить();

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы-1, 2, 
		ДокументРезультат.ВысотаТаблицы,2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

	Иначе

		ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, 2, 
		ДокументРезультат.ВысотаТаблицы,   2).ГраницаСправа=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
		
	КонецЕсли;

	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;
	ДокументРезультат.ФиксацияСлева = 3;
	
	Если ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;
				
	СтруктураВыводГруппировокВерт = Новый Структура;
	СтруктураВыводГруппировокГор = Новый Структура;
	МассивГруппировки    = Новый Массив;

	// сдвиг уровня
	СтруктураСдвигУровняГруппировок = Новый Структура;

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ВсегоГруппировок = 0;
	
	КолГруппировокБезИтогов = 0;
	Массив = Новый Массив;
		
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл

		ВсегоГруппировок = ВсегоГруппировок + 1;
		СтруктураСдвигУровняГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, 0);
		МассивГруппировки.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
		Если Сч=ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Тогда
			СтруктураВыводГруппировокГор.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		Иначе
			СтруктураВыводГруппировокВерт.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Массив);
		КонецЕсли;
		
	КонецЦикла;

	СтруктураПараметров.Вставить("ВсегоГруппировок", 			ВсегоГруппировок);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокВерт", 	СтруктураВыводГруппировокВерт);
	СтруктураПараметров.Вставить("СтруктураВыводГруппировокГор", 	СтруктураВыводГруппировокГор);

	СтруктураПараметров.Вставить("ГруппировкаГоризонтальная", 	ГруппировкаГоризонтальная);
	СтруктураПараметров.Вставить("ГруппировкаГоризонтальнаяНачало", 	ГруппировкаГоризонтальная);

	СтруктураПараметров.Вставить("МассивГруппировки", 	МассивГруппировки);

	СтруктураПараметров.Вставить("СтруктураСдвигУровняГруппировок", СтруктураСдвигУровняГруппировок);

	СтруктураПараметров.Вставить("ЦветаГруппировок", Новый Структура);
			
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
		СтруктураПараметров.ЦветаГруппировок.Вставить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя, Новый Цвет(240 - (ПостроительОтчета.ИзмеренияСтроки.Количество() - Сч + 1) * 10, 248, 255));
	КонецЦикла;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();

	ВывестиВыборку(Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, Новый Массив,"Группировка");

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// Вывод подвала отчета
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ОбщийОтступ|Подвал"));

	ОбластьЗначение   = Макет.ПолучитьОбласть("Значение|Подвал");

	ДокументРезультат.Присоединить(ОбластьЗначение);

	ОбластьПоказатель = Макет.ПолучитьОбласть("План|Подвал");

	Для Индекс=1 по мГруппировокПоГоризонтали+1 Цикл
		Для Каждого Показатель Из МассивПоказатели Цикл
			ДокументРезультат.Присоединить(ОбластьПоказатель);
		КонецЦикла;	
	КонецЦикла;

	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);

	// Заполним общую расшифровку:
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ИмяОтчета", мИмяОтчета);
	
	ДокументРезультат.Область(1,1).Расшифровка = СтруктураНастроекОтчета;

	ДокументРезультат.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.Автомасштаб=Истина;
		
КонецПроцедуры

// Вывод строку шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	ВыборкаГоризонтальная - выборка горизонтальная из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиСтрокуШапки(ВыборкаГоризонтальная, СтруктураПараметров, Номер)

	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировкиГор   = СтруктураПараметров.ЗначениеГруппировкиГор;

	СтруктураВыводГруппировокГор = СтруктураПараметров.СтруктураВыводГруппировокГор;

	УровеньЗаписи   = ВыборкаГоризонтальная.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";
	МассивПоказатели=СтруктураПараметров.МассивПоказатели;
	Периодичность=СтруктураПараметров.Периодичность;

	ЗначениеРасшифровки = Новый Структура;

	ИдЗначимойГруппировкиГор="";

	ТипЗаписиВыборки = ВыборкаГоризонтальная.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	ИмяГруппировки  = ВыборкаГоризонтальная.Группировка();

	МассивВыводГруппировок = Новый Массив;
	
	Если Найти(ИмяГруппировки,"Период")>0 Тогда
		ИмяРасшифровки=ИмяГруппировки+Строка(ДетализацияПоПериодам);
		ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(ВыборкаГоризонтальная[ИмяГруппировки],?(ИмяГруппировки="Период",Периодичность,СтрЗаменить(ИмяГруппировки,"Период","")));
	Иначе
		ЗначениеТекущейГруппировки = "" + ВыборкаГоризонтальная[ИмяГруппировки];
		ИмяРасшифровки=ИмяГруппировки;
	КонецЕсли;
	
	Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
		
		ЗначениеТекущейГруппировки = "Не указано";
		
	КонецЕсли;

	ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;
	 
	ЗначениеРасшифровки.Вставить(ИмяРасшифровки, ВыборкаГоризонтальная[ИмяГруппировки]);

	мЗначимыеГруппировкиГор.Добавить(ВыборкаГоризонтальная[ИмяГруппировки]);
	
	ОбластьЗначениеГруппировкиГор.Параметры.ПредставлениеГруппировки=ЗначениеГруппировки;
	ОбластьЗначениеГруппировкиГор.Параметры.РасшифровкаГоризонтальная=ЗначениеРасшифровки;
	
	Для Каждого Показатель Из МассивПоказатели Цикл
		ТабДок.Присоединить(ОбластьЗначениеГруппировкиГор);
	КонецЦикла;	
	ТабДок.Область(ТабДок.ВысотаТаблицы, ТабДок.ШиринаТаблицы-МассивПоказатели.Количество()+1, 
	ТабДок.ВысотаТаблицы,  ТабДок.ШиринаТаблицы).Объединить();

КонецПроцедуры

// Вывод шапки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка				  - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ЗначениеВыборкиДанные - строка, заголовок вертикальной области данных
//
Процедура ВывестиШапку(Выборка, СтруктураПараметров, Номер)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ГруппировкаГоризонтальная=СтруктураПараметров.ГруппировкаГоризонтальная;

	// Берутся группировки все подряд, 

	Пока Выборка.Следующий() Цикл

		Если Выборка.Группировка()=ГруппировкаГоризонтальная  Тогда  
			ВывестиСтрокуШапки(Выборка, СтруктураПараметров, Номер);
			мГруппировокПоГоризонтали=мГруппировокПоГоризонтали+1;
		КонецЕсли; 

		// Детальные записи не нужны: для последней группировки после итогов по группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Продолжить;
		КонецЕсли;

		ВывестиШапку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1);

	КонецЦикла;

	//СтруктураПараметров.Вставить("ПредыдущееЗначениеГруппировки" + Выборка.Уровень(), Неопределено);

КонецПроцедуры // ВывестиВыборку()

//Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка               - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров   - структура параметров, необходимых для вывода строки
//	ТабДок				  - табличный документ
//	Номер		          - число, номер обходимой группировки
//	МассивПредставленийГруппировок - массив, хранящий представления группировок
Процедура РазвернутьСтроку (Выборка, СтруктураПараметров,ТабДок,Номер,ОсновнаяГруппировка,ТекущийОстаток)

	ОбластьЗначенияПоказателя    = ?(ОсновнаяГруппировка,СтруктураПараметров.ЗначенияПоказателяСводно,СтруктураПараметров.ЗначенияПоказателя);
	ТипЗаписиВыборки = Выборка.ТипЗаписи();
	ГруппировкаГоризонтальная=СтруктураПараметров.ГруппировкаГоризонтальная;
	
	Для каждого ЗначимаяГруппировка Из мЗначимыеГруппировкиГор Цикл
		
		НомерКолонки=1;
		
		Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл
			
			ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 3";
			
			Если НомерКолонки=1 Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
			
			Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
				Если (НомерКолонки>1) Тогда
					ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				КонецЕсли;
			КонецЕсли;
			
			Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
						
			Если Выборка.НайтиСледующий(ЗначимаяГруппировка.Значение,ГруппировкаГоризонтальная) Тогда
				
				Если ОсновнаяГруппировка Тогда
					
					ПоВходящимДокументам=?(Выборка.СуммаПолучениеДокумент=NULL,0,Выборка.СуммаПолучениеДокумент);
					ПланируемыеПоступления=?(Выборка.СуммаПолучениеПлан=NULL,0,Выборка.СуммаПолучениеПлан);
					ПоИсходящимДокументам=?(Выборка.СуммаРасходДокумент=NULL,0,Выборка.СуммаРасходДокумент);
					Заявки=?(Выборка.СуммаРасходПлан=NULL,0,Выборка.СуммаРасходПлан);
					
					ОбластьЗначенияПоказателя.Параметры.ОстатокНачало=ТекущийОстаток;
					ОбластьЗначенияПоказателя.Параметры.ПоВходящимДокументам=ПоВходящимДокументам;
					ОбластьЗначенияПоказателя.Параметры.ПланируемыеПоступления=ПланируемыеПоступления;
					ОбластьЗначенияПоказателя.Параметры.ПоИсходящимДокументам=ПоИсходящимДокументам;
					ОбластьЗначенияПоказателя.Параметры.Заявки=Заявки;
					ОбластьЗначенияПоказателя.Параметры.ИтогоКИспользованию=ТекущийОстаток+ПоВходящимДокументам+ПланируемыеПоступления;
					ОбластьЗначенияПоказателя.Параметры.ОстатокКонец=ТекущийОстаток+ПоВходящимДокументам+ПланируемыеПоступления
					-ПоИсходящимДокументам
					-Заявки;
					
					ТекущийОстаток=ТекущийОстаток+ПоВходящимДокументам+ПланируемыеПоступления
					-ПоИсходящимДокументам
					-Заявки;
					
					Если ОбластьЗначенияПоказателя.Параметры.ОстатокКонец<0 Тогда
						ОбластьЗначенияПоказателя.Области.ОбластьОстаток.ЦветТекста=Новый Цвет(255,0,0);
					Иначе
						ОбластьЗначенияПоказателя.Области.ОбластьОстаток.ЦветТекста=Новый Цвет(0,0,0);
					КонецЕсли;
					
					Если ОбластьЗначенияПоказателя.Параметры.ОстатокНачало<0 Тогда
						ОбластьЗначенияПоказателя.Области.ОбластьОстатокНачало.ЦветТекста=Новый Цвет(255,0,0);
					Иначе
						ОбластьЗначенияПоказателя.Области.ОбластьОстатокНачало.ЦветТекста=Новый Цвет(0,0,0);
					КонецЕсли;
					
				ИначеЕсли НЕ Выборка.ВидДвиженияДокПлан=NULL Тогда
					
					Если Выборка.ВидДвиженияДокПлан="3" Тогда
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаПолучениеДокумент;
					ИначеЕсли Выборка.ВидДвиженияДокПлан="4" Тогда
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаПолучениеПлан;
					ИначеЕсли Выборка.ВидДвиженияДокПлан="5" Тогда
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаРасходДокумент;
					ИначеЕсли Выборка.ВидДвиженияДокПлан="6" Тогда
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаРасходПлан;
					КонецЕсли;
					
				ИначеЕсли НЕ Выборка.ВидДвиженияПриходРасход=Null Тогда
					
					ПоВходящимДокументам=?(Выборка.СуммаПолучениеДокумент=NULL,0,Выборка.СуммаПолучениеДокумент);
					ПланируемыеПоступления=?(Выборка.СуммаПолучениеПлан=NULL,0,Выборка.СуммаПолучениеПлан);
					ПоИсходящимДокументам=?(Выборка.СуммаРасходДокумент=NULL,0,Выборка.СуммаРасходДокумент);
					Заявки=?(Выборка.СуммаРасходПлан=NULL,0,Выборка.СуммаРасходПлан);
					
					Если Выборка.ВидДвиженияПриходРасход="1" Тогда
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=ПоВходящимДокументам+ПланируемыеПоступления;
					ИначеЕсли Выборка.ВидДвиженияПриходРасход="2" Тогда
						ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=ПоИсходящимДокументам+Заявки;
					КонецЕсли;
					
				КонецЕсли;
				
				Выборка.Сбросить();
				
			Иначе
				
				Если ОсновнаяГруппировка Тогда
					
					ОбластьЗначенияПоказателя.Параметры.ПоВходящимДокументам=0;
					ОбластьЗначенияПоказателя.Параметры.ПланируемыеПоступления=0;
					ОбластьЗначенияПоказателя.Параметры.ПоИсходящимДокументам=0;
					ОбластьЗначенияПоказателя.Параметры.Заявки=0;
					ОбластьЗначенияПоказателя.Параметры.ИтогоКИспользованию=0;
					ОбластьЗначенияПоказателя.Параметры.ОстатокКонец=0;
					
				Иначе
					
					ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=0;
					
				КонецЕсли;		
				
			КонецЕсли;
			
			ТабДок.Присоединить(ОбластьЗначенияПоказателя);
			
			НомерКолонки=НомерКолонки+1;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры 

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиСтроку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки, ТипЗначения)

	УровеньЗаписи   = Выборка.Уровень();
	СдвигУровня     = 0;

	ИмяГруппировки  = Выборка.Группировка();
	СтруктураОсновныеГруппировки=СтруктураПараметров.ОсновныеГруппировки;
	
	ОсновнаяГруппировка=СтруктураОсновныеГруппировки.Свойство(ИмяГруппировки);
		
	ОбластьОбщийОтступ = СтруктураПараметров.ОбщийОтступ;
	ОбластьЗначениеГруппировки   = ?(ОсновнаяГруппировка,СтруктураПараметров.ЗначениеГруппировкиСводно,СтруктураПараметров.ЗначениеГруппировки);
	ОбластьЗначенияПоказателя    = ?(ОсновнаяГруппировка,СтруктураПараметров.ЗначенияПоказателяСводно,СтруктураПараметров.ЗначенияПоказателя);

	СтруктураВыводГруппировокВерт = СтруктураПараметров.СтруктураВыводГруппировокВерт;
	Периодичность=СтруктураПараметров.Периодичность;

	ТабДок = СтруктураПараметров.ТабДок;

	ЗначениеГруппировки = "";

	ЗначениеРасшифровки = Неопределено;

	ТипЗаписиВыборки = Выборка.ТипЗаписи();

	МассивВыводГруппировок = Новый Массив;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

		Если Найти(ИмяГруппировки,"Период")>0 Тогда
			ЗначениеТекущейГруппировки=ОбщегоНазначения.ПолучитьПериодСтрокой(Выборка[ИмяГруппировки],?(ИмяГруппировки="Период",Периодичность,СтрЗаменить(ИмяГруппировки,"Период","")));
		ИначеЕсли Найти(ИмяГруппировки,"ВидДвижения")>0 Тогда
			ЗначениеТекущейГруппировки=СоответствиеПриходРасход[Выборка[ИмяГруппировки]];
			ОбластьЗначениеГруппировки.ТекущаяОбласть.Шрифт=Новый Шрифт(ОбластьЗначениеГруппировки.ТекущаяОбласть.Шрифт,,,Истина);
		Иначе
			ЗначениеТекущейГруппировки = "" + Выборка[ИмяГруппировки];
			Если ОсновнаяГруппировка Тогда
				ОбластьЗначениеГруппировки.ТекущаяОбласть.Шрифт=Новый Шрифт(ОбластьЗначениеГруппировки.ТекущаяОбласть.Шрифт,,,Истина);
			Иначе
				ОбластьЗначениеГруппировки.ТекущаяОбласть.Шрифт=Новый Шрифт(ОбластьЗначениеГруппировки.ТекущаяОбласть.Шрифт,,,Ложь);
			КонецЕсли;
		КонецЕсли;

		Если ПустаяСтрока(ЗначениеТекущейГруппировки) Тогда
			Если ТипЗнч(Выборка[ИмяГруппировки])=Тип("СправочникСсылка.Кассы") Тогда
				ЗначениеТекущейГруппировки = "Касса не указана";
			ИначеЕсли ТипЗнч(Выборка[ИмяГруппировки])=Тип("СправочникСсылка.БанковскиеСчета") Тогда
				ЗначениеТекущейГруппировки = "Банковский счет не указан";
			Иначе
				ЗначениеТекущейГруппировки = "Не указано";
			КонецЕсли;
		КонецЕсли;

		ЗначениеГруппировки = ЗначениеГруппировки + ЗначениеТекущейГруппировки;

		Если ЗначениеРасшифровки = Неопределено И Найти(ИмяГруппировки,"ВидДвижения")=0 И НЕ ЗначениеТекущейГруппировки = "Не указано" Тогда 
			ЗначениеРасшифровки = Выборка[ИмяГруппировки];
		КонецЕсли;

	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ОбщийИтог Тогда
		ЗначениеГруппировки = "ИТОГО: ";
	КонецЕсли;

	// Для итогов по группировке сдвиг нужно уменьшить на количество пропущенных группировок, 
	// заранее рассчитанное для каждой группировки
	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
		
		МассивРасшифровки.Добавить(ИмяГруппировки);

		ЗначениеРасшифровкиСтрока = Новый Структура;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			ЗначениеРасшифровкиСтрока.Вставить(Элемент, Выборка[Элемент])
		КонецЦикла;

		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[ИмяГруппировки];

		// Для итогов по иерархии сдвиг нужно уменьшить на количество пропущенных группировок для предыдущей группировки
		// заранее рассчитанное для каждой группировки
	ИначеЕсли ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		СдвигУровня = СтруктураПараметров.СтруктураСдвигУровняГруппировок[СтруктураПараметров.МассивГруппировки[Номер - 1]];
	КонецЕсли;

	УровеньЗаписи = УровеньЗаписи - СдвигУровня;

	ТабДок.Вывести(ОбластьОбщийОтступ, УровеньЗаписи);

	ОбластьЗначениеГруппировки.Параметры.ЗначениеГруппировки = СокрЛП(ЗначениеГруппировки);
	
	Если ОсновнаяГруппировка Тогда
		
		ОбластьЗначениеГруппировки.Параметры.РасшифровкаОстатокНачало = ЗначениеРасшифровкиСтрока;
		ОбластьЗначениеГруппировки.Параметры.РасшифровкаОстатокКонец = ЗначениеРасшифровкиСтрока;
		ОбластьЗначениеГруппировки.Параметры.РасшифровкаСуммаКИспользованию = ЗначениеРасшифровкиСтрока;
		
		
		КопияРасшифровкиСтрока1=ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ЗначениеРасшифровкиСтрока);
		КопияРасшифровкиСтрока1.Вставить("ВидРегистра","ДенежныеСредстваКПолучению");
		ОбластьЗначениеГруппировки.Параметры.РасшифровкаВходящиеДокументы = КопияРасшифровкиСтрока1;
		
		КопияРасшифровкиСтрока2=ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ЗначениеРасшифровкиСтрока);
		КопияРасшифровкиСтрока2.Вставить("ВидРегистра","ПланируемыеПоступленияДенежныхСредств");
		ОбластьЗначениеГруппировки.Параметры.РасшифровкаПланируемыеПоступления = КопияРасшифровкиСтрока2;
		
		КопияРасшифровкиСтрока3=ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ЗначениеРасшифровкиСтрока);
		КопияРасшифровкиСтрока3.Вставить("ВидРегистра","ДенежныеСредстваКСписанию");
		ОбластьЗначениеГруппировки.Параметры.РасшифровкаИсходящиеДокументы = КопияРасшифровкиСтрока3;
		
		КопияРасшифровкиСтрока4=ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ЗначениеРасшифровкиСтрока);
		КопияРасшифровкиСтрока4.Вставить("ВидРегистра","ЗаявкиНаРасходованиеСредств");
		ОбластьЗначениеГруппировки.Параметры.РасшифровкаПланируемыеПлатежи = КопияРасшифровкиСтрока4;
		
	Иначе
		
		ОбластьЗначениеГруппировки.Параметры.Расшифровка=ЗначениеРасшифровки;
		
	КонецЕсли;
		
	ОбластьЗначениеГруппировки.Область().Отступ = УровеньЗаписи;

	ТабДок.Присоединить(ОбластьЗначениеГруппировки);

	НачальныйОстаток=0;
	ТекущийОстаток=0;
	
	Если ОсновнаяГруппировка Тогда
				
		СтруктураПоиска=Новый Структура;
		
		Если СтруктураОсновныеГруппировки.Свойство("Организация") Тогда
			
			СтруктураПоиска.Вставить("Организация",Выборка.Организация);
			
		КонецЕсли;
		
		Если СтруктураОсновныеГруппировки.Свойство("ВалютаДенежныхСредств") Тогда
			
			СтруктураПоиска.Вставить("ВалютаДенежныхСредств",Выборка.ВалютаДенежныхСредств);
			
		КонецЕсли;
		
		Если СтруктураОсновныеГруппировки.Свойство("БанковскийСчетКасса") Тогда
			
			СтруктураПоиска.Вставить("БанковскийСчетКасса",Выборка.БанковскийСчетКасса);
			
		КонецЕсли;
		
		Если СтруктураОсновныеГруппировки.Свойство("ВидДенежныхСредств") Тогда
			
			СтруктураПоиска.Вставить("ВидДенежныхСредств",Выборка.ВидДенежныхСредств);
			
		КонецЕсли;
		
		МассивОстаток=ТабНачальныхОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивОстаток.Количество()>0 Тогда
			
			НачальныйОстаток=МассивОстаток[0].СуммаОстаток;
			
		КонецЕсли;
				
	КонецЕсли;
		
	// Итоги по группировкам

	НомерКолонки=1;

	Для Каждого Имя Из СтруктураПараметров.МассивПоказатели Цикл

		ФорматПоказателя = "ЧЦ = 14; ЧДЦ = 3";

		Если НомерКолонки=1 Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;

		Если НомерКолонки=СтруктураПараметров.МассивПоказатели.Количество() Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
			Если (НомерКолонки>1) Тогда
				ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			КонецЕсли;
		КонецЕсли;

		Если (НомерКолонки>1) И (НомерКолонки<СтруктураПараметров.МассивПоказатели.Количество())  Тогда
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСлева =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			ОбластьЗначенияПоказателя.ТекущаяОбласть.ГраницаСправа =Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		КонецЕсли;
		
		//Выводим начальные остатки
		Если ОсновнаяГруппировка Тогда
					
			ПоВходящимДокументам=?(Выборка.ОстатокПолучениеДокумент=NULL,0,Выборка.ОстатокПолучениеДокумент);
			ПланируемыеПоступления=?(Выборка.ОстатокПолучениеПлан=NULL,0,Выборка.ОстатокПолучениеПлан);
			ПоИсходящимДокументам=?(Выборка.ОстатокРасходДокумент=NULL,0,Выборка.ОстатокРасходДокумент);
			Заявки=?(Выборка.ОстатокРасходПлан=NULL,0,Выборка.ОстатокРасходПлан);
			
			ОбластьЗначенияПоказателя.Параметры.ОстатокНачало=НачальныйОстаток;
			ОбластьЗначенияПоказателя.Параметры.ПоВходящимДокументам=ПоВходящимДокументам;
			ОбластьЗначенияПоказателя.Параметры.ПланируемыеПоступления=ПланируемыеПоступления;
			ОбластьЗначенияПоказателя.Параметры.ПоИсходящимДокументам=ПоИсходящимДокументам;
			ОбластьЗначенияПоказателя.Параметры.Заявки=Заявки;
			ОбластьЗначенияПоказателя.Параметры.ИтогоКИспользованию=НачальныйОстаток+ПоВходящимДокументам+ПланируемыеПоступления;
			ОбластьЗначенияПоказателя.Параметры.ОстатокКонец=НачальныйОстаток+ПоВходящимДокументам+ПланируемыеПоступления
			-ПоИсходящимДокументам
			-Заявки;
			
			ТекущийОстаток=НачальныйОстаток+ПоВходящимДокументам+ПланируемыеПоступления
			-ПоИсходящимДокументам
			-Заявки;
			
			Если ОбластьЗначенияПоказателя.Параметры.ОстатокКонец<0 Тогда
				ОбластьЗначенияПоказателя.Области.ОбластьОстаток.ЦветТекста=Новый Цвет(255,0,0);
			Иначе
				ОбластьЗначенияПоказателя.Области.ОбластьОстаток.ЦветТекста=Новый Цвет(0,0,0);
			КонецЕсли;
			
			Если ОбластьЗначенияПоказателя.Параметры.ОстатокНачало<0 Тогда
				ОбластьЗначенияПоказателя.Области.ОбластьОстатокНачало.ЦветТекста=Новый Цвет(255,0,0);
			Иначе
				ОбластьЗначенияПоказателя.Области.ОбластьОстатокНачало.ЦветТекста=Новый Цвет(0,0,0);
			КонецЕсли;
			
		ИначеЕсли НЕ Выборка.ВидДвиженияДокПлан=NULL Тогда
			
			Если Выборка.ВидДвиженияДокПлан="3" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.ОстатокПолучениеДокумент;
			ИначеЕсли Выборка.ВидДвиженияДокПлан="4" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.ОстатокПолучениеПлан;
			ИначеЕсли Выборка.ВидДвиженияДокПлан="5" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.ОстатокРасходДокумент;
			ИначеЕсли Выборка.ВидДвиженияДокПлан="6" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.ОстатокРасходПлан;
			КонецЕсли;
			
		ИначеЕсли НЕ Выборка.ВидДвиженияПриходРасход=Null Тогда
			
			ПоВходящимДокументам=?(Выборка.ОстатокПолучениеДокумент=NULL,0,Выборка.ОстатокПолучениеДокумент);
			ПланируемыеПоступления=?(Выборка.ОстатокПолучениеПлан=NULL,0,Выборка.ОстатокПолучениеПлан);
			ПоИсходящимДокументам=?(Выборка.ОстатокРасходДокумент=NULL,0,Выборка.ОстатокРасходДокумент);
			Заявки=?(Выборка.ОстатокРасходПлан=NULL,0,Выборка.ОстатокРасходПлан);
			
			Если Выборка.ВидДвиженияПриходРасход="1" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=ПоВходящимДокументам+ПланируемыеПоступления;
			ИначеЕсли Выборка.ВидДвиженияПриходРасход="2" Тогда
			    ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=ПоИсходящимДокументам+Заявки;
			КонецЕсли;
				
		КонецЕсли;	
				
		ТабДок.Присоединить(ОбластьЗначенияПоказателя);
		
		//Выводим итоговые значения
		Если ОсновнаяГруппировка Тогда
					
			ПоВходящимДокументам=?(Выборка.СуммаПолучениеДокумент=NULL,0,Выборка.СуммаПолучениеДокумент);
			ПланируемыеПоступления=?(Выборка.СуммаПолучениеПлан=NULL,0,Выборка.СуммаПолучениеПлан);
			ПоИсходящимДокументам=?(Выборка.СуммаРасходДокумент=NULL,0,Выборка.СуммаРасходДокумент);
			Заявки=?(Выборка.СуммаРасходПлан=NULL,0,Выборка.СуммаРасходПлан);
			
			ОбластьЗначенияПоказателя.Параметры.ОстатокНачало=ТекущийОстаток;
			ОбластьЗначенияПоказателя.Параметры.ПоВходящимДокументам=ПоВходящимДокументам;
			ОбластьЗначенияПоказателя.Параметры.ПланируемыеПоступления=ПланируемыеПоступления;
			ОбластьЗначенияПоказателя.Параметры.ПоИсходящимДокументам=ПоИсходящимДокументам;
			ОбластьЗначенияПоказателя.Параметры.Заявки=Заявки;
			ОбластьЗначенияПоказателя.Параметры.ИтогоКИспользованию=ТекущийОстаток+ПоВходящимДокументам+ПланируемыеПоступления;
			ОбластьЗначенияПоказателя.Параметры.ОстатокКонец=ТекущийОстаток+ПоВходящимДокументам+ПланируемыеПоступления
			-ПоИсходящимДокументам
			-Заявки;
			
			Если ОбластьЗначенияПоказателя.Параметры.ОстатокКонец<0 Тогда
				ОбластьЗначенияПоказателя.Области.ОбластьОстаток.ЦветТекста=Новый Цвет(255,0,0);
			Иначе
				ОбластьЗначенияПоказателя.Области.ОбластьОстаток.ЦветТекста=Новый Цвет(0,0,0);
			КонецЕсли;
			
			Если ОбластьЗначенияПоказателя.Параметры.ОстатокНачало<0 Тогда
				ОбластьЗначенияПоказателя.Области.ОбластьОстатокНачало.ЦветТекста=Новый Цвет(255,0,0);
			Иначе
				ОбластьЗначенияПоказателя.Области.ОбластьОстатокНачало.ЦветТекста=Новый Цвет(0,0,0);
			КонецЕсли;
						
		ИначеЕсли НЕ Выборка.ВидДвиженияДокПлан=NULL Тогда
			
			Если Выборка.ВидДвиженияДокПлан="3" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаПолучениеДокумент;
			ИначеЕсли Выборка.ВидДвиженияДокПлан="4" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаПолучениеПлан;
			ИначеЕсли Выборка.ВидДвиженияДокПлан="5" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаРасходДокумент;
			ИначеЕсли Выборка.ВидДвиженияДокПлан="6" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=Выборка.СуммаРасходПлан;
			КонецЕсли;
			
		ИначеЕсли НЕ Выборка.ВидДвиженияПриходРасход=Null Тогда
			
			ПоВходящимДокументам=?(Выборка.СуммаПолучениеДокумент=NULL,0,Выборка.СуммаПолучениеДокумент);
			ПланируемыеПоступления=?(Выборка.СуммаПолучениеПлан=NULL,0,Выборка.СуммаПолучениеПлан);
			ПоИсходящимДокументам=?(Выборка.СуммаРасходДокумент=NULL,0,Выборка.СуммаРасходДокумент);
			Заявки=?(Выборка.СуммаРасходПлан=NULL,0,Выборка.СуммаРасходПлан);
			
			Если Выборка.ВидДвиженияПриходРасход="1" Тогда
				ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=ПоВходящимДокументам+ПланируемыеПоступления;
			ИначеЕсли Выборка.ВидДвиженияПриходРасход="2" Тогда
			    ОбластьЗначенияПоказателя.Параметры.ЗначениеПоказателя=ПоИсходящимДокументам+Заявки;
			КонецЕсли;
				
		КонецЕсли;	
				
		ТабДок.Присоединить(ОбластьЗначенияПоказателя);

		НомерКолонки=НомерКолонки+1;

	КонецЦикла;

	Если ТипЗаписиВыборки = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		ТабДок.Область(ТабДок.ВысотаТаблицы, 2,ТабДок.ВысотаТаблицы, 2).Шрифт = СтруктураПараметров.ШрифтГрупп;
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтруктураПараметров.ГруппировкаГоризонтальнаяНачало) Тогда

		РазвернутьСтроку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,СтруктураПараметров.ГруппировкаГоризонтальнаяНачало, "Все"),СтруктураПараметров,ТабДок,0,ОсновнаяГруппировка,ТекущийОстаток);
		
	КонецЕсли;

	//Если ЗначениеРасшифровки=Неопределено Тогда // Нет расшифровки
	//	Для Индекс=3 по ТабДок.ШиринаТаблицы Цикл
	//		ТабДок.Область(ТабДок.ВысотаТаблицы,Индекс).Расшифровка=Неопределено;
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры // ВывестиСтроку()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки,ПоказательДляВывода)

	ОбработкаПрерыванияПользователя();

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	ГруппировкаГоризонтальная=СтруктураПараметров.ГруппировкаГоризонтальная;

	// Берутся группировки все подряд, 

	Пока Выборка.Следующий() Цикл

		Если НЕ Выборка.Группировка()=ГруппировкаГоризонтальная И НЕ Выборка.ТипЗаписи()=ТипЗаписиЗапроса.ОбщийИтог Тогда  // Не выводим группировку, разворачивающуюся по горизонтали и общие итоги
			ВывестиСтроку(Выборка, СтруктураПараметров, Номер, МассивРасшифровки,ПоказательДляВывода);	
		КонецЕсли; 

		// Детальные записи не нужны: для последней группировки после итогов по группировке идут 
		// детальные записи
		Если Номер = ВсегоГруппировок - 1
			И Выборка.ТипЗаписи() =  ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
			Продолжить;
		КонецЕсли;

		// На каждом уровне используется своя копия структуры расшифровок
		КопияМассивРасшифровки = Новый Массив;
		Для Каждого Элемент Из МассивРасшифровки Цикл
			КопияМассивРасшифровки.Добавить(Элемент);
		КонецЦикла;
		
		ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, КопияМассивРасшифровки,ПоказательДляВывода);

	КонецЦикла;

	//СтруктураПараметров.Вставить("ПредыдущееЗначениеГруппировки" + Выборка.Уровень(), Неопределено);

КонецПроцедуры // ВывестиВыборку()

Процедура РасшифровкаСтандартнымОтчетом(Расшифровка)
	
	Отчет=Отчеты.ОтчетОстаткиИОбороты.Создать();
	ИмяРегистра=Расшифровка.ВидРегистра;
	
	Если ИмяРегистра="ДенежныеСредстваКПолучению" Тогда
		
		СтруктураПутьКДанным=Новый Структура;
		СтруктураПутьКДанным.Вставить("Организация","Организация");
		СтруктураПутьКДанным.Вставить("БанковскийсчетКасса","БанковскийСчетКасса");
		СтруктураПутьКДанным.Вставить("ВидДенежныхСредств","ВидДенежныхСредств");
		СтруктураПутьКДанным.Вставить("ВалютаДенежныхСредств","БанковскийСчетКасса.ВалютаДенежныхСредств");
		СтруктураПутьКДанным.Вставить("ДатаДвижения","ДокументПолучения.Дата");
		ДокументДвижения="ДокументПолучения";
		
	ИначеЕсли ИмяРегистра="ПланируемыеПоступленияДенежныхСредств" Тогда
		
		СтруктураПутьКДанным=Новый Структура;
		СтруктураПутьКДанным.Вставить("Организация","Организация");
		СтруктураПутьКДанным.Вставить("БанковскийсчетКасса","ДокументПланирования.БанковскийСчетКасса");
		СтруктураПутьКДанным.Вставить("ВидДенежныхСредств","ДокументПланирования.ФормаОплаты");
		СтруктураПутьКДанным.Вставить("ВалютаДенежныхСредств","ДокументПланирования.ВалютаДокумента");
		СтруктураПутьКДанным.Вставить("ДатаДвижения","ДокументПланирования.ДатаПоступления");
		ДокументДвижения="ДокументПланирования";
	
	ИначеЕсли ИмяРегистра="ДенежныеСредстваКСписанию" Тогда
		
		СтруктураПутьКДанным=Новый Структура;
		СтруктураПутьКДанным.Вставить("Организация","Организация");
		СтруктураПутьКДанным.Вставить("БанковскийсчетКасса","БанковскийСчетКасса");
		СтруктураПутьКДанным.Вставить("ВидДенежныхСредств","ВидДенежныхСредств");
		СтруктураПутьКДанным.Вставить("ВалютаДенежныхСредств","БанковскийСчетКасса.ВалютаДенежныхСредств");
		СтруктураПутьКДанным.Вставить("ДатаДвижения","ДокументСписания.Дата");
		ДокументДвижения="ДокументСписания";
		
	ИначеЕсли ИмяРегистра="ЗаявкиНаРасходованиеСредств" Тогда
		
		СтруктураПутьКДанным=Новый Структура;
		СтруктураПутьКДанным.Вставить("Организация","Организация");
		СтруктураПутьКДанным.Вставить("БанковскийсчетКасса","ЗаявкаНаРасходование.БанковскийСчетКасса");
		СтруктураПутьКДанным.Вставить("ВидДенежныхСредств","ЗаявкаНаРасходование.ФормаОплаты");
		СтруктураПутьКДанным.Вставить("ВалютаДенежныхСредств","ЗаявкаНаРасходование.ВалютаДокумента");
		СтруктураПутьКДанным.Вставить("ДатаДвижения","ЗаявкаНаРасходование.ДатаРасхода");
		ДокументДвижения="ЗаявкаНаРасходование";
		
	КонецЕсли;
		
		
	// Передача параметров в форму
	Отчет.ИмяРегистра = ИмяРегистра;
	Отчет.ЗаполнитьНачальныеНастройки();

	Отчет.мВыбиратьИмяРегистра = Ложь;
	
	ОтборПоДате=Ложь;
	
	ДатаНачОтчета=?(Расшифровка.Свойство("ДатаНач"),Расшифровка.ДатаНач,ДатаНач);
	ДатаКонОтчета=?(Расшифровка.Свойство("ДатаКон"),Расшифровка.ДатаКон,ДатаКон);
	
	Если Расшифровка.Свойство("ПериодДень") Тогда
		  НачОтбора=НачалоДня(Расшифровка.ПериодДень);
		  КонОтбора=КонецДня(Расшифровка.ПериодДень);
		  ОтборПоДате=Истина;
	ИначеЕсли Расшифровка.Свойство("ПериодНеделя") Тогда
		  НачОтбора=НачалоНедели(Расшифровка.ПериодНеделя);
		  КонОтбора=КонецНедели(Расшифровка.ПериодНеделя);
		  ОтборПоДате=Истина;
	ИначеЕсли Расшифровка.Свойство("ПериодНеделя") Тогда
		  НачОтбора=НачалоНедели(Расшифровка.ПериодНеделя);
		  КонОтбора=КонецНедели(Расшифровка.ПериодНеделя);
		  ОтборПоДате=Истина; 
	ИначеЕсли Расшифровка.Свойство("ПериодМесяц") Тогда
		  НачОтбора=НачалоМесяца(Расшифровка.ПериодМесяц);
		  КонОтбора=КонецМесяца(Расшифровка.ПериодМесяц);
		  ОтборПоДате=Истина;
	ИначеЕсли Расшифровка.Свойство("ПериодКвартал") Тогда
		  НачОтбора=НачалоКвартала(Расшифровка.ПериодКвартал);
		  КонОтбора=КонецКвартала(Расшифровка.ПериодКвартал);
		  ОтборПоДате=Истина;
	ИначеЕсли Расшифровка.Свойство("ПериодГод") Тогда
		  НачОтбора=НачалоГода(Расшифровка.ПериодГод);
		  КонОтбора=КонецГода(Расшифровка.ПериодГод);
		  ОтборПоДате=Истина;
	ИначеЕсли Расшифровка.Свойство("ПериодИтого") Тогда
		  НачОтбора=НачалоДня(ДатаНачОтчета);
		  КонОтбора=КонецДня(ДатаКонОтчета);
		  ОтборПоДате=Истина;
	 ИначеЕсли Расшифровка.Свойство("НачалоПериода") Тогда
		 Отчет.ДатаКон=НачалоДня(ДатаНачОтчета); 
	КонецЕсли;
				
	Отчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();	
	Отчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
	Отчет.ПостроительОтчета.ИзмеренияСтроки.Добавить(ДокументДвижения,"ДокументДвижения");
	
	Для Каждого Элемент Из Расшифровка Цикл
		
		Если СтруктураПутьКданным.Свойство(Элемент.Ключ) Тогда
			
			Отбор=Отчет.ПостроительОтчета.Отбор.Добавить(СтруктураПутьКданным[Элемент.Ключ],Элемент.Ключ);
			Отбор.Значение=Элемент.Значение;
			Отбор.ВидСравнения=ВидСравнения.Равно;
			Отбор.Использование=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтборПоДате Тогда
		
		Отбор=Отчет.ПостроительОтчета.Отбор.Добавить(СтруктураПутьКДанным.ДатаДвижения,"ДатаДвижения");
		Отбор.ЗначениеС=НачОтбора;
		Отбор.ЗначениеПо=КонОтбора;
		Отбор.ВидСравнения=ВидСравнения.ИнтервалВключаяГраницы;
		Отбор.Использование=Истина;
				
	КонецЕсли;
				
	Отчет.РаскрашиватьИзмерения      = Истина;
	Отчет.ВыводитьИтогиПоВсемУровням = Истина;
	Отчет.ВыводитьПоказателиВСтроку  = Истина;
	Отчет.ПоказыватьЗаголовок = Истина;
	
	Форма = Отчет.ПолучитьОсновнуюФорму();
	Форма.ОбновитьОтчет();

	Форма.Открыть();
	
КонецПроцедуры // РасшифровкаСтандартнымОтчетом(Расшифровка)

Процедура ОбработкаРасшифровкиСводныхЗначений(Расшифровка) Экспорт;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СписокВыбора = Новый СписокЗначений;
		
		Для Каждого Строка Из ОсновныеГруппировки Цикл
			
			Если Не Строка.Использование Тогда
				
				СписокВыбора.Добавить(Строка.Имя,Строка.Представление);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из ДополнительныеГруппировки Цикл
			
			Если Не Строка.Использование Тогда
				
				СписокВыбора.Добавить(Строка.Имя,Строка.Представление);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Расшифровка.Свойство("ВидРегистра") Тогда
			СписокВыбора.Добавить(0, "Остатки по регистрам");
		КонецЕсли;
		
		Если СписокВыбора.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Выбор = СписокВыбора.ВыбратьЭлемент("Выберите действие", СписокВыбора[СписокВыбора.Количество()-1]);
		
		Если Выбор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Выбор.Значение=0 Тогда
			
			РасшифровкаСтандартнымОтчетом(Расшифровка);
			
		Иначе
			
			// Настройка отчета
			Отчет = Отчеты.ПлатежныйКалендарь.Создать();
			Параметры = Новый Соответствие;
			
			Параметры.Вставить("ОсновныеГруппировки",ОсновныеГруппировки.Выгрузить());
			Параметры.Вставить("ДополнительныеГруппировки",ДополнительныеГруппировки.Выгрузить());
			Параметры.Вставить("ИмяГруппировки",Выбор.Значение);
			Параметры.Вставить("ДатаНач",ДатаНач);
            Параметры.Вставить("ДатаКон",ДатаКон);
			
			// Переносимые свойства
			Параметры.Вставить("ДетализацияПоПериодам",     ДетализацияПоПериодам);
			
			Отчет.Настроить(Параметры);
			
			Форма = Отчет.ПолучитьОсновнуюФорму();
			
			ПостроительОтчета.НастроитьРасшифровку(Отчет.ПолучитьПостроительОтчета(), Расшифровка);
			
			Форма.ОбновитьТаблицуОтчета();
			Форма.НеВосстанавливатьНастройку=Истина;
			Форма.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
КонецПроцедуры // ОбработкаРасшифровкиСводныхЗначений()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ПостроительОтчета;

КонецФункции // ПолучитьПостроительОтчета()

	// Настраивает отчет для параметрического вызова
//
// Параметры
//  СтруктураПараметров  – Структура, Соответсвие – содержит список параметров:
//
Процедура Настроить(СтруктураПараметров, ЗаполняемыйОбъект = Неопределено) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
			
	Если ЗаполняемыйОбъект = Неопределено Тогда
		ЗаполняемыйОбъект = ЭтотОбъект;
	КонецЕсли;
	
	// Это свойство влияет на заполнени	
	ЗаполняемыйОбъект.ДетализацияПоПериодам = Параметры["ДетализацияПоПериодам"];
	ЗаполняемыйОбъект.ЗаполнитьНачальныеНастройки();
    ЗаполняемыйОбъект.ДатаНач = Параметры["ДатаНач"];
	ЗаполняемыйОбъект.ДатаКон = Параметры["ДатаКон"];

    ЗаполняемыйОбъект.ОсновныеГруппировки.Загрузить(Параметры["ОсновныеГруппировки"]);
	ЗаполняемыйОбъект.ДополнительныеГруппировки.Загрузить(Параметры["ДополнительныеГруппировки"]);
	
	//Добавляемая группировка
	ИмяГруппировки=Параметры["ИмяГруппировки"];
	
	НайденаГруппировка=Ложь;
	
	Для Каждого Строка Из ЗаполняемыйОбъект.ОсновныеГруппировки Цикл
		
		Если Строка.Имя=ИмяГруппировки Тогда
			
			Строка.Использование=Истина;
			НайденаГруппировка=Истина;
			Прервать;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не НайденаГруппировка Тогда
		
		Для Каждого Строка Из ЗаполняемыйОбъект.ДополнительныеГруппировки Цикл
			
			Если Строка.Имя=ИмяГруппировки Тогда
				
				Строка.Использование=Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

мЗначимыеГруппировкиГор=Новый ("СписокЗначений");
НП=Новый НастройкаПериода;
мНазваниеОтчета="Платежный календарь"
#КонецЕсли
