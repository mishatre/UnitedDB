Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем ЕстьБезналичныеРасчеты;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД Экспорт;

// Хранит текущее значение учетной политики розничная торговля облагается ЕНВД
Перем мРозничнаяТорговляОблагаетсяЕНВД Экспорт;

// Хранит текущее значение склада для контроля учетной политики розничная торговля облагается ЕНВД
Перем мТекущийСклад Экспорт;

Перем мОтражатьВРегламентированномУчете Экспорт;

Перем мСтароеЗначениеСклада Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьОтчетаОПродажахККМ()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.Номер КАК НомерДокумента,
	|	Док.Ссылка.Дата  КАК ДатаДокумента,
	|	Док.Ссылка.Организация КАК Организация,
	|	Док.Ссылка.КассаККМ КАК КассаККМ,
	|	Док.Ссылка.КассаККМ.Представление КАК ККМПредставление,
	|	СУММА(ВЫБОР КОГДА Док.Сумма > 0 ТОГДА
	|		Док.Сумма + ВЫБОР КОГДА Док.Ссылка.СуммаВключаетНДС ТОГДА 0 ИНАЧЕ Док.СуммаНДС КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ) КАК Итого,
	|	СУММА(ВЫБОР КОГДА Док.Сумма > 0 ТОГДА
	|		0
	|	ИНАЧЕ
	|		-Док.Сумма - ВЫБОР КОГДА Док.Ссылка.СуммаВключаетНДС ТОГДА 0 ИНАЧЕ Док.СуммаНДС КОНЕЦ
	|	КОНЕЦ) КАК ИтогоВозврат
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Номер,
	|	Док.Ссылка.Дата,
	|	Док.Ссылка.Организация,
	|	Док.Ссылка.КассаККМ,
	|	Док.Ссылка.КассаККМ.Представление
	|";

	Результат = Запрос.Выполнить();

	Шапка = Результат.Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_ОтчетККМ";

	Макет = ПолучитьМакет("ОтчетККМ");

	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОрганизацияИНН           = СведенияОПокупателе.ИНН;
	ОбластьМакета.Параметры.ПрограммаУчета           = "1С:Предприятие 8";
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ТаблицаСтрок = Результат.Выгрузить();

	Для Каждого Строка Из ТаблицаСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(Строка);
		ОбластьМакета.Параметры.Итого = Шапка.Итого - ОплатаПлатежнымиКартами.Итог("Сумма") - ОплатаБанковскимиКредитами.Итог("Сумма") + Строка.ИтогоВозврат;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итог");
	
	СуммаИтогоВозврат = ТаблицаСтрок.Итог("ИтогоВозврат");
	СуммаИтого = ТаблицаСтрок.Итог("Итого") - ОплатаПлатежнымиКартами.Итог("Сумма") - ОплатаБанковскимиКредитами.Итог("Сумма") + СуммаИтогоВозврат;

	ОбластьМакета.Параметры.Итого = СуммаИтого;
	ОбластьМакета.Параметры.ИтогоВозврат = СуммаИтогоВозврат;

	ОбластьМакета.Параметры.СуммаВыручкиПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого - СуммаИтогоВозврат, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Оборот");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.ДатаДокумента);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаОПродажахККМ()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
//   по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка. Название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетККМ" Тогда // получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаОПродажахККМ();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()
#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("ОтчетККМ","КМ-6 (Справка отчет кассира-операциониста)");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ" , "Расход с розничных складов в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполнение табличной части проданными ТМЦ по инвентаризации товаров (розница).
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (Инвентаризация Товаров (розница)).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	УчитыватьНДС     = Истина;
	СуммаВключаетНДС = Истина;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"         , Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТоварНовый"             , Справочники.Качество.Новый);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	Док.Ссылка.Склад.ВидСклада                    КАК ВидСклада,
	|	МИНИМУМ(Док.НомерСтроки) 					  КАК НомерСтроки,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|       ДокСписание.Номенклатура,
	|       ДокСписание.ХарактеристикаНоменклатуры,
	|       ДокСписание.СерияНоменклатуры,
	|       ДокСписание.Качество,
	|       ДокСписание.Ссылка.Склад                         КАК Склад,
	|		ДокСписание.Количество                           КАК Количество,
	|       ДокСписание.Цена
	|	 ИЗ
	|       Документ.СписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	|	 ВЫБРАТЬ 
	|       ДокОтчетККМ.Номенклатура,
	|       ДокОтчетККМ.ХарактеристикаНоменклатуры,
	|       ДокОтчетККМ.СерияНоменклатуры,
	|       &ТоварНовый                                      КАК Качество,
	|       ДокОтчетККМ.Склад                                КАК Склад,
	|       ДокОтчетККМ.Количество                           КАК Количество,
	|       ДокОтчетККМ.Цена
	|	 ИЗ
	|       Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|    ГДЕ
	|       ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|       И ДокОтчетККМ.Ссылка.Проведен
	|       И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|      Док.Номенклатура               = ВложенныйЗапрос.Номенклатура
	|    И Док.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|    И Док.СерияНоменклатуры          = ВложенныйЗапрос.СерияНоменклатуры
	|    И Док.Качество                   = ВложенныйЗапрос.Качество
	|    И Док.Ссылка.Склад               = ВложенныйЗапрос.Склад
	|    И Док.Цена                       = ВложенныйЗапрос.Цена
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|   И ((Док.КоличествоУчет - Док.Количество) > 0)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	РозницаУчитыватьЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Организация, Дата);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Склад                      = Выборка.Склад;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти   , ЭтотОбъект);
		Если РозницаУчитыватьЕНВД Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
		КонецЕсли;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;

#Если Клиент Тогда
	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;
#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Заполняет табличную часть по сериям при оперативном проведении.
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады       = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");

	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры, ,ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	СтрокаИндекса = "Номенклатура,ХарактеристикаНоменклатуры,Качество";
	Если  ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		СтрокаИндекса = СтрокаИндекса+",Цена";
	КонецЕсли;
	ТаблицаСерий.Индексы.Добавить(СтрокаИндекса);
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"              , ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество"                  , Справочники.Качество.Новый);
		Если  ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			СтруктураПоиска.Вставить("Цена"                  , ИсходнаяСтрока.Цена);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницах = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
			                                  / ИсходнаяСтрока.Коэффициент;
			Если ОстатокВЕдиницах >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницах;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницах * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Строка.СерияНоменклатуры;
			НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                          = СписанноеКоличество;

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество * ИсходнаяСтрока.Коэффициент
			                                / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить <> 0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры                   = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
				НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
				НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
				НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
				НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество + КоличествоОсталосьПогасить;

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоСериям()

// Процедура проверяет заполненение реквизита ИнвентаризацияТоваровНаСкладе,
// и вызывает сервисный механизм для заполнения табличной части.
//
Процедура ДействиеЗаполнитьПоИнвентаризации()	Экспорт

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		
		ПредставлениеИнвентаризацияТоваровНаСкладе = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе.Представление();
		ТекстПредупреждения = "Документ """ + ПредставлениеИнвентаризацияТоваровНаСкладе + """ не выбран.
		                      |Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		
	#Если Клиент Тогда
		Предупреждение(ТекстПредупреждения, ,);
	#Иначе
		ВызватьИсключение ТекстПредупреждения;
	#КонецЕсли
	
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ОчиститьТабЧасть = Истина;
		
		#Если Клиент Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		ОчиститьТабЧасть = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,) = КодВозвратаДиалога.Да;
		#КонецЕсли
		
		Если Не ОчиститьТабЧасть Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыПоИнвентаризацииТоваров(ИнвентаризацияТоваровНаСкладе);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Производит пересчет необходимых полей при изменении типа цен
//
Процедура ПриИзмененииТипаЦен()

	Если Товары.Количество() > 0 Тогда
		ПересчитатьТабЧасть = Истина;
		
		#Если Клиент Тогда
		ТекстВопроса = "Изменился тип цен. Пересчитать табличную часть?";
		ПересчитатьТабЧасть = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да;
		#КонецЕсли
		
		Если ПересчитатьТабЧасть Тогда

			СтруктураЗначений = Новый Структура;
			СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен);
			СтруктураЗначений.Вставить("НовыйВалютаДокумента", мВалютаРегламентированногоУчета);
			СтруктураЗначений.Вставить("НовыйКурсДокумента", 1);
			СтруктураЗначений.Вставить("НовыйКратностьДокумента", 1);

			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			
			// Получить нужные цены запросом
			РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений, 
			                                                  СпособЗаполненияЦен, 
			                                                  Товары.ВыгрузитьКолонку("Номенклатура"),
			                                                  Дата, Неопределено);

			ВыборкаИзРезультатаЗапроса = РезультатЗапросаЦен.Выбрать();
			
			СтруктураПоиска = Новый Структура(); // стркутура для поиска в результате запроса

			// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл

				СтруктураПоиска.Вставить("Номенклатура"              , СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

				ВыборкаИзРезультатаЗапроса.Сбросить(); 
				Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // Нашли запись

					// Если для данного товара есть цена данного типа
					// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
					Если НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
						СтрокаТабличнойЧасти.Цена = 0;
					Иначе
						// Присваиваем значение цены и единицы цены
						Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда

							Цена = ВыборкаИзРезультатаЗапроса.Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
							СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ЭтотОбъект.Дата);
							МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, 
														ВыборкаИзРезультатаЗапроса.ВалютаЦены,
														СтруктураЗначений.НовыйТипЦен.ВалютаЦены,
														ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
														СтруктураВалюты.Курс,
														ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
														СтруктураВалюты.Кратность);
							СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(Цена,
																		СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
																		СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);
						Иначе
							СтрокаТабличнойЧасти.Цена = ВыборкаИзРезультатаЗапроса.Цена;
						КонецЕсли;

						// Пересчитываем цену в валюту документа
						Если СтруктураЗначений.НовыйВалютаДокумента <> ВыборкаИзРезультатаЗапроса.ВалютаЦены Тогда
							СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
							                                    ВыборкаИзРезультатаЗапроса.ВалютаЦены, 
							                                    СтруктураЗначений.НовыйВалютаДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
							                                    СтруктураЗначений.НовыйКурсДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
							                                    СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииТипаЦен()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "") Экспорт
	
	мОрганизацияЯвляетсяПлательщикомЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата);

	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
		мРозничнаяТорговляОблагаетсяЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Организация, Дата);
		мТекущийСклад                    = Склад;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

		ЗаполнениеДокументов.ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ЭтотОбъект, мВалютаРегламентированногоУчета,
													СпособЗаполненияЦен, "Продажа", РежимВызова, "Товары",
													мРозничнаяТорговляОблагаетсяЕНВД, мТекущийСклад,
													мОрганизацияЯвляетсяПлательщикомЕНВД);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Выполняет необходимые действия при изменении реквизита ОтражатьВБухгалтерскомУчете
//
Процедура ПриИзмененииОтражатьВБухгалтерскомУчете() Экспорт
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры // ПриИзмененииОтражатьВБухгалтерскомУчете()
   
// Выполняет необходимые действия при изменении реквизита Склад
//
Процедура ПриИзмененииИнвентаризацииТоваровНаСкладе() Экспорт

	Если ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ИнвентаризацияТоваровНаСкладе.Организация;
			ПриИзмененииОрганизации();
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = ИнвентаризацияТоваровНаСкладе.Склад;
			ПриИзмененииСклада();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет необходимые действия при изменении реквизита Склад
//
Процедура ПриИзмененииСклада() Экспорт
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
				#Если Клиент Тогда
				Предупреждение("Если установлен вид операции ""НТТ"", то склад можно выбрать только с видом ""НТТ""!");
				#КонецЕсли
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				#Если Клиент Тогда
				Предупреждение("Если установлен вид операции ""ККМ"", то склад не может быть выбран с видом ""НТТ""!");
				#КонецЕсли
				Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Если НЕ мУказаниеСкладовВТЧ Тогда
			ТипЦен = Склад.ТипЦенРозничнойТорговли;
			ПриИзмененииТипаЦен();
		КонецЕсли;
	КонецЕсли;

	#Если Клиент Тогда
	Если мУказаниеСкладовВТЧ Тогда
		РаботаСДиалогами.ИзменитьЗначениеСкладаВТабЧастях(
			ЭтотОбъект,
			Склад,
			мСтароеЗначениеСклада,
			"Товары",
			"Склад");
	КонецЕсли;
	#КонецЕсли

	ПриИзмененииОблагаетсяЕНВД("Склад");

КонецПроцедуры //ПриИзмененииСклада()
   
// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;
	
	ПриИзмененииОблагаетсяЕНВД("Организация");
	ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(ЭтотОбъект,,,мОтражатьВРегламентированномУчете,истина);
	
КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого
//
Процедура ИнициализироватьДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт
	
	Если ЭтоНовый() Тогда
		
#Если Клиент Или ВнешнееСоединение Тогда
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Покупка", ПараметрОбъектКопирования, ПараметрОснование);
	
	// Заполнить реквизиты значениями по умолчанию.
	Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда

		ПриИзмененииДоговораЭквайрингаВнутр();

		// Установить вид операции из настроек пользователя
		ОсновнойВидОперации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойВидОперацииДокументаОтчетОРозничныхПродажах");
		Если ЗначениеЗаполнено(ОсновнойВидОперации) Тогда
			ВидОперации = ОсновнойВидОперации;
		КонецЕсли;
	КонецЕсли;
#КонецЕсли
	
	КонецЕсли;
	
	ОбщегоНазначения.ОбработатьПризнакОтраженияВреглУчете(ЭтотОбъект,,,мОтражатьВРегламентированномУчете);
	ПриИзмененииОблагаетсяЕНВД();

	// Сохраним текущее значение склада
	мСтароеЗначениеСклада = Склад;

КонецПроцедуры // ИнициализироватьНовыйДокумент()

// Выполняет инициализацию нового документа и устанавливает вид операции ОтчетНТТОПродажах.
// Вызывается из веб-приложения "Удаленный склад".
// 
Процедура ИнициализироватьНовыйДокументНТТ(ПараметрОбъектКопирования, ПараметрОснование) Экспорт
	
	ИнициализироватьДокумент(ПараметрОбъектКопирования, ПараметрОснование);
	ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
	
	Если ЗначениеЗаполнено(Склад) И Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		
		Склад = Справочники.Склады.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры // ИнициализироватьНовыйДокумент()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка таб. части "Товары".
//
Процедура ПриИзмененииНоменклатурыТоваровВнутр(СтрокаТабличнойЧасти) Экспорт

	// Заполняем реквизиты табличной части.
		Если СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
			Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата, мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			КонецЕсли;
		Иначе
			Если мРозничнаяТорговляОблагаетсяЕНВД <> Неопределено
			   И мРозничнаяТорговляОблагаетсяЕНВД Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			КонецЕсли;
		КонецЕсли;

	Если НЕ мУказаниеСкладовВТЧ Тогда
		ТекСклад = Склад;
	Иначе
		ТекСклад = СтрокаТабличнойЧасти.Склад;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСклад) Тогда
		Если ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТипЦен);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекСклад,
												мВалютаРегламентированногоУчета);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТекСклад.ТипЦенРозничнойТорговли, Истина);
			СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыТоваровВнутр()

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ "Товары".
//
// Параметры:
//  СтрокаТабличнойЧасти - строка таб. части "Товары".
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти) Экспорт

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваровВнутр(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()
 
// Заполняет поля позиции табличной части Товары по выбранной номенклатуре.
// Вызывается из веб-приложения "Удаленный склад"
//
// Параметры
//  НомерПозиции  – номер позиции табличной части
//
Процедура ЗаполнитьПозициюТоварыПоНоменклатуре(НомерПозиции) Экспорт
	
	СтрокаТабличнойЧасти = Товары.Получить(НомерПозиции); 
	ЗаполнитьСкладВПозицииТЧТовары(СтрокаТабличнойЧасти);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ЗаполнитьПозициюТоварыПоНоменклатуре()

// Заполняет поля всех позиций табличной части Товары по выбранной номенклатуре.
// Вызывается из веб-приложения "Удаленный склад"
//
Процедура ЗаполнитьПозицииТЧТовары() Экспорт
	
	Для НомерПозиции = 0 По Товары.Количество() - 1 Цикл	
		ЗаполнитьПозициюТоварыПоНоменклатуре(НомерПозиции);			
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьПозицииТЧТовары()

// Заполняет поля позиции табличной части ОплатаПлатежнымиКартами по выбранному виду оплаты.
// Вызывается из веб-приложения "Удаленный склад"
//
// Параметры
//  НомерПозиции  – номер позиции табличной части
//
Процедура ЗаполнитьПозициюТЧОплатаПлатежнымиКартами(НомерПозиции) Экспорт
	
	ПриИзмененииВидаОплатыПлатежнымиКартами(ОплатаПлатежнымиКартами.Получить(НомерПозиции));

КонецПроцедуры // ЗаполнитьПозициюТЧОплатаПлатежнымиКартами()

// Заполняет поля всех позиций табличной части ОплатаПлатежнымиКартами по выбранному виду оплаты.
// Вызывается из веб-приложения "Удаленный склад"
//
Процедура ЗаполнитьПозицииТЧОплатаПлатежнымиКартами() Экспорт
	
	Для НомерПозиции = 0 По ОплатаПлатежнымиКартами.Количество() - 1 Цикл	
		ЗаполнитьПозициюТЧОплатаПлатежнымиКартами(НомерПозиции);			
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьПозицииТЧОплатаПлатежнымиКартами()

// Заполняет поля позиции табличной части ОплатаБанковскимиКредитами по выбранному виду оплаты.
// Вызывается из веб-приложения "Удаленный склад"
//
// Параметры
//  НомерПозиции  – номер позиции табличной части
//
Процедура ЗаполнитьПозициюТЧОплатаБанковскимиКредитами(НомерПозиции) Экспорт
	
	ПриИзмененииВидаОплатыБанковскимКредитом(ОплатаБанковскимиКредитами.Получить(НомерПозиции));

КонецПроцедуры // ЗаполнитьПозициюТЧОплатаБанковскимиКредитами()

// Заполняет поля всех позиций табличной части ОплатаБанковскимиКредитами по выбранному виду оплаты.
// Вызывается из веб-приложения "Удаленный склад"
//
Процедура ЗаполнитьПозицииТЧОплатаБанковскимиКредитами() Экспорт
	
	Для НомерПозиции = 0 По ОплатаБанковскимиКредитами.Количество() - 1 Цикл	
		ЗаполнитьПозициюТЧОплатаБанковскимиКредитами(НомерПозиции);			
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьПозицииТЧОплатаБанковскимиКредитами()

// Устанавливает значение реквизита Склад в позиции ТЧ Товары
//
// Параметры
//  СтрокаТабличнойЧасти  – Строка ТЧ Товары
//
Процедура ЗаполнитьСкладВПозицииТЧТовары(СтрокаТабличнойЧасти) Экспорт

	// Заполним склад в строке
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
		СтрокаТабличнойЧасти.Склад = Склад;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			Если СтрокаТабличнойЧасти.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				#Если Клиент Тогда
				Предупреждение("НТТ не может быть выбрана, если НДС не включается в сумму!");
				#КонецЕсли
				СтрокаТабличнойЧасти.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // УстановитьСкладВПозицииТЧТовары()

// Пересчитывает суммы в позициях табличной части Товары.
// Вызывается из веб-приложения "Удаленный склад"
//
Процедура ПересчитатьТабличнуюЧастьТовары() Экспорт

	Для Каждого СтрокаТабЧасти Из Товары Цикл
		
		ЗаполнитьСкладВПозицииТЧТовары(СтрокаТабЧасти);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабЧасти, ЭтотОбъект);

	КонецЦикла; 	

КонецПроцедуры // ПересчитатьТабличнуюЧастьТовары()

// Пересчитывает суммы в позициях табличной части ОплатаПлатежнымиКартами.
// Вызывается из веб-приложения "Удаленный склад"
//
Процедура ПересчитатьТабличнуюЧастьОплатаПлатежнымиКартами() Экспорт

	Для Каждого СтрокаТабЧасти Из ОплатаПлатежнымиКартами Цикл
		
		ПересчитатьТорговуюУступку(СтрокаТабЧасти);

	КонецЦикла; 	

КонецПроцедуры // ПересчитатьТабличнуюЧастьОплатаПлатежнымиКартами()

// Пересчитывает суммы в позициях табличной части ОплатаБанковскимиКредитами.
// Вызывается из веб-приложения "Удаленный склад"
//
Процедура ПересчитатьТабличнуюЧастьОплатаБанковскимиКредитами() Экспорт

	Для Каждого СтрокаТабЧасти Из ОплатаБанковскимиКредитами Цикл
		
		ПересчитатьСуммуКомиссии(СтрокаТабЧасти);

	КонецЦикла; 	

КонецПроцедуры // ПересчитатьТабличнуюЧастьОплатаБанковскимиКредитами()

// Проверяет заполенение табличных частей и пересчитывает значения вычисляемых реквизитов
// Вызывается из веб-приложения "Удаленный склад"
//
Процедура ПередЗаписьюИзВебПриложения() Экспорт
	
#Если ВнешнееСоединение Тогда
	WEBПриложения.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Товары");
#КонецЕсли

	Для Каждого СтрокаТабЧасти Из Товары Цикл
		
		ЗаполнитьСкладВПозицииТЧТовары(СтрокаТабЧасти);
		
	КонецЦикла;
	
	Для Каждого СтрокаТабЧасти Из ОплатаПлатежнымиКартами Цикл
		
		ПриИзмененииВидаОплатыПлатежнымиКартами(СтрокаТабЧасти, Ложь);
		
	КонецЦикла;
	
	Для Каждого СтрокаТабЧасти Из ОплатаБанковскимиКредитами Цикл
		
		ПриИзмененииВидаОплатыБанковскимКредитом(СтрокаТабЧасти, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПриИзмененииДисконтнойКарты(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ВладелецДисконтнойКарты = ТекущаяСтрока.ДисконтнаяКарта.ВладелецКарты;

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты" в ТЧ "ОплатаПлатежнымиКартами".
//
// Параметры:
//  ТекущаяСтрока 			- строка, в которой необходимо выполнить пересчет;
//	ЗаполнитьПроцентУступки - булево, если Истина, реквизит ПроцентТорговойУступки
//								заполняется по выбранному виду оплаты, если Ложь - не заполняется.
//
Процедура ПриИзмененииВидаОплатыПлатежнымиКартами(ТекущаяСтрока, ЗаполнитьПроцентУступки = Истина) Экспорт
	
	УправлениеРозничнойТорговлей.ПроверитьКорректностьВидаОплаты(ТекущаяСтрока.ВидОплаты, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	
	Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
		Если ЗаполнитьПроцентУступки Тогда
			ТекущаяСтрока.ПроцентТорговойУступки = УправлениеРозничнойТорговлей.ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ТекущаяСтрока.ВидОплаты);
		КонецЕсли;
		ПересчитатьТорговуюУступку(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТекущаяСтрока 			 - строка, в которой необходимо выполнить пересчет;
//	ЗаполнитьПроцентКомиссии - булево, если Истина, реквизит ПроцентБанковскойКомиссии
//								заполняется по выбранному виду оплаты, если Ложь - не заполняется.
//
Процедура ПриИзмененииВидаОплатыБанковскимКредитом(ТекущаяСтрока, ЗаполнитьПроцентКомиссии = Истина) Экспорт

	УправлениеРозничнойТорговлей.ПроверитьКорректностьВидаОплаты(ТекущаяСтрока.ВидОплаты, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	
	ТекВидОплаты = ТекущаяСтрока.ВидОплаты;
	ТекущаяСтрока.БанкКредитор = ТекВидОплаты.БанкКредитор;
	ТекущаяСтрока.БанкКредитор = ТекВидОплаты.БанкКредитор;
	ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора = ТекВидОплаты.ДоговорВзаиморасчетовБанкаКредитора;
	Если ЗаполнитьПроцентКомиссии Тогда
		ТекущаяСтрока.ПроцентБанковскойКомиссии = ТекВидОплаты.ПроцентБанковскойКомиссии;
	КонецЕсли;

	ПересчитатьСуммуКомиссии(ТекущаяСтрока);

КонецПроцедуры // ПриИзмененииВидаОплатыБанковскимКредитом()

// Процедура пересчитывает значение банковской комиссии в переданной строке ТЧ.
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.СуммаБанковскойКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентБанковскойКомиссии / 100;

КонецПроцедуры // ПересчитатьСуммуКомиссии()

// Процедура устанавливает значения зависимых реквизитов при изменении реквизита "ДоговорЭквайринга".
//
Процедура ПриИзмененииДоговораЭквайрингаВнутр() Экспорт

	Эквайрер = ДоговорЭквайринга.Эквайрер;
	ДоговорВзаиморасчетовЭквайрера = ДоговорЭквайринга.ДоговорВзаиморасчетов;

КонецПроцедуры // ПриИзмененииДоговораЭквайрингаВнутр()

// Процедура выполняет необходимые действия при изменении реквизита "ДоговорЭквайринга".
//
Процедура ПриИзмененииДоговораЭквайринга() Экспорт

	ПриИзмененииДоговораЭквайрингаВнутр();
	
	ПересчитатьЗначенияТорговойУступки = Истина;
	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		#Если Клиент Тогда
		ПересчитатьЗначенияТорговойУступки = Вопрос("Пересчитать значения торговой уступки?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		#КонецЕсли
	КонецЕсли;

	Если ПересчитатьЗначенияТорговойУступки Тогда
		СоответствиеТарифов = УправлениеРозничнойТорговлей.СформироватьСоответствиеТарифовЭквайринг(ДоговорЭквайринга);

		Для Каждого СтрокаОплаты Из ОплатаПлатежнымиКартами Цикл
			СтрокаОплаты.ПроцентТорговойУступки = СоответствиеТарифов[СтрокаОплаты.ВидОплаты];

			ПересчитатьТорговуюУступку(СтрокаОплаты);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ДоговорЭквайрингаПриИзменении()

// Процедура пересчитывает значение торговой уступки в переданной строке ТЧ.
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПересчитатьТорговуюУступку(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.СуммаТорговойУступки = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентТорговойУступки / 100;

КонецПроцедуры // ПересчитатьТорговуюУступку()

// Записывает суммы документа в соответствующие реквизиты шапки для показа в журналах.
//
Процедура РасчетСуммДокумента() Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // РасчетСуммДокумента()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" и "КоличествоДопРасходы".
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС",             ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("КоличествоДопРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаТоваров.Колонки.Добавить("Стоимость",            ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр",               ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

	ИмяКолонкиЦена = "Цена";

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаНДС             = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДС          = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.Стоимость            = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.КоличествоДопРасходы = 0;
		ТекЦена = СтрокаТаблицы[ИмяКолонкиЦена];
		СтрокаТаблицы.СтоимостьБезСкидок = ТекЦена * ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоДок), 0, СтрокаТаблицы.КоличествоДок);
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;		
		СтрокаТаблицы.Стоимость            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.НДСУпр               = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ПолучательСкидки");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	ИмяКолонкиЦена = "Цена";

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы[ИмяКолонкиЦена] * ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоВЕдиницахДокумента), 0, СтрокаТаблицы.КоличествоВЕдиницахДокумента), 2), мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		СуммаСоСкидкамиРеально = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, СтрокаТаблицы.Стоимость, СтрокаТаблицы.Стоимость - СтрокаТаблицы.НДСУпр);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Розничная, ЭтотОбъект)) Тогда

				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.Количество * Комплектующая.Количество,
					   мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 1,
					   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - СтрокаТаблицы.Стоимость;

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТаблицаДвижений.Свернуть("Номенклатура,ПолучательСкидки,ХарактеристикаНоменклатуры,УсловиеСкидки,ЗначениеУсловияСкидки",
	                         "СуммаСкидки");

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета.
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация");

	Если Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад) Тогда
			Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
				Если СтруктураШапкиДокумента.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При данном виде операции в качестве склада может быть выбрана только НТТ!", Отказ, Заголовок);
				КонецЕсли;
			Иначе
				Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При данном виде операции в качестве склада не может быть выбрана НТТ!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		СтруктураОбязательныхПолей.Вставить("КассаККМ");

		Если ЗначениеЗаполнено(КассаККМ) И КассаККМ.Владелец <> Организация Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выбранная касса ККМ не соответствует организации, указанной в документе!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("ДоговорЭквайринга");
		СтруктураОбязательныхПолей.Вставить("Эквайрер");
		СтруктураОбязательныхПолей.Вставить("ДоговорВзаиморасчетовЭквайрера");

		Если ЗначениеЗаполнено(ДоговорВзаиморасчетовЭквайрера) И ДоговорВзаиморасчетовЭквайрера.Организация <> Организация Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Организация, указанная в договоре взаиморасчетов с эквайрером не соответствует организации, указанной в документе!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый).
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета.
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.УчитыватьНДС И Не СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
			Если СтрокаТаблицы.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ (строка " + СтрокаТаблицы.НомерСтроки + "), 
				|если НДС не включается в сумму.", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен          = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено         = НЕ ЗначениеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеУсловияНеЗаполнено = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		Если (ПроцентНеЗаполнен И УсловиеНеЗаполнено И ЗначениеУсловияНеЗаполнено)
		 Или Не(ПроцентНеЗаполнен Или УсловиеНеЗаполнено Или ЗначениеУсловияНеЗаполнено)Тогда // ошибок нет
		Иначе
			Если НЕ ПроцентНеЗаполнен
			   И  НЕ УсловиеНеЗаполнено
			   И  ТипЗнч(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки) = Тип("Число")
			   И  СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = 0 Тогда
				// Ошибок нет.
			Иначе
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
				                              + """ табличной части ""Товары"": ";
				Если ПроцентНеЗаполнен Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Процент автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если УсловиеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Условие автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если ЗначениеУсловияНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Значение условия автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыУпр()

// Проверяет правильность заполнения строк табличной части "ПродажиПоДисконтнымКартам".
//
// Параметры:
//  ТаблицаПоПродажамПоДисконтнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродажиПоДисконтнымКартам(ТаблицаПоПродажамПоДисконтнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ДисконтнаяКарта, Сумма");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПродажиПоДисконтнымКартам", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаБанковскимиКредитами",
	//   ТаблицаПоБанковскимКредитам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТаблицаПоПлатежнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаБанковскимиКредитами(ТаблицаПоБанковскимКредитам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма, БанкКредитор, ДоговорВзаиморасчетовБанкаКредитора");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаБанковскимиКредитами", СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаБанковскимиКредитами",
	   ТаблицаПоБанковскимКредитам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);

	ПредставлениеТабличнойЧасти = Метаданные().ТабличныеЧасти.ОплатаБанковскимиКредитами.Представление();

	Для Каждого СтрокаТЧ Из ТаблицаПоБанковскимКредитам Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Организация)
		   И ЗначениеЗаполнено(Организация)
		   И СтрокаТЧ.Организация <> Организация Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки)
			   + """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "выбран договор, оганизация которого не соответствует организации, указанной в документе!",
			                    Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "ОплатаПлатежнымиКартами".
//
// Параметры:
//  ТаблицаПоПлатежнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами(ТаблицаПоПлатежнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаПлатежнымиКартами", СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаПлатежнымиКартами",
	   ТаблицаПоПлатежнымКартам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.Услуга <> Истина Тогда // для товаров единица измерения обязательна
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для товара нужно заполнять единицу измерения (строка " + СтрокаТаблицы.НомерСтроки + ").", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары");

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//  РежимПроведения - режим проведения документа (оперативный или неоперативный).
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, 
	                          ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок);

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                           Новый Структура("Услуга", Ложь)).Выгрузить();

	//Получим таблицу по комплектам.
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамБезУслуг, ЭтотОбъект);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
	                       ТаблицаПоКомплектам , ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, 
						   ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок);
						   
	ДвиженияРегистраОперативныхРасчетов(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);

	СтруктураТаблицыВыручки = Новый структура("НомерСтроки, Номенклатура, Услуга,, ВидЦенности, Ценность, Партия,
												  |СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал,Комиссионный,Комитент,ДоговорКомиссии ,ВалютаРасчетовСКомитентом,СуммаСписания, Количество");
												  
	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки,,Истина);
	ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
	ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок);

	// Зарегистрируем в последовательности УУ.
	Если ОтражатьВУправленческомУчете Тогда
		ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
		ЗаписьРегистрации.Период      = Дата;
	КонецЕсли;

	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

	Если УчетнаяПолитика.СписыватьПартииПриПроведенииДокументов Тогда
		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
	Иначе
		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияРегистраОперативныхРасчетов(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// По регистру ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов (взаиморасчеты с эквайрером).
	Если НЕ СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСЭквайрером Тогда
		Возврат;
	КонецЕсли;

	СуммаВзаиморасчетов = ОплатаПлатежнымиКартами.Итог("Сумма");

	Если СуммаВзаиморасчетов <> 0 Тогда
		
		Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
		
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период      = Дата;
		
		Движение.ДоговорКонтрагента            = ДоговорВзаиморасчетовЭквайрера;
		Движение.Контрагент            		   = Эквайрер;
		Движение.Организация            	   = Организация;

		Движение.Сделка                        = Неопределено;
		Движение.ДокументРасчетовСКонтрагентом = Ссылка;
		Движение.ВидРасчетовСКонтрагентом      = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
		Движение.УпрУчет                       = СтруктураШапкиДокумента.ОтражатьВУправленческомУчете;
		
		Движение.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
		Движение.СуммаРегл           = СуммаВзаиморасчетов;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
                                 ТаблицаПоТоварамБезУслуг, ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, 
								 ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок)

	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	ИтогСуммаПлатежныеКарты   = ТаблицаПоПлатежнымКартам.Итог("Сумма");
	ИтогСуммаБанковскийКредит = ТаблицаПоБанковскимКредитам.Итог("Сумма");
	Если СуммаДокумента - ИтогСуммаПлатежныеКарты - ИтогСуммаБанковскийКредит <> 0 Тогда
		// По регистру РозничнаяВыручка.
		НаборДвижений = Движения.РозничнаяВыручка;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			СтрокаДвижений.РозничнаяТочка = КассаККМ;
		Иначе
			СтрокаДвижений.РозничнаяТочка = Склад;
		КонецЕсли;
		СтрокаДвижений.Сумма              = СуммаДокумента - ИтогСуммаПлатежныеКарты - ИтогСуммаБанковскийКредит;
		СтрокаДвижений.Подразделение      = Подразделение;

		НаборДвижений.мПериод             = Дата;
		НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РозничнаяВыручка.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ.

	ТаблицаНаСкладах = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый)).Выгрузить();

	Если ТаблицаНаСкладах.Количество() > 0 Тогда
		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНаСкладах, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;

	ТаблицаВРознице = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	                  Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный)).Выгрузить();

	Если ТаблицаВРознице.Количество() > 0 Тогда
		НаборДвижений = Движения.ТоварыВРознице;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		ТаблицаВРознице.Колонки.Добавить("СуммаПродажная");

		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаВРознице.ВыгрузитьКолонку("Склад"),
		                 ТаблицаВРознице.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаВРознице, ТаблицаПоЦенам);

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВРознице, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;

	ТаблицаВНТТ = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	              Новый Структура("ВидСклада", Перечисления.ВидыСкладов.НТТ)).Выгрузить();

	Если ТаблицаВНТТ.Количество() > 0 Тогда
		НаборДвижений = Движения.ТоварыВНТТ;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВНТТ, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ Продажи.

	НаборДвижений   = Движения.Продажи;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	ТаблицаПоТоварамПродажи = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамПродажи.Колонки.НДС.Имя = "НДСРегл";
    ТаблицаПоТоварамПродажи.Колонки.НДСУпр.Имя = "НДС";

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварамПродажи, ТаблицаДвижений, Проект, Дата, "Продажи");
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПродажи, ТаблицаДвижений);
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка       , "ДокументПродажи");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация  , "Организация");


	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.Продажи.ВыполнитьДвижения();
	КонецЕсли;

	// ПО РЕГИСТРУ ПродажиПоДисконтнымКартам.
	НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродажамПоДисконтнымКартам, ТаблицаДвижений);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ПредоставленныеСкидки.

	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
	КонецЕсли;

	// По регистрам взаиморасчетов отражаются безналичные расчеты
	
	Если ЕстьБезналичныеРасчеты Тогда
	
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыСКонтрагентами;
		ТаблицаВзаиморасчеты      = НаборЗаписейВзаиморасчеты.ВыгрузитьКолонки();
		НаборЗаписейРасчеты       = Движения.РасчетыСКонтрагентами;
		ТаблицаРасчеты            = НаборЗаписейРасчеты.ВыгрузитьКолонки();
	
		// Взаиморасчеты с эквайрером
		
		СуммаВзаиморасчетовПоКартам = ТаблицаПоПлатежнымКартам.Итог("Сумма");
		
		Если СуммаВзаиморасчетовПоКартам <> 0 Тогда
			
			СуммаУпрПоКартам = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаВзаиморасчетовПоКартам, 
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,	
				1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			СтрокаВзаиморасчеты = ТаблицаВзаиморасчеты.Добавить();
			
			СтрокаВзаиморасчеты.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
			СтрокаВзаиморасчеты.Контрагент          = Эквайрер;
			СтрокаВзаиморасчеты.Организация         = Организация;
			СтрокаВзаиморасчеты.Сделка              = Неопределено;
			СтрокаВзаиморасчеты.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоКартам;
			СтрокаВзаиморасчеты.СуммаУпр            = СуммаУпрПоКартам;
			
			СтрокаРасчеты = ТаблицаРасчеты.Добавить();
			
			СтрокаРасчеты.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
			СтрокаРасчеты.Контрагент  		  = Эквайрер;
			СтрокаРасчеты.Организация  	      = Организация;
			СтрокаРасчеты.Сделка              = Неопределено;
			СтрокаРасчеты.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаРасчеты.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоКартам;
			СтрокаРасчеты.СуммаУпр            = СуммаУпрПоКартам;
			
		КонецЕсли;
		
		// Взаиморасчеты с банками по кредитам
		
		Для каждого СтрокаКредита Из ТаблицаПоБанковскимКредитам Цикл
		
			СуммаУпрПоКредиту = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаКредита.Сумма, 
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,	
				1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			СтрокаВзаиморасчеты = ТаблицаВзаиморасчеты.Добавить();
			
			СтрокаВзаиморасчеты.ДоговорКонтрагента  = СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора;
			СтрокаВзаиморасчеты.Контрагент          = СтрокаКредита.БанкКредитор;
			СтрокаВзаиморасчеты.Организация         = Организация;
			СтрокаВзаиморасчеты.Сделка              = Неопределено;
			СтрокаВзаиморасчеты.СуммаВзаиморасчетов = СтрокаКредита.Сумма;
			СтрокаВзаиморасчеты.СуммаУпр            = СуммаУпрПоКредиту;
			
			СтрокаРасчеты = ТаблицаРасчеты.Добавить();
			
			СтрокаРасчеты.ДоговорКонтрагента  = СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора;
			СтрокаРасчеты.Контрагент  		  = СтрокаКредита.БанкКредитор;
			СтрокаРасчеты.Организация  	      = Организация;
			СтрокаРасчеты.Сделка              = Неопределено;
			СтрокаРасчеты.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаРасчеты.СуммаВзаиморасчетов = СтрокаКредита.Сумма;
			СтрокаРасчеты.СуммаУпр            = СуммаУпрПоКредиту;
			
		КонецЦикла;
			
		НаборЗаписейВзаиморасчеты.мПериод            = Дата;
		НаборЗаписейВзаиморасчеты.мТаблицаДвижений   = ТаблицаВзаиморасчеты;
			
		Если Не Отказ Тогда
			НаборЗаписейВзаиморасчеты.ВыполнитьПриход();
		КонецЕсли;
			
		НаборЗаписейРасчеты.мПериод            = Дата;
		НаборЗаписейРасчеты.мТаблицаДвижений   = ТаблицаРасчеты;
			
		Если Не Отказ Тогда
			НаборЗаписейРасчеты.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка остатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, "ДопустимыйСтатус2");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница, "КодОперацииПартииТоваров");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	
	Если ОтражатьВУправленческомУчете Тогда 

		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
		   И ЗначениеЗаполнено(Проект) Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
		КонецЕсли;

	КонецЕсли;

	Для каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТЧ = ТаблицаПоТоварамБезУслуг.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
		Строка.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		Строка.КурсДокумента = 1;
		Строка.КратностьДокумента = 1;
		Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
	КонецЦикла;
	
	// Возврат текущего дня отражается строчками с "-" 
	// Возвращаемое количество всегда меньше реализованного
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл

		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда

			КолонкиСуммирования = КолонкиСуммирования + Колонка.Имя +",";

		Иначе
			КолонкиГруппировок = КолонкиГруппировок + Колонка.Имя +",";

		КонецЕсли;

	КонецЦикла;

	ТаблицаДвижений.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд + 1;
		Строка.НомерСтрокиДокумента = Инд;

	КонецЦикла;
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
	    Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ, Заголовок) Экспорт

	Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
		//Отработка по партиям НДС не требуется.
		Возврат;
	КонецЕсли;

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОрганизацияНеЯвляетсяПлательщикомНДС И Не СтруктураШапкиДокумента.ВедетсяУчетНДСПоФЗ134 тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	ТаблицаВыручкиУслуги = ТаблицаВыручки.Скопировать();

	КолвоЭлементов = ТаблицаВыручкиУслуги.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		СтрокаТаблицы = ТаблицаВыручкиУслуги[КолвоЭлементов - ОбратныйИндекс];

		Если Не СтрокаТаблицы.Услуга Тогда
			ТаблицаВыручкиУслуги.Удалить(СтрокаТаблицы);
		КонецЕсли;

	КонецЦикла;

	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручкиУслуги, Движения, Отказ);
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Розница(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ);

КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		ФлагСкладНТТ = (ЗначениеЗаполнено(Основание.Склад)
		                 И Основание.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ);

		Если НЕ ФлагСкладНТТ Тогда
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;
		ТипЦен                        = Склад.ТипЦенРозничнойТорговли;
		ВидОперации                   = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;

		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	// Заполним реквизит склад в табличной части "Товары"
	Для каждого СтрокаТЧ из Товары Цикл
		Если Не мУказаниеСкладовВТЧ 
		 Или НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти",  мУказаниеСкладовВТЧ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",                      "ВалютаУправленческогоУчета",                 "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы",                      "КурсВалютыУправленческогоУчета",             "КурсВалютыУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",                "ВестиПартионныйУчетПоСкладам",               "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                          "ВидСклада",                                  "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",                    "ОтражатьВРегламентированномУчете",           "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",                "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорВзаиморасчетовЭквайрера", "ВалютаВзаиморасчетов",                       "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",                "ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",                "ВедениеУчетаПоПроектам",                     "ВедениеУчетаПоПроектам");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("ВестиПоДокументамРасчетовСЭквайрером", ДоговорВзаиморасчетовЭквайрера.ВестиПоДокументамРасчетовСКонтрагентом);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Склад"                            , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                        , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Номенклатура"                     , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                           , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                            , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                         , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"             , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                       , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоДок"                    , "Количество");
	СтруктураПолей.Вставить("Цена"                             , "Цена");
	СтруктураПолей.Вставить("Сумма"                            , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                        , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                              , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                           , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"       , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"             , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"      , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"      , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                       , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры", "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"     , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                 , "ЕдиницаИзмерения");
	СтруктураСложныхПолей = Новый Структура;

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СтруктураСложныхПолей.Вставить("ЦенаВРознице" , "ВЫБОР	КОГДА Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0.00 ТОГДА 0.00 ИНАЧЕ Цена / Коэффициент * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КОНЕЦ");
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);

КонецПроцедуры // СформироватьТаблицыДокумента()

// Функция возвращает таблицу продаж по дисконтным картам, необходимую для проведения документа.
//
// Параметры:
//  СтруктураШапкиДокумента - структура шапки документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица продаж по дисконтным картам.
//
Функция ПолучитьТаблицуПродажПоДисконтнымКартам(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДисконтнаяКарта"        , "ДисконтнаяКарта");
	СтруктураПолей.Вставить("ВладелецДисконтнойКарты", "ВладелецДисконтнойКарты");
	СтруктураПолей.Вставить("Сумма"                  , "Сумма");

	ТЗ = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПродажиПоДисконтнымКартам", СтруктураПолей).Выгрузить();

	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЗ.Сумма, мВалютаРегламентированногоУчета,
								   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

	Возврат ТЗ;

КонецФункции // ПолучитьТаблицуПродажПоДисконтнымКартам()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты", "ВидОплаты");
	СтруктураПолей.Вставить("ТипОплаты", "ВидОплаты.ТипОплаты");
	СтруктураПолей.Вставить("Сумма"    , "Сумма");

	ТаблицаПоПлатежнымКартам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПлатежнымиКартами", СтруктураПолей).Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты"                          , "ВидОплаты");
	СтруктураПолей.Вставить("ТипОплаты"                          , "ВидОплаты.ТипОплаты");
	СтруктураПолей.Вставить("Сумма"                              , "Сумма");
	СтруктураПолей.Вставить("БанкКредитор"                       , "БанкКредитор");
	СтруктураПолей.Вставить("ДоговорВзаиморасчетовБанкаКредитора", "ДоговорВзаиморасчетовБанкаКредитора");
	СтруктураПолей.Вставить("Организация"                        , "ДоговорВзаиморасчетовБанкаКредитора.Организация");
	СтруктураПолей.Вставить("СуммаБанковскойКомиссии"            , "СуммаБанковскойКомиссии");

	ТаблицаПоБанковскимКредитам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаБанковскимиКредитами", СтруктураПолей).Выгрузить();

	ЕстьБезналичныеРасчеты = ТаблицаПоПлатежнымКартам.Количество() > 0 ИЛИ ТаблицаПоБанковскимКредитам.Количество() > 0;
	Если ЕстьБезналичныеРасчеты Тогда
		СуммаПродажЗаНаличные = СуммаДокумента - ТаблицаПоПлатежнымКартам.Итог("Сумма") - ТаблицаПоБанковскимКредитам.Итог("Сумма");
		Если СуммаПродажЗаНаличные < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма оплаты платежными картами и банковскими кредитами больше общей суммы продаж по отчету!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	ТаблицаПоПродажамПоДисконтнымКартам = ПолучитьТаблицуПродажПоДисконтнымКартам(СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ОплатаПлатежнымиКартами".
	ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами(ТаблицаПоПлатежнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ОплатаБанковскимиКредитами".
	ПроверитьЗаполнениеТабличнойЧастиОплатаБанковскимиКредитами(ТаблицаПоБанковскимКредитам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ПродажиПоДисконтнымКартам".
	ПроверитьЗаполнениеТабличнойЧастиПродажиПоДисконтнымКартам(ТаблицаПоПродажамПоДисконтнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "Состав набора".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Количество");
	СтруктураПолей.Вставить("Цена");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);

	// Движения по документу
	Если Не Отказ Тогда

		// Подготовим таблицу товаров для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, 
			ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

// Процедура выполняет дополнение документа значениями по умолчанию.
//
Процедура ДополнитьДокументЗначениямиПоУмолчанию() Экспорт

	Для Каждого СтрокаТЧ Из Товары Цикл
		Если СтрокаТЧ.Номенклатура.Услуга Тогда
			Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТЧ.Номенклатура, Организация, Дата, мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект, "Реализация");
			КонецЕсли;
		Иначе
			Если мРозничнаяТорговляОблагаетсяЕНВД <> Неопределено
			   И мРозничнаяТорговляОблагаетсяЕНВД Тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект, "Реализация");
			КонецЕсли;
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	КонецЦикла;

КонецПроцедуры // ДополнитьДокументЗначениямиПоУмолчанию()
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

УказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);


