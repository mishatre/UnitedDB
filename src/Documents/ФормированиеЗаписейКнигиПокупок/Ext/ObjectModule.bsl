Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьТаблицуПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ АВТОЗАПОЛНЕНИЯ СТРОК ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС по приобретенным ценностям"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельВычетПоПриобретеннымЦенностямЗаполнить
//
Процедура ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям() Экспорт
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойполитики, Организация, "Нал");
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРезультатов = ВычетПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	
	КонтролироватьОплатуДляСФсДатойМенее01012006 = Истина;
	ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = ложь;
	
	Если Дата>= '20080101' тогда
		КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
	ИначеЕсли Дата>= '20060101' Тогда
		ОшибкаПолученияУчетнойПолитики2005 = Ложь;
		УчетнаяПолитикаНУ_31122005 = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики('20051231', ОшибкаПолученияУчетнойПолитики2005, Организация, "Нал");
		Если не ОшибкаПолученияУчетнойПолитики2005 и УчетнаяПолитикаНУ_31122005.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате тогда
			// Учетная политика велась по оплате. Обработка положений переходного периода не требуется.
		Иначе			
			// Учетная политика на 31.12.2005 велась по отгрузке, требуется отработка положений переходного периода по НДС.
			КонтролироватьОплатуДляСФсДатойМенее01012006 = Ложь;
			Если Дата<'20060601' Тогда
				// Корректировка суммы, которую можно принять к вычету на основании
				// п. 10. статьи 2 ФЗ №119-ФЗ - 1/6 в течении первого полугодия 2006 года
				// Вся сумма должна быть списана "равными долями" в течении первого полугодия,
				// поэтому не требуется контроль 1/6 в 6-м месяце.
				ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету = Истина;
			КонецЕсли; 
		КонецЕсли; 
		// Отработка положений переходного периода по НДС
	КонецЕсли; 
	
	Если ПредъявленНДСКВычету0 Тогда
		Дерево_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006);
	Иначе	
		Дерево_НДСкВычету = ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006);
	КонецЕсли;
	
	Если Дерево_НДСкВычету.Строки.Количество() = 0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВычетПоПриобретеннымЦенностям.Очистить();
		Возврат;
	КонецЕсли;
	
	// Определение суммы, которую можно принять к вычету на основании
	// п. 10. статьи 2 ФЗ №119-ФЗ - 1/6 в течении первого полугодия 2006 года
	Дерево_НДСкВычету.Колонки.Добавить("ОпределенаДоля_119ФЗ_2_10", Новый описаниеТипов("Булево"));
	Дерево_НДСкВычету.Колонки.Добавить("КВычету_СНДС_Часть", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Дерево_НДСкВычету.Колонки.Добавить("КВычету_НДС_Часть", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Если ПоложенияПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету Тогда
	    ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету);
	КонецЕсли; 
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСкВычету.Строки.ВыгрузитьКолонку("СчетФактура"), Истина);
	
	// Ограничиваем получаемые распределенные оплаты только отфактурованными поступлениями.
	// Отсутствие СФ допускается только для НДС, уплаченного на таможне, а оплаты по нему тоже не регистрируются.
	ДатаПоискаСчетовФактур = ПолучитьДатуПоискаСчетовФактурПоПриобретеннымЦенностям(Дата);
	ТаблицаСФ = УчетНДС.ОпределитьНаличиеСчетовФактурПолученных(,ДатаПоискаСчетовФактур,Организация, СписокСчетовФактур, Ложь, Истина, Истина, ДатаПоискаСчетовФактур);
	ОтфактурованныеПоступления = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСФ.ВыгрузитьКолонку("Документ"),Истина);
	
	Для Каждого СчетФактураДокумент Из СписокСчетовФактур Цикл
		Если ТипЗнч(СчетФактураДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ОтфактурованныеПоступления.Найти(СчетФактураДокумент) = Неопределено Тогда
			// Возврат по реализации без счета-фактуры
			ОтфактурованныеПоступления.Добавить(СчетФактураДокумент);
		КонецЕсли;
	КонецЦикла;

	РаспределенныеОплаты = ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(ОтфактурованныеПоступления);
	
	Если не УчетнаяПолитикаНУ.НДСРежимУчетаРаспределенныхОплат = Перечисления.НДСРежимУчетаРаспределенныхОплат.Приоритет_НДСМожетБытьПринятКВычету Тогда
		// Пессимистическая политика отражения вычетов. Сначала оплаты относятся на НДС включенный в стоимость (заблокированный к вычету),
		// лишь затем на НДС, который может быть принят к вычету.
		ДеревоНДС_ВычетЗаблокирован = ПолучитьСведенияПоЗаблокированномуНДС(ОтфактурованныеПоступления);
		
		РаспределитьОплатыПоДеревуСФ(ДеревоНДС_ВычетЗаблокирован, ТаблицаРезультатов,ОтфактурованныеПоступления,РаспределенныеОплаты, Ложь);
	КонецЕсли; 
	
	РаспределитьОплатыПоДеревуСФ(Дерево_НДСкВычету, ТаблицаРезультатов,ОтфактурованныеПоступления,РаспределенныеОплаты,,КонтролироватьОплатуДляСФсДатойМенее01012006);

	Для Каждого СтрокаСчетФактура Из ТаблицаРезультатов Цикл
		СтрокаСДатойСФ = ТаблицаСФ.Найти(СтрокаСчетФактура.СчетФактура, "Документ");
		Если СтрокаСДатойСФ <> Неопределено Тогда 
			СтрокаСчетФактура.ДатаПолученияСчетаФактуры = СтрокаСДатойСФ.СчетФактураДата;
			Если Дата >= '20150101' И НЕ ЗначениеЗаполнено(СтрокаСчетФактура.КодВидаОперации)
				И (ТипЗнч(СтрокаСДатойСФ.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный")
				ИЛИ ТипЗнч(СтрокаСДатойСФ.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный"))
				И НЕ ТипЗнч(СтрокаСчетФактура.СчетФактура) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				СтрокаСчетФактура.КодВидаОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаСДатойСФ.СчетФактура, "КодВидаОперации");
					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ПредъявленНДСКВычету0 ИЛИ Дата < '20150101' Тогда
		КолонкиСортировки = "СчетФактура,Поставщик,ВидЦенности,СтавкаНДС,ДокументОплаты";
	Иначе
		КолонкиСортировки = "ДатаПолученияСчетаФактуры,СчетФактура,Поставщик,ВидЦенности,СтавкаНДС,ДокументОплаты";
	КонецЕсли;
	
	ТаблицаРезультатов.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);

	ВычетПоПриобретеннымЦенностям.Загрузить(ТаблицаРезультатов);

КонецПроцедуры // ЗаполнитьСтрокиДокумента()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	МАКСИМУМ(НДСПредъявленныйОстатки.ИсправленныйСчетФактура) КАК ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0)) КАК КВычету_БезНДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК КВычету_НДС,
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты,
		|	ВЫБОР
		|		КОГДА &Дата < ДАТАВРЕМЯ(2015, 1, 1)
		|			ТОГДА """"
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|						ТОГДА ""16""
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).НомерРасходногоКассовогоОрдера <> """"
		|								ТОГДА ""17""
		|							ИНАЧЕ ""03""
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
		|			ТОГДА ""20""
		|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
		|				И ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.СчетФактураПолученный).БланкСтрогойОтчетности
		|			ТОГДА ""23""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодВидаОперации
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|				И (НЕ СчетФактура ССЫЛКА Документ.КорректировкаРеализации)
		|		    	И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|			И НДСПредъявленныйОстатки.ВидЦенности = НДСПредъявленныйРеализация0Остатки.ВидЦенности
		|			И НДСПредъявленныйОстатки.СтавкаНДС = НДСПредъявленныйРеализация0Остатки.СтавкаНДС
		|ГДЕ
		|	(НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйОстатки.НДСОстаток > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата),
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйОстатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйОстатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0)) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленныйРеализация0
Функция ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0(КонтролироватьОплатуДляСФсДатойМенее01012006 = истина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) КАК КВычету_БезНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_НДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) КАК КВычету_СНДС,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) КАК СчетФактураДата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата, &Дата) >= &Начало2006Года
		|					ТОГДА 3
		|				КОГДА (НЕ &КонтролироватьОплатуДляСФсДатойМенее01012006)
		|					ТОГДА 3
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ПорядокОплаты,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	ВЫБОР
		|		КОГДА &Дата < ДАТАВРЕМЯ(2015, 1, 1)
		|			ТОГДА """"
		|		ИНАЧЕ ""25""
		|	КОНЕЦ КАК КодВидаОперации
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|		    И Состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки
		|		ПО НДСПредъявленныйРеализация0Остатки.СчетФактура = НДСПредъявленныйОстатки.СчетФактура
		|			И НДСПредъявленныйРеализация0Остатки.ВидЦенности = НДСПредъявленныйОстатки.ВидЦенности
		|			И НДСПредъявленныйРеализация0Остатки.СтавкаНДС = НДСПредъявленныйОстатки.СтавкаНДС
		|			И (НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0)
		|ГДЕ
		|	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток > 0
		|			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураДата
		|ИТОГИ
		|	СУММА(КВычету_БезНДС),
		|	СУММА(КВычету_НДС),
		|	СУММА(КВычету_СНДС)
		|ПО
		|	СчетФактура,
		|	ПорядокОплаты";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Начало2006Года", '20060101');
	Запрос.УстановитьПараметр("КонтролироватьОплатуДляСФсДатойМенее01012006", КонтролироватьОплатуДляСФсДатойМенее01012006);

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния",ОтрабатываемыеСостояния);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Проверяем возможность предъявления к вычету по остаткам регистра "НДС предъявленный)
	// (вычет не может превышать текущий остаток)
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток КАК СуммаСНДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|			И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
		|			И СчетФактура В (&СписокСчетовФактур)) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток > 0
		|ИТОГИ
		|	СУММА(СуммаСНДС)
		|ПО
		|	СчетФактура";
		
	Запрос.УстановитьПараметр("СписокСчетовФактур", РезультатЗапроса.Строки.ВыгрузитьКолонку("СчетФактура"));
    СтрокиСФкУдалению = новый массив();
	ДоступныйКВычетуНДС = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураОтбора = НОвый структура("ВидЦенности, СтавкаНДС");
	Для каждого СтрокаСФ Из РезультатЗапроса.Строки Цикл
		СтрокаСФ_НДСПРедъявленный = ДоступныйКВычетуНДС.строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		Если СтрокаСФ_НДСПРедъявленный = Неопределено Тогда
			// Не найдены положитьельные остатки по СФ
			// НДС по СФ не может быть принят к вычету
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
			Продолжить;
		ИначеЕсли СтрокаСФ_НДСПРедъявленный.СуммаСНДС >= СтрокаСФ.КВычету_СНДС тогда
			// Сумма НДС доступного к вычету по СФ не менее, чем сумма списываемая документом.
			// Корректировка не требуется
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаПорядкаОплат Из СтрокаСФ.Строки Цикл
		
			СтрокиКУдалению = Новый Массив();
			Для каждого СтрокаРасшифровки Из СтрокаПорядкаОплат.Строки Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРасшифровки);
				СтрокиПоОтбору = СтрокаСФ_НДСПРедъявленный.строки.НайтиСтроки(СтруктураОтбора);
				Если СтрокиПоОтбору.Количество() = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				//может быть выбрана только одна строка
				СтрокаПоОтбору = СтрокиПоОтбору[0];
				Если СтрокаПоОтбору.СуммаСНДС = 0 тогда 
					СтрокиКУдалению.Добавить(СтрокаРасшифровки);
					Продолжить;
				КонецЕсли;
				
				Если СтрокаПоОтбору.СуммаСНДС >= СтрокаРасшифровки.КВычету_СНДС тогда
					СтрокаПоОтбору.СуммаСНДС = СтрокаПоОтбору.СуммаСНДС - СтрокаРасшифровки.КВычету_СНДС;
				Иначе
					СтрокаРасшифровки.КВычету_НДС = (СтрокаРасшифровки.КВычету_НДС*СтрокаПоОтбору.СуммаСНДС/СтрокаРасшифровки.КВычету_СНДС);
					СтрокаРасшифровки.КВычету_СНДС = СтрокаПоОтбору.СуммаСНДС;
					СтрокаРасшифровки.КВычету_БезНДС = СтрокаРасшифровки.КВычету_СНДС - СтрокаРасшифровки.КВычету_НДС;
					СтрокаПоОтбору.СуммаСНДС = 0;
				КонецЕсли;
			КонецЦикла; 
			Для каждого СтрокаКУдалению	из СтрокиКУдалению Цикл
			    СтрокаСФ.Строки.Удалить(СтрокаКУдалению);
			КонецЦикла; 
			
			СтрокаПорядкаОплат.КВычету_НДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_НДС");
			СтрокаПорядкаОплат.КВычету_СНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_СНДС");
			СтрокаПорядкаОплат.КВычету_БезНДС = СтрокаПорядкаОплат.Строки.Итог("КВычету_БезНДС");
		
		КонецЦикла; 
		СтрокаСФ.КВычету_НДС = СтрокаСФ.Строки.Итог("КВычету_НДС");
		СтрокаСФ.КВычету_СНДС = СтрокаСФ.Строки.Итог("КВычету_СНДС");
		СтрокаСФ.КВычету_БезНДС = СтрокаСФ.Строки.Итог("КВычету_БезНДС");
		
		Если СтрокаСФ.КВычету_СНДС = 0 Тогда
			СтрокиСФкУдалению.Добавить(СтрокаСФ);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению	из СтрокиСФкУдалению Цикл
		РезультатЗапроса.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат РезультатЗапроса;

КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленныйРеализация0()

// Вызывается из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Получает информацию о НДС включенном в стоимость и прочим блокирующим событиям 
// для блокировки распределенных оплат
Функция ПолучитьСведенияПоЗаблокированномуНДС(СписокСчетовФактур)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСВключенныйВСтоимостьОбороты.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК КВычету_СНДС,
	|	ЕСТЬNULL(НДСВключенныйВСтоимостьОбороты.НДСОборот, 0) КАК КВычету_НДС,
	|	НДСВключенныйВСтоимостьОбороты.СчетФактура.Дата КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|			ТОГДА 1
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_БезОплаты)
	|			ТОГДА 2
	|		КОГДА НДСВключенныйВСтоимостьОбороты.ВидЦенности В (&ВидыЦенностей_Возврат)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокОплаты
	|ИЗ
	|	РегистрНакопления.НДСВключенныйВСтоимость.Обороты(
	|		,
	|		&ДатаГраница,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура В (&СписокСчетовФактур)
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСВключенныйВСтоимостьОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ
	|	СУММА(КВычету_СНДС),
	|	СУММА(КВычету_НДС)
	|ПО
	|	СчетФактура,
	|	ПорядокОплаты";
	
	Если не ПредъявленНДСКВычету0 Тогда
		ДополнениеПоРеализации0 = "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0),
		|	ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0),
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата,
		|	ВЫБОР
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
		|			ТОГДА 1
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_БезОплаты)
		|			ТОГДА 2
		|		КОГДА НДСПредъявленныйРеализация0Остатки.ВидЦенности В (&ВидыЦенностей_Возврат)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|		&ДатаГраница,
		|		Организация = &Организация
		|		    И СчетФактура В (&СписокСчетовФактур)
		|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйРеализация0Остатки
		| УПОРЯДОЧИТЬ ПО
		| ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО",ДополнениеПоРеализации0);
	КонецЕсли; 

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));

	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);

	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_ОплатаПоНДС.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_Возврат = Новый СписокЗначений;
	ВидыЦенностей_Возврат.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	Запрос.УстановитьПараметр("ВидыЦенностей_Возврат", ВидыЦенностей_Возврат);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПолучитьСведенияПоЗаблокированномуНДС()

// Процедура вызывается из ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.Организация,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.СчетФактура,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток КАК РаспределеннаяОплата,
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РасчетыСБюджетом,
	|	ЕСТЬNULL(НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты.ДатаОплаты, НДСУчетРаспределенныхОплатПоставщикамОстатки.ДокументОплаты.Дата) КАК ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСУчетРаспределенныхОплатПоставщикам.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|			И СчетФактура В (&СписокСчетовФактур)) КАК НДСУчетРаспределенныхОплатПоставщикамОстатки
	|ГДЕ
	|	НДСУчетРаспределенныхОплатПоставщикамОстатки.РаспределеннаяСуммаОстаток > 0";
	
	Запрос.УстановитьПараметр("Дата", 		КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	РаспределенныеОплаты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	//РаспределенныеОплаты.Колонки.Добавить("ИспользованнаяОплата", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	РаспределенныеОплаты.Колонки.Добавить("QuieryId", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(6));

	Если РаспределенныеОплаты.Количество()>0 Тогда
		QuieryId = Новый Массив(РаспределенныеОплаты.Количество());
		Для Счетчик=0 По РаспределенныеОплаты.Количество()-1 Цикл
			QuieryId[Счетчик] = Счетчик;
		КонецЦикла; 
		РаспределенныеОплаты.ЗагрузитьКолонку(QuieryId,"QuieryId");
	КонецЕсли; 
	
	Возврат РаспределенныеОплаты;	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()
 
// Процедура вызывается из ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// По списку счетов-фактур распределяет по видам ценностей суммы не использованных ранее распределенных оплат.
Процедура РаспределитьОплатыПоДеревуСФ(Дерево_НДСкВычету, ТаблицаРезультатов, СписокСчетовФактур, РаспределенныеОплаты, ОтражатьВРеестре = Истина,КонтролироватьОплатуДляСФсДатойМенее01012006 = Истина)

	НДСНалоговыйПериод = Неопределено;
	
	ОтфактурованныеПоступления = Новый СписокЗначений();
	ОтфактурованныеПоступления.ЗагрузитьЗначения(СписокСчетовФактур);
	
	Построитель_РаспределенныеОплаты = Новый построительЗапроса();
	Построитель_РаспределенныеОплаты.ИсточникДанных = Новый ОписаниеИсточникаДанных(РаспределенныеОплаты);
	
	// Подготовка структуры отбора
	Отбор = Построитель_РаспределенныеОплаты.Отбор;
	Отбор.Добавить("СчетФактура");
	Отбор.СчетФактура.Использование = Истина;
	Отбор.Добавить("РасчетыСБюджетом");
	Отбор.РасчетыСБюджетом.Использование = Истина;
	Отбор.Добавить("РаспределеннаяОплата");
	Отбор.РаспределеннаяОплата.ВидСравнения = ВидСравнения.Больше;
	Отбор.РаспределеннаяОплата.Значение = 0;
	Отбор.РаспределеннаяОплата.Использование = Истина;
	
	Построитель_РаспределенныеОплаты.Порядок.Добавить("ДатаОплаты");
	
	
	ТаблицаОплат = Новый ТаблицаЗначений();
	ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
	ТаблицаОплат.Колонки.Добавить("ДатаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаОплат.Колонки.Добавить("СуммаОплаты",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаИсточникаПостроителя = Построитель_РаспределенныеОплаты.ИсточникДанных.ИсточникДанных;
	Для каждого СтрокаСФ Из Дерево_НДСкВычету.Строки Цикл
		Для каждого СтрокаПорядокОплаты  Из СтрокаСФ.Строки Цикл
			Если СтрокаСФ.КВычету_СНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ТаблицаОплат.Очистить();
			Если СтрокаПорядокОплаты.ПорядокОплаты = 2 Тогда
				// Наличие оплаты не определяется
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.ДокументОплаты = СтрокаСФ.СчетФактура;
				СтрокаОплаты.ДатаОплаты = СтрокаСФ.СчетФактураДата;
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.КВычету_СНДС;
			ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 4 
				И Не ОтфактурованныеПоступления.НайтиПоЗначению(СтрокаСФ.СчетФактура) = Неопределено Тогда
				// Наличие оплаты не определяется
				СтрокаОплаты = ТаблицаОплат.Добавить();
				СтрокаОплаты.ДокументОплаты = Неопределено;
				СтрокаОплаты.ДатаОплаты = Неопределено;
				СтрокаОплаты.СуммаОплаты = СтрокаСФ.КВычету_СНДС;
			Иначе
				Отбор = Построитель_РаспределенныеОплаты.Отбор;
				Отбор.СчетФактура.Значение = СтрокаПорядокОплаты.СчетФактура;
				Отбор.РасчетыСБюджетом.Значение = (СтрокаПорядокОплаты.ПорядокОплаты = 1);
				Построитель_РаспределенныеОплаты.Выполнить();
				Если Построитель_РаспределенныеОплаты.Результат.Пустой() Тогда
					// Оплата не обнаружена
					Если СтрокаПорядокОплаты.ПорядокОплаты = 3 
						и не ОтфактурованныеПоступления.НайтиПоЗначению(СтрокаСФ.СчетФактура) = неопределено 
						Тогда
						Если СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
						    СуммаОплаты = Мин(СтрокаПорядокОплаты.КВычету_СНДС_Часть,СтрокаПорядокОплаты.КВычету_СНДС);
						Иначе
							СуммаОплаты = СтрокаПорядокОплаты.КВычету_СНДС;
						КонецЕсли; 
						
						Если СуммаОплаты = 0 тогда
							Продолжить;
						КонецЕсли;
						
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = Неопределено;
						СтрокаОплаты.ДатаОплаты = Неопределено;
						СтрокаОплаты.СуммаОплаты = СуммаОплаты;
					Иначе	
						Продолжить;
					КонецЕсли;
				Иначе
					ВыборкаОплат = Построитель_РаспределенныеОплаты.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
					
					Если СтрокаПорядокОплаты.ПорядокОплаты = 1 Тогда
						// Оплата определяется по сумме НДС
						СуммаКПогашению = СтрокаПорядокОплаты.КВычету_НДС;
					Иначе
						// Оплата определяется в общем порядке (по сумме с НДС)
						СуммаКПогашению = СтрокаПорядокОплаты.КВычету_СНДС;
					КонецЕсли; 
					
					Для каждого СтрокаРаспределеннойОплаты Из ВыборкаОплат Цикл
						СтрокаОплаты = ТаблицаОплат.Добавить();
						СтрокаОплаты.ДокументОплаты = СтрокаРаспределеннойОплаты.ДокументОплаты;
						СтрокаОплаты.ДатаОплаты = СтрокаРаспределеннойОплаты.ДатаОплаты;
						СтрокаОплаты.СуммаОплаты = Мин(СуммаКПогашению,СтрокаРаспределеннойОплаты.РаспределеннаяОплата);
						
						СуммаКПогашению = СуммаКПогашению - СтрокаОплаты.СуммаОплаты;
						ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата = ТаблицаИсточникаПостроителя[СтрокаРаспределеннойОплаты.QuieryId].РаспределеннаяОплата - СтрокаОплаты.СуммаОплаты;
						
						Если СуммаКПогашению = 0 Тогда
						    Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СуммаКПогашению>0 и СтрокаПорядокОплаты.ПорядокОплаты = 3 Тогда
						// Наличие оплаты желательно, но не обязательно для принятия к вычету
						Если СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
							ПредложеноКВычетуПоОплатам = СтрокаПорядокОплаты.КВычету_СНДС - СуммаКПогашению;
							СуммаКПогашению = Макс(0, СтрокаПорядокОплаты.КВычету_СНДС_Часть - ПредложеноКВычетуПоОплатам);
						КонецЕсли;
						
						Если не СуммаКПогашению = 0 Тогда
							СтрокаОплаты = ТаблицаОплат.Добавить();
							СтрокаОплаты.ДокументОплаты = Неопределено;
							СтрокаОплаты.ДатаОплаты = Неопределено;
							СтрокаОплаты.СуммаОплаты = СуммаКПогашению;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
			Если ТаблицаОплат.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если не ОтражатьВРеестре тогда
				// Оплаты заблокированы, дальнейшая обработка не требуется
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаОплаты Из ТаблицаОплат Цикл
				Если СтрокаПорядокОплаты.ПорядокОплаты = 1 Тогда
					МассивБазиса = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
					КРаспределениюНДС = СтрокаОплаты.СуммаОплаты;
					Массив_НДС = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
					КРаспределениюСНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС")/СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС"),2);
					Если КРаспределениюСНДС > 0 Тогда
						МассивРезультата_СНДС = ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюСНДС ,СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС"));
					КонецЕсли;
				ИначеЕсли СтрокаПорядокОплаты.ПорядокОплаты = 3 и СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 и НЕ ЗначениеЗаполнено(СтрокаОплаты.ДокументОплаты)Тогда
					МассивБазиса =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС_Часть");
					КРаспределениюНДС = 0;
					Массив_НДС =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС_Часть");
					Для НомерЭлемента = 0 по Массив_НДС.Количество()-1 Цикл
//						Массив_НДС[НомерЭлемента] = МассивБазиса[НомерЭлемента] - Массив_НДС[НомерЭлемента];
						КРаспределениюНДС = КРаспределениюНДС + Массив_НДС[НомерЭлемента];
					КонецЦикла; 
					Если СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть") = 0 Тогда
						КРаспределениюНДС = 0;
						Продолжить;
					иначе
						КРаспределениюНДС = Окр(КРаспределениюНДС * СтрокаОплаты.СуммаОплаты /СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть"),2);
					КонецЕсли; 
					
					
				Иначе	
					МассивБазиса =  СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_СНДС");
					КРаспределениюНДС = Окр(СтрокаОплаты.СуммаОплаты * СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС")/СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС"),2);
					Массив_НДС = СтрокаПорядокОплаты.Строки.ВыгрузитьКолонку("КВычету_НДС");
				КонецЕсли; 
				
				МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(СтрокаОплаты.СуммаОплаты,МассивБазиса);
				
				Если СтрокаПорядокОплаты.ПорядокОплаты = 1  и КРаспределениюСНДС <> 0 Тогда
					МассивРезультата = МассивРезультата_СНДС;
				КонецЕсли; 
				
				Если КРаспределениюНДС<>0 Тогда
					МассивРезультата_НДС = ОбщегоНазначения.РаспределитьПропорционально(КРаспределениюНДС,Массив_НДС);
				КонецЕсли; 
				
				НомерСтроки = 0;
				Для каждого СтрокаЗадолжености Из СтрокаПорядокОплаты.Строки Цикл
					Если МассивРезультата[НомерСтроки] = 0 и ?(КРаспределениюНДС=0,Истина, МассивРезультата_НДС[НомерСтроки] =0) Тогда
						НомерСтроки = НомерСтроки+1;
						Продолжить;
					КонецЕсли; 
					СтрокаРезультата = ТаблицаРезультатов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаЗадолжености);

					СтрокаРезультата.ДокументОплаты	= СтрокаОплаты.ДокументОплаты;
					Если ПредъявленНДСКВычету0 Тогда
						СтрокаРезультата.ДокументОтгрузки	= СтрокаЗадолжености.ДокументОтгрузки;
						СтрокаРезультата.Состояние	= СтрокаЗадолжености.Состояние;
					КонецЕсли; 
					
					СтрокаРезультата.ДатаОплаты		= СтрокаОплаты.ДатаОплаты;
					
					СтрокаРезультата.СуммаБезНДС	= МассивРезультата[НомерСтроки]- ?(КРаспределениюНДС=0,0,МассивРезультата_НДС[НомерСтроки]);
					СтрокаРезультата.НДС			= ?(СтрокаПорядокОплаты.ПорядокОплаты = 1,МассивРезультата_НДС[НомерСтроки], МассивРезультата[НомерСтроки]- СтрокаРезультата.СуммаБезНДС);
					
					Если (ПредъявленНДСКВычету0 И СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0) 
						Или ((СтрокаРезультата.СуммаБезНДС < 0 Или СтрокаРезультата.НДС < 0) И СтрокаЗадолжености.СчетФактураДата >= '20060101') Тогда
						Если Дата >= '20060530' Тогда
							Если НДСНалоговыйПериод = Неопределено Тогда
								УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Неопределено, Организация, "Нал");
								Если УчетнаяПолитикаНУ.Свойство("НДСНалоговыйПериод") <> Неопределено Тогда
									Если УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
										НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
									Иначе
										НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
									КонецЕсли;
								Иначе
									НДСНалоговыйПериод = ?(Дата >= '20080101', Перечисления.Периодичность.Квартал, Перечисления.Периодичность.Месяц);
								КонецЕсли;
							КонецЕсли;
							СтрокаРезультата.ЗаписьДополнительногоЛиста = Истина;
							Если ПредъявленНДСКВычету0 Тогда
								СтрокаРезультата.КорректируемыйПериод = Макс(СтрокаРезультата.ДатаОплаты, СтрокаЗадолжености.ДокументОтгрузки.Дата);
							Иначе 
								СтрокаРезультата.КорректируемыйПериод = СтрокаЗадолжености.СчетФактураДата;
							КонецЕсли;
							Если ?(НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, 
									КонецМесяца(СтрокаРезультата.КорректируемыйПериод) = КонецМесяца(Дата),
									КонецКвартала(СтрокаРезультата.КорректируемыйПериод) = КонецКвартала(Дата)) Тогда
								СтрокаРезультата.ЗаписьДополнительногоЛиста = Ложь;
								СтрокаРезультата.КорректируемыйПериод = '00010101';
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
					СтрокаЗадолжености.КВычету_БезНДС = СтрокаЗадолжености.КВычету_БезНДС - СтрокаРезультата.СуммаБезНДС;
					СтрокаЗадолжености.КВычету_НДС = СтрокаЗадолжености.КВычету_НДС - СтрокаРезультата.НДС;
					СтрокаЗадолжености.КВычету_СНДС = СтрокаЗадолжености.КВычету_СНДС - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
					Если СтрокаПорядокОплаты.ПорядокОплаты = 3 и СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 Тогда
						СтрокаЗадолжености.КВычету_НДС_Часть = СтрокаЗадолжености.КВычету_НДС_Часть - СтрокаРезультата.НДС;
						СтрокаЗадолжености.КВычету_СНДС_Часть = СтрокаЗадолжености.КВычету_СНДС_Часть - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
					КонецЕсли; 
					
					НомерСтроки = НомерСтроки+1;
				КонецЦикла; 
				
			КонецЦикла; 
			
			
			
		КонецЦикла; 
		
	
	КонецЦикла; 
	
	РаспределенныеОплаты = ТаблицаИсточникаПостроителя.Скопировать();

КонецПроцедуры // РаспределитьОплатыПоДеревуСФ()

// Процедура из процедуры ЗаполнитьСтроки_ВычетПоПриобретеннымЦенностям.
// Корректирует сумму, доступную к вычету исходя из положений преходного периода,
// установленных в п.10 статьи 2 федерального закона №119-ФЗ
Процедура ОтработкаПоложенииПереходногоПериода2006_ОткорректироватьСуммуДоступнуюКВычету(Дерево_НДСкВычету)
	
	Если Месяц(дата) > 6 Тогда
		Возврат;
	КонецЕсли;
	
	// Определение списка СФ (с аналитикой) с датой ранее 2006 года, по которым НДС был предъявлен к вычету в текущем месяце
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНаНачалоГода.СчетФактура КАК СчетФактура,
	|	ОстаткиНаНачалоГода.ВидЦенности,
	|	ОстаткиНаНачалоГода.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДСЗаписиКнигиПокупокОбороты.НДСОборот, 0) > 0
	|			ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДС_ПринятоКВычетуВТекущемМесяце,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ТОГДА ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСПредъявленныйОстатки.Организация КАК Организация,
	|		НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|		НДСПредъявленныйОстатки.ВидЦенности КАК ВидЦенности,
	|		НДСПредъявленныйОстатки.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленныйОстатки.Поставщик КАК Поставщик,
	|		НДСПредъявленныйОстатки.СуммаБезНДСОстаток / 6 КАК СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля,
	|		НДСПредъявленныйОстатки.НДСОстаток / 6 КАК НДСНаНачалоГода_ЕжемесячнаяДоля
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Остатки(
	|			&НачалоГода2006,
	|			Организация = &Организация
	|			    И СчетФактура.Дата < &НачалоГода2006
	|			    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))) КАК НДСПредъявленныйОстатки) КАК ОстаткиНаНачалоГода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|		&НачалоМесяца,
	|		&КонецМесяца,
	|		Период,
	|		Организация = &Организация
	|		    И СчетФактура.Дата < &НачалоГода2006
	|		    И (НЕ ВидЦенности В (&ИсключаемыеВидыЦенностей))
	|		    И Событие = &ОтбираемоеСобытие) КАК НДСЗаписиКнигиПокупокОбороты
	|		ПО НДСЗаписиКнигиПокупокОбороты.Организация = ОстаткиНаНачалоГода.Организация
	|			И НДСЗаписиКнигиПокупокОбороты.Поставщик = ОстаткиНаНачалоГода.Поставщик
	|			И НДСЗаписиКнигиПокупокОбороты.СчетФактура = ОстаткиНаНачалоГода.СчетФактура
	|			И НДСЗаписиКнигиПокупокОбороты.ВидЦенности = ОстаткиНаНачалоГода.ВидЦенности
	|			И НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = ОстаткиНаНачалоГода.СтавкаНДС
	|ГДЕ
	|	(ОстаткиНаНачалоГода.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля > 0
	|			ИЛИ ОстаткиНаНачалоГода.НДСНаНачалоГода_ЕжемесячнаяДоля > 0)
	|ИТОГИ
	|	СУММА(СуммаБезНДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(НДС_ПринятоКВычетуВТекущемМесяце),
	|	СУММА(СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля),
	|	СУММА(НДСНаНачалоГода_ЕжемесячнаяДоля)
	|ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Дата));
	Запрос.УстановитьПараметр("НачалоГода2006", '20060101');
	Запрос.УстановитьПараметр("ОтбираемоеСобытие", Перечисления.СобытияПоНДСПокупки[?(ПредъявленНДСКВычету0,"ПредъявленНДСКВычету0","ПредъявленНДСКВычету")]);
	
	// Исключаемые из анализа виды ценностей
	ИсключаемыеВидыЦенностей = Новый СписокЗначений;
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ИсключаемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.Возврат);
	
	Запрос.УстановитьПараметр("ИсключаемыеВидыЦенностей", ИсключаемыеВидыЦенностей);
	
	НаличиеОстатковНаНачалоГода = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаСФ Из Дерево_НДСкВычету.Строки Цикл
		Если СтрокаСФ.СчетФактураДата<'20060101' тогда
			СтрокаОстатковНаНачалоГода_СчетФактура = НаличиеОстатковНаНачалоГода.Строки.НайтиСтроки(Новый Структура("СчетФактура",СтрокаСФ.СчетФактура));
			Если СтрокаОстатковНаНачалоГода_СчетФактура.Количество() = 0 Тогда
				// Остатки по указанному счету-фактуре на начло года не обнаружены.
				// Расчет доли к вычету (ограничение) не производится.
				Продолжить;
			КонецЕсли; 
			СтрокаОстатковНаНачалоГода_СчетФактура = СтрокаОстатковНаНачалоГода_СчетФактура[0];
			
			
			КВычетуПоСФ_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_СчетФактура.НДСНаНачалоГода_ЕжемесячнаяДоля);
			Если (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
				КВычетуПоСФ_СНДС = макс(0,КВычетуПоСФ_СНДС - (СтрокаОстатковНаНачалоГода_СчетФактура.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_СчетФактура.НДС_ПринятоКВычетуВТекущемМесяце));
			КонецЕсли; 
			
			Если КВычетуПоСФ_СНДС = 0 Тогда
				// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
				Продолжить;
			КонецЕсли; 
			
			Для каждого СтрокаПорядокОплаты  Из СтрокаСФ.Строки Цикл
				Если СтрокаПорядокОплаты.ПорядокОплаты = 3 Тогда
					СтрокаПорядокОплаты.ОпределенаДоля_119ФЗ_2_10 = истина;
					Для каждого СтрокаТаблицы из СтрокаПорядокОплаты.Строки Цикл
						СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_СчетФактура.Строки.НайтиСтроки(Новый структура("ВидЦенности, СтавкаНДС",СтрокаТаблицы.ВидЦенности,СтрокаТаблицы.СтавкаНДС));
					
						Если СтрокаОстатковНаНачалоГода_Расшифровка.Количество() =0 Тогда
							// Остатки в указанном разрезе аналитики не обнаружены.
							// Расчет доли к вычету (ограничение) не производится.
							СтрокаТаблицы.КВычету_СНДС_Часть = СтрокаТаблицы.КВычету_СНДС;
							СтрокаТаблицы.КВычету_НДС_Часть = СтрокаТаблицы.КВычету_НДС;
							Продолжить;
						Иначе
							СтрокаОстатковНаНачалоГода_Расшифровка = СтрокаОстатковНаНачалоГода_Расшифровка[0];
						КонецЕсли;
						
						СтрокаТаблицы.ОпределенаДоля_119ФЗ_2_10 = истина;
						
						КВычету_СНДС = Макс(0,СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДСНаНачалоГода_ЕжемесячнаяДоля + СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля);
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_СНДС = макс(0,КВычету_СНДС - (СтрокаОстатковНаНачалоГода_Расшифровка.СуммаБезНДС_ПринятоКВычетуВТекущемМесяце+ СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						Если КВычету_СНДС = 0 Тогда
							// Доля определялась, но вся сумма, доступная к вычету в текущем месяце, уже принята.
							Продолжить;
						КонецЕсли; 
						
						КВычету_НДС = СтрокаОстатковНаНачалоГода_Расшифровка.НДСНаНачалоГода_ЕжемесячнаяДоля;
						Если (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце) > 0 Тогда
							КВычету_НДС = макс(0,КВычету_НДС - (СтрокаОстатковНаНачалоГода_Расшифровка.НДС_ПринятоКВычетуВТекущемМесяце));
						КонецЕсли; 
						
						//Расчет суммы без НДС
						СтрокаТаблицы.КВычету_СНДС_Часть = Макс(Мин(КВычету_СНДС,СтрокаТаблицы.КВычету_СНДС),0);
						СтрокаТаблицы.КВычету_НДС_Часть = Макс(Мин(КВычету_НДС,СтрокаТаблицы.КВычету_НДС),0);
						
		
					КонецЦикла;
				
					СтрокаПорядокОплаты.КВычету_НДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_НДС_Часть");
					СтрокаПорядокОплаты.КВычету_СНДС_Часть		= СтрокаПорядокОплаты.Строки.Итог("КВычету_СНДС_Часть");
					
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьДатуПоискаСчетовФактурПоПриобретеннымЦенностям(ДатаДокумента)
	
	Если ДатаДокумента < '20150101'
		ИЛИ КонецДня(ДатаДокумента) <> КонецКвартала(ДатаДокумента) Тогда 
		Возврат КонецДня(ДатаДокумента);
	Иначе
		
		День = 24 * 60 * 60;
		ДатаПодачиДекларации = ДатаДокумента + 25 * День;
		
		// Перенесем на рабочие дни
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаКалендаря", ДатаПодачиДекларации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
		|ПОМЕСТИТЬ РабочиеДни
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаКалендаря
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|	И РегламентированныйПроизводственныйКалендарь.ДатаКалендаря >= &ДатаКалендаря
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(РабочиеДни.ДатаКалендаря) КАК ДатаКалендаря
		|ИЗ
		|	РабочиеДни КАК РабочиеДни
		|
		|ИМЕЮЩИЕ
		|	НЕ МИНИМУМ(РабочиеДни.ДатаКалендаря) ЕСТЬ NULL ";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				ДатаПодачиДекларации = Выборка.ДатаКалендаря;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат КонецДня(ДатаПодачиДекларации);
		
	КонецЕсли;
	
КонецФункции

// Заполнение табличной части "Вычет НДС по приобретенным ценностям"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение таблиячной части "Вычет НДС с полученных авансов"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельНДСсАвансовЗаполнить
//
Процедура ЗаполнитьСтроки_НДСсАвансов() Экспорт
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойполитики, Организация, "Нал");
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРезультатов = НДСсАвансов.ВыгрузитьКолонки();
	
	Если ПредъявленНДСКВычету0 Тогда
		ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов);
        НДСсАвансов.Загрузить(ТаблицаРезультатов);
	Иначе	
		Дерево_НДСсАвансов = ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов();
		Если Дерево_НДСсАвансов.Строки.Количество()=0 Тогда
			// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
			НДСсАвансов.Очистить();
			ЗаполнитьЗачетАвансовПокупателейПоКомиссии();
			Возврат;
		КонецЕсли;
		
		СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
		
		ТаблицаЗачетовАвансов = ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур);
		
		РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов);
		
		НДСсАвансов.Загрузить(ТаблицаРезультатов);
		
		ЗаполнитьЗачетАвансовПокупателейПоКомиссии();
		
	КонецЕсли; 
	    	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

Процедура ЗаполнитьЗачетАвансовПокупателейПоКомиссии()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты КАК ДокументОплаты,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродажОбороты.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот
	|ПОМЕСТИТЬ ВТКнигаПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&Дата,
	|			,
	|			ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|				И Организация = &Организация
	|				И СчетФактура ССЫЛКА Документ.СчетФактураВыданный) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|ПОМЕСТИТЬ ВТКнигаПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&Дата,
	|			,
	|			ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|				И Организация = &Организация
	|				И СчетФактура ССЫЛКА Документ.СчетФактураВыданный) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.ИсправленныйСчетФактура,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КнигаПродаж.Покупатель КАК Покупатель,
	|	КнигаПродаж.СчетФактура,
	|	КнигаПродаж.ДокументОплаты,
	|	КнигаПродаж.СтавкаНДС КАК СтавкаНДС,
	|	КнигаПродаж.ДатаСобытия КАК ДатаСобытия,
	|	КнигаПродаж.ИсправленныйСчетФактура,
	|	СУММА(ЕСТЬNULL(КнигаПродаж.СуммаБезНДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.СуммаБезНДСОборот, 0)) КАК СуммаБезНДСОборот,
	|	СУММА(ЕСТЬNULL(КнигаПродаж.НДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.НДСОборот, 0)) КАК НДСОборот
	|ПОМЕСТИТЬ ВТНДСКВычету
	|ИЗ
	|	ВТКнигаПродаж КАК КнигаПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКнигаПокупок КАК КнигаПокупок
	|		ПО КнигаПродаж.СтавкаНДС = КнигаПокупок.СтавкаНДС
	|			И КнигаПродаж.СчетФактура = КнигаПокупок.СчетФактура
	|			И КнигаПродаж.ИсправленныйСчетФактура = КнигаПокупок.ИсправленныйСчетФактура
	|ГДЕ
	|	ЕСТЬNULL(КнигаПродаж.СуммаБезНДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.СуммаБезНДСОборот, 0) > 0
	|	И ЕСТЬNULL(КнигаПродаж.НДСОборот, 0) - ЕСТЬNULL(КнигаПокупок.НДСОборот, 0) > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КнигаПродаж.Покупатель,
	|	КнигаПродаж.СчетФактура,
	|	КнигаПродаж.ДокументОплаты,
	|	КнигаПродаж.СтавкаНДС,
	|	КнигаПродаж.ДатаСобытия,
	|	КнигаПродаж.ИсправленныйСчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель,
	|	СтавкаНДС,
	|	КнигаПродаж.ДокументОплаты,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСАвансыПоДоговорамКомиссииОстатки.СчетФактура КАК СчетФактура,
	|	НДСАвансыПоДоговорамКомиссииОстатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСАвансыПоДоговорамКомиссииОстатки.Покупатель КАК Покупатель,
	|	НДСАвансыПоДоговорамКомиссииОстатки.ДатаСобытия КАК ДатаСобытия,
	|	НДСАвансыПоДоговорамКомиссииОстатки.СуммаБезНДСОстаток,
	|	НДСАвансыПоДоговорамКомиссииОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТАвансыПоДоговорамКомиссии
	|ИЗ
	|	РегистрНакопления.НДСАвансыПоДоговорамКомиссии.Остатки(&Дата, Организация = &Организация) КАК НДСАвансыПоДоговорамКомиссииОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель,
	|	ДатаСобытия,
	|	СтавкаНДС,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНДСКВычету.СчетФактура,
	|	ВТНДСКВычету.СтавкаНДС,
	|	ВТНДСКВычету.Покупатель,
	|	ВТНДСКВычету.ДатаСобытия,
	|	ВТНДСКВычету.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЕСТЬNULL(ВТНДСКВычету.СуммаБезНДСОборот, 0) - ЕСТЬNULL(ВТАвансыПоДоговорамКомиссии.СуммаБезНДСОстаток, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(ВТНДСКВычету.НДСОборот, 0) - ЕСТЬNULL(ВТАвансыПоДоговорамКомиссии.НДСОстаток, 0) КАК НДС,
	|	ВТНДСКВычету.ДокументОплаты
	|ИЗ
	|	ВТНДСКВычету КАК ВТНДСКВычету
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАвансыПоДоговорамКомиссии КАК ВТАвансыПоДоговорамКомиссии
	|		ПО (ВТАвансыПоДоговорамКомиссии.СчетФактура = ВТНДСКВычету.ДокументОплаты)
	|			И (ВТАвансыПоДоговорамКомиссии.СтавкаНДС = ВТНДСКВычету.СтавкаНДС)
	|			И (ВТАвансыПоДоговорамКомиссии.Покупатель = ВТНДСКВычету.Покупатель)
	|			И (ВТАвансыПоДоговорамКомиссии.ДатаСобытия = ВТНДСКВычету.ДатаСобытия)
	|ГДЕ
	|	ЕСТЬNULL(ВТНДСКВычету.СуммаБезНДСОборот, 0) - ЕСТЬNULL(ВТАвансыПоДоговорамКомиссии.СуммаБезНДСОстаток, 0) > 0
	|	И ЕСТЬNULL(ВТНДСКВычету.НДСОборот, 0) - ЕСТЬNULL(ВТАвансыПоДоговорамКомиссии.НДСОстаток, 0) > 0";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	// Зачет аванса
	Для Каждого СтрокаОстатка Из ТаблицаОстатков Цикл
		
		Если СтрокаОстатка.СуммаБезНДС > 0 ИЛИ СтрокаОстатка.НДС > 0 Тогда
			
			СтрокаДокумента = НДСсАвансов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаОстатка);
			СтрокаДокумента.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			СтрокаДокумента.ВалютнаяСумма = СтрокаОстатка.СуммаБезНДС + СтрокаОстатка.НДС;
			
		КонецЕсли;	
		
	КонецЦикла;	
	      	
КонецПроцедуры	

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата КАК СчетФактураДата,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|				ТОГДА 0
	|			ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|		КОНЕЦ) КАК НДС,
	|	СУММА(ВЫРАЗИТЬ((ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0) > НДСсАвансовОстатки.СуммаБезНДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.СуммаБезНДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.СуммаБезНДСОстаток, 0)
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0) > НДСсАвансовОстатки.НДСОстаток
	|					ТОГДА 0
	|				ИНАЧЕ НДСсАвансовОстатки.НДСОстаток - ЕСТЬNULL(НДСсАвансовПоРеализации0.НДСОстаток, 0)
	|			КОНЕЦ) * НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток / ВЫБОР
	|				КОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток > 0
	|					ТОГДА НДСсАвансовОстатки.СуммаБезНДСОстаток + НДСсАвансовОстатки.НДСОстаток
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|			НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|			НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДСОстаток,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|			НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|					&ДатаГраница,
	|					Организация = &Организация
	|						И ВидЦенности В (&ВидыЦенностейАванс)) КАК НДСПредъявленныйРеализация0Остатки) КАК НДСсАвансовПоРеализации0
	|		ПО НДСсАвансовОстатки.СчетФактура = НДСсАвансовПоРеализации0.СчетФактура
	|			И НДСсАвансовОстатки.СтавкаНДС = НДСсАвансовПоРеализации0.СтавкаНДС
	|			И НДСсАвансовОстатки.Покупатель = НДСсАвансовПоРеализации0.Покупатель
	|			И НДСсАвансовОстатки.ДоговорКонтрагента = НДСсАвансовПоРеализации0.ДоговорКонтрагента
	|ГДЕ
	|	(НДСсАвансовОстатки.СуммаБезНДСОстаток > 0
	|			ИЛИ НДСсАвансовОстатки.НДСОстаток > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.СчетФактура.Дата,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовПоРеализации0.СуммаБезНДСОстаток,
	|	НДСсАвансовПоРеализации0.НДСОстаток,
	|	НДСсАвансовОстатки.ИсправленныйСчетФактура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураДата
	|ИТОГИ ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);

	Дерево_НДСсАвансов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Дерево_НДСсАвансов.Строки.Количество() = 0 тогда 
		Возврат Дерево_НДСсАвансов;
	КонецЕсли;
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Дерево_НДСсАвансов.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);

	// Получим остатки по авансам для определения суммы незачтенного аванса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРасчетыСПокупателямиОстатки.Документ КАК ДокументОплаты,
	|	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	СУММА(-1 * НДСРасчетыСПокупателямиОстатки.СуммаОстаток) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				ТОГДА -1 * НДСРасчетыСПокупателямиОстатки.СуммаОстаток
	|			ИНАЧЕ -1 * НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	ЕСТЬNULL(НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	НДСРасчетыСПокупателямиОстатки.Покупатель,
	|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|			И Документ В (&СписокСчетовФактур)) КАК НДСРасчетыСПокупателямиОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	|				ТОГДА -1 * НДСРасчетыСПокупателямиОстатки.СуммаОстаток
	|			ИНАЧЕ -1 * НДСРасчетыСПокупателямиОстатки.ВалютнаяСуммаОстаток
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРасчетыСПокупателямиОстатки.Документ,
	|	НДСРасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	НДСРасчетыСПокупателямиОстатки.Покупатель,
	|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента,
	|	ЕСТЬNULL(НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)
	|ИТОГИ ПО
	|	ДокументОплаты";
	
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	НепогашенныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого НепогашенныйАвансПоСФ Из НепогашенныеАвансы.Строки Цикл
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(НепогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из НепогашенныйАвансПоСФ.Строки Цикл
			
			ВалютаАванса = ?(СтрокаЗафиксированногоАванса.РасчетыВУсловныхЕдиницах или НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов),мВалютаРегламентированногоУчета,СтрокаЗафиксированногоАванса.ВалютаРасчетов);
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаАванса",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
			Если ВалютнаяСуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаЗафиксированногоАванса.ВалютаРасчетов = мВалютаРегламентированногоУчета или 
				НЕ ЗначениеЗаполнено(СтрокаЗафиксированногоАванса.ВалютаРасчетов) Тогда
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаЗафиксированногоАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаЗафиксированногоАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС >0 Тогда
				МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС>0,МассивВалютнаяСуммаСНДС[Счетчик],0);
				
				
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
 	КУдалениюСФ = новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 и СтрокаАванса.НДС = 0  и СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаАванса);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаКУдалению Из КУдалениюСФ Цикл
		Дерево_НДСсАвансов.Строки.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	Возврат Дерево_НДСсАвансов;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Вызывается из процедуры ЗаполнитьСтроки_НДСсАвансов.
// Заполняет ТЧ ВычетПоПриобретеннымЦенностям по данным регистра НДСПредъявленный
Функция  ЗаполнитьНДСсАвансовПоДаннымРегистраНДСсАвансовИНДСПредъявленныйРеализация0(ТаблицаРезультатов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленныйРеализация0Остатки.НДСОстаток) КАК НДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент КАК Покупатель,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|		&ДатаГраница,
	|		Организация = &Организация
	|		    И ВидЦенности В (&ВидыЦенностейАванс)
	|		    И состояние В (&ОтрабатываемыеСостояния)) КАК НДСПредъявленныйРеализация0Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Контрагент,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.ДоговорКонтрагента,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура";

	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	// Анализируемые виды ценностей
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	Запрос.УстановитьПараметр("ВидыЦенностейАванс", ВидыЦенностейАванс);
	
	// Отрабатываемые состояния (ожидание 0% не отрабатываем)
	ОтрабатываемыеСостояния = Новый СписокЗначений;
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	ОтрабатываемыеСостояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос.УстановитьПараметр("ОтрабатываемыеСостояния", ОтрабатываемыеСостояния);

	АвансыНДСПредъявленныйРеализация0 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Если АвансыНДСПредъявленныйРеализация0.Строки.Количество() = 0 Тогда
	    Возврат ТаблицаРезультатов;
	КонецЕсли; 
	
	СписокСчетовФактур = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива( АвансыНДСПредъявленныйРеализация0.Строки.ВыгрузитьКолонку("СчетФактура"),Истина);
	
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСсАвансовОстатки.СчетФактура КАК СчетФактура,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.ВалютаАванса,
	|	СУММА(НДСсАвансовОстатки.СуммаБезНДСОстаток) КАК СуммаБезНДС,
	|	СУММА(НДСсАвансовОстатки.НДСОстаток) КАК НДС,
	|	СУММА(НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток) КАК ВалютнаяСуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСсАвансов.Остатки(
	|			&ДатаГраница,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура,
	|	НДСсАвансовОстатки.СтавкаНДС,
	|	НДСсАвансовОстатки.Покупатель,
	|	НДСсАвансовОстатки.ДоговорКонтрагента,
	|	НДСсАвансовОстатки.ВалютаАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСсАвансовОстатки.СчетФактура.Дата
	|ИТОГИ ПО
	|	СчетФактура";
	
	ЗафиксированныеАвансы = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ЗафиксированныеАвансы.Строки.Количество() = 0 тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	Для каждого СтрокаСФ Из АвансыНДСПредъявленныйРеализация0.Строки Цикл
		
		ЗафиксированныйАвансПоСФ = ЗафиксированныеАвансы.Строки.Найти(СтрокаСФ.СчетФактура,"СчетФактура");
		
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаЗафиксированногоАванса Из ЗафиксированныйАвансПоСФ.Строки Цикл
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента,СтавкаНДС",СтрокаЗафиксированногоАванса.Покупатель, СтрокаЗафиксированногоАванса.ДоговорКонтрагента, СтрокаЗафиксированногоАванса.СтавкаНДС);
			
			СтрокиАванса0 = СтрокаСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАванса0.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивСуммаСНДС = новый Массив();
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАванса0.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАванса0.НДС);
				МассивСуммаСНДС.Добавить(СтрокаАванса0.СуммаБезНДС+СтрокаАванса0.НДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАванса0.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАванса0.НДС;
			КонецЦикла; 
			
			СуммаБезНДС = Мин(СтрокаЗафиксированногоАванса.СуммаБезНДС, СуммаБезНДС);
			СуммаНДС = Мин(СтрокаЗафиксированногоАванса.НДС, СуммаНДС);
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли; 
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если СуммаБезНДС + СуммаНДС >0 Тогда
				ВалютнаяСуммаСНДС = Окр(СтрокаЗафиксированногоАванса.ВалютнаяСуммаСНДС * (СуммаБезНДС+СуммаНДС)/(СтрокаЗафиксированногоАванса.СуммаБезНДС+СтрокаЗафиксированногоАванса.НДС),2);
			Иначе 
				ВалютнаяСуммаСНДС = 0;
			КонецЕсли; 
			
			
			Если ВалютнаяСуммаСНДС>0 Тогда
				МассивСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивСуммаСНДС);
			КонецЕсли;
			
			Счетчик =0;
			Для каждого СтрокаАванса0 Из СтрокиАванса0 Цикл
			    СтрокаРезультата = ТаблицаРезультатов.Добавить();
				СтрокаРезультата.СчетФактура		= СтрокаАванса0.СчетФактура;
				СтрокаРезультата.Покупатель			= СтрокаАванса0.Покупатель;
				СтрокаРезультата.ДоговорКонтрагента	= СтрокаАванса0.ДоговорКонтрагента;
				СтрокаРезультата.СтавкаНДС			= СтрокаАванса0.СтавкаНДС;
				СтрокаРезультата.ДокументОтгрузки	= СтрокаАванса0.ДокументОтгрузки;
				СтрокаРезультата.Состояние			= СтрокаАванса0.Состояние;
				СтрокаРезультата.ВалютаДокумента	= СтрокаЗафиксированногоАванса.ВалютаАванса;
				
				//Если СтрокаРезультата.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
				СтрокаРезультата.ДатаСобытия	= СтрокаАванса0.ДокументОтгрузкиДата;
				//Иначе
				//	СтрокаРезультата.ДатаСобытия	= СтрокаАванса0.ДокументОтгрузкиДата;
				//КонецЕсли; 
				
				СтрокаРезультата.СуммаБезНДС		= ?(СуммаБезНДС>0,МассивСуммаБезНДС[Счетчик],0);
				СтрокаРезультата.НДС				= ?(СуммаНДС>0,МассивСуммаНДС[Счетчик],0);
				СтрокаРезультата.ВалютнаяСумма		= ?(ВалютнаяСуммаСНДС>0,МассивСуммаСНДС[Счетчик],0);
				
				СтрокаАванса0.СуммаБезНДС = СтрокаАванса0.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
				СтрокаАванса0.НДС = СтрокаАванса0.НДС - СтрокаРезультата.НДС;
				
			    Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ТаблицаРезультатов;
	
КонецФункции // ЗаполнитьНДСКВычетуПоДаннымРегистраНДСПредъявленный()

// Процедура вызывается из ЗаполнитьСтроки_НДСсАвансов.
// По списку счетов-фактур определяет суммы не использованных ранее распределенных оплат.
Функция ПолучитьДанныеОЗачтенныхАвансахПоСпискуСФ(СписокСчетовФактур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСРасчетыСПокупателямиОбороты.Документ КАК ДокументОплаты,
	|	НДСРасчетыСПокупателямиОбороты.ВалютаРасчетов,
	|	НДСРасчетыСПокупателямиОбороты.Покупатель,
	|	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента,
	|	СУММА(НДСРасчетыСПокупателямиОбороты.СуммаПриход) КАК Сумма,
	|	СУММА(НДСРасчетыСПокупателямиОбороты.ВалютнаяСуммаПриход) КАК ВалютнаяСумма,
	|	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	НДСРасчетыСПокупателямиОбороты.Период КАК Дата
	|ИЗ
	|	РегистрНакопления.НДСРасчетыСПокупателями.Обороты(
	|		,
	|		&ДатаГраница,
	|		День,
	|		Организация = &Организация
	|			И Документ В (&СписокСчетовФактур)) КАК НДСРасчетыСПокупателямиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента,
	|	НДСРасчетыСПокупателямиОбороты.Покупатель,
	|	НДСРасчетыСПокупателямиОбороты.ВалютаРасчетов,
	|	НДСРасчетыСПокупателямиОбороты.Документ,
	|	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	НДСРасчетыСПокупателямиОбороты.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	ДокументОплаты";
	 
	Запрос.УстановитьПараметр("Дата", 				КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	 
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	

КонецФункции // ПолучитьДанныеОРаспределенныхОплатахПоСпискуСФ()

// Процедура осуществляет автоматическое распределение фактов зачета авансов
// на документы отгрузки, оформленные в рамках соответствующего договора
//
Процедура РаспределитьЗачетыАвансаПоСФ(Дерево_НДСсАвансов, ТаблицаРезультатов,СписокСчетовФактур,ТаблицаЗачетовАвансов)
	
	Для каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетовАвансов.Строки Цикл
		ЗафиксированныйАвансПоСФ = Дерево_НДСсАвансов.Строки.Найти(ПогашенныйАвансПоСФ.ДокументОплаты,"СчетФактура");
		Если ЗафиксированныйАвансПоСФ = Неопределено Тогда
		    Продолжить;
		КонецЕсли; 
		
		Для каждого СтрокаПогашенияАванса Из ПогашенныйАвансПоСФ.Строки Цикл
			
			ВалютаАванса = ?(СтрокаПогашенияАванса.РасчетыВУсловныхЕдиницах или НЕ ЗначениеЗаполнено(СтрокаПогашенияАванса.ВалютаРасчетов),мВалютаРегламентированногоУчета,СтрокаПогашенияАванса.ВалютаРасчетов);
			
			Отбор = Новый Структура("Покупатель,ДоговорКонтрагента, ВалютаАванса",СтрокаПогашенияАванса.Покупатель, СтрокаПогашенияАванса.ДоговорКонтрагента, ВалютаАванса);
			
			СтрокиАвансаПоОтбору = ЗафиксированныйАвансПоСФ.Строки.НайтиСтроки(Отбор);
			Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			МассивСуммаБезНДС = новый Массив();
			МассивСуммаНДС = новый Массив();
			МассивВалютнаяСуммаСНДС = новый Массив();
			
			СуммаБезНДС = 0;
			СуммаНДС = 0;
			ВалютнаяСуммаСНДС = 0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
				МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
				МассивВалютнаяСуммаСНДС.Добавить(СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС);
				
				СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
				СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
				ВалютнаяСуммаСНДС = ВалютнаяСуммаСНДС + СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС
			КонецЦикла; 
			
			Если ВалютаАванса = мВалютаРегламентированногоУчета Тогда
				Если СуммаБезНДС+СуммаНДС = 0 тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по рублевой сумме
				ВалютнаяСуммаСНДС = Окр(ВалютнаяСуммаСНДС*Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС))/(СуммаБезНДС+СуммаНДС), 2);
				СуммаСНДС = Мин(СтрокаПогашенияАванса.Сумма, (СуммаБезНДС+СуммаНДС));
				Если СуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				// Сопоставление по валютной сумме
				СуммаСНДС = Окр((СуммаБезНДС+СуммаНДС)*Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС)/ВалютнаяСуммаСНДС,2);
				ВалютнаяСуммаСНДС = Мин(СтрокаПогашенияАванса.ВалютнаяСумма, ВалютнаяСуммаСНДС);
				
				Если ВалютнаяСуммаСНДС = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
			
			СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС+СуммаНДС),2);
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			Если СуммаБезНДС>0 Тогда
				МассивСуммаБезНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаБезНДС,МассивСуммаБезНДС);
			КонецЕсли;
			
			Если СуммаНДС>0 Тогда
				МассивСуммаНДС = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС,МассивСуммаНДС);
			КонецЕсли; 
			
			Если ВалютнаяСуммаСНДС >0 Тогда
				МассивВалютнаяСуммаСНДС = ОбщегоНазначения.РаспределитьПропорционально(ВалютнаяСуммаСНДС,МассивВалютнаяСуммаСНДС);
			КонецЕсли; 
			
			Счетчик =0;
			Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
				Если ?(СуммаБезНДС > 0,МассивСуммаБезНДС[Счетчик], 0) = 0
					И ?(СуммаНДС > 0,МассивСуммаНДС[Счетчик], 0) = 0 И ?(ВалютнаяСуммаСНДС > 0, МассивВалютнаяСуммаСНДС[Счетчик], 0) = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаРезультата = ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаАвансаПоОтбору);
				СтрокаРезультата.ВалютаДокумента = СтрокаАвансаПоОтбору.ВалютаАванса;
				СтрокаРезультата.ДатаСобытия	 = СтрокаПогашенияАванса.Дата;
				
				СтрокаРезультата.СуммаБезНДС	 = ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
				СтрокаРезультата.НДС			 = ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
				СтрокаРезультата.ВалютнаяСумма	 = ?(ВалютнаяСуммаСНДС > 0, МассивВалютнаяСуммаСНДС[Счетчик], 0);
				
				СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
				СтрокаАвансаПоОтбору.НДС         = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
				СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС = СтрокаАвансаПоОтбору.ВалютнаяСуммаСНДС - ?(ВалютнаяСуммаСНДС > 0, МассивВалютнаяСуммаСНДС[Счетчик], 0);
				
				Счетчик = Счетчик +1;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
 	КУдалениюСФ = Новый массив();
	Для каждого СтрокаПоСФ Из Дерево_НДСсАвансов.Строки Цикл
		СтрокиКУдалению = Новый Массив();
		Для каждого СтрокаАванса Из СтрокаПоСФ.Строки Цикл
			Если СтрокаАванса.СуммаБезНДС = 0 И СтрокаАванса.НДС = 0 И СтрокаАванса.ВалютнаяСуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаАванса);
			СтрокаРезультата.ВалютаДокумента = СтрокаАванса.ВалютаАванса;
			СтрокаРезультата.ВалютнаяСумма   = СтрокаАванса.ВалютнаяСуммаСНДС;
			
		КонецЦикла; 
		
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			СтрокаПоСФ.Строки.Удалить(СтрокаКУдалению);
		КонецЦикла; 
		Если СтрокаПоСФ.Строки.Количество() = 0 тогда
			КУдалениюСФ.Добавить(СтрокаПоСФ);
		Иначе
			СтрокаПоСФ.СуммаБезНДС = СтрокаПоСФ.Строки.Итог("СуммаБезНДС");
			СтрокаПоСФ.НДС = СтрокаПоСФ.Строки.Итог("НДС");
			СтрокаПоСФ.ВалютнаяСуммаСНДС = СтрокаПоСФ.Строки.Итог("ВалютнаяСуммаСНДС");
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Заполнение табличной части "Вычет НДС с полученных авансов"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС с авансов выданных"

// Процедура выполняет автоматическое заполнение табличной части документа
// Вызывается из процедуры КоманднаяПанельНДСсАвансовЗаполнить
//
Процедура ЗаполнитьСтроки_НДСсАвансовВыданных() Экспорт
	
	ТаблицаРезультатов = НДСсАвансовВыданных.ВыгрузитьКолонки();
	
	ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов);
	
	НДСсАвансовВыданных.Загрузить(ТаблицаРезультатов);
	
КонецПроцедуры // ЗаполнитьСтрокиДокумента()

Процедура ЗаполнитьНДССАвансовВыданныхПоДаннымРегистраНДСПредъявленный(ТаблицаРезультатов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаГраница", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСПредъявленныйОстатки.СчетФактура,
	               |	НДСПредъявленныйОстатки.СтавкаНДС,
	               |	НДСПредъявленныйОстатки.Поставщик,
	               |	НДСПредъявленныйОстатки.ДоговорКонтрагента,
				   |	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
	               |	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	               |	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
	               |ИЗ
	               |	РегистрНакопления.НДСПредъявленный.Остатки(
	               |			&ДатаГраница,
	               |			Организация = &Организация
	               |				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОстатки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Результат.Выгрузить(), ТаблицаРезультатов);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение табличной части "Вычет НДС с авансов выданных"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Заполнение табличной части "Вычет НДС при изменении стоимости в сторону уменьшения"

Процедура ЗаполнитьСтроки_ВычетПриИзмененииСтоимостиВСторонуУменьшения(Сообщать) Экспорт
		
	Если Проведен Тогда
		Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	ОшибкаЗаполнения = Ложь;
	
	ТаблицаРезультатов = ЗаполнитьВычетПриИзмененииСтоимостиПоДаннымРегистраНДСПредъявленный();
		
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		// Дальнейшая обработка не требуется, не обнаружен НДС, который может быть принят к вычету.
		ВычетПриИзмененииСтоимостиВСторонуУменьшения.Очистить();
		Возврат;
	КонецЕсли;
		
	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Загрузить(ТаблицаРезультатов);
	ВычетПриИзмененииСтоимостиВСторонуУменьшения.Сортировать("СчетФактура, Поставщик, ВидЦенности, СтавкаНДС");
		
КонецПроцедуры	

Функция ЗаполнитьВычетПриИзмененииСтоимостиПоДаннымРегистраНДСПредъявленный()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаСФНеБолее", КонецДня(Дата));
    	
	Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 1 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|		ПО НДСПредъявленныйОстатки.СчетФактура = СчетФактураВыданный.ДокументОснование
		|ГДЕ
		|	(НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL )
		|	И СчетФактураВыданный.Ссылка.Дата <= &ДатаСФНеБолее"; 
		
	Иначе
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(
		|			&ДатаГраница,
		|			Организация = &Организация
		|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|		ПО (ВЫБОР
		|				КОГДА НДСПредъявленныйОстатки.ИсправленныйСчетФактура ССЫЛКА Документ.КорректировкаРеализации
		|					ТОГДА СчетФактураВыданный.ДокументОснование = НДСПредъявленныйОстатки.ИсправленныйСчетФактура
		|				ИНАЧЕ СчетФактураВыданный.ДокументОснование = НДСПредъявленныйОстатки.СчетФактура
		|			КОНЕЦ)
		|ГДЕ
		|	(НЕ СчетФактураВыданный.Ссылка ЕСТЬ NULL )
		|	И СчетФактураВыданный.Ссылка.Выставлен
		|	И СчетФактураВыданный.Ссылка.ДатаВыставления <= &ДатаСФНеБолее";
		
	КонецЕсли;	
	    	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Заполнение табличной части "Вычет НДС при изменении стоимости в сторону уменьшения"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	СтруктураПолейУчетнойПолитикиНУ = Новый Структура("НДСНалоговыйПериод");
	Если Не СтруктураШапкиДокумента.Свойство("НДСНалоговыйПериод") Тогда
		СтруктураШапкиДокумента.Вставить("НДСНалоговыйПериод", ?(Дата < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал));
	КонецЕсли; 
	ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ТаблицаВычетов = РезультатЗапросаПоВычетам.Выгрузить();
	
	МоментОпределенияНалоговойБазыНДСОплата = Неопределено;
	НачалоНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал, НачалоКвартала(СтруктураШапкиДокумента.Дата), НачалоМесяца(СтруктураШапкиДокумента.Дата));
	КонецНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал, КонецКвартала(СтруктураШапкиДокумента.Дата), КонецМесяца(СтруктураШапкиДокумента.Дата));
	
	Для каждого СтрокаТаблицы из ТаблицаВычетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) Тогда
			СтрокаТаблицы.ДатаСчетаФактуры = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
							
		Если СтрокаТаблицы.ДатаОплаты = '00010101' Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокументаОплаты) Тогда
				Если (СтруктураШапкиДокумента.Дата < '20060101') Тогда
					СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
				ИначеЕсли СтрокаТаблицы.ДатаСчетаФактуры < '20060101' Тогда
					Если МоментОпределенияНалоговойБазыНДСОплата = Неопределено Тогда
						УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики('20051231', Отказ, СтруктураШапкиДокумента.Организация, "Нал");
						Если Не Отказ Тогда
							МоментОпределенияНалоговойБазыНДСОплата = (УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате);
						Иначе
							МоментОпределенияНалоговойБазыНДСОплата = Ложь;
						КонецЕсли;
					КонецЕсли;
					Если МоментОпределенияНалоговойБазыНДСОплата Тогда
						СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ДатаОплаты = СтрокаТаблицы.ДатаДокументаОплаты;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
			Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
				СтрокаТаблицы.ДатаСобытия = Макс(?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры, ?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузкиДата), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОтгрузкиДата));
			Иначе
				СтрокаТаблицы.ДатаСобытия = ?(Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузкиДата), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОтгрузкиДата);
				Если Не (СтрокаТаблицы.ДатаСобытия >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСобытия <= КонецНалоговогоПериода) Тогда
					СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтруктураШапкиДокумента.Дата < '20060101' Тогда
				СтрокаТаблицы.ДатаСобытия = Макс(?(СтрокаТаблицы.ДатаОплаты = '00010101', СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДатаОплаты), СтрокаТаблицы.ДатаСчетаФактуры);
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсправленныйСчетФактура) Тогда
					Если СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
						СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
					Иначе
						СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
					КонецЕсли;
				Иначе
					Если СтрокаТаблицы.ИсправленныйСчетФактураДата >= НачалоНалоговогоПериода 
						И СтрокаТаблицы.ИсправленныйСчетФактураДата <= КонецНалоговогоПериода Тогда
						СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ИсправленныйСчетФактураДата;
					Иначе
						СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаВычетов.Колонки.Добавить("Событие");
	ТаблицаВычетов.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	
	Возврат ТаблицаВычетов;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоАвансам(РезультатЗапросаПоАвансам, СтруктураШапкиДокумента)
	
	ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
	
	ТаблицаПоАвансам.Колонки.Добавить("Событие");
	ТаблицаПоАвансам.ЗаполнитьЗначения( ?(СтруктураШапкиДокумента.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету),"Событие");
	
	ТаблицаПоАвансам.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоАвансам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные,"ВидЦенности");
	
	ТаблицаПоАвансам.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
		ТаблицаПоАвансам.ЗаполнитьЗначения("22", "КодВидаОперации");
	КонецЕсли;

	Для каждого СтрокаТаблицы из ТаблицаПоАвансам Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаОплаты) Тогда
			СтрокаТаблицы.ДатаОплаты = СтруктураШапкиДокумента.Дата;
		КонецЕсли; 
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТаблицаПоАвансам;
	
КонецФункции // ПодготовитьТаблицуПоОплатам()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
Функция ПодготовитьТаблицуПоАвансамВыданным(РезультатЗапросаПоАвансамВыданным, СтруктураШапкиДокумента)
	
	ТаблицаПоАвансамВыданным = РезультатЗапросаПоАвансамВыданным.Выгрузить();
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
	ТаблицаПоАвансамВыданным.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаПоАвансамВыданным.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыВыданные,"ВидЦенности");
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	
	ТаблицаПоАвансамВыданным.Колонки.Добавить("ДатаДокументаОплаты", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаПоАвансамВыданным.Колонки.Добавить("НомерДокументаОплаты");

	НачалоНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, НачалоМесяца(СтруктураШапкиДокумента.Дата), НачалоКвартала(СтруктураШапкиДокумента.Дата));
	КонецНалоговогоПериода = ?(СтруктураШапкиДокумента.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц, КонецМесяца(СтруктураШапкиДокумента.Дата), КонецКвартала(СтруктураШапкиДокумента.Дата));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансамВыданным Цикл
		
		Если Не СтрокаТаблицы.ЗаписьДополнительногоЛиста Тогда
			СтрокаТаблицы.КорректируемыйПериод = '00010101000000';
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаСчетаФактуры) 
			И СтрокаТаблицы.ДатаСчетаФактуры >= НачалоНалоговогоПериода
			И СтрокаТаблицы.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
			СтрокаТаблицы.ДатаСобытия = СтрокаТаблицы.ДатаСчетаФактуры;
		Иначе
			СтрокаТаблицы.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
			СтрокаТаблицы.НомерДокументаОплаты = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаТаблицы.СчетФактура);
			СтрокаТаблицы.ДатаДокументаОплаты  = СтрокаТаблицы.ДатаСчетаФактуры;
		КонецЕсли;

	КонецЦикла; 
	
	Возврат ТаблицаПоАвансамВыданным;
	
КонецФункции // ПодготовитьТаблицуПоОплатам()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок) Экспорт
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		"Ссылка.Организация");
	СтруктураПолей.Вставить("ВидЦенности",		"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",		"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	"СчетФактура.Дата");
	СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОплаты");
	СтруктураПолей.Вставить("ДатаОплаты",		"ДатаОплаты");
	СтруктураПолей.Вставить("ДатаДокументаОплаты",	"ДокументОплаты.Дата");
	СтруктураПолей.Вставить("ДатаСобытия",		"ДатаОплаты");
	СтруктураПолей.Вставить("СтавкаНДС",		"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		"СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				"НДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	СтруктураПолей.Вставить("ИсправленныйСчетФактура",      "ИсправленныйСчетФактура");
	СтруктураПолей.Вставить("ИсправленныйСчетФактураДата",  "ИсправленныйСчетФактура.Дата");
	СтруктураПолей.Вставить("КодВидаОперации",				"КодВидаОперации");
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
		СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
		СтруктураПолей.Вставить("ДокументОтгрузкиКонтрагент",	"ДокументОтгрузки.Контрагент");
		СтруктураПолей.Вставить("Состояние",	"Состояние");
	КонецЕсли; 

	РезультатЗапросаПоВычетам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураПолей);
	ТаблицаПоВычетам = 			ПодготовитьТаблицуПоВычетам(РезультатЗапросаПоВычетам,СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Покупатель",		 "Покупатель");
	СтруктураПолей.Вставить("Поставщик",		 "Покупатель");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ВалютнаяСуммаСНДС", "ВалютнаяСумма");
	СтруктураПолей.Вставить("ВалютаАванса",	 	 "ВалютаДокумента");
	СтруктураПолей.Вставить("ДатаСобытия",	 	 "ДатаСобытия");
	СтруктураПолей.Вставить("ДатаОплаты",		 "ДатаСобытия");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	СтруктураПолей.Вставить("ИсправленныйСчетФактура", "ИсправленныйСчетФактура");
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураПолей.Вставить("ДокументОтгрузки",	"ДокументОтгрузки");
		СтруктураПолей.Вставить("ДокументОплаты",	"ДокументОтгрузки");
		СтруктураПолей.Вставить("ДокументОтгрузкиДата",	"ДокументОтгрузки.Дата");
		СтруктураПолей.Вставить("Состояние",	"Состояние");
	КонецЕсли; 
	
	РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураПолей);
	ТаблицаПоАвансам = 			ПодготовитьТаблицуПоАвансам(РезультатЗапросаПоАвансам, СтруктураШапкиДокумента);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по авансам.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 "Ссылка.Организация");
	СтруктураПолей.Вставить("Поставщик",		 "Поставщик");
	СтруктураПолей.Вставить("ДоговорАванса",	 "ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДоговорКонтрагента","ДоговорКонтрагента");
	СтруктураПолей.Вставить("СчетФактура",	 	 "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",		 "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 "НДС");
	СтруктураПолей.Вставить("ЗаписьДополнительногоЛиста",	"ЗаписьДополнительногоЛиста");
	СтруктураПолей.Вставить("КорректируемыйПериод",			"КорректируемыйПериод");
	СтруктураПолей.Вставить("ИсправленныйСчетФактура", "ИсправленныйСчетФактура");
	
	РезультатЗапросаПоАвансамВыданным = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НДСсАвансовВыданных", СтруктураПолей);
	ТаблицаПоАвансамВыданным = ПодготовитьТаблицуПоАвансамВыданным(РезультатЗапросаПоАвансамВыданным, СтруктураШапкиДокумента);
	
	// Подготовим данные необходимые для проведения и проверки заполнения табличной части по вычету при уменьшении стоимости.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация",		 	   "Ссылка.Организация");
	СтруктураПолей.Вставить("ДатаСобытия",		 	   "Ссылка.Дата");
	СтруктураПолей.Вставить("Поставщик",		  	   "Поставщик");
	СтруктураПолей.Вставить("СчетФактура",	 	 	   "СчетФактура");
	СтруктураПолей.Вставить("ДатаСчетаФактуры",	 "СчетФактура.Дата");
	СтруктураПолей.Вставить("СтавкаНДС",		 	   "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаБезНДС",		 	   "СуммаБезНДС");
	СтруктураПолей.Вставить("НДС",				 	   "НДС");
	СтруктураПолей.Вставить("ВидЦенности",	 	 	   "ВидЦенности");	
	СтруктураПолей.Вставить("ИсправленныйСчетФактура", "ИсправленныйСчетФактура");
	СтруктураПолей.Вставить("ИсправленныйСчетФактураДата", "ИсправленныйСчетФактура.Дата");
	
	РезультатЗапросаПоВычетамПриИзмененииСтоимости = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВычетПриИзмененииСтоимостиВСторонуУменьшения", СтруктураПолей);
	ТаблицаПоВычетамПриИзмененииСтоимости = РезультатЗапросаПоВычетамПриИзмененииСтоимости.Выгрузить();
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента,ТаблицаПоВычетам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, СчетФактура, СтавкаНДС"); 
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние"); 
	КонецЕсли; 
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВычетПоПриобретеннымЦенностям", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщения = "Не заполнены документ оплаты и дата оплаты. В книге покупок по данной записи в качестве даты оплаты будет установлена дата текущего документа!";
	СтрокаСообщенияДокОтгрузки = "Не заполнен документ отгрузки при реализации товара по ставке НДС 0%!";
	СтрокаСообщенияПоставщик = "Не заполнено значение реквизита ""Поставщик""!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для каждого СтрокаТаблицы из ТаблицаПоВычетам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияДокОтгрузки,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		
		// Проверка на заполнение контрагента
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияПоставщик,Отказ,Заголовок);
		КонецЕсли; 
		
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет по приобретенным ценностям"" : ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке+СтрокаСообщенияКорПериод,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;

	КонецЦикла; 

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Покупатель, СчетФактура, СтавкаНДС"); 
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		СтруктураОбязательныхПолей.Вставить("Состояние");
	КонецЕсли; 
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НДСсАвансов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияДокОтгрузки = "Не заполнен документ отгрузки при реализации товара по ставке НДС 0%!";
 	СтрокаСообщения = "Не заполнена дата зачета аванса. В качестве даты зачета аванса будет использоваться дата текущего документа!";
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";
	СтрокаСообщенияДоговор = "Не заполнено значение реквизита ""Договор контрагента""!";

	Для каждого СтрокаТаблицы из ТаблицаПоАвансам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСобытия) Тогда
			СтрокаНачалаСообщенияОбОшибке = "На закладке ""Вычет НДС с полученных авансов"" в строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 и НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "На закладке ""Вычет НДС с полученных авансов"" в строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """: ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияДокОтгрузки,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста и Не ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод,,Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) 
			И ТипЗнч(СтрокаТаблицы.СчетФактура) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с полученных авансов"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияДоговор, ,Заголовок, СтатусСообщения.Внимание);	
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансамВыданным(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Поставщик, ДоговорКонтрагента, СчетФактура, СтавкаНДС"); 
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НДСсАвансовВыданных", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Проверка полей без прекращения проведения
	СтрокаСообщенияКорПериод = "Не заполнено значение реквизита ""Корректируемый период""!";

	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансамВыданным Цикл
		Если СтрокаТаблицы.ЗаписьДополнительногоЛиста И Не ЗначениеЗаполнено(СтрокаТаблицы.КорректируемыйПериод) Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) + """ табличной части ""Вычет НДС с выданных авансов"": ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщенияКорПериод, , Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицапоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок)
	
	ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок);
	ДвиженияПоВычетамНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	ДвиженияПоВычетамНДСсАвансовВыданных(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок);
	
	ДвиженияПоВычетамПриИзмененииСтоимости(СтруктураШапкиДокумента, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСпоПриобретеннымЦенностям(СтруктураШапкиДокумента, ТаблицаПоВычетам, Отказ, Заголовок)

	Если ТаблицаПоВычетам.КОличество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру "НДС предъявленный"
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.Свернуть("Период,Активность,Организация,СчетФактура,ИсправленныйСчетФактура,ВидЦенности,СтавкаНДС,Поставщик,ДатаСобытия,Событие","СуммаБезНДС,НДС");
		
	Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьРасход();
		
	// Виды ценностей с особой обработкой расчетов
	СоответствиеВидаЦенностиИРежимаОплаты = Новый Соответствие();
	СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные,"Исключить");
	СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.АвансыПолученные0,"Исключить");
	СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи,"Исключить");
	СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.Возврат,"Исключить");
		
	СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда, "НДС");
	СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества, "НДС");
	СоответствиеВидаЦенностиИРежимаОплаты.Вставить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы,"НДС");
		
	// Отражение по регистру взаиморасчетов
	ТаблицаДвижений_НДСРасчетыСПоставщиками = Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыгрузитьКолонки();
		
	Для каждого СтрокаВычета Из ТаблицаПоВычетам Цикл
		Если СоответствиеВидаЦенностиИРежимаОплаты[СтрокаВычета.ВидЦенности] = "Исключить" Тогда
			Продолжить;
		Иначе
			СтрокаРасчетов = ТаблицаДвижений_НДСРасчетыСПоставщиками.Добавить();
			СтрокаРасчетов.Организация = СтрокаВычета.Организация;
			СтрокаРасчетов.СчетФактура = СтрокаВычета.СчетФактура;
			СтрокаРасчетов.ДокументОплаты = СтрокаВычета.ДокументОплаты;
			Если СоответствиеВидаЦенностиИРежимаОплаты[СтрокаВычета.ВидЦенности] = "НДС" Тогда
				СтрокаРасчетов.РасчетыСБюджетом = Истина;
				СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.НДС;
			Иначе
				СтрокаРасчетов.РасчетыСБюджетом = Ложь;
				СтрокаРасчетов.РаспределеннаяСумма = СтрокаВычета.СуммаБезНДС+СтрокаВычета.НДС;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;

	ТаблицаДвижений_НДСРасчетыСПоставщиками.Свернуть("Период,Активность,Организация,СчетФактура,ДокументОплаты,РасчетыСБюджетом,ДатаСобытия","РаспределеннаяСумма");
		
	Движения.НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСРасчетыСПоставщиками;
	Движения.НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьРасход();

	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если СтрокаЗаписи.ЗаписьДополнительногоЛиста = Ложь Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли; 
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
				
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
			
		Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВычетам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	КонецЕсли; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ИсправленныйСчетФактура, ДокументОплаты, 
		|ДатаОплаты, СтавкаНДС, Поставщик, ДатаСобытия, Событие, ВидЦенности, ЗаписьДополнительногоЛиста, КорректируемыйПериод, КодВидаОперации",
		"СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()
 
// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок)

	Если ТаблицаПоАвансам.КОличество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру "НДС предъявленный"
	ТаблицаДвижений_НДСсАвансов = Движения.НДСсАвансов.ВыгрузитьКолонки();
			
	Для каждого СтрокаТаблицыИсточника Из ТаблицаПоАвансам Цикл

		Если ТипЗнч(СтрокаТаблицыИсточника.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыПриемника = ТаблицаДвижений_НДСсАвансов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;
        	
	ТаблицаДвижений_НДСсАвансов.Свернуть("Период, Активность, Организация, ВидЦенности, СчетФактура, ИсправленныйСчетФактура, Покупатель, 
		|ДоговорКонтрагента, СтавкаНДС, ВалютаАванса, ДатаСобытия", "СуммаБезНДС, НДС, ВалютнаяСуммаСНДС");
		
	Движения.НДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСсАвансов.мТаблицаДвижений = ТаблицаДвижений_НДСсАвансов;
	Движения.НДСсАвансов.ВыполнитьРасход();

	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	Если СтруктураШапкиДокумента.ПредъявленНДСКВычету0 Тогда
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("ДокументОтгрузкиДата",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Добавить("Состояние",Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		
		СоответствиеКолонок = Новый Структура("ДоговорАванса","ДоговорКонтрагента");
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСЗаписиКнигиПокупок,СоответствиеКолонок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСЗаписиКнигиПокупок,СоответствиеКолонок, Истина);
		
		
		Для каждого СтрокаЗаписи Из ТаблицаДвижений_НДСЗаписиКнигиПокупок Цикл
			Если СтрокаЗаписи.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 тогда
				Если Не СтрокаЗаписи.ЗаписьДополнительногоЛиста Тогда
					СтрокаЗаписи.Период = Макс(СтрокаЗаписи.ДатаОплаты, СтрокаЗаписи.ДокументОтгрузкиДата);
				Иначе
					СтрокаЗаписи.Период = СтруктураШапкиДокумента.Дата;
				КонецЕсли;
				СтрокаЗаписи.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			КонецЕсли;
		КонецЦикла; 
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.ДокументОтгрузкиДата);
		ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Удалить(ТаблицаДвижений_НДСЗаписиКнигиПокупок.Колонки.Состояние);
		
		// Отражение по регистру НДСсАвансовРеализация0
		ТаблицаДвижений_НДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансам,ТаблицаДвижений_НДСПредъявленныйРеализация0);
			
		Движения.НДСПредъявленныйРеализация0.мПериод 		 = СтруктураШапкиДокумента.Дата;
		Движения.НДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленныйРеализация0;
		Движения.НДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
		
	Иначе
		СоответствиеКолонок = Новый Структура("ДоговорАванса","ДоговорКонтрагента");
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСЗаписиКнигиПокупок,СоответствиеКолонок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансам,ТаблицаДвижений_НДСЗаписиКнигиПокупок);
		УчетНДС.ПереименованиеКолонок(ТаблицаДвижений_НДСЗаписиКнигиПокупок,СоответствиеКолонок, Истина);
	КонецЕсли; 
	
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ИсправленныйСчетФактура, ДокументОплаты, ДатаОплаты, 
		|СтавкаНДС, Поставщик, ДоговорАванса, ДатаСобытия, Событие, ВидЦенности, ЗаписьДополнительногоЛиста, КорректируемыйПериод, КодВидаОперации", 
		"СуммаБезНДС,НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

// По результату запроса по шапке документа формируем движения по регистрам.
// Отрабатывает по табличной части "Вычет НДС по приобретенным ценностям"
//
Процедура ДвиженияПоВычетамНДСсАвансовВыданных(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок)

	Если ТаблицаПоАвансамВыданным.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Отражение по регистру НДСПредъявленный
	ТаблицаДвижений_НДСПредъявленный = Движения.НДСПредъявленный.ВыгрузитьКолонки();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансамВыданным, ТаблицаДвижений_НДСПредъявленный);
	ТаблицаДвижений_НДСПредъявленный.Свернуть("Период, Активность, Организация, СчетФактура, ИсправленныйСчетФактура, ВидЦенности, 
		|СтавкаНДС, Поставщик, ДоговорКонтрагента, ДатаСобытия, Событие", 
		"СуммаБезНДС, НДС");
		
	Движения.НДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
	Движения.НДСПредъявленный.мТаблицаДвижений = ТаблицаДвижений_НДСПредъявленный;
	Движения.НДСПредъявленный.ВыполнитьРасход();
		
	// Отражение по регистру НДСЗаписиКнигиПокупок
	ТаблицаДвижений_НДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок.ВыгрузитьКолонки();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоАвансамВыданным, ТаблицаДвижений_НДСЗаписиКнигиПокупок);
	                                                                                                                                                                                                                                           
	ТаблицаДвижений_НДСЗаписиКнигиПокупок.Свернуть("Период, Активность, Организация, СчетФактура, ИсправленныйСчетФактура, СтавкаНДС, Поставщик, 
		|ДоговорАванса, ДатаСобытия, Событие, ВидЦенности, ЗаписьДополнительногоЛиста, КорректируемыйПериод, НомерДокументаОплаты, ДатаДокументаОплаты", 
		"СуммаБезНДС, НДС");
		
	Движения.НДСЗаписиКнигиПокупок.мПериод 			= СтруктураШапкиДокумента.Дата;
	Движения.НДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвижений_НДСЗаписиКнигиПокупок;
	Движения.НДСЗаписиКнигиПокупок.ДобавитьДвижение(Ложь);
	
КонецПроцедуры // ДвиженияПоВычетамНДСпоПриобретеннымЦенностям()

Процедура ДвиженияПоВычетамПриИзмененииСтоимости(СтруктураШапкиДокумента, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок)
	
	ТаблицаПоВычетамПриИзмененииСтоимости.Свернуть(
		"Организация, ДатаСобытия, Поставщик, СчетФактура, ДатаСчетаФактуры, СтавкаНДС, ВидЦенности, ИсправленныйСчетФактура, ИсправленныйСчетФактураДата", 
		"СуммаБезНДС, НДС");
		
	Если ТаблицаПоВычетамПриИзмененииСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачалоНалоговогоПериода = НачалоКвартала(СтруктураШапкиДокумента.Дата);
	КонецНалоговогоПериода  = КонецДня(КонецКвартала(СтруктураШапкиДокумента.Дата));
	
	Для Каждого СтрокаДвижения Из ТаблицаПоВычетамПриИзмененииСтоимости Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДвижения.ИсправленныйСчетФактура) Тогда
			СтрокаДвижения.ИсправленныйСчетФактура = Неопределено;
			Если СтрокаДвижения.ДатаСчетаФактуры >= НачалоНалоговогоПериода 
				И СтрокаДвижения.ДатаСчетаФактуры <= КонецНалоговогоПериода Тогда
				СтрокаДвижения.ДатаСобытия = СтрокаДвижения.ДатаСчетаФактуры;
			Иначе
				СтрокаДвижения.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
		Иначе
			Если СтрокаДвижения.ИсправленныйСчетФактураДата >= НачалоНалоговогоПериода 
				И СтрокаДвижения.ИсправленныйСчетФактураДата <= КонецНалоговогоПериода Тогда
				СтрокаДвижения.ДатаСобытия = СтрокаДвижения.ИсправленныйСчетФактураДата;
			Иначе
				СтрокаДвижения.ДатаСобытия = СтруктураШапкиДокумента.Дата;
			КонецЕсли;
        КонецЕсли;	
		
		Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
		Движение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		Движение.Период 	 = СтруктураШапкиДокумента.Дата;
		Движение.Событие 	 = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();	
			
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		Движение.Регистратор = СтруктураШапкиДокумента.Ссылка;
		Движение.ДатаСобытия = СтруктураШапкиДокумента.Дата;
		Движение.Период 	 = СтруктураШапкиДокумента.Дата;
		Движение.Событие 	 = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
			Движение.КодВидаОперации = "18";
		КонецЕсли;
		
	КонецЦикла;	
	
	Движения.НДСПредъявленный.Записывать = Истина;
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамПриИзмененииСтоимости;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиПоВычетам(СтруктураШапкиДокумента,ТаблицаПоВычетам, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(СтруктураШапкиДокумента, ТаблицаПоАвансам, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансамВыданным(СтруктураШапкиДокумента, ТаблицаПоАвансамВыданным, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоВычетам, ТаблицаПоАвансам, ТаблицаПоАвансамВыданным, ТаблицаПоВычетамПриИзмененииСтоимости, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
