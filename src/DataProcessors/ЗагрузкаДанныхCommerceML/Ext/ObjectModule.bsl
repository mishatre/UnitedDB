
Перем мТекСтрДокументы; // Строка табличной части ЭлДокумента для загрузки данных
Перем мТекСтрТовары;    // Строка табличной части ТовырыКаталог, ТоварыПрайс, ТоварыДокумент для загрузки данных
Перем мТекСтрДокументыОснования;
Перем мТекСтрСвойстваТовара;
Перем мТекСтрКонтактнойИнформации;
Перем мСоотвествияКаталогов Экспорт;
Перем мТекСтрТипыЦен;   // Строка табличной части Соответствия цен
Перем мИдДокумента;     // Идентификатор документа, присваивается при загрузке

Перем мИННКонтрагента;  // ИНН загружаемого контрагента
Перем мКППКонтрагента;  // КПП загружаемого контрагента
Перем мОКПОКонтрагента;  // ОКПО загружаемого контрагента
Перем мИмяКонтрагента;  // Наименование загружаемого контрагента
Перем мРольКонтрагента; // Роль загружаемого контрагента
Перем мПолноеНаименованиеКонтрагента; // полное наименование контрагента

Перем мИмяНалога;       // Наименование загружаемого вида налогов

Перем мСкладПоУмолчанию;
Перем мВидНоменклатурыПоУмолчанию;
Перем мОсновноеПодразделение;
Перем мТекущийПользователь Экспорт;
Перем мОсновнаяВалютаВзаиморасчетов;
Перем мОсновноеВедениеВзаиморасчетовПоДоговорам;

Перем мТаблицаВозможныхТиповДокументов;
Перем мТаблицаСвойствКаталога;
Перем мСтрокаТаблицыСвойств;
Перем мИспользоватьХарактеристикиУНоменклатуры Экспорт;

Перем мМассивЗагруженныхПисем Экспорт;

Перем мОтражатьВРеглУчете;
Перем мОтражатьВБухУчета;
Перем мОтражатьВНалУчете;

Перем мДатаФормированияФайлаОбмена;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПЕРВОНАЧАЛЬНОЙ НАСТРОЙКИ ЗАГРУЗКИ ДАННЫХ
	
// Процедура заполняет структуру для управления чтением данных из XML-файла
//
Процедура ЗаполнитьСтруктурыЗагрузки() Экспорт

	СтруктураЗагрузки = Новый Структура();
	
	СтруктураЗагрузки.Вставить("КоммерческаяИнформация_", "КоммерческаяИнформация");
	
	//Классификатор
	СтруктураЗагрузки.Вставить("Группы_Классификатор_КоммерческаяИнформация_",  "КлассификаторГрупп");
	СтруктураЗагрузки.Вставить("Ид_Свойство_Свойства_Классификатор_КоммерческаяИнформация_",  "ИДСвойстваКлассификатора");
	СтруктураЗагрузки.Вставить("Наименование_Свойство_Свойства_Классификатор_КоммерческаяИнформация_",  "НаименованиеСвойстваКлассификатора");
	
	//Типы документов
	
	СтруктураЗагрузки.Вставить("Каталог_КоммерческаяИнформация_",              "ТипКаталог");
	СтруктураЗагрузки.Вставить("ПакетПредложений_КоммерческаяИнформация_",     "ТипПрайс");
	СтруктураЗагрузки.Вставить("Документ_КоммерческаяИнформация_",             "ТипДокумент");
	СтруктураЗагрузки.Вставить("ХозОперация_Документ_КоммерческаяИнформация_", "ХозОперация");
		
	//Товары в каталоге
	СтруктураЗагрузки.Вставить("Товар_Товары_Каталог_КоммерческаяИнформация_",                    "НовыйТоварКаталог");
	СтруктураЗагрузки.Вставить("Ид_Товар_Товары_Каталог_КоммерческаяИнформация_",                 "ИдТовара");
	СтруктураЗагрузки.Вставить("Ид_Группы_Товар_Товары_Каталог_КоммерческаяИнформация_",          "ИдКлассификатора");
	СтруктураЗагрузки.Вставить("Наименование_Товар_Товары_Каталог_КоммерческаяИнформация_",       "ИмяТовара");
	СтруктураЗагрузки.Вставить("Штрихкод_Товар_Товары_Каталог_КоммерческаяИнформация_",           "ШтрихКодТовара");
	СтруктураЗагрузки.Вставить("Артикул_Товар_Товары_Каталог_КоммерческаяИнформация_",            "АртикулТовара");
	СтруктураЗагрузки.Вставить("Ставка_СтавкаНалога_СтавкиНалогов_Товар_Товары_Каталог_КоммерческаяИнформация_", "СтавкаНДС");
		
	СтруктураЗагрузки.Вставить("ХарактеристикаТовара_ХарактеристикиТовара_Товар_Товары_Каталог_КоммерческаяИнформация_", "ХарактеристикиТовара");
	СтруктураЗагрузки.Вставить("Ид_ЗначенияСвойства_ЗначенияСвойств_Товар_Товары_Каталог_КоммерческаяИнформация_", "ИдСвойстваТовара");
	СтруктураЗагрузки.Вставить("Значение_ЗначенияСвойства_ЗначенияСвойств_Товар_Товары_Каталог_КоммерческаяИнформация_", "ЗначениеСвойстваТовара");
	
	//Товары в прайсе
	СтруктураЗагрузки.Вставить("Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",              "НовыйТоварПрайс");
	СтруктураЗагрузки.Вставить("Ид_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",           "ИдТовара");
	СтруктураЗагрузки.Вставить("Ид_Группы_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",    "ИдКлассификатора");
	СтруктураЗагрузки.Вставить("Наименование_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ИмяТовара");
	СтруктураЗагрузки.Вставить("Штрихкод_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",     "ШтрихКодТовара");
	СтруктураЗагрузки.Вставить("Артикул_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_",      "АртикулТовара");
	СтруктураЗагрузки.Вставить("ИдТипаЦены_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЦенаВПрайсе");
	СтруктураЗагрузки.Вставить("ЦенаЗаЕдиницу_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЦенаЗаЕдиницу");
	СтруктураЗагрузки.Вставить("Валюта_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "Валюта");
	СтруктураЗагрузки.Вставить("Единица_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЕдиницаИзмерения");
	СтруктураЗагрузки.Вставить("Коэффициент_Цена_Цены_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "Коэффициент");
	СтруктураЗагрузки.Вставить("Ставка_СтавкаНалога_СтавкиНалогов_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "СтавкаНДС");
	
	СтруктураЗагрузки.Вставить("ХарактеристикаТовара_ХарактеристикиТовара_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ХарактеристикиТовара");
	СтруктураЗагрузки.Вставить("Ид_ЗначенияСвойства_ЗначенияСвойств_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ИдСвойстваТовара");
	СтруктураЗагрузки.Вставить("Значение_ЗначенияСвойства_ЗначенияСвойств_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЗначениеСвойстваТовара");
	
	//Товары в документе
	СтруктураЗагрузки.Вставить("Товар_Товары_Документ_КоммерческаяИнформация_",               "НовыйТоварДок");
	СтруктураЗагрузки.Вставить("Ид_Товар_Товары_Документ_КоммерческаяИнформация_",            "ИдТовара");
	СтруктураЗагрузки.Вставить("Ид_Группы_Товар_Товары_Документ_КоммерческаяИнформация_",     "ИдКлассификатора");
	СтруктураЗагрузки.Вставить("Наименование_Товар_Товары_Документ_КоммерческаяИнформация_",  "ИмяТовара");
	СтруктураЗагрузки.Вставить("Штрихкод_Товар_Товары_Документ_КоммерческаяИнформация_",      "ШтрихКодТовара");
	СтруктураЗагрузки.Вставить("Артикул_Товар_Товары_Документ_КоммерческаяИнформация_",       "АртикулТовара");
	СтруктураЗагрузки.Вставить("ИдКаталога_Товар_Товары_Документ_КоммерческаяИнформация_",    "ИдКаталогаДокумент");
	СтруктураЗагрузки.Вставить("ЦенаЗаЕдиницу_Товар_Товары_Документ_КоммерческаяИнформация_", "ЦенаЗаЕдиницу");
	СтруктураЗагрузки.Вставить("Количество_Товар_Товары_Документ_КоммерческаяИнформация_",    "Количество");
	СтруктураЗагрузки.Вставить("Сумма_Товар_Товары_Документ_КоммерческаяИнформация_",         "Сумма");
	СтруктураЗагрузки.Вставить("Коэффициент_Товар_Товары_Документ_КоммерческаяИнформация_",   "Коэффициент");
	СтруктураЗагрузки.Вставить("Единица_Товар_Товары_Документ_КоммерческаяИнформация_",       "ЕдиницаИзмерения");
	СтруктураЗагрузки.Вставить("Ставка_СтавкаНалога_СтавкиНалогов_Товар_Товары_Документ_КоммерческаяИнформация_", "СтавкаНДС");
	
	СтруктураЗагрузки.Вставить("ХарактеристикаТовара_ХарактеристикиТовара_Товар_Товары_Документ_КоммерческаяИнформация_", "ХарактеристикиТовара");
	СтруктураЗагрузки.Вставить("Ид_ЗначенияСвойства_ЗначенияСвойств_Товар_Товары_Документ_КоммерческаяИнформация_", "ИдСвойстваТовара");
	СтруктураЗагрузки.Вставить("Значение_ЗначенияСвойства_ЗначенияСвойств_Товар_Товары_Документ_КоммерческаяИнформация_", "ЗначениеСвойстваТовара");
			
	//Базовые Единицы измерения 
	СтруктураЗагрузки.Вставить("БазоваяЕдиница_Товар_Товары_Каталог_КоммерческаяИнформация_",  "БазоваяЕдиница");
	СтруктураЗагрузки.Вставить("БазоваяЕдиница_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "БазоваяЕдиница");
	СтруктураЗагрузки.Вставить("БазоваяЕдиница_Товар_Товары_Документ_КоммерческаяИнформация_", "БазоваяЕдиница");
	
	// доп значения реквизитов для товара
	СтруктураЗагрузки.Вставить("ЗначениеРеквизита_ЗначенияРеквизитов_Товар_Товары_Каталог_КоммерческаяИнформация_",    "ЗначениеРеквизитаТовара");
	СтруктураЗагрузки.Вставить("ЗначениеРеквизита_ЗначенияРеквизитов_Предложение_Предложения_ПакетПредложений_КоммерческаяИнформация_", "ЗначениеРеквизитаТовара");
	СтруктураЗагрузки.Вставить("ЗначениеРеквизита_ЗначенияРеквизитов_Товар_Товары_Документ_КоммерческаяИнформация_", "ЗначениеРеквизитаТовара");
	СтруктураЗагрузки.Вставить("ЗначениеРеквизита_ДополнительныеЗначенияРеквизитов_Товар_Товары_Документ_КоммерческаяИнформация_", "ДопЗначениеРеквизитаТовара");
		
	//Типы цен
	СтруктураЗагрузки.Вставить("ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_",              "НовыйТипЦены");
	СтруктураЗагрузки.Вставить("Ид_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_",           "ИдТипаЦены");
	СтруктураЗагрузки.Вставить("Наименование_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_", "ИмяТипаЦены");
	СтруктураЗагрузки.Вставить("Валюта_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_",       "ВалютаТипаЦены");
	СтруктураЗагрузки.Вставить("Наименование_Налог_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_", "ИмяНалога");
	СтруктураЗагрузки.Вставить("УчтеноВСумме_Налог_ТипЦены_ТипыЦен_ПакетПредложений_КоммерческаяИнформация_", "НДСВСуммеПрайс");

	//Владелец каталога
	СтруктураЗагрузки.Вставить("Наименование_Владелец_Каталог_КоммерческаяИнформация_",            "ИмяКонтрагента");
	СтруктураЗагрузки.Вставить("ИНН_Владелец_Каталог_КоммерческаяИнформация_",                     "ИННКонтрагента");
	СтруктураЗагрузки.Вставить("КПП_Владелец_Каталог_КоммерческаяИнформация_",                     "КППКонтрагента");
	СтруктураЗагрузки.Вставить("ОКПО_Владелец_Каталог_КоммерческаяИнформация_",                    "ОКПОКонтрагента");
	СтруктураЗагрузки.Вставить("ОфициальноеНаименование_Владелец_Каталог_КоммерческаяИнформация_", "ПолноеНаименование");
	СтруктураЗагрузки.Вставить("ПолноеНаименование_Владелец_Каталог_КоммерческаяИнформация_",      "ПолноеНаименование");
	СтруктураЗагрузки.Вставить("ЮридическийАдрес_Владелец_Каталог_КоммерческаяИнформация_",        "ЮрАдресКонтрагента");
	
	//Владелец прайса
	СтруктураЗагрузки.Вставить("Наименование_Владелец_ПакетПредложений_КоммерческаяИнформация_",            "ИмяКонтрагента");
	СтруктураЗагрузки.Вставить("ИНН_Владелец_ПакетПредложений_КоммерческаяИнформация_",                     "ИННКонтрагента");
	СтруктураЗагрузки.Вставить("КПП_Владелец_ПакетПредложений_КоммерческаяИнформация_",                     "КППКонтрагента");
	СтруктураЗагрузки.Вставить("ОКПО_Владелец_ПакетПредложений_КоммерческаяИнформация_",                    "ОКПОКонтрагента");
	СтруктураЗагрузки.Вставить("ОфициальноеНаименование_Владелец_ПакетПредложений_КоммерческаяИнформация_", "ПолноеНаименование");
	СтруктураЗагрузки.Вставить("ПолноеНаименование_Владелец_Каталог_ПакетПредложений_",                     "ПолноеНаименование");
	СтруктураЗагрузки.Вставить("ЮридическийАдрес_Владелец_Каталог_ПакетПредложений_",                       "ЮрАдресКонтрагента");
	
	//Контрагенты в документе
	СтруктураЗагрузки.Вставить("Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",              "КонтрагентДок");
	СтруктураЗагрузки.Вставить("Наименование_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "ИмяКонтрагентаДок");
	СтруктураЗагрузки.Вставить("ИНН_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",          "ИННКонтрагентаДок");
	СтруктураЗагрузки.Вставить("КПП_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",          "КППКонтрагентаДок");
	СтруктураЗагрузки.Вставить("ОКПО_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",         "ОКПОКонтрагентаДок");
	СтруктураЗагрузки.Вставить("Роль_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",         "РольКонтрагента");
	СтруктураЗагрузки.Вставить("ОфициальноеНаименование_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "ПолноеНаименованиеКонтрагентаДок");
	СтруктураЗагрузки.Вставить("ПолноеНаименование_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",      "ПолноеНаименованиеКонтрагентаДок");
	СтруктураЗагрузки.Вставить("ЮридическийАдрес_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_",  "ЮрАдресКонтрагента");
	
	//Банковские счета
	СтруктураЗагрузки.Вставить("НомерСчета_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "НомерСчета");
	СтруктураЗагрузки.Вставить("НомерСчета_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "НомерСчета");
	СтруктураЗагрузки.Вставить("НомерСчета_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "НомерСчета");
	
	//Банк
	СтруктураЗагрузки.Вставить("СчетКорреспондентский_Банк_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкСчетКорреспондентский");
	СтруктураЗагрузки.Вставить("Наименование_Банк_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкНаименование");
	СтруктураЗагрузки.Вставить("Представление_Адрес_Банк_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкАдрес");
	СтруктураЗагрузки.Вставить("БИК_Банк_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкБИК");
	
	СтруктураЗагрузки.Вставить("СчетКорреспондентский_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкСчетКорреспондентский");
	СтруктураЗагрузки.Вставить("Наименование_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкНаименование");
	СтруктураЗагрузки.Вставить("Представление_Адрес_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкАдрес");
	СтруктураЗагрузки.Вставить("БИК_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкБИК");
	
	СтруктураЗагрузки.Вставить("СчетКорреспондентский_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкСчетКорреспондентский");
	СтруктураЗагрузки.Вставить("Наименование_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкНаименование");
	СтруктураЗагрузки.Вставить("Представление_Адрес_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкАдрес");
	СтруктураЗагрузки.Вставить("БИК_Банк_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкБИК");	
	
	//Банк не прямых расходов
	СтруктураЗагрузки.Вставить("СчетКорреспондентский_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкСчетКорреспондентский");
	СтруктураЗагрузки.Вставить("Наименование_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкНаименование");
	СтруктураЗагрузки.Вставить("Представление_Адрес_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкАдрес");
	СтруктураЗагрузки.Вставить("БИК_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Контрагент_Контрагенты_Документ_КоммерческаяИнформация_", "БанкБИК");
	
	СтруктураЗагрузки.Вставить("СчетКорреспондентский_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкСчетКорреспондентский");
	СтруктураЗагрузки.Вставить("Наименование_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкНаименование");
	СтруктураЗагрузки.Вставить("Представление_Адрес_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкАдрес");
	СтруктураЗагрузки.Вставить("БИК_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_Каталог_КоммерческаяИнформация_", "БанкБИК");
	
	СтруктураЗагрузки.Вставить("СчетКорреспондентский_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкСчетКорреспондентский");
	СтруктураЗагрузки.Вставить("Наименование_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкНаименование");
	СтруктураЗагрузки.Вставить("Представление_Адрес_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкАдрес");
	СтруктураЗагрузки.Вставить("БИК_БанкНЕПрямыхРасходов_РасчетныйСчет_РасчетныеСчета_Владелец_ПакетПредложений_КоммерческаяИнформация_", "БанкБИК");
	

	//Шапка документа
	СтруктураЗагрузки.Вставить("Ид_Документ_КоммерческаяИнформация_",  "УникальныйИдентификатор");
	СтруктураЗагрузки.Вставить("СрокПлатежа_Документ_КоммерческаяИнформация_",  "СрокПлатежа");
	СтруктураЗагрузки.Вставить("Номер_Документ_КоммерческаяИнформация_",  "НомерДок");
	СтруктураЗагрузки.Вставить("Дата_Документ_КоммерческаяИнформация_",   "ДатаДок");
	СтруктураЗагрузки.Вставить("Время_Документ_КоммерческаяИнформация_",   "ВремяДок");
	СтруктураЗагрузки.Вставить("Валюта_Документ_КоммерческаяИнформация_", "ВалютаДок");
	СтруктураЗагрузки.Вставить("Курс_Документ_КоммерческаяИнформация_",   "КурсДок");
	СтруктураЗагрузки.Вставить("Комментарий_Документ_КоммерческаяИнформация_",   "Комментарий");
	
	СтруктураЗагрузки.Вставить("ЗначениеРеквизита_ЗначенияРеквизитов_Документ_КоммерческаяИнформация_",   "ЗначениеРеквизита");
	
	СтруктураЗагрузки.Вставить("Наименование_Налог_Налоги_Документ_КоммерческаяИнформация_", "ИмяНалога");
	СтруктураЗагрузки.Вставить("УчтеноВСумме_Налог_Налоги_Документ_КоммерческаяИнформация_", "НДСВСуммеДок");

КонецПроцедуры

// Процедура очищает табличные части обработки и устанавливает значения 
//вспомогательных переменных
//
Процедура ОчиститьТаблицы()

	ЭлДокументы.Очистить();
	ТоварыКаталог.Очистить();
	ТоварыПрайс.Очистить();
	ТоварыДокумент.Очистить();
	ДокументыОснования.Очистить();
	СоответствияТиповЦен.Очистить();
	ХарактеристикиНоменклатуры.Очистить();
	ЗначенияСвойствТоваров.Очистить();
	КонтактнаяИнформацияКонтрагента.Очистить();
	
	мСоотвествияКаталогов = Новый Соответствие;
	мИдДокумента = 0;
	
	мТаблицаСвойствКаталога = Новый ТаблицаЗначений;
	мТаблицаСвойствКаталога.Колонки.Добавить("Ид");
	мТаблицаСвойствКаталога.Колонки.Добавить("Наименование");
	мТаблицаСвойствКаталога.Индексы.Добавить("Ид");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ АЛГОРИТМОВ ЗАГРУЗКИ ДАННЫХ

// Функция преобразует строку в дату
//
// Параметры:
//  Зн - строка - дата в формате ГГГГ-ММ-ЧЧ
//
// Возвращаемое значение:
//  Значение типа "Дата"
//
Функция ПолучитьДатуИзСтроки(Зн)
	
	ПозРазделителя = Найти(Зн, "-");
	Если ПозРазделителя = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	Зн1  = СокрЛП(Лев(Зн, ПозРазделителя - 1));
	Зн2 = СокрЛП(Прав(Зн, СтрДлина(Зн) - ПозРазделителя));
 
	ПозРазделителя = Найти(Зн2, "-");
	Если ПозРазделителя = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	Зн3 = СокрЛП(Лев(Зн2, ПозРазделителя - 1));
	Зн4 = Сред(СокрЛП(Прав(Зн2, СтрДлина(Зн2) - ПозРазделителя)), 1, 2);
	
	Возврат Дата(Зн1, Зн3, Зн4);
	
КонецФункции

// Функция определяет является ли значение пустой ссылкой
//
//Параметры:
// Значение - значение для определения типа
//
// Возвращаемое значение
//  булево - ИСТИНА если значение НЕ пустая ссылка, иначе ЛОЖЬ
//
Функция ЗначениеНеПустаяСсылка(Значение) Экспорт

	Если ТипЗнч(Значение) <> Тип("Строка") 
		И ЗначениеЗаполнено(Значение) Тогда
		
		Возврат ИСТИНА;
		
	Иначе
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;

КонецФункции

// Функция определяет является ли не пустой ссылкой
//
//Параметры:
// Значение - значение для определения типа
//
// Возвращаемое значение
//  булево - ИСТИНА если значение пустая ссылка или строка, иначе ЛОЖЬ
//
Функция ЗначениеНеОпределено(Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат ИСТИНА;
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции

// Функция определяет является ли не пустой строкой
//
//Параметры:
// Значение - значение для определения типа
//
// Возвращаемое значение
//  булево - ИСТИНА если значение НЕ пустая строка, иначе ЛОЖЬ
//
Функция ЗначениеНеПустаяСтрока(Значение)

	Если ТипЗнч(Значение) = Тип("Строка") И ЗначениеЗаполнено(Значение) Тогда
		Возврат ИСТИНА;
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции

// Процедура читает текстовой узел XML документа
//
// Параметры:
//  ОбъектXML - объект типа ЧтениеXML
//
Функция ПолучитьТекстЭлемента(ОбъектXML)

	Если ОбъектXML.Прочитать() И ОбъектXML.ТипУзла = ТипУзлаXML.Текст Тогда
		Возврат ОбъектXML.Значение;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Функция возвращает строки таблицы отобранные по реквизиту "ИдДокумента"
//
// Таблица     - табличная часть
// ИдДокумента - значение для отбора
//
// Возвращаемое значение:
//  массив строк табличной части
//
Функция НайтиСтрокиДокумента(Таблица, ИдДокумента)

	Отбор = Новый Структура("ИдДокумента", ИдДокумента);
	Возврат Таблица.НайтиСтроки(Отбор);

КонецФункции

// Процедура устанавливает признак ведения номенклатуры в разрезе серий номенклатуры
//
// Параметры
//  НоваяСтрока  - Строка табличной части ТоварыДокумент
//
Процедура УстановитьПризнакВеденияПоСериямНоменклатуры(НоваяСтрока)

	Если глЗначениеПеременной("ИспользоватьСерииНоменклатуры")
		И ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры)
		И НЕ НоваяСтрока.Номенклатура.ВестиУчетПоСериям Тогда
			объектНоменклатура = НоваяСтрока.Номенклатура.ПолучитьОбъект();
			объектНоменклатура.ВестиУчетПоСериям = Истина;
			объектНоменклатура.ВестиПартионныйУчетПоСериям = Истина;
			Попытка
				объектНоменклатура.Записать();
			Исключение
			КонецПопытки;
	КонецЕсли;

КонецПроцедуры // УстановитьПризнакВеденияПоСериямНоменклатуры()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОЗДАНИЯ НОВЫХ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

Функция НайтиПоСтрокеКаталогИлиСоздать(ПолныйПутьККаталогу)
	
	Каталог = Неопределено;
	
	ПозицияСлеша = Найти(ПолныйПутьККаталогу, "\");
	Если ПозицияСлеша > 0 Тогда
		
		НачалоКаталога = Сред(ПолныйПутьККаталогу, 1, ПозицияСлеша - 1);
		НачальныйКаталог = НайтиПоСтрокеКаталогИлиСоздать(НачалоКаталога);
		ИмяЭлемента = Сред(ПолныйПутьККаталогу, ПозицияСлеша + 1)
		
	Иначе
		
		НачальныйКаталог = Справочники.Номенклатура.ПустаяСсылка();
		ИмяЭлемента = ПолныйПутьККаталогу;
		
	КонецЕсли;
	
	Каталог = Справочники.Номенклатура.НайтиПоНаименованию(ИмяЭлемента, , НачальныйКаталог);
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		
		ЭлементНоменкалтуры = Справочники.Номенклатура.СоздатьГруппу();
		ЭлементНоменкалтуры.Наименование = ИмяЭлемента;
		ЭлементНоменкалтуры.Родитель = НачальныйКаталог;
		ЭлементНоменкалтуры.Записать();
		
		Каталог = ЭлементНоменкалтуры.Ссылка;
		
	КонецЕсли;	
	
	мСоотвествияКаталогов[ПолныйПутьККаталогу] = Каталог;
	Возврат Каталог;
	
КонецФункции

Функция ВернутьПоКаталогуСсылкуНаРодителя(ИдКаталога)
	
	ЭлементРодителяИлиСтрока = мСоотвествияКаталогов[ИдКаталога];
	
	Если ЗначениеНеПустаяСсылка(ЭлементРодителяИлиСтрока) Тогда
		Возврат ЭлементРодителяИлиСтрока;
	КонецЕсли;
	
	// элемент это строка, нужно по строке найти каталог
	Каталог = НайтиПоСтрокеКаталогИлиСоздать(ЭлементРодителяИлиСтрока);
	
	Возврат Каталог;
	
КонецФункции

// Функция возвращает новый элемент справочника "Номенклатура
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "Номенклатура"
//
Функция СоздатьНоменклатуру(СтрокаДанных, ИскатьРодителя = Истина) Экспорт

	СпрНоменклатура                         = Справочники.Номенклатура.СоздатьЭлемент();
	
	СпрНоменклатура.Наименование = ?(ПустаяСтрока(СтрокаДанных.НаименованиеКраткое), СтрокаДанных.НаименованиеПолное, СтрокаДанных.НаименованиеКраткое);
		
	Если ПустаяСтрока(СпрНоменклатура.Наименование) Тогда
		
		СпрНоменклатура.Наименование = СтрокаДанных.Наименование;
		
	КонецЕсли;

	
	Если мИспользоватьХарактеристикиУНоменклатуры Тогда
	
		СпрНоменклатура.НаименованиеПолное = ?(ПустаяСтрока(СтрокаДанных.НаименованиеПолное), СтрокаДанных.Наименование, СтрокаДанных.НаименованиеПолное);
		
		Если ПустаяСтрока(СпрНоменклатура.НаименованиеПолное) Тогда
			
			СпрНоменклатура.Наименование = СтрокаДанных.НаименованиеКраткое;
			
		КонецЕсли;		
				
	Иначе
		
		СпрНоменклатура.НаименованиеПолное = ?(ПустаяСтрока(СтрокаДанных.Наименование), СтрокаДанных.НаименованиеПолное, СтрокаДанных.Наименование);
		
		Если ПустаяСтрока(СпрНоменклатура.НаименованиеПолное) Тогда
			
			СпрНоменклатура.Наименование = СтрокаДанных.НаименованиеКраткое;
			
		КонецЕсли;		
	
	КонецЕсли;
	
	СпрНоменклатура.Артикул                 = СтрокаДанных.Артикул;
	СпрНоменклатура.БазоваяЕдиницаИзмерения = СтрокаДанных.БазоваяЕдиницаИзмерения;
	
	СпрНоменклатура.Комментарий  = КомментарийДляДокументов;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СтавкаНДС) Тогда
		СпрНоменклатура.СтавкаНДС = СтрокаДанных.СтавкаНДС;
	Иначе
		СпрНоменклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ВидНоменклатуры) Тогда
		
		Если ТипЗнч(СтрокаДанных.ВидНоменклатуры) = Тип("Строка") Тогда
			
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(СтрокаДанных.ВидНоменклатуры);
			
			Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
				
				СпрНоменклатура.ВидНоменклатуры = ВидНоменклатуры;
				ОпределитьСоответствияВидовНоменклатуры();
				
			Иначе
				
				// не нашли по наименованию... создаем как можем
				
				СпрВидовНоменклатуры = СоздатьВидНоменклатуры(СтрокаДанных);
				СпрВидовНоменклатуры.Записать();
				
				СпрНоменклатура.ВидНоменклатуры = СпрВидовНоменклатуры.Ссылка;
				ОпределитьСоответствияВидовНоменклатуры();
				
			КонецЕсли;
			
		Иначе
			
			СпрНоменклатура.ВидНоменклатуры = СтрокаДанных.ВидНоменклатуры;			
			
		КонецЕсли;		
		
	Иначе
		
		// подставляем вид номенклатуры по умолчанию
		СпрНоменклатура.ВидНоменклатуры = мВидНоменклатурыПоУмолчанию;		
				
	КонецЕсли;
	
	Если ИскатьРодителя
		И ЗначениеЗаполнено(СтрокаДанных.ИдКаталога) Тогда
		
		СпрНоменклатура.Родитель = ВернутьПоКаталогуСсылкуНаРодителя(СтрокаДанных.ИдКаталога);	
		
	КонецЕсли;
	
	// проанализируем, если ли характеристики номенклатуры
	Если мИспользоватьХарактеристикиУНоменклатуры Тогда
		
		СтрокиСвойств = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаДанных.Ид);
		СпрНоменклатура.ВестиУчетПоХарактеристикам = (СтрокиСвойств.Количество() > 0);
		
	КонецЕсли;
	
	Возврат СпрНоменклатура;

КонецФункции

Функция ПолучитьМассивСтрокХарактеристикНоменкалтуры(Ид) Экспорт
	
	СтрокиСвойств = ХарактеристикиНоменклатуры.НайтиСтроки(Новый структура("Ид", Ид));
	Возврат СтрокиСвойств;
	
КонецФункции

// Функция возвращает новый элемент справочника "ТипыЦенКонтрагентов"
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "ТипыЦенКонтрагентов"
//
Функция СоздатьТипЦен(СтрокаДанных) Экспорт

	Если НЕ ЗначениеНеПустаяСсылка(СтрокаДанных.Контрагент) Тогда
		
		ВыполнитьЗаменуВсехСоответствий();
		
	КонецЕсли;
	
	Если НЕ ЗначениеНеПустаяСсылка(СтрокаДанных.Контрагент) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не сопоставлен контрагент для типа цен: " + СтрокаДанных.ТипЦены + "
			|Необходимо сопоставить контрагенту " + СтрокаДанных.Контрагент + " элемент справочника, применить соответствие и повторить операцию.");
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	СпрТипЦен                 = Справочники.ТипыЦенНоменклатурыКонтрагентов.СоздатьЭлемент();
	СпрТипЦен.Владелец        = СтрокаДанных.Контрагент;
	СпрТипЦен.Наименование    = СтрокаДанных.ТипЦены;
	СпрТипЦен.ЦенаВключаетНДС = СтрокаДанных.НДСВСумме;
	СпрТипЦен.ВалютаЦены      = СтрокаДанных.Валюта;
	СпрТипЦен.Комментарий     = КомментарийДляДокументов;
	Возврат СпрТипЦен;

КонецФункции

// Функция возвращает новый элемент справочника "КлассификаторЕдиницИзмерения
//
// Параметры:
//  ИмяЕдиницыИзмерения - наименование новой единицы измерения
//
// Возвращаемое значение:
//  новый справочник-объект "КлассификаторЕдиницИзмерения"
//
Функция СоздатьЕдиницуИзмерения(СтрокаТаблицы) Экспорт

	СпрЕдиница                    = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	СпрЕдиница.Код       		  = СтрокаТаблицы.Код;
	СпрЕдиница.Наименование       = СтрокаТаблицы.ЕдиницаИзмерения;
	СпрЕдиница.НаименованиеПолное = СтрокаТаблицы.НаименованиеПолное;
	СпрЕдиница.МеждународноеСокращение = СтрокаТаблицы.МеждународноеСокращение;
	Возврат СпрЕдиница;

КонецФункции

// Функция возвращает новый элемент справочника "Валюты"
//
// Параметры:
//  ИмяВалюты - наименование новой валюты
//
// Возвращаемое значение:
//  новый справочник-объект "Валюты"
//
Функция СоздатьВалюту(СтрокаТаблицы) Экспорт

	СтрокаВалюты = Строка(СтрокаТаблицы.Валюта);
	
	СпрВалюта                    = Справочники.Валюты.СоздатьЭлемент();
	СпрВалюта.Наименование       = СтрокаВалюты;
	Возврат СпрВалюта;

КонецФункции

Функция СоздатьКачество(СтрокаТаблицы) Экспорт

	СтрокаКачества = Строка(СтрокаТаблицы.Качество);
	
	СпрКачество                    = Справочники.Качество.СоздатьЭлемент();
	СпрКачество.Наименование       = СтрокаКачества;
	Возврат СпрКачество;

КонецФункции

// Функция возвращает новый элемент справочника "Организации"
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "Организации"
//
Функция СоздатьОрганизацию(СтрокаДанных) Экспорт

	СпрОрганизация              = Справочники.Организации.СоздатьЭлемент();
	СпрОрганизация.Наименование = СтрокаДанных.Организация;
	СпрОрганизация.НаименованиеПолное = СтрокаДанных.НаименованиеПолное;
	СпрОрганизация.ИНН          = СтрокаДанных.ИННОрганизации;
	СпрОрганизация.КПП          = СтрокаДанных.КППОрганизации;
	СпрОрганизация.КодПоОКПО    = СтрокаДанных.ОКПООрганизации;
	СпрОрганизация.ЮрФизЛицо    = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Возврат СпрОрганизация

КонецФункции

Функция СоздатьВидНоменклатуры(СтрокаДанных) Экспорт
	
	Если СтрокаДанных.ТипНоменклатуры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпрВидНоменклатуры           = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	СпрВидНоменклатуры.Наименование = СтрокаДанных.ВидНоменклатуры;
	СпрВидНоменклатуры.ТипНоменклатуры  = ПолучитьЗначениеПеречисления(СтрокаДанных.ТипНоменклатуры, "ТипыНоменклатуры");
		
	Возврат СпрВидНоменклатуры

КонецФункции

// Функция возвращает новый элемент справочника "Контрагенты"
//
// Параметры:
//  СтрокаДанных - строка табличной части для заполнения реквизитов нового элемента
//
// Возвращаемое значение:
//  новый справочник-объект "Контрагенты"
//
Функция СоздатьКонтрагента(СтрокаДанных) Экспорт

	СпрКонтрагент              = Справочники.Контрагенты.СоздатьЭлемент();
	СпрКонтрагент.Наименование = СтрокаДанных.Контрагент;
	СпрКонтрагент.НаименованиеПолное = СтрокаДанных.НаименованиеПолное;
	СпрКонтрагент.ИНН          = СтрокаДанных.ИННКонтрагента;
	СпрКонтрагент.КПП          = СтрокаДанных.КППКонтрагента;
	СпрКонтрагент.КодПоОКПО    = СтрокаДанных.ОКПОКонтрагента;
	СпрКонтрагент.ЮрФизЛицо    = Перечисления.ЮрФизЛицо.ЮрЛицо;
	СпрКонтрагент.Покупатель   = СтрокаДанных.Покупатель;
	СпрКонтрагент.Поставщик    = СтрокаДанных.Поставщик;
	СпрКонтрагент.Комментарий  = КомментарийДляДокументов;
	Возврат СпрКонтрагент

КонецФункции

Функция СоздатьБанк(СтрокаДанных) Экспорт

	СпрБанк              = Справочники.Банки.СоздатьЭлемент();
	СпрБанк.Наименование = СтрокаДанных.Наименование;
	СпрБанк.Адрес          = СтрокаДанных.Адрес;
	СпрБанк.КоррСчет    = СтрокаДанных.СчетКорреспондентский;
	СпрБанк.Код    = СтрокаДанных.Банк;
	Возврат СпрБанк;

КонецФункции

Функция СоздатьБанковскиеСчета(СтрокаДанных) Экспорт
	
	Если НЕ ЗначениеНеПустаяСсылка(СтрокаДанных.Контрагент) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не сопоставлен контрагент для счета: " + СтрокаДанных.НомерСчета + "
			|Необходимо сопоставить контрагенту " + СтрокаДанных.Контрагент + " элемент справочника, применить соответствие и повторить операцию.");
			
		Возврат Неопределено;
		
	КонецЕсли;		
	
	СпрБанковскийСчет    = Справочники.БанковскиеСчета.СоздатьЭлемент();
	СпрБанковскийСчет.Владелец = СтрокаДанных.Контрагент;
	СпрБанковскийСчет.Банк     = СтрокаДанных.Банк;
	СпрБанковскийСчет.БанкДляРасчетов  = СтрокаДанных.БанкНеПрямыхРасходов;
	СпрБанковскийСчет.НомерСчета  = СтрокаДанных.НомерСчета;
	СпрБанковскийСчет.Наименование  = СтрокаДанных.НомерСчета;	
	
	Возврат СпрБанковскийСчет;

КонецФункции

Процедура ЗаписатьЗначениеСвойства(Объект, Свойство, Значение)
	
	НаборЗаписейРегистра = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Установить(Объект);
	НаборЗаписейРегистра.Отбор.Свойство.Установить(Свойство);
	
	СтрокаНабора = НаборЗаписейРегистра.Добавить();
	СтрокаНабора.Объект = Объект;
	СтрокаНабора.Свойство = Свойство;
	СтрокаНабора.Значение = Значение;
	
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Процедура ПроизвестиПроверкуВеденияХарактеристикДляНоменклатуры(СсылкаНаНоменклатуру) Экспорт
	
	Если СсылкаНаНоменклатуру.ВестиУчетПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНоменклатуры = СсылкаНаНоменклатуру.ПолучитьОбъект();
	ОбъектНоменклатуры.ВестиУчетПоХарактеристикам = Истина;
	ОбъектНоменклатуры.Записать();	
	
КонецПроцедуры

Функция ВернутьСсылкуНаСвойствоНоменклатурыПоНаименованию(НаименованиеСвойства, СвойствоСтроковое, СвойствоСсылкаНаЗначенияСвойств, НазначениеСвойства)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	СвойстваОбъектов.Ссылка,
				   |	СвойстваОбъектов.ТипЗначения
				   |	
				   |ИЗ
				   |	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
				   |ГДЕ
				   |	СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства
				   |	И СвойстваОбъектов.Наименование = &Наименование";
				   
	Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	Запрос.УстановитьПараметр("Наименование", НаименованиеСвойства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СсылкаНаСвойство = Неопределено;
	СвойствоСтроковое = Ложь;
	СвойствоСсылкаНаЗначенияСвойств = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеТипа = Выборка.ТипЗначения;
		
		Если ОписаниеТипа.СодержитТип(Тип("Строка")) Тогда
			
			СвойствоСтроковое = Истина;
			Возврат Выборка.Ссылка;
			
		ИначеЕсли ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
			
			СвойствоСсылкаНаЗначенияСвойств = Истина;
			Возврат Выборка.Ссылка;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СсылкаНаСвойство) Тогда
		
		// свойство НЕ нашли
		// создаем новое свойство
		НовоеСвойство = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		НовоеСвойство.Наименование = НаименованиеСвойства;
		
		КС = Новый КвалификаторыСтроки(50);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
		
		НовоеСвойство.ТипЗначения = ОписаниеТиповС;
		
		НовоеСвойство.НазначениеСвойства = НазначениеСвойства;
		
		НовоеСвойство.Записать();
		СсылкаНаСвойство = НовоеСвойство.Ссылка;
		
		СвойствоСтроковое = Истина;
		
	КонецЕсли;
	
	Возврат СсылкаНаСвойство;
	
КонецФункции

Процедура СохранитьЗначениеСвойстваОбъекта(СсылкаНаОбъект, СсылкаНаСвойство, ЗначениеСвойства, СвойствоСтроковое)
	
	Если СвойствоСтроковое Тогда
		// свойство строковое
		ЗаписатьЗначениеСвойства(СсылкаНаОбъект, СсылкаНаСвойство, ЗначениеСвойства);
	Иначе
		// свойство - одно из возможных значений
		СсылкаНаЗначение = Неопределено;
		
		// ищем значение с именем, подчиненное свойству
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ первые 1
					   |	ЗначенияСвойствОбъектов.Ссылка
					   |ИЗ
					   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					   |ГДЕ
					   |	ЗначенияСвойствОбъектов.Владелец = &Владелец
					   |	И ЗначенияСвойствОбъектов.Наименование = &Наименование";
					   
		Запрос.УстановитьПараметр("Владелец", СсылкаНаСвойство);
		Запрос.УстановитьПараметр("Наименование", ЗначениеСвойства);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СсылкаНаЗначение = Выборка.Ссылка;
		Иначе
			// нужно создавать новое значение
			Значение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			Значение.Владелец = СсылкаНаСвойство;
			Значение.Наименование = ЗначениеСвойства;
			Значение.Записать();
			
			СсылкаНаЗначение = Значение.ссылка;
			
		КонецЕсли;
		
		ЗаписатьЗначениеСвойства(СсылкаНаОбъект, СсылкаНаСвойство, СсылкаНаЗначение);

	КонецЕсли;	
	
КонецПроцедуры

Функция СоздатьХарактеристикиНоменклатуры(СтрокаДанных) Экспорт
	
	// проверка того, что для номенклатуры ведутся характеристики
	ПроизвестиПроверкуВеденияХарактеристикДляНоменклатуры(СтрокаДанных.Номенклатура);
	
	СпрХарактеристика    = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();	 
	
	МассивСтрок = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаДанных.Ид);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат СпрХарактеристика;
	КонецЕсли;
	
	СпрХарактеристика.Владелец = СтрокаДанных.Номенклатура;
	
	СпрХарактеристика.Записать();
	
	СсылкаНаХарактеристику = СпрХарактеристика.Ссылка;
	
	// нужно пройти по наименованиям, найти нужные свойства
	Для Каждого СтрокаСвойства Из МассивСтрок Цикл
		
		СвойствоСтроковое = Ложь;
		СвойствоСсылкаНаЗначенияСвойств = Ложь;
		СсылкаНаСвойство = ВернутьСсылкуНаСвойствоНоменклатурыПоНаименованию(СтрокаСвойства.Наименование, СвойствоСтроковое, 
			СвойствоСсылкаНаЗначенияСвойств, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);		
		
		ЗначениеСвойства = Строка(СтрокаСвойства.Значение);
		
		СохранитьЗначениеСвойстваОбъекта(СсылкаНаХарактеристику, СсылкаНаСвойство, ЗначениеСвойства, СвойствоСтроковое);		
				
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Свойство,
	               |	ЗначенияСвойствОбъектов.Значение,
				   |	Ложь КАК ПометкаУдаления
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Объект = &Объект";
				   
	Запрос.УстановитьПараметр("Объект", СсылкаНаХарактеристику);
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	
	СпрХарактеристика.Наименование = СпрХарактеристика.СформироватьНаименование(ТаблицаСвойств);
		
	Возврат СпрХарактеристика;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ СОЗДАНИЕМ НОВЫХ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Процедура создает элементы справочника, открывает форму нового элемента,
// если элемент записан ссылка присвается переданному значению
//
// Параметры:
//  Форма          - форма из которой вызвана процедура
//  Значение       - переменная, в которое пишем ссылку на новый элемента
//  СтрокаТаблицы  - структура с параметрами для процедур создания нового объекта
//  ТипСправочника - строка-тип справочника, элемент которго создаем
//
Процедура СоздатьЭлементСправочникаИтеративно(Форма, Значение, СтрокаТаблицы, ТипСправочника) Экспорт

	Если ТипСправочника = "Контрагенты" Тогда
		Спр = СоздатьКонтрагента(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "Организации" Тогда
		Спр = СоздатьОрганизацию(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "ВидыНоменклатуры" Тогда
		Спр = СоздатьВидНоменклатуры(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "Валюты" Тогда
		Спр = СоздатьВалюту(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "КлассификаторЕдиницИзмерения" Тогда
		Спр = СоздатьЕдиницуИзмерения(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "Номенклатура" Тогда
		Спр = СоздатьНоменклатуру(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "ТипыЦенНоменклатурыКонтрагентов" Тогда
		Спр = СоздатьТипЦен(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "Банки" Тогда
		Спр = СоздатьБанк(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "БанковскиеСчета" Тогда
		Спр = СоздатьБанковскиеСчета(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "ХарактеристикиНоменклатуры" Тогда
		Спр = СоздатьХарактеристикиНоменклатуры(СтрокаТаблицы);
	ИначеЕсли ТипСправочника = "Качество" Тогда
		Спр = СоздатьКачество(СтрокаТаблицы);
	Иначе
		Возврат;
	КонецЕсли;

	Если Спр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСправочника = Спр.ПолучитьФорму( , Форма);
	ФормаСправочника.ОткрытьМодально();

	//Если записан то присваиваем
	Если НЕ Спр.ЭтоНовый() Тогда
		Значение = Спр.Ссылка;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЦ СООТВЕТСТВИЙ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

Процедура ДобавитьТипДляОбработкиВТаблицу(Таблица, ИмяДокументаВФайле, 
	ИмяДокументаВИнформационнойБазе, ИмяДокументаДляПользователя, 
	КонтрагентПокупатель)
	
	КонтрагентПоставщик = НЕ КонтрагентПокупатель;
	
	СтрокаТаблицы = Таблица.Добавить();	
	СтрокаТаблицы.ИмяДокументаВФайле = ИмяДокументаВФайле;
	СтрокаТаблицы.ИмяДокументаВИнформационнойБазе = ИмяДокументаВИнформационнойБазе;
	СтрокаТаблицы.ИмяДокументаДляПользователя = ИмяДокументаДляПользователя;
	
	Если КонтрагентПокупатель Тогда
	    СтрокаТаблицы.РольКонтрагента = "Покупатель,Комиссионер";
		СтрокаТаблицы.РольОрганизации = "Продавец,Комитент";
	Иначе
		СтрокаТаблицы.РольКонтрагента = "Продавец,Комитент";
		СтрокаТаблицы.РольОрганизации = "Покупатель,Комиссионер";
	КонецЕсли;		
		
	СтрокаТаблицы.КонтрагентПокупатель = КонтрагентПокупатель;
	СтрокаТаблицы.КонтрагентПоставщик = КонтрагентПоставщик;
	
КонецПроцедуры

Функция ВернутьТаблицуВозможныхДокументовДляЗагрузки()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяДокументаВФайле");
	Таблица.Колонки.Добавить("ИмяДокументаВИнформационнойБазе");
	Таблица.Колонки.Добавить("ИмяДокументаДляПользователя");
	Таблица.Колонки.Добавить("РольКонтрагента");
	Таблица.Колонки.Добавить("КонтрагентПокупатель");
	Таблица.Колонки.Добавить("КонтрагентПоставщик");
	Таблица.Колонки.Добавить("РольОрганизации");
	
	ДобавитьТипДляОбработкиВТаблицу(Таблица, "Заказ товара", "ЗаказПокупателя", "Заказ покупателя", Истина);	
	ДобавитьТипДляОбработкиВТаблицу(Таблица, "Счет на оплату", "СчетНаОплатуПоставщика", "Счет на оплату поставщика", Ложь);
	ДобавитьТипДляОбработкиВТаблицу(Таблица, "Отпуск товара", "ПоступлениеТоваровУслуг", "Поступление товаров и услуг", Ложь);
	ДобавитьТипДляОбработкиВТаблицу(Таблица, "Счет-фактура", "СчетФактураПолученный", "Счет-фактура полученный", Ложь);
	ДобавитьТипДляОбработкиВТаблицу(Таблица, "Переоценка товаров", "ПереоценкаТоваровПринятыхНаКомиссию", "Переоценка товаров принятых на комиссию", Ложь);
	ДобавитьТипДляОбработкиВТаблицу(Таблица, "Возврат товара", "ВозвратТоваровОтПокупателя", "Возврат товаров от покупателя", Истина);
	ДобавитьТипДляОбработкиВТаблицу(Таблица, "Отчет о продажах комиссионного товара", "ОтчетКомиссионераОПродажах", "Отчет комиссионера о продажах", Истина);
	
	Возврат Таблица;
	
КонецФункции

Функция ОпределитьПоСтрокеТаблицыЭтоДокументОбмена(СтрокаТаблицы) Экспорт
	
	СтрокаТаблицыПоиска = мТаблицаВозможныхТиповДокументов.Найти(СтрокаТаблицы.Тип, "ИмяДокументаДляПользователя"); 
	
	Возврат СтрокаТаблицыПоиска <> Неопределено;
	
КонецФункции

Функция ПолучитьИмяДокументаПоПредставлению(ПредставлениеДокумента)
	
	СтрокаТаблицы = мТаблицаВозможныхТиповДокументов.Найти(ПредставлениеДокумента, "ИмяДокументаДляПользователя");
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаТаблицы.ИмяДокументаВИнформационнойБазе;
	
КонецФункции

Функция ОпределитьПоХозОперацииТипДокумента(ТипХозОперации)
	
	СтрокаТаблицы = мТаблицаВозможныхТиповДокументов.Найти(ТипХозОперации, "ИмяДокументаВФайле");
	
	Если СтрокаТаблицы <> Неопределено Тогда
		
		Возврат СтрокаТаблицы.ИмяДокументаДляПользователя;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ОпределитьПоРолиКонтрагентаОрганизацияИКонтрагентаВДокумента(ТекСтрДокументы)
	
	СтрокаТаблицы = мТаблицаВозможныхТиповДокументов.Найти(ТекСтрДокументы.Тип, "ИмяДокументаДляПользователя");
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(СтрокаТаблицы.РольКонтрагента, мРольКонтрагента) > 0 Тогда
		
		мТекСтрДокументы.Контрагент     = мИмяКонтрагента;
		мТекСтрДокументы.ИННКонтрагента = мИННКонтрагента;
		мТекСтрДокументы.КППКонтрагента = мКППКонтрагента;
		мТекСтрДокументы.ОКПОКонтрагента = мОКПОКонтрагента;
		мТекСтрДокументы.РольКонтрагента = мРольКонтрагента;
		мТекСтрДокументы.НаименованиеПолноеКонтрагента = мПолноеНаименованиеКонтрагента;
		
		Попытка
			мТекСтрДокументы.КонтрагентПокупатель = СтрокаТаблицы.КонтрагентПокупатель;
			мТекСтрДокументы.КонтрагентПоставщик = СтрокаТаблицы.КонтрагентПоставщик;
		Исключение
		КонецПопытки;
		
	ИначеЕсли Найти(СтрокаТаблицы.РольОрганизации, мРольКонтрагента) > 0 Тогда
		
		мТекСтрДокументы.Организация    = мИмяКонтрагента;
		мТекСтрДокументы.ИННОрганизации = мИННКонтрагента;
		мТекСтрДокументы.КППОрганизации = мКППКонтрагента;
		мТекСтрДокументы.ОКПООрганизации = мОКПОКонтрагента;
		мТекСтрДокументы.НаименованиеПолноеОрганизации = мПолноеНаименованиеКонтрагента;
		
	КонецЕсли;			
	
КонецПроцедуры

// Процедура заполняет таблицу соответствий по переданной таблице и реквизитам
//
// Параметры:
//  ТаблицаДанных       - табличная часть по которой проводится заполнение
//  ТаблицаСоответствий - табличная часть - таблица соответствия
//  ПолеПоиска          - реквизит табличной части ТаблицаДанных
//  ПолеСоответствия    - реквизит табличной части ТаблицаСоответствий
//
Процедура ЗаполнитьСоответствия(ТаблицаДанных, ТаблицаСоответствий, ПолеПоиска, ПолеСоответствия)

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// значение Неопределено сопостовлять не нужно
		Если СтрокаТаблицы[ПолеПоиска] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаСоответствий.Найти(СтрокаТаблицы[ПолеПоиска],ПолеСоответствия);
		Если НайденнаяСтрока <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		// Для каталог и прайса валюты не определены
		Если ТаблицаДанных = ЭлДокументы Тогда
			
			Если (ПолеПоиска = "Валюта" ИЛИ ПолеПоиска = "Организация") 
				И НЕ ОпределитьПоСтрокеТаблицыЭтоДокументОбмена(СтрокаТаблицы) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
					
		НоваяСтрока                   = ТаблицаСоответствий.Добавить();
		НоваяСтрока[ПолеСоответствия] = СтрокаТаблицы[ПолеПоиска];
		Если ТипЗнч(НоваяСтрока[ПолеСоответствия]) <> Тип("Строка") Тогда
			НоваяСтрока["Новый" + ПолеСоответствия] = СтрокаТаблицы[ПолеПоиска];
		КонецЕсли;

		Если ПолеПоиска = "Контрагент" Тогда
			
			НоваяСтрока.ИННКонтрагента = СтрокаТаблицы.ИННКонтрагента;
			НоваяСтрока.КППКонтрагента = СтрокаТаблицы.КППКонтрагента;
			НоваяСтрока.ОКПОКонтрагента = СтрокаТаблицы.ОКПОКонтрагента;
			НоваяСтрока.НаименованиеПолное = СтрокаТаблицы.НаименованиеПолноеКонтрагента;
			
			Попытка
				НоваяСтрока.Покупатель = СтрокаТаблицы.КонтрагентПокупатель;
				НоваяСтрока.Поставщик = СтрокаТаблицы.КонтрагентПоставщик;
			Исключение
			КонецПопытки;
			
		ИначеЕсли ПолеПоиска = "Организация" Тогда
			
			НоваяСтрока.ИННОрганизации = СтрокаТаблицы.ИННОрганизации;
			НоваяСтрока.КППОрганизации = СтрокаТаблицы.КППОрганизации;
			НоваяСтрока.ОКПООрганизации = СтрокаТаблицы.ОКПООрганизации;
			НоваяСтрока.НаименованиеПолное = СтрокаТаблицы.НаименованиеПолноеОрганизации;
			
		ИначеЕсли ПолеПоиска = "ВидНоменклатуры" Тогда
			
			НоваяСтрока.ТипНоменклатуры = СтрокаТаблицы.ТипНоменклатуры;
			
		ИначеЕсли ПолеПоиска = "БазоваяЕдиницаИзмерения" Тогда
			
			НоваяСтрока.Код = СтрокаТаблицы.БазоваяЕдиницаИзмеренияКод;
			НоваяСтрока.НаименованиеПолное = СтрокаТаблицы.БазоваяЕдиницаИзмеренияНаименованиеПолное;
			НоваяСтрока.МеждународноеСокращение = СтрокаТаблицы.БазоваяЕдиницаИзмеренияМеждународноеСокращение;
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияТоваров по переданной табличной части
//
// Параметры:
//  ТаблицаДанных - табличная часть по которой проводится заполнение
//
Процедура ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТаблицаДанных)

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаСоответствияТоваров                            = СоответствияТоваров.Добавить();
		СтрокаСоответствияТоваров.Наименование               = СтрокаТаблицы.Наименование;
		СтрокаСоответствияТоваров.НаименованиеКраткое        = СтрокаТаблицы.НаименованиеКраткое;
		СтрокаСоответствияТоваров.НаименованиеПолное         = СтрокаТаблицы.НаименованиеПолное;
		СтрокаСоответствияТоваров.СтавкаНДС        			 = СтрокаТаблицы.СтавкаНДС;
		СтрокаСоответствияТоваров.Артикул                    = СтрокаТаблицы.Артикул;
		СтрокаСоответствияТоваров.ШтрихКод                   = СтрокаТаблицы.ШтрихКод;
		СтрокаСоответствияТоваров.БазоваяЕдиницаИзмерения    = СтрокаТаблицы.БазоваяЕдиницаИзмерения;
		
		СтрокаСоответствияТоваров.ЕдиницаИзмерения           = СтрокаТаблицы.ЕдиницаИзмерения;
		СтрокаСоответствияТоваров.ЕдиницаИзмеренияКоэффициент= СтрокаТаблицы.ЕдиницаИзмеренияКоэффициент;
		СтрокаСоответствияТоваров.ЕдиницаИзмеренияВес        = СтрокаТаблицы.ЕдиницаИзмеренияВес;
		СтрокаСоответствияТоваров.ЕдиницаИзмеренияОбъем      = СтрокаТаблицы.ЕдиницаИзмеренияОбъем;
		
		СтрокаСоответствияТоваров.Номенклатура               = СтрокаТаблицы.Номенклатура;
		СтрокаСоответствияТоваров.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		СтрокаСоответствияТоваров.Ид                         = СтрокаТаблицы.Ид;		
		СтрокаСоответствияТоваров.ВидНоменклатуры            = СтрокаТаблицы.ВидНоменклатуры;
		СтрокаСоответствияТоваров.ТипНоменклатуры            = СтрокаТаблицы.ТипНоменклатуры;
		СтрокаСоответствияТоваров.ИдКаталога           		 = СтрокаТаблицы.ИдКаталога;
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияТоваров по табличным частям обработки
//
Процедура ЗаполнитьСоответствияТоваров() Экспорт

	СоответствияТоваров.Очистить();
	ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТоварыКаталог);
	ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТоварыПрайс);
	ЗаполнитьСоответствиеНоменклатурыПоТаблице(ТоварыДокумент);
	СоответствияТоваров.Свернуть("Наименование, НаименованиеКраткое, НаименованиеПолное, Артикул, ШтрихКод, БазоваяЕдиницаИзмерения, Номенклатура, ХарактеристикаНоменклатуры, Ид, ВидНоменклатуры, ТипНоменклатуры, ИдКаталога, СтавкаНДС, ЕдиницаИзмерения, ЕдиницаИзмеренияКоэффициент, ЕдиницаИзмеренияВес, ЕдиницаИзмеренияОбъем", "");

КонецПроцедуры


// Процедура заполняет табличную часть по табличным частям обработки
//
Процедура ЗаполнитьСоответствияВидовНоменклатуры() Экспорт

	СоответствиеВидовНоменклатуры.Очистить();
	ЗаполнитьСоответствия(ТоварыКаталог, СоответствиеВидовНоменклатуры, "ВидНоменклатуры", "ВидНоменклатуры");
	ЗаполнитьСоответствия(ТоварыПрайс, СоответствиеВидовНоменклатуры, "ВидНоменклатуры", "ВидНоменклатуры");
	ЗаполнитьСоответствия(ТоварыДокумент, СоответствиеВидовНоменклатуры, "ВидНоменклатуры", "ВидНоменклатуры");
	
КонецПроцедуры

Процедура ОпределитьСоответствияВидовНоменклатуры() Экспорт
	
	СпрВидыНоменклатуры = Справочники.ВидыНоменклатуры;
	Для Каждого СтрокаТаблицы Из СоответствиеВидовНоменклатуры Цикл
		
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.ВидНоменклатуры) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйВидНоменклатуры) Тогда
			СтрокаТаблицы.НовыйВидНоменклатуры = СпрВидыНоменклатуры.НайтиПоНаименованию(СтрокаТаблицы.ВидНоменклатуры);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаменитьВидыНоменклатурыПоСоответствиям() Экспорт
	
	Для Каждого СтрокаТаблицы Из СоответствиеВидовНоменклатуры Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйВидНоменклатуры) Тогда
			
			ЗаменитьОбъектыВТаблице(ТоварыКаталог, "ВидНоменклатуры", СтрокаТаблицы.ВидНоменклатуры, СтрокаТаблицы.НовыйВидНоменклатуры);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс, "ВидНоменклатуры", СтрокаТаблицы.ВидНоменклатуры, СтрокаТаблицы.НовыйВидНоменклатуры);
			ЗаменитьОбъектыВТаблице(ТоварыДокумент, "ВидНоменклатуры", СтрокаТаблицы.ВидНоменклатуры, СтрокаТаблицы.НовыйВидНоменклатуры);
			ЗаменитьОбъектыВТаблице(СоответствияТоваров, "ВидНоменклатуры", СтрокаТаблицы.ВидНоменклатуры, СтрокаТаблицы.НовыйВидНоменклатуры);
			СтрокаТаблицы.ВидНоменклатуры = СтрокаТаблицы.НовыйВидНоменклатуры;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура заполняет табличную часть СоответствияВалют по табличным частям обработки
//
Процедура ЗаполнитьСоответствияВалют() Экспорт

	СоответствияВалют.Очистить();
	ЗаполнитьСоответствия(ЭлДокументы, СоответствияВалют, "Валюта",     "Валюта");
	ЗаполнитьСоответствия(ТоварыПрайс, СоответствияВалют, "ВалютаЦены", "Валюта");
	ЗаполнитьСоответствия(ТоварыПрайс, СоответствияВалют, "Валюта",     "Валюта");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияЕдиницИзмерения по табличным частям обработки
//
Процедура ЗаполнитьСоответствияЕдиницИзмерения() Экспорт

	СоответствияЕдиницИзмерения.Очистить();
	ЗаполнитьСоответствия(ТоварыКаталог,  СоответствияЕдиницИзмерения, "БазоваяЕдиницаИзмерения", "ЕдиницаИзмерения");
	ЗаполнитьСоответствия(ТоварыПрайс,    СоответствияЕдиницИзмерения, "БазоваяЕдиницаИзмерения", "ЕдиницаИзмерения");
	ЗаполнитьСоответствия(ТоварыДокумент, СоответствияЕдиницИзмерения, "БазоваяЕдиницаИзмерения", "ЕдиницаИзмерения");
	
	//ЗаполнитьСоответствия(ТоварыПрайс,    СоответствияЕдиницИзмерения, "ЕдиницаИзмерения",        "ЕдиницаИзмерения");
	//ЗаполнитьСоответствия(ТоварыДокумент, СоответствияЕдиницИзмерения, "ЕдиницаИзмерения",        "ЕдиницаИзмерения");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияКонтрагентов по табличным частям обработки
//
Процедура ЗаполнитьСоответствияКонтрагентов() Экспорт

	СоответствияКонтрагентов.Очистить();
	ЗаполнитьСоответствия(ЭлДокументы, СоответствияКонтрагентов, "Контрагент", "Контрагент");

КонецПроцедуры

Процедура ДобавитьНовыйБанк(СтрокаТаблицы, ИмяРеквизита)
	
	СтрокаБанка = СтрокаТаблицы[ИмяРеквизита];
	
	Если ПустаяСтрока(СтрокаБанка) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаБанков = СоответствияБанков.Найти(СтрокаБанка, "Банк");
	Если СтрокаБанков <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока              = СоответствияБанков.Добавить();
	НоваяСтрока.Адрес      	= СтрокаТаблицы.БанкАдрес;
	НоваяСтрока.Банк 		= СтрокаТаблицы.Банк;
	НоваяСтрока.Наименование = СтрокаТаблицы.БанкНаименование;
	НоваяСтрока.СчетКорреспондентский    = СтрокаТаблицы.БанкСчетКорреспондентский;
	
	Если ТипЗнч(НоваяСтрока.Банк) <> Тип("Строка") Тогда
		НоваяСтрока.НовыйБанк = НоваяСтрока.Банк;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствияБанков()
	
	СоответствияБанков.Очистить();
	Для Каждого СтрокаТаблицы Из ЭлДокументы Цикл
		
		ДобавитьНовыйБанк(СтрокаТаблицы, "Банк");
		ДобавитьНовыйБанк(СтрокаТаблицы, "БанкНЕПрямыхРасходов");		
				
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьСоответствияКачества()
	
	СоответствияКачества.Очистить();
	ЗаполнитьСоответствия(ТоварыДокумент, СоответствияКачества, "Качество", "Качество");				
			
КонецПроцедуры

Процедура ЗаполнитьСоответствиеБанковскихСчетов()
	
	СоответствияБанковскихСчетов.Очистить();
	
	Для Каждого СтрокаТаблицы Из ЭлДокументы Цикл	
	
		Если ПустаяСтрока(СтрокаТаблицы.НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока              = СоответствияБанковскихСчетов.Добавить();
		НоваяСтрока.НомерСчета   = СтрокаТаблицы.НомерСчета;
		НоваяСтрока.Контрагент   = СтрокаТаблицы.Контрагент;
		НоваяСтрока.Банк 		 = СтрокаТаблицы.Банк;
		НоваяСтрока.БанкНЕПрямыхРасходов = СтрокаТаблицы.БанкНЕПрямыхРасходов;
		
		Если ТипЗнч(НоваяСтрока.НомерСчета) <> Тип("Строка") Тогда
			НоваяСтрока.НовыйНомерСчета = НоваяСтрока.НомерСчета;
		КонецЕсли;
				
	КонецЦикла;
	
	СоответствияБанковскихСчетов.Свернуть("НомерСчета,Банк,БанкНЕПрямыхРасходов,Контрагент,НовыйНомерСчета", "");
	
КонецПроцедуры

// Процедура заполняет табличную часть СоответствияОрганизаций по табличным частям обработки
//
Процедура ЗаполнитьСоответствияОрганизаций() Экспорт

	СоответствияОрганизаций.Очистить();
	ЗаполнитьСоответствия(ЭлДокументы, СоответствияОрганизаций, "Организация", "Организация");

КонецПроцедуры

// Процедура заполняет табличную часть СоответствияТиповЦен по табличным частям обработки
//
Процедура ЗаполнитьСоответствияТиповЦен() Экспорт

	СоответствияТиповЦен.Очистить();
	Для Каждого СтрокаТаблицы Из ТоварыПрайс Цикл
		НоваяСтрока              = СоответствияТиповЦен.Добавить();
		НоваяСтрока.ТипЦены      = СтрокаТаблицы.ТипЦены;
		НоваяСтрока.НовыйТипЦены = СтрокаТаблицы.ТипЦены;
		НоваяСтрока.Ид           = СтрокаТаблицы.ИдТипаЦены;
		НоваяСтрока.НДСВСумме    = СтрокаТаблицы.НДСВСумме;
		НоваяСтрока.Валюта       = СтрокаТаблицы.ВалютаЦены;
		НоваяСтрока.Контрагент   = СтрокаТаблицы.Контрагент;
	КонецЦикла;
	СоответствияТиповЦен.Свернуть("ТипЦены, НовыйТипЦены, Ид, НДСВСумме, Валюта, Контрагент", "");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАМЕНЫ ЭЛЕМЕНТОВ В ТАБЛИЧНЫХ ЧАСТЯХ СООТВЕТСТВИЙ

// Процедура заменяет значения реквизитов в табличной части
//
// Параметры:
//  ТаблицаДанных  - табличная часть в которой проводится замена
//  ПолеЗамены     - имя реквизита значения которого меняются
//  СтароеЗначение - значение табличной части, которое заменяем
//  НовоеЗначение  - значение табличной части, НА которое заменяем
//
Процедура ЗаменитьОбъектыВТаблице(ТаблицаДанных, ПолеЗамены, СтароеЗначение, НовоеЗначение) Экспорт

	Отбор           = Новый Структура(ПолеЗамены, СтароеЗначение);
	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы[ПолеЗамены] = НовоеЗначение;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заменяет реквизиты "Номенклатура" и "ХарактеристикаНоменклатуры"
// в табличной части в соответствии с переданным отбором
//
// Параметры:
//  ТаблицаДанных - табличная часть в которой проводится замена
//  Отбор         - структура-отбор для табличной части ТаблицаДанных
//  Номенклатура  - справочник-ссылка "Номенклатура"
//  Характеристика - справочник-ссылка "ХарактеристикаНоменклатура"
//
Процедура ЗаменитьТовары(Таблица, Отбор, Номенклатура, Характеристика = Неопределено)

	НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		СтрокаТаблицы.Номенклатура               = Номенклатура;
		
		Если Характеристика <> Неопределено Тогда
			СтрокаТаблицы.ХарактеристикаНоменклатуры = Характеристика;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизиты "Номенклатура" и "ХарактеристикаНоменклатуры"
// в табличных частях обработки по таблице соответствий СоответствияТоваров
//
Процедура ЗаменитьТоварыПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияТоваров Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Наименование",            СтрокаТаблицы.Наименование);
		Отбор.Вставить("Артикул",                 СтрокаТаблицы.Артикул);
		Отбор.Вставить("Штрихкод",                СтрокаТаблицы.ШтрихКод);
		Отбор.Вставить("БазоваяЕдиницаИзмерения", СтрокаТаблицы.БазоваяЕдиницаИзмерения);
		
		ЗаменитьТовары(ТоварыКаталог,  Отбор, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыПрайс,    Отбор, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыДокумент, Отбор, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры);
		
		ЗаменитьТовары(ЗначенияСвойствТоваров, Отбор, СтрокаТаблицы.Номенклатура);		
		
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизиты "Валюта" и "ВалютаЦены"
// в табличных частях обработки по таблице соответствий СоответствияВалют
//
Процедура ЗаменитьВалютыПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияВалют Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйВалюта) Тогда
			ЗаменитьОбъектыВТаблице(ЭлДокументы, "Валюта",     СтрокаТаблицы.Валюта, СтрокаТаблицы.НовыйВалюта);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс, "ВалютаЦены", СтрокаТаблицы.Валюта, СтрокаТаблицы.НовыйВалюта);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс, "Валюта", СтрокаТаблицы.Валюта, СтрокаТаблицы.НовыйВалюта);
			СтрокаТаблицы.Валюта = СтрокаТаблицы.НовыйВалюта;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизиты "БазоваяЕдиницаИзмерения" и "ЕдиницаИзмерения"
// в табличных частях обработки по таблице соответствий СоответствияЕдиницИзмерения
//
Процедура ЗаменитьЕдиницыПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияЕдиницИзмерения Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйЕдиницаИзмерения) Тогда
			
			ЗаменитьОбъектыВТаблице(ТоварыКаталог,          "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ТоварыПрайс,            "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ТоварыДокумент,         "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(СоответствияТоваров,    "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			ЗаменитьОбъектыВТаблице(ЗначенияСвойствТоваров, "БазоваяЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.НовыйЕдиницаИзмерения);
			
			СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.НовыйЕдиницаИзмерения;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура заменяет реквизит "Организация"
// в табличных частях обработки по таблице соответствий СоответствияОрганизаций
//
Процедура ЗаменитьОрганизацииПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияОрганизаций Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйОрганизация) Тогда
			
			ЗаменитьОбъектыВТаблице(ЭлДокументы, "Организация", СтрокаТаблицы.Организация, СтрокаТаблицы.НовыйОрганизация);
			СтрокаТаблицы.Организация = СтрокаТаблицы.НовыйОрганизация;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаменитьБанковскиеСчетаПоСоответствиям() Экспорт
	
	Для Каждого СтрокаТаблицы Из СоответствияБанковскихСчетов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйНомерСчета) Тогда
			
			ЗаменитьОбъектыВТаблице(ЭлДокументы, "НомерСчета", СтрокаТаблицы.НомерСчета, СтрокаТаблицы.НовыйНомерСчета);
			СтрокаТаблицы.НомерСчета = СтрокаТаблицы.НовыйНомерСчета;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура заменяет реквизит "Контрагент"
// в табличных частях обработки по таблице соответствий СоответствияОрганизаций
//
// Параметры:
//  МенятьВСоответствииЦен - булево, флаг по которому проводится замена в табличной
//                           части СоответствияТиповЦен
//
Процедура ЗаменитьКонтрагентовПоСоответствиям(МенятьВСоответствииЦен = ЛОЖЬ) Экспорт

	Для Каждого СтрокаТаблицы Из СоответствияКонтрагентов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйКонтрагент) Тогда
			
			ЗаменитьОбъектыВТаблице(ЭлДокументы,          "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(ТоварыКаталог,        "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(ТоварыДокумент,       "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(ДокументыОснования,   "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(СоответствияБанковскихСчетов, "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(КонтактнаяИнформацияКонтрагента, "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			ЗаменитьОбъектыВТаблице(СоответствияТиповЦен, "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			
			//Меняем в прайс листе с изменением цен
			Отбор           = Новый Структура("Контрагент", СтрокаТаблицы.Контрагент);
			НайденныеСтроки = ТоварыПрайс.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицыПрайса Из НайденныеСтроки Цикл
				
				СтрокаТаблицыПрайса.Контрагент = СтрокаТаблицы.НовыйКонтрагент;
				Если ЗначениеНеПустаяСсылка(СтрокаТаблицыПрайса.ТипЦены) Тогда
					СтрокаТаблицыПрайса.ТипЦены = Строка(СтрокаТаблицыПрайса.ТипЦены);
				КонецЕсли;
				
			КонецЦикла;
			
			Если МенятьВСоответствииЦен Тогда
				ЗаменитьОбъектыВТаблице(СоответствияТиповЦен, "Контрагент", СтрокаТаблицы.Контрагент, СтрокаТаблицы.НовыйКонтрагент);
			КонецЕсли;
			СтрокаТаблицы.Контрагент = СтрокаТаблицы.НовыйКонтрагент;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаменитьБанкиПоСоответствиям() Экспорт
	
	Для Каждого СтрокаТаблицы Из СоответствияБанков Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйБанк) Тогда
			
			ЗаменитьОбъектыВТаблице(ЭлДокументы, "Банк", СтрокаТаблицы.Банк, СтрокаТаблицы.НовыйБанк);
			ЗаменитьОбъектыВТаблице(ЭлДокументы, "БанкНЕПрямыхРасходов", СтрокаТаблицы.Банк, СтрокаТаблицы.НовыйБанк);
			
			ЗаменитьОбъектыВТаблице(СоответствияБанковскихСчетов, "Банк", СтрокаТаблицы.Банк, СтрокаТаблицы.НовыйБанк);
			ЗаменитьОбъектыВТаблице(СоответствияБанковскихСчетов, "БанкНЕПрямыхРасходов", СтрокаТаблицы.Банк, СтрокаТаблицы.НовыйБанк);
			
			СтрокаТаблицы.Банк = СтрокаТаблицы.НовыйБанк;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаменитьКачествоПоСоответствиям() Экспорт
	
	Для Каждого СтрокаТаблицы Из СоответствияКачества Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйКачество) Тогда
			
			ЗаменитьОбъектыВТаблице(ТоварыДокумент, "Качество", СтрокаТаблицы.Качество, СтрокаТаблицы.НовыйКачество);
			СтрокаТаблицы.Качество = СтрокаТаблицы.НовыйКачество;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура заменяет реквизит "ТипЦены"
// в табличных частях обработки по таблице соответствий СоответствияТиповЦен
//
Процедура ЗаменитьТипыЦенПоСоответствиям() Экспорт

	Для Каждого СтрокаТаблицыЦен Из СоответствияТиповЦен Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЦен.НовыйТипЦены) Тогда
			Отбор = Новый Структура("ИдТипаЦены, Контрагент", СтрокаТаблицыЦен.Ид, СтрокаТаблицыЦен.Контрагент);
			НайденныеСтроки = ТоварыПрайс.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				СтрокаТаблицы.ТипЦены  = СтрокаТаблицыЦен.НовыйТипЦены;
			КонецЦикла;
			СтрокаТаблицыЦен.ТипЦены = СтрокаТаблицыЦен.НовыйТипЦены;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПРЕДЕЛЕНИЯ СООТВЕТСТВИЙ ЭЛЕМЕНТОВ СПРАВОЧНИКОВ

// Функция ищет единицу измерения номенклатуры, если не найдено - создает новый 
// элемент справочника "ЕдиницыИзмерения"
//
// Параметры:
//  СтрокаДанных - строка табличной части с реквизитами номенклатуры
//
// Возвращаемое значение:
//  справочник-ссылка "ЕдиницыИзмерения" или неопределено, если создание нового 
//  элемента неуспешно
//
Функция ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаДанных) Экспорт

	СпрЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(СтрокаДанных.ЕдиницаИзмерения, , , СтрокаДанных.Номенклатура);
	Если ЗначениеЗаполнено(СпрЕдиница) Тогда
		Возврат СпрЕдиница;
	КонецЕсли;
	
	СпрЕдиница                         = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	СпрЕдиница.Владелец                = СтрокаДанных.Номенклатура;
	СпрЕдиница.ЕдиницаПоКлассификатору = СтрокаДанных.БазоваяЕдиницаИзмерения;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмеренияКоэффициент) Тогда
		СпрЕдиница.Коэффициент = СтрокаДанных.ЕдиницаИзмеренияКоэффициент;
	Иначе
		Попытка
			СпрЕдиница.Коэффициент = СтрокаДанных.Коэффициент;
		Исключение
			СпрЕдиница.Коэффициент = 1;
		КонецПопытки;			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмеренияВес) Тогда
		СпрЕдиница.Вес = СтрокаДанных.ЕдиницаИзмеренияВес;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмеренияОбъем) Тогда
		СпрЕдиница.Объем = СтрокаДанных.ЕдиницаИзмеренияОбъем;		
	КонецЕсли;
	
	СпрЕдиница.Наименование = СтрокаДанных.ЕдиницаИзмерения;
	
	Попытка
		СпрЕдиница.Записать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;

	Возврат СпрЕдиница.Ссылка;
	
КонецФункции

// Процедура проводит поиск элементов справочника "Валюты" по строкам
// табличной части СоответствияВалют
//
Процедура ОпределитьСоответствияВалют()

	СпрВалюты = Справочники.Валюты;
	Для Каждого СтрокаТаблицы Из СоответствияВалют Цикл
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Валюта) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйВалюта) Тогда
			СтрокаТаблицы.НовыйВалюта = СпрВалюты.НайтиПоНаименованию(СтрокаТаблицы.Валюта);
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

// Процедура проводит поиск элементов справочника "КлассификаторЕдиницИзмерения" по строкам
// табличной части СоответствияЕдиницИзмерения
//
Процедура ОпределитьСоответствияЕдиницИзмерения()

	СпрЕдиница = Справочники.КлассификаторЕдиницИзмерения;
	Для Каждого СтрокаТаблицы Из СоответствияЕдиницИзмерения Цикл
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.ЕдиницаИзмерения) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйЕдиницаИзмерения) Тогда
			СтрокаТаблицы.НовыйЕдиницаИзмерения = СпрЕдиница.НайтиПоНаименованию(СтрокаТаблицы.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

// Процедура проводит поиск элементов справочника "Контрагенты" по строкам
// табличной части СоответствияКонтрагентов
//
Процедура ОпределитьСоответствияКонтрагентов()

	СпрКонтрагенты = Справочники.Контрагенты;
	Для Каждого СтрокаТаблицы Из СоответствияКонтрагентов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйКонтрагент) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ИННКонтрагента) Тогда
				СтрокаТаблицы.НовыйКонтрагент = СпрКонтрагенты.НайтиПоРеквизиту("ИНН", СтрокаТаблицы.ИННКонтрагента);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйКонтрагент) Тогда
				Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Контрагент) Тогда
					СтрокаТаблицы.НовыйКонтрагент = СпрКонтрагенты.НайтиПоНаименованию(СтрокаТаблицы.Контрагент);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОпределитьСоответствиеБанков()
	
	СпрБанки = Справочники.Банки;
	Для Каждого СтрокаТаблицы Из СоответствияБанков Цикл
		
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Банк) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Новыйбанк) Тогда
			
			СтрокаТаблицы.Новыйбанк = СпрБанки.НайтиПоКоду(СтрокаТаблицы.Банк);
								
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОпределитьСоответствиеКачества()
	
	СпрКачество = Справочники.Качество;
	Для Каждого СтрокаТаблицы Из СоответствияКачества Цикл
		
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Качество) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйКачество) Тогда
			
			СтрокаТаблицы.НовыйКачество = СпрКачество.НайтиПоНаименованию(СтрокаТаблицы.Качество);
									
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура проводит поиск элементов справочника "Организации" по строкам
// табличной части СоответствияОрганизаций
//
Процедура ОпределитьСоответствияОрганизаций()

	СпрОрганизации = Справочники.Организации;
	Для Каждого СтрокаТаблицы Из СоответствияОрганизаций Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйОрганизация) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ИННОрганизации) Тогда
				СтрокаТаблицы.НовыйОрганизация = СпрОрганизации.НайтиПоРеквизиту("ИНН", СтрокаТаблицы.ИННОрганизации);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйОрганизация) Тогда
				Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.Организация) Тогда
					СтрокаТаблицы.НовыйОрганизация = СпрОрганизации.НайтиПоНаименованию(СтрокаТаблицы.Организация);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

Процедура ОпределитьСоответствиеБанковскихСчетов()
	
	Для Каждого СтрокаТаблицы Из СоответствияБанковскихСчетов Цикл
		
		Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.НомерСчета) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйНомерСчета) Тогда
			
			Если ЗначениеНеПустаяСсылка(СтрокаТаблицы.Контрагент) Тогда
				СтрокаТаблицы.НовыйНомерСчета = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаТаблицы.НомерСчета, , СтрокаТаблицы.Контрагент);
			КонецЕсли;			
						
		КонецЕсли;
		
	КонецЦикла	
	
КонецПроцедуры

// Процедура проводит поиск элементов справочника "ТипыЦенНоменклатурыКонтрагентов" по строкам
// табличной части СоответствияТиповЦен
//
Процедура ОпределитьСоответствияТиповЦен()

	СправочникТипыЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов;
	Для Каждого СтрокаТаблицы Из СоответствияТиповЦен Цикл
		Если НЕ ЗначениеНеОпределено(СтрокаТаблицы.Контрагент) И 
			ЗначениеНеПустаяСтрока(СтрокаТаблицы.ТипЦены) И 
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.НовыйТипЦены) Тогда

			СтрокаТаблицы.НовыйТипЦены = СправочникТипыЦен.НайтиПоНаименованию(СтрокаТаблицы.ТипЦены, , , СтрокаТаблицы.Контрагент);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура проводит поиск элементов справочника "Номенкалтура" по строкам
// табличной части СоответствияТиповЦен по идентификаторам товара
//
Процедура ОпределитьНоменклатуруКонтрагентов()

	//Формируем список идентификаторов
	СписокИдентификаторов = Новый СписокЗначений;
	СписокКонтрагентов    = Новый СписокЗначений;

	Для Каждого СтрокаТаблицы Из ТоварыКаталог Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		Если СписокИдентификаторов.НайтиПоЗначению(СтрокаТаблицы.Ид) = Неопределено Тогда
			СписокИдентификаторов.Добавить(СтрокаТаблицы.Ид);
		КонецЕсли;
		Если СписокКонтрагентов.НайтиПоЗначению(СтрокаТаблицы.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТаблицы.Контрагент);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТоварыПрайс Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		Если СписокИдентификаторов.НайтиПоЗначению(СтрокаТаблицы.Ид) = Неопределено Тогда
			СписокИдентификаторов.Добавить(СтрокаТаблицы.Ид);
		КонецЕсли;
		Если СписокКонтрагентов.НайтиПоЗначению(СтрокаТаблицы.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТаблицы.Контрагент);			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТоварыДокумент Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		
		//Определяем номенклатуры по идентификаторам собственного прайса
		Если Сред(СтрокаТаблицы.Ид,1,1) = "*" Тогда
			
			ПозицияРешетки = Найти(СтрокаТаблицы.Ид,"#");
			Если ПозицияРешетки Тогда
				ИдНоменклатуры   = Сред(СтрокаТаблицы.Ид,2,ПозицияРешетки - 2);
				ИдХарактеристики = Сред(СтрокаТаблицы.Ид,ПозицияРешетки + 1);
				Попытка
					УникИдНоменклатура   = Новый УникальныйИдентификатор(ИдНоменклатуры);
					УникИдХарактеристика = Новый УникальныйИдентификатор(ИдХарактеристики);
				Исключение
					//Если некорректный идентификатор - пропускаем
					Продолжить;
				КонецПопытки;
				СпрНоменклатура               = Справочники.Номенклатура.ПолучитьСсылку(УникИдНоменклатура);
				СпрХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(УникИдХарактеристика);
				
				Если ЗначениеЗаполнено(СпрНоменклатура) Тогда
					
					СтрокаТаблицы.Номенклатура = СпрНоменклатура;
					Если ЗначениеЗаполнено(СпрХарактеристикаНоменклатуры) Тогда
						СтрокаТаблицы.ХарактеристикаНоменклатуры = СпрХарактеристикаНоменклатуры;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				ИдНоменклатуры  = Сред(СтрокаТаблицы.Ид, 2);
				Попытка
					УникИд = Новый УникальныйИдентификатор(ИдНоменклатуры);
				Исключение
					//Если некорректный идентификатор - пропускаем
					Продолжить;
				КонецПопытки;
				
				СпрНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(УникИд);
				Если ЗначениеЗаполнено(СпрНоменклатура) Тогда
					
					СтрокаТаблицы.Номенклатура = СпрНоменклатура;
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		Если СписокИдентификаторов.НайтиПоЗначению(СтрокаТаблицы.Ид) = Неопределено Тогда
			СписокИдентификаторов.Добавить(СтрокаТаблицы.Ид);
		КонецЕсли;
		
		Если СписокКонтрагентов.НайтиПоЗначению(СтрокаТаблицы.Контрагент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТаблицы.Контрагент);
		КонецЕсли;
		
	КонецЦикла;

	Если СписокКонтрагентов.Количество() = 0 
		ИЛИ СписокИдентификаторов.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	//Формируем запрос к регистру
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК Идентификатор,
	|	НоменклатураКонтрагентов.Номенклатура               КАК Номенклатура,
	|	НоменклатураКонтрагентов.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НоменклатураКонтрагентов.Контрагент                 КАК Контрагент
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Контрагент В (&СписокКонтрагентов) И
	|	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента В (&СписокИдентификаторов)");

	Запрос.УстановитьПараметр("СписокКонтрагентов",    СписокКонтрагентов);
	Запрос.УстановитьПараметр("СписокИдентификаторов", СписокИдентификаторов);

	РезультатЗапрос = Запрос.Выполнить();
	Выборка = РезультатЗапрос.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("Контрагент, Ид", Выборка.Контрагент, Выборка.Идентификатор);
		ЗаменитьТовары(ТоварыКаталог,  Отбор, Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыПрайс,  Отбор, Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры);
		ЗаменитьТовары(ТоварыДокумент, Отбор, Выборка.Номенклатура, Выборка.ХарактеристикаНоменклатуры);
		
	КонецЦикла;

КонецПроцедуры

Процедура НайтиХарактеристикуПоНаименованию(СтрокаТаблицы)
	
	Если Не мИспользоватьХарактеристикиУНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	ПредполагаемоеПолноеНаименованиеНоменклатуры = ?(ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное), СтрокаТаблицы.НаименованиеКраткое, СтрокаТаблицы.НаименованиеПолное);
	
	Если НЕ ЗначениеНеПустаяСсылка(СтрокаТаблицы.Номенклатура)
		ИЛИ ЗначениеНеПустаяСсылка(СтрокаТаблицы.ХарактеристикаНоменклатуры)
		ИЛИ НЕ ЗначениеЗаполнено(ПредполагаемоеПолноеНаименованиеНоменклатуры) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПозицияВПолномНаименовании = Найти(СтрокаТаблицы.Наименование, ПредполагаемоеПолноеНаименованиеНоменклатуры);
	Если ПозицияВПолномНаименовании < 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПредполагаемоеИмяХарактеристики = СокрЛП(Сред(СтрокаТаблицы.Наименование, ПозицияВПолномНаименовании + СтрДлина(ПредполагаемоеПолноеНаименованиеНоменклатуры)));
	
	// первую и последнюю скобку из имени вырезаем
	ПредполагаемоеИмяХарактеристики = Сред(ПредполагаемоеИмяХарактеристики, 2, СтрДлина(ПредполагаемоеИмяХарактеристики) - 2);
	
	Если ПустаяСтрока(ПредполагаемоеИмяХарактеристики) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ПредполагаемоеИмяХарактеристики, , , СтрокаТаблицы.Номенклатура);
	
КонецПроцедуры

// Процедура проводит поиск элементов справочника "Номенкалтура" по строкам
// табличной части СоответствияТиповЦен по артикулу, штрихкоду и наименованию товара
//
Процедура ОпределитьСоответствияТоваров()

	СпрНоменклатура = Справочники.Номенклатура;

	//Ищем номенклатуру по штрикоду
	СписокШтрихКодов = Новый СписокЗначений;
	Отбор = Новый Структура("Номенклатура", СпрНоменклатура.ПустаяСсылка());
	НайденныеСтроки = СоответствияТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ШтрихКод) Тогда
			СписокШтрихКодов.Добавить(СтрокаТаблицы.ШтрихКод);
		КонецЕсли;
		
	КонецЦикла;

	Если СписокШтрихКодов.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегШтрихкоды.Штрихкод                   КАК ШтрихКод,
		|	РегШтрихкоды.Владелец                   КАК Номенклатура,
		|	РегШтрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК РегШтрихкоды
		|ГДЕ
		|	РегШтрихкоды.Штрихкод В (&СписокШтрихКодов)
		|";
		Запрос.УстановитьПараметр("СписокШтрихКодов", СписокШтрихКодов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = СоответствияТоваров.Найти(Выборка.ШтрихКод);
			
			Если СтрокаТаблицы <> Неопределено Тогда
				СтрокаТаблицы.Номенклатура               = Выборка.Номенклатура;
				СтрокаТаблицы.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	//Ищем по артикулу
	НайденныеСтроки = СоответствияТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Артикул) Тогда
			СтрокаТаблицы.Номенклатура = СпрНоменклатура.НайтиПоРеквизиту("Артикул", СтрокаТаблицы.Артикул);
			НайтиХарактеристикуПоНаименованию(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	//Ищем по наименованию
	НайденныеСтроки = СоответствияТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		Если Не ПустаяСтрока(СтрокаТаблицы.НаименованиеКраткое) Тогда
			СтрокаТаблицы.Номенклатура = СпрНоменклатура.НайтиПоНаименованию(СтрокаТаблицы.НаименованиеКраткое);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			И Не ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
			
			СтрокаТаблицы.Номенклатура = СпрНоменклатура.НайтиПоНаименованию(СтрокаТаблицы.НаименованиеПолное);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			СтрокаТаблицы.Номенклатура = СпрНоменклатура.НайтиПоНаименованию(СтрокаТаблицы.Наименование);
		КонецЕсли;
		
		НайтиХарактеристикуПоНаименованию(СтрокаТаблицы);
		
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ И ОБРАБОТКИ ФАЙЛОВ XML

// Процедура проводит обработку загруженных из файлов данных
// - определяет соответствия реквизитов элементам справочников 1С:Предприятия
//
Процедура ОбработатьЗагруженныеДанные() Экспорт
	
	// банковские счета
	ЗаполнитьСоответствиеБанковскихСчетов();
	
	//качества
	ЗаполнитьСоответствияКачества();
	ОпределитьСоответствиеКачества();
	ЗаменитьКачествоПоСоответствиям();
	
	// банки
	ЗаполнитьСоответствияБанков();
	ОпределитьСоответствиеБанков();
	ЗаменитьБанкиПоСоответствиям();
	
	// банковские счета
	
	//Готовим таблицы соответствий для определения объектов и определяем объекты
	ЗаполнитьСоответствияКонтрагентов();
	ОпределитьСоответствияКонтрагентов();
	ЗаменитьКонтрагентовПоСоответствиям(ИСТИНА);
	
	//При чтении из файла таблица соответствий цен заполняется
	ОпределитьСоответствияТиповЦен();
	Для Каждого СтрокаТаблицыЦен Из СоответствияТиповЦен Цикл
		
		Отбор = Новый Структура("ИдТипаЦены, Контрагент", СтрокаТаблицыЦен.Ид, СтрокаТаблицыЦен.Контрагент);
		НайденныеСтроки = ТоварыПрайс.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицыЦен.НовыйТипЦены) Тогда
				СтрокаТаблицы.ТипЦены = СтрокаТаблицыЦен.НовыйТипЦены;
			Иначе
				СтрокаТаблицы.ТипЦены = СтрокаТаблицыЦен.ТипЦены;
			КонецЕсли;
			СтрокаТаблицы.ВалютаЦены = СтрокаТаблицыЦен.Валюта;
			СтрокаТаблицы.НДСВСумме  = СтрокаТаблицыЦен.НДСВСумме;
		КонецЦикла;
		
	КонецЦикла;

	ЗаполнитьСоответствияОрганизаций();
	ОпределитьСоответствияОрганизаций();
	ЗаменитьОрганизацииПоСоответствиям();
	
	// банковские счета - продолжение
	ОпределитьСоответствиеБанковскихСчетов();
	ЗаменитьБанковскиеСчетаПоСоответствиям();
	
	ЗаполнитьСоответствияВалют();
	ОпределитьСоответствияВалют();
	ЗаменитьВалютыПоСоответствиям();
	
	ЗаполнитьСоответствияВидовНоменклатуры();
	ОпределитьСоответствияВидовНоменклатуры();
	ЗаменитьВидыНоменклатурыПоСоответствиям();

	//Единицы измерения обязательно после типов цен, чтобы определить валюты для типов цен
	ЗаполнитьСоответствияЕдиницИзмерения();
	ОпределитьСоответствияЕдиницИзмерения();
	ЗаменитьЕдиницыПоСоответствиям();

	ОпределитьНоменклатуруКонтрагентов();
	
	ЗаполнитьСоответствияТоваров();
	ОпределитьСоответствияТоваров();	
	ЗаменитьТоварыПоСоответствиям();	
	
	ЗаполнитьСоответствияЗагружаемыхДокументов();

КонецПроцедуры

Процедура ВыполнитьЗаменуВсехСоответствий() Экспорт
	
	ОпределитьСоответствияВидовНоменклатуры();
	
	ЗаменитьКачествоПоСоответствиям();
	ЗаменитьБанкиПоСоответствиям();
	ЗаменитьТоварыПоСоответствиям();
 	ЗаменитьВалютыПоСоответствиям();
	ЗаменитьВидыНоменклатурыПоСоответствиям();
 	ЗаменитьЕдиницыПоСоответствиям();
 	ЗаменитьКонтрагентовПоСоответствиям();
 	ЗаменитьТипыЦенПоСоответствиям();
 	ЗаменитьОрганизацииПоСоответствиям();
	ЗаменитьБанковскиеСчетаПоСоответствиям();
	
	ЗаполнитьСоответствияЗагружаемыхДокументов();
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеДляДокумента(ТаблицаПоиска, ИмяДокументаДляПоиска, РекизитДокумента, РеквизитНомера, РеквизитДаты, 
	РеквизитДокументаНомер, РеквизитДокументаДата)
	
	Периодичность = Метаданные.Документы[ИмяДокументаДляПоиска].ПериодичностьНомера;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ первые 1
	               |	Док.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ." + ИмяДокументаДляПоиска + " КАК Док
	               |ГДЕ
	               |	Док.Контрагент = &Контрагент
	               |	И Док." + РеквизитДокументаНомер + " = &НомерДокумента
				   |	И Док.ПометкаУдаления = Ложь
	               |";
				   
	Если Периодичность <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И Док." + РеквизитДокументаДата + " >= &НачальнаяДата И Док." + РеквизитДокументаДата + " <= &КонечнаяДата";
					   
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоиска Цикл
		
		// если документ основания заполнен, то ничего искать не нужно
		Если ЗначениеЗаполнено(СтрокаТаблицы[РекизитДокумента]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[РекизитДокумента])
			И ЗначениеНеПустаяСсылка(СтрокаТаблицы.Контрагент)
			И ЗначениеЗаполнено(СтрокаТаблицы[РеквизитНомера]) Тогда
			
			Запрос.УстановитьПараметр("НомерДокумента", СтрокаТаблицы[РеквизитНомера]);
			Запрос.УстановитьПараметр("Контрагент", СтрокаТаблицы.Контрагент);
			
			НачальнаяДата = Неопределено;
			КонечнаяДата = Неопределено;
			
			Если Периодичность <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				
				// надо документ искать по номеру но в разрезе контрагентов
				Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
					
					НачальнаяДата = НачалоГода(СтрокаТаблицы[РеквизитДаты]);
					КонечнаяДата = КонецГода(СтрокаТаблицы[РеквизитДаты]);
					
				ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
					
					НачальнаяДата = НачалоДня(СтрокаТаблицы[РеквизитДаты]);
					КонечнаяДата = КонецДня(СтрокаТаблицы[РеквизитДаты]);
					
				ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
					
					НачальнаяДата = НачалоКвартала(СтрокаТаблицы[РеквизитДаты]);
					КонечнаяДата = КонецКвартала(СтрокаТаблицы[РеквизитДаты]);
					
				ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
					
					НачальнаяДата = НачалоМесяца(СтрокаТаблицы[РеквизитДаты]);
					КонечнаяДата = КонецМесяца(СтрокаТаблицы[РеквизитДаты]);
				
				КонецЕсли;
				
				Запрос.УстановитьПараметр("НачальнаяДата", НачальнаяДата);
				Запрос.УстановитьПараметр("КонечнаяДата", КонечнаяДата);
				
			КонецЕсли;			
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СтрокаТаблицы[РекизитДокумента] = Выборка.Ссылка;		
				
			Конецесли;
			
		Иначе
			
			СтрокаТаблицы[РекизитДокумента] = Документы[ИмяДокументаДляПоиска].ПустаяСсылка();	
						
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьСоответствияЗагружаемыхДокументов()
	
	Если ЭлДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = ПолучитьИмяДокументаПоПредставлению(ЭлДокументы[0].Тип);
	
	Если ПустаяСтрока(ИмяДокумента) Тогда
		Возврат;
	КонецЕсли;
    	
	ЗаполнитьСоответствиеДляДокумента(ЭлДокументы, ИмяДокумента, "Документ", "Номер", "Дата", "НомерВходящегоДокументаЭлектронногоОбмена", "ДатаВходящегоДокументаЭлектронногоОбмена");	
	
	Если ИмяДокумента = "СчетНаОплатуПоставщика"
		ИЛИ ИмяДокумента = "ПоступлениеТоваровУслуг"
		ИЛИ ИмяДокумента = "ПереоценкаТоваровПринятыхНаКомиссию" Тогда
		
		ЗаполнитьСоответствиеДляДокумента(ЭлДокументы, "ЗаказПоставщику", "ДокументОснования", "НомерДокументаОснования", "ДатаДокументаОснования", "Номер", "Дата");	
		
	ИначеЕсли ИмяДокумента = "ВозвратТоваровОтПокупателя"
		ИЛИ ИмяДокумента = "ОтчетКомиссионераОПродажах" ТОгда
		
		ЗаполнитьСоответствиеДляДокумента(ЭлДокументы, "ЗаказПокупателя", "ДокументОснования", "НомерДокументаОснования", "ДатаДокументаОснования", "НомерВходящегоДокументаЭлектронногоОбмена", "ДатаВходящегоДокументаЭлектронногоОбмена");	
	
	ИначеЕсли ИмяДокумента = "СчетФактураПолученный" Тогда
		
		Если ДокументыОснования.Количество() > 0 Тогда
			
			ТипДокументаПоиска = ДокументыОснования[0].Тип;
			Если ПустаяСтрока(ТипДокументаПоиска) Тогда
				ТипДокументаПоиска = "ПоступлениеТоваровУслуг";
			КонецЕсли;
			
			ЗаполнитьСоответствиеДляДокумента(ДокументыОснования, ТипДокументаПоиска, "ДокументОснования", "НомерОснования", "ДатаОснования", "НомерВходящегоДокументаЭлектронногоОбмена", "ДатаВходящегоДокументаЭлектронногоОбмена");
		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура запускает чтение XML файлы по переданному имени файла или каталога,
// проверяет возможность чтения данных
//
// Параметры:
//  ИмяФайлаКаталога - строка с именем файла и катлога
//
Процедура ОбработатьФайлы(ИмяФайлаКаталога, ЗадаватьВопросОЧтенииДанных = Истина) Экспорт

	//Проверка корректности имени файла
	Если ПустаяСтрока(ИмяФайлаКаталога) Тогда
		#Если Клиент Тогда
			Предупреждение("Не указано имя файла данных! Чтение данных невозможно!");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	#Если Клиент Тогда
		Если ЗадаватьВопросОЧтенииДанных Тогда
			Ответ = Вопрос("Прочитать данные из файла?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Загрузка данных");
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	#КонецЕсли

	Источник = Новый Файл(ИмяФайлаКаталога);
	Если НЕ Источник.Существует() Тогда
		#Если Клиент Тогда
			Предупреждение("Некорректное имя файла или каталога! Чтение данных невозможно!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ОчиститьТаблицы();
	
	Если Источник.ЭтоФайл() Тогда
		
		ПрочитатьФайлXML(Источник.ПолноеИмя);
		
	ИначеЕсли Источник.ЭтоКаталог() Тогда
		
		СписокФайлов = НайтиФайлы(Источник.ПолноеИмя, "*.xml");
		Для Каждого ФайлДляЗагрузки Из СписокФайлов Цикл
			ПрочитатьФайлXML(ФайлДляЗагрузки.ПолноеИмя);
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры

// Процедура читает последовательно файл в формате CommerceML,
// в процессе чтения проводит поиск и определение объектов базе данных,
// пишет данные из файла в струкутры данных обработки
//
// Параметры: 
// ИмяФайла - полное имя файла (всесте с путем)
//
Процедура ПрочитатьФайлXML(ИмяФайла)

	//Открытие и обработка файла
	ОбъектXML = Новый ЧтениеXML;
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		
		//Читаем файл последовательно в цикле, формируя полное имя (путь) для элемента
		ПолноеИмяУровня = "";
		Пока ОбъектXML.Прочитать() Цикл

			ТипУзла = ОбъектXML.ТипУзла;
			ИмяУзла = ОбъектXML.Имя;

			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ПолноеИмяУровня = СокрЛП(ИмяУзла) +"_" + ПолноеИмяУровня;
				ОбработатьЭлемент(ОбъектXML, ПолноеИмяУровня);

			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				ПозицияРазделителя = Найти(ПолноеИмяУровня, "_");
				Если ПозицияРазделителя Тогда
					ПолноеИмяУровня = Сред(ПолноеИмяУровня, ПозицияРазделителя + 1);
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
	Исключение
		ОписаниеОшибкиЗаписи = ОписаниеОшибки();
		ОбъектXML.Закрыть();		
		#Если клиент тогда
		Сообщить("Возникла ошибка при чтении данных для обмена: " + Символы.ПС + ОписаниеОшибкиЗаписи, СтатусСообщения.Важное);
		#КонецЕсли
		Возврат;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	
	ХарактеристикиНоменклатуры.Свернуть("Ид, Наименование, Значение", "");
	ЗначенияСвойствТоваров.Свернуть("Номенклатура, Свойство, Значение, Наименование, Артикул, ШтрихКод, БазоваяЕдиницаИзмерения", "");
	КонтактнаяИнформацияКонтрагента.Свернуть("Контрагент, Представление, Комментарий, Тип, Вид, Поле1, Поле2,  Поле3, Поле4,  Поле5, Поле6, Поле7, Поле8,  Поле9, Поле10", "");

КонецПроцедуры

Процедура ПрочитатьСтруктуруКаталогов(ОбъектXML, ПрефиксНазванияГруппы = "")
	
	НаименованиеУзла = "";
	ИдУзла = "";
	ПолноеИмяУровня = "";
	
	Пока ОбъектXML.Прочитать() Цикл

		ТипУзла = ОбъектXML.ТипУзла;
		ИмяУзла = ОбъектXML.Имя;

		Если ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ИмяУзла = "Группы" Тогда
			
			ПрочитатьСтруктуруКаталогов(ОбъектXML, ПолноеИмяУровня);
			
		ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ИмяУзла = "Ид" Тогда
			
			ИдУзла = ПолучитьТекстЭлемента(ОбъектXML);
						
		ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ИмяУзла = "Наименование" Тогда
			
			НаименованиеУзла = ПолучитьТекстЭлемента(ОбъектXML);
			ПолноеИмяУровня = ПрефиксНазванияГруппы + ?(Пустаястрока(ПрефиксНазванияГруппы), "", "\") + НаименованиеУзла;
			мСоотвествияКаталогов.Вставить(ИдУзла, ПолноеИмяУровня);
			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента
			И ИмяУзла = "Группы" Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЦикла;	
		
КонецПроцедуры

Функция ПреобразоватьСтрокуКЧислу(СтрокаЭлемента)
	
	Если ПустаяСтрока(СтрокаЭлемента) Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаЭлемента = СтрЗаменить(СтрокаЭлемента, ".", ",");
	
	Возврат Число(СтрокаЭлемента);
	
КонецФункции

Функция ПолучитьЧислоЭлемента(ОбъектXML)
	
	СтрокаЭлемента = ПолучитьТекстЭлемента(ОбъектXML);
	Возврат ПреобразоватьСтрокуКЧислу(СтрокаЭлемента);
	
КонецФункции

Функция ОпределитьПоТтипуИмяПоляКонтактнойИнформации(ИмяТипа)
	
	ИмяПоля = "Поле10";
	
	Если ИмяТипа = "Почтовый индекс"
		ИЛИ ИмяТипа = "Страна" Тогда
		ИмяПоля = "Поле1";
	ИначеЕсли ИмяТипа = "Регион" Тогда
		ИмяПоля = "Поле2";
	ИначеЕсли ИмяТипа = "Район" Тогда
		ИмяПоля = "Поле3";
	ИначеЕсли ИмяТипа = "Населенный пункт" Тогда
		ИмяПоля = "Поле4";
	ИначеЕсли ИмяТипа = "Город" Тогда
		ИмяПоля = "Поле5";
	ИначеЕсли ИмяТипа = "Улица" Тогда
		ИмяПоля = "Поле6";
	ИначеЕсли ИмяТипа = "Дом" Тогда
		ИмяПоля = "Поле7";
	ИначеЕсли ИмяТипа = "Корпус" Тогда
		ИмяПоля = "Поле8";
	ИначеЕсли ИмяТипа = "Квартира" Тогда
		ИмяПоля = "Поле9";
	Конецесли;		
	
	Возврат ИмяПоля;
	
КонецФункции

Процедура ОбрезатьКлючУровняНаОднуПозицию(Ключ)
	
	ПозицияРазделителя = Найти(Ключ, "_");
	Если ПозицияРазделителя Тогда
		Ключ = Сред(Ключ, ПозицияРазделителя + 1);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура обрабатывает текущий элемент XML-файла в соответствии с положением 
// элемента в древовидной структуре файла. 
// Пишет данных в табличные части обработки.
//
// Параметры:
//  ОбъектXML - объект типа ЧтениеXML
//  Ключ      - строка, содержащая путь элемента в XML-файле
//
Процедура ОбработатьЭлемент(ОбъектXML, Ключ)

	ЗначениеТипаОбработки = "";
	Если НЕ СтруктураЗагрузки.Свойство(Ключ, ЗначениеТипаОбработки) Тогда
		Возврат;
	КонецЕсли;

	//Тэги товара
	Если ЗначениеТипаОбработки = "НовыйТоварКаталог" Тогда
		
		мТекСтрТовары             = ТоварыКаталог.Добавить();
		мТекСтрТовары.ИдДокумента = мИдДокумента;
		мТекСтрТовары.Контрагент  = мТекСтрДокументы.Контрагент;
		
	ИначеЕсли ЗначениеТипаОбработки = "НовыйТоварПрайс" Тогда
		
		мТекСтрТовары             = ТоварыПрайс.Добавить();
		мТекСтрТовары.ИдДокумента = мИдДокумента;
		мТекСтрТовары.Контрагент  = мТекСтрДокументы.Контрагент;
		
	ИначеЕсли ЗначениеТипаОбработки = "НовыйТоварДок" Тогда
		
		Если мТекСтрДокументы.Тип = "Счет-фактура полученный" Тогда
			
			мТекСтрДокументыОснования             = ДокументыОснования.Добавить();
			мТекСтрДокументыОснования.ИдДокумента = мИдДокумента;
			мТекСтрДокументыОснования.Контрагент  = мТекСтрДокументы.Контрагент;
			
		Иначе
		
			мТекСтрТовары             = ТоварыДокумент.Добавить();
			мТекСтрТовары.ИдДокумента = мИдДокумента;
			мТекСтрТовары.Контрагент  = мТекСтрДокументы.Контрагент;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеТипаОбработки = "КлассификаторГрупп" Тогда
		
		// классификатор групп
		ПрочитатьСтруктуруКаталогов(ОбъектXML);
		ОбрезатьКлючУровняНаОднуПозицию(Ключ);
				
	ИначеЕсли ЗначениеТипаОбработки = "ИДСвойстваКлассификатора" Тогда
		
		// свойства классификатора
		мСтрокаТаблицыСвойств = мТаблицаСвойствКаталога.Добавить();
		мСтрокаТаблицыСвойств.Ид = ПолучитьТекстЭлемента(ОбъектXML);
		
	ИначеЕсли ЗначениеТипаОбработки = "НаименованиеСвойстваКлассификатора" Тогда
		
		// свойства классификатора
		мСтрокаТаблицыСвойств.Наименование = ПолучитьТекстЭлемента(ОбъектXML);		
				
	ИначеЕсли ЗначениеТипаОбработки = "ИдТовара" Тогда
		мТекСтрТовары.Ид = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ИдКлассификатора" Тогда
		мТекСтрТовары.ИдКаталога = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ШтрихКодТовара" Тогда
		мТекСтрТовары.ШтрихКод = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "АртикулТовара" Тогда
		мТекСтрТовары.Артикул = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ИмяТовара" Тогда
		
		Если мТекСтрДокументы.Тип = "Счет-фактура полученный" Тогда
			ИмяТекБазовойЕдиницы = ПолучитьТекстЭлемента(ОбъектXML);
			Возврат;
		КонецЕсли;
		
		мТекСтрТовары.Наименование = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ЗначениеРеквизитаТовара" Тогда
		
		// значения реквизитов
		ОбъектXML.Прочитать();
		Наименование = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();
		
		ОбъектXML.Прочитать();
		ЗначениеРеквизита = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();
		
		Если Наименование = "ВидНоменклатуры" Тогда
			мТекСтрТовары.ВидНоменклатуры = ЗначениеРеквизита;
		ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
			мТекСтрТовары.ТипНоменклатуры = ЗначениеРеквизита;			
		ИначеЕсли Наименование = "НаименованиеКраткое" Тогда 
			мТекСтрТовары.НаименованиеКраткое = ЗначениеРеквизита;
		ИначеЕсли Наименование = "НаименованиеПолное" Тогда
			мТекСтрТовары.НаименованиеПолное = ЗначениеРеквизита;
		КонецЕсли;
		
	ИначеЕсли ЗначениеТипаОбработки = "ЮрАдресКонтрагента" Тогда
		
		мТекСтрКонтактнойИнформации = КонтактнаяИнформацияКонтрагента.Добавить();
		мТекСтрКонтактнойИнформации.Контрагент = мТекСтрДокументы.Контрагент; 
		мТекСтрКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес; 
		мТекСтрКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента; 
		
		ТекущееИмяТипа = "";
		ТекущееЗначениеТипа = "";

		Пока ОбъектXML.Прочитать() Цикл
			
			ИмяУзла = ОбъектXML.Имя;
						
			Если ОбъектXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И (ИмяУзла = "Представление"
					ИЛИ ИмяУзла = "Комментарий") Тогда
				
				мТекСтрКонтактнойИнформации[ИмяУзла] = ПолучитьТекстЭлемента(ОбъектXML);
				
			ИначеЕсли ОбъектXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И ОбъектXML.Имя = "Тип" Тогда
				
				ТекущееИмяТипа = ПолучитьТекстЭлемента(ОбъектXML);
				ТекущееИмяТипа = ОпределитьПоТтипуИмяПоляКонтактнойИнформации(ТекущееИмяТипа);
				
			ИначеЕсли ОбъектXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И ОбъектXML.Имя = "Значение" Тогда
				
				ТекущееЗначениеТипа = ПолучитьТекстЭлемента(ОбъектXML);
				
				мТекСтрКонтактнойИнформации[ТекущееИмяТипа] = ТекущееЗначениеТипа;
								
			ИначеЕсли ОбъектXML.ТипУзла = ТипУзлаXML.КонецЭлемента
				И ОбъектXML.Имя = "ЮридическийАдрес" Тогда
				
				ОбрезатьКлючУровняНаОднуПозицию(Ключ);
				Прервать;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеТипаОбработки = "ДопЗначениеРеквизитаТовара" Тогда
		
		// значения реквизитов
		ОбъектXML.Прочитать();
		Наименование = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();
		
		ОбъектXML.Прочитать();
		ЗначениеРеквизита = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();
		
		Если Наименование = "СуммаСтарая" Тогда			
			мТекСтрТовары.СуммаСтарая = ПреобразоватьСтрокуКЧислу(ЗначениеРеквизита);			
		ИначеЕсли Наименование = "Качество" Тогда			
			мТекСтрТовары.Качество = ЗначениеРеквизита; 			
		ИначеЕсли Наименование = "ЦенаПоступления" Тогда			
			мТекСтрТовары.ЦенаПоступления = ПреобразоватьСтрокуКЧислу(ЗначениеРеквизита); 		
		ИначеЕсли Наименование = "СуммаПоступления" Тогда
			мТекСтрТовары.СуммаПоступления = ПреобразоватьСтрокуКЧислу(ЗначениеРеквизита);			
		ИначеЕсли Наименование = "СуммаВознаграждения" Тогда
			мТекСтрТовары.СуммаВознаграждения = ПреобразоватьСтрокуКЧислу(ЗначениеРеквизита);			
		ИначеЕсли Наименование = "СуммаНДСВознаграждения" Тогда
			мТекСтрТовары.СуммаНДСВознаграждения = ПреобразоватьСтрокуКЧислу(ЗначениеРеквизита);
		ИначеЕсли Наименование = "Номер" Тогда
			мТекСтрДокументыОснования.НомерОснования = ЗначениеРеквизита;			
		ИначеЕсли Наименование = "Дата" Тогда
			Если Не ПустаяСтрока(ЗначениеРеквизита) Тогда
				мТекСтрДокументыОснования.ДатаОснования = Дата(ЗначениеРеквизита);
			КонецЕсли;			
		ИначеЕсли Наименование = "Тип" Тогда
			мТекСтрДокументыОснования.Тип = ЗначениеРеквизита;
			
		ИначеЕсли Наименование = "СерияНоменклатурыНаименование"
			ИЛИ Наименование = "СерияНоменклатурыСерийныйНомер"
			ИЛИ Наименование = "СерияНоменклатурыСертификат"
			ИЛИ Наименование = "СерияНоменклатурыНомерГТД"
			ИЛИ Наименование = "СерияНоменклатурыСтранаПроисхожденияКОД"
			ИЛИ Наименование = "СерияНоменклатурыСтранаПроисхожденияНаименование"
			ИЛИ Наименование = "СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное"
			ИЛИ Наименование = "СерияНоменклатурыСтранаПроисхожденияКодАльфа2"
			ИЛИ Наименование = "СерияНоменклатурыКомментарий" Тогда
			
			мТекСтрТовары[Наименование] = ЗначениеРеквизита;
			
		ИначеЕсли Наименование = "СерияНоменклатурыСрокГодности" Тогда
			
			Если Не ПустаяСтрока(ЗначениеРеквизита) Тогда
				
				мТекСтрТовары[Наименование] = Дата(ЗначениеРеквизита);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	ИначеЕсли ЗначениеТипаОбработки = "БазоваяЕдиница" Тогда
		
		Если мТекСтрДокументы.Тип = "Счет-фактура полученный" Тогда
			ИмяТекБазовойЕдиницы = ПолучитьТекстЭлемента(ОбъектXML);
			Возврат;
		КонецЕсли;
		
		мТекСтрТовары.БазоваяЕдиницаИзмеренияКод = ОбъектXML.ПолучитьАтрибут("Код");
		мТекСтрТовары.БазоваяЕдиницаИзмеренияНаименованиеПолное = ОбъектXML.ПолучитьАтрибут("НаименованиеПолное");
		мТекСтрТовары.БазоваяЕдиницаИзмеренияМеждународноеСокращение = ОбъектXML.ПолучитьАтрибут("МеждународноеСокращение");		
		
		ОбъектXML.Прочитать();
		
		НаименованиеЕдиницыИзмерения = "";
		КоэффициентЕдиницыИзмерения = 1;
		ВесЕдиницыИзмерения = 0;
		ОбъемЕдиницыИзмерения = 0;
		
		Если ОбъектXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ОбъектXML.Имя = "Пересчет" Тогда
			
			Пока ОбъектXML.Прочитать() Цикл
				
				Если ОбъектXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
					И ОбъектXML.Имя = "Единица" Тогда
					
					НаименованиеЕдиницыИзмерения = ПолучитьТекстЭлемента(ОбъектXML);
					
				ИначеЕсли ОбъектXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
					И ОбъектXML.Имя = "Коэффициент" Тогда
					
					КоэффициентЕдиницыИзмерения = ПолучитьТекстЭлемента(ОбъектXML);
					
				ИначеЕсли ОбъектXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
					И ОбъектXML.Имя = "ЗначениеРеквизита" Тогда
					
					ОбъектXML.Прочитать();
					Наименование = ПолучитьТекстЭлемента(ОбъектXML);
					ОбъектXML.Прочитать();
					
					ОбъектXML.Прочитать();
					ЗначениеРеквизита = ПолучитьТекстЭлемента(ОбъектXML);
					ОбъектXML.Прочитать();
					
					Если Наименование = "Вес" Тогда			
						ВесЕдиницыИзмерения = ПреобразоватьСтрокуКЧислу(ЗначениеРеквизита);			
					ИначеЕсли Наименование = "Объем" Тогда			
						ОбъемЕдиницыИзмерения = ЗначениеРеквизита; 
					КонецЕсли;
					
				ИначеЕсли ОбъектXML.ТипУзла = ТипУзлаXML.КонецЭлемента
					И ОбъектXML.Имя = "Пересчет" Тогда
					
					Прервать;	
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбъектXML.Прочитать();
			
		КонецЕсли;		
		
		Если ОбъектXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			мТекСтрТовары.БазоваяЕдиницаИзмерения = ОбъектXML.Значение;
						
		КонецЕсли;		
				
		Если ПустаяСтрока(НаименованиеЕдиницыИзмерения) Тогда
			НаименованиеЕдиницыИзмерения = мТекСтрТовары.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		
		мТекСтрТовары.ЕдиницаИзмерения = НаименованиеЕдиницыИзмерения;
		мТекСтрТовары.ЕдиницаИзмеренияКоэффициент = КоэффициентЕдиницыИзмерения;
		мТекСтрТовары.ЕдиницаИзмеренияВес = ВесЕдиницыИзмерения;
		мТекСтрТовары.ЕдиницаИзмеренияОбъем = ОбъемЕдиницыИзмерения;
		
		Если мТекСтрДокументы.Тип <> "Каталог" Тогда
			мТекСтрТовары.Коэффициент = 1;
		КонецЕсли;

	//Тэги контрагента
	ИначеЕсли ЗначениеТипаОбработки = "ИмяКонтрагента" Тогда
	
		Если НЕ ЗначениеЗаполнено(мТекСтрДокументы.Контрагент) Тогда
			мТекСтрДокументы.Контрагент = ПолучитьТекстЭлемента(ОбъектXML);
		КонецЕсли;
		
	ИначеЕсли ЗначениеТипаОбработки = "ПолноеНаименование" Тогда
	
		мТекСтрДокументы.НаименованиеПолноеКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
				
	ИначеЕсли ЗначениеТипаОбработки = "ИННКонтрагента" Тогда
		мТекСтрДокументы.ИННКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
		
	ИначеЕсли ЗначениеТипаОбработки = "КППКонтрагента" Тогда
		мТекСтрДокументы.КППКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
		
	ИначеЕсли ЗначениеТипаОбработки = "ОКПОКонтрагента" Тогда
		мТекСтрДокументы.ОКПОКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);		
				     
	ИначеЕсли ЗначениеТипаОбработки = "КонтрагентДок" Тогда
		
		мИмяКонтрагента  = "";
		мИННКонтрагента = "";
		мКППКонтрагента = "";
		мОКПОКонтрагента = "";
		мРольКонтрагента = "";	
		мПолноеНаименованиеКонтрагента = "";
				
	ИначеЕсли ЗначениеТипаОбработки = "РольКонтрагента" Тогда
		
		мРольКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
		ОпределитьПоРолиКонтрагентаОрганизацияИКонтрагентаВДокумента(мТекСтрДокументы);		
		
	ИначеЕсли ЗначениеТипаОбработки = "ИмяКонтрагентаДок" Тогда
		мИмяКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ПолноеНаименованиеКонтрагентаДок" Тогда
		мПолноеНаименованиеКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ИННКонтрагентаДок" Тогда
		мИННКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "КППКонтрагентаДок" Тогда
		мКППКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "ОКПОКонтрагентаДок" Тогда
		мОКПОКонтрагента = ПолучитьТекстЭлемента(ОбъектXML);

	//Тэги типов цен
	ИначеЕсли ЗначениеТипаОбработки = "НовыйТипЦены" Тогда
		мТекСтрТипыЦен             = СоответствияТиповЦен.Добавить();
		мТекСтрТипыЦен.Контрагент  = мТекСтрДокументы.Контрагент;
	ИначеЕсли ЗначениеТипаОбработки = "ИдТипаЦены" Тогда
		мТекСтрТипыЦен.Ид       = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ИмяТипаЦены" Тогда
		мТекСтрТипыЦен.ТипЦены = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ВалютаТипаЦены" Тогда
		мТекСтрТипыЦен.Валюта = ПолучитьТекстЭлемента(ОбъектXML);

	//Тэги налогов
	ИначеЕсли ЗначениеТипаОбработки = "ИмяНалога" Тогда
		мИмяНалога = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "НДСВСуммеПрайс" Тогда
		Если мИмяНалога = "НДС" Тогда
			мТекСтрТипыЦен.НДСВСумме = Число(ПолучитьТекстЭлемента(ОбъектXML));
		КонецЕсли;
	ИначеЕсли ЗначениеТипаОбработки = "НДСВСуммеДок" Тогда
		Если мИмяНалога = "НДС" Тогда
			мТекСтрДокументы.НДСВСумме = ПолучитьТекстЭлемента(ОбъектXML);
		КонецЕсли;

	//Тэги цен
	ИначеЕсли ЗначениеТипаОбработки = "ЦенаВПрайсе" Тогда
	
		ИдТипаЦены = ПолучитьТекстЭлемента(ОбъектXML);
		Если ЗначениеЗаполнено(мТекСтрТовары.ИдТипаЦены) Тогда
			НоваяСтрокаТаблицы                         = ТоварыПрайс.Добавить();
			НоваяСтрокаТаблицы.ИдДокумента             = мТекСтрТовары.ИдДокумента;
			НоваяСтрокаТаблицы.Наименование            = мТекСтрТовары.Наименование;
			НоваяСтрокаТаблицы.НаименованиеКраткое     = мТекСтрТовары.НаименованиеКраткое;
			НоваяСтрокаТаблицы.НаименованиеПолное      = мТекСтрТовары.НаименованиеПолное;
			НоваяСтрокаТаблицы.СтавкаНДС     		   = мТекСтрТовары.СтавкаНДС;
			НоваяСтрокаТаблицы.ХарактеристикаНоменклатуры = мТекСтрТовары.ХарактеристикаНоменклатуры;
			НоваяСтрокаТаблицы.Артикул                 = мТекСтрТовары.Артикул;
			НоваяСтрокаТаблицы.ШтрихКод                = мТекСтрТовары.ШтрихКод;
			НоваяСтрокаТаблицы.Ид                      = мТекСтрТовары.Ид;
			НоваяСтрокаТаблицы.БазоваяЕдиницаИзмерения = мТекСтрТовары.БазоваяЕдиницаИзмерения;
			НоваяСтрокаТаблицы.ЕдиницаИзмерения        = мТекСтрТовары.ЕдиницаИзмерения;
			
			НоваяСтрокаТаблицы.БазоваяЕдиницаИзмеренияКод                     = мТекСтрТовары.БазоваяЕдиницаИзмеренияКод;
			НоваяСтрокаТаблицы.БазоваяЕдиницаИзмеренияНаименованиеПолное      = мТекСтрТовары.БазоваяЕдиницаИзмеренияНаименованиеПолное;
			НоваяСтрокаТаблицы.БазоваяЕдиницаИзмеренияМеждународноеСокращение = мТекСтрТовары.БазоваяЕдиницаИзмеренияМеждународноеСокращение;
			НоваяСтрокаТаблицы.ЕдиницаИзмеренияКоэффициент                    = мТекСтрТовары.ЕдиницаИзмеренияКоэффициент;
			НоваяСтрокаТаблицы.ЕдиницаИзмеренияВес                            = мТекСтрТовары.ЕдиницаИзмеренияВес;
			НоваяСтрокаТаблицы.ЕдиницаИзмеренияОбъем                          = мТекСтрТовары.ЕдиницаИзмеренияОбъем;			
			
			НоваяСтрокаТаблицы.Коэффициент             = мТекСтрТовары.Коэффициент;
			НоваяСтрокаТаблицы.Контрагент              = мТекСтрТовары.Контрагент;
			НоваяСтрокаТаблицы.ТипНоменклатуры         = мТекСтрТовары.ТипНоменклатуры;
			НоваяСтрокаТаблицы.ВидНоменклатуры         = мТекСтрТовары.ВидНоменклатуры;
			НоваяСтрокаТаблицы.ИдКаталога         	   = мТекСтрТовары.ИдКаталога;
			мТекСтрТовары                              = НоваяСтрокаТаблицы;
		КонецЕсли;
		мТекСтрТовары.ИдТипаЦены = ИдТипаЦены;

	ИначеЕсли ЗначениеТипаОбработки = "ЦенаЗаЕдиницу" Тогда
		мТекСтрТовары.Цена = ПолучитьЧислоЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "Валюта" Тогда
		мТекСтрТовары.Валюта = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "Количество" Тогда
		мТекСтрТовары.Количество = ПолучитьЧислоЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "Коэффициент" Тогда
		мТекСтрТовары.Коэффициент = ПолучитьЧислоЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "Сумма" Тогда
		мТекСтрТовары.Сумма = ПолучитьЧислоЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "ЕдиницаИзмерения" Тогда
		мТекСтрТовары.ЕдиницаИзмерения = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "СтавкаНДС" Тогда
		СтрокаСтавки = ПолучитьТекстЭлемента(ОбъектXML);
		
		Если Не ПустаяСтрока(СтрокаСтавки) Тогда
		
			мТекСтрТовары.СтавкаНДС = ПолучитьЗначениеПеречисления(СтрокаСтавки, "СтавкиНДС");
		
		КонецЕсли;
		
	//Тэги типов документов
	ИначеЕсли ЗначениеТипаОбработки = "ТипКаталог" Тогда
	
		мТекСтрДокументы              = ЭлДокументы.Добавить();
		мТекСтрДокументы.Тип          = "Каталог";
		мИдДокумента                  = мИдДокумента + 1;
		мТекСтрДокументы.Ид           = мИдДокумента;
		мТекСтрДокументы.Обрабатывать = 1;
		мТекСтрДокументы.КонтрагентПоставщик = Истина;

	ИначеЕсли ЗначениеТипаОбработки   = "ТипПрайс" Тогда
		
		мТекСтрДокументы              = ЭлДокументы.Добавить();
		мТекСтрДокументы.Тип          = "Прайс";
		мИдДокумента                  = мИдДокумента + 1;
		мТекСтрДокументы.Ид           = мИдДокумента;
		мТекСтрДокументы.Дата         = мДатаФормированияФайлаОбмена;
		мТекСтрДокументы.Обрабатывать = 1;
		мТекСтрДокументы.КонтрагентПоставщик = Истина;

	ИначеЕсли ЗначениеТипаОбработки = "ТипДокумент" Тогда
		
		мТекСтрДокументы              = ЭлДокументы.Добавить();
		мИдДокумента                  = мИдДокумента + 1;
		мТекСтрДокументы.Ид           = мИдДокумента;
		мТекСтрДокументы.Обрабатывать = 1;

	ИначеЕсли ЗначениеТипаОбработки = "ХозОперация" Тогда
		
		ТипХозОперации = ПолучитьТекстЭлемента(ОбъектXML);		
		мТекСтрДокументы.Тип = ОпределитьПоХозОперацииТипДокумента(ТипХозОперации);		
				
	// банковский счет	
	ИначеЕсли ЗначениеТипаОбработки = "НомерСчета" Тогда		
		мТекСтрДокументы.НомерСчета = ПолучитьТекстЭлемента(ОбъектXML);		
		
	// банк	
	ИначеЕсли ЗначениеТипаОбработки = "БанкСчетКорреспондентский" Тогда			
		мТекСтрДокументы.БанкСчетКорреспондентский = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "БанкНаименование" Тогда		
		мТекСтрДокументы.БанкНаименование = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "БанкАдрес" Тогда	                     		
		мТекСтрДокументы.БанкАдрес = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "БанкБИК" Тогда			
		мТекСтрДокументы.Банк = ПолучитьТекстЭлемента(ОбъектXML);
		
	// не прямых расходов	
	ИначеЕсли ЗначениеТипаОбработки = "БанкНЕПрямыхРасходовСчетКорреспондентский" Тогда			
		мТекСтрДокументы.БанкНЕПрямыхРасходовСчетКорреспондентский = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "БанкНЕПрямыхРасходовНаименование" Тогда		
		мТекСтрДокументы.БанкНЕПрямыхРасходовНаименование = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "БанкНЕПрямыхРасходовАдрес" Тогда	                     		
		мТекСтрДокументы.БанкНЕПрямыхРасходовАдрес = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "БанкНЕПрямыхРасходовБИК" Тогда			
		мТекСтрДокументы.БанкНЕПрямыхРасходов = ПолучитьТекстЭлемента(ОбъектXML);
		
		
		
	//Тэги шапки документа
	ИначеЕсли ЗначениеТипаОбработки = "УникальныйИдентификатор" Тогда
		мТекСтрДокументы.УникальныйИдентификаторДокумента = ПолучитьТекстЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "СрокПлатежа" Тогда
		СрокПлатежа = ПолучитьТекстЭлемента(ОбъектXML);
		Если Не ПустаяСтрока(СрокПлатежа) Тогда
			мТекСтрДокументы.СрокПлатежа = ПолучитьДатуИзСтроки(СрокПлатежа);		
		КонецЕсли;
	ИначеЕсли ЗначениеТипаОбработки = "НомерДок" Тогда
		
		мТекСтрДокументы.Номер = ПолучитьТекстЭлемента(ОбъектXML);
		
	ИначеЕсли ЗначениеТипаОбработки = "ДатаДок" Тогда
		
		СтрокаДаты = ПолучитьТекстЭлемента(ОбъектXML);
		мТекСтрДокументы.Дата = ПолучитьДатуИзСтроки(СтрокаДаты);
		
	ИначеЕсли ЗначениеТипаОбработки = "ВремяДок" Тогда
		
		СтрокаВремени = ПолучитьТекстЭлемента(ОбъектXML);
		Если Не ПустаяСтрока(СтрокаВремени) Тогда
			Время = Дата("0001.01.01 " + СтрокаВремени);
		КонецЕсли;
		
		мТекСтрДокументы.Дата = мТекСтрДокументы.Дата + Час(Время) * 60 * 60 + Минута(Время) * 60 + Секунда(Время);
		
	ИначеЕсли ЗначениеТипаОбработки = "КоммерческаяИнформация" Тогда
		
		СтрокаДаты = ОбъектXML.ПолучитьАтрибут("ДатаФормирования");
		Если Не ПустаяСтрока(СтрокаДаты) Тогда
			мДатаФормированияФайлаОбмена = ПолучитьДатуИзСтроки(СтрокаДаты);
		Иначе
			мДатаФормированияФайлаОбмена = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ЗначениеТипаОбработки = "ВалютаДок" Тогда
		мТекСтрДокументы.Валюта = ПолучитьТекстЭлемента(ОбъектXML);
	ИначеЕсли ЗначениеТипаОбработки = "КурсДок" Тогда
		мТекСтрДокументы.Курс = ПолучитьЧислоЭлемента(ОбъектXML);		
	ИначеЕсли ЗначениеТипаОбработки = "Комментарий" Тогда
		мТекСтрДокументы.Комментарий = ПолучитьТекстЭлемента(ОбъектXML);		
		
	ИначеЕсли ЗначениеТипаОбработки = "ЗначениеРеквизита" Тогда
		
		// значения реквизитов
		ОбъектXML.Прочитать();
		Наименование = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();
		
		ОбъектXML.Прочитать();
		ЗначениеРеквизита = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();
		
		Если Наименование = "ДатаДокументаОснования" Тогда
			ЗначениеРеквизита = Дата(ЗначениеРеквизита);
		ИначеЕсли Наименование = "УдержатьКомиссионноеВознаграждение" Тогда
			
			Попытка
				ЗначениеРеквизита = Булево(ЗначениеРеквизита);
			Исключение
				ЗначениеРеквизита = Ложь;
			КонецПопытки;
			
		ИначеЕсли Наименование = "СуммаВознаграждения"
			ИЛИ Наименование = "ПроцентКомиссионногоВознаграждения" Тогда
			
			ЗначениеРеквизита = ОбщегоНазначения.ПривестиСтрокуКЧислу(ЗначениеРеквизита);
						
		КонецЕсли;
		
		Попытка
			мТекСтрДокументы[Наименование] = ЗначениеРеквизита;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ЗначениеТипаОбработки = "ХарактеристикиТовара" Тогда
		
		ОбъектXML.Прочитать();
		Наименование = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();
		
		ОбъектXML.Прочитать();
		ЗначениеРеквизита = ПолучитьТекстЭлемента(ОбъектXML);
		ОбъектXML.Прочитать();

		
		// значения реквизитов
		СтрокаСвойств = ХарактеристикиНоменклатуры.Добавить();
		СтрокаСвойств.Ид = мТекСтрТовары.Ид;
		СтрокаСвойств.Наименование = Наименование;
		СтрокаСвойств.Значение = ЗначениеРеквизита;
		
	ИначеЕсли ЗначениеТипаОбработки = "ИдСвойстваТовара" Тогда
		
		// ид свойства
		мТекСтрСвойстваТовара = ЗначенияСвойствТоваров.Добавить();
		мТекСтрСвойстваТовара.Свойство = ПолучитьТекстЭлемента(ОбъектXML);
		
		мТекСтрСвойстваТовара.БазоваяЕдиницаИзмерения = мТекСтрТовары.БазоваяЕдиницаИзмерения;
		мТекСтрСвойстваТовара.Наименование            = мТекСтрТовары.Наименование;
		мТекСтрСвойстваТовара.Артикул                 = мТекСтрТовары.Артикул;
		мТекСтрСвойстваТовара.ШтрихКод                = мТекСтрТовары.ШтрихКод;
				
	ИначеЕсли ЗначениеТипаОбработки = "ЗначениеСвойстваТовара" Тогда
		
		// значение свойства
		мТекСтрСвойстваТовара.Значение = ПолучитьТекстЭлемента(ОбъектXML);
				
	КонецЕсли;

КонецПроцедуры

// Процедура запускает чтение XML из вложений электронных писем
//
// Параметры:
//  НачДата - дата, начало периода фильтрации писем
//  КонДата - дата, окончание периода фильтрации писем
//
Процедура ОбработатьЭлПисьма(НачДата, КонДата) Экспорт

	#Если Клиент Тогда
	Ответ = Вопрос("Начать загрузку данных из электронных писем?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Загрузка данных");
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли

    мМассивЗагруженныхПисем = Новый Массив();

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенияЭлектронныхПисем.Ссылка   КАК Письмо,
	|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла,
	|	ВложенияЭлектронныхПисем.Объект   КАК ДокЭлектронноеПисьмо
	|	
	|ИЗ
	|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
	|
	|ГДЕ
	|	ВложенияЭлектронныхПисем.Объект.СтатусПисьма = &СтатусПисьма
	|	И ВложенияЭлектронныхПисем.Объект.Тема подобно &ТемаПисьма
	|	И ВложенияЭлектронныхПисем.ПометкаУдаления = Ложь
	|	И ВложенияЭлектронныхПисем.Объект.ПометкаУдаления = Ложь
	|	И ВложенияЭлектронныхПисем.ИмяФайла подобно &ИмяФайлаВложения
	|   И (ВложенияЭлектронныхПисем.Объект.НеРассмотрено = ИСТИНА)";
	
	Запрос.УстановитьПараметр("ТемаПисьма", "%CommerceML%");
	Запрос.УстановитьПараметр("ИмяФайлаВложения", "%.xml%");

	Если ЗначениеЗаполнено(НачДата) Тогда
		Запрос.Текст = Запрос.Текст + " И ВложенияЭлектронныхПисем.Объект.Дата >= &НачДата";
	КонецЕсли;
	Если ЗначениеЗаполнено(КонДата) Тогда
		Запрос.Текст = Запрос.Текст + " И ВложенияЭлектронныхПисем.Объект.Дата <= &КонДата";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ВложенияЭлектронныхПисем.Объект.Дата";

	Запрос.УстановитьПараметр("СтатусПисьма", Перечисления.СтатусыПисем.Полученное);
	Если ЗначениеЗаполнено(НачДата) Тогда
		Запрос.УстановитьПараметр("НачДата", НачДата);
	КонецЕсли;
	Если ЗначениеЗаполнено(КонДата) Тогда
		Запрос.УстановитьПараметр("КонДата", КонДата);
	КонецЕсли;

	ОчиститьТаблицы();

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяВремФайла = ПолучитьИмяВременногоФайла();
		
		ДвоичныеДанные = Выборка.Письмо.Хранилище.Получить();
		ДвоичныеДанные.Записать(ИмяВремФайла);
		ПрочитатьФайлXML(ИмяВремФайла);
		
		УдалитьФайлы(ИмяВремФайла);
		
		Если мМассивЗагруженныхПисем.Найти(Выборка.ДокЭлектронноеПисьмо) = Неопределено Тогда
			мМассивЗагруженныхПисем.Добавить(Выборка.ДокЭлектронноеПисьмо);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЕСТИРОВАНИЯ ДАННЫХ

// Функция определяет возможность записи данных в базу
// и выдает причины невозможности записи
//
//Возвращаемое значение:
// булево - истина, если запись возможна, иначе ложь
//
Функция ТестированиеДанных(СтрокаСообщенияПользователю) Экспорт

	ЕстьНеопределенныеВалюты      = ЛОЖЬ;
	ЕстьНеопределенныеЕдиницы     = ЛОЖЬ;
	ЕстьНеопределенныеКонтрагенты = ЛОЖЬ;
	ЕстьНеопределенныеОрганизации = ЛОЖЬ;
	ЕстьНеопределенныеТовары      = ЛОЖЬ;
	ЕстьНеопределенныеТипыЦены    = ЛОЖЬ;
	ЕстьНеопределенныеБанки       = ЛОЖЬ;
	ЕстьНеопределенныеБанковскиеСчета  = ЛОЖЬ;
	ЕстьНеопределенныеДокументыОснования  = ЛОЖЬ;
	ЕстьНеопределенныеХаракретистикиНоменклатур  = ЛОЖЬ;
	ЕстьНеопределенныеКачестваТовара = ЛОжь;
		
	Для Каждого СтрокаТаблицыДокумент Из ЭлДокументы Цикл
		
		Если НЕ СтрокаТаблицыДокумент.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеНеОпределено(СтрокаТаблицыДокумент.Контрагент) Тогда
			ЕстьНеопределенныеКонтрагенты = ИСТИНА;
		КонецЕсли;
		
		ЕстьНеопределенныеБанки = ЕстьНеопределенныеБанки ИЛИ ЗначениеНеПустаяСтрока(СтрокаТаблицыДокумент.Банк);
		ЕстьНеопределенныеБанки = ЕстьНеопределенныеБанки ИЛИ ЗначениеНеПустаяСтрока(СтрокаТаблицыДокумент.БанкНЕПрямыхРасходов);			
		ЕстьНеопределенныеБанковскиеСчета = ЕстьНеопределенныеБанковскиеСчета ИЛИ ЗначениеНеПустаяСтрока(СтрокаТаблицыДокумент.НомерСчета);
		
		Если СтрокаТаблицыДокумент.Тип = "Каталог" Тогда
			
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыКаталог, СтрокаТаблицыДокумент.Ид);
			Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
				
				ЕстьНеопределенныеЕдиницы = ЕстьНеопределенныеЕдиницы ИЛИ ЗначениеНеОпределено(СтрокаТаблицы.БазоваяЕдиницаИзмерения);				
				ЕстьНеопределенныеТовары = ЕстьНеопределенныеТовары ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура);
				
				Если мИспользоватьХарактеристикиУНоменклатуры И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда
					
					СтрокиСвойств = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаТаблицы.Ид);
					ЕстьНеопределенныеХаракретистикиНоменклатур = ЕстьНеопределенныеХаракретистикиНоменклатур ИЛИ (СтрокиСвойств.Количество() > 0);
					
				КонецЕсли;
				
			КонецЦикла

		ИначеЕсли СтрокаТаблицыДокумент.Тип = "Прайс" Тогда
			
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыПрайс, СтрокаТаблицыДокумент.Ид);
			Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
				
				ЕстьНеопределенныеЕдиницы = ЕстьНеопределенныеЕдиницы ИЛИ ЗначениеНеОпределено(СтрокаТаблицы.БазоваяЕдиницаИзмерения);
				ЕстьНеопределенныеВалюты = ЕстьНеопределенныеВалюты ИЛИ ЗначениеНеОпределено(СтрокаТаблицы.ВалютаЦены);
				ЕстьНеопределенныеТипыЦены = ЕстьНеопределенныеТипыЦены ИЛИ ЗначениеНеОпределено(СтрокаТаблицы.ТипЦены);
				ЕстьНеопределенныеТовары = ЕстьНеопределенныеТовары ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура);
				
				Если мИспользоватьХарактеристикиУНоменклатуры И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда
					
					СтрокиСвойств = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаТаблицы.Ид);
					ЕстьНеопределенныеХаракретистикиНоменклатур = ЕстьНеопределенныеХаракретистикиНоменклатур ИЛИ (СтрокиСвойств.Количество() > 0);
					
				КонецЕсли;
				
			КонецЦикла

		ИначеЕсли ОпределитьПоСтрокеТаблицыЭтоДокументОбмена(СтрокаТаблицыДокумент) Тогда
			
			ЕстьНеопределенныеОрганизации = ЕстьНеопределенныеОрганизации ИЛИ ЗначениеНеОпределено(СтрокаТаблицыДокумент.Организация);
						
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыДокумент, СтрокаТаблицыДокумент.Ид);
			
			Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
				
				ЕстьНеопределенныеЕдиницы = ЕстьНеопределенныеЕдиницы ИЛИ ЗначениеНеОпределено(СтрокаТаблицы.БазоваяЕдиницаИзмерения);
				ЕстьНеопределенныеТовары = ЕстьНеопределенныеТовары ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура);
				ЕстьНеопределенныеКачестваТовара = ЕстьНеопределенныеКачестваТовара ИЛИ ЗначениеНеПустаяСтрока(СтрокаТаблицы.Качество);
				
				Если мИспользоватьХарактеристикиУНоменклатуры И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда
					
					СтрокиСвойств = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаТаблицы.Ид);
					ЕстьНеопределенныеХаракретистикиНоменклатур = ЕстьНеопределенныеХаракретистикиНоменклатур ИЛИ (СтрокиСвойств.Количество() > 0);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаТаблицыДокумент.Тип = "Счет-фактура полученный" Тогда
				
				// проверка на заполненность документов основания
				Для Каждого СтрокаТаблицы Из ДокументыОснования Цикл
				
					ЕстьНеопределенныеДокументыОснования = ЕстьНеопределенныеДокументыОснования ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснования);
								
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ мИспользоватьХарактеристикиУНоменклатуры Тогда
		ЕстьНеопределенныеХаракретистикиНоменклатур  = ЛОЖЬ;
	КонецЕсли;

	ЕстьНесоответствия = ЕстьНеопределенныеВалюты ИЛИ ЕстьНеопределенныеЕдиницы ИЛИ ЕстьНеопределенныеКонтрагенты 
		ИЛИ ЕстьНеопределенныеОрганизации ИЛИ ЕстьНеопределенныеТовары ИЛИ ЕстьНеопределенныеТипыЦены
		ИЛИ ЕстьНеопределенныеБанки ИЛИ ЕстьНеопределенныеБанковскиеСчета ИЛИ ЕстьНеопределенныеДокументыОснования
		ИЛИ ЕстьНеопределенныеХаракретистикиНоменклатур ИЛИ ЕстьНеопределенныеКачестваТовара;
		
	Если ЕстьНесоответствия Тогда
			
		СтрокаСообщенияПользователю = "При загрузке данных программе не удалось автоматически найти объекты информационной базы, соответствующие элементам переданным в файле обмена: " + Символы.ПС;
			
		Если ЕстьНеопределенныеВалюты Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Валюты";
		КонецЕсли;
		Если ЕстьНеопределенныеЕдиницы Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Единицы измерения";
		КонецЕсли;
		Если ЕстьНеопределенныеКонтрагенты Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Контрагенты";
		КонецЕсли;
		Если ЕстьНеопределенныеОрганизации Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Организации";
		КонецЕсли;
		Если ЕстьНеопределенныеТовары Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Номенклатурные позиции";
		КонецЕсли;
		Если ЕстьНеопределенныеХаракретистикиНоменклатур Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Характеристики номенклатур";
		КонецЕсли;
		Если ЕстьНеопределенныеКачестваТовара Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Качества номенклатур";
		КонецЕсли;
		Если ЕстьНеопределенныеТипыЦены Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Типы цен контрагента";
		КонецЕсли;
		Если ЕстьНеопределенныеБанки Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Банки";
		КонецЕсли;
		Если ЕстьНеопределенныеБанковскиеСчета Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Банковские счета";
		КонецЕсли;
		Если ЕстьНеопределенныеДокументыОснования Тогда
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Документы основания";
		КонецЕсли;
		
		СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + Символы.ПС + "Для загрузки данных необходимо указать для каждого объекта в файле его аналог в информационной базе!";
				
	КонецЕсли;	
	
	Возврат НЕ ЕстьНесоответствия;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ ДАННЫХ

Процедура ВыполнитьСохранениеКонтактнойИнформацииКонтрагентов()
	
	КонтактнаяИнформацияКонтрагента.Сортировать("Контрагент");
	ТекущийКонтрагент = Неопределено;
			
	Для Каждого СтрокаКИ Из КонтактнаяИнформацияКонтрагента Цикл
		
		Если НЕ ЗначениеНеПустаяСсылка(СтрокаКИ.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаКИ.Контрагент = ТекущийКонтрагент Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийКонтрагент = СтрокаКИ.Контрагент;
		
		// посмотрим какая ки сейчас у контрагента хранится
		
		НаборЗаписейРегистра = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();		
		НаборЗаписейРегистра.Отбор.Объект.Установить(СтрокаКИ.Контрагент);
		НаборЗаписейРегистра.Отбор.Тип.Установить(СтрокаКИ.Тип);
		НаборЗаписейРегистра.Отбор.Вид.Установить(СтрокаКИ.Вид);
		
		НаборЗаписейРегистра.Прочитать();
		
		НужноЗаписатьРегистр = Истина;
		
		Если НаборЗаписейРегистра.Количество() > 0 Тогда
			
			ПерваяСтрока = НаборЗаписейРегистра[0];
			НужноЗаписатьРегистр = ПерваяСтрока.Представление <> СтрокаКИ.Представление
									ИЛИ ПерваяСтрока.Комментарий <> СтрокаКИ.Комментарий
									ИЛИ ПерваяСтрока.Поле1 <> СтрокаКИ.Поле1
									ИЛИ ПерваяСтрока.Поле2 <> СтрокаКИ.Поле2
									ИЛИ ПерваяСтрока.Поле3 <> СтрокаКИ.Поле3
									ИЛИ ПерваяСтрока.Поле4 <> СтрокаКИ.Поле4
									ИЛИ ПерваяСтрока.Поле5 <> СтрокаКИ.Поле5
									ИЛИ ПерваяСтрока.Поле6 <> СтрокаКИ.Поле6
									ИЛИ ПерваяСтрока.Поле7 <> СтрокаКИ.Поле7
									ИЛИ ПерваяСтрока.Поле8 <> СтрокаКИ.Поле8
									ИЛИ ПерваяСтрока.Поле9 <> СтрокаКИ.Поле9
									ИЛИ ПерваяСтрока.Поле10 <> СтрокаКИ.Поле10;
												
		КонецЕсли;
		
		Если Не НужноЗаписатьРегистр Тогда
			Продолжить;
		КонецЕсли;		
		
		НаборЗаписейРегистра.Очистить();
		
		СтрокаНабора = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаКИ);
		СтрокаНабора.Объект = СтрокаКИ.Контрагент;
		СтрокаНабора.Тип = СтрокаКИ.Тип;
		СтрокаНабора.Вид = СтрокаКИ.Вид;
		СтрокаНабора.ЗначениеПоУмолчанию = Истина;
		
		НаборЗаписейРегистра.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьСохранениеСвойствНоменклатуры()
	
	// нужно пробежать по свойствам и определить все ли они есть в информационной базе
	// если нет - добавляем общие строковые свойства
	ЗначенияСвойствТоваров.Сортировать("Свойство");
	ТекущаяНоменклатура = Неопределено;
	ТекущееСвойство = Неопределено;
	ТекущееИмяСвойства = "";
	СвойствоСтроковое = Ложь;
	СвойствоСсылкаНаЗначенияСвойств = Ложь;
	
	Для Каждого СтрокаСвойств Из ЗначенияСвойствТоваров Цикл
		
		Если НЕ ЗначениеНеПустаяСсылка(СтрокаСвойств.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСвойств.Свойство <> ТекущееИмяСвойства Тогда
			
			ТекущееИмяСвойства = СтрокаСвойств.Свойство;
			// по Ид получим реальное имя свойства
			ИмяСвойстваДляПользователя = мТаблицаСвойствКаталога.Найти(ТекущееИмяСвойства, "Ид").Наименование;
			
			ТекущееСвойство = ВернутьСсылкуНаСвойствоНоменклатурыПоНаименованию(ИмяСвойстваДляПользователя, СвойствоСтроковое, 
				СвойствоСсылкаНаЗначенияСвойств, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);		
			
		Иначе
			
			// два раза одно и то же свойство не пишем
			Если ТекущаяНоменклатура = СтрокаСвойств.Номенклатура Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяНоменклатура = СтрокаСвойств.Номенклатура;
		
		СохранитьЗначениеСвойстваОбъекта(СтрокаСвойств.Номенклатура, ТекущееСвойство, СтрокаСвойств.Значение, СвойствоСтроковое);		
		
	КонецЦикла;	
	
КонецПроцедуры

// Функция по данным обработки формирует записи регистра НоменклатураКонтрагентов
//
// Параметры:
// ИнформацияДокумента - строка табличной части "ЭлДокументы"
// СтрокиДокумента     - массив строк табличной части "ТоварыКаталог"
//
//Возвращаемое значение:
// булево - истина, если запись прошла без ошибок, иначе ложь
//
Функция СохранитьКаталог(ИнформацияДокумента, СтрокиДокумента)

	ВыполнитьСохранениеСвойствНоменклатуры();
	ВыполнитьСохранениеКонтактнойИнформацииКонтрагентов();
	
	//Проверяем нет ли дублирующихся полей при записи регистра
	СтруктураДляПроверки = Новый Соответствие;
	НайденыДубли = ЛОЖЬ;
	
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		Ключ = Строка(СтрокаТаблицы.Номенклатура.УникальныйИдентификатор()) + Строка(СтрокаТаблицы.ХарактеристикаНоменклатуры.УникальныйИдентификатор());
		Если НЕ СтруктураДляПроверки[Ключ] = "*" Тогда
			СтруктураДляПроверки.Вставить(Ключ, "*");
		Иначе
			НайденыДубли = ИСТИНА;
			#Если клиент тогда
			Сообщить("В каталоге обнаружены дублирующиеся значение пар Номенклатура - Характеристика номенклатуры!", СтатусСообщения.Важное);
			Сообщить("Номенклатура:                " + СтрокаТаблицы.Номенклатура, СтатусСообщения.Важное);
			Сообщить("Характеристика номенклатуры: " + СтрокаТаблицы.ХарактеристикаНоменклатуры, СтатусСообщения.Важное);
			#КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
	Если НайденыДубли = ИСТИНА Тогда
		#Если клиент тогда
		Сообщить("В каталоге обнаружены дублирующиеся значение пар Номенклатура - Характеристика номенклатуры", СтатусСообщения.Важное);
		Сообщить("Запись невозможна!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	РегНоменклатураКонтрагентов   = РегистрыСведений.НоменклатураКонтрагентов;
	НаборЗаписей                  = РегНоменклатураКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(ИнформацияДокумента.Контрагент);

	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		
		ЗаписьРегистра                                     = НаборЗаписей.Добавить();
		ЗаписьРегистра.Контрагент                          = ИнформацияДокумента.Контрагент;
		ЗаписьРегистра.Номенклатура                        = СтрокаТаблицы.Номенклатура;
		ЗаписьРегистра.ХарактеристикаНоменклатуры          = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		ЗаписьРегистра.КодНоменклатурыКонтрагента          = СтрокаТаблицы.Ид;
		ЗаписьРегистра.НаименованиеНоменклатурыКонтрагента = ?(ПустаяСтрока(СтрокаТаблицы.НаименованиеКраткое), СтрокаТаблицы.Наименование, СтрокаТаблицы.НаименованиеКраткое);
		ЗаписьРегистра.АртикулНоменклатурыКонтрагента      = СтрокаТаблицы.Артикул;
		ЗаписьРегистра.ШтрихКодНоменклатурыКонтрагента     = СтрокаТаблицы.ШтрихКод;
		ЗаписьРегистра.ЕдиницаНоменклатурыКонтрагента      = СтрокаТаблицы.БазоваяЕдиницаИзмерения;		
				
	КонецЦикла;

	Попытка
		
		НаборЗаписей.Записать(ИСТИНА);
				
	Исключение
		
		ОписаниеОшибкиЗаписи = ОписаниеОшибки();
		#Если клиент тогда
		Сообщить("При записи каталога товаров произошла ошибка: " + Символы.ПС + ОписаниеОшибкиЗаписи, СтатусСообщения.Важное);
		#КонецЕсли
		Возврат ЛОЖЬ;
		
	КонецПопытки;

	ИнформацияДокумента.Записан = ИСТИНА;
	//Удаляем строки записанного документа
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ТоварыКаталог.Удалить(СтрокаТаблицы);
	КонецЦикла;

	Возврат ИСТИНА;

КонецФункции

// Функция по данным обработки формирует документ "УстановкаЦенНоменклатурыКонтрагентов"
//
// Параметры:
// ИнформацияДокумента - строка табличной части "ЭлДокументы"
// СтрокиДокумента     - массив строк табличной части "ТоварыПрайс"
//
//Возвращаемое значение:
// булево - истина, если запись прошла без ошибок, иначе ложь
//
Функция СохранитьПрайс(ИнформацияДокумента, СтрокиДокумента)

	ВыполнитьСохранениеСвойствНоменклатуры();
	ВыполнитьСохранениеКонтактнойИнформацииКонтрагентов();
	
	//Заполняем шапку документа
	ДокУстановкаЦен = Документы.УстановкаЦенНоменклатурыКонтрагентов.СоздатьДокумент();
	
	Если ЗначениеЗаполнено(ИнформацияДокумента.Дата) Тогда
		ДокУстановкаЦен.Дата = НачалоДня(ИнформацияДокумента.Дата);
	Иначе
		ДокУстановкаЦен.Дата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
	
	//ДокУстановкаЦен.УстановитьНовыйНомер();	
	ДокУстановкаЦен.НеПроводитьНулевыеЗначения = ИСТИНА;
	ДокУстановкаЦен.Комментарий                = КомментарийДляДокументов;
	ДокУстановкаЦен.Контрагент                 = ИнформацияДокумента.Контрагент;

	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		
		Если ДокУстановкаЦен.ТипыЦен.Найти(СтрокаТаблицы.ТипЦены, "ТипЦен") = Неопределено Тогда
			
			НоваяСтрокаЦены        = ДокУстановкаЦен.ТипыЦен.Добавить();
			НоваяСтрокаЦены.ТипЦен = СтрокаТаблицы.ТипЦены;
			
		КонецЕсли;		
				
	КонецЦикла;
	
	СтруктураПоискаСтрок = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ТипЦен");
	ТекущийНомер = 0;
	
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		
		СтруктураПоискаСтрок.Номенклатура = СтрокаТаблицы.Номенклатура;
		СтруктураПоискаСтрок.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		СтруктураПоискаСтрок.ТипЦен = СтрокаТаблицы.ТипЦены;
		
		МассивСтрокТЧ = ДокУстановкаЦен.Товары.НайтиСтроки(СтруктураПоискаСтрок);
		
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			
			Для Каждого СтрокаТипаЦены Из ДокУстановкаЦен.ТипыЦен Цикл
				
				НоваяСтрока = ДокУстановкаЦен.Товары.Добавить();		
				
				НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
				
				НоваяСтрока.ТипЦен                     = СтрокаТипаЦены.ТипЦен;
				НоваяСтрока.ИндексСтрокиТаблицыЦен     = ТекущийНомер;
				
			КонецЦикла;
			
			МассивСтрокТЧ = ДокУстановкаЦен.Товары.НайтиСтроки(СтруктураПоискаСтрок);
			ТекущийНомер = ТекущийНомер + 1;
			
		КонецЕсли;
		
		НоваяСтрока = МассивСтрокТЧ[0];
		
		НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ТипЦен                     = СтрокаТаблицы.ТипЦены;
		
		НоваяСтрока.Валюта                     = СтрокаТаблицы.Валюта;
		НоваяСтрока.ЕдиницаИзмерения           = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
		НоваяСтрока.Цена                       = СтрокаТаблицы.Цена;

		Если ДокУстановкаЦен.ТипыЦен.Найти(НоваяСтрока.ТипЦен, "ТипЦен") = Неопределено Тогда
			
			НоваяСтрокаЦены        = ДокУстановкаЦен.ТипыЦен.Добавить();
			НоваяСтрокаЦены.ТипЦен = НоваяСтрока.ТипЦен;
			
		КонецЕсли;		
				
	КонецЦикла;
	
	ДокУстановкаЦен.ТипыЦен.Сортировать("ТипЦен");
	ДокУстановкаЦен.Товары.Сортировать("ТипЦен");
	
	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокУстановкаЦен, "", ТоварыПрайс);
	Возврат РезультатЗаписи;
	
КонецФункции

Функция ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, Док, 
	Примечание = "", ТаблицаТоваровДляУдаления = Неопределено)
	
	Попытка
		
		// новые документы загружаем непроведенными всегда
		Если Док.Проведен Тогда
			
			Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		Иначе
		
			Если ЗаписыватьДокументыВРежимеОбмена Тогда
				Док.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			Док.Записать(РежимЗаписиДокумента.Запись);
		
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибкиЗаписи = ОписаниеОшибки();
		#Если клиент тогда
		Сообщить("При записи документа " + СокрЛП(Док) + " произошла ошибка: " + Символы.ПС + ОписаниеОшибкиЗаписи, СтатусСообщения.Важное);
		#КонецЕсли
		Возврат ЛОЖЬ;
		
	КонецПопытки;

	ИнформацияДокумента.Записан = ИСТИНА;
	
	Если ТаблицаТоваровДляУдаления = Неопределено Тогда
		ТаблицаТоваровДляУдаления = ТоварыДокумент;
	КонецЕсли;
	
	//Удаляем строки записанного документа
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ТаблицаТоваровДляУдаления.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаЗаписанныхДокументов.Добавить();
	СтрокаТаблицы.Документ = Док.Ссылка;
	СтрокаТаблицы.Примечание = Примечание;
	СтрокаТаблицы.Пометка = Истина;
	
	Возврат ИСТИНА;
	
КонецФункции

Процедура ПроверитьПоВидуДоговараНеобходимыйСтатусКонтрагента(Контрагент, ВидДоговора)
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ Не ЗначениеЗаполнено(ВидДоговора) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		
		// поставщик	
		Если Не Контрагент.Поставщик Тогда
			
			ОбъектКонтрагент = Контрагент.ПолучитьОбъект();
			ОбъектКонтрагент.Поставщик = Истина;
			ОбъектКонтрагент.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// покупатель	
		Если Не Контрагент.Покупатель Тогда
			
			ОбъектКонтрагент = Контрагент.ПолучитьОбъект();
			ОбъектКонтрагент.Покупатель = Истина;
			ОбъектКонтрагент.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьДействияДоговорНеНайден(Документ, ВидДоговора)
	
	ИтоговыйКомментарий = "";
	
	Если СоздаватьДоговораАвтоматически Тогда
		
		ПроверитьПоВидуДоговараНеобходимыйСтатусКонтрагента(Документ.Контрагент, ВидДоговора);
		
		// попытка автоматически создать договор контрагента
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = Документ.Контрагент;
		НовыйДоговор.Организация = Документ.Организация;
		НовыйДоговор.ВидДоговора = ВидДоговора;
		
		Попытка
			НовыйДоговор.ВалютаВзаиморасчетов = Документ.ВалютаДокумента;
		Исключение
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(НовыйДоговор.ВалютаВзаиморасчетов) Тогда
		
			Если ЗначениеЗаполнено(мОсновнаяВалютаВзаиморасчетов) Тогда
				НовыйДоговор.ВалютаВзаиморасчетов = мОсновнаяВалютаВзаиморасчетов;
			Иначе
				НовыйДоговор.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(мОсновноеВедениеВзаиморасчетовПоДоговорам) Тогда
			НовыйДоговор.ВедениеВзаиморасчетов = мОсновноеВедениеВзаиморасчетовПоДоговорам;
		Иначе
			НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
		КонецЕсли;
		
		НовыйДоговор.Наименование = Строка(ВидДоговора);
		НовыйДоговор.Комментарий  = КомментарийДляДокументов;
		
		Попытка
			
			НовыйДоговор.Записать();
			Документ.ДоговорКонтрагента = НовыйДоговор.Ссылка;
			
			ИтоговыйКомментарий = "Автоматически создан договор для контрагента";
			
		Исключение
			
			Сообщение = ОписаниеОшибки();
			ИтоговыйКомментарий = "Возникла ошибка при создании договора: " + Сообщение;
			
		КонецПопытки;
		
	Иначе
		
		// договор не создаем
		ИтоговыйКомментарий = "Не заполнен договор в документе";
		
	КонецЕсли;
	
	//#Если клиент тогда
	//Если Не ПустаяСтрока(ИтоговыйКомментарий) Тогда
	//	Сообщить(СокрЛП(Документ) + " : " + ИтоговыйКомментарий);
	//КонецЕсли;
	//#КонецЕсли
	
	Возврат ИтоговыйКомментарий;
	
КонецФункции

Процедура УстановитьКомментарийУДокумента(Док, ИнформацияДокумента)
	
	Если ПустаяСтрока(КомментарийДляДокументов) Тогда
		Док.Комментарий = ИнформацияДокумента.Комментарий;
	ИначеЕсли Не ПустаяСтрока(ИнформацияДокумента.Комментарий) Тогда	
		Док.Комментарий = КомментарийДляДокументов + ": " +  ИнформацияДокумента.Комментарий;
	Иначе
		Док.Комментарий = КомментарийДляДокументов;
	КонецЕсли;
	
Конецпроцедуры



Процедура ВыполнитьУстановкуФлаговДокументаПоУмолчанию(Док)
	
	МетаданныеДокумента = Док.Метаданные();
	
	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
		Док.ОтражатьВУправленческомУчете = мОтражатьВРеглУчете;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда

		Док.ОтражатьВБухгалтерскомУчете = мОтражатьВБухУчета;

		Если Док.ОтражатьВБухгалтерскомУчете
			И МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено Тогда

				Док.ОтражатьВНалоговомУчете = мОтражатьВНалУчете;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента)
	
	НуженНовыйДокумент = НЕ ЗначениеЗаполнено(ИнформацияДокумента.Документ);
	
	Если НЕ НуженНовыйДокумент Тогда
		
		Док = ИнформацияДокумента.Документ.ПолучитьОбъект();		
		
	Иначе	
		
		ИмяДокумента = ПолучитьИмяДокументаПоПредставлению(ИнформацияДокумента.Тип);
		
		Если ПустаяСтрока(ИмяДокумента) Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		Док = Документы[ИмяДокумента].СоздатьДокумент();
				
	КонецЕсли;
	
	Док.Организация = ИнформацияДокумента.Организация;
	Док.Контрагент = ИнформацияДокумента.Контрагент;
	
	Док.НомерВходящегоДокументаЭлектронногоОбмена = ИнформацияДокумента.Номер;
	Док.ДатаВходящегоДокументаЭлектронногоОбмена = ИнформацияДокумента.Дата;
	
	Док.Ответственный = мТекущийПользователь; 
	
	Если НуженНовыйДокумент Тогда
		
		// номер устанавливаем после определения организации, что бы префиксацию использовать
		Док.Дата  = ОбщегоНазначения.ПолучитьРабочуюДату();
		//Док.УстановитьНовыйНомер();
		
		ВыполнитьУстановкуФлаговДокументаПоУмолчанию(Док);
		
	КонецЕсли;
	
	Возврат Док;
	
КонецФункции

Процедура УстановитьВалютуДокумента(Док, ИнформацияДокумента, УснатавливатьКратность = Истина)
	
	Отбор   = Новый Структура("Валюта", ИнформацияДокумента.Валюта);
	Ресурсы = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Док.Дата, Отбор);

	Док.ВалютаДокумента         = ИнформацияДокумента.Валюта;
	
	Если УснатавливатьКратность Тогда
		Док.КурсВзаиморасчетов      = Ресурсы.Курс;
		Док.КратностьВзаиморасчетов = Ресурсы.Кратность;	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоРолиКонтрагентаДоступныеВидыДоговоров(ИнформацияДокумента, СтруктураПараметровДляПолученияДоговора, ВидДоговораПоУмолчанию)
	
	ВидДоговора = Неопределено;
	
	Если ИнформацияДокумента.РольКонтрагента = "Покупатель"	Тогда
		
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;			
		
	ИначеЕсли ИнформацияДокумента.РольКонтрагента = "Продавец" Тогда
		
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		
	ИначеЕсли ИнформацияДокумента.РольКонтрагента = "Комиссионер" Тогда
		
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
		
	ИначеЕсли ИнформацияДокумента.РольКонтрагента = "Комитент" Тогда
		
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	Иначе
		
		ВидДоговора = ВидДоговораПоУмолчанию;
		
		
	КонецЕсли;
	
	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(ВидДоговора);
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	
	Возврат ВидДоговора;
	
КонецФункции

Процедура УстановитьСтавкуНДСВТабЧасти(НоваяСтрока, СтрокаТаблицы)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
		НоваяСтрока.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
	Иначе
		НоваяСтрока.СтавкаНДС = СтрокаТаблицы.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеСерииНоменклатуры(НоваяСтрока, СтрокаТаблицы)
	
	Если ПустаяСтрока(СтрокаТаблицы.СерияНоменклатурыНаименование) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И 
			(Не глЗначениеПеременной("ИспользоватьСерииНоменклатуры") ИЛИ Не НоваяСтрока.Номенклатура.ВестиУчетПоСериям) Тогда
		Возврат;
	КонецЕсли;

	// ищем серийный номер по наименованию
	СерияНоменклатурыСсылка = Справочники.СерииНоменклатуры.НайтиПоНаименованию(СтрокаТаблицы.СерияНоменклатурыНаименование, , , НоваяСтрока.Номенклатура);
	Если ЗначениеЗаполнено(СерияНоменклатурыСсылка) Тогда
		
		НоваяСтрока.СерияНоменклатуры = СерияНоменклатурыСсылка;
		Возврат;
		
	КонецЕсли;
	
	ЭлементСерииНоменклатуры = Справочники.СерииНоменклатуры.СоздатьЭлемент();	
	ЭлементСерииНоменклатуры.Владелец = НоваяСтрока.Номенклатура;
	ЭлементСерииНоменклатуры.Наименование = СтрокаТаблицы.СерияНоменклатурыНаименование;
	ЭлементСерииНоменклатуры.СерийныйНомер = СтрокаТаблицы.СерияНоменклатурыСерийныйНомер;
	ЭлементСерииНоменклатуры.Сертификат = СтрокаТаблицы.СерияНоменклатурыСертификат;
	
	// номер ГТД
	Если НЕ ПустаяСтрока(СтрокаТаблицы.СерияНоменклатурыНомерГТД) Тогда
		
		СсылкаНаНомерГТД = Справочники.НомераГТД.НайтиПоКоду(СтрокаТаблицы.СерияНоменклатурыНомерГТД);
		Если Не ЗначениеЗаполнено(СсылкаНаНомерГТД) Тогда
			
			ЭлементНомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
			ЭлементНомерГТД.Код = СтрокаТаблицы.СерияНоменклатурыНомерГТД; 
			ЭлементНомерГТД.Записать();
			
			СсылкаНаНомерГТД = ЭлементНомерГТД.Ссылка;
			
		КонецЕсли;
		
		ЭлементСерииНоменклатуры.НомерГТД = СсылкаНаНомерГТД;
		
	КонецЕсли;
	
	// страна
	Если НЕ ПустаяСтрока(СтрокаТаблицы.СерияНоменклатурыСтранаПроисхожденияКОД) Тогда
		
		СсылкаНаСтрану = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтрокаТаблицы.СерияНоменклатурыСтранаПроисхожденияКОД);
		Если Не ЗначениеЗаполнено(СсылкаНаСтрану) Тогда
			
			ЭлементСтрана = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
			ЭлементСтрана.Код = СтрокаТаблицы.СерияНоменклатурыСтранаПроисхожденияКОД; 
			ЭлементСтрана.Наименование = СтрокаТаблицы.СерияНоменклатурыСтранаПроисхожденияНаименование; 
			ЭлементСтрана.НаименованиеПолное = СтрокаТаблицы.СерияНоменклатурыСтранаПроисхожденияНаименованиеПолное; 
			ЭлементСтрана.КодАльфа2 = СтрокаТаблицы.СерияНоменклатурыСтранаПроисхожденияКодАльфа2; 
			ЭлементСтрана.Записать();
			
			СсылкаНаСтрану = ЭлементСтрана.Ссылка;
			
		КонецЕсли;
		
		ЭлементСерииНоменклатуры.СтранаПроисхождения = СсылкаНаСтрану;
		
	КонецЕсли;
		
	ЭлементСерииНоменклатуры.Комментарий = СтрокаТаблицы.СерияНоменклатурыКомментарий;
	ЭлементСерииНоменклатуры.СрокГодности = СтрокаТаблицы.СерияНоменклатурыСрокГодности;
	
	ЭлементСерииНоменклатуры.Записать();
	НоваяСтрока.СерияНоменклатуры = ЭлементСерииНоменклатуры.Ссылка;
		
КонецПроцедуры

Функция ВыполнитьУстановкуДоговораКонтрагента(Док, ИнформацияДокумента, СтруктураПараметровДляПолученияДоговора, ВидДоговораПоУмолчанию)
	
	ПримечаниеДляДокумента = "";
	ВалютаДокумента = ИнформацияДокумента.Валюта;
	ДокОснования = ИнформацияДокумента.ДокументОснования;
		
	Если ЗначениеНеПустаяСсылка(ДокОснования) Тогда
		
		Если ЗначениеЗаполнено(ДокОснования.ДоговорКонтрагента) Тогда
		
			Док.ДоговорКонтрагента = ДокОснования.ДоговорКонтрагента;
			Возврат "";
			
		Иначе
			
			Попытка
				
				Если ТипЗнч(Док) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
					
					Если ДокОснования.Товары.Количество() > 0
						И ЗначениеЗаполнено(ДокОснования.Товары[0].ЗаказПокупателя.ДоговорКонтрагента) Тогда
						
						Док.ДоговорКонтрагента = ДокОснования.Товары[0].ЗаказПокупателя.ДоговорКонтрагента;
						Возврат "";	
						
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора", ВалютаДокумента);
	СтруктураПараметровДляПолученияДоговора.Вставить("ВидСравненияВалютыВзаиморасчетов", "=");
	
	ВидДоговора = ПолучитьПоРолиКонтрагентаДоступныеВидыДоговоров(ИнформацияДокумента, СтруктураПараметровДляПолученияДоговора, ВидДоговораПоУмолчанию);
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док, СтруктураПараметровДляПолученияДоговора);
	Если НЕ ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
		
		СтруктураПараметровДляПолученияДоговора.Удалить("ВалютаВзаиморасчетовДоговора");
		СтруктураПараметровДляПолученияДоговора.Удалить("ВидСравненияВалютыВзаиморасчетов");
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док, СтруктураПараметровДляПолученияДоговора);
		
		Если ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			
			ПримечаниеДляДокумента = "Валюта договора не соответствует валюте документа";
			
		Иначе
		
			ПримечаниеДляДокумента = ВыполнитьДействияДоговорНеНайден(Док, ВидДоговора);		
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ПримечаниеДляДокумента
	
КонецФункции

// Функция по данным обработки формирует документ "ЗаказПокупателя"
//
// Параметры:
// ИнформацияДокумента - строка табличной части "ЭлДокументы"
// СтрокиДокумента     - массив строк табличной части "ТоварыДокумент"
//
//Возвращаемое значение:
// булево - истина, если запись прошла без ошибок, иначе ложь
//
Функция СохранитьЗаказ(ИнформацияДокумента, СтрокиДокумента)

	ПримечаниеДляДокумента = "";
	
	ДокЗаказ = СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента);
			
	ДокЗаказ.СкладГруппа = мСкладПоУмолчанию;
	ДокЗаказ.Подразделение = мОсновноеПодразделение;
	
	Если ЗначениеЗаполнено(ДокЗаказ.Организация) Тогда
			
		ДокЗаказ.СтруктурнаяЕдиница  = ДокЗаказ.Организация.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	УстановитьВалютуДокумента(ДокЗаказ, ИнформацияДокумента);
	
	ПримечаниеДляДокумента = ВыполнитьУстановкуДоговораКонтрагента(ДокЗаказ, ИнформацияДокумента, ДокЗаказ.мСтруктураПараметровДляПолученияДоговора, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
    	
	ДокЗаказ.УчитыватьНДС     = ИСТИНА;
	ДокЗаказ.СуммаВключаетНДС = ИнформацияДокумента.НДСВСумме;
	УстановитьКомментарийУДокумента(ДокЗаказ, ИнформацияДокумента);
	
	ДокЗаказ.Товары.Очистить();
	ДокЗаказ.Услуги.Очистить();
	//Заполняем табличную часть
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ЭтоУслуга = СтрокаТаблицы.Номенклатура.Услуга;
		Если Не ЭтоУслуга Тогда
			НоваяСтрока          = ДокЗаказ.Товары.Добавить();
		Иначе
			НоваяСтрока          = ДокЗаказ.Услуги.Добавить();
		КонецЕсли;

		НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
		
		Если Не ЭтоУслуга Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			ПроверитьНаличиеСерииНоменклатуры(НоваяСтрока, СтрокаТаблицы);
			УстановитьПризнакВеденияПоСериямНоменклатуры(НоваяСтрока);
			НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
			НоваяСтрока.Коэффициент      = СтрокаТаблицы.Коэффициент;
		Иначе
			Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
				НоваяСтрока.Содержание = СтрокаТаблицы.НаименованиеПолное;
			Иначе
				НоваяСтрока.Содержание = СтрокаТаблицы.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСтавкуНДСВТабЧасти(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Количество = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена       = СтрокаТаблицы.Цена;
	КонецЦикла;

	//делаем пересчеты сумм, количества мест и НДС по строкам
	Для Каждого СтрокаТабличнойЧасти Из ДокЗаказ.Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокЗаказ);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокЗаказ);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокЗаказ);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из ДокЗаказ.Услуги Цикл
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокЗаказ);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокЗаказ);
	КонецЦикла;

	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокЗаказ, ПримечаниеДляДокумента);
	Возврат РезультатЗаписи;

КонецФункции

Функция СохранитьСчетНаОплатуПоставщика(ИнформацияДокумента, СтрокиДокумента)
	
	ПримечаниеДляДокумента = "";
	
	ДокСчетНаОплатуПоставщика = СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента);
	
	ДокСчетНаОплатуПоставщика.Склад = мСкладПоУмолчанию;
	ДокСчетНаОплатуПоставщика.Подразделение = мОсновноеПодразделение;
	
	Если ЗначениеЗаполнено(ДокСчетНаОплатуПоставщика.Организация) Тогда
			
		ДокСчетНаОплатуПоставщика.СтруктурнаяЕдиница  = ДокСчетНаОплатуПоставщика.Организация.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	УстановитьВалютуДокумента(ДокСчетНаОплатуПоставщика, ИнформацияДокумента);
	
	ДокСчетНаОплатуПоставщика.ДатаОплаты = ИнформацияДокумента.СрокПлатежа;
	
	ДокСчетНаОплатуПоставщика.ДокументОснование = ИнформацияДокумента.ДокументОснования;
	
	СтруктураПараметров = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ПримечаниеДляДокумента = ВыполнитьУстановкуДоговораКонтрагента(ДокСчетНаОплатуПоставщика, ИнформацияДокумента, СтруктураПараметров, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		
	ДокСчетНаОплатуПоставщика.УчитыватьНДС     = ИСТИНА;
	ДокСчетНаОплатуПоставщика.СуммаВключаетНДС = ИнформацияДокумента.НДСВСумме;
	УстановитьКомментарийУДокумента(ДокСчетНаОплатуПоставщика, ИнформацияДокумента);
	
	ДокСчетНаОплатуПоставщика.Товары.Очистить();
	ДокСчетНаОплатуПоставщика.Услуги.Очистить();
	//Заполняем табличную часть
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ЭтоУслуга = СтрокаТаблицы.Номенклатура.Услуга;
		Если Не ЭтоУслуга Тогда
			НоваяСтрока          = ДокСчетНаОплатуПоставщика.Товары.Добавить();
		Иначе
			НоваяСтрока          = ДокСчетНаОплатуПоставщика.Услуги.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;

		Если Не ЭтоУслуга Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
			НоваяСтрока.Коэффициент      = СтрокаТаблицы.Коэффициент;
		Иначе
			Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
				НоваяСтрока.Содержание = СтрокаТаблицы.НаименованиеПолное;
			Иначе
				НоваяСтрока.Содержание = СтрокаТаблицы.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСтавкуНДСВТабЧасти(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Количество = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена       = СтрокаТаблицы.Цена;
	КонецЦикла;

	//делаем пересчеты сумм, количества мест и НДС по строкам
	Для Каждого СтрокаТабличнойЧасти Из ДокСчетНаОплатуПоставщика.Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокСчетНаОплатуПоставщика);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокСчетНаОплатуПоставщика);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокСчетНаОплатуПоставщика);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из ДокСчетНаОплатуПоставщика.Услуги Цикл
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокСчетНаОплатуПоставщика);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокСчетНаОплатуПоставщика);
	КонецЦикла;

	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокСчетНаОплатуПоставщика, ПримечаниеДляДокумента);
	Возврат РезультатЗаписи;

КонецФункции

Функция СохранитьПоступлениеТоваровУслуг(ИнформацияДокумента, СтрокиДокумента)
	
	ПримечаниеДляДокумента = "";
	
	ДокПоступлениеТоваровУслуг = СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента);
	
	ДокПоступлениеТоваровУслуг.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	ДокПоступлениеТоваровУслуг.СкладОрдер = мСкладПоУмолчанию;
	ДокПоступлениеТоваровУслуг.Подразделение = мОсновноеПодразделение;
	
	УстановитьВалютуДокумента(ДокПоступлениеТоваровУслуг, ИнформацияДокумента);
	
	ПримечаниеДляДокумента = ВыполнитьУстановкуДоговораКонтрагента(ДокПоступлениеТоваровУслуг, ИнформацияДокумента, ДокПоступлениеТоваровУслуг.мСтруктураПараметровДляПолученияДоговора, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
	ДокПоступлениеТоваровУслуг.Сделка = ИнформацияДокумента.ДокументОснования;
			
	ДокПоступлениеТоваровУслуг.УчитыватьНДС     = ИСТИНА;
	ДокПоступлениеТоваровУслуг.СуммаВключаетНДС = ИнформацияДокумента.НДСВСумме;
	УстановитьКомментарийУДокумента(ДокПоступлениеТоваровУслуг, ИнформацияДокумента);
	
	ДокПоступлениеТоваровУслуг.Товары.Очистить();
	ДокПоступлениеТоваровУслуг.Услуги.Очистить();
	//Заполняем табличную часть
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		ЭтоУслуга = СтрокаТаблицы.Номенклатура.Услуга;
		Если Не ЭтоУслуга Тогда
			НоваяСтрока          = ДокПоступлениеТоваровУслуг.Товары.Добавить();
		Иначе
			НоваяСтрока          = ДокПоступлениеТоваровУслуг.Услуги.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
		
		Если Не ЭтоУслуга Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			ПроверитьНаличиеСерииНоменклатуры(НоваяСтрока, СтрокаТаблицы);
			УстановитьПризнакВеденияПоСериямНоменклатуры(НоваяСтрока);
			НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
			НоваяСтрока.Коэффициент      = СтрокаТаблицы.Коэффициент;
		Иначе
			Если ЗначениеНеПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
				НоваяСтрока.Содержание = СтрокаТаблицы.НаименованиеПолное;
			Иначе
				НоваяСтрока.Содержание = СтрокаТаблицы.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСтавкуНДСВТабЧасти(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Количество = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена       = СтрокаТаблицы.Цена;
	КонецЦикла;

	//делаем пересчеты сумм, количества мест и НДС по строкам
	Для Каждого СтрокаТабличнойЧасти Из ДокПоступлениеТоваровУслуг.Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокПоступлениеТоваровУслуг);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокПоступлениеТоваровУслуг);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокПоступлениеТоваровУслуг);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из ДокПоступлениеТоваровУслуг.Услуги Цикл
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокПоступлениеТоваровУслуг);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокПоступлениеТоваровУслуг);
	КонецЦикла;

	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокПоступлениеТоваровУслуг, ПримечаниеДляДокумента);
	Возврат РезультатЗаписи;

КонецФункции

Функция СохранитьВозвратТоваровОтПокупателя(ИнформацияДокумента, СтрокиДокумента)
	
	ПримечаниеДляДокумента = "";
	
	ДокВозвратТоваровОтПокупателя = СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента);
	
	ДокВозвратТоваровОтПокупателя.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	ДокВозвратТоваровОтПокупателя.СкладОрдер = мСкладПоУмолчанию;
	ДокВозвратТоваровОтПокупателя.Подразделение = мОсновноеПодразделение;
	
	УстановитьВалютуДокумента(ДокВозвратТоваровОтПокупателя, ИнформацияДокумента);
	
	ПримечаниеДляДокумента = ВыполнитьУстановкуДоговораКонтрагента(ДокВозвратТоваровОтПокупателя, ИнформацияДокумента, ДокВозвратТоваровОтПокупателя.мСтруктураПараметровДляПолученияДоговора, Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	ДокВозвратТоваровОтПокупателя.Сделка = ИнформацияДокумента.ДокументОснования;
		
	ДокВозвратТоваровОтПокупателя.УчитыватьНДС     = ИСТИНА;
	ДокВозвратТоваровОтПокупателя.СуммаВключаетНДС = ИнформацияДокумента.НДСВСумме;
	УстановитьКомментарийУДокумента(ДокВозвратТоваровОтПокупателя, ИнформацияДокумента);
	
	ДокВозвратТоваровОтПокупателя.Товары.Очистить();
	//Заполняем табличную часть
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		НоваяСтрока                            = ДокВозвратТоваровОтПокупателя.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		
		УстановитьСтавкуНДСВТабЧасти(НоваяСтрока, СтрокаТаблицы);
		ПроверитьНаличиеСерииНоменклатуры(НоваяСтрока, СтрокаТаблицы);
		УстановитьПризнакВеденияПоСериямНоменклатуры(НоваяСтрока);
		
		НоваяСтрока.ЕдиницаИзмерения           = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
		НоваяСтрока.Коэффициент                = СтрокаТаблицы.Коэффициент;
		НоваяСтрока.Количество                 = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена                       = СтрокаТаблицы.Цена;
		НоваяСтрока.Качество                   = СтрокаТаблицы.Качество;
	КонецЦикла;

	//делаем пересчеты сумм, количества мест и НДС по строкам
	Для Каждого СтрокаТабличнойЧасти Из ДокВозвратТоваровОтПокупателя.Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокВозвратТоваровОтПокупателя);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокВозвратТоваровОтПокупателя);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокВозвратТоваровОтПокупателя);
	КонецЦикла;

	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокВозвратТоваровОтПокупателя, ПримечаниеДляДокумента);
	Возврат РезультатЗаписи;

КонецФункции

Функция ПолучитьЗначениеПеречисления(ПредставлениеПеречисления, ИмяПеречисления)
	
	Если ПустаяСтрока(ПредставлениеПеречисления) Тогда
		Возврат Перечисления[ИмяПеречисления].Пустаяссылка();
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			
			Возврат Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Перечисления[ИмяПеречисления].Пустаяссылка();
	
КонецФункции

Функция СохранитьОтчетКомиссионераОПродажах(ИнформацияДокумента, СтрокиДокумента)
	
	ПримечаниеДляДокумента = "";
	
	ДокОтчетКомиссионераОПродажах = СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента);
	
	ДокОтчетКомиссионераОПродажах.Подразделение = мОсновноеПодразделение;
	
	ДокОтчетКомиссионераОПродажах.УчитыватьНДС = Истина;
	ДокОтчетКомиссионераОПродажах.СуммаВключаетНДС = Истина;
		
	СтруктураПараметровДляПолученияДоговора = Новый Структура();
    СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
    СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	
	УстановитьВалютуДокумента(ДокОтчетКомиссионераОПродажах, ИнформацияДокумента);
	
	ПримечаниеДляДокумента = ВыполнитьУстановкуДоговораКонтрагента(ДокОтчетКомиссионераОПродажах, ИнформацияДокумента, СтруктураПараметровДляПолученияДоговора, Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	ДокОтчетКомиссионераОПродажах.Сделка = ИнформацияДокумента.ДокументОснования;
		
	УстановитьКомментарийУДокумента(ДокОтчетКомиссионераОПродажах, ИнформацияДокумента);
		
	ДокОтчетКомиссионераОПродажах.УдержатьКомиссионноеВознаграждение = ИнформацияДокумента.УдержатьКомиссионноеВознаграждение;
	ДокОтчетКомиссионераОПродажах.СуммаВознаграждения = ИнформацияДокумента.СуммаВознаграждения;
	ДокОтчетКомиссионераОПродажах.ПроцентКомиссионногоВознаграждения = ИнформацияДокумента.ПроцентКомиссионногоВознаграждения;
	
	ДокОтчетКомиссионераОПродажах.СпособРасчетаКомиссионногоВознаграждения = ПолучитьЗначениеПеречисления(ИнформацияДокумента.СпособРасчетаКомиссионногоВознаграждения, "СпособыРасчетаКомиссионногоВознаграждения");
	ДокОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения = ПолучитьЗначениеПеречисления(ИнформацияДокумента.СтавкаНДСВознаграждения, "СтавкиНДС");
	
	ДокОтчетКомиссионераОПродажах.Товары.Очистить();
	//Заполняем табличную часть
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		НоваяСтрока                            = ДокОтчетКомиссионераОПродажах.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
		НоваяСтрока.Коэффициент                = СтрокаТаблицы.Коэффициент;
		НоваяСтрока.Количество                 = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена                       = СтрокаТаблицы.Цена;
		
		УстановитьСтавкуНДСВТабЧасти(НоваяСтрока, СтрокаТаблицы);
		ПроверитьНаличиеСерииНоменклатуры(НоваяСтрока, СтрокаТаблицы);
		УстановитьПризнакВеденияПоСериямНоменклатуры(НоваяСтрока);
		
		НоваяСтрока.ЦенаПередачи            = СтрокаТаблицы.ЦенаПоступления;
		НоваяСтрока.Суммапередачи           = СтрокаТаблицы.СуммаПоступления;
		НоваяСтрока.СуммаВознаграждения        = СтрокаТаблицы.СуммаВознаграждения;
		НоваяСтрока.СуммаНДСВознаграждения     = СтрокаТаблицы.СуммаНДСВознаграждения;
	КонецЦикла;

	//делаем пересчеты сумм, количества мест и НДС по строкам
	Для Каждого СтрокаТабличнойЧасти Из ДокОтчетКомиссионераОПродажах.Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокОтчетКомиссионераОПродажах);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокОтчетКомиссионераОПродажах);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокОтчетКомиссионераОПродажах);
	КонецЦикла;

	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокОтчетКомиссионераОПродажах, ПримечаниеДляДокумента);
	Возврат РезультатЗаписи;

КонецФункции

Функция СохранитьПереоценкаТоваровПринятыхНаКомиссию(ИнформацияДокумента, СтрокиДокумента)
	
	ПримечаниеДляДокумента = "";
	
	ДокПереоценкаТоваров = СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента);
	
	ДокПереоценкаТоваров.Склад = мСкладПоУмолчанию;
	ДокПереоценкаТоваров.Подразделение = мОсновноеПодразделение;
	
	СтруктураПараметровДляПолученияДоговора = Новый Структура();
    СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
    СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	
	УстановитьВалютуДокумента(ДокПереоценкаТоваров, ИнформацияДокумента);
	
	ПримечаниеДляДокумента = ВыполнитьУстановкуДоговораКонтрагента(ДокПереоценкаТоваров, ИнформацияДокумента, СтруктураПараметровДляПолученияДоговора, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		
	ДокПереоценкаТоваров.Сделка = ИнформацияДокумента.ДокументОснования;
		
	УстановитьКомментарийУДокумента(ДокПереоценкаТоваров, ИнформацияДокумента);
	
	ДокПереоценкаТоваров.Товары.Очистить();
	//Заполняем табличную часть
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		НоваяСтрока                            = ДокПереоценкаТоваров.Товары.Добавить();
		НоваяСтрока.Номенклатура               = СтрокаТаблицы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
		НоваяСтрока.Коэффициент                = СтрокаТаблицы.Коэффициент;
		НоваяСтрока.Количество                 = СтрокаТаблицы.Количество;
		НоваяСтрока.Цена                       = СтрокаТаблицы.Цена;
		НоваяСтрока.СуммаСтарая                = СтрокаТаблицы.СуммаСтарая;
	КонецЦикла;

	//делаем пересчеты сумм, количества мест и НДС по строкам
	Для Каждого СтрокаТабличнойЧасти Из ДокПереоценкаТоваров.Товары Цикл
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокПереоценкаТоваров);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокПереоценкаТоваров);
		
		Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
			СтрокаТабличнойЧасти.ЦенаСтарая = СтрокаТабличнойЧасти.СуммаСтарая / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		
	КонецЦикла;

	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокПереоценкаТоваров, ПримечаниеДляДокумента);
	Возврат РезультатЗаписи;

КонецФункции

Функция ПолучитьНомерБезПрефиксов(Номер)
	
	НомерБезПрефиксов = "";
	Сч = СтрДлина(Номер);
	
	Пока Сч > 0 Цикл
		
		Символ = Сред(Номер, Сч, 1);
		
		Если (Символ >= "0" И Символ <= "9") Тогда
			
			НомерБезПрефиксов = Символ + НомерБезПрефиксов;
			
		Иначе
			
			Возврат НомерБезПрефиксов;
			
		КонецЕсли;
		
		Сч = Сч - 1;
		
	КонецЦикла;
	
	Возврат НомерБезПрефиксов;
	
КонецФункции

Функция СохранитьСчетФактуруПолученный(ИнформацияДокумента, СтрокиДокумента)
	
	ПримечаниеДляДокумента = "";
	
	ДокСФ = СоздатьИлиНайтиДокументДляИзменения(ИнформацияДокумента);
	
	УстановитьКомментарийУДокумента(ДокСФ, ИнформацияДокумента);
	
	УстановитьВалютуДокумента(ДокСФ, ИнформацияДокумента, Ложь);
	
	// номер и дату входящего документа устанавливаем...
	ДокСФ.ДатаВходящегоДокумента = ИнформацияДокумента.Дата;
	ДокСФ.НомерВходящегоДокумента = ПолучитьНомерБезПрефиксов(ИнформацияДокумента.Номер);
	
	ДокСФ.ДокументыОснования.Очистить();
	//Заполняем табличную часть
	Для Каждого СтрокаТаблицы Из СтрокиДокумента Цикл
		НоваяСтрока                            = ДокСФ.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование          = СтрокаТаблицы.ДокументОснования;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДокСФ.ВидСчетаФактуры) Тогда
		ДокСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	КонецЕсли;
	ДокСФ.ОпределениеПараметровСчетаФактуры();
	
	РезультатЗаписи = ВыполнитьСтандартныеДействияДляЗаписиДокумента(ИнформацияДокумента, СтрокиДокумента, ДокСФ, 
		ПримечаниеДляДокумента, ДокументыОснования);
		
	Возврат РезультатЗаписи;

КонецФункции

#Если Клиент Тогда
// Процедура открывать форму соответствий предварительно заполняя
// таблицы соответствий
// 
// Параметры:
//  НачСтраница - строка, имя страницы, которую нужно сделать активной при открытии
//  НачСтрока   - структура для поиска строки, которую нужно сделать активной при открытии
//
Процедура ОткрытьФормуСоответствий(НачСтраница = "", НачСтрока = Неопределено, ЭтаФорма = Неопределено) Экспорт
	
	Если ЭлДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСоответствиеБанковскихСчетов();
	ЗаполнитьСоответствияКачества();
	ЗаполнитьСоответствияБанков();
	ЗаполнитьСоответствияВидовНоменклатуры();
	ЗаполнитьСоответствияТоваров();
	ЗаполнитьСоответствияВалют();
	ЗаполнитьСоответствияЕдиницИзмерения();
	ЗаполнитьСоответствияКонтрагентов();
	ЗаполнитьСоответствияТиповЦен();
	ЗаполнитьСоответствияОрганизаций();
	
	ФормаСоответствий = ПолучитьФорму("ФормаСоответствия", ЭтаФорма);
	
	Если НЕ ПустаяСтрока(НачСтраница) Тогда		
		
		ФормаСоответствий.НачальнаяСтраница = НачСтраница;
		ФормаСоответствий.НачальнаяСтрока   = НачСтрока;
		
	КонецЕсли;
	
	
	ФормаСоответствий.Открыть();

КонецПроцедуры

#КонецЕсли

Процедура УстановитьЗначенияПараметровПоУмолчанию()
	
	мСкладПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнойСклад");
	мОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновноеПодразделение");
	мОсновнаяВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
	мОсновноеВедениеВзаиморасчетовПоДоговорам = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновноеВедениеВзаиморасчетовПоДоговорам");
	мВидНоменклатурыПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнойВидНоменклатуры");
	
	мОтражатьВРеглУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОтражатьДокументыВУправленческомУчете");
	мОтражатьВБухУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
	мОтражатьВНалУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОтражатьДокументыВНалоговомУчете");
		
КонецПроцедуры

// Функция сохраняет загруженные из XML-файлов данных
//
Функция СохранитьДанные(ЗадаватьВопросПользователю = Истина, КоличествоОбработанныхОбъектов = 0) Экспорт

	ТаблицаЗаписанныхДокументов.Очистить();
	
	Отбор = Новый Структура("Обрабатывать", ИСТИНА);
	СтрокиДокумента = ЭлДокументы.НайтиСтроки(Отбор);
	Если СтрокиДокумента.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаСообщенияПользователю = "";
	
	Если НЕ ТестированиеДанных(СтрокаСообщенияПользователю) Тогда
		
		#Если Клиент Тогда
			Предупреждение(СтрокаСообщенияПользователю);
			ОткрытьФормуСоответствий();
		#КонецЕсли		
		
		Возврат Ложь;
		
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ЗадаватьВопросПользователю	 Тогда
		Ответ = Вопрос("Сохранить данные в информационную базу?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Сохранение данных");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат ЛОжь;
		КонецЕсли;
	КонецЕсли;
	
	Состояние("Сохранение объектов в информационную базу ...");
	#КонецЕсли
       
	КоличествоОбработанныхОбъектов = 0;
	ОбъектыУспешноСохранены = Истина;

	Для Каждого СтрокаТаблицыДокумент Из ЭлДокументы Цикл
		
		Если НЕ СтрокаТаблицыДокумент.Обрабатывать Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрокаТаблицыДокумент.Тип = "Каталог" Тогда
			
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыКаталог, СтрокаТаблицыДокумент.Ид);
			ТекущееСохранение = СохранитьКаталог(СтрокаТаблицыДокумент, СтрокиДокумента);

		ИначеЕсли СтрокаТаблицыДокумент.Тип = "Прайс" Тогда
			
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыПрайс, СтрокаТаблицыДокумент.Ид);
			ТекущееСохранение = СохранитьПрайс(СтрокаТаблицыДокумент, СтрокиДокумента)

		Иначе
			
			ВыполнитьСохранениеКонтактнойИнформацииКонтрагентов();
			
			СтрокиДокумента = НайтиСтрокиДокумента(ТоварыДокумент, СтрокаТаблицыДокумент.Ид);
			
			Если СтрокаТаблицыДокумент.Тип = "Заказ покупателя" Тогда
			
				ТекущееСохранение = СохранитьЗаказ(СтрокаТаблицыДокумент, СтрокиДокумента);
				
			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Счет на оплату поставщика" Тогда
				
				ТекущееСохранение = СохранитьСчетНаОплатуПоставщика(СтрокаТаблицыДокумент, СтрокиДокумента);
				
			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Поступление товаров и услуг" Тогда

				ТекущееСохранение = СохранитьПоступлениеТоваровУслуг(СтрокаТаблицыДокумент, СтрокиДокумента);
				
			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Возврат товаров от покупателя" Тогда
				
				ТекущееСохранение = СохранитьВозвратТоваровОтПокупателя(СтрокаТаблицыДокумент, СтрокиДокумента);
				
			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Отчет комиссионера о продажах" Тогда
				
				ТекущееСохранение = СохранитьОтчетКомиссионераОПродажах(СтрокаТаблицыДокумент, СтрокиДокумента);				
								
			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Переоценка товаров принятых на комиссию" Тогда

				ТекущееСохранение = СохранитьПереоценкаТоваровПринятыхНаКомиссию(СтрокаТаблицыДокумент, СтрокиДокумента);
				
			ИначеЕсли СтрокаТаблицыДокумент.Тип = "Счет-фактура полученный" Тогда
				
				СтрокиДокумента = НайтиСтрокиДокумента(ДокументыОснования, СтрокаТаблицыДокумент.Ид);
				ТекущееСохранение = СохранитьСчетФактуруПолученный(СтрокаТаблицыДокумент, СтрокиДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоОбработанныхОбъектов = КоличествоОбработанныхОбъектов + 1;
		
		ОбъектыУспешноСохранены = ОбъектыУспешноСохранены И ТекущееСохранение;
		
		Если КоличествоОбработанныхОбъектов % 50 = 0 Тогда
			
			#Если Клиент тогда
			Состояние("Обработано объектов: " + Строка(КоличествоОбработанныхОбъектов));
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЦикла;

	Отбор = Новый Структура("Записан", ИСТИНА);
	Строки = ЭлДокументы.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из Строки Цикл
		ЭлДокументы.Удалить(СтрокаТаблицы);
	КонецЦикла;	
	
	Возврат ОбъектыУспешноСохранены;
	   
КонецФункции

КомментарийДляДокументов = "Получен в формате CommerceML"; 
мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");

мТаблицаВозможныхТиповДокументов = ВернутьТаблицуВозможныхДокументовДляЗагрузки();
СоздаватьДоговораАвтоматически = Истина;
мТаблицаСвойствКаталога = Неопределено;

мИспользоватьХарактеристикиУНоменклатуры = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");

УстановитьЗначенияПараметровПоУмолчанию();

мДатаФормированияФайлаОбмена = Неопределено;
