 
////////////////////////////////////////////////////////////////////////////////
//
// ОБЩИЙ МОДУЛЬ "УПРАВЛЕНИЕ ДОСТУПОМ К ДОКУМЕНТАМ"
// 
// Автор: Трегуб Михаил
// Дата создания: 30.11.2015
// 
////////////////////////////////////////////////////////////////////////////////
// 
// Модуль предназначен для разграничения прав пользователя при открытии документов
//
////////////////////////////////////////////////////////////////////////////////
//
// ОБЛАСТЬ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ
//

//
// КОНЕЦ ОБЛАСТИ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ
//
////////////////////////////////////////////////////////////////////////////////
//
// ОБЛАСТЬ ФУНКЦИЙ ПРОВЕРКИ РОЛЕЙ ПОЛЬЗОВАТЕЛЯ
//

// Функция проверки принадлежности пользователя к роли Суперпользователя
//
Функция ПользовательИмеетПраваСуперпользователя() Экспорт
	
	Возврат ?(РольДоступна("Суперпользователь"), Истина, Ложь);
	
КонецФункции // ПользовательИмеетПраваСуперпользователя()

// Функция проверки у пользователя полных прав
//
Функция ПользовательИмеетПолныеПрава() Экспорт
	
	Возврат ?(РольДоступна("ПолныеПрава"), Истина, Ложь);
	
КонецФункции // ПользовательИмеетПолныеПрава()

// Функция проверки принадлежности пользователя к роли АдминистраторСклада
//
Функция ПользовательИмеетПраваНачальникаСклада() Экспорт
	
	Возврат ?(РольДоступна("АдминистраторСклада"), Истина, Ложь);
	
КонецФункции // ПользовательИмметПраваНачальникаСклада()

// Функция проверки принадлежности пользователя к роли ЗаведующийСкладом
//
Функция ПользовательИмеетПраваЗаведущегоСкладом() Экспорт
	
	Возврат ?(РольДоступна("ЗаведующийСкладом"), Истина, Ложь);
	
КонецФункции // ПользовательИмметПраваНачальникаСклада()

// Функция проверки принадлежности роли пользователя 
//
Функция ПользовательИмеетПрава(РольДоступа) Экспорт
	
	Возврат ?(РольДоступна(РольДоступа), Истина, Ложь);
	
КонецФункции

Функция ПользователюДоступноНаправление(Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	амбМенеджерыНаправлений.Направление,
	|	амбМенеджерыНаправлений.МенеджерНаправления
	|ИЗ
	|	Справочник.амбМенеджерыНаправлений КАК амбМенеджерыНаправлений
	|ГДЕ
	|	амбМенеджерыНаправлений.МенеджерНаправления = &МенеджерНаправления
	|	И амбМенеджерыНаправлений.Направление = &Направление";

	Запрос.УстановитьПараметр("МенеджерНаправления", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Направление", Направление);

	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Количество() > 0, Истина, Ложь);		
	
КонецФункции

Функция ПользовательМенеджерНаправления(Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	амбМенеджерыНаправлений.Направление,
	|	амбМенеджерыНаправлений.МенеджерНаправления
	|ИЗ
	|	Справочник.амбМенеджерыНаправлений КАК амбМенеджерыНаправлений
	|ГДЕ
	|	амбМенеджерыНаправлений.МенеджерНаправления = &МенеджерНаправления
	|	И амбМенеджерыНаправлений.Направление = &Направление
	|	И амбМенеджерыНаправлений.НачальникОтдела = Истина";

	Запрос.УстановитьПараметр("МенеджерНаправления", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Направление", Направление);

	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Количество() > 0, Истина, Ложь);		
	
КонецФункции


//
// КОНЕЦ ОБЛАСТИ ФУНКЦИЙ ПРОВЕРКИ РОЛЕЙ ПОЛЬЗОВАТЕЛЯ
//
////////////////////////////////////////////////////////////////////////////////
//
// ОБЛАСТЬ ФУНКЦИЙ ПРОВЕРКИ ПРАВ ДОСТУПА  
//

// Функция проверки принадлежности пользователя к группе Админ
//
Функция ПользовательВГруппеАдмин() Экспорт
	
	ГруппаАдмин = Справочники.ГруппыПользователей.НайтиПоНаименованию("Админ");
	Возврат ?(ГруппаАдмин.ПользователиГруппы.Найти(ПараметрыСеанса.ТекущийПользователь) = Неопределено, Ложь, Истина);
	
КонецФункции // ПользовательВГруппеАдмин()

// Функция проверки пользователя как ответственного за документ 
//
Функция ПользовательЯвляетсяОтветственнымЗаДокумент(Ответственный)
	
	Возврат ?(Ответственный = ПараметрыСеанса.ТекущийПользователь, Истина, Ложь);	
	
КонецФункции // ПользовательЯвляетсяОтветственнымЗаДокумент()

// Функция проверки пользователя как начальника отдела
//
Функция ПользовательЯвляетсяНачальникомОтдела(Ответственный)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	амбМенеджерыНаправленийСотрудникиОтдела.Ссылка
	|ИЗ
	|	Справочник.амбМенеджерыНаправлений.СотрудникиОтдела КАК амбМенеджерыНаправленийСотрудникиОтдела
	|ГДЕ
	|	амбМенеджерыНаправленийСотрудникиОтдела.Сотрудник = &Сотрудник
	|	И амбМенеджерыНаправленийСотрудникиОтдела.Ссылка.МенеджерНаправления = &Пользователь
	|	И амбМенеджерыНаправленийСотрудникиОтдела.Ссылка.НачальникОтдела = ИСТИНА";

	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Сотрудник",    Ответственный);

	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Количество() > 0, Истина, Ложь);
	
КонецФункции // ПользовательЯвляетсяНачальникомОтдела()

// Функция проверки пользователя как делегированного лица у ответственного за документ
//
Функция ПользовательВСпискеДелегированныхПользователей(Ответственный)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиДелегированныеЛица.Ссылка
	|ИЗ
	|	Справочник.Пользователи.ДелегированныеЛица КАК ПользователиДелегированныеЛица
	|ГДЕ
	|	ПользователиДелегированныеЛица.Пользователь = &Пользователь
	|	И ПользователиДелегированныеЛица.Ссылка.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Сотрудник",    Ответственный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Количество() > 0, Истина, Ложь);
	
КонецФункции // ПользовательВСпискеДелегированныхПользователей()

// Функция проверки пользователя как принадлежащего к региону документа 
//
Функция ПользовательПринадлежитКРегионуДокумента(Регион)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	амбМенеджерыНаправленийРегионы.Ссылка
	|ИЗ
	|	Справочник.амбМенеджерыНаправлений.Регионы КАК амбМенеджерыНаправленийРегионы
	|ГДЕ
	|	амбМенеджерыНаправленийРегионы.Ссылка.МенеджерНаправления = &Пользователь
	|	И амбМенеджерыНаправленийРегионы.Регион = &Регион";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Регион",       Регион);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Количество() > 0, Истина, Ложь);
	
КонецФункции // ПользовательПринадлежитКРегионуДокумента()

//
// КОНЕЦ ОБЛАСТИ ФУНКЦИЙ ПРОВЕРКИ ПРАВ ДОСТУПА
//
////////////////////////////////////////////////////////////////////////////////
//
// ОБЛАСТЬ ФУНКЦИЙ ВЫБОРКИ ДАННЫХ ПОЛЬЗОВАТЕЛЯ
//

// Функция возвращает список делегированных лиц текущего пользователя  
//
Функция ПолучитьДелегатов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПользователиДелегированныеЛица.Ссылка
	|ИЗ
	|	Справочник.Пользователи.ДелегированныеЛица КАК ПользователиДелегированныеЛица
	|ГДЕ
	|	ПользователиДелегированныеЛица.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	СписокПользователей = Результат.Выгрузить();
	
	//Если начальник отдела, то добавим сотрудников отдела в список пользователей.
 	Запрос.Текст = "
	|ВЫБРАТЬ
    |	амбМенеджерыНаправленийСотрудникиОтдела.Сотрудник
    |ИЗ
    |	Справочник.амбМенеджерыНаправлений.СотрудникиОтдела КАК амбМенеджерыНаправленийСотрудникиОтдела
    |ГДЕ
    |	амбМенеджерыНаправленийСотрудникиОтдела.Ссылка.МенеджерНаправления = &Пользователь
    |	И амбМенеджерыНаправленийСотрудникиОтдела.Ссылка.НачальникОтдела = ИСТИНА";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка =  Результат.Выбрать();
	
	Пока Выборка.Следующий() цикл
		СтрокаТЧ = СписокПользователей.Добавить();
		СтрокаТЧ.Ссылка = Выборка.Сотрудник;  	
	КонецЦикла;	
	
	//Если начальник отдела, то добавим сотрудников отдела в список пользователей.
 	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияСотрудники.Пользователь
	|ИЗ
	|	Справочник.Подразделения.Сотрудники КАК ПодразделенияСотрудники
	|ГДЕ
	|	ПодразделенияСотрудники.Ссылка.РуководительПодразделения = &РуководительПодразделения";
	
	Запрос.УстановитьПараметр("РуководительПодразделения", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка =  Результат.Выбрать();
	
	Пока Выборка.Следующий() цикл
		СтрокаТЧ = СписокПользователей.Добавить();
		СтрокаТЧ.Ссылка = Выборка.Пользователь;  	
	КонецЦикла;	

	
    ///Начальник отдела

	Возврат СписокПользователей;
КонецФункции // ПолучитьДелегатов()

// Функция проверки пользователя в списке делегированных у Ответственного
//
Функция ПользовательДелегирован(Ответственный) Экспорт
	
	СписокДелегатов = ПолучитьДелегатов();
	
	Возврат ?(СписокДелегатов.Найти(Ответственный, "Ссылка") = Неопределено, Ложь, Истина);
	
КонецФункции // ПользовательДелегирован()

//
// КОНЕЦ ОБЛАСТИ ФУНКЦИЙ ВЫБОРКИ ДАННЫХ ПОЛЬЗОВАТЕЛЯ
//
////////////////////////////////////////////////////////////////////////////////
//
// ОБЛАСТЬ ЭКСПОРТНЫХ ФУНКЦИЙ
//

// Процедура установки отбора документов 
// --
//
// Использование данной функции возможно если у документа есть реквизиты: Организация и Ответственный
//
// <Название общего модуля>.<Название функции>(Отбор, ЗначениеОтбора);
// 
// Отбор - Ссылка на объект Отбор документа
// ЗначениеОтбора - Параметры отбора: 
//
// Неопределено - отключение отбора по организации (если есть полные права, отключение отбора еще и по ответственному)
// ПрефиксОрганизации - "В", "Е", "А", .... Устанавливает отбор по организации
// Мои - Устанавливает отбор документов по текущему пользователю
// Делегаты - Устанавливает отбор по пользователю и делегированым лицам
//
// Пример использования:
// 
// УправлениеДоступомКДокументам.УстановкаОтбораСпискаДокументов(Отбор, "Мои");
//
// --
//
Процедура УстановкаОтбораСпискаДокументов(Отбор, ЗначениеОтбора = "", ОтключитьОтборПоПользователю = Ложь) Экспорт
	
	Если Отбор = Неопределено Тогда
		Сообщить("Ошибка отбора. Не указана ссылка на отбор!");
	Иначе 
					
		СохранятьОтборПоПользователю = Не (ПользовательИмеетПолныеПрава() ИЛИ ПользовательВГруппеАдмин() ИЛИ ПользовательИмеетПраваЗаведущегоСкладом());
		
		Если Не Отбор.Найти("ОтветственныйЗаказа") = Неопределено Тогда
			Ответственный = Отбор.Найти("ОтветственныйЗаказа");	
		ИначеЕсли Не Отбор.Найти("амбОтветственный") = Неопределено Тогда
			Ответственный = Отбор.Найти("амбОтветственный");
		Иначе
			Ответственный = Отбор.Ответственный;
		КонецЕсли;
		
		
		
		
		Если Не СохранятьОтборПоПользователю ИЛИ ОтключитьОтборПоПользователю Тогда
			
			Если ЗначениеОтбора = "" Тогда
			
				Ответственный.Использование = Ложь;
				Отбор.Организация.Использование   = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Если Не Ответственный.Использование = Истина Тогда
				
				Ответственный.ВидСравнения  = ВидСравнения.Равно;
				Ответственный.Значение      = ПараметрыСеанса.ТекущийПользователь;
				Ответственный.Использование = Истина;
				
			КонецЕсли;
			
			Отбор.Организация.Использование   = Ложь;
			
		КонецЕсли;
		
					
		Если ЗначениеОтбора = "Мои" Тогда
			
			Ответственный.ВидСравнения  = ВидСравнения.Равно;
			Ответственный.Значение      = ПараметрыСеанса.ТекущийПользователь;
			Ответственный.Использование = Истина;	
			
		ИначеЕсли ЗначениеОтбора = "Делегаты" Тогда
			
			ДелегатыПользователя = ПолучитьДелегатов();
			СписокДелегатов = Новый СписокЗначений;
			СписокДелегатов.ЗагрузитьЗначения(ДелегатыПользователя.ВыгрузитьКолонку("Ссылка")); 
			СписокДелегатов.Добавить(ПараметрыСеанса.ТекущийПользователь);
			
			Ответственный.ВидСравнения  = ВидСравнения.ВСписке;
			Ответственный.Значение      = СписокДелегатов;
			Ответственный.Использование = Истина;
		
		ИначеЕсли СтрДлина(ЗначениеОтбора) > 0 Тогда
			
			Организация = Справочники.Организации.НайтиПоРеквизиту("Префикс", ЗначениеОтбора);
			
			Если Не Организация = Справочники.Организации.ПустаяСсылка() Тогда
			
				Отбор.Организация.ВидСравнения    = ВидСравнения.Равно;         
				Отбор.Организация.Значение        = Справочники.Организации.НайтиПоРеквизиту("Префикс", ЗначениеОтбора);
				Отбор.Организация.Использование   = Истина;	
				
			Иначе
				
				Отбор.Организация.Использование   = Ложь;	
				
			КонецЕсли;
							
		КонецЕсли;			
				
	КонецЕсли;
			
КонецПроцедуры // УстановкаОтбораСпискаДокументов()

// Процедура проверки наличия необходимых прав у пользователя при открытии докумкента
//
Процедура ПроверкаНаличияДоступаПользователяКДокументу(Ссылка, Отказ) Экспорт
	
	Попытка
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Ответственный       = Ссылка.Ответственный;
		Регион              = Ссылка.Контрагент.Регион;
		ОтветственныйЗаказа = Ссылка.ОтветственныйЗаказа;
		//...
		
	Исключение      
		
		Ответственный = ?(ЗначениеЗаполнено(Ответственный), Ответственный, "");
		ОтветственныйЗаказа = ?(ЗначениеЗаполнено(ОтветственныйЗаказа), ОтветственныйЗаказа, "");
		Регион        = ?(ЗначениеЗаполнено(Регион), Регион, "");
        //...
		
	КонецПопытки;
		
	Если Не ПользовательИмеетПолныеПрава() И
		 Не ПользовательЯвляетсяОтветственнымЗаДокумент(Ответственный) И 
	     Не ПользовательЯвляетсяНачальникомОтдела(Ответственный) И
		 Не ПользовательВСпискеДелегированныхПользователей(Ответственный) И
		 Не ПользовательПринадлежитКРегионуДокумента(Регион) И
		 Не ПользовательВСпискеДелегированныхПользователей(ОтветственныйЗаказа) И
		 НЕ ПользовательВГруппеАдмин() И
		 НЕ ПользовательИмеетПраваЗаведущегоСкладом() И
		 Не ПараметрыСеанса.ТекущийПользователь = ОтветственныйЗаказа И
		 НЕ ОтветственныйЗаказа = Справочники.Пользователи.ПустаяСсылка() Тогда
		 
		Отказ = Истина;
		
		Предупреждение ("У Вас не достаточно прав на открытие документа! Автор: " + Ответственный + " Попросите, чтобы Вас добавили в доверенные лица!");		
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаНаличияДоступаПользователяКДокументу()

//
// КОНЕЦ ОБЛАСТИ ЭКСПОРТНЫХ ФУНКЦИЙ 
////////////////////////////////////////////////////////////////////////////////
//
// ОБЛАСТЬ ФУНКЦИЙ И ПРОЦЕДУР ДЛЯ РАБОТЫ СО ШТРИХКОДАМИ
//

Функция ЗакодироватьСсылкуНаДокумент(СсылкаНаДокумент, ТипШтрихКода) Экспорт
	
	Если ТипШтрихКода = "Code128" Тогда
		
		Док = Документы.РеализацияТоваровУслуг.НайтиПоНомеру("Е0000000001", ТекущаяДата()).ВерсияДанных;
		СсылкаНаОбъект = Документы.РеализацияТоваровУслуг.НайтиПоНомеру("Е0000000001", ТекущаяДата());

		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ТипДокумента = 1;
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РезервированиеТоваров") Тогда
			ТипДокумента = 2;
		Иначе
			ТипДокумента = 3;
		КонецЕсли;

		КодСимволаОрганизации = Сред(Формат(КодСимвола(СсылкаНаОбъект.Номер), "ЧГ=0"), 3); 
		НомерДокумента  = Сред(СсылкаНаОбъект.Номер, 2);
		ГодДокумента    = Формат(СсылкаНаОбъект.Дата, "ДФ=yy");
		ВерсияДокумента = "00";

		ШтрихКодСсылки = КодСимволаОрганизации + НомерДокумента + ГодДокумента + ТипДокумента + ВерсияДокумента;

		
		Возврат ШтрихКодСсылки;
						
	Иначе
		
		//
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуИзШтрихКода(Знач ШтрихКод, RegExp = Неопределено) Экспорт
	
	Если Не RegExp = Неопределено Тогда
		
		RegExp.Pattern = "([0-9]{2})([0-9]{1,10})([12]{1}[0-9]{1})([0-9]{2})([0-9]{2})([\s\d]*)";
		
		Массив = RegExp.Execute(ШтрихКод);
		
		ПрефиксОрганизации   = Символ("10" + Массив.Item(0).SubMatches(0));
		НомерДокумента       = ПрефиксОрганизации + Массив.Item(0).SubMatches(1);
		ГодСозданияДокумента = Дата("20" + Массив.Item(0).SubMatches(2), 1, 1);
		ТипДокумента         = Массив.Item(0).SubMatches(3);
		ВерсияДокумента      = Массив.Item(0).SubMatches(4);
		
		Если ТипДокумента = "1" Тогда
			Ссылка = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(НомерДокумента,ГодСозданияДокумента);	
		ИначеЕсли ТипДокумента = "2" Тогда
			Ссылка = Документы.РезервированиеТовара.НайтиПоНомеру(НомерДокумента,ГодСозданияДокумента);	
		Иначе
			
		КонецЕсли;
		
		Возврат Ссылка;	
		
	Иначе
		
	КонецЕсли;
		
КонецФункции

//
// КОНЕЦ ОБЛАСТИ ФУНКЦИЙ И ПРОЦЕДУР ДЛЯ РАБОТЫ СО ШТРИХКОДАМИ
//
////////////////////////////////////////////////////////////////////////////////


