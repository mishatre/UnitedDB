Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос для проверки ТЧ документа на наличие дублей.
//
//  Возвращаемое значение - ТаблицаЗначений, выгруженная из результата запроса.
//
Функция СформироватьЗапросПоДублям()

	СтруктураПолейДублей = Новый Структура;
	СтруктураПолейДублей.Вставить("НоменклатурнаяЦеноваяГруппа");
	СтруктураПолейДублей.Вставить("УсловиеПродаж");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Док.НоменклатурнаяЦеноваяГруппа,
	|	Док.УсловиеПродаж,
	|	СУММА(1) КАК КоличествоДублей
	|ИЗ
	|	Документ.УстановкаНаценокПоУсловиямПродаж.Наценки КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|СГРУППИРОВАТЬ ПО
	|	НоменклатурнаяЦеноваяГруппа,
	|	УсловиеПродаж
	|");

	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // СформироватьЗапросПоДублям()

// Проверяет переданную таблицу значений на наличие дублей,
// Выдает сообщения о дублях.
//
//  Параметры:
//   ТаблицаПроверкиДублей - ТаблицаЗначений, выгруженная из результата запроса по дублям;
//   СтруктураПолей - структура, содержащая названия полей, дубли которых
//   нужно проверить;
//   Отказ - в эту переменную вернется Истина, если есть дубли;
//   Заголовок - заголовок сообщения о дублях.
//
Процедура ПроверитьДубли(ТаблицаПроверкиДублей, СтруктураПолей, Отказ, Заголовок)

	Для Каждого СтрокаДублей Из ТаблицаПроверкиДублей Цикл
		Если СтрокаДублей.КоличествоДублей > 1 Тогда
			СтрокаСообщения = "Дублируется строка: ";

			Для Каждого Поле Из СтруктураПолей Цикл
				СтрокаСообщения = СтрокаСообщения + СтрокаДублей[Поле.Ключ] + ", ";
			КонецЦикла;

			// Уберем из текста сообщения последнюю запятую и пробел.
			СтрокаСообщения = Лев(СтрокаСообщения, СтрДлина(СтрокаСообщения) - 2);

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения + "!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьДубли()

// Процедура проверяет, нет ли пересекающихся интервалами документов с текущим.
// 
// Параметры:
//  Отказ - в эту переменную вернется Истина, исли обнаружены ошибки.
//  Заголовок - сообщений об ошибках.
//
Процедура ПроверитьПересекающиесяДокументы(Отказ, Заголовок)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.НоменклатурнаяЦеноваяГруппа КАК Группа,
	|	Док.УсловиеПродаж КАК УсловиеПродаж,
	|	РегНаценкиПоУсловиямПродаж.ПроцентНаценки КАК ПроцентНаценки,
	|	РегНаценкиПоУсловиямПродаж.Период КАК ДатаНачала,
	|	РегНаценкиПоУсловиямПродаж.Регистратор КАК Регистратор
	|ИЗ
	|	Документ.УстановкаНаценокПоУсловиямПродаж.Наценки КАК Док
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ПО
	|	СпрНоменклатура.НоменклатурнаяГруппа = Док.НоменклатурнаяЦеноваяГруппа
	|	ИЛИ СпрНоменклатура.ЦеноваяГруппа = Док.НоменклатурнаяЦеноваяГруппа
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НаценкиПоУсловиямПродаж КАК РегНаценкиПоУсловиямПродаж
	|ПО
	|	(СпрНоменклатура.НоменклатурнаяГруппа = РегНаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
	|	ИЛИ СпрНоменклатура.ЦеноваяГруппа = РегНаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа)
	|	И Док.УсловиеПродаж = РегНаценкиПоУсловиямПродаж.УсловиеПродаж
	|	И Док.НоменклатурнаяЦеноваяГруппа <> РегНаценкиПоУсловиямПродаж.НоменклатурнаяЦеноваяГруппа
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО Период Возр, Группа Возр, ПроцентНаценки Убыв
	|";

	ТЗ = Запрос.Выполнить().Выгрузить();

	ТЗ.Колонки.Добавить("ДатаОкончания");
	ТЗ.ЗаполнитьЗначения('00010101', "ДатаОкончания");

	// Сопоставим строки, которые начинают действие наценок и строки, которые его заканчивают.
	КоличествоСтрок = ТЗ.Количество() - 1;
	Для Тмп = 0 По КоличествоСтрок Цикл
		СтрокаТЗ = ТЗ[КоличествоСтрок - Тмп];

		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ПроцентНаценки) Тогда
			Для Тмп1 = 0 По ТЗ.Количество() -1 Цикл
				СтрокаПоиска = ТЗ[Тмп];

				Если СтрокаПоиска.Группа = СтрокаТЗ.Группа
				   И СтрокаПоиска.УсловиеПродаж = СтрокаТЗ.УсловиеПродаж
				   И НЕ ЗначениеЗаполнено(СтрокаПоиска.ДатаОкончания) Тогда
					СтрокаПоиска.ДатаОкончания = СтрокаТЗ.ДатаНачала;
					ТЗ.Удалить(СтрокаТЗ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	// Если дата окончания по строке больше даты документа - это пересечение.
	СтрокаДокументовПересечений = "";
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если СтрокаТЗ.ДатаОкончания > Дата Или НЕ ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончания) Тогда 
			СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС + СтрокаТЗ.Группа + ", " + СтрокаТЗ.УсловиеПродаж +": " + СтрокаТЗ.Регистратор;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Найдены записи о наценках для групп по условиям продаж, которые уже действуют:" + СтрокаДокументовПересечений, Отказ, Заголовок);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры //ПроверитьПересекающиесяДокументы()

// Выполняет движения по регистрам.
//
// Параметры:
//  СтруктураШапкиДокумента - структура шапки документа.
//  ТаблицаПоНаценкам - таблица значений, полученная из реквизитов ТЧ "Наценки".
//  Отказ - флаг, Истина, если в проведении отказано.
//  Заголовок - заголовок сообщения об ошибках.
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНаценкам, Отказ, Заголовок)

	НаборДвижений = Движения.НаценкиПоУсловиямПродаж;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоНаценкам, ТаблицаДвижений);

	НаборДвижений.мПериод = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.НаценкиПоУсловиямПродаж.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработкик события "Проведение" объекта.
//
Процедура ОбработкаПроведения(Отказ, Режим)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ВидОперации");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьПересекающиесяДокументы(Отказ, Заголовок);

	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("НоменклатурнаяЦеноваяГруппа");
	СтруктураОбязательныхПолей.Вставить("УсловиеПродаж");
	//СтруктураОбязательныхПолей.Вставить("ПроцентНаценки");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Наценки", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Структура ключевых полей для проверки дублей.
	СтруктураПолейДублей = Новый Структура;
	СтруктураПолейДублей.Вставить("НоменклатурнаяЦеноваяГруппа");
	СтруктураПолейДублей.Вставить("УсловиеПродаж");

	ТаблицаПроверкиДублей = СформироватьЗапросПоДублям();

	ПроверитьДубли(ТаблицаПроверкиДублей, СтруктураПолейДублей, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НоменклатурнаяЦеноваяГруппа", "НоменклатурнаяЦеноваяГруппа");
	СтруктураПолей.Вставить("УсловиеПродаж", "УсловиеПродаж");
	СтруктураПолей.Вставить("ПроцентНаценки", "ПроцентНаценки");

	РезультатЗапросаПоНаценкам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Наценки", СтруктураПолей);

	Если РезультатЗапросаПоНаценкам.Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть документа!", Отказ, Заголовок);
	КонецЕсли;

	ТаблицаПоНаценкам = РезультатЗапросаПоНаценкам.Выгрузить();

	ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоНаценкам, Отказ, Заголовок);

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения



