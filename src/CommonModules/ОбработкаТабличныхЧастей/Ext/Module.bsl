////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяЕдиницыИзмерения, МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения].Владелец Тогда
		СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	КонецЕсли;

	// При изменении номенклатуры очистим единицу мест
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.СерияНоменклатуры = Неопределено;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

//Процедура открывает Форму для выбора номенклатуры с характеристиками из справочника Номенклатура
Процедура ОткрытьФормуСправочникаНоменклатурыДляВыбора(СтруктураВыборСХарактеристикой, ФормаВыбора = Неопределено) Экспорт
	Перем ФормаСправочника;
	Если ФормаВыбора = Неопределено Тогда
		ФормаСправочника = Справочники.Номенклатура.ПолучитьФормуВыбора();
	КонецЕсли;
	
	мУказаниеСкладовВТЧ  = СтруктураВыборСХарактеристикой["мУказаниеСкладовВТЧ"];
	ПоляДляОбновления    = СтруктураВыборСХарактеристикой["ПоляДляОбновления"];
	ВладельцыФормы       = СтруктураВыборСХарактеристикой["ВладельцыФормы"];
	СтрокаТабличнойЧасти = СтруктураВыборСХарактеристикой["СтрокаТабличнойЧасти"];
	МетаданныеДокумента  = СтруктураВыборСХарактеристикой["МетаданныеДокумента"];
	
	ВладелецФормы = Новый Соответствие();
	ВладелецФормы.Вставить("ЭтаФорма", ВладельцыФормы["ЭтаФорма"]);
	ВладелецФормы.Вставить("Элемент", ВладельцыФормы["Элемент"]);
	
	мСтруктураПриВыбореЗначения = Новый Структура();
	мСтруктураПриВыбореЗначения.Вставить("ТекущиеДанные",СтрокаТабличнойЧасти);
	мСтруктураПриВыбореЗначения.Вставить("Команда","ПодборВТабличнуюЧастьТовары");
	мСтруктураПриВыбореЗначения.Вставить("ЕстьСкладВТабличнойЧасти",мУказаниеСкладовВТЧ);
	мСтруктураПриВыбореЗначения.Вставить("ВыборИзСправочника",Истина);
	мСтруктураПриВыбореЗначения.Вставить("Количество", 0);
	мСтруктураПриВыбореЗначения.Вставить("Качество", ?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, "Товары")
	,?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество),Справочники.Качество.Новый,СтрокаТабличнойЧасти.Качество)
	,Справочники.Качество.Новый));
	мСтруктураПриВыбореЗначения.Вставить("ПоляДляОбновления",ПоляДляОбновления);
	мСтруктураПриВыбореЗначения.Вставить("ВладельцыФормы",ВладелецФормы);
	
	Если ФормаВыбора = Неопределено Тогда
		ФормаСправочника.мСтруктураПриВыбореЗначения = мСтруктураПриВыбореЗначения;
		ФормаСправочника.НачальноеЗначениеВыбора = ВладельцыФормы["Элемент"].Значение;
		ФормаСправочника.Открыть();
	Иначе
		ФормаВыбора.мСтруктураПриВыбореЗначения = мСтруктураПриВыбореЗначения;
	КонецЕсли;

КонецПроцедуры

//Пороцедура обновляет данные строки если данные выбираются из справочника Номенклатура
Процедура ОбновитьДанныеСтроки(ТекущаяСтрока,СтруктураНовыхЗначений) Экспорт
	Перем ПоляДляОбновления;
	СтруктураНовыхЗначений.Свойство("ПоляДляОбновления",ПоляДляОбновления);
	Для Каждого ЭлементСтруктуры Из ПоляДляОбновления Цикл
		ТекущаяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет стандартные действия при изменении единицы цены
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	Перем СтруктураРеквизитовЦен;
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	СтруктураРеквизитовЦен = Новый Структура("Цена, ЦенаВРознице, ЦенаПередачи");

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			Иначе
				СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
				НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

				СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;

				Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента
				   И СтароеЗначениеКоэффициента <> 0 Тогда
					

					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
						СтрокаТабличнойЧасти.Количество  = СтрокаТабличнойЧасти.Количество * СтароеЗначениеКоэффициента
														   / НовоеЗначениеКоэффициента;
					КонецЕсли;

					РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

					Для Каждого ИмяРеквизитаЦены Из СтруктураРеквизитовЦен Цикл
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизитаЦены.Ключ, МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] = СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] *НовоеЗначениеКоэффициента 
													/ СтароеЗначениеКоэффициента;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
							 |Пересчет количества невозможен.");
		Иначе
			СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
			НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;

			Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда
				// если в табличной части есть реквизит КоличествоМест, то цена задается не за ЕдиницуИзмерения,
				// а за базовую единицу хранения остатков. Т.е. цену пересчитывать не нужно
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					// надо обновить изменение к-ва в документе
					РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				Иначе
					// ПересчитатьЦену
					Для Каждого ИмяРеквизитаЦены Из СтруктураРеквизитовЦен Цикл
						Если СтароеЗначениеКоэффициента > 0 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизитаЦены.Ключ, МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] = СтрокаТабличнойЧасти[ИмяРеквизитаЦены.Ключ] *НовоеЗначениеКоэффициента 
													/ СтароеЗначениеКоэффициента;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЕдиницыТабЧасти

// Процедура выполняет стандартные действия при изменении единицы мест
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Рассчитывает количество мест исходя из количества
	РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ПриИзмененииЕдиницыМестаТабЧасти

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти                             - строка табличной части документа,
//  ДокументОбъект                                   - объект редактируемого документа,
//  ТекПользователь                                  - ссылка на текущего пользователя,
//  РасчетАвтоматическихСкидок                       - признак необходимости Расчета автоматических скидок,
//  ЕстьРеквизитДокументаПроцентСкидкиНаценки        - признак наличия в табличной части документа процента скидки (наценки), 
//  ПересчитыватьСкидкуДокумента                     - признак необходимости пересчета скидки для данного пользователя,
//  ЕстьРеквизитДокументаПроцентАвтоматическихСкидок - признак наличия в документе реквизита ПроцентАвтоматическихСкидок,
//  ИмяТабЧастиДокумента                             - имя табличной части.
//
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь, РасчетАвтоматическихСкидок = Ложь, 
                                    ЕстьРеквизитДокументаПроцентСкидкиНаценки = Неопределено, 
                                    ПересчитыватьСкидкуДокумента = Неопределено, 
                                    ЕстьРеквизитДокументаПроцентАвтоматическихСкидок = Неопределено, 
                                    ИмяТабЧастиДокумента = Неопределено) Экспорт

	ИмяТабличнойЧасти = ?(ИмяТабЧастиДокумента = Неопределено,
	                      ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти), ИмяТабЧастиДокумента);

	Если СтрокаТабличнойЧасти.Количество=0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе	
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		ЕстьРеквизитПроцентСкидкиНаценки = ?(ЕстьРеквизитДокументаПроцентСкидкиНаценки = Неопределено,
		                                      ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, 
		                                                                    ИмяТабличнойЧасти),
		                                     ЕстьРеквизитДокументаПроцентСкидкиНаценки);

		Если ЕстьРеквизитПроцентСкидкиНаценки Тогда

			ПересчитыватьСкидку = ?(ПересчитыватьСкидкуДокумента = Неопределено, 
			                        УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку"),
			                        ПересчитыватьСкидкуДокумента);

			ЕстьРеквизитПроцентАвтоматическихСкидок = ?( ЕстьРеквизитДокументаПроцентАвтоматическихСкидок = Неопределено,
			                                             ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", 
			                                                                     МетаданныеДокумента, ИмяТабличнойЧасти),
			                                             ЕстьРеквизитДокументаПроцентАвтоматическихСкидок);

			Если ПересчитыватьСкидку Тогда
				Если (СтрокаТабличнойЧасти.Цена = 0) Или (СтрокаТабличнойЧасти.Количество = 0) Тогда
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
					Если СтрокаТабличнойЧасти.Цена = 0 Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Цена равна 0, после изменения суммы установлена нулевая скидка!");
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Количество равно 0, после изменения суммы установлена нулевая скидка!");
					КонецЕсли;
				Иначе
					СуммаСоСкидками = СтрокаТабличнойЧасти.Сумма;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
					ПроцентСкидки   = 100 - (СуммаСоСкидками * 100) / СуммаБезСкидок;
					ПроцентАвтоматическихСкидок = 0;

					Если ЕстьРеквизитПроцентАвтоматическихСкидок Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки - ПроцентАвтоматическихСкидок;

				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки >= 100 Тогда
					СтрокаТабличнойЧасти.Цена = 0;
					ОбщегоНазначения.СообщитьОбОшибке("Скидка равна 100%, после изменения суммы установлена нулевая цена!");
				Иначе
					ПроцентАвтоматическихСкидок = 0;
					Если ЕстьРеквизитПроцентАвтоматическихСкидок Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Сумма * 100/
					                  (100 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки - ПроцентАвтоматическихСкидок);
					СтрокаТабличнойЧасти.Цена = СуммаБезСкидок / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииСуммыТабЧасти()

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылку на подчиненный справочник единиц).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// При изменении номенклатуры очистим ссылку на подчиненный справочник
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииВозвратнойТарыТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы в строке возвратной тары документа.
//
// Параметры:
//  СтрокаВозвратнойТары - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ДокументОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаВозвратнойТары.Количество) Тогда
		СтрокаВозвратнойТары.Цена = 0;
	Иначе	
		СтрокаВозвратнойТары.Цена = СтрокаВозвратнойТары.Сумма / СтрокаВозвратнойТары.Количество;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииСуммыВозвратнойТарыТабЧасти()

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт

// устанавливаем стандартные запреты на изменение видимости колонок
Для каждого КолонкаТаблицы из Колонки Цикл
	КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
КонецЦикла;

КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

// Изменяет видимость колонки табличного поля (напрмер, табличной части документа).
//
// Параметры:
//  Колонка   - колонка табличного поля, 
//  Видимость - булево, устанавливаемый флаг видимости колонки.
//
Процедура УстановитьВидимостьКолонкиТабЧасти(Колонка, Видимость) Экспорт

	Колонка.Видимость = Видимость;

КонецПроцедуры // УстановитьВидимостьКолонкиТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

//Функция возвращает часть запроса для выбора поля содержания у Таб части Услуги документа
Функция ПолучитьЧастьЗапросаДляВыбораСодержания(Знач ИмяТаблицыВыбора, Знач ИтоговыйАлиасПоля = "") Экспорт
	
	СтрокаИмениТаблицыВыборки = "";
	Если Не ПустаяСтрока(ИмяТаблицыВыбора) Тогда
		
		СтрокаИмениТаблицыВыборки = ИмяТаблицыВыбора + ".";
		
	КонецЕсли;
	
	ЧастьВыборки = "	Выбор 
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Содержание Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Содержание КАК Строка (1000))
	|		Когда НЕ (" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное Подобно """") Тогда
	|			ВЫРАЗИТЬ(" + СтрокаИмениТаблицыВыборки + "Номенклатура.НаименованиеПолное КАК Строка (1000))
	|		Иначе
	|			" + СтрокаИмениТаблицыВыборки + "Номенклатура.Наименование
	|	Конец";
	
	Если Не ПустаяСтрока(ИтоговыйАлиасПоля) Тогда
		
		ЧастьВыборки = ЧастьВыборки + " КАК " + ИтоговыйАлиасПоля;	
		
	КонецЕсли;
	
	Возврат ЧастьВыборки; 
	
КонецФункции

// Процедура заполняет качество номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если Не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти)
		 Или Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		Иначе
			СтрокаТабличнойЧасти.Качество = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьКачествоНоменклатурыТабЧасти()

// Процедура заполняет склад и оредер в строке табличной части по реквизитам шапки документа
//
Процедура ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладИзШапки = Ложь) Экспорт

	Если ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриходныйОрдер) Тогда
				СтрокаТабличнойЧасти.ПриходныйОрдер = ДокументОбъект.СкладОрдер;
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер.Склад;
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
					СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер.Склад;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ПриходныйОрдер = Неопределено;
		Если СкладИзШапки 
		 Или (Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад)) Тогда

			ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
			МетаданныеДокумента = ДокументОбъект.Метаданные();

			Если ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда

				Если СкладИзШапки Тогда
					СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер;
				Иначе
					Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
						СтрокаТабличнойЧасти.Склад = ДокументОбъект.СкладОрдер;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЗаказПоставщику", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику.Склад) Тогда
					СтрокаТабличнойЧасти.Склад = СтрокаТабличнойЧасти.ЗаказПоставщику.Склад;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСкладИОрдерТабЧасти()

// Процедура заполняет склад и оредер по реквизитам шапки документа во всех строках 
// заданной табличной части, в которых эти реквизиты не заполнены табличной части 
//
Процедура ЗаполнитьСкладИОрдерВСтрокахТабЧасти(ДокументОбъект, ТабЧасть, СкладИзШапки = Ложь) Экспорт

	Для каждого СтрокаТЧ из ТабЧасть Цикл

		ЗаполнитьСкладИОрдерТабЧасти(СтрокаТЧ, ДокументОбъект, СкладИзШапки);

	КонецЦикла;

КонецПроцедуры

// Процедура заполняет реквизит качество в табличной части документа
//
Процедура ЗаполнитьКачествоПоУмолчанию(ТабЧасть, ЗаполнитьВсеСтрокиНовый = Ложь) Экспорт

	Для Каждого Строка Из ТабЧасть Цикл
		Если ЗаполнитьВсеСтрокиНовый ИЛИ НЕ ЗначениеЗаполнено(Строка.Качество) Тогда
			Строка.Качество = Справочники.Качество.Новый;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура очищает значение нужного реквизита в переданной ТЧ.
//
// Параметры:
//  ТабЧаст      - табличная часть,
//  ИмяРеквизита - строка, имя реквизита.
//
Процедура ОчиститьРеквизитТЧ(ТабЧасть, ИмяРеквизита) Экспорт

	Для Каждого Строка Из ТабЧасть Цикл
		Если ЗначениеЗаполнено(Строка[ИмяРеквизита]) Тогда
			Строка[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //ОчиститьРеквизитТЧ()

//Функция получает таблицу для расчета остатков при подборе номенклатуры, используется для расчета резерва товаров по документу резерва
//Параметры:
//    ДокументФорма                    - Форма, Форма документа
//    ЕстьЗаказВТабличнойЧасти         - Булево, флаг есть реквизит в табличной части!!!! Если в функцию передать Истина, нужно установить параметр ИмяРеквизитаЗаказаВШапке
//    ВидРегистраПлюсСвободныйОстаток  - Строка, имя регистра накопления, остатки которого прибавляются к свободным остаткам
//    НазваниеПоляРезерваВРегистре     - Строка, имя измерения в регистре, необходимо для получения типов значения и формирования таблицы значения для табличной части документа
//    ИмяРеквизитаЗаказаВШапке         - Строка, Имя реквизита в шапке документа. Необходимо для заполнения в таблице значений поля заказ, если в константе указано, что заказ указывается в шапке документов.
//    ИмяКолонкиРезерваВТабличнойЧасти - Строка, Имя колонки заказа в табличной части документа
//    ИспользоватьЗначениеКонстанты    - Булево, Истина - анализировать константу УказаниеЗаказовВТабличнойЧастиДокументов, Ложь заказ всегда в табличной части.
//Возварщаемое значение: Структура
Функция СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ДокументФорма, ЕстьЗаказВТабличнойЧасти = Ложь, ИмяРеквизитаЗаказаВШапке = "", ВидРегистраПлюсСвободныйОстаток = "ТоварыВРезервеНаСкладах", НазваниеПоляРезерваВРегистре = "ДокументРезерва", ИмяКолонкиРезерваВТабличнойЧасти = "ЗаказПокупателя", ИспользоватьЗначениеКонстанты = Истина) Экспорт
	//создается таблица тчТовары которая возвращается функцией и эта таблица будет использована в запросе
	//в модуле обработки подбор номенклатуры для расчета резерва, как вложенная таблица.
	СтруктураВременныеТаблицы = Новый Структура();
	СтруктураДляЗаказа = Новый Структура;
	
	значениеКонстанты = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();
	тчТовары = Новый ТаблицаЗначений;
	тчТовары.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тчТовары.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ИзмерениеДокументРезерва = Метаданные.РегистрыНакопления[ВидРегистраПлюсСвободныйОстаток].Измерения.Найти(НазваниеПоляРезерваВРегистре);
	
	тчТовары.Колонки.Добавить("ДокументРезерва", Новый ОписаниеТипов(ИзмерениеДокументРезерва.Тип.Типы()));
	ЗаказИзШапки = ложь;
	ЗаказИзШапки =	Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.НеИспользовать = значениеКонстанты
					ИЛИ
					Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступления = значениеКонстанты
					ИЛИ
					НЕ ЕстьЗаказВТабличнойЧасти;
	ЗаказИзШапки = ?(ИспользоватьЗначениеКонстанты, ЗаказИзШапки, Ложь);
	СтруктураДляЗаказа.Вставить("ЗаказИзШапки",ЗаказИзШапки);
	СтруктураДляЗаказа.Вставить("ИмяВременнойТаблицы","ЗаказыТаблицаНоменклатура");
	СтруктураВременнойТаблицы = Новый Структура;
	СтруктураВременнойТаблицы.Вставить("Номенклатура","СправочникСсылка.Номенклатура");
	СтруктураВременнойТаблицы.Вставить("ХарактеристикаНоменклатуры","СправочникСсылка.ХарактеристикиНоменклатуры");
	СтруктураВременнойТаблицы.Вставить("ДокументРезерва","ДокументСсылка.ЗаказПокупателя");
	СтруктураДляЗаказа.Вставить("СтруктураВременнойТаблицы",СтруктураВременнойТаблицы);
	
	Если ЕстьЗаказВТабличнойЧасти Тогда
		Для Каждого СтрокаТабличнойЧасти Из ДокументФорма.ЭлементыФормы.Товары.Значение Цикл
			СтрокаТовары 							= тчТовары.Добавить();
			СтрокаТовары.Номенклатура 				= СтрокаТабличнойЧасти.Номенклатура;
			СтрокаТовары.ХарактеристикаНОменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			СтрокаТовары.ДокументРезерва 			= ?(ЗаказИзШапки,ДокументФорма.ЭлементыФормы[ИмяРеквизитаЗаказаВШапке].Значение,СтрокаТабличнойЧасти[ИмяКолонкиРезерваВТабличнойЧасти]);
		КонецЦикла;
		Для Каждого строкаВозвратнаяТара Из ДокументФорма.ЭлементыФормы.ВозвратнаяТара.Значение Цикл
			строкаТовары 							= тчТовары.Добавить();
			строкаТовары.Номенклатура 				= строкаВозвратнаяТара.Номенклатура;
			строкаТовары.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			строкаТовары.ДокументРезерва 			= ?(ЗаказИзШапки,ДокументФорма.ЭлементыФормы[ИмяРеквизитаЗаказаВШапке].Значение,строкаВозвратнаяТара[ИмяКолонкиРезерваВТабличнойЧасти]);
		КонецЦИкла;
	КонецЕсли;
	тчТовары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ДокументРезерва","");
	СтруктураДляЗаказа.Вставить("ТаблицаИсточник",тчТовары);
	СтруктураДляЗаказа.Вставить("ВидРегистраПлюсСвободныйОстаток", ВидРегистраПлюсСвободныйОстаток);
	СтруктураВременныеТаблицы.Вставить("ДокументРеализацияТоваровИУслуг", СтруктураДляЗаказа);
	возврат СтруктураВременныеТаблицы;
КонецФункции //СтруктураДляРасчетаРезерваПриПодбореНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РасчетА СКИДОК ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура получает минимально допустимую цену товаров (услуг) для данного пользователя.
//
// Параметры:
//  Номенклатура               - элемент справочника "Номенклатура",
//  ХарактеристикаНоменклатуры - элемент справочника "ХарактеристикиНоменклатуры",
//  ДокументОбъект             - документ, для которого проверяем скидки,
//  МинимальнаяЦена            - минимально допустимая цена.
//
Функция ПолучитьМинимальнуюЦену(Номенклатура, ХарактеристикаНоменклатуры,
	                              ДатаСкидок, СписокФильтров, ВалютаТовара, ЕдиницаИзмерения) Экспорт

	МинимальнаяЦена = 0;

	// Если нет данных для формирования текста запроса (пустой список фильтров),
	// то значит можно продавать по любой цене.
	Для Каждого ТипЦены Из СписокФильтров Цикл
		ТипЦен = ТипЦены.Значение;

		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда

			// Если хотя бы для одного набора прав не задан тип цен, ниже которого нельзя продавать,
			// то значит можно продавать по любой цене.
			МинимальнаяЦена = 0;
			Прервать;
		КонецЕсли;

		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, ТипЦен, ДатаСкидок, ЕдиницаИзмерения, ВалютаТовара);

		Если МинимальнаяЦена = 0 Или Цена < МинимальнаяЦена Тогда
			МинимальнаяЦена = Цена;
		КонецЕсли;
	КонецЦикла;

	Возврат МинимальнаяЦена;

КонецФункции // ПолучитьМинимальнуюЦену()

// Процедура проверяет минимально допустимую цену товаров (услуг) для данного пользователя по выбранной строке
// и корректирует суммы скидок. При расчете итоговой суммы рассчитывает НДС.
//
// Параметры:
//  ДокументОбъект             - документ, для которого проверяем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  УчитыватьНДС               - булево, признак учета НДС в документе, служит для расчета сумм НДС,
//  СуммаВключаетНДС           - булево, признак вхождения НДС в сумму в документе, служит для расчета сумм НДС.
//
Процедура ПроверкаМинимальнойЦены(ДатаСкидок, ТаблицаТоваров, МинимальныеЦены,
                                  СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара)

	Если МинимальныеЦены = Неопределено Тогда
		МинимальныеЦены = Новый ТаблицаЗначений;
		МинимальныеЦены.Колонки.Добавить("Номенклатура");
		МинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		МинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		МинимальныеЦены.Колонки.Добавить("Цена");

		МинимальныеЦены.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	КонецЕсли;

	Отбор = Новый Структура ("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	ЕстьЕдиница = (ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмерения") <> Неопределено);

	Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл
		Если СтрокаТовара.ПроцентАвтоматическихСкидок <> 0 Тогда
			ТекЕдиница = ?(ЕстьЕдиница, СтрокаТовара.ЕдиницаИзмерения, Неопределено);

			Отбор.Номенклатура = СтрокаТовара.Номенклатура;
			Отбор.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
			Отбор.ЕдиницаИзмерения = ТекЕдиница;

			СтрокиМинимальныхЦен = МинимальныеЦены.НайтиСтроки(Отбор);
			Если СтрокиМинимальныхЦен.Количество() > 0 Тогда
				МинимальнаяЦена = СтрокиМинимальныхЦен[0].Цена;
			Иначе
				МинимальнаяЦена = ПолучитьМинимальнуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры,
				   ДатаСкидок, СписокФильтров, ВалютаТовара, ТекЕдиница);
				СтрокаМинимальныхЦен = МинимальныеЦены.Добавить();
				СтрокаМинимальныхЦен.Номенклатура               = СтрокаТовара.Номенклатура;
				СтрокаМинимальныхЦен.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
				СтрокаМинимальныхЦен.ЕдиницаИзмерения           = ТекЕдиница;
				СтрокаМинимальныхЦен.Цена                       = МинимальнаяЦена;
			КонецЕсли;

			Если СтрокаТовара.Цена >= МинимальнаяЦена Тогда // получим сумму по строке без учета ручной скидки
				Если СтрокаТовара.СуммаБезСкидки * (1 - СтрокаТовара.ПроцентАвтоматическихСкидок / 100) / СтрокаТовара.Количество < МинимальнаяЦена Тогда // обрезаем скидки
					СтрокаТовара.ПроцентАвтоматическихСкидок = Окр(100 - 100 * МинимальнаяЦена / СтрокаТовара.Цена, 2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки * (1 - (СтрокаТовара.ПроцентАвтоматическихСкидок + СтрокаТовара.ПроцентСкидкиНаценки) / 100);

		Если УчитыватьНДС Тогда // рассчитаем сумму НДС строки таблицы значений
			СтрокаТовара.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТовара.Сумма, УчитыватьНДС, СуммаВключаетНДС,
			   УчетНДС.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверкаМинимальнойЦены()

// Функция получает период для расчета накопительных скидок.
//
// Параметры:
//  ДатаСкидок - Дата, на которую рассчитываются скидки.
//  УчетнаяПолитика - Структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  Структура - структура с ключами "ДатаНач" и "ДатаКон", начало и конец периода.
//
Функция ПолучитьПериодРасчетаНакопительныхСкидок(ДатаСкидок, УчетнаяПолитика) Экспорт

	ПериодНакопления = Новый Структура("ДатаНач, ДатаКон");

	ТекПериодичность = УчетнаяПолитика.ПериодичностьРасчетаНакопленияСкидок;
	ТекПрошлыйПериод = УчетнаяПолитика.АнализироватьПрошлыйПериодНакопленияСкидок;

	Если ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.ВТечениеВсегоПериода Тогда
		ПериодНакопления.ДатаНач = '00010101';
		ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Месяц Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -1);

			ПериодНакопления.ДатаНач = НачалоМесяца(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецМесяца(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоМесяца(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Квартал Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -3);

			ПериодНакопления.ДатаНач = НачалоКвартала(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецКвартала(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоКвартала(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Полугодие Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -6);

			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ПериодМинус);
			ПериодНакопления.ДатаКон = ОбщегоНазначения.ПолучитьКонецПолугодия(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = ОбщегоНазначения.ПолучитьНачалоПолугодия(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	ИначеЕсли ТекПериодичность = Перечисления.ПериодичностьНакопленияСкидок.Год Тогда
		Если ТекПрошлыйПериод Тогда
			ПериодМинус = ДобавитьМесяц(ДатаСкидок, -12);

			ПериодНакопления.ДатаНач = НачалоГода(ПериодМинус);
			ПериодНакопления.ДатаКон = КонецГода(ПериодМинус);
		Иначе
			ПериодНакопления.ДатаНач = НачалоГода(ДатаСкидок);
			ПериодНакопления.ДатаКон = КонецДня(ДатаСкидок);
		КонецЕсли;
	КонецЕсли;

	Возврат ПериодНакопления;

КонецФункции // ПолучитьПериодРасчетаНакопительныхСкидок()

// Функция возвращает таблицу значений, выгруженную из результата запроса по скидкам.
//
// Параметры:
//  ДатаСкидок - дата, на которую необходимо рассчитать скидки.
//  МассивНоменклатуры - массив с номенклатурой.
//  МассивХарактеристик - массив с характеристиками номенклатуры.
//  МассивКачество - массив с качеством.
//  МассивПолучателей - массив с получателями скидки.
//  КурсКратность - Кратность валюты документа / курс валюты документа.
//  СуммаДокумента - сумма документа.
//  ВидОплаты - вид оплаты.
//  ДисконтнаяКарта - дисконтная карта.
//  УчетнаяПолитика - структура, содержащая данные учетной политики.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ЗапросПоСкидкам(ДатаСкидок, МассивНоменклатуры, МассивХарактеристик, МассивКачество,
	МассивПолучателей, КурсКратность, СуммаДокумента, ВидОплаты, ДисконтнаяКарта, УчетнаяПолитика)

	Если ЗначениеЗаполнено(ДисконтнаяКарта)
	   И УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И УчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		ЭтоНакопительнаяСкидка = Истина;
	Иначе
		ЭтоНакопительнаяСкидка = Ложь;
	КонецЕсли;

	Если ЭтоНакопительнаяСкидка Тогда
		ПериодНакопления = ПолучитьПериодРасчетаНакопительныхСкидок(ДатаСкидок, УчетнаяПолитика);

		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|	) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|			   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|		) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|");

		Запрос.УстановитьПараметр("ДатаНач", ПериодНакопления.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ПериодНакопления.ДатаКон);
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПроцентНакопительнойСкидки = Выборка.ЗначениеПорога;
		Иначе
			ПроцентНакопительнойСкидки = 0;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"                     , ДатаСкидок);
	Запрос.УстановитьПараметр("МассивНоменклатуры"       , МассивНоменклатуры);
	Запрос.УстановитьПараметр("МассивХарактеристик"      , МассивХарактеристик);
	Запрос.УстановитьПараметр("МассивКачество"           , МассивКачество);
	Запрос.УстановитьПараметр("МассивПолучателей"        , МассивПолучателей);
	Запрос.УстановитьПараметр("ДеньНедели"               , Перечисления.ДниНедели[ДеньНедели(ДатаСкидок) - 1]);
	Запрос.УстановитьПараметр("ТекущееВремя"             , Дата(1, 1, 1, Час(ДатаСкидок), Минута(ДатаСкидок), Секунда(ДатаСкидок)));
	Запрос.УстановитьПараметр("КурсКратность"            , КурсКратность);
	Запрос.УстановитьПараметр("Сумма"                    , СуммаДокумента);
	Запрос.УстановитьПараметр("ВидОплаты"                , ВидОплаты);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"          , ДисконтнаяКарта);
	Запрос.УстановитьПараметр("ВидДисконтнойКарты"       , ДисконтнаяКарта.ВидДисконтнойКарты);

	Если ЭтоНакопительнаяСкидка Тогда
		Запрос.УстановитьПараметр("ПроцентНакопительнойСкидки" , ПроцентНакопительнойСкидки);
	КонецЕсли;

	ТекстЗапроса = "
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СпрКачество.Ссылка КАК Качество,
	|	РегСкидкиНоменклатуры.Условие КАК НУсловие,
	|	РегСкидкиНоменклатуры.ЗначениеУсловия КАК НЗначениеУсловия,
	|	РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки КАК НОграничениеСкидкиНаценки,
	|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиНоменклатуры.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL
	|	И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
	|	ИЛИ РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)) ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиНоменклатуры.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиНоменклатуры.ПроцентСкидкиНаценки") + " КАК НПроцентСкидкиНаценки,
	|	РегСкидкиПоЦеновымГруппам.Условие КАК ЦУсловие,
	|	РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЦЗначениеУсловия,
	|	РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки КАК ЦОграничениеСкидкиНаценки,
	|	" + ?(ЭтоНакопительнаяСкидка, "ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки ЕСТЬ НЕ NULL
	|	И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте)
	|	ИЛИ РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)) ТОГДА &ПроцентНакопительнойСкидки ИНАЧЕ РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки КОНЕЦ", "РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки") + " КАК ЦПроцентСкидкиНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
	|	ИЗ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ГДЕ
	|		СпрНоменклатура.Ссылка В (&МассивНоменклатуры)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		СпрХарактеристики.Владелец,
	|		СпрХарактеристики.Ссылка
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	ГДЕ
	|		СпрХарактеристики.Ссылка В (&МассивХарактеристик)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	) КАК СпрНоменклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Качество КАК СпрКачество
	|	ПО
	|	СпрКачество.Ссылка В (&МассивКачество)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегСкидкиНоменклатуры.Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество,
	|		РегСкидкиНоменклатуры.Условие,
	|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиНоменклатуры.ЗначениеУсловия
	|		КОНЕЦ КАК ЗначениеУсловия,
	|		МАКСИМУМ(РегСкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Дата,
	|		   Номенклатура В (&МассивНоменклатуры)
	|		   И Качество В (&МассивКачество)
	|		   И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО
	|		РегСкидкиНоменклатуры.Регистратор = ВремяДействия.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
	|	ПО
	|		РегСкидкиНоменклатуры.Валюта = КурсыВалют.Валюта
	|	ГДЕ
	|		(ВремяДействия.ДеньНедели ЕСТЬ NULL
	|		   ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	|		   И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|		   И РегСкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//|		   И РегСкидкиНоменклатуры.ПроцентСкидкиНаценки <> 0
	|		   И (РегСкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ КОНЕЦПЕРИОДА(РегСкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Дата)
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
	|		   И (РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиНоменклатуры.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиНоменклатуры.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
	|	СГРУППИРОВАТЬ ПО
	|		РегСкидкиНоменклатуры.Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество,
	|		РегСкидкиНоменклатуры.Условие,
	|		ВЫБОР КОГДА РегСкидкиНоменклатуры.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиНоменклатуры.ЗначениеУсловия
	|		КОНЕЦ,
	|		РегСкидкиНоменклатуры.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|	) КАК РегСкидкиНоменклатуры
	|ПО
	|	СпрНоменклатура.Номенклатура = РегСкидкиНоменклатуры.Номенклатура
	|	   И (СпрНоменклатура.ХарактеристикаНоменклатуры = РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры ИЛИ РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	   И СпрКачество.Ссылка = РегСкидкиНоменклатуры.Качество
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|		РегСкидкиПоЦеновымГруппам.Качество,
	|		РегСкидкиПоЦеновымГруппам.Условие,
	|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
	|		КОНЕЦ КАК ЗначениеУсловия,
	|		МАКСИМУМ(РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность КАК ОграничениеСкидкиНаценки
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(&Дата, Качество В (&МассивКачество) И ПолучательСкидки В (&МассивПолучателей)) КАК РегСкидкиПоЦеновымГруппам
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО
	|		РегСкидкиПоЦеновымГруппам.Регистратор = ВремяДействия.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалют
	|	ПО
	|		РегСкидкиПоЦеновымГруппам.Валюта = КурсыВалют.Валюта
	|	ГДЕ
	|		(ВремяДействия.ДеньНедели ЕСТЬ NULL
	|		   ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели
	|		   И &ТекущееВремя МЕЖДУ ВремяДействия.ВремяНачала И ВремяДействия.ВремяОкончания)
	|		   И РегСкидкиПоЦеновымГруппам.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	//|		   И РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки <> 0
	|		   И(РегСкидкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ИЛИ КОНЕЦПЕРИОДА(РегСкидкиПоЦеновымГруппам.ДатаОкончания, ДЕНЬ) >= &Дата)
	|		   И(РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) И ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность < &Сумма ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидОплаты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуОплаты))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ВидДисконтнойКарты ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт))
	|		   И (РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте) И РегСкидкиПоЦеновымГруппам.ЗначениеУсловия = &ДисконтнаяКарта ИЛИ РегСкидкиПоЦеновымГруппам.Условие <> ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоДисконтнойКарте))
	|	СГРУППИРОВАТЬ ПО
	|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|		РегСкидкиПоЦеновымГруппам.Качество,
	|		РегСкидкиПоЦеновымГруппам.Условие,
	|		ВЫБОР КОГДА РегСкидкиПоЦеновымГруппам.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияСкидкиНаценки.ПоСуммеДокумента) ТОГДА
	|			ВЫРАЗИТЬ(РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЧИСЛО) * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия
	|		КОНЕЦ,
	|		РегСкидкиПоЦеновымГруппам.ОграничениеСкидкиНаценки * &КурсКратность * КурсыВалют.Курс / КурсыВалют.Кратность
	|	) КАК РегСкидкиПоЦеновымГруппам
	|ПО
	|	СпрНоменклатура.Номенклатура.ЦеноваяГруппа = РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа
	|	   И СпрКачество.Ссылка = РегСкидкиПоЦеновымГруппам.Качество
	|ГДЕ
	|	РегСкидкиНоменклатуры.Условие ЕСТЬ НЕ NULL
	|	ИЛИ РегСкидкиПоЦеновымГруппам.Условие ЕСТЬ НЕ NULL
	|";

	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ЗапросПоСкидкам()

// Процедура рассчитывает скидки в документе.
//
// Параметры:
//  ДокументОбъект             - документ, для которого рассчитываем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  СтруктураПараметров        - структура, содержащая дополнительные параметря, необходимые для расчета скидок.
//
Процедура РассчитатьСкидкиПриПродаже(ДокументОбъект, ТабличнаяЧастьНоменклатуры,
	                                 СтруктураПараметров, МинимальныеЦены, СписокФильтров) Экспорт

	Перем ВидРеализации, СуммаДокумента, ДиконтнаяКарта, ВидОплаты;
	Перем УчитыватьНДС, СуммаВключаетНДС, ДатаСкидок, ВалютаРегламентированногоУчета, УчетнаяПолитика;

	Если ТабличнаяЧастьНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч (ТабличнаяЧастьНоменклатуры) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Скопировать();
	Иначе
		ТаблицаТоваров = ТабличнаяЧастьНоменклатуры.Выгрузить();
	КонецЕсли;

	ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентАвтоматическихСкидок");
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка(),"УсловиеАвтоматическойСкидки");
	ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеУсловияАвтоматическойСкидки");

	Если ТаблицаТоваров.Колонки.Найти("Коэффициент") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("Коэффициент");
		ТаблицаТоваров.ЗаполнитьЗначения(1, "Коэффициент");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("СуммаБезСкидки");

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
	КонецЦикла;

	СтруктураПараметров.Свойство("ВидРеализации"                 , ВидРеализации);
	СтруктураПараметров.Свойство("ДатаСкидок"                    , ДатаСкидок);
	СтруктураПараметров.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	СтруктураПараметров.Свойство("ВидОплаты"                     , ВидОплаты);
	СтруктураПараметров.Свойство("СуммаДокумента"                , СуммаДокумента);
	СтруктураПараметров.Свойство("Карта"                         , ДиконтнаяКарта);
	СтруктураПараметров.Свойство("УчитыватьНДС"                  , УчитыватьНДС);
	СтруктураПараметров.Свойство("СуммаВключаетНДС"              , СуммаВключаетНДС);
	СтруктураПараметров.Свойство("УчетнаяПолитика"              , УчетнаяПолитика);

	УчитыватьНДС = ?(УчитыватьНДС = Неопределено, Ложь, УчитыватьНДС);

	ДатаСкидок = ?(НЕ ЗначениеЗаполнено(ДатаСкидок), ДокументОбъект.Дата, ДатаСкидок);
	МассивНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());

	Если ТаблицаТоваров.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
		МассивХарактеристик = Новый Массив;

		ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "ХарактеристикаНоменклатуры");
	Иначе
		МассивХарактеристик = ТаблицаТоваров.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
	КонецЕсли;
	МассивХарактеристик.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Если ТаблицаТоваров.Колонки.Найти("Качество") = Неопределено Тогда
		МассивКачество = Новый Массив;
		МассивКачество.Добавить(Справочники.Качество.Новый);

		ТаблицаТоваров.Колонки.Добавить("Качество");
		ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	Иначе
		МассивКачество = ТаблицаТоваров.ВыгрузитьКолонку("Качество");
	КонецЕсли;

	МассивПолучателей = Ценообразование.ПолучитьМассивПолучателейСкидки(ВидРеализации, ДокументОбъект);

	Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		КурсКратность = 1;
	Иначе
		КурсКратность = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) / ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;

	ТаблицаСкидок = ЗапросПоСкидкам(ДатаСкидок, МассивНоменклатуры, МассивХарактеристик, МассивКачество,
	МассивПолучателей, КурсКратность, СуммаДокумента, ВидОплаты, ДиконтнаяКарта, УчетнаяПолитика);

	ТаблицаСкидок.Индексы.Добавить("Номенклатура, Качество");

	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	УсловиеКолво = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;

	Если ТаблицаСкидок.Найти(УсловиеКолво, "НУсловие, ЦУсловие") <> Неопределено Тогда
		ТаблицаКоличестваТоваров = ТаблицаТоваров.Скопировать(,
		   "Номенклатура, ХарактеристикаНоменклатуры, Количество, Коэффициент");

		Для Каждого СтрокаТЧ Из ТаблицаКоличестваТоваров Цикл
			СтрокаТЧ.Количество = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
		КонецЦикла;

		ТаблицаКоличестваТоваров.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");

		ТаблицаКоличестваТоваров.Индексы.Добавить("Номенклатура, ХарактеристикаНоменклатуры");

		СтруктураПоискаКоличества = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры");
	КонецЕсли;

	СтруктураПоиска = Новый Структура("Номенклатура, Качество");

	Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		Если СтрокаТЧ.СуммаБезСкидки <> 0 Тогда
			СтруктураПоиска.Номенклатура = СтрокаТЧ.Номенклатура;
			СтруктураПоиска.Качество = СтрокаТЧ.Качество;

			МассивСтрок = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);

			СтруктураПоиска.Номенклатура = ПустаяНоменклатура;

			МассивСтрокБезНоменклатуры = ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаБезНоменклатуры Из МассивСтрокБезНоменклатуры Цикл
				МассивСтрок.Добавить(СтрокаБезНоменклатуры);
			КонецЦикла;

			МаксСуммаСкидки              = Неопределено;
			ПодходящаяСкидка             = Неопределено;
			ПроцентСкидки                = Неопределено;
			ПодходящаяСкидкаНоменклатура = Неопределено;

			Для Каждого СтрокаСкидок Из МассивСтрок Цикл
				Если СтрокаСкидок.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры
				 Или СтрокаСкидок.ХарактеристикаНоменклатуры = ПустаяХарактеристика Тогда
					Если СтрокаСкидок.НУсловие = УсловиеКолво Или СтрокаСкидок.ЦУсловие = УсловиеКолво Тогда
						СтруктураПоискаКоличества.Номенклатура = СтрокаТЧ.Номенклатура;
						СтруктураПоискаКоличества.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;

						КоличествоНоменклатуры = НайтиСтрокуТабЧасти(ТаблицаКоличестваТоваров, СтруктураПоискаКоличества).Количество;
					КонецЕсли;

					СкидкаПоНоменклатуреПрименима   = СтрокаСкидок.НУсловие = УсловиеКолво
						И СтрокаСкидок.НЗначениеУсловия < КоличествоНоменклатуры
						ИЛИ СтрокаСкидок.НУсловие <> УсловиеКолво;
					СкидкаПоЦеновымГруппамПрименима = СтрокаСкидок.ЦУсловие = УсловиеКолво
						И СтрокаСкидок.ЦЗначениеУсловия < КоличествоНоменклатуры
						ИЛИ СтрокаСкидок.ЦУсловие <> УсловиеКолво;
						Если СтрокаСкидок.НПроцентСкидкиНаценки <> Null И СкидкаПоНоменклатуреПрименима Тогда
							СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.НПроцентСкидкиНаценки / 100;
							Ограничение = СтрокаСкидок.НОграничениеСкидкиНаценки * СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
							
							// Проверим ограничение скидки.
							Если (Ограничение > 0 И СуммаСкидки > Ограничение)
							 Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
								СуммаСкидки = Ограничение;
							КонецЕсли;
							
							Если МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки Тогда
								МаксСуммаСкидки = СуммаСкидки;
								ПодходящаяСкидка = СтрокаСкидок;
								ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
								ПодходящаяСкидкаНоменклатура = Истина;
							КонецЕсли;
						КонецЕсли;
						
						Если СтрокаСкидок.ЦПроцентСкидкиНаценки <> Null И СкидкаПоЦеновымГруппамПрименима Тогда
							СуммаСкидки = СтрокаТЧ.СуммаБезСкидки * СтрокаСкидок.ЦПроцентСкидкиНаценки / 100;
							Ограничение = СтрокаСкидок.ЦОграничениеСкидкиНаценки * СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
							
							// Проверим ограничение скидки.
							Если (Ограничение > 0 И СуммаСкидки > Ограничение)
							 Или (Ограничение < 0 И СуммаСкидки < Ограничение) Тогда
								СуммаСкидки = Ограничение;
							КонецЕсли;
							
							Если МаксСуммаСкидки = Неопределено Или МаксСуммаСкидки < СуммаСкидки Тогда
								МаксСуммаСкидки = СуммаСкидки;
								ПодходящаяСкидка = СтрокаСкидок;
								ПроцентСкидки = Окр((СуммаСкидки / СтрокаТЧ.СуммаБезСкидки) * 100, 2);
								ПодходящаяСкидкаНоменклатура = Ложь;
							КонецЕсли;
						КонецЕсли;

				КонецЕсли;
			КонецЦикла;

			Если ЗначениеЗаполнено(МаксСуммаСкидки) Тогда
				СтрокаТЧ.ПроцентАвтоматическихСкидок = ПроцентСкидки;

				Если ПодходящаяСкидкаНоменклатура Тогда
					СтрокаТЧ.УсловиеАвтоматическойСкидки         = ПодходящаяСкидка.НУсловие;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = ПодходящаяСкидка.НЗначениеУсловия;
				Иначе
					СтрокаТЧ.УсловиеАвтоматическойСкидки         = ПодходящаяСкидка.ЦУсловие;
					СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = ПодходящаяСкидка.ЦЗначениеУсловия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ВалютаТовара = ?(ВидРеализации = Перечисления.ВидыСкидок.Розничная,
	                 ВалютаРегламентированногоУчета, ДокументОбъект.ВалютаДокумента);

	ПроверкаМинимальнойЦены(ДатаСкидок, ТаблицаТоваров, МинимальныеЦены, СписокФильтров,
	   УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);

	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ПроцентАвтоматическихСкидок"), "ПроцентАвтоматическихСкидок");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма"), "Сумма");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("УсловиеАвтоматическойСкидки"), "УсловиеАвтоматическойСкидки");
	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ЗначениеУсловияАвтоматическойСкидки"), "ЗначениеУсловияАвтоматическойСкидки");

	Если УчитыватьНДС Тогда
		ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаНДС"), "СуммаНДС");
	КонецЕсли;

КонецПроцедуры // РассчитатьСкидкиПриПродаже()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РасчетА ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВидДокумента = "") Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НеЯвляетсяРезидентом = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты"), ?(ДокументОбъект.Контрагент.НеЯвляетсяРезидентом = Истина, Истина, Ложь), Ложь);
		ЕстьДоговорКонтрагента = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
		РеализацияНаЭкспорт = ?(ЕстьДоговорКонтрагента, ?(ДокументОбъект.ДоговорКонтрагента.РеализацияНаЭкспорт = Истина, Истина, Ложь), Ложь);
		НалоговыйАгентНерезидент = ?(ЕстьДоговорКонтрагента, ?(ДокументОбъект.ДоговорКонтрагента.УчетАгентскогоНДС = Истина И ДокументОбъект.ДоговорКонтрагента.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент, Истина, Ложь), Ложь);
		Если НеЯвляетсяРезидентом И Не НалоговыйАгентНерезидент И ВидДокумента = "Приобретение" Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли ВидДокумента = "Реализация" Тогда
			Если РеализацияНаЭкспорт Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			Иначе
				Отказ = Ложь;
				ПараметрыУП = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(ДокументОбъект.Дата, Отказ, ДокументОбъект.Организация);
				ОрганизацияНеЯвляетсяПлательщикомНДС = ?(Отказ, Истина, ПараметрыУП.ОрганизацияНеЯвляетсяПлательщикомНДС);
				ПрименяетсяОсвобождениеОтУплатыНДС = ?(Отказ, Истина, ПараметрыУП.ПрименяетсяОсвобождениеОтУплатыНДС);
				Если ОрганизацияНеЯвляетсяПлательщикомНДС ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Процедура заполняет способ списания товаров в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Процедура заполняет способ списания комплектующих в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Заполняет процент розничной наценки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Заполнять имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНТТВДокументе(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат; 
	КонецЕсли;

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	ТипЦенРозничнойТорговли = Склад.ТипЦенРозничнойТорговли;
	СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = Ценообразование.ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(
	                                                            СтрокаТабличнойЧасти.Номенклатура,
	                                                            ХарактеристикаНоменклатуры,
	                                                            ТипЦенРозничнойТорговли,
	                                                            ДокументОбъект.Дата );

КонецПроцедуры // ЗаполнитьПроцентРозничнойНаценкиТабЧасти()

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

// Процедура заполняет единицу мест в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ПроверятьРеквизит = Истина) Экспорт

	Если ПроверятьРеквизит Тогда
		ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти)  Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				// берем из самого реквизита Номенклатура
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
				
			КонецЕсли;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
			// берем из самого реквизита Номенклатура
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
				
		КонецЕсли;
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);

	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	//Если НЕ ЗначениеЗаполнено(Контрагент)
	// Или НЕ ЗначениеЗаполнено(ТипЦен) Тогда
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	Иначе
		// из регистра
		Цена = Ценообразование.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		                               ТипЦен, ДатаДокумента, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                               ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ДоговорКонтрагента,
		                               ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если ЗначениеЗаполнено(Цена) Тогда

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, СуммаВключаетНДС, 
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;

		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	КонецЕсли;
	
	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

// Процедура заполняет цену по ценам покупки в строке табличной части документа (по единице хранения остатков)
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	СтруктураШапкиДокумента.Свойство("Контрагент",         Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен",             ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",      ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",    ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",       УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС",   СуммаВключаетНДС);

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ (НЕ ЗначениеЗаполнено(ТипЦен) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента))
		ИЛИ (НЕ ЗначениеЗаполнено(ТипЦен) И ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий) Тогда
		Возврат;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			ТекЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		Иначе
			ТекЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;

		Цена = Ценообразование.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		                               ТипЦен, ДатаДокумента, ТекЕдиницаИзмерения, 
		                               ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
		                               ДоговорКонтрагента,
		                               ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения        
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			Возврат;
		Иначе

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, СуммаВключаетНДС, 
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуПокупкиТабЧасти()

// Процедура заполняет цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе

		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регламентированного учета.
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	КонецЕсли;

	ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);
	Если ТекСклад = Неопределено Тогда
		ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("СкладОрдер", ДокументОбъект, МетаданныеДокумента, Справочники.Склады.ПустаяСсылка());

		Если ТипЗнч(ТекСклад) <> Тип("СправочникСсылка.Склады") Тогда
			ТекСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	ЕдИзмХран = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

	Если ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура,
		   ХарактеристикаНоменклатуры, ЕдИзмХран, ТекСклад, ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж",
		   ДокументОбъект, МетаданныеДокумента));

		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаРегламентированногоУчета,
		   ВалютаДокумента, КурсДокумента, КратностьДокумента, ДокументОбъект.Дата);
	Иначе
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
		                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдИзмХран,
		                            ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
		                            ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
		                            ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));
	КонецЕсли;

	// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
	Если ЗначениеЗаполнено(Цена) Тогда
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
					Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
					ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
					ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И ДокументОбъект.УчитыватьНДС,
					ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ДокументОбъект.СуммаВключаетНДС,
					?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуПродажиТабЧасти()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета,
//  ВалютаДокумента                - необязательный параметр, валюта, в которой надо заполнить цену,
//                                   если не задан, то цена заполняется в валюте документа,
//                                   если нет валюты документа, то в валюте упр. учета.
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета,
                                              ВалютаДокумента =Неопределено, Знач ТипЦен = Неопределено, ЭтоРозница = Ложь) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ТекТипЦен = ДокументОбъект.ТипЦен;
	Иначе
		ТекТипЦен = ТипЦен;
	КонецЕсли;

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
			КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
			КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		Иначе

			// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регламентированного учета.
			ВалютаДокумента    = ВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;
		КонецЕсли;
	Иначе
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("Склад", ДокументОбъект, МетаданныеДокумента);
	Если ТекСклад = Неопределено Тогда
		ТекСклад = ОбщегоНазначения.ПолучитьРеквизитШапки("СкладОрдер", ДокументОбъект, МетаданныеДокумента, Справочники.Склады.ПустаяСсылка());

		Если ТипЗнч(ТекСклад) <> Тип("СправочникСсылка.Склады") Тогда
			ТекСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Если ЭтоРозница И ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		Если НЕ ЗначениеЗаполнено(ТекСклад) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура,
			   ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.ЕдиницаИзмерения, ТекСклад, ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж",
			   ДокументОбъект, МетаданныеДокумента));

			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаРегламентированногоУчета,
			   ВалютаДокумента, КурсДокумента, КратностьДокумента, ДокументОбъект.Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаТабличнойЧасти.Цена = 0;
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
							Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
							Истина,
							ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
							И ДокументОбъект.УчитыватьНДС,
							ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
							И ДокументОбъект.СуммаВключаетНДС,
							?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
							УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
			КонецЕсли;

			// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры.
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
										ТекТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
										ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
										ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента),
										ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ДокументОбъект, МетаданныеДокумента));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
						ТекТипЦен.ЦенаВключаетНДС,
						ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
						И ДокументОбъект.УчитыватьНДС,
						ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
						И ДокументОбъект.СуммаВключаетНДС,
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры.
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Процедура заполняет единицу и розничную цену продажи по в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа;
//  ДокументОбъект                 - объект редактируемого документа;
//  СкладКомпании                  - ссылка на справочник, розничный склад компании по которому надо 
//                                   определить розничную цену;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета;
//
Процедура ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладКомпании,
                                                       ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе

		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регл. учета.
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда // берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе // из регистра
		Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                             СкладКомпании, ВалютаРегламентированногоУчета, ДокументОбъект.Дата,
		                             СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВалютаДокумента, КурсДокумента,
		                             КратностьДокумента);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, Истина,
						ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
						И ДокументОбъект.УчитыватьНДС,
						ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
						И ДокументОбъект.СуммаВключаетНДС,
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли; 

		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		
	КонецЕсли;

	РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
КонецПроцедуры // ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти()

// Процедура заполняет цену возвратной тары по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа,
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
//  ДоговорКонтрагента             - договор контрагента (необязательный параметр)
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета, ДоговорКонтрагента = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы,
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если ДоговорКонтрагента = Неопределено Тогда
		ДоговорКонтрагента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента, Неопределено);
	КонецЕсли;

	Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) тогда
		Возврат;
	Иначе

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент)
			ИЛИ (НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента))
			ИЛИ (НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) И ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий) Тогда
			Возврат;
		Иначе
			// из регистра
			// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
			Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
				ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда
				Цена = 0;
			Иначе
				ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

				Цена = Ценообразование.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, , ДокументОбъект.Контрагент,
				       ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ЕдиницаТары,
				       ДокументОбъект.ВалютаДокумента,
				       ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
				       ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
				       ДоговорКонтрагента);

			КонецЕсли;

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				Возврат;
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
				                            ДокументОбъект.УчитыватьНДС, Истина,
				                            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление()

// Процедура заполняет цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ДоговорКонтрагента             - договор контрагента в случае, если его надо брать не из данного документа,
//  ВалютаРегламентированногоУчета - валюта регламентированного учета.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ДокументОбъект, ДоговорКонтрагента = Неопределено, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ДокументОбъект, МетаданныеДокумента, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;

		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;

			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
			                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
			                            ДокументОбъект.ВалютаДокумента,
			                            ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
			                            ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ,
			                            ДоговорКонтрагента,
			                            ОбщегоНазначения.ПолучитьРеквизитШапки("УсловияПродаж", ДокументОбъект, МетаданныеДокумента));

		КонецЕсли;

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
		// ставки бурутся из номенклатуры
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			                            ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
			                            ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) И ДокументОбъект.УчитыватьНДС,
			                            ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) И ДокументОбъект.СуммаВключаетНДС,
			                            ?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти), УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск()

// Рассчитывает розничную цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета, ПересчитыватьЦенуВЕдиницуХранения = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Рассчитывать розничную цену имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНТТВДокументе(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат; 
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе

		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регл. учета
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	ТипЦенРозничнойТорговли = Склад.ТипЦенРозничнойТорговли;

	// Если в документе налогов нет, считаем, что цена со всеми налогами.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
		СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	Иначе
		СуммаВключаетНДС = Истина;
		СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
	КонецЕсли;

	СтрокаТабличнойЧасти.ЦенаВРознице = УправлениеРозничнойТорговлей.РассчитатьРозничнуюЦену(СтрокаТабличнойЧасти.Цена,
	                                                            ВалютаДокумента,
	                                                            КурсДокумента,
	                                                            КратностьДокумента,
	                                                            ВалютаРегламентированногоУчета,
	                                                            СтрокаТабличнойЧасти.ПроцентРозничнойНаценки,
	                                                            СуммаВключаетНДС,
	                                                            СтавкаНДС,
	                                                            ТипЦенРозничнойТорговли,
	                                                            СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                            ?(ПересчитыватьЦенуВЕдиницуХранения, СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков, СтрокаТабличнойЧасти.ЕдиницаИзмерения));

КонецПроцедуры // РассчитатьРозничнуюЦенуТабЧасти()

// Рассчитывает процент розничной наценкив строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета, ПересчитыватьЦенуВЕдиницуХранения = Истина) Экспорт

	Перем ЦенаСНалогами;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
		КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		// Если есть цена и тип цен, но нет валюты, тогда в качестве валюты документа возьмем валюту регл. учета
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		СтруктураВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
		КурсДокумента      = СтруктураВалюты.Курс;
		КратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

	// Рассчитывать процент имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНТТВДокументе(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 0;
	Иначе

		// Пересчитываем в рубли
		ЦенаСНалогами = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаДокумента,
		                                           ВалютаРегламентированногоУчета,
		                                           КурсДокумента, 1, КратностьДокумента, 1);

		ЕстьНалоги =  ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
		            И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента);

		Если ЕстьНалоги Тогда
			СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СуммаВключаетНДС = Истина;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
		КонецЕсли;

		// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
		ЦенаСНалогами = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаСНалогами,
		                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		                СуммаВключаетНДС, Истина, Истина, СтавкаНДС);

		ЦенаСНалогамиЗаЕдиницуХранения = ЦенаСНалогами;
		Если ПересчитыватьЦенуВЕдиницуХранения Тогда
			ЦенаСНалогамиЗаЕдиницуХранения = ЦенаСНалогами * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / СтрокаТабличнойЧасти.Коэффициент;
		КонецЕсли;

		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаСНалогамиЗаЕдиницуХранения)
		                                               / ЦенаСНалогамиЗаЕдиницуХранения;
	КонецЕсли;

КонецПроцедуры // РассчитатьПроцентРозничнойНаценкиТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  СпособРасчета        - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = 0;

	Если (СпособРасчета = Неопределено)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
			                                 ИмяТабличнойЧасти) Тогда
			СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
		КонецЕсли;

		Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;

КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Рассчитывает сумму в строке возвратной тары документа
//
// Параметры:
//  СтрокаВозвратнойТары  - строка возвратной тары табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ДокументОбъект) Экспорт

	СтрокаВозвратнойТары.Сумма = СтрокаВозвратнойТары.Цена * СтрокаВозвратнойТары.Количество;

КонецПроцедуры // РассчитатьСуммуВозвратнойТарыТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Если в документе нет флагов учета НДС, то в конфигурации считатется, что суммы включают НДС.
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Истина;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента ) Тогда
		УчитыватьНДС = ДокументОбъект.УчитыватьНДС;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента ) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	                                                   УчитыватьНДС, СуммаВключаетНДС,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.СуммаНДСПередачи = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПередачи,
	                                                   ДокументОбъект.УчитыватьНДС,
	                                                   ДокументОбъект.СуммаВключаетНДС,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Рассчитывает количество исходя из количества мест
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения!
				                 |Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				Если СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
					Возврат;
				КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения мест!
					                 |Пересчет количества невозможен.");
				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения цены "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмерения) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения мест "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест;
					Иначе
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест
						                                  * СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент
						                                  / СтрокаТабличнойЧасти.Коэффициент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения "
				                 + (СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков) + " не проставлен коэффициент!
				                 |Пересчет количества невозможен.");
			Иначе
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Коэффициент
				                                  / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // РассчитатьКоличествоТабЧасти()

// Рассчитывает количество мест исходя из количества
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				СтрокаТабличнойЧасти.КоличествоМест = 0;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения цены "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмерения) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0
				   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " у единицы измерения мест "
					                 + СокрЛП(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) + " не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						КоличествоМест = СтрокаТабличнойЧасти.Количество;
					Иначе
						КоличествоМест = Окр(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент
						                 / СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент
						                 , 4, РежимОкругления.Окр15как20);
						КоличествоМест = ?((КоличествоМест % 2 = 0) ИЛИ (КоличествоМест % 2 = 1), КоличествоМест, Цел(КоличествоМест) + 1);
					КонецЕсли;
					СтрокаТабличнойЧасти.КоличествоМест = КоличествоМест;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти)
		   И СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков)
			   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не проставлен коэффициент!
				                 |Пересчет количества мест невозможен.");
			Иначе
				КоличествоМест = Окр(СтрокаТабличнойЧасти.Количество
				                                      * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
				                                      / СтрокаТабличнойЧасти.Коэффициент
				                  , 4, РежимОкругления.Окр15как20);
				СтрокаТабличнойЧасти.КоличествоМест = ?((КоличествоМест % 2 = 0) ИЛИ (КоличествоМест % 2 = 1), КоличествоМест, Цел(КоличествоМест) + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // РассчитатьКоличествоМестТабЧасти()

// Процедура выполняет проверку заполнения единицы измерения мест и количества мест
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется проверка
//
Процедура ПриЗаписиПроверитьЕдиницуИзмеренияМест(ТабличнаяЧасть) Экспорт

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест)
			 И СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриЗаписиПроверитьЕдиницуИзмеренияМест()

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()

// Рассчитывает розничную наценку и розничную цену по одному из двух алгоритмов, в зависимости от 
// настройке заданной в справочнике складов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  СтрокаТабличнойЧасти           - строка табличной части документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета, в которой возвращается розничная цена
// 
Процедура РассчитатьРозничнуюЦенуВСтрокеТабЧасти(ДокументОбъект, СтрокаТабличнойЧасти, ВалютаРегламентированногоУчета) Экспорт

	
	Если ДокументОбъект.Склад.РасчетРозничныхЦенПоТорговойНаценке Тогда
		ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе
		СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		                                    СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                    ДокументОбъект.Склад.ТипЦенРозничнойТорговли,
		                                    ДокументОбъект.Дата,
		                                    СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
		                                    ВалютаРегламентированногоУчета);
		РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНОВОЙ СЕБЕСТОИМОСТЬЮ

// Рассчитывает сумму и отклонение от плановой себестоимости в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти                          - строка табличной части документа,
//  ДокументОбъект                                - объект редактируемого документа,
//  СуммаПлановойСебестоимости                    - в этот параметр будет помещено значение,
//  СуммаОтклоненияОтСуммыПлановойСебестоимости   - в этот параметр будет помещено значение,
//  ПроцентОтклоненияОтСуммыПлановойСебестоимости - в этот параметр будет помещено значение.
//
Процедура ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект,
								СуммаПлановойСебестоимости = 0, 
								СуммаОтклоненияОтСуммыПлановойСебестоимости = 0, 
								ПроцентОтклоненияОтСуммыПлановойСебестоимости = 0) Экспорт

	Перем СуммаНДСПлановойСебестоимости;

	// Рассчитываем сумму плановой себестоимости.
	СуммаПлановойСебестоимости = СтрокаТабличнойЧасти.ПлановаяСебестоимость * СтрокаТабличнойЧасти.Количество;
	
	СуммаПоДокументу = СтрокаТабличнойЧасти.Сумма;

	// Учитываем налоги.
	Если (ДокументОбъект.УчитыватьНДС) 
	   И (НЕ ДокументОбъект.СуммаВключаетНДС) Тогда
		СуммаПоДокументу           = СуммаПоДокументу           + СтрокаТабличнойЧасти.СуммаНДС;

		Если СуммаПлановойСебестоимости <> 0 Тогда

			// Рассчитаем налоги от суммы плановой себестоимости
			СуммаНДСПлановойСебестоимости = УчетНДС.РассчитатьСуммуНДС(СуммаПлановойСебестоимости,
			                                ДокументОбъект.УчитыватьНДС,
			                                ДокументОбъект.СуммаВключаетНДС,
			                                УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			СуммаПлановойСебестоимости = СуммаПлановойСебестоимости + СуммаНДСПлановойСебестоимости;
		КонецЕсли;

	КонецЕсли;

	СуммаОтклоненияОтСуммыПлановойСебестоимости   = СуммаПоДокументу - СуммаПлановойСебестоимости;
	ПроцентОтклоненияОтСуммыПлановойСебестоимости = ?(СуммаПлановойСебестоимости = 0, 
	                                                ?(СуммаОтклоненияОтСуммыПлановойСебестоимости = 0, 0, 100), 
	                                                 (СуммаОтклоненияОтСуммыПлановойСебестоимости 
	                                                / СуммаПлановойСебестоимости) * 100);

КонецПроцедуры // ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти()

// Рассчитывает плановую себестоимость в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость",МетаданныеДокумента) Тогда
		Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
			// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	ТипЦенПлановойСебестоимостиНоменклатуры = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();

	ПлановаяСебестоимость = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры,
	                                             ТипЦенПлановойСебестоимостиНоменклатуры, 
	                                             ДокументОбъект.Дата, 
	                                             СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
	                                             ДокументОбъект.ВалютаДокумента,
	                                             ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
	                                             ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));

	ПлановаяСебестоимость = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ПлановаяСебестоимость,
	                                               Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	                                               ТипЦенПлановойСебестоимостиНоменклатуры.ЦенаВключаетНДС,
	                                               ДокументОбъект.УчитыватьНДС,
	                                               ДокументОбъект.СуммаВключаетНДС,
	                                               УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

	СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПлановаяСебестоимость;

КонецПроцедуры // РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти()

// Рассчитывает плановую себестоимость во всех строках табличной части документа.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	// В цикле по ТЧ перезаполняем плановую себестоимость.
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл
		РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета);
	КонецЦикла;

КонецПроцедуры // РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти()

// Пересчитывает плановую себестоимость с учетом новой валюты и налогов.
//
// Параметры:
//  ДокументОбъект    - объект редактируемого документа,
//  СтруктураЗначений - структура предыдущих зачений реквизитов документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ДокументОбъект, СтруктураЗначений, ВалютаРегламентированногоУчета) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	// В случае, если поменялась валюта.
	Если СтруктураЗначений.ТекущийВалютаДокумента <> ДокументОбъект.ВалютаДокумента Тогда

		// Плановая себестоимость заполнится с учетом новой валюты и налогов.
		РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
	Иначе

		// Если надо пересчитать цены при изменении флагов налогообложения.
		Если (СтруктураЗначений.ТекущийУчитыватьНДС     <> ДокументОбъект.УчитыватьНДС) 
		 ИЛИ (СтруктураЗначений.ТекущийСуммаВключаетНДС <> ДокументОбъект.СуммаВключаетНДС) Тогда

			// В цикле по ТЧ пересчитываем плановую себестоимость.
			Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл

				СтрокаТабличнойЧасти.ПлановаяСебестоимость = 
				           Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.ПлановаяСебестоимость, 
				                                             Неопределено,
				                                             СтруктураЗначений.ТекущийСуммаВключаетНДС,
				                                             ДокументОбъект.УчитыватьНДС,
				                                             ДокументОбъект.СуммаВключаетНДС, 
				                                             УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти()

// Процедура пересчета плановой себестоимости при изменении единицы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти       - строка табличной части документа,
//  ДокументОбъект             - объект редактируемого документа,
//  СтароеЗначениеКоэффициента - предыдущее значение коэффициента.
//
Процедура ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(СтрокаТабличнойЧасти, ДокументОбъект, 
                                                     СтароеЗначениеКоэффициента) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	Если СтароеЗначениеКоэффициента > 0 Тогда
		СтрокаТабличнойЧасти.ПлановаяСебестоимость = СтрокаТабличнойЧасти.ПлановаяСебестоимость 
		                                             * СтрокаТабличнойЧасти.Коэффициент 
		                                             / СтароеЗначениеКоэффициента;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость()

Процедура ЗаполнитьПлановуюСебестоимостьНаОсновании(ДокументОбъект, ДокументОснование, ВалютаРегламентированногоУчета) Экспорт

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда

		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	// По умолчанию заполняем по документу-основанию.
	ЗаполнитьПоДокументуОснованию = Истина;
	
	МетаданныеДокумента = ДокументОснование.Метаданные();
	
	// Проверяем на возможность заполнения по документу-основанию.
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаполнитьПоДокументуОснованию = Ложь;
	КонецЕсли;
	Если ЗаполнитьПоДокументуОснованию Тогда
		Если Не ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьПлановуюСебестоимость", МетаданныеДокумента) Тогда
			ЗаполнитьПоДокументуОснованию = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ЗаполнитьПоДокументуОснованию Тогда
		Если Не ДокументОснование.ИспользоватьПлановуюСебестоимость Тогда
			ЗаполнитьПоДокументуОснованию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если невозможно заполнить по документу-основанию, то заполняем по типу цены.
	Если Не ЗаполнитьПоДокументуОснованию Тогда
		РассчитатьПлановуюСебестоимостьВСтрокахТабЧасти(ДокументОбъект, ВалютаРегламентированногоУчета);
		Возврат;
	КонецЕсли;
	
	// Если возможно, то заполняем.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", ДокументОснование);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ПлановаяСебестоимость
		|	ИЗ
		|		Документ." + ДокументОснование.Метаданные().Имя + ".Товары КАК Док
		|	ГДЕ
		|		Док.Ссылка = &Сделка";

	Выборка = Запрос.Выполнить().Выбрать();

	// В цикле по ТЧ заполняем плановую себестоимость значениями,
	// полученными из документа-основания.
	Для каждого СтрокаТабличнойЧасти ИЗ ДокументОбъект.Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

		Выборка.Сбросить();
		Если НЕ Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;

		ПлановаяСебестоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ПлановаяСебестоимость, 
		                                   ДокументОбъект.ВалютаДокумента, ДокументОснование.ВалютаДокумента,
		                                   ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ДокументОснование, ВалютаРегламентированногоУчета),
		                                   ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ДокументОснование, ВалютаРегламентированногоУчета));

		ПлановаяСебестоимость = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		                                   ПлановаяСебестоимость,
		                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                   ДокументОснование.СуммаВключаетНДС,
		                                   ДокументОбъект.УчитыватьНДС,
		                                   ДокументОбъект.СуммаВключаетНДС,
		                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		Если ПлановаяСебестоимость = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер " + СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) + " не определена плановая себестоимость!");
		КонецЕсли;

		СтрокаТабличнойЧасти.ПлановаяСебестоимость = ПлановаяСебестоимость;

	КонецЦикла;

КонецПроцедуры // тчЗаполнитьПлановуюСебестоимостьНаОсновании()


// Формирует список значений реквизита табличной части документа.
// Параметры:
//  СписокЗначений    - список значений для добавления, если не передан, то создастся новый
//  ТабличнаяЧасть    - табличная часть документа, из которой будут получены значения в список
//  ИмяРеквизитаЗаказ - имя реквизита табличной части, значения которого будут получены
// Возвращаемое значение:
//  Список            - список значений, содержащий неповторяющиеся значения реквизита ТЧ
//
Функция ПолучитьСписокЗначенийРеквизитаТЧ(ТабличнаяЧасть, ИмяРеквизита, СписокЗначений = Неопределено) Экспорт

	Если СписокЗначений = Неопределено Тогда
		// Инициируем список
		СписокЗначений = Новый СписокЗначений;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		// Получим таблицу заказов
		ТаблицаНоменклатуры = ТабличнаяЧасть.Выгрузить();
		ТаблицаНоменклатуры.Свернуть(ИмяРеквизита);
		
		// Заполним список
		Для Каждого Строка Из ТаблицаНоменклатуры Цикл
			Если ЗначениеЗаполнено(Строка[ИмяРеквизита]) 
				И СписокЗначений.НайтиПоЗначению(Строка[ИмяРеквизита]) = Неопределено Тогда
				СписокЗначений.Добавить(Строка[ИмяРеквизита].Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокЗначений;

КонецФункции // ПолучитьСписокЗначенийРеквизитаТЧ()


// Процедура выполняет проверку заполнения ставки НДС
//
// Параметры:
//  ДокОбъект - документ для которого производится проверка
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется проверка
//
Процедура ПриЗаписиПроверитьСтавкуНДС(ДокОбъект, ТабличнаяЧасть) Экспорт
	
	Если ДокОбъект.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЦикла;
	
КонецПроцедуры

//возвращает значение реквизита в строке табличной части с проверкой на существование данного реквизита
Функция ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, ИмяРеквизита, ПустоеЗначение = Неопределено) Экспорт

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
       Возврат СтрокаТабличнойЧасти[ИмяРеквизита];
    Иначе
        Возврат ПустоеЗначение;
    КонецЕсли;

КонецФункции // ПолучитьЗначениеРеквизитаТЧ()


// Заполняет информацию о сумме и отклонении от плановой себестоимости в ячейках строки табличной части документа
// Вызывается из процедуры ТоварыПриВыводеСтроки().
//
// Параметры:
//  ОформлениеСтроки     - объект, содержащий оформление строки (шрифт, цвет) и коллекцию оформлений ячеек. 
//  СтрокаТабличнойЧасти - редактируемая строка табличной части,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	Перем СуммаПлановойСебестоимости, СуммаОтклоненияОтСуммыПлановойСебестоимости, 
	      ПроцентОтклоненияОтСуммыПлановойСебестоимости;

	Если Не ДокументОбъект.ИспользоватьПлановуюСебестоимость Тогда
		// Не выполняем никаких действий, если плановая себестоимость в документе не учитывается.
		Возврат;
	КонецЕсли;

	Ячейка = ОформлениеСтроки.Ячейки;

	ПолучитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект,
	                                                  СуммаПлановойСебестоимости, 
	                                                  СуммаОтклоненияОтСуммыПлановойСебестоимости,
	                                                  ПроцентОтклоненияОтСуммыПлановойСебестоимости);

	Если СуммаПлановойСебестоимости = Неопределено Тогда

		// Если плановая себестоимость не определена, 
		// информация об отклонении от плановой себестоимости также будет неопределенной.
		Ячейка.СуммаПлановойСебестоимости.УстановитьТекст("");
		Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.УстановитьТекст("");
		Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.УстановитьТекст("");
	Иначе

		// Если плановая себестоимость определена, 
		// отклонение рассчитываем и показываем.
		Ячейка.СуммаПлановойСебестоимости.УстановитьТекст(Формат(СуммаПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2"));
		Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.УстановитьТекст(Формат(СуммаОтклоненияОтСуммыПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2;ЧН=0,00"));
		Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.УстановитьТекст(Формат(ПроцентОтклоненияОтСуммыПлановойСебестоимости, "ЧЦ=15;ЧДЦ=2"));

		// Отрицательное отклонение выделяем красным цветом.
		Если СуммаОтклоненияОтСуммыПлановойСебестоимости < 0 Тогда
			Ячейка.СуммаОтклоненияОтСуммыПлановойСебестоимости.ЦветТекста   = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейка.ПроцентОтклоненияОтСуммыПлановойСебестоимости.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти()


