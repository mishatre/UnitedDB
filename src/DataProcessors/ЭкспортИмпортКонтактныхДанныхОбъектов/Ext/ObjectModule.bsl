
Перем мФормаПрогрессора Экспорт;

Перем мСписокРеквизитовОбъекта Экспорт;

#Если Клиент Тогда

// Функция определяет имя таблицы объектов обработки.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция ОпределитьИмяТаблицыОбъекта() Экспорт

	Если ТипОбъекта = "КонтактныеЛицаКонтрагентов"  ИЛИ ТипОбъекта = "ПрочиеКонтактныеЛица" Тогда
		Возврат "КонтактныеЛица";
	Иначе
		Возврат ТипОбъекта;
	КонецЕсли;

КонецФункции

// Функция формирует список значений из строки с разделителями.
//
// Параметры
//  СтрокаТекста - строка текста с разделителями
//  Разделитель - Строка, разделитель в тексте
//  НаличиеКавычек - Булево, есть ли кавычки вокруг значений в строке
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ИзСтрокиСРазделителями(СтрокаТекста, Разделитель, НаличиеКавычек, НеУчитывтьТекстСТабуляциями = Ложь) Экспорт

	Если НЕ НеУчитывтьТекстСТабуляциями И ФорматФайла = "ТекстCТабуляциями" Тогда
		НаличиеКавычек = Ложь;
		Разделитель = Символы.Таб;
	КонецЕсли; 
	
	СписокДанных = Новый СписокЗначений;
	
	ПрошлыйРазделитель = 0;
	КоличествоСимволов = 0;

	Для а=1 По СтрДлина(СтрокаТекста) Цикл
	
		Если Сред(СтрокаТекста,а,1) = Разделитель Тогда
		
			ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
			Если НаличиеКавычек Тогда
				ВыбранноеЗначение = Сред(ВыбранноеЗначение, 2, (СтрДлина(ВыбранноеЗначение) - 2));
			КонецЕсли;
			Если НаименованиеПрограммы = "TheBAT" Тогда
				ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\22", """");
				ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\2C", "");
			ИначеЕсли НаименованиеПрограммы = "MSOutlook" И НЕ НеУчитывтьТекстСТабуляциями И ФорматФайла = "ТекстCТабуляциями" Тогда
				ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, (""""""), """");
				Если Сред(ВыбранноеЗначение, 1, 1) = """" Тогда
					ВыбранноеЗначение = Сред(ВыбранноеЗначение, 2);
				КонецЕсли;
				Если Сред(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение), 1) = """" Тогда
					ВыбранноеЗначение = Сред(ВыбранноеЗначение, 1, (СтрДлина(ВыбранноеЗначение) - 1));
				КонецЕсли;
			КонецЕсли; 
			СписокДанных.Добавить(ВыбранноеЗначение);
			ПрошлыйРазделитель = а;
			КоличествоСимволов = 0;
			Продолжить;
		
		КонецЕсли;

		КоличествоСимволов = КоличествоСимволов + 1;
	
	КонецЦикла; 

	ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1));
	Если НаличиеКавычек Тогда
		ВыбранноеЗначение = Сред(ВыбранноеЗначение, 2, (СтрДлина(ВыбранноеЗначение) - 2));
	КонецЕсли; 
	Если НаименованиеПрограммы = "TheBAT" Тогда
		ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\22", """");
		ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "\2C", "");
	ИначеЕсли НаименованиеПрограммы = "MSOutlook" И НЕ НеУчитывтьТекстСТабуляциями И ФорматФайла = "ТекстCТабуляциями" Тогда
		ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, (""""""), """");
		Если Сред(ВыбранноеЗначение, 1, 1) = """" Тогда
			ВыбранноеЗначение = Сред(ВыбранноеЗначение, 2);
		КонецЕсли;
		Если Сред(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение), 1) = """" Тогда
			ВыбранноеЗначение = Сред(ВыбранноеЗначение, 1, (СтрДлина(ВыбранноеЗначение) - 1));
		КонецЕсли;
	КонецЕсли; 
	СписокДанных.Добавить(ВыбранноеЗначение);
	
	Возврат СписокДанных;

КонецФункции

// Функция преобразует значения списка значений в строку с разделителями.
// 
// Параметры
//  СписокЭлементов - список значений для преобразования
//  Разделитель - строка, разделитель для элементов строки
//  НаличиеКавычек - булево, нужно ли заключать элемент строки в кавычки
// 
// ВозвращаемыеЗначения
//  Строка
// 
Функция ВСтрокуСразделителями(СписокЭлементов, Разделитель, НаличиеКавычек)

	Если ФорматФайла = "ТекстCТабуляциями" Тогда
		НаличиеКавычек = Ложь;
		Разделитель = Символы.Таб;
	КонецЕсли; 
	
	СтрокаВозврата = "";
	
	Для а = 0 По СписокЭлементов.Количество() - 1 Цикл
		ЭлементВыгрузки = СписокЭлементов[а].Значение;
		Если НаименованиеПрограммы = "TheBAT" Тогда
			ЭлементВыгрузки = СтрЗаменить(ЭлементВыгрузки, """", "\22");
		Иначе
			ЭлементВыгрузки = СтрЗаменить(ЭлементВыгрузки, """", """""");
		КонецЕсли;
		Если ФорматФайла = "ТекстCТабуляциями" Тогда
			ЭлементВыгрузки = СтрЗаменить(ЭлементВыгрузки, Разделитель, "");
		КонецЕсли;
		Если а = 0 Тогда
			СтрокаВозврата = ?(НаличиеКавычек,"""","") + СокрЛП(ЭлементВыгрузки) + ?(НаличиеКавычек,"""","");
		Иначе
			СтрокаВозврата = СтрокаВозврата + Разделитель + ?(НаличиеКавычек,"""","") + СокрЛП(ЭлементВыгрузки) + ?(НаличиеКавычек,"""","");
		КонецЕсли; 
	КонецЦикла; 

	Возврат СтрокаВозврата;

КонецФункции

// Процедура заполняет таблицу полей загрузки.
// 
Процедура ЗаполнитьТаблицуПолей()

	мФормаПрогрессора.КомментарийЗначения = "Выполняется заполнение таблицы полей ...";
	мФормаПрогрессора.Значение = 0;
	
	Если НаименованиеПрограммы = "OutlookExpress" Тогда
	
		СписокПолей = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ";", Ложь);

		мФормаПрогрессора.МаксимальноеЗначение = СписокПолей.Количество();
		мФормаПрогрессора.Открыть();
		
		ИндПоля = 0;
		Для каждого ЭлементСписка Из СписокПолей Цикл

			мФормаПрогрессора.Значение = Число(СписокПолей.Индекс(ЭлементСписка) + 1);
			
			Если СокрЛП(ЭлементСписка.Значение) = "Улица"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Город" 
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Почтовый индекс" 
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Область" 
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Дом. адрес, страна"
				 
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Home Street"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Home City" 
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Home Postal Code" 
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Home State" 
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Home Country/Region" Тогда

				СтрокаАдреса = НастройкаПолей.Найти("Домашний адрес", "ИмяРеквизита");
				Если СтрокаАдреса <> Неопределено Тогда
				
					СтрокаАдреса.ИндПоля = СтрокаАдреса.ИндПоля + ";_" + СокрЛП(ИндПоля);
					ИндПоля = ИндПоля + 1;
					Продолжить;

				Иначе
					
					НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

					НоваяСтрокаТаблицы.ИндПоля               = "_" + СокрЛП(ИндПоля);
					НоваяСтрокаТаблицы.Использование         = Ложь;
					НоваяСтрокаТаблицы.ИмяРеквизита          = "Домашний адрес";
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
					
				КонецЕсли; 
				
			ИначеЕсли (СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("служ.")) > 0
				    И СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("адрес")) > 0)
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Business Street"
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Business City" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Business Postal Code" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Business State" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Business Country/Region" Тогда

				СтрокаАдреса = НастройкаПолей.Найти("Рабочий адрес", "ИмяРеквизита");
				Если СтрокаАдреса <> Неопределено Тогда
				
					СтрокаАдреса.ИндПоля = СтрокаАдреса.ИндПоля + ";_" + СокрЛП(ИндПоля);
					ИндПоля = ИндПоля + 1;
					Продолжить;

				Иначе

					НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

					НоваяСтрокаТаблицы.ИндПоля               = "_" + СокрЛП(ИндПоля);
					НоваяСтрокаТаблицы.Использование         = Ложь;
					НоваяСтрокаТаблицы.ИмяРеквизита          = "Рабочий адрес";
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
				
				КонецЕсли; 
				
			Иначе

				НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

				НоваяСтрокаТаблицы.ИндПоля        = "_" + СокрЛП(ИндПоля);
				НоваяСтрокаТаблицы.Использование  = Ложь;
				НоваяСтрокаТаблицы.ИмяРеквизита   = ЭлементСписка.Значение;

				НоваяСтрокаТаблицыНаименования = ПоляПредставленияНаименованияОбъектаПриЗагрузке.Добавить();
				НоваяСтрокаТаблицыНаименования.ИндПоля      = "_" + СокрЛП(ИндПоля);
				НоваяСтрокаТаблицыНаименования.ИмяРеквизита = ЭлементСписка.Значение;
				НоваяСтрокаТаблицы.Использование            = Ложь;
				
				Если СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("телефон")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("факс")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("веб-страница")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Электронная почта")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Phone")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Fax")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("E-mail")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("пейджер")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Pager")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Web Page")) > 0 Тогда
				
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();

				Иначе

					НоваяСтрокаТаблицы.ТипРеквизита1С        = "Строка";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = "";
				
				КонецЕсли; 
				
			КонецЕсли; 

			ИндПоля = ИндПоля + 1;
			
		КонецЦикла; 
		
	ИначеЕсли НаименованиеПрограммы = "TheBAT" Тогда
	
		СписокПолей = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ",", Ложь);

		мФормаПрогрессора.МаксимальноеЗначение = СписокПолей.Количество();
		мФормаПрогрессора.Открыть();
		
		ИндПоля = 0;
		Для каждого ЭлементСписка Из СписокПолей Цикл

			мФормаПрогрессора.Значение = Число(СписокПолей.Индекс(ЭлементСписка) + 1);
			
			Если СокрЛП(ЭлементСписка.Значение) = "Адрес (дом.)"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Город (дом.)"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Штат (дом.)"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Индекс (дом.)"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Страна (дом.)"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Address"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "City"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "State"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "ZIP"
				 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Country" Тогда

				СтрокаАдреса = НастройкаПолей.Найти("Домашний адрес", "ИмяРеквизита");
				Если СтрокаАдреса <> Неопределено Тогда
				
					СтрокаАдреса.ИндПоля = СтрокаАдреса.ИндПоля + ";_" + СокрЛП(ИндПоля);
					ИндПоля = ИндПоля + 1;
					Продолжить;

				Иначе

					НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

					НоваяСтрокаТаблицы.ИндПоля               = "_" + СокрЛП(ИндПоля);
					НоваяСтрокаТаблицы.Использование         = Ложь;
					НоваяСтрокаТаблицы.ИмяРеквизита          = "Домашний адрес";
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
					
				КонецЕсли; 
				
			ИначеЕсли СокрЛП(ЭлементСписка.Значение) = "Адрес (раб.)"
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Город (раб.)" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Штат (раб.)" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Индекс (раб.)" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "Страна (раб.)"
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "B/Address"
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "B/City" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "B/State" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "B/ZIP" 
				  ИЛИ СокрЛП(ЭлементСписка.Значение) = "B/Country" Тогда

				СтрокаАдреса = НастройкаПолей.Найти("Рабочий адрес", "ИмяРеквизита");
				Если СтрокаАдреса <> Неопределено Тогда
				
					СтрокаАдреса.ИндПоля = СтрокаАдреса.ИндПоля + ";_" + СокрЛП(ИндПоля);
					ИндПоля = ИндПоля + 1;
					Продолжить;

				Иначе

					НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

					НоваяСтрокаТаблицы.ИндПоля               = "_" + СокрЛП(ИндПоля);
					НоваяСтрокаТаблицы.Использование         = Ложь;
					НоваяСтрокаТаблицы.ИмяРеквизита          = "Рабочий адрес";
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
				
				КонецЕсли; 
				
			Иначе

				НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

				НоваяСтрокаТаблицы.ИндПоля        = "_" + СокрЛП(ИндПоля);
				НоваяСтрокаТаблицы.Использование  = Ложь;
				НоваяСтрокаТаблицы.ИмяРеквизита   = ЭлементСписка.Значение;

				НоваяСтрокаТаблицыНаименования = ПоляПредставленияНаименованияОбъектаПриЗагрузке.Добавить();
				НоваяСтрокаТаблицыНаименования.ИндПоля      = "_" + СокрЛП(ИндПоля);
				НоваяСтрокаТаблицыНаименования.ИмяРеквизита = ЭлементСписка.Значение;
				НоваяСтрокаТаблицы.Использование            = Ложь;
				
				Если СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("телефон")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("факс")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("WWW")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Мобильный")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("E-mail")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Phone")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Fax")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Mobile")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Homepage")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Pager")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("пейджер")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Web Page")) > 0 Тогда
				
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();

				Иначе

					НоваяСтрокаТаблицы.ТипРеквизита1С        = "Строка";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = "";
				
				КонецЕсли; 
				
			КонецЕсли; 

			ИндПоля = ИндПоля + 1;
			
		КонецЦикла; 
		
	ИначеЕсли НаименованиеПрограммы = "MSOutlook" Тогда
	
		СписокПолей = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ",", Истина);

		мФормаПрогрессора.МаксимальноеЗначение = СписокПолей.Количество();
		мФормаПрогрессора.Открыть();
		
		ИндПоля = 0;
		Для каждого ЭлементСписка Из СписокПолей Цикл
			
			мФормаПрогрессора.Значение = СписокПолей.Индекс(ЭлементСписка) + 1;
		
			Если СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("(раб. адрес)")) > 0 Тогда

				СтрокаАдреса = НастройкаПолей.Найти("Рабочий адрес", "ИмяРеквизита");
				Если СтрокаАдреса <> Неопределено Тогда
				
					СтрокаАдреса.ИндПоля = СтрокаАдреса.ИндПоля + ";_" + СокрЛП(ИндПоля);
					ИндПоля = ИндПоля + 1;
					Продолжить;

				Иначе

					НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

					НоваяСтрокаТаблицы.ИндПоля               = "_" + СокрЛП(ИндПоля);
					НоваяСтрокаТаблицы.Использование         = Ложь;
					НоваяСтрокаТаблицы.ИмяРеквизита          = "Рабочий адрес";
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
					
				КонецЕсли; 
				
			ИначеЕсли СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("(дом. адрес)")) > 0 ИЛИ СокрЛП(ЭлементСписка.Значение) = "Почтовый код (дом.)" Тогда

				СтрокаАдреса = НастройкаПолей.Найти("Домашний адрес", "ИмяРеквизита");
				Если СтрокаАдреса <> Неопределено Тогда
				
					СтрокаАдреса.ИндПоля = СтрокаАдреса.ИндПоля + ";_" + СокрЛП(ИндПоля);
					ИндПоля = ИндПоля + 1;
					Продолжить;

				Иначе

					НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

					НоваяСтрокаТаблицы.ИндПоля               = "_" + СокрЛП(ИндПоля);
					НоваяСтрокаТаблицы.Использование         = Ложь;
					НоваяСтрокаТаблицы.ИмяРеквизита          = "Домашний адрес";
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
				
				КонецЕсли; 
				
			ИначеЕсли СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("(другой адрес)")) > 0 Тогда

				СтрокаАдреса = НастройкаПолей.Найти("Другой адрес", "ИмяРеквизита");
				Если СтрокаАдреса <> Неопределено Тогда
				
					СтрокаАдреса.ИндПоля = СтрокаАдреса.ИндПоля + ";_" + СокрЛП(ИндПоля);
					ИндПоля = ИндПоля + 1;
					Продолжить;

				Иначе

					НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

					НоваяСтрокаТаблицы.ИндПоля               = "_" + СокрЛП(ИндПоля);
					НоваяСтрокаТаблицы.Использование         = Ложь;
					НоваяСтрокаТаблицы.ИмяРеквизита          = "Другой адрес";
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
				
				КонецЕсли; 

			Иначе

				НоваяСтрокаТаблицы = НастройкаПолей.Добавить();

				НоваяСтрокаТаблицы.ИндПоля        = "_" + СокрЛП(ИндПоля);
				НоваяСтрокаТаблицы.Использование  = Ложь;
				НоваяСтрокаТаблицы.ИмяРеквизита   = ЭлементСписка.Значение;

				НоваяСтрокаТаблицыНаименования = ПоляПредставленияНаименованияОбъектаПриЗагрузке.Добавить();
				НоваяСтрокаТаблицыНаименования.ИндПоля      = "_" + СокрЛП(ИндПоля);
				НоваяСтрокаТаблицыНаименования.ИмяРеквизита = ЭлементСписка.Значение;
				НоваяСтрокаТаблицы.Использование            = Ложь;
				
				Если СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("телефон")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("факс")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("веб-страница")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Web-страница")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("пейджер")) > 0
					ИЛИ СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("E-mail")) > 0
					ИЛИ (СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("Адрес")) > 0 И СтрЧислоВхождений(ВРег(ЭлементСписка.Значение), ВРег("эл. почты")) > 0) Тогда
				
					НоваяСтрокаТаблицы.ТипРеквизита1С        = "ВидКИ";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();

				Иначе

					НоваяСтрокаТаблицы.ТипРеквизита1С        = "Строка";
					НоваяСтрокаТаблицы.НазначениеРеквизита1С = "";
				
				КонецЕсли; 
				
			КонецЕсли; 

			ИндПоля = ИндПоля + 1;
			
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

// Процедура добавляет строку табличной части НастройкаПолейВыгрузки.
// 
Процедура ДобавитьСтрокуНастройкаПолейВыгрузки(СинонимПоля = Неопределено, ИмяПоля = Неопределено, ТипПоля = Неопределено)
	
	Если (СинонимПоля = Неопределено)
		И (ИмяПоля = Неопределено)
		И (ТипПоля = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоля = НастройкаПолейВыгрузки.Добавить();
	
	Если СинонимПоля <> Неопределено Тогда
		СтрокаПоля.СинонимПоля = СинонимПоля;
	Иначе
		СтрокаПоля.СинонимПоля = "";
	КонецЕсли;
	
	Если ИмяПоля <> Неопределено Тогда
		СтрокаПоля.ИмяПоля = ИмяПоля;
	Иначе
		СтрокаПоля.ИмяПоля = "";
	КонецЕсли;
	
	Если ТипПоля <> Неопределено Тогда
		СтрокаПоля.Тип = ТипПоля;
	Иначе
		СтрокаПоля.Тип = "";
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуНастройкаПолейВыгрузки()

// Процедура обходит выборку видов КИ для добавления строк табличной части НастройкаПолейВыгрузки.
// 
Процедура ОбработатьЗапросВидовКИ(ЗапросВидовКИ, ПараметрВидОбъектаКИ)
	
	ЗапросВидовКИ.УстановитьПараметр("ВидОбъектаКИ", ПараметрВидОбъектаКИ);
	
	ВыборкаВидовКИ = ЗапросВидовКИ.Выполнить().Выбрать();
	Пока ВыборкаВидовКИ.Следующий() Цикл
		ДобавитьСтрокуНастройкаПолейВыгрузки(ВыборкаВидовКИ.ИмяКИ, ВыборкаВидовКИ.ВидКИ, ВыборкаВидовКИ.ТипКИ);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЗапросВидовКИ()

// Процедура заполняет таблицу полей выгрузки.
// 
Процедура ЗаполнитьТаблицуПолейВыгрузки()

	мФормаПрогрессора.КомментарийЗначения = "Заполняется таблица полей выгрузки ...";
	мФормаПрогрессора.МаксимальноеЗначение = мСписокРеквизитовОбъекта.Количество();
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.Открыть();
	
	НастройкаПолейВыгрузки.Очистить();
	
	Для каждого Поле Из мСписокРеквизитовОбъекта Цикл
		
		мФормаПрогрессора.Значение = мСписокРеквизитовОбъекта.Индекс(Поле) + 1;
		ДобавитьСтрокуНастройкаПолейВыгрузки(Поле.Представление, Поле.Значение, "Реквизит справочника");
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СправочникВидовКИ.Ссылка       КАК ВидКИ,
	|	СправочникВидовКИ.Наименование КАК ИмяКИ,
	|	СправочникВидовКИ.Тип          КАК ТипКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК СправочникВидовКИ
	|ГДЕ
	|	СправочникВидовКИ.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКИ
	|";
	
	ОбработатьЗапросВидовКИ(Запрос, Перечисления.ВидыОбъектовКонтактнойИнформации[ОпределитьИмяТаблицыОбъекта()]);
	
	Если ОпределитьИмяТаблицыОбъекта() = "КонтактныеЛица" Тогда
		ОбработатьЗапросВидовКИ(Запрос, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
	КонецЕсли;
	
	Если мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет таблицу данных для загрузки.
// 
Функция ЗаполнитьТаблицуДанныхФайла()

	ТаблицаФайла = Новый ТаблицаЗначений;

	Если НаименованиеПрограммы = "OutlookExpress" Тогда
		СписокПолей = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ";", Ложь);
	ИначеЕсли НаименованиеПрограммы = "MSOutlook" Тогда
		СписокПолей = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ",", Истина);
	ИначеЕсли НаименованиеПрограммы = "TheBAT" Тогда
		СписокПолей = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ",", Ложь);
	КонецЕсли; 

	Для а = 0 По (СписокПолей.Количество() - 1) Цикл
		ТаблицаФайла.Колонки.Добавить("_" + СокрЛП(а));
	КонецЦикла; 
	ТаблицаФайла.Колонки.Добавить("НомерСтрокиФайла");
	
	мФормаПрогрессора.КомментарийЗначения = "Выполняется анализ данных файла ...";
	мФормаПрогрессора.МаксимальноеЗначение = ТекстФайла.КоличествоСтрок();
	мФормаПрогрессора.Значение = 2;
	мФормаПрогрессора.Открыть();
	
	Для а = 2 По ТекстФайла.КоличествоСтрок() Цикл

		мФормаПрогрессора.Значение = а;
		
		Если НаименованиеПрограммы = "OutlookExpress" Тогда
			ЗначенияСтроки = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(а), ";", Ложь);
		ИначеЕсли НаименованиеПрограммы = "MSOutlook" Тогда
			ЗначенияСтроки = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(а), ",", Истина);
		ИначеЕсли НаименованиеПрограммы = "TheBAT" Тогда
			ЗначенияСтроки = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(а), ",", Ложь);
		КонецЕсли;

		Если СписокПолей.Количество() <> ЗначенияСтроки.Количество() Тогда
			Если ФорматФайла = "ТекстCSV" Тогда
				Если мФормаПрогрессора.Открыта() Тогда
					мФормаПрогрессора.Закрыть();
				КонецЕсли; 
				Предупреждение("Выявлено несоответствие файла и типа экспортной программы.");
				Возврат Ложь;
			Иначе
				Для б = ЗначенияСтроки.Количество() По СписокПолей.Количество() Цикл
					ЗначенияСтроки.Добавить("");
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаТаблицыФайла = ТаблицаФайла.Добавить();
		СтрокаТаблицыФайла.НомерСтрокиФайла = а;
		
		Для б = 0 По СписокПолей.Количество() - 1 Цикл
		
			СтрокаТаблицыФайла["_" + СокрЛП(б)] = ЗначенияСтроки[б].Значение;
		
		КонецЦикла; 
	
	КонецЦикла;

	ТаблицаДанныхФайла = ТаблицаФайла;

	Возврат Истина;

КонецФункции

// Процедура открывает форму для настройки загрузки данных.
// 
Процедура НачатьНастройкуЗагрузки() Экспорт
	
	Если НЕ ЗаполнитьТаблицуДанныхФайла() Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаДанныхФайла.Количество() = 0 Тогда
	
		Предупреждение("Проверьте файл на наличие данных.");
		Возврат;
	
	КонецЕсли; 
	
	ЗаполнитьТаблицуПолей();
	ЭтотОбъект.ПолучитьФорму("ФормаВыполненияЗагрузки").ОткрытьМодально();
	
КонецПроцедуры

// Процедура открывает форму для настройки выгрузки данных.
// 
Процедура НачатьНастройкуВыгрузки() Экспорт

	ЗаполнитьТаблицуПолейВыгрузки();
	ЭтотОбъект.ПолучитьФорму("ФормаВыполненияВыгрузки").ОткрытьМодально();

КонецПроцедуры

// Процедура заполняет список имен реквизитов объектов для загрузки.
// 
Процедура ЗаполнитьСписокРеквизитовОбъекта() Экспорт

	мСписокРеквизитовОбъекта.Очистить();

	Если ТипОбъекта = "ФизическиеЛица" Тогда
		
		мСписокРеквизитовОбъекта.Добавить("Фамилия" , "Фамилия");
		мСписокРеквизитовОбъекта.Добавить("Имя"     , "Имя");
		мСписокРеквизитовОбъекта.Добавить("Отчество", "Отчество");
		
	ИначеЕсли ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
		мСписокРеквизитовОбъекта.Добавить("Должность"          , "Должность");
	КонецЕсли;
	
	Для Каждого Реквизит Из Метаданные.Справочники[ОпределитьИмяТаблицыОбъекта()].Реквизиты Цикл
		
		Если ТипЗнч(Реквизит.Тип) = Тип("ОписаниеТипов") Тогда
			
			Если (Реквизит.Имя = "Должность" ИЛИ Реквизит.Имя = "Роль")
				И (ТипОбъекта = "ПрочиеКонтактныеЛица"
				ИЛИ ТипОбъекта = "ЛичныеКонтакты"
				ИЛИ ТипОбъекта="КонтактныеЛицаКонтрагентов") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.Имя = "КоличествоДнейДоНапоминания" Тогда
				Продолжить;
			КонецЕсли;

			Если Найти(Реквизит.Имя,"Удалить") = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.Тип.СодержитТип(Тип("Строка"))
				ИЛИ Реквизит.Тип.СодержитТип(Тип("Число"))
				ИЛИ Реквизит.Тип.СодержитТип(Тип("Дата")) Тогда
			
				мСписокРеквизитовОбъекта.Добавить(Реквизит.Имя, Реквизит.Синоним);
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет список имен реквизитов объектов для выгрузки.
// 
Процедура ЗаполнитьСписокРеквизитовОбъектаВыгрузки() Экспорт
	
	мСписокРеквизитовОбъекта.Очистить();
	мСписокРеквизитовОбъекта.Добавить("Наименование", "Наименование");
	
	Если ТипОбъекта = "ФизическиеЛица" Тогда
		
		мСписокРеквизитовОбъекта.Добавить("Фамилия", "Фамилия");
		мСписокРеквизитовОбъекта.Добавить("Имя", "Имя");
		мСписокРеквизитовОбъекта.Добавить("Отчество", "Отчество");
		
	ИначеЕсли ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
		мСписокРеквизитовОбъекта.Добавить("Должность", "Должность");
	КонецЕсли;
	
	Для каждого Реквизит Из Метаданные.Справочники[ОпределитьИмяТаблицыОбъекта()].Реквизиты Цикл
	
		Если ((Реквизит.Имя = "Должность" ИЛИ Реквизит.Имя = "Роль")
			И (ТипОбъекта = "ПрочиеКонтактныеЛица" ИЛИ ТипОбъекта = "ЛичныеКонтакты")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.Имя = "КоличествоДнейДоНапоминания"
			ИЛИ Реквизит.Имя = "НапоминатьОДнеРождения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(Реквизит.Имя,"Удалить") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		мСписокРеквизитовОбъекта.Добавить(Реквизит.Имя, Реквизит.Синоним);
	
	КонецЦикла;
	
КонецПроцедуры

// Функция преобразует значение из файла к необходимому типу.
//
// Параметры
//  ЗначениеИзФайла - строка, значение из файла
//  ОписаниеТиповРеквизита - ОписаниеТипов, к которому необходимо преобразовать значение
//  ОписаниеОшибки - Строка, описание ошибки, если преобразование не удалось выполнить
//
// Возвращаемое значение:
//   Преобразованное к заданному типу значение
//
Функция ПреобразоватьЗначениеФайла(ЗначениеИзФайла, ОписаниеТиповРеквизита, ОписаниеОшибки = "")

	Если ТипЗнч(ОписаниеТиповРеквизита) <> Тип("ОписаниеТипов") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ОписаниеТиповРеквизита.СодержитТип(Тип("Строка")) Тогда
		Возврат СокрЛП(ЗначениеИзФайла);
	ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("Число")) Тогда
		ПреобразованноеЗначение = "";
		Попытка
			ПреобразованноеЗначение = Число(ЗначениеИзФайла);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат Неопределено;
		КонецПопытки;
		Возврат ПреобразованноеЗначение;
	ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("Дата")) Тогда
		ПреобразованноеЗначение = "";
		Попытка
			СтрокаДаты = ПреобразоватьВСтрокуДаты(ЗначениеИзФайла);
			Если СтрокаДаты = Неопределено Тогда
				ОписаниеОшибки = "Нет возможности преобразовать к типу ""Дата"".";
				Возврат Неопределено;
			КонецЕсли;
			Попытка
				ПреобразованноеЗначение = Дата(СтрокаДаты);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Возврат Неопределено;
			КонецПопытки;
			Возврат ПреобразованноеЗначение;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;

КонецФункции // ()

// Функция преобразует знаяение из файла в строку, для дальнейшего преобразования в дату
//
// Параметры
//  ЗначениеФайла - строка, значение из файла
//
// Возвращаемое значение:
//   Строка
//
Функция ПреобразоватьВСтрокуДаты(ЗначениеФайла) Экспорт

	СтрокаДаты = "";

	Если НаименованиеПрограммы = "TheBAT" Тогда
		
		СтрокаДаты = ЗначениеФайла + "000000";
		
	ИначеЕсли НаименованиеПрограммы = "MSOutlook" Тогда
		
		МассивЗначений = Новый Массив;

		ПрошлаяТочка = 0;
		
		Для а=1 По СтрДлина(ЗначениеФайла) Цикл
		
			Если Сред(ЗначениеФайла, а, 1) = "." Тогда
			
				МассивЗначений.Добавить(Сред(ЗначениеФайла, (ПрошлаяТочка + 1), (а - ПрошлаяТочка - 1)));
				ПрошлаяТочка = а;
				Продолжить;
			
			КонецЕсли; 
		
		КонецЦикла;
		МассивЗначений.Добавить(Сред(ЗначениеФайла, (ПрошлаяТочка + 1)));

		Если МассивЗначений.Количество() <> 3 Тогда
			Возврат Неопределено;
		КонецЕсли;

		Попытка
			СтрокаДаты = СтрокаДаты + СокрЛП(Формат(Число(МассивЗначений[2]),"ЧЦ=4;ЧВН=;ЧГ=0"));
		Исключение
			Возврат Неопределено;
		КонецПопытки;

		Попытка
			СтрокаДаты = СтрокаДаты + СокрЛП(Формат(Число(МассивЗначений[1]),"ЧЦ=2;ЧВН=;ЧГ=0"));
		Исключение
			Возврат Неопределено;
		КонецПопытки;

		Попытка
			СтрокаДаты = СтрокаДаты + СокрЛП(Формат(Число(МассивЗначений[0]),"ЧЦ=2;ЧВН=;ЧГ=0"));
		Исключение
			Возврат Неопределено;
		КонецПопытки;

		СтрокаДаты = СтрокаДаты + "000000";
		
	КонецЕсли; 

	Возврат СтрокаДаты;
	
КонецФункции

// Функция определяет индекс записи строки в файле.
//
// Параметры
//  СписокПолейФайла - список значений
//  НаименованиеПоля - строка, имя поля в файле
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьИндПоляПоНаименованию(СписокПолейФайла, НаименованиеПоля)

	НайденнаяЗапись = СписокПолейФайла.НайтиПоЗначению(СокрЛП(НаименованиеПоля));

	Если НайденнаяЗапись = Неопределено Тогда
		Возврат "_0";
	Иначе
		ИндПоля = "_" + СокрЛП(СписокПолейФайла.Индекс(НайденнаяЗапись));
		Возврат ИндПоля;
	КонецЕсли; 

КонецФункции // ПолучитьИндПоляПоНаименованию(СписокПолейФайла, ()

// Функция определяет имя реквизита объекта по синониму
//
// Параметры
//  СинонимРеквизита - строка, синоним реквизита объекта
//
// Возвращаемое значение:
//   Строка - имя реквизита
//
Функция ПолучитьИмяРеквизита(СинонимРеквизита)

	Для каждого Реквизит Из Метаданные.Справочники[ОпределитьИмяТаблицыОбъекта()].Реквизиты Цикл
	
		Если Реквизит.Синоним = СинонимРеквизита Тогда
		
			Возврат Реквизит.Имя;
		
		КонецЕсли;
	
	КонецЦикла;

КонецФункции // ПолучитьИмяРеквизита()

// Процедура корректирует имена полей в тексте файла, для дальнейшей обработки.
//
Процедура ЗаменитьПоля() Экспорт

	СписокПолей = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ";", Ложь);

	Если СписокПолей[0].Значение <> "Имя" Тогда
	
		Возврат;
	
	КонецЕсли; 

	НашлиПервоеИмя = Ложь;

	Для каждого ЭлементСписка Из СписокПолей Цикл
	
		Если ЭлементСписка.Значение = "Имя" Тогда
		
			Если НашлиПервоеИмя Тогда
			
				ЭлементСписка.Значение = "Представление";
				Прервать;

			Иначе

				НашлиПервоеИмя = Истина;
			
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 

	СтрокаПолей = ВСтрокуСРазделителями(СписокПолей, ";", Ложь);

	ТекстФайла.ЗаменитьСтроку(1, СтрокаПолей);

КонецПроцедуры

// Процедура проверяет таблицу объектов выгрузки
// 
Процедура ПроверитьТаблицуОбъектовВыгрузки() Экспорт
	
	а = 1;
	
	мФормаПрогрессора.КомментарийЗначения = "Проверяется таблица объектов выгрузки ...";
	мФормаПрогрессора.МаксимальноеЗначение = НастройкаВыгрузкиОбъектов.Количество();
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.Открыть();
	
	Пока а <= НастройкаВыгрузкиОбъектов.Количество() Цикл
		
		мФормаПрогрессора.Значение = а;
		ТекущаяСтрока = НастройкаВыгрузкиОбъектов.Получить(а - 1);
		Если ТипЗнч(ТекущаяСтрока.ОбъектВыгрузки) = Тип("СправочникСсылка." + ОпределитьИмяТаблицыОбъекта()) Тогда
			а = а + 1;
		Иначе
			НастройкаВыгрузкиОбъектов.Удалить(а - 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает в текст файла выгружаемую информацию
//
Процедура ЗаписатьВыгружаемуюИнформацию() Экспорт

	мФормаПрогрессора.КомментарийЗначения = "Формируется выходной файл ...";
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.Открыть();
	
	Запрос = Новый Запрос;
	СписокПолейТекста = Новый СписокЗначений;

	СписокПолей = Новый СписокЗначений;
	СписокВидовКИ = Новый СписокЗначений;
	НомерПоляКИ = 0;
	мФормаПрогрессора.МаксимальноеЗначение = НастройкаПолейВыгрузки.Количество();
	Для каждого СтрокаТаблицы Из НастройкаПолейВыгрузки Цикл
	
		мФормаПрогрессора.Значение = НастройкаПолейВыгрузки.Индекс(СтрокаТаблицы) + 1;
		Если НЕ СтрокаТаблицы.Использование Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаТаблицы.ИмяПоля) = Тип("Строка") Тогда
			СписокПолей.Добавить(СтрокаТаблицы.ИмяПоля, СтрокаТаблицы.ИмяПоля);
		Иначе
			СписокПолей.Добавить(СтрокаТаблицы.ИмяПоля, "Вид" + Строка(НомерПоляКИ));
			СписокВидовКИ.Добавить(СтрокаТаблицы.ИмяПоля, "Вид" + Строка(НомерПоляКИ));
			НомерПоляКИ = НомерПоляКИ + 1;
		КонецЕсли;

		
		Если ТипЗнч(СтрокаТаблицы.ИмяПоля) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И СтрокаТаблицы.ИмяПоля.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И (НаименованиеПрограммы = "OutlookExpress" ИЛИ НаименованиеПрограммы = "TheBAT") Тогда
			СписокПолейТекста.Добавить("Улица (" + СокрЛП(СтрокаТаблицы.ИмяПоля.Наименование) + ")");
			СписокПолейТекста.Добавить("Город (" + СокрЛП(СтрокаТаблицы.ИмяПоля.Наименование) + ")");
			СписокПолейТекста.Добавить("Область (" + СокрЛП(СтрокаТаблицы.ИмяПоля.Наименование) + ")");
			СписокПолейТекста.Добавить("Индекс (" + СокрЛП(СтрокаТаблицы.ИмяПоля.Наименование) + ")",);
		Иначе
			Если ТипЗнч(СтрокаТаблицы.Тип) = Тип("Строка") Тогда
				СписокПолейТекста.Добавить(СтрокаТаблицы.СинонимПоля);
			Иначе
				СписокПолейТекста.Добавить(СокрЛП(СтрокаТаблицы.Тип) + " (" + СтрокаТаблицы.СинонимПоля + ")");
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;

	ПоляЗапроса = "";

	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.МаксимальноеЗначение = СписокПолей.Количество();
	Для каждого ЭлементСписка Из СписокПолей Цикл

		мФормаПрогрессора.Значение = СписокПолей.Индекс(ЭлементСписка) + 1;
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка")
			И ТипОбъекта = "ФизическиеЛица"
			И (ЭлементСписка.Значение = "Фамилия"
			ИЛИ ЭлементСписка.Значение = "Имя"
			ИЛИ ЭлементСписка.Значение = "Отчество") Тогда
			
			ПоляЗапроса = ПоляЗапроса + "	ФИОФизЛицСрезПоследних." + ЭлементСписка.Значение + " КАК " + ЭлементСписка.Значение;
			
		ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") И ТипОбъекта = "КонтактныеЛицаКонтрагентов" И (ЭлементСписка.Значение = "Должность") Тогда
			ПоляЗапроса = ПоляЗапроса + "	КонтактныеЛица." + ЭлементСписка.Значение + " КАК " + ЭлементСписка.Значение;
		ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			
			ПоляЗапроса = ПоляЗапроса + "
			|	(ВЫБОР КОГДА
			|		КонтактнаяИнформация.Вид = &" + ЭлементСписка.Представление + "
			|	ТОГДА
			|		КонтактнаяИнформация.Представление
			|	КОНЕЦ) КАК " + ЭлементСписка.Представление;

			Если ЭлементСписка.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И (НаименованиеПрограммы = "OutlookExpress" ИЛИ НаименованиеПрограммы = "TheBAT") Тогда

				ПоляЗапроса = ПоляЗапроса + "," + Символы.ПС;
				
				ПоляЗапроса = ПоляЗапроса + "
				|	(ВЫБОР КОГДА
				|		КонтактнаяИнформация.Вид = &" + ЭлементСписка.Представление + "
				|	ТОГДА
				|		КонтактнаяИнформация.Улица
				|	КОНЕЦ) КАК " + ЭлементСписка.Представление + "Улица,";
				
				ПоляЗапроса = ПоляЗапроса + "
				|	(ВЫБОР КОГДА
				|		КонтактнаяИнформация.Вид = &" + ЭлементСписка.Представление + "
				|	ТОГДА
				|		КонтактнаяИнформация.Город
				|	КОНЕЦ) КАК " + ЭлементСписка.Представление + "Город,";

				ПоляЗапроса = ПоляЗапроса + "
				|	(ВЫБОР КОГДА
				|		КонтактнаяИнформация.Вид = &" + ЭлементСписка.Представление + "
				|	ТОГДА
				|		КонтактнаяИнформация.Область
				|	КОНЕЦ) КАК " + ЭлементСписка.Представление + "Область,";

				ПоляЗапроса = ПоляЗапроса + "
				|	(ВЫБОР КОГДА
				|		КонтактнаяИнформация.Вид = &" + ЭлементСписка.Представление + "
				|	ТОГДА
				|		КонтактнаяИнформация.Индекс
				|	КОНЕЦ) КАК " + ЭлементСписка.Представление + "Индекс";
				
			КонецЕсли; 
			
			Запрос.УстановитьПараметр(ЭлементСписка.Представление, ЭлементСписка.Значение);
		Иначе
			ПоляЗапроса = ПоляЗапроса + "	" + ТипОбъекта + "." + ЭлементСписка.Значение + " КАК " + ЭлементСписка.Значение;
		КонецЕсли; 

		ПоляЗапроса = ПоляЗапроса + "," + Символы.ПС;
	
	КонецЦикла;

	ПоляЗапроса = ПоляЗапроса + "	" + ТипОбъекта + ".Ссылка КАК Объект" + Символы.ПС;

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Символы.ПС + ПоляЗапроса + Символы.ПС + "
	|ИЗ
	|	Справочник." + ОпределитьИмяТаблицыОбъекта() + " КАК " + ТипОбъекта + "
	|";

	Если ТипОбъекта = "ФизическиеЛица" Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
		|	
		|ПО
		|	ФИОФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
		|";
	ИначеЕсли ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛица
		|	
		|ПО
		|	КонтактныеЛица.КонтактноеЛицо = КонтактныеЛицаКонтрагентов.Ссылка
		|";

	КонецЕсли;

	Если СписокВидовКИ.Количество() > 0 Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|
		|	(
		|	ВЫБРАТЬ
		|		КонтактнаяИнформацияВнутр.Объект КАК Объект,
		|		КонтактнаяИнформацияВнутр.Представление КАК Представление,
		|		КонтактнаяИнформацияВнутр.Вид КАК Вид,
		|		((ВЫБОР КОГДА КонтактнаяИнформацияВнутр.Поле6 = &ПустаяСтрока ТОГДА  &ПустаяСтрока ИНАЧЕ (&Улица + КонтактнаяИнформацияВнутр.Поле6) КОНЕЦ)
		|		+ (ВЫБОР КОГДА КонтактнаяИнформацияВнутр.Поле7 = &ПустаяСтрока ТОГДА  &ПустаяСтрока ИНАЧЕ (&Дом + КонтактнаяИнформацияВнутр.Поле7) КОНЕЦ)
		|		+ (ВЫБОР КОГДА КонтактнаяИнформацияВнутр.Поле8 = &ПустаяСтрока ТОГДА  &ПустаяСтрока ИНАЧЕ (&Корпус + КонтактнаяИнформацияВнутр.Поле8) КОНЕЦ)
		|		+ (ВЫБОР КОГДА КонтактнаяИнформацияВнутр.Поле9 = &ПустаяСтрока ТОГДА  &ПустаяСтрока ИНАЧЕ (&Квартира + КонтактнаяИнформацияВнутр.Поле9) КОНЕЦ)) КАК Улица,
		|		КонтактнаяИнформацияВнутр.Поле4 КАК Город,
		|		КонтактнаяИнформацияВнутр.Поле2 КАК Область,
		|		КонтактнаяИнформацияВнутр.Поле1 КАК Индекс
		|		
		|	ИЗ
		|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияВнутр
		|	ГДЕ
		|		КонтактнаяИнформацияВнутр.Вид В(&СписокВидовКИ)) КАК КонтактнаяИнформация
		|		
		|ПО
		|	КонтактнаяИнформация.Объект = " + ТипОбъекта + ".Ссылка
		|";
		
		Запрос.УстановитьПараметр("СписокВидовКИ", СписокВидовКИ);
		Запрос.УстановитьПараметр("Улица"        , ", ул.");
		Запрос.УстановитьПараметр("Дом"          , ", д.");
		Запрос.УстановитьПараметр("Корпус"       , ", корп.");
		Запрос.УстановитьПараметр("Квартира"     , ", кв.");
		Запрос.УстановитьПараметр("ПустаяСтрока" , "");
	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	" + ТипОбъекта + ".Ссылка В ИЕРАРХИИ(&СписокОбъектов)";
	Если Метаданные.Справочники.Найти(ОпределитьИмяТаблицыОбъекта()).Иерархический = Истина Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|	И
	|	" + ТипОбъекта + ".Ссылка.ЭтоГруппа = Ложь
	|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИТОГИ ПО
	|	Объект
	|";

	Запрос.Текст = ТекстЗапроса;

	СписокОбъектов = Новый СписокЗначений;
	Для каждого Объекты Из НастройкаВыгрузкиОбъектов Цикл
		СписокОбъектов.Добавить(Объекты.ОбъектВыгрузки);
	КонецЦикла;

	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();

	ТекстВыгрузки = Новый ТекстовыйДокумент();
	Если НаименованиеПрограммы = "OutlookExpress" Тогда
		СтрокаПолейТекста = ВСтрокуСРазделителями(СписокПолейТекста, ";", Ложь);
	ИначеЕсли НаименованиеПрограммы = "TheBAT" Тогда
		СтрокаПолейТекста = ВСтрокуСРазделителями(СписокПолейТекста, ",", Ложь);
	Иначе
		СтрокаПолейТекста = ВСтрокуСРазделителями(СписокПолейТекста, ",", Истина);
	КонецЕсли;
	ТекстВыгрузки.ВставитьСтроку(1, СтрокаПолейТекста);

	НомерСтрокиТекста = 2;
	ВыборкаОбъектов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Объект", "ВСЕ");
	Пока ВыборкаОбъектов.Следующий() Цикл

		СписокДанныхОбъекта = Новый СписокЗначений;
		
		Для каждого Поле Из СписокПолей Цикл

			Улица   = "";
			Город   = "";
			Область = "";
			Индекс  = "";
			
			КонечнаяВыборка = ВыборкаОбъектов.Выбрать();
			ЗначениеОбъекта = "";
			Пока КонечнаяВыборка.Следующий() Цикл
				Если КонечнаяВыборка[Поле.Представление] <> Null Тогда
					
					ЗначениеОбъекта = СокрЛП(КонечнаяВыборка[Поле.Представление]);

					Если ТипЗнч(Поле.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И Поле.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И (НаименованиеПрограммы = "OutlookExpress" ИЛИ НаименованиеПрограммы = "TheBAT") Тогда
						Улица   = СокрЛП(КонечнаяВыборка[Строка(Поле.Представление) + "Улица"]);
						Город   = СокрЛП(КонечнаяВыборка[Строка(Поле.Представление) + "Город"]);
						Область = СокрЛП(КонечнаяВыборка[Строка(Поле.Представление) + "Область"]);
						Индекс  = СокрЛП(КонечнаяВыборка[Строка(Поле.Представление) + "Индекс"]);
					КонецЕсли; 
					
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			Если ТипЗнч(Поле.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") И Поле.Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И (НаименованиеПрограммы = "OutlookExpress" ИЛИ НаименованиеПрограммы = "TheBAT") Тогда
				Если НаименованиеПрограммы = "TheBAT" Тогда
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Улица  , ",", " "));
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Город  , ",", " "));
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Область, ",", " "));
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Индекс , ",", " "));
				Иначе
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Улица  , ";", " "));
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Город  , ";", " "));
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Область, ";", " "));
					СписокДанныхОбъекта.Добавить(СтрЗаменить(Индекс , ";", " "));
				КонецЕсли; 
			Иначе
				СписокДанныхОбъекта.Добавить(ЗначениеОбъекта);
			КонецЕсли; 
		
		КонецЦикла;

		Если НаименованиеПрограммы = "OutlookExpress" Тогда
			СтрокаОбъектаТекста = ВСтрокуСРазделителями(СписокДанныхОбъекта, ";", Ложь);
		ИначеЕсли НаименованиеПрограммы = "TheBAT" Тогда
			СтрокаОбъектаТекста = ВСтрокуСРазделителями(СписокДанныхОбъекта, ",", Ложь);
		Иначе
			СтрокаОбъектаТекста = ВСтрокуСРазделителями(СписокДанныхОбъекта, ",", Истина);
		КонецЕсли;
		ТекстВыгрузки.ВставитьСтроку(НомерСтрокиТекста, СтрокаОбъектаТекста);
		НомерСтрокиТекста = НомерСтрокиТекста + 1;
	
	КонецЦикла;

	ТекстВыгрузки.Записать(ПутьКФайлу, КодировкаТекста.ANSI);

	Если мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли; 

КонецПроцедуры

// Процедура записывает всю информацию при загрузке в базу данных.
// 
Процедура ЗаписатьЗагружаемуюИнформацию(РодительДляЗагрузки = Неопределено) Экспорт

	НачатьТранзакцию();

	ОтменитьТранзакцию = Ложь;

	Если НаименованиеПрограммы = "MSOutlook" Тогда
		СписокПолейФайла = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ",", Истина);
	Иначе
		СписокПолейФайла = ИзСтрокиСРазделителями(ТекстФайла.ПолучитьСтроку(1), ";", Ложь);
	КонецЕсли;

	мФормаПрогрессора.КомментарийЗначения = "Загрузка данных ...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаДанныхФайла.Количество();
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.Открыть();
	
	Для каждого СтрокаТаблицы Из НастройкаЗагрузкиЗначений Цикл
		
		мФормаПрогрессора.Значение = НастройкаЗагрузкиЗначений.Индекс(СтрокаТаблицы) + 1;
		
		Если НЕ СтрокаТаблицы.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФайла = ТаблицаДанныхФайла.Найти(СтрокаТаблицы.НомерСтрокиФайла,"НомерСтрокиФайла");
		Если СтрокаФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Объект1С = Неопределено ИЛИ СтрокаТаблицы.Объект1С.Пустая() Тогда
			
			Объект1С = Справочники[ОпределитьИмяТаблицыОбъекта()].СоздатьЭлемент();
			
			Если ЗначениеЗаполнено(РодительДляЗагрузки) Тогда
				Объект1С.Родитель = РодительДляЗагрузки;
			КонецЕсли; 
			
			Если ТипОбъекта = "ЛичныеКонтакты" Тогда
				Объект1С.ПользовательДляОграниченияПравДоступа =глЗначениеПеременной("глТекущийПользователь");
			ИначеЕсли ТипОбъекта = "Контрагенты" Тогда
				Объект1С.ЮрФизЛицо = СтрокаТаблицы.ЮрФизЛицо;
			КонецЕсли;
			
			Объект1С.Наименование = СтрокаТаблицы.ПредставлениеОбъекта1С;
			Объект1С.Записать();
			
		Иначе
			Объект1С = СтрокаТаблицы.Объект1С.ПолучитьОбъект();
		КонецЕсли;
		
		Если ТипОбъекта = "КонтактныеЛицаКонтрагентов" Тогда
			
			ЗаписьКЛ = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
			ЗаписьКЛ.Владелец = СтрокаТаблицы.Владелец;
			
		КонецЕсли;
		
		ЗаписиРегистраФИО = Неопределено;
		
		Для каждого СтрокаПолей Из НастройкаПолей Цикл
			
			Если НЕ СтрокаПолей.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПолей.ТипРеквизита1С = "Строка" Тогда
				
				Если СтрЧислоВхождений(СтрокаПолей.ИндПоля, ";") = 0 Тогда
					
					ЗначениеИзФайла = СокрЛП(СтрокаФайла[СтрокаПолей.ИндПоля]);
					ОписаниеОшибки = "";
					
					Если ТипОбъекта = "ФизическиеЛица"
						И (СтрокаПолей.НазначениеРеквизита1С = "Фамилия"
						ИЛИ СтрокаПолей.НазначениеРеквизита1С = "Имя"
						ИЛИ СтрокаПолей.НазначениеРеквизита1С = "Отчество") Тогда
						
						Если ЗаписиРегистраФИО = Неопределено Тогда
							
							ЗаписиРегистраФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
							ЗаписиРегистраФИО.Отбор.ФизЛицо.Значение      = Объект1С.Ссылка;
							ЗаписиРегистраФИО.Отбор.ФизЛицо.Использование = Истина;
							ЗаписиРегистраФИО.Отбор.Период.Значение       = ТекущаяДата();
							ЗаписиРегистраФИО.Отбор.Период.Использование  = Истина;
							ЗаписьРегистра = ЗаписиРегистраФИО.Добавить();
							
						КонецЕсли;
						
						ЗаписьРегистра.Период  = ТекущаяДата();
						ЗаписьРегистра.ФизЛицо = Объект1С.Ссылка;
						ЗаписьРегистра[СтрокаПолей.НазначениеРеквизита1С] = СокрЛП(ЗначениеИзФайла);
						
					ИначеЕсли ТипОбъекта = "КонтактныеЛицаКонтрагентов"
						И СтрокаПолей.НазначениеРеквизита1С = "Должность" Тогда
						
						ПреобразованноеЗначениеФайла = ПреобразоватьЗначениеФайла(ЗначениеИзФайла, ЗаписьКЛ.Метаданные().Реквизиты.Должность.Тип, ОписаниеОшибки);
						Если ПреобразованноеЗначениеФайла = Неопределено Тогда
							Сообщить("Установлено несоответствие типов полей. 1С - " + СокрЛП(СтрокаПолей.НазначениеРеквизита1С) + ", файл - " + СокрЛП(СтрокаПолей.ИмяРеквизита));
							Продолжить;
						КонецЕсли;
						
						ЗаписьКЛ.Должность = ПреобразованноеЗначениеФайла;
						
					Иначе
						
						ОписаниеТиповРеквизита = Объект1С.Метаданные().Реквизиты[ПолучитьИмяРеквизита(СтрокаПолей.НазначениеРеквизита1С)].Тип;
						
						ПреобразованноеЗначениеФайла = ПреобразоватьЗначениеФайла(ЗначениеИзФайла, ОписаниеТиповРеквизита, ОписаниеОшибки);
						Если ПреобразованноеЗначениеФайла = Неопределено Тогда
							Сообщить("Установлено несоответствие типов полей. 1С - " + СокрЛП(СтрокаПолей.НазначениеРеквизита1С) + ", файл - " + СокрЛП(СтрокаПолей.ИмяРеквизита));
							Продолжить;
						КонецЕсли;
						
						ИмяРеквизита = ПолучитьИмяРеквизита(СтрокаПолей.НазначениеРеквизита1С);
						Если НЕ ПустаяСтрока(Объект1С[ИмяРеквизита]) Тогда
							Объект1С[ИмяРеквизита] = Объект1С[ИмяРеквизита] + ", ";
						КонецЕсли; 
						
						Если ТипЗнч(Объект1С[ИмяРеквизита]) = Тип("Строка") Тогда
							Объект1С[ИмяРеквизита] = Объект1С[ИмяРеквизита] + ПреобразованноеЗначениеФайла;
						Иначе
							Объект1С[ИмяРеквизита] = ПреобразованноеЗначениеФайла;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					КонечнаяСтрокаФайла = "";
					
					СписокИндПолей = ИзСтрокиСРазделителями(СтрокаПолей.ИндПоля, ";", Ложь);
					Для каждого ИндПоляСписка Из СписокИндПолей Цикл
						КонечнаяСтрокаФайла = КонечнаяСтрокаФайла + " " + СокрЛП(СтрокаФайла[ИндПоляСписка.Значение]);
					КонецЦикла; 

					ОписаниеТиповРеквизита = Объект1С.Метаданные().Реквизиты[ПолучитьИмяРеквизита(СтрокаПолей.НазначениеРеквизита1С)].Тип;
					ОписаниеОшибки = "";
					ПреобразованноеЗначениеФайла = ПреобразоватьЗначениеФайла(КонечнаяСтрокаФайла, ОписаниеТиповРеквизита, ОписаниеОшибки);
					Если ПреобразованноеЗначениеФайла = Неопределено Тогда
						Сообщить("Установлено несоответствие типов полей. 1С - " + СокрЛП(СтрокаПолей.НазначениеРеквизита1С) + ", файл - " + СокрЛП(СтрокаПолей.ИмяРеквизита));
						Продолжить;
					КонецЕсли;
					
					ИмяРеквизита = ПолучитьИмяРеквизита(СтрокаПолей.НазначениеРеквизита1С);
					Если НЕ ПустаяСтрока(Объект1С[ИмяРеквизита]) Тогда
						Объект1С[ИмяРеквизита] = Объект1С[ИмяРеквизита] + ", ";
					КонецЕсли; 
					
					Если ТипЗнч(Объект1С[ИмяРеквизита]) = Тип("Строка") Тогда
						Объект1С[ИмяРеквизита] = Объект1С[ИмяРеквизита] + ПреобразованноеЗначениеФайла;
					Иначе
						Объект1С[ИмяРеквизита] = ПреобразованноеЗначениеФайла;
					КонецЕсли; 
					
				КонецЕсли; 
				
			ИначеЕсли СтрокаПолей.ТипРеквизита1С = "ВидКИ" Тогда
			
				Если СтрЧислоВхождений(СтрокаПолей.ИндПоля, ";") = 0 Тогда

					Если ПустаяСтрока(СокрЛП(СтрокаФайла[СтрокаПолей.ИндПоля])) Тогда
						Продолжить;
					КонецЕсли; 
				
					ВидКонтактнойИнформации = СтрокаПолей.НазначениеРеквизита1С;
					ТипКонтактнойИнформации = ВидКонтактнойИнформации.Тип;

					ЗаписьРегистраКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();

					ЗаписьРегистраКИ.Объект        = Объект1С.Ссылка;
					ЗаписьРегистраКИ.Тип           = ТипКонтактнойИнформации;
					ЗаписьРегистраКИ.Вид           = ВидКонтактнойИнформации;
					ЗаписьРегистраКИ.Комментарий   = "Перенесено из " + СокрЛП(НаименованиеПрограммы);
					ЗаписьРегистраКИ.Представление = СтрокаФайла[СтрокаПолей.ИндПоля];

					Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					
						СписокПолейТелефона = УправлениеКонтактнойИнформацией.РазложитьТелефонПоПолям(СтрокаФайла[СтрокаПолей.ИндПоля]);

						ЗаписьРегистраКИ.Поле3 = СписокПолейТелефона.Свойство("СамТелефон");
						ЗаписьРегистраКИ.Поле1 = СписокПолейТелефона.Свойство("КодСтраны");
						ЗаписьРегистраКИ.Поле2 = СписокПолейТелефона.Свойство("КодГорода");
						
					КонецЕсли; 

					Попытка
						ЗаписьРегистраКИ.Записать(Истина);
						Сообщить("Записана контактная информация (" + (ЗаписьРегистраКИ.Вид) + ") " + (Объект1С.Наименование));
					Исключение
						Сообщить("" + ОписаниеОшибки());
						ОтменитьТранзакцию = Истина;
						Прервать;
					КонецПопытки;
					
				Иначе

					СписокЗначенийФайла = Новый СписокЗначений;
					СписокИндПолей = ИзСтрокиСРазделителями(СтрокаПолей.ИндПоля, ";", Ложь, Истина);
					СписокКонечныхЗначений = Новый СписокЗначений;
					
					Для каждого ИндПоляСписка Из СписокИндПолей Цикл
						СписокЗначенийФайла.Добавить(ТаблицаДанныхФайла.Колонки[ИндПоляСписка.Значение].Имя, СокрЛП(СтрокаФайла[ИндПоляСписка.Значение]));
					КонецЦикла;

					Если НаименованиеПрограммы = "OutlookExpress" Тогда

						Если СтрокаПолей.ИмяРеквизита = "Домашний адрес" Тогда

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Почтовый индекс"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Home Postal Code"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Индекс", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Дом. адрес, страна"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Home Country/Region"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Страна", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Область"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Home State"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Область", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Город"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Home City"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Город", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Home Street"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Улица", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

						ИначеЕсли СтрокаПолей.ИмяРеквизита = "Рабочий адрес" Тогда

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Служ. адрес, почтовый код"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Business Postal Code"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Индекс", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Служ. адрес, страна"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Business Country/Region"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Страна", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Служ. адрес, область"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Business State"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Область", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Служ.адрес, город"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Business City"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Город", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Служ.адрес, улица"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Business Street"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Улица", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

						КонецЕсли; 
					
					ИначеЕсли НаименованиеПрограммы = "TheBAT" Тогда

						Если СтрокаПолей.ИмяРеквизита = "Домашний адрес" Тогда

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Индекс (дом.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "ZIP"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Индекс", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Страна (дом.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Country"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Страна", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Штат (дом.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "State"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Область", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Город (дом.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "City"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Город", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Адрес (дом.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Address"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Улица", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

						ИначеЕсли СтрокаПолей.ИмяРеквизита = "Рабочий адрес" Тогда

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Индекс (раб.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "B/ZIP"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Индекс", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Страна (раб.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "B/Country"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Страна", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Штат (раб.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "B/State"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Область", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Город (раб.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "B/City"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Город", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Адрес (раб.)"));
							Если НайденныйЭлемент = Неопределено Тогда
								НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "B/Address"));
							КонецЕсли; 
							СписокКонечныхЗначений.Добавить("Улица", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

						КонецЕсли;
					
					Иначе

						Если СтрокаПолей.ИмяРеквизита = "Домашний адрес" Тогда

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Почтовый код (дом.)"));
							СписокКонечныхЗначений.Добавить("Индекс", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Страна (дом. адрес)"));
							СписокКонечныхЗначений.Добавить("Страна", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Область (дом. адрес)"));
							СписокКонечныхЗначений.Добавить("Область", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Город (дом. адрес)"));
							СписокКонечныхЗначений.Добавить("Город", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица (дом. адрес)"));
							ЭлементУлицы = СписокКонечныхЗначений.Добавить("Улица", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица 2 (дом. адрес)"));
							ЭлементУлицы.Представление = ЭлементУлицы.Представление + ?(НайденныйЭлемент <> Неопределено, (" " + СокрЛП(НайденныйЭлемент.Представление)), "");

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица 3 (дом. адрес)"));
							ЭлементУлицы.Представление = ЭлементУлицы.Представление + ?(НайденныйЭлемент <> Неопределено, (" " + СокрЛП(НайденныйЭлемент.Представление)), "");
							
						ИначеЕсли СтрокаПолей.ИмяРеквизита = "Рабочий адрес" Тогда

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Индекс (раб. адрес)"));
							СписокКонечныхЗначений.Добавить("Индекс", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Страна (раб. адрес)"));
							СписокКонечныхЗначений.Добавить("Страна", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Область (раб. адрес)"));
							СписокКонечныхЗначений.Добавить("Область", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Город (раб. адрес)"));
							СписокКонечныхЗначений.Добавить("Город", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица (раб. адрес)"));
							ЭлементУлицы = СписокКонечныхЗначений.Добавить("Улица", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица 2 (раб. адрес)"));
							ЭлементУлицы.Представление = ЭлементУлицы.Представление + ?(НайденныйЭлемент <> Неопределено, (" " + СокрЛП(НайденныйЭлемент.Представление)), "");

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица 3 (раб. адрес)"));
							ЭлементУлицы.Представление = ЭлементУлицы.Представление + ?(НайденныйЭлемент <> Неопределено, (" " + СокрЛП(НайденныйЭлемент.Представление)), "");
							
						ИначеЕсли СтрокаПолей.ИмяРеквизита = "Другой адрес" Тогда

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Индекс  (другой адрес)"));
							СписокКонечныхЗначений.Добавить("Индекс", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Страна  (другой адрес)"));
							СписокКонечныхЗначений.Добавить("Страна", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Область  (другой адрес)"));
							СписокКонечныхЗначений.Добавить("Область", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Город  (другой адрес)"));
							СписокКонечныхЗначений.Добавить("Город", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));
							
							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица (другой адрес)"));
							ЭлементУлицы = СписокКонечныхЗначений.Добавить("Улица", ?(НайденныйЭлемент <> Неопределено, СокрЛП(НайденныйЭлемент.Представление), ""));

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица  2 (другой адрес)"));
							ЭлементУлицы.Представление = ЭлементУлицы.Представление + ?(НайденныйЭлемент <> Неопределено, (" " + СокрЛП(НайденныйЭлемент.Представление)), "");

							НайденныйЭлемент = СписокЗначенийФайла.НайтиПоЗначению(ПолучитьИндПоляПоНаименованию(СписокПолейФайла, "Улица  3 (другой адрес)"));
							ЭлементУлицы.Представление = ЭлементУлицы.Представление + ?(НайденныйЭлемент <> Неопределено, (" " + СокрЛП(НайденныйЭлемент.Представление)), "");
							
						КонецЕсли; 
					
					КонецЕсли; 

					Если СписокКонечныхЗначений.Количество() > 0 Тогда
					
						ЕстьНеПустые = Ложь;
						Для каждого ЭлементСпискаКонечныхЗначений Из СписокКонечныхЗначений Цикл
							Если Не ПустаяСтрока(ЭлементСпискаКонечныхЗначений.Представление) Тогда
								ЕстьНеПустые = Истина;
								Прервать;
							КонецЕсли; 
						КонецЦикла;

						Если ЕстьНеПустые Тогда
						
							ВидКонтактнойИнформации = СтрокаПолей.НазначениеРеквизита1С;
							ТипКонтактнойИнформации = ВидКонтактнойИнформации.Тип;

							ЗаписьРегистраКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();

							ЗаписьРегистраКИ.Объект      = Объект1С.Ссылка;
							ЗаписьРегистраКИ.Тип         = ТипКонтактнойИнформации;
							ЗаписьРегистраКИ.Вид         = ВидКонтактнойИнформации;
							ЗаписьРегистраКИ.Комментарий = "Перенесено из " + СокрЛП(НаименованиеПрограммы);
							
							Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
								ЗаписьРегистраКИ.Поле1 = СокрЛП(СписокКонечныхЗначений.НайтиПоЗначению("Индекс").Представление);
								ЗаписьРегистраКИ.Поле2 = СокрЛП(СписокКонечныхЗначений.НайтиПоЗначению("Область").Представление);
								ЗаписьРегистраКИ.Поле4 = СокрЛП(СписокКонечныхЗначений.НайтиПоЗначению("Город").Представление);
								ЗаписьРегистраКИ.Поле6 = СокрЛП(СписокКонечныхЗначений.НайтиПоЗначению("Улица").Представление);
							КонецЕсли;
							
							ЗаписьРегистраКИ.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЗаписьРегистраКИ);
							ЗаписьРегистраКИ.Комментарий = "Перенесено из " + СокрЛП(НаименованиеПрограммы);
							
							Попытка
								ЗаписьРегистраКИ.Записать(Истина);
								Сообщить("Записана контактная информация (" + (ЗаписьРегистраКИ.Вид) + ") " + (Объект1С.Наименование));
							Исключение
								Сообщить("" + ОписаниеОшибки());
								ОтменитьТранзакцию = Истина;
								Прервать;
							КонецПопытки;
					
						КонецЕсли; 
						
					КонецЕсли; 

				КонецЕсли; 
				
			КонецЕсли; 
		
		КонецЦикла; 

		Попытка

			Если ЗаписиРегистраФИО <> Неопределено Тогда
				ЗаписиРегистраФИО.Записать(Истина);
			КонецЕсли; 

			Объект1С.Записать();
			
			Если ЗаписьКЛ <> Неопределено Тогда
				
				ЗаписьКЛ.КонтактноеЛицо = Объект1С.Ссылка;
				ЗаписьКЛ.Наименование   = Строка(Объект1С.Ссылка);
				ЗаписьКЛ.Записать();
				
			КонецЕсли;
			
			Сообщить("Записан элемент справочника """ + ТипОбъекта + """ " + (Объект1С.Наименование));
			
		Исключение
			
			Сообщить("" + ОписаниеОшибки());
			ОтменитьТранзакцию = Истина;
			Прервать;
			
		КонецПопытки; 
		
	КонецЦикла;

	Если ОтменитьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

КонецПроцедуры

# КонецЕсли

мСписокРеквизитовОбъекта = Новый СписокЗначений;

мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
