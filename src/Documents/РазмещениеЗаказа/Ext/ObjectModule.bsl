Перем мУдалятьДвижения;
Перем мТипЗаказПоставщику Экспорт; 
Перем мТипВнутреннийЗаказ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой документа,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма документа
//
Функция ПечатьРазмещениеЗаказа()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Заказ.Организация КАК Организация,
	|	Заказ,
	|	Представление(Заказ) КАК ЗаказПредставление,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ЗаказПоставщику Тогда
	|		Заказ.Контрагент
	|	ИНАЧЕ NULL КОНЕЦ КАК Контрагент,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ЗаказПоставщику Тогда
	|		Заказ.ДоговорКонтрагента
	|	ИНАЧЕ NULL КОНЕЦ КАК ДоговорКонтрагента,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ВнутреннийЗаказ Тогда
	|		Заказ.ВидЗаказа
	|	ИНАЧЕ NULL КОНЕЦ КАК ВидЗаказа,
	|	ВЫБОР КОГДА Заказ ССЫЛКА Документ.ВнутреннийЗаказ Тогда
	|		Заказ.Заказчик
	|	ИНАЧЕ NULL КОНЕЦ КАК Заказчик,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		Количество,
	|		ИсходноеРазмещение,
	|		НовоеРазмещение,
	|		ЕдиницаИзмерения.Представление      КАК ЕдиницаИзмерения,
	|		ХарактеристикаНоменклатуры          КАК Характеристика,
	|		null КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное     КАК Товар,
	|		Количество,
	|		ИсходноеРазмещение,
	|		НовоеРазмещение,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения)
	|ИЗ
	|	Документ.РазмещениеЗаказа 
	|
	|ГДЕ
	|	Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РазмещениеЗаказа_Размещение";

	Макет = ПолучитьМакет("РазмещениеЗаказа");

	// Выводим шапку 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Размещение заказа");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказ");
	ОбластьМакета.Параметры.ПредставлениеЗаказа = Шапка.ЗаказПредставление;
	ОбластьМакета.Параметры.Заказ = Шапка.Заказ;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ТипЗнч(Заказ)=мТипЗаказПоставщику Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПоляЗаказПоставщику");
        ОбластьМакета.Параметры.ПредставлениеКонтрагент = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");
        ОбластьМакета.Параметры.Контрагент = Шапка.Контрагент;
		ОбластьМакета.Параметры.ПредставлениеДоговор = СокрЛП(Шапка.ДоговорКонтрагента);
		ОбластьМакета.Параметры.ДоговорКонтрагента = Шапка.ДоговорКонтрагента;
        ТабДокумент.Вывести(ОбластьМакета);
	ИначеЕсли  ТипЗнч(Заказ)=мТипВнутреннийЗаказ Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПоляВнутреннийЗаказ");
        ОбластьМакета.Параметры.ПредставлениеВидЗаказа = Шапка.ВидЗаказа;
		ОбластьМакета.Параметры.ПредставлениеЗаказчик = СокрЛП(Шапка.Заказчик);
		ОбластьМакета.Параметры.Заказчик = Шапка.Заказчик;
        ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	Ном           = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.");
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.");
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТара.Товар + " (возвратная тара)";

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + (ВыборкаСтрокТовары.Количество()+ВыборкаСтрокТара.Количество());
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРасходныйОрдерНаТовары()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	Если ИмяМакета = "РазмещениеЗаказа" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРазмещениеЗаказа();

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("РазмещениеЗаказа", "Размещение заказа");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)
	Если ТабличнаяЧасть = Товары Тогда
		ЭтоТовары = Истина;
	Иначе
		ЭтоТовары = Ложь;
	КонецЕсли;
	ТипЗаказа = ТипЗнч(Заказ);
	Если ТипЗаказа = мТипВнутреннийЗаказ Тогда
		ТекстОстаткиПоЗаказу = "РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаОстатков, ВнутреннийЗаказ = &Заказ И СтатусПартии = &СтатусПартии)";
	Иначе
		ТекстОстаткиПоЗаказу = "РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОстатков, ЗаказПоставщику = &Заказ И СтатусПартии = &СтатусПартии)";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ЭтоТовары Тогда
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Иначе
		Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Тара);
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК Количество,
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры,
	|	Естьnull(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток,0) КАК ОстатокРазмещение
	|ИЗ "+ТекстОстаткиПоЗаказу+" КАК ЗаказыПоставщикамОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|   РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, ЗаказПоставщику = &Заказ И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
	|ПО ЗаказыПоставщикамОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура
	|   И ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
	|ГДЕ ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	|    И НЕ ЗаказыПоставщикамОстатки.Номенклатура.Услуга
	|ИТОГИ Максимум(ЗаказыПоставщикамОстатки.КоличествоОстаток) ПО ЗаказыПоставщикамОстатки.Номенклатура, ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры";
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() цикл
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() цикл
			КоличествоОстатокПоЗаказу = ВыборкаХарактеристика.Количество;
			Выборка = ВыборкаХарактеристика.Выбрать();
			Пока Выборка.Следующий() Цикл
	            
				ЕдиницаИзмеренияКоэффициент = ?(Выборка.ЕдиницаИзмеренияКоэффициент <> NULL, Выборка.ЕдиницаИзмеренияКоэффициент, 0);

				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
				Если Выборка.ОстатокРазмещение>0 Тогда  
					НоваяСтрока.Количество         = Мин(Выборка.ОстатокРазмещение,КоличествоОстатокПоЗаказу);
					НоваяСтрока.ИсходноеРазмещение = Выборка.ЗаказПокупателя;
				Иначе
					НоваяСтрока.Количество = КоличествоОстатокПоЗаказу;
				КонецЕсли;
				
				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                = ЕдиницаИзмеренияКоэффициент;
					НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				КонецЕсли;
	            КоличествоОстатокПоЗаказу = КоличествоОстатокПоЗаказу - НоваяСтрока.Количество;
			КонецЦикла;
			Если  КоличествоОстатокПоЗаказу>0 Тогда
				НоваяСтрокаБезРазмещения = ТабличнаяЧасть.Добавить();
	            ЗаполнитьЗначенияСвойств(НоваяСтрокаБезРазмещения, НоваяСтрока);
				НоваяСтрокаБезРазмещения.Количество = КоличествоОстатокПоЗаказу;
				НоваяСтрокаБезРазмещения.ИсходноеРазмещение = "";
				НоваяСтрокаБезРазмещения.НовоеРазмещение = "";
			КонецЕсли;
		КонецЦикла;	
    КонецЦикла;
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет табличную часть "Товары" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТоварыПоОстаткам() Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
	
КонецПроцедуры // ЗаполнитьТоварыПоОстаткам()

// Заполняет табличную часть "ВозвратнаяТара" по остаткам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВозвратнуюТаруПоОстаткам() Экспорт

	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОстаткам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Заказ");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок, ИмяТЧ="Товары")

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТЧ, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, ИмяТЧ, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам, ИмяРазмещение)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если не ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеРазмещение) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.ИсходноеРазмещение.Имя = ИмяРазмещение;
	ТаблицаПоТоварамРазмещение.Колонки.Количество.Имя = "МинусКоличество";
	ТаблицаПоТоварамРазмещение.Колонки.Добавить("Количество");
	
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварамРазмещение Цикл
		СтрокаТаблицы.Количество = - СтрокаТаблицы.МинусКоличество;
	КонецЦикла;
		
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуСНовымРазмещениемЗаказов(ТаблицаПоТоварам, ИмяРазмещение)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если не ЗначениеЗаполнено(СтрокаТаблицы.НовоеРазмещение) Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		 Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
		
	ТаблицаПоТоварамРазмещение.Колонки.НовоеРазмещение.Имя = ИмяРазмещение;
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуСНовымРазмещениемЗаказов()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ТаблицаПоТоварамСнятиеРазмещения = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам,"ЗаказПокупателя");
	ТаблицаПоТареСнятиеРазмещения    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре, "ЗаказПокупателя");

	
	ТаблицаПоТоварамРазмещение = СоздатьТаблицуСНовымРазмещениемЗаказов(ТаблицаПоТоварам, "ЗаказПокупателя");
	ТаблицаПоТареРазмещение    = СоздатьТаблицуСНовымРазмещениемЗаказов(ТаблицаПоТаре, "ЗаказПокупателя");
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
        НаборДвижений = Движения.РазмещениеЗаказовПокупателей;

		Если ТаблицаПоТоварамСнятиеРазмещения.Количество() > 0  
			ИЛИ ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
        Если ТаблицаПоТареСнятиеРазмещения.Количество() > 0 
			ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ТаблицаПоТоварамСнятиеРазмещения.Количество() > 0 ИЛИ ТаблицаПоТареСнятиеРазмещения.Количество() > 0   Тогда
		
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТоварыРазмещение", ТаблицаПоТоварамСнятиеРазмещения);
			СтруктТаблицДокумента.Вставить("ТараРазмещение",   ТаблицаПоТареСнятиеРазмещения);

					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", Заказ, "ТоварыРазмещение");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", Заказ, "ТараРазмещение");

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТоварыРазмещение");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТараРазмещение");
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
					
		КонецЕсли;
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТоварыРазмещение", ТаблицаПоТоварамРазмещение);
			СтруктТаблицДокумента.Вставить("ТараРазмещение",   ТаблицаПоТареРазмещение);

					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", Заказ, "ТоварыРазмещение");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", Заказ, "ТараРазмещение");
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТоварыРазмещение");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТараРазмещение");
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
    Заказ = Основание;

	Если ТипЗнч(Основание) = мТипЗаказПоставщику Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда

			// Заполним табличные части неотгруженными товаров по заказу покупателя.
			ЗаполнитьТоварыПоОстаткам();
			ЗаполнитьВозвратнуюТаруПоОстаткам();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Основание) = мТипВнутреннийЗаказ Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда
			// Заполним табличные части неотгруженными товаров по внутреннему заказу.
			ЗаполнитьТоварыПоОстаткам();
			Если Заказ.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
				ЗаполнитьВозвратнуюТаруПоОстаткам();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Заказ);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ИсходноеРазмещение"        , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"           , "НовоеРазмещение");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	
	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ИсходноеРазмещение"        , "ИсходноеРазмещение");
	СтруктураПолей.Вставить("НовоеРазмещение"           , "НовоеРазмещение");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	
	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
											
	// Проверить заполнение ТЧ "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоТаре,
							Отказ, Заголовок);
	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

мТипЗаказПоставщику = Тип("ДокументСсылка.ЗаказПоставщику");
мТипВнутреннийЗаказ = Тип("ДокументСсылка.ВнутреннийЗаказ");

