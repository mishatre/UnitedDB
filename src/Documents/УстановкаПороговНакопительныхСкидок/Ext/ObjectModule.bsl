Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения реквизитов документа.
//
// Параметры: 
//  ТаблицаДиапазонов        - таблица значений, содержащая данные для проведения и проверки ТЧ Шкала диаппазонов
//  СтруктураШапкиДокумента  - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                    - флаг отказа в проведении.
//  Заголовок                - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеРеквизитовДокумента(ТаблицаДиапазонов, СтруктураШапкиДокумента, Отказ, Заголовок)

	Перем ПредыдущаяСтрокаТЗ;

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Шкала порогов.
	Если ТаблицаДиапазонов.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена шкала порогов.", Отказ, Заголовок);
	КонецЕсли;

	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ЗначениеПорога");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ШкалаДиапазонов", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ТаблицаДиапазонов.Сортировать("НижняяГраница");

	КоличествоСтрок = ТаблицаДиапазонов.Количество() - 1;
	Для Тмп = 0 По КоличествоСтрок Цикл
		ТекущаяСтрокаТЗ = ТаблицаДиапазонов.Получить(Тмп);

		СтрокаНачалаСообщенияОбОшибке = "В строке номер " + СокрЛП(ТекущаяСтрокаТЗ.НомерСтроки);

		Если Тмп > 0 Тогда
			Если ТекущаяСтрокаТЗ.НижняяГраница = ПредыдущаяСтрокаТЗ.НижняяГраница Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " продублирована верхняя граница.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;

		ПредыдущаяСтрокаТЗ = ТекущаяСтрокаТЗ;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеРеквизитовДокумента()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДиапазонам, Отказ, Заголовок)

	НаборДвижений = Движения.ПорогиНакопительныхСкидок;
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДиапазонам, ТаблицаДвижений);

	НаборДвижений.мПериод = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НижняяГраница", "НижняяГраница");
	СтруктураПолей.Вставить("ЗначениеПорога", "ЗначениеПорога");

	РезультатЗапросаПоДиапазонам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ШкалаДиапазонов", СтруктураПолей);
	ТаблицаПоДиапазонам = РезультатЗапросаПоДиапазонам.Выгрузить();

	ПроверитьЗаполнениеРеквизитовДокумента(ТаблицаПоДиапазонам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДиапазонам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

