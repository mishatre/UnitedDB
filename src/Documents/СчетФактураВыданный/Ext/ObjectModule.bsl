Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мОбновлятьРеквизитыПриЗаписи Экспорт;

Перем мДокументЗаполнен Экспорт;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД Экспорт;

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Контрагент");
	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("ТоварКод");
	Товары.Колонки.Добавить("ТоварАртикул");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");
	Товары.Колонки.Добавить("НомерСтроки");
	Товары.Колонки.Добавить("Характеристика");

	Возврат Товары;

КонецФункции

// Процедура для СФ определяет его сумму, валюту и контрагента
// на основе анализа данных документов оснований
//
Процедура ОпределениеПараметровСчетаФактуры(ЗаполнятьРеквизитыСчетаФактуры = Ложь) Экспорт
	
	Если ДокументыОснования.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		// Основание не выбрано, параметры не определяем
		СуммаДокумента = 0;
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаОснования Из ДокументыОснования Цикл
		Если ТипЗнч(СтрокаОснования.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	
	ПараметрыСФ = Неопределено;
	
	УчетНДС.ПолучитьПараметрыСчетаФактуры(ЭтотОбъект, мВалютаРегламентированногоУчета, ПараметрыСФ);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И ПараметрыСФ.РеквизитыОснований.Количество() <> 0 Тогда
		
		Для Каждого Основание Из ДокументыОснования Цикл
			
			СтрокаСРеквизитами = ПараметрыСФ.РеквизитыОснований.Найти(Основание.ДокументОснование, "ДокументОснование");
			Если СтрокаСРеквизитами <> Неопределено Тогда
				Если Основание.СуммаУвеличение <> СтрокаСРеквизитами.СуммаУвеличение Тогда
					Основание.СуммаУвеличение = СтрокаСРеквизитами.СуммаУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаУменьшение <> СтрокаСРеквизитами.СуммаУменьшение Тогда
					Основание.СуммаУменьшение = СтрокаСРеквизитами.СуммаУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУвеличение <> СтрокаСРеквизитами.СуммаНДСУвеличение Тогда
					Основание.СуммаНДСУвеличение = СтрокаСРеквизитами.СуммаНДСУвеличение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если Основание.СуммаНДСУменьшение <> СтрокаСРеквизитами.СуммаНДСУменьшение Тогда
					Основание.СуммаНДСУменьшение = СтрокаСРеквизитами.СуммаНДСУменьшение;
					РеквизитыОбновлены = Истина;
				КонецЕсли;
				Если ЗаполнятьРеквизитыСчетаФактуры Тогда
					Если Основание.НомерИсходногоДокумента <> СтрокаСРеквизитами.НомерИсходногоДокумента Тогда
						Основание.НомерИсходногоДокумента = СтрокаСРеквизитами.НомерИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсходногоДокумента Тогда
						Основание.ДатаИсходногоДокумента = СтрокаСРеквизитами.ДатаИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.УчитыватьИсправлениеИсходногоДокумента <> СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента Тогда
						Основание.УчитыватьИсправлениеИсходногоДокумента = СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.НомерИсправленияИсходногоДокумента <> СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента Тогда
						Основание.НомерИсправленияИсходногоДокумента = СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
					Если Основание.ДатаИсправленияИсходногоДокумента <> СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента Тогда
						Основание.ДатаИсправленияИсходногоДокумента = СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента;
						РеквизитыОбновлены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыСФ.РеквизитыОснований.Количество() > 1 Тогда
			Если Не СводныйКорректировочный Тогда
				СводныйКорректировочный = Истина;
			КонецЕсли;
		Иначе
			Если СводныйКорректировочный Тогда
				СводныйКорректировочный = Ложь;
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если СводныйКорректировочный Тогда
			СводныйКорректировочный = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	РеквизитыОбновлены  = Ложь;
	
	Если не ПараметрыСФ.Организация = Неопределено 
		и не ПараметрыСФ.Организация = Организация 
		Тогда
		Номер = "";
		Организация		  = ПараметрыСФ.Организация;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не ПараметрыСФ.Контрагент = Неопределено 
		и не ПараметрыСФ.Контрагент = Контрагент 
		Тогда
		Контрагент		  = ПараметрыСФ.Контрагент;
		// при изменении контрагента нужно изменить значение КППКонтрагента, но не в случае исправления - КППКонтрагента берется из исправляемого счета-фактуры
		Если НЕ ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			КППКонтрагента = "";
		КонецЕсли;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не ПараметрыСФ.Договор = Неопределено 
		и не ПараметрыСФ.Договор = ДоговорКонтрагента 
		Тогда
		ДоговорКонтрагента		  = ПараметрыСФ.Договор;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не СуммаДокумента = ПараметрыСФ.СуммаДокумента Тогда
		СуммаДокумента    = ПараметрыСФ.СуммаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли; 			
	Если не ПараметрыСФ.ВалютаДокумента = Неопределено 
		и не ВалютаДокумента = ПараметрыСФ.ВалютаДокумента 
		Тогда
		ВалютаДокумента   = ПараметрыСФ.ВалютаДокумента;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Если СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение Тогда
			СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение Тогда
			СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение Тогда
			СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
		Если СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение Тогда
			СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если Дата >= '20150101'
		И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если СуммаДокументаКомиссия <> ПараметрыСФ.СуммаДокументаКомиссия Тогда
			СуммаДокументаКомиссия = ПараметрыСФ.СуммаДокументаКомиссия;
		КонецЕсли;
		Если СуммаНДСДокументаКомиссия <> ПараметрыСФ.СуммаНДСДокументаКомиссия Тогда
			СуммаНДСДокументаКомиссия = ПараметрыСФ.СуммаНДСДокументаКомиссия;
		КонецЕсли;
	КонецЕсли;

	Если ЭтоНовый() И ВерсияПостановления = 2 Тогда
		Если НЕ ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда		
			УстановитьКодВидаОперации();
		КонецЕсли;	
	КонецЕсли;
	
	Если ВерсияПостановления = 2 Тогда
		
		Если СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента Тогда
			СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
			РеквизитыОбновлены  = Истина;
		КонецЕсли; 
		
		Если СчетФактураБезНДС <> ПараметрыСФ.СчетФактураБезНДС Тогда
			СчетФактураБезНДС = ПараметрыСФ.СчетФактураБезНДС;
			РеквизитыОбновлены  = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		РезультатПоискаИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(
			ДокументыОснования[0].ДокументОснование.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
		Если РезультатПоискаИсправляемыйСчетФактура = Неопределено Тогда
			РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатПоискаИсправляемыйСчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	Если ИсправляемыйСчетФактура <> РезультатПоискаИсправляемыйСчетФактура Тогда
		ИсправляемыйСчетФактура = РезультатПоискаИсправляемыйСчетФактура;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 1 и не ДокументыОснования[0].ДокументОснование = ДокументОснование Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
		РеквизитыОбновлены  = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента) И ДокументыОснования.Количество() > 0 Тогда
		ОснованиеДокумент = ДокументыОснования[0].ДокументОснование;
		ОбновлятьКППКонтрагента = (НЕ ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		Если ТипЗнч(ОснованиеДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидОперацииРеализации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОснованиеДокумент, "ВидОперации");
			ОбновлятьКППКонтрагента = ОбновлятьКППКонтрагента И
				НЕ (ВидОперацииРеализации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот);
		КонецЕсли;
		Если ОбновлятьКППКонтрагента Тогда
			КППКонтрагентаНовый = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ОснованиеДокумент, "Грузополучатель");
			Если НЕ ПустаяСтрока(КППКонтрагентаНовый) Тогда
				КППКонтрагента = КППКонтрагентаНовый;
				РеквизитыОбновлены	= Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыОбновлены 
		И ДополнительныеСвойства.Свойство("СообщитьОбИзмененииРеквизитов")
		И ДополнительныеСвойства.СообщитьОбИзмененииРеквизитов Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Реквизиты документа """ + Ссылка + """ перезаполнены автоматически");
	КонецЕсли;
	
КонецПроцедуры // ОпределениеПараметровСчетаФактуры()

// Процедура для определения параметров счета-фактуры на аванс
Процедура ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен) Экспорт
	
	Если ДокументыОснования.Количество()=0 
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) тогда
		// Основание не выбрано, параметры не определяем
		Возврат;
	КонецЕсли; 
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	
	СтрокаСообщения = "";
	ОшибкаПриЗаполнении = Ложь;
	ДокументЗаполнен = Ложь;
	ТекущийДоговорКонтрагента = ДоговорКонтрагента;
		
	Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.Сумма + ВЫБОР
		|			КОГДА ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.СуммаВключаетНДС = ИСТИНА
		|				ТОГДА 0
		|			ИНАЧЕ ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ОтчетКомиссионераОПродажахДенежныеСредства.СуммаНДС) КАК СуммаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Сделка КАК СчетНаОплату
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.ДенежныеСредства КАК ОтчетКомиссионераОПродажахДенежныеСредства
		|ГДЕ
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка = &ДокументОснование
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.ВидОтчетаПоПлатежам = &ВидОтчетаПоПлатежамАванс
		|	И ОтчетКомиссионераОПродажахДенежныеСредства.Покупатель = &ПустаяСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.СтавкаНДС,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Дата,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КурсВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.КратностьВзаиморасчетов,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Сделка,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Организация,
		|	ОтчетКомиссионераОПродажахДенежныеСредства.Ссылка.Контрагент";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.УстановитьПараметр("ВидОтчетаПоПлатежамАванс", Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс);
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Контрагенты.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();
		Сумма = 0;
		ДокументЗаполнен = Ложь;
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Дата >= '20060101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
					// НДС с авансов под экспортные поставки не начисляется
					Продолжить;
				ИначеЕсли Выборка.Дата >= '20080101' 
					И Выборка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
					// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
					Продолжить;
				КонецЕсли;
				ДокументЗаполнен = Истина;
				
				Организация = Выборка.Организация;
				Контрагент = Выборка.Контрагент;
				ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
				
				Сумма = Сумма + Выборка.Сумма;
				
				Если Не Выборка.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
					СуммаАванса	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
															Выборка.ВалютаВзаиморасчетов,
															мВалютаРегламентированногоУчета,
															Выборка.КурсВзаиморасчетов, 1,
															Выборка.КратностьВзаиморасчетов, 1);
					СуммаНДС	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС,
															Выборка.ВалютаВзаиморасчетов,
															мВалютаРегламентированногоУчета,
															Выборка.КурсВзаиморасчетов, 1,
															Выборка.КратностьВзаиморасчетов, 1);
				Иначе
					СуммаАванса	= Выборка.Сумма;
					СуммаНДС = Выборка.СуммаНДС;
				КонецЕсли;
				
				СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[Выборка.СтавкаНДС]), СоответствиеСтавок[Выборка.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
				ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СуммаАванса, СуммаНДС, СтавкаНДС, Выборка.СчетНаОплату);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);
				
			КонецЦикла;
			
			Если Выборка.РасчетыВУсловныхЕдиницах 
				Или Не ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчетов) 
				Тогда
				ВалютаДокумента = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаДокумента = Выборка.ВалютаВзаиморасчетов;
			КонецЕсли; 
			ВалютнаяСумма = Сумма;
			
			ОшибкаПриЗаполнении = Ложь;
			СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
			Если ОшибкаПриЗаполнении Тогда
				СтрокаСообщения = СтрокаСообщенияТекущая;
			КонецЕсли;
			СуммаДокумента 	= Сумма;
		Иначе
			ДокументЗаполнен = Ложь;
		КонецЕсли;
	
	Иначе

		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументыОснования[0].ДокументОснование);
		Запрос.Текст = "ВЫБРАТЬ
		               |	НДСРасчетыСПокупателямиОбороты.Организация,
		               |	НДСРасчетыСПокупателямиОбороты.Покупатель КАК Контрагент,
		               |	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента,
		               |	НДСРасчетыСПокупателямиОбороты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		               |	НДСРасчетыСПокупателямиОбороты.ВалютаРасчетов,
		               |	-1 * НДСРасчетыСПокупателямиОбороты.СуммаОборот КАК СуммаАванса,
		               |	-1 * НДСРасчетыСПокупателямиОбороты.ВалютнаяСуммаОборот КАК ВалютнаяСуммаАванса
		               |ИЗ
		               |	РегистрНакопления.НДСРасчетыСПокупателями.Обороты(, , Регистратор, Документ = &ДокументОснование) КАК НДСРасчетыСПокупателямиОбороты
		               |ГДЕ
		               |	НДСРасчетыСПокупателямиОбороты.Регистратор = &ДокументОснование
		               |	И НДСРасчетыСПокупателямиОбороты.СуммаОборот < 0";
					   
		Результат = Запрос.Выполнить();

		ДокументЗаполнен = Ложь;
		Если Не Результат.Пустой() Тогда
			
			ДокАванса = ДокументыОснования[0].ДокументОснование;
			ДокАвансаДата = ?(ДокАванса.Метаданные().Реквизиты.Найти("ДатаОплаты") <> Неопределено И ЗначениеЗаполнено(ДокАванса.ДатаОплаты),
								ДокАванса.ДатаОплаты, ДокАванса.Дата);
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() И Не ДокументЗаполнен Цикл
				
				Организация = Выборка.Организация;
				Контрагент = Выборка.Контрагент;
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) или Выборка.РасчетыВУсловныхЕдиницах Тогда
					//Незаполненное значение приравнивается к валюте регл. учета
					ВалютаДокумента = мВалютаРегламентированногоУчета;	
				Иначе
					ВалютаДокумента = Выборка.ВалютаРасчетов;     
				КонецЕсли; 
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.ЗаказПокупателя"));
				
				Если ДокументыОснования[0].ДокументОснование.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.Сделка;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
					СтрокаПоСтавке.ВалютнаяСумма = Выборка.ВалютнаяСуммаАванса;
					СтрокаПоСтавке.СчетНаОплату = ДокументыОснования[0].ДокументОснование.Сделка;
				Иначе
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
					СтрокаПоСтавке.ВалютнаяСумма = Выборка.ВалютнаяСуммаАванса;
				КонецЕсли;
					
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату","Сумма, ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				СуммаДокумента = 0; 
				ВалютнаяСумма = 0;
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если ДокАванса.Дата >= '20060101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						// НДС с авансов под экспортные поставки не начисляется
						Продолжить;
					ИначеЕсли ДокАванса.Дата >= '20080101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
						Продолжить;
					КонецЕсли;
					
					ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
					Если Выборка.ВалютаРасчетов <> мВалютаРегламентированногоУчета И Не Выборка.РасчетыВУсловныхЕдиницах Тогда
						СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.ВалютнаяСумма;
					Иначе
						СуммаДокумента = СуммаДокумента + СтрокаПоСтавке.Сумма;
					КонецЕсли;
					ВалютнаяСумма = ВалютнаяСумма + СтрокаПоСтавке.ВалютнаяСумма;
					
					СтавкаНДС = ?(ЗначениеЗаполнено(СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС]), СоответствиеСтавок[СтрокаПоСтавке.СтавкаНДС], Перечисления.СтавкиНДС.НДС18_118);
					ТаблицаАвансов = ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаПоСтавке.Сумма, 
															УчетНДС.РассчитатьСуммуНДС(СтрокаПоСтавке.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)), 
															СтавкаНДС, 
															СтрокаПоСтавке.СчетНаОплату);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);							
					ДокументЗаполнен = Истина;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
				СтрокаСообщенияТекущая = ПроверитьВозможностьЗаписиСФ(ОшибкаПриЗаполнении, Истина);
				Если ОшибкаПриЗаполнении Тогда
					ДокументЗаполнен = Ложь;
					СтрокаСообщения = СтрокаСообщения + ?(ПустаяСтрока(СтрокаСообщения), "", Символы.ПС) + СтрокаСообщенияТекущая;
				Иначе
					Прервать;
				КонецЕсли;
			
			КонецЦикла; // Пока Выборка.Следующий() Цикл
		КонецЕсли;
		
	КонецЕсли;
	
	Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		И Дата >= '20150101' Тогда
		СуммаДокументаКомиссия 		= Авансы.Итог("Сумма");
		СуммаНДСДокументаКомиссия 	= Авансы.Итог("СуммаНДС");
	Иначе
		СуммаДокументаКомиссия 		= 0;
		СуммаНДСДокументаКомиссия 	= 0;
	КонецЕсли;
	
	Если ОшибкаПриЗаполнении Тогда
		ДоговорКонтрагента = ТекущийДоговорКонтрагента;
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Сумма = 0;
		ВалютнаяСумма = 0;
		СуммаНДС = 0;
		СуммаДокумента = 0;
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	ИначеЕсли Не ДокументЗаполнен И УчетНДС.ВедетсяУчетНДСПоФЗ134(Дата) И Не УчетНДС.ОрганизацияУчитываетНДС(Организация, Дата) Тогда
		Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			Контрагент = ДокументыОснования[0].ДокументОснование.КонтрагентКредитор;
		Иначе
			Контрагент = ДокументыОснования[0].ДокументОснование.Контрагент;
		КонецЕсли;
		ДоговорКонтрагента = ДокументыОснования[0].ДокументОснование.ДоговорКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуАвансовПоСчетуНаОплату(Сумма, СуммаНДС, СтавкаНДС, СчетНаОплату) Экспорт
	
	ТаблицаРезультата = Авансы.ВыгрузитьКолонки();
	
	Если ЗначениеЗаполнено(СчетНаОплату) Тогда

		СоответствиеСтавок = Новый Соответствие;
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
		СтавкиНДС = Новый СписокЗначений;
		СтавкиНДС.Добавить(СтавкаНДС);
		СтавкиНДС.Добавить(СоответствиеСтавок[СтавкаНДС]);
		Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		               |	&ПустаяСтрока КАК Содержание,
					   |	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
					   |	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма
					   |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
					   |	КОНЕЦ КАК Сумма,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС
					   |		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
					   |	КОНЕЦ КАК СуммаБезНДС,
					   |	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
					   |	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента,
					   |	1 КАК ID
					   |ИЗ
					   |	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
					   |ГДЕ
					   |	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
					   |	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
					   |	СчетНаОплатуПокупателюУслуги.Номенклатура,
					   |	СчетНаОплатуПокупателюУслуги.Содержание,
					   |	СчетНаОплатуПокупателюУслуги.СтавкаНДС,
					   |	СчетНаОплатуПокупателюУслуги.СуммаНДС,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма
					   |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма + СчетНаОплатуПокупателюУслуги.СуммаНДС
					   |	КОНЕЦ,
					   |	ВЫБОР
					   |		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС
					   |			ТОГДА СчетНаОплатуПокупателюУслуги.Сумма - СчетНаОплатуПокупателюУслуги.СуммаНДС
					   |		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Сумма
					   |	КОНЕЦ,
					   |	СчетНаОплатуПокупателюУслуги.НомерСтроки,
					   |	СчетНаОплатуПокупателюУслуги.Ссылка.ВалютаДокумента,
					   |	2
					   |ИЗ
					   |	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
					   |ГДЕ
					   |	СчетНаОплатуПокупателюУслуги.Ссылка = &СчетНаОплату
					   |	И СчетНаОплатуПокупателюУслуги.СтавкаНДС В(&СтавкиНДС)
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	ID,
					   |	НомерСтроки";
					   
		Если ТипЗнч(СчетНаОплату) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СчетНаОплатуПокупателю", "Документ.ЗаказПокупателя");
		КонецЕсли;
					   
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
			СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
			
			Результат.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			Результат.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(Сумма, Результат.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
			
			МассивРаспределения = Новый Массив;
			
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				
				Если ДокументыОснования.Количество() = 0
					Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, Дата);
				Иначе
					СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРезультата.ВалютаДокумента, ДокументыОснования[0].ДокументОснование.Дата);
				КонецЕсли;
				
				Если СтрокаРезультата.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
					СтрокаРезультата.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.Сумма, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаБезНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
					СтрокаРезультата.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРезультата.СуммаНДС, 
																						СтрокаРезультата.ВалютаДокумента, мВалютаРегламентированногоУчета,
																						СтруктураКурсов.Курс, 1,
																						СтруктураКурсов.Кратность, 1);
				КонецЕсли;
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаБезНДС);
				МассивРаспределения.Добавить(СтрокаРезультата.СуммаНДС);
				
				РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СтрокаРезультата.СуммаРаспределение, МассивРаспределения);
				
				Если Не РезультатРаспределения = Неопределено Тогда
					СтрокаРезультата.Сумма = Мин(СтрокаРезультата.СуммаРаспределение, СтрокаРезультата.Сумма);
					СтрокаРезультата.СуммаНДС = Мин(СтрокаРезультата.СуммаНДС, РезультатРаспределения[1]);
					СтрокаРезультата.СуммаБезНДС = СтрокаРезультата.Сумма - СтрокаРезультата.СуммаБезНДС; 
					
					ДобавитьСтрокуАвансы(ТаблицаРезультата, СтрокаРезультата.Номенклатура, СтрокаРезультата.Содержание, СтрокаРезультата.Сумма, СтрокаРезультата.СуммаНДС, СтавкаНДС);
					Сумма = Сумма - СтрокаРезультата.Сумма;
					СуммаНДС = СуммаНДС - СтрокаРезультата.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СтавкаНДС);
		КонецЕсли;
		
	Иначе
		ДобавитьСтрокуАвансы(ТаблицаРезультата, ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс, , Сумма, СуммаНДС, СтавкаНДС);
	КонецЕсли;
	
	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Содержание = "", Сумма, СуммаНДС, СтавкаНДС, Контрагент = Неопределено) Экспорт
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Содержание = Содержание;
	
	Если ПустаяСтрока(НоваяСтрока.Содержание) 
		И ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		И НоваяСтрока.Номенклатура.Услуга Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если ПустаяСтрока(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.Наименование;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	Если Контрагент <> Неопределено Тогда
		НоваяСтрока.Контрагент = Контрагент;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		ИЛИ ЭтоИсправление И ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		Возврат СписокТипов;
	КонецЕсли;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.АккредитивПолученный"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Иначе
		// Типы документов оплаты исключаются из состава доступных типом.
		// Дополним типами, не выбираемыми вручную
		СписокТипов.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		
		СписокТипов = Новый ОписаниеТипов(ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип, ,СписокТипов);//.Типы();
		СписокТипов = СписокТипов.Типы();
	КонецЕсли;
	
	Если НЕ ЭтоИсправление Тогда
		ИндексУдаляемогоЭлемента = СписокТипов.Найти(Тип("ДокументСсылка.КорректировкаРеализации"));
		Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
			СписокТипов.Удалить(ИндексУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

Процедура УстановитьКодВидаОперации(КодВидаОперацииОснования = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если Исправление ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда		
		Если НЕ КодВидаОперацииОснования = Неопределено Тогда
			КодВидаОперации = КодВидаОперацииОснования;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
				
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		КодВидаОперации = "02";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда	
		
		Если Авансы.Количество() > 1 Тогда
			КодВидаОперации = "28";
		Иначе
			КодВидаОперации = "05";
		КонецЕсли;
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Для Каждого СтрокаТабличнойЧасти ИЗ ДокументыОснования Цикл
			КодВидаОперации = "";
			Если ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
				ИЛИ ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
				КодВидаОперации = "03";
			ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				КодВидаОперации = "04";			
			ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ДокументОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументОснование, "Дата") >= '20150101' Тогда
				
				КодВидаОперацииПоОснованию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДокументОснование, "КодВидаОперации");
				КодВидаОперации = ?(ЗначениеЗаполнено(КодВидаОперацииПоОснованию), КодВидаОперацииПоОснованию, "01");
				Прервать;
				
			Иначе
				КодВидаОперации = "01";
			КонецЕсли;
			
		КонецЦикла;
		
		Если КодВидаОперации = "" Тогда
			КодВидаОперации = "01";
		КонецЕсли;

	Иначе
		
		КодВидаОперации = "01";		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакВыставлен() Экспорт
	
	Если СчетФактураНеВыставляется Тогда
		Выставлен = Ложь;
		ДатаВыставления = '00010101';
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			СтруктураЗапроса = ДокументОснование;
		Иначе
			СтруктураЗапроса = Новый Структура("Организация,Контрагент", Организация, Контрагент);
		КонецЕсли;	
		
		Если УчетНДС.НаличиеСоглашенияОбменаЭД(СтруктураЗапроса) Тогда
			КодСпособаВыставления = 2;
			Выставлен = Ложь;
			ДатаВыставления = '00010101';
		Иначе
			КодСпособаВыставления = 1;
			Выставлен = Истина;
			ДатаВыставления = ?(Дата = '00010101', ОбщегоНазначения.ПолучитьРабочуюДату(), Дата);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти, Отказ)
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		УточнениеСообщения = "корректировочных"; 
	Иначе
		УточнениеСообщения = "исправленных";
	КонецЕсли;
	
	ОснованиеДляВидаОперации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание);
	
	Если ЗначениеЗаполнено(ОснованиеДляВидаОперации.ВалютаДокумента) 
		И ОснованиеДляВидаОперации.ВалютаДокумента <> мВалютаРегламентированногоУчета 
		И ЗначениеЗаполнено(ОснованиеДляВидаОперации.ДоговорКонтрагента)
		И ОснованиеДляВидаОперации.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для договоров в условных единицах, выставление " 
			+ УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.
			|Документ-основание должен быть оформлен в рублях.");
		Отказ = Истина;	
		Возврат;
	КонецЕсли;
	
	Если НЕ Основание.КорректироватьНДС Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для корректировки реализации с отражением корректировки ""Только в печатной форме"" счет-фактура не выставляется");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ЗначениеЗаполнено(Основание.ИсправляемыйДокументРеализации)
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И Основание.ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		ЭтотОбъект.Исправление = Истина;
	ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		ЭтотОбъект.Исправление = Ложь;
	Иначе		
		
		СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);		
		СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		СписокТиповНаРеализацию = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		
		Если СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда			
			Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			КонецЕсли;
		ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;	
		Иначе
			ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		КонецЕсли;
		
		ЭтотОбъект.Исправление = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Основание.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйДокументРеализации;
	Иначе
		ИсправляемыйСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание.ИсправляемыйДокументРеализации, "СчетФактураВыданный");
	КонецЕсли;	
	
	ДокументРеализации = Основание.ДокументРеализации;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Основание.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	

	// Определение кода вида операции для исправления
	// Определение номера и даты исходного документа
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ = 0;

	ИсходныйДокумент = Неопределено;
	ИспользоватьПараметрыСчетаФактуры = Ложь;
	Если ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИспользоватьПараметрыСчетаФактуры = Истина;
		ИсходныйДокумент = Основание.ДокументРеализации;
	ИначеЕсли ТипЗнч(Основание.ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ИспользоватьПараметрыСчетаФактуры = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ИспользоватьПараметрыСчетаФактуры И ЗначениеЗаполнено(ИсходныйДокумент) Тогда // реквизиты из документа основания
		
		ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента,
			|ДатаИсправленияИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента");
		
		Если Исправление И ИсходныйДокумент.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			КодВидаОперацииОснования = КодВидаОперации;
		КонецЕсли;
		
		НомерИсправленияСФ = ИсходныйДокумент.НомерИсправления;
		
		Если ИсходныйДокумент.Исправление ИЛИ ИсходныйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ПараметрыСчетаФактуры.НомерИсходногоДокумента = ИсходныйДокумент.НомерИсходногоДокумента;
			ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ИсходныйДокумент.ДатаИсходногоДокумента;
		Иначе
			ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсходныйДокумент.ПолучитьОбъект());
			ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ИсходныйДокумент.Дата;
		КонецЕсли;
		
		Если ИсходныйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ИсходныйДокумент.УчитыватьИсправлениеИсходногоДокумента;
			Если ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента Тогда
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ИсходныйДокумент.НомерИсправленияИсходногоДокумента;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ИсходныйДокумент.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
			
			Если ИсходныйДокумент.Исправление Тогда
				НомерИсправляемогоКорректировочногоДокумента = ИсходныйДокумент.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ИсходныйДокумент.ДатаИсправляемогоКорректировочногоДокумента;
			ИначеЕсли Исправление Тогда
				НомерИсправляемогоКорректировочногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ИсходныйДокумент.ПолучитьОбъект());
				ДатаИсправляемогоКорректировочногоДокумента  = ИсходныйДокумент.Дата;
			КонецЕсли;
			
		Иначе
			Если ИсходныйДокумент.Исправление И ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = Истина;
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ИсходныйДокумент.НомерИсправления;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ИсходныйДокумент.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
		КонецЕсли;
		
	Иначе
		Запрос = Новый Запрос;
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание.ДокументРеализации);							   
		
		Запрос.УстановитьПараметр("ИсходныйДокумент", ИсходныйДокумент);
		Запрос.УстановитьПараметр("КорректировочныйСчетФактура", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.Ссылка.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Номер
		|	КОНЕЦ КАК НомерИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента
		|		КОГДА (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура)
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
		|		КОГДА (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура)
		|				И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Дата
		|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
		|			ТОГДА СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерИсправления,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = &КорректировочныйСчетФактура
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректировочныйСчетФактура,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	(СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
		|	ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка = &ИсходныйДокумент)
		|	И (НЕ СчетФактураВыданныйДокументыОснования.Ссылка.Исправление)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если РезультатЗапроса.Количество() > 0 Тогда
			
			ТекущаяСтрока = РезультатЗапроса[0];
			
			Если КорректировкаКорректировочногоСчетаФактуры Тогда
				
				КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
				
				СтрокаОснованиеВТабличнойЧасти.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				СтрокаОснованиеВТабличнойЧасти.ДатаИсходногоДокумента  = ТекущаяСтрока.Дата;
				
				НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				
			Иначе	
				
				ПараметрыСчетаФактуры = Новый Структура("НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента,
				|ДатаИсправленияИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента");

				КодВидаОперацииОснования = ТекущаяСтрока.КодВидаОперации;
				НомерИсправленияСФ = ТекущаяСтрока.НомерИсправления;
				
				Если НЕ ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());	
				Иначе
					ПараметрыСчетаФактуры.НомерИсходногоДокумента = ТекущаяСтрока.НомерИсходногоДокумента;
				КонецЕсли;
				
				ПараметрыСчетаФактуры.ДатаИсходногоДокумента  = ТекущаяСтрока.ДатаИсходногоДокумента;
				
				ПараметрыСчетаФактуры.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправленияИсходногоДокумента;
				ПараметрыСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.ДатаИсправленияИсходногоДокумента;
				
				ЭтотОбъект.НомерИсправляемогоКорректировочногоДокумента = ТекущаяСтрока.НомерИсправляемогоКорректировочногоДокумента;
				ЭтотОбъект.ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.ДатаИсправляемогоКорректировочногоДокумента;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура И ЭтотОбъект.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				КонецЕсли;
				
				Если ТекущаяСтрока.КорректировочныйСчетФактура И НЕ ТекущаяСтрока.Исправление Тогда
					ЭтотОбъект.НомерИсправляемогоКорректировочногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущаяСтрока.Ссылка.ПолучитьОбъект());
					ЭтотОбъект.ДатаИсправляемогоКорректировочногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправленияИсходногоДокумента)
					ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ДатаИсправленияИсходногоДокумента) Тогда
					ПараметрыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
				
				Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					ЗаполнитьЗначенияСвойств(СтрокаОснованиеВТабличнойЧасти, ПараметрыСчетаФактуры);
				Иначе
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры);
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.Исправление Тогда
			НомерИсправленияСФ = 0;		
		КонецЕсли;
	КонецЕсли;
	
	// Определение кода вида операции для исправления
	// и номера исправления
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйДокумент", Основание.ДокументРеализации);		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокумент
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		ТекущаяСтрока = РезультатЗапроса[0];
		НомерИсправленияСФ  = Макс(НомерИсправленияСФ, ТекущаяСтрока.НомерИсправления);			
		
		Если ЭтотОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Если НЕ СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.НомерИсправления) Тогда
					СтрокаОснованиеВТабличнойЧасти.НомерИсправленияИсходногоДокумента = ТекущаяСтрока.НомерИсправления;
					СтрокаОснованиеВТабличнойЧасти.ДатаИсправленияИсходногоДокумента  = ТекущаяСтрока.Ссылка.Дата;
					СтрокаОснованиеВТабличнойЧасти.УчитыватьИсправлениеИсходногоДокумента = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКодВидаОперации(КодВидаОперацииОснования);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ИсправляемыйСчетФактура) Тогда
		ЭтотОбъект.КППКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.ИсправляемыйСчетФактура, "КППКонтрагента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КППКонтрагента) И ЭтотОбъект.ДокументыОснования.Количество() > 0 Тогда
		ЭтотОбъект.КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузополучатель");
	КонецЕсли;
	
	Если ЭтотОбъект.Исправление Тогда		
		ЭтотОбъект.НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииСчетаФактуры(Основание)
	
	Если Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		И Основание.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтотОбъект.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
	Если УчетНДС.ПолучитьВерсиюПостановления(ЭтотОбъект.Дата) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, , "Номер,Дата,Проведен,ПометкаУдаления");
		
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = ДокументОснование;
	
	Для Каждого СтрокаАванса Из Основание.Авансы Цикл 
		НоваяСтрока = Авансы.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАванса);
	КонецЦикла;
	
	СуммаНДСДокумента = Авансы.Итог("СуммаНДС");
	СуммаДокумента = Авансы.Итог("Сумма");
	
	Исправление = Истина;		
	НомерИсправления = НомерИсправления + 1;
	Выставлен = Ложь;
	ДатаВыставления = '00010101';
	
	Если Основание.Исправление Тогда
		ИсправляемыйСчетФактура = Основание.ИсправляемыйСчетФактура;
	Иначе
		ИсправляемыйСчетФактура = Основание;
	КонецЕсли;
			
	Если НЕ Основание.Исправление Тогда
		ЭтотОбъект.НомерИсходногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
		ЭтотОбъект.ДатаИсходногоДокумента  = Основание.Дата;
	КонецЕсли;
	
	Если Основание.ДатаНомерДокументовОплаты.Количество() <> 0 Тогда
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента  = Основание.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента = Основание.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	
	УстановитьКодВидаОперации();
		
КонецПроцедуры	

Процедура ЗаполнитьДатуИНомерДокументовОплаты()
	
	ЕстьДокументыРасчетов = ДокументОснование.Метаданные().ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено;
	Если Не ЕстьДокументыРасчетов Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыРасчетовСКонтрагентом.ДокументРасчетовСКонтрагентом КАК ДокументОплаты
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК ДокументыРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументыРасчетовСКонтрагентом.Ссылка = &Ссылка";
	ИмяТаблицы = ДокументОснование.Метаданные().ПолноеИмя();
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Документ.РеализацияТоваровУслуг", ИмяТаблицы);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование.Ссылка);
	Результат = Запрос.Выполнить();
	ВыборкаДокументов = Результат.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		МетаданныеДокумента = ВыборкаДокументов.ДокументОплаты.Метаданные();
		ИспользоватьДанныеВходящегоДокумента =
		МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено И
		МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента")  <> Неопределено;
		НовыйПРД = ДатаНомерДокументовОплаты.Добавить();
		Если ИспользоватьДанныеВходящегоДокумента Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДокументов.ДокументОплаты, "НомерВходящегоДокумента, ДатаВходящегоДокумента");
			НовыйПРД.НомерПлатежноРасчетногоДокумента = Реквизиты.НомерВходящегоДокумента;
			НовыйПРД.ДатаПлатежноРасчетногоДокумента  = Реквизиты.ДатаВходящегоДокумента;
		Иначе
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДокументов.ДокументОплаты, "Дата");
			НовыйПРД.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ВыборкаДокументов.ДокументОплаты);
			НовыйПРД.ДатаПлатежноРасчетногоДокумента  = Реквизиты.Дата;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ЭтоПБОЮЛ(Организация)
	
	Возврат (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
КонецФункции

// Процедура возвращает общие данные для печати счета фактуры
// по всем документам-основаниям
// 
Функция ПодготовитьОбщиеДанныеДляПечатиКорректировочногоСчетаФактуры(СчетФактура, ЭтоПечатьУКД = Ложь) Экспорт
	
	СписокОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"),Истина);
	
	ОбщиеДанныеДляПечати = Неопределено;
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("Ссылка", 							СчетФактура.Ссылка);
	ДанныеСчетаФактуры.Вставить("Номер",  							ОбщегоНазначения.ПолучитьНомерНаПечать(СчетФактура));
	ДанныеСчетаФактуры.Вставить("Дата",   							СчетФактура.Дата);
	ДанныеСчетаФактуры.Вставить("Организация",   					СчетФактура.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент",   					СчетФактура.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента",               СчетФактура.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры",                  СчетФактура.ВидСчетаФактуры);
	ДанныеСчетаФактуры.Вставить("Исправление",                      СчетФактура.Исправление);
	ДанныеСчетаФактуры.Вставить("НомерИсправления",                 СчетФактура.НомерИсправления);
	ДанныеСчетаФактуры.Вставить("НомерИсправляемогоКорректировочногоДокумента", СчетФактура.НомерИсправляемогоКорректировочногоДокумента);
	ДанныеСчетаФактуры.Вставить("ДатаИсправляемогоКорректировочногоДокумента",  СчетФактура.ДатаИсправляемогоКорректировочногоДокумента);
	ДанныеСчетаФактуры.Вставить("Продавец",                         СчетФактура.Контрагент);
	ДанныеСчетаФактуры.Вставить("КППКонтрагента",                   СчетФактура.КППКонтрагента);
	ДанныеСчетаФактуры.Вставить("СчетФактураБезНДС",                СчетФактура.СчетФактураБезНДС);
	ДанныеСчетаФактуры.Вставить("ДатаСчетФактуры",					СчетФактура.Дата);
	
	Для Каждого ТекущееОснование из СписокОснований Цикл
		Если Не ЗначениеЗаполнено(ТекущееОснование) Тогда
			Продолжить;
		КонецЕсли; 
		
		ТипОснования = ТипЗнч(ТекущееОснование);
		ДанныеДляПечати = Неопределено;
		
		Если ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ДанныеДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, ДанныеСчетаФактуры.Ссылка);
		КонецЕсли;
		
		Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			ОбщиеДанныеДляПечати = ДанныеДляПечати;
		Иначе
			Для Каждого СтрДанных Из ДанныеДляПечати Цикл
				
				Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
					ОбщаяТабЧасть = ОбщиеДанныеДляПечати.ТабличнаяЧасть;
					ТекущаяТабЧасть = СтрДанных.Значение;
					
					Для Каждого СтрокаТекущейТабЧасть Из ТекущаяТабЧасть Цикл
						СтрокаТабЧасти = ОбщаяТабЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТекущейТабЧасть);
					КонецЦикла;
				Иначе
					Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
						// Если данный параметр для печати шапки документа еще не определен - то определяем его
						ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщиеДанныеДляПечати <> Неопределено Тогда
		
		КорректируемыеСчетаФактуры = Новый ТаблицаЗначений;
		КорректируемыеСчетаФактуры.Колонки.Добавить("НомерСчетаФактуры");
		КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаСчетаФактуры");
		КорректируемыеСчетаФактуры.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
		КорректируемыеСчетаФактуры.Колонки.Добавить("НомерИсправления");
		КорректируемыеСчетаФактуры.Колонки.Добавить("ДатаИсправления");
		
		
		РеквизитыПередаточныхДокументов = ""; 
		
		Для Каждого ТекущееОснование ИЗ СчетФактура.ДокументыОснования Цикл
			РеквизитыСчетаФактуры = КорректируемыеСчетаФактуры.Добавить();
			РеквизитыСчетаФактуры.НомерСчетаФактуры = ТекущееОснование.НомерИсходногоДокумента;
			РеквизитыСчетаФактуры.ДатаСчетаФактуры  = ТекущееОснование.ДатаИсходногоДокумента;
			РеквизитыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ТекущееОснование.УчитыватьИсправлениеИсходногоДокумента;
			РеквизитыСчетаФактуры.НомерИсправления  = ?(ТекущееОснование.НомерИсправленияИсходногоДокумента = 0 ИЛИ НЕ ТекущееОснование.УчитыватьИсправлениеИсходногоДокумента,
														"--", ТекущееОснование.НомерИсправленияИсходногоДокумента);
			РеквизитыСчетаФактуры.ДатаИсправления   = ?(Не ЗначениеЗаполнено(ТекущееОснование.ДатаИсправленияИсходногоДокумента) ИЛИ НЕ ТекущееОснование.УчитыватьИсправлениеИсходногоДокумента,
														'00010101', ТекущееОснование.ДатаИсправленияИсходногоДокумента);
			ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ТекущееОснование.ДокументОснование, Истина);
			РеквизитыПередаточныхДокументов = РеквизитыПередаточныхДокументов + ?(РеквизитыПередаточныхДокументов = "", "", ", ")
				+ ?(ЭтоПечатьУКД,"Универсальный передаточный документ " + УчетНДС.РеквизитыПервичногоДокумента(ИсправляемыйДокументРеализации),
							УчетНДС.РеквизитыПервичногоДокумента(ИсправляемыйДокументРеализации,,,Истина));
		КонецЦикла;
		
		ДанныеДляПечати.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);
		
		КорректируемыеСчетаФактуры.Свернуть("НомерСчетаФактуры, ДатаСчетаФактуры, УчитыватьИсправлениеИсходногоДокумента, НомерИсправления, ДатаИсправления");
		ОбщиеДанныеДляПечати.Вставить("КорректируемыеСчетаФактуры", КорректируемыеСчетаФактуры);
		
		ОбщиеДанныеДляПечати.Вставить("КППКонтрагента",  	СчетФактура.КППКонтрагента);
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		+"ТоварКод,"
		+"ТоварАртикул,"
		+"НаименованиеТовара,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС,"
		+"СуммаВключаетНДС";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
		НомерСтроки = 0;
		Для Каждого Строчка Из ОбщиеДанныеДляПечати.ТабличнаяЧасть Цикл
			НомерСтроки = НомерСтроки + 1;
			Строчка.НомерСтроки = НомерСтроки;
		КонецЦикла;		
		
		// заполнение колонок код и артикул
		ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить Тогда
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения("", "ТоварКод");
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварКод");
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.ТоварАртикул.Имя = "ТоварКод";
		Иначе
			ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
		КонецЕсли;
		
		ОбщиеДанныеДляПечати.Вставить("ДокументыОснования", СписокОснований);
		
	КонецЕсли;
	
	Возврат ОбщиеДанныеДляПечати;

КонецФункции

// Процедура возвращает общие данные для печати универсального корректировочного документа
// по всем документам-основаниям
// 
Функция ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(СчетФактура) Экспорт
	
	ДанныеДляПечати = ПодготовитьОбщиеДанныеДляПечатиКорректировочногоСчетаФактуры(СчетФактура, Истина);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Основание", Строка(СчетФактура.ДоговорКонтрагента));
	ДанныеДляПечати.Вставить("СтатусУКД", 1);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Процедура возвращает общие данные для печати универсального передаточного документа
// по всем документам-основаниям
// 
Функция ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеСчетФактуры = Неопределено) Экспорт
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
 	
	СобратьДанныеДляПечати(ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",			Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		Исправление);
	ДанныеДляПечати.Вставить("НомерИсправления", 		НомерИсправления);
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 		СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		КППКонтрагента);
	ДанныеДляПечати.Вставить("ДокументОснование", 	 	ДокументОснование);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	
	УчетНДС.СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	ТипОснования = ТипЗнч(ДанныеДляПечати.ДокументОснование);
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		ТекстСообщения = "";
		
		Если ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется для документа ""Отражение начисления НДС""";
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется при оформлении счетов-фактур по отчетам комиссионеров о продажах";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("СтатусУПД", 1);
	
	//Миша
	ДанныеДляПечати.Вставить("Основание",УчетНДС.мшЗаполнитьОснование(ДанныеДляПечати.ДокументОснование.Сделка));
	///Миша
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", 	Дата);
	
	Возврат ДанныеДляПечати;
	
КонецФункции // ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента

// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Покупатель,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма,
	|		СУММА(СуммаНДСВознаграждения) КАК СуммаНДС
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.ТоварКод            = "";
		Строчка.ТоварАртикул        = "";
		Строчка.СтранаПроисхождения = "";
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.ЕдиницаИзмеренияКод = "";
		Строчка.СтавкаНДС           = Шапка.СтавкаНДС;
		СуммаДляПечати              = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаВключаетНДС    = Истина;
		Строчка.СуммаНДС            = ?(ВыборкаСтрокТовары.СуммаНДС = Null, 0, ВыборкаСтрокТовары.СуммаНДС);
		Строчка.Сумма               = СуммаДляПечати;
		Строчка.Цена                = 0;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ДанныеДляПечати.Вставить("ФИОКладовщика", 			Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", 	Руководители.РуководительДолжность);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.КлючСтроки КАК КлючСтроки,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель
	|ПОМЕСТИТЬ ВТДанныеОПокупателях
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &ДокументОснование
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВТДанныеОПокупателях.Покупатель КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВТДанныеОПокупателях.Покупатель
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетКомиссионераОПродажах.Подразделение КАК Подразделение,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПокупателях КАК ВТДанныеОПокупателях
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОПокупателях.Покупатель КАК Контрагент,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения,
	|	ОтчетКомиссионераОПродажахТовары.Цена,
	|	ОтчетКомиссионераОПродажахТовары.Количество,
	|	ОтчетКомиссионераОПродажахТовары.Сумма,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС,
	|	ОтчетКомиссионераОПродажахТовары.СуммаНДС,
	|	ОтчетКомиссионераОПродажахТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры КАК Серия,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Код КАК ТоварКод,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ОтчетКомиссионераОПродажахТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТДанныеОПокупателях КАК ДанныеОПокупателях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ДанныеОПокупателях.КлючСтроки = ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаШапка = Результат[1].Выгрузить();
	Шапка = ТаблицаШапка[0];
	ВыборкаСтрокТовары = Результат[2].Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	
	Если ТаблицаШапка.Количество() = 1 Тогда
		ДанныеДляПечати.Вставить("Покупатель",      Шапка.Покупатель);
		ДанныеДляПечати.Вставить("Грузополучатель", Шапка.Грузополучатель);
	Иначе
		ДанныеДляПечати.Вставить("Покупатель",      ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(
			ТаблицаШапка.ВыгрузитьКолонку("Покупатель")));
		ДанныеДляПечати.Вставить("Грузополучатель", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(
			ТаблицаШапка.ВыгрузитьКолонку("Грузополучатель")));
	КонецЕсли;
		
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)  + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.СуммаВключаетНДС    = Шапка.СуммаВключаетНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Организация,
	               |	РеализацияТоваровУслуг.Организация КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ""он же""
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
	               |	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА РеализацияТоваровУслуг.Контрагент
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	               |	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	               |	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	               |	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	РеализацияТоваровУслуг.АдресДоставки,
	               |	РеализацияТоваровУслуг.ОтпускРазрешил,
	               |	РеализацияТоваровУслуг.ОтпускПроизвел,
	               |	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	               |	РеализацияТоваровУслуг.ДоверенностьНомер,
	               |	РеализацияТоваровУслуг.ДоверенностьДата,
	               |	РеализацияТоваровУслуг.ДоверенностьВыдана,
	               |	РеализацияТоваровУслуг.ДоверенностьЧерезКого
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры КАК Серия,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	"""",
	|	NULL,
	|	NULL,
	|	"""",
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	2,
	|	NULL,
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("АдресДоставки",    Шапка.АдресДоставки);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары 		  = Ложь;
	ЕстьУслуги 		  = Ложь;

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 1);
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 2);
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена = ?(ВыборкаСтрокТовары.Цена <> 0, ?(НЕ Шапка.СуммаВключаетНДС,?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество),ВыборкаСтрокТовары.Цена),
		                 ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
		Строчка.Характеристика      = ВыборкаСтрокТовары.Характеристика;
		
	КонецЦикла;

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЕстьТовары И ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтпускПроизвел);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
	ИначеЕсли ЕстьУслуги Тогда
		Если ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 			Шапка.ОтпускРазрешил);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		Шапка.ДатаДокумента);
		Иначе	
			ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
		КонецЕсли;
	КонецЕсли;
	ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Неопределено);
	
	Если ЗначениеЗаполнено(Шапка.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьЧерезКого) Тогда
		Доверенность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'по доверенности №%1 от %2 выданной %3 %4'"),
		Шапка.ДоверенностьНомер, Формат(Шапка.ДоверенностьДата, "ДЛФ=ДД"),
		Шапка.ДоверенностьВыдана, Шапка.ДоверенностьЧерезКого);
		ДанныеДляПечати.Вставить("Доверенность", Доверенность);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	               |	ВозвратТоваровПоставщику.Организация,
	               |	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ""он же""
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	               |	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ВозвратТоваровПоставщику.Контрагент
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	               |	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	               |	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	               |	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	               |		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК НомерТЧ,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщику()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	               |	ВозвратТоваровПоставщику.Организация,
	               |	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	               |	""он же"" КАК Грузоотправитель,
	               |	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	               |	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ВозвратТоваровПоставщику.Контрагент
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	               |	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	               |	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	               |	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщикуИзНТТ КАК ВозвратТоваровПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	               |		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	Ложь			 КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Представление КАК ТоварНаименование,
	               |	&ПустаяСтранаПроисхождения КАК СтранаПроисхождения,
	               |	"""" КАК ПредставлениеСтраны,
	               |	&ПустойНомерГТД КАК НомерГТД,
	               |	"""" КАК ПредставлениеГТД,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Код КАК ТоварКод,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Артикул КАК ТоварАртикул,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги
	               |ГДЕ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Номер);
	ДанныеДляПечати.Вставить("Дата",             Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ПредставлениеСтраны = ВыборкаСтрокТовары.ПредставлениеСтраны;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ПредставлениеЕдиницыИзмерения;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Ложь;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество));
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()

Функция СобратьДанныеДляПечатиИсправленияСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,		
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ТаблицаПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаПоТоварам.Количество,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	""Товары"" КАК ВидПоступления,
	|	ТаблицаПоТоварам.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаПоТоварам.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
	|	""Россия"",
	|	NULL,
	|	""Россия"",
	|	"""",
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	""Услуги"",
	|	ТаблицаПоУслугам.Номенклатура.Код,
	|	ТаблицаПоУслугам.Номенклатура.Артикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК ТаблицаПоУслугам
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПоступления,
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    	
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Номер,НомерИсходногоДокумента,ДатаИсходногоДокумента");
    	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            РеквизитыСФ.НомерИсходногоДокумента);
	ДанныеДляПечати.Вставить("Дата",             РеквизитыСФ.ДатаИсходногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, РеквизитыСФ.Дата);

	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		ЕстьТовары = ЕстьТовары ИЛИ ВыборкаСтрокТовары.ВидПоступления = "Товары";
		ЕстьУслуги = ЕстьУслуги ИЛИ ВыборкаСтрокТовары.ВидПоступления = "Услуги";
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	Если НЕ ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ТипДокументаРеализации = ТипЗнч(Шапка.ДокументРеализации);
	Если ТипДокументаРеализации = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РеквизитыШапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ДокументРеализации, "ОтпускПроизвел, ОтпускРазрешил");
		Если ЕстьТовары И ЗначениеЗаполнено(РеквизитыШапки.ОтпускПроизвел) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 				РеквизитыШапки.ОтпускПроизвел);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			РеквизитыСФ.Дата);
		ИначеЕсли ЕстьУслуги Тогда
			Если ЗначениеЗаполнено(РеквизитыШапки.ОтпускРазрешил) Тогда
				ДанныеДляПечати.Вставить("КладовщикДляУПД", 			РеквизитыШапки.ОтпускРазрешил);
				ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		РеквизитыСФ.Дата);
			Иначе	
				ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
				ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
			КонецЕсли;
		КонецЕсли;
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;
		
КонецФункции // СобратьДанныеДляПечатиИсправленияСчетаФактуры

Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.Подразделение КАК Подразделение,
	|	КорректировкаРеализации.ДоговорКонтрагента.ВидАгентскогоДоговора КАК ВидАгентскогоДоговора
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Грузополучатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.Грузоотправитель,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС,
	|	ВТИсходныйДокумент.Подразделение,
	|	ВТИсходныйДокумент.ВидАгентскогоДоговора
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Поставщик = Шапка.Поставщик;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Исправление,ВидСчетаФактуры,НомерИсправления,СчетФактураБезНДС,КППКонтрагента,ВидСчетаФактуры,
																			|НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента");
		ДанныеДокумента.Вставить("Номер",ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
		
	Иначе
		
		ДанныеДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "НомерИсправления,Дата,Организация,Контрагент,ДоговорКонтрагента");
		
		ДанныеДокумента.Вставить("Номер",                            ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
		ДанныеДокумента.Вставить("ВидСчетаФактуры",                  Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
		ДанныеДокумента.Вставить("Исправление",                      Ложь);
		ДанныеДокумента.Вставить("НомерИсправления",                 "");
		ДанныеДокумента.Вставить("НомерИсправляемогоКорректировочногоДокумента", "");
		ДанныеДокумента.Вставить("ДатаИсправляемогоКорректировочногоДокумента",  '00010101');
		ДанныеДокумента.Вставить("Продавец",                         ДанныеДокумента.Контрагент);
		ДанныеДокумента.Вставить("КППКонтрагента",                   "");
		ДанныеДокумента.Вставить("СчетФактураБезНДС",                Ложь);

	КонецЕсли;
		
	ДанныеДляПечати = Новый Структура();

	ДанныеДляПечати.Вставить("Организация",       	Шапка.Организация);
	ДанныеДляПечати.Вставить("Поставщик",         	Поставщик);
	ДанныеДляПечати.Вставить("Валюта",			  	Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",        	Шапка.Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",  	Шапка.СуммаВключаетНДС);
	ДанныеДляПечати.Вставить("Подразделение",     	Шапка.Подразделение);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",Шапка.ВидАгентскогоДоговора);	
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",		ДанныеДокумента.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",		ДанныеДокумента.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Ссылка",         		Ссылка);
	ДанныеДляПечати.Вставить("Номер",               ?(ДанныеДокумента.Исправление, ДанныеДокумента.НомерИсправляемогоКорректировочногоДокумента, ДанныеДокумента.Номер));
	ДанныеДляПечати.Вставить("Дата",                ?(ДанныеДокумента.Исправление, ДанныеДокумента.ДатаИсправляемогоКорректировочногоДокумента, ДанныеДокумента.Дата));
	ДанныеДляПечати.Вставить("НомерИсправления",    ?(ДанныеДокумента.Исправление, ДанныеДокумента.НомерИсправления, "--"));
	ДанныеДляПечати.Вставить("ДатаИсправления",     ?(ДанныеДокумента.Исправление, ДанныеДокумента.Дата, '00010101'));
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",     ДанныеДокумента.Дата);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС",   ДанныеДокумента.СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента",      ДанныеДокумента.КППКонтрагента);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",     ДанныеДокумента.ВидСчетаФактуры);	
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, ДанныеДокумента.Дата);
	
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовара,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры КАК Серия,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	ИсходныйДокумент.СуммаВключаетНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоПослеИзменения,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) / КорректировкаРеализацииТовары.Количество
	|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма / КорректировкаРеализацииТовары.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаПослеИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения) / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	1 КАК НомерТЧ,
	|	КорректировкаРеализацииТовары.Номенклатура.Код КАК ТоварКод,
	|	КорректировкаРеализацииТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииТовары.Количество <> КорректировкаРеализацииТовары.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Сумма <> КорректировкаРеализацииТовары.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДС <> КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Цена <> КорректировкаРеализацииТовары.ЦенаДоИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Содержание КАК СТРОКА(1000)),
	|	NULL,
	|	NULL,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	ИсходныйДокумент.СуммаВключаетНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) / КорректировкаРеализацииУслуги.Количество
	|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма / КорректировкаРеализацииУслуги.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	2,
	|	КорректировкаРеализацииУслуги.Номенклатура.Код,
	|	КорректировкаРеализацииУслуги.Номенклатура.Артикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииУслуги.Количество <> КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Сумма <> КорректировкаРеализацииУслуги.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.СуммаНДС <> КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Цена <> КорректировкаРеализацииУслуги.ЦенаДоИзменения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	Если ДанныеДокумента.Исправление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоИзменения", "ДоКорректировки");
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "ДоКорректировки", "ДоИзменения");
	КонецЦикла;
	
	Для Каждого Строчка Из ТаблицаРезультата Цикл
		Строчка.НаименованиеТовара = СокрЛП(Строчка.НаименованиеТовара) + ФормированиеПечатныхФорм.ПредставлениеСерий(Строчка);
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеДляПечатиКорректировочногоСчетаФактуры

// Функция собирает данные по текущему документу в случае, если это СФ на аванс
// 
Функция СобратьДанныеСФнаАвансИСуммовуюРазницу(ТекущееОснование)
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = мНадписьПредоплата;
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	НаАванс = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	Запрос.УстановитьПараметр("НаАванс", НаАванс);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &НаАванс
	|			ТОГДА ЕСТЬNULL(СчетФактураСводныйАвансы.Контрагент, СчетФактураВыданный.Контрагент)
	|		ИНАЧЕ СчетФактураВыданный.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	ЕСТЬNULL(СчетФактураСводныйАвансы.Сумма, СчетФактураВыданный.Сумма) КАК Сумма,
	|	ЕСТЬNULL(СчетФактураСводныйАвансы.СуммаНДС, СчетФактураВыданный.СуммаНДС) КАК СуммаНДС,
	|	ЕСТЬNULL(СчетФактураСводныйАвансы.СтавкаНДС, СчетФактураВыданный.СтавкаНДС) КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК СчетФактураСводныйАвансы
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураСводныйАвансы.Ссылка
	|			И (СчетФактураВыданный.СводныйКомиссионный)
	|			И (&НаАванс)
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	ТаблицаШапка = Запрос.Выполнить().Выгрузить();
	Шапка        = ТаблицаШапка[0];

	Если НаАванс И ТаблицаШапка.Количество() > 1 Тогда
		Поставщик  = Шапка.Поставщик;
		Покупатель = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаШапка.ВыгрузитьКолонку("Покупатель"));
	Иначе
		Поставщик  = Шапка.Поставщик;
		Покупатель = Шапка.Покупатель;
	КонецЕсли;

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	СчетФактураВыданныйАвансы.Контрагент КАК Контрагент,
	               |	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	               |	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
	               |	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
	               |	СчетФактураВыданныйАвансы.СтавкаНДС,
	               |	СчетФактураВыданныйАвансы.Номенклатура.Код КАК ТоварКод,
	               |	СчетФактураВыданныйАвансы.Номенклатура.Артикул КАК ТоварАртикул,
	               |	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки
	               |ИЗ
	               |	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	               |ГДЕ
	               |	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
				   |	СчетФактураВыданныйАвансы.Контрагент,
	               |	СчетФактураВыданныйАвансы.СтавкаНДС,
	               |	СчетФактураВыданныйАвансы.Номенклатура,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)),
	               |	СчетФактураВыданныйАвансы.Номенклатура.Код,
	               |	СчетФактураВыданныйАвансы.Номенклатура.Артикул
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Контрагент 			= СтрокаТаблицы.Контрагент;
		Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, НадписьНаименование);
		Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
										?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), НадписьНаименование));
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СуммаВключаетНДС    = Истина;
		Строчка.СтавкаНДС 			= СтрокаТаблицы.СтавкаНДС;
		Строчка.СуммаНДС  			= СтрокаТаблицы.СуммаНДС;
		Строчка.Сумма     			= СтрокаТаблицы.Сумма;
		Строчка.ТоварКод            = СтрокаТаблицы.ТоварКод;
		Строчка.ТоварАртикул        = СтрокаТаблицы.ТоварАртикул;
		Строчка.НомерСтроки         = СтрокаТаблицы.НомерСтроки;
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеСФнаАвансИСуммовуюРазницу()

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

#Если Клиент Тогда
// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 13;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;

	Если Дата < '20040216' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура575";
		Макет = ПолучитьОбщийМакет("СчетФактура575");
	ИначеЕсли Дата < '20060530' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура84";
		Макет = ПолучитьОбщийМакет("СчетФактура84");
	ИначеЕсли Дата < '20090609' Тогда
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура283";
		Макет = ПолучитьОбщийМакет("СчетФактура283");
	Иначе
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура451";
		Макет = ПолучитьОбщийМакет("СчетФактура451");
	КонецЕсли;

	СведенияОбПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
	
	ВыборкаПоТоварам = ДанныеДляПечати.ТабличнаяЧасть.Скопировать();
	ВыборкаПоТоварам.Свернуть("Товар");
	
	Если ВыборкаПоТоварам.Количество() > 0 Тогда
		ТолькоУслуги = Истина;
		Для Каждого СтрокаТовар Из ВыборкаПоТоварам Цикл
			Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура")
			   И Не СтрокаТовар.Товар.Услуга)
			   Тогда
				ТолькоУслуги = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТолькоУслуги = Ложь;
	КонецЕсли;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	
	Если Дата < '20040216' Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                                 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННпоставщика                 = "Идентификационный номер продавца (ИНН): "   + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь); 
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "             + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "              + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		Строка_ПоДокументу = "";
		Для каждого ПараметрыДокуентаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			Строка_ПоДокументу = Строка_ПоДокументу+ ?(ПустаяСтрока(Строка_ПоДокументу), "К платежно-расчетному документу № ",", ")
					+ПараметрыДокуентаОплаты.НомерПлатежноРасчетногоДокумента + " от " + Формат(ПараметрыДокуентаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
		КонецЦикла; 
		Если ПустаяСтрока(Строка_ПоДокументу) Тогда
			Строка_ПоДокументу = "К платежно-расчетному документу № -- от --"
		КонецЕсли; 
		ОбластьМакета.Параметры.ПоДокументу                   = Строка_ПоДокументу;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                    + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		ОбластьМакета.Параметры.ИННПокупателя                 = "Идентификационный номер покупателя (ИНН): " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь);
	Иначе
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Получить();
		Если ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <> '00010101'
			И ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <= Дата Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") + 
																	" (" + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")";
		Иначе
			ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                            + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если  ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика                 = "ИНН/КПП продавца: "                 + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + "-";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "  + "-";
		Иначе
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ?(ДанныеДляПечати.Грузоотправитель = "он же", ДанныеДляПечати.Грузоотправитель, ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,")));
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "  + ?(Не ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,"));
		КонецЕсли;
		Строка_ПоДокументу = "";
		Для каждого ПараметрыДокуентаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			Строка_ПоДокументу = Строка_ПоДокументу+ ?(ПустаяСтрока(Строка_ПоДокументу), "К платежно-расчетному документу № ",", ")
					+ПараметрыДокуентаОплаты.НомерПлатежноРасчетногоДокумента + " от " + Формат(ПараметрыДокуентаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
		КонецЦикла; 
		Если ПустаяСтрока(Строка_ПоДокументу) Тогда
			Строка_ПоДокументу = "К платежно-расчетному документу № -- от --"
		КонецЕсли; 
		ОбластьМакета.Параметры.ПоДокументу                   = Строка_ПоДокументу;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                       + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                            + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
		Если  ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННПокупателя                 = "ИНН/КПП покупателя: "               + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	КонецЕсли;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ПовторятьПриПечатиСтроки =  ТабДокумент.Область("ЗаголовокТаблицы");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Если (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 Или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если Не Строчка.СуммаВключаетНДС тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
			И Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(?(Строчка.Количество = 0, 0, Строчка.СуммаБезНДС / Строчка.Количество), 2);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, СтранаПроисхождения, ПредставлениеСтраны, НомерГТД, ПредставлениеГТД, ЕдиницаИзмерения, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);
		
		Если Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.Россия Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД    = "--";
		КонецЕсли;

		Количество  = Строчка.Количество;

		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			// В счетах-фактурах на аванс колонка 3, 4, 5 не выводится
			ОбластьМакета.Параметры.Стоимость  = 0;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		Иначе
			ОбластьМакета.Параметры.Количество = Количество;
			ОбластьМакета.Параметры.Цена   = Строчка.Цена;
			ОбластьМакета.Параметры.Стоимость  = Строчка.СуммаБезНДС;
		КонецЕсли;	
			
		ОбластьМакета.Параметры.Всего      = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + Строчка.СуммаСНДС;

		ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ВыборкаСтрокТовары.Количество()>0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	Если не Дата < '20040216' Тогда
		ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	КонецЕсли; 
	
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

Функция ПечатьСчетаФактуры1137(ДанныеДляПечати) Экспорт

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 13;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	Макет = ПолучитьОбщийМакет("СчетФактура1137");
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
			Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + Строка(НомерИсправления) 
			+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
 	Иначе 	
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		
	ОбластьМакета.Параметры.АдресПоставщика = "Адрес: "	+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	
	ИндексПодразделения = 0;
	
	Если ИндексПодразделения <> 0 Тогда
		ДанныеДляПечати.Номер = ДанныеДляПечати.Номер + "/" + ИндексПодразделения;
	КонецЕсли;		
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННпоставщика = "ИНН/КПП продавца: " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	ЗаголовокДляПечати = ОбщегоНазначения.СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
		
	Иначе
		
		ТолькоУслуги = Истина;
		Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
			Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга) Тогда
				ТолькоУслуги = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
		Иначе
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
				?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель), Дата);
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата);
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
				"--", 
				?(ДанныеДляПечати.Грузоотправитель = "он же", 
					ДанныеДляПечати.Грузоотправитель, 
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
			
			Если ДанныеДляПечати.Свойство("АдресДоставки") 
				И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
				ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					ДанныеДляПечати.АдресДоставки,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
			Иначе
				ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					"--",
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
				
		КонецЕсли;
	
	КонецЕсли;

	СтрокаПоДокументу = "";
	Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
			И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
		    Продолжить;
		КонецЕсли;
		СтрокаПоДокументу = СтрокаПоДокументу
			+ ?(ПустаяСтрока(СтрокаПоДокументу), "К платежно-расчетному документу № ",", ")
			+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
		
	КонецЦикла; 
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			СтрокаПоДокументу = "К платежно-расчетному документу № -- от --";
		Иначе
			СтрокаПоДокументу = "К платежно-расчетному документу №    от";
		КонецЕсли; 
	КонецЕсли; 
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " 
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = "Адрес: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	
	Если ЗначениеЗаполнено(КППКонтрагента) Тогда
		КПП = КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: "
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код "
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"");		
		
	//Амбер	
	// Заполнение основания
	СсылкаНаОбъект = Ссылка;
	//ЕстьКонтракт =  ?(ЗначениеЗаполнено(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка),ЗначениеЗаполнено(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт), Ложь);
	
	//Если ЗначениеЗаполнено( СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка) Тогда
	//ОбластьМакета.Параметры.Основание  = "Основание: Счет на оплату №" +  ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка) +
	//" от "+ Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Дата,"ДФ=dd.MM.yyyy")+"г. "+
	//?(ЕстьКонтракт, ?(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.Муниципальный," по Муниципальному контракту № "," по Государственному контракту № ")+СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.НомерГосконтракта+
	//" от "+Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ","");
	//
	//Если ЕстьКонтракт и СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ПоГражданскоПравовомуДоговору  тогда
	//	
	//ОбластьМакета.Параметры.Основание  = "Основание: Счет на оплату №" +  ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка) +
	//" от "+ Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Дата,"ДФ=dd.MM.yyyy")+"г. "+
	//?(ЕстьКонтракт, ?(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ПоГражданскоПравовомуДоговору," по Гражданско-правовому договору № "," по Государственному контракту № ")+СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.НомерГосконтракта+
	//" от "+Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ","");
	//	
	//КонецЕсли;

	//Если ЕстьКонтракт и СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ПоДоговору  тогда
	//	
	//ОбластьМакета.Параметры.Основание  = "Основание: Счет на оплату №" +  ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка) +
	//" от "+ Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Дата,"ДФ=dd.MM.yyyy")+"г. "+
	//?(ЕстьКонтракт, ?(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ПоДоговору," по Договору № "," по Государственному контракту № ")+СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.НомерГосконтракта+
	//" от "+Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ","");
	//	
	//КонецЕсли;	
	//
	//Если ЕстьКонтракт и СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ПоКонтракту  тогда
	//	
	//ОбластьМакета.Параметры.Основание  = "Основание: Счет на оплату №" +  ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка) +
	//" от "+ Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Дата,"ДФ=dd.MM.yyyy")+"г. "+
	//?(ЕстьКонтракт, ?(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ПоКонтракту," по Контракту № "," по Государственному контракту № ")+СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.НомерГосконтракта+
	//" от "+Формат(СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт.ДатаГосконтакта,"ДФ=dd.MM.yyyy")+"г. ","");
	//	
	//КонецЕсли;	

	//
	//Иначе
	//ОбластьМакета.Параметры.Основание  = "Основание: " +  СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.ДоговорКонтрагента;
	//КонецЕсли;
	//
	//	КонецЕсли;
	///Амбер
	
	Если СсылкаНаОбъект.ДокументыОснования.Количество() > 0 Тогда
		ЗначениеПоУмолчанию = СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.ДоговорКонтрагента;
		Сделка = СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка; 
		ОбластьМакета.Параметры.Основание = "Основание: " + УчетНДС.мшЗаполнитьОснование(Сделка, ЗначениеПоУмолчанию);
	КонецЕсли;


	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
 	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);

		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС;
			Если НЕ Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		Иначе
			Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;
	    
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
		|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС");
	
	// Выводим строки таблицы
	 //Амбер // Миша править
	 //Выгрузим в табицу значений данные по замене наименований и единиц измерения из контракта.
	
 	 //ИспользоватьЗаменуПоКонтракту = Ложь; 
	 
	//Миша 
	СсылкаНаОбъект = Ссылка;
	ЕстьКонтракт =  ?(ЗначениеЗаполнено(Сделка),ЗначениеЗаполнено(Сделка.Контракт), Ложь);
		
	Если ЕстьКонтракт тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		              |	КонтрактТовары.НаименованиеДляДокументов,
		              |	ПРЕДСТАВЛЕНИЕ(КонтрактТовары.Номенклатура.Наименование) КАК НаименованиеПолное,
		              |	КонтрактТовары.ЕдиницаИзмерения
		              |ИЗ
		              |	Документ.Контракт.Товары КАК КонтрактТовары
		              |ГДЕ
		              |	КонтрактТовары.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Сделка.Контракт );

		Результат = Запрос.Выполнить();
		ТаблицаСЗаменойНоменклатуры = Результат.Выгрузить();
	КонецЕсли;
    ///Миша

	 //Если ЕстьКонтракт тогда
	 //	  Запрос = Новый Запрос;
	 //	  Запрос.Текст = "ВЫБРАТЬ
	 //					 |	КонтрактТовары.НаименованиеДляДокументов,
	 //					 |	ПРЕДСТАВЛЕНИЕ(КонтрактТовары.Номенклатура.Наименование) КАК НаименованиеПолное,
	 //					 |	КонтрактТовары.ЕдиницаИзмерения
	 //					 |ИЗ
	 //					 |	Документ.Контракт.Товары КАК КонтрактТовары
	 //					 |ГДЕ
	 //					 |	КонтрактТовары.Ссылка = &Ссылка";
	 //	  
	 //	  Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.ДокументыОснования[0].ДокументОснование.Сделка.Контракт );
	 //	  
	 //	  Результат = Запрос.Выполнить();
	 //	  Выборка = Результат.Выбрать();
	 //	  ИспользоватьЗаменуПоКонтракту = Ложь;
	 //	  
	 //	  //Пока Выборка.Следующий() Цикл
	 //	  //  Если Не Выборка.НаименованиеДляДокументов="" Тогда
	 //	  	  ИспользоватьЗаменуПоКОнтракту = Истина;		   	
	 //	  //	 КонецЕсли;
	 //	  //КонецЦикла;
	 //   	  //Если ИспользоватьЗаменуПоКонтракту ТОгда
	 //   		ТаблицаСЗаменойНоменклатуры = Результат.Выгрузить();
	 //   	//КонецЕсли;   
	 //	  
	 //КонецЕсли; 
	 

	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		
		
		//ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		//Заменим наименование на контрактное
		НаименованиеТовараСтроки = СокрЛП(Строчка.Товар.Наименование);
		
		//Миша                  
		//Если есть контракт и в выборке из запроса поле НаименованиеПолное соответствует значению 
		//Наименования из Строчки, то заменяем его
		Если ЕстьКонтракт тогда
			НайденнаяСтрока = ТаблицаСЗаменойНоменклатуры.Найти(НаименованиеТовараСтроки,"НаименованиеПолное");	
			Если Не НайденнаяСтрока = Неопределено тогда
				//Переименуем таблицу измерения
				НаименованиеЕдиницыСтроки = Строка(НайденнаяСтрока.ЕдиницаИзмерения);
				ОбластьМакета.Параметры.ЕдиницаИзмерения = НаименованиеЕдиницыСтроки;
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НайденнаяСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
				Если Не НайденнаяСтрока.НаименованиеДляДокументов = "" тогда
					НаименованиеТовараСтроки = НайденнаяСтрока.НаименованиеДляДокументов;
					ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(НаименованиеТовараСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		///Миша
		
		
		//Амбер 
		//Пробуем найти в таблице замены альтиернативное наименование
		//Если ИспользоватьЗаменуПоКонтракту Тогда
		//	НайденнаяСтрока = ТаблицаСЗаменойНоменклатуры.Найти(НаименованиеТовараСтроки,"НаименованиеПолное");
		//	Если не НайденнаяСтрока = Неопределено тогда
		//		//Переименуем единицу измерения
		//		НаименованиеЕдиницыСтроки = Строка(НайденнаяСтрока.ЕдиницаИзмерения);
		//		ОбластьМакета.Параметры.ЕдиницаИзмерения = НаименованиеЕдиницыСтроки;
		//		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = НайденнаяСтрока.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
		//		//Переименуем полное наименование
		//		Если не НайденнаяСтрока.НаименованиеДляДокументов = ""  тогда
		//			НаименованиеТовараСтроки= НайденнаяСтрока.НаименованиеДляДокументов;
		//			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(НаименованиеТовараСтроки);
		//			//?(Строчка.ПредставлениеГТД="",""," ("+СокрЛП(Строчка.ПредставлениеГТД)+", "+СокрЛП(Строчка.ПредставлениеСтраны)+")");
		//		КонецЕсли;
		//	КонецЕсли;	
		//КонецЕсли;	
		///Амбер
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		Иначе
			ОбластьМакета.Параметры.Стоимость = 0;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		КонецЕсли;	
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			ОбластьМакета.Параметры.Стоимость  = "--";
			ОбластьМакета.Параметры.Акциз      = "--";
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмерения = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
				ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
				ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
				ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаБезНДС");
	КонецЕсли;
	Если СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ВыборкаСтрокТовары.Итог("СуммаСНДС");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
    	
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
	Если ЭтоПБОЮЛ(ДанныеДляПечати.Поставщик) Тогда
		ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "";
	КонецЕсли;
	
	ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОПоставщике, "Свидетельство,");
		Если Организация.Префикс = "Е" тогда
		
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя ="Соколова В.В. ПРИКАЗ №3 от 12.11.12";		
		ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "Соколова В.В. ПРИКАЗ №3 от 12.11.12";
		
	ИначеЕсли Организация.Префикс = "В" тогда
		
		Если Ссылка.Дата > Дата("20160201") Тогда
			ОбластьМакетаПодвал.Параметры.ФИОРуководителя ="Инягина И.В. ПРИКАЗ №1 от 01.02.16";		
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "Инягина И.В. ПРИКАЗ №1 от 01.02.16";	
		Иначе
			ОбластьМакетаПодвал.Параметры.ФИОРуководителя ="Алиева В.Ю. ПРИКАЗ №1 от 11.01.09";		
			ОбластьМакетаПодвал.Параметры.ФИОГлавногоБухгалтера = "Алиева В.Ю. ПРИКАЗ №1 от 11.01.09";	
		КонецЕсли;

		
		

	КонецЕсли;		
	

	ТабДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабДокумент.ВерхнийКолонтитул.Выводить          = Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  = "Лист [&НомерСтраницы]";

	Возврат ТабДокумент;

КонецФункции


Функция ПечатьКорректировочногоСчетаФактуры(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;

	Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура");
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировочныйСчетФактура";
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента, """") КАК НомерИсходногоДокумента,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента, """") КАК ДатаИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|			И (СчетФактураВыданныйДокументыОснования.НомерСтроки = 1)
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	РеквизитыСФ = Новый Структура("Номер,Дата,НомерИсходногоДокумента,ДатаИсходногоДокумента");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСФ, Выборка);
	КонецЕсли;
	
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
		ДанныеДляПечати.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
		ДанныеДляПечати.Поставщик, РеквизитыСФ.Дата);
	
	// Выводим шапку
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	
	ОбластьМакета.Параметры.НомерСчетаФактуры = РеквизитыСФ.НомерИсходногоДокумента;
	ОбластьМакета.Параметры.ДатаСчетаФактуры  = Формат(РеквизитыСФ.ДатаИсходногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ЮридическийАдрес,");
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеДляПечати.ТабличнаяЧасть Цикл 
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;	
		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "Без налога (НДС)";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;	
		
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУменьшение");
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение    = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУвеличение");
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУменьшение");
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   	 = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУвеличение");
	ОбластьМакета.Параметры.РазницаНДСУменьшение    = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУменьшение");
	ОбластьМакета.Параметры.РазницаНДСУвеличение       = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУвеличение");
    	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции

Функция ПечатьКорректировочногоСчетаФактуры1137(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева  	= 0;
	ТабДокумент.ПолеСнизу  	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	ТабДокумент.АвтоМасштаб	= Истина;
	
	Если УчетНДС.ПрименяетсяПостановление952(Дата) Тогда
		Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура952");
	Иначе
		Макет = ПолучитьОбщийМакет("КорректировочныйСчетФактура1137");
	КонецЕсли;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировочныйСчетФактура1137";
	
	РеквизитыСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
		"Номер,Дата,
		|Исправление,НомерИсправления,
		|НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента,
		|СчетФактураБезНДС, КППКонтрагента");

	ЗапросРеквизитовОснований = Новый Запрос();
	ЗапросРеквизитовОснований.Параметры.Вставить("Ссылка", Ссылка);
	ЗапросРеквизитовОснований.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента КАК НомерСчетаФактуры,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаСчетаФактуры,
	|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправления,
	|	МИНИМУМ(СчетФактураВыданныйДокументыОснования.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	КорректируемыеСчетаФактуры = ЗапросРеквизитовОснований.Выполнить().Выгрузить();

	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, РеквизитыСФ.Дата);
	СведенияОПоставщике  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, РеквизитыСФ.Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
		РеквизитыПокупателя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент, ОбособленноеПодразделение");
		Если РеквизитыПокупателя.ОбособленноеПодразделение И ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
			СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, РеквизитыСФ.Дата);
			СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, РеквизитыСФ.Дата);	
		КонецЕсли;
	КонецЕсли;
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.Номер = РеквизитыСФ.НомерИсправляемогоКорректировочногоДокумента;
		ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.ДатаИсправляемогоКорректировочногоДокумента, "ДФ='дд ММММ гггг'") + " г.";
	Иначе
		ОбластьМакета.Параметры.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
		ОбластьМакета.Параметры.Дата  = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;
	
	РеквизитыОснований = "";
	Для Каждого РеквизитыСчетаФактуры Из КорректируемыеСчетаФактуры Цикл
		Если НЕ РеквизитыСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента 
			ИЛИ РеквизитыСчетаФактуры.НомерИсправления = 0 Тогда
			НомерИсправленияСчетаФактуры = "--";
		Иначе
			НомерИсправленияСчетаФактуры = Формат(РеквизитыСчетаФактуры.НомерИсправления, "ЧЦ=3; ЧГ=0");
		КонецЕсли;
		РеквизитыОснований = РеквизитыОснований + ?(РеквизитыОснований = "", "", ", ") 
				+ "№ "+РеквизитыСчетаФактуры.НомерСчетаФактуры+" от "+Формат(РеквизитыСчетаФактуры.ДатаСчетаФактуры,"ДЛФ=ДД; ДП=--")+", с учетом исправления № "
				+НомерИсправленияСчетаФактуры+" от "+Формат(РеквизитыСчетаФактуры.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		
	КонецЦикла;
	
	ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
	
	Если РеквизитыСФ.НомерИсправления = 0 
		ИЛИ НЕ РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = "--";
	Иначе
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = РеквизитыСФ.НомерИсправления;
	КонецЕсли;
	Если НЕ РеквизитыСФ.Исправление Тогда
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = "--";
	Иначе
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(РеквизитыСФ.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;
	
	ОбластьМакета.Параметры.НаименованиеПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПродавца = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике,  "ЮридическийАдрес,");

	ОбластьМакета.Параметры.НаименованиеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ЮридическийАдрес,");
	
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППродавца = ""
		+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
	
	Если ЗначениеЗаполнено(РеквизитыСФ.КППКонтрагента) Тогда
		КПП = РеквизитыСФ.КППКонтрагента;
	ИначеЕсли СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННКПППокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "ИНН,", Ложь) + КПП;
	
	ОбластьМакета.Параметры.Валюта = ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
		"Валюта: наименование, код " + ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, 
		"Валюта: наименование, код");		
		
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеДляПечати.ТабличнаяЧасть Цикл 
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаименованиеТовара) Тогда
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.НаименованиеТовара;               
		Иначе
			ОбластьМакета.Параметры.НаименованиеНоменклатуры = СтрокаТабличнойЧасти.Номенклатура;               
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
			ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
		КонецЕсли;	
		       		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
			ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
		КонецЕсли;	
		          		
		Если СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
			ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
			ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
			ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
				
	КонецЦикла;	
		
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	                                    
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУменьшение");
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаБезНДСУвеличение");
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУменьшение");
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаСНДСУвеличение");
	Если РеквизитыСФ.СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "без НДС";
	Иначе
		ОбластьМакета.Параметры.РазницаНДСУменьшение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУменьшение");
		ОбластьМакета.Параметры.РазницаНДСУвеличение = ДанныеДляПечати.ТабличнаяЧасть.Итог("РазницаНДСУвеличение");
	КонецЕсли;
    	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);	
	Если ЭтоПБОЮЛ(ДанныеДляПечати.Поставщик) Тогда
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = "";
	КонецЕсли;
	ОбластьМакета.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции

// Функция формирует табличный документ с печатной формой универсального передаточного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального передаточного документа
//
Функция ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент = Неопределено) Экспорт

	Макет = ПолучитьОбщийМакет("УниверсальныйПередаточныйДокумент");
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	
	УчетНДС.ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	УчетНДС.ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьУниверсальногоПередаточногоДокумента

// Функция формирует табличный документ с печатной формой универсального корректировочного документа
//
// Возвращаемое значение:
//  Табличный документ - печатная форма универсального корректировочного документа
//
Функция ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДляПечати, ТабДокумент = Неопределено) Экспорт
	
	Таблица = ДанныеДляПечати.ТабличнаяЧасть;
	
	СуммаУменьшения = Таблица.Итог("РазницаБезНДСУменьшение") + Таблица.Итог("РазницаСНДСУменьшение") + Таблица.Итог("РазницаНДСУменьшение");
	СуммаУвеличения = Таблица.Итог("РазницаБезНДСУвеличение") + Таблица.Итог("РазницаСНДСУвеличение") + Таблица.Итог("РазницаНДСУвеличение");
	
	Если СуммаУменьшения = 0 И СуммаУвеличения = 0 Тогда
		ТекстСообщения = "Печать универсального корректировочного документа без изменения суммовых показателей не возможна!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда		
		ТабДокумент = Новый ТабличныйДокумент;
		
		// Устанавливаем параметры печати и колонтитулы
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху = 12;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("УниверсальныйКорректировочныйДокумент");
	
	УчетНДС.ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	УчетНДС.ВывестиПодвалУниверсальногоКорректировочногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;

КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	ИначеЕсли СформированПриВводеНачальныхОстатковНДС Тогда
		Предупреждение("Печать сформированных при вводе начальных остатков документов не поддерживается!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ИмяМакета, "СчетФактура") <> 0 Тогда
		
		ДанныеДляПечати     = Неопределено;
		УчетнаяПолитика     = Неопределено;
		ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
		Корректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;

		СобратьДанныеДляПечати(ДанныеДляПечати, УчетнаяПолитика);
		
		Если ДанныеДляПечати = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для печати счета-фактуры.");
			Возврат;
		Иначе
			ДанныеДляПечати.Вставить("КППКонтрагента", КППКонтрагента);
		КонецЕсли;
		
		Если ВерсияПостановления = 2 Тогда			
			Если Корректировочный Тогда
				ТабДокумент = ПечатьКорректировочногоСчетаФактуры1137(ДанныеДляПечати);
			Иначе
				ТабДокумент = ПечатьСчетаФактуры1137(ДанныеДляПечати);
			КонецЕсли;
		Иначе
			Если Корректировочный Тогда
				ТабДокумент = ПечатьКорректировочногоСчетаФактуры(ДанныеДляПечати);
			Иначе
				ТабДокумент = ПечатьСчетаФактуры(ДанныеДляПечати);
			КонецЕсли;			
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" Тогда
		
		Если Дата < УчетНДС.ДатаНачалаПримененияУПД() Тогда
			Предупреждение("Применение формы универсального передаточного (отгрузочного) документа возможно только с "+УчетНДС.ДатаНачалаПримененияУПД(Истина)+"!");
			Возврат;
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Предупреждение("Форма универсального передаточного (отгрузочного) документа не предназначена для корректировочных счетов-фактур!");
			Возврат;
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			Предупреждение("Форма универсального передаточного документа не применяется для счетов-фактур на аванс");
			Возврат;
		КонецЕсли;

		Если ПометкаУдаления Тогда
			Предупреждение("Форма универсального передаточного (отгрузочного) документа не предназначена для помеченных на удаление документов!");
			Возврат;
		КонецЕсли;

		ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента();
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ТабДокумент = ПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
		
	ИначеЕсли ИмяМакета = "УниверсальныйКорректировочныйДокумент" Тогда
		
		Если Дата < '20130101' Тогда
			Предупреждение("Применение формы универсального корректировочного документа возможно только с 01 января 2013 года");
			Возврат;
		КонецЕсли;
		
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Предупреждение("Форма универсального корректировочного документа применяется только для корректировочных счетов-фактур");
			Возврат;
		КонецЕсли;
		
		Если ПометкаУдаления Тогда
			Предупреждение("Форма универсального корректировочного документа не предназначена для помеченных на удаление документов");
			Возврат;
		КонецЕсли;
		
		ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(Ссылка);
		
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;		

		ПечатьУниверсальногоКорректировочногоДокумента(ДанныеДляПечати,ТабДокумент);

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура 283");
		СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура 575");
		СтруктураМакетов.Вставить("СчетФактура84" , "Счет-фактура 84");
	Иначе
		Если Дата < '20040216' Тогда
			СтруктураМакетов.Вставить("СчетФактура575", "Счет-фактура");
		ИначеЕсли Дата < '20060530' Тогда
			СтруктураМакетов.Вставить("СчетФактура84", "Счет-фактура");
		ИначеЕсли Дата < УчетНДС.ДатаНачалаПримененияУПД() Тогда
			СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
		Иначе
			СтруктураМакетов.Вставить("СчетФактура283", "Счет-фактура");
			СтруктураМакетов.Вставить("УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)");
			СтруктураМакетов.Вставить("УниверсальныйКорректировочныйДокумент", "Универсальный корректировочный документ (УКД)");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

Функция ПолучитьДанныеСводногоСчетаФактуры(СтруктураШапкиДокумента) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.ВидСчетаФактуры,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Реквизиты.Организация.КПП
	|		КОГДА Реквизиты.КППКонтрагента ПОДОБНО """"
	|			ТОГДА Реквизиты.Контрагент.КПП
	|		ИНАЧЕ Реквизиты.КППКонтрагента
	|	КОНЕЦ КАК КППКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Продавец,
	|	Реквизиты.Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ВЫБОР
	|		КОГДА Реквизиты.СчетФактураНеВыставляется
	|			ТОГДА Реквизиты.Дата
	|		ИНАЧЕ Реквизиты.ДатаВыставления
	|	КОНЕЦ КАК ДатаВыставленияПолучения,
	|	ВЫБОР
	|		КОГДА Реквизиты.КодСпособаВыставления = 0
	|			ТОГДА 1
	|		ИНАЧЕ Реквизиты.КодСпособаВыставления
	|	КОНЕЦ КАК КодСпособаВыставленияПолучения,
	|	Реквизиты.КодВидаОперации КАК КодВидаОперации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СуммаДокумента КАК СуммаПоСчетуФактуре,
	|	Реквизиты.СуммаНДСДокумента КАК СуммаНДС,
	|	Реквизиты.СуммаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	Реквизиты.СуммаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	Реквизиты.СуммаНДСУменьшение КАК СуммаНДСРазницаУменьшение,
	|	Реквизиты.СуммаНДСУвеличение КАК СуммаНДСРазницаУвеличение,
	|	Реквизиты.СчетФактураБезНДС КАК ПоСтавкеБезНДС,
	|	Реквизиты.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	Реквизиты.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Реквизиты.ДокументОснование) = ТИП(Документ.ОтчетКомиссионераОПродажах)
	|			ТОГДА ВЫРАЗИТЬ(Реквизиты.ДокументОснование КАК Документ.ОтчетКомиссионераОПродажах).Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Посредник,
	|	Реквизиты.СуммаДокументаКомиссия,
	|	Реквизиты.СуммаНДСДокументаКомиссия,
	|	Реквизиты.СуммаУменьшениеКомиссия,
	|	Реквизиты.СуммаУвеличениеКомиссия,
	|	Реквизиты.СуммаНДСУменьшениеКомиссия,
	|	Реквизиты.СуммаНДСУвеличениеКомиссия,
	|	Реквизиты.СводныйКомиссионный
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаписьЖурналаУчетаСчетовФактур
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументыОснования
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель.КПП КАК КПППокупателя,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма,
	|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДС) КАК СуммаНДС,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура,
	|	ОтчетКомиссионераОПродажахПокупатели.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_СчетаФактурыКомиссионеру
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
	|			И ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка ЕСТЬ НЕ NULL 
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.ВыписыватьСчетаФактурыСводно
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &Ссылка
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель.КПП,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура,
	|	ОтчетКомиссионераОПродажахПокупатели.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйАвансы.Контрагент,
	|	СчетФактураВыданныйАвансы.Контрагент.КПП КАК КППКонтрагента,
	|	СчетФактураВыданныйАвансы.Ссылка.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйАвансы.Ссылка.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйАвансы.Сумма КАК Сумма,
	|	СчетФактураВыданныйАвансы.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданныйАвансы.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Авансы
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	|ГДЕ
	|	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	|	И СчетФактураВыданныйАвансы.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|	И СчетФактураВыданныйАвансы.Ссылка.СводныйКомиссионный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ВидСчетаФактуры,
	|	Реквизиты.Регистратор,
	|	ЕСТЬNULL(ВТ_Авансы.Контрагент, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.Покупатель, Реквизиты.Контрагент)) КАК Контрагент,
	|	ЕСТЬNULL(ВТ_Авансы.КППКонтрагента, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.КПППокупателя, Реквизиты.КППКонтрагента)) КАК КППКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Продавец,
	|	Реквизиты.СчетФактура,
	|	Реквизиты.ЧастьЖурнала,
	|	Реквизиты.ДатаВыставленияПолучения,
	|	Реквизиты.КодСпособаВыставленияПолучения КАК КодСпособаПолучения,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Авансы.Сумма ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_Авансы.Сумма
	|			КОГДА ВТ_СчетаФактурыКомиссионеру.Сумма ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_СчетаФактурыКомиссионеру.Сумма
	|			ИНАЧЕ Реквизиты.СуммаПоСчетуФактуре
	|		КОНЕЦ) КАК СуммаПоСчетуФактуре,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Авансы.СуммаНДС ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_Авансы.СуммаНДС
	|			КОГДА ВТ_СчетаФактурыКомиссионеру.СуммаНДС ЕСТЬ НЕ NULL 
	|				ТОГДА ВТ_СчетаФактурыКомиссионеру.СуммаНДС
	|			ИНАЧЕ Реквизиты.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДС,
	|	Реквизиты.ПоСтавкеБезНДС КАК ПоСтавкеБезНДС,
	|	Реквизиты.СчетФактураНеВыставляется,
	|	ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.НомерСтроки, ЕСТЬNULL(ВТ_Авансы.НомерСтроки, 0)) КАК ИндексСтроки,
	|	Реквизиты.Посредник,
	|	НЕОПРЕДЕЛЕНО КАК СчетФактураВыданныйПокупателю,
	|	НЕОПРЕДЕЛЕНО КАК Субкомиссионер,
	|	НЕОПРЕДЕЛЕНО КАК КодВидаСделки,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактурыПродавца,
	|	СУММА(Реквизиты.СуммаНДСДокументаКомиссия) КАК СуммаНДСКомиссия,
	|	СУММА(Реквизиты.СуммаДокументаКомиссия) КАК СуммаПоСчетуФактуреКомиссия,
	|	СУММА(0) КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	СУММА(0) КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	СУММА(0) КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	СУММА(0) КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	НЕОПРЕДЕЛЕНО КАК КодВидаОперацииКомиссия
	|ИЗ
	|	ВременнаяТаблицаЗаписьЖурналаУчетаСчетовФактур КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Авансы КАК ВТ_Авансы
	|		ПО (Реквизиты.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс))
	|			И (Реквизиты.СводныйКомиссионный)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыКомиссионеру КАК ВТ_СчетаФактурыКомиссионеру
	|		ПО Реквизиты.СчетФактура = ВТ_СчетаФактурыКомиссионеру.СчетФактура
	|			И (Реквизиты.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию))
	|
	|СГРУППИРОВАТЬ ПО
	|	Реквизиты.Посредник,
	|	Реквизиты.ПоСтавкеБезНДС,
	|	Реквизиты.СчетФактураНеВыставляется,
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ВидСчетаФактуры,
	|	Реквизиты.Регистратор,
	|	ЕСТЬNULL(ВТ_Авансы.Контрагент, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.Покупатель, Реквизиты.Контрагент)),
	|	ЕСТЬNULL(ВТ_Авансы.КППКонтрагента, ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.КПППокупателя, Реквизиты.КППКонтрагента)),
	|	Реквизиты.СчетФактура,
	|	Реквизиты.ЧастьЖурнала,
	|	Реквизиты.ДатаВыставленияПолучения,
	|	Реквизиты.ВалютаДокумента,
	|	ЕСТЬNULL(ВТ_СчетаФактурыКомиссионеру.НомерСтроки, ЕСТЬNULL(ВТ_Авансы.НомерСтроки, 0)),
	|	Реквизиты.КодСпособаВыставленияПолучения";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование)
	
	ДокументОбъект = ТекущееОснование.ПолучитьОбъект();
	ЕстьДокументыРасчетов = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено;
	
	// Вычислим курс документа для печати
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета
		И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
		И ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
		И ЕстьДокументыРасчетов Тогда
				
		ИмяДокумента = ДокументОбъект.Метаданные().Имя;		
		
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", ТекущееОснование);
		ЗапросКурсАванса.Текст =
		"ВЫБРАТЬ
		|	Док.СуммаВзаиморасчетов,
		|	Док.СуммаРегл
		|ИЗ 
		|	Документ." + ИмяДокумента + ".ДокументыРасчетовСКонтрагентом КАК Док
		|ГДЕ Док.Ссылка = &ДокументСсылка
		|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл/Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект),
		ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
		ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета), ТекущееОснование.КурсВзаиморасчетов,
		ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета), ТекущееОснование.КратностьВзаиморасчетов);
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * ТекущееОснование.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			Курс = ТекущееОснование.КурсВзаиморасчетов;
			Кратность = ТекущееОснование.КратностьВзаиморасчетов;
		Иначе
			Курс = КурсДляПечати;
			Кратность = 1;
		КонецЕсли;
		
	Иначе
		
		Курс = ЗаполнениеДокументов.КурсДокумента(ТекущееОснование.ПолучитьОбъект(), мВалютаРегламентированногоУчета);
		Кратность = ЗаполнениеДокументов.КратностьДокумента(ТекущееОснование.ПолучитьОбъект(), мВалютаРегламентированногоУчета);
		
	КонецЕсли;
			
	Для Каждого СтрокаСчетаФактуры Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		
		СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма * Курс / Кратность;
		СтрокаСчетаФактуры.СуммаНДС = СтрокаСчетаФактуры.СуммаНДС * Курс / Кратность;
		
	КонецЦикла;
	ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(0, "Цена");
		
КонецПроцедуры

// Сравнивает дату счета-фактуры и документов оснований
Функция ПроверитьДатуСчетаФактуры(СообщениеПользователю) Экспорт
	
	СписокДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// 	Для счетов-фактур, введенных по отчету комиссионера соответствие дат не проверяем
	Если ТипЗнч(СписокДокументов[0]) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		И УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	СообщениеПользователю = "";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ДатаСчетаФактуры", Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(ДокументОснованиеСФ.Ссылка) КАК ПредставлениеДокумента,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ) < НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаСФМеньше,
	               |	ВЫБОР
	               |		КОГДА НАЧАЛОПЕРИОДА(ДокументОснованиеСФ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаСчетаФактуры, ДЕНЬ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДатаНеРавнаСФ
	               |ИЗ
	               |	Документ." + СписокДокументов[0].Метаданные().Имя + " КАК ДокументОснованиеСФ
	               |ГДЕ
	               |	ДокументОснованиеСФ.Ссылка В (&СписокДокументов)";
								  
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Результат.Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Если Результат.ДатаНеРавнаСФ Тогда
			СообщениеПользователю = "Дата счета-фактуры не равна дате документа-основания";
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Пока Результат.Следующий() Цикл
			Если Результат.ДатаСФМеньше Тогда
				СообщениеПользователю = СообщениеПользователю + Символы.ПС + Результат.ПредставлениеДокумента;
			КонецЕсли;
		КонецЦикла;
		Если СообщениеПользователю <> "" Тогда
			СообщениеПользователю = "Дата счета-фактуры меньше даты документов-оснований:" + СообщениеПользователю;
			Возврат Ложь;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура СобратьДанныеДляПечати(ДанныеДляПечати, УчетнаяПолитика) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Корректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	ДанныеДляПечати = Неопределено;
	
	Для Каждого СтрДокОснования Из ДокументыОснования Цикл
		// Получить экземпляр документа на печать
		Если Не ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
			Продолжить;
		ИначеЕсли Не СтрДокОснования.ДокументОснование.Проведен Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиПоДокументу(СтрДокОснования.ДокументОснование);
		
		Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
			
			ЭкземплярДанныхДляПечати.Вставить("ВидСчетаФактуры", ВидСчетаФактуры);
			
			Если ДанныеДляПечати = Неопределено Тогда
				ДанныеДляПечати = ЭкземплярДанныхДляПечати;
			Иначе
				Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
					
					Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
						СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
						НоваяТабЧасть = СтрДанных.Значение;
						
						Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
							СтрокаТабЧасти = СтараяТабЧасть.Добавить();
							
							Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
								Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
									СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
						
					Иначе
						Если Не ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
			
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДатОплат = ДатаНомерДокументовОплаты.Выгрузить();
	ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
	СтрокиКУдалению = Новый массив();
	Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
		Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
			и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
			СтрокиКУдалению.Добавить(СтрокаОплат);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДатОплат.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
	
	Если Корректировочный И ДанныеДляПечати <> Неопределено Тогда
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		+"НаименованиеТовара,"
		+"Серия,"
		+"Характеристика,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
	КонецЕсли; 	

КонецПроцедуры

Функция СобратьДанныеДляПечатиПоДокументу(ДокОснование, ДанныеСчетаФактуры = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Корректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;

	ТипОснования = ТипЗнч(ДокОснование);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансИСуммовуюРазницу(ДокОснование);
	ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомитентуОПродажах(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомиссионераОПродажах(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если Корректировочный Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДокОснование, Ссылка);
		Иначе
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиИсправленияСчетаФактуры(ДокОснование, Ссылка);
		КонецЕсли;
	Иначе
		ЭкземплярДанныхДляПечати = Неопределено;
	КонецЕсли;
	
	Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
		Если ВерсияПостановления = 2 И ВалютаДокумента <> мВалютаРегламентированногоУчета И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ПерезаполнитьСуммыПоУЕвРублях(ЭкземплярДанныхДляПечати, ДокОснование);
			ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСчетаФактуры <> Неопределено Тогда
		ЭкземплярДанныхДляПечати.Вставить("Номер",            ДанныеСчетаФактуры.Номер);
		ЭкземплярДанныхДляПечати.Вставить("Дата",             ДанныеСчетаФактуры.Дата);
		ЭкземплярДанныхДляПечати.Вставить("НомерПРД",         ДанныеСчетаФактуры.НомерПлатежноРасчетногоДокумента);
		ЭкземплярДанныхДляПечати.Вставить("ДатаПРД",          ДанныеСчетаФактуры.ДатаПлатежноРасчетногоДокумента);
	КонецЕсли;
	
	Возврат ЭкземплярДанныхДляПечати;
	
КонецФункции

Функция ПроверитьВозможностьЗаписиСФ(Отказ, УдалятьЛишниеСтроки = Ложь) Экспорт
	
	Отказ = Ложь;
	
	СтрокаСообщения = "";
	СтруктураОтбора = Новый Структура("ВидСчетаФактуры, ПометкаУдаления, Контрагент, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура", 
		ВидСчетаФактуры, Ложь, Контрагент, ДоговорКонтрагента, НомерИсправления, ИсправляемыйСчетФактура);
		
	Если Исправление Тогда
		
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
		
		Если НЕ СуществующийСФ = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СуществующийСФ, "НомерИсправления, ИсправляемыйСчетФактура"); 
			Если Реквизиты.НомерИсправления = НомерИсправления
				И Реквизиты.ИсправляемыйСчетФактура = ИсправляемыйСчетФактура Тогда
				
				СтрокаСообщения = "На основании документа «" + ИсправляемыйСчетФактура + "» уже введен исправленный счет-фактура "
				+ Символы.ПС + "«" +Строка(СуществующийСФ) + "» с номером исправления «" + НомерИсправления + "»";
				
				Отказ = Истина;
				Возврат СтрокаСообщения;
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		// Для СФ на аванс возможна выписка нескольких СФ (разные договора и ставки НДС).
		СтруктураОтбора.Вставить("СтавкиНДС", Авансы.ВыгрузитьКолонку("СтавкаНДС"));
		СтруктураОтбора.Вставить("Контрагент", Контрагент);
		
		Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтруктураОтбора.Вставить("Дата", Дата);
		КонецЕсли; 
					
		СуществующийСФ = Неопределено;
		ИсключитьСФ = Новый Массив;
		ИсключитьСФ.Добавить(Ссылка);
		СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		Пока СуществующийСФ <> Неопределено Цикл
			СтавкиНДС = "";
			СтрокиКУдалению = Новый Массив;
			Для Каждого СтрокаТаблицы Из СуществующийСФ.Авансы Цикл
				СтавкиНДС = СтавкиНДС + ?(СтавкиНДС = "", "", ", ") + СтрокаТаблицы.СтавкаНДС;
				Если УдалятьЛишниеСтроки Тогда
					СтрокиОтбора = Авансы.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицы.СтавкаНДС));
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокиКУдалению.Добавить(СтрокаОтбора);
					КонецЦикла;
					СтрокиКУдалению = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтрокиКУдалению);
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура на аванс 
			|по договору «"+ДоговорКонтрагента+"» со ставками НДС "+СтавкиНДС+":"+Символы.ПС
			+ " - «"+ Строка(СуществующийСФ)+"»";
			
			Если УдалятьЛишниеСтроки Тогда
				Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
					Авансы.Удалить(СтрокаКУдалению);
				КонецЦикла;                                                         
				Сумма = Авансы.Итог("Сумма");
				СуммаДокумента = Сумма;
			КонецЕсли;
			Отказ = Отказ Или Не (УдалятьЛишниеСтроки И Авансы.Количество() <> 0);
			ИсключитьСФ.Добавить(СуществующийСФ);
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументыОснования[0].ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, ИсключитьСФ);
		КонецЦикла;
	Иначе
		СтрокаСообщенияНеНуженСчетФактура = "";
		Для каждого ТекущееОснование Из ДокументыОснования Цикл
			
			Попытка ВидДокумента = ТекущееОснование.ДокументОснование.Метаданные().Имя Исключение КонецПопытки;
			Если ВидДокумента = "ОтчетКомиссионераОПродажах" Тогда
				Продолжить;
			КонецЕсли;
			
			//Проверка наличия других счетов-фактур на основании документа
			СуществующийСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(ТекущееОснование.ДокументОснование, "СчетФактураВыданный", СтруктураОтбора, Ссылка);
			
			Если не СуществующийСФ = неопределено Тогда
				Если ПустаяСтрока(СтрокаСообщения) Тогда
					СтрокаСообщения = "Для указанного документа-основания уже введен счет-фактура:";
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения +Символы.ПС+" - "+?(ДокументыОснования.Количество()>1," строка № "+ТекущееОснование.НомерСтроки+": для «"+ТекущееОснование.ДокументОснование+"» зарегистрирован счет-фактура ","")+" «"+СуществующийСФ+"»";
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаСообщения) Тогда
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Запись еще одного документа ""Счет-фактура выданный"" не допускается!"
	КонецЕсли;
	Если Не ПустаяСтрока(СтрокаСообщенияНеНуженСчетФактура) Тогда
		СтрокаСообщения = СтрокаСообщения + СтрокаСообщенияНеНуженСчетФактура;
	КонецЕсли;
	
	Возврат СтрокаСообщения;

КонецФункции // ПроверитьВозможностьЗаписиСФ()
 
// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияСчетФактураВыданныйНаАванс(СтруктураШапкиДокумента, ТаблицаПоАвансам);
		Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 Тогда
			УчетНДСФормированиеДвижений.ПровестиИсправленныйВыданныйСчетФактуру(СтруктураШапкиДокумента, ТаблицаПоАвансам);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаЗаписейЖурнала = Новый ТаблицаЗначений;
	Для Каждого Элемент ИЗ СтруктураШапкиДокумента Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Элемент.Значение));
		ТаблицаЗаписейЖурнала.Колонки.Добавить(Элемент.Ключ, Новый ОписаниеТипов(МассивТипов));
	КонецЦикла;
	ТаблицаЗаписейЖурнала.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("НомерИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("ДатаИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("НомерИсправленияИсходногоДокумента", Новый ОписаниеТипов("Число"));
	ТаблицаЗаписейЖурнала.Колонки.Добавить("ДатаИсправленияИсходногоДокумента", Новый ОписаниеТипов("Дата"));
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		СтруктураСтроки = Новый Структура();
		Для Каждого Элемент Из СтруктураШапкиДокумента Цикл
			СтруктураСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		Для Каждого СтрокаОснования ИЗ ТаблицаПоДокументамОснованиям Цикл
			
			СтруктураСтроки.Вставить("ИндексСтроки", СтрокаОснования.НомерСтроки - 1);
			СтруктураСтроки.Вставить("НомерИсправленияКорректировочногоСчетаФактуры", СтруктураШапкиДокумента.НомерИсправления);
			СтруктураСтроки.Вставить("ДатаИсправленияКорректировочногоСчетаФактуры", СтруктураШапкиДокумента.Дата);
			СтруктураСтроки.Вставить("НомерИсходногоДокумента", СтрокаОснования.НомерИсходногоДокумента);
			СтруктураСтроки.Вставить("ДатаИсходногоДокумента",  СтрокаОснования.ДатаИсходногоДокумента);
			СтруктураСтроки.Вставить("УчитыватьИсправлениеИсходногоДокумента", СтрокаОснования.НомерИсправленияИсходногоДокумента);
			СтруктураСтроки.Вставить("НомерИсправленияИсходногоДокумента", СтрокаОснования.НомерИсправленияИсходногоДокумента);
			СтруктураСтроки.Вставить("ДатаИсправленияИсходногоДокумента", СтрокаОснования.ДатаИсправленияИсходногоДокумента);
			СтруктураСтроки.Вставить("СуммаУвеличение", СтрокаОснования.СуммаУвеличение);
			СтруктураСтроки.Вставить("СуммаУменьшение", СтрокаОснования.СуммаУменьшение);
			СтруктураСтроки.Вставить("СуммаНДСУвеличение", СтрокаОснования.СуммаНДСУвеличение);
			СтруктураСтроки.Вставить("СуммаНДСУменьшение", СтрокаОснования.СуммаНДСУменьшение);
			
			ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураСтроки);
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.СводныйКомиссионный Тогда
		
		СтруктураСтроки = Новый Структура();
		Для Каждого Элемент Из СтруктураШапкиДокумента Цикл
			СтруктураСтроки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		ТаблицаСводныхСчетовФактур = ПолучитьДанныеСводногоСчетаФактуры(СтруктураШапкиДокумента);
		
		ТаблицаЗаписейЖурнала.Колонки.Добавить("СуммаДокументаДляРегистрацииВЖурнале");
		ТаблицаЗаписейЖурнала.Колонки.Добавить("НДСДокументаДляРегистрацииВЖурнале");
		
		Для Каждого СтрокаСводныхСчетовФактур Из ТаблицаСводныхСчетовФактур Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтруктураШапкиДокумента);
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаСводныхСчетовФактур);
			
			ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураСтроки);
			ЗаписьЖурнала.ИндексСтроки = СтрокаСводныхСчетовФактур.ИндексСтроки;
			
			Если СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуре <> 0 ИЛИ СтрокаСводныхСчетовФактур.СуммаНДС <> 0 Тогда
				ЗаписьЖурнала.СуммаДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуре;
				ЗаписьЖурнала.НДСДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаНДС;				
			ИначеЕсли СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуреКомиссия <> 0 Или СтрокаСводныхСчетовФактур.СуммаНДСКомиссия <> 0 Тогда
				ЗаписьЖурнала.СуммаДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаПоСчетуФактуреКомиссия;
				ЗаписьЖурнала.НДСДокументаДляРегистрацииВЖурнале = СтрокаСводныхСчетовФактур.СуммаНДСКомиссия;				
			КонецЕсли;					
			
		КонецЦикла;
		
	Иначе
		
		ЗаписьЖурнала = ТаблицаЗаписейЖурнала.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.ЗарегистрироватьВЖурналеУчетаСчетовФактур(ТаблицаЗаписейЖурнала, СуммаДокумента, СуммаНДСДокумента, Отказ, Заголовок);
	УчетНДСФормированиеДвижений.СформироватьДвиженияНДСНомераДокументовОплаты(Ссылка, Отказ);

КонецПроцедуры // ДвиженияПоРегистрам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ВидСчетаФактуры");
    ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	Если СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		Если НЕ (ВерсияПостановления = 2 
			И ТипЗнч(СтруктураШапкиДокумента.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
			// В случае, если документом-основанием счета-фактуры является "Отчет комиссионера (агента) о продажах"
			// договор контрагента не указывается
			СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		СтруктураОбязательныхПолей.Вставить("Контрагент");
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента");
		СтруктураОбязательныхПолей.Вставить("Комитент");
	
	КонецЕсли;
	
	Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		
		Если Дата >= '20111001' Тогда
			Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный И Исправление Тогда
				СтруктураОбязательныхПолей.Вставить("НомерИсходногоДокумента");
				СтруктураОбязательныхПолей.Вставить("ДатаИсходногоДокумента");
			КонецЕсли;
			
			Если ВерсияПостановления = 2 Тогда
				Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
					Если Исправление Тогда
						СтруктураОбязательныхПолей.Вставить("НомерИсправляемогоКорректировочногоДокумента");
						СтруктураОбязательныхПолей.Вставить("ДатаИсправляемогоКорректировочногоДокумента");
					КонецЕсли;
				КонецЕсли;
				Если Исправление Тогда
					СтруктураОбязательныхПолей.Вставить("НомерИсправления");					
				КонецЕсли;
				Если Выставлен Тогда
					СтруктураОбязательныхПолей.Вставить("ДатаВыставления");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ДокументыОснования";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") 
			И Не СтрокаТЧ.ДокументОснование.Проведен Тогда
			ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании проведенного документа (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
		Если СтрокаТЧ.ДокументОснование.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено
			И Не СтрокаТЧ.ДокументОснование.ОтражатьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке( "Счет-фактуру можно вводить только на основании документа, отражаемого в бухгалтерском учете (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
		КонецЕсли;	
	КонецЦикла;

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Для Каждого СтрокаТЧ Из ТаблицаПоДокументамОснованиям Цикл
			ОшибкиСтроки = "";
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсходногоДокумента) Тогда 
				ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Номер счета-фактуры";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсходногоДокумента) Тогда
				ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Дата счета-фактуры";
			КонецЕсли;
			Если СтрокаТЧ.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерИсправленияИсходногоДокумента) Тогда
					ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Номер исправления счета-фактуры";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсправленияИсходногоДокумента) Тогда
					ОшибкиСтроки = ОшибкиСтроки + ?(ОшибкиСтроки = "", "", ", ") + "Дата исправления счета-фактуры";
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОшибкиСтроки) Тогда
				ОбщегоНазначения.СообщитьОбОшибке( " В строке № " + СтрокаТЧ.НомерСтроки + " не заполнены поля: " + ОшибкиСтроки , Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Авансы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок)

	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Возврат;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СтавкаНДС, Сумма");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.КППКонтрагента) Тогда
		СтруктураШапкиДокумента.Вставить("КППКонтрагента", ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураШапкиДокумента.Контрагент, "КПП"));
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДокументОснование"      , "ДокументОснование");
	СтруктураПолей.Вставить("Организация"		     , "ДокументОснование.Организация");
	СтруктураПолей.Вставить("Контрагент"             , "ДокументОснование.Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента"     , "ДокументОснование.ДоговорКонтрагента");
	СтруктураПолей.Вставить("ВалютаДокумента"        , "ДокументОснование.ВалютаДокумента");
	СтруктураПолей.Вставить("КурсВзаиморасчетов"     , "ДокументОснование.КурсВзаиморасчетов");
	СтруктураПолей.Вставить("КратностьВзаиморасчетов", "ДокументОснование.КратностьВзаиморасчетов");
	СтруктураПолей.Вставить("НомерИсходногоДокумента", "НомерИсходногоДокумента");
	СтруктураПолей.Вставить("ДатаИсходногоДокумента" , "ДатаИсходногоДокумента");
	СтруктураПолей.Вставить("УчитыватьИсправлениеИсходногоДокумента" , "УчитыватьИсправлениеИсходногоДокумента");
	СтруктураПолей.Вставить("НомерИсправленияИсходногоДокумента"     , "НомерИсправленияИсходногоДокумента");
	СтруктураПолей.Вставить("ДатаИсправленияИсходногоДокумента"      , "ДатаИсправленияИсходногоДокумента");
	СтруктураПолей.Вставить("СуммаУвеличение"        , "СуммаУвеличение");
	СтруктураПолей.Вставить("СуммаУменьшение"        , "СуммаУменьшение");
	СтруктураПолей.Вставить("СуммаНДСУвеличение"     , "СуммаНДСУвеличение");
	СтруктураПолей.Вставить("СуммаНДСУменьшение"     , "СуммаНДСУменьшение");
	
	РезультатЗапросаПоДокументамОснованиям = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураПолей);
	
	ТаблицаПоДокументамОснованиям = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Сумма",		"Сумма");
		СтруктураПолей.Вставить("СуммаНДС",		"СуммаНДС");
		СтруктураПолей.Вставить("СтавкаНДС",	"СтавкаНДС");
		СтруктураПолей.Вставить("Контрагент",	"Контрагент");
		
		РезультатЗапросаПоАвансам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Авансы", СтруктураПолей);
		
		ТаблицаПоАвансам = РезультатЗапросаПоАвансам.Выгрузить();
		
		ТаблицаПоАвансам.Колонки.Добавить("ВалютнаяСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		МассивРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаДокумента, ТаблицаПоАвансам.ВыгрузитьКолонку("Сумма"));
		
		Если Не МассивРаспределения = Неопределено Тогда
			Для К = 0 По ТаблицаПоАвансам.Количество() - 1 Цикл
				
				ТаблицаПоАвансам[К].ВалютнаяСумма = МассивРаспределения[К];			
												
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ЗаполнитьНаОснованииСчетаФактуры(Основание);
		мДокументЗаполнен = Истина;
	ИначеЕсли ЗначениеЗаполнено(Основание) 
		И ЭтотОбъект.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(Основание)) Тогда
		
		Дата = Основание.Дата;
		Организация = Основание.Организация;
		
		СтрокаОснованиеВТабличнойЧасти = ДокументыОснования.Добавить();
		СтрокаОснованиеВТабличнойЧасти.ДокументОснование = Основание;
		
		ДокументОснование = Основание;
		
		ЗаполнитьДатуИНомерДокументовОплаты();
		
		Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) 
			ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
			СписокТиповНаАванс = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
			СписокТиповКорректировочный = ПолучитьСписокТиповПоВидуСчетаФактуры(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
			Если СписокТиповНаАванс.Найти(ТипЗнч(Основание)) <> Неопределено 
				И ТипЗнч(Основание) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
			ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(Основание)) <> Неопределено Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			ДатаНомерДокументовОплаты.Очистить();
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
				Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
				НомерПлатежноРасчетногоДокумента = Основание.НомерВходящегоДокумента;
				ДатаПлатежноРасчетногоДокумента =  Основание.ДатаВходящегоДокумента;
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Основание);
				ДатаПлатежноРасчетногоДокумента =  Основание.Дата;
			Иначе
				НомерПлатежноРасчетногоДокумента = "";
				ДатаПлатежноРасчетногоДокумента =  Неопределено;
			КонецЕсли;
			
			СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
			СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
			СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;
			
			ДокументЗаполнен = Ложь;
			ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен);
			
			Если Не УчетНДС.ОрганизацияУчитываетНДС(Организация, Дата) И УчетНДС.ВедетсяУчетНДСПоФЗ134(Дата) Тогда
				ТекстСообщения = "Автоматическое заполнение счета-фактуры на предварительную оплату для организаций-неплательщиков НДС 
				|не предусмотрено. Заполните недостающие данные вручную.";
				ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
			ИначеЕсли НЕ ДокументЗаполнен Тогда
				ТекстСообщения = "Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			УстановитьКодВидаОперации();
			мДокументЗаполнен = Истина;
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
			ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			// Ввод корректировочного/исправленного счета-фактуры на поступление, 
			// требуется проверить существование ранее введенного счета-фактуры
			СуществующийСчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Основание, "СчетФактураВыданный");
			Если СуществующийСчетФактура <> Неопределено Тогда
				ТекстСообщения = "На основании документа """ + СуществующийСчетФактура + """ уже был введен """ + СуществующийСчетФактура + """";					
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
				ДокументыОснования.Очистить();
				ДокументыОснования.Добавить();
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
				Возврат;
			КонецЕсли;
			
			Отказ = Ложь;
			ЗаполнитьНаОснованииИсправления(Основание, СтрокаОснованиеВТабличнойЧасти, Отказ);
			Если Не Отказ Тогда
				ОпределениеПараметровСчетаФактуры();
				мДокументЗаполнен = Истина;
			КонецЕсли;
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			
			ОпределениеПараметровСчетаФактуры();
			УстановитьКодВидаОперации();
			мДокументЗаполнен = Истина;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам);
	
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(ТаблицаПоДокументамОснованиям, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоАвансам(Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, ТаблицаПоАвансам, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ОбновитьПараметры = Истина)

	мУдалятьДвижения = НЕ ЭтоНовый();

	Если ОбменДанными.Загрузка Или Не мОбновлятьРеквизитыПриЗаписи Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОснование) И ДокументыОснования.Найти(ДокументОснование) = Неопределено Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено И ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	Если ДатаНомерДокументовОплаты.Количество() > 0 Тогда
		ДатаПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента;
		НомерПлатежноРасчетногоДокумента = ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента;
	КонецЕсли;
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный) 
		И НЕ СформированПриВводеНачальныхОстатковНДС Тогда
		ОпределениеПараметровСчетаФактуры();
	Иначе
		СводныйКорректировочный = Ложь;
	КонецЕсли;
   //Амбер  
   	Номер = ДокументОснование.Номер;
   
     Если Не ЗначениеЗаполнено(ОтветственныйЗаказа) и ЗначениеЗаполнено(ДоговорКонтрагента) тогда
      ОтветственныйЗаказа = ДоговорКонтрагента.вббОтветственный;
	 КонецЕсли; 
   ///Амбер
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	Если Исправление Тогда
		Префикс = "И" + Префикс;
	ИначеЕсли (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
				ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента)
				И Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить()
		Тогда
		Префикс = "А" + Префикс;
	КонецЕсли;
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
		
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		НепроверяемыеРеквизиты.Добавить("ДокументыОснования.ДокументОснование");
	КонецЕсли;
	
	Если СформированПриВводеНачальныхОстатковНДС
		ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс  Тогда
		НепроверяемыеРеквизиты.Добавить("Авансы.Сумма");
		НепроверяемыеРеквизиты.Добавить("Авансы.СтавкаНДС");
	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	Если ВерсияПостановления = 1 Тогда
		
		НепроверяемыеРеквизиты.Добавить("КодСпособаВыставления");
		НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
		НепроверяемыеРеквизиты.Добавить("Выставлен");
		НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
		НепроверяемыеРеквизиты.Добавить("НомерИсправления");
		НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
		НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
		
	Иначе
				
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			Если НЕ Исправление Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
			КонецЕсли;
			НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");			
			НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			НепроверяемыеРеквизиты.Добавить("НомерИсходногоДокумента");
			НепроверяемыеРеквизиты.Добавить("ДатаИсходногоДокумента");
			Если НЕ Исправление Тогда
				НепроверяемыеРеквизиты.Добавить("НомерИсправляемогоКорректировочногоДокумента");
				НепроверяемыеРеквизиты.Добавить("ДатаИсправляемогоКорректировочногоДокумента");
			КонецЕсли;
		КонецЕсли;
		
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Исправление Тогда
			НепроверяемыеРеквизиты.Добавить("НомерИсправления");			
		КонецЕсли;
				
		Если СформированПриВводеНачальныхОстатковНДС ИЛИ НЕ Выставлен Тогда
			НепроверяемыеРеквизиты.Добавить("ДатаВыставления");
		КонецЕсли;
		
		Если НЕ СформированПриВводеНачальныхОстатковНДС Тогда
			ПроверяемыеРеквизиты.Добавить("КодВидаОперации");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СводныйКомиссионный Тогда
		НепроверяемыеРеквизиты.Добавить("Комитент");
	Иначе
		НепроверяемыеРеквизиты.Добавить("Авансы.Контрагент");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мОбновлятьРеквизитыПриЗаписи = ИСТИНА;
мДокументЗаполнен = Ложь;
мИспользоватьОбменЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
