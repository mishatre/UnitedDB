Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет нет ли пересекающихся интервалами документов с текущим.
//
Процедура ПроверитьПересекающиесяДокументы(Отказ, Заголовок)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Дата", ДатаНачала);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.НоменклатурнаяЦеноваяГруппа КАК Группа,
	|	РегТипыДляПокупателей.ТипЦен КАК ТипЦен,
	|	РегТипыДляПокупателей.Период КАК ДатаНачала,
	|	РегТипыДляПокупателей.Регистратор КАК Регистратор
	|ИЗ
	|	Документ.УстановкаТиповЦенПоГруппамНоменклатурыДляПокупателей.НоменклатурныеЦеновыеГруппы КАК Док
	|СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|ПО Док.Ссылка = &ДокументСсылка
	|И (СпрНоменклатура.НоменклатурнаяГруппа = Док.НоменклатурнаяЦеноваяГруппа
	|ИЛИ СпрНоменклатура.ЦеноваяГруппа = Док.НоменклатурнаяЦеноваяГруппа)
	|СОЕДИНЕНИЕ РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей КАК РегТипыДляПокупателей
	|ПО (СпрНоменклатура.НоменклатурнаяГруппа = РегТипыДляПокупателей.НоменклатурнаяЦеноваяГруппа
	|ИЛИ СпрНоменклатура.ЦеноваяГруппа = РегТипыДляПокупателей.НоменклатурнаяЦеноваяГруппа)
	|И Контрагент = &Контрагент
	|УПОРЯДОЧИТЬ ПО Период Возр, Группа Возр, ТипЦен Убыв
	|";

	ТЗ = Запрос.Выполнить().Выгрузить();

	ТЗ.Колонки.Добавить("ДатаОкончания");
	ТЗ.ЗаполнитьЗначения('00010101' ,"ДатаОкончания");

	КоличествоСтрок = ТЗ.Количество() - 1;
	Для Тмп = 0 По КоличествоСтрок Цикл
		СтрокаТЗ = ТЗ[КоличествоСтрок - Тмп];

		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТипЦен) Тогда
			Для Тмп1 = 0 По ТЗ.Количество() -1 Цикл
				СтрокаПоиска = ТЗ[Тмп];

				Если СтрокаПоиска.Группа = СтрокаТЗ.Группа
				   И НЕ ЗначениеЗаполнено(СтрокаПоиска.ДатаОкончания) Тогда
					СтрокаПоиска.ДатаОкончания = СтрокаТЗ.ДатаНачала;
					ТЗ.Удалить(СтрокаТЗ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	СтрокаДокументовПересечений = "";
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			Если СтрокаТЗ.ДатаОкончания > Дата Или НЕ ЗначениеЗаполнено(СтрокаТЗ.ДатаОкончания) Тогда 
				СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС + СтрокаТЗ.Группа +": " + СтрокаТЗ.Регистратор;
			КонецЕсли;
		Иначе
			Если (ДатаНачала >= СтрокаТЗ.ДатаНачала И ДатаОкончания <= СтрокаТЗ.ДатаОкончания)
			  Или (ДатаНачала <= СтрокаТЗ.ДатаНачала И ДатаОкончания >= СтрокаТЗ.ДатаОкончания)
			  Или (ДатаНачала <= СтрокаТЗ.ДатаНачала И ДатаОкончания >= СтрокаТЗ.ДатаНачала)
			  Или (ДатаНачала <= СтрокаТЗ.ДатаОкончания И ДатаОкончания >= СтрокаТЗ.ДатаОкончания) Тогда
				СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС + СтрокаТЗ.Группа +": " + СтрокаТЗ.Регистратор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Найдены записи о типах цен для групп, которые уже действуют в выбранном периоде:" + СтрокаДокументовПересечений, Отказ, Заголовок);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры //ПроверитьПересекающиесяДокументы()

// Формирует запрос по ТЧ документа, при оперативном проведении добавляет данные регистров
//
// Параметры: 
//  Режим                   - режим проведения,
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоГруппам(Режим, ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.НоменклатурнаяЦеноваяГруппа КАК НоменклатурнаяЦеноваяГруппа,
	|	Док.ТипЦен,
	|	Док.Ссылка.ДатаОкончания,
	|	Док.Ссылка.ДатаНачала,
	|	Док.Ссылка.Контрагент,
	|	Док.НомерСтроки, // Для контроля заполнения
	|	1 КАК КоличествоДублей
	|ИЗ
	|	Документ.УстановкаТиповЦенПоГруппамНоменклатурыДляПокупателей.НоменклатурныеЦеновыеГруппы КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|ИТОГИ КОЛИЧЕСТВО(КоличествоДублей)
	|ПО НоменклатурнаяЦеноваяГруппа";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоГруппам()

// По строке выборки результата запроса по документу, которая соответствует строке ТЧ документа,
// формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента              - спозиционированная на определенной строке выборка 
//                                           из результата запроса по ТЧ документа, 
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоСтрокамДокумента)

	Движение = Движения.ТипыЦенПоГруппамНоменклатурыДляПокупателей.Добавить();

	// Свойства
	Движение.Период                     = ВыборкаПоСтрокамДокумента.ДатаНачала;

	// Измерения
	Движение.Контрагент                  = ВыборкаПоСтрокамДокумента.Контрагент;
	Движение.НоменклатурнаяЦеноваяГруппа = ВыборкаПоСтрокамДокумента.НоменклатурнаяЦеноваяГруппа;

	// Ресурсы
	Движение.ТипЦен                      = ВыборкаПоСтрокамДокумента.ТипЦен;

	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
		Движение = Движения.ТипыЦенПоГруппамНоменклатурыДляПокупателей.Добавить();

		// Свойства
		Движение.Период             = КонецДня(ВыборкаПоСтрокамДокумента.ДатаОкончания);

		// Измерения
		Движение.Контрагент                  = ВыборкаПоСтрокамДокумента.Контрагент;
		Движение.НоменклатурнаяЦеноваяГруппа = ВыборкаПоСтрокамДокумента.НоменклатурнаяЦеноваяГруппа;

		// Ресурсы
		// все пусто, т.к. условия с этой даты не действуют
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

// Проверяет дубли номенклатурных/ценовых групп(разные строки с одинаковой
// номенклатурой или ценовой группой) в ТЧ документа.
//
// Параметры: 
//  ВыборкаПоСтрокамДокумента - спозиционированная на определенной строке выборка 
//                              из результата запроса по ТЧ документа, 
//  Отказ                     - флаг отказа в проведении.
//
Процедура ПроверитьДублиЦеновыхНоменклатурныхГрупп(ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	Если ВыборкаПоСтрокамДокумента.КоличествоДублей > 1 Тогда
		Если ВидОперации = Перечисления.ВидыОперацийУстановкаТиповЦенПоГруппамНоменклатурыДляПокупателей.ПоНоменклатурнымГруппам Тогда
			НазваниеГрупп = "номенклатурных";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаТиповЦенПоГруппамНоменклатурыДляПокупателей.ПоЦеновымГруппам Тогда
			НазваниеГрупп = "ценовых";
		КонецЕсли;

		ОбщегоНазначения.СообщитьОбОшибке("""" + СокрЛП(ВыборкаПоСтрокамДокумента.НоменклатурнаяЦеноваяГруппа) + """
			               |: дублей строк " + НазваниеГрупп + " групп в этом документе быть не должно!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьДублиЦеновыхНоменклатурныхГрупп()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработкик события "Проведение" объекта.
//
Процедура ОбработкаПроведения(Отказ, Режим)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа.
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, "");

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, ДатаНачала");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Даты начала и окончания.
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОкончания) И СтруктураШапкиДокумента.ДатаОкончания < СтруктураШапкиДокумента.ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата окончания не может быть меньше даты начала!", Отказ, Заголовок);
	КонецЕсли;

	Если НЕ Отказ Тогда
		ПроверитьПересекающиесяДокументы(Отказ, Заголовок);
	КонецЕсли;

	СтруктураОбязательныхПолей = Новый Структура("НоменклатурнаяЦеноваяГруппа, ТипЦен");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НоменклатурныеЦеновыеГруппы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Добудем нужные реквизиты по строкам табличной части запросом.
	РезультатЗапросаПоГруппам = СформироватьЗапросПоГруппам(Режим, СтруктураШапкиДокумента);

	Если РезультатЗапросаПоГруппам.Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена табличная часть документа!", Отказ, Заголовок);
	КонецЕсли;

	// В цикле по строкам табличной части будем добавлять информацию в движения документа
	ВыборкаПоСтрокамДокумента = РезультатЗапросаПоГруппам.Выбрать();
	Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
		ПроверитьДублиЦеновыхНоменклатурныхГрупп(ВыборкаПоСтрокамДокумента, Отказ, Заголовок);

		Если ВыборкаПоСтрокамДокумента.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;

		// Движения стоит добавлять, если в проведении еще не отказано.
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоСтрокамДокумента);
	КонецЦикла;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения
