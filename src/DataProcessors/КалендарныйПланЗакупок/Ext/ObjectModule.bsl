#Если Клиент Тогда

Перем СписокОтборов Экспорт; // Содержит в себе список имен и типов значений отборов
Перем мФормаПрогрессора Экспорт; // Форма прогрессора
Перем НП Экспорт; // Настройка периода
Перем мВалютаРегламентированногоУчета Экспорт;

// Процедура заполняет таблицы значений реквизитов
// ТаблицаПотребности, ТаблицаПотребностиПоЗаказамПокупателей, ТаблицаНоменклатурыОбъектов, ТаблицаОбъектов
//
Процедура ЗаполнитьТаблицуЗначенийОбъекта(ПостроительОтчетаОтветственные) Экспорт

	ПостроительОтчетаОтветственные.Выполнить();
	МассивОтветственный = ПостроительОтчетаОтветственные.Результат.Выгрузить().ВыгрузитьКолонку("Ответственный");
	
	// Заполнение таблиц ТаблицаПотребности, ТаблицаПотребностиПоЗаказамПокупателей
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура КАК Номенклатура,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности КАК ДатаПотребности,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара = ЗНАЧЕНИЕ(Перечисление.ТоварТара.Тара)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Тара,
	|	СУММА(КалендарныеПотребностиВНоменклатуреСрезПоследних.Количество) КАК КоличествоПлана
	|ИЗ
	|	РегистрСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(
	|			&ТекущаяДата,
	|			Номенклатура.ОтветственныйМенеджерЗаПокупки В (&МассивОтветственный)
	|				И ДатаПотребности >= &ДатаНачала
	|				И (&ДатаОкончания = &ПустаяДата
	|					ИЛИ ДатаПотребности <= &ДатаОкончания)
	|				И (&ТолькоПоЗаказам = ИСТИНА
	|						И Заказ <> НЕОПРЕДЕЛЕНО
	|						И Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						И Заказ <> ЗНАЧЕНИЕ(Документ.ВнутреннийЗаказ.ПустаяСсылка)
	|					ИЛИ &ТолькоПоЗаказам = ЛОЖЬ)) КАК КалендарныеПотребностиВНоменклатуреСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ,
	|	КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара
	|
	|ИМЕЮЩИЕ
	|	СУММА(КалендарныеПотребностиВНоменклатуреСрезПоследних.Количество) > 0");
	
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101000000'));
	Запрос.УстановитьПараметр("ТолькоПоЗаказам", Ложь);
	Запрос.УстановитьПараметр("МассивОтветственный", МассивОтветственный);
	
	РезультатПотребности = Запрос.Выполнить();
	ТаблицаПотребности = РезультатПотребности.Выгрузить();
	
	Запрос.УстановитьПараметр("ТолькоПоЗаказам", Истина);
	
	РезультатПотребностиПоЗаказамПокупателей = Запрос.Выполнить();
	ТаблицаПотребностиПоЗаказамПокупателей = РезультатПотребностиПоЗаказамПокупателей.Выгрузить();
	
	//Заполнение таблицы ТаблицаНоменклатурыОбъектов
	Если НЕ РезультатПотребности.Пустой() Тогда
	
		ТаблицаРезультатаЗапроса = Неопределено;
		
		// Остатки по заказам поставщикам
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказыПоставщикам.ДоговорКонтрагентаЗаказа КАК ДоговорКонтрагентаЗаказа,
		|	ЗаказыПоставщикам.ВалютаВзаиморасчетовДоговораЗаказа КАК ВалютаВзаиморасчетовДоговораЗаказа,
		|	ЗаказыПоставщикам.ДатаЗаказа КАК ДатаЗаказа,
		|	ЗаказыПоставщикам.НомерЗаказа КАК НомерЗаказа,
		|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
		|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикам.Контрагент КАК Контрагент,
		|	ЗаказыПоставщикам.ДатаПоступленияЗаказа КАК ДатаПоступленияЗаказа,
		|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикам.СтатусПартии = &ТараПартия
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Тара,
		|	ЕСТЬNULL(РазмещениеЗаказовПокупателей.ЗаказПокупателя, НЕОПРЕДЕЛЕНО) КАК ЗаказПокупателя,
		|	СУММА(ЗаказыПоставщикам.КоличествоОстатокЗаказа) КАК КоличествоОстатокЗаказа,
		|	СУММА(ВЫБОР
		|			КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ РазмещениеЗаказовПокупателей.КоличествоОстаток
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ЗаказыПоставщикам.СуммаВзаиморасчетовЗаказа) КАК СуммаВзаиморасчетовЗаказа
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЗаказыПоставщикамОстатки.ДоговорКонтрагента КАК ДоговорКонтрагентаЗаказа,
		|		ЗаказыПоставщикамОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДоговораЗаказа,
		|		ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата КАК ДатаЗаказа,
		|		ЗаказыПоставщикамОстатки.ЗаказПоставщику.Номер КАК НомерЗаказа,
		|		ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		|		ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент КАК Контрагент,
		|		ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступленияЗаказа,
		|		ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|		ЗаказыПоставщикамОстатки.СтатусПартии КАК СтатусПартии,
		|		ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстатокЗаказа,
		|		ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовЗаказа
		|	ИЗ
		|		РегистрСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(
		|			&ТекущаяДата,
		|			Номенклатура.ОтветственныйМенеджерЗаПокупки  В (&МассивОтветственный)
		|			    И ДатаПотребности >= &ДатаНачала
		|			    И (&ДатаОкончания = &ПустаяДата
		|			        ИЛИ ДатаПотребности <= &ДатаОкончания)
		|			    И Количество > 0) КАК КалендарныеПотребностиВНоменклатуре
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&ТекущаяДата, Номенклатура.ОтветственныйМенеджерЗаПокупки В (&МассивОтветственный)) КАК ЗаказыПоставщикамОстатки
		|			ПО КалендарныеПотребностиВНоменклатуре.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|				И КалендарныеПотребностиВНоменклатуре.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
		|				И КалендарныеПотребностиВНоменклатуре.ДатаПотребности >= ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления) КАК ЗаказыПоставщикам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ТекущаяДата, ) КАК РазмещениеЗаказовПокупателей
		|		ПО ЗаказыПоставщикам.Номенклатура = РазмещениеЗаказовПокупателей.Номенклатура
		|			И ЗаказыПоставщикам.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры
		|			И ЗаказыПоставщикам.ЗаказПоставщику = РазмещениеЗаказовПокупателей.ЗаказПоставщику
		|			И (РазмещениеЗаказовПокупателей.ТоварТара = &Тара
		|					И ЗаказыПоставщикам.СтатусПартии = &ТараПартия
		|				ИЛИ РазмещениеЗаказовПокупателей.ТоварТара <> &Тара
		|					И ЗаказыПоставщикам.СтатусПартии <> &ТараПартия)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикам.ДоговорКонтрагентаЗаказа,
		|	ЗаказыПоставщикам.ВалютаВзаиморасчетовДоговораЗаказа,
		|	ЗаказыПоставщикам.ДатаЗаказа,
		|	ЗаказыПоставщикам.НомерЗаказа,
		|	ЗаказыПоставщикам.Номенклатура,
		|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикам.Контрагент,
		|	ЗаказыПоставщикам.ДатаПоступленияЗаказа,
		|	ЗаказыПоставщикам.ЗаказПоставщику,
		|	ЕСТЬNULL(РазмещениеЗаказовПокупателей.ЗаказПокупателя, НЕОПРЕДЕЛЕНО),
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикам.СтатусПартии = &ТараПартия
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
		
		Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", ?(ДатаОкончания = '00010101000000', ДатаОкончания, КонецДня(ДатаОкончания)));
		Запрос.УстановитьПараметр("Тара", Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("ТараПартия", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101000000'));
		Запрос.УстановитьПараметр("МассивОтветственный", МассивОтветственный);
		
		ТаблицаНоменклатурыОбъектов = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		// Остатки по заказам поставщикам
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказыПоставщикам.ДоговорКонтрагента КАК ДоговорКонтрагентаЗаказа,
		|	ЗаказыПоставщикам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДоговораЗаказа,
		|	ЗаказыПоставщикам.ЗаказПоставщику.Дата КАК ДатаЗаказа,
		|	ЗаказыПоставщикам.ЗаказПоставщику.Номер КАК НомерЗаказа,
		|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
		|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент КАК Контрагент,
		|	ЗаказыПоставщикам.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступленияЗаказа,
		|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикам.СтатусПартии = &ТараПартия
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Тара,
		|	ЕСТЬNULL(РазмещениеЗаказовПокупателей.ЗаказПокупателя, НЕОПРЕДЕЛЕНО) КАК ЗаказПокупателя,
		|	СУММА(ЗаказыПоставщикам.КоличествоОстаток) КАК КоличествоОстатокЗаказа,
		|	СУММА(ВЫБОР
		|			КОГДА РазмещениеЗаказовПокупателей.ЗаказПокупателя ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ РазмещениеЗаказовПокупателей.КоличествоОстаток
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ЗаказыПоставщикам.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовЗаказа
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|		&ТекущаяДата,
		|		Номенклатура.ОтветственныйМенеджерЗаПокупки В (&МассивОтветственный)
		|		    И (&ДатаОкончания = &ПустаяДата
		|		        ИЛИ ЗаказПоставщику.ДатаПоступления <= &ДатаОкончания)) КАК ЗаказыПоставщикам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ТекущаяДата, ) КАК РазмещениеЗаказовПокупателей
		|		ПО РазмещениеЗаказовПокупателей.Номенклатура = ЗаказыПоставщикам.Номенклатура
		|			И РазмещениеЗаказовПокупателей.ХарактеристикаНоменклатуры = ЗаказыПоставщикам.ХарактеристикаНоменклатуры
		|			И РазмещениеЗаказовПокупателей.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
		|			И (РазмещениеЗаказовПокупателей.ТоварТара = &Тара
		|					И ЗаказыПоставщикам.СтатусПартии = &ТараПартия
		|				ИЛИ РазмещениеЗаказовПокупателей.ТоварТара <> &Тара
		|					И ЗаказыПоставщикам.СтатусПартии <> &ТараПартия)
		|ГДЕ
		|	ЗаказыПоставщикам.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикам.ДоговорКонтрагента,
		|	ЗаказыПоставщикам.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ЗаказыПоставщикам.ЗаказПоставщику.Дата,
		|	ЗаказыПоставщикам.ЗаказПоставщику.Номер,
		|	ЗаказыПоставщикам.Номенклатура,
		|	ЗаказыПоставщикам.ХарактеристикаНоменклатуры,
		|	ЗаказыПоставщикам.ЗаказПоставщику.Контрагент,
		|	ЗаказыПоставщикам.ЗаказПоставщику.ДатаПоступления,
		|	ЗаказыПоставщикам.ЗаказПоставщику,
		|	ЕСТЬNULL(РазмещениеЗаказовПокупателей.ЗаказПокупателя, НЕОПРЕДЕЛЕНО),
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикам.СтатусПартии = &ТараПартия
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
		
		Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаОкончания", ?(ДатаОкончания = '00010101000000', ДатаОкончания, КонецДня(ДатаОкончания)));
		Запрос.УстановитьПараметр("Тара", Перечисления.ТоварТара.Тара);
		Запрос.УстановитьПараметр("ТараПартия", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101000000'));
		Запрос.УстановитьПараметр("МассивОтветственный", МассивОтветственный);
		
		ТаблицаНоменклатурыОбъектов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли; 
	
	// Распределение размещений по заказам поставщикам
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыОбъектов Цикл
		
		ИмеющиесяРазмещения = 0;
		СтрокиРазмещений = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("ЗаказПоставщику, Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТаблицы.ЗаказПоставщику, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.ХарактеристикаНоменклатуры, СтрокаТаблицы.Тара));
		
		Для каждого СтрокаРазмещений Из СтрокиРазмещений Цикл
			
			ИмеющиесяРазмещения = ИмеющиесяРазмещения + СтрокаРазмещений.Количество;
			
		КонецЦикла;
		
		Если ИмеющиесяРазмещения <> СтрокаТаблицы.КоличествоОстатокЗаказа Тогда
			
			Если СтрокаТаблицы.Количество = 0 Тогда
				
				СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоОстатокЗаказа - ИмеющиесяРазмещения;
				
			Иначе
				
				Если ТаблицаНоменклатурыОбъектов.Индекс(СтрокаТаблицы) = ТаблицаНоменклатурыОбъектов.Количество() - 1 Тогда
					
					НоваяСтрока = ТаблицаНоменклатурыОбъектов.Добавить();
					
				Иначе
					
					НоваяСтрока = ТаблицаНоменклатурыОбъектов.Вставить(ТаблицаНоменклатурыОбъектов.Индекс(СтрокаТаблицы) + 1);
					
				КонецЕсли; 
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ЗаказПокупателя = Неопределено;
				НоваяСтрока.Количество = СтрокаТаблицы.КоличествоОстатокЗаказа - ИмеющиесяРазмещения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ИДОбъекта", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0)));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("КоличествоОстатка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("ЦенаВзаиморасчетовЗаказа", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("КурсВзаиморасчетовЗаказа", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 4));
	ТаблицаНоменклатурыОбъектов.Колонки.Добавить("КратностьВзаиморасчетовЗаказа", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыОбъектов Цикл
		
		СтрокаТаблицы.ЦенаВзаиморасчетовЗаказа = ?(СтрокаТаблицы.Количество = 0, 0, (СтрокаТаблицы.СуммаВзаиморасчетовЗаказа / СтрокаТаблицы.Количество));
		СтрокаТаблицы.КурсВзаиморасчетовЗаказа = СтрокаТаблицы.ЗаказПоставщику.КурсВзаиморасчетов;
		СтрокаТаблицы.КратностьВзаиморасчетовЗаказа = СтрокаТаблицы.ЗаказПоставщику.КратностьВзаиморасчетов;
		
	КонецЦикла; 
	
	// Заполнение таблицы ТаблицаОбъектов
	ТаблицаОбъектов.Очистить();
	
	ТаблицаЗаказовКопия = ТаблицаНоменклатурыОбъектов.Скопировать();
	ТаблицаЗаказовКопия.Свернуть("ЗаказПоставщику");
	
	мФормаПрогрессора.КомментарийЗначения = "Обрабатывается таблица запроса ...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаЗаказовКопия.Количество() - 1;
	
	Для каждого СтрокаЗаказа Из ТаблицаЗаказовКопия Цикл
		
		мФормаПрогрессора.Значение = ТаблицаЗаказовКопия.Индекс(СтрокаЗаказа);
		
		Если ТипЗнч(СтрокаЗаказа.ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") И НЕ СтрокаЗаказа.ЗаказПоставщику.Пустая() Тогда
			
			ОбъектЗаказа = СтрокаЗаказа.ЗаказПоставщику.ПолучитьОбъект();
			ИДОбъекта = СокрЛП(Новый УникальныйИдентификатор());
			НоваяСтрокаОбъекта = ТаблицаОбъектов.Добавить();
			НоваяСтрокаОбъекта.ИДОбъекта = ИДОбъекта;
			НоваяСтрокаОбъекта.Объект = ОбъектЗаказа;
			
			Попытка
				
				НоваяСтрокаОбъекта.Объект.Заблокировать();
				
			Исключение

			КонецПопытки;
			
			СтрокиТаблицыЗаказов = ТаблицаНоменклатурыОбъектов.НайтиСтроки(Новый Структура("ЗаказПоставщику", СтрокаЗаказа.ЗаказПоставщику));
			
			Для каждого Строка Из СтрокиТаблицыЗаказов Цикл
				
				Строка.ИДОбъекта = ИДОбъекта;
				
			КонецЦикла; 
		
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет значениями поле КоличествоОстатка для строк таблицы значений ТаблицаНоменклатурыОбъектов
//
Процедура ПерезаполнитьОстаткиВТаблицеНоменклатурыОбъектов()

	Для каждого СтрокаТаблицы Из ТаблицаНоменклатурыОбъектов Цикл
		
		СтрокаТаблицы.КоличествоОстатка = СтрокаТаблицы.Количество;
		
	КонецЦикла; 

КонецПроцедуры

// Процедура заполняет поля дерева значений для строки с заказом поставщику
//
// Параметры
//  СтрокаТекущегоУровняДереваПодбора - СтрокаДереваЗначений, для строк которой будем заполнять данные
//  Заказ                             - ДокументОбъект, откуда будем брать данные для заполнения
//
// Возвращаемые значения
//  НЕТ
Процедура ПроставитьСуммыЗаказа(СтрокаТекущегоУровняДереваПодбора, Заказ)

	// Найдем номенклатуру, по которой нужно рассчитыать суммы, она находится на более верхних уровнях
	НайденнаяНоменклатура = Неопределено;
	НайденнаяХарактеристикаНоменклатуры = Неопределено;
	Тара = Ложь;
	Уровень = СтрокаТекущегоУровняДереваПодбора.Уровень();
	СтрокаТекущегоУровня = СтрокаТекущегоУровняДереваПодбора;
	Пока Уровень >= 0 Цикл
		СтрокаТекущегоУровня = СтрокаТекущегоУровня.Родитель;
		Если ЗначениеЗаполнено(СтрокаТекущегоУровня.Номенклатура) Тогда
			НайденнаяНоменклатура = СтрокаТекущегоУровня.Номенклатура;
			НайденнаяХарактеристикаНоменклатуры = СтрокаТекущегоУровня.ХарактеристикаНоменклатуры;
			Тара = СтрокаТекущегоУровня.Тара;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденнаяНоменклатура = Неопределено ИЛИ НайденнаяХарактеристикаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИтогоСумма = 0;
	ИтогоКоличество = 0;
	Если НЕ Тара Тогда
		СтрокиТЧ = Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", НайденнаяНоменклатура, НайденнаяХарактеристикаНоменклатуры));
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Если Заказ.УчитыватьНДС И НЕ Заказ.СуммаВключаетНДС Тогда
				ИтогоСумма = ИтогоСумма + СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
			Иначе
				ИтогоСумма = ИтогоСумма + СтрокаТЧ.Сумма;
			КонецЕсли; 
			ИтогоКоличество = ИтогоКоличество + СтрокаТЧ.Количество;
		КонецЦикла;
	Иначе
		СтрокиТЧ = Заказ.ВозвратнаяТара.НайтиСтроки(Новый Структура("Номенклатура", НайденнаяНоменклатура));
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ИтогоСумма      = ИтогоСумма + СтрокаТЧ.Сумма;
			ИтогоКоличество = ИтогоКоличество + СтрокаТЧ.Количество;
		КонецЦикла;
	КонецЕсли; 
	
	СтруктураКурсаУпрУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(глЗначениеПеременной("ВалютаУправленческогоУчета"), ДатаОкончания);
	КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
	КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;

	// Рассчитаем сумму документа в валюте упр.учета
	Если Заказ.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		// Значит в валюте взаиморасчетов
		ИтогоСуммаУпрУчета                  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ИтогоСумма, Заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов, глЗначениеПеременной("ВалютаУправленческогоУчета"),
											  Заказ.КурсВзаиморасчетов, КурсУпрУчета, Заказ.КратностьВзаиморасчетов, КратностьУпрУчета);
		ИтогоСуммаВзаиморасчетов            = ИтогоСумма;
	Иначе
		// Значит в валюте регл.учета
		ИтогоСуммаУпрУчета                  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ИтогоСумма, мВалютаРегламентированногоУчета, глЗначениеПеременной("ВалютаУправленческогоУчета"),
											  1, КурсУпрУчета, 1, КратностьУпрУчета);
		ИтогоСуммаВзаиморасчетов            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ИтогоСумма, мВалютаРегламентированногоУчета, глЗначениеПеременной("ВалютаУправленческогоУчета"),
											  1, Заказ.КурсВзаиморасчетов, 1, Заказ.КратностьВзаиморасчетов);
	КонецЕсли; 
	
	Если ИтогоКоличество > 0 Тогда
		ЦенаУпрУчета = ИтогоСуммаУпрУчета / ИтогоКоличество;
		ЦенаВзаиморасчетов = ИтогоСуммаВзаиморасчетов / ИтогоКоличество;
	Иначе
		ЦенаУпрУчета = 0;
		ЦенаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтрокаТекущегоУровняДереваПодбора.ЦенаУпрУчета  = ЦенаУпрУчета;
	СтрокаТекущегоУровняДереваПодбора.СуммаУпрУчета = ЦенаУпрУчета * СтрокаТекущегоУровняДереваПодбора.ЗаказанноеКоличество;
	СтрокаТекущегоУровняДереваПодбора.СуммаВзаиморасчетовЗаказа = ЦенаВзаиморасчетов * СтрокаТекущегоУровняДереваПодбора.ЗаказанноеКоличество;
	СтрокаТекущегоУровняДереваПодбора.СуммаВзаиморасчетовЗаказаПредставление = ОбщегоНазначения.ФорматСумм(СтрокаТекущегоУровняДереваПодбора.СуммаВзаиморасчетовЗаказа, Заказ.ДоговорКонтрагента.ВалютаВзаиморасчетов, , " ")

КонецПроцедуры

// Процедура заполняет дерево значений для визуального представления данных
//
// Параметры
//  СтрокаПрошлогоУровняДереваПодбора - СтрокаДереваЗначений, для строк которой будем заполнять данные
//  СтрокаПрошлогоУровня              - СтрокаДереваЗначений, прошлого уровня дерева, из которого берем данные
//  Группировки                       - ТаблицаЗначений, имена группировок
//  ТаблицаНакопленияСуммЗаказов      - ТаблицаЗначений, где накапливаются суммы заказов в валюте упр учета
//
// Возвращаемые значения
//  НЕТ
Процедура ЗаполнитьСтрокиДерева(СтрокаПрошлогоУровняДереваПодбора, СтрокаПрошлогоУровня, Группировки, ТаблицаНакопленияСуммЗаказов, ТекущееЗначениеПрогрессора = 0)
	
	Для каждого СтрокаТекущегоУровня Из СтрокаПрошлогоУровня.Строки Цикл
		
		Если СтрокаТекущегоУровня.Уровень() = 0 Тогда
			
			ТекущееЗначениеПрогрессора = СтрокаПрошлогоУровня.Строки.Индекс(СтрокаТекущегоУровня) + 1;
			
		КонецЕсли; 
		
		СтрокаТекущегоУровняДереваПодбора = СтрокаПрошлогоУровняДереваПодбора.Строки.Добавить();
		
		ИндексГруппировки = СтрокаТекущегоУровня.Уровень();
		
		ИмяГруппировки = Группировки[ИндексГруппировки].Имя;
		
		Если ИмяГруппировки = "ИДОбъекта" Тогда
			
			ЗначениеГруппировки = СтрокаТекущегоУровня.ИДОбъекта;
			
		Иначе
			
			ЗначениеГруппировки = СтрокаТекущегоУровня.ЗначениеГруппировки;
			
		КонецЕсли; 
		
		СтрокаТекущегоУровняДереваПодбора.НеобходимоеКоличество = СтрокаТекущегоУровня.КоличествоПлана;
		СтрокаТекущегоУровняДереваПодбора.ЗаказанноеКоличество = СтрокаТекущегоУровня.КоличествоФакта;
		
		СтрокаГруппировки = "";
		
		Если ТипЗнч(ЗначениеГруппировки) = Тип("Дата") Тогда
			
			Если ЗначениеГруппировки = '00010101000000' Тогда
				
				СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = "Не заявлено в плане потребности";
				
			Иначе
				
				СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = ЗначениеГруппировки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяГруппировки = "ИДОбъекта" Тогда
			
			СтрокаЗаказа = ТаблицаНоменклатурыОбъектов.Найти(ЗначениеГруппировки, "ИДОбъекта");
			
			Если СтрокаЗаказа <> Неопределено Тогда
				
				СтрокаТекущегоУровняДереваПодбора.ИДОбъекта = СтрокаЗаказа.ИДОбъекта;
				СтрокаТекущегоУровняДереваПодбора.Заказ = СтрокаЗаказа.ЗаказПоставщику;
				
			КонецЕсли;
			
			СтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаТекущегоУровняДереваПодбора.ИДОбъекта, "ИДОбъекта");
			
			Если СтрокаОбъекта <> Неопределено Тогда
				
				ЗаказОбъект = СтрокаОбъекта.Объект;
				СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = "Заказ поставщику №" + Строка(ЗаказОбъект.Номер) + " от " + Формат(ЗаказОбъект.Дата, "ДФ=dd.MM.yyyy") + " (поставка: " + ?(ЗаказОбъект.ДатаПоступления = '00010101000000', "не указана", Формат(ЗаказОбъект.ДатаПоступления, "ДФ=dd.MM.yyyy")) + ")";
				ПроставитьСуммыЗаказа(СтрокаТекущегоУровняДереваПодбора, ЗаказОбъект);
				
			Иначе
				
				СтрокаПрошлогоУровняДереваПодбора.Строки.Удалить(СтрокаТекущегоУровняДереваПодбора);
				СтрокаТекущегоУровняДереваПодбора = Неопределено;
				
			КонецЕсли;
			
			Если ПорядокОтображенияДерева И СтрокаТекущегоУровняДереваПодбора <> Неопределено Тогда
			
				НоваяСтрока = ТаблицаНакопленияСуммЗаказов.Добавить();
				НоваяСтрока.Номенклатура = СтрокаТекущегоУровняДереваПодбора.Родитель.Родитель.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТекущегоУровняДереваПодбора.Родитель.Родитель.ХарактеристикаНоменклатуры;
				
				Если ТипЗнч(СтрокаТекущегоУровняДереваПодбора.Родитель.НоменклатураКонтрагентЗаказ) = Тип("Строка") Тогда
					
					НоваяСтрока.ДатаПотребности = '00010101000000';
					
				Иначе
					
					НоваяСтрока.ДатаПотребности = СтрокаТекущегоУровняДереваПодбора.Родитель.НоменклатураКонтрагентЗаказ;
					
				КонецЕсли;
				
				НоваяСтрока.Сумма = СтрокаТекущегоУровняДереваПодбора.СуммаУпрУчета;
			
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			СтрокаГруппировки = Строка(ЗначениеГруппировки);
			
			Если СтрокаТекущегоУровня.ХарактеристикаНоменклатуры.Пустая() Тогда
				
				Если ЗначениеГруппировки.ВестиУчетПоХарактеристикам Тогда
					
					СтрокаГруппировки = СтрокаГруппировки + " (характеристика не указана)";
					
				КонецЕсли;
				
			Иначе
				
				СтрокаГруппировки = СтрокаГруппировки + " (" + Строка(СтрокаТекущегоУровня.ХарактеристикаНоменклатуры) + ")";
				
			КонецЕсли;
			
			Если СтрокаТекущегоУровня.Тара = Истина Тогда
				
				СтрокаГруппировки = СтрокаГруппировки + ", ТАРА";
				
			КонецЕсли;
			
			СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = СтрокаГруппировки;
			СтрокаТекущегоУровняДереваПодбора.Номенклатура = ЗначениеГруппировки;
			СтрокаТекущегоУровняДереваПодбора.ХарактеристикаНоменклатуры = СтрокаТекущегоУровня.ХарактеристикаНоменклатуры;
			СтрокаТекущегоУровняДереваПодбора.Тара = СтрокаТекущегоУровня.Тара;
			
		Иначе
			
			СтрокаТекущегоУровняДереваПодбора.НоменклатураКонтрагентЗаказ = ЗначениеГруппировки;
			
		КонецЕсли; 
		
		ЗаполнитьСтрокиДерева(СтрокаТекущегоУровняДереваПодбора, СтрокаТекущегоУровня, Группировки, ТаблицаНакопленияСуммЗаказов);
		
		Если ТипЗнч(СтрокаПрошлогоУровняДереваПодбора) = Тип("СтрокаДереваЗначений") Тогда
			
			СтрокаПрошлогоУровняДереваПодбора.СуммаУпрУчета = СтрокаПрошлогоУровняДереваПодбора.СуммаУпрУчета + ?(СтрокаТекущегоУровняДереваПодбора = Неопределено, 0, СтрокаТекущегоУровняДереваПодбора.СуммаУпрУчета);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет дерево значений для визуального представления данных
//
// Параметры
//  ДеревоПодбора          - ДеревоЗначений, которое необходимо заполнить данными
//  ДеревоПодбораНаФорме   - ТабличноеПоле, элемент управления для дерева значений
//  УровеньРазворотаДерева - Число, уровень строк дерева значений, до которого необходимо
//                           развернуть строки после заполнения
//
// Возвращаемые значения
//  НЕТ
Процедура ПересортироватьТабличнуюЧастьИЗаполнитьДерево(ДеревоПодбора, ДеревоПодбораНаФорме = Неопределено, УровеньРазворотаДерева = 0) Экспорт
	
	ПерезаполнитьОстаткиВТаблицеНоменклатурыОбъектов();
	
	Если ДеревоПодбораНаФорме <> Неопределено Тогда
		
		МассивСтарыхЗначений = Новый Массив;
		
		Если ДеревоПодбораНаФорме.ТекущиеДанные <> Неопределено Тогда
			
			Если ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 0 Тогда
				
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(0);
				
			ИначеЕсли ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 1 Тогда
				
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(1);
				
			ИначеЕсли ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 2 Тогда
				
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(Неопределено);
				МассивСтарыхЗначений.Добавить(2);
				
			ИначеЕсли ДеревоПодбораНаФорме.ТекущиеДанные.Уровень() = 3 Тогда
				
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.Родитель.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.Родитель.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущиеДанные.НоменклатураКонтрагентЗаказ);
				МассивСтарыхЗначений.Добавить(3);
				
			КонецЕсли;
			
			МассивСтарыхЗначений.Добавить(ДеревоПодбораНаФорме.ТекущаяКолонка.Имя);
			
		КонецЕсли; 
		
		// Запомним развороты тех строк, которые пользователь делал вручную
		ТаблицаРазворотовСтрок = Новый ТаблицаЗначений;
		ТаблицаРазворотовСтрок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаРазворотовСтрок.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаРазворотовСтрок.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаРазворотовСтрок.Колонки.Добавить("Уровень", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1));
		
		Если ДеревоПодбора.Строки.Количество() > 0 Тогда
			
			Если (ТипЗнч(ДеревоПодбора.Строки[0].Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И ТипЗнч(ДеревоПодбора.Строки[0].ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
			   И НЕ ПорядокОтображенияДерева)
			 ИЛИ (ТипЗнч(ДеревоПодбора.Строки[0].НоменклатураКонтрагентЗаказ) = Тип("СправочникСсылка.Контрагенты")
			   И ПорядокОтображенияДерева) Тогда
			   
				мФормаПрогрессора.КомментарийЗначения = "Запоминаются развороты строк ...";
				мФормаПрогрессора.МаксимальноеЗначение = ДеревоПодбора.Строки.Количество() - 1;
		
				УровеньРазворота = Неопределено;
				
				Для каждого Строка1 Из ДеревоПодбора.Строки Цикл
					
					мФормаПрогрессора.Значение = ДеревоПодбора.Строки.Индекс(Строка1);
					
					Если ДеревоПодбораНаФорме.Развернут(Строка1) Тогда
						
						УровеньРазворота = 1;
						
					Иначе
						
						Продолжить;
						
					КонецЕсли;
					
					Для каждого Строка2 Из Строка1.Строки Цикл
						
						Если УровеньРазворота = Неопределено Тогда
							
							Прервать;
							
						КонецЕсли;
						
						Если ДеревоПодбораНаФорме.Развернут(Строка2) Тогда
							
							УровеньРазворота = 2;
							
						Иначе
							
							Продолжить;
							
						КонецЕсли;
						
						Для каждого Строка3 Из Строка2.Строки Цикл
							
							Если УровеньРазворота = Неопределено Тогда
								
								Прервать;
								
							КонецЕсли;
							
							Если ДеревоПодбораНаФорме.Развернут(Строка3) Тогда
								
								УровеньРазворота = 3;
								
							Иначе
								
								Продолжить;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					Если УровеньРазворота <> Неопределено Тогда
						
						НоваяСтрока = ТаблицаРазворотовСтрок.Добавить();
						
						Если ПорядокОтображенияДерева Тогда
							
							НоваяСтрока.Контрагент = Строка1.НоменклатураКонтрагентЗаказ;
							
						Иначе
							
							НоваяСтрока.Номенклатура = Строка1.Номенклатура;
							НоваяСтрока.ХарактеристикаНоменклатуры = Строка1.ХарактеристикаНоменклатуры;
							
						КонецЕсли;
						
						НоваяСтрока.Уровень = УровеньРазворота;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Заполним дерево подбора
	
	ДеревоПодбора.Строки.Очистить();
	
	Если ДеревоПодбораНаФорме <> Неопределено Тогда
		
		ДеревоПодбораНаФорме.Колонки.СуммаУпрУчета.ТекстШапки = "Сумма в " + СокрЛП(глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование);
		ДеревоПодбораНаФорме.Колонки.ЦенаУпрУчета.ТекстШапки  = "Цена в "  + СокрЛП(глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование);
		
	КонецЕсли;

	ПоследнийКонтрагент                 = Неопределено;
	ПоследняяНоменклатура               = Неопределено;
	ПоследняяХарактеристикаНоменклатуры = Неопределено;
	ПоследняяДатаПотребности            = Неопределено;
	СтрокаДатаПотребности               = Неопределено;
	
	Группировки = Новый ТаблицаЗначений;
	Группировки.Колонки.Добавить("Имя");
	
	Если ПорядокОтображенияДерева Тогда
		
		Если ДеревоПодбораНаФорме <> Неопределено Тогда
			
			ДеревоПодбораНаФорме.Колонки.НоменклатураКонтрагентЗаказ.ТекстШапки = "Контрагент/Номенклатура/Дата потребности/Заказ";
			
		КонецЕсли;
		
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Поставщик";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Номенклатура";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "ДатаПотребности";
		
	Иначе
		
		Если ДеревоПодбораНаФорме <> Неопределено Тогда
			
			ДеревоПодбораНаФорме.Колонки.НоменклатураКонтрагентЗаказ.ТекстШапки = "Номенклатура/Дата потребности/Контрагент/Заказ";
			
		КонецЕсли;
		
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Номенклатура";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "ДатаПотребности";
		НоваяГруппировка = Группировки.Добавить();
		НоваяГруппировка.Имя = "Поставщик";
		
	КонецЕсли;
	
	НоваяГруппировка = Группировки.Добавить();
	НоваяГруппировка.Имя = "ИДОбъекта";
	
	мФормаПрогрессора.КомментарийЗначения = "Анализируется и заполняется дерево ...";
	СтруктураТаблиц = УправлениеКонтактами.ПолучитьСтруктуруРаспределенныхТаблиц(ТаблицаПотребности, ТаблицаНоменклатурыОбъектов, мФормаПрогрессора.МаксимальноеЗначение, мФормаПрогрессора.Значение);
	
	ВременнаяТаблицаПотребности = СтруктураТаблиц.ТаблицаПотребности;
	ТаблицаЗаказовПоставщикам = СтруктураТаблиц.ТаблицаЗаказовПоставщикам;
	
	// Установим основного поставщика для незаказанных потребностей
	Для каждого СтрокаВременнойТаблицыПотребностей из ВременнаяТаблицаПотребности Цикл
		
		Если ТаблицаЗаказовПоставщикам.Найти(СтрокаВременнойТаблицыПотребностей.Индекс, "Индекс") = Неопределено
			И НЕ СтрокаВременнойТаблицыПотребностей.Номенклатура.ОсновнойПоставщик.Пустая() Тогда
		
			НоваяСтрока = ТаблицаЗаказовПоставщикам.Добавить();
			НоваяСтрока.Индекс = СтрокаВременнойТаблицыПотребностей.Индекс;
			НоваяСтрока.Поставщик = СтрокаВременнойТаблицыПотребностей.Номенклатура.ОсновнойПоставщик;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураЗначенийГруппировок = Новый Структура;
	
	Для каждого СтрокаГруппировки Из Группировки Цикл
	
		Если СтрокаГруппировки.Имя = "Поставщик" ИЛИ СтрокаГруппировки.Имя = "ИДОбъекта" Тогда
			
			КопияИсходнойТаблицы = ТаблицаЗаказовПоставщикам.Скопировать();
			
		Иначе
			
			КопияИсходнойТаблицы = ВременнаяТаблицаПотребности.Скопировать();
			
		КонецЕсли;
		
		Если СтрокаГруппировки.Имя = "Номенклатура" Тогда
			
			КопияИсходнойТаблицы.Свернуть(СтрокаГруппировки.Имя + ", ХарактеристикаНоменклатуры, Тара");
			СтруктураЗначенийГруппировок.Вставить(СтрокаГруппировки.Имя, КопияИсходнойТаблицы.Скопировать());
			
		Иначе
			
			КопияИсходнойТаблицы.Свернуть(СтрокаГруппировки.Имя);
			СтруктураЗначенийГруппировок.Вставить(СтрокаГруппировки.Имя, КопияИсходнойТаблицы.ВыгрузитьКолонку(СтрокаГруппировки.Имя));
			
		КонецЕсли;
	
	КонецЦикла;
	
	Дерево = УправлениеКонтактами.ПолучитьДеревоРаспределенияПотребностей(ВременнаяТаблицаПотребности.Скопировать(), ТаблицаЗаказовПоставщикам, СтруктураЗначенийГруппировок, Группировки.Скопировать(), Истина, мФормаПрогрессора.МаксимальноеЗначение, мФормаПрогрессора.Значение);
	
	ТаблицаНакопленияСуммЗаказов = Новый ТаблицаЗначений;
	ТаблицаНакопленияСуммЗаказов.Колонки.Добавить("Номенклатура");
	ТаблицаНакопленияСуммЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаНакопленияСуммЗаказов.Колонки.Добавить("ДатаПотребности");
	ТаблицаНакопленияСуммЗаказов.Колонки.Добавить("Сумма");
	
	мФормаПрогрессора.МаксимальноеЗначение = Дерево.Строки.Количество();
	ЗаполнитьСтрокиДерева(ДеревоПодбора, Дерево, Группировки, ТаблицаНакопленияСуммЗаказов, мФормаПрогрессора.Значение);
	
	// Для режима, когда первым уровнем дерева является Контрагент(поставщик) считать
	// итоги по номенклатуре и датам надо отдельно
	
	Если ПорядокОтображенияДерева Тогда
	
		ВременнаяТаблицаПотребности.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Индекс, ДатаПотребности", "КоличествоПлана");
		ВременнаяТаблицаПотребности.Колонки.Добавить("КоличествоФакта", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
		
		Для каждого СтрокаТаблицыПотребности Из ВременнаяТаблицаПотребности Цикл
			
			ИтогоКоличество = 0;
			СтрокиТаблицыЗаказовПоставщикам = ТаблицаЗаказовПоставщикам.НайтиСтроки(Новый Структура("Индекс", СтрокаТаблицыПотребности.Индекс));
			
			Для каждого СтрокаТаблицыЗаказовПоставщикам Из СтрокиТаблицыЗаказовПоставщикам Цикл
				
				ИтогоКоличество = ИтогоКоличество + СтрокаТаблицыЗаказовПоставщикам.Количество;
				
			КонецЦикла;
			
			СтрокаТаблицыПотребности.КоличествоФакта = ИтогоКоличество;
			
		КонецЦикла;
		
		ВременнаяТаблицаПотребности.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", "КоличествоПлана, КоличествоФакта");
		ТаблицаНакопленияСуммЗаказов.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", "Сумма");
		
		ВременнаяТаблицаПотребностиБезДат = ВременнаяТаблицаПотребности.Скопировать();
		ВременнаяТаблицаПотребностиБезДат.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоПлана, КоличествоФакта");
		
		ТаблицаНакопленияСуммЗаказовБезДат = ТаблицаНакопленияСуммЗаказов.Скопировать();
		ТаблицаНакопленияСуммЗаказовБезДат.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Сумма");
		
		Для каждого СтрокаКонтрагента Из ДеревоПодбора.Строки Цикл
			
			Для каждого СтрокаНоменклатуры Из СтрокаКонтрагента.Строки Цикл
			
				СтрокиТемповойТаблицыПотребностиБезДат = ВременнаяТаблицаПотребностиБезДат.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры));
				
				Если СтрокиТемповойТаблицыПотребностиБезДат.Количество() > 0 Тогда
					
					СтрокаНоменклатуры.НеобходимоеКоличество = СтрокиТемповойТаблицыПотребностиБезДат[0].КоличествоПлана;
					СтрокаНоменклатуры.ЗаказанноеКоличество = СтрокиТемповойТаблицыПотребностиБезДат[0].КоличествоФакта;
					
				КонецЕсли;
				
				СтрокиТаблицыНакопленияСуммЗаказовБезДат = ТаблицаНакопленияСуммЗаказовБезДат.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры));
				
				Если СтрокиТаблицыНакопленияСуммЗаказовБезДат.Количество() > 0 Тогда
					
					СтрокаНоменклатуры.СуммаУпрУчета = СтрокиТаблицыНакопленияСуммЗаказовБезДат[0].Сумма;
					
				КонецЕсли;
				
				Для каждого СтрокаДатыПотребности Из СтрокаНоменклатуры.Строки Цикл
				
					СтрокиТемповойТаблицыПотребности = ВременнаяТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры, ?(ТипЗнч(СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ) = Тип("Строка"), '00010101000000', СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ)));
					
					Если СтрокиТемповойТаблицыПотребности.Количество() > 0 Тогда
						
						СтрокаДатыПотребности.НеобходимоеКоличество = СтрокиТемповойТаблицыПотребности[0].КоличествоПлана;
						СтрокаДатыПотребности.ЗаказанноеКоличество = СтрокиТемповойТаблицыПотребности[0].КоличествоФакта;
						
					КонецЕсли; 
					
					СтрокиТаблицыНакопленияСуммЗаказов = ТаблицаНакопленияСуммЗаказов.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.ХарактеристикаНоменклатуры, ?(ТипЗнч(СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ) = Тип("Строка"), '00010101000000', СтрокаДатыПотребности.НоменклатураКонтрагентЗаказ)));
					
					Если СтрокиТаблицыНакопленияСуммЗаказов.Количество() > 0 Тогда
						
						СтрокаДатыПотребности.СуммаУпрУчета = СтрокиТаблицыНакопленияСуммЗаказов[0].Сумма;
						
					КонецЕсли;
				
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Закончили заполнение дерева подбора
	
	Если ДеревоПодбораНаФорме <> Неопределено Тогда
		
		// Посмотрим, что у нас с отборами
		КопияСтруктурыОтборов = Новый Структура;
		
		Для каждого ЭлементОтбора Из ОтборыДерева Цикл
			
			Если ЭлементОтбора.Использование Тогда
				
				МассивСтруктуры = Новый Массив;
				МассивСтруктуры.Добавить(ЭлементОтбора.ВидСравнения);
				МассивСтруктуры.Добавить(ЭлементОтбора.Значение);
				МассивСтруктуры.Добавить(ЭлементОтбора.ЗначениеС);
				МассивСтруктуры.Добавить(ЭлементОтбора.ЗначениеПо);
				МассивСтруктуры.Добавить(Истина);
				КопияСтруктурыОтборов.Вставить(ЭлементОтбора.Имя, МассивСтруктуры);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КопияСтруктурыОтборов.Количество() <> 0 Тогда
			
			СписокНайденныхОтборов = Новый СписокЗначений;
			ПроверитьОтбор(КопияСтруктурыОтборов, ДеревоПодбора, СписокНайденныхОтборов);
			
		КонецЕсли;
		
		// Найдем прошлую строку и установим ее, чтобы выделенная ячейка в дереве не "скакала"
		Если МассивСтарыхЗначений.Количество() = 6 Тогда
			
			мФормаПрогрессора.КомментарийЗначения = "Определяется прошлая строка ...";
			мФормаПрогрессора.МаксимальноеЗначение = ДеревоПодбора.Строки.Количество() - 1;
			
			НайденнаяСтрока = Неопределено;
			
			Для каждого Строка0 Из ДеревоПодбора.Строки Цикл
				
				мФормаПрогрессора.Значение = ДеревоПодбора.Строки.Индекс(Строка0);
				
				Если Строка0.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[0] Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Строка0.Уровень() = МассивСтарыхЗначений[4] Тогда
					
					НайденнаяСтрока = Строка0;
					Прервать;
					
				КонецЕсли;
				
				Для каждого Строка1 Из Строка0.Строки Цикл
					
					Если Строка1.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[1] Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если Строка1.Уровень() = МассивСтарыхЗначений[4] Тогда
						
						НайденнаяСтрока = Строка1;
						Прервать;
						
					КонецЕсли;
					
					Для каждого Строка2 Из Строка1.Строки Цикл
						
						Если Строка2.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[2] Тогда
							
							Продолжить;
							
						КонецЕсли;
						
						Если Строка2.Уровень() = МассивСтарыхЗначений[4] Тогда
							
							НайденнаяСтрока = Строка2;
							Прервать;
							
						КонецЕсли;
						
						Для каждого Строка3 Из Строка2.Строки Цикл
							
							Если Строка3.НоменклатураКонтрагентЗаказ <> МассивСтарыхЗначений[3] Тогда
								
								Продолжить;
								
							КонецЕсли;
							
							НайденнаяСтрока = Строка3;
							Прервать;
							
						КонецЦикла;
						
						Если НайденнаяСтрока <> Неопределено Тогда
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НайденнаяСтрока <> Неопределено Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НайденнаяСтрока <> Неопределено Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденнаяСтрока <> Неопределено Тогда
			
				ДеревоПодбораНаФорме.ТекущаяСтрока  = НайденнаяСтрока;
				ДеревоПодбораНаФорме.ТекущаяКолонка = ДеревоПодбораНаФорме.Колонки[МассивСтарыхЗначений[5]];
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Установим текущий уровень разворота строк
		УстановитьРазворотСтрок(ДеревоПодбора, ДеревоПодбораНаФорме, УровеньРазворотаДерева, ТаблицаРазворотовСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет установленный пользователем отбор и удаляет лишние строки дерева значений,
//  которые не удовлетворяют текущему отбору
//
// Параметры
//  КопияСтруктурыОтборов  - Структура, содержащая отборы, виды сравнения и значения
//  ПрошлаяСтрока          - СтрокаДереваЗначений, строка-родитель, прошлого уровня
//  СписокНайденныхОтборов - СписокЗначений, список отборов, которые найдены в текущей ветке дерева значений
//
// Возвращаемые значения
//  НЕТ
Процедура ПроверитьОтбор(КопияСтруктурыОтборов, ПрошлаяСтрока, СписокНайденныхОтборов)

	ИндексСтроки = 0;
	
	ПрошлыйСписокНайденныхОтборов = СписокНайденныхОтборов.Скопировать();
	
	мФормаПрогрессора.Значение = "Устанавливаются отборы ...";
	мФормаПрогрессора.МаксимальноеЗначение = ПрошлаяСтрока.Строки.Количество() - 1;
		
	Пока Истина Цикл
		
		мФормаПрогрессора.Значение = ИндексСтроки;
			
		Если (ИндексСтроки + 1) > ПрошлаяСтрока.Строки.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяСтрока = ПрошлаяСтрока.Строки[ИндексСтроки];
		
		СписокНайденныхОтборов = ПрошлыйСписокНайденныхОтборов.Скопировать();
	
		Если ТекущаяСтрока.Уровень() = 0 Тогда
			СписокНайденныхОтборов = Новый СписокЗначений;
		КонецЕсли; 
		
		УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, СписокНайденныхОтборов);
		
		Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
			
			УдалятьСтроку = Ложь;
			МассивОтбора = Неопределено;
			Если КопияСтруктурыОтборов.Свойство("ЗаказПоставщику", МассивОтбора) И НЕ УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, СписокНайденныхОтборов) И ТекущаяСтрока.Уровень() = 3  Тогда
				УдалятьСтроку = Истина;
			Иначе
				Для каждого ЭлементСтруктуры Из КопияСтруктурыОтборов Цикл
					Если СписокНайденныхОтборов.НайтиПоЗначению(ЭлементСтруктуры.Ключ) = Неопределено Тогда
						УдалятьСтроку = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			Если УдалятьСтроку Тогда
				ПрошлаяСтрока.Строки.Удалить(ТекущаяСтрока);
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ВспомогательныйСписокНайденныхОтборов = ПрошлыйСписокНайденныхОтборов.Скопировать();
			УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, ТекущаяСтрока, ВспомогательныйСписокНайденныхОтборов);
			ПроверитьОтбор(КопияСтруктурыОтборов, ТекущаяСтрока, ВспомогательныйСписокНайденныхОтборов);
			
			Если ТекущаяСтрока.Строки.Количество() = 0 Тогда
				
				ПрошлаяСтрока.Строки.Удалить(ТекущаяСтрока);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли; 
	
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция проверяет, удовлетворяет ли строка дерева значений условиям отбора
//
// Параметры
//  КопияСтруктурыОтборов    - Структура, содержащая отборы, виды сравнения и значения
//  СтрокаДерева             - СтрокаДереваЗначений, для которой необходимо проверить отборы
//  ВходящийСписокИменОтбора - СписокЗначений, имена отборов, которые уже существуют в текущей ветке дерева
//
// Возвращаемое значение:
//   Булево - удовлетворят ли строка дерева значений, текущим параметрам отбора
//
Функция УдовлетворяетУсловиямОтбора(КопияСтруктурыОтборов, СтрокаДерева, ВходящийСписокИменОтбора)
	
	СписокИменОтбора = Новый СписокЗначений;
	
	Для каждого ЭлементСруктуры Из КопияСтруктурыОтборов Цикл
	
		Если ЭлементСруктуры.Ключ = "Номенклатура" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 1 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.Номенклатура) Тогда
						СписокИменОтбора.Добавить("Номенклатура");
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 0 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.Номенклатура) Тогда
						СписокИменОтбора.Добавить("Номенклатура");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ХарактеристикаНоменклатуры" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 1 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.ХарактеристикаНоменклатуры) Тогда
						СписокИменОтбора.Добавить("ХарактеристикаНоменклатуры");
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 0 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.ХарактеристикаНоменклатуры) Тогда
						СписокИменОтбора.Добавить("ХарактеристикаНоменклатуры");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "Контрагент" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 0 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("Контрагент");
					КонецЕсли; 
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 2 Тогда
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("Контрагент");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ЗаказПоставщику" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.Заказ) Тогда
					СписокИменОтбора.Добавить("ЗаказПоставщику");
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ДатаПотребности" Тогда
			Если ПорядокОтображенияДерева Тогда
				Если СтрокаДерева.Уровень() = 2 Тогда
					Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) <> Тип("Дата") Тогда
						Продолжить;
					КонецЕсли; 
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("ДатаПотребности");
					КонецЕсли; 
				КонецЕсли;
			Иначе
				Если СтрокаДерева.Уровень() = 1 Тогда
					Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) <> Тип("Дата") Тогда
						Продолжить;;
					КонецЕсли; 
					Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.НоменклатураКонтрагентЗаказ) Тогда
						СписокИменОтбора.Добавить("ДатаПотребности");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "СуммаВзаиморасчетов" Тогда
			Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева.СуммаВзаиморасчетовЗаказа) Тогда
				СписокИменОтбора.Добавить("СуммаВзаиморасчетов");
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНеЗаказанныеТовары" Тогда
			Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) = Тип("Строка")
			   И ТипЗнч(СтрокаДерева.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			   И НЕ СтрокаДерева.Номенклатура.Пустая() Тогда
				Если СтрокаДерева.НеобходимоеКоличество > СтрокаДерева.ЗаказанноеКоличество Тогда
					СписокИменОтбора.Добавить("ОтбиратьНеЗаказанныеТовары");
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНеВыполненныеДатыПотребности" Тогда
			Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) = Тип("Дата") Тогда
				Если СтрокаДерева.НеобходимоеКоличество > СтрокаДерева.ЗаказанноеКоличество Тогда
					СписокИменОтбора.Добавить("ОтбиратьНеВыполненныеДатыПотребности");
				КонецЕсли; 
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности" Тогда
			Если ТипЗнч(СтрокаДерева.НоменклатураКонтрагентЗаказ) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаДерева.НоменклатураКонтрагентЗаказ = "Не заявлено в плане потребности" Тогда
				СписокИменОтбора.Добавить("ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности");
			КонецЕсли; 
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьИзмененныеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НЕ НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() И НайденнаяСтрокаОбъекта.Объект.Модифицированность() Тогда
							СписокИменОтбора.Добавить("ОтбиратьИзмененныеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНовыеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() Тогда
							СписокИменОтбора.Добавить("ОтбиратьНовыеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементСруктуры.Ключ = "ОтбиратьНовыеИИзмененныеЗаказы" Тогда
			Если СтрокаДерева.Уровень() = 3 Тогда
				Если СтрокаДерева.ИДОбъекта <> Неопределено Тогда
					НайденнаяСтрокаОбъекта = ТаблицаОбъектов.Найти(СтрокаДерева.ИДОбъекта, "ИДОбъекта");
					Если НайденнаяСтрокаОбъекта <> Неопределено Тогда
						Если НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() ИЛИ (НЕ НайденнаяСтрокаОбъекта.Объект.Ссылка.Пустая() И НайденнаяСтрокаОбъекта.Объект.Модифицированность()) Тогда
							СписокИменОтбора.Добавить("ОтбиратьНовыеИИзмененныеЗаказы");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		Иначе
			Если ПроверитьЗначениеОтбора(ЭлементСруктуры.Значение, СтрокаДерева[ЭлементСруктуры.Ключ]) Тогда
				СписокИменОтбора.Добавить(ЭлементСруктуры.Ключ);
			КонецЕсли;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого ЭлементСписка Из СписокИменОтбора Цикл
		ВходящийСписокИменОтбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла; 
	
	Возврат (СписокИменОтбора.Количество() > 0);
	
КонецФункции

// Функция проверяет, соответствует ли значение строки дерева значений, условиям отбора
//
// Параметры
//  МассивОтбора - Массив, со значениями и видами сравнения отбора
//  ЗначениеОтбора - Значение, которое надо проверить на соответствие параметрам отбора
//
// Возвращаемое значение:
//   Булево
//
Функция ПроверитьЗначениеОтбора(МассивОтбора, ЗначениеОтбора)

	ВидСравненияОтбора = МассивОтбора[0];
	Если ТипЗнч(ВидСравненияОтбора) <> Тип("ВидСравнения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат (ЗначениеОтбора = МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат (ЗначениеОтбора <> МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат (ЗначениеОтбора > МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат (ЗначениеОтбора >= МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат (ЗначениеОтбора < МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат (ЗначениеОтбора <= МассивОтбора[1]);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		НайденныйЭлемент = МассивОтбора[1].НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент <> Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		НайденныйЭлемент = МассивОтбора[1].НайтиПоЗначению(ЗначениеОтбора);
		Возврат (НайденныйЭлемент = Неопределено);
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.Интервал Тогда
		Возврат ((ЗначениеОтбора > МассивОтбора[2]) И (ЗначениеОтбора < МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Возврат ((ЗначениеОтбора >= МассивОтбора[2]) И (ЗначениеОтбора <= МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяНачало Тогда
		Возврат ((ЗначениеОтбора >= МассивОтбора[2]) И (ЗначениеОтбора < МассивОтбора[3]));
	ИначеЕсли ВидСравненияОтбора = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Возврат ((ЗначениеОтбора > МассивОтбора[2]) И (ЗначениеОтбора <= МассивОтбора[3]));
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

// Процедура устанавливает заданный пользователем разворот строк дерева значений
//
// Параметры
//  ДеревоПодбора          - ДеревоЗначений, которое необходимо заполнить данными
//  ДеревоПодбораНаФорме   - ТабличноеПоле, элемент управления для дерева значений
//  УровеньРазворотаДерева - Число, уровень строк дерева значений, до которого необходимо
//                           развернуть строки после заполнения
//
// Возвращаемые значения
//  НЕТ
Процедура УстановитьРазворотСтрок(ДеревоПодбора, ДеревоПодбораНаФорме, УровеньРазворотаДерева, ТаблицаРазворотовСтрок = Неопределено) Экспорт

	мФормаПрогрессора.КомментарийЗначения = "Устанавливается разворот строк ...";
	мФормаПрогрессора.МаксимальноеЗначение = ДеревоПодбора.Строки.Количество() - 1;
		
	Для каждого СтрокаДерева0 Из ДеревоПодбора.Строки Цикл
		мФормаПрогрессора.Значение = ДеревоПодбора.Строки.Индекс(СтрокаДерева0);
		ЛокальныйУровеньРазворота = УровеньРазворотаДерева;
		Если ТипЗнч(ТаблицаРазворотовСтрок) = Тип("ТаблицаЗначений") Тогда
			Если ПорядокОтображенияДерева Тогда
				СтрокиТаблицы = ТаблицаРазворотовСтрок.НайтиСтроки(Новый Структура("Контрагент", СтрокаДерева0.НоменклатураКонтрагентЗаказ));
			Иначе
				СтрокиТаблицы = ТаблицаРазворотовСтрок.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаДерева0.Номенклатура, СтрокаДерева0.ХарактеристикаНоменклатуры));
			КонецЕсли;
			Если СтрокиТаблицы.Количество() > 0 Тогда
				ЛокальныйУровеньРазворота = СтрокиТаблицы[0].Уровень;
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаДерева0.Уровень() < ЛокальныйУровеньРазворота Тогда
			Если НЕ ДеревоПодбораНаФорме.Развернут(СтрокаДерева0) И СтрокаДерева0.Строки.Количество() > 0  Тогда
				ДеревоПодбораНаФорме.Развернуть(СтрокаДерева0, Истина);
			КонецЕсли; 
		Иначе
			Если ДеревоПодбораНаФорме.Развернут(СтрокаДерева0) И СтрокаДерева0.Строки.Количество() > 0  Тогда
				ДеревоПодбораНаФорме.Свернуть(СтрокаДерева0);
			КонецЕсли; 
		КонецЕсли;
		Для каждого СтрокаДерева1 Из СтрокаДерева0.Строки Цикл
			Если СтрокаДерева1.Уровень() < ЛокальныйУровеньРазворота Тогда
				Если НЕ ДеревоПодбораНаФорме.Развернут(СтрокаДерева1) И СтрокаДерева1.Строки.Количество() > 0 Тогда
					ДеревоПодбораНаФорме.Развернуть(СтрокаДерева1, Истина);
				КонецЕсли;
			Иначе
				Если ДеревоПодбораНаФорме.Развернут(СтрокаДерева1) И СтрокаДерева1.Строки.Количество() > 0  Тогда
					ДеревоПодбораНаФорме.Свернуть(СтрокаДерева1);
				КонецЕсли;
			КонецЕсли;
			Для каждого СтрокаДерева2 Из СтрокаДерева1.Строки Цикл
				Если СтрокаДерева2.Уровень() < ЛокальныйУровеньРазворота Тогда
					Если НЕ ДеревоПодбораНаФорме.Развернут(СтрокаДерева2) И СтрокаДерева2.Строки.Количество() > 0  Тогда
						ДеревоПодбораНаФорме.Развернуть(СтрокаДерева2, Истина);
					КонецЕсли;
				Иначе
					Если ДеревоПодбораНаФорме.Развернут(СтрокаДерева2) И СтрокаДерева2.Строки.Количество() > 0  Тогда
						ДеревоПодбораНаФорме.Свернуть(СтрокаДерева2);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

// Процедура копирует доступные поля и элементы одного объекта "Отбор" в другой
//
// Параметры:
//  ЧтоКопировать - Отбор, элементы и доступные поля которого надо копировать
//  КудаКопировать - Отбор, элементы и доступные поля которого надо создать
//
Процедура СкопироватьОтбор(ЧтоКопировать, КудаКопировать) Экспорт
	
	КудаКопировать.УстановитьДоступныеПоля(ЧтоКопировать.ПолучитьДоступныеПоля());
	
	Для каждого ЭлементОтбора Из ЧтоКопировать Цикл
		
		НовыйОтбор = КудаКопировать.Найти(ЭлементОтбора.Имя);
		Если НовыйОтбор = Неопределено Тогда
			НовыйОтбор = КудаКопировать.Добавить(ЭлементОтбора.Имя, ЭлементОтбора.Имя, ЭлементОтбора.Представление);
		КонецЕсли; 
		НовыйОтбор.ВидСравнения  = ЭлементОтбора.ВидСравнения;
		НовыйОтбор.Значение      = ЭлементОтбора.Значение;
		НовыйОтбор.ЗначениеС     = ЭлементОтбора.ЗначениеС;
		НовыйОтбор.ЗначениеПо    = ЭлементОтбора.ЗначениеПо;
		НовыйОтбор.Использование = ЭлементОтбора.Использование;

	КонецЦикла; 

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

// Заполним доступные поля отбора
ПоляОтборов = ОтборыДерева.ПолучитьДоступныеПоля();
ПоляОтборов.Добавить("Номенклатура", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ПоляОтборов.Добавить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ПоляОтборов.Добавить("Контрагент", "Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
ПоляОтборов.Добавить("ЗаказПоставщику", "Заказ поставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
ПоляОтборов.Добавить("ДатаПотребности", "Дата потребности", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
ПоляОтборов.Добавить("НеобходимоеКоличество", "Необходимое количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("ЗаказанноеКоличество", "Заказанное количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("ЦенаУпрУчета", "Цена в валюте упр.учета", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
ПоляОтборов.Добавить("СуммаУпрУчета", "Сумма в валюте упр.учета", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
ПоляОтборов.Добавить("СуммаВзаиморасчетов", "Сумма в валюте взаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
ПоляОтборов.Добавить("ОтбиратьНеЗаказанныеТовары", "Отбирать не заказанные товары", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНеВыполненныеДатыПотребности", "Отбирать не выполненные даты потребности", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности", "Отбирать даты поставки заказов не заявленные в плане потребности", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьИзмененныеЗаказы", "Отбирать измененные заказы", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеЗаказы", "Отбирать новые заказы", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеИИзмененныеЗаказы", "Отбирать новые и измененные заказы", Новый ОписаниеТипов("Булево"));

// Заполним элементы отбора
Для Индекс = 0 По ПоляОтборов.Количество() - 1 Цикл
	
	ПоляОтборов[Индекс].Отбор = Истина;
	ОтборыДерева.Добавить(ПоляОтборов[Индекс].Имя, ПоляОтборов[Индекс].Имя, ПоляОтборов[Индекс].Представление);
	
КонецЦикла;

ОтборыДерева.ОтбиратьНеЗаказанныеТовары.Значение = Истина;
ОтборыДерева.ОтбиратьНеВыполненныеДатыПотребности.Значение = Истина;
ОтборыДерева.ОтбиратьДатыЗаказовНеЗаявленныеВПланеПотребности.Значение = Истина;
ОтборыДерева.ОтбиратьИзмененныеЗаказы.Значение = Истина;
ОтборыДерева.ОтбиратьНовыеЗаказы.Значение = Истина;
ОтборыДерева.ОтбиратьНовыеИИзмененныеЗаказы.Значение = Истина;

// Заполним доступные поля отбора дерева заказов
ПоляОтборов = ОтборыДереваЗаказов.ПолучитьДоступныеПоля();
ПоляОтборов.Добавить("Номенклатура", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ПоляОтборов.Добавить("ХарактеристикаНоменклатуры", "Характеристика номенклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ПоляОтборов.Добавить("Контрагент", "Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
ПоляОтборов.Добавить("ЗаказПоставщику", "Заказ поставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
ПоляОтборов.Добавить("ЗаказПокупателя", "Заказ покупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
ПоляОтборов.Добавить("ДатаПотребности", "Дата потребности", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
ПоляОтборов.Добавить("КоличествоПотребности", "Количество потребности", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("КоличествоЗаказов", "Количество заказов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3));
ПоляОтборов.Добавить("ОтбиратьНеВыполненныеДатыПотребности", "Отбирать не выполненные даты потребности", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНеВыполненныеЗаказыПокупателей", "Отбирать не выполненные заказы покупателей", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьИзмененныеЗаказы", "Отбирать измененные заказы поставщикам", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеЗаказы", "Отбирать новые заказы поставщикам", Новый ОписаниеТипов("Булево"));
ПоляОтборов.Добавить("ОтбиратьНовыеИИзмененныеЗаказы", "Отбирать новые и измененные заказы поставщикам", Новый ОписаниеТипов("Булево"));

// Заполним элементы отбора дерева заказов
Для Индекс = 0 По ПоляОтборов.Количество() - 1 Цикл
	
	ПоляОтборов[Индекс].Отбор = Истина;
	ОтборыДереваЗаказов.Добавить(ПоляОтборов[Индекс].Имя, ПоляОтборов[Индекс].Имя, ПоляОтборов[Индекс].Представление);
	
КонецЦикла;

ОтборыДереваЗаказов.ОтбиратьНеВыполненныеДатыПотребности.Значение = Истина;
ОтборыДереваЗаказов.ОтбиратьНеВыполненныеЗаказыПокупателей.Значение = Истина;
ОтборыДереваЗаказов.ОтбиратьИзмененныеЗаказы.Значение = Истина;
ОтборыДереваЗаказов.ОтбиратьНовыеЗаказы.Значение = Истина;
ОтборыДереваЗаказов.ОтбиратьНовыеИИзмененныеЗаказы.Значение = Истина;

ТаблицаОбъектов.Колонки.Добавить("ИДОбъекта", Новый ОписаниеТипов("Строка"));
ТаблицаОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументОбъект.ЗаказПоставщику"));

мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");

НП = Новый НастройкаПериода;

#КонецЕсли
